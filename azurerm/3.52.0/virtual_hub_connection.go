// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualhubconnection "github.com/golingon/terraproviders/azurerm/3.52.0/virtualhubconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVirtualHubConnection creates a new instance of [VirtualHubConnection].
func NewVirtualHubConnection(name string, args VirtualHubConnectionArgs) *VirtualHubConnection {
	return &VirtualHubConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualHubConnection)(nil)

// VirtualHubConnection represents the Terraform resource azurerm_virtual_hub_connection.
type VirtualHubConnection struct {
	Name      string
	Args      VirtualHubConnectionArgs
	state     *virtualHubConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VirtualHubConnection].
func (vhc *VirtualHubConnection) Type() string {
	return "azurerm_virtual_hub_connection"
}

// LocalName returns the local name for [VirtualHubConnection].
func (vhc *VirtualHubConnection) LocalName() string {
	return vhc.Name
}

// Configuration returns the configuration (args) for [VirtualHubConnection].
func (vhc *VirtualHubConnection) Configuration() interface{} {
	return vhc.Args
}

// DependOn is used for other resources to depend on [VirtualHubConnection].
func (vhc *VirtualHubConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(vhc)
}

// Dependencies returns the list of resources [VirtualHubConnection] depends_on.
func (vhc *VirtualHubConnection) Dependencies() terra.Dependencies {
	return vhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VirtualHubConnection].
func (vhc *VirtualHubConnection) LifecycleManagement() *terra.Lifecycle {
	return vhc.Lifecycle
}

// Attributes returns the attributes for [VirtualHubConnection].
func (vhc *VirtualHubConnection) Attributes() virtualHubConnectionAttributes {
	return virtualHubConnectionAttributes{ref: terra.ReferenceResource(vhc)}
}

// ImportState imports the given attribute values into [VirtualHubConnection]'s state.
func (vhc *VirtualHubConnection) ImportState(av io.Reader) error {
	vhc.state = &virtualHubConnectionState{}
	if err := json.NewDecoder(av).Decode(vhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vhc.Type(), vhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VirtualHubConnection] has state.
func (vhc *VirtualHubConnection) State() (*virtualHubConnectionState, bool) {
	return vhc.state, vhc.state != nil
}

// StateMust returns the state for [VirtualHubConnection]. Panics if the state is nil.
func (vhc *VirtualHubConnection) StateMust() *virtualHubConnectionState {
	if vhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vhc.Type(), vhc.LocalName()))
	}
	return vhc.state
}

// VirtualHubConnectionArgs contains the configurations for azurerm_virtual_hub_connection.
type VirtualHubConnectionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternetSecurityEnabled: bool, optional
	InternetSecurityEnabled terra.BoolValue `hcl:"internet_security_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RemoteVirtualNetworkId: string, required
	RemoteVirtualNetworkId terra.StringValue `hcl:"remote_virtual_network_id,attr" validate:"required"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// Routing: optional
	Routing *virtualhubconnection.Routing `hcl:"routing,block"`
	// Timeouts: optional
	Timeouts *virtualhubconnection.Timeouts `hcl:"timeouts,block"`
}
type virtualHubConnectionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_virtual_hub_connection.
func (vhc virtualHubConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vhc.ref.Append("id"))
}

// InternetSecurityEnabled returns a reference to field internet_security_enabled of azurerm_virtual_hub_connection.
func (vhc virtualHubConnectionAttributes) InternetSecurityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(vhc.ref.Append("internet_security_enabled"))
}

// Name returns a reference to field name of azurerm_virtual_hub_connection.
func (vhc virtualHubConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vhc.ref.Append("name"))
}

// RemoteVirtualNetworkId returns a reference to field remote_virtual_network_id of azurerm_virtual_hub_connection.
func (vhc virtualHubConnectionAttributes) RemoteVirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(vhc.ref.Append("remote_virtual_network_id"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_virtual_hub_connection.
func (vhc virtualHubConnectionAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(vhc.ref.Append("virtual_hub_id"))
}

func (vhc virtualHubConnectionAttributes) Routing() terra.ListValue[virtualhubconnection.RoutingAttributes] {
	return terra.ReferenceAsList[virtualhubconnection.RoutingAttributes](vhc.ref.Append("routing"))
}

func (vhc virtualHubConnectionAttributes) Timeouts() virtualhubconnection.TimeoutsAttributes {
	return terra.ReferenceAsSingle[virtualhubconnection.TimeoutsAttributes](vhc.ref.Append("timeouts"))
}

type virtualHubConnectionState struct {
	Id                      string                              `json:"id"`
	InternetSecurityEnabled bool                                `json:"internet_security_enabled"`
	Name                    string                              `json:"name"`
	RemoteVirtualNetworkId  string                              `json:"remote_virtual_network_id"`
	VirtualHubId            string                              `json:"virtual_hub_id"`
	Routing                 []virtualhubconnection.RoutingState `json:"routing"`
	Timeouts                *virtualhubconnection.TimeoutsState `json:"timeouts"`
}
