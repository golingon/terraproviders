// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	manageddisksastoken "github.com/golingon/terraproviders/azurerm/3.52.0/manageddisksastoken"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewManagedDiskSasToken creates a new instance of [ManagedDiskSasToken].
func NewManagedDiskSasToken(name string, args ManagedDiskSasTokenArgs) *ManagedDiskSasToken {
	return &ManagedDiskSasToken{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagedDiskSasToken)(nil)

// ManagedDiskSasToken represents the Terraform resource azurerm_managed_disk_sas_token.
type ManagedDiskSasToken struct {
	Name      string
	Args      ManagedDiskSasTokenArgs
	state     *managedDiskSasTokenState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) Type() string {
	return "azurerm_managed_disk_sas_token"
}

// LocalName returns the local name for [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) LocalName() string {
	return mdst.Name
}

// Configuration returns the configuration (args) for [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) Configuration() interface{} {
	return mdst.Args
}

// DependOn is used for other resources to depend on [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) DependOn() terra.Reference {
	return terra.ReferenceResource(mdst)
}

// Dependencies returns the list of resources [ManagedDiskSasToken] depends_on.
func (mdst *ManagedDiskSasToken) Dependencies() terra.Dependencies {
	return mdst.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) LifecycleManagement() *terra.Lifecycle {
	return mdst.Lifecycle
}

// Attributes returns the attributes for [ManagedDiskSasToken].
func (mdst *ManagedDiskSasToken) Attributes() managedDiskSasTokenAttributes {
	return managedDiskSasTokenAttributes{ref: terra.ReferenceResource(mdst)}
}

// ImportState imports the given attribute values into [ManagedDiskSasToken]'s state.
func (mdst *ManagedDiskSasToken) ImportState(av io.Reader) error {
	mdst.state = &managedDiskSasTokenState{}
	if err := json.NewDecoder(av).Decode(mdst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdst.Type(), mdst.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ManagedDiskSasToken] has state.
func (mdst *ManagedDiskSasToken) State() (*managedDiskSasTokenState, bool) {
	return mdst.state, mdst.state != nil
}

// StateMust returns the state for [ManagedDiskSasToken]. Panics if the state is nil.
func (mdst *ManagedDiskSasToken) StateMust() *managedDiskSasTokenState {
	if mdst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdst.Type(), mdst.LocalName()))
	}
	return mdst.state
}

// ManagedDiskSasTokenArgs contains the configurations for azurerm_managed_disk_sas_token.
type ManagedDiskSasTokenArgs struct {
	// AccessLevel: string, required
	AccessLevel terra.StringValue `hcl:"access_level,attr" validate:"required"`
	// DurationInSeconds: number, required
	DurationInSeconds terra.NumberValue `hcl:"duration_in_seconds,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedDiskId: string, required
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *manageddisksastoken.Timeouts `hcl:"timeouts,block"`
}
type managedDiskSasTokenAttributes struct {
	ref terra.Reference
}

// AccessLevel returns a reference to field access_level of azurerm_managed_disk_sas_token.
func (mdst managedDiskSasTokenAttributes) AccessLevel() terra.StringValue {
	return terra.ReferenceAsString(mdst.ref.Append("access_level"))
}

// DurationInSeconds returns a reference to field duration_in_seconds of azurerm_managed_disk_sas_token.
func (mdst managedDiskSasTokenAttributes) DurationInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mdst.ref.Append("duration_in_seconds"))
}

// Id returns a reference to field id of azurerm_managed_disk_sas_token.
func (mdst managedDiskSasTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mdst.ref.Append("id"))
}

// ManagedDiskId returns a reference to field managed_disk_id of azurerm_managed_disk_sas_token.
func (mdst managedDiskSasTokenAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(mdst.ref.Append("managed_disk_id"))
}

// SasUrl returns a reference to field sas_url of azurerm_managed_disk_sas_token.
func (mdst managedDiskSasTokenAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(mdst.ref.Append("sas_url"))
}

func (mdst managedDiskSasTokenAttributes) Timeouts() manageddisksastoken.TimeoutsAttributes {
	return terra.ReferenceAsSingle[manageddisksastoken.TimeoutsAttributes](mdst.ref.Append("timeouts"))
}

type managedDiskSasTokenState struct {
	AccessLevel       string                             `json:"access_level"`
	DurationInSeconds float64                            `json:"duration_in_seconds"`
	Id                string                             `json:"id"`
	ManagedDiskId     string                             `json:"managed_disk_id"`
	SasUrl            string                             `json:"sas_url"`
	Timeouts          *manageddisksastoken.TimeoutsState `json:"timeouts"`
}
