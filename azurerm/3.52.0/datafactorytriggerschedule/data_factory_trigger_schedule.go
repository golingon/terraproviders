// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datafactorytriggerschedule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Pipeline struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
}

type Schedule struct {
	// DaysOfMonth: list of number, optional
	DaysOfMonth terra.ListValue[terra.NumberValue] `hcl:"days_of_month,attr"`
	// DaysOfWeek: list of string, optional
	DaysOfWeek terra.ListValue[terra.StringValue] `hcl:"days_of_week,attr"`
	// Hours: list of number, optional
	Hours terra.ListValue[terra.NumberValue] `hcl:"hours,attr"`
	// Minutes: list of number, optional
	Minutes terra.ListValue[terra.NumberValue] `hcl:"minutes,attr"`
	// Monthly: min=0
	Monthly []Monthly `hcl:"monthly,block" validate:"min=0"`
}

type Monthly struct {
	// Week: number, optional
	Week terra.NumberValue `hcl:"week,attr"`
	// Weekday: string, required
	Weekday terra.StringValue `hcl:"weekday,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PipelineAttributes struct {
	ref terra.Reference
}

func (p PipelineAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PipelineAttributes) InternalWithRef(ref terra.Reference) PipelineAttributes {
	return PipelineAttributes{ref: ref}
}

func (p PipelineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PipelineAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](p.ref.Append("parameters"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DaysOfMonth() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("days_of_month"))
}

func (s ScheduleAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("days_of_week"))
}

func (s ScheduleAttributes) Hours() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("hours"))
}

func (s ScheduleAttributes) Minutes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("minutes"))
}

func (s ScheduleAttributes) Monthly() terra.ListValue[MonthlyAttributes] {
	return terra.ReferenceAsList[MonthlyAttributes](s.ref.Append("monthly"))
}

type MonthlyAttributes struct {
	ref terra.Reference
}

func (m MonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonthlyAttributes) InternalWithRef(ref terra.Reference) MonthlyAttributes {
	return MonthlyAttributes{ref: ref}
}

func (m MonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonthlyAttributes) Week() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("week"))
}

func (m MonthlyAttributes) Weekday() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("weekday"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PipelineState struct {
	Name       string            `json:"name"`
	Parameters map[string]string `json:"parameters"`
}

type ScheduleState struct {
	DaysOfMonth []float64      `json:"days_of_month"`
	DaysOfWeek  []string       `json:"days_of_week"`
	Hours       []float64      `json:"hours"`
	Minutes     []float64      `json:"minutes"`
	Monthly     []MonthlyState `json:"monthly"`
}

type MonthlyState struct {
	Week    float64 `json:"week"`
	Weekday string  `json:"weekday"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
