// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sqldatabase "github.com/golingon/terraproviders/azurerm/3.52.0/sqldatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSqlDatabase creates a new instance of [SqlDatabase].
func NewSqlDatabase(name string, args SqlDatabaseArgs) *SqlDatabase {
	return &SqlDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlDatabase)(nil)

// SqlDatabase represents the Terraform resource azurerm_sql_database.
type SqlDatabase struct {
	Name      string
	Args      SqlDatabaseArgs
	state     *sqlDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SqlDatabase].
func (sd *SqlDatabase) Type() string {
	return "azurerm_sql_database"
}

// LocalName returns the local name for [SqlDatabase].
func (sd *SqlDatabase) LocalName() string {
	return sd.Name
}

// Configuration returns the configuration (args) for [SqlDatabase].
func (sd *SqlDatabase) Configuration() interface{} {
	return sd.Args
}

// DependOn is used for other resources to depend on [SqlDatabase].
func (sd *SqlDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(sd)
}

// Dependencies returns the list of resources [SqlDatabase] depends_on.
func (sd *SqlDatabase) Dependencies() terra.Dependencies {
	return sd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SqlDatabase].
func (sd *SqlDatabase) LifecycleManagement() *terra.Lifecycle {
	return sd.Lifecycle
}

// Attributes returns the attributes for [SqlDatabase].
func (sd *SqlDatabase) Attributes() sqlDatabaseAttributes {
	return sqlDatabaseAttributes{ref: terra.ReferenceResource(sd)}
}

// ImportState imports the given attribute values into [SqlDatabase]'s state.
func (sd *SqlDatabase) ImportState(av io.Reader) error {
	sd.state = &sqlDatabaseState{}
	if err := json.NewDecoder(av).Decode(sd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sd.Type(), sd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SqlDatabase] has state.
func (sd *SqlDatabase) State() (*sqlDatabaseState, bool) {
	return sd.state, sd.state != nil
}

// StateMust returns the state for [SqlDatabase]. Panics if the state is nil.
func (sd *SqlDatabase) StateMust() *sqlDatabaseState {
	if sd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sd.Type(), sd.LocalName()))
	}
	return sd.state
}

// SqlDatabaseArgs contains the configurations for azurerm_sql_database.
type SqlDatabaseArgs struct {
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// ElasticPoolName: string, optional
	ElasticPoolName terra.StringValue `hcl:"elastic_pool_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxSizeBytes: string, optional
	MaxSizeBytes terra.StringValue `hcl:"max_size_bytes,attr"`
	// MaxSizeGb: string, optional
	MaxSizeGb terra.StringValue `hcl:"max_size_gb,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadScale: bool, optional
	ReadScale terra.BoolValue `hcl:"read_scale,attr"`
	// RequestedServiceObjectiveId: string, optional
	RequestedServiceObjectiveId terra.StringValue `hcl:"requested_service_objective_id,attr"`
	// RequestedServiceObjectiveName: string, optional
	RequestedServiceObjectiveName terra.StringValue `hcl:"requested_service_objective_name,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RestorePointInTime: string, optional
	RestorePointInTime terra.StringValue `hcl:"restore_point_in_time,attr"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// SourceDatabaseDeletionDate: string, optional
	SourceDatabaseDeletionDate terra.StringValue `hcl:"source_database_deletion_date,attr"`
	// SourceDatabaseId: string, optional
	SourceDatabaseId terra.StringValue `hcl:"source_database_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// Import: optional
	Import *sqldatabase.Import `hcl:"import,block"`
	// ThreatDetectionPolicy: optional
	ThreatDetectionPolicy *sqldatabase.ThreatDetectionPolicy `hcl:"threat_detection_policy,block"`
	// Timeouts: optional
	Timeouts *sqldatabase.Timeouts `hcl:"timeouts,block"`
}
type sqlDatabaseAttributes struct {
	ref terra.Reference
}

// Collation returns a reference to field collation of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("collation"))
}

// CreateMode returns a reference to field create_mode of azurerm_sql_database.
func (sd sqlDatabaseAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("create_mode"))
}

// CreationDate returns a reference to field creation_date of azurerm_sql_database.
func (sd sqlDatabaseAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("creation_date"))
}

// DefaultSecondaryLocation returns a reference to field default_secondary_location of azurerm_sql_database.
func (sd sqlDatabaseAttributes) DefaultSecondaryLocation() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("default_secondary_location"))
}

// Edition returns a reference to field edition of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("edition"))
}

// ElasticPoolName returns a reference to field elastic_pool_name of azurerm_sql_database.
func (sd sqlDatabaseAttributes) ElasticPoolName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("elastic_pool_name"))
}

// Encryption returns a reference to field encryption of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Encryption() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("encryption"))
}

// Id returns a reference to field id of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location"))
}

// MaxSizeBytes returns a reference to field max_size_bytes of azurerm_sql_database.
func (sd sqlDatabaseAttributes) MaxSizeBytes() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("max_size_bytes"))
}

// MaxSizeGb returns a reference to field max_size_gb of azurerm_sql_database.
func (sd sqlDatabaseAttributes) MaxSizeGb() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("max_size_gb"))
}

// Name returns a reference to field name of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("name"))
}

// ReadScale returns a reference to field read_scale of azurerm_sql_database.
func (sd sqlDatabaseAttributes) ReadScale() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("read_scale"))
}

// RequestedServiceObjectiveId returns a reference to field requested_service_objective_id of azurerm_sql_database.
func (sd sqlDatabaseAttributes) RequestedServiceObjectiveId() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("requested_service_objective_id"))
}

// RequestedServiceObjectiveName returns a reference to field requested_service_objective_name of azurerm_sql_database.
func (sd sqlDatabaseAttributes) RequestedServiceObjectiveName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("requested_service_objective_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_sql_database.
func (sd sqlDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("resource_group_name"))
}

// RestorePointInTime returns a reference to field restore_point_in_time of azurerm_sql_database.
func (sd sqlDatabaseAttributes) RestorePointInTime() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("restore_point_in_time"))
}

// ServerName returns a reference to field server_name of azurerm_sql_database.
func (sd sqlDatabaseAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("server_name"))
}

// SourceDatabaseDeletionDate returns a reference to field source_database_deletion_date of azurerm_sql_database.
func (sd sqlDatabaseAttributes) SourceDatabaseDeletionDate() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("source_database_deletion_date"))
}

// SourceDatabaseId returns a reference to field source_database_id of azurerm_sql_database.
func (sd sqlDatabaseAttributes) SourceDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("source_database_id"))
}

// Tags returns a reference to field tags of azurerm_sql_database.
func (sd sqlDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sd.ref.Append("tags"))
}

// ZoneRedundant returns a reference to field zone_redundant of azurerm_sql_database.
func (sd sqlDatabaseAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("zone_redundant"))
}

func (sd sqlDatabaseAttributes) Import() terra.ListValue[sqldatabase.ImportAttributes] {
	return terra.ReferenceAsList[sqldatabase.ImportAttributes](sd.ref.Append("import"))
}

func (sd sqlDatabaseAttributes) ThreatDetectionPolicy() terra.ListValue[sqldatabase.ThreatDetectionPolicyAttributes] {
	return terra.ReferenceAsList[sqldatabase.ThreatDetectionPolicyAttributes](sd.ref.Append("threat_detection_policy"))
}

func (sd sqlDatabaseAttributes) Timeouts() sqldatabase.TimeoutsAttributes {
	return terra.ReferenceAsSingle[sqldatabase.TimeoutsAttributes](sd.ref.Append("timeouts"))
}

type sqlDatabaseState struct {
	Collation                     string                                   `json:"collation"`
	CreateMode                    string                                   `json:"create_mode"`
	CreationDate                  string                                   `json:"creation_date"`
	DefaultSecondaryLocation      string                                   `json:"default_secondary_location"`
	Edition                       string                                   `json:"edition"`
	ElasticPoolName               string                                   `json:"elastic_pool_name"`
	Encryption                    string                                   `json:"encryption"`
	Id                            string                                   `json:"id"`
	Location                      string                                   `json:"location"`
	MaxSizeBytes                  string                                   `json:"max_size_bytes"`
	MaxSizeGb                     string                                   `json:"max_size_gb"`
	Name                          string                                   `json:"name"`
	ReadScale                     bool                                     `json:"read_scale"`
	RequestedServiceObjectiveId   string                                   `json:"requested_service_objective_id"`
	RequestedServiceObjectiveName string                                   `json:"requested_service_objective_name"`
	ResourceGroupName             string                                   `json:"resource_group_name"`
	RestorePointInTime            string                                   `json:"restore_point_in_time"`
	ServerName                    string                                   `json:"server_name"`
	SourceDatabaseDeletionDate    string                                   `json:"source_database_deletion_date"`
	SourceDatabaseId              string                                   `json:"source_database_id"`
	Tags                          map[string]string                        `json:"tags"`
	ZoneRedundant                 bool                                     `json:"zone_redundant"`
	Import                        []sqldatabase.ImportState                `json:"import"`
	ThreatDetectionPolicy         []sqldatabase.ThreatDetectionPolicyState `json:"threat_detection_policy"`
	Timeouts                      *sqldatabase.TimeoutsState               `json:"timeouts"`
}
