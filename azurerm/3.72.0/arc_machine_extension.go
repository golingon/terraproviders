// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	arcmachineextension "github.com/golingon/terraproviders/azurerm/3.72.0/arcmachineextension"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewArcMachineExtension creates a new instance of [ArcMachineExtension].
func NewArcMachineExtension(name string, args ArcMachineExtensionArgs) *ArcMachineExtension {
	return &ArcMachineExtension{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ArcMachineExtension)(nil)

// ArcMachineExtension represents the Terraform resource azurerm_arc_machine_extension.
type ArcMachineExtension struct {
	Name      string
	Args      ArcMachineExtensionArgs
	state     *arcMachineExtensionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ArcMachineExtension].
func (ame *ArcMachineExtension) Type() string {
	return "azurerm_arc_machine_extension"
}

// LocalName returns the local name for [ArcMachineExtension].
func (ame *ArcMachineExtension) LocalName() string {
	return ame.Name
}

// Configuration returns the configuration (args) for [ArcMachineExtension].
func (ame *ArcMachineExtension) Configuration() interface{} {
	return ame.Args
}

// DependOn is used for other resources to depend on [ArcMachineExtension].
func (ame *ArcMachineExtension) DependOn() terra.Reference {
	return terra.ReferenceResource(ame)
}

// Dependencies returns the list of resources [ArcMachineExtension] depends_on.
func (ame *ArcMachineExtension) Dependencies() terra.Dependencies {
	return ame.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ArcMachineExtension].
func (ame *ArcMachineExtension) LifecycleManagement() *terra.Lifecycle {
	return ame.Lifecycle
}

// Attributes returns the attributes for [ArcMachineExtension].
func (ame *ArcMachineExtension) Attributes() arcMachineExtensionAttributes {
	return arcMachineExtensionAttributes{ref: terra.ReferenceResource(ame)}
}

// ImportState imports the given attribute values into [ArcMachineExtension]'s state.
func (ame *ArcMachineExtension) ImportState(av io.Reader) error {
	ame.state = &arcMachineExtensionState{}
	if err := json.NewDecoder(av).Decode(ame.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ame.Type(), ame.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ArcMachineExtension] has state.
func (ame *ArcMachineExtension) State() (*arcMachineExtensionState, bool) {
	return ame.state, ame.state != nil
}

// StateMust returns the state for [ArcMachineExtension]. Panics if the state is nil.
func (ame *ArcMachineExtension) StateMust() *arcMachineExtensionState {
	if ame.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ame.Type(), ame.LocalName()))
	}
	return ame.state
}

// ArcMachineExtensionArgs contains the configurations for azurerm_arc_machine_extension.
type ArcMachineExtensionArgs struct {
	// ArcMachineId: string, required
	ArcMachineId terra.StringValue `hcl:"arc_machine_id,attr" validate:"required"`
	// AutomaticUpgradeEnabled: bool, optional
	AutomaticUpgradeEnabled terra.BoolValue `hcl:"automatic_upgrade_enabled,attr"`
	// ForceUpdateTag: string, optional
	ForceUpdateTag terra.StringValue `hcl:"force_update_tag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Settings: string, optional
	Settings terra.StringValue `hcl:"settings,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, optional
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr"`
	// Timeouts: optional
	Timeouts *arcmachineextension.Timeouts `hcl:"timeouts,block"`
}
type arcMachineExtensionAttributes struct {
	ref terra.Reference
}

// ArcMachineId returns a reference to field arc_machine_id of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) ArcMachineId() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("arc_machine_id"))
}

// AutomaticUpgradeEnabled returns a reference to field automatic_upgrade_enabled of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) AutomaticUpgradeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ame.ref.Append("automatic_upgrade_enabled"))
}

// ForceUpdateTag returns a reference to field force_update_tag of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) ForceUpdateTag() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("force_update_tag"))
}

// Id returns a reference to field id of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("name"))
}

// ProtectedSettings returns a reference to field protected_settings of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("protected_settings"))
}

// Publisher returns a reference to field publisher of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("publisher"))
}

// Settings returns a reference to field settings of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Settings() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("settings"))
}

// Tags returns a reference to field tags of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ame.ref.Append("tags"))
}

// Type returns a reference to field type of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("type"))
}

// TypeHandlerVersion returns a reference to field type_handler_version of azurerm_arc_machine_extension.
func (ame arcMachineExtensionAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("type_handler_version"))
}

func (ame arcMachineExtensionAttributes) Timeouts() arcmachineextension.TimeoutsAttributes {
	return terra.ReferenceAsSingle[arcmachineextension.TimeoutsAttributes](ame.ref.Append("timeouts"))
}

type arcMachineExtensionState struct {
	ArcMachineId            string                             `json:"arc_machine_id"`
	AutomaticUpgradeEnabled bool                               `json:"automatic_upgrade_enabled"`
	ForceUpdateTag          string                             `json:"force_update_tag"`
	Id                      string                             `json:"id"`
	Location                string                             `json:"location"`
	Name                    string                             `json:"name"`
	ProtectedSettings       string                             `json:"protected_settings"`
	Publisher               string                             `json:"publisher"`
	Settings                string                             `json:"settings"`
	Tags                    map[string]string                  `json:"tags"`
	Type                    string                             `json:"type"`
	TypeHandlerVersion      string                             `json:"type_handler_version"`
	Timeouts                *arcmachineextension.TimeoutsState `json:"timeouts"`
}
