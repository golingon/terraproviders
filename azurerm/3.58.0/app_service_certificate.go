// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appservicecertificate "github.com/golingon/terraproviders/azurerm/3.58.0/appservicecertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAppServiceCertificate creates a new instance of [AppServiceCertificate].
func NewAppServiceCertificate(name string, args AppServiceCertificateArgs) *AppServiceCertificate {
	return &AppServiceCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServiceCertificate)(nil)

// AppServiceCertificate represents the Terraform resource azurerm_app_service_certificate.
type AppServiceCertificate struct {
	Name      string
	Args      AppServiceCertificateArgs
	state     *appServiceCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AppServiceCertificate].
func (asc *AppServiceCertificate) Type() string {
	return "azurerm_app_service_certificate"
}

// LocalName returns the local name for [AppServiceCertificate].
func (asc *AppServiceCertificate) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [AppServiceCertificate].
func (asc *AppServiceCertificate) Configuration() interface{} {
	return asc.Args
}

// DependOn is used for other resources to depend on [AppServiceCertificate].
func (asc *AppServiceCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(asc)
}

// Dependencies returns the list of resources [AppServiceCertificate] depends_on.
func (asc *AppServiceCertificate) Dependencies() terra.Dependencies {
	return asc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AppServiceCertificate].
func (asc *AppServiceCertificate) LifecycleManagement() *terra.Lifecycle {
	return asc.Lifecycle
}

// Attributes returns the attributes for [AppServiceCertificate].
func (asc *AppServiceCertificate) Attributes() appServiceCertificateAttributes {
	return appServiceCertificateAttributes{ref: terra.ReferenceResource(asc)}
}

// ImportState imports the given attribute values into [AppServiceCertificate]'s state.
func (asc *AppServiceCertificate) ImportState(av io.Reader) error {
	asc.state = &appServiceCertificateState{}
	if err := json.NewDecoder(av).Decode(asc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asc.Type(), asc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AppServiceCertificate] has state.
func (asc *AppServiceCertificate) State() (*appServiceCertificateState, bool) {
	return asc.state, asc.state != nil
}

// StateMust returns the state for [AppServiceCertificate]. Panics if the state is nil.
func (asc *AppServiceCertificate) StateMust() *appServiceCertificateState {
	if asc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asc.Type(), asc.LocalName()))
	}
	return asc.state
}

// AppServiceCertificateArgs contains the configurations for azurerm_app_service_certificate.
type AppServiceCertificateArgs struct {
	// AppServicePlanId: string, optional
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultSecretId: string, optional
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// PfxBlob: string, optional
	PfxBlob terra.StringValue `hcl:"pfx_blob,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *appservicecertificate.Timeouts `hcl:"timeouts,block"`
}
type appServiceCertificateAttributes struct {
	ref terra.Reference
}

// AppServicePlanId returns a reference to field app_service_plan_id of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("app_service_plan_id"))
}

// ExpirationDate returns a reference to field expiration_date of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("expiration_date"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("friendly_name"))
}

// HostNames returns a reference to field host_names of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) HostNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asc.ref.Append("host_names"))
}

// HostingEnvironmentProfileId returns a reference to field hosting_environment_profile_id of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) HostingEnvironmentProfileId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("hosting_environment_profile_id"))
}

// Id returns a reference to field id of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// IssueDate returns a reference to field issue_date of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) IssueDate() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("issue_date"))
}

// Issuer returns a reference to field issuer of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("issuer"))
}

// KeyVaultSecretId returns a reference to field key_vault_secret_id of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("key_vault_secret_id"))
}

// Location returns a reference to field location of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("password"))
}

// PfxBlob returns a reference to field pfx_blob of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) PfxBlob() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("pfx_blob"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("resource_group_name"))
}

// SubjectName returns a reference to field subject_name of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) SubjectName() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("subject_name"))
}

// Tags returns a reference to field tags of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asc.ref.Append("tags"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_app_service_certificate.
func (asc appServiceCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("thumbprint"))
}

func (asc appServiceCertificateAttributes) Timeouts() appservicecertificate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[appservicecertificate.TimeoutsAttributes](asc.ref.Append("timeouts"))
}

type appServiceCertificateState struct {
	AppServicePlanId            string                               `json:"app_service_plan_id"`
	ExpirationDate              string                               `json:"expiration_date"`
	FriendlyName                string                               `json:"friendly_name"`
	HostNames                   []string                             `json:"host_names"`
	HostingEnvironmentProfileId string                               `json:"hosting_environment_profile_id"`
	Id                          string                               `json:"id"`
	IssueDate                   string                               `json:"issue_date"`
	Issuer                      string                               `json:"issuer"`
	KeyVaultSecretId            string                               `json:"key_vault_secret_id"`
	Location                    string                               `json:"location"`
	Name                        string                               `json:"name"`
	Password                    string                               `json:"password"`
	PfxBlob                     string                               `json:"pfx_blob"`
	ResourceGroupName           string                               `json:"resource_group_name"`
	SubjectName                 string                               `json:"subject_name"`
	Tags                        map[string]string                    `json:"tags"`
	Thumbprint                  string                               `json:"thumbprint"`
	Timeouts                    *appservicecertificate.TimeoutsState `json:"timeouts"`
}
