// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourcegroupcostmanagementexport "github.com/golingon/terraproviders/azurerm/3.73.0/resourcegroupcostmanagementexport"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewResourceGroupCostManagementExport creates a new instance of [ResourceGroupCostManagementExport].
func NewResourceGroupCostManagementExport(name string, args ResourceGroupCostManagementExportArgs) *ResourceGroupCostManagementExport {
	return &ResourceGroupCostManagementExport{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourceGroupCostManagementExport)(nil)

// ResourceGroupCostManagementExport represents the Terraform resource azurerm_resource_group_cost_management_export.
type ResourceGroupCostManagementExport struct {
	Name      string
	Args      ResourceGroupCostManagementExportArgs
	state     *resourceGroupCostManagementExportState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) Type() string {
	return "azurerm_resource_group_cost_management_export"
}

// LocalName returns the local name for [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) LocalName() string {
	return rgcme.Name
}

// Configuration returns the configuration (args) for [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) Configuration() interface{} {
	return rgcme.Args
}

// DependOn is used for other resources to depend on [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) DependOn() terra.Reference {
	return terra.ReferenceResource(rgcme)
}

// Dependencies returns the list of resources [ResourceGroupCostManagementExport] depends_on.
func (rgcme *ResourceGroupCostManagementExport) Dependencies() terra.Dependencies {
	return rgcme.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) LifecycleManagement() *terra.Lifecycle {
	return rgcme.Lifecycle
}

// Attributes returns the attributes for [ResourceGroupCostManagementExport].
func (rgcme *ResourceGroupCostManagementExport) Attributes() resourceGroupCostManagementExportAttributes {
	return resourceGroupCostManagementExportAttributes{ref: terra.ReferenceResource(rgcme)}
}

// ImportState imports the given attribute values into [ResourceGroupCostManagementExport]'s state.
func (rgcme *ResourceGroupCostManagementExport) ImportState(av io.Reader) error {
	rgcme.state = &resourceGroupCostManagementExportState{}
	if err := json.NewDecoder(av).Decode(rgcme.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rgcme.Type(), rgcme.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ResourceGroupCostManagementExport] has state.
func (rgcme *ResourceGroupCostManagementExport) State() (*resourceGroupCostManagementExportState, bool) {
	return rgcme.state, rgcme.state != nil
}

// StateMust returns the state for [ResourceGroupCostManagementExport]. Panics if the state is nil.
func (rgcme *ResourceGroupCostManagementExport) StateMust() *resourceGroupCostManagementExportState {
	if rgcme.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rgcme.Type(), rgcme.LocalName()))
	}
	return rgcme.state
}

// ResourceGroupCostManagementExportArgs contains the configurations for azurerm_resource_group_cost_management_export.
type ResourceGroupCostManagementExportArgs struct {
	// Active: bool, optional
	Active terra.BoolValue `hcl:"active,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecurrencePeriodEndDate: string, required
	RecurrencePeriodEndDate terra.StringValue `hcl:"recurrence_period_end_date,attr" validate:"required"`
	// RecurrencePeriodStartDate: string, required
	RecurrencePeriodStartDate terra.StringValue `hcl:"recurrence_period_start_date,attr" validate:"required"`
	// RecurrenceType: string, required
	RecurrenceType terra.StringValue `hcl:"recurrence_type,attr" validate:"required"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// ExportDataOptions: required
	ExportDataOptions *resourcegroupcostmanagementexport.ExportDataOptions `hcl:"export_data_options,block" validate:"required"`
	// ExportDataStorageLocation: required
	ExportDataStorageLocation *resourcegroupcostmanagementexport.ExportDataStorageLocation `hcl:"export_data_storage_location,block" validate:"required"`
	// Timeouts: optional
	Timeouts *resourcegroupcostmanagementexport.Timeouts `hcl:"timeouts,block"`
}
type resourceGroupCostManagementExportAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(rgcme.ref.Append("active"))
}

// Id returns a reference to field id of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("name"))
}

// RecurrencePeriodEndDate returns a reference to field recurrence_period_end_date of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) RecurrencePeriodEndDate() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("recurrence_period_end_date"))
}

// RecurrencePeriodStartDate returns a reference to field recurrence_period_start_date of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) RecurrencePeriodStartDate() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("recurrence_period_start_date"))
}

// RecurrenceType returns a reference to field recurrence_type of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) RecurrenceType() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("recurrence_type"))
}

// ResourceGroupId returns a reference to field resource_group_id of azurerm_resource_group_cost_management_export.
func (rgcme resourceGroupCostManagementExportAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(rgcme.ref.Append("resource_group_id"))
}

func (rgcme resourceGroupCostManagementExportAttributes) ExportDataOptions() terra.ListValue[resourcegroupcostmanagementexport.ExportDataOptionsAttributes] {
	return terra.ReferenceAsList[resourcegroupcostmanagementexport.ExportDataOptionsAttributes](rgcme.ref.Append("export_data_options"))
}

func (rgcme resourceGroupCostManagementExportAttributes) ExportDataStorageLocation() terra.ListValue[resourcegroupcostmanagementexport.ExportDataStorageLocationAttributes] {
	return terra.ReferenceAsList[resourcegroupcostmanagementexport.ExportDataStorageLocationAttributes](rgcme.ref.Append("export_data_storage_location"))
}

func (rgcme resourceGroupCostManagementExportAttributes) Timeouts() resourcegroupcostmanagementexport.TimeoutsAttributes {
	return terra.ReferenceAsSingle[resourcegroupcostmanagementexport.TimeoutsAttributes](rgcme.ref.Append("timeouts"))
}

type resourceGroupCostManagementExportState struct {
	Active                    bool                                                               `json:"active"`
	Id                        string                                                             `json:"id"`
	Name                      string                                                             `json:"name"`
	RecurrencePeriodEndDate   string                                                             `json:"recurrence_period_end_date"`
	RecurrencePeriodStartDate string                                                             `json:"recurrence_period_start_date"`
	RecurrenceType            string                                                             `json:"recurrence_type"`
	ResourceGroupId           string                                                             `json:"resource_group_id"`
	ExportDataOptions         []resourcegroupcostmanagementexport.ExportDataOptionsState         `json:"export_data_options"`
	ExportDataStorageLocation []resourcegroupcostmanagementexport.ExportDataStorageLocationState `json:"export_data_storage_location"`
	Timeouts                  *resourcegroupcostmanagementexport.TimeoutsState                   `json:"timeouts"`
}
