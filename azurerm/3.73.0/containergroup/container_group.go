// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package containergroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ExposedPort struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
}

type Container struct {
	// Commands: list of string, optional
	Commands terra.ListValue[terra.StringValue] `hcl:"commands,attr"`
	// Cpu: number, required
	Cpu terra.NumberValue `hcl:"cpu,attr" validate:"required"`
	// CpuLimit: number, optional
	CpuLimit terra.NumberValue `hcl:"cpu_limit,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Memory: number, required
	Memory terra.NumberValue `hcl:"memory,attr" validate:"required"`
	// MemoryLimit: number, optional
	MemoryLimit terra.NumberValue `hcl:"memory_limit,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecureEnvironmentVariables: map of string, optional
	SecureEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"secure_environment_variables,attr"`
	// Gpu: optional
	Gpu *Gpu `hcl:"gpu,block"`
	// GpuLimit: optional
	GpuLimit *GpuLimit `hcl:"gpu_limit,block"`
	// LivenessProbe: optional
	LivenessProbe *LivenessProbe `hcl:"liveness_probe,block"`
	// Ports: min=0
	Ports []Ports `hcl:"ports,block" validate:"min=0"`
	// ReadinessProbe: optional
	ReadinessProbe *ReadinessProbe `hcl:"readiness_probe,block"`
	// ContainerSecurity: min=0
	Security []ContainerSecurity `hcl:"security,block" validate:"min=0"`
	// ContainerVolume: min=0
	Volume []ContainerVolume `hcl:"volume,block" validate:"min=0"`
}

type Gpu struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
}

type GpuLimit struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
}

type LivenessProbe struct {
	// Exec: list of string, optional
	Exec terra.ListValue[terra.StringValue] `hcl:"exec,attr"`
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// SuccessThreshold: number, optional
	SuccessThreshold terra.NumberValue `hcl:"success_threshold,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// LivenessProbeHttpGet: min=0
	HttpGet []LivenessProbeHttpGet `hcl:"http_get,block" validate:"min=0"`
}

type LivenessProbeHttpGet struct {
	// HttpHeaders: map of string, optional
	HttpHeaders terra.MapValue[terra.StringValue] `hcl:"http_headers,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
}

type Ports struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
}

type ReadinessProbe struct {
	// Exec: list of string, optional
	Exec terra.ListValue[terra.StringValue] `hcl:"exec,attr"`
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// InitialDelaySeconds: number, optional
	InitialDelaySeconds terra.NumberValue `hcl:"initial_delay_seconds,attr"`
	// PeriodSeconds: number, optional
	PeriodSeconds terra.NumberValue `hcl:"period_seconds,attr"`
	// SuccessThreshold: number, optional
	SuccessThreshold terra.NumberValue `hcl:"success_threshold,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// ReadinessProbeHttpGet: min=0
	HttpGet []ReadinessProbeHttpGet `hcl:"http_get,block" validate:"min=0"`
}

type ReadinessProbeHttpGet struct {
	// HttpHeaders: map of string, optional
	HttpHeaders terra.MapValue[terra.StringValue] `hcl:"http_headers,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
}

type ContainerSecurity struct {
	// PrivilegeEnabled: bool, required
	PrivilegeEnabled terra.BoolValue `hcl:"privilege_enabled,attr" validate:"required"`
}

type ContainerVolume struct {
	// EmptyDir: bool, optional
	EmptyDir terra.BoolValue `hcl:"empty_dir,attr"`
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// Secret: map of string, optional
	Secret terra.MapValue[terra.StringValue] `hcl:"secret,attr"`
	// ShareName: string, optional
	ShareName terra.StringValue `hcl:"share_name,attr"`
	// StorageAccountKey: string, optional
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// ContainerVolumeGitRepo: optional
	GitRepo *ContainerVolumeGitRepo `hcl:"git_repo,block"`
}

type ContainerVolumeGitRepo struct {
	// Directory: string, optional
	Directory terra.StringValue `hcl:"directory,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Diagnostics struct {
	// LogAnalytics: required
	LogAnalytics *LogAnalytics `hcl:"log_analytics,block" validate:"required"`
}

type LogAnalytics struct {
	// LogType: string, optional
	LogType terra.StringValue `hcl:"log_type,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// WorkspaceKey: string, required
	WorkspaceKey terra.StringValue `hcl:"workspace_key,attr" validate:"required"`
}

type DnsConfig struct {
	// Nameservers: list of string, required
	Nameservers terra.ListValue[terra.StringValue] `hcl:"nameservers,attr" validate:"required"`
	// Options: set of string, optional
	Options terra.SetValue[terra.StringValue] `hcl:"options,attr"`
	// SearchDomains: set of string, optional
	SearchDomains terra.SetValue[terra.StringValue] `hcl:"search_domains,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ImageRegistryCredential struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type InitContainer struct {
	// Commands: list of string, optional
	Commands terra.ListValue[terra.StringValue] `hcl:"commands,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecureEnvironmentVariables: map of string, optional
	SecureEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"secure_environment_variables,attr"`
	// InitContainerSecurity: min=0
	Security []InitContainerSecurity `hcl:"security,block" validate:"min=0"`
	// InitContainerVolume: min=0
	Volume []InitContainerVolume `hcl:"volume,block" validate:"min=0"`
}

type InitContainerSecurity struct {
	// PrivilegeEnabled: bool, required
	PrivilegeEnabled terra.BoolValue `hcl:"privilege_enabled,attr" validate:"required"`
}

type InitContainerVolume struct {
	// EmptyDir: bool, optional
	EmptyDir terra.BoolValue `hcl:"empty_dir,attr"`
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// Secret: map of string, optional
	Secret terra.MapValue[terra.StringValue] `hcl:"secret,attr"`
	// ShareName: string, optional
	ShareName terra.StringValue `hcl:"share_name,attr"`
	// StorageAccountKey: string, optional
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// InitContainerVolumeGitRepo: optional
	GitRepo *InitContainerVolumeGitRepo `hcl:"git_repo,block"`
}

type InitContainerVolumeGitRepo struct {
	// Directory: string, optional
	Directory terra.StringValue `hcl:"directory,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ExposedPortAttributes struct {
	ref terra.Reference
}

func (ep ExposedPortAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep ExposedPortAttributes) InternalWithRef(ref terra.Reference) ExposedPortAttributes {
	return ExposedPortAttributes{ref: ref}
}

func (ep ExposedPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep ExposedPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("port"))
}

func (ep ExposedPortAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("protocol"))
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) Commands() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("commands"))
}

func (c ContainerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("cpu"))
}

func (c ContainerAttributes) CpuLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("cpu_limit"))
}

func (c ContainerAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("environment_variables"))
}

func (c ContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainerAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("memory"))
}

func (c ContainerAttributes) MemoryLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("memory_limit"))
}

func (c ContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContainerAttributes) SecureEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("secure_environment_variables"))
}

func (c ContainerAttributes) Gpu() terra.ListValue[GpuAttributes] {
	return terra.ReferenceAsList[GpuAttributes](c.ref.Append("gpu"))
}

func (c ContainerAttributes) GpuLimit() terra.ListValue[GpuLimitAttributes] {
	return terra.ReferenceAsList[GpuLimitAttributes](c.ref.Append("gpu_limit"))
}

func (c ContainerAttributes) LivenessProbe() terra.ListValue[LivenessProbeAttributes] {
	return terra.ReferenceAsList[LivenessProbeAttributes](c.ref.Append("liveness_probe"))
}

func (c ContainerAttributes) Ports() terra.SetValue[PortsAttributes] {
	return terra.ReferenceAsSet[PortsAttributes](c.ref.Append("ports"))
}

func (c ContainerAttributes) ReadinessProbe() terra.ListValue[ReadinessProbeAttributes] {
	return terra.ReferenceAsList[ReadinessProbeAttributes](c.ref.Append("readiness_probe"))
}

func (c ContainerAttributes) Security() terra.ListValue[ContainerSecurityAttributes] {
	return terra.ReferenceAsList[ContainerSecurityAttributes](c.ref.Append("security"))
}

func (c ContainerAttributes) Volume() terra.ListValue[ContainerVolumeAttributes] {
	return terra.ReferenceAsList[ContainerVolumeAttributes](c.ref.Append("volume"))
}

type GpuAttributes struct {
	ref terra.Reference
}

func (g GpuAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GpuAttributes) InternalWithRef(ref terra.Reference) GpuAttributes {
	return GpuAttributes{ref: ref}
}

func (g GpuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GpuAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("count"))
}

func (g GpuAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sku"))
}

type GpuLimitAttributes struct {
	ref terra.Reference
}

func (gl GpuLimitAttributes) InternalRef() (terra.Reference, error) {
	return gl.ref, nil
}

func (gl GpuLimitAttributes) InternalWithRef(ref terra.Reference) GpuLimitAttributes {
	return GpuLimitAttributes{ref: ref}
}

func (gl GpuLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gl.ref.InternalTokens()
}

func (gl GpuLimitAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(gl.ref.Append("count"))
}

func (gl GpuLimitAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(gl.ref.Append("sku"))
}

type LivenessProbeAttributes struct {
	ref terra.Reference
}

func (lp LivenessProbeAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LivenessProbeAttributes) InternalWithRef(ref terra.Reference) LivenessProbeAttributes {
	return LivenessProbeAttributes{ref: ref}
}

func (lp LivenessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LivenessProbeAttributes) Exec() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lp.ref.Append("exec"))
}

func (lp LivenessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("failure_threshold"))
}

func (lp LivenessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("initial_delay_seconds"))
}

func (lp LivenessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("period_seconds"))
}

func (lp LivenessProbeAttributes) SuccessThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("success_threshold"))
}

func (lp LivenessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("timeout_seconds"))
}

func (lp LivenessProbeAttributes) HttpGet() terra.ListValue[LivenessProbeHttpGetAttributes] {
	return terra.ReferenceAsList[LivenessProbeHttpGetAttributes](lp.ref.Append("http_get"))
}

type LivenessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg LivenessProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg LivenessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) LivenessProbeHttpGetAttributes {
	return LivenessProbeHttpGetAttributes{ref: ref}
}

func (hg LivenessProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg LivenessProbeHttpGetAttributes) HttpHeaders() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hg.ref.Append("http_headers"))
}

func (hg LivenessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg LivenessProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg LivenessProbeHttpGetAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("scheme"))
}

type PortsAttributes struct {
	ref terra.Reference
}

func (p PortsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PortsAttributes) InternalWithRef(ref terra.Reference) PortsAttributes {
	return PortsAttributes{ref: ref}
}

func (p PortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PortsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

func (p PortsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

type ReadinessProbeAttributes struct {
	ref terra.Reference
}

func (rp ReadinessProbeAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp ReadinessProbeAttributes) InternalWithRef(ref terra.Reference) ReadinessProbeAttributes {
	return ReadinessProbeAttributes{ref: ref}
}

func (rp ReadinessProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp ReadinessProbeAttributes) Exec() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("exec"))
}

func (rp ReadinessProbeAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("failure_threshold"))
}

func (rp ReadinessProbeAttributes) InitialDelaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("initial_delay_seconds"))
}

func (rp ReadinessProbeAttributes) PeriodSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("period_seconds"))
}

func (rp ReadinessProbeAttributes) SuccessThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("success_threshold"))
}

func (rp ReadinessProbeAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("timeout_seconds"))
}

func (rp ReadinessProbeAttributes) HttpGet() terra.ListValue[ReadinessProbeHttpGetAttributes] {
	return terra.ReferenceAsList[ReadinessProbeHttpGetAttributes](rp.ref.Append("http_get"))
}

type ReadinessProbeHttpGetAttributes struct {
	ref terra.Reference
}

func (hg ReadinessProbeHttpGetAttributes) InternalRef() (terra.Reference, error) {
	return hg.ref, nil
}

func (hg ReadinessProbeHttpGetAttributes) InternalWithRef(ref terra.Reference) ReadinessProbeHttpGetAttributes {
	return ReadinessProbeHttpGetAttributes{ref: ref}
}

func (hg ReadinessProbeHttpGetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hg.ref.InternalTokens()
}

func (hg ReadinessProbeHttpGetAttributes) HttpHeaders() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hg.ref.Append("http_headers"))
}

func (hg ReadinessProbeHttpGetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("path"))
}

func (hg ReadinessProbeHttpGetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hg.ref.Append("port"))
}

func (hg ReadinessProbeHttpGetAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(hg.ref.Append("scheme"))
}

type ContainerSecurityAttributes struct {
	ref terra.Reference
}

func (s ContainerSecurityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ContainerSecurityAttributes) InternalWithRef(ref terra.Reference) ContainerSecurityAttributes {
	return ContainerSecurityAttributes{ref: ref}
}

func (s ContainerSecurityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ContainerSecurityAttributes) PrivilegeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("privilege_enabled"))
}

type ContainerVolumeAttributes struct {
	ref terra.Reference
}

func (v ContainerVolumeAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ContainerVolumeAttributes) InternalWithRef(ref terra.Reference) ContainerVolumeAttributes {
	return ContainerVolumeAttributes{ref: ref}
}

func (v ContainerVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ContainerVolumeAttributes) EmptyDir() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("empty_dir"))
}

func (v ContainerVolumeAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("mount_path"))
}

func (v ContainerVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v ContainerVolumeAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("read_only"))
}

func (v ContainerVolumeAttributes) Secret() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](v.ref.Append("secret"))
}

func (v ContainerVolumeAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("share_name"))
}

func (v ContainerVolumeAttributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("storage_account_key"))
}

func (v ContainerVolumeAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("storage_account_name"))
}

func (v ContainerVolumeAttributes) GitRepo() terra.ListValue[ContainerVolumeGitRepoAttributes] {
	return terra.ReferenceAsList[ContainerVolumeGitRepoAttributes](v.ref.Append("git_repo"))
}

type ContainerVolumeGitRepoAttributes struct {
	ref terra.Reference
}

func (gr ContainerVolumeGitRepoAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr ContainerVolumeGitRepoAttributes) InternalWithRef(ref terra.Reference) ContainerVolumeGitRepoAttributes {
	return ContainerVolumeGitRepoAttributes{ref: ref}
}

func (gr ContainerVolumeGitRepoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr ContainerVolumeGitRepoAttributes) Directory() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("directory"))
}

func (gr ContainerVolumeGitRepoAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("revision"))
}

func (gr ContainerVolumeGitRepoAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("url"))
}

type DiagnosticsAttributes struct {
	ref terra.Reference
}

func (d DiagnosticsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DiagnosticsAttributes) InternalWithRef(ref terra.Reference) DiagnosticsAttributes {
	return DiagnosticsAttributes{ref: ref}
}

func (d DiagnosticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DiagnosticsAttributes) LogAnalytics() terra.ListValue[LogAnalyticsAttributes] {
	return terra.ReferenceAsList[LogAnalyticsAttributes](d.ref.Append("log_analytics"))
}

type LogAnalyticsAttributes struct {
	ref terra.Reference
}

func (la LogAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la LogAnalyticsAttributes) InternalWithRef(ref terra.Reference) LogAnalyticsAttributes {
	return LogAnalyticsAttributes{ref: ref}
}

func (la LogAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la LogAnalyticsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("log_type"))
}

func (la LogAnalyticsAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](la.ref.Append("metadata"))
}

func (la LogAnalyticsAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("workspace_id"))
}

func (la LogAnalyticsAttributes) WorkspaceKey() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("workspace_key"))
}

type DnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DnsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DnsConfigAttributes) InternalWithRef(ref terra.Reference) DnsConfigAttributes {
	return DnsConfigAttributes{ref: ref}
}

func (dc DnsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DnsConfigAttributes) Nameservers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dc.ref.Append("nameservers"))
}

func (dc DnsConfigAttributes) Options() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dc.ref.Append("options"))
}

func (dc DnsConfigAttributes) SearchDomains() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dc.ref.Append("search_domains"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type ImageRegistryCredentialAttributes struct {
	ref terra.Reference
}

func (irc ImageRegistryCredentialAttributes) InternalRef() (terra.Reference, error) {
	return irc.ref, nil
}

func (irc ImageRegistryCredentialAttributes) InternalWithRef(ref terra.Reference) ImageRegistryCredentialAttributes {
	return ImageRegistryCredentialAttributes{ref: ref}
}

func (irc ImageRegistryCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return irc.ref.InternalTokens()
}

func (irc ImageRegistryCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(irc.ref.Append("password"))
}

func (irc ImageRegistryCredentialAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(irc.ref.Append("server"))
}

func (irc ImageRegistryCredentialAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(irc.ref.Append("user_assigned_identity_id"))
}

func (irc ImageRegistryCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(irc.ref.Append("username"))
}

type InitContainerAttributes struct {
	ref terra.Reference
}

func (ic InitContainerAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InitContainerAttributes) InternalWithRef(ref terra.Reference) InitContainerAttributes {
	return InitContainerAttributes{ref: ref}
}

func (ic InitContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InitContainerAttributes) Commands() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("commands"))
}

func (ic InitContainerAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("environment_variables"))
}

func (ic InitContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("image"))
}

func (ic InitContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic InitContainerAttributes) SecureEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("secure_environment_variables"))
}

func (ic InitContainerAttributes) Security() terra.ListValue[InitContainerSecurityAttributes] {
	return terra.ReferenceAsList[InitContainerSecurityAttributes](ic.ref.Append("security"))
}

func (ic InitContainerAttributes) Volume() terra.ListValue[InitContainerVolumeAttributes] {
	return terra.ReferenceAsList[InitContainerVolumeAttributes](ic.ref.Append("volume"))
}

type InitContainerSecurityAttributes struct {
	ref terra.Reference
}

func (s InitContainerSecurityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s InitContainerSecurityAttributes) InternalWithRef(ref terra.Reference) InitContainerSecurityAttributes {
	return InitContainerSecurityAttributes{ref: ref}
}

func (s InitContainerSecurityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s InitContainerSecurityAttributes) PrivilegeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("privilege_enabled"))
}

type InitContainerVolumeAttributes struct {
	ref terra.Reference
}

func (v InitContainerVolumeAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v InitContainerVolumeAttributes) InternalWithRef(ref terra.Reference) InitContainerVolumeAttributes {
	return InitContainerVolumeAttributes{ref: ref}
}

func (v InitContainerVolumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v InitContainerVolumeAttributes) EmptyDir() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("empty_dir"))
}

func (v InitContainerVolumeAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("mount_path"))
}

func (v InitContainerVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v InitContainerVolumeAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("read_only"))
}

func (v InitContainerVolumeAttributes) Secret() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](v.ref.Append("secret"))
}

func (v InitContainerVolumeAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("share_name"))
}

func (v InitContainerVolumeAttributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("storage_account_key"))
}

func (v InitContainerVolumeAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("storage_account_name"))
}

func (v InitContainerVolumeAttributes) GitRepo() terra.ListValue[InitContainerVolumeGitRepoAttributes] {
	return terra.ReferenceAsList[InitContainerVolumeGitRepoAttributes](v.ref.Append("git_repo"))
}

type InitContainerVolumeGitRepoAttributes struct {
	ref terra.Reference
}

func (gr InitContainerVolumeGitRepoAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr InitContainerVolumeGitRepoAttributes) InternalWithRef(ref terra.Reference) InitContainerVolumeGitRepoAttributes {
	return InitContainerVolumeGitRepoAttributes{ref: ref}
}

func (gr InitContainerVolumeGitRepoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr InitContainerVolumeGitRepoAttributes) Directory() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("directory"))
}

func (gr InitContainerVolumeGitRepoAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("revision"))
}

func (gr InitContainerVolumeGitRepoAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(gr.ref.Append("url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ExposedPortState struct {
	Port     float64 `json:"port"`
	Protocol string  `json:"protocol"`
}

type ContainerState struct {
	Commands                   []string                 `json:"commands"`
	Cpu                        float64                  `json:"cpu"`
	CpuLimit                   float64                  `json:"cpu_limit"`
	EnvironmentVariables       map[string]string        `json:"environment_variables"`
	Image                      string                   `json:"image"`
	Memory                     float64                  `json:"memory"`
	MemoryLimit                float64                  `json:"memory_limit"`
	Name                       string                   `json:"name"`
	SecureEnvironmentVariables map[string]string        `json:"secure_environment_variables"`
	Gpu                        []GpuState               `json:"gpu"`
	GpuLimit                   []GpuLimitState          `json:"gpu_limit"`
	LivenessProbe              []LivenessProbeState     `json:"liveness_probe"`
	Ports                      []PortsState             `json:"ports"`
	ReadinessProbe             []ReadinessProbeState    `json:"readiness_probe"`
	Security                   []ContainerSecurityState `json:"security"`
	Volume                     []ContainerVolumeState   `json:"volume"`
}

type GpuState struct {
	Count float64 `json:"count"`
	Sku   string  `json:"sku"`
}

type GpuLimitState struct {
	Count float64 `json:"count"`
	Sku   string  `json:"sku"`
}

type LivenessProbeState struct {
	Exec                []string                    `json:"exec"`
	FailureThreshold    float64                     `json:"failure_threshold"`
	InitialDelaySeconds float64                     `json:"initial_delay_seconds"`
	PeriodSeconds       float64                     `json:"period_seconds"`
	SuccessThreshold    float64                     `json:"success_threshold"`
	TimeoutSeconds      float64                     `json:"timeout_seconds"`
	HttpGet             []LivenessProbeHttpGetState `json:"http_get"`
}

type LivenessProbeHttpGetState struct {
	HttpHeaders map[string]string `json:"http_headers"`
	Path        string            `json:"path"`
	Port        float64           `json:"port"`
	Scheme      string            `json:"scheme"`
}

type PortsState struct {
	Port     float64 `json:"port"`
	Protocol string  `json:"protocol"`
}

type ReadinessProbeState struct {
	Exec                []string                     `json:"exec"`
	FailureThreshold    float64                      `json:"failure_threshold"`
	InitialDelaySeconds float64                      `json:"initial_delay_seconds"`
	PeriodSeconds       float64                      `json:"period_seconds"`
	SuccessThreshold    float64                      `json:"success_threshold"`
	TimeoutSeconds      float64                      `json:"timeout_seconds"`
	HttpGet             []ReadinessProbeHttpGetState `json:"http_get"`
}

type ReadinessProbeHttpGetState struct {
	HttpHeaders map[string]string `json:"http_headers"`
	Path        string            `json:"path"`
	Port        float64           `json:"port"`
	Scheme      string            `json:"scheme"`
}

type ContainerSecurityState struct {
	PrivilegeEnabled bool `json:"privilege_enabled"`
}

type ContainerVolumeState struct {
	EmptyDir           bool                          `json:"empty_dir"`
	MountPath          string                        `json:"mount_path"`
	Name               string                        `json:"name"`
	ReadOnly           bool                          `json:"read_only"`
	Secret             map[string]string             `json:"secret"`
	ShareName          string                        `json:"share_name"`
	StorageAccountKey  string                        `json:"storage_account_key"`
	StorageAccountName string                        `json:"storage_account_name"`
	GitRepo            []ContainerVolumeGitRepoState `json:"git_repo"`
}

type ContainerVolumeGitRepoState struct {
	Directory string `json:"directory"`
	Revision  string `json:"revision"`
	Url       string `json:"url"`
}

type DiagnosticsState struct {
	LogAnalytics []LogAnalyticsState `json:"log_analytics"`
}

type LogAnalyticsState struct {
	LogType      string            `json:"log_type"`
	Metadata     map[string]string `json:"metadata"`
	WorkspaceId  string            `json:"workspace_id"`
	WorkspaceKey string            `json:"workspace_key"`
}

type DnsConfigState struct {
	Nameservers   []string `json:"nameservers"`
	Options       []string `json:"options"`
	SearchDomains []string `json:"search_domains"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type ImageRegistryCredentialState struct {
	Password               string `json:"password"`
	Server                 string `json:"server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	Username               string `json:"username"`
}

type InitContainerState struct {
	Commands                   []string                     `json:"commands"`
	EnvironmentVariables       map[string]string            `json:"environment_variables"`
	Image                      string                       `json:"image"`
	Name                       string                       `json:"name"`
	SecureEnvironmentVariables map[string]string            `json:"secure_environment_variables"`
	Security                   []InitContainerSecurityState `json:"security"`
	Volume                     []InitContainerVolumeState   `json:"volume"`
}

type InitContainerSecurityState struct {
	PrivilegeEnabled bool `json:"privilege_enabled"`
}

type InitContainerVolumeState struct {
	EmptyDir           bool                              `json:"empty_dir"`
	MountPath          string                            `json:"mount_path"`
	Name               string                            `json:"name"`
	ReadOnly           bool                              `json:"read_only"`
	Secret             map[string]string                 `json:"secret"`
	ShareName          string                            `json:"share_name"`
	StorageAccountKey  string                            `json:"storage_account_key"`
	StorageAccountName string                            `json:"storage_account_name"`
	GitRepo            []InitContainerVolumeGitRepoState `json:"git_repo"`
}

type InitContainerVolumeGitRepoState struct {
	Directory string `json:"directory"`
	Revision  string `json:"revision"`
	Url       string `json:"url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
