// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadatashare

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SnapshotSchedule struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type SnapshotScheduleAttributes struct {
	ref terra.Reference
}

func (ss SnapshotScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SnapshotScheduleAttributes) InternalWithRef(ref terra.Reference) SnapshotScheduleAttributes {
	return SnapshotScheduleAttributes{ref: ref}
}

func (ss SnapshotScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SnapshotScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("name"))
}

func (ss SnapshotScheduleAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("recurrence"))
}

func (ss SnapshotScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("start_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type SnapshotScheduleState struct {
	Name       string `json:"name"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
