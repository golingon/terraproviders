// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactoryflowletdataflow "github.com/golingon/terraproviders/azurerm/3.73.0/datafactoryflowletdataflow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactoryFlowletDataFlow creates a new instance of [DataFactoryFlowletDataFlow].
func NewDataFactoryFlowletDataFlow(name string, args DataFactoryFlowletDataFlowArgs) *DataFactoryFlowletDataFlow {
	return &DataFactoryFlowletDataFlow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryFlowletDataFlow)(nil)

// DataFactoryFlowletDataFlow represents the Terraform resource azurerm_data_factory_flowlet_data_flow.
type DataFactoryFlowletDataFlow struct {
	Name      string
	Args      DataFactoryFlowletDataFlowArgs
	state     *dataFactoryFlowletDataFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) Type() string {
	return "azurerm_data_factory_flowlet_data_flow"
}

// LocalName returns the local name for [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) LocalName() string {
	return dffdf.Name
}

// Configuration returns the configuration (args) for [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) Configuration() interface{} {
	return dffdf.Args
}

// DependOn is used for other resources to depend on [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) DependOn() terra.Reference {
	return terra.ReferenceResource(dffdf)
}

// Dependencies returns the list of resources [DataFactoryFlowletDataFlow] depends_on.
func (dffdf *DataFactoryFlowletDataFlow) Dependencies() terra.Dependencies {
	return dffdf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) LifecycleManagement() *terra.Lifecycle {
	return dffdf.Lifecycle
}

// Attributes returns the attributes for [DataFactoryFlowletDataFlow].
func (dffdf *DataFactoryFlowletDataFlow) Attributes() dataFactoryFlowletDataFlowAttributes {
	return dataFactoryFlowletDataFlowAttributes{ref: terra.ReferenceResource(dffdf)}
}

// ImportState imports the given attribute values into [DataFactoryFlowletDataFlow]'s state.
func (dffdf *DataFactoryFlowletDataFlow) ImportState(av io.Reader) error {
	dffdf.state = &dataFactoryFlowletDataFlowState{}
	if err := json.NewDecoder(av).Decode(dffdf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dffdf.Type(), dffdf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactoryFlowletDataFlow] has state.
func (dffdf *DataFactoryFlowletDataFlow) State() (*dataFactoryFlowletDataFlowState, bool) {
	return dffdf.state, dffdf.state != nil
}

// StateMust returns the state for [DataFactoryFlowletDataFlow]. Panics if the state is nil.
func (dffdf *DataFactoryFlowletDataFlow) StateMust() *dataFactoryFlowletDataFlowState {
	if dffdf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dffdf.Type(), dffdf.LocalName()))
	}
	return dffdf.state
}

// DataFactoryFlowletDataFlowArgs contains the configurations for azurerm_data_factory_flowlet_data_flow.
type DataFactoryFlowletDataFlowArgs struct {
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Script: string, optional
	Script terra.StringValue `hcl:"script,attr"`
	// ScriptLines: list of string, optional
	ScriptLines terra.ListValue[terra.StringValue] `hcl:"script_lines,attr"`
	// Sink: min=1
	Sink []datafactoryflowletdataflow.Sink `hcl:"sink,block" validate:"min=1"`
	// Source: min=1
	Source []datafactoryflowletdataflow.Source `hcl:"source,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *datafactoryflowletdataflow.Timeouts `hcl:"timeouts,block"`
	// Transformation: min=0
	Transformation []datafactoryflowletdataflow.Transformation `hcl:"transformation,block" validate:"min=0"`
}
type dataFactoryFlowletDataFlowAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dffdf.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("name"))
}

// Script returns a reference to field script of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(dffdf.ref.Append("script"))
}

// ScriptLines returns a reference to field script_lines of azurerm_data_factory_flowlet_data_flow.
func (dffdf dataFactoryFlowletDataFlowAttributes) ScriptLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dffdf.ref.Append("script_lines"))
}

func (dffdf dataFactoryFlowletDataFlowAttributes) Sink() terra.ListValue[datafactoryflowletdataflow.SinkAttributes] {
	return terra.ReferenceAsList[datafactoryflowletdataflow.SinkAttributes](dffdf.ref.Append("sink"))
}

func (dffdf dataFactoryFlowletDataFlowAttributes) Source() terra.ListValue[datafactoryflowletdataflow.SourceAttributes] {
	return terra.ReferenceAsList[datafactoryflowletdataflow.SourceAttributes](dffdf.ref.Append("source"))
}

func (dffdf dataFactoryFlowletDataFlowAttributes) Timeouts() datafactoryflowletdataflow.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactoryflowletdataflow.TimeoutsAttributes](dffdf.ref.Append("timeouts"))
}

func (dffdf dataFactoryFlowletDataFlowAttributes) Transformation() terra.ListValue[datafactoryflowletdataflow.TransformationAttributes] {
	return terra.ReferenceAsList[datafactoryflowletdataflow.TransformationAttributes](dffdf.ref.Append("transformation"))
}

type dataFactoryFlowletDataFlowState struct {
	Annotations    []string                                         `json:"annotations"`
	DataFactoryId  string                                           `json:"data_factory_id"`
	Description    string                                           `json:"description"`
	Folder         string                                           `json:"folder"`
	Id             string                                           `json:"id"`
	Name           string                                           `json:"name"`
	Script         string                                           `json:"script"`
	ScriptLines    []string                                         `json:"script_lines"`
	Sink           []datafactoryflowletdataflow.SinkState           `json:"sink"`
	Source         []datafactoryflowletdataflow.SourceState         `json:"source"`
	Timeouts       *datafactoryflowletdataflow.TimeoutsState        `json:"timeouts"`
	Transformation []datafactoryflowletdataflow.TransformationState `json:"transformation"`
}
