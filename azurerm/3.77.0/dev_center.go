// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	devcenter "github.com/golingon/terraproviders/azurerm/3.77.0/devcenter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDevCenter creates a new instance of [DevCenter].
func NewDevCenter(name string, args DevCenterArgs) *DevCenter {
	return &DevCenter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevCenter)(nil)

// DevCenter represents the Terraform resource azurerm_dev_center.
type DevCenter struct {
	Name      string
	Args      DevCenterArgs
	state     *devCenterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevCenter].
func (dc *DevCenter) Type() string {
	return "azurerm_dev_center"
}

// LocalName returns the local name for [DevCenter].
func (dc *DevCenter) LocalName() string {
	return dc.Name
}

// Configuration returns the configuration (args) for [DevCenter].
func (dc *DevCenter) Configuration() interface{} {
	return dc.Args
}

// DependOn is used for other resources to depend on [DevCenter].
func (dc *DevCenter) DependOn() terra.Reference {
	return terra.ReferenceResource(dc)
}

// Dependencies returns the list of resources [DevCenter] depends_on.
func (dc *DevCenter) Dependencies() terra.Dependencies {
	return dc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevCenter].
func (dc *DevCenter) LifecycleManagement() *terra.Lifecycle {
	return dc.Lifecycle
}

// Attributes returns the attributes for [DevCenter].
func (dc *DevCenter) Attributes() devCenterAttributes {
	return devCenterAttributes{ref: terra.ReferenceResource(dc)}
}

// ImportState imports the given attribute values into [DevCenter]'s state.
func (dc *DevCenter) ImportState(av io.Reader) error {
	dc.state = &devCenterState{}
	if err := json.NewDecoder(av).Decode(dc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dc.Type(), dc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevCenter] has state.
func (dc *DevCenter) State() (*devCenterState, bool) {
	return dc.state, dc.state != nil
}

// StateMust returns the state for [DevCenter]. Panics if the state is nil.
func (dc *DevCenter) StateMust() *devCenterState {
	if dc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dc.Type(), dc.LocalName()))
	}
	return dc.state
}

// DevCenterArgs contains the configurations for azurerm_dev_center.
type DevCenterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *devcenter.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *devcenter.Timeouts `hcl:"timeouts,block"`
}
type devCenterAttributes struct {
	ref terra.Reference
}

// DevCenterUri returns a reference to field dev_center_uri of azurerm_dev_center.
func (dc devCenterAttributes) DevCenterUri() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("dev_center_uri"))
}

// Id returns a reference to field id of azurerm_dev_center.
func (dc devCenterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_dev_center.
func (dc devCenterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_dev_center.
func (dc devCenterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_center.
func (dc devCenterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_dev_center.
func (dc devCenterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dc.ref.Append("tags"))
}

func (dc devCenterAttributes) Identity() terra.ListValue[devcenter.IdentityAttributes] {
	return terra.ReferenceAsList[devcenter.IdentityAttributes](dc.ref.Append("identity"))
}

func (dc devCenterAttributes) Timeouts() devcenter.TimeoutsAttributes {
	return terra.ReferenceAsSingle[devcenter.TimeoutsAttributes](dc.ref.Append("timeouts"))
}

type devCenterState struct {
	DevCenterUri      string                    `json:"dev_center_uri"`
	Id                string                    `json:"id"`
	Location          string                    `json:"location"`
	Name              string                    `json:"name"`
	ResourceGroupName string                    `json:"resource_group_name"`
	Tags              map[string]string         `json:"tags"`
	Identity          []devcenter.IdentityState `json:"identity"`
	Timeouts          *devcenter.TimeoutsState  `json:"timeouts"`
}
