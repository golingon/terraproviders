// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subscriptioncostmanagementview "github.com/golingon/terraproviders/azurerm/3.77.0/subscriptioncostmanagementview"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSubscriptionCostManagementView creates a new instance of [SubscriptionCostManagementView].
func NewSubscriptionCostManagementView(name string, args SubscriptionCostManagementViewArgs) *SubscriptionCostManagementView {
	return &SubscriptionCostManagementView{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubscriptionCostManagementView)(nil)

// SubscriptionCostManagementView represents the Terraform resource azurerm_subscription_cost_management_view.
type SubscriptionCostManagementView struct {
	Name      string
	Args      SubscriptionCostManagementViewArgs
	state     *subscriptionCostManagementViewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) Type() string {
	return "azurerm_subscription_cost_management_view"
}

// LocalName returns the local name for [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) LocalName() string {
	return scmv.Name
}

// Configuration returns the configuration (args) for [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) Configuration() interface{} {
	return scmv.Args
}

// DependOn is used for other resources to depend on [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) DependOn() terra.Reference {
	return terra.ReferenceResource(scmv)
}

// Dependencies returns the list of resources [SubscriptionCostManagementView] depends_on.
func (scmv *SubscriptionCostManagementView) Dependencies() terra.Dependencies {
	return scmv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) LifecycleManagement() *terra.Lifecycle {
	return scmv.Lifecycle
}

// Attributes returns the attributes for [SubscriptionCostManagementView].
func (scmv *SubscriptionCostManagementView) Attributes() subscriptionCostManagementViewAttributes {
	return subscriptionCostManagementViewAttributes{ref: terra.ReferenceResource(scmv)}
}

// ImportState imports the given attribute values into [SubscriptionCostManagementView]'s state.
func (scmv *SubscriptionCostManagementView) ImportState(av io.Reader) error {
	scmv.state = &subscriptionCostManagementViewState{}
	if err := json.NewDecoder(av).Decode(scmv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scmv.Type(), scmv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SubscriptionCostManagementView] has state.
func (scmv *SubscriptionCostManagementView) State() (*subscriptionCostManagementViewState, bool) {
	return scmv.state, scmv.state != nil
}

// StateMust returns the state for [SubscriptionCostManagementView]. Panics if the state is nil.
func (scmv *SubscriptionCostManagementView) StateMust() *subscriptionCostManagementViewState {
	if scmv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scmv.Type(), scmv.LocalName()))
	}
	return scmv.state
}

// SubscriptionCostManagementViewArgs contains the configurations for azurerm_subscription_cost_management_view.
type SubscriptionCostManagementViewArgs struct {
	// Accumulated: bool, required
	Accumulated terra.BoolValue `hcl:"accumulated,attr" validate:"required"`
	// ChartType: string, required
	ChartType terra.StringValue `hcl:"chart_type,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReportType: string, required
	ReportType terra.StringValue `hcl:"report_type,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeframe: string, required
	Timeframe terra.StringValue `hcl:"timeframe,attr" validate:"required"`
	// Dataset: required
	Dataset *subscriptioncostmanagementview.Dataset `hcl:"dataset,block" validate:"required"`
	// Kpi: min=0
	Kpi []subscriptioncostmanagementview.Kpi `hcl:"kpi,block" validate:"min=0"`
	// Pivot: min=0
	Pivot []subscriptioncostmanagementview.Pivot `hcl:"pivot,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *subscriptioncostmanagementview.Timeouts `hcl:"timeouts,block"`
}
type subscriptionCostManagementViewAttributes struct {
	ref terra.Reference
}

// Accumulated returns a reference to field accumulated of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) Accumulated() terra.BoolValue {
	return terra.ReferenceAsBool(scmv.ref.Append("accumulated"))
}

// ChartType returns a reference to field chart_type of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) ChartType() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("chart_type"))
}

// DisplayName returns a reference to field display_name of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("name"))
}

// ReportType returns a reference to field report_type of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) ReportType() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("report_type"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("subscription_id"))
}

// Timeframe returns a reference to field timeframe of azurerm_subscription_cost_management_view.
func (scmv subscriptionCostManagementViewAttributes) Timeframe() terra.StringValue {
	return terra.ReferenceAsString(scmv.ref.Append("timeframe"))
}

func (scmv subscriptionCostManagementViewAttributes) Dataset() terra.ListValue[subscriptioncostmanagementview.DatasetAttributes] {
	return terra.ReferenceAsList[subscriptioncostmanagementview.DatasetAttributes](scmv.ref.Append("dataset"))
}

func (scmv subscriptionCostManagementViewAttributes) Kpi() terra.ListValue[subscriptioncostmanagementview.KpiAttributes] {
	return terra.ReferenceAsList[subscriptioncostmanagementview.KpiAttributes](scmv.ref.Append("kpi"))
}

func (scmv subscriptionCostManagementViewAttributes) Pivot() terra.ListValue[subscriptioncostmanagementview.PivotAttributes] {
	return terra.ReferenceAsList[subscriptioncostmanagementview.PivotAttributes](scmv.ref.Append("pivot"))
}

func (scmv subscriptionCostManagementViewAttributes) Timeouts() subscriptioncostmanagementview.TimeoutsAttributes {
	return terra.ReferenceAsSingle[subscriptioncostmanagementview.TimeoutsAttributes](scmv.ref.Append("timeouts"))
}

type subscriptionCostManagementViewState struct {
	Accumulated    bool                                          `json:"accumulated"`
	ChartType      string                                        `json:"chart_type"`
	DisplayName    string                                        `json:"display_name"`
	Id             string                                        `json:"id"`
	Name           string                                        `json:"name"`
	ReportType     string                                        `json:"report_type"`
	SubscriptionId string                                        `json:"subscription_id"`
	Timeframe      string                                        `json:"timeframe"`
	Dataset        []subscriptioncostmanagementview.DatasetState `json:"dataset"`
	Kpi            []subscriptioncostmanagementview.KpiState     `json:"kpi"`
	Pivot          []subscriptioncostmanagementview.PivotState   `json:"pivot"`
	Timeouts       *subscriptioncostmanagementview.TimeoutsState `json:"timeouts"`
}
