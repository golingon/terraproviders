// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistrytokenpassword "github.com/golingon/terraproviders/azurerm/3.77.0/containerregistrytokenpassword"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewContainerRegistryTokenPassword creates a new instance of [ContainerRegistryTokenPassword].
func NewContainerRegistryTokenPassword(name string, args ContainerRegistryTokenPasswordArgs) *ContainerRegistryTokenPassword {
	return &ContainerRegistryTokenPassword{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistryTokenPassword)(nil)

// ContainerRegistryTokenPassword represents the Terraform resource azurerm_container_registry_token_password.
type ContainerRegistryTokenPassword struct {
	Name      string
	Args      ContainerRegistryTokenPasswordArgs
	state     *containerRegistryTokenPasswordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) Type() string {
	return "azurerm_container_registry_token_password"
}

// LocalName returns the local name for [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) LocalName() string {
	return crtp.Name
}

// Configuration returns the configuration (args) for [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) Configuration() interface{} {
	return crtp.Args
}

// DependOn is used for other resources to depend on [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) DependOn() terra.Reference {
	return terra.ReferenceResource(crtp)
}

// Dependencies returns the list of resources [ContainerRegistryTokenPassword] depends_on.
func (crtp *ContainerRegistryTokenPassword) Dependencies() terra.Dependencies {
	return crtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) LifecycleManagement() *terra.Lifecycle {
	return crtp.Lifecycle
}

// Attributes returns the attributes for [ContainerRegistryTokenPassword].
func (crtp *ContainerRegistryTokenPassword) Attributes() containerRegistryTokenPasswordAttributes {
	return containerRegistryTokenPasswordAttributes{ref: terra.ReferenceResource(crtp)}
}

// ImportState imports the given attribute values into [ContainerRegistryTokenPassword]'s state.
func (crtp *ContainerRegistryTokenPassword) ImportState(av io.Reader) error {
	crtp.state = &containerRegistryTokenPasswordState{}
	if err := json.NewDecoder(av).Decode(crtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crtp.Type(), crtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ContainerRegistryTokenPassword] has state.
func (crtp *ContainerRegistryTokenPassword) State() (*containerRegistryTokenPasswordState, bool) {
	return crtp.state, crtp.state != nil
}

// StateMust returns the state for [ContainerRegistryTokenPassword]. Panics if the state is nil.
func (crtp *ContainerRegistryTokenPassword) StateMust() *containerRegistryTokenPasswordState {
	if crtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crtp.Type(), crtp.LocalName()))
	}
	return crtp.state
}

// ContainerRegistryTokenPasswordArgs contains the configurations for azurerm_container_registry_token_password.
type ContainerRegistryTokenPasswordArgs struct {
	// ContainerRegistryTokenId: string, required
	ContainerRegistryTokenId terra.StringValue `hcl:"container_registry_token_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password1: required
	Password1 *containerregistrytokenpassword.Password1 `hcl:"password1,block" validate:"required"`
	// Password2: optional
	Password2 *containerregistrytokenpassword.Password2 `hcl:"password2,block"`
	// Timeouts: optional
	Timeouts *containerregistrytokenpassword.Timeouts `hcl:"timeouts,block"`
}
type containerRegistryTokenPasswordAttributes struct {
	ref terra.Reference
}

// ContainerRegistryTokenId returns a reference to field container_registry_token_id of azurerm_container_registry_token_password.
func (crtp containerRegistryTokenPasswordAttributes) ContainerRegistryTokenId() terra.StringValue {
	return terra.ReferenceAsString(crtp.ref.Append("container_registry_token_id"))
}

// Id returns a reference to field id of azurerm_container_registry_token_password.
func (crtp containerRegistryTokenPasswordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crtp.ref.Append("id"))
}

func (crtp containerRegistryTokenPasswordAttributes) Password1() terra.ListValue[containerregistrytokenpassword.Password1Attributes] {
	return terra.ReferenceAsList[containerregistrytokenpassword.Password1Attributes](crtp.ref.Append("password1"))
}

func (crtp containerRegistryTokenPasswordAttributes) Password2() terra.ListValue[containerregistrytokenpassword.Password2Attributes] {
	return terra.ReferenceAsList[containerregistrytokenpassword.Password2Attributes](crtp.ref.Append("password2"))
}

func (crtp containerRegistryTokenPasswordAttributes) Timeouts() containerregistrytokenpassword.TimeoutsAttributes {
	return terra.ReferenceAsSingle[containerregistrytokenpassword.TimeoutsAttributes](crtp.ref.Append("timeouts"))
}

type containerRegistryTokenPasswordState struct {
	ContainerRegistryTokenId string                                          `json:"container_registry_token_id"`
	Id                       string                                          `json:"id"`
	Password1                []containerregistrytokenpassword.Password1State `json:"password1"`
	Password2                []containerregistrytokenpassword.Password2State `json:"password2"`
	Timeouts                 *containerregistrytokenpassword.TimeoutsState   `json:"timeouts"`
}
