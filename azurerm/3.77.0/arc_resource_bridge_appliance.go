// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	arcresourcebridgeappliance "github.com/golingon/terraproviders/azurerm/3.77.0/arcresourcebridgeappliance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewArcResourceBridgeAppliance creates a new instance of [ArcResourceBridgeAppliance].
func NewArcResourceBridgeAppliance(name string, args ArcResourceBridgeApplianceArgs) *ArcResourceBridgeAppliance {
	return &ArcResourceBridgeAppliance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ArcResourceBridgeAppliance)(nil)

// ArcResourceBridgeAppliance represents the Terraform resource azurerm_arc_resource_bridge_appliance.
type ArcResourceBridgeAppliance struct {
	Name      string
	Args      ArcResourceBridgeApplianceArgs
	state     *arcResourceBridgeApplianceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) Type() string {
	return "azurerm_arc_resource_bridge_appliance"
}

// LocalName returns the local name for [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) LocalName() string {
	return arba.Name
}

// Configuration returns the configuration (args) for [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) Configuration() interface{} {
	return arba.Args
}

// DependOn is used for other resources to depend on [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) DependOn() terra.Reference {
	return terra.ReferenceResource(arba)
}

// Dependencies returns the list of resources [ArcResourceBridgeAppliance] depends_on.
func (arba *ArcResourceBridgeAppliance) Dependencies() terra.Dependencies {
	return arba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) LifecycleManagement() *terra.Lifecycle {
	return arba.Lifecycle
}

// Attributes returns the attributes for [ArcResourceBridgeAppliance].
func (arba *ArcResourceBridgeAppliance) Attributes() arcResourceBridgeApplianceAttributes {
	return arcResourceBridgeApplianceAttributes{ref: terra.ReferenceResource(arba)}
}

// ImportState imports the given attribute values into [ArcResourceBridgeAppliance]'s state.
func (arba *ArcResourceBridgeAppliance) ImportState(av io.Reader) error {
	arba.state = &arcResourceBridgeApplianceState{}
	if err := json.NewDecoder(av).Decode(arba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arba.Type(), arba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ArcResourceBridgeAppliance] has state.
func (arba *ArcResourceBridgeAppliance) State() (*arcResourceBridgeApplianceState, bool) {
	return arba.state, arba.state != nil
}

// StateMust returns the state for [ArcResourceBridgeAppliance]. Panics if the state is nil.
func (arba *ArcResourceBridgeAppliance) StateMust() *arcResourceBridgeApplianceState {
	if arba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arba.Type(), arba.LocalName()))
	}
	return arba.state
}

// ArcResourceBridgeApplianceArgs contains the configurations for azurerm_arc_resource_bridge_appliance.
type ArcResourceBridgeApplianceArgs struct {
	// Distro: string, required
	Distro terra.StringValue `hcl:"distro,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureProvider: string, required
	InfrastructureProvider terra.StringValue `hcl:"infrastructure_provider,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicKeyBase64: string, optional
	PublicKeyBase64 terra.StringValue `hcl:"public_key_base64,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *arcresourcebridgeappliance.Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *arcresourcebridgeappliance.Timeouts `hcl:"timeouts,block"`
}
type arcResourceBridgeApplianceAttributes struct {
	ref terra.Reference
}

// Distro returns a reference to field distro of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) Distro() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("distro"))
}

// Id returns a reference to field id of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("id"))
}

// InfrastructureProvider returns a reference to field infrastructure_provider of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) InfrastructureProvider() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("infrastructure_provider"))
}

// Location returns a reference to field location of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("name"))
}

// PublicKeyBase64 returns a reference to field public_key_base64 of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) PublicKeyBase64() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("public_key_base64"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arba.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_arc_resource_bridge_appliance.
func (arba arcResourceBridgeApplianceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arba.ref.Append("tags"))
}

func (arba arcResourceBridgeApplianceAttributes) Identity() terra.ListValue[arcresourcebridgeappliance.IdentityAttributes] {
	return terra.ReferenceAsList[arcresourcebridgeappliance.IdentityAttributes](arba.ref.Append("identity"))
}

func (arba arcResourceBridgeApplianceAttributes) Timeouts() arcresourcebridgeappliance.TimeoutsAttributes {
	return terra.ReferenceAsSingle[arcresourcebridgeappliance.TimeoutsAttributes](arba.ref.Append("timeouts"))
}

type arcResourceBridgeApplianceState struct {
	Distro                 string                                     `json:"distro"`
	Id                     string                                     `json:"id"`
	InfrastructureProvider string                                     `json:"infrastructure_provider"`
	Location               string                                     `json:"location"`
	Name                   string                                     `json:"name"`
	PublicKeyBase64        string                                     `json:"public_key_base64"`
	ResourceGroupName      string                                     `json:"resource_group_name"`
	Tags                   map[string]string                          `json:"tags"`
	Identity               []arcresourcebridgeappliance.IdentityState `json:"identity"`
	Timeouts               *arcresourcebridgeappliance.TimeoutsState  `json:"timeouts"`
}
