// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataapplicationgateway

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AuthenticationCertificate struct{}

type AutoscaleConfiguration struct{}

type BackendAddressPool struct{}

type BackendHttpSettings struct {
	// BackendHttpSettingsAuthenticationCertificate: min=0
	AuthenticationCertificate []BackendHttpSettingsAuthenticationCertificate `hcl:"authentication_certificate,block" validate:"min=0"`
	// ConnectionDraining: min=0
	ConnectionDraining []ConnectionDraining `hcl:"connection_draining,block" validate:"min=0"`
}

type BackendHttpSettingsAuthenticationCertificate struct{}

type ConnectionDraining struct{}

type CustomErrorConfiguration struct{}

type FrontendIpConfiguration struct{}

type FrontendPort struct{}

type GatewayIpConfiguration struct{}

type Global struct{}

type HttpListener struct {
	// HttpListenerCustomErrorConfiguration: min=0
	CustomErrorConfiguration []HttpListenerCustomErrorConfiguration `hcl:"custom_error_configuration,block" validate:"min=0"`
}

type HttpListenerCustomErrorConfiguration struct{}

type Identity struct{}

type PrivateEndpointConnection struct{}

type PrivateLinkConfiguration struct {
	// IpConfiguration: min=0
	IpConfiguration []IpConfiguration `hcl:"ip_configuration,block" validate:"min=0"`
}

type IpConfiguration struct{}

type Probe struct {
	// Match: min=0
	Match []Match `hcl:"match,block" validate:"min=0"`
}

type Match struct{}

type RedirectConfiguration struct{}

type RequestRoutingRule struct{}

type RewriteRuleSet struct {
	// RewriteRule: min=0
	RewriteRule []RewriteRule `hcl:"rewrite_rule,block" validate:"min=0"`
}

type RewriteRule struct {
	// Condition: min=0
	Condition []Condition `hcl:"condition,block" validate:"min=0"`
	// RequestHeaderConfiguration: min=0
	RequestHeaderConfiguration []RequestHeaderConfiguration `hcl:"request_header_configuration,block" validate:"min=0"`
	// ResponseHeaderConfiguration: min=0
	ResponseHeaderConfiguration []ResponseHeaderConfiguration `hcl:"response_header_configuration,block" validate:"min=0"`
	// Url: min=0
	Url []Url `hcl:"url,block" validate:"min=0"`
}

type Condition struct{}

type RequestHeaderConfiguration struct{}

type ResponseHeaderConfiguration struct{}

type Url struct{}

type Sku struct{}

type SslCertificate struct{}

type SslPolicy struct{}

type SslProfile struct {
	// SslProfileSslPolicy: min=0
	SslPolicy []SslProfileSslPolicy `hcl:"ssl_policy,block" validate:"min=0"`
}

type SslProfileSslPolicy struct{}

type TrustedClientCertificate struct{}

type TrustedRootCertificate struct{}

type UrlPathMap struct {
	// PathRule: min=0
	PathRule []PathRule `hcl:"path_rule,block" validate:"min=0"`
}

type PathRule struct{}

type WafConfiguration struct {
	// DisabledRuleGroup: min=0
	DisabledRuleGroup []DisabledRuleGroup `hcl:"disabled_rule_group,block" validate:"min=0"`
	// Exclusion: min=0
	Exclusion []Exclusion `hcl:"exclusion,block" validate:"min=0"`
}

type DisabledRuleGroup struct{}

type Exclusion struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac AuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) AuthenticationCertificateAttributes {
	return AuthenticationCertificateAttributes{ref: ref}
}

func (ac AuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac AuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type AutoscaleConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AutoscaleConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AutoscaleConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoscaleConfigurationAttributes {
	return AutoscaleConfigurationAttributes{ref: ref}
}

func (ac AutoscaleConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AutoscaleConfigurationAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max_capacity"))
}

func (ac AutoscaleConfigurationAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min_capacity"))
}

type BackendAddressPoolAttributes struct {
	ref terra.Reference
}

func (bap BackendAddressPoolAttributes) InternalRef() (terra.Reference, error) {
	return bap.ref, nil
}

func (bap BackendAddressPoolAttributes) InternalWithRef(ref terra.Reference) BackendAddressPoolAttributes {
	return BackendAddressPoolAttributes{ref: ref}
}

func (bap BackendAddressPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bap.ref.InternalTokens()
}

func (bap BackendAddressPoolAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bap.ref.Append("fqdns"))
}

func (bap BackendAddressPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("id"))
}

func (bap BackendAddressPoolAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bap.ref.Append("ip_addresses"))
}

func (bap BackendAddressPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("name"))
}

type BackendHttpSettingsAttributes struct {
	ref terra.Reference
}

func (bhs BackendHttpSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bhs.ref, nil
}

func (bhs BackendHttpSettingsAttributes) InternalWithRef(ref terra.Reference) BackendHttpSettingsAttributes {
	return BackendHttpSettingsAttributes{ref: ref}
}

func (bhs BackendHttpSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bhs.ref.InternalTokens()
}

func (bhs BackendHttpSettingsAttributes) AffinityCookieName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("affinity_cookie_name"))
}

func (bhs BackendHttpSettingsAttributes) CookieBasedAffinity() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("cookie_based_affinity"))
}

func (bhs BackendHttpSettingsAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("host_name"))
}

func (bhs BackendHttpSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("id"))
}

func (bhs BackendHttpSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("name"))
}

func (bhs BackendHttpSettingsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("path"))
}

func (bhs BackendHttpSettingsAttributes) PickHostNameFromBackendAddress() terra.BoolValue {
	return terra.ReferenceAsBool(bhs.ref.Append("pick_host_name_from_backend_address"))
}

func (bhs BackendHttpSettingsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("port"))
}

func (bhs BackendHttpSettingsAttributes) ProbeId() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_id"))
}

func (bhs BackendHttpSettingsAttributes) ProbeName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_name"))
}

func (bhs BackendHttpSettingsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("protocol"))
}

func (bhs BackendHttpSettingsAttributes) RequestTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("request_timeout"))
}

func (bhs BackendHttpSettingsAttributes) TrustedRootCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bhs.ref.Append("trusted_root_certificate_names"))
}

func (bhs BackendHttpSettingsAttributes) AuthenticationCertificate() terra.ListValue[BackendHttpSettingsAuthenticationCertificateAttributes] {
	return terra.ReferenceAsList[BackendHttpSettingsAuthenticationCertificateAttributes](bhs.ref.Append("authentication_certificate"))
}

func (bhs BackendHttpSettingsAttributes) ConnectionDraining() terra.ListValue[ConnectionDrainingAttributes] {
	return terra.ReferenceAsList[ConnectionDrainingAttributes](bhs.ref.Append("connection_draining"))
}

type BackendHttpSettingsAuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) BackendHttpSettingsAuthenticationCertificateAttributes {
	return BackendHttpSettingsAuthenticationCertificateAttributes{ref: ref}
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type ConnectionDrainingAttributes struct {
	ref terra.Reference
}

func (cd ConnectionDrainingAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd ConnectionDrainingAttributes) InternalWithRef(ref terra.Reference) ConnectionDrainingAttributes {
	return ConnectionDrainingAttributes{ref: ref}
}

func (cd ConnectionDrainingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd ConnectionDrainingAttributes) DrainTimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("drain_timeout_sec"))
}

func (cd ConnectionDrainingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cd.ref.Append("enabled"))
}

type CustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec CustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec CustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) CustomErrorConfigurationAttributes {
	return CustomErrorConfigurationAttributes{ref: ref}
}

func (cec CustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec CustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec CustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec CustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type FrontendIpConfigurationAttributes struct {
	ref terra.Reference
}

func (fic FrontendIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fic.ref, nil
}

func (fic FrontendIpConfigurationAttributes) InternalWithRef(ref terra.Reference) FrontendIpConfigurationAttributes {
	return FrontendIpConfigurationAttributes{ref: ref}
}

func (fic FrontendIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fic.ref.InternalTokens()
}

func (fic FrontendIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("id"))
}

func (fic FrontendIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("name"))
}

func (fic FrontendIpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address"))
}

func (fic FrontendIpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address_allocation"))
}

func (fic FrontendIpConfigurationAttributes) PrivateLinkConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_id"))
}

func (fic FrontendIpConfigurationAttributes) PrivateLinkConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_name"))
}

func (fic FrontendIpConfigurationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("public_ip_address_id"))
}

func (fic FrontendIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("subnet_id"))
}

type FrontendPortAttributes struct {
	ref terra.Reference
}

func (fp FrontendPortAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp FrontendPortAttributes) InternalWithRef(ref terra.Reference) FrontendPortAttributes {
	return FrontendPortAttributes{ref: ref}
}

func (fp FrontendPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp FrontendPortAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("id"))
}

func (fp FrontendPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("name"))
}

func (fp FrontendPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fp.ref.Append("port"))
}

type GatewayIpConfigurationAttributes struct {
	ref terra.Reference
}

func (gic GatewayIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gic.ref, nil
}

func (gic GatewayIpConfigurationAttributes) InternalWithRef(ref terra.Reference) GatewayIpConfigurationAttributes {
	return GatewayIpConfigurationAttributes{ref: ref}
}

func (gic GatewayIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gic.ref.InternalTokens()
}

func (gic GatewayIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("id"))
}

func (gic GatewayIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("name"))
}

func (gic GatewayIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("subnet_id"))
}

type GlobalAttributes struct {
	ref terra.Reference
}

func (g GlobalAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GlobalAttributes) InternalWithRef(ref terra.Reference) GlobalAttributes {
	return GlobalAttributes{ref: ref}
}

func (g GlobalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GlobalAttributes) RequestBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("request_buffering_enabled"))
}

func (g GlobalAttributes) ResponseBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("response_buffering_enabled"))
}

type HttpListenerAttributes struct {
	ref terra.Reference
}

func (hl HttpListenerAttributes) InternalRef() (terra.Reference, error) {
	return hl.ref, nil
}

func (hl HttpListenerAttributes) InternalWithRef(ref terra.Reference) HttpListenerAttributes {
	return HttpListenerAttributes{ref: ref}
}

func (hl HttpListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hl.ref.InternalTokens()
}

func (hl HttpListenerAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("firewall_policy_id"))
}

func (hl HttpListenerAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_id"))
}

func (hl HttpListenerAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_name"))
}

func (hl HttpListenerAttributes) FrontendPortId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_id"))
}

func (hl HttpListenerAttributes) FrontendPortName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_name"))
}

func (hl HttpListenerAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("host_name"))
}

func (hl HttpListenerAttributes) HostNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hl.ref.Append("host_names"))
}

func (hl HttpListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("id"))
}

func (hl HttpListenerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("name"))
}

func (hl HttpListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("protocol"))
}

func (hl HttpListenerAttributes) RequireSni() terra.BoolValue {
	return terra.ReferenceAsBool(hl.ref.Append("require_sni"))
}

func (hl HttpListenerAttributes) SslCertificateId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_id"))
}

func (hl HttpListenerAttributes) SslCertificateName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_name"))
}

func (hl HttpListenerAttributes) SslProfileId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_id"))
}

func (hl HttpListenerAttributes) SslProfileName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_name"))
}

func (hl HttpListenerAttributes) CustomErrorConfiguration() terra.ListValue[HttpListenerCustomErrorConfigurationAttributes] {
	return terra.ReferenceAsList[HttpListenerCustomErrorConfigurationAttributes](hl.ref.Append("custom_error_configuration"))
}

type HttpListenerCustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpListenerCustomErrorConfigurationAttributes {
	return HttpListenerCustomErrorConfigurationAttributes{ref: ref}
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec HttpListenerCustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec HttpListenerCustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec HttpListenerCustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type PrivateEndpointConnectionAttributes struct {
	ref terra.Reference
}

func (pec PrivateEndpointConnectionAttributes) InternalRef() (terra.Reference, error) {
	return pec.ref, nil
}

func (pec PrivateEndpointConnectionAttributes) InternalWithRef(ref terra.Reference) PrivateEndpointConnectionAttributes {
	return PrivateEndpointConnectionAttributes{ref: ref}
}

func (pec PrivateEndpointConnectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pec.ref.InternalTokens()
}

func (pec PrivateEndpointConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("id"))
}

func (pec PrivateEndpointConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("name"))
}

type PrivateLinkConfigurationAttributes struct {
	ref terra.Reference
}

func (plc PrivateLinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return plc.ref, nil
}

func (plc PrivateLinkConfigurationAttributes) InternalWithRef(ref terra.Reference) PrivateLinkConfigurationAttributes {
	return PrivateLinkConfigurationAttributes{ref: ref}
}

func (plc PrivateLinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return plc.ref.InternalTokens()
}

func (plc PrivateLinkConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("id"))
}

func (plc PrivateLinkConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("name"))
}

func (plc PrivateLinkConfigurationAttributes) IpConfiguration() terra.ListValue[IpConfigurationAttributes] {
	return terra.ReferenceAsList[IpConfigurationAttributes](plc.ref.Append("ip_configuration"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("primary"))
}

func (ic IpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address"))
}

func (ic IpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address_allocation"))
}

func (ic IpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type ProbeAttributes struct {
	ref terra.Reference
}

func (p ProbeAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProbeAttributes) InternalWithRef(ref terra.Reference) ProbeAttributes {
	return ProbeAttributes{ref: ref}
}

func (p ProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProbeAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p ProbeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("id"))
}

func (p ProbeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("interval"))
}

func (p ProbeAttributes) MinimumServers() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("minimum_servers"))
}

func (p ProbeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ProbeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("path"))
}

func (p ProbeAttributes) PickHostNameFromBackendHttpSettings() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("pick_host_name_from_backend_http_settings"))
}

func (p ProbeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

func (p ProbeAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

func (p ProbeAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("timeout"))
}

func (p ProbeAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("unhealthy_threshold"))
}

func (p ProbeAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceAsList[MatchAttributes](p.ref.Append("match"))
}

type MatchAttributes struct {
	ref terra.Reference
}

func (m MatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MatchAttributes) InternalWithRef(ref terra.Reference) MatchAttributes {
	return MatchAttributes{ref: ref}
}

func (m MatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MatchAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("body"))
}

func (m MatchAttributes) StatusCode() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("status_code"))
}

type RedirectConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RedirectConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RedirectConfigurationAttributes) InternalWithRef(ref terra.Reference) RedirectConfigurationAttributes {
	return RedirectConfigurationAttributes{ref: ref}
}

func (rc RedirectConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RedirectConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("id"))
}

func (rc RedirectConfigurationAttributes) IncludePath() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_path"))
}

func (rc RedirectConfigurationAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_query_string"))
}

func (rc RedirectConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc RedirectConfigurationAttributes) RedirectType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("redirect_type"))
}

func (rc RedirectConfigurationAttributes) TargetListenerId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_id"))
}

func (rc RedirectConfigurationAttributes) TargetListenerName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_name"))
}

func (rc RedirectConfigurationAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_url"))
}

type RequestRoutingRuleAttributes struct {
	ref terra.Reference
}

func (rrr RequestRoutingRuleAttributes) InternalRef() (terra.Reference, error) {
	return rrr.ref, nil
}

func (rrr RequestRoutingRuleAttributes) InternalWithRef(ref terra.Reference) RequestRoutingRuleAttributes {
	return RequestRoutingRuleAttributes{ref: ref}
}

func (rrr RequestRoutingRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrr.ref.InternalTokens()
}

func (rrr RequestRoutingRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_id"))
}

func (rrr RequestRoutingRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_name"))
}

func (rrr RequestRoutingRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_id"))
}

func (rrr RequestRoutingRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_name"))
}

func (rrr RequestRoutingRuleAttributes) HttpListenerId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_id"))
}

func (rrr RequestRoutingRuleAttributes) HttpListenerName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_name"))
}

func (rrr RequestRoutingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("id"))
}

func (rrr RequestRoutingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("name"))
}

func (rrr RequestRoutingRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rrr.ref.Append("priority"))
}

func (rrr RequestRoutingRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_id"))
}

func (rrr RequestRoutingRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_name"))
}

func (rrr RequestRoutingRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_id"))
}

func (rrr RequestRoutingRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_name"))
}

func (rrr RequestRoutingRuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rule_type"))
}

func (rrr RequestRoutingRuleAttributes) UrlPathMapId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_id"))
}

func (rrr RequestRoutingRuleAttributes) UrlPathMapName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_name"))
}

type RewriteRuleSetAttributes struct {
	ref terra.Reference
}

func (rrs RewriteRuleSetAttributes) InternalRef() (terra.Reference, error) {
	return rrs.ref, nil
}

func (rrs RewriteRuleSetAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetAttributes {
	return RewriteRuleSetAttributes{ref: ref}
}

func (rrs RewriteRuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrs.ref.InternalTokens()
}

func (rrs RewriteRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("id"))
}

func (rrs RewriteRuleSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("name"))
}

func (rrs RewriteRuleSetAttributes) RewriteRule() terra.ListValue[RewriteRuleAttributes] {
	return terra.ReferenceAsList[RewriteRuleAttributes](rrs.ref.Append("rewrite_rule"))
}

type RewriteRuleAttributes struct {
	ref terra.Reference
}

func (rr RewriteRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RewriteRuleAttributes) InternalWithRef(ref terra.Reference) RewriteRuleAttributes {
	return RewriteRuleAttributes{ref: ref}
}

func (rr RewriteRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RewriteRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr RewriteRuleAttributes) RuleSequence() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("rule_sequence"))
}

func (rr RewriteRuleAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](rr.ref.Append("condition"))
}

func (rr RewriteRuleAttributes) RequestHeaderConfiguration() terra.ListValue[RequestHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[RequestHeaderConfigurationAttributes](rr.ref.Append("request_header_configuration"))
}

func (rr RewriteRuleAttributes) ResponseHeaderConfiguration() terra.ListValue[ResponseHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[ResponseHeaderConfigurationAttributes](rr.ref.Append("response_header_configuration"))
}

func (rr RewriteRuleAttributes) Url() terra.ListValue[UrlAttributes] {
	return terra.ReferenceAsList[UrlAttributes](rr.ref.Append("url"))
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("ignore_case"))
}

func (c ConditionAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("negate"))
}

func (c ConditionAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("pattern"))
}

func (c ConditionAttributes) Variable() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("variable"))
}

type RequestHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc RequestHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc RequestHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) RequestHeaderConfigurationAttributes {
	return RequestHeaderConfigurationAttributes{ref: ref}
}

func (rhc RequestHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc RequestHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc RequestHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type ResponseHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc ResponseHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc ResponseHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) ResponseHeaderConfigurationAttributes {
	return ResponseHeaderConfigurationAttributes{ref: ref}
}

func (rhc ResponseHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc ResponseHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc ResponseHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type UrlAttributes struct {
	ref terra.Reference
}

func (u UrlAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UrlAttributes) InternalWithRef(ref terra.Reference) UrlAttributes {
	return UrlAttributes{ref: ref}
}

func (u UrlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UrlAttributes) Components() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("components"))
}

func (u UrlAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("path"))
}

func (u UrlAttributes) QueryString() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("query_string"))
}

func (u UrlAttributes) Reroute() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("reroute"))
}

type SkuAttributes struct {
	ref terra.Reference
}

func (s SkuAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SkuAttributes) InternalWithRef(ref terra.Reference) SkuAttributes {
	return SkuAttributes{ref: ref}
}

func (s SkuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("capacity"))
}

func (s SkuAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SkuAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

type SslCertificateAttributes struct {
	ref terra.Reference
}

func (sc SslCertificateAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SslCertificateAttributes) InternalWithRef(ref terra.Reference) SslCertificateAttributes {
	return SslCertificateAttributes{ref: ref}
}

func (sc SslCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

func (sc SslCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key_vault_secret_id"))
}

func (sc SslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc SslCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("public_cert_data"))
}

type SslPolicyAttributes struct {
	ref terra.Reference
}

func (sp SslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslPolicyAttributes) InternalWithRef(ref terra.Reference) SslPolicyAttributes {
	return SslPolicyAttributes{ref: ref}
}

func (sp SslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp SslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp SslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp SslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp SslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type SslProfileAttributes struct {
	ref terra.Reference
}

func (sp SslProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslProfileAttributes) InternalWithRef(ref terra.Reference) SslProfileAttributes {
	return SslProfileAttributes{ref: ref}
}

func (sp SslProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("id"))
}

func (sp SslProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("name"))
}

func (sp SslProfileAttributes) TrustedClientCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("trusted_client_certificate_names"))
}

func (sp SslProfileAttributes) VerifyClientCertificateIssuerDn() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("verify_client_certificate_issuer_dn"))
}

func (sp SslProfileAttributes) VerifyClientCertificateRevocation() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("verify_client_certificate_revocation"))
}

func (sp SslProfileAttributes) SslPolicy() terra.ListValue[SslProfileSslPolicyAttributes] {
	return terra.ReferenceAsList[SslProfileSslPolicyAttributes](sp.ref.Append("ssl_policy"))
}

type SslProfileSslPolicyAttributes struct {
	ref terra.Reference
}

func (sp SslProfileSslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslProfileSslPolicyAttributes) InternalWithRef(ref terra.Reference) SslProfileSslPolicyAttributes {
	return SslProfileSslPolicyAttributes{ref: ref}
}

func (sp SslProfileSslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslProfileSslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp SslProfileSslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp SslProfileSslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp SslProfileSslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp SslProfileSslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type TrustedClientCertificateAttributes struct {
	ref terra.Reference
}

func (tcc TrustedClientCertificateAttributes) InternalRef() (terra.Reference, error) {
	return tcc.ref, nil
}

func (tcc TrustedClientCertificateAttributes) InternalWithRef(ref terra.Reference) TrustedClientCertificateAttributes {
	return TrustedClientCertificateAttributes{ref: ref}
}

func (tcc TrustedClientCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tcc.ref.InternalTokens()
}

func (tcc TrustedClientCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("id"))
}

func (tcc TrustedClientCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("name"))
}

type TrustedRootCertificateAttributes struct {
	ref terra.Reference
}

func (trc TrustedRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return trc.ref, nil
}

func (trc TrustedRootCertificateAttributes) InternalWithRef(ref terra.Reference) TrustedRootCertificateAttributes {
	return TrustedRootCertificateAttributes{ref: ref}
}

func (trc TrustedRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trc.ref.InternalTokens()
}

func (trc TrustedRootCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("id"))
}

func (trc TrustedRootCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("key_vault_secret_id"))
}

func (trc TrustedRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("name"))
}

type UrlPathMapAttributes struct {
	ref terra.Reference
}

func (upm UrlPathMapAttributes) InternalRef() (terra.Reference, error) {
	return upm.ref, nil
}

func (upm UrlPathMapAttributes) InternalWithRef(ref terra.Reference) UrlPathMapAttributes {
	return UrlPathMapAttributes{ref: ref}
}

func (upm UrlPathMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upm.ref.InternalTokens()
}

func (upm UrlPathMapAttributes) DefaultBackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_id"))
}

func (upm UrlPathMapAttributes) DefaultBackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_name"))
}

func (upm UrlPathMapAttributes) DefaultBackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_id"))
}

func (upm UrlPathMapAttributes) DefaultBackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_name"))
}

func (upm UrlPathMapAttributes) DefaultRedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_id"))
}

func (upm UrlPathMapAttributes) DefaultRedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_name"))
}

func (upm UrlPathMapAttributes) DefaultRewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_id"))
}

func (upm UrlPathMapAttributes) DefaultRewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_name"))
}

func (upm UrlPathMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("id"))
}

func (upm UrlPathMapAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("name"))
}

func (upm UrlPathMapAttributes) PathRule() terra.ListValue[PathRuleAttributes] {
	return terra.ReferenceAsList[PathRuleAttributes](upm.ref.Append("path_rule"))
}

type PathRuleAttributes struct {
	ref terra.Reference
}

func (pr PathRuleAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PathRuleAttributes) InternalWithRef(ref terra.Reference) PathRuleAttributes {
	return PathRuleAttributes{ref: ref}
}

func (pr PathRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PathRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_id"))
}

func (pr PathRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_name"))
}

func (pr PathRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_id"))
}

func (pr PathRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_name"))
}

func (pr PathRuleAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("firewall_policy_id"))
}

func (pr PathRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("id"))
}

func (pr PathRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("name"))
}

func (pr PathRuleAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pr.ref.Append("paths"))
}

func (pr PathRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_id"))
}

func (pr PathRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_name"))
}

func (pr PathRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_id"))
}

func (pr PathRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_name"))
}

type WafConfigurationAttributes struct {
	ref terra.Reference
}

func (wc WafConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WafConfigurationAttributes) InternalWithRef(ref terra.Reference) WafConfigurationAttributes {
	return WafConfigurationAttributes{ref: ref}
}

func (wc WafConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WafConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("enabled"))
}

func (wc WafConfigurationAttributes) FileUploadLimitMb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("file_upload_limit_mb"))
}

func (wc WafConfigurationAttributes) FirewallMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("firewall_mode"))
}

func (wc WafConfigurationAttributes) MaxRequestBodySizeKb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("max_request_body_size_kb"))
}

func (wc WafConfigurationAttributes) RequestBodyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("request_body_check"))
}

func (wc WafConfigurationAttributes) RuleSetType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_type"))
}

func (wc WafConfigurationAttributes) RuleSetVersion() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_version"))
}

func (wc WafConfigurationAttributes) DisabledRuleGroup() terra.ListValue[DisabledRuleGroupAttributes] {
	return terra.ReferenceAsList[DisabledRuleGroupAttributes](wc.ref.Append("disabled_rule_group"))
}

func (wc WafConfigurationAttributes) Exclusion() terra.ListValue[ExclusionAttributes] {
	return terra.ReferenceAsList[ExclusionAttributes](wc.ref.Append("exclusion"))
}

type DisabledRuleGroupAttributes struct {
	ref terra.Reference
}

func (drg DisabledRuleGroupAttributes) InternalRef() (terra.Reference, error) {
	return drg.ref, nil
}

func (drg DisabledRuleGroupAttributes) InternalWithRef(ref terra.Reference) DisabledRuleGroupAttributes {
	return DisabledRuleGroupAttributes{ref: ref}
}

func (drg DisabledRuleGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drg.ref.InternalTokens()
}

func (drg DisabledRuleGroupAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(drg.ref.Append("rule_group_name"))
}

func (drg DisabledRuleGroupAttributes) Rules() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](drg.ref.Append("rules"))
}

type ExclusionAttributes struct {
	ref terra.Reference
}

func (e ExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExclusionAttributes) InternalWithRef(ref terra.Reference) ExclusionAttributes {
	return ExclusionAttributes{ref: ref}
}

func (e ExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e ExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

func (e ExclusionAttributes) SelectorMatchOperator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector_match_operator"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AuthenticationCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type AutoscaleConfigurationState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
}

type BackendAddressPoolState struct {
	Fqdns       []string `json:"fqdns"`
	Id          string   `json:"id"`
	IpAddresses []string `json:"ip_addresses"`
	Name        string   `json:"name"`
}

type BackendHttpSettingsState struct {
	AffinityCookieName             string                                              `json:"affinity_cookie_name"`
	CookieBasedAffinity            string                                              `json:"cookie_based_affinity"`
	HostName                       string                                              `json:"host_name"`
	Id                             string                                              `json:"id"`
	Name                           string                                              `json:"name"`
	Path                           string                                              `json:"path"`
	PickHostNameFromBackendAddress bool                                                `json:"pick_host_name_from_backend_address"`
	Port                           float64                                             `json:"port"`
	ProbeId                        string                                              `json:"probe_id"`
	ProbeName                      string                                              `json:"probe_name"`
	Protocol                       string                                              `json:"protocol"`
	RequestTimeout                 float64                                             `json:"request_timeout"`
	TrustedRootCertificateNames    []string                                            `json:"trusted_root_certificate_names"`
	AuthenticationCertificate      []BackendHttpSettingsAuthenticationCertificateState `json:"authentication_certificate"`
	ConnectionDraining             []ConnectionDrainingState                           `json:"connection_draining"`
}

type BackendHttpSettingsAuthenticationCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type ConnectionDrainingState struct {
	DrainTimeoutSec float64 `json:"drain_timeout_sec"`
	Enabled         bool    `json:"enabled"`
}

type CustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type FrontendIpConfigurationState struct {
	Id                           string `json:"id"`
	Name                         string `json:"name"`
	PrivateIpAddress             string `json:"private_ip_address"`
	PrivateIpAddressAllocation   string `json:"private_ip_address_allocation"`
	PrivateLinkConfigurationId   string `json:"private_link_configuration_id"`
	PrivateLinkConfigurationName string `json:"private_link_configuration_name"`
	PublicIpAddressId            string `json:"public_ip_address_id"`
	SubnetId                     string `json:"subnet_id"`
}

type FrontendPortState struct {
	Id   string  `json:"id"`
	Name string  `json:"name"`
	Port float64 `json:"port"`
}

type GatewayIpConfigurationState struct {
	Id       string `json:"id"`
	Name     string `json:"name"`
	SubnetId string `json:"subnet_id"`
}

type GlobalState struct {
	RequestBufferingEnabled  bool `json:"request_buffering_enabled"`
	ResponseBufferingEnabled bool `json:"response_buffering_enabled"`
}

type HttpListenerState struct {
	FirewallPolicyId            string                                      `json:"firewall_policy_id"`
	FrontendIpConfigurationId   string                                      `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string                                      `json:"frontend_ip_configuration_name"`
	FrontendPortId              string                                      `json:"frontend_port_id"`
	FrontendPortName            string                                      `json:"frontend_port_name"`
	HostName                    string                                      `json:"host_name"`
	HostNames                   []string                                    `json:"host_names"`
	Id                          string                                      `json:"id"`
	Name                        string                                      `json:"name"`
	Protocol                    string                                      `json:"protocol"`
	RequireSni                  bool                                        `json:"require_sni"`
	SslCertificateId            string                                      `json:"ssl_certificate_id"`
	SslCertificateName          string                                      `json:"ssl_certificate_name"`
	SslProfileId                string                                      `json:"ssl_profile_id"`
	SslProfileName              string                                      `json:"ssl_profile_name"`
	CustomErrorConfiguration    []HttpListenerCustomErrorConfigurationState `json:"custom_error_configuration"`
}

type HttpListenerCustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type PrivateEndpointConnectionState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type PrivateLinkConfigurationState struct {
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	IpConfiguration []IpConfigurationState `json:"ip_configuration"`
}

type IpConfigurationState struct {
	Name                       string `json:"name"`
	Primary                    bool   `json:"primary"`
	PrivateIpAddress           string `json:"private_ip_address"`
	PrivateIpAddressAllocation string `json:"private_ip_address_allocation"`
	SubnetId                   string `json:"subnet_id"`
}

type ProbeState struct {
	Host                                string       `json:"host"`
	Id                                  string       `json:"id"`
	Interval                            float64      `json:"interval"`
	MinimumServers                      float64      `json:"minimum_servers"`
	Name                                string       `json:"name"`
	Path                                string       `json:"path"`
	PickHostNameFromBackendHttpSettings bool         `json:"pick_host_name_from_backend_http_settings"`
	Port                                float64      `json:"port"`
	Protocol                            string       `json:"protocol"`
	Timeout                             float64      `json:"timeout"`
	UnhealthyThreshold                  float64      `json:"unhealthy_threshold"`
	Match                               []MatchState `json:"match"`
}

type MatchState struct {
	Body       string   `json:"body"`
	StatusCode []string `json:"status_code"`
}

type RedirectConfigurationState struct {
	Id                 string `json:"id"`
	IncludePath        bool   `json:"include_path"`
	IncludeQueryString bool   `json:"include_query_string"`
	Name               string `json:"name"`
	RedirectType       string `json:"redirect_type"`
	TargetListenerId   string `json:"target_listener_id"`
	TargetListenerName string `json:"target_listener_name"`
	TargetUrl          string `json:"target_url"`
}

type RequestRoutingRuleState struct {
	BackendAddressPoolId      string  `json:"backend_address_pool_id"`
	BackendAddressPoolName    string  `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string  `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string  `json:"backend_http_settings_name"`
	HttpListenerId            string  `json:"http_listener_id"`
	HttpListenerName          string  `json:"http_listener_name"`
	Id                        string  `json:"id"`
	Name                      string  `json:"name"`
	Priority                  float64 `json:"priority"`
	RedirectConfigurationId   string  `json:"redirect_configuration_id"`
	RedirectConfigurationName string  `json:"redirect_configuration_name"`
	RewriteRuleSetId          string  `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string  `json:"rewrite_rule_set_name"`
	RuleType                  string  `json:"rule_type"`
	UrlPathMapId              string  `json:"url_path_map_id"`
	UrlPathMapName            string  `json:"url_path_map_name"`
}

type RewriteRuleSetState struct {
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	RewriteRule []RewriteRuleState `json:"rewrite_rule"`
}

type RewriteRuleState struct {
	Name                        string                             `json:"name"`
	RuleSequence                float64                            `json:"rule_sequence"`
	Condition                   []ConditionState                   `json:"condition"`
	RequestHeaderConfiguration  []RequestHeaderConfigurationState  `json:"request_header_configuration"`
	ResponseHeaderConfiguration []ResponseHeaderConfigurationState `json:"response_header_configuration"`
	Url                         []UrlState                         `json:"url"`
}

type ConditionState struct {
	IgnoreCase bool   `json:"ignore_case"`
	Negate     bool   `json:"negate"`
	Pattern    string `json:"pattern"`
	Variable   string `json:"variable"`
}

type RequestHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type ResponseHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type UrlState struct {
	Components  string `json:"components"`
	Path        string `json:"path"`
	QueryString string `json:"query_string"`
	Reroute     bool   `json:"reroute"`
}

type SkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
	Tier     string  `json:"tier"`
}

type SslCertificateState struct {
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
	PublicCertData   string `json:"public_cert_data"`
}

type SslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type SslProfileState struct {
	Id                                string                     `json:"id"`
	Name                              string                     `json:"name"`
	TrustedClientCertificateNames     []string                   `json:"trusted_client_certificate_names"`
	VerifyClientCertificateIssuerDn   bool                       `json:"verify_client_certificate_issuer_dn"`
	VerifyClientCertificateRevocation string                     `json:"verify_client_certificate_revocation"`
	SslPolicy                         []SslProfileSslPolicyState `json:"ssl_policy"`
}

type SslProfileSslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type TrustedClientCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type TrustedRootCertificateState struct {
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
}

type UrlPathMapState struct {
	DefaultBackendAddressPoolId      string          `json:"default_backend_address_pool_id"`
	DefaultBackendAddressPoolName    string          `json:"default_backend_address_pool_name"`
	DefaultBackendHttpSettingsId     string          `json:"default_backend_http_settings_id"`
	DefaultBackendHttpSettingsName   string          `json:"default_backend_http_settings_name"`
	DefaultRedirectConfigurationId   string          `json:"default_redirect_configuration_id"`
	DefaultRedirectConfigurationName string          `json:"default_redirect_configuration_name"`
	DefaultRewriteRuleSetId          string          `json:"default_rewrite_rule_set_id"`
	DefaultRewriteRuleSetName        string          `json:"default_rewrite_rule_set_name"`
	Id                               string          `json:"id"`
	Name                             string          `json:"name"`
	PathRule                         []PathRuleState `json:"path_rule"`
}

type PathRuleState struct {
	BackendAddressPoolId      string   `json:"backend_address_pool_id"`
	BackendAddressPoolName    string   `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string   `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string   `json:"backend_http_settings_name"`
	FirewallPolicyId          string   `json:"firewall_policy_id"`
	Id                        string   `json:"id"`
	Name                      string   `json:"name"`
	Paths                     []string `json:"paths"`
	RedirectConfigurationId   string   `json:"redirect_configuration_id"`
	RedirectConfigurationName string   `json:"redirect_configuration_name"`
	RewriteRuleSetId          string   `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string   `json:"rewrite_rule_set_name"`
}

type WafConfigurationState struct {
	Enabled              bool                     `json:"enabled"`
	FileUploadLimitMb    float64                  `json:"file_upload_limit_mb"`
	FirewallMode         string                   `json:"firewall_mode"`
	MaxRequestBodySizeKb float64                  `json:"max_request_body_size_kb"`
	RequestBodyCheck     bool                     `json:"request_body_check"`
	RuleSetType          string                   `json:"rule_set_type"`
	RuleSetVersion       string                   `json:"rule_set_version"`
	DisabledRuleGroup    []DisabledRuleGroupState `json:"disabled_rule_group"`
	Exclusion            []ExclusionState         `json:"exclusion"`
}

type DisabledRuleGroupState struct {
	RuleGroupName string    `json:"rule_group_name"`
	Rules         []float64 `json:"rules"`
}

type ExclusionState struct {
	MatchVariable         string `json:"match_variable"`
	Selector              string `json:"selector"`
	SelectorMatchOperator string `json:"selector_match_operator"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
