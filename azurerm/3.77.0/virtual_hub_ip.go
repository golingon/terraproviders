// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualhubip "github.com/golingon/terraproviders/azurerm/3.77.0/virtualhubip"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVirtualHubIp creates a new instance of [VirtualHubIp].
func NewVirtualHubIp(name string, args VirtualHubIpArgs) *VirtualHubIp {
	return &VirtualHubIp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualHubIp)(nil)

// VirtualHubIp represents the Terraform resource azurerm_virtual_hub_ip.
type VirtualHubIp struct {
	Name      string
	Args      VirtualHubIpArgs
	state     *virtualHubIpState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VirtualHubIp].
func (vhi *VirtualHubIp) Type() string {
	return "azurerm_virtual_hub_ip"
}

// LocalName returns the local name for [VirtualHubIp].
func (vhi *VirtualHubIp) LocalName() string {
	return vhi.Name
}

// Configuration returns the configuration (args) for [VirtualHubIp].
func (vhi *VirtualHubIp) Configuration() interface{} {
	return vhi.Args
}

// DependOn is used for other resources to depend on [VirtualHubIp].
func (vhi *VirtualHubIp) DependOn() terra.Reference {
	return terra.ReferenceResource(vhi)
}

// Dependencies returns the list of resources [VirtualHubIp] depends_on.
func (vhi *VirtualHubIp) Dependencies() terra.Dependencies {
	return vhi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VirtualHubIp].
func (vhi *VirtualHubIp) LifecycleManagement() *terra.Lifecycle {
	return vhi.Lifecycle
}

// Attributes returns the attributes for [VirtualHubIp].
func (vhi *VirtualHubIp) Attributes() virtualHubIpAttributes {
	return virtualHubIpAttributes{ref: terra.ReferenceResource(vhi)}
}

// ImportState imports the given attribute values into [VirtualHubIp]'s state.
func (vhi *VirtualHubIp) ImportState(av io.Reader) error {
	vhi.state = &virtualHubIpState{}
	if err := json.NewDecoder(av).Decode(vhi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vhi.Type(), vhi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VirtualHubIp] has state.
func (vhi *VirtualHubIp) State() (*virtualHubIpState, bool) {
	return vhi.state, vhi.state != nil
}

// StateMust returns the state for [VirtualHubIp]. Panics if the state is nil.
func (vhi *VirtualHubIp) StateMust() *virtualHubIpState {
	if vhi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vhi.Type(), vhi.LocalName()))
	}
	return vhi.state
}

// VirtualHubIpArgs contains the configurations for azurerm_virtual_hub_ip.
type VirtualHubIpArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// PrivateIpAllocationMethod: string, optional
	PrivateIpAllocationMethod terra.StringValue `hcl:"private_ip_allocation_method,attr"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualhubip.Timeouts `hcl:"timeouts,block"`
}
type virtualHubIpAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("name"))
}

// PrivateIpAddress returns a reference to field private_ip_address of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("private_ip_address"))
}

// PrivateIpAllocationMethod returns a reference to field private_ip_allocation_method of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) PrivateIpAllocationMethod() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("private_ip_allocation_method"))
}

// PublicIpAddressId returns a reference to field public_ip_address_id of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("public_ip_address_id"))
}

// SubnetId returns a reference to field subnet_id of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("subnet_id"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_virtual_hub_ip.
func (vhi virtualHubIpAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(vhi.ref.Append("virtual_hub_id"))
}

func (vhi virtualHubIpAttributes) Timeouts() virtualhubip.TimeoutsAttributes {
	return terra.ReferenceAsSingle[virtualhubip.TimeoutsAttributes](vhi.ref.Append("timeouts"))
}

type virtualHubIpState struct {
	Id                        string                      `json:"id"`
	Name                      string                      `json:"name"`
	PrivateIpAddress          string                      `json:"private_ip_address"`
	PrivateIpAllocationMethod string                      `json:"private_ip_allocation_method"`
	PublicIpAddressId         string                      `json:"public_ip_address_id"`
	SubnetId                  string                      `json:"subnet_id"`
	VirtualHubId              string                      `json:"virtual_hub_id"`
	Timeouts                  *virtualhubip.TimeoutsState `json:"timeouts"`
}
