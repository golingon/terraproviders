// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	devcenterproject "github.com/golingon/terraproviders/azurerm/3.77.0/devcenterproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDevCenterProject creates a new instance of [DevCenterProject].
func NewDevCenterProject(name string, args DevCenterProjectArgs) *DevCenterProject {
	return &DevCenterProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevCenterProject)(nil)

// DevCenterProject represents the Terraform resource azurerm_dev_center_project.
type DevCenterProject struct {
	Name      string
	Args      DevCenterProjectArgs
	state     *devCenterProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevCenterProject].
func (dcp *DevCenterProject) Type() string {
	return "azurerm_dev_center_project"
}

// LocalName returns the local name for [DevCenterProject].
func (dcp *DevCenterProject) LocalName() string {
	return dcp.Name
}

// Configuration returns the configuration (args) for [DevCenterProject].
func (dcp *DevCenterProject) Configuration() interface{} {
	return dcp.Args
}

// DependOn is used for other resources to depend on [DevCenterProject].
func (dcp *DevCenterProject) DependOn() terra.Reference {
	return terra.ReferenceResource(dcp)
}

// Dependencies returns the list of resources [DevCenterProject] depends_on.
func (dcp *DevCenterProject) Dependencies() terra.Dependencies {
	return dcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevCenterProject].
func (dcp *DevCenterProject) LifecycleManagement() *terra.Lifecycle {
	return dcp.Lifecycle
}

// Attributes returns the attributes for [DevCenterProject].
func (dcp *DevCenterProject) Attributes() devCenterProjectAttributes {
	return devCenterProjectAttributes{ref: terra.ReferenceResource(dcp)}
}

// ImportState imports the given attribute values into [DevCenterProject]'s state.
func (dcp *DevCenterProject) ImportState(av io.Reader) error {
	dcp.state = &devCenterProjectState{}
	if err := json.NewDecoder(av).Decode(dcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcp.Type(), dcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevCenterProject] has state.
func (dcp *DevCenterProject) State() (*devCenterProjectState, bool) {
	return dcp.state, dcp.state != nil
}

// StateMust returns the state for [DevCenterProject]. Panics if the state is nil.
func (dcp *DevCenterProject) StateMust() *devCenterProjectState {
	if dcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcp.Type(), dcp.LocalName()))
	}
	return dcp.state
}

// DevCenterProjectArgs contains the configurations for azurerm_dev_center_project.
type DevCenterProjectArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DevCenterId: string, required
	DevCenterId terra.StringValue `hcl:"dev_center_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumDevBoxesPerUser: number, optional
	MaximumDevBoxesPerUser terra.NumberValue `hcl:"maximum_dev_boxes_per_user,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *devcenterproject.Timeouts `hcl:"timeouts,block"`
}
type devCenterProjectAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("description"))
}

// DevCenterId returns a reference to field dev_center_id of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) DevCenterId() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("dev_center_id"))
}

// DevCenterUri returns a reference to field dev_center_uri of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) DevCenterUri() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("dev_center_uri"))
}

// Id returns a reference to field id of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("location"))
}

// MaximumDevBoxesPerUser returns a reference to field maximum_dev_boxes_per_user of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) MaximumDevBoxesPerUser() terra.NumberValue {
	return terra.ReferenceAsNumber(dcp.ref.Append("maximum_dev_boxes_per_user"))
}

// Name returns a reference to field name of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_dev_center_project.
func (dcp devCenterProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dcp.ref.Append("tags"))
}

func (dcp devCenterProjectAttributes) Timeouts() devcenterproject.TimeoutsAttributes {
	return terra.ReferenceAsSingle[devcenterproject.TimeoutsAttributes](dcp.ref.Append("timeouts"))
}

type devCenterProjectState struct {
	Description            string                          `json:"description"`
	DevCenterId            string                          `json:"dev_center_id"`
	DevCenterUri           string                          `json:"dev_center_uri"`
	Id                     string                          `json:"id"`
	Location               string                          `json:"location"`
	MaximumDevBoxesPerUser float64                         `json:"maximum_dev_boxes_per_user"`
	Name                   string                          `json:"name"`
	ResourceGroupName      string                          `json:"resource_group_name"`
	Tags                   map[string]string               `json:"tags"`
	Timeouts               *devcenterproject.TimeoutsState `json:"timeouts"`
}
