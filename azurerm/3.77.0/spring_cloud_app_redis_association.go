// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudappredisassociation "github.com/golingon/terraproviders/azurerm/3.77.0/springcloudappredisassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSpringCloudAppRedisAssociation creates a new instance of [SpringCloudAppRedisAssociation].
func NewSpringCloudAppRedisAssociation(name string, args SpringCloudAppRedisAssociationArgs) *SpringCloudAppRedisAssociation {
	return &SpringCloudAppRedisAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudAppRedisAssociation)(nil)

// SpringCloudAppRedisAssociation represents the Terraform resource azurerm_spring_cloud_app_redis_association.
type SpringCloudAppRedisAssociation struct {
	Name      string
	Args      SpringCloudAppRedisAssociationArgs
	state     *springCloudAppRedisAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) Type() string {
	return "azurerm_spring_cloud_app_redis_association"
}

// LocalName returns the local name for [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) LocalName() string {
	return scara.Name
}

// Configuration returns the configuration (args) for [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) Configuration() interface{} {
	return scara.Args
}

// DependOn is used for other resources to depend on [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(scara)
}

// Dependencies returns the list of resources [SpringCloudAppRedisAssociation] depends_on.
func (scara *SpringCloudAppRedisAssociation) Dependencies() terra.Dependencies {
	return scara.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) LifecycleManagement() *terra.Lifecycle {
	return scara.Lifecycle
}

// Attributes returns the attributes for [SpringCloudAppRedisAssociation].
func (scara *SpringCloudAppRedisAssociation) Attributes() springCloudAppRedisAssociationAttributes {
	return springCloudAppRedisAssociationAttributes{ref: terra.ReferenceResource(scara)}
}

// ImportState imports the given attribute values into [SpringCloudAppRedisAssociation]'s state.
func (scara *SpringCloudAppRedisAssociation) ImportState(av io.Reader) error {
	scara.state = &springCloudAppRedisAssociationState{}
	if err := json.NewDecoder(av).Decode(scara.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scara.Type(), scara.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SpringCloudAppRedisAssociation] has state.
func (scara *SpringCloudAppRedisAssociation) State() (*springCloudAppRedisAssociationState, bool) {
	return scara.state, scara.state != nil
}

// StateMust returns the state for [SpringCloudAppRedisAssociation]. Panics if the state is nil.
func (scara *SpringCloudAppRedisAssociation) StateMust() *springCloudAppRedisAssociationState {
	if scara.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scara.Type(), scara.LocalName()))
	}
	return scara.state
}

// SpringCloudAppRedisAssociationArgs contains the configurations for azurerm_spring_cloud_app_redis_association.
type SpringCloudAppRedisAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedisAccessKey: string, required
	RedisAccessKey terra.StringValue `hcl:"redis_access_key,attr" validate:"required"`
	// RedisCacheId: string, required
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// SslEnabled: bool, optional
	SslEnabled terra.BoolValue `hcl:"ssl_enabled,attr"`
	// Timeouts: optional
	Timeouts *springcloudappredisassociation.Timeouts `hcl:"timeouts,block"`
}
type springCloudAppRedisAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scara.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(scara.ref.Append("name"))
}

// RedisAccessKey returns a reference to field redis_access_key of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) RedisAccessKey() terra.StringValue {
	return terra.ReferenceAsString(scara.ref.Append("redis_access_key"))
}

// RedisCacheId returns a reference to field redis_cache_id of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(scara.ref.Append("redis_cache_id"))
}

// SpringCloudAppId returns a reference to field spring_cloud_app_id of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceAsString(scara.ref.Append("spring_cloud_app_id"))
}

// SslEnabled returns a reference to field ssl_enabled of azurerm_spring_cloud_app_redis_association.
func (scara springCloudAppRedisAssociationAttributes) SslEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(scara.ref.Append("ssl_enabled"))
}

func (scara springCloudAppRedisAssociationAttributes) Timeouts() springcloudappredisassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[springcloudappredisassociation.TimeoutsAttributes](scara.ref.Append("timeouts"))
}

type springCloudAppRedisAssociationState struct {
	Id               string                                        `json:"id"`
	Name             string                                        `json:"name"`
	RedisAccessKey   string                                        `json:"redis_access_key"`
	RedisCacheId     string                                        `json:"redis_cache_id"`
	SpringCloudAppId string                                        `json:"spring_cloud_app_id"`
	SslEnabled       bool                                          `json:"ssl_enabled"`
	Timeouts         *springcloudappredisassociation.TimeoutsState `json:"timeouts"`
}
