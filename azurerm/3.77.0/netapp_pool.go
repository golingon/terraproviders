// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	netapppool "github.com/golingon/terraproviders/azurerm/3.77.0/netapppool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNetappPool creates a new instance of [NetappPool].
func NewNetappPool(name string, args NetappPoolArgs) *NetappPool {
	return &NetappPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappPool)(nil)

// NetappPool represents the Terraform resource azurerm_netapp_pool.
type NetappPool struct {
	Name      string
	Args      NetappPoolArgs
	state     *netappPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappPool].
func (np *NetappPool) Type() string {
	return "azurerm_netapp_pool"
}

// LocalName returns the local name for [NetappPool].
func (np *NetappPool) LocalName() string {
	return np.Name
}

// Configuration returns the configuration (args) for [NetappPool].
func (np *NetappPool) Configuration() interface{} {
	return np.Args
}

// DependOn is used for other resources to depend on [NetappPool].
func (np *NetappPool) DependOn() terra.Reference {
	return terra.ReferenceResource(np)
}

// Dependencies returns the list of resources [NetappPool] depends_on.
func (np *NetappPool) Dependencies() terra.Dependencies {
	return np.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappPool].
func (np *NetappPool) LifecycleManagement() *terra.Lifecycle {
	return np.Lifecycle
}

// Attributes returns the attributes for [NetappPool].
func (np *NetappPool) Attributes() netappPoolAttributes {
	return netappPoolAttributes{ref: terra.ReferenceResource(np)}
}

// ImportState imports the given attribute values into [NetappPool]'s state.
func (np *NetappPool) ImportState(av io.Reader) error {
	np.state = &netappPoolState{}
	if err := json.NewDecoder(av).Decode(np.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", np.Type(), np.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappPool] has state.
func (np *NetappPool) State() (*netappPoolState, bool) {
	return np.state, np.state != nil
}

// StateMust returns the state for [NetappPool]. Panics if the state is nil.
func (np *NetappPool) StateMust() *netappPoolState {
	if np.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", np.Type(), np.LocalName()))
	}
	return np.state
}

// NetappPoolArgs contains the configurations for azurerm_netapp_pool.
type NetappPoolArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QosType: string, optional
	QosType terra.StringValue `hcl:"qos_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceLevel: string, required
	ServiceLevel terra.StringValue `hcl:"service_level,attr" validate:"required"`
	// SizeInTb: number, required
	SizeInTb terra.NumberValue `hcl:"size_in_tb,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *netapppool.Timeouts `hcl:"timeouts,block"`
}
type netappPoolAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_netapp_pool.
func (np netappPoolAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("account_name"))
}

// Id returns a reference to field id of azurerm_netapp_pool.
func (np netappPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_netapp_pool.
func (np netappPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_netapp_pool.
func (np netappPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

// QosType returns a reference to field qos_type of azurerm_netapp_pool.
func (np netappPoolAttributes) QosType() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("qos_type"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_netapp_pool.
func (np netappPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("resource_group_name"))
}

// ServiceLevel returns a reference to field service_level of azurerm_netapp_pool.
func (np netappPoolAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("service_level"))
}

// SizeInTb returns a reference to field size_in_tb of azurerm_netapp_pool.
func (np netappPoolAttributes) SizeInTb() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("size_in_tb"))
}

// Tags returns a reference to field tags of azurerm_netapp_pool.
func (np netappPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](np.ref.Append("tags"))
}

func (np netappPoolAttributes) Timeouts() netapppool.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netapppool.TimeoutsAttributes](np.ref.Append("timeouts"))
}

type netappPoolState struct {
	AccountName       string                    `json:"account_name"`
	Id                string                    `json:"id"`
	Location          string                    `json:"location"`
	Name              string                    `json:"name"`
	QosType           string                    `json:"qos_type"`
	ResourceGroupName string                    `json:"resource_group_name"`
	ServiceLevel      string                    `json:"service_level"`
	SizeInTb          float64                   `json:"size_in_tb"`
	Tags              map[string]string         `json:"tags"`
	Timeouts          *netapppool.TimeoutsState `json:"timeouts"`
}
