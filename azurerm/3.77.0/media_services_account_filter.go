// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediaservicesaccountfilter "github.com/golingon/terraproviders/azurerm/3.77.0/mediaservicesaccountfilter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMediaServicesAccountFilter creates a new instance of [MediaServicesAccountFilter].
func NewMediaServicesAccountFilter(name string, args MediaServicesAccountFilterArgs) *MediaServicesAccountFilter {
	return &MediaServicesAccountFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaServicesAccountFilter)(nil)

// MediaServicesAccountFilter represents the Terraform resource azurerm_media_services_account_filter.
type MediaServicesAccountFilter struct {
	Name      string
	Args      MediaServicesAccountFilterArgs
	state     *mediaServicesAccountFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) Type() string {
	return "azurerm_media_services_account_filter"
}

// LocalName returns the local name for [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) LocalName() string {
	return msaf.Name
}

// Configuration returns the configuration (args) for [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) Configuration() interface{} {
	return msaf.Args
}

// DependOn is used for other resources to depend on [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(msaf)
}

// Dependencies returns the list of resources [MediaServicesAccountFilter] depends_on.
func (msaf *MediaServicesAccountFilter) Dependencies() terra.Dependencies {
	return msaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) LifecycleManagement() *terra.Lifecycle {
	return msaf.Lifecycle
}

// Attributes returns the attributes for [MediaServicesAccountFilter].
func (msaf *MediaServicesAccountFilter) Attributes() mediaServicesAccountFilterAttributes {
	return mediaServicesAccountFilterAttributes{ref: terra.ReferenceResource(msaf)}
}

// ImportState imports the given attribute values into [MediaServicesAccountFilter]'s state.
func (msaf *MediaServicesAccountFilter) ImportState(av io.Reader) error {
	msaf.state = &mediaServicesAccountFilterState{}
	if err := json.NewDecoder(av).Decode(msaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msaf.Type(), msaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MediaServicesAccountFilter] has state.
func (msaf *MediaServicesAccountFilter) State() (*mediaServicesAccountFilterState, bool) {
	return msaf.state, msaf.state != nil
}

// StateMust returns the state for [MediaServicesAccountFilter]. Panics if the state is nil.
func (msaf *MediaServicesAccountFilter) StateMust() *mediaServicesAccountFilterState {
	if msaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msaf.Type(), msaf.LocalName()))
	}
	return msaf.state
}

// MediaServicesAccountFilterArgs contains the configurations for azurerm_media_services_account_filter.
type MediaServicesAccountFilterArgs struct {
	// FirstQualityBitrate: number, optional
	FirstQualityBitrate terra.NumberValue `hcl:"first_quality_bitrate,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// PresentationTimeRange: optional
	PresentationTimeRange *mediaservicesaccountfilter.PresentationTimeRange `hcl:"presentation_time_range,block"`
	// Timeouts: optional
	Timeouts *mediaservicesaccountfilter.Timeouts `hcl:"timeouts,block"`
	// TrackSelection: min=0
	TrackSelection []mediaservicesaccountfilter.TrackSelection `hcl:"track_selection,block" validate:"min=0"`
}
type mediaServicesAccountFilterAttributes struct {
	ref terra.Reference
}

// FirstQualityBitrate returns a reference to field first_quality_bitrate of azurerm_media_services_account_filter.
func (msaf mediaServicesAccountFilterAttributes) FirstQualityBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(msaf.ref.Append("first_quality_bitrate"))
}

// Id returns a reference to field id of azurerm_media_services_account_filter.
func (msaf mediaServicesAccountFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(msaf.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_services_account_filter.
func (msaf mediaServicesAccountFilterAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(msaf.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_services_account_filter.
func (msaf mediaServicesAccountFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(msaf.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_services_account_filter.
func (msaf mediaServicesAccountFilterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(msaf.ref.Append("resource_group_name"))
}

func (msaf mediaServicesAccountFilterAttributes) PresentationTimeRange() terra.ListValue[mediaservicesaccountfilter.PresentationTimeRangeAttributes] {
	return terra.ReferenceAsList[mediaservicesaccountfilter.PresentationTimeRangeAttributes](msaf.ref.Append("presentation_time_range"))
}

func (msaf mediaServicesAccountFilterAttributes) Timeouts() mediaservicesaccountfilter.TimeoutsAttributes {
	return terra.ReferenceAsSingle[mediaservicesaccountfilter.TimeoutsAttributes](msaf.ref.Append("timeouts"))
}

func (msaf mediaServicesAccountFilterAttributes) TrackSelection() terra.ListValue[mediaservicesaccountfilter.TrackSelectionAttributes] {
	return terra.ReferenceAsList[mediaservicesaccountfilter.TrackSelectionAttributes](msaf.ref.Append("track_selection"))
}

type mediaServicesAccountFilterState struct {
	FirstQualityBitrate      float64                                                 `json:"first_quality_bitrate"`
	Id                       string                                                  `json:"id"`
	MediaServicesAccountName string                                                  `json:"media_services_account_name"`
	Name                     string                                                  `json:"name"`
	ResourceGroupName        string                                                  `json:"resource_group_name"`
	PresentationTimeRange    []mediaservicesaccountfilter.PresentationTimeRangeState `json:"presentation_time_range"`
	Timeouts                 *mediaservicesaccountfilter.TimeoutsState               `json:"timeouts"`
	TrackSelection           []mediaservicesaccountfilter.TrackSelectionState        `json:"track_selection"`
}
