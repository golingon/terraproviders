// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventgriddomaintopic "github.com/golingon/terraproviders/azurerm/3.76.0/eventgriddomaintopic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewEventgridDomainTopic creates a new instance of [EventgridDomainTopic].
func NewEventgridDomainTopic(name string, args EventgridDomainTopicArgs) *EventgridDomainTopic {
	return &EventgridDomainTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventgridDomainTopic)(nil)

// EventgridDomainTopic represents the Terraform resource azurerm_eventgrid_domain_topic.
type EventgridDomainTopic struct {
	Name      string
	Args      EventgridDomainTopicArgs
	state     *eventgridDomainTopicState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EventgridDomainTopic].
func (edt *EventgridDomainTopic) Type() string {
	return "azurerm_eventgrid_domain_topic"
}

// LocalName returns the local name for [EventgridDomainTopic].
func (edt *EventgridDomainTopic) LocalName() string {
	return edt.Name
}

// Configuration returns the configuration (args) for [EventgridDomainTopic].
func (edt *EventgridDomainTopic) Configuration() interface{} {
	return edt.Args
}

// DependOn is used for other resources to depend on [EventgridDomainTopic].
func (edt *EventgridDomainTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(edt)
}

// Dependencies returns the list of resources [EventgridDomainTopic] depends_on.
func (edt *EventgridDomainTopic) Dependencies() terra.Dependencies {
	return edt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EventgridDomainTopic].
func (edt *EventgridDomainTopic) LifecycleManagement() *terra.Lifecycle {
	return edt.Lifecycle
}

// Attributes returns the attributes for [EventgridDomainTopic].
func (edt *EventgridDomainTopic) Attributes() eventgridDomainTopicAttributes {
	return eventgridDomainTopicAttributes{ref: terra.ReferenceResource(edt)}
}

// ImportState imports the given attribute values into [EventgridDomainTopic]'s state.
func (edt *EventgridDomainTopic) ImportState(av io.Reader) error {
	edt.state = &eventgridDomainTopicState{}
	if err := json.NewDecoder(av).Decode(edt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", edt.Type(), edt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EventgridDomainTopic] has state.
func (edt *EventgridDomainTopic) State() (*eventgridDomainTopicState, bool) {
	return edt.state, edt.state != nil
}

// StateMust returns the state for [EventgridDomainTopic]. Panics if the state is nil.
func (edt *EventgridDomainTopic) StateMust() *eventgridDomainTopicState {
	if edt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", edt.Type(), edt.LocalName()))
	}
	return edt.state
}

// EventgridDomainTopicArgs contains the configurations for azurerm_eventgrid_domain_topic.
type EventgridDomainTopicArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *eventgriddomaintopic.Timeouts `hcl:"timeouts,block"`
}
type eventgridDomainTopicAttributes struct {
	ref terra.Reference
}

// DomainName returns a reference to field domain_name of azurerm_eventgrid_domain_topic.
func (edt eventgridDomainTopicAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(edt.ref.Append("domain_name"))
}

// Id returns a reference to field id of azurerm_eventgrid_domain_topic.
func (edt eventgridDomainTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(edt.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_eventgrid_domain_topic.
func (edt eventgridDomainTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(edt.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_eventgrid_domain_topic.
func (edt eventgridDomainTopicAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(edt.ref.Append("resource_group_name"))
}

func (edt eventgridDomainTopicAttributes) Timeouts() eventgriddomaintopic.TimeoutsAttributes {
	return terra.ReferenceAsSingle[eventgriddomaintopic.TimeoutsAttributes](edt.ref.Append("timeouts"))
}

type eventgridDomainTopicState struct {
	DomainName        string                              `json:"domain_name"`
	Id                string                              `json:"id"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Timeouts          *eventgriddomaintopic.TimeoutsState `json:"timeouts"`
}
