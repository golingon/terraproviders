// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automanageconfiguration "github.com/golingon/terraproviders/azurerm/3.76.0/automanageconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAutomanageConfiguration creates a new instance of [AutomanageConfiguration].
func NewAutomanageConfiguration(name string, args AutomanageConfigurationArgs) *AutomanageConfiguration {
	return &AutomanageConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomanageConfiguration)(nil)

// AutomanageConfiguration represents the Terraform resource azurerm_automanage_configuration.
type AutomanageConfiguration struct {
	Name      string
	Args      AutomanageConfigurationArgs
	state     *automanageConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AutomanageConfiguration].
func (ac *AutomanageConfiguration) Type() string {
	return "azurerm_automanage_configuration"
}

// LocalName returns the local name for [AutomanageConfiguration].
func (ac *AutomanageConfiguration) LocalName() string {
	return ac.Name
}

// Configuration returns the configuration (args) for [AutomanageConfiguration].
func (ac *AutomanageConfiguration) Configuration() interface{} {
	return ac.Args
}

// DependOn is used for other resources to depend on [AutomanageConfiguration].
func (ac *AutomanageConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

// Dependencies returns the list of resources [AutomanageConfiguration] depends_on.
func (ac *AutomanageConfiguration) Dependencies() terra.Dependencies {
	return ac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AutomanageConfiguration].
func (ac *AutomanageConfiguration) LifecycleManagement() *terra.Lifecycle {
	return ac.Lifecycle
}

// Attributes returns the attributes for [AutomanageConfiguration].
func (ac *AutomanageConfiguration) Attributes() automanageConfigurationAttributes {
	return automanageConfigurationAttributes{ref: terra.ReferenceResource(ac)}
}

// ImportState imports the given attribute values into [AutomanageConfiguration]'s state.
func (ac *AutomanageConfiguration) ImportState(av io.Reader) error {
	ac.state = &automanageConfigurationState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AutomanageConfiguration] has state.
func (ac *AutomanageConfiguration) State() (*automanageConfigurationState, bool) {
	return ac.state, ac.state != nil
}

// StateMust returns the state for [AutomanageConfiguration]. Panics if the state is nil.
func (ac *AutomanageConfiguration) StateMust() *automanageConfigurationState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

// AutomanageConfigurationArgs contains the configurations for azurerm_automanage_configuration.
type AutomanageConfigurationArgs struct {
	// AutomationAccountEnabled: bool, optional
	AutomationAccountEnabled terra.BoolValue `hcl:"automation_account_enabled,attr"`
	// BootDiagnosticsEnabled: bool, optional
	BootDiagnosticsEnabled terra.BoolValue `hcl:"boot_diagnostics_enabled,attr"`
	// DefenderForCloudEnabled: bool, optional
	DefenderForCloudEnabled terra.BoolValue `hcl:"defender_for_cloud_enabled,attr"`
	// GuestConfigurationEnabled: bool, optional
	GuestConfigurationEnabled terra.BoolValue `hcl:"guest_configuration_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LogAnalyticsEnabled: bool, optional
	LogAnalyticsEnabled terra.BoolValue `hcl:"log_analytics_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StatusChangeAlertEnabled: bool, optional
	StatusChangeAlertEnabled terra.BoolValue `hcl:"status_change_alert_enabled,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Antimalware: optional
	Antimalware *automanageconfiguration.Antimalware `hcl:"antimalware,block"`
	// AzureSecurityBaseline: optional
	AzureSecurityBaseline *automanageconfiguration.AzureSecurityBaseline `hcl:"azure_security_baseline,block"`
	// Backup: optional
	Backup *automanageconfiguration.Backup `hcl:"backup,block"`
	// Timeouts: optional
	Timeouts *automanageconfiguration.Timeouts `hcl:"timeouts,block"`
}
type automanageConfigurationAttributes struct {
	ref terra.Reference
}

// AutomationAccountEnabled returns a reference to field automation_account_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) AutomationAccountEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("automation_account_enabled"))
}

// BootDiagnosticsEnabled returns a reference to field boot_diagnostics_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) BootDiagnosticsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("boot_diagnostics_enabled"))
}

// DefenderForCloudEnabled returns a reference to field defender_for_cloud_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) DefenderForCloudEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("defender_for_cloud_enabled"))
}

// GuestConfigurationEnabled returns a reference to field guest_configuration_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) GuestConfigurationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("guest_configuration_enabled"))
}

// Id returns a reference to field id of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("location"))
}

// LogAnalyticsEnabled returns a reference to field log_analytics_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) LogAnalyticsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("log_analytics_enabled"))
}

// Name returns a reference to field name of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("resource_group_name"))
}

// StatusChangeAlertEnabled returns a reference to field status_change_alert_enabled of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) StatusChangeAlertEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("status_change_alert_enabled"))
}

// Tags returns a reference to field tags of azurerm_automanage_configuration.
func (ac automanageConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("tags"))
}

func (ac automanageConfigurationAttributes) Antimalware() terra.ListValue[automanageconfiguration.AntimalwareAttributes] {
	return terra.ReferenceAsList[automanageconfiguration.AntimalwareAttributes](ac.ref.Append("antimalware"))
}

func (ac automanageConfigurationAttributes) AzureSecurityBaseline() terra.ListValue[automanageconfiguration.AzureSecurityBaselineAttributes] {
	return terra.ReferenceAsList[automanageconfiguration.AzureSecurityBaselineAttributes](ac.ref.Append("azure_security_baseline"))
}

func (ac automanageConfigurationAttributes) Backup() terra.ListValue[automanageconfiguration.BackupAttributes] {
	return terra.ReferenceAsList[automanageconfiguration.BackupAttributes](ac.ref.Append("backup"))
}

func (ac automanageConfigurationAttributes) Timeouts() automanageconfiguration.TimeoutsAttributes {
	return terra.ReferenceAsSingle[automanageconfiguration.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type automanageConfigurationState struct {
	AutomationAccountEnabled  bool                                                 `json:"automation_account_enabled"`
	BootDiagnosticsEnabled    bool                                                 `json:"boot_diagnostics_enabled"`
	DefenderForCloudEnabled   bool                                                 `json:"defender_for_cloud_enabled"`
	GuestConfigurationEnabled bool                                                 `json:"guest_configuration_enabled"`
	Id                        string                                               `json:"id"`
	Location                  string                                               `json:"location"`
	LogAnalyticsEnabled       bool                                                 `json:"log_analytics_enabled"`
	Name                      string                                               `json:"name"`
	ResourceGroupName         string                                               `json:"resource_group_name"`
	StatusChangeAlertEnabled  bool                                                 `json:"status_change_alert_enabled"`
	Tags                      map[string]string                                    `json:"tags"`
	Antimalware               []automanageconfiguration.AntimalwareState           `json:"antimalware"`
	AzureSecurityBaseline     []automanageconfiguration.AzureSecurityBaselineState `json:"azure_security_baseline"`
	Backup                    []automanageconfiguration.BackupState                `json:"backup"`
	Timeouts                  *automanageconfiguration.TimeoutsState               `json:"timeouts"`
}
