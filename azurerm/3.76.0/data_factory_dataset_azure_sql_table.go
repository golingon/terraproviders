// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorydatasetazuresqltable "github.com/golingon/terraproviders/azurerm/3.76.0/datafactorydatasetazuresqltable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactoryDatasetAzureSqlTable creates a new instance of [DataFactoryDatasetAzureSqlTable].
func NewDataFactoryDatasetAzureSqlTable(name string, args DataFactoryDatasetAzureSqlTableArgs) *DataFactoryDatasetAzureSqlTable {
	return &DataFactoryDatasetAzureSqlTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryDatasetAzureSqlTable)(nil)

// DataFactoryDatasetAzureSqlTable represents the Terraform resource azurerm_data_factory_dataset_azure_sql_table.
type DataFactoryDatasetAzureSqlTable struct {
	Name      string
	Args      DataFactoryDatasetAzureSqlTableArgs
	state     *dataFactoryDatasetAzureSqlTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) Type() string {
	return "azurerm_data_factory_dataset_azure_sql_table"
}

// LocalName returns the local name for [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) LocalName() string {
	return dfdast.Name
}

// Configuration returns the configuration (args) for [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) Configuration() interface{} {
	return dfdast.Args
}

// DependOn is used for other resources to depend on [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) DependOn() terra.Reference {
	return terra.ReferenceResource(dfdast)
}

// Dependencies returns the list of resources [DataFactoryDatasetAzureSqlTable] depends_on.
func (dfdast *DataFactoryDatasetAzureSqlTable) Dependencies() terra.Dependencies {
	return dfdast.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) LifecycleManagement() *terra.Lifecycle {
	return dfdast.Lifecycle
}

// Attributes returns the attributes for [DataFactoryDatasetAzureSqlTable].
func (dfdast *DataFactoryDatasetAzureSqlTable) Attributes() dataFactoryDatasetAzureSqlTableAttributes {
	return dataFactoryDatasetAzureSqlTableAttributes{ref: terra.ReferenceResource(dfdast)}
}

// ImportState imports the given attribute values into [DataFactoryDatasetAzureSqlTable]'s state.
func (dfdast *DataFactoryDatasetAzureSqlTable) ImportState(av io.Reader) error {
	dfdast.state = &dataFactoryDatasetAzureSqlTableState{}
	if err := json.NewDecoder(av).Decode(dfdast.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfdast.Type(), dfdast.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactoryDatasetAzureSqlTable] has state.
func (dfdast *DataFactoryDatasetAzureSqlTable) State() (*dataFactoryDatasetAzureSqlTableState, bool) {
	return dfdast.state, dfdast.state != nil
}

// StateMust returns the state for [DataFactoryDatasetAzureSqlTable]. Panics if the state is nil.
func (dfdast *DataFactoryDatasetAzureSqlTable) StateMust() *dataFactoryDatasetAzureSqlTableState {
	if dfdast.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfdast.Type(), dfdast.LocalName()))
	}
	return dfdast.state
}

// DataFactoryDatasetAzureSqlTableArgs contains the configurations for azurerm_data_factory_dataset_azure_sql_table.
type DataFactoryDatasetAzureSqlTableArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceId: string, required
	LinkedServiceId terra.StringValue `hcl:"linked_service_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// Table: string, optional
	Table terra.StringValue `hcl:"table,attr"`
	// SchemaColumn: min=0
	SchemaColumn []datafactorydatasetazuresqltable.SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datafactorydatasetazuresqltable.Timeouts `hcl:"timeouts,block"`
}
type dataFactoryDatasetAzureSqlTableAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfdast.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dfdast.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("id"))
}

// LinkedServiceId returns a reference to field linked_service_id of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) LinkedServiceId() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("linked_service_id"))
}

// Name returns a reference to field name of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfdast.ref.Append("parameters"))
}

// Schema returns a reference to field schema of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("schema"))
}

// Table returns a reference to field table of azurerm_data_factory_dataset_azure_sql_table.
func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(dfdast.ref.Append("table"))
}

func (dfdast dataFactoryDatasetAzureSqlTableAttributes) SchemaColumn() terra.ListValue[datafactorydatasetazuresqltable.SchemaColumnAttributes] {
	return terra.ReferenceAsList[datafactorydatasetazuresqltable.SchemaColumnAttributes](dfdast.ref.Append("schema_column"))
}

func (dfdast dataFactoryDatasetAzureSqlTableAttributes) Timeouts() datafactorydatasetazuresqltable.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactorydatasetazuresqltable.TimeoutsAttributes](dfdast.ref.Append("timeouts"))
}

type dataFactoryDatasetAzureSqlTableState struct {
	AdditionalProperties map[string]string                                   `json:"additional_properties"`
	Annotations          []string                                            `json:"annotations"`
	DataFactoryId        string                                              `json:"data_factory_id"`
	Description          string                                              `json:"description"`
	Folder               string                                              `json:"folder"`
	Id                   string                                              `json:"id"`
	LinkedServiceId      string                                              `json:"linked_service_id"`
	Name                 string                                              `json:"name"`
	Parameters           map[string]string                                   `json:"parameters"`
	Schema               string                                              `json:"schema"`
	Table                string                                              `json:"table"`
	SchemaColumn         []datafactorydatasetazuresqltable.SchemaColumnState `json:"schema_column"`
	Timeouts             *datafactorydatasetazuresqltable.TimeoutsState      `json:"timeouts"`
}
