// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datacontainergroup "github.com/golingon/terraproviders/azurerm/3.76.0/datacontainergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataContainerGroup creates a new instance of [DataContainerGroup].
func NewDataContainerGroup(name string, args DataContainerGroupArgs) *DataContainerGroup {
	return &DataContainerGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataContainerGroup)(nil)

// DataContainerGroup represents the Terraform data resource azurerm_container_group.
type DataContainerGroup struct {
	Name string
	Args DataContainerGroupArgs
}

// DataSource returns the Terraform object type for [DataContainerGroup].
func (cg *DataContainerGroup) DataSource() string {
	return "azurerm_container_group"
}

// LocalName returns the local name for [DataContainerGroup].
func (cg *DataContainerGroup) LocalName() string {
	return cg.Name
}

// Configuration returns the configuration (args) for [DataContainerGroup].
func (cg *DataContainerGroup) Configuration() interface{} {
	return cg.Args
}

// Attributes returns the attributes for [DataContainerGroup].
func (cg *DataContainerGroup) Attributes() dataContainerGroupAttributes {
	return dataContainerGroupAttributes{ref: terra.ReferenceDataResource(cg)}
}

// DataContainerGroupArgs contains the configurations for azurerm_container_group.
type DataContainerGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Identity: min=0
	Identity []datacontainergroup.Identity `hcl:"identity,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datacontainergroup.Timeouts `hcl:"timeouts,block"`
}
type dataContainerGroupAttributes struct {
	ref terra.Reference
}

// Fqdn returns a reference to field fqdn of azurerm_container_group.
func (cg dataContainerGroupAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("fqdn"))
}

// Id returns a reference to field id of azurerm_container_group.
func (cg dataContainerGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of azurerm_container_group.
func (cg dataContainerGroupAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("ip_address"))
}

// Location returns a reference to field location of azurerm_container_group.
func (cg dataContainerGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_container_group.
func (cg dataContainerGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_container_group.
func (cg dataContainerGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("resource_group_name"))
}

// SubnetIds returns a reference to field subnet_ids of azurerm_container_group.
func (cg dataContainerGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cg.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of azurerm_container_group.
func (cg dataContainerGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cg.ref.Append("tags"))
}

// Zones returns a reference to field zones of azurerm_container_group.
func (cg dataContainerGroupAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cg.ref.Append("zones"))
}

func (cg dataContainerGroupAttributes) Identity() terra.ListValue[datacontainergroup.IdentityAttributes] {
	return terra.ReferenceAsList[datacontainergroup.IdentityAttributes](cg.ref.Append("identity"))
}

func (cg dataContainerGroupAttributes) Timeouts() datacontainergroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datacontainergroup.TimeoutsAttributes](cg.ref.Append("timeouts"))
}
