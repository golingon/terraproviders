// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	signalrservice "github.com/golingon/terraproviders/azurerm/3.63.0/signalrservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSignalrService creates a new instance of [SignalrService].
func NewSignalrService(name string, args SignalrServiceArgs) *SignalrService {
	return &SignalrService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SignalrService)(nil)

// SignalrService represents the Terraform resource azurerm_signalr_service.
type SignalrService struct {
	Name      string
	Args      SignalrServiceArgs
	state     *signalrServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SignalrService].
func (ss *SignalrService) Type() string {
	return "azurerm_signalr_service"
}

// LocalName returns the local name for [SignalrService].
func (ss *SignalrService) LocalName() string {
	return ss.Name
}

// Configuration returns the configuration (args) for [SignalrService].
func (ss *SignalrService) Configuration() interface{} {
	return ss.Args
}

// DependOn is used for other resources to depend on [SignalrService].
func (ss *SignalrService) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

// Dependencies returns the list of resources [SignalrService] depends_on.
func (ss *SignalrService) Dependencies() terra.Dependencies {
	return ss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SignalrService].
func (ss *SignalrService) LifecycleManagement() *terra.Lifecycle {
	return ss.Lifecycle
}

// Attributes returns the attributes for [SignalrService].
func (ss *SignalrService) Attributes() signalrServiceAttributes {
	return signalrServiceAttributes{ref: terra.ReferenceResource(ss)}
}

// ImportState imports the given attribute values into [SignalrService]'s state.
func (ss *SignalrService) ImportState(av io.Reader) error {
	ss.state = &signalrServiceState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SignalrService] has state.
func (ss *SignalrService) State() (*signalrServiceState, bool) {
	return ss.state, ss.state != nil
}

// StateMust returns the state for [SignalrService]. Panics if the state is nil.
func (ss *SignalrService) StateMust() *signalrServiceState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

// SignalrServiceArgs contains the configurations for azurerm_signalr_service.
type SignalrServiceArgs struct {
	// AadAuthEnabled: bool, optional
	AadAuthEnabled terra.BoolValue `hcl:"aad_auth_enabled,attr"`
	// ConnectivityLogsEnabled: bool, optional
	ConnectivityLogsEnabled terra.BoolValue `hcl:"connectivity_logs_enabled,attr"`
	// HttpRequestLogsEnabled: bool, optional
	HttpRequestLogsEnabled terra.BoolValue `hcl:"http_request_logs_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LiveTraceEnabled: bool, optional
	LiveTraceEnabled terra.BoolValue `hcl:"live_trace_enabled,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MessagingLogsEnabled: bool, optional
	MessagingLogsEnabled terra.BoolValue `hcl:"messaging_logs_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerlessConnectionTimeoutInSeconds: number, optional
	ServerlessConnectionTimeoutInSeconds terra.NumberValue `hcl:"serverless_connection_timeout_in_seconds,attr"`
	// ServiceMode: string, optional
	ServiceMode terra.StringValue `hcl:"service_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TlsClientCertEnabled: bool, optional
	TlsClientCertEnabled terra.BoolValue `hcl:"tls_client_cert_enabled,attr"`
	// Cors: min=0
	Cors []signalrservice.Cors `hcl:"cors,block" validate:"min=0"`
	// Identity: optional
	Identity *signalrservice.Identity `hcl:"identity,block"`
	// LiveTrace: optional
	LiveTrace *signalrservice.LiveTrace `hcl:"live_trace,block"`
	// Sku: required
	Sku *signalrservice.Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *signalrservice.Timeouts `hcl:"timeouts,block"`
	// UpstreamEndpoint: min=0
	UpstreamEndpoint []signalrservice.UpstreamEndpoint `hcl:"upstream_endpoint,block" validate:"min=0"`
}
type signalrServiceAttributes struct {
	ref terra.Reference
}

// AadAuthEnabled returns a reference to field aad_auth_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) AadAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("aad_auth_enabled"))
}

// ConnectivityLogsEnabled returns a reference to field connectivity_logs_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) ConnectivityLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("connectivity_logs_enabled"))
}

// Hostname returns a reference to field hostname of azurerm_signalr_service.
func (ss signalrServiceAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("hostname"))
}

// HttpRequestLogsEnabled returns a reference to field http_request_logs_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) HttpRequestLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("http_request_logs_enabled"))
}

// Id returns a reference to field id of azurerm_signalr_service.
func (ss signalrServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of azurerm_signalr_service.
func (ss signalrServiceAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("ip_address"))
}

// LiveTraceEnabled returns a reference to field live_trace_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) LiveTraceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("live_trace_enabled"))
}

// LocalAuthEnabled returns a reference to field local_auth_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("local_auth_enabled"))
}

// Location returns a reference to field location of azurerm_signalr_service.
func (ss signalrServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("location"))
}

// MessagingLogsEnabled returns a reference to field messaging_logs_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) MessagingLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("messaging_logs_enabled"))
}

// Name returns a reference to field name of azurerm_signalr_service.
func (ss signalrServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("name"))
}

// PrimaryAccessKey returns a reference to field primary_access_key of azurerm_signalr_service.
func (ss signalrServiceAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("primary_access_key"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurerm_signalr_service.
func (ss signalrServiceAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("primary_connection_string"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("public_network_access_enabled"))
}

// PublicPort returns a reference to field public_port of azurerm_signalr_service.
func (ss signalrServiceAttributes) PublicPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("public_port"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_signalr_service.
func (ss signalrServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("resource_group_name"))
}

// SecondaryAccessKey returns a reference to field secondary_access_key of azurerm_signalr_service.
func (ss signalrServiceAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("secondary_access_key"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurerm_signalr_service.
func (ss signalrServiceAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("secondary_connection_string"))
}

// ServerPort returns a reference to field server_port of azurerm_signalr_service.
func (ss signalrServiceAttributes) ServerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("server_port"))
}

// ServerlessConnectionTimeoutInSeconds returns a reference to field serverless_connection_timeout_in_seconds of azurerm_signalr_service.
func (ss signalrServiceAttributes) ServerlessConnectionTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("serverless_connection_timeout_in_seconds"))
}

// ServiceMode returns a reference to field service_mode of azurerm_signalr_service.
func (ss signalrServiceAttributes) ServiceMode() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("service_mode"))
}

// Tags returns a reference to field tags of azurerm_signalr_service.
func (ss signalrServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ss.ref.Append("tags"))
}

// TlsClientCertEnabled returns a reference to field tls_client_cert_enabled of azurerm_signalr_service.
func (ss signalrServiceAttributes) TlsClientCertEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("tls_client_cert_enabled"))
}

func (ss signalrServiceAttributes) Cors() terra.ListValue[signalrservice.CorsAttributes] {
	return terra.ReferenceAsList[signalrservice.CorsAttributes](ss.ref.Append("cors"))
}

func (ss signalrServiceAttributes) Identity() terra.ListValue[signalrservice.IdentityAttributes] {
	return terra.ReferenceAsList[signalrservice.IdentityAttributes](ss.ref.Append("identity"))
}

func (ss signalrServiceAttributes) LiveTrace() terra.ListValue[signalrservice.LiveTraceAttributes] {
	return terra.ReferenceAsList[signalrservice.LiveTraceAttributes](ss.ref.Append("live_trace"))
}

func (ss signalrServiceAttributes) Sku() terra.ListValue[signalrservice.SkuAttributes] {
	return terra.ReferenceAsList[signalrservice.SkuAttributes](ss.ref.Append("sku"))
}

func (ss signalrServiceAttributes) Timeouts() signalrservice.TimeoutsAttributes {
	return terra.ReferenceAsSingle[signalrservice.TimeoutsAttributes](ss.ref.Append("timeouts"))
}

func (ss signalrServiceAttributes) UpstreamEndpoint() terra.SetValue[signalrservice.UpstreamEndpointAttributes] {
	return terra.ReferenceAsSet[signalrservice.UpstreamEndpointAttributes](ss.ref.Append("upstream_endpoint"))
}

type signalrServiceState struct {
	AadAuthEnabled                       bool                                   `json:"aad_auth_enabled"`
	ConnectivityLogsEnabled              bool                                   `json:"connectivity_logs_enabled"`
	Hostname                             string                                 `json:"hostname"`
	HttpRequestLogsEnabled               bool                                   `json:"http_request_logs_enabled"`
	Id                                   string                                 `json:"id"`
	IpAddress                            string                                 `json:"ip_address"`
	LiveTraceEnabled                     bool                                   `json:"live_trace_enabled"`
	LocalAuthEnabled                     bool                                   `json:"local_auth_enabled"`
	Location                             string                                 `json:"location"`
	MessagingLogsEnabled                 bool                                   `json:"messaging_logs_enabled"`
	Name                                 string                                 `json:"name"`
	PrimaryAccessKey                     string                                 `json:"primary_access_key"`
	PrimaryConnectionString              string                                 `json:"primary_connection_string"`
	PublicNetworkAccessEnabled           bool                                   `json:"public_network_access_enabled"`
	PublicPort                           float64                                `json:"public_port"`
	ResourceGroupName                    string                                 `json:"resource_group_name"`
	SecondaryAccessKey                   string                                 `json:"secondary_access_key"`
	SecondaryConnectionString            string                                 `json:"secondary_connection_string"`
	ServerPort                           float64                                `json:"server_port"`
	ServerlessConnectionTimeoutInSeconds float64                                `json:"serverless_connection_timeout_in_seconds"`
	ServiceMode                          string                                 `json:"service_mode"`
	Tags                                 map[string]string                      `json:"tags"`
	TlsClientCertEnabled                 bool                                   `json:"tls_client_cert_enabled"`
	Cors                                 []signalrservice.CorsState             `json:"cors"`
	Identity                             []signalrservice.IdentityState         `json:"identity"`
	LiveTrace                            []signalrservice.LiveTraceState        `json:"live_trace"`
	Sku                                  []signalrservice.SkuState              `json:"sku"`
	Timeouts                             *signalrservice.TimeoutsState          `json:"timeouts"`
	UpstreamEndpoint                     []signalrservice.UpstreamEndpointState `json:"upstream_endpoint"`
}
