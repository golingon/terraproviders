// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlvirtualnetworkrule "github.com/golingon/terraproviders/azurerm/3.63.0/mssqlvirtualnetworkrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMssqlVirtualNetworkRule creates a new instance of [MssqlVirtualNetworkRule].
func NewMssqlVirtualNetworkRule(name string, args MssqlVirtualNetworkRuleArgs) *MssqlVirtualNetworkRule {
	return &MssqlVirtualNetworkRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlVirtualNetworkRule)(nil)

// MssqlVirtualNetworkRule represents the Terraform resource azurerm_mssql_virtual_network_rule.
type MssqlVirtualNetworkRule struct {
	Name      string
	Args      MssqlVirtualNetworkRuleArgs
	state     *mssqlVirtualNetworkRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) Type() string {
	return "azurerm_mssql_virtual_network_rule"
}

// LocalName returns the local name for [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) LocalName() string {
	return mvnr.Name
}

// Configuration returns the configuration (args) for [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) Configuration() interface{} {
	return mvnr.Args
}

// DependOn is used for other resources to depend on [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mvnr)
}

// Dependencies returns the list of resources [MssqlVirtualNetworkRule] depends_on.
func (mvnr *MssqlVirtualNetworkRule) Dependencies() terra.Dependencies {
	return mvnr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) LifecycleManagement() *terra.Lifecycle {
	return mvnr.Lifecycle
}

// Attributes returns the attributes for [MssqlVirtualNetworkRule].
func (mvnr *MssqlVirtualNetworkRule) Attributes() mssqlVirtualNetworkRuleAttributes {
	return mssqlVirtualNetworkRuleAttributes{ref: terra.ReferenceResource(mvnr)}
}

// ImportState imports the given attribute values into [MssqlVirtualNetworkRule]'s state.
func (mvnr *MssqlVirtualNetworkRule) ImportState(av io.Reader) error {
	mvnr.state = &mssqlVirtualNetworkRuleState{}
	if err := json.NewDecoder(av).Decode(mvnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mvnr.Type(), mvnr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MssqlVirtualNetworkRule] has state.
func (mvnr *MssqlVirtualNetworkRule) State() (*mssqlVirtualNetworkRuleState, bool) {
	return mvnr.state, mvnr.state != nil
}

// StateMust returns the state for [MssqlVirtualNetworkRule]. Panics if the state is nil.
func (mvnr *MssqlVirtualNetworkRule) StateMust() *mssqlVirtualNetworkRuleState {
	if mvnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mvnr.Type(), mvnr.LocalName()))
	}
	return mvnr.state
}

// MssqlVirtualNetworkRuleArgs contains the configurations for azurerm_mssql_virtual_network_rule.
type MssqlVirtualNetworkRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreMissingVnetServiceEndpoint: bool, optional
	IgnoreMissingVnetServiceEndpoint terra.BoolValue `hcl:"ignore_missing_vnet_service_endpoint,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqlvirtualnetworkrule.Timeouts `hcl:"timeouts,block"`
}
type mssqlVirtualNetworkRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_mssql_virtual_network_rule.
func (mvnr mssqlVirtualNetworkRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mvnr.ref.Append("id"))
}

// IgnoreMissingVnetServiceEndpoint returns a reference to field ignore_missing_vnet_service_endpoint of azurerm_mssql_virtual_network_rule.
func (mvnr mssqlVirtualNetworkRuleAttributes) IgnoreMissingVnetServiceEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(mvnr.ref.Append("ignore_missing_vnet_service_endpoint"))
}

// Name returns a reference to field name of azurerm_mssql_virtual_network_rule.
func (mvnr mssqlVirtualNetworkRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mvnr.ref.Append("name"))
}

// ServerId returns a reference to field server_id of azurerm_mssql_virtual_network_rule.
func (mvnr mssqlVirtualNetworkRuleAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(mvnr.ref.Append("server_id"))
}

// SubnetId returns a reference to field subnet_id of azurerm_mssql_virtual_network_rule.
func (mvnr mssqlVirtualNetworkRuleAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(mvnr.ref.Append("subnet_id"))
}

func (mvnr mssqlVirtualNetworkRuleAttributes) Timeouts() mssqlvirtualnetworkrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[mssqlvirtualnetworkrule.TimeoutsAttributes](mvnr.ref.Append("timeouts"))
}

type mssqlVirtualNetworkRuleState struct {
	Id                               string                                 `json:"id"`
	IgnoreMissingVnetServiceEndpoint bool                                   `json:"ignore_missing_vnet_service_endpoint"`
	Name                             string                                 `json:"name"`
	ServerId                         string                                 `json:"server_id"`
	SubnetId                         string                                 `json:"subnet_id"`
	Timeouts                         *mssqlvirtualnetworkrule.TimeoutsState `json:"timeouts"`
}
