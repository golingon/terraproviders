// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cdnfrontdoorsecuritypolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SecurityPolicies struct {
	// Firewall: required
	Firewall *Firewall `hcl:"firewall,block" validate:"required"`
}

type Firewall struct {
	// CdnFrontdoorFirewallPolicyId: string, required
	CdnFrontdoorFirewallPolicyId terra.StringValue `hcl:"cdn_frontdoor_firewall_policy_id,attr" validate:"required"`
	// Association: required
	Association *Association `hcl:"association,block" validate:"required"`
}

type Association struct {
	// PatternsToMatch: list of string, required
	PatternsToMatch terra.ListValue[terra.StringValue] `hcl:"patterns_to_match,attr" validate:"required"`
	// Domain: min=1,max=500
	Domain []Domain `hcl:"domain,block" validate:"min=1,max=500"`
}

type Domain struct {
	// CdnFrontdoorDomainId: string, required
	CdnFrontdoorDomainId terra.StringValue `hcl:"cdn_frontdoor_domain_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type SecurityPoliciesAttributes struct {
	ref terra.Reference
}

func (sp SecurityPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SecurityPoliciesAttributes) InternalWithRef(ref terra.Reference) SecurityPoliciesAttributes {
	return SecurityPoliciesAttributes{ref: ref}
}

func (sp SecurityPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SecurityPoliciesAttributes) Firewall() terra.ListValue[FirewallAttributes] {
	return terra.ReferenceAsList[FirewallAttributes](sp.ref.Append("firewall"))
}

type FirewallAttributes struct {
	ref terra.Reference
}

func (f FirewallAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FirewallAttributes) InternalWithRef(ref terra.Reference) FirewallAttributes {
	return FirewallAttributes{ref: ref}
}

func (f FirewallAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FirewallAttributes) CdnFrontdoorFirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("cdn_frontdoor_firewall_policy_id"))
}

func (f FirewallAttributes) Association() terra.ListValue[AssociationAttributes] {
	return terra.ReferenceAsList[AssociationAttributes](f.ref.Append("association"))
}

type AssociationAttributes struct {
	ref terra.Reference
}

func (a AssociationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AssociationAttributes) InternalWithRef(ref terra.Reference) AssociationAttributes {
	return AssociationAttributes{ref: ref}
}

func (a AssociationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AssociationAttributes) PatternsToMatch() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("patterns_to_match"))
}

func (a AssociationAttributes) Domain() terra.ListValue[DomainAttributes] {
	return terra.ReferenceAsList[DomainAttributes](a.ref.Append("domain"))
}

type DomainAttributes struct {
	ref terra.Reference
}

func (d DomainAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DomainAttributes) InternalWithRef(ref terra.Reference) DomainAttributes {
	return DomainAttributes{ref: ref}
}

func (d DomainAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DomainAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("active"))
}

func (d DomainAttributes) CdnFrontdoorDomainId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("cdn_frontdoor_domain_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type SecurityPoliciesState struct {
	Firewall []FirewallState `json:"firewall"`
}

type FirewallState struct {
	CdnFrontdoorFirewallPolicyId string             `json:"cdn_frontdoor_firewall_policy_id"`
	Association                  []AssociationState `json:"association"`
}

type AssociationState struct {
	PatternsToMatch []string      `json:"patterns_to_match"`
	Domain          []DomainState `json:"domain"`
}

type DomainState struct {
	Active               bool   `json:"active"`
	CdnFrontdoorDomainId string `json:"cdn_frontdoor_domain_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
