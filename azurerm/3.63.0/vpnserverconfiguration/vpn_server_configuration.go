// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vpnserverconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AzureActiveDirectoryAuthentication struct {
	// Audience: string, required
	Audience terra.StringValue `hcl:"audience,attr" validate:"required"`
	// Issuer: string, required
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
	// Tenant: string, required
	Tenant terra.StringValue `hcl:"tenant,attr" validate:"required"`
}

type ClientRevokedCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
}

type ClientRootCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicCertData: string, required
	PublicCertData terra.StringValue `hcl:"public_cert_data,attr" validate:"required"`
}

type IpsecPolicy struct {
	// DhGroup: string, required
	DhGroup terra.StringValue `hcl:"dh_group,attr" validate:"required"`
	// IkeEncryption: string, required
	IkeEncryption terra.StringValue `hcl:"ike_encryption,attr" validate:"required"`
	// IkeIntegrity: string, required
	IkeIntegrity terra.StringValue `hcl:"ike_integrity,attr" validate:"required"`
	// IpsecEncryption: string, required
	IpsecEncryption terra.StringValue `hcl:"ipsec_encryption,attr" validate:"required"`
	// IpsecIntegrity: string, required
	IpsecIntegrity terra.StringValue `hcl:"ipsec_integrity,attr" validate:"required"`
	// PfsGroup: string, required
	PfsGroup terra.StringValue `hcl:"pfs_group,attr" validate:"required"`
	// SaDataSizeKilobytes: number, required
	SaDataSizeKilobytes terra.NumberValue `hcl:"sa_data_size_kilobytes,attr" validate:"required"`
	// SaLifetimeSeconds: number, required
	SaLifetimeSeconds terra.NumberValue `hcl:"sa_lifetime_seconds,attr" validate:"required"`
}

type Radius struct {
	// RadiusClientRootCertificate: min=0
	ClientRootCertificate []RadiusClientRootCertificate `hcl:"client_root_certificate,block" validate:"min=0"`
	// Server: min=0
	Server []Server `hcl:"server,block" validate:"min=0"`
	// ServerRootCertificate: min=0
	ServerRootCertificate []ServerRootCertificate `hcl:"server_root_certificate,block" validate:"min=0"`
}

type RadiusClientRootCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
}

type Server struct {
	// Address: string, required
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// Score: number, required
	Score terra.NumberValue `hcl:"score,attr" validate:"required"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
}

type ServerRootCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicCertData: string, required
	PublicCertData terra.StringValue `hcl:"public_cert_data,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AzureActiveDirectoryAuthenticationAttributes struct {
	ref terra.Reference
}

func (aada AzureActiveDirectoryAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return aada.ref, nil
}

func (aada AzureActiveDirectoryAuthenticationAttributes) InternalWithRef(ref terra.Reference) AzureActiveDirectoryAuthenticationAttributes {
	return AzureActiveDirectoryAuthenticationAttributes{ref: ref}
}

func (aada AzureActiveDirectoryAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aada.ref.InternalTokens()
}

func (aada AzureActiveDirectoryAuthenticationAttributes) Audience() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("audience"))
}

func (aada AzureActiveDirectoryAuthenticationAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("issuer"))
}

func (aada AzureActiveDirectoryAuthenticationAttributes) Tenant() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("tenant"))
}

type ClientRevokedCertificateAttributes struct {
	ref terra.Reference
}

func (crc ClientRevokedCertificateAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc ClientRevokedCertificateAttributes) InternalWithRef(ref terra.Reference) ClientRevokedCertificateAttributes {
	return ClientRevokedCertificateAttributes{ref: ref}
}

func (crc ClientRevokedCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc ClientRevokedCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("name"))
}

func (crc ClientRevokedCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("thumbprint"))
}

type ClientRootCertificateAttributes struct {
	ref terra.Reference
}

func (crc ClientRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc ClientRootCertificateAttributes) InternalWithRef(ref terra.Reference) ClientRootCertificateAttributes {
	return ClientRootCertificateAttributes{ref: ref}
}

func (crc ClientRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc ClientRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("name"))
}

func (crc ClientRootCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("public_cert_data"))
}

type IpsecPolicyAttributes struct {
	ref terra.Reference
}

func (ip IpsecPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IpsecPolicyAttributes) InternalWithRef(ref terra.Reference) IpsecPolicyAttributes {
	return IpsecPolicyAttributes{ref: ref}
}

func (ip IpsecPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IpsecPolicyAttributes) DhGroup() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("dh_group"))
}

func (ip IpsecPolicyAttributes) IkeEncryption() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ike_encryption"))
}

func (ip IpsecPolicyAttributes) IkeIntegrity() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ike_integrity"))
}

func (ip IpsecPolicyAttributes) IpsecEncryption() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ipsec_encryption"))
}

func (ip IpsecPolicyAttributes) IpsecIntegrity() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ipsec_integrity"))
}

func (ip IpsecPolicyAttributes) PfsGroup() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("pfs_group"))
}

func (ip IpsecPolicyAttributes) SaDataSizeKilobytes() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("sa_data_size_kilobytes"))
}

func (ip IpsecPolicyAttributes) SaLifetimeSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("sa_lifetime_seconds"))
}

type RadiusAttributes struct {
	ref terra.Reference
}

func (r RadiusAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RadiusAttributes) InternalWithRef(ref terra.Reference) RadiusAttributes {
	return RadiusAttributes{ref: ref}
}

func (r RadiusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RadiusAttributes) ClientRootCertificate() terra.SetValue[RadiusClientRootCertificateAttributes] {
	return terra.ReferenceAsSet[RadiusClientRootCertificateAttributes](r.ref.Append("client_root_certificate"))
}

func (r RadiusAttributes) Server() terra.ListValue[ServerAttributes] {
	return terra.ReferenceAsList[ServerAttributes](r.ref.Append("server"))
}

func (r RadiusAttributes) ServerRootCertificate() terra.SetValue[ServerRootCertificateAttributes] {
	return terra.ReferenceAsSet[ServerRootCertificateAttributes](r.ref.Append("server_root_certificate"))
}

type RadiusClientRootCertificateAttributes struct {
	ref terra.Reference
}

func (crc RadiusClientRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc RadiusClientRootCertificateAttributes) InternalWithRef(ref terra.Reference) RadiusClientRootCertificateAttributes {
	return RadiusClientRootCertificateAttributes{ref: ref}
}

func (crc RadiusClientRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc RadiusClientRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("name"))
}

func (crc RadiusClientRootCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("thumbprint"))
}

type ServerAttributes struct {
	ref terra.Reference
}

func (s ServerAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ServerAttributes) InternalWithRef(ref terra.Reference) ServerAttributes {
	return ServerAttributes{ref: ref}
}

func (s ServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ServerAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("address"))
}

func (s ServerAttributes) Score() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("score"))
}

func (s ServerAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret"))
}

type ServerRootCertificateAttributes struct {
	ref terra.Reference
}

func (src ServerRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return src.ref, nil
}

func (src ServerRootCertificateAttributes) InternalWithRef(ref terra.Reference) ServerRootCertificateAttributes {
	return ServerRootCertificateAttributes{ref: ref}
}

func (src ServerRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return src.ref.InternalTokens()
}

func (src ServerRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(src.ref.Append("name"))
}

func (src ServerRootCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(src.ref.Append("public_cert_data"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AzureActiveDirectoryAuthenticationState struct {
	Audience string `json:"audience"`
	Issuer   string `json:"issuer"`
	Tenant   string `json:"tenant"`
}

type ClientRevokedCertificateState struct {
	Name       string `json:"name"`
	Thumbprint string `json:"thumbprint"`
}

type ClientRootCertificateState struct {
	Name           string `json:"name"`
	PublicCertData string `json:"public_cert_data"`
}

type IpsecPolicyState struct {
	DhGroup             string  `json:"dh_group"`
	IkeEncryption       string  `json:"ike_encryption"`
	IkeIntegrity        string  `json:"ike_integrity"`
	IpsecEncryption     string  `json:"ipsec_encryption"`
	IpsecIntegrity      string  `json:"ipsec_integrity"`
	PfsGroup            string  `json:"pfs_group"`
	SaDataSizeKilobytes float64 `json:"sa_data_size_kilobytes"`
	SaLifetimeSeconds   float64 `json:"sa_lifetime_seconds"`
}

type RadiusState struct {
	ClientRootCertificate []RadiusClientRootCertificateState `json:"client_root_certificate"`
	Server                []ServerState                      `json:"server"`
	ServerRootCertificate []ServerRootCertificateState       `json:"server_root_certificate"`
}

type RadiusClientRootCertificateState struct {
	Name       string `json:"name"`
	Thumbprint string `json:"thumbprint"`
}

type ServerState struct {
	Address string  `json:"address"`
	Score   float64 `json:"score"`
	Secret  string  `json:"secret"`
}

type ServerRootCertificateState struct {
	Name           string `json:"name"`
	PublicCertData string `json:"public_cert_data"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
