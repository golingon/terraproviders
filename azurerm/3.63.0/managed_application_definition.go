// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	managedapplicationdefinition "github.com/golingon/terraproviders/azurerm/3.63.0/managedapplicationdefinition"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewManagedApplicationDefinition creates a new instance of [ManagedApplicationDefinition].
func NewManagedApplicationDefinition(name string, args ManagedApplicationDefinitionArgs) *ManagedApplicationDefinition {
	return &ManagedApplicationDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagedApplicationDefinition)(nil)

// ManagedApplicationDefinition represents the Terraform resource azurerm_managed_application_definition.
type ManagedApplicationDefinition struct {
	Name      string
	Args      ManagedApplicationDefinitionArgs
	state     *managedApplicationDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) Type() string {
	return "azurerm_managed_application_definition"
}

// LocalName returns the local name for [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) LocalName() string {
	return mad.Name
}

// Configuration returns the configuration (args) for [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) Configuration() interface{} {
	return mad.Args
}

// DependOn is used for other resources to depend on [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(mad)
}

// Dependencies returns the list of resources [ManagedApplicationDefinition] depends_on.
func (mad *ManagedApplicationDefinition) Dependencies() terra.Dependencies {
	return mad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) LifecycleManagement() *terra.Lifecycle {
	return mad.Lifecycle
}

// Attributes returns the attributes for [ManagedApplicationDefinition].
func (mad *ManagedApplicationDefinition) Attributes() managedApplicationDefinitionAttributes {
	return managedApplicationDefinitionAttributes{ref: terra.ReferenceResource(mad)}
}

// ImportState imports the given attribute values into [ManagedApplicationDefinition]'s state.
func (mad *ManagedApplicationDefinition) ImportState(av io.Reader) error {
	mad.state = &managedApplicationDefinitionState{}
	if err := json.NewDecoder(av).Decode(mad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mad.Type(), mad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ManagedApplicationDefinition] has state.
func (mad *ManagedApplicationDefinition) State() (*managedApplicationDefinitionState, bool) {
	return mad.state, mad.state != nil
}

// StateMust returns the state for [ManagedApplicationDefinition]. Panics if the state is nil.
func (mad *ManagedApplicationDefinition) StateMust() *managedApplicationDefinitionState {
	if mad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mad.Type(), mad.LocalName()))
	}
	return mad.state
}

// ManagedApplicationDefinitionArgs contains the configurations for azurerm_managed_application_definition.
type ManagedApplicationDefinitionArgs struct {
	// CreateUiDefinition: string, optional
	CreateUiDefinition terra.StringValue `hcl:"create_ui_definition,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LockLevel: string, required
	LockLevel terra.StringValue `hcl:"lock_level,attr" validate:"required"`
	// MainTemplate: string, optional
	MainTemplate terra.StringValue `hcl:"main_template,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PackageEnabled: bool, optional
	PackageEnabled terra.BoolValue `hcl:"package_enabled,attr"`
	// PackageFileUri: string, optional
	PackageFileUri terra.StringValue `hcl:"package_file_uri,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Authorization: min=0
	Authorization []managedapplicationdefinition.Authorization `hcl:"authorization,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *managedapplicationdefinition.Timeouts `hcl:"timeouts,block"`
}
type managedApplicationDefinitionAttributes struct {
	ref terra.Reference
}

// CreateUiDefinition returns a reference to field create_ui_definition of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) CreateUiDefinition() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("create_ui_definition"))
}

// Description returns a reference to field description of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("location"))
}

// LockLevel returns a reference to field lock_level of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) LockLevel() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("lock_level"))
}

// MainTemplate returns a reference to field main_template of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) MainTemplate() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("main_template"))
}

// Name returns a reference to field name of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("name"))
}

// PackageEnabled returns a reference to field package_enabled of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) PackageEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(mad.ref.Append("package_enabled"))
}

// PackageFileUri returns a reference to field package_file_uri of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) PackageFileUri() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("package_file_uri"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(mad.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_managed_application_definition.
func (mad managedApplicationDefinitionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mad.ref.Append("tags"))
}

func (mad managedApplicationDefinitionAttributes) Authorization() terra.SetValue[managedapplicationdefinition.AuthorizationAttributes] {
	return terra.ReferenceAsSet[managedapplicationdefinition.AuthorizationAttributes](mad.ref.Append("authorization"))
}

func (mad managedApplicationDefinitionAttributes) Timeouts() managedapplicationdefinition.TimeoutsAttributes {
	return terra.ReferenceAsSingle[managedapplicationdefinition.TimeoutsAttributes](mad.ref.Append("timeouts"))
}

type managedApplicationDefinitionState struct {
	CreateUiDefinition string                                            `json:"create_ui_definition"`
	Description        string                                            `json:"description"`
	DisplayName        string                                            `json:"display_name"`
	Id                 string                                            `json:"id"`
	Location           string                                            `json:"location"`
	LockLevel          string                                            `json:"lock_level"`
	MainTemplate       string                                            `json:"main_template"`
	Name               string                                            `json:"name"`
	PackageEnabled     bool                                              `json:"package_enabled"`
	PackageFileUri     string                                            `json:"package_file_uri"`
	ResourceGroupName  string                                            `json:"resource_group_name"`
	Tags               map[string]string                                 `json:"tags"`
	Authorization      []managedapplicationdefinition.AuthorizationState `json:"authorization"`
	Timeouts           *managedapplicationdefinition.TimeoutsState       `json:"timeouts"`
}
