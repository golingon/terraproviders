// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbpostgresqlfirewallrule "github.com/golingon/terraproviders/azurerm/3.63.0/cosmosdbpostgresqlfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCosmosdbPostgresqlFirewallRule creates a new instance of [CosmosdbPostgresqlFirewallRule].
func NewCosmosdbPostgresqlFirewallRule(name string, args CosmosdbPostgresqlFirewallRuleArgs) *CosmosdbPostgresqlFirewallRule {
	return &CosmosdbPostgresqlFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbPostgresqlFirewallRule)(nil)

// CosmosdbPostgresqlFirewallRule represents the Terraform resource azurerm_cosmosdb_postgresql_firewall_rule.
type CosmosdbPostgresqlFirewallRule struct {
	Name      string
	Args      CosmosdbPostgresqlFirewallRuleArgs
	state     *cosmosdbPostgresqlFirewallRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) Type() string {
	return "azurerm_cosmosdb_postgresql_firewall_rule"
}

// LocalName returns the local name for [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) LocalName() string {
	return cpfr.Name
}

// Configuration returns the configuration (args) for [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) Configuration() interface{} {
	return cpfr.Args
}

// DependOn is used for other resources to depend on [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(cpfr)
}

// Dependencies returns the list of resources [CosmosdbPostgresqlFirewallRule] depends_on.
func (cpfr *CosmosdbPostgresqlFirewallRule) Dependencies() terra.Dependencies {
	return cpfr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) LifecycleManagement() *terra.Lifecycle {
	return cpfr.Lifecycle
}

// Attributes returns the attributes for [CosmosdbPostgresqlFirewallRule].
func (cpfr *CosmosdbPostgresqlFirewallRule) Attributes() cosmosdbPostgresqlFirewallRuleAttributes {
	return cosmosdbPostgresqlFirewallRuleAttributes{ref: terra.ReferenceResource(cpfr)}
}

// ImportState imports the given attribute values into [CosmosdbPostgresqlFirewallRule]'s state.
func (cpfr *CosmosdbPostgresqlFirewallRule) ImportState(av io.Reader) error {
	cpfr.state = &cosmosdbPostgresqlFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(cpfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpfr.Type(), cpfr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CosmosdbPostgresqlFirewallRule] has state.
func (cpfr *CosmosdbPostgresqlFirewallRule) State() (*cosmosdbPostgresqlFirewallRuleState, bool) {
	return cpfr.state, cpfr.state != nil
}

// StateMust returns the state for [CosmosdbPostgresqlFirewallRule]. Panics if the state is nil.
func (cpfr *CosmosdbPostgresqlFirewallRule) StateMust() *cosmosdbPostgresqlFirewallRuleState {
	if cpfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpfr.Type(), cpfr.LocalName()))
	}
	return cpfr.state
}

// CosmosdbPostgresqlFirewallRuleArgs contains the configurations for azurerm_cosmosdb_postgresql_firewall_rule.
type CosmosdbPostgresqlFirewallRuleArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// EndIpAddress: string, required
	EndIpAddress terra.StringValue `hcl:"end_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartIpAddress: string, required
	StartIpAddress terra.StringValue `hcl:"start_ip_address,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbpostgresqlfirewallrule.Timeouts `hcl:"timeouts,block"`
}
type cosmosdbPostgresqlFirewallRuleAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_cosmosdb_postgresql_firewall_rule.
func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(cpfr.ref.Append("cluster_id"))
}

// EndIpAddress returns a reference to field end_ip_address of azurerm_cosmosdb_postgresql_firewall_rule.
func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) EndIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cpfr.ref.Append("end_ip_address"))
}

// Id returns a reference to field id of azurerm_cosmosdb_postgresql_firewall_rule.
func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cpfr.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_postgresql_firewall_rule.
func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cpfr.ref.Append("name"))
}

// StartIpAddress returns a reference to field start_ip_address of azurerm_cosmosdb_postgresql_firewall_rule.
func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) StartIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cpfr.ref.Append("start_ip_address"))
}

func (cpfr cosmosdbPostgresqlFirewallRuleAttributes) Timeouts() cosmosdbpostgresqlfirewallrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cosmosdbpostgresqlfirewallrule.TimeoutsAttributes](cpfr.ref.Append("timeouts"))
}

type cosmosdbPostgresqlFirewallRuleState struct {
	ClusterId      string                                        `json:"cluster_id"`
	EndIpAddress   string                                        `json:"end_ip_address"`
	Id             string                                        `json:"id"`
	Name           string                                        `json:"name"`
	StartIpAddress string                                        `json:"start_ip_address"`
	Timeouts       *cosmosdbpostgresqlfirewallrule.TimeoutsState `json:"timeouts"`
}
