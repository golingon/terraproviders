// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	hpccacheblobtarget "github.com/golingon/terraproviders/azurerm/3.63.0/hpccacheblobtarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewHpcCacheBlobTarget creates a new instance of [HpcCacheBlobTarget].
func NewHpcCacheBlobTarget(name string, args HpcCacheBlobTargetArgs) *HpcCacheBlobTarget {
	return &HpcCacheBlobTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HpcCacheBlobTarget)(nil)

// HpcCacheBlobTarget represents the Terraform resource azurerm_hpc_cache_blob_target.
type HpcCacheBlobTarget struct {
	Name      string
	Args      HpcCacheBlobTargetArgs
	state     *hpcCacheBlobTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) Type() string {
	return "azurerm_hpc_cache_blob_target"
}

// LocalName returns the local name for [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) LocalName() string {
	return hcbt.Name
}

// Configuration returns the configuration (args) for [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) Configuration() interface{} {
	return hcbt.Args
}

// DependOn is used for other resources to depend on [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(hcbt)
}

// Dependencies returns the list of resources [HpcCacheBlobTarget] depends_on.
func (hcbt *HpcCacheBlobTarget) Dependencies() terra.Dependencies {
	return hcbt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) LifecycleManagement() *terra.Lifecycle {
	return hcbt.Lifecycle
}

// Attributes returns the attributes for [HpcCacheBlobTarget].
func (hcbt *HpcCacheBlobTarget) Attributes() hpcCacheBlobTargetAttributes {
	return hpcCacheBlobTargetAttributes{ref: terra.ReferenceResource(hcbt)}
}

// ImportState imports the given attribute values into [HpcCacheBlobTarget]'s state.
func (hcbt *HpcCacheBlobTarget) ImportState(av io.Reader) error {
	hcbt.state = &hpcCacheBlobTargetState{}
	if err := json.NewDecoder(av).Decode(hcbt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcbt.Type(), hcbt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [HpcCacheBlobTarget] has state.
func (hcbt *HpcCacheBlobTarget) State() (*hpcCacheBlobTargetState, bool) {
	return hcbt.state, hcbt.state != nil
}

// StateMust returns the state for [HpcCacheBlobTarget]. Panics if the state is nil.
func (hcbt *HpcCacheBlobTarget) StateMust() *hpcCacheBlobTargetState {
	if hcbt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcbt.Type(), hcbt.LocalName()))
	}
	return hcbt.state
}

// HpcCacheBlobTargetArgs contains the configurations for azurerm_hpc_cache_blob_target.
type HpcCacheBlobTargetArgs struct {
	// AccessPolicyName: string, optional
	AccessPolicyName terra.StringValue `hcl:"access_policy_name,attr"`
	// CacheName: string, required
	CacheName terra.StringValue `hcl:"cache_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespacePath: string, required
	NamespacePath terra.StringValue `hcl:"namespace_path,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *hpccacheblobtarget.Timeouts `hcl:"timeouts,block"`
}
type hpcCacheBlobTargetAttributes struct {
	ref terra.Reference
}

// AccessPolicyName returns a reference to field access_policy_name of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) AccessPolicyName() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("access_policy_name"))
}

// CacheName returns a reference to field cache_name of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) CacheName() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("cache_name"))
}

// Id returns a reference to field id of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("name"))
}

// NamespacePath returns a reference to field namespace_path of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("namespace_path"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("resource_group_name"))
}

// StorageContainerId returns a reference to field storage_container_id of azurerm_hpc_cache_blob_target.
func (hcbt hpcCacheBlobTargetAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(hcbt.ref.Append("storage_container_id"))
}

func (hcbt hpcCacheBlobTargetAttributes) Timeouts() hpccacheblobtarget.TimeoutsAttributes {
	return terra.ReferenceAsSingle[hpccacheblobtarget.TimeoutsAttributes](hcbt.ref.Append("timeouts"))
}

type hpcCacheBlobTargetState struct {
	AccessPolicyName   string                            `json:"access_policy_name"`
	CacheName          string                            `json:"cache_name"`
	Id                 string                            `json:"id"`
	Name               string                            `json:"name"`
	NamespacePath      string                            `json:"namespace_path"`
	ResourceGroupName  string                            `json:"resource_group_name"`
	StorageContainerId string                            `json:"storage_container_id"`
	Timeouts           *hpccacheblobtarget.TimeoutsState `json:"timeouts"`
}
