// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactory "github.com/golingon/terraproviders/azurerm/3.68.0/datafactory"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactory creates a new instance of [DataFactory].
func NewDataFactory(name string, args DataFactoryArgs) *DataFactory {
	return &DataFactory{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactory)(nil)

// DataFactory represents the Terraform resource azurerm_data_factory.
type DataFactory struct {
	Name      string
	Args      DataFactoryArgs
	state     *dataFactoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactory].
func (df *DataFactory) Type() string {
	return "azurerm_data_factory"
}

// LocalName returns the local name for [DataFactory].
func (df *DataFactory) LocalName() string {
	return df.Name
}

// Configuration returns the configuration (args) for [DataFactory].
func (df *DataFactory) Configuration() interface{} {
	return df.Args
}

// DependOn is used for other resources to depend on [DataFactory].
func (df *DataFactory) DependOn() terra.Reference {
	return terra.ReferenceResource(df)
}

// Dependencies returns the list of resources [DataFactory] depends_on.
func (df *DataFactory) Dependencies() terra.Dependencies {
	return df.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactory].
func (df *DataFactory) LifecycleManagement() *terra.Lifecycle {
	return df.Lifecycle
}

// Attributes returns the attributes for [DataFactory].
func (df *DataFactory) Attributes() dataFactoryAttributes {
	return dataFactoryAttributes{ref: terra.ReferenceResource(df)}
}

// ImportState imports the given attribute values into [DataFactory]'s state.
func (df *DataFactory) ImportState(av io.Reader) error {
	df.state = &dataFactoryState{}
	if err := json.NewDecoder(av).Decode(df.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", df.Type(), df.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactory] has state.
func (df *DataFactory) State() (*dataFactoryState, bool) {
	return df.state, df.state != nil
}

// StateMust returns the state for [DataFactory]. Panics if the state is nil.
func (df *DataFactory) StateMust() *dataFactoryState {
	if df.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", df.Type(), df.LocalName()))
	}
	return df.state
}

// DataFactoryArgs contains the configurations for azurerm_data_factory.
type DataFactoryArgs struct {
	// CustomerManagedKeyId: string, optional
	CustomerManagedKeyId terra.StringValue `hcl:"customer_managed_key_id,attr"`
	// CustomerManagedKeyIdentityId: string, optional
	CustomerManagedKeyIdentityId terra.StringValue `hcl:"customer_managed_key_identity_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedVirtualNetworkEnabled: bool, optional
	ManagedVirtualNetworkEnabled terra.BoolValue `hcl:"managed_virtual_network_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkEnabled: bool, optional
	PublicNetworkEnabled terra.BoolValue `hcl:"public_network_enabled,attr"`
	// PurviewId: string, optional
	PurviewId terra.StringValue `hcl:"purview_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// GithubConfiguration: optional
	GithubConfiguration *datafactory.GithubConfiguration `hcl:"github_configuration,block"`
	// GlobalParameter: min=0
	GlobalParameter []datafactory.GlobalParameter `hcl:"global_parameter,block" validate:"min=0"`
	// Identity: optional
	Identity *datafactory.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *datafactory.Timeouts `hcl:"timeouts,block"`
	// VstsConfiguration: optional
	VstsConfiguration *datafactory.VstsConfiguration `hcl:"vsts_configuration,block"`
}
type dataFactoryAttributes struct {
	ref terra.Reference
}

// CustomerManagedKeyId returns a reference to field customer_managed_key_id of azurerm_data_factory.
func (df dataFactoryAttributes) CustomerManagedKeyId() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("customer_managed_key_id"))
}

// CustomerManagedKeyIdentityId returns a reference to field customer_managed_key_identity_id of azurerm_data_factory.
func (df dataFactoryAttributes) CustomerManagedKeyIdentityId() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("customer_managed_key_identity_id"))
}

// Id returns a reference to field id of azurerm_data_factory.
func (df dataFactoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_data_factory.
func (df dataFactoryAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("location"))
}

// ManagedVirtualNetworkEnabled returns a reference to field managed_virtual_network_enabled of azurerm_data_factory.
func (df dataFactoryAttributes) ManagedVirtualNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(df.ref.Append("managed_virtual_network_enabled"))
}

// Name returns a reference to field name of azurerm_data_factory.
func (df dataFactoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("name"))
}

// PublicNetworkEnabled returns a reference to field public_network_enabled of azurerm_data_factory.
func (df dataFactoryAttributes) PublicNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(df.ref.Append("public_network_enabled"))
}

// PurviewId returns a reference to field purview_id of azurerm_data_factory.
func (df dataFactoryAttributes) PurviewId() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("purview_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_data_factory.
func (df dataFactoryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_data_factory.
func (df dataFactoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](df.ref.Append("tags"))
}

func (df dataFactoryAttributes) GithubConfiguration() terra.ListValue[datafactory.GithubConfigurationAttributes] {
	return terra.ReferenceAsList[datafactory.GithubConfigurationAttributes](df.ref.Append("github_configuration"))
}

func (df dataFactoryAttributes) GlobalParameter() terra.SetValue[datafactory.GlobalParameterAttributes] {
	return terra.ReferenceAsSet[datafactory.GlobalParameterAttributes](df.ref.Append("global_parameter"))
}

func (df dataFactoryAttributes) Identity() terra.ListValue[datafactory.IdentityAttributes] {
	return terra.ReferenceAsList[datafactory.IdentityAttributes](df.ref.Append("identity"))
}

func (df dataFactoryAttributes) Timeouts() datafactory.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactory.TimeoutsAttributes](df.ref.Append("timeouts"))
}

func (df dataFactoryAttributes) VstsConfiguration() terra.ListValue[datafactory.VstsConfigurationAttributes] {
	return terra.ReferenceAsList[datafactory.VstsConfigurationAttributes](df.ref.Append("vsts_configuration"))
}

type dataFactoryState struct {
	CustomerManagedKeyId         string                                 `json:"customer_managed_key_id"`
	CustomerManagedKeyIdentityId string                                 `json:"customer_managed_key_identity_id"`
	Id                           string                                 `json:"id"`
	Location                     string                                 `json:"location"`
	ManagedVirtualNetworkEnabled bool                                   `json:"managed_virtual_network_enabled"`
	Name                         string                                 `json:"name"`
	PublicNetworkEnabled         bool                                   `json:"public_network_enabled"`
	PurviewId                    string                                 `json:"purview_id"`
	ResourceGroupName            string                                 `json:"resource_group_name"`
	Tags                         map[string]string                      `json:"tags"`
	GithubConfiguration          []datafactory.GithubConfigurationState `json:"github_configuration"`
	GlobalParameter              []datafactory.GlobalParameterState     `json:"global_parameter"`
	Identity                     []datafactory.IdentityState            `json:"identity"`
	Timeouts                     *datafactory.TimeoutsState             `json:"timeouts"`
	VstsConfiguration            []datafactory.VstsConfigurationState   `json:"vsts_configuration"`
}
