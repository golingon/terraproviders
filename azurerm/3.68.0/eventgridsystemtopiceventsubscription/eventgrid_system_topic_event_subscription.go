// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package eventgridsystemtopiceventsubscription

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdvancedFilter struct {
	// BoolEquals: min=0
	BoolEquals []BoolEquals `hcl:"bool_equals,block" validate:"min=0"`
	// IsNotNull: min=0
	IsNotNull []IsNotNull `hcl:"is_not_null,block" validate:"min=0"`
	// IsNullOrUndefined: min=0
	IsNullOrUndefined []IsNullOrUndefined `hcl:"is_null_or_undefined,block" validate:"min=0"`
	// NumberGreaterThan: min=0
	NumberGreaterThan []NumberGreaterThan `hcl:"number_greater_than,block" validate:"min=0"`
	// NumberGreaterThanOrEquals: min=0
	NumberGreaterThanOrEquals []NumberGreaterThanOrEquals `hcl:"number_greater_than_or_equals,block" validate:"min=0"`
	// NumberIn: min=0
	NumberIn []NumberIn `hcl:"number_in,block" validate:"min=0"`
	// NumberInRange: min=0
	NumberInRange []NumberInRange `hcl:"number_in_range,block" validate:"min=0"`
	// NumberLessThan: min=0
	NumberLessThan []NumberLessThan `hcl:"number_less_than,block" validate:"min=0"`
	// NumberLessThanOrEquals: min=0
	NumberLessThanOrEquals []NumberLessThanOrEquals `hcl:"number_less_than_or_equals,block" validate:"min=0"`
	// NumberNotIn: min=0
	NumberNotIn []NumberNotIn `hcl:"number_not_in,block" validate:"min=0"`
	// NumberNotInRange: min=0
	NumberNotInRange []NumberNotInRange `hcl:"number_not_in_range,block" validate:"min=0"`
	// StringBeginsWith: min=0
	StringBeginsWith []StringBeginsWith `hcl:"string_begins_with,block" validate:"min=0"`
	// StringContains: min=0
	StringContains []StringContains `hcl:"string_contains,block" validate:"min=0"`
	// StringEndsWith: min=0
	StringEndsWith []StringEndsWith `hcl:"string_ends_with,block" validate:"min=0"`
	// StringIn: min=0
	StringIn []StringIn `hcl:"string_in,block" validate:"min=0"`
	// StringNotBeginsWith: min=0
	StringNotBeginsWith []StringNotBeginsWith `hcl:"string_not_begins_with,block" validate:"min=0"`
	// StringNotContains: min=0
	StringNotContains []StringNotContains `hcl:"string_not_contains,block" validate:"min=0"`
	// StringNotEndsWith: min=0
	StringNotEndsWith []StringNotEndsWith `hcl:"string_not_ends_with,block" validate:"min=0"`
	// StringNotIn: min=0
	StringNotIn []StringNotIn `hcl:"string_not_in,block" validate:"min=0"`
}

type BoolEquals struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: bool, required
	Value terra.BoolValue `hcl:"value,attr" validate:"required"`
}

type IsNotNull struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
}

type IsNullOrUndefined struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
}

type NumberGreaterThan struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NumberGreaterThanOrEquals struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NumberIn struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of number, required
	Values terra.ListValue[terra.NumberValue] `hcl:"values,attr" validate:"required"`
}

type NumberInRange struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of list of number, required
	Values terra.ListValue[terra.ListValue[terra.NumberValue]] `hcl:"values,attr" validate:"required"`
}

type NumberLessThan struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NumberLessThanOrEquals struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NumberNotIn struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of number, required
	Values terra.ListValue[terra.NumberValue] `hcl:"values,attr" validate:"required"`
}

type NumberNotInRange struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of list of number, required
	Values terra.ListValue[terra.ListValue[terra.NumberValue]] `hcl:"values,attr" validate:"required"`
}

type StringBeginsWith struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringContains struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringEndsWith struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringIn struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringNotBeginsWith struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringNotContains struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringNotEndsWith struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type StringNotIn struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type AzureFunctionEndpoint struct {
	// FunctionId: string, required
	FunctionId terra.StringValue `hcl:"function_id,attr" validate:"required"`
	// MaxEventsPerBatch: number, optional
	MaxEventsPerBatch terra.NumberValue `hcl:"max_events_per_batch,attr"`
	// PreferredBatchSizeInKilobytes: number, optional
	PreferredBatchSizeInKilobytes terra.NumberValue `hcl:"preferred_batch_size_in_kilobytes,attr"`
}

type DeadLetterIdentity struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UserAssignedIdentity: string, optional
	UserAssignedIdentity terra.StringValue `hcl:"user_assigned_identity,attr"`
}

type DeliveryIdentity struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UserAssignedIdentity: string, optional
	UserAssignedIdentity terra.StringValue `hcl:"user_assigned_identity,attr"`
}

type DeliveryProperty struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// Secret: bool, optional
	Secret terra.BoolValue `hcl:"secret,attr"`
	// SourceField: string, optional
	SourceField terra.StringValue `hcl:"source_field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type RetryPolicy struct {
	// EventTimeToLive: number, required
	EventTimeToLive terra.NumberValue `hcl:"event_time_to_live,attr" validate:"required"`
	// MaxDeliveryAttempts: number, required
	MaxDeliveryAttempts terra.NumberValue `hcl:"max_delivery_attempts,attr" validate:"required"`
}

type StorageBlobDeadLetterDestination struct {
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// StorageBlobContainerName: string, required
	StorageBlobContainerName terra.StringValue `hcl:"storage_blob_container_name,attr" validate:"required"`
}

type StorageQueueEndpoint struct {
	// QueueMessageTimeToLiveInSeconds: number, optional
	QueueMessageTimeToLiveInSeconds terra.NumberValue `hcl:"queue_message_time_to_live_in_seconds,attr"`
	// QueueName: string, required
	QueueName terra.StringValue `hcl:"queue_name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
}

type SubjectFilter struct {
	// CaseSensitive: bool, optional
	CaseSensitive terra.BoolValue `hcl:"case_sensitive,attr"`
	// SubjectBeginsWith: string, optional
	SubjectBeginsWith terra.StringValue `hcl:"subject_begins_with,attr"`
	// SubjectEndsWith: string, optional
	SubjectEndsWith terra.StringValue `hcl:"subject_ends_with,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WebhookEndpoint struct {
	// ActiveDirectoryAppIdOrUri: string, optional
	ActiveDirectoryAppIdOrUri terra.StringValue `hcl:"active_directory_app_id_or_uri,attr"`
	// ActiveDirectoryTenantId: string, optional
	ActiveDirectoryTenantId terra.StringValue `hcl:"active_directory_tenant_id,attr"`
	// MaxEventsPerBatch: number, optional
	MaxEventsPerBatch terra.NumberValue `hcl:"max_events_per_batch,attr"`
	// PreferredBatchSizeInKilobytes: number, optional
	PreferredBatchSizeInKilobytes terra.NumberValue `hcl:"preferred_batch_size_in_kilobytes,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type AdvancedFilterAttributes struct {
	ref terra.Reference
}

func (af AdvancedFilterAttributes) InternalRef() (terra.Reference, error) {
	return af.ref, nil
}

func (af AdvancedFilterAttributes) InternalWithRef(ref terra.Reference) AdvancedFilterAttributes {
	return AdvancedFilterAttributes{ref: ref}
}

func (af AdvancedFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return af.ref.InternalTokens()
}

func (af AdvancedFilterAttributes) BoolEquals() terra.ListValue[BoolEqualsAttributes] {
	return terra.ReferenceAsList[BoolEqualsAttributes](af.ref.Append("bool_equals"))
}

func (af AdvancedFilterAttributes) IsNotNull() terra.ListValue[IsNotNullAttributes] {
	return terra.ReferenceAsList[IsNotNullAttributes](af.ref.Append("is_not_null"))
}

func (af AdvancedFilterAttributes) IsNullOrUndefined() terra.ListValue[IsNullOrUndefinedAttributes] {
	return terra.ReferenceAsList[IsNullOrUndefinedAttributes](af.ref.Append("is_null_or_undefined"))
}

func (af AdvancedFilterAttributes) NumberGreaterThan() terra.ListValue[NumberGreaterThanAttributes] {
	return terra.ReferenceAsList[NumberGreaterThanAttributes](af.ref.Append("number_greater_than"))
}

func (af AdvancedFilterAttributes) NumberGreaterThanOrEquals() terra.ListValue[NumberGreaterThanOrEqualsAttributes] {
	return terra.ReferenceAsList[NumberGreaterThanOrEqualsAttributes](af.ref.Append("number_greater_than_or_equals"))
}

func (af AdvancedFilterAttributes) NumberIn() terra.ListValue[NumberInAttributes] {
	return terra.ReferenceAsList[NumberInAttributes](af.ref.Append("number_in"))
}

func (af AdvancedFilterAttributes) NumberInRange() terra.ListValue[NumberInRangeAttributes] {
	return terra.ReferenceAsList[NumberInRangeAttributes](af.ref.Append("number_in_range"))
}

func (af AdvancedFilterAttributes) NumberLessThan() terra.ListValue[NumberLessThanAttributes] {
	return terra.ReferenceAsList[NumberLessThanAttributes](af.ref.Append("number_less_than"))
}

func (af AdvancedFilterAttributes) NumberLessThanOrEquals() terra.ListValue[NumberLessThanOrEqualsAttributes] {
	return terra.ReferenceAsList[NumberLessThanOrEqualsAttributes](af.ref.Append("number_less_than_or_equals"))
}

func (af AdvancedFilterAttributes) NumberNotIn() terra.ListValue[NumberNotInAttributes] {
	return terra.ReferenceAsList[NumberNotInAttributes](af.ref.Append("number_not_in"))
}

func (af AdvancedFilterAttributes) NumberNotInRange() terra.ListValue[NumberNotInRangeAttributes] {
	return terra.ReferenceAsList[NumberNotInRangeAttributes](af.ref.Append("number_not_in_range"))
}

func (af AdvancedFilterAttributes) StringBeginsWith() terra.ListValue[StringBeginsWithAttributes] {
	return terra.ReferenceAsList[StringBeginsWithAttributes](af.ref.Append("string_begins_with"))
}

func (af AdvancedFilterAttributes) StringContains() terra.ListValue[StringContainsAttributes] {
	return terra.ReferenceAsList[StringContainsAttributes](af.ref.Append("string_contains"))
}

func (af AdvancedFilterAttributes) StringEndsWith() terra.ListValue[StringEndsWithAttributes] {
	return terra.ReferenceAsList[StringEndsWithAttributes](af.ref.Append("string_ends_with"))
}

func (af AdvancedFilterAttributes) StringIn() terra.ListValue[StringInAttributes] {
	return terra.ReferenceAsList[StringInAttributes](af.ref.Append("string_in"))
}

func (af AdvancedFilterAttributes) StringNotBeginsWith() terra.ListValue[StringNotBeginsWithAttributes] {
	return terra.ReferenceAsList[StringNotBeginsWithAttributes](af.ref.Append("string_not_begins_with"))
}

func (af AdvancedFilterAttributes) StringNotContains() terra.ListValue[StringNotContainsAttributes] {
	return terra.ReferenceAsList[StringNotContainsAttributes](af.ref.Append("string_not_contains"))
}

func (af AdvancedFilterAttributes) StringNotEndsWith() terra.ListValue[StringNotEndsWithAttributes] {
	return terra.ReferenceAsList[StringNotEndsWithAttributes](af.ref.Append("string_not_ends_with"))
}

func (af AdvancedFilterAttributes) StringNotIn() terra.ListValue[StringNotInAttributes] {
	return terra.ReferenceAsList[StringNotInAttributes](af.ref.Append("string_not_in"))
}

type BoolEqualsAttributes struct {
	ref terra.Reference
}

func (be BoolEqualsAttributes) InternalRef() (terra.Reference, error) {
	return be.ref, nil
}

func (be BoolEqualsAttributes) InternalWithRef(ref terra.Reference) BoolEqualsAttributes {
	return BoolEqualsAttributes{ref: ref}
}

func (be BoolEqualsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return be.ref.InternalTokens()
}

func (be BoolEqualsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(be.ref.Append("key"))
}

func (be BoolEqualsAttributes) Value() terra.BoolValue {
	return terra.ReferenceAsBool(be.ref.Append("value"))
}

type IsNotNullAttributes struct {
	ref terra.Reference
}

func (inn IsNotNullAttributes) InternalRef() (terra.Reference, error) {
	return inn.ref, nil
}

func (inn IsNotNullAttributes) InternalWithRef(ref terra.Reference) IsNotNullAttributes {
	return IsNotNullAttributes{ref: ref}
}

func (inn IsNotNullAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return inn.ref.InternalTokens()
}

func (inn IsNotNullAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(inn.ref.Append("key"))
}

type IsNullOrUndefinedAttributes struct {
	ref terra.Reference
}

func (inou IsNullOrUndefinedAttributes) InternalRef() (terra.Reference, error) {
	return inou.ref, nil
}

func (inou IsNullOrUndefinedAttributes) InternalWithRef(ref terra.Reference) IsNullOrUndefinedAttributes {
	return IsNullOrUndefinedAttributes{ref: ref}
}

func (inou IsNullOrUndefinedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return inou.ref.InternalTokens()
}

func (inou IsNullOrUndefinedAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(inou.ref.Append("key"))
}

type NumberGreaterThanAttributes struct {
	ref terra.Reference
}

func (ngt NumberGreaterThanAttributes) InternalRef() (terra.Reference, error) {
	return ngt.ref, nil
}

func (ngt NumberGreaterThanAttributes) InternalWithRef(ref terra.Reference) NumberGreaterThanAttributes {
	return NumberGreaterThanAttributes{ref: ref}
}

func (ngt NumberGreaterThanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ngt.ref.InternalTokens()
}

func (ngt NumberGreaterThanAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ngt.ref.Append("key"))
}

func (ngt NumberGreaterThanAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(ngt.ref.Append("value"))
}

type NumberGreaterThanOrEqualsAttributes struct {
	ref terra.Reference
}

func (ngtoe NumberGreaterThanOrEqualsAttributes) InternalRef() (terra.Reference, error) {
	return ngtoe.ref, nil
}

func (ngtoe NumberGreaterThanOrEqualsAttributes) InternalWithRef(ref terra.Reference) NumberGreaterThanOrEqualsAttributes {
	return NumberGreaterThanOrEqualsAttributes{ref: ref}
}

func (ngtoe NumberGreaterThanOrEqualsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ngtoe.ref.InternalTokens()
}

func (ngtoe NumberGreaterThanOrEqualsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ngtoe.ref.Append("key"))
}

func (ngtoe NumberGreaterThanOrEqualsAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(ngtoe.ref.Append("value"))
}

type NumberInAttributes struct {
	ref terra.Reference
}

func (ni NumberInAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NumberInAttributes) InternalWithRef(ref terra.Reference) NumberInAttributes {
	return NumberInAttributes{ref: ref}
}

func (ni NumberInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NumberInAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("key"))
}

func (ni NumberInAttributes) Values() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ni.ref.Append("values"))
}

type NumberInRangeAttributes struct {
	ref terra.Reference
}

func (nir NumberInRangeAttributes) InternalRef() (terra.Reference, error) {
	return nir.ref, nil
}

func (nir NumberInRangeAttributes) InternalWithRef(ref terra.Reference) NumberInRangeAttributes {
	return NumberInRangeAttributes{ref: ref}
}

func (nir NumberInRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nir.ref.InternalTokens()
}

func (nir NumberInRangeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(nir.ref.Append("key"))
}

func (nir NumberInRangeAttributes) Values() terra.ListValue[terra.ListValue[terra.NumberValue]] {
	return terra.ReferenceAsList[terra.ListValue[terra.NumberValue]](nir.ref.Append("values"))
}

type NumberLessThanAttributes struct {
	ref terra.Reference
}

func (nlt NumberLessThanAttributes) InternalRef() (terra.Reference, error) {
	return nlt.ref, nil
}

func (nlt NumberLessThanAttributes) InternalWithRef(ref terra.Reference) NumberLessThanAttributes {
	return NumberLessThanAttributes{ref: ref}
}

func (nlt NumberLessThanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nlt.ref.InternalTokens()
}

func (nlt NumberLessThanAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(nlt.ref.Append("key"))
}

func (nlt NumberLessThanAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(nlt.ref.Append("value"))
}

type NumberLessThanOrEqualsAttributes struct {
	ref terra.Reference
}

func (nltoe NumberLessThanOrEqualsAttributes) InternalRef() (terra.Reference, error) {
	return nltoe.ref, nil
}

func (nltoe NumberLessThanOrEqualsAttributes) InternalWithRef(ref terra.Reference) NumberLessThanOrEqualsAttributes {
	return NumberLessThanOrEqualsAttributes{ref: ref}
}

func (nltoe NumberLessThanOrEqualsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nltoe.ref.InternalTokens()
}

func (nltoe NumberLessThanOrEqualsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(nltoe.ref.Append("key"))
}

func (nltoe NumberLessThanOrEqualsAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(nltoe.ref.Append("value"))
}

type NumberNotInAttributes struct {
	ref terra.Reference
}

func (nni NumberNotInAttributes) InternalRef() (terra.Reference, error) {
	return nni.ref, nil
}

func (nni NumberNotInAttributes) InternalWithRef(ref terra.Reference) NumberNotInAttributes {
	return NumberNotInAttributes{ref: ref}
}

func (nni NumberNotInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nni.ref.InternalTokens()
}

func (nni NumberNotInAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(nni.ref.Append("key"))
}

func (nni NumberNotInAttributes) Values() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](nni.ref.Append("values"))
}

type NumberNotInRangeAttributes struct {
	ref terra.Reference
}

func (nnir NumberNotInRangeAttributes) InternalRef() (terra.Reference, error) {
	return nnir.ref, nil
}

func (nnir NumberNotInRangeAttributes) InternalWithRef(ref terra.Reference) NumberNotInRangeAttributes {
	return NumberNotInRangeAttributes{ref: ref}
}

func (nnir NumberNotInRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nnir.ref.InternalTokens()
}

func (nnir NumberNotInRangeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(nnir.ref.Append("key"))
}

func (nnir NumberNotInRangeAttributes) Values() terra.ListValue[terra.ListValue[terra.NumberValue]] {
	return terra.ReferenceAsList[terra.ListValue[terra.NumberValue]](nnir.ref.Append("values"))
}

type StringBeginsWithAttributes struct {
	ref terra.Reference
}

func (sbw StringBeginsWithAttributes) InternalRef() (terra.Reference, error) {
	return sbw.ref, nil
}

func (sbw StringBeginsWithAttributes) InternalWithRef(ref terra.Reference) StringBeginsWithAttributes {
	return StringBeginsWithAttributes{ref: ref}
}

func (sbw StringBeginsWithAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbw.ref.InternalTokens()
}

func (sbw StringBeginsWithAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sbw.ref.Append("key"))
}

func (sbw StringBeginsWithAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sbw.ref.Append("values"))
}

type StringContainsAttributes struct {
	ref terra.Reference
}

func (sc StringContainsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StringContainsAttributes) InternalWithRef(ref terra.Reference) StringContainsAttributes {
	return StringContainsAttributes{ref: ref}
}

func (sc StringContainsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StringContainsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key"))
}

func (sc StringContainsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("values"))
}

type StringEndsWithAttributes struct {
	ref terra.Reference
}

func (sew StringEndsWithAttributes) InternalRef() (terra.Reference, error) {
	return sew.ref, nil
}

func (sew StringEndsWithAttributes) InternalWithRef(ref terra.Reference) StringEndsWithAttributes {
	return StringEndsWithAttributes{ref: ref}
}

func (sew StringEndsWithAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sew.ref.InternalTokens()
}

func (sew StringEndsWithAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sew.ref.Append("key"))
}

func (sew StringEndsWithAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sew.ref.Append("values"))
}

type StringInAttributes struct {
	ref terra.Reference
}

func (si StringInAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si StringInAttributes) InternalWithRef(ref terra.Reference) StringInAttributes {
	return StringInAttributes{ref: ref}
}

func (si StringInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si StringInAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("key"))
}

func (si StringInAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("values"))
}

type StringNotBeginsWithAttributes struct {
	ref terra.Reference
}

func (snbw StringNotBeginsWithAttributes) InternalRef() (terra.Reference, error) {
	return snbw.ref, nil
}

func (snbw StringNotBeginsWithAttributes) InternalWithRef(ref terra.Reference) StringNotBeginsWithAttributes {
	return StringNotBeginsWithAttributes{ref: ref}
}

func (snbw StringNotBeginsWithAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return snbw.ref.InternalTokens()
}

func (snbw StringNotBeginsWithAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(snbw.ref.Append("key"))
}

func (snbw StringNotBeginsWithAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](snbw.ref.Append("values"))
}

type StringNotContainsAttributes struct {
	ref terra.Reference
}

func (snc StringNotContainsAttributes) InternalRef() (terra.Reference, error) {
	return snc.ref, nil
}

func (snc StringNotContainsAttributes) InternalWithRef(ref terra.Reference) StringNotContainsAttributes {
	return StringNotContainsAttributes{ref: ref}
}

func (snc StringNotContainsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return snc.ref.InternalTokens()
}

func (snc StringNotContainsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(snc.ref.Append("key"))
}

func (snc StringNotContainsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](snc.ref.Append("values"))
}

type StringNotEndsWithAttributes struct {
	ref terra.Reference
}

func (snew StringNotEndsWithAttributes) InternalRef() (terra.Reference, error) {
	return snew.ref, nil
}

func (snew StringNotEndsWithAttributes) InternalWithRef(ref terra.Reference) StringNotEndsWithAttributes {
	return StringNotEndsWithAttributes{ref: ref}
}

func (snew StringNotEndsWithAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return snew.ref.InternalTokens()
}

func (snew StringNotEndsWithAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(snew.ref.Append("key"))
}

func (snew StringNotEndsWithAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](snew.ref.Append("values"))
}

type StringNotInAttributes struct {
	ref terra.Reference
}

func (sni StringNotInAttributes) InternalRef() (terra.Reference, error) {
	return sni.ref, nil
}

func (sni StringNotInAttributes) InternalWithRef(ref terra.Reference) StringNotInAttributes {
	return StringNotInAttributes{ref: ref}
}

func (sni StringNotInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sni.ref.InternalTokens()
}

func (sni StringNotInAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sni.ref.Append("key"))
}

func (sni StringNotInAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sni.ref.Append("values"))
}

type AzureFunctionEndpointAttributes struct {
	ref terra.Reference
}

func (afe AzureFunctionEndpointAttributes) InternalRef() (terra.Reference, error) {
	return afe.ref, nil
}

func (afe AzureFunctionEndpointAttributes) InternalWithRef(ref terra.Reference) AzureFunctionEndpointAttributes {
	return AzureFunctionEndpointAttributes{ref: ref}
}

func (afe AzureFunctionEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return afe.ref.InternalTokens()
}

func (afe AzureFunctionEndpointAttributes) FunctionId() terra.StringValue {
	return terra.ReferenceAsString(afe.ref.Append("function_id"))
}

func (afe AzureFunctionEndpointAttributes) MaxEventsPerBatch() terra.NumberValue {
	return terra.ReferenceAsNumber(afe.ref.Append("max_events_per_batch"))
}

func (afe AzureFunctionEndpointAttributes) PreferredBatchSizeInKilobytes() terra.NumberValue {
	return terra.ReferenceAsNumber(afe.ref.Append("preferred_batch_size_in_kilobytes"))
}

type DeadLetterIdentityAttributes struct {
	ref terra.Reference
}

func (dli DeadLetterIdentityAttributes) InternalRef() (terra.Reference, error) {
	return dli.ref, nil
}

func (dli DeadLetterIdentityAttributes) InternalWithRef(ref terra.Reference) DeadLetterIdentityAttributes {
	return DeadLetterIdentityAttributes{ref: ref}
}

func (dli DeadLetterIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dli.ref.InternalTokens()
}

func (dli DeadLetterIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dli.ref.Append("type"))
}

func (dli DeadLetterIdentityAttributes) UserAssignedIdentity() terra.StringValue {
	return terra.ReferenceAsString(dli.ref.Append("user_assigned_identity"))
}

type DeliveryIdentityAttributes struct {
	ref terra.Reference
}

func (di DeliveryIdentityAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di DeliveryIdentityAttributes) InternalWithRef(ref terra.Reference) DeliveryIdentityAttributes {
	return DeliveryIdentityAttributes{ref: ref}
}

func (di DeliveryIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di DeliveryIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("type"))
}

func (di DeliveryIdentityAttributes) UserAssignedIdentity() terra.StringValue {
	return terra.ReferenceAsString(di.ref.Append("user_assigned_identity"))
}

type DeliveryPropertyAttributes struct {
	ref terra.Reference
}

func (dp DeliveryPropertyAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DeliveryPropertyAttributes) InternalWithRef(ref terra.Reference) DeliveryPropertyAttributes {
	return DeliveryPropertyAttributes{ref: ref}
}

func (dp DeliveryPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DeliveryPropertyAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("header_name"))
}

func (dp DeliveryPropertyAttributes) Secret() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("secret"))
}

func (dp DeliveryPropertyAttributes) SourceField() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("source_field"))
}

func (dp DeliveryPropertyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("type"))
}

func (dp DeliveryPropertyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(dp.ref.Append("value"))
}

type RetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetryPolicyAttributes) InternalWithRef(ref terra.Reference) RetryPolicyAttributes {
	return RetryPolicyAttributes{ref: ref}
}

func (rp RetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetryPolicyAttributes) EventTimeToLive() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("event_time_to_live"))
}

func (rp RetryPolicyAttributes) MaxDeliveryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_delivery_attempts"))
}

type StorageBlobDeadLetterDestinationAttributes struct {
	ref terra.Reference
}

func (sbdld StorageBlobDeadLetterDestinationAttributes) InternalRef() (terra.Reference, error) {
	return sbdld.ref, nil
}

func (sbdld StorageBlobDeadLetterDestinationAttributes) InternalWithRef(ref terra.Reference) StorageBlobDeadLetterDestinationAttributes {
	return StorageBlobDeadLetterDestinationAttributes{ref: ref}
}

func (sbdld StorageBlobDeadLetterDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbdld.ref.InternalTokens()
}

func (sbdld StorageBlobDeadLetterDestinationAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(sbdld.ref.Append("storage_account_id"))
}

func (sbdld StorageBlobDeadLetterDestinationAttributes) StorageBlobContainerName() terra.StringValue {
	return terra.ReferenceAsString(sbdld.ref.Append("storage_blob_container_name"))
}

type StorageQueueEndpointAttributes struct {
	ref terra.Reference
}

func (sqe StorageQueueEndpointAttributes) InternalRef() (terra.Reference, error) {
	return sqe.ref, nil
}

func (sqe StorageQueueEndpointAttributes) InternalWithRef(ref terra.Reference) StorageQueueEndpointAttributes {
	return StorageQueueEndpointAttributes{ref: ref}
}

func (sqe StorageQueueEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqe.ref.InternalTokens()
}

func (sqe StorageQueueEndpointAttributes) QueueMessageTimeToLiveInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sqe.ref.Append("queue_message_time_to_live_in_seconds"))
}

func (sqe StorageQueueEndpointAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(sqe.ref.Append("queue_name"))
}

func (sqe StorageQueueEndpointAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(sqe.ref.Append("storage_account_id"))
}

type SubjectFilterAttributes struct {
	ref terra.Reference
}

func (sf SubjectFilterAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf SubjectFilterAttributes) InternalWithRef(ref terra.Reference) SubjectFilterAttributes {
	return SubjectFilterAttributes{ref: ref}
}

func (sf SubjectFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf SubjectFilterAttributes) CaseSensitive() terra.BoolValue {
	return terra.ReferenceAsBool(sf.ref.Append("case_sensitive"))
}

func (sf SubjectFilterAttributes) SubjectBeginsWith() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("subject_begins_with"))
}

func (sf SubjectFilterAttributes) SubjectEndsWith() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("subject_ends_with"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WebhookEndpointAttributes struct {
	ref terra.Reference
}

func (we WebhookEndpointAttributes) InternalRef() (terra.Reference, error) {
	return we.ref, nil
}

func (we WebhookEndpointAttributes) InternalWithRef(ref terra.Reference) WebhookEndpointAttributes {
	return WebhookEndpointAttributes{ref: ref}
}

func (we WebhookEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return we.ref.InternalTokens()
}

func (we WebhookEndpointAttributes) ActiveDirectoryAppIdOrUri() terra.StringValue {
	return terra.ReferenceAsString(we.ref.Append("active_directory_app_id_or_uri"))
}

func (we WebhookEndpointAttributes) ActiveDirectoryTenantId() terra.StringValue {
	return terra.ReferenceAsString(we.ref.Append("active_directory_tenant_id"))
}

func (we WebhookEndpointAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(we.ref.Append("base_url"))
}

func (we WebhookEndpointAttributes) MaxEventsPerBatch() terra.NumberValue {
	return terra.ReferenceAsNumber(we.ref.Append("max_events_per_batch"))
}

func (we WebhookEndpointAttributes) PreferredBatchSizeInKilobytes() terra.NumberValue {
	return terra.ReferenceAsNumber(we.ref.Append("preferred_batch_size_in_kilobytes"))
}

func (we WebhookEndpointAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(we.ref.Append("url"))
}

type AdvancedFilterState struct {
	BoolEquals                []BoolEqualsState                `json:"bool_equals"`
	IsNotNull                 []IsNotNullState                 `json:"is_not_null"`
	IsNullOrUndefined         []IsNullOrUndefinedState         `json:"is_null_or_undefined"`
	NumberGreaterThan         []NumberGreaterThanState         `json:"number_greater_than"`
	NumberGreaterThanOrEquals []NumberGreaterThanOrEqualsState `json:"number_greater_than_or_equals"`
	NumberIn                  []NumberInState                  `json:"number_in"`
	NumberInRange             []NumberInRangeState             `json:"number_in_range"`
	NumberLessThan            []NumberLessThanState            `json:"number_less_than"`
	NumberLessThanOrEquals    []NumberLessThanOrEqualsState    `json:"number_less_than_or_equals"`
	NumberNotIn               []NumberNotInState               `json:"number_not_in"`
	NumberNotInRange          []NumberNotInRangeState          `json:"number_not_in_range"`
	StringBeginsWith          []StringBeginsWithState          `json:"string_begins_with"`
	StringContains            []StringContainsState            `json:"string_contains"`
	StringEndsWith            []StringEndsWithState            `json:"string_ends_with"`
	StringIn                  []StringInState                  `json:"string_in"`
	StringNotBeginsWith       []StringNotBeginsWithState       `json:"string_not_begins_with"`
	StringNotContains         []StringNotContainsState         `json:"string_not_contains"`
	StringNotEndsWith         []StringNotEndsWithState         `json:"string_not_ends_with"`
	StringNotIn               []StringNotInState               `json:"string_not_in"`
}

type BoolEqualsState struct {
	Key   string `json:"key"`
	Value bool   `json:"value"`
}

type IsNotNullState struct {
	Key string `json:"key"`
}

type IsNullOrUndefinedState struct {
	Key string `json:"key"`
}

type NumberGreaterThanState struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

type NumberGreaterThanOrEqualsState struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

type NumberInState struct {
	Key    string    `json:"key"`
	Values []float64 `json:"values"`
}

type NumberInRangeState struct {
	Key    string      `json:"key"`
	Values [][]float64 `json:"values"`
}

type NumberLessThanState struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

type NumberLessThanOrEqualsState struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

type NumberNotInState struct {
	Key    string    `json:"key"`
	Values []float64 `json:"values"`
}

type NumberNotInRangeState struct {
	Key    string      `json:"key"`
	Values [][]float64 `json:"values"`
}

type StringBeginsWithState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringContainsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringEndsWithState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringInState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringNotBeginsWithState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringNotContainsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringNotEndsWithState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type StringNotInState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type AzureFunctionEndpointState struct {
	FunctionId                    string  `json:"function_id"`
	MaxEventsPerBatch             float64 `json:"max_events_per_batch"`
	PreferredBatchSizeInKilobytes float64 `json:"preferred_batch_size_in_kilobytes"`
}

type DeadLetterIdentityState struct {
	Type                 string `json:"type"`
	UserAssignedIdentity string `json:"user_assigned_identity"`
}

type DeliveryIdentityState struct {
	Type                 string `json:"type"`
	UserAssignedIdentity string `json:"user_assigned_identity"`
}

type DeliveryPropertyState struct {
	HeaderName  string `json:"header_name"`
	Secret      bool   `json:"secret"`
	SourceField string `json:"source_field"`
	Type        string `json:"type"`
	Value       string `json:"value"`
}

type RetryPolicyState struct {
	EventTimeToLive     float64 `json:"event_time_to_live"`
	MaxDeliveryAttempts float64 `json:"max_delivery_attempts"`
}

type StorageBlobDeadLetterDestinationState struct {
	StorageAccountId         string `json:"storage_account_id"`
	StorageBlobContainerName string `json:"storage_blob_container_name"`
}

type StorageQueueEndpointState struct {
	QueueMessageTimeToLiveInSeconds float64 `json:"queue_message_time_to_live_in_seconds"`
	QueueName                       string  `json:"queue_name"`
	StorageAccountId                string  `json:"storage_account_id"`
}

type SubjectFilterState struct {
	CaseSensitive     bool   `json:"case_sensitive"`
	SubjectBeginsWith string `json:"subject_begins_with"`
	SubjectEndsWith   string `json:"subject_ends_with"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WebhookEndpointState struct {
	ActiveDirectoryAppIdOrUri     string  `json:"active_directory_app_id_or_uri"`
	ActiveDirectoryTenantId       string  `json:"active_directory_tenant_id"`
	BaseUrl                       string  `json:"base_url"`
	MaxEventsPerBatch             float64 `json:"max_events_per_batch"`
	PreferredBatchSizeInKilobytes float64 `json:"preferred_batch_size_in_kilobytes"`
	Url                           string  `json:"url"`
}
