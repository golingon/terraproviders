// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package automationschedule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type MonthlyOccurrence struct {
	// Day: string, required
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// Occurrence: number, required
	Occurrence terra.NumberValue `hcl:"occurrence,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MonthlyOccurrenceAttributes struct {
	ref terra.Reference
}

func (mo MonthlyOccurrenceAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MonthlyOccurrenceAttributes) InternalWithRef(ref terra.Reference) MonthlyOccurrenceAttributes {
	return MonthlyOccurrenceAttributes{ref: ref}
}

func (mo MonthlyOccurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo MonthlyOccurrenceAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("day"))
}

func (mo MonthlyOccurrenceAttributes) Occurrence() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("occurrence"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MonthlyOccurrenceState struct {
	Day        string  `json:"day"`
	Occurrence float64 `json:"occurrence"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
