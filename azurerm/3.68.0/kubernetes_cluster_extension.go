// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	kubernetesclusterextension "github.com/golingon/terraproviders/azurerm/3.68.0/kubernetesclusterextension"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewKubernetesClusterExtension creates a new instance of [KubernetesClusterExtension].
func NewKubernetesClusterExtension(name string, args KubernetesClusterExtensionArgs) *KubernetesClusterExtension {
	return &KubernetesClusterExtension{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KubernetesClusterExtension)(nil)

// KubernetesClusterExtension represents the Terraform resource azurerm_kubernetes_cluster_extension.
type KubernetesClusterExtension struct {
	Name      string
	Args      KubernetesClusterExtensionArgs
	state     *kubernetesClusterExtensionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) Type() string {
	return "azurerm_kubernetes_cluster_extension"
}

// LocalName returns the local name for [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) LocalName() string {
	return kce.Name
}

// Configuration returns the configuration (args) for [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) Configuration() interface{} {
	return kce.Args
}

// DependOn is used for other resources to depend on [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) DependOn() terra.Reference {
	return terra.ReferenceResource(kce)
}

// Dependencies returns the list of resources [KubernetesClusterExtension] depends_on.
func (kce *KubernetesClusterExtension) Dependencies() terra.Dependencies {
	return kce.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) LifecycleManagement() *terra.Lifecycle {
	return kce.Lifecycle
}

// Attributes returns the attributes for [KubernetesClusterExtension].
func (kce *KubernetesClusterExtension) Attributes() kubernetesClusterExtensionAttributes {
	return kubernetesClusterExtensionAttributes{ref: terra.ReferenceResource(kce)}
}

// ImportState imports the given attribute values into [KubernetesClusterExtension]'s state.
func (kce *KubernetesClusterExtension) ImportState(av io.Reader) error {
	kce.state = &kubernetesClusterExtensionState{}
	if err := json.NewDecoder(av).Decode(kce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kce.Type(), kce.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KubernetesClusterExtension] has state.
func (kce *KubernetesClusterExtension) State() (*kubernetesClusterExtensionState, bool) {
	return kce.state, kce.state != nil
}

// StateMust returns the state for [KubernetesClusterExtension]. Panics if the state is nil.
func (kce *KubernetesClusterExtension) StateMust() *kubernetesClusterExtensionState {
	if kce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kce.Type(), kce.LocalName()))
	}
	return kce.state
}

// KubernetesClusterExtensionArgs contains the configurations for azurerm_kubernetes_cluster_extension.
type KubernetesClusterExtensionArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ConfigurationProtectedSettings: map of string, optional
	ConfigurationProtectedSettings terra.MapValue[terra.StringValue] `hcl:"configuration_protected_settings,attr"`
	// ConfigurationSettings: map of string, optional
	ConfigurationSettings terra.MapValue[terra.StringValue] `hcl:"configuration_settings,attr"`
	// ExtensionType: string, required
	ExtensionType terra.StringValue `hcl:"extension_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseNamespace: string, optional
	ReleaseNamespace terra.StringValue `hcl:"release_namespace,attr"`
	// ReleaseTrain: string, optional
	ReleaseTrain terra.StringValue `hcl:"release_train,attr"`
	// TargetNamespace: string, optional
	TargetNamespace terra.StringValue `hcl:"target_namespace,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// AksAssignedIdentity: min=0
	AksAssignedIdentity []kubernetesclusterextension.AksAssignedIdentity `hcl:"aks_assigned_identity,block" validate:"min=0"`
	// Plan: optional
	Plan *kubernetesclusterextension.Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *kubernetesclusterextension.Timeouts `hcl:"timeouts,block"`
}
type kubernetesClusterExtensionAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("cluster_id"))
}

// ConfigurationProtectedSettings returns a reference to field configuration_protected_settings of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ConfigurationProtectedSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kce.ref.Append("configuration_protected_settings"))
}

// ConfigurationSettings returns a reference to field configuration_settings of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ConfigurationSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kce.ref.Append("configuration_settings"))
}

// CurrentVersion returns a reference to field current_version of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("current_version"))
}

// ExtensionType returns a reference to field extension_type of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ExtensionType() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("extension_type"))
}

// Id returns a reference to field id of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("name"))
}

// ReleaseNamespace returns a reference to field release_namespace of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ReleaseNamespace() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("release_namespace"))
}

// ReleaseTrain returns a reference to field release_train of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) ReleaseTrain() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("release_train"))
}

// TargetNamespace returns a reference to field target_namespace of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) TargetNamespace() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("target_namespace"))
}

// Version returns a reference to field version of azurerm_kubernetes_cluster_extension.
func (kce kubernetesClusterExtensionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(kce.ref.Append("version"))
}

func (kce kubernetesClusterExtensionAttributes) AksAssignedIdentity() terra.ListValue[kubernetesclusterextension.AksAssignedIdentityAttributes] {
	return terra.ReferenceAsList[kubernetesclusterextension.AksAssignedIdentityAttributes](kce.ref.Append("aks_assigned_identity"))
}

func (kce kubernetesClusterExtensionAttributes) Plan() terra.ListValue[kubernetesclusterextension.PlanAttributes] {
	return terra.ReferenceAsList[kubernetesclusterextension.PlanAttributes](kce.ref.Append("plan"))
}

func (kce kubernetesClusterExtensionAttributes) Timeouts() kubernetesclusterextension.TimeoutsAttributes {
	return terra.ReferenceAsSingle[kubernetesclusterextension.TimeoutsAttributes](kce.ref.Append("timeouts"))
}

type kubernetesClusterExtensionState struct {
	ClusterId                      string                                                `json:"cluster_id"`
	ConfigurationProtectedSettings map[string]string                                     `json:"configuration_protected_settings"`
	ConfigurationSettings          map[string]string                                     `json:"configuration_settings"`
	CurrentVersion                 string                                                `json:"current_version"`
	ExtensionType                  string                                                `json:"extension_type"`
	Id                             string                                                `json:"id"`
	Name                           string                                                `json:"name"`
	ReleaseNamespace               string                                                `json:"release_namespace"`
	ReleaseTrain                   string                                                `json:"release_train"`
	TargetNamespace                string                                                `json:"target_namespace"`
	Version                        string                                                `json:"version"`
	AksAssignedIdentity            []kubernetesclusterextension.AksAssignedIdentityState `json:"aks_assigned_identity"`
	Plan                           []kubernetesclusterextension.PlanState                `json:"plan"`
	Timeouts                       *kubernetesclusterextension.TimeoutsState             `json:"timeouts"`
}
