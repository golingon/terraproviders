// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package postgresqlflexibleserver

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Authentication struct {
	// ActiveDirectoryAuthEnabled: bool, optional
	ActiveDirectoryAuthEnabled terra.BoolValue `hcl:"active_directory_auth_enabled,attr"`
	// PasswordAuthEnabled: bool, optional
	PasswordAuthEnabled terra.BoolValue `hcl:"password_auth_enabled,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
}

type CustomerManagedKey struct {
	// GeoBackupKeyVaultKeyId: string, optional
	GeoBackupKeyVaultKeyId terra.StringValue `hcl:"geo_backup_key_vault_key_id,attr"`
	// GeoBackupUserAssignedIdentityId: string, optional
	GeoBackupUserAssignedIdentityId terra.StringValue `hcl:"geo_backup_user_assigned_identity_id,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// PrimaryUserAssignedIdentityId: string, optional
	PrimaryUserAssignedIdentityId terra.StringValue `hcl:"primary_user_assigned_identity_id,attr"`
}

type HighAvailability struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// StandbyAvailabilityZone: string, optional
	StandbyAvailabilityZone terra.StringValue `hcl:"standby_availability_zone,attr"`
}

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type MaintenanceWindow struct {
	// DayOfWeek: number, optional
	DayOfWeek terra.NumberValue `hcl:"day_of_week,attr"`
	// StartHour: number, optional
	StartHour terra.NumberValue `hcl:"start_hour,attr"`
	// StartMinute: number, optional
	StartMinute terra.NumberValue `hcl:"start_minute,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) ActiveDirectoryAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("active_directory_auth_enabled"))
}

func (a AuthenticationAttributes) PasswordAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("password_auth_enabled"))
}

func (a AuthenticationAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("tenant_id"))
}

type CustomerManagedKeyAttributes struct {
	ref terra.Reference
}

func (cmk CustomerManagedKeyAttributes) InternalRef() (terra.Reference, error) {
	return cmk.ref, nil
}

func (cmk CustomerManagedKeyAttributes) InternalWithRef(ref terra.Reference) CustomerManagedKeyAttributes {
	return CustomerManagedKeyAttributes{ref: ref}
}

func (cmk CustomerManagedKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmk.ref.InternalTokens()
}

func (cmk CustomerManagedKeyAttributes) GeoBackupKeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(cmk.ref.Append("geo_backup_key_vault_key_id"))
}

func (cmk CustomerManagedKeyAttributes) GeoBackupUserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(cmk.ref.Append("geo_backup_user_assigned_identity_id"))
}

func (cmk CustomerManagedKeyAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(cmk.ref.Append("key_vault_key_id"))
}

func (cmk CustomerManagedKeyAttributes) PrimaryUserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(cmk.ref.Append("primary_user_assigned_identity_id"))
}

type HighAvailabilityAttributes struct {
	ref terra.Reference
}

func (ha HighAvailabilityAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha HighAvailabilityAttributes) InternalWithRef(ref terra.Reference) HighAvailabilityAttributes {
	return HighAvailabilityAttributes{ref: ref}
}

func (ha HighAvailabilityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha HighAvailabilityAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ha.ref.Append("mode"))
}

func (ha HighAvailabilityAttributes) StandbyAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ha.ref.Append("standby_availability_zone"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type MaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw MaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw MaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAttributes {
	return MaintenanceWindowAttributes{ref: ref}
}

func (mw MaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw MaintenanceWindowAttributes) DayOfWeek() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("day_of_week"))
}

func (mw MaintenanceWindowAttributes) StartHour() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("start_hour"))
}

func (mw MaintenanceWindowAttributes) StartMinute() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("start_minute"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuthenticationState struct {
	ActiveDirectoryAuthEnabled bool   `json:"active_directory_auth_enabled"`
	PasswordAuthEnabled        bool   `json:"password_auth_enabled"`
	TenantId                   string `json:"tenant_id"`
}

type CustomerManagedKeyState struct {
	GeoBackupKeyVaultKeyId          string `json:"geo_backup_key_vault_key_id"`
	GeoBackupUserAssignedIdentityId string `json:"geo_backup_user_assigned_identity_id"`
	KeyVaultKeyId                   string `json:"key_vault_key_id"`
	PrimaryUserAssignedIdentityId   string `json:"primary_user_assigned_identity_id"`
}

type HighAvailabilityState struct {
	Mode                    string `json:"mode"`
	StandbyAvailabilityZone string `json:"standby_availability_zone"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type MaintenanceWindowState struct {
	DayOfWeek   float64 `json:"day_of_week"`
	StartHour   float64 `json:"start_hour"`
	StartMinute float64 `json:"start_minute"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
