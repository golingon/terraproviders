// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediatransform "github.com/golingon/terraproviders/azurerm/3.74.0/mediatransform"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMediaTransform creates a new instance of [MediaTransform].
func NewMediaTransform(name string, args MediaTransformArgs) *MediaTransform {
	return &MediaTransform{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaTransform)(nil)

// MediaTransform represents the Terraform resource azurerm_media_transform.
type MediaTransform struct {
	Name      string
	Args      MediaTransformArgs
	state     *mediaTransformState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MediaTransform].
func (mt *MediaTransform) Type() string {
	return "azurerm_media_transform"
}

// LocalName returns the local name for [MediaTransform].
func (mt *MediaTransform) LocalName() string {
	return mt.Name
}

// Configuration returns the configuration (args) for [MediaTransform].
func (mt *MediaTransform) Configuration() interface{} {
	return mt.Args
}

// DependOn is used for other resources to depend on [MediaTransform].
func (mt *MediaTransform) DependOn() terra.Reference {
	return terra.ReferenceResource(mt)
}

// Dependencies returns the list of resources [MediaTransform] depends_on.
func (mt *MediaTransform) Dependencies() terra.Dependencies {
	return mt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MediaTransform].
func (mt *MediaTransform) LifecycleManagement() *terra.Lifecycle {
	return mt.Lifecycle
}

// Attributes returns the attributes for [MediaTransform].
func (mt *MediaTransform) Attributes() mediaTransformAttributes {
	return mediaTransformAttributes{ref: terra.ReferenceResource(mt)}
}

// ImportState imports the given attribute values into [MediaTransform]'s state.
func (mt *MediaTransform) ImportState(av io.Reader) error {
	mt.state = &mediaTransformState{}
	if err := json.NewDecoder(av).Decode(mt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mt.Type(), mt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MediaTransform] has state.
func (mt *MediaTransform) State() (*mediaTransformState, bool) {
	return mt.state, mt.state != nil
}

// StateMust returns the state for [MediaTransform]. Panics if the state is nil.
func (mt *MediaTransform) StateMust() *mediaTransformState {
	if mt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mt.Type(), mt.LocalName()))
	}
	return mt.state
}

// MediaTransformArgs contains the configurations for azurerm_media_transform.
type MediaTransformArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Output: min=0
	Output []mediatransform.Output `hcl:"output,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *mediatransform.Timeouts `hcl:"timeouts,block"`
}
type mediaTransformAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_media_transform.
func (mt mediaTransformAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_media_transform.
func (mt mediaTransformAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_transform.
func (mt mediaTransformAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_transform.
func (mt mediaTransformAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_transform.
func (mt mediaTransformAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("resource_group_name"))
}

func (mt mediaTransformAttributes) Output() terra.ListValue[mediatransform.OutputAttributes] {
	return terra.ReferenceAsList[mediatransform.OutputAttributes](mt.ref.Append("output"))
}

func (mt mediaTransformAttributes) Timeouts() mediatransform.TimeoutsAttributes {
	return terra.ReferenceAsSingle[mediatransform.TimeoutsAttributes](mt.ref.Append("timeouts"))
}

type mediaTransformState struct {
	Description              string                        `json:"description"`
	Id                       string                        `json:"id"`
	MediaServicesAccountName string                        `json:"media_services_account_name"`
	Name                     string                        `json:"name"`
	ResourceGroupName        string                        `json:"resource_group_name"`
	Output                   []mediatransform.OutputState  `json:"output"`
	Timeouts                 *mediatransform.TimeoutsState `json:"timeouts"`
}
