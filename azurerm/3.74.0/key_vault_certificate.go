// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	keyvaultcertificate "github.com/golingon/terraproviders/azurerm/3.74.0/keyvaultcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewKeyVaultCertificate creates a new instance of [KeyVaultCertificate].
func NewKeyVaultCertificate(name string, args KeyVaultCertificateArgs) *KeyVaultCertificate {
	return &KeyVaultCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultCertificate)(nil)

// KeyVaultCertificate represents the Terraform resource azurerm_key_vault_certificate.
type KeyVaultCertificate struct {
	Name      string
	Args      KeyVaultCertificateArgs
	state     *keyVaultCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) Type() string {
	return "azurerm_key_vault_certificate"
}

// LocalName returns the local name for [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) LocalName() string {
	return kvc.Name
}

// Configuration returns the configuration (args) for [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) Configuration() interface{} {
	return kvc.Args
}

// DependOn is used for other resources to depend on [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(kvc)
}

// Dependencies returns the list of resources [KeyVaultCertificate] depends_on.
func (kvc *KeyVaultCertificate) Dependencies() terra.Dependencies {
	return kvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) LifecycleManagement() *terra.Lifecycle {
	return kvc.Lifecycle
}

// Attributes returns the attributes for [KeyVaultCertificate].
func (kvc *KeyVaultCertificate) Attributes() keyVaultCertificateAttributes {
	return keyVaultCertificateAttributes{ref: terra.ReferenceResource(kvc)}
}

// ImportState imports the given attribute values into [KeyVaultCertificate]'s state.
func (kvc *KeyVaultCertificate) ImportState(av io.Reader) error {
	kvc.state = &keyVaultCertificateState{}
	if err := json.NewDecoder(av).Decode(kvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvc.Type(), kvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyVaultCertificate] has state.
func (kvc *KeyVaultCertificate) State() (*keyVaultCertificateState, bool) {
	return kvc.state, kvc.state != nil
}

// StateMust returns the state for [KeyVaultCertificate]. Panics if the state is nil.
func (kvc *KeyVaultCertificate) StateMust() *keyVaultCertificateState {
	if kvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvc.Type(), kvc.LocalName()))
	}
	return kvc.state
}

// KeyVaultCertificateArgs contains the configurations for azurerm_key_vault_certificate.
type KeyVaultCertificateArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// CertificateAttribute: min=0
	CertificateAttribute []keyvaultcertificate.CertificateAttribute `hcl:"certificate_attribute,block" validate:"min=0"`
	// Certificate: optional
	Certificate *keyvaultcertificate.Certificate `hcl:"certificate,block"`
	// CertificatePolicy: optional
	CertificatePolicy *keyvaultcertificate.CertificatePolicy `hcl:"certificate_policy,block"`
	// Timeouts: optional
	Timeouts *keyvaultcertificate.Timeouts `hcl:"timeouts,block"`
}
type keyVaultCertificateAttributes struct {
	ref terra.Reference
}

// CertificateData returns a reference to field certificate_data of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) CertificateData() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("certificate_data"))
}

// CertificateDataBase64 returns a reference to field certificate_data_base64 of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) CertificateDataBase64() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("certificate_data_base64"))
}

// Id returns a reference to field id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("key_vault_id"))
}

// Name returns a reference to field name of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("resource_manager_id"))
}

// ResourceManagerVersionlessId returns a reference to field resource_manager_versionless_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) ResourceManagerVersionlessId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("resource_manager_versionless_id"))
}

// SecretId returns a reference to field secret_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("secret_id"))
}

// Tags returns a reference to field tags of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kvc.ref.Append("tags"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("thumbprint"))
}

// Version returns a reference to field version of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("version"))
}

// VersionlessId returns a reference to field versionless_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) VersionlessId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("versionless_id"))
}

// VersionlessSecretId returns a reference to field versionless_secret_id of azurerm_key_vault_certificate.
func (kvc keyVaultCertificateAttributes) VersionlessSecretId() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("versionless_secret_id"))
}

func (kvc keyVaultCertificateAttributes) CertificateAttribute() terra.ListValue[keyvaultcertificate.CertificateAttributeAttributes] {
	return terra.ReferenceAsList[keyvaultcertificate.CertificateAttributeAttributes](kvc.ref.Append("certificate_attribute"))
}

func (kvc keyVaultCertificateAttributes) Certificate() terra.ListValue[keyvaultcertificate.CertificateAttributes] {
	return terra.ReferenceAsList[keyvaultcertificate.CertificateAttributes](kvc.ref.Append("certificate"))
}

func (kvc keyVaultCertificateAttributes) CertificatePolicy() terra.ListValue[keyvaultcertificate.CertificatePolicyAttributes] {
	return terra.ReferenceAsList[keyvaultcertificate.CertificatePolicyAttributes](kvc.ref.Append("certificate_policy"))
}

func (kvc keyVaultCertificateAttributes) Timeouts() keyvaultcertificate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[keyvaultcertificate.TimeoutsAttributes](kvc.ref.Append("timeouts"))
}

type keyVaultCertificateState struct {
	CertificateData              string                                          `json:"certificate_data"`
	CertificateDataBase64        string                                          `json:"certificate_data_base64"`
	Id                           string                                          `json:"id"`
	KeyVaultId                   string                                          `json:"key_vault_id"`
	Name                         string                                          `json:"name"`
	ResourceManagerId            string                                          `json:"resource_manager_id"`
	ResourceManagerVersionlessId string                                          `json:"resource_manager_versionless_id"`
	SecretId                     string                                          `json:"secret_id"`
	Tags                         map[string]string                               `json:"tags"`
	Thumbprint                   string                                          `json:"thumbprint"`
	Version                      string                                          `json:"version"`
	VersionlessId                string                                          `json:"versionless_id"`
	VersionlessSecretId          string                                          `json:"versionless_secret_id"`
	CertificateAttribute         []keyvaultcertificate.CertificateAttributeState `json:"certificate_attribute"`
	Certificate                  []keyvaultcertificate.CertificateState          `json:"certificate"`
	CertificatePolicy            []keyvaultcertificate.CertificatePolicyState    `json:"certificate_policy"`
	Timeouts                     *keyvaultcertificate.TimeoutsState              `json:"timeouts"`
}
