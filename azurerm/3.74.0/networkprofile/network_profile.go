// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package networkprofile

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ContainerNetworkInterface struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// IpConfiguration: min=1
	IpConfiguration []IpConfiguration `hcl:"ip_configuration,block" validate:"min=1"`
}

type IpConfiguration struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ContainerNetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (cni ContainerNetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return cni.ref, nil
}

func (cni ContainerNetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) ContainerNetworkInterfaceAttributes {
	return ContainerNetworkInterfaceAttributes{ref: ref}
}

func (cni ContainerNetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cni.ref.InternalTokens()
}

func (cni ContainerNetworkInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cni.ref.Append("name"))
}

func (cni ContainerNetworkInterfaceAttributes) IpConfiguration() terra.ListValue[IpConfigurationAttributes] {
	return terra.ReferenceAsList[IpConfigurationAttributes](cni.ref.Append("ip_configuration"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ContainerNetworkInterfaceState struct {
	Name            string                 `json:"name"`
	IpConfiguration []IpConfigurationState `json:"ip_configuration"`
}

type IpConfigurationState struct {
	Name     string `json:"name"`
	SubnetId string `json:"subnet_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
