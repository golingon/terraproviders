// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type PrimaryReadKey struct{}

type PrimaryWriteKey struct{}

type SecondaryReadKey struct{}

type SecondaryWriteKey struct{}

type Encryption struct {
	// IdentityClientId: string, optional
	IdentityClientId terra.StringValue `hcl:"identity_client_id,attr"`
	// KeyVaultKeyIdentifier: string, optional
	KeyVaultKeyIdentifier terra.StringValue `hcl:"key_vault_key_identifier,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Replica struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PrimaryReadKeyAttributes struct {
	ref terra.Reference
}

func (prk PrimaryReadKeyAttributes) InternalRef() (terra.Reference, error) {
	return prk.ref, nil
}

func (prk PrimaryReadKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryReadKeyAttributes {
	return PrimaryReadKeyAttributes{ref: ref}
}

func (prk PrimaryReadKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prk.ref.InternalTokens()
}

func (prk PrimaryReadKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(prk.ref.Append("connection_string"))
}

func (prk PrimaryReadKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(prk.ref.Append("id"))
}

func (prk PrimaryReadKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(prk.ref.Append("secret"))
}

type PrimaryWriteKeyAttributes struct {
	ref terra.Reference
}

func (pwk PrimaryWriteKeyAttributes) InternalRef() (terra.Reference, error) {
	return pwk.ref, nil
}

func (pwk PrimaryWriteKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryWriteKeyAttributes {
	return PrimaryWriteKeyAttributes{ref: ref}
}

func (pwk PrimaryWriteKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pwk.ref.InternalTokens()
}

func (pwk PrimaryWriteKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(pwk.ref.Append("connection_string"))
}

func (pwk PrimaryWriteKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pwk.ref.Append("id"))
}

func (pwk PrimaryWriteKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(pwk.ref.Append("secret"))
}

type SecondaryReadKeyAttributes struct {
	ref terra.Reference
}

func (srk SecondaryReadKeyAttributes) InternalRef() (terra.Reference, error) {
	return srk.ref, nil
}

func (srk SecondaryReadKeyAttributes) InternalWithRef(ref terra.Reference) SecondaryReadKeyAttributes {
	return SecondaryReadKeyAttributes{ref: ref}
}

func (srk SecondaryReadKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srk.ref.InternalTokens()
}

func (srk SecondaryReadKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(srk.ref.Append("connection_string"))
}

func (srk SecondaryReadKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(srk.ref.Append("id"))
}

func (srk SecondaryReadKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(srk.ref.Append("secret"))
}

type SecondaryWriteKeyAttributes struct {
	ref terra.Reference
}

func (swk SecondaryWriteKeyAttributes) InternalRef() (terra.Reference, error) {
	return swk.ref, nil
}

func (swk SecondaryWriteKeyAttributes) InternalWithRef(ref terra.Reference) SecondaryWriteKeyAttributes {
	return SecondaryWriteKeyAttributes{ref: ref}
}

func (swk SecondaryWriteKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return swk.ref.InternalTokens()
}

func (swk SecondaryWriteKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(swk.ref.Append("connection_string"))
}

func (swk SecondaryWriteKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(swk.ref.Append("id"))
}

func (swk SecondaryWriteKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(swk.ref.Append("secret"))
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) IdentityClientId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("identity_client_id"))
}

func (e EncryptionAttributes) KeyVaultKeyIdentifier() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key_vault_key_identifier"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type ReplicaAttributes struct {
	ref terra.Reference
}

func (r ReplicaAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicaAttributes) InternalWithRef(ref terra.Reference) ReplicaAttributes {
	return ReplicaAttributes{ref: ref}
}

func (r ReplicaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicaAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("endpoint"))
}

func (r ReplicaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r ReplicaAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ReplicaAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PrimaryReadKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type PrimaryWriteKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type SecondaryReadKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type SecondaryWriteKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type EncryptionState struct {
	IdentityClientId      string `json:"identity_client_id"`
	KeyVaultKeyIdentifier string `json:"key_vault_key_identifier"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type ReplicaState struct {
	Endpoint string `json:"endpoint"`
	Id       string `json:"id"`
	Location string `json:"location"`
	Name     string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
