// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitordatacollectionrule "github.com/golingon/terraproviders/azurerm/3.74.0/monitordatacollectionrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMonitorDataCollectionRule creates a new instance of [MonitorDataCollectionRule].
func NewMonitorDataCollectionRule(name string, args MonitorDataCollectionRuleArgs) *MonitorDataCollectionRule {
	return &MonitorDataCollectionRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorDataCollectionRule)(nil)

// MonitorDataCollectionRule represents the Terraform resource azurerm_monitor_data_collection_rule.
type MonitorDataCollectionRule struct {
	Name      string
	Args      MonitorDataCollectionRuleArgs
	state     *monitorDataCollectionRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) Type() string {
	return "azurerm_monitor_data_collection_rule"
}

// LocalName returns the local name for [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) LocalName() string {
	return mdcr.Name
}

// Configuration returns the configuration (args) for [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) Configuration() interface{} {
	return mdcr.Args
}

// DependOn is used for other resources to depend on [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mdcr)
}

// Dependencies returns the list of resources [MonitorDataCollectionRule] depends_on.
func (mdcr *MonitorDataCollectionRule) Dependencies() terra.Dependencies {
	return mdcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) LifecycleManagement() *terra.Lifecycle {
	return mdcr.Lifecycle
}

// Attributes returns the attributes for [MonitorDataCollectionRule].
func (mdcr *MonitorDataCollectionRule) Attributes() monitorDataCollectionRuleAttributes {
	return monitorDataCollectionRuleAttributes{ref: terra.ReferenceResource(mdcr)}
}

// ImportState imports the given attribute values into [MonitorDataCollectionRule]'s state.
func (mdcr *MonitorDataCollectionRule) ImportState(av io.Reader) error {
	mdcr.state = &monitorDataCollectionRuleState{}
	if err := json.NewDecoder(av).Decode(mdcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdcr.Type(), mdcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MonitorDataCollectionRule] has state.
func (mdcr *MonitorDataCollectionRule) State() (*monitorDataCollectionRuleState, bool) {
	return mdcr.state, mdcr.state != nil
}

// StateMust returns the state for [MonitorDataCollectionRule]. Panics if the state is nil.
func (mdcr *MonitorDataCollectionRule) StateMust() *monitorDataCollectionRuleState {
	if mdcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdcr.Type(), mdcr.LocalName()))
	}
	return mdcr.state
}

// MonitorDataCollectionRuleArgs contains the configurations for azurerm_monitor_data_collection_rule.
type MonitorDataCollectionRuleArgs struct {
	// DataCollectionEndpointId: string, optional
	DataCollectionEndpointId terra.StringValue `hcl:"data_collection_endpoint_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DataFlow: min=1
	DataFlow []monitordatacollectionrule.DataFlow `hcl:"data_flow,block" validate:"min=1"`
	// DataSources: optional
	DataSources *monitordatacollectionrule.DataSources `hcl:"data_sources,block"`
	// Destinations: required
	Destinations *monitordatacollectionrule.Destinations `hcl:"destinations,block" validate:"required"`
	// Identity: optional
	Identity *monitordatacollectionrule.Identity `hcl:"identity,block"`
	// StreamDeclaration: min=0
	StreamDeclaration []monitordatacollectionrule.StreamDeclaration `hcl:"stream_declaration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *monitordatacollectionrule.Timeouts `hcl:"timeouts,block"`
}
type monitorDataCollectionRuleAttributes struct {
	ref terra.Reference
}

// DataCollectionEndpointId returns a reference to field data_collection_endpoint_id of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) DataCollectionEndpointId() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("data_collection_endpoint_id"))
}

// Description returns a reference to field description of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("id"))
}

// ImmutableId returns a reference to field immutable_id of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) ImmutableId() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("immutable_id"))
}

// Kind returns a reference to field kind of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(mdcr.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_monitor_data_collection_rule.
func (mdcr monitorDataCollectionRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mdcr.ref.Append("tags"))
}

func (mdcr monitorDataCollectionRuleAttributes) DataFlow() terra.ListValue[monitordatacollectionrule.DataFlowAttributes] {
	return terra.ReferenceAsList[monitordatacollectionrule.DataFlowAttributes](mdcr.ref.Append("data_flow"))
}

func (mdcr monitorDataCollectionRuleAttributes) DataSources() terra.ListValue[monitordatacollectionrule.DataSourcesAttributes] {
	return terra.ReferenceAsList[monitordatacollectionrule.DataSourcesAttributes](mdcr.ref.Append("data_sources"))
}

func (mdcr monitorDataCollectionRuleAttributes) Destinations() terra.ListValue[monitordatacollectionrule.DestinationsAttributes] {
	return terra.ReferenceAsList[monitordatacollectionrule.DestinationsAttributes](mdcr.ref.Append("destinations"))
}

func (mdcr monitorDataCollectionRuleAttributes) Identity() terra.ListValue[monitordatacollectionrule.IdentityAttributes] {
	return terra.ReferenceAsList[monitordatacollectionrule.IdentityAttributes](mdcr.ref.Append("identity"))
}

func (mdcr monitorDataCollectionRuleAttributes) StreamDeclaration() terra.SetValue[monitordatacollectionrule.StreamDeclarationAttributes] {
	return terra.ReferenceAsSet[monitordatacollectionrule.StreamDeclarationAttributes](mdcr.ref.Append("stream_declaration"))
}

func (mdcr monitorDataCollectionRuleAttributes) Timeouts() monitordatacollectionrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[monitordatacollectionrule.TimeoutsAttributes](mdcr.ref.Append("timeouts"))
}

type monitorDataCollectionRuleState struct {
	DataCollectionEndpointId string                                             `json:"data_collection_endpoint_id"`
	Description              string                                             `json:"description"`
	Id                       string                                             `json:"id"`
	ImmutableId              string                                             `json:"immutable_id"`
	Kind                     string                                             `json:"kind"`
	Location                 string                                             `json:"location"`
	Name                     string                                             `json:"name"`
	ResourceGroupName        string                                             `json:"resource_group_name"`
	Tags                     map[string]string                                  `json:"tags"`
	DataFlow                 []monitordatacollectionrule.DataFlowState          `json:"data_flow"`
	DataSources              []monitordatacollectionrule.DataSourcesState       `json:"data_sources"`
	Destinations             []monitordatacollectionrule.DestinationsState      `json:"destinations"`
	Identity                 []monitordatacollectionrule.IdentityState          `json:"identity"`
	StreamDeclaration        []monitordatacollectionrule.StreamDeclarationState `json:"stream_declaration"`
	Timeouts                 *monitordatacollectionrule.TimeoutsState           `json:"timeouts"`
}
