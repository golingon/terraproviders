// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package mediatransform

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Output struct {
	// OnErrorAction: string, optional
	OnErrorAction terra.StringValue `hcl:"on_error_action,attr"`
	// RelativePriority: string, optional
	RelativePriority terra.StringValue `hcl:"relative_priority,attr"`
	// AudioAnalyzerPreset: optional
	AudioAnalyzerPreset *AudioAnalyzerPreset `hcl:"audio_analyzer_preset,block"`
	// BuiltinPreset: optional
	BuiltinPreset *BuiltinPreset `hcl:"builtin_preset,block"`
	// CustomPreset: optional
	CustomPreset *CustomPreset `hcl:"custom_preset,block"`
	// FaceDetectorPreset: optional
	FaceDetectorPreset *FaceDetectorPreset `hcl:"face_detector_preset,block"`
	// VideoAnalyzerPreset: optional
	VideoAnalyzerPreset *VideoAnalyzerPreset `hcl:"video_analyzer_preset,block"`
}

type AudioAnalyzerPreset struct {
	// AudioAnalysisMode: string, optional
	AudioAnalysisMode terra.StringValue `hcl:"audio_analysis_mode,attr"`
	// AudioLanguage: string, optional
	AudioLanguage terra.StringValue `hcl:"audio_language,attr"`
	// ExperimentalOptions: map of string, optional
	ExperimentalOptions terra.MapValue[terra.StringValue] `hcl:"experimental_options,attr"`
}

type BuiltinPreset struct {
	// PresetName: string, required
	PresetName terra.StringValue `hcl:"preset_name,attr" validate:"required"`
	// PresetConfiguration: optional
	PresetConfiguration *PresetConfiguration `hcl:"preset_configuration,block"`
}

type PresetConfiguration struct {
	// Complexity: string, optional
	Complexity terra.StringValue `hcl:"complexity,attr"`
	// InterleaveOutput: string, optional
	InterleaveOutput terra.StringValue `hcl:"interleave_output,attr"`
	// KeyFrameIntervalInSeconds: number, optional
	KeyFrameIntervalInSeconds terra.NumberValue `hcl:"key_frame_interval_in_seconds,attr"`
	// MaxBitrateBps: number, optional
	MaxBitrateBps terra.NumberValue `hcl:"max_bitrate_bps,attr"`
	// MaxHeight: number, optional
	MaxHeight terra.NumberValue `hcl:"max_height,attr"`
	// MaxLayers: number, optional
	MaxLayers terra.NumberValue `hcl:"max_layers,attr"`
	// MinBitrateBps: number, optional
	MinBitrateBps terra.NumberValue `hcl:"min_bitrate_bps,attr"`
	// MinHeight: number, optional
	MinHeight terra.NumberValue `hcl:"min_height,attr"`
}

type CustomPreset struct {
	// Codec: min=1
	Codec []Codec `hcl:"codec,block" validate:"min=1"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// Format: min=1
	Format []Format `hcl:"format,block" validate:"min=1"`
}

type Codec struct {
	// AacAudio: optional
	AacAudio *AacAudio `hcl:"aac_audio,block"`
	// CopyAudio: optional
	CopyAudio *CopyAudio `hcl:"copy_audio,block"`
	// CopyVideo: optional
	CopyVideo *CopyVideo `hcl:"copy_video,block"`
	// DdAudio: optional
	DdAudio *DdAudio `hcl:"dd_audio,block"`
	// H264Video: optional
	H264Video *H264Video `hcl:"h264_video,block"`
	// H265Video: optional
	H265Video *H265Video `hcl:"h265_video,block"`
}

type AacAudio struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// Channels: number, optional
	Channels terra.NumberValue `hcl:"channels,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// SamplingRate: number, optional
	SamplingRate terra.NumberValue `hcl:"sampling_rate,attr"`
}

type CopyAudio struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
}

type CopyVideo struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
}

type DdAudio struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// Channels: number, optional
	Channels terra.NumberValue `hcl:"channels,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// SamplingRate: number, optional
	SamplingRate terra.NumberValue `hcl:"sampling_rate,attr"`
}

type H264Video struct {
	// Complexity: string, optional
	Complexity terra.StringValue `hcl:"complexity,attr"`
	// KeyFrameInterval: string, optional
	KeyFrameInterval terra.StringValue `hcl:"key_frame_interval,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// RateControlMode: string, optional
	RateControlMode terra.StringValue `hcl:"rate_control_mode,attr"`
	// SceneChangeDetectionEnabled: bool, optional
	SceneChangeDetectionEnabled terra.BoolValue `hcl:"scene_change_detection_enabled,attr"`
	// StretchMode: string, optional
	StretchMode terra.StringValue `hcl:"stretch_mode,attr"`
	// SyncMode: string, optional
	SyncMode terra.StringValue `hcl:"sync_mode,attr"`
	// H264VideoLayer: min=0
	Layer []H264VideoLayer `hcl:"layer,block" validate:"min=0"`
}

type H264VideoLayer struct {
	// AdaptiveBFrameEnabled: bool, optional
	AdaptiveBFrameEnabled terra.BoolValue `hcl:"adaptive_b_frame_enabled,attr"`
	// BFrames: number, optional
	BFrames terra.NumberValue `hcl:"b_frames,attr"`
	// Bitrate: number, required
	Bitrate terra.NumberValue `hcl:"bitrate,attr" validate:"required"`
	// BufferWindow: string, optional
	BufferWindow terra.StringValue `hcl:"buffer_window,attr"`
	// Crf: number, optional
	Crf terra.NumberValue `hcl:"crf,attr"`
	// EntropyMode: string, optional
	EntropyMode terra.StringValue `hcl:"entropy_mode,attr"`
	// FrameRate: string, optional
	FrameRate terra.StringValue `hcl:"frame_rate,attr"`
	// Height: string, optional
	Height terra.StringValue `hcl:"height,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// MaxBitrate: number, optional
	MaxBitrate terra.NumberValue `hcl:"max_bitrate,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// ReferenceFrames: number, optional
	ReferenceFrames terra.NumberValue `hcl:"reference_frames,attr"`
	// Slices: number, optional
	Slices terra.NumberValue `hcl:"slices,attr"`
	// Width: string, optional
	Width terra.StringValue `hcl:"width,attr"`
}

type H265Video struct {
	// Complexity: string, optional
	Complexity terra.StringValue `hcl:"complexity,attr"`
	// KeyFrameInterval: string, optional
	KeyFrameInterval terra.StringValue `hcl:"key_frame_interval,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// SceneChangeDetectionEnabled: bool, optional
	SceneChangeDetectionEnabled terra.BoolValue `hcl:"scene_change_detection_enabled,attr"`
	// StretchMode: string, optional
	StretchMode terra.StringValue `hcl:"stretch_mode,attr"`
	// SyncMode: string, optional
	SyncMode terra.StringValue `hcl:"sync_mode,attr"`
	// H265VideoLayer: min=0
	Layer []H265VideoLayer `hcl:"layer,block" validate:"min=0"`
}

type H265VideoLayer struct {
	// AdaptiveBFrameEnabled: bool, optional
	AdaptiveBFrameEnabled terra.BoolValue `hcl:"adaptive_b_frame_enabled,attr"`
	// BFrames: number, optional
	BFrames terra.NumberValue `hcl:"b_frames,attr"`
	// Bitrate: number, required
	Bitrate terra.NumberValue `hcl:"bitrate,attr" validate:"required"`
	// BufferWindow: string, optional
	BufferWindow terra.StringValue `hcl:"buffer_window,attr"`
	// Crf: number, optional
	Crf terra.NumberValue `hcl:"crf,attr"`
	// FrameRate: string, optional
	FrameRate terra.StringValue `hcl:"frame_rate,attr"`
	// Height: string, optional
	Height terra.StringValue `hcl:"height,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// MaxBitrate: number, optional
	MaxBitrate terra.NumberValue `hcl:"max_bitrate,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// ReferenceFrames: number, optional
	ReferenceFrames terra.NumberValue `hcl:"reference_frames,attr"`
	// Slices: number, optional
	Slices terra.NumberValue `hcl:"slices,attr"`
	// Width: string, optional
	Width terra.StringValue `hcl:"width,attr"`
}

type Filter struct {
	// Rotation: string, optional
	Rotation terra.StringValue `hcl:"rotation,attr"`
	// FilterCropRectangle: optional
	CropRectangle *FilterCropRectangle `hcl:"crop_rectangle,block"`
	// Deinterlace: optional
	Deinterlace *Deinterlace `hcl:"deinterlace,block"`
	// FadeIn: optional
	FadeIn *FadeIn `hcl:"fade_in,block"`
	// FadeOut: optional
	FadeOut *FadeOut `hcl:"fade_out,block"`
	// Overlay: min=0
	Overlay []Overlay `hcl:"overlay,block" validate:"min=0"`
}

type FilterCropRectangle struct {
	// Height: string, optional
	Height terra.StringValue `hcl:"height,attr"`
	// Left: string, optional
	Left terra.StringValue `hcl:"left,attr"`
	// Top: string, optional
	Top terra.StringValue `hcl:"top,attr"`
	// Width: string, optional
	Width terra.StringValue `hcl:"width,attr"`
}

type Deinterlace struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Parity: string, optional
	Parity terra.StringValue `hcl:"parity,attr"`
}

type FadeIn struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// FadeColor: string, required
	FadeColor terra.StringValue `hcl:"fade_color,attr" validate:"required"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
}

type FadeOut struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// FadeColor: string, required
	FadeColor terra.StringValue `hcl:"fade_color,attr" validate:"required"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
}

type Overlay struct {
	// Audio: optional
	Audio *Audio `hcl:"audio,block"`
	// Video: optional
	Video *Video `hcl:"video,block"`
}

type Audio struct {
	// AudioGainLevel: number, optional
	AudioGainLevel terra.NumberValue `hcl:"audio_gain_level,attr"`
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// FadeInDuration: string, optional
	FadeInDuration terra.StringValue `hcl:"fade_in_duration,attr"`
	// FadeOutDuration: string, optional
	FadeOutDuration terra.StringValue `hcl:"fade_out_duration,attr"`
	// InputLabel: string, required
	InputLabel terra.StringValue `hcl:"input_label,attr" validate:"required"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
}

type Video struct {
	// AudioGainLevel: number, optional
	AudioGainLevel terra.NumberValue `hcl:"audio_gain_level,attr"`
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// FadeInDuration: string, optional
	FadeInDuration terra.StringValue `hcl:"fade_in_duration,attr"`
	// FadeOutDuration: string, optional
	FadeOutDuration terra.StringValue `hcl:"fade_out_duration,attr"`
	// InputLabel: string, required
	InputLabel terra.StringValue `hcl:"input_label,attr" validate:"required"`
	// Opacity: number, optional
	Opacity terra.NumberValue `hcl:"opacity,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// VideoCropRectangle: optional
	CropRectangle *VideoCropRectangle `hcl:"crop_rectangle,block"`
	// Position: optional
	Position *Position `hcl:"position,block"`
}

type VideoCropRectangle struct {
	// Height: string, optional
	Height terra.StringValue `hcl:"height,attr"`
	// Left: string, optional
	Left terra.StringValue `hcl:"left,attr"`
	// Top: string, optional
	Top terra.StringValue `hcl:"top,attr"`
	// Width: string, optional
	Width terra.StringValue `hcl:"width,attr"`
}

type Position struct {
	// Height: string, optional
	Height terra.StringValue `hcl:"height,attr"`
	// Left: string, optional
	Left terra.StringValue `hcl:"left,attr"`
	// Top: string, optional
	Top terra.StringValue `hcl:"top,attr"`
	// Width: string, optional
	Width terra.StringValue `hcl:"width,attr"`
}

type Format struct {
	// Mp4: optional
	Mp4 *Mp4 `hcl:"mp4,block"`
	// TransportStream: optional
	TransportStream *TransportStream `hcl:"transport_stream,block"`
}

type Mp4 struct {
	// FilenamePattern: string, required
	FilenamePattern terra.StringValue `hcl:"filename_pattern,attr" validate:"required"`
	// Mp4OutputFile: min=0
	OutputFile []Mp4OutputFile `hcl:"output_file,block" validate:"min=0"`
}

type Mp4OutputFile struct {
	// Labels: list of string, required
	Labels terra.ListValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type TransportStream struct {
	// FilenamePattern: string, required
	FilenamePattern terra.StringValue `hcl:"filename_pattern,attr" validate:"required"`
	// TransportStreamOutputFile: min=0
	OutputFile []TransportStreamOutputFile `hcl:"output_file,block" validate:"min=0"`
}

type TransportStreamOutputFile struct {
	// Labels: list of string, required
	Labels terra.ListValue[terra.StringValue] `hcl:"labels,attr" validate:"required"`
}

type FaceDetectorPreset struct {
	// AnalysisResolution: string, optional
	AnalysisResolution terra.StringValue `hcl:"analysis_resolution,attr"`
	// BlurType: string, optional
	BlurType terra.StringValue `hcl:"blur_type,attr"`
	// ExperimentalOptions: map of string, optional
	ExperimentalOptions terra.MapValue[terra.StringValue] `hcl:"experimental_options,attr"`
	// FaceRedactorMode: string, optional
	FaceRedactorMode terra.StringValue `hcl:"face_redactor_mode,attr"`
}

type VideoAnalyzerPreset struct {
	// AudioAnalysisMode: string, optional
	AudioAnalysisMode terra.StringValue `hcl:"audio_analysis_mode,attr"`
	// AudioLanguage: string, optional
	AudioLanguage terra.StringValue `hcl:"audio_language,attr"`
	// ExperimentalOptions: map of string, optional
	ExperimentalOptions terra.MapValue[terra.StringValue] `hcl:"experimental_options,attr"`
	// InsightsType: string, optional
	InsightsType terra.StringValue `hcl:"insights_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type OutputAttributes struct {
	ref terra.Reference
}

func (o OutputAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OutputAttributes) InternalWithRef(ref terra.Reference) OutputAttributes {
	return OutputAttributes{ref: ref}
}

func (o OutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OutputAttributes) OnErrorAction() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("on_error_action"))
}

func (o OutputAttributes) RelativePriority() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("relative_priority"))
}

func (o OutputAttributes) AudioAnalyzerPreset() terra.ListValue[AudioAnalyzerPresetAttributes] {
	return terra.ReferenceAsList[AudioAnalyzerPresetAttributes](o.ref.Append("audio_analyzer_preset"))
}

func (o OutputAttributes) BuiltinPreset() terra.ListValue[BuiltinPresetAttributes] {
	return terra.ReferenceAsList[BuiltinPresetAttributes](o.ref.Append("builtin_preset"))
}

func (o OutputAttributes) CustomPreset() terra.ListValue[CustomPresetAttributes] {
	return terra.ReferenceAsList[CustomPresetAttributes](o.ref.Append("custom_preset"))
}

func (o OutputAttributes) FaceDetectorPreset() terra.ListValue[FaceDetectorPresetAttributes] {
	return terra.ReferenceAsList[FaceDetectorPresetAttributes](o.ref.Append("face_detector_preset"))
}

func (o OutputAttributes) VideoAnalyzerPreset() terra.ListValue[VideoAnalyzerPresetAttributes] {
	return terra.ReferenceAsList[VideoAnalyzerPresetAttributes](o.ref.Append("video_analyzer_preset"))
}

type AudioAnalyzerPresetAttributes struct {
	ref terra.Reference
}

func (aap AudioAnalyzerPresetAttributes) InternalRef() (terra.Reference, error) {
	return aap.ref, nil
}

func (aap AudioAnalyzerPresetAttributes) InternalWithRef(ref terra.Reference) AudioAnalyzerPresetAttributes {
	return AudioAnalyzerPresetAttributes{ref: ref}
}

func (aap AudioAnalyzerPresetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aap.ref.InternalTokens()
}

func (aap AudioAnalyzerPresetAttributes) AudioAnalysisMode() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("audio_analysis_mode"))
}

func (aap AudioAnalyzerPresetAttributes) AudioLanguage() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("audio_language"))
}

func (aap AudioAnalyzerPresetAttributes) ExperimentalOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aap.ref.Append("experimental_options"))
}

type BuiltinPresetAttributes struct {
	ref terra.Reference
}

func (bp BuiltinPresetAttributes) InternalRef() (terra.Reference, error) {
	return bp.ref, nil
}

func (bp BuiltinPresetAttributes) InternalWithRef(ref terra.Reference) BuiltinPresetAttributes {
	return BuiltinPresetAttributes{ref: ref}
}

func (bp BuiltinPresetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bp.ref.InternalTokens()
}

func (bp BuiltinPresetAttributes) PresetName() terra.StringValue {
	return terra.ReferenceAsString(bp.ref.Append("preset_name"))
}

func (bp BuiltinPresetAttributes) PresetConfiguration() terra.ListValue[PresetConfigurationAttributes] {
	return terra.ReferenceAsList[PresetConfigurationAttributes](bp.ref.Append("preset_configuration"))
}

type PresetConfigurationAttributes struct {
	ref terra.Reference
}

func (pc PresetConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PresetConfigurationAttributes) InternalWithRef(ref terra.Reference) PresetConfigurationAttributes {
	return PresetConfigurationAttributes{ref: ref}
}

func (pc PresetConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PresetConfigurationAttributes) Complexity() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("complexity"))
}

func (pc PresetConfigurationAttributes) InterleaveOutput() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("interleave_output"))
}

func (pc PresetConfigurationAttributes) KeyFrameIntervalInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("key_frame_interval_in_seconds"))
}

func (pc PresetConfigurationAttributes) MaxBitrateBps() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("max_bitrate_bps"))
}

func (pc PresetConfigurationAttributes) MaxHeight() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("max_height"))
}

func (pc PresetConfigurationAttributes) MaxLayers() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("max_layers"))
}

func (pc PresetConfigurationAttributes) MinBitrateBps() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("min_bitrate_bps"))
}

func (pc PresetConfigurationAttributes) MinHeight() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("min_height"))
}

type CustomPresetAttributes struct {
	ref terra.Reference
}

func (cp CustomPresetAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CustomPresetAttributes) InternalWithRef(ref terra.Reference) CustomPresetAttributes {
	return CustomPresetAttributes{ref: ref}
}

func (cp CustomPresetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CustomPresetAttributes) Codec() terra.ListValue[CodecAttributes] {
	return terra.ReferenceAsList[CodecAttributes](cp.ref.Append("codec"))
}

func (cp CustomPresetAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](cp.ref.Append("filter"))
}

func (cp CustomPresetAttributes) Format() terra.ListValue[FormatAttributes] {
	return terra.ReferenceAsList[FormatAttributes](cp.ref.Append("format"))
}

type CodecAttributes struct {
	ref terra.Reference
}

func (c CodecAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CodecAttributes) InternalWithRef(ref terra.Reference) CodecAttributes {
	return CodecAttributes{ref: ref}
}

func (c CodecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CodecAttributes) AacAudio() terra.ListValue[AacAudioAttributes] {
	return terra.ReferenceAsList[AacAudioAttributes](c.ref.Append("aac_audio"))
}

func (c CodecAttributes) CopyAudio() terra.ListValue[CopyAudioAttributes] {
	return terra.ReferenceAsList[CopyAudioAttributes](c.ref.Append("copy_audio"))
}

func (c CodecAttributes) CopyVideo() terra.ListValue[CopyVideoAttributes] {
	return terra.ReferenceAsList[CopyVideoAttributes](c.ref.Append("copy_video"))
}

func (c CodecAttributes) DdAudio() terra.ListValue[DdAudioAttributes] {
	return terra.ReferenceAsList[DdAudioAttributes](c.ref.Append("dd_audio"))
}

func (c CodecAttributes) H264Video() terra.ListValue[H264VideoAttributes] {
	return terra.ReferenceAsList[H264VideoAttributes](c.ref.Append("h264_video"))
}

func (c CodecAttributes) H265Video() terra.ListValue[H265VideoAttributes] {
	return terra.ReferenceAsList[H265VideoAttributes](c.ref.Append("h265_video"))
}

type AacAudioAttributes struct {
	ref terra.Reference
}

func (aa AacAudioAttributes) InternalRef() (terra.Reference, error) {
	return aa.ref, nil
}

func (aa AacAudioAttributes) InternalWithRef(ref terra.Reference) AacAudioAttributes {
	return AacAudioAttributes{ref: ref}
}

func (aa AacAudioAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aa.ref.InternalTokens()
}

func (aa AacAudioAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(aa.ref.Append("bitrate"))
}

func (aa AacAudioAttributes) Channels() terra.NumberValue {
	return terra.ReferenceAsNumber(aa.ref.Append("channels"))
}

func (aa AacAudioAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("label"))
}

func (aa AacAudioAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("profile"))
}

func (aa AacAudioAttributes) SamplingRate() terra.NumberValue {
	return terra.ReferenceAsNumber(aa.ref.Append("sampling_rate"))
}

type CopyAudioAttributes struct {
	ref terra.Reference
}

func (ca CopyAudioAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CopyAudioAttributes) InternalWithRef(ref terra.Reference) CopyAudioAttributes {
	return CopyAudioAttributes{ref: ref}
}

func (ca CopyAudioAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CopyAudioAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("label"))
}

type CopyVideoAttributes struct {
	ref terra.Reference
}

func (cv CopyVideoAttributes) InternalRef() (terra.Reference, error) {
	return cv.ref, nil
}

func (cv CopyVideoAttributes) InternalWithRef(ref terra.Reference) CopyVideoAttributes {
	return CopyVideoAttributes{ref: ref}
}

func (cv CopyVideoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cv.ref.InternalTokens()
}

func (cv CopyVideoAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(cv.ref.Append("label"))
}

type DdAudioAttributes struct {
	ref terra.Reference
}

func (da DdAudioAttributes) InternalRef() (terra.Reference, error) {
	return da.ref, nil
}

func (da DdAudioAttributes) InternalWithRef(ref terra.Reference) DdAudioAttributes {
	return DdAudioAttributes{ref: ref}
}

func (da DdAudioAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return da.ref.InternalTokens()
}

func (da DdAudioAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(da.ref.Append("bitrate"))
}

func (da DdAudioAttributes) Channels() terra.NumberValue {
	return terra.ReferenceAsNumber(da.ref.Append("channels"))
}

func (da DdAudioAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(da.ref.Append("label"))
}

func (da DdAudioAttributes) SamplingRate() terra.NumberValue {
	return terra.ReferenceAsNumber(da.ref.Append("sampling_rate"))
}

type H264VideoAttributes struct {
	ref terra.Reference
}

func (hv H264VideoAttributes) InternalRef() (terra.Reference, error) {
	return hv.ref, nil
}

func (hv H264VideoAttributes) InternalWithRef(ref terra.Reference) H264VideoAttributes {
	return H264VideoAttributes{ref: ref}
}

func (hv H264VideoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hv.ref.InternalTokens()
}

func (hv H264VideoAttributes) Complexity() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("complexity"))
}

func (hv H264VideoAttributes) KeyFrameInterval() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("key_frame_interval"))
}

func (hv H264VideoAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("label"))
}

func (hv H264VideoAttributes) RateControlMode() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("rate_control_mode"))
}

func (hv H264VideoAttributes) SceneChangeDetectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(hv.ref.Append("scene_change_detection_enabled"))
}

func (hv H264VideoAttributes) StretchMode() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("stretch_mode"))
}

func (hv H264VideoAttributes) SyncMode() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("sync_mode"))
}

func (hv H264VideoAttributes) Layer() terra.ListValue[H264VideoLayerAttributes] {
	return terra.ReferenceAsList[H264VideoLayerAttributes](hv.ref.Append("layer"))
}

type H264VideoLayerAttributes struct {
	ref terra.Reference
}

func (l H264VideoLayerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l H264VideoLayerAttributes) InternalWithRef(ref terra.Reference) H264VideoLayerAttributes {
	return H264VideoLayerAttributes{ref: ref}
}

func (l H264VideoLayerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l H264VideoLayerAttributes) AdaptiveBFrameEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("adaptive_b_frame_enabled"))
}

func (l H264VideoLayerAttributes) BFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("b_frames"))
}

func (l H264VideoLayerAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("bitrate"))
}

func (l H264VideoLayerAttributes) BufferWindow() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("buffer_window"))
}

func (l H264VideoLayerAttributes) Crf() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("crf"))
}

func (l H264VideoLayerAttributes) EntropyMode() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("entropy_mode"))
}

func (l H264VideoLayerAttributes) FrameRate() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("frame_rate"))
}

func (l H264VideoLayerAttributes) Height() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("height"))
}

func (l H264VideoLayerAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("label"))
}

func (l H264VideoLayerAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("level"))
}

func (l H264VideoLayerAttributes) MaxBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_bitrate"))
}

func (l H264VideoLayerAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("profile"))
}

func (l H264VideoLayerAttributes) ReferenceFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("reference_frames"))
}

func (l H264VideoLayerAttributes) Slices() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("slices"))
}

func (l H264VideoLayerAttributes) Width() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("width"))
}

type H265VideoAttributes struct {
	ref terra.Reference
}

func (hv H265VideoAttributes) InternalRef() (terra.Reference, error) {
	return hv.ref, nil
}

func (hv H265VideoAttributes) InternalWithRef(ref terra.Reference) H265VideoAttributes {
	return H265VideoAttributes{ref: ref}
}

func (hv H265VideoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hv.ref.InternalTokens()
}

func (hv H265VideoAttributes) Complexity() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("complexity"))
}

func (hv H265VideoAttributes) KeyFrameInterval() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("key_frame_interval"))
}

func (hv H265VideoAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("label"))
}

func (hv H265VideoAttributes) SceneChangeDetectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(hv.ref.Append("scene_change_detection_enabled"))
}

func (hv H265VideoAttributes) StretchMode() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("stretch_mode"))
}

func (hv H265VideoAttributes) SyncMode() terra.StringValue {
	return terra.ReferenceAsString(hv.ref.Append("sync_mode"))
}

func (hv H265VideoAttributes) Layer() terra.ListValue[H265VideoLayerAttributes] {
	return terra.ReferenceAsList[H265VideoLayerAttributes](hv.ref.Append("layer"))
}

type H265VideoLayerAttributes struct {
	ref terra.Reference
}

func (l H265VideoLayerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l H265VideoLayerAttributes) InternalWithRef(ref terra.Reference) H265VideoLayerAttributes {
	return H265VideoLayerAttributes{ref: ref}
}

func (l H265VideoLayerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l H265VideoLayerAttributes) AdaptiveBFrameEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("adaptive_b_frame_enabled"))
}

func (l H265VideoLayerAttributes) BFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("b_frames"))
}

func (l H265VideoLayerAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("bitrate"))
}

func (l H265VideoLayerAttributes) BufferWindow() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("buffer_window"))
}

func (l H265VideoLayerAttributes) Crf() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("crf"))
}

func (l H265VideoLayerAttributes) FrameRate() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("frame_rate"))
}

func (l H265VideoLayerAttributes) Height() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("height"))
}

func (l H265VideoLayerAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("label"))
}

func (l H265VideoLayerAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("level"))
}

func (l H265VideoLayerAttributes) MaxBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_bitrate"))
}

func (l H265VideoLayerAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("profile"))
}

func (l H265VideoLayerAttributes) ReferenceFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("reference_frames"))
}

func (l H265VideoLayerAttributes) Slices() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("slices"))
}

func (l H265VideoLayerAttributes) Width() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("width"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Rotation() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("rotation"))
}

func (f FilterAttributes) CropRectangle() terra.ListValue[FilterCropRectangleAttributes] {
	return terra.ReferenceAsList[FilterCropRectangleAttributes](f.ref.Append("crop_rectangle"))
}

func (f FilterAttributes) Deinterlace() terra.ListValue[DeinterlaceAttributes] {
	return terra.ReferenceAsList[DeinterlaceAttributes](f.ref.Append("deinterlace"))
}

func (f FilterAttributes) FadeIn() terra.ListValue[FadeInAttributes] {
	return terra.ReferenceAsList[FadeInAttributes](f.ref.Append("fade_in"))
}

func (f FilterAttributes) FadeOut() terra.ListValue[FadeOutAttributes] {
	return terra.ReferenceAsList[FadeOutAttributes](f.ref.Append("fade_out"))
}

func (f FilterAttributes) Overlay() terra.ListValue[OverlayAttributes] {
	return terra.ReferenceAsList[OverlayAttributes](f.ref.Append("overlay"))
}

type FilterCropRectangleAttributes struct {
	ref terra.Reference
}

func (cr FilterCropRectangleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr FilterCropRectangleAttributes) InternalWithRef(ref terra.Reference) FilterCropRectangleAttributes {
	return FilterCropRectangleAttributes{ref: ref}
}

func (cr FilterCropRectangleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr FilterCropRectangleAttributes) Height() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("height"))
}

func (cr FilterCropRectangleAttributes) Left() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("left"))
}

func (cr FilterCropRectangleAttributes) Top() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("top"))
}

func (cr FilterCropRectangleAttributes) Width() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("width"))
}

type DeinterlaceAttributes struct {
	ref terra.Reference
}

func (d DeinterlaceAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DeinterlaceAttributes) InternalWithRef(ref terra.Reference) DeinterlaceAttributes {
	return DeinterlaceAttributes{ref: ref}
}

func (d DeinterlaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DeinterlaceAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("mode"))
}

func (d DeinterlaceAttributes) Parity() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("parity"))
}

type FadeInAttributes struct {
	ref terra.Reference
}

func (fi FadeInAttributes) InternalRef() (terra.Reference, error) {
	return fi.ref, nil
}

func (fi FadeInAttributes) InternalWithRef(ref terra.Reference) FadeInAttributes {
	return FadeInAttributes{ref: ref}
}

func (fi FadeInAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fi.ref.InternalTokens()
}

func (fi FadeInAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("duration"))
}

func (fi FadeInAttributes) FadeColor() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("fade_color"))
}

func (fi FadeInAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(fi.ref.Append("start"))
}

type FadeOutAttributes struct {
	ref terra.Reference
}

func (fo FadeOutAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo FadeOutAttributes) InternalWithRef(ref terra.Reference) FadeOutAttributes {
	return FadeOutAttributes{ref: ref}
}

func (fo FadeOutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo FadeOutAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("duration"))
}

func (fo FadeOutAttributes) FadeColor() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("fade_color"))
}

func (fo FadeOutAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("start"))
}

type OverlayAttributes struct {
	ref terra.Reference
}

func (o OverlayAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OverlayAttributes) InternalWithRef(ref terra.Reference) OverlayAttributes {
	return OverlayAttributes{ref: ref}
}

func (o OverlayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OverlayAttributes) Audio() terra.ListValue[AudioAttributes] {
	return terra.ReferenceAsList[AudioAttributes](o.ref.Append("audio"))
}

func (o OverlayAttributes) Video() terra.ListValue[VideoAttributes] {
	return terra.ReferenceAsList[VideoAttributes](o.ref.Append("video"))
}

type AudioAttributes struct {
	ref terra.Reference
}

func (a AudioAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AudioAttributes) InternalWithRef(ref terra.Reference) AudioAttributes {
	return AudioAttributes{ref: ref}
}

func (a AudioAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AudioAttributes) AudioGainLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("audio_gain_level"))
}

func (a AudioAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("end"))
}

func (a AudioAttributes) FadeInDuration() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("fade_in_duration"))
}

func (a AudioAttributes) FadeOutDuration() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("fade_out_duration"))
}

func (a AudioAttributes) InputLabel() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("input_label"))
}

func (a AudioAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("start"))
}

type VideoAttributes struct {
	ref terra.Reference
}

func (v VideoAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VideoAttributes) InternalWithRef(ref terra.Reference) VideoAttributes {
	return VideoAttributes{ref: ref}
}

func (v VideoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VideoAttributes) AudioGainLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(v.ref.Append("audio_gain_level"))
}

func (v VideoAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("end"))
}

func (v VideoAttributes) FadeInDuration() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("fade_in_duration"))
}

func (v VideoAttributes) FadeOutDuration() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("fade_out_duration"))
}

func (v VideoAttributes) InputLabel() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("input_label"))
}

func (v VideoAttributes) Opacity() terra.NumberValue {
	return terra.ReferenceAsNumber(v.ref.Append("opacity"))
}

func (v VideoAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("start"))
}

func (v VideoAttributes) CropRectangle() terra.ListValue[VideoCropRectangleAttributes] {
	return terra.ReferenceAsList[VideoCropRectangleAttributes](v.ref.Append("crop_rectangle"))
}

func (v VideoAttributes) Position() terra.ListValue[PositionAttributes] {
	return terra.ReferenceAsList[PositionAttributes](v.ref.Append("position"))
}

type VideoCropRectangleAttributes struct {
	ref terra.Reference
}

func (cr VideoCropRectangleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr VideoCropRectangleAttributes) InternalWithRef(ref terra.Reference) VideoCropRectangleAttributes {
	return VideoCropRectangleAttributes{ref: ref}
}

func (cr VideoCropRectangleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr VideoCropRectangleAttributes) Height() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("height"))
}

func (cr VideoCropRectangleAttributes) Left() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("left"))
}

func (cr VideoCropRectangleAttributes) Top() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("top"))
}

func (cr VideoCropRectangleAttributes) Width() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("width"))
}

type PositionAttributes struct {
	ref terra.Reference
}

func (p PositionAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PositionAttributes) InternalWithRef(ref terra.Reference) PositionAttributes {
	return PositionAttributes{ref: ref}
}

func (p PositionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PositionAttributes) Height() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("height"))
}

func (p PositionAttributes) Left() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("left"))
}

func (p PositionAttributes) Top() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("top"))
}

func (p PositionAttributes) Width() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("width"))
}

type FormatAttributes struct {
	ref terra.Reference
}

func (f FormatAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FormatAttributes) InternalWithRef(ref terra.Reference) FormatAttributes {
	return FormatAttributes{ref: ref}
}

func (f FormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FormatAttributes) Mp4() terra.ListValue[Mp4Attributes] {
	return terra.ReferenceAsList[Mp4Attributes](f.ref.Append("mp4"))
}

func (f FormatAttributes) TransportStream() terra.ListValue[TransportStreamAttributes] {
	return terra.ReferenceAsList[TransportStreamAttributes](f.ref.Append("transport_stream"))
}

type Mp4Attributes struct {
	ref terra.Reference
}

func (m Mp4Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m Mp4Attributes) InternalWithRef(ref terra.Reference) Mp4Attributes {
	return Mp4Attributes{ref: ref}
}

func (m Mp4Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m Mp4Attributes) FilenamePattern() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("filename_pattern"))
}

func (m Mp4Attributes) OutputFile() terra.ListValue[Mp4OutputFileAttributes] {
	return terra.ReferenceAsList[Mp4OutputFileAttributes](m.ref.Append("output_file"))
}

type Mp4OutputFileAttributes struct {
	ref terra.Reference
}

func (of Mp4OutputFileAttributes) InternalRef() (terra.Reference, error) {
	return of.ref, nil
}

func (of Mp4OutputFileAttributes) InternalWithRef(ref terra.Reference) Mp4OutputFileAttributes {
	return Mp4OutputFileAttributes{ref: ref}
}

func (of Mp4OutputFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return of.ref.InternalTokens()
}

func (of Mp4OutputFileAttributes) Labels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](of.ref.Append("labels"))
}

type TransportStreamAttributes struct {
	ref terra.Reference
}

func (ts TransportStreamAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TransportStreamAttributes) InternalWithRef(ref terra.Reference) TransportStreamAttributes {
	return TransportStreamAttributes{ref: ref}
}

func (ts TransportStreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TransportStreamAttributes) FilenamePattern() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("filename_pattern"))
}

func (ts TransportStreamAttributes) OutputFile() terra.ListValue[TransportStreamOutputFileAttributes] {
	return terra.ReferenceAsList[TransportStreamOutputFileAttributes](ts.ref.Append("output_file"))
}

type TransportStreamOutputFileAttributes struct {
	ref terra.Reference
}

func (of TransportStreamOutputFileAttributes) InternalRef() (terra.Reference, error) {
	return of.ref, nil
}

func (of TransportStreamOutputFileAttributes) InternalWithRef(ref terra.Reference) TransportStreamOutputFileAttributes {
	return TransportStreamOutputFileAttributes{ref: ref}
}

func (of TransportStreamOutputFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return of.ref.InternalTokens()
}

func (of TransportStreamOutputFileAttributes) Labels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](of.ref.Append("labels"))
}

type FaceDetectorPresetAttributes struct {
	ref terra.Reference
}

func (fdp FaceDetectorPresetAttributes) InternalRef() (terra.Reference, error) {
	return fdp.ref, nil
}

func (fdp FaceDetectorPresetAttributes) InternalWithRef(ref terra.Reference) FaceDetectorPresetAttributes {
	return FaceDetectorPresetAttributes{ref: ref}
}

func (fdp FaceDetectorPresetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fdp.ref.InternalTokens()
}

func (fdp FaceDetectorPresetAttributes) AnalysisResolution() terra.StringValue {
	return terra.ReferenceAsString(fdp.ref.Append("analysis_resolution"))
}

func (fdp FaceDetectorPresetAttributes) BlurType() terra.StringValue {
	return terra.ReferenceAsString(fdp.ref.Append("blur_type"))
}

func (fdp FaceDetectorPresetAttributes) ExperimentalOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fdp.ref.Append("experimental_options"))
}

func (fdp FaceDetectorPresetAttributes) FaceRedactorMode() terra.StringValue {
	return terra.ReferenceAsString(fdp.ref.Append("face_redactor_mode"))
}

type VideoAnalyzerPresetAttributes struct {
	ref terra.Reference
}

func (vap VideoAnalyzerPresetAttributes) InternalRef() (terra.Reference, error) {
	return vap.ref, nil
}

func (vap VideoAnalyzerPresetAttributes) InternalWithRef(ref terra.Reference) VideoAnalyzerPresetAttributes {
	return VideoAnalyzerPresetAttributes{ref: ref}
}

func (vap VideoAnalyzerPresetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vap.ref.InternalTokens()
}

func (vap VideoAnalyzerPresetAttributes) AudioAnalysisMode() terra.StringValue {
	return terra.ReferenceAsString(vap.ref.Append("audio_analysis_mode"))
}

func (vap VideoAnalyzerPresetAttributes) AudioLanguage() terra.StringValue {
	return terra.ReferenceAsString(vap.ref.Append("audio_language"))
}

func (vap VideoAnalyzerPresetAttributes) ExperimentalOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vap.ref.Append("experimental_options"))
}

func (vap VideoAnalyzerPresetAttributes) InsightsType() terra.StringValue {
	return terra.ReferenceAsString(vap.ref.Append("insights_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type OutputState struct {
	OnErrorAction       string                     `json:"on_error_action"`
	RelativePriority    string                     `json:"relative_priority"`
	AudioAnalyzerPreset []AudioAnalyzerPresetState `json:"audio_analyzer_preset"`
	BuiltinPreset       []BuiltinPresetState       `json:"builtin_preset"`
	CustomPreset        []CustomPresetState        `json:"custom_preset"`
	FaceDetectorPreset  []FaceDetectorPresetState  `json:"face_detector_preset"`
	VideoAnalyzerPreset []VideoAnalyzerPresetState `json:"video_analyzer_preset"`
}

type AudioAnalyzerPresetState struct {
	AudioAnalysisMode   string            `json:"audio_analysis_mode"`
	AudioLanguage       string            `json:"audio_language"`
	ExperimentalOptions map[string]string `json:"experimental_options"`
}

type BuiltinPresetState struct {
	PresetName          string                     `json:"preset_name"`
	PresetConfiguration []PresetConfigurationState `json:"preset_configuration"`
}

type PresetConfigurationState struct {
	Complexity                string  `json:"complexity"`
	InterleaveOutput          string  `json:"interleave_output"`
	KeyFrameIntervalInSeconds float64 `json:"key_frame_interval_in_seconds"`
	MaxBitrateBps             float64 `json:"max_bitrate_bps"`
	MaxHeight                 float64 `json:"max_height"`
	MaxLayers                 float64 `json:"max_layers"`
	MinBitrateBps             float64 `json:"min_bitrate_bps"`
	MinHeight                 float64 `json:"min_height"`
}

type CustomPresetState struct {
	Codec  []CodecState  `json:"codec"`
	Filter []FilterState `json:"filter"`
	Format []FormatState `json:"format"`
}

type CodecState struct {
	AacAudio  []AacAudioState  `json:"aac_audio"`
	CopyAudio []CopyAudioState `json:"copy_audio"`
	CopyVideo []CopyVideoState `json:"copy_video"`
	DdAudio   []DdAudioState   `json:"dd_audio"`
	H264Video []H264VideoState `json:"h264_video"`
	H265Video []H265VideoState `json:"h265_video"`
}

type AacAudioState struct {
	Bitrate      float64 `json:"bitrate"`
	Channels     float64 `json:"channels"`
	Label        string  `json:"label"`
	Profile      string  `json:"profile"`
	SamplingRate float64 `json:"sampling_rate"`
}

type CopyAudioState struct {
	Label string `json:"label"`
}

type CopyVideoState struct {
	Label string `json:"label"`
}

type DdAudioState struct {
	Bitrate      float64 `json:"bitrate"`
	Channels     float64 `json:"channels"`
	Label        string  `json:"label"`
	SamplingRate float64 `json:"sampling_rate"`
}

type H264VideoState struct {
	Complexity                  string                `json:"complexity"`
	KeyFrameInterval            string                `json:"key_frame_interval"`
	Label                       string                `json:"label"`
	RateControlMode             string                `json:"rate_control_mode"`
	SceneChangeDetectionEnabled bool                  `json:"scene_change_detection_enabled"`
	StretchMode                 string                `json:"stretch_mode"`
	SyncMode                    string                `json:"sync_mode"`
	Layer                       []H264VideoLayerState `json:"layer"`
}

type H264VideoLayerState struct {
	AdaptiveBFrameEnabled bool    `json:"adaptive_b_frame_enabled"`
	BFrames               float64 `json:"b_frames"`
	Bitrate               float64 `json:"bitrate"`
	BufferWindow          string  `json:"buffer_window"`
	Crf                   float64 `json:"crf"`
	EntropyMode           string  `json:"entropy_mode"`
	FrameRate             string  `json:"frame_rate"`
	Height                string  `json:"height"`
	Label                 string  `json:"label"`
	Level                 string  `json:"level"`
	MaxBitrate            float64 `json:"max_bitrate"`
	Profile               string  `json:"profile"`
	ReferenceFrames       float64 `json:"reference_frames"`
	Slices                float64 `json:"slices"`
	Width                 string  `json:"width"`
}

type H265VideoState struct {
	Complexity                  string                `json:"complexity"`
	KeyFrameInterval            string                `json:"key_frame_interval"`
	Label                       string                `json:"label"`
	SceneChangeDetectionEnabled bool                  `json:"scene_change_detection_enabled"`
	StretchMode                 string                `json:"stretch_mode"`
	SyncMode                    string                `json:"sync_mode"`
	Layer                       []H265VideoLayerState `json:"layer"`
}

type H265VideoLayerState struct {
	AdaptiveBFrameEnabled bool    `json:"adaptive_b_frame_enabled"`
	BFrames               float64 `json:"b_frames"`
	Bitrate               float64 `json:"bitrate"`
	BufferWindow          string  `json:"buffer_window"`
	Crf                   float64 `json:"crf"`
	FrameRate             string  `json:"frame_rate"`
	Height                string  `json:"height"`
	Label                 string  `json:"label"`
	Level                 string  `json:"level"`
	MaxBitrate            float64 `json:"max_bitrate"`
	Profile               string  `json:"profile"`
	ReferenceFrames       float64 `json:"reference_frames"`
	Slices                float64 `json:"slices"`
	Width                 string  `json:"width"`
}

type FilterState struct {
	Rotation      string                     `json:"rotation"`
	CropRectangle []FilterCropRectangleState `json:"crop_rectangle"`
	Deinterlace   []DeinterlaceState         `json:"deinterlace"`
	FadeIn        []FadeInState              `json:"fade_in"`
	FadeOut       []FadeOutState             `json:"fade_out"`
	Overlay       []OverlayState             `json:"overlay"`
}

type FilterCropRectangleState struct {
	Height string `json:"height"`
	Left   string `json:"left"`
	Top    string `json:"top"`
	Width  string `json:"width"`
}

type DeinterlaceState struct {
	Mode   string `json:"mode"`
	Parity string `json:"parity"`
}

type FadeInState struct {
	Duration  string `json:"duration"`
	FadeColor string `json:"fade_color"`
	Start     string `json:"start"`
}

type FadeOutState struct {
	Duration  string `json:"duration"`
	FadeColor string `json:"fade_color"`
	Start     string `json:"start"`
}

type OverlayState struct {
	Audio []AudioState `json:"audio"`
	Video []VideoState `json:"video"`
}

type AudioState struct {
	AudioGainLevel  float64 `json:"audio_gain_level"`
	End             string  `json:"end"`
	FadeInDuration  string  `json:"fade_in_duration"`
	FadeOutDuration string  `json:"fade_out_duration"`
	InputLabel      string  `json:"input_label"`
	Start           string  `json:"start"`
}

type VideoState struct {
	AudioGainLevel  float64                   `json:"audio_gain_level"`
	End             string                    `json:"end"`
	FadeInDuration  string                    `json:"fade_in_duration"`
	FadeOutDuration string                    `json:"fade_out_duration"`
	InputLabel      string                    `json:"input_label"`
	Opacity         float64                   `json:"opacity"`
	Start           string                    `json:"start"`
	CropRectangle   []VideoCropRectangleState `json:"crop_rectangle"`
	Position        []PositionState           `json:"position"`
}

type VideoCropRectangleState struct {
	Height string `json:"height"`
	Left   string `json:"left"`
	Top    string `json:"top"`
	Width  string `json:"width"`
}

type PositionState struct {
	Height string `json:"height"`
	Left   string `json:"left"`
	Top    string `json:"top"`
	Width  string `json:"width"`
}

type FormatState struct {
	Mp4             []Mp4State             `json:"mp4"`
	TransportStream []TransportStreamState `json:"transport_stream"`
}

type Mp4State struct {
	FilenamePattern string               `json:"filename_pattern"`
	OutputFile      []Mp4OutputFileState `json:"output_file"`
}

type Mp4OutputFileState struct {
	Labels []string `json:"labels"`
}

type TransportStreamState struct {
	FilenamePattern string                           `json:"filename_pattern"`
	OutputFile      []TransportStreamOutputFileState `json:"output_file"`
}

type TransportStreamOutputFileState struct {
	Labels []string `json:"labels"`
}

type FaceDetectorPresetState struct {
	AnalysisResolution  string            `json:"analysis_resolution"`
	BlurType            string            `json:"blur_type"`
	ExperimentalOptions map[string]string `json:"experimental_options"`
	FaceRedactorMode    string            `json:"face_redactor_mode"`
}

type VideoAnalyzerPresetState struct {
	AudioAnalysisMode   string            `json:"audio_analysis_mode"`
	AudioLanguage       string            `json:"audio_language"`
	ExperimentalOptions map[string]string `json:"experimental_options"`
	InsightsType        string            `json:"insights_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
