// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loadtest "github.com/golingon/terraproviders/azurerm/3.55.0/loadtest"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLoadTest creates a new instance of [LoadTest].
func NewLoadTest(name string, args LoadTestArgs) *LoadTest {
	return &LoadTest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoadTest)(nil)

// LoadTest represents the Terraform resource azurerm_load_test.
type LoadTest struct {
	Name      string
	Args      LoadTestArgs
	state     *loadTestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LoadTest].
func (lt *LoadTest) Type() string {
	return "azurerm_load_test"
}

// LocalName returns the local name for [LoadTest].
func (lt *LoadTest) LocalName() string {
	return lt.Name
}

// Configuration returns the configuration (args) for [LoadTest].
func (lt *LoadTest) Configuration() interface{} {
	return lt.Args
}

// DependOn is used for other resources to depend on [LoadTest].
func (lt *LoadTest) DependOn() terra.Reference {
	return terra.ReferenceResource(lt)
}

// Dependencies returns the list of resources [LoadTest] depends_on.
func (lt *LoadTest) Dependencies() terra.Dependencies {
	return lt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LoadTest].
func (lt *LoadTest) LifecycleManagement() *terra.Lifecycle {
	return lt.Lifecycle
}

// Attributes returns the attributes for [LoadTest].
func (lt *LoadTest) Attributes() loadTestAttributes {
	return loadTestAttributes{ref: terra.ReferenceResource(lt)}
}

// ImportState imports the given attribute values into [LoadTest]'s state.
func (lt *LoadTest) ImportState(av io.Reader) error {
	lt.state = &loadTestState{}
	if err := json.NewDecoder(av).Decode(lt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lt.Type(), lt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LoadTest] has state.
func (lt *LoadTest) State() (*loadTestState, bool) {
	return lt.state, lt.state != nil
}

// StateMust returns the state for [LoadTest]. Panics if the state is nil.
func (lt *LoadTest) StateMust() *loadTestState {
	if lt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lt.Type(), lt.LocalName()))
	}
	return lt.state
}

// LoadTestArgs contains the configurations for azurerm_load_test.
type LoadTestArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *loadtest.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *loadtest.Timeouts `hcl:"timeouts,block"`
}
type loadTestAttributes struct {
	ref terra.Reference
}

// DataPlaneUri returns a reference to field data_plane_uri of azurerm_load_test.
func (lt loadTestAttributes) DataPlaneUri() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("data_plane_uri"))
}

// Description returns a reference to field description of azurerm_load_test.
func (lt loadTestAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_load_test.
func (lt loadTestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_load_test.
func (lt loadTestAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_load_test.
func (lt loadTestAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_load_test.
func (lt loadTestAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_load_test.
func (lt loadTestAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lt.ref.Append("tags"))
}

func (lt loadTestAttributes) Identity() terra.ListValue[loadtest.IdentityAttributes] {
	return terra.ReferenceAsList[loadtest.IdentityAttributes](lt.ref.Append("identity"))
}

func (lt loadTestAttributes) Timeouts() loadtest.TimeoutsAttributes {
	return terra.ReferenceAsSingle[loadtest.TimeoutsAttributes](lt.ref.Append("timeouts"))
}

type loadTestState struct {
	DataPlaneUri      string                   `json:"data_plane_uri"`
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	ResourceGroupName string                   `json:"resource_group_name"`
	Tags              map[string]string        `json:"tags"`
	Identity          []loadtest.IdentityState `json:"identity"`
	Timeouts          *loadtest.TimeoutsState  `json:"timeouts"`
}
