// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagemanagementpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/storagemanagementpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageManagementPolicy(name string, args StorageManagementPolicyArgs) *StorageManagementPolicy {
	return &StorageManagementPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageManagementPolicy)(nil)

type StorageManagementPolicy struct {
	Name  string
	Args  StorageManagementPolicyArgs
	state *storageManagementPolicyState
}

func (smp *StorageManagementPolicy) Type() string {
	return "azurerm_storage_management_policy"
}

func (smp *StorageManagementPolicy) LocalName() string {
	return smp.Name
}

func (smp *StorageManagementPolicy) Configuration() interface{} {
	return smp.Args
}

func (smp *StorageManagementPolicy) Attributes() storageManagementPolicyAttributes {
	return storageManagementPolicyAttributes{ref: terra.ReferenceResource(smp)}
}

func (smp *StorageManagementPolicy) ImportState(av io.Reader) error {
	smp.state = &storageManagementPolicyState{}
	if err := json.NewDecoder(av).Decode(smp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smp.Type(), smp.LocalName(), err)
	}
	return nil
}

func (smp *StorageManagementPolicy) State() (*storageManagementPolicyState, bool) {
	return smp.state, smp.state != nil
}

func (smp *StorageManagementPolicy) StateMust() *storageManagementPolicyState {
	if smp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smp.Type(), smp.LocalName()))
	}
	return smp.state
}

func (smp *StorageManagementPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(smp)
}

type StorageManagementPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Rule: min=0
	Rule []storagemanagementpolicy.Rule `hcl:"rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *storagemanagementpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageManagementPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageManagementPolicyAttributes struct {
	ref terra.Reference
}

func (smp storageManagementPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smp.ref.Append("id"))
}

func (smp storageManagementPolicyAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(smp.ref.Append("storage_account_id"))
}

func (smp storageManagementPolicyAttributes) Rule() terra.ListValue[storagemanagementpolicy.RuleAttributes] {
	return terra.ReferenceList[storagemanagementpolicy.RuleAttributes](smp.ref.Append("rule"))
}

func (smp storageManagementPolicyAttributes) Timeouts() storagemanagementpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[storagemanagementpolicy.TimeoutsAttributes](smp.ref.Append("timeouts"))
}

type storageManagementPolicyState struct {
	Id               string                                 `json:"id"`
	StorageAccountId string                                 `json:"storage_account_id"`
	Rule             []storagemanagementpolicy.RuleState    `json:"rule"`
	Timeouts         *storagemanagementpolicy.TimeoutsState `json:"timeouts"`
}
