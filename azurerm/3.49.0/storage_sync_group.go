// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagesyncgroup "github.com/golingon/terraproviders/azurerm/3.49.0/storagesyncgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageSyncGroup(name string, args StorageSyncGroupArgs) *StorageSyncGroup {
	return &StorageSyncGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageSyncGroup)(nil)

type StorageSyncGroup struct {
	Name  string
	Args  StorageSyncGroupArgs
	state *storageSyncGroupState
}

func (ssg *StorageSyncGroup) Type() string {
	return "azurerm_storage_sync_group"
}

func (ssg *StorageSyncGroup) LocalName() string {
	return ssg.Name
}

func (ssg *StorageSyncGroup) Configuration() interface{} {
	return ssg.Args
}

func (ssg *StorageSyncGroup) Attributes() storageSyncGroupAttributes {
	return storageSyncGroupAttributes{ref: terra.ReferenceResource(ssg)}
}

func (ssg *StorageSyncGroup) ImportState(av io.Reader) error {
	ssg.state = &storageSyncGroupState{}
	if err := json.NewDecoder(av).Decode(ssg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssg.Type(), ssg.LocalName(), err)
	}
	return nil
}

func (ssg *StorageSyncGroup) State() (*storageSyncGroupState, bool) {
	return ssg.state, ssg.state != nil
}

func (ssg *StorageSyncGroup) StateMust() *storageSyncGroupState {
	if ssg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssg.Type(), ssg.LocalName()))
	}
	return ssg.state
}

func (ssg *StorageSyncGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ssg)
}

type StorageSyncGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageSyncId: string, required
	StorageSyncId terra.StringValue `hcl:"storage_sync_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *storagesyncgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageSyncGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageSyncGroupAttributes struct {
	ref terra.Reference
}

func (ssg storageSyncGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("id"))
}

func (ssg storageSyncGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("name"))
}

func (ssg storageSyncGroupAttributes) StorageSyncId() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("storage_sync_id"))
}

func (ssg storageSyncGroupAttributes) Timeouts() storagesyncgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[storagesyncgroup.TimeoutsAttributes](ssg.ref.Append("timeouts"))
}

type storageSyncGroupState struct {
	Id            string                          `json:"id"`
	Name          string                          `json:"name"`
	StorageSyncId string                          `json:"storage_sync_id"`
	Timeouts      *storagesyncgroup.TimeoutsState `json:"timeouts"`
}
