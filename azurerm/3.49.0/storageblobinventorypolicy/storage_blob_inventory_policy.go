// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package storageblobinventorypolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rules struct {
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
	// SchemaFields: list of string, required
	SchemaFields terra.ListValue[terra.StringValue] `hcl:"schema_fields,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// StorageContainerName: string, required
	StorageContainerName terra.StringValue `hcl:"storage_container_name,attr" validate:"required"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
}

type Filter struct {
	// BlobTypes: set of string, required
	BlobTypes terra.SetValue[terra.StringValue] `hcl:"blob_types,attr" validate:"required"`
	// ExcludePrefixes: set of string, optional
	ExcludePrefixes terra.SetValue[terra.StringValue] `hcl:"exclude_prefixes,attr"`
	// IncludeBlobVersions: bool, optional
	IncludeBlobVersions terra.BoolValue `hcl:"include_blob_versions,attr"`
	// IncludeDeleted: bool, optional
	IncludeDeleted terra.BoolValue `hcl:"include_deleted,attr"`
	// IncludeSnapshots: bool, optional
	IncludeSnapshots terra.BoolValue `hcl:"include_snapshots,attr"`
	// PrefixMatch: set of string, optional
	PrefixMatch terra.SetValue[terra.StringValue] `hcl:"prefix_match,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("format"))
}

func (r RulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RulesAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("schedule"))
}

func (r RulesAttributes) SchemaFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("schema_fields"))
}

func (r RulesAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("scope"))
}

func (r RulesAttributes) StorageContainerName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("storage_container_name"))
}

func (r RulesAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](r.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) BlobTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("blob_types"))
}

func (f FilterAttributes) ExcludePrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("exclude_prefixes"))
}

func (f FilterAttributes) IncludeBlobVersions() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("include_blob_versions"))
}

func (f FilterAttributes) IncludeDeleted() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("include_deleted"))
}

func (f FilterAttributes) IncludeSnapshots() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("include_snapshots"))
}

func (f FilterAttributes) PrefixMatch() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("prefix_match"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RulesState struct {
	Format               string        `json:"format"`
	Name                 string        `json:"name"`
	Schedule             string        `json:"schedule"`
	SchemaFields         []string      `json:"schema_fields"`
	Scope                string        `json:"scope"`
	StorageContainerName string        `json:"storage_container_name"`
	Filter               []FilterState `json:"filter"`
}

type FilterState struct {
	BlobTypes           []string `json:"blob_types"`
	ExcludePrefixes     []string `json:"exclude_prefixes"`
	IncludeBlobVersions bool     `json:"include_blob_versions"`
	IncludeDeleted      bool     `json:"include_deleted"`
	IncludeSnapshots    bool     `json:"include_snapshots"`
	PrefixMatch         []string `json:"prefix_match"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
