// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	keyvaultmanagedhardwaresecuritymodule "github.com/golingon/terraproviders/azurerm/3.49.0/keyvaultmanagedhardwaresecuritymodule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKeyVaultManagedHardwareSecurityModule(name string, args KeyVaultManagedHardwareSecurityModuleArgs) *KeyVaultManagedHardwareSecurityModule {
	return &KeyVaultManagedHardwareSecurityModule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultManagedHardwareSecurityModule)(nil)

type KeyVaultManagedHardwareSecurityModule struct {
	Name  string
	Args  KeyVaultManagedHardwareSecurityModuleArgs
	state *keyVaultManagedHardwareSecurityModuleState
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module"
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) LocalName() string {
	return kvmhsm.Name
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) Configuration() interface{} {
	return kvmhsm.Args
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) Attributes() keyVaultManagedHardwareSecurityModuleAttributes {
	return keyVaultManagedHardwareSecurityModuleAttributes{ref: terra.ReferenceResource(kvmhsm)}
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) ImportState(av io.Reader) error {
	kvmhsm.state = &keyVaultManagedHardwareSecurityModuleState{}
	if err := json.NewDecoder(av).Decode(kvmhsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvmhsm.Type(), kvmhsm.LocalName(), err)
	}
	return nil
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) State() (*keyVaultManagedHardwareSecurityModuleState, bool) {
	return kvmhsm.state, kvmhsm.state != nil
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) StateMust() *keyVaultManagedHardwareSecurityModuleState {
	if kvmhsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvmhsm.Type(), kvmhsm.LocalName()))
	}
	return kvmhsm.state
}

func (kvmhsm *KeyVaultManagedHardwareSecurityModule) DependOn() terra.Reference {
	return terra.ReferenceResource(kvmhsm)
}

type KeyVaultManagedHardwareSecurityModuleArgs struct {
	// AdminObjectIds: set of string, required
	AdminObjectIds terra.SetValue[terra.StringValue] `hcl:"admin_object_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// PurgeProtectionEnabled: bool, optional
	PurgeProtectionEnabled terra.BoolValue `hcl:"purge_protection_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SoftDeleteRetentionDays: number, optional
	SoftDeleteRetentionDays terra.NumberValue `hcl:"soft_delete_retention_days,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// NetworkAcls: optional
	NetworkAcls *keyvaultmanagedhardwaresecuritymodule.NetworkAcls `hcl:"network_acls,block"`
	// Timeouts: optional
	Timeouts *keyvaultmanagedhardwaresecuritymodule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KeyVaultManagedHardwareSecurityModule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type keyVaultManagedHardwareSecurityModuleAttributes struct {
	ref terra.Reference
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) AdminObjectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](kvmhsm.ref.Append("admin_object_ids"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) HsmUri() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("hsm_uri"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("id"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) Location() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("location"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("name"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(kvmhsm.ref.Append("public_network_access_enabled"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) PurgeProtectionEnabled() terra.BoolValue {
	return terra.ReferenceBool(kvmhsm.ref.Append("purge_protection_enabled"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("resource_group_name"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("sku_name"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) SoftDeleteRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(kvmhsm.ref.Append("soft_delete_retention_days"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kvmhsm.ref.Append("tags"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(kvmhsm.ref.Append("tenant_id"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) NetworkAcls() terra.ListValue[keyvaultmanagedhardwaresecuritymodule.NetworkAclsAttributes] {
	return terra.ReferenceList[keyvaultmanagedhardwaresecuritymodule.NetworkAclsAttributes](kvmhsm.ref.Append("network_acls"))
}

func (kvmhsm keyVaultManagedHardwareSecurityModuleAttributes) Timeouts() keyvaultmanagedhardwaresecuritymodule.TimeoutsAttributes {
	return terra.ReferenceSingle[keyvaultmanagedhardwaresecuritymodule.TimeoutsAttributes](kvmhsm.ref.Append("timeouts"))
}

type keyVaultManagedHardwareSecurityModuleState struct {
	AdminObjectIds             []string                                                 `json:"admin_object_ids"`
	HsmUri                     string                                                   `json:"hsm_uri"`
	Id                         string                                                   `json:"id"`
	Location                   string                                                   `json:"location"`
	Name                       string                                                   `json:"name"`
	PublicNetworkAccessEnabled bool                                                     `json:"public_network_access_enabled"`
	PurgeProtectionEnabled     bool                                                     `json:"purge_protection_enabled"`
	ResourceGroupName          string                                                   `json:"resource_group_name"`
	SkuName                    string                                                   `json:"sku_name"`
	SoftDeleteRetentionDays    float64                                                  `json:"soft_delete_retention_days"`
	Tags                       map[string]string                                        `json:"tags"`
	TenantId                   string                                                   `json:"tenant_id"`
	NetworkAcls                []keyvaultmanagedhardwaresecuritymodule.NetworkAclsState `json:"network_acls"`
	Timeouts                   *keyvaultmanagedhardwaresecuritymodule.TimeoutsState     `json:"timeouts"`
}
