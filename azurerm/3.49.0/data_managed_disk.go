// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datamanageddisk "github.com/golingon/terraproviders/azurerm/3.49.0/datamanageddisk"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataManagedDisk(name string, args DataManagedDiskArgs) *DataManagedDisk {
	return &DataManagedDisk{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataManagedDisk)(nil)

type DataManagedDisk struct {
	Name string
	Args DataManagedDiskArgs
}

func (md *DataManagedDisk) DataSource() string {
	return "azurerm_managed_disk"
}

func (md *DataManagedDisk) LocalName() string {
	return md.Name
}

func (md *DataManagedDisk) Configuration() interface{} {
	return md.Args
}

func (md *DataManagedDisk) Attributes() dataManagedDiskAttributes {
	return dataManagedDiskAttributes{ref: terra.ReferenceDataResource(md)}
}

type DataManagedDiskArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// EncryptionSettings: min=0
	EncryptionSettings []datamanageddisk.EncryptionSettings `hcl:"encryption_settings,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datamanageddisk.Timeouts `hcl:"timeouts,block"`
}
type dataManagedDiskAttributes struct {
	ref terra.Reference
}

func (md dataManagedDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("create_option"))
}

func (md dataManagedDiskAttributes) DiskAccessId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("disk_access_id"))
}

func (md dataManagedDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("disk_encryption_set_id"))
}

func (md dataManagedDiskAttributes) DiskIopsReadWrite() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_iops_read_write"))
}

func (md dataManagedDiskAttributes) DiskMbpsReadWrite() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_mbps_read_write"))
}

func (md dataManagedDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_size_gb"))
}

func (md dataManagedDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("id"))
}

func (md dataManagedDiskAttributes) ImageReferenceId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("image_reference_id"))
}

func (md dataManagedDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("name"))
}

func (md dataManagedDiskAttributes) NetworkAccessPolicy() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("network_access_policy"))
}

func (md dataManagedDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("os_type"))
}

func (md dataManagedDiskAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("resource_group_name"))
}

func (md dataManagedDiskAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("source_resource_id"))
}

func (md dataManagedDiskAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("source_uri"))
}

func (md dataManagedDiskAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("storage_account_id"))
}

func (md dataManagedDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("storage_account_type"))
}

func (md dataManagedDiskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](md.ref.Append("tags"))
}

func (md dataManagedDiskAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](md.ref.Append("zones"))
}

func (md dataManagedDiskAttributes) EncryptionSettings() terra.ListValue[datamanageddisk.EncryptionSettingsAttributes] {
	return terra.ReferenceList[datamanageddisk.EncryptionSettingsAttributes](md.ref.Append("encryption_settings"))
}

func (md dataManagedDiskAttributes) Timeouts() datamanageddisk.TimeoutsAttributes {
	return terra.ReferenceSingle[datamanageddisk.TimeoutsAttributes](md.ref.Append("timeouts"))
}
