// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	marketplaceagreement "github.com/golingon/terraproviders/azurerm/3.49.0/marketplaceagreement"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMarketplaceAgreement(name string, args MarketplaceAgreementArgs) *MarketplaceAgreement {
	return &MarketplaceAgreement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MarketplaceAgreement)(nil)

type MarketplaceAgreement struct {
	Name  string
	Args  MarketplaceAgreementArgs
	state *marketplaceAgreementState
}

func (ma *MarketplaceAgreement) Type() string {
	return "azurerm_marketplace_agreement"
}

func (ma *MarketplaceAgreement) LocalName() string {
	return ma.Name
}

func (ma *MarketplaceAgreement) Configuration() interface{} {
	return ma.Args
}

func (ma *MarketplaceAgreement) Attributes() marketplaceAgreementAttributes {
	return marketplaceAgreementAttributes{ref: terra.ReferenceResource(ma)}
}

func (ma *MarketplaceAgreement) ImportState(av io.Reader) error {
	ma.state = &marketplaceAgreementState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

func (ma *MarketplaceAgreement) State() (*marketplaceAgreementState, bool) {
	return ma.state, ma.state != nil
}

func (ma *MarketplaceAgreement) StateMust() *marketplaceAgreementState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

func (ma *MarketplaceAgreement) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

type MarketplaceAgreementArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Plan: string, required
	Plan terra.StringValue `hcl:"plan,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *marketplaceagreement.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MarketplaceAgreement depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type marketplaceAgreementAttributes struct {
	ref terra.Reference
}

func (ma marketplaceAgreementAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("id"))
}

func (ma marketplaceAgreementAttributes) LicenseTextLink() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("license_text_link"))
}

func (ma marketplaceAgreementAttributes) Offer() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("offer"))
}

func (ma marketplaceAgreementAttributes) Plan() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("plan"))
}

func (ma marketplaceAgreementAttributes) PrivacyPolicyLink() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("privacy_policy_link"))
}

func (ma marketplaceAgreementAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("publisher"))
}

func (ma marketplaceAgreementAttributes) Timeouts() marketplaceagreement.TimeoutsAttributes {
	return terra.ReferenceSingle[marketplaceagreement.TimeoutsAttributes](ma.ref.Append("timeouts"))
}

type marketplaceAgreementState struct {
	Id                string                              `json:"id"`
	LicenseTextLink   string                              `json:"license_text_link"`
	Offer             string                              `json:"offer"`
	Plan              string                              `json:"plan"`
	PrivacyPolicyLink string                              `json:"privacy_policy_link"`
	Publisher         string                              `json:"publisher"`
	Timeouts          *marketplaceagreement.TimeoutsState `json:"timeouts"`
}
