// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkwatcherflowlog "github.com/golingon/terraproviders/azurerm/3.49.0/networkwatcherflowlog"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkWatcherFlowLog(name string, args NetworkWatcherFlowLogArgs) *NetworkWatcherFlowLog {
	return &NetworkWatcherFlowLog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkWatcherFlowLog)(nil)

type NetworkWatcherFlowLog struct {
	Name  string
	Args  NetworkWatcherFlowLogArgs
	state *networkWatcherFlowLogState
}

func (nwfl *NetworkWatcherFlowLog) Type() string {
	return "azurerm_network_watcher_flow_log"
}

func (nwfl *NetworkWatcherFlowLog) LocalName() string {
	return nwfl.Name
}

func (nwfl *NetworkWatcherFlowLog) Configuration() interface{} {
	return nwfl.Args
}

func (nwfl *NetworkWatcherFlowLog) Attributes() networkWatcherFlowLogAttributes {
	return networkWatcherFlowLogAttributes{ref: terra.ReferenceResource(nwfl)}
}

func (nwfl *NetworkWatcherFlowLog) ImportState(av io.Reader) error {
	nwfl.state = &networkWatcherFlowLogState{}
	if err := json.NewDecoder(av).Decode(nwfl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nwfl.Type(), nwfl.LocalName(), err)
	}
	return nil
}

func (nwfl *NetworkWatcherFlowLog) State() (*networkWatcherFlowLogState, bool) {
	return nwfl.state, nwfl.state != nil
}

func (nwfl *NetworkWatcherFlowLog) StateMust() *networkWatcherFlowLogState {
	if nwfl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nwfl.Type(), nwfl.LocalName()))
	}
	return nwfl.state
}

func (nwfl *NetworkWatcherFlowLog) DependOn() terra.Reference {
	return terra.ReferenceResource(nwfl)
}

type NetworkWatcherFlowLogArgs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkSecurityGroupId: string, required
	NetworkSecurityGroupId terra.StringValue `hcl:"network_security_group_id,attr" validate:"required"`
	// NetworkWatcherName: string, required
	NetworkWatcherName terra.StringValue `hcl:"network_watcher_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: number, optional
	Version terra.NumberValue `hcl:"version,attr"`
	// RetentionPolicy: required
	RetentionPolicy *networkwatcherflowlog.RetentionPolicy `hcl:"retention_policy,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkwatcherflowlog.Timeouts `hcl:"timeouts,block"`
	// TrafficAnalytics: optional
	TrafficAnalytics *networkwatcherflowlog.TrafficAnalytics `hcl:"traffic_analytics,block"`
	// DependsOn contains resources that NetworkWatcherFlowLog depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkWatcherFlowLogAttributes struct {
	ref terra.Reference
}

func (nwfl networkWatcherFlowLogAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(nwfl.ref.Append("enabled"))
}

func (nwfl networkWatcherFlowLogAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("id"))
}

func (nwfl networkWatcherFlowLogAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("location"))
}

func (nwfl networkWatcherFlowLogAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("name"))
}

func (nwfl networkWatcherFlowLogAttributes) NetworkSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("network_security_group_id"))
}

func (nwfl networkWatcherFlowLogAttributes) NetworkWatcherName() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("network_watcher_name"))
}

func (nwfl networkWatcherFlowLogAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("resource_group_name"))
}

func (nwfl networkWatcherFlowLogAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(nwfl.ref.Append("storage_account_id"))
}

func (nwfl networkWatcherFlowLogAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nwfl.ref.Append("tags"))
}

func (nwfl networkWatcherFlowLogAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(nwfl.ref.Append("version"))
}

func (nwfl networkWatcherFlowLogAttributes) RetentionPolicy() terra.ListValue[networkwatcherflowlog.RetentionPolicyAttributes] {
	return terra.ReferenceList[networkwatcherflowlog.RetentionPolicyAttributes](nwfl.ref.Append("retention_policy"))
}

func (nwfl networkWatcherFlowLogAttributes) Timeouts() networkwatcherflowlog.TimeoutsAttributes {
	return terra.ReferenceSingle[networkwatcherflowlog.TimeoutsAttributes](nwfl.ref.Append("timeouts"))
}

func (nwfl networkWatcherFlowLogAttributes) TrafficAnalytics() terra.ListValue[networkwatcherflowlog.TrafficAnalyticsAttributes] {
	return terra.ReferenceList[networkwatcherflowlog.TrafficAnalyticsAttributes](nwfl.ref.Append("traffic_analytics"))
}

type networkWatcherFlowLogState struct {
	Enabled                bool                                          `json:"enabled"`
	Id                     string                                        `json:"id"`
	Location               string                                        `json:"location"`
	Name                   string                                        `json:"name"`
	NetworkSecurityGroupId string                                        `json:"network_security_group_id"`
	NetworkWatcherName     string                                        `json:"network_watcher_name"`
	ResourceGroupName      string                                        `json:"resource_group_name"`
	StorageAccountId       string                                        `json:"storage_account_id"`
	Tags                   map[string]string                             `json:"tags"`
	Version                float64                                       `json:"version"`
	RetentionPolicy        []networkwatcherflowlog.RetentionPolicyState  `json:"retention_policy"`
	Timeouts               *networkwatcherflowlog.TimeoutsState          `json:"timeouts"`
	TrafficAnalytics       []networkwatcherflowlog.TrafficAnalyticsState `json:"traffic_analytics"`
}
