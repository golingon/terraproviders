// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnfrontdoororigin "github.com/golingon/terraproviders/azurerm/3.49.0/cdnfrontdoororigin"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnFrontdoorOrigin(name string, args CdnFrontdoorOriginArgs) *CdnFrontdoorOrigin {
	return &CdnFrontdoorOrigin{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnFrontdoorOrigin)(nil)

type CdnFrontdoorOrigin struct {
	Name  string
	Args  CdnFrontdoorOriginArgs
	state *cdnFrontdoorOriginState
}

func (cfo *CdnFrontdoorOrigin) Type() string {
	return "azurerm_cdn_frontdoor_origin"
}

func (cfo *CdnFrontdoorOrigin) LocalName() string {
	return cfo.Name
}

func (cfo *CdnFrontdoorOrigin) Configuration() interface{} {
	return cfo.Args
}

func (cfo *CdnFrontdoorOrigin) Attributes() cdnFrontdoorOriginAttributes {
	return cdnFrontdoorOriginAttributes{ref: terra.ReferenceResource(cfo)}
}

func (cfo *CdnFrontdoorOrigin) ImportState(av io.Reader) error {
	cfo.state = &cdnFrontdoorOriginState{}
	if err := json.NewDecoder(av).Decode(cfo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfo.Type(), cfo.LocalName(), err)
	}
	return nil
}

func (cfo *CdnFrontdoorOrigin) State() (*cdnFrontdoorOriginState, bool) {
	return cfo.state, cfo.state != nil
}

func (cfo *CdnFrontdoorOrigin) StateMust() *cdnFrontdoorOriginState {
	if cfo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfo.Type(), cfo.LocalName()))
	}
	return cfo.state
}

func (cfo *CdnFrontdoorOrigin) DependOn() terra.Reference {
	return terra.ReferenceResource(cfo)
}

type CdnFrontdoorOriginArgs struct {
	// CdnFrontdoorOriginGroupId: string, required
	CdnFrontdoorOriginGroupId terra.StringValue `hcl:"cdn_frontdoor_origin_group_id,attr" validate:"required"`
	// CertificateNameCheckEnabled: bool, required
	CertificateNameCheckEnabled terra.BoolValue `hcl:"certificate_name_check_enabled,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HealthProbesEnabled: bool, optional
	HealthProbesEnabled terra.BoolValue `hcl:"health_probes_enabled,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// HttpPort: number, optional
	HttpPort terra.NumberValue `hcl:"http_port,attr"`
	// HttpsPort: number, optional
	HttpsPort terra.NumberValue `hcl:"https_port,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OriginHostHeader: string, optional
	OriginHostHeader terra.StringValue `hcl:"origin_host_header,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// PrivateLink: optional
	PrivateLink *cdnfrontdoororigin.PrivateLink `hcl:"private_link,block"`
	// Timeouts: optional
	Timeouts *cdnfrontdoororigin.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CdnFrontdoorOrigin depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnFrontdoorOriginAttributes struct {
	ref terra.Reference
}

func (cfo cdnFrontdoorOriginAttributes) CdnFrontdoorOriginGroupId() terra.StringValue {
	return terra.ReferenceString(cfo.ref.Append("cdn_frontdoor_origin_group_id"))
}

func (cfo cdnFrontdoorOriginAttributes) CertificateNameCheckEnabled() terra.BoolValue {
	return terra.ReferenceBool(cfo.ref.Append("certificate_name_check_enabled"))
}

func (cfo cdnFrontdoorOriginAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cfo.ref.Append("enabled"))
}

func (cfo cdnFrontdoorOriginAttributes) HealthProbesEnabled() terra.BoolValue {
	return terra.ReferenceBool(cfo.ref.Append("health_probes_enabled"))
}

func (cfo cdnFrontdoorOriginAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(cfo.ref.Append("host_name"))
}

func (cfo cdnFrontdoorOriginAttributes) HttpPort() terra.NumberValue {
	return terra.ReferenceNumber(cfo.ref.Append("http_port"))
}

func (cfo cdnFrontdoorOriginAttributes) HttpsPort() terra.NumberValue {
	return terra.ReferenceNumber(cfo.ref.Append("https_port"))
}

func (cfo cdnFrontdoorOriginAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfo.ref.Append("id"))
}

func (cfo cdnFrontdoorOriginAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cfo.ref.Append("name"))
}

func (cfo cdnFrontdoorOriginAttributes) OriginHostHeader() terra.StringValue {
	return terra.ReferenceString(cfo.ref.Append("origin_host_header"))
}

func (cfo cdnFrontdoorOriginAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(cfo.ref.Append("priority"))
}

func (cfo cdnFrontdoorOriginAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(cfo.ref.Append("weight"))
}

func (cfo cdnFrontdoorOriginAttributes) PrivateLink() terra.ListValue[cdnfrontdoororigin.PrivateLinkAttributes] {
	return terra.ReferenceList[cdnfrontdoororigin.PrivateLinkAttributes](cfo.ref.Append("private_link"))
}

func (cfo cdnFrontdoorOriginAttributes) Timeouts() cdnfrontdoororigin.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnfrontdoororigin.TimeoutsAttributes](cfo.ref.Append("timeouts"))
}

type cdnFrontdoorOriginState struct {
	CdnFrontdoorOriginGroupId   string                                `json:"cdn_frontdoor_origin_group_id"`
	CertificateNameCheckEnabled bool                                  `json:"certificate_name_check_enabled"`
	Enabled                     bool                                  `json:"enabled"`
	HealthProbesEnabled         bool                                  `json:"health_probes_enabled"`
	HostName                    string                                `json:"host_name"`
	HttpPort                    float64                               `json:"http_port"`
	HttpsPort                   float64                               `json:"https_port"`
	Id                          string                                `json:"id"`
	Name                        string                                `json:"name"`
	OriginHostHeader            string                                `json:"origin_host_header"`
	Priority                    float64                               `json:"priority"`
	Weight                      float64                               `json:"weight"`
	PrivateLink                 []cdnfrontdoororigin.PrivateLinkState `json:"private_link"`
	Timeouts                    *cdnfrontdoororigin.TimeoutsState     `json:"timeouts"`
}
