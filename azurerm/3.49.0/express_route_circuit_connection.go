// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressroutecircuitconnection "github.com/golingon/terraproviders/azurerm/3.49.0/expressroutecircuitconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRouteCircuitConnection(name string, args ExpressRouteCircuitConnectionArgs) *ExpressRouteCircuitConnection {
	return &ExpressRouteCircuitConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRouteCircuitConnection)(nil)

type ExpressRouteCircuitConnection struct {
	Name  string
	Args  ExpressRouteCircuitConnectionArgs
	state *expressRouteCircuitConnectionState
}

func (ercc *ExpressRouteCircuitConnection) Type() string {
	return "azurerm_express_route_circuit_connection"
}

func (ercc *ExpressRouteCircuitConnection) LocalName() string {
	return ercc.Name
}

func (ercc *ExpressRouteCircuitConnection) Configuration() interface{} {
	return ercc.Args
}

func (ercc *ExpressRouteCircuitConnection) Attributes() expressRouteCircuitConnectionAttributes {
	return expressRouteCircuitConnectionAttributes{ref: terra.ReferenceResource(ercc)}
}

func (ercc *ExpressRouteCircuitConnection) ImportState(av io.Reader) error {
	ercc.state = &expressRouteCircuitConnectionState{}
	if err := json.NewDecoder(av).Decode(ercc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ercc.Type(), ercc.LocalName(), err)
	}
	return nil
}

func (ercc *ExpressRouteCircuitConnection) State() (*expressRouteCircuitConnectionState, bool) {
	return ercc.state, ercc.state != nil
}

func (ercc *ExpressRouteCircuitConnection) StateMust() *expressRouteCircuitConnectionState {
	if ercc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ercc.Type(), ercc.LocalName()))
	}
	return ercc.state
}

func (ercc *ExpressRouteCircuitConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(ercc)
}

type ExpressRouteCircuitConnectionArgs struct {
	// AddressPrefixIpv4: string, required
	AddressPrefixIpv4 terra.StringValue `hcl:"address_prefix_ipv4,attr" validate:"required"`
	// AddressPrefixIpv6: string, optional
	AddressPrefixIpv6 terra.StringValue `hcl:"address_prefix_ipv6,attr"`
	// AuthorizationKey: string, optional
	AuthorizationKey terra.StringValue `hcl:"authorization_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeerPeeringId: string, required
	PeerPeeringId terra.StringValue `hcl:"peer_peering_id,attr" validate:"required"`
	// PeeringId: string, required
	PeeringId terra.StringValue `hcl:"peering_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *expressroutecircuitconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRouteCircuitConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRouteCircuitConnectionAttributes struct {
	ref terra.Reference
}

func (ercc expressRouteCircuitConnectionAttributes) AddressPrefixIpv4() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("address_prefix_ipv4"))
}

func (ercc expressRouteCircuitConnectionAttributes) AddressPrefixIpv6() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("address_prefix_ipv6"))
}

func (ercc expressRouteCircuitConnectionAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("authorization_key"))
}

func (ercc expressRouteCircuitConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("id"))
}

func (ercc expressRouteCircuitConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("name"))
}

func (ercc expressRouteCircuitConnectionAttributes) PeerPeeringId() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("peer_peering_id"))
}

func (ercc expressRouteCircuitConnectionAttributes) PeeringId() terra.StringValue {
	return terra.ReferenceString(ercc.ref.Append("peering_id"))
}

func (ercc expressRouteCircuitConnectionAttributes) Timeouts() expressroutecircuitconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[expressroutecircuitconnection.TimeoutsAttributes](ercc.ref.Append("timeouts"))
}

type expressRouteCircuitConnectionState struct {
	AddressPrefixIpv4 string                                       `json:"address_prefix_ipv4"`
	AddressPrefixIpv6 string                                       `json:"address_prefix_ipv6"`
	AuthorizationKey  string                                       `json:"authorization_key"`
	Id                string                                       `json:"id"`
	Name              string                                       `json:"name"`
	PeerPeeringId     string                                       `json:"peer_peering_id"`
	PeeringId         string                                       `json:"peering_id"`
	Timeouts          *expressroutecircuitconnection.TimeoutsState `json:"timeouts"`
}
