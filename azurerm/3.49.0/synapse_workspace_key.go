// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapseworkspacekey "github.com/golingon/terraproviders/azurerm/3.49.0/synapseworkspacekey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseWorkspaceKey(name string, args SynapseWorkspaceKeyArgs) *SynapseWorkspaceKey {
	return &SynapseWorkspaceKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseWorkspaceKey)(nil)

type SynapseWorkspaceKey struct {
	Name  string
	Args  SynapseWorkspaceKeyArgs
	state *synapseWorkspaceKeyState
}

func (swk *SynapseWorkspaceKey) Type() string {
	return "azurerm_synapse_workspace_key"
}

func (swk *SynapseWorkspaceKey) LocalName() string {
	return swk.Name
}

func (swk *SynapseWorkspaceKey) Configuration() interface{} {
	return swk.Args
}

func (swk *SynapseWorkspaceKey) Attributes() synapseWorkspaceKeyAttributes {
	return synapseWorkspaceKeyAttributes{ref: terra.ReferenceResource(swk)}
}

func (swk *SynapseWorkspaceKey) ImportState(av io.Reader) error {
	swk.state = &synapseWorkspaceKeyState{}
	if err := json.NewDecoder(av).Decode(swk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", swk.Type(), swk.LocalName(), err)
	}
	return nil
}

func (swk *SynapseWorkspaceKey) State() (*synapseWorkspaceKeyState, bool) {
	return swk.state, swk.state != nil
}

func (swk *SynapseWorkspaceKey) StateMust() *synapseWorkspaceKeyState {
	if swk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", swk.Type(), swk.LocalName()))
	}
	return swk.state
}

func (swk *SynapseWorkspaceKey) DependOn() terra.Reference {
	return terra.ReferenceResource(swk)
}

type SynapseWorkspaceKeyArgs struct {
	// Active: bool, required
	Active terra.BoolValue `hcl:"active,attr" validate:"required"`
	// CustomerManagedKeyName: string, required
	CustomerManagedKeyName terra.StringValue `hcl:"customer_managed_key_name,attr" validate:"required"`
	// CustomerManagedKeyVersionlessId: string, optional
	CustomerManagedKeyVersionlessId terra.StringValue `hcl:"customer_managed_key_versionless_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *synapseworkspacekey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseWorkspaceKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseWorkspaceKeyAttributes struct {
	ref terra.Reference
}

func (swk synapseWorkspaceKeyAttributes) Active() terra.BoolValue {
	return terra.ReferenceBool(swk.ref.Append("active"))
}

func (swk synapseWorkspaceKeyAttributes) CustomerManagedKeyName() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("customer_managed_key_name"))
}

func (swk synapseWorkspaceKeyAttributes) CustomerManagedKeyVersionlessId() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("customer_managed_key_versionless_id"))
}

func (swk synapseWorkspaceKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("id"))
}

func (swk synapseWorkspaceKeyAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("synapse_workspace_id"))
}

func (swk synapseWorkspaceKeyAttributes) Timeouts() synapseworkspacekey.TimeoutsAttributes {
	return terra.ReferenceSingle[synapseworkspacekey.TimeoutsAttributes](swk.ref.Append("timeouts"))
}

type synapseWorkspaceKeyState struct {
	Active                          bool                               `json:"active"`
	CustomerManagedKeyName          string                             `json:"customer_managed_key_name"`
	CustomerManagedKeyVersionlessId string                             `json:"customer_managed_key_versionless_id"`
	Id                              string                             `json:"id"`
	SynapseWorkspaceId              string                             `json:"synapse_workspace_id"`
	Timeouts                        *synapseworkspacekey.TimeoutsState `json:"timeouts"`
}
