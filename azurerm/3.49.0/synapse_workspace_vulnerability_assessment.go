// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapseworkspacevulnerabilityassessment "github.com/golingon/terraproviders/azurerm/3.49.0/synapseworkspacevulnerabilityassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseWorkspaceVulnerabilityAssessment(name string, args SynapseWorkspaceVulnerabilityAssessmentArgs) *SynapseWorkspaceVulnerabilityAssessment {
	return &SynapseWorkspaceVulnerabilityAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseWorkspaceVulnerabilityAssessment)(nil)

type SynapseWorkspaceVulnerabilityAssessment struct {
	Name  string
	Args  SynapseWorkspaceVulnerabilityAssessmentArgs
	state *synapseWorkspaceVulnerabilityAssessmentState
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) Type() string {
	return "azurerm_synapse_workspace_vulnerability_assessment"
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) LocalName() string {
	return swva.Name
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) Configuration() interface{} {
	return swva.Args
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) Attributes() synapseWorkspaceVulnerabilityAssessmentAttributes {
	return synapseWorkspaceVulnerabilityAssessmentAttributes{ref: terra.ReferenceResource(swva)}
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) ImportState(av io.Reader) error {
	swva.state = &synapseWorkspaceVulnerabilityAssessmentState{}
	if err := json.NewDecoder(av).Decode(swva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", swva.Type(), swva.LocalName(), err)
	}
	return nil
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) State() (*synapseWorkspaceVulnerabilityAssessmentState, bool) {
	return swva.state, swva.state != nil
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) StateMust() *synapseWorkspaceVulnerabilityAssessmentState {
	if swva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", swva.Type(), swva.LocalName()))
	}
	return swva.state
}

func (swva *SynapseWorkspaceVulnerabilityAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(swva)
}

type SynapseWorkspaceVulnerabilityAssessmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageContainerPath: string, required
	StorageContainerPath terra.StringValue `hcl:"storage_container_path,attr" validate:"required"`
	// StorageContainerSasKey: string, optional
	StorageContainerSasKey terra.StringValue `hcl:"storage_container_sas_key,attr"`
	// WorkspaceSecurityAlertPolicyId: string, required
	WorkspaceSecurityAlertPolicyId terra.StringValue `hcl:"workspace_security_alert_policy_id,attr" validate:"required"`
	// RecurringScans: optional
	RecurringScans *synapseworkspacevulnerabilityassessment.RecurringScans `hcl:"recurring_scans,block"`
	// Timeouts: optional
	Timeouts *synapseworkspacevulnerabilityassessment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseWorkspaceVulnerabilityAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseWorkspaceVulnerabilityAssessmentAttributes struct {
	ref terra.Reference
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(swva.ref.Append("id"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(swva.ref.Append("storage_account_access_key"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) StorageContainerPath() terra.StringValue {
	return terra.ReferenceString(swva.ref.Append("storage_container_path"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) StorageContainerSasKey() terra.StringValue {
	return terra.ReferenceString(swva.ref.Append("storage_container_sas_key"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) WorkspaceSecurityAlertPolicyId() terra.StringValue {
	return terra.ReferenceString(swva.ref.Append("workspace_security_alert_policy_id"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) RecurringScans() terra.ListValue[synapseworkspacevulnerabilityassessment.RecurringScansAttributes] {
	return terra.ReferenceList[synapseworkspacevulnerabilityassessment.RecurringScansAttributes](swva.ref.Append("recurring_scans"))
}

func (swva synapseWorkspaceVulnerabilityAssessmentAttributes) Timeouts() synapseworkspacevulnerabilityassessment.TimeoutsAttributes {
	return terra.ReferenceSingle[synapseworkspacevulnerabilityassessment.TimeoutsAttributes](swva.ref.Append("timeouts"))
}

type synapseWorkspaceVulnerabilityAssessmentState struct {
	Id                             string                                                        `json:"id"`
	StorageAccountAccessKey        string                                                        `json:"storage_account_access_key"`
	StorageContainerPath           string                                                        `json:"storage_container_path"`
	StorageContainerSasKey         string                                                        `json:"storage_container_sas_key"`
	WorkspaceSecurityAlertPolicyId string                                                        `json:"workspace_security_alert_policy_id"`
	RecurringScans                 []synapseworkspacevulnerabilityassessment.RecurringScansState `json:"recurring_scans"`
	Timeouts                       *synapseworkspacevulnerabilityassessment.TimeoutsState        `json:"timeouts"`
}
