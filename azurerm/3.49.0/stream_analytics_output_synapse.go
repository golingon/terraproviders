// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	streamanalyticsoutputsynapse "github.com/golingon/terraproviders/azurerm/3.49.0/streamanalyticsoutputsynapse"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStreamAnalyticsOutputSynapse(name string, args StreamAnalyticsOutputSynapseArgs) *StreamAnalyticsOutputSynapse {
	return &StreamAnalyticsOutputSynapse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StreamAnalyticsOutputSynapse)(nil)

type StreamAnalyticsOutputSynapse struct {
	Name  string
	Args  StreamAnalyticsOutputSynapseArgs
	state *streamAnalyticsOutputSynapseState
}

func (saos *StreamAnalyticsOutputSynapse) Type() string {
	return "azurerm_stream_analytics_output_synapse"
}

func (saos *StreamAnalyticsOutputSynapse) LocalName() string {
	return saos.Name
}

func (saos *StreamAnalyticsOutputSynapse) Configuration() interface{} {
	return saos.Args
}

func (saos *StreamAnalyticsOutputSynapse) Attributes() streamAnalyticsOutputSynapseAttributes {
	return streamAnalyticsOutputSynapseAttributes{ref: terra.ReferenceResource(saos)}
}

func (saos *StreamAnalyticsOutputSynapse) ImportState(av io.Reader) error {
	saos.state = &streamAnalyticsOutputSynapseState{}
	if err := json.NewDecoder(av).Decode(saos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saos.Type(), saos.LocalName(), err)
	}
	return nil
}

func (saos *StreamAnalyticsOutputSynapse) State() (*streamAnalyticsOutputSynapseState, bool) {
	return saos.state, saos.state != nil
}

func (saos *StreamAnalyticsOutputSynapse) StateMust() *streamAnalyticsOutputSynapseState {
	if saos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saos.Type(), saos.LocalName()))
	}
	return saos.state
}

func (saos *StreamAnalyticsOutputSynapse) DependOn() terra.Reference {
	return terra.ReferenceResource(saos)
}

type StreamAnalyticsOutputSynapseArgs struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// StreamAnalyticsJobName: string, required
	StreamAnalyticsJobName terra.StringValue `hcl:"stream_analytics_job_name,attr" validate:"required"`
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *streamanalyticsoutputsynapse.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StreamAnalyticsOutputSynapse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type streamAnalyticsOutputSynapseAttributes struct {
	ref terra.Reference
}

func (saos streamAnalyticsOutputSynapseAttributes) Database() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("database"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("id"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("name"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Password() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("password"))
}

func (saos streamAnalyticsOutputSynapseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("resource_group_name"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Server() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("server"))
}

func (saos streamAnalyticsOutputSynapseAttributes) StreamAnalyticsJobName() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("stream_analytics_job_name"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Table() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("table"))
}

func (saos streamAnalyticsOutputSynapseAttributes) User() terra.StringValue {
	return terra.ReferenceString(saos.ref.Append("user"))
}

func (saos streamAnalyticsOutputSynapseAttributes) Timeouts() streamanalyticsoutputsynapse.TimeoutsAttributes {
	return terra.ReferenceSingle[streamanalyticsoutputsynapse.TimeoutsAttributes](saos.ref.Append("timeouts"))
}

type streamAnalyticsOutputSynapseState struct {
	Database               string                                      `json:"database"`
	Id                     string                                      `json:"id"`
	Name                   string                                      `json:"name"`
	Password               string                                      `json:"password"`
	ResourceGroupName      string                                      `json:"resource_group_name"`
	Server                 string                                      `json:"server"`
	StreamAnalyticsJobName string                                      `json:"stream_analytics_job_name"`
	Table                  string                                      `json:"table"`
	User                   string                                      `json:"user"`
	Timeouts               *streamanalyticsoutputsynapse.TimeoutsState `json:"timeouts"`
}
