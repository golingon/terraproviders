// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	devtestvirtualnetwork "github.com/golingon/terraproviders/azurerm/3.49.0/devtestvirtualnetwork"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDevTestVirtualNetwork(name string, args DevTestVirtualNetworkArgs) *DevTestVirtualNetwork {
	return &DevTestVirtualNetwork{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevTestVirtualNetwork)(nil)

type DevTestVirtualNetwork struct {
	Name  string
	Args  DevTestVirtualNetworkArgs
	state *devTestVirtualNetworkState
}

func (dtvn *DevTestVirtualNetwork) Type() string {
	return "azurerm_dev_test_virtual_network"
}

func (dtvn *DevTestVirtualNetwork) LocalName() string {
	return dtvn.Name
}

func (dtvn *DevTestVirtualNetwork) Configuration() interface{} {
	return dtvn.Args
}

func (dtvn *DevTestVirtualNetwork) Attributes() devTestVirtualNetworkAttributes {
	return devTestVirtualNetworkAttributes{ref: terra.ReferenceResource(dtvn)}
}

func (dtvn *DevTestVirtualNetwork) ImportState(av io.Reader) error {
	dtvn.state = &devTestVirtualNetworkState{}
	if err := json.NewDecoder(av).Decode(dtvn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dtvn.Type(), dtvn.LocalName(), err)
	}
	return nil
}

func (dtvn *DevTestVirtualNetwork) State() (*devTestVirtualNetworkState, bool) {
	return dtvn.state, dtvn.state != nil
}

func (dtvn *DevTestVirtualNetwork) StateMust() *devTestVirtualNetworkState {
	if dtvn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dtvn.Type(), dtvn.LocalName()))
	}
	return dtvn.state
}

func (dtvn *DevTestVirtualNetwork) DependOn() terra.Reference {
	return terra.ReferenceResource(dtvn)
}

type DevTestVirtualNetworkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabName: string, required
	LabName terra.StringValue `hcl:"lab_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Subnet: optional
	Subnet *devtestvirtualnetwork.Subnet `hcl:"subnet,block"`
	// Timeouts: optional
	Timeouts *devtestvirtualnetwork.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DevTestVirtualNetwork depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type devTestVirtualNetworkAttributes struct {
	ref terra.Reference
}

func (dtvn devTestVirtualNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("description"))
}

func (dtvn devTestVirtualNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("id"))
}

func (dtvn devTestVirtualNetworkAttributes) LabName() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("lab_name"))
}

func (dtvn devTestVirtualNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("name"))
}

func (dtvn devTestVirtualNetworkAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("resource_group_name"))
}

func (dtvn devTestVirtualNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtvn.ref.Append("tags"))
}

func (dtvn devTestVirtualNetworkAttributes) UniqueIdentifier() terra.StringValue {
	return terra.ReferenceString(dtvn.ref.Append("unique_identifier"))
}

func (dtvn devTestVirtualNetworkAttributes) Subnet() terra.ListValue[devtestvirtualnetwork.SubnetAttributes] {
	return terra.ReferenceList[devtestvirtualnetwork.SubnetAttributes](dtvn.ref.Append("subnet"))
}

func (dtvn devTestVirtualNetworkAttributes) Timeouts() devtestvirtualnetwork.TimeoutsAttributes {
	return terra.ReferenceSingle[devtestvirtualnetwork.TimeoutsAttributes](dtvn.ref.Append("timeouts"))
}

type devTestVirtualNetworkState struct {
	Description       string                               `json:"description"`
	Id                string                               `json:"id"`
	LabName           string                               `json:"lab_name"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	UniqueIdentifier  string                               `json:"unique_identifier"`
	Subnet            []devtestvirtualnetwork.SubnetState  `json:"subnet"`
	Timeouts          *devtestvirtualnetwork.TimeoutsState `json:"timeouts"`
}
