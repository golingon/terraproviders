// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	keyvaultcertificatecontacts "github.com/golingon/terraproviders/azurerm/3.49.0/keyvaultcertificatecontacts"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKeyVaultCertificateContacts(name string, args KeyVaultCertificateContactsArgs) *KeyVaultCertificateContacts {
	return &KeyVaultCertificateContacts{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultCertificateContacts)(nil)

type KeyVaultCertificateContacts struct {
	Name  string
	Args  KeyVaultCertificateContactsArgs
	state *keyVaultCertificateContactsState
}

func (kvcc *KeyVaultCertificateContacts) Type() string {
	return "azurerm_key_vault_certificate_contacts"
}

func (kvcc *KeyVaultCertificateContacts) LocalName() string {
	return kvcc.Name
}

func (kvcc *KeyVaultCertificateContacts) Configuration() interface{} {
	return kvcc.Args
}

func (kvcc *KeyVaultCertificateContacts) Attributes() keyVaultCertificateContactsAttributes {
	return keyVaultCertificateContactsAttributes{ref: terra.ReferenceResource(kvcc)}
}

func (kvcc *KeyVaultCertificateContacts) ImportState(av io.Reader) error {
	kvcc.state = &keyVaultCertificateContactsState{}
	if err := json.NewDecoder(av).Decode(kvcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvcc.Type(), kvcc.LocalName(), err)
	}
	return nil
}

func (kvcc *KeyVaultCertificateContacts) State() (*keyVaultCertificateContactsState, bool) {
	return kvcc.state, kvcc.state != nil
}

func (kvcc *KeyVaultCertificateContacts) StateMust() *keyVaultCertificateContactsState {
	if kvcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvcc.Type(), kvcc.LocalName()))
	}
	return kvcc.state
}

func (kvcc *KeyVaultCertificateContacts) DependOn() terra.Reference {
	return terra.ReferenceResource(kvcc)
}

type KeyVaultCertificateContactsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Contact: min=1
	Contact []keyvaultcertificatecontacts.Contact `hcl:"contact,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *keyvaultcertificatecontacts.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KeyVaultCertificateContacts depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type keyVaultCertificateContactsAttributes struct {
	ref terra.Reference
}

func (kvcc keyVaultCertificateContactsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvcc.ref.Append("id"))
}

func (kvcc keyVaultCertificateContactsAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(kvcc.ref.Append("key_vault_id"))
}

func (kvcc keyVaultCertificateContactsAttributes) Contact() terra.SetValue[keyvaultcertificatecontacts.ContactAttributes] {
	return terra.ReferenceSet[keyvaultcertificatecontacts.ContactAttributes](kvcc.ref.Append("contact"))
}

func (kvcc keyVaultCertificateContactsAttributes) Timeouts() keyvaultcertificatecontacts.TimeoutsAttributes {
	return terra.ReferenceSingle[keyvaultcertificatecontacts.TimeoutsAttributes](kvcc.ref.Append("timeouts"))
}

type keyVaultCertificateContactsState struct {
	Id         string                                     `json:"id"`
	KeyVaultId string                                     `json:"key_vault_id"`
	Contact    []keyvaultcertificatecontacts.ContactState `json:"contact"`
	Timeouts   *keyvaultcertificatecontacts.TimeoutsState `json:"timeouts"`
}
