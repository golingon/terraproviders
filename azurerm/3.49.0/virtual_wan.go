// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualwan "github.com/golingon/terraproviders/azurerm/3.49.0/virtualwan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualWan(name string, args VirtualWanArgs) *VirtualWan {
	return &VirtualWan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualWan)(nil)

type VirtualWan struct {
	Name  string
	Args  VirtualWanArgs
	state *virtualWanState
}

func (vw *VirtualWan) Type() string {
	return "azurerm_virtual_wan"
}

func (vw *VirtualWan) LocalName() string {
	return vw.Name
}

func (vw *VirtualWan) Configuration() interface{} {
	return vw.Args
}

func (vw *VirtualWan) Attributes() virtualWanAttributes {
	return virtualWanAttributes{ref: terra.ReferenceResource(vw)}
}

func (vw *VirtualWan) ImportState(av io.Reader) error {
	vw.state = &virtualWanState{}
	if err := json.NewDecoder(av).Decode(vw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vw.Type(), vw.LocalName(), err)
	}
	return nil
}

func (vw *VirtualWan) State() (*virtualWanState, bool) {
	return vw.state, vw.state != nil
}

func (vw *VirtualWan) StateMust() *virtualWanState {
	if vw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vw.Type(), vw.LocalName()))
	}
	return vw.state
}

func (vw *VirtualWan) DependOn() terra.Reference {
	return terra.ReferenceResource(vw)
}

type VirtualWanArgs struct {
	// AllowBranchToBranchTraffic: bool, optional
	AllowBranchToBranchTraffic terra.BoolValue `hcl:"allow_branch_to_branch_traffic,attr"`
	// DisableVpnEncryption: bool, optional
	DisableVpnEncryption terra.BoolValue `hcl:"disable_vpn_encryption,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Office365LocalBreakoutCategory: string, optional
	Office365LocalBreakoutCategory terra.StringValue `hcl:"office365_local_breakout_category,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *virtualwan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualWan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualWanAttributes struct {
	ref terra.Reference
}

func (vw virtualWanAttributes) AllowBranchToBranchTraffic() terra.BoolValue {
	return terra.ReferenceBool(vw.ref.Append("allow_branch_to_branch_traffic"))
}

func (vw virtualWanAttributes) DisableVpnEncryption() terra.BoolValue {
	return terra.ReferenceBool(vw.ref.Append("disable_vpn_encryption"))
}

func (vw virtualWanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("id"))
}

func (vw virtualWanAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("location"))
}

func (vw virtualWanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("name"))
}

func (vw virtualWanAttributes) Office365LocalBreakoutCategory() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("office365_local_breakout_category"))
}

func (vw virtualWanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("resource_group_name"))
}

func (vw virtualWanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vw.ref.Append("tags"))
}

func (vw virtualWanAttributes) Type() terra.StringValue {
	return terra.ReferenceString(vw.ref.Append("type"))
}

func (vw virtualWanAttributes) Timeouts() virtualwan.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualwan.TimeoutsAttributes](vw.ref.Append("timeouts"))
}

type virtualWanState struct {
	AllowBranchToBranchTraffic     bool                      `json:"allow_branch_to_branch_traffic"`
	DisableVpnEncryption           bool                      `json:"disable_vpn_encryption"`
	Id                             string                    `json:"id"`
	Location                       string                    `json:"location"`
	Name                           string                    `json:"name"`
	Office365LocalBreakoutCategory string                    `json:"office365_local_breakout_category"`
	ResourceGroupName              string                    `json:"resource_group_name"`
	Tags                           map[string]string         `json:"tags"`
	Type                           string                    `json:"type"`
	Timeouts                       *virtualwan.TimeoutsState `json:"timeouts"`
}
