// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databricksworkspace "github.com/golingon/terraproviders/azurerm/3.49.0/databricksworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatabricksWorkspace(name string, args DatabricksWorkspaceArgs) *DatabricksWorkspace {
	return &DatabricksWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabricksWorkspace)(nil)

type DatabricksWorkspace struct {
	Name  string
	Args  DatabricksWorkspaceArgs
	state *databricksWorkspaceState
}

func (dw *DatabricksWorkspace) Type() string {
	return "azurerm_databricks_workspace"
}

func (dw *DatabricksWorkspace) LocalName() string {
	return dw.Name
}

func (dw *DatabricksWorkspace) Configuration() interface{} {
	return dw.Args
}

func (dw *DatabricksWorkspace) Attributes() databricksWorkspaceAttributes {
	return databricksWorkspaceAttributes{ref: terra.ReferenceResource(dw)}
}

func (dw *DatabricksWorkspace) ImportState(av io.Reader) error {
	dw.state = &databricksWorkspaceState{}
	if err := json.NewDecoder(av).Decode(dw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dw.Type(), dw.LocalName(), err)
	}
	return nil
}

func (dw *DatabricksWorkspace) State() (*databricksWorkspaceState, bool) {
	return dw.state, dw.state != nil
}

func (dw *DatabricksWorkspace) StateMust() *databricksWorkspaceState {
	if dw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dw.Type(), dw.LocalName()))
	}
	return dw.state
}

func (dw *DatabricksWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(dw)
}

type DatabricksWorkspaceArgs struct {
	// CustomerManagedKeyEnabled: bool, optional
	CustomerManagedKeyEnabled terra.BoolValue `hcl:"customer_managed_key_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureEncryptionEnabled: bool, optional
	InfrastructureEncryptionEnabled terra.BoolValue `hcl:"infrastructure_encryption_enabled,attr"`
	// LoadBalancerBackendAddressPoolId: string, optional
	LoadBalancerBackendAddressPoolId terra.StringValue `hcl:"load_balancer_backend_address_pool_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedDiskCmkKeyVaultKeyId: string, optional
	ManagedDiskCmkKeyVaultKeyId terra.StringValue `hcl:"managed_disk_cmk_key_vault_key_id,attr"`
	// ManagedDiskCmkRotationToLatestVersionEnabled: bool, optional
	ManagedDiskCmkRotationToLatestVersionEnabled terra.BoolValue `hcl:"managed_disk_cmk_rotation_to_latest_version_enabled,attr"`
	// ManagedResourceGroupName: string, optional
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr"`
	// ManagedServicesCmkKeyVaultKeyId: string, optional
	ManagedServicesCmkKeyVaultKeyId terra.StringValue `hcl:"managed_services_cmk_key_vault_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkSecurityGroupRulesRequired: string, optional
	NetworkSecurityGroupRulesRequired terra.StringValue `hcl:"network_security_group_rules_required,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ManagedDiskIdentity: min=0
	ManagedDiskIdentity []databricksworkspace.ManagedDiskIdentity `hcl:"managed_disk_identity,block" validate:"min=0"`
	// StorageAccountIdentity: min=0
	StorageAccountIdentity []databricksworkspace.StorageAccountIdentity `hcl:"storage_account_identity,block" validate:"min=0"`
	// CustomParameters: optional
	CustomParameters *databricksworkspace.CustomParameters `hcl:"custom_parameters,block"`
	// Timeouts: optional
	Timeouts *databricksworkspace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatabricksWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databricksWorkspaceAttributes struct {
	ref terra.Reference
}

func (dw databricksWorkspaceAttributes) CustomerManagedKeyEnabled() terra.BoolValue {
	return terra.ReferenceBool(dw.ref.Append("customer_managed_key_enabled"))
}

func (dw databricksWorkspaceAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("disk_encryption_set_id"))
}

func (dw databricksWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("id"))
}

func (dw databricksWorkspaceAttributes) InfrastructureEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceBool(dw.ref.Append("infrastructure_encryption_enabled"))
}

func (dw databricksWorkspaceAttributes) LoadBalancerBackendAddressPoolId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("load_balancer_backend_address_pool_id"))
}

func (dw databricksWorkspaceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("location"))
}

func (dw databricksWorkspaceAttributes) ManagedDiskCmkKeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("managed_disk_cmk_key_vault_key_id"))
}

func (dw databricksWorkspaceAttributes) ManagedDiskCmkRotationToLatestVersionEnabled() terra.BoolValue {
	return terra.ReferenceBool(dw.ref.Append("managed_disk_cmk_rotation_to_latest_version_enabled"))
}

func (dw databricksWorkspaceAttributes) ManagedResourceGroupId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("managed_resource_group_id"))
}

func (dw databricksWorkspaceAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("managed_resource_group_name"))
}

func (dw databricksWorkspaceAttributes) ManagedServicesCmkKeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("managed_services_cmk_key_vault_key_id"))
}

func (dw databricksWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("name"))
}

func (dw databricksWorkspaceAttributes) NetworkSecurityGroupRulesRequired() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("network_security_group_rules_required"))
}

func (dw databricksWorkspaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(dw.ref.Append("public_network_access_enabled"))
}

func (dw databricksWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("resource_group_name"))
}

func (dw databricksWorkspaceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("sku"))
}

func (dw databricksWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dw.ref.Append("tags"))
}

func (dw databricksWorkspaceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("workspace_id"))
}

func (dw databricksWorkspaceAttributes) WorkspaceUrl() terra.StringValue {
	return terra.ReferenceString(dw.ref.Append("workspace_url"))
}

func (dw databricksWorkspaceAttributes) ManagedDiskIdentity() terra.ListValue[databricksworkspace.ManagedDiskIdentityAttributes] {
	return terra.ReferenceList[databricksworkspace.ManagedDiskIdentityAttributes](dw.ref.Append("managed_disk_identity"))
}

func (dw databricksWorkspaceAttributes) StorageAccountIdentity() terra.ListValue[databricksworkspace.StorageAccountIdentityAttributes] {
	return terra.ReferenceList[databricksworkspace.StorageAccountIdentityAttributes](dw.ref.Append("storage_account_identity"))
}

func (dw databricksWorkspaceAttributes) CustomParameters() terra.ListValue[databricksworkspace.CustomParametersAttributes] {
	return terra.ReferenceList[databricksworkspace.CustomParametersAttributes](dw.ref.Append("custom_parameters"))
}

func (dw databricksWorkspaceAttributes) Timeouts() databricksworkspace.TimeoutsAttributes {
	return terra.ReferenceSingle[databricksworkspace.TimeoutsAttributes](dw.ref.Append("timeouts"))
}

type databricksWorkspaceState struct {
	CustomerManagedKeyEnabled                    bool                                              `json:"customer_managed_key_enabled"`
	DiskEncryptionSetId                          string                                            `json:"disk_encryption_set_id"`
	Id                                           string                                            `json:"id"`
	InfrastructureEncryptionEnabled              bool                                              `json:"infrastructure_encryption_enabled"`
	LoadBalancerBackendAddressPoolId             string                                            `json:"load_balancer_backend_address_pool_id"`
	Location                                     string                                            `json:"location"`
	ManagedDiskCmkKeyVaultKeyId                  string                                            `json:"managed_disk_cmk_key_vault_key_id"`
	ManagedDiskCmkRotationToLatestVersionEnabled bool                                              `json:"managed_disk_cmk_rotation_to_latest_version_enabled"`
	ManagedResourceGroupId                       string                                            `json:"managed_resource_group_id"`
	ManagedResourceGroupName                     string                                            `json:"managed_resource_group_name"`
	ManagedServicesCmkKeyVaultKeyId              string                                            `json:"managed_services_cmk_key_vault_key_id"`
	Name                                         string                                            `json:"name"`
	NetworkSecurityGroupRulesRequired            string                                            `json:"network_security_group_rules_required"`
	PublicNetworkAccessEnabled                   bool                                              `json:"public_network_access_enabled"`
	ResourceGroupName                            string                                            `json:"resource_group_name"`
	Sku                                          string                                            `json:"sku"`
	Tags                                         map[string]string                                 `json:"tags"`
	WorkspaceId                                  string                                            `json:"workspace_id"`
	WorkspaceUrl                                 string                                            `json:"workspace_url"`
	ManagedDiskIdentity                          []databricksworkspace.ManagedDiskIdentityState    `json:"managed_disk_identity"`
	StorageAccountIdentity                       []databricksworkspace.StorageAccountIdentityState `json:"storage_account_identity"`
	CustomParameters                             []databricksworkspace.CustomParametersState       `json:"custom_parameters"`
	Timeouts                                     *databricksworkspace.TimeoutsState                `json:"timeouts"`
}
