// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	serviceplan "github.com/golingon/terraproviders/azurerm/3.49.0/serviceplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicePlan(name string, args ServicePlanArgs) *ServicePlan {
	return &ServicePlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicePlan)(nil)

type ServicePlan struct {
	Name  string
	Args  ServicePlanArgs
	state *servicePlanState
}

func (sp *ServicePlan) Type() string {
	return "azurerm_service_plan"
}

func (sp *ServicePlan) LocalName() string {
	return sp.Name
}

func (sp *ServicePlan) Configuration() interface{} {
	return sp.Args
}

func (sp *ServicePlan) Attributes() servicePlanAttributes {
	return servicePlanAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *ServicePlan) ImportState(av io.Reader) error {
	sp.state = &servicePlanState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *ServicePlan) State() (*servicePlanState, bool) {
	return sp.state, sp.state != nil
}

func (sp *ServicePlan) StateMust() *servicePlanState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *ServicePlan) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type ServicePlanArgs struct {
	// AppServiceEnvironmentId: string, optional
	AppServiceEnvironmentId terra.StringValue `hcl:"app_service_environment_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumElasticWorkerCount: number, optional
	MaximumElasticWorkerCount terra.NumberValue `hcl:"maximum_elastic_worker_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
	// PerSiteScalingEnabled: bool, optional
	PerSiteScalingEnabled terra.BoolValue `hcl:"per_site_scaling_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkerCount: number, optional
	WorkerCount terra.NumberValue `hcl:"worker_count,attr"`
	// ZoneBalancingEnabled: bool, optional
	ZoneBalancingEnabled terra.BoolValue `hcl:"zone_balancing_enabled,attr"`
	// Timeouts: optional
	Timeouts *serviceplan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicePlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicePlanAttributes struct {
	ref terra.Reference
}

func (sp servicePlanAttributes) AppServiceEnvironmentId() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("app_service_environment_id"))
}

func (sp servicePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp servicePlanAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("kind"))
}

func (sp servicePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("location"))
}

func (sp servicePlanAttributes) MaximumElasticWorkerCount() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("maximum_elastic_worker_count"))
}

func (sp servicePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("name"))
}

func (sp servicePlanAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("os_type"))
}

func (sp servicePlanAttributes) PerSiteScalingEnabled() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("per_site_scaling_enabled"))
}

func (sp servicePlanAttributes) Reserved() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("reserved"))
}

func (sp servicePlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("resource_group_name"))
}

func (sp servicePlanAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("sku_name"))
}

func (sp servicePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp servicePlanAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("worker_count"))
}

func (sp servicePlanAttributes) ZoneBalancingEnabled() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("zone_balancing_enabled"))
}

func (sp servicePlanAttributes) Timeouts() serviceplan.TimeoutsAttributes {
	return terra.ReferenceSingle[serviceplan.TimeoutsAttributes](sp.ref.Append("timeouts"))
}

type servicePlanState struct {
	AppServiceEnvironmentId   string                     `json:"app_service_environment_id"`
	Id                        string                     `json:"id"`
	Kind                      string                     `json:"kind"`
	Location                  string                     `json:"location"`
	MaximumElasticWorkerCount float64                    `json:"maximum_elastic_worker_count"`
	Name                      string                     `json:"name"`
	OsType                    string                     `json:"os_type"`
	PerSiteScalingEnabled     bool                       `json:"per_site_scaling_enabled"`
	Reserved                  bool                       `json:"reserved"`
	ResourceGroupName         string                     `json:"resource_group_name"`
	SkuName                   string                     `json:"sku_name"`
	Tags                      map[string]string          `json:"tags"`
	WorkerCount               float64                    `json:"worker_count"`
	ZoneBalancingEnabled      bool                       `json:"zone_balancing_enabled"`
	Timeouts                  *serviceplan.TimeoutsState `json:"timeouts"`
}
