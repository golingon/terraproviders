// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dedicatedhostgroup "github.com/golingon/terraproviders/azurerm/3.49.0/dedicatedhostgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDedicatedHostGroup(name string, args DedicatedHostGroupArgs) *DedicatedHostGroup {
	return &DedicatedHostGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DedicatedHostGroup)(nil)

type DedicatedHostGroup struct {
	Name  string
	Args  DedicatedHostGroupArgs
	state *dedicatedHostGroupState
}

func (dhg *DedicatedHostGroup) Type() string {
	return "azurerm_dedicated_host_group"
}

func (dhg *DedicatedHostGroup) LocalName() string {
	return dhg.Name
}

func (dhg *DedicatedHostGroup) Configuration() interface{} {
	return dhg.Args
}

func (dhg *DedicatedHostGroup) Attributes() dedicatedHostGroupAttributes {
	return dedicatedHostGroupAttributes{ref: terra.ReferenceResource(dhg)}
}

func (dhg *DedicatedHostGroup) ImportState(av io.Reader) error {
	dhg.state = &dedicatedHostGroupState{}
	if err := json.NewDecoder(av).Decode(dhg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dhg.Type(), dhg.LocalName(), err)
	}
	return nil
}

func (dhg *DedicatedHostGroup) State() (*dedicatedHostGroupState, bool) {
	return dhg.state, dhg.state != nil
}

func (dhg *DedicatedHostGroup) StateMust() *dedicatedHostGroupState {
	if dhg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dhg.Type(), dhg.LocalName()))
	}
	return dhg.state
}

func (dhg *DedicatedHostGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dhg)
}

type DedicatedHostGroupArgs struct {
	// AutomaticPlacementEnabled: bool, optional
	AutomaticPlacementEnabled terra.BoolValue `hcl:"automatic_placement_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformFaultDomainCount: number, required
	PlatformFaultDomainCount terra.NumberValue `hcl:"platform_fault_domain_count,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *dedicatedhostgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DedicatedHostGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dedicatedHostGroupAttributes struct {
	ref terra.Reference
}

func (dhg dedicatedHostGroupAttributes) AutomaticPlacementEnabled() terra.BoolValue {
	return terra.ReferenceBool(dhg.ref.Append("automatic_placement_enabled"))
}

func (dhg dedicatedHostGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dhg.ref.Append("id"))
}

func (dhg dedicatedHostGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dhg.ref.Append("location"))
}

func (dhg dedicatedHostGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dhg.ref.Append("name"))
}

func (dhg dedicatedHostGroupAttributes) PlatformFaultDomainCount() terra.NumberValue {
	return terra.ReferenceNumber(dhg.ref.Append("platform_fault_domain_count"))
}

func (dhg dedicatedHostGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dhg.ref.Append("resource_group_name"))
}

func (dhg dedicatedHostGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dhg.ref.Append("tags"))
}

func (dhg dedicatedHostGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(dhg.ref.Append("zone"))
}

func (dhg dedicatedHostGroupAttributes) Timeouts() dedicatedhostgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[dedicatedhostgroup.TimeoutsAttributes](dhg.ref.Append("timeouts"))
}

type dedicatedHostGroupState struct {
	AutomaticPlacementEnabled bool                              `json:"automatic_placement_enabled"`
	Id                        string                            `json:"id"`
	Location                  string                            `json:"location"`
	Name                      string                            `json:"name"`
	PlatformFaultDomainCount  float64                           `json:"platform_fault_domain_count"`
	ResourceGroupName         string                            `json:"resource_group_name"`
	Tags                      map[string]string                 `json:"tags"`
	Zone                      string                            `json:"zone"`
	Timeouts                  *dedicatedhostgroup.TimeoutsState `json:"timeouts"`
}
