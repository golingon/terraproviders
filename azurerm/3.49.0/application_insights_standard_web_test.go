// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	applicationinsightsstandardwebtest "github.com/golingon/terraproviders/azurerm/3.49.0/applicationinsightsstandardwebtest"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApplicationInsightsStandardWebTest(name string, args ApplicationInsightsStandardWebTestArgs) *ApplicationInsightsStandardWebTest {
	return &ApplicationInsightsStandardWebTest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationInsightsStandardWebTest)(nil)

type ApplicationInsightsStandardWebTest struct {
	Name  string
	Args  ApplicationInsightsStandardWebTestArgs
	state *applicationInsightsStandardWebTestState
}

func (aiswt *ApplicationInsightsStandardWebTest) Type() string {
	return "azurerm_application_insights_standard_web_test"
}

func (aiswt *ApplicationInsightsStandardWebTest) LocalName() string {
	return aiswt.Name
}

func (aiswt *ApplicationInsightsStandardWebTest) Configuration() interface{} {
	return aiswt.Args
}

func (aiswt *ApplicationInsightsStandardWebTest) Attributes() applicationInsightsStandardWebTestAttributes {
	return applicationInsightsStandardWebTestAttributes{ref: terra.ReferenceResource(aiswt)}
}

func (aiswt *ApplicationInsightsStandardWebTest) ImportState(av io.Reader) error {
	aiswt.state = &applicationInsightsStandardWebTestState{}
	if err := json.NewDecoder(av).Decode(aiswt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiswt.Type(), aiswt.LocalName(), err)
	}
	return nil
}

func (aiswt *ApplicationInsightsStandardWebTest) State() (*applicationInsightsStandardWebTestState, bool) {
	return aiswt.state, aiswt.state != nil
}

func (aiswt *ApplicationInsightsStandardWebTest) StateMust() *applicationInsightsStandardWebTestState {
	if aiswt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiswt.Type(), aiswt.LocalName()))
	}
	return aiswt.state
}

func (aiswt *ApplicationInsightsStandardWebTest) DependOn() terra.Reference {
	return terra.ReferenceResource(aiswt)
}

type ApplicationInsightsStandardWebTestArgs struct {
	// ApplicationInsightsId: string, required
	ApplicationInsightsId terra.StringValue `hcl:"application_insights_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: number, optional
	Frequency terra.NumberValue `hcl:"frequency,attr"`
	// GeoLocations: list of string, required
	GeoLocations terra.ListValue[terra.StringValue] `hcl:"geo_locations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RetryEnabled: bool, optional
	RetryEnabled terra.BoolValue `hcl:"retry_enabled,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// Request: required
	Request *applicationinsightsstandardwebtest.Request `hcl:"request,block" validate:"required"`
	// Timeouts: optional
	Timeouts *applicationinsightsstandardwebtest.Timeouts `hcl:"timeouts,block"`
	// ValidationRules: optional
	ValidationRules *applicationinsightsstandardwebtest.ValidationRules `hcl:"validation_rules,block"`
	// DependsOn contains resources that ApplicationInsightsStandardWebTest depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type applicationInsightsStandardWebTestAttributes struct {
	ref terra.Reference
}

func (aiswt applicationInsightsStandardWebTestAttributes) ApplicationInsightsId() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("application_insights_id"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("description"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(aiswt.ref.Append("enabled"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Frequency() terra.NumberValue {
	return terra.ReferenceNumber(aiswt.ref.Append("frequency"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) GeoLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](aiswt.ref.Append("geo_locations"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("id"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Location() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("location"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("name"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("resource_group_name"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) RetryEnabled() terra.BoolValue {
	return terra.ReferenceBool(aiswt.ref.Append("retry_enabled"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) SyntheticMonitorId() terra.StringValue {
	return terra.ReferenceString(aiswt.ref.Append("synthetic_monitor_id"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aiswt.ref.Append("tags"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceNumber(aiswt.ref.Append("timeout"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Request() terra.ListValue[applicationinsightsstandardwebtest.RequestAttributes] {
	return terra.ReferenceList[applicationinsightsstandardwebtest.RequestAttributes](aiswt.ref.Append("request"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) Timeouts() applicationinsightsstandardwebtest.TimeoutsAttributes {
	return terra.ReferenceSingle[applicationinsightsstandardwebtest.TimeoutsAttributes](aiswt.ref.Append("timeouts"))
}

func (aiswt applicationInsightsStandardWebTestAttributes) ValidationRules() terra.ListValue[applicationinsightsstandardwebtest.ValidationRulesAttributes] {
	return terra.ReferenceList[applicationinsightsstandardwebtest.ValidationRulesAttributes](aiswt.ref.Append("validation_rules"))
}

type applicationInsightsStandardWebTestState struct {
	ApplicationInsightsId string                                                    `json:"application_insights_id"`
	Description           string                                                    `json:"description"`
	Enabled               bool                                                      `json:"enabled"`
	Frequency             float64                                                   `json:"frequency"`
	GeoLocations          []string                                                  `json:"geo_locations"`
	Id                    string                                                    `json:"id"`
	Location              string                                                    `json:"location"`
	Name                  string                                                    `json:"name"`
	ResourceGroupName     string                                                    `json:"resource_group_name"`
	RetryEnabled          bool                                                      `json:"retry_enabled"`
	SyntheticMonitorId    string                                                    `json:"synthetic_monitor_id"`
	Tags                  map[string]string                                         `json:"tags"`
	Timeout               float64                                                   `json:"timeout"`
	Request               []applicationinsightsstandardwebtest.RequestState         `json:"request"`
	Timeouts              *applicationinsightsstandardwebtest.TimeoutsState         `json:"timeouts"`
	ValidationRules       []applicationinsightsstandardwebtest.ValidationRulesState `json:"validation_rules"`
}
