// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitoractionruleactiongroup "github.com/golingon/terraproviders/azurerm/3.49.0/monitoractionruleactiongroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorActionRuleActionGroup(name string, args MonitorActionRuleActionGroupArgs) *MonitorActionRuleActionGroup {
	return &MonitorActionRuleActionGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorActionRuleActionGroup)(nil)

type MonitorActionRuleActionGroup struct {
	Name  string
	Args  MonitorActionRuleActionGroupArgs
	state *monitorActionRuleActionGroupState
}

func (marag *MonitorActionRuleActionGroup) Type() string {
	return "azurerm_monitor_action_rule_action_group"
}

func (marag *MonitorActionRuleActionGroup) LocalName() string {
	return marag.Name
}

func (marag *MonitorActionRuleActionGroup) Configuration() interface{} {
	return marag.Args
}

func (marag *MonitorActionRuleActionGroup) Attributes() monitorActionRuleActionGroupAttributes {
	return monitorActionRuleActionGroupAttributes{ref: terra.ReferenceResource(marag)}
}

func (marag *MonitorActionRuleActionGroup) ImportState(av io.Reader) error {
	marag.state = &monitorActionRuleActionGroupState{}
	if err := json.NewDecoder(av).Decode(marag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", marag.Type(), marag.LocalName(), err)
	}
	return nil
}

func (marag *MonitorActionRuleActionGroup) State() (*monitorActionRuleActionGroupState, bool) {
	return marag.state, marag.state != nil
}

func (marag *MonitorActionRuleActionGroup) StateMust() *monitorActionRuleActionGroupState {
	if marag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", marag.Type(), marag.LocalName()))
	}
	return marag.state
}

func (marag *MonitorActionRuleActionGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(marag)
}

type MonitorActionRuleActionGroupArgs struct {
	// ActionGroupId: string, required
	ActionGroupId terra.StringValue `hcl:"action_group_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Condition: optional
	Condition *monitoractionruleactiongroup.Condition `hcl:"condition,block"`
	// Scope: optional
	Scope *monitoractionruleactiongroup.Scope `hcl:"scope,block"`
	// Timeouts: optional
	Timeouts *monitoractionruleactiongroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorActionRuleActionGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorActionRuleActionGroupAttributes struct {
	ref terra.Reference
}

func (marag monitorActionRuleActionGroupAttributes) ActionGroupId() terra.StringValue {
	return terra.ReferenceString(marag.ref.Append("action_group_id"))
}

func (marag monitorActionRuleActionGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(marag.ref.Append("description"))
}

func (marag monitorActionRuleActionGroupAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(marag.ref.Append("enabled"))
}

func (marag monitorActionRuleActionGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(marag.ref.Append("id"))
}

func (marag monitorActionRuleActionGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(marag.ref.Append("name"))
}

func (marag monitorActionRuleActionGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(marag.ref.Append("resource_group_name"))
}

func (marag monitorActionRuleActionGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](marag.ref.Append("tags"))
}

func (marag monitorActionRuleActionGroupAttributes) Condition() terra.ListValue[monitoractionruleactiongroup.ConditionAttributes] {
	return terra.ReferenceList[monitoractionruleactiongroup.ConditionAttributes](marag.ref.Append("condition"))
}

func (marag monitorActionRuleActionGroupAttributes) Scope() terra.ListValue[monitoractionruleactiongroup.ScopeAttributes] {
	return terra.ReferenceList[monitoractionruleactiongroup.ScopeAttributes](marag.ref.Append("scope"))
}

func (marag monitorActionRuleActionGroupAttributes) Timeouts() monitoractionruleactiongroup.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoractionruleactiongroup.TimeoutsAttributes](marag.ref.Append("timeouts"))
}

type monitorActionRuleActionGroupState struct {
	ActionGroupId     string                                        `json:"action_group_id"`
	Description       string                                        `json:"description"`
	Enabled           bool                                          `json:"enabled"`
	Id                string                                        `json:"id"`
	Name              string                                        `json:"name"`
	ResourceGroupName string                                        `json:"resource_group_name"`
	Tags              map[string]string                             `json:"tags"`
	Condition         []monitoractionruleactiongroup.ConditionState `json:"condition"`
	Scope             []monitoractionruleactiongroup.ScopeState     `json:"scope"`
	Timeouts          *monitoractionruleactiongroup.TimeoutsState   `json:"timeouts"`
}
