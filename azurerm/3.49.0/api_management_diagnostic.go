// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementdiagnostic "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementdiagnostic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementDiagnostic(name string, args ApiManagementDiagnosticArgs) *ApiManagementDiagnostic {
	return &ApiManagementDiagnostic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementDiagnostic)(nil)

type ApiManagementDiagnostic struct {
	Name  string
	Args  ApiManagementDiagnosticArgs
	state *apiManagementDiagnosticState
}

func (amd *ApiManagementDiagnostic) Type() string {
	return "azurerm_api_management_diagnostic"
}

func (amd *ApiManagementDiagnostic) LocalName() string {
	return amd.Name
}

func (amd *ApiManagementDiagnostic) Configuration() interface{} {
	return amd.Args
}

func (amd *ApiManagementDiagnostic) Attributes() apiManagementDiagnosticAttributes {
	return apiManagementDiagnosticAttributes{ref: terra.ReferenceResource(amd)}
}

func (amd *ApiManagementDiagnostic) ImportState(av io.Reader) error {
	amd.state = &apiManagementDiagnosticState{}
	if err := json.NewDecoder(av).Decode(amd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amd.Type(), amd.LocalName(), err)
	}
	return nil
}

func (amd *ApiManagementDiagnostic) State() (*apiManagementDiagnosticState, bool) {
	return amd.state, amd.state != nil
}

func (amd *ApiManagementDiagnostic) StateMust() *apiManagementDiagnosticState {
	if amd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amd.Type(), amd.LocalName()))
	}
	return amd.state
}

func (amd *ApiManagementDiagnostic) DependOn() terra.Reference {
	return terra.ReferenceResource(amd)
}

type ApiManagementDiagnosticArgs struct {
	// AlwaysLogErrors: bool, optional
	AlwaysLogErrors terra.BoolValue `hcl:"always_log_errors,attr"`
	// ApiManagementLoggerId: string, required
	ApiManagementLoggerId terra.StringValue `hcl:"api_management_logger_id,attr" validate:"required"`
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// HttpCorrelationProtocol: string, optional
	HttpCorrelationProtocol terra.StringValue `hcl:"http_correlation_protocol,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identifier: string, required
	Identifier terra.StringValue `hcl:"identifier,attr" validate:"required"`
	// LogClientIp: bool, optional
	LogClientIp terra.BoolValue `hcl:"log_client_ip,attr"`
	// OperationNameFormat: string, optional
	OperationNameFormat terra.StringValue `hcl:"operation_name_format,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SamplingPercentage: number, optional
	SamplingPercentage terra.NumberValue `hcl:"sampling_percentage,attr"`
	// Verbosity: string, optional
	Verbosity terra.StringValue `hcl:"verbosity,attr"`
	// BackendRequest: optional
	BackendRequest *apimanagementdiagnostic.BackendRequest `hcl:"backend_request,block"`
	// BackendResponse: optional
	BackendResponse *apimanagementdiagnostic.BackendResponse `hcl:"backend_response,block"`
	// FrontendRequest: optional
	FrontendRequest *apimanagementdiagnostic.FrontendRequest `hcl:"frontend_request,block"`
	// FrontendResponse: optional
	FrontendResponse *apimanagementdiagnostic.FrontendResponse `hcl:"frontend_response,block"`
	// Timeouts: optional
	Timeouts *apimanagementdiagnostic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementDiagnostic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementDiagnosticAttributes struct {
	ref terra.Reference
}

func (amd apiManagementDiagnosticAttributes) AlwaysLogErrors() terra.BoolValue {
	return terra.ReferenceBool(amd.ref.Append("always_log_errors"))
}

func (amd apiManagementDiagnosticAttributes) ApiManagementLoggerId() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("api_management_logger_id"))
}

func (amd apiManagementDiagnosticAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("api_management_name"))
}

func (amd apiManagementDiagnosticAttributes) HttpCorrelationProtocol() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("http_correlation_protocol"))
}

func (amd apiManagementDiagnosticAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("id"))
}

func (amd apiManagementDiagnosticAttributes) Identifier() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("identifier"))
}

func (amd apiManagementDiagnosticAttributes) LogClientIp() terra.BoolValue {
	return terra.ReferenceBool(amd.ref.Append("log_client_ip"))
}

func (amd apiManagementDiagnosticAttributes) OperationNameFormat() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("operation_name_format"))
}

func (amd apiManagementDiagnosticAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("resource_group_name"))
}

func (amd apiManagementDiagnosticAttributes) SamplingPercentage() terra.NumberValue {
	return terra.ReferenceNumber(amd.ref.Append("sampling_percentage"))
}

func (amd apiManagementDiagnosticAttributes) Verbosity() terra.StringValue {
	return terra.ReferenceString(amd.ref.Append("verbosity"))
}

func (amd apiManagementDiagnosticAttributes) BackendRequest() terra.ListValue[apimanagementdiagnostic.BackendRequestAttributes] {
	return terra.ReferenceList[apimanagementdiagnostic.BackendRequestAttributes](amd.ref.Append("backend_request"))
}

func (amd apiManagementDiagnosticAttributes) BackendResponse() terra.ListValue[apimanagementdiagnostic.BackendResponseAttributes] {
	return terra.ReferenceList[apimanagementdiagnostic.BackendResponseAttributes](amd.ref.Append("backend_response"))
}

func (amd apiManagementDiagnosticAttributes) FrontendRequest() terra.ListValue[apimanagementdiagnostic.FrontendRequestAttributes] {
	return terra.ReferenceList[apimanagementdiagnostic.FrontendRequestAttributes](amd.ref.Append("frontend_request"))
}

func (amd apiManagementDiagnosticAttributes) FrontendResponse() terra.ListValue[apimanagementdiagnostic.FrontendResponseAttributes] {
	return terra.ReferenceList[apimanagementdiagnostic.FrontendResponseAttributes](amd.ref.Append("frontend_response"))
}

func (amd apiManagementDiagnosticAttributes) Timeouts() apimanagementdiagnostic.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementdiagnostic.TimeoutsAttributes](amd.ref.Append("timeouts"))
}

type apiManagementDiagnosticState struct {
	AlwaysLogErrors         bool                                            `json:"always_log_errors"`
	ApiManagementLoggerId   string                                          `json:"api_management_logger_id"`
	ApiManagementName       string                                          `json:"api_management_name"`
	HttpCorrelationProtocol string                                          `json:"http_correlation_protocol"`
	Id                      string                                          `json:"id"`
	Identifier              string                                          `json:"identifier"`
	LogClientIp             bool                                            `json:"log_client_ip"`
	OperationNameFormat     string                                          `json:"operation_name_format"`
	ResourceGroupName       string                                          `json:"resource_group_name"`
	SamplingPercentage      float64                                         `json:"sampling_percentage"`
	Verbosity               string                                          `json:"verbosity"`
	BackendRequest          []apimanagementdiagnostic.BackendRequestState   `json:"backend_request"`
	BackendResponse         []apimanagementdiagnostic.BackendResponseState  `json:"backend_response"`
	FrontendRequest         []apimanagementdiagnostic.FrontendRequestState  `json:"frontend_request"`
	FrontendResponse        []apimanagementdiagnostic.FrontendResponseState `json:"frontend_response"`
	Timeouts                *apimanagementdiagnostic.TimeoutsState          `json:"timeouts"`
}
