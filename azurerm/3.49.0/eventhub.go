// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhub "github.com/golingon/terraproviders/azurerm/3.49.0/eventhub"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhub(name string, args EventhubArgs) *Eventhub {
	return &Eventhub{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Eventhub)(nil)

type Eventhub struct {
	Name  string
	Args  EventhubArgs
	state *eventhubState
}

func (e *Eventhub) Type() string {
	return "azurerm_eventhub"
}

func (e *Eventhub) LocalName() string {
	return e.Name
}

func (e *Eventhub) Configuration() interface{} {
	return e.Args
}

func (e *Eventhub) Attributes() eventhubAttributes {
	return eventhubAttributes{ref: terra.ReferenceResource(e)}
}

func (e *Eventhub) ImportState(av io.Reader) error {
	e.state = &eventhubState{}
	if err := json.NewDecoder(av).Decode(e.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", e.Type(), e.LocalName(), err)
	}
	return nil
}

func (e *Eventhub) State() (*eventhubState, bool) {
	return e.state, e.state != nil
}

func (e *Eventhub) StateMust() *eventhubState {
	if e.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", e.Type(), e.LocalName()))
	}
	return e.state
}

func (e *Eventhub) DependOn() terra.Reference {
	return terra.ReferenceResource(e)
}

type EventhubArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MessageRetention: number, required
	MessageRetention terra.NumberValue `hcl:"message_retention,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// PartitionCount: number, required
	PartitionCount terra.NumberValue `hcl:"partition_count,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// CaptureDescription: optional
	CaptureDescription *eventhub.CaptureDescription `hcl:"capture_description,block"`
	// Timeouts: optional
	Timeouts *eventhub.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Eventhub depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubAttributes struct {
	ref terra.Reference
}

func (e eventhubAttributes) Id() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("id"))
}

func (e eventhubAttributes) MessageRetention() terra.NumberValue {
	return terra.ReferenceNumber(e.ref.Append("message_retention"))
}

func (e eventhubAttributes) Name() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("name"))
}

func (e eventhubAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("namespace_name"))
}

func (e eventhubAttributes) PartitionCount() terra.NumberValue {
	return terra.ReferenceNumber(e.ref.Append("partition_count"))
}

func (e eventhubAttributes) PartitionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](e.ref.Append("partition_ids"))
}

func (e eventhubAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("resource_group_name"))
}

func (e eventhubAttributes) Status() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("status"))
}

func (e eventhubAttributes) CaptureDescription() terra.ListValue[eventhub.CaptureDescriptionAttributes] {
	return terra.ReferenceList[eventhub.CaptureDescriptionAttributes](e.ref.Append("capture_description"))
}

func (e eventhubAttributes) Timeouts() eventhub.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhub.TimeoutsAttributes](e.ref.Append("timeouts"))
}

type eventhubState struct {
	Id                 string                             `json:"id"`
	MessageRetention   float64                            `json:"message_retention"`
	Name               string                             `json:"name"`
	NamespaceName      string                             `json:"namespace_name"`
	PartitionCount     float64                            `json:"partition_count"`
	PartitionIds       []string                           `json:"partition_ids"`
	ResourceGroupName  string                             `json:"resource_group_name"`
	Status             string                             `json:"status"`
	CaptureDescription []eventhub.CaptureDescriptionState `json:"capture_description"`
	Timeouts           *eventhub.TimeoutsState            `json:"timeouts"`
}
