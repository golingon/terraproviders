// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mysqlflexibleserverfirewallrule "github.com/golingon/terraproviders/azurerm/3.49.0/mysqlflexibleserverfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMysqlFlexibleServerFirewallRule(name string, args MysqlFlexibleServerFirewallRuleArgs) *MysqlFlexibleServerFirewallRule {
	return &MysqlFlexibleServerFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MysqlFlexibleServerFirewallRule)(nil)

type MysqlFlexibleServerFirewallRule struct {
	Name  string
	Args  MysqlFlexibleServerFirewallRuleArgs
	state *mysqlFlexibleServerFirewallRuleState
}

func (mfsfr *MysqlFlexibleServerFirewallRule) Type() string {
	return "azurerm_mysql_flexible_server_firewall_rule"
}

func (mfsfr *MysqlFlexibleServerFirewallRule) LocalName() string {
	return mfsfr.Name
}

func (mfsfr *MysqlFlexibleServerFirewallRule) Configuration() interface{} {
	return mfsfr.Args
}

func (mfsfr *MysqlFlexibleServerFirewallRule) Attributes() mysqlFlexibleServerFirewallRuleAttributes {
	return mysqlFlexibleServerFirewallRuleAttributes{ref: terra.ReferenceResource(mfsfr)}
}

func (mfsfr *MysqlFlexibleServerFirewallRule) ImportState(av io.Reader) error {
	mfsfr.state = &mysqlFlexibleServerFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(mfsfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mfsfr.Type(), mfsfr.LocalName(), err)
	}
	return nil
}

func (mfsfr *MysqlFlexibleServerFirewallRule) State() (*mysqlFlexibleServerFirewallRuleState, bool) {
	return mfsfr.state, mfsfr.state != nil
}

func (mfsfr *MysqlFlexibleServerFirewallRule) StateMust() *mysqlFlexibleServerFirewallRuleState {
	if mfsfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mfsfr.Type(), mfsfr.LocalName()))
	}
	return mfsfr.state
}

func (mfsfr *MysqlFlexibleServerFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mfsfr)
}

type MysqlFlexibleServerFirewallRuleArgs struct {
	// EndIpAddress: string, required
	EndIpAddress terra.StringValue `hcl:"end_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// StartIpAddress: string, required
	StartIpAddress terra.StringValue `hcl:"start_ip_address,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mysqlflexibleserverfirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MysqlFlexibleServerFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mysqlFlexibleServerFirewallRuleAttributes struct {
	ref terra.Reference
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) EndIpAddress() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("end_ip_address"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("id"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("name"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("resource_group_name"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("server_name"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) StartIpAddress() terra.StringValue {
	return terra.ReferenceString(mfsfr.ref.Append("start_ip_address"))
}

func (mfsfr mysqlFlexibleServerFirewallRuleAttributes) Timeouts() mysqlflexibleserverfirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[mysqlflexibleserverfirewallrule.TimeoutsAttributes](mfsfr.ref.Append("timeouts"))
}

type mysqlFlexibleServerFirewallRuleState struct {
	EndIpAddress      string                                         `json:"end_ip_address"`
	Id                string                                         `json:"id"`
	Name              string                                         `json:"name"`
	ResourceGroupName string                                         `json:"resource_group_name"`
	ServerName        string                                         `json:"server_name"`
	StartIpAddress    string                                         `json:"start_ip_address"`
	Timeouts          *mysqlflexibleserverfirewallrule.TimeoutsState `json:"timeouts"`
}
