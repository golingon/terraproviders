// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springclouddevtoolportal "github.com/golingon/terraproviders/azurerm/3.49.0/springclouddevtoolportal"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudDevToolPortal(name string, args SpringCloudDevToolPortalArgs) *SpringCloudDevToolPortal {
	return &SpringCloudDevToolPortal{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudDevToolPortal)(nil)

type SpringCloudDevToolPortal struct {
	Name  string
	Args  SpringCloudDevToolPortalArgs
	state *springCloudDevToolPortalState
}

func (scdtp *SpringCloudDevToolPortal) Type() string {
	return "azurerm_spring_cloud_dev_tool_portal"
}

func (scdtp *SpringCloudDevToolPortal) LocalName() string {
	return scdtp.Name
}

func (scdtp *SpringCloudDevToolPortal) Configuration() interface{} {
	return scdtp.Args
}

func (scdtp *SpringCloudDevToolPortal) Attributes() springCloudDevToolPortalAttributes {
	return springCloudDevToolPortalAttributes{ref: terra.ReferenceResource(scdtp)}
}

func (scdtp *SpringCloudDevToolPortal) ImportState(av io.Reader) error {
	scdtp.state = &springCloudDevToolPortalState{}
	if err := json.NewDecoder(av).Decode(scdtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scdtp.Type(), scdtp.LocalName(), err)
	}
	return nil
}

func (scdtp *SpringCloudDevToolPortal) State() (*springCloudDevToolPortalState, bool) {
	return scdtp.state, scdtp.state != nil
}

func (scdtp *SpringCloudDevToolPortal) StateMust() *springCloudDevToolPortalState {
	if scdtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scdtp.Type(), scdtp.LocalName()))
	}
	return scdtp.state
}

func (scdtp *SpringCloudDevToolPortal) DependOn() terra.Reference {
	return terra.ReferenceResource(scdtp)
}

type SpringCloudDevToolPortalArgs struct {
	// ApplicationAcceleratorEnabled: bool, optional
	ApplicationAcceleratorEnabled terra.BoolValue `hcl:"application_accelerator_enabled,attr"`
	// ApplicationLiveViewEnabled: bool, optional
	ApplicationLiveViewEnabled terra.BoolValue `hcl:"application_live_view_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Sso: optional
	Sso *springclouddevtoolportal.Sso `hcl:"sso,block"`
	// Timeouts: optional
	Timeouts *springclouddevtoolportal.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudDevToolPortal depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudDevToolPortalAttributes struct {
	ref terra.Reference
}

func (scdtp springCloudDevToolPortalAttributes) ApplicationAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceBool(scdtp.ref.Append("application_accelerator_enabled"))
}

func (scdtp springCloudDevToolPortalAttributes) ApplicationLiveViewEnabled() terra.BoolValue {
	return terra.ReferenceBool(scdtp.ref.Append("application_live_view_enabled"))
}

func (scdtp springCloudDevToolPortalAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scdtp.ref.Append("id"))
}

func (scdtp springCloudDevToolPortalAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scdtp.ref.Append("name"))
}

func (scdtp springCloudDevToolPortalAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(scdtp.ref.Append("public_network_access_enabled"))
}

func (scdtp springCloudDevToolPortalAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceString(scdtp.ref.Append("spring_cloud_service_id"))
}

func (scdtp springCloudDevToolPortalAttributes) Sso() terra.ListValue[springclouddevtoolportal.SsoAttributes] {
	return terra.ReferenceList[springclouddevtoolportal.SsoAttributes](scdtp.ref.Append("sso"))
}

func (scdtp springCloudDevToolPortalAttributes) Timeouts() springclouddevtoolportal.TimeoutsAttributes {
	return terra.ReferenceSingle[springclouddevtoolportal.TimeoutsAttributes](scdtp.ref.Append("timeouts"))
}

type springCloudDevToolPortalState struct {
	ApplicationAcceleratorEnabled bool                                    `json:"application_accelerator_enabled"`
	ApplicationLiveViewEnabled    bool                                    `json:"application_live_view_enabled"`
	Id                            string                                  `json:"id"`
	Name                          string                                  `json:"name"`
	PublicNetworkAccessEnabled    bool                                    `json:"public_network_access_enabled"`
	SpringCloudServiceId          string                                  `json:"spring_cloud_service_id"`
	Sso                           []springclouddevtoolportal.SsoState     `json:"sso"`
	Timeouts                      *springclouddevtoolportal.TimeoutsState `json:"timeouts"`
}
