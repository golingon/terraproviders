// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediastreaminglocator "github.com/golingon/terraproviders/azurerm/3.49.0/mediastreaminglocator"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaStreamingLocator(name string, args MediaStreamingLocatorArgs) *MediaStreamingLocator {
	return &MediaStreamingLocator{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaStreamingLocator)(nil)

type MediaStreamingLocator struct {
	Name  string
	Args  MediaStreamingLocatorArgs
	state *mediaStreamingLocatorState
}

func (msl *MediaStreamingLocator) Type() string {
	return "azurerm_media_streaming_locator"
}

func (msl *MediaStreamingLocator) LocalName() string {
	return msl.Name
}

func (msl *MediaStreamingLocator) Configuration() interface{} {
	return msl.Args
}

func (msl *MediaStreamingLocator) Attributes() mediaStreamingLocatorAttributes {
	return mediaStreamingLocatorAttributes{ref: terra.ReferenceResource(msl)}
}

func (msl *MediaStreamingLocator) ImportState(av io.Reader) error {
	msl.state = &mediaStreamingLocatorState{}
	if err := json.NewDecoder(av).Decode(msl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msl.Type(), msl.LocalName(), err)
	}
	return nil
}

func (msl *MediaStreamingLocator) State() (*mediaStreamingLocatorState, bool) {
	return msl.state, msl.state != nil
}

func (msl *MediaStreamingLocator) StateMust() *mediaStreamingLocatorState {
	if msl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msl.Type(), msl.LocalName()))
	}
	return msl.state
}

func (msl *MediaStreamingLocator) DependOn() terra.Reference {
	return terra.ReferenceResource(msl)
}

type MediaStreamingLocatorArgs struct {
	// AlternativeMediaId: string, optional
	AlternativeMediaId terra.StringValue `hcl:"alternative_media_id,attr"`
	// AssetName: string, required
	AssetName terra.StringValue `hcl:"asset_name,attr" validate:"required"`
	// DefaultContentKeyPolicyName: string, optional
	DefaultContentKeyPolicyName terra.StringValue `hcl:"default_content_key_policy_name,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// FilterNames: list of string, optional
	FilterNames terra.ListValue[terra.StringValue] `hcl:"filter_names,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// StreamingLocatorId: string, optional
	StreamingLocatorId terra.StringValue `hcl:"streaming_locator_id,attr"`
	// StreamingPolicyName: string, required
	StreamingPolicyName terra.StringValue `hcl:"streaming_policy_name,attr" validate:"required"`
	// ContentKey: min=0
	ContentKey []mediastreaminglocator.ContentKey `hcl:"content_key,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *mediastreaminglocator.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MediaStreamingLocator depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaStreamingLocatorAttributes struct {
	ref terra.Reference
}

func (msl mediaStreamingLocatorAttributes) AlternativeMediaId() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("alternative_media_id"))
}

func (msl mediaStreamingLocatorAttributes) AssetName() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("asset_name"))
}

func (msl mediaStreamingLocatorAttributes) DefaultContentKeyPolicyName() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("default_content_key_policy_name"))
}

func (msl mediaStreamingLocatorAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("end_time"))
}

func (msl mediaStreamingLocatorAttributes) FilterNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](msl.ref.Append("filter_names"))
}

func (msl mediaStreamingLocatorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("id"))
}

func (msl mediaStreamingLocatorAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("media_services_account_name"))
}

func (msl mediaStreamingLocatorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("name"))
}

func (msl mediaStreamingLocatorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("resource_group_name"))
}

func (msl mediaStreamingLocatorAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("start_time"))
}

func (msl mediaStreamingLocatorAttributes) StreamingLocatorId() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("streaming_locator_id"))
}

func (msl mediaStreamingLocatorAttributes) StreamingPolicyName() terra.StringValue {
	return terra.ReferenceString(msl.ref.Append("streaming_policy_name"))
}

func (msl mediaStreamingLocatorAttributes) ContentKey() terra.ListValue[mediastreaminglocator.ContentKeyAttributes] {
	return terra.ReferenceList[mediastreaminglocator.ContentKeyAttributes](msl.ref.Append("content_key"))
}

func (msl mediaStreamingLocatorAttributes) Timeouts() mediastreaminglocator.TimeoutsAttributes {
	return terra.ReferenceSingle[mediastreaminglocator.TimeoutsAttributes](msl.ref.Append("timeouts"))
}

type mediaStreamingLocatorState struct {
	AlternativeMediaId          string                                  `json:"alternative_media_id"`
	AssetName                   string                                  `json:"asset_name"`
	DefaultContentKeyPolicyName string                                  `json:"default_content_key_policy_name"`
	EndTime                     string                                  `json:"end_time"`
	FilterNames                 []string                                `json:"filter_names"`
	Id                          string                                  `json:"id"`
	MediaServicesAccountName    string                                  `json:"media_services_account_name"`
	Name                        string                                  `json:"name"`
	ResourceGroupName           string                                  `json:"resource_group_name"`
	StartTime                   string                                  `json:"start_time"`
	StreamingLocatorId          string                                  `json:"streaming_locator_id"`
	StreamingPolicyName         string                                  `json:"streaming_policy_name"`
	ContentKey                  []mediastreaminglocator.ContentKeyState `json:"content_key"`
	Timeouts                    *mediastreaminglocator.TimeoutsState    `json:"timeouts"`
}
