// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistrytoken "github.com/golingon/terraproviders/azurerm/3.49.0/containerregistrytoken"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerRegistryToken(name string, args ContainerRegistryTokenArgs) *ContainerRegistryToken {
	return &ContainerRegistryToken{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistryToken)(nil)

type ContainerRegistryToken struct {
	Name  string
	Args  ContainerRegistryTokenArgs
	state *containerRegistryTokenState
}

func (crt *ContainerRegistryToken) Type() string {
	return "azurerm_container_registry_token"
}

func (crt *ContainerRegistryToken) LocalName() string {
	return crt.Name
}

func (crt *ContainerRegistryToken) Configuration() interface{} {
	return crt.Args
}

func (crt *ContainerRegistryToken) Attributes() containerRegistryTokenAttributes {
	return containerRegistryTokenAttributes{ref: terra.ReferenceResource(crt)}
}

func (crt *ContainerRegistryToken) ImportState(av io.Reader) error {
	crt.state = &containerRegistryTokenState{}
	if err := json.NewDecoder(av).Decode(crt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crt.Type(), crt.LocalName(), err)
	}
	return nil
}

func (crt *ContainerRegistryToken) State() (*containerRegistryTokenState, bool) {
	return crt.state, crt.state != nil
}

func (crt *ContainerRegistryToken) StateMust() *containerRegistryTokenState {
	if crt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crt.Type(), crt.LocalName()))
	}
	return crt.state
}

func (crt *ContainerRegistryToken) DependOn() terra.Reference {
	return terra.ReferenceResource(crt)
}

type ContainerRegistryTokenArgs struct {
	// ContainerRegistryName: string, required
	ContainerRegistryName terra.StringValue `hcl:"container_registry_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScopeMapId: string, required
	ScopeMapId terra.StringValue `hcl:"scope_map_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *containerregistrytoken.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerRegistryToken depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerRegistryTokenAttributes struct {
	ref terra.Reference
}

func (crt containerRegistryTokenAttributes) ContainerRegistryName() terra.StringValue {
	return terra.ReferenceString(crt.ref.Append("container_registry_name"))
}

func (crt containerRegistryTokenAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(crt.ref.Append("enabled"))
}

func (crt containerRegistryTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crt.ref.Append("id"))
}

func (crt containerRegistryTokenAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crt.ref.Append("name"))
}

func (crt containerRegistryTokenAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(crt.ref.Append("resource_group_name"))
}

func (crt containerRegistryTokenAttributes) ScopeMapId() terra.StringValue {
	return terra.ReferenceString(crt.ref.Append("scope_map_id"))
}

func (crt containerRegistryTokenAttributes) Timeouts() containerregistrytoken.TimeoutsAttributes {
	return terra.ReferenceSingle[containerregistrytoken.TimeoutsAttributes](crt.ref.Append("timeouts"))
}

type containerRegistryTokenState struct {
	ContainerRegistryName string                                `json:"container_registry_name"`
	Enabled               bool                                  `json:"enabled"`
	Id                    string                                `json:"id"`
	Name                  string                                `json:"name"`
	ResourceGroupName     string                                `json:"resource_group_name"`
	ScopeMapId            string                                `json:"scope_map_id"`
	Timeouts              *containerregistrytoken.TimeoutsState `json:"timeouts"`
}
