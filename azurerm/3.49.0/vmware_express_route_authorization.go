// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	vmwareexpressrouteauthorization "github.com/golingon/terraproviders/azurerm/3.49.0/vmwareexpressrouteauthorization"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVmwareExpressRouteAuthorization(name string, args VmwareExpressRouteAuthorizationArgs) *VmwareExpressRouteAuthorization {
	return &VmwareExpressRouteAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VmwareExpressRouteAuthorization)(nil)

type VmwareExpressRouteAuthorization struct {
	Name  string
	Args  VmwareExpressRouteAuthorizationArgs
	state *vmwareExpressRouteAuthorizationState
}

func (vera *VmwareExpressRouteAuthorization) Type() string {
	return "azurerm_vmware_express_route_authorization"
}

func (vera *VmwareExpressRouteAuthorization) LocalName() string {
	return vera.Name
}

func (vera *VmwareExpressRouteAuthorization) Configuration() interface{} {
	return vera.Args
}

func (vera *VmwareExpressRouteAuthorization) Attributes() vmwareExpressRouteAuthorizationAttributes {
	return vmwareExpressRouteAuthorizationAttributes{ref: terra.ReferenceResource(vera)}
}

func (vera *VmwareExpressRouteAuthorization) ImportState(av io.Reader) error {
	vera.state = &vmwareExpressRouteAuthorizationState{}
	if err := json.NewDecoder(av).Decode(vera.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vera.Type(), vera.LocalName(), err)
	}
	return nil
}

func (vera *VmwareExpressRouteAuthorization) State() (*vmwareExpressRouteAuthorizationState, bool) {
	return vera.state, vera.state != nil
}

func (vera *VmwareExpressRouteAuthorization) StateMust() *vmwareExpressRouteAuthorizationState {
	if vera.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vera.Type(), vera.LocalName()))
	}
	return vera.state
}

func (vera *VmwareExpressRouteAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(vera)
}

type VmwareExpressRouteAuthorizationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateCloudId: string, required
	PrivateCloudId terra.StringValue `hcl:"private_cloud_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *vmwareexpressrouteauthorization.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VmwareExpressRouteAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vmwareExpressRouteAuthorizationAttributes struct {
	ref terra.Reference
}

func (vera vmwareExpressRouteAuthorizationAttributes) ExpressRouteAuthorizationId() terra.StringValue {
	return terra.ReferenceString(vera.ref.Append("express_route_authorization_id"))
}

func (vera vmwareExpressRouteAuthorizationAttributes) ExpressRouteAuthorizationKey() terra.StringValue {
	return terra.ReferenceString(vera.ref.Append("express_route_authorization_key"))
}

func (vera vmwareExpressRouteAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vera.ref.Append("id"))
}

func (vera vmwareExpressRouteAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vera.ref.Append("name"))
}

func (vera vmwareExpressRouteAuthorizationAttributes) PrivateCloudId() terra.StringValue {
	return terra.ReferenceString(vera.ref.Append("private_cloud_id"))
}

func (vera vmwareExpressRouteAuthorizationAttributes) Timeouts() vmwareexpressrouteauthorization.TimeoutsAttributes {
	return terra.ReferenceSingle[vmwareexpressrouteauthorization.TimeoutsAttributes](vera.ref.Append("timeouts"))
}

type vmwareExpressRouteAuthorizationState struct {
	ExpressRouteAuthorizationId  string                                         `json:"express_route_authorization_id"`
	ExpressRouteAuthorizationKey string                                         `json:"express_route_authorization_key"`
	Id                           string                                         `json:"id"`
	Name                         string                                         `json:"name"`
	PrivateCloudId               string                                         `json:"private_cloud_id"`
	Timeouts                     *vmwareexpressrouteauthorization.TimeoutsState `json:"timeouts"`
}
