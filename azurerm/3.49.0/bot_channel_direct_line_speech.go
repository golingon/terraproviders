// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	botchanneldirectlinespeech "github.com/golingon/terraproviders/azurerm/3.49.0/botchanneldirectlinespeech"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBotChannelDirectLineSpeech(name string, args BotChannelDirectLineSpeechArgs) *BotChannelDirectLineSpeech {
	return &BotChannelDirectLineSpeech{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BotChannelDirectLineSpeech)(nil)

type BotChannelDirectLineSpeech struct {
	Name  string
	Args  BotChannelDirectLineSpeechArgs
	state *botChannelDirectLineSpeechState
}

func (bcdls *BotChannelDirectLineSpeech) Type() string {
	return "azurerm_bot_channel_direct_line_speech"
}

func (bcdls *BotChannelDirectLineSpeech) LocalName() string {
	return bcdls.Name
}

func (bcdls *BotChannelDirectLineSpeech) Configuration() interface{} {
	return bcdls.Args
}

func (bcdls *BotChannelDirectLineSpeech) Attributes() botChannelDirectLineSpeechAttributes {
	return botChannelDirectLineSpeechAttributes{ref: terra.ReferenceResource(bcdls)}
}

func (bcdls *BotChannelDirectLineSpeech) ImportState(av io.Reader) error {
	bcdls.state = &botChannelDirectLineSpeechState{}
	if err := json.NewDecoder(av).Decode(bcdls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bcdls.Type(), bcdls.LocalName(), err)
	}
	return nil
}

func (bcdls *BotChannelDirectLineSpeech) State() (*botChannelDirectLineSpeechState, bool) {
	return bcdls.state, bcdls.state != nil
}

func (bcdls *BotChannelDirectLineSpeech) StateMust() *botChannelDirectLineSpeechState {
	if bcdls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bcdls.Type(), bcdls.LocalName()))
	}
	return bcdls.state
}

func (bcdls *BotChannelDirectLineSpeech) DependOn() terra.Reference {
	return terra.ReferenceResource(bcdls)
}

type BotChannelDirectLineSpeechArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// CognitiveServiceAccessKey: string, required
	CognitiveServiceAccessKey terra.StringValue `hcl:"cognitive_service_access_key,attr" validate:"required"`
	// CognitiveServiceLocation: string, required
	CognitiveServiceLocation terra.StringValue `hcl:"cognitive_service_location,attr" validate:"required"`
	// CustomSpeechModelId: string, optional
	CustomSpeechModelId terra.StringValue `hcl:"custom_speech_model_id,attr"`
	// CustomVoiceDeploymentId: string, optional
	CustomVoiceDeploymentId terra.StringValue `hcl:"custom_voice_deployment_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *botchanneldirectlinespeech.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BotChannelDirectLineSpeech depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type botChannelDirectLineSpeechAttributes struct {
	ref terra.Reference
}

func (bcdls botChannelDirectLineSpeechAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("bot_name"))
}

func (bcdls botChannelDirectLineSpeechAttributes) CognitiveServiceAccessKey() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("cognitive_service_access_key"))
}

func (bcdls botChannelDirectLineSpeechAttributes) CognitiveServiceLocation() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("cognitive_service_location"))
}

func (bcdls botChannelDirectLineSpeechAttributes) CustomSpeechModelId() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("custom_speech_model_id"))
}

func (bcdls botChannelDirectLineSpeechAttributes) CustomVoiceDeploymentId() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("custom_voice_deployment_id"))
}

func (bcdls botChannelDirectLineSpeechAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("id"))
}

func (bcdls botChannelDirectLineSpeechAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("location"))
}

func (bcdls botChannelDirectLineSpeechAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bcdls.ref.Append("resource_group_name"))
}

func (bcdls botChannelDirectLineSpeechAttributes) Timeouts() botchanneldirectlinespeech.TimeoutsAttributes {
	return terra.ReferenceSingle[botchanneldirectlinespeech.TimeoutsAttributes](bcdls.ref.Append("timeouts"))
}

type botChannelDirectLineSpeechState struct {
	BotName                   string                                    `json:"bot_name"`
	CognitiveServiceAccessKey string                                    `json:"cognitive_service_access_key"`
	CognitiveServiceLocation  string                                    `json:"cognitive_service_location"`
	CustomSpeechModelId       string                                    `json:"custom_speech_model_id"`
	CustomVoiceDeploymentId   string                                    `json:"custom_voice_deployment_id"`
	Id                        string                                    `json:"id"`
	Location                  string                                    `json:"location"`
	ResourceGroupName         string                                    `json:"resource_group_name"`
	Timeouts                  *botchanneldirectlinespeech.TimeoutsState `json:"timeouts"`
}
