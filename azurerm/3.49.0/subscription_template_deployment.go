// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subscriptiontemplatedeployment "github.com/golingon/terraproviders/azurerm/3.49.0/subscriptiontemplatedeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubscriptionTemplateDeployment(name string, args SubscriptionTemplateDeploymentArgs) *SubscriptionTemplateDeployment {
	return &SubscriptionTemplateDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubscriptionTemplateDeployment)(nil)

type SubscriptionTemplateDeployment struct {
	Name  string
	Args  SubscriptionTemplateDeploymentArgs
	state *subscriptionTemplateDeploymentState
}

func (std *SubscriptionTemplateDeployment) Type() string {
	return "azurerm_subscription_template_deployment"
}

func (std *SubscriptionTemplateDeployment) LocalName() string {
	return std.Name
}

func (std *SubscriptionTemplateDeployment) Configuration() interface{} {
	return std.Args
}

func (std *SubscriptionTemplateDeployment) Attributes() subscriptionTemplateDeploymentAttributes {
	return subscriptionTemplateDeploymentAttributes{ref: terra.ReferenceResource(std)}
}

func (std *SubscriptionTemplateDeployment) ImportState(av io.Reader) error {
	std.state = &subscriptionTemplateDeploymentState{}
	if err := json.NewDecoder(av).Decode(std.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", std.Type(), std.LocalName(), err)
	}
	return nil
}

func (std *SubscriptionTemplateDeployment) State() (*subscriptionTemplateDeploymentState, bool) {
	return std.state, std.state != nil
}

func (std *SubscriptionTemplateDeployment) StateMust() *subscriptionTemplateDeploymentState {
	if std.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", std.Type(), std.LocalName()))
	}
	return std.state
}

func (std *SubscriptionTemplateDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(std)
}

type SubscriptionTemplateDeploymentArgs struct {
	// DebugLevel: string, optional
	DebugLevel terra.StringValue `hcl:"debug_level,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersContent: string, optional
	ParametersContent terra.StringValue `hcl:"parameters_content,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TemplateContent: string, optional
	TemplateContent terra.StringValue `hcl:"template_content,attr"`
	// TemplateSpecVersionId: string, optional
	TemplateSpecVersionId terra.StringValue `hcl:"template_spec_version_id,attr"`
	// Timeouts: optional
	Timeouts *subscriptiontemplatedeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubscriptionTemplateDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subscriptionTemplateDeploymentAttributes struct {
	ref terra.Reference
}

func (std subscriptionTemplateDeploymentAttributes) DebugLevel() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("debug_level"))
}

func (std subscriptionTemplateDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("id"))
}

func (std subscriptionTemplateDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("location"))
}

func (std subscriptionTemplateDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("name"))
}

func (std subscriptionTemplateDeploymentAttributes) OutputContent() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("output_content"))
}

func (std subscriptionTemplateDeploymentAttributes) ParametersContent() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("parameters_content"))
}

func (std subscriptionTemplateDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](std.ref.Append("tags"))
}

func (std subscriptionTemplateDeploymentAttributes) TemplateContent() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("template_content"))
}

func (std subscriptionTemplateDeploymentAttributes) TemplateSpecVersionId() terra.StringValue {
	return terra.ReferenceString(std.ref.Append("template_spec_version_id"))
}

func (std subscriptionTemplateDeploymentAttributes) Timeouts() subscriptiontemplatedeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[subscriptiontemplatedeployment.TimeoutsAttributes](std.ref.Append("timeouts"))
}

type subscriptionTemplateDeploymentState struct {
	DebugLevel            string                                        `json:"debug_level"`
	Id                    string                                        `json:"id"`
	Location              string                                        `json:"location"`
	Name                  string                                        `json:"name"`
	OutputContent         string                                        `json:"output_content"`
	ParametersContent     string                                        `json:"parameters_content"`
	Tags                  map[string]string                             `json:"tags"`
	TemplateContent       string                                        `json:"template_content"`
	TemplateSpecVersionId string                                        `json:"template_spec_version_id"`
	Timeouts              *subscriptiontemplatedeployment.TimeoutsState `json:"timeouts"`
}
