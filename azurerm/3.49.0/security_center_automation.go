// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterautomation "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterautomation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterAutomation(name string, args SecurityCenterAutomationArgs) *SecurityCenterAutomation {
	return &SecurityCenterAutomation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterAutomation)(nil)

type SecurityCenterAutomation struct {
	Name  string
	Args  SecurityCenterAutomationArgs
	state *securityCenterAutomationState
}

func (sca *SecurityCenterAutomation) Type() string {
	return "azurerm_security_center_automation"
}

func (sca *SecurityCenterAutomation) LocalName() string {
	return sca.Name
}

func (sca *SecurityCenterAutomation) Configuration() interface{} {
	return sca.Args
}

func (sca *SecurityCenterAutomation) Attributes() securityCenterAutomationAttributes {
	return securityCenterAutomationAttributes{ref: terra.ReferenceResource(sca)}
}

func (sca *SecurityCenterAutomation) ImportState(av io.Reader) error {
	sca.state = &securityCenterAutomationState{}
	if err := json.NewDecoder(av).Decode(sca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sca.Type(), sca.LocalName(), err)
	}
	return nil
}

func (sca *SecurityCenterAutomation) State() (*securityCenterAutomationState, bool) {
	return sca.state, sca.state != nil
}

func (sca *SecurityCenterAutomation) StateMust() *securityCenterAutomationState {
	if sca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sca.Type(), sca.LocalName()))
	}
	return sca.state
}

func (sca *SecurityCenterAutomation) DependOn() terra.Reference {
	return terra.ReferenceResource(sca)
}

type SecurityCenterAutomationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: list of string, required
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=1
	Action []securitycenterautomation.Action `hcl:"action,block" validate:"min=1"`
	// Source: min=1
	Source []securitycenterautomation.Source `hcl:"source,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *securitycenterautomation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterAutomation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterAutomationAttributes struct {
	ref terra.Reference
}

func (sca securityCenterAutomationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("description"))
}

func (sca securityCenterAutomationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(sca.ref.Append("enabled"))
}

func (sca securityCenterAutomationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("id"))
}

func (sca securityCenterAutomationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("location"))
}

func (sca securityCenterAutomationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("name"))
}

func (sca securityCenterAutomationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("resource_group_name"))
}

func (sca securityCenterAutomationAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](sca.ref.Append("scopes"))
}

func (sca securityCenterAutomationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sca.ref.Append("tags"))
}

func (sca securityCenterAutomationAttributes) Action() terra.ListValue[securitycenterautomation.ActionAttributes] {
	return terra.ReferenceList[securitycenterautomation.ActionAttributes](sca.ref.Append("action"))
}

func (sca securityCenterAutomationAttributes) Source() terra.ListValue[securitycenterautomation.SourceAttributes] {
	return terra.ReferenceList[securitycenterautomation.SourceAttributes](sca.ref.Append("source"))
}

func (sca securityCenterAutomationAttributes) Timeouts() securitycenterautomation.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterautomation.TimeoutsAttributes](sca.ref.Append("timeouts"))
}

type securityCenterAutomationState struct {
	Description       string                                  `json:"description"`
	Enabled           bool                                    `json:"enabled"`
	Id                string                                  `json:"id"`
	Location          string                                  `json:"location"`
	Name              string                                  `json:"name"`
	ResourceGroupName string                                  `json:"resource_group_name"`
	Scopes            []string                                `json:"scopes"`
	Tags              map[string]string                       `json:"tags"`
	Action            []securitycenterautomation.ActionState  `json:"action"`
	Source            []securitycenterautomation.SourceState  `json:"source"`
	Timeouts          *securitycenterautomation.TimeoutsState `json:"timeouts"`
}
