// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsresolveroutboundendpoint "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsresolveroutboundendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsResolverOutboundEndpoint(name string, args PrivateDnsResolverOutboundEndpointArgs) *PrivateDnsResolverOutboundEndpoint {
	return &PrivateDnsResolverOutboundEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsResolverOutboundEndpoint)(nil)

type PrivateDnsResolverOutboundEndpoint struct {
	Name  string
	Args  PrivateDnsResolverOutboundEndpointArgs
	state *privateDnsResolverOutboundEndpointState
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) Type() string {
	return "azurerm_private_dns_resolver_outbound_endpoint"
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) LocalName() string {
	return pdroe.Name
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) Configuration() interface{} {
	return pdroe.Args
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) Attributes() privateDnsResolverOutboundEndpointAttributes {
	return privateDnsResolverOutboundEndpointAttributes{ref: terra.ReferenceResource(pdroe)}
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) ImportState(av io.Reader) error {
	pdroe.state = &privateDnsResolverOutboundEndpointState{}
	if err := json.NewDecoder(av).Decode(pdroe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdroe.Type(), pdroe.LocalName(), err)
	}
	return nil
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) State() (*privateDnsResolverOutboundEndpointState, bool) {
	return pdroe.state, pdroe.state != nil
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) StateMust() *privateDnsResolverOutboundEndpointState {
	if pdroe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdroe.Type(), pdroe.LocalName()))
	}
	return pdroe.state
}

func (pdroe *PrivateDnsResolverOutboundEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(pdroe)
}

type PrivateDnsResolverOutboundEndpointArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateDnsResolverId: string, required
	PrivateDnsResolverId terra.StringValue `hcl:"private_dns_resolver_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *privatednsresolveroutboundendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsResolverOutboundEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsResolverOutboundEndpointAttributes struct {
	ref terra.Reference
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdroe.ref.Append("id"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pdroe.ref.Append("location"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdroe.ref.Append("name"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) PrivateDnsResolverId() terra.StringValue {
	return terra.ReferenceString(pdroe.ref.Append("private_dns_resolver_id"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(pdroe.ref.Append("subnet_id"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdroe.ref.Append("tags"))
}

func (pdroe privateDnsResolverOutboundEndpointAttributes) Timeouts() privatednsresolveroutboundendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsresolveroutboundendpoint.TimeoutsAttributes](pdroe.ref.Append("timeouts"))
}

type privateDnsResolverOutboundEndpointState struct {
	Id                   string                                            `json:"id"`
	Location             string                                            `json:"location"`
	Name                 string                                            `json:"name"`
	PrivateDnsResolverId string                                            `json:"private_dns_resolver_id"`
	SubnetId             string                                            `json:"subnet_id"`
	Tags                 map[string]string                                 `json:"tags"`
	Timeouts             *privatednsresolveroutboundendpoint.TimeoutsState `json:"timeouts"`
}
