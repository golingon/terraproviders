// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dnszone "github.com/golingon/terraproviders/azurerm/3.49.0/dnszone"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsZone(name string, args DnsZoneArgs) *DnsZone {
	return &DnsZone{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsZone)(nil)

type DnsZone struct {
	Name  string
	Args  DnsZoneArgs
	state *dnsZoneState
}

func (dz *DnsZone) Type() string {
	return "azurerm_dns_zone"
}

func (dz *DnsZone) LocalName() string {
	return dz.Name
}

func (dz *DnsZone) Configuration() interface{} {
	return dz.Args
}

func (dz *DnsZone) Attributes() dnsZoneAttributes {
	return dnsZoneAttributes{ref: terra.ReferenceResource(dz)}
}

func (dz *DnsZone) ImportState(av io.Reader) error {
	dz.state = &dnsZoneState{}
	if err := json.NewDecoder(av).Decode(dz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dz.Type(), dz.LocalName(), err)
	}
	return nil
}

func (dz *DnsZone) State() (*dnsZoneState, bool) {
	return dz.state, dz.state != nil
}

func (dz *DnsZone) StateMust() *dnsZoneState {
	if dz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dz.Type(), dz.LocalName()))
	}
	return dz.state
}

func (dz *DnsZone) DependOn() terra.Reference {
	return terra.ReferenceResource(dz)
}

type DnsZoneArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// SoaRecord: optional
	SoaRecord *dnszone.SoaRecord `hcl:"soa_record,block"`
	// Timeouts: optional
	Timeouts *dnszone.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsZone depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsZoneAttributes struct {
	ref terra.Reference
}

func (dz dnsZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("id"))
}

func (dz dnsZoneAttributes) MaxNumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceNumber(dz.ref.Append("max_number_of_record_sets"))
}

func (dz dnsZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("name"))
}

func (dz dnsZoneAttributes) NameServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dz.ref.Append("name_servers"))
}

func (dz dnsZoneAttributes) NumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceNumber(dz.ref.Append("number_of_record_sets"))
}

func (dz dnsZoneAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dz.ref.Append("resource_group_name"))
}

func (dz dnsZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dz.ref.Append("tags"))
}

func (dz dnsZoneAttributes) SoaRecord() terra.ListValue[dnszone.SoaRecordAttributes] {
	return terra.ReferenceList[dnszone.SoaRecordAttributes](dz.ref.Append("soa_record"))
}

func (dz dnsZoneAttributes) Timeouts() dnszone.TimeoutsAttributes {
	return terra.ReferenceSingle[dnszone.TimeoutsAttributes](dz.ref.Append("timeouts"))
}

type dnsZoneState struct {
	Id                    string                   `json:"id"`
	MaxNumberOfRecordSets float64                  `json:"max_number_of_record_sets"`
	Name                  string                   `json:"name"`
	NameServers           []string                 `json:"name_servers"`
	NumberOfRecordSets    float64                  `json:"number_of_record_sets"`
	ResourceGroupName     string                   `json:"resource_group_name"`
	Tags                  map[string]string        `json:"tags"`
	SoaRecord             []dnszone.SoaRecordState `json:"soa_record"`
	Timeouts              *dnszone.TimeoutsState   `json:"timeouts"`
}
