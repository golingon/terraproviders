// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedserviceazurefilestorage "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedserviceazurefilestorage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceAzureFileStorage(name string, args DataFactoryLinkedServiceAzureFileStorageArgs) *DataFactoryLinkedServiceAzureFileStorage {
	return &DataFactoryLinkedServiceAzureFileStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceAzureFileStorage)(nil)

type DataFactoryLinkedServiceAzureFileStorage struct {
	Name  string
	Args  DataFactoryLinkedServiceAzureFileStorageArgs
	state *dataFactoryLinkedServiceAzureFileStorageState
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) Type() string {
	return "azurerm_data_factory_linked_service_azure_file_storage"
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) LocalName() string {
	return dflsafs.Name
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) Configuration() interface{} {
	return dflsafs.Args
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) Attributes() dataFactoryLinkedServiceAzureFileStorageAttributes {
	return dataFactoryLinkedServiceAzureFileStorageAttributes{ref: terra.ReferenceResource(dflsafs)}
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) ImportState(av io.Reader) error {
	dflsafs.state = &dataFactoryLinkedServiceAzureFileStorageState{}
	if err := json.NewDecoder(av).Decode(dflsafs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsafs.Type(), dflsafs.LocalName(), err)
	}
	return nil
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) State() (*dataFactoryLinkedServiceAzureFileStorageState, bool) {
	return dflsafs.state, dflsafs.state != nil
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) StateMust() *dataFactoryLinkedServiceAzureFileStorageState {
	if dflsafs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsafs.Type(), dflsafs.LocalName()))
	}
	return dflsafs.state
}

func (dflsafs *DataFactoryLinkedServiceAzureFileStorage) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsafs)
}

type DataFactoryLinkedServiceAzureFileStorageArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FileShare: string, optional
	FileShare terra.StringValue `hcl:"file_share,attr"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// UserId: string, optional
	UserId terra.StringValue `hcl:"user_id,attr"`
	// KeyVaultPassword: optional
	KeyVaultPassword *datafactorylinkedserviceazurefilestorage.KeyVaultPassword `hcl:"key_vault_password,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedserviceazurefilestorage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceAzureFileStorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceAzureFileStorageAttributes struct {
	ref terra.Reference
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsafs.ref.Append("additional_properties"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsafs.ref.Append("annotations"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("connection_string"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("data_factory_id"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("description"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) FileShare() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("file_share"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Host() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("host"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("id"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("integration_runtime_name"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("name"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsafs.ref.Append("parameters"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Password() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("password"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) UserId() terra.StringValue {
	return terra.ReferenceString(dflsafs.ref.Append("user_id"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) KeyVaultPassword() terra.ListValue[datafactorylinkedserviceazurefilestorage.KeyVaultPasswordAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceazurefilestorage.KeyVaultPasswordAttributes](dflsafs.ref.Append("key_vault_password"))
}

func (dflsafs dataFactoryLinkedServiceAzureFileStorageAttributes) Timeouts() datafactorylinkedserviceazurefilestorage.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedserviceazurefilestorage.TimeoutsAttributes](dflsafs.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceAzureFileStorageState struct {
	AdditionalProperties   map[string]string                                                `json:"additional_properties"`
	Annotations            []string                                                         `json:"annotations"`
	ConnectionString       string                                                           `json:"connection_string"`
	DataFactoryId          string                                                           `json:"data_factory_id"`
	Description            string                                                           `json:"description"`
	FileShare              string                                                           `json:"file_share"`
	Host                   string                                                           `json:"host"`
	Id                     string                                                           `json:"id"`
	IntegrationRuntimeName string                                                           `json:"integration_runtime_name"`
	Name                   string                                                           `json:"name"`
	Parameters             map[string]string                                                `json:"parameters"`
	Password               string                                                           `json:"password"`
	UserId                 string                                                           `json:"user_id"`
	KeyVaultPassword       []datafactorylinkedserviceazurefilestorage.KeyVaultPasswordState `json:"key_vault_password"`
	Timeouts               *datafactorylinkedserviceazurefilestorage.TimeoutsState          `json:"timeouts"`
}
