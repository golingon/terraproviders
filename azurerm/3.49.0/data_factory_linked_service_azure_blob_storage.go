// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedserviceazureblobstorage "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedserviceazureblobstorage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceAzureBlobStorage(name string, args DataFactoryLinkedServiceAzureBlobStorageArgs) *DataFactoryLinkedServiceAzureBlobStorage {
	return &DataFactoryLinkedServiceAzureBlobStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceAzureBlobStorage)(nil)

type DataFactoryLinkedServiceAzureBlobStorage struct {
	Name  string
	Args  DataFactoryLinkedServiceAzureBlobStorageArgs
	state *dataFactoryLinkedServiceAzureBlobStorageState
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) Type() string {
	return "azurerm_data_factory_linked_service_azure_blob_storage"
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) LocalName() string {
	return dflsabs.Name
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) Configuration() interface{} {
	return dflsabs.Args
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) Attributes() dataFactoryLinkedServiceAzureBlobStorageAttributes {
	return dataFactoryLinkedServiceAzureBlobStorageAttributes{ref: terra.ReferenceResource(dflsabs)}
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) ImportState(av io.Reader) error {
	dflsabs.state = &dataFactoryLinkedServiceAzureBlobStorageState{}
	if err := json.NewDecoder(av).Decode(dflsabs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsabs.Type(), dflsabs.LocalName(), err)
	}
	return nil
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) State() (*dataFactoryLinkedServiceAzureBlobStorageState, bool) {
	return dflsabs.state, dflsabs.state != nil
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) StateMust() *dataFactoryLinkedServiceAzureBlobStorageState {
	if dflsabs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsabs.Type(), dflsabs.LocalName()))
	}
	return dflsabs.state
}

func (dflsabs *DataFactoryLinkedServiceAzureBlobStorage) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsabs)
}

type DataFactoryLinkedServiceAzureBlobStorageArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// ConnectionStringInsecure: string, optional
	ConnectionStringInsecure terra.StringValue `hcl:"connection_string_insecure,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SasUri: string, optional
	SasUri terra.StringValue `hcl:"sas_uri,attr"`
	// ServiceEndpoint: string, optional
	ServiceEndpoint terra.StringValue `hcl:"service_endpoint,attr"`
	// ServicePrincipalId: string, optional
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr"`
	// ServicePrincipalKey: string, optional
	ServicePrincipalKey terra.StringValue `hcl:"service_principal_key,attr"`
	// StorageKind: string, optional
	StorageKind terra.StringValue `hcl:"storage_kind,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// UseManagedIdentity: bool, optional
	UseManagedIdentity terra.BoolValue `hcl:"use_managed_identity,attr"`
	// KeyVaultSasToken: optional
	KeyVaultSasToken *datafactorylinkedserviceazureblobstorage.KeyVaultSasToken `hcl:"key_vault_sas_token,block"`
	// ServicePrincipalLinkedKeyVaultKey: optional
	ServicePrincipalLinkedKeyVaultKey *datafactorylinkedserviceazureblobstorage.ServicePrincipalLinkedKeyVaultKey `hcl:"service_principal_linked_key_vault_key,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedserviceazureblobstorage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceAzureBlobStorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceAzureBlobStorageAttributes struct {
	ref terra.Reference
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsabs.ref.Append("additional_properties"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsabs.ref.Append("annotations"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("connection_string"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ConnectionStringInsecure() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("connection_string_insecure"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("data_factory_id"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("description"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("id"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("integration_runtime_name"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("name"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsabs.ref.Append("parameters"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) SasUri() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("sas_uri"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ServiceEndpoint() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("service_endpoint"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("service_principal_id"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ServicePrincipalKey() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("service_principal_key"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) StorageKind() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("storage_kind"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(dflsabs.ref.Append("tenant_id"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) UseManagedIdentity() terra.BoolValue {
	return terra.ReferenceBool(dflsabs.ref.Append("use_managed_identity"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) KeyVaultSasToken() terra.ListValue[datafactorylinkedserviceazureblobstorage.KeyVaultSasTokenAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceazureblobstorage.KeyVaultSasTokenAttributes](dflsabs.ref.Append("key_vault_sas_token"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) ServicePrincipalLinkedKeyVaultKey() terra.ListValue[datafactorylinkedserviceazureblobstorage.ServicePrincipalLinkedKeyVaultKeyAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceazureblobstorage.ServicePrincipalLinkedKeyVaultKeyAttributes](dflsabs.ref.Append("service_principal_linked_key_vault_key"))
}

func (dflsabs dataFactoryLinkedServiceAzureBlobStorageAttributes) Timeouts() datafactorylinkedserviceazureblobstorage.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedserviceazureblobstorage.TimeoutsAttributes](dflsabs.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceAzureBlobStorageState struct {
	AdditionalProperties              map[string]string                                                                 `json:"additional_properties"`
	Annotations                       []string                                                                          `json:"annotations"`
	ConnectionString                  string                                                                            `json:"connection_string"`
	ConnectionStringInsecure          string                                                                            `json:"connection_string_insecure"`
	DataFactoryId                     string                                                                            `json:"data_factory_id"`
	Description                       string                                                                            `json:"description"`
	Id                                string                                                                            `json:"id"`
	IntegrationRuntimeName            string                                                                            `json:"integration_runtime_name"`
	Name                              string                                                                            `json:"name"`
	Parameters                        map[string]string                                                                 `json:"parameters"`
	SasUri                            string                                                                            `json:"sas_uri"`
	ServiceEndpoint                   string                                                                            `json:"service_endpoint"`
	ServicePrincipalId                string                                                                            `json:"service_principal_id"`
	ServicePrincipalKey               string                                                                            `json:"service_principal_key"`
	StorageKind                       string                                                                            `json:"storage_kind"`
	TenantId                          string                                                                            `json:"tenant_id"`
	UseManagedIdentity                bool                                                                              `json:"use_managed_identity"`
	KeyVaultSasToken                  []datafactorylinkedserviceazureblobstorage.KeyVaultSasTokenState                  `json:"key_vault_sas_token"`
	ServicePrincipalLinkedKeyVaultKey []datafactorylinkedserviceazureblobstorage.ServicePrincipalLinkedKeyVaultKeyState `json:"service_principal_linked_key_vault_key"`
	Timeouts                          *datafactorylinkedserviceazureblobstorage.TimeoutsState                           `json:"timeouts"`
}
