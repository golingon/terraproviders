// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubnamespaceauthorizationrule "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubnamespaceauthorizationrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubNamespaceAuthorizationRule(name string, args EventhubNamespaceAuthorizationRuleArgs) *EventhubNamespaceAuthorizationRule {
	return &EventhubNamespaceAuthorizationRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubNamespaceAuthorizationRule)(nil)

type EventhubNamespaceAuthorizationRule struct {
	Name  string
	Args  EventhubNamespaceAuthorizationRuleArgs
	state *eventhubNamespaceAuthorizationRuleState
}

func (enar *EventhubNamespaceAuthorizationRule) Type() string {
	return "azurerm_eventhub_namespace_authorization_rule"
}

func (enar *EventhubNamespaceAuthorizationRule) LocalName() string {
	return enar.Name
}

func (enar *EventhubNamespaceAuthorizationRule) Configuration() interface{} {
	return enar.Args
}

func (enar *EventhubNamespaceAuthorizationRule) Attributes() eventhubNamespaceAuthorizationRuleAttributes {
	return eventhubNamespaceAuthorizationRuleAttributes{ref: terra.ReferenceResource(enar)}
}

func (enar *EventhubNamespaceAuthorizationRule) ImportState(av io.Reader) error {
	enar.state = &eventhubNamespaceAuthorizationRuleState{}
	if err := json.NewDecoder(av).Decode(enar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", enar.Type(), enar.LocalName(), err)
	}
	return nil
}

func (enar *EventhubNamespaceAuthorizationRule) State() (*eventhubNamespaceAuthorizationRuleState, bool) {
	return enar.state, enar.state != nil
}

func (enar *EventhubNamespaceAuthorizationRule) StateMust() *eventhubNamespaceAuthorizationRuleState {
	if enar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", enar.Type(), enar.LocalName()))
	}
	return enar.state
}

func (enar *EventhubNamespaceAuthorizationRule) DependOn() terra.Reference {
	return terra.ReferenceResource(enar)
}

type EventhubNamespaceAuthorizationRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Listen: bool, optional
	Listen terra.BoolValue `hcl:"listen,attr"`
	// Manage: bool, optional
	Manage terra.BoolValue `hcl:"manage,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Send: bool, optional
	Send terra.BoolValue `hcl:"send,attr"`
	// Timeouts: optional
	Timeouts *eventhubnamespaceauthorizationrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubNamespaceAuthorizationRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubNamespaceAuthorizationRuleAttributes struct {
	ref terra.Reference
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("id"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Listen() terra.BoolValue {
	return terra.ReferenceBool(enar.ref.Append("listen"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Manage() terra.BoolValue {
	return terra.ReferenceBool(enar.ref.Append("manage"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("name"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("namespace_name"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("primary_connection_string"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) PrimaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("primary_connection_string_alias"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("primary_key"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("resource_group_name"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("secondary_connection_string"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) SecondaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("secondary_connection_string_alias"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(enar.ref.Append("secondary_key"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Send() terra.BoolValue {
	return terra.ReferenceBool(enar.ref.Append("send"))
}

func (enar eventhubNamespaceAuthorizationRuleAttributes) Timeouts() eventhubnamespaceauthorizationrule.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubnamespaceauthorizationrule.TimeoutsAttributes](enar.ref.Append("timeouts"))
}

type eventhubNamespaceAuthorizationRuleState struct {
	Id                             string                                            `json:"id"`
	Listen                         bool                                              `json:"listen"`
	Manage                         bool                                              `json:"manage"`
	Name                           string                                            `json:"name"`
	NamespaceName                  string                                            `json:"namespace_name"`
	PrimaryConnectionString        string                                            `json:"primary_connection_string"`
	PrimaryConnectionStringAlias   string                                            `json:"primary_connection_string_alias"`
	PrimaryKey                     string                                            `json:"primary_key"`
	ResourceGroupName              string                                            `json:"resource_group_name"`
	SecondaryConnectionString      string                                            `json:"secondary_connection_string"`
	SecondaryConnectionStringAlias string                                            `json:"secondary_connection_string_alias"`
	SecondaryKey                   string                                            `json:"secondary_key"`
	Send                           bool                                              `json:"send"`
	Timeouts                       *eventhubnamespaceauthorizationrule.TimeoutsState `json:"timeouts"`
}
