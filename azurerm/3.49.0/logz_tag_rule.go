// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logztagrule "github.com/golingon/terraproviders/azurerm/3.49.0/logztagrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogzTagRule(name string, args LogzTagRuleArgs) *LogzTagRule {
	return &LogzTagRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogzTagRule)(nil)

type LogzTagRule struct {
	Name  string
	Args  LogzTagRuleArgs
	state *logzTagRuleState
}

func (ltr *LogzTagRule) Type() string {
	return "azurerm_logz_tag_rule"
}

func (ltr *LogzTagRule) LocalName() string {
	return ltr.Name
}

func (ltr *LogzTagRule) Configuration() interface{} {
	return ltr.Args
}

func (ltr *LogzTagRule) Attributes() logzTagRuleAttributes {
	return logzTagRuleAttributes{ref: terra.ReferenceResource(ltr)}
}

func (ltr *LogzTagRule) ImportState(av io.Reader) error {
	ltr.state = &logzTagRuleState{}
	if err := json.NewDecoder(av).Decode(ltr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ltr.Type(), ltr.LocalName(), err)
	}
	return nil
}

func (ltr *LogzTagRule) State() (*logzTagRuleState, bool) {
	return ltr.state, ltr.state != nil
}

func (ltr *LogzTagRule) StateMust() *logzTagRuleState {
	if ltr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ltr.Type(), ltr.LocalName()))
	}
	return ltr.state
}

func (ltr *LogzTagRule) DependOn() terra.Reference {
	return terra.ReferenceResource(ltr)
}

type LogzTagRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogzMonitorId: string, required
	LogzMonitorId terra.StringValue `hcl:"logz_monitor_id,attr" validate:"required"`
	// SendAadLogs: bool, optional
	SendAadLogs terra.BoolValue `hcl:"send_aad_logs,attr"`
	// SendActivityLogs: bool, optional
	SendActivityLogs terra.BoolValue `hcl:"send_activity_logs,attr"`
	// SendSubscriptionLogs: bool, optional
	SendSubscriptionLogs terra.BoolValue `hcl:"send_subscription_logs,attr"`
	// TagFilter: min=0,max=10
	TagFilter []logztagrule.TagFilter `hcl:"tag_filter,block" validate:"min=0,max=10"`
	// Timeouts: optional
	Timeouts *logztagrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogzTagRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logzTagRuleAttributes struct {
	ref terra.Reference
}

func (ltr logzTagRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ltr.ref.Append("id"))
}

func (ltr logzTagRuleAttributes) LogzMonitorId() terra.StringValue {
	return terra.ReferenceString(ltr.ref.Append("logz_monitor_id"))
}

func (ltr logzTagRuleAttributes) SendAadLogs() terra.BoolValue {
	return terra.ReferenceBool(ltr.ref.Append("send_aad_logs"))
}

func (ltr logzTagRuleAttributes) SendActivityLogs() terra.BoolValue {
	return terra.ReferenceBool(ltr.ref.Append("send_activity_logs"))
}

func (ltr logzTagRuleAttributes) SendSubscriptionLogs() terra.BoolValue {
	return terra.ReferenceBool(ltr.ref.Append("send_subscription_logs"))
}

func (ltr logzTagRuleAttributes) TagFilter() terra.ListValue[logztagrule.TagFilterAttributes] {
	return terra.ReferenceList[logztagrule.TagFilterAttributes](ltr.ref.Append("tag_filter"))
}

func (ltr logzTagRuleAttributes) Timeouts() logztagrule.TimeoutsAttributes {
	return terra.ReferenceSingle[logztagrule.TimeoutsAttributes](ltr.ref.Append("timeouts"))
}

type logzTagRuleState struct {
	Id                   string                       `json:"id"`
	LogzMonitorId        string                       `json:"logz_monitor_id"`
	SendAadLogs          bool                         `json:"send_aad_logs"`
	SendActivityLogs     bool                         `json:"send_activity_logs"`
	SendSubscriptionLogs bool                         `json:"send_subscription_logs"`
	TagFilter            []logztagrule.TagFilterState `json:"tag_filter"`
	Timeouts             *logztagrule.TimeoutsState   `json:"timeouts"`
}
