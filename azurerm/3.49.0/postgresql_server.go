// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlserver "github.com/golingon/terraproviders/azurerm/3.49.0/postgresqlserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPostgresqlServer(name string, args PostgresqlServerArgs) *PostgresqlServer {
	return &PostgresqlServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlServer)(nil)

type PostgresqlServer struct {
	Name  string
	Args  PostgresqlServerArgs
	state *postgresqlServerState
}

func (ps *PostgresqlServer) Type() string {
	return "azurerm_postgresql_server"
}

func (ps *PostgresqlServer) LocalName() string {
	return ps.Name
}

func (ps *PostgresqlServer) Configuration() interface{} {
	return ps.Args
}

func (ps *PostgresqlServer) Attributes() postgresqlServerAttributes {
	return postgresqlServerAttributes{ref: terra.ReferenceResource(ps)}
}

func (ps *PostgresqlServer) ImportState(av io.Reader) error {
	ps.state = &postgresqlServerState{}
	if err := json.NewDecoder(av).Decode(ps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ps.Type(), ps.LocalName(), err)
	}
	return nil
}

func (ps *PostgresqlServer) State() (*postgresqlServerState, bool) {
	return ps.state, ps.state != nil
}

func (ps *PostgresqlServer) StateMust() *postgresqlServerState {
	if ps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ps.Type(), ps.LocalName()))
	}
	return ps.state
}

func (ps *PostgresqlServer) DependOn() terra.Reference {
	return terra.ReferenceResource(ps)
}

type PostgresqlServerArgs struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorLoginPassword: string, optional
	AdministratorLoginPassword terra.StringValue `hcl:"administrator_login_password,attr"`
	// AutoGrowEnabled: bool, optional
	AutoGrowEnabled terra.BoolValue `hcl:"auto_grow_enabled,attr"`
	// BackupRetentionDays: number, optional
	BackupRetentionDays terra.NumberValue `hcl:"backup_retention_days,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// CreationSourceServerId: string, optional
	CreationSourceServerId terra.StringValue `hcl:"creation_source_server_id,attr"`
	// GeoRedundantBackupEnabled: bool, optional
	GeoRedundantBackupEnabled terra.BoolValue `hcl:"geo_redundant_backup_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureEncryptionEnabled: bool, optional
	InfrastructureEncryptionEnabled terra.BoolValue `hcl:"infrastructure_encryption_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RestorePointInTime: string, optional
	RestorePointInTime terra.StringValue `hcl:"restore_point_in_time,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SslEnforcementEnabled: bool, required
	SslEnforcementEnabled terra.BoolValue `hcl:"ssl_enforcement_enabled,attr" validate:"required"`
	// SslMinimalTlsVersionEnforced: string, optional
	SslMinimalTlsVersionEnforced terra.StringValue `hcl:"ssl_minimal_tls_version_enforced,attr"`
	// StorageMb: number, optional
	StorageMb terra.NumberValue `hcl:"storage_mb,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Identity: optional
	Identity *postgresqlserver.Identity `hcl:"identity,block"`
	// ThreatDetectionPolicy: optional
	ThreatDetectionPolicy *postgresqlserver.ThreatDetectionPolicy `hcl:"threat_detection_policy,block"`
	// Timeouts: optional
	Timeouts *postgresqlserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PostgresqlServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type postgresqlServerAttributes struct {
	ref terra.Reference
}

func (ps postgresqlServerAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("administrator_login"))
}

func (ps postgresqlServerAttributes) AdministratorLoginPassword() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("administrator_login_password"))
}

func (ps postgresqlServerAttributes) AutoGrowEnabled() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("auto_grow_enabled"))
}

func (ps postgresqlServerAttributes) BackupRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(ps.ref.Append("backup_retention_days"))
}

func (ps postgresqlServerAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("create_mode"))
}

func (ps postgresqlServerAttributes) CreationSourceServerId() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("creation_source_server_id"))
}

func (ps postgresqlServerAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("fqdn"))
}

func (ps postgresqlServerAttributes) GeoRedundantBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("geo_redundant_backup_enabled"))
}

func (ps postgresqlServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("id"))
}

func (ps postgresqlServerAttributes) InfrastructureEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("infrastructure_encryption_enabled"))
}

func (ps postgresqlServerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("location"))
}

func (ps postgresqlServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("name"))
}

func (ps postgresqlServerAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("public_network_access_enabled"))
}

func (ps postgresqlServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("resource_group_name"))
}

func (ps postgresqlServerAttributes) RestorePointInTime() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("restore_point_in_time"))
}

func (ps postgresqlServerAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("sku_name"))
}

func (ps postgresqlServerAttributes) SslEnforcementEnabled() terra.BoolValue {
	return terra.ReferenceBool(ps.ref.Append("ssl_enforcement_enabled"))
}

func (ps postgresqlServerAttributes) SslMinimalTlsVersionEnforced() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("ssl_minimal_tls_version_enforced"))
}

func (ps postgresqlServerAttributes) StorageMb() terra.NumberValue {
	return terra.ReferenceNumber(ps.ref.Append("storage_mb"))
}

func (ps postgresqlServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ps.ref.Append("tags"))
}

func (ps postgresqlServerAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("version"))
}

func (ps postgresqlServerAttributes) Identity() terra.ListValue[postgresqlserver.IdentityAttributes] {
	return terra.ReferenceList[postgresqlserver.IdentityAttributes](ps.ref.Append("identity"))
}

func (ps postgresqlServerAttributes) ThreatDetectionPolicy() terra.ListValue[postgresqlserver.ThreatDetectionPolicyAttributes] {
	return terra.ReferenceList[postgresqlserver.ThreatDetectionPolicyAttributes](ps.ref.Append("threat_detection_policy"))
}

func (ps postgresqlServerAttributes) Timeouts() postgresqlserver.TimeoutsAttributes {
	return terra.ReferenceSingle[postgresqlserver.TimeoutsAttributes](ps.ref.Append("timeouts"))
}

type postgresqlServerState struct {
	AdministratorLogin              string                                        `json:"administrator_login"`
	AdministratorLoginPassword      string                                        `json:"administrator_login_password"`
	AutoGrowEnabled                 bool                                          `json:"auto_grow_enabled"`
	BackupRetentionDays             float64                                       `json:"backup_retention_days"`
	CreateMode                      string                                        `json:"create_mode"`
	CreationSourceServerId          string                                        `json:"creation_source_server_id"`
	Fqdn                            string                                        `json:"fqdn"`
	GeoRedundantBackupEnabled       bool                                          `json:"geo_redundant_backup_enabled"`
	Id                              string                                        `json:"id"`
	InfrastructureEncryptionEnabled bool                                          `json:"infrastructure_encryption_enabled"`
	Location                        string                                        `json:"location"`
	Name                            string                                        `json:"name"`
	PublicNetworkAccessEnabled      bool                                          `json:"public_network_access_enabled"`
	ResourceGroupName               string                                        `json:"resource_group_name"`
	RestorePointInTime              string                                        `json:"restore_point_in_time"`
	SkuName                         string                                        `json:"sku_name"`
	SslEnforcementEnabled           bool                                          `json:"ssl_enforcement_enabled"`
	SslMinimalTlsVersionEnforced    string                                        `json:"ssl_minimal_tls_version_enforced"`
	StorageMb                       float64                                       `json:"storage_mb"`
	Tags                            map[string]string                             `json:"tags"`
	Version                         string                                        `json:"version"`
	Identity                        []postgresqlserver.IdentityState              `json:"identity"`
	ThreatDetectionPolicy           []postgresqlserver.ThreatDetectionPolicyState `json:"threat_detection_policy"`
	Timeouts                        *postgresqlserver.TimeoutsState               `json:"timeouts"`
}
