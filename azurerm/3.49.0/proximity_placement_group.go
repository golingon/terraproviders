// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	proximityplacementgroup "github.com/golingon/terraproviders/azurerm/3.49.0/proximityplacementgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProximityPlacementGroup(name string, args ProximityPlacementGroupArgs) *ProximityPlacementGroup {
	return &ProximityPlacementGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProximityPlacementGroup)(nil)

type ProximityPlacementGroup struct {
	Name  string
	Args  ProximityPlacementGroupArgs
	state *proximityPlacementGroupState
}

func (ppg *ProximityPlacementGroup) Type() string {
	return "azurerm_proximity_placement_group"
}

func (ppg *ProximityPlacementGroup) LocalName() string {
	return ppg.Name
}

func (ppg *ProximityPlacementGroup) Configuration() interface{} {
	return ppg.Args
}

func (ppg *ProximityPlacementGroup) Attributes() proximityPlacementGroupAttributes {
	return proximityPlacementGroupAttributes{ref: terra.ReferenceResource(ppg)}
}

func (ppg *ProximityPlacementGroup) ImportState(av io.Reader) error {
	ppg.state = &proximityPlacementGroupState{}
	if err := json.NewDecoder(av).Decode(ppg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ppg.Type(), ppg.LocalName(), err)
	}
	return nil
}

func (ppg *ProximityPlacementGroup) State() (*proximityPlacementGroupState, bool) {
	return ppg.state, ppg.state != nil
}

func (ppg *ProximityPlacementGroup) StateMust() *proximityPlacementGroupState {
	if ppg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ppg.Type(), ppg.LocalName()))
	}
	return ppg.state
}

func (ppg *ProximityPlacementGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ppg)
}

type ProximityPlacementGroupArgs struct {
	// AllowedVmSizes: set of string, optional
	AllowedVmSizes terra.SetValue[terra.StringValue] `hcl:"allowed_vm_sizes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *proximityplacementgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ProximityPlacementGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type proximityPlacementGroupAttributes struct {
	ref terra.Reference
}

func (ppg proximityPlacementGroupAttributes) AllowedVmSizes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ppg.ref.Append("allowed_vm_sizes"))
}

func (ppg proximityPlacementGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ppg.ref.Append("id"))
}

func (ppg proximityPlacementGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ppg.ref.Append("location"))
}

func (ppg proximityPlacementGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ppg.ref.Append("name"))
}

func (ppg proximityPlacementGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ppg.ref.Append("resource_group_name"))
}

func (ppg proximityPlacementGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ppg.ref.Append("tags"))
}

func (ppg proximityPlacementGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(ppg.ref.Append("zone"))
}

func (ppg proximityPlacementGroupAttributes) Timeouts() proximityplacementgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[proximityplacementgroup.TimeoutsAttributes](ppg.ref.Append("timeouts"))
}

type proximityPlacementGroupState struct {
	AllowedVmSizes    []string                               `json:"allowed_vm_sizes"`
	Id                string                                 `json:"id"`
	Location          string                                 `json:"location"`
	Name              string                                 `json:"name"`
	ResourceGroupName string                                 `json:"resource_group_name"`
	Tags              map[string]string                      `json:"tags"`
	Zone              string                                 `json:"zone"`
	Timeouts          *proximityplacementgroup.TimeoutsState `json:"timeouts"`
}
