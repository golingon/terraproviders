// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualhubsecuritypartnerprovider "github.com/golingon/terraproviders/azurerm/3.49.0/virtualhubsecuritypartnerprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualHubSecurityPartnerProvider(name string, args VirtualHubSecurityPartnerProviderArgs) *VirtualHubSecurityPartnerProvider {
	return &VirtualHubSecurityPartnerProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualHubSecurityPartnerProvider)(nil)

type VirtualHubSecurityPartnerProvider struct {
	Name  string
	Args  VirtualHubSecurityPartnerProviderArgs
	state *virtualHubSecurityPartnerProviderState
}

func (vhspp *VirtualHubSecurityPartnerProvider) Type() string {
	return "azurerm_virtual_hub_security_partner_provider"
}

func (vhspp *VirtualHubSecurityPartnerProvider) LocalName() string {
	return vhspp.Name
}

func (vhspp *VirtualHubSecurityPartnerProvider) Configuration() interface{} {
	return vhspp.Args
}

func (vhspp *VirtualHubSecurityPartnerProvider) Attributes() virtualHubSecurityPartnerProviderAttributes {
	return virtualHubSecurityPartnerProviderAttributes{ref: terra.ReferenceResource(vhspp)}
}

func (vhspp *VirtualHubSecurityPartnerProvider) ImportState(av io.Reader) error {
	vhspp.state = &virtualHubSecurityPartnerProviderState{}
	if err := json.NewDecoder(av).Decode(vhspp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vhspp.Type(), vhspp.LocalName(), err)
	}
	return nil
}

func (vhspp *VirtualHubSecurityPartnerProvider) State() (*virtualHubSecurityPartnerProviderState, bool) {
	return vhspp.state, vhspp.state != nil
}

func (vhspp *VirtualHubSecurityPartnerProvider) StateMust() *virtualHubSecurityPartnerProviderState {
	if vhspp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vhspp.Type(), vhspp.LocalName()))
	}
	return vhspp.state
}

func (vhspp *VirtualHubSecurityPartnerProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(vhspp)
}

type VirtualHubSecurityPartnerProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecurityProviderName: string, required
	SecurityProviderName terra.StringValue `hcl:"security_provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualHubId: string, optional
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr"`
	// Timeouts: optional
	Timeouts *virtualhubsecuritypartnerprovider.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualHubSecurityPartnerProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualHubSecurityPartnerProviderAttributes struct {
	ref terra.Reference
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("id"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("location"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("name"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("resource_group_name"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) SecurityProviderName() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("security_provider_name"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vhspp.ref.Append("tags"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceString(vhspp.ref.Append("virtual_hub_id"))
}

func (vhspp virtualHubSecurityPartnerProviderAttributes) Timeouts() virtualhubsecuritypartnerprovider.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualhubsecuritypartnerprovider.TimeoutsAttributes](vhspp.ref.Append("timeouts"))
}

type virtualHubSecurityPartnerProviderState struct {
	Id                   string                                           `json:"id"`
	Location             string                                           `json:"location"`
	Name                 string                                           `json:"name"`
	ResourceGroupName    string                                           `json:"resource_group_name"`
	SecurityProviderName string                                           `json:"security_provider_name"`
	Tags                 map[string]string                                `json:"tags"`
	VirtualHubId         string                                           `json:"virtual_hub_id"`
	Timeouts             *virtualhubsecuritypartnerprovider.TimeoutsState `json:"timeouts"`
}
