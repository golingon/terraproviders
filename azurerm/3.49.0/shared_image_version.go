// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sharedimageversion "github.com/golingon/terraproviders/azurerm/3.49.0/sharedimageversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSharedImageVersion(name string, args SharedImageVersionArgs) *SharedImageVersion {
	return &SharedImageVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SharedImageVersion)(nil)

type SharedImageVersion struct {
	Name  string
	Args  SharedImageVersionArgs
	state *sharedImageVersionState
}

func (siv *SharedImageVersion) Type() string {
	return "azurerm_shared_image_version"
}

func (siv *SharedImageVersion) LocalName() string {
	return siv.Name
}

func (siv *SharedImageVersion) Configuration() interface{} {
	return siv.Args
}

func (siv *SharedImageVersion) Attributes() sharedImageVersionAttributes {
	return sharedImageVersionAttributes{ref: terra.ReferenceResource(siv)}
}

func (siv *SharedImageVersion) ImportState(av io.Reader) error {
	siv.state = &sharedImageVersionState{}
	if err := json.NewDecoder(av).Decode(siv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", siv.Type(), siv.LocalName(), err)
	}
	return nil
}

func (siv *SharedImageVersion) State() (*sharedImageVersionState, bool) {
	return siv.state, siv.state != nil
}

func (siv *SharedImageVersion) StateMust() *sharedImageVersionState {
	if siv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", siv.Type(), siv.LocalName()))
	}
	return siv.state
}

func (siv *SharedImageVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(siv)
}

type SharedImageVersionArgs struct {
	// BlobUri: string, optional
	BlobUri terra.StringValue `hcl:"blob_uri,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// ExcludeFromLatest: bool, optional
	ExcludeFromLatest terra.BoolValue `hcl:"exclude_from_latest,attr"`
	// GalleryName: string, required
	GalleryName terra.StringValue `hcl:"gallery_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedImageId: string, optional
	ManagedImageId terra.StringValue `hcl:"managed_image_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsDiskSnapshotId: string, optional
	OsDiskSnapshotId terra.StringValue `hcl:"os_disk_snapshot_id,attr"`
	// ReplicationMode: string, optional
	ReplicationMode terra.StringValue `hcl:"replication_mode,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetRegion: min=1
	TargetRegion []sharedimageversion.TargetRegion `hcl:"target_region,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *sharedimageversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SharedImageVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sharedImageVersionAttributes struct {
	ref terra.Reference
}

func (siv sharedImageVersionAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("blob_uri"))
}

func (siv sharedImageVersionAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("end_of_life_date"))
}

func (siv sharedImageVersionAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceBool(siv.ref.Append("exclude_from_latest"))
}

func (siv sharedImageVersionAttributes) GalleryName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("gallery_name"))
}

func (siv sharedImageVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("id"))
}

func (siv sharedImageVersionAttributes) ImageName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("image_name"))
}

func (siv sharedImageVersionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("location"))
}

func (siv sharedImageVersionAttributes) ManagedImageId() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("managed_image_id"))
}

func (siv sharedImageVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("name"))
}

func (siv sharedImageVersionAttributes) OsDiskSnapshotId() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("os_disk_snapshot_id"))
}

func (siv sharedImageVersionAttributes) ReplicationMode() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("replication_mode"))
}

func (siv sharedImageVersionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("resource_group_name"))
}

func (siv sharedImageVersionAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("storage_account_id"))
}

func (siv sharedImageVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](siv.ref.Append("tags"))
}

func (siv sharedImageVersionAttributes) TargetRegion() terra.ListValue[sharedimageversion.TargetRegionAttributes] {
	return terra.ReferenceList[sharedimageversion.TargetRegionAttributes](siv.ref.Append("target_region"))
}

func (siv sharedImageVersionAttributes) Timeouts() sharedimageversion.TimeoutsAttributes {
	return terra.ReferenceSingle[sharedimageversion.TimeoutsAttributes](siv.ref.Append("timeouts"))
}

type sharedImageVersionState struct {
	BlobUri           string                                 `json:"blob_uri"`
	EndOfLifeDate     string                                 `json:"end_of_life_date"`
	ExcludeFromLatest bool                                   `json:"exclude_from_latest"`
	GalleryName       string                                 `json:"gallery_name"`
	Id                string                                 `json:"id"`
	ImageName         string                                 `json:"image_name"`
	Location          string                                 `json:"location"`
	ManagedImageId    string                                 `json:"managed_image_id"`
	Name              string                                 `json:"name"`
	OsDiskSnapshotId  string                                 `json:"os_disk_snapshot_id"`
	ReplicationMode   string                                 `json:"replication_mode"`
	ResourceGroupName string                                 `json:"resource_group_name"`
	StorageAccountId  string                                 `json:"storage_account_id"`
	Tags              map[string]string                      `json:"tags"`
	TargetRegion      []sharedimageversion.TargetRegionState `json:"target_region"`
	Timeouts          *sharedimageversion.TimeoutsState      `json:"timeouts"`
}
