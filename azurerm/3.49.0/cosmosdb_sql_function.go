// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqlfunction "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqlfunction"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlFunction(name string, args CosmosdbSqlFunctionArgs) *CosmosdbSqlFunction {
	return &CosmosdbSqlFunction{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlFunction)(nil)

type CosmosdbSqlFunction struct {
	Name  string
	Args  CosmosdbSqlFunctionArgs
	state *cosmosdbSqlFunctionState
}

func (csf *CosmosdbSqlFunction) Type() string {
	return "azurerm_cosmosdb_sql_function"
}

func (csf *CosmosdbSqlFunction) LocalName() string {
	return csf.Name
}

func (csf *CosmosdbSqlFunction) Configuration() interface{} {
	return csf.Args
}

func (csf *CosmosdbSqlFunction) Attributes() cosmosdbSqlFunctionAttributes {
	return cosmosdbSqlFunctionAttributes{ref: terra.ReferenceResource(csf)}
}

func (csf *CosmosdbSqlFunction) ImportState(av io.Reader) error {
	csf.state = &cosmosdbSqlFunctionState{}
	if err := json.NewDecoder(av).Decode(csf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csf.Type(), csf.LocalName(), err)
	}
	return nil
}

func (csf *CosmosdbSqlFunction) State() (*cosmosdbSqlFunctionState, bool) {
	return csf.state, csf.state != nil
}

func (csf *CosmosdbSqlFunction) StateMust() *cosmosdbSqlFunctionState {
	if csf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csf.Type(), csf.LocalName()))
	}
	return csf.state
}

func (csf *CosmosdbSqlFunction) DependOn() terra.Reference {
	return terra.ReferenceResource(csf)
}

type CosmosdbSqlFunctionArgs struct {
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// ContainerId: string, required
	ContainerId terra.StringValue `hcl:"container_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbsqlfunction.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlFunction depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlFunctionAttributes struct {
	ref terra.Reference
}

func (csf cosmosdbSqlFunctionAttributes) Body() terra.StringValue {
	return terra.ReferenceString(csf.ref.Append("body"))
}

func (csf cosmosdbSqlFunctionAttributes) ContainerId() terra.StringValue {
	return terra.ReferenceString(csf.ref.Append("container_id"))
}

func (csf cosmosdbSqlFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csf.ref.Append("id"))
}

func (csf cosmosdbSqlFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csf.ref.Append("name"))
}

func (csf cosmosdbSqlFunctionAttributes) Timeouts() cosmosdbsqlfunction.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqlfunction.TimeoutsAttributes](csf.ref.Append("timeouts"))
}

type cosmosdbSqlFunctionState struct {
	Body        string                             `json:"body"`
	ContainerId string                             `json:"container_id"`
	Id          string                             `json:"id"`
	Name        string                             `json:"name"`
	Timeouts    *cosmosdbsqlfunction.TimeoutsState `json:"timeouts"`
}
