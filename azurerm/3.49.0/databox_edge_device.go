// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databoxedgedevice "github.com/golingon/terraproviders/azurerm/3.49.0/databoxedgedevice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataboxEdgeDevice(name string, args DataboxEdgeDeviceArgs) *DataboxEdgeDevice {
	return &DataboxEdgeDevice{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataboxEdgeDevice)(nil)

type DataboxEdgeDevice struct {
	Name  string
	Args  DataboxEdgeDeviceArgs
	state *databoxEdgeDeviceState
}

func (ded *DataboxEdgeDevice) Type() string {
	return "azurerm_databox_edge_device"
}

func (ded *DataboxEdgeDevice) LocalName() string {
	return ded.Name
}

func (ded *DataboxEdgeDevice) Configuration() interface{} {
	return ded.Args
}

func (ded *DataboxEdgeDevice) Attributes() databoxEdgeDeviceAttributes {
	return databoxEdgeDeviceAttributes{ref: terra.ReferenceResource(ded)}
}

func (ded *DataboxEdgeDevice) ImportState(av io.Reader) error {
	ded.state = &databoxEdgeDeviceState{}
	if err := json.NewDecoder(av).Decode(ded.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ded.Type(), ded.LocalName(), err)
	}
	return nil
}

func (ded *DataboxEdgeDevice) State() (*databoxEdgeDeviceState, bool) {
	return ded.state, ded.state != nil
}

func (ded *DataboxEdgeDevice) StateMust() *databoxEdgeDeviceState {
	if ded.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ded.Type(), ded.LocalName()))
	}
	return ded.state
}

func (ded *DataboxEdgeDevice) DependOn() terra.Reference {
	return terra.ReferenceResource(ded)
}

type DataboxEdgeDeviceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DeviceProperties: min=0
	DeviceProperties []databoxedgedevice.DeviceProperties `hcl:"device_properties,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *databoxedgedevice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataboxEdgeDevice depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databoxEdgeDeviceAttributes struct {
	ref terra.Reference
}

func (ded databoxEdgeDeviceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ded.ref.Append("id"))
}

func (ded databoxEdgeDeviceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ded.ref.Append("location"))
}

func (ded databoxEdgeDeviceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ded.ref.Append("name"))
}

func (ded databoxEdgeDeviceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ded.ref.Append("resource_group_name"))
}

func (ded databoxEdgeDeviceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ded.ref.Append("sku_name"))
}

func (ded databoxEdgeDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ded.ref.Append("tags"))
}

func (ded databoxEdgeDeviceAttributes) DeviceProperties() terra.ListValue[databoxedgedevice.DevicePropertiesAttributes] {
	return terra.ReferenceList[databoxedgedevice.DevicePropertiesAttributes](ded.ref.Append("device_properties"))
}

func (ded databoxEdgeDeviceAttributes) Timeouts() databoxedgedevice.TimeoutsAttributes {
	return terra.ReferenceSingle[databoxedgedevice.TimeoutsAttributes](ded.ref.Append("timeouts"))
}

type databoxEdgeDeviceState struct {
	Id                string                                    `json:"id"`
	Location          string                                    `json:"location"`
	Name              string                                    `json:"name"`
	ResourceGroupName string                                    `json:"resource_group_name"`
	SkuName           string                                    `json:"sku_name"`
	Tags              map[string]string                         `json:"tags"`
	DeviceProperties  []databoxedgedevice.DevicePropertiesState `json:"device_properties"`
	Timeouts          *databoxedgedevice.TimeoutsState          `json:"timeouts"`
}
