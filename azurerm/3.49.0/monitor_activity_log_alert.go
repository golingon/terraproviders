// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitoractivitylogalert "github.com/golingon/terraproviders/azurerm/3.49.0/monitoractivitylogalert"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorActivityLogAlert(name string, args MonitorActivityLogAlertArgs) *MonitorActivityLogAlert {
	return &MonitorActivityLogAlert{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorActivityLogAlert)(nil)

type MonitorActivityLogAlert struct {
	Name  string
	Args  MonitorActivityLogAlertArgs
	state *monitorActivityLogAlertState
}

func (mala *MonitorActivityLogAlert) Type() string {
	return "azurerm_monitor_activity_log_alert"
}

func (mala *MonitorActivityLogAlert) LocalName() string {
	return mala.Name
}

func (mala *MonitorActivityLogAlert) Configuration() interface{} {
	return mala.Args
}

func (mala *MonitorActivityLogAlert) Attributes() monitorActivityLogAlertAttributes {
	return monitorActivityLogAlertAttributes{ref: terra.ReferenceResource(mala)}
}

func (mala *MonitorActivityLogAlert) ImportState(av io.Reader) error {
	mala.state = &monitorActivityLogAlertState{}
	if err := json.NewDecoder(av).Decode(mala.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mala.Type(), mala.LocalName(), err)
	}
	return nil
}

func (mala *MonitorActivityLogAlert) State() (*monitorActivityLogAlertState, bool) {
	return mala.state, mala.state != nil
}

func (mala *MonitorActivityLogAlert) StateMust() *monitorActivityLogAlertState {
	if mala.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mala.Type(), mala.LocalName()))
	}
	return mala.state
}

func (mala *MonitorActivityLogAlert) DependOn() terra.Reference {
	return terra.ReferenceResource(mala)
}

type MonitorActivityLogAlertArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: set of string, required
	Scopes terra.SetValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=0
	Action []monitoractivitylogalert.Action `hcl:"action,block" validate:"min=0"`
	// Criteria: required
	Criteria *monitoractivitylogalert.Criteria `hcl:"criteria,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitoractivitylogalert.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorActivityLogAlert depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorActivityLogAlertAttributes struct {
	ref terra.Reference
}

func (mala monitorActivityLogAlertAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mala.ref.Append("description"))
}

func (mala monitorActivityLogAlertAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(mala.ref.Append("enabled"))
}

func (mala monitorActivityLogAlertAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mala.ref.Append("id"))
}

func (mala monitorActivityLogAlertAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mala.ref.Append("name"))
}

func (mala monitorActivityLogAlertAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mala.ref.Append("resource_group_name"))
}

func (mala monitorActivityLogAlertAttributes) Scopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](mala.ref.Append("scopes"))
}

func (mala monitorActivityLogAlertAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mala.ref.Append("tags"))
}

func (mala monitorActivityLogAlertAttributes) Action() terra.ListValue[monitoractivitylogalert.ActionAttributes] {
	return terra.ReferenceList[monitoractivitylogalert.ActionAttributes](mala.ref.Append("action"))
}

func (mala monitorActivityLogAlertAttributes) Criteria() terra.ListValue[monitoractivitylogalert.CriteriaAttributes] {
	return terra.ReferenceList[monitoractivitylogalert.CriteriaAttributes](mala.ref.Append("criteria"))
}

func (mala monitorActivityLogAlertAttributes) Timeouts() monitoractivitylogalert.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoractivitylogalert.TimeoutsAttributes](mala.ref.Append("timeouts"))
}

type monitorActivityLogAlertState struct {
	Description       string                                  `json:"description"`
	Enabled           bool                                    `json:"enabled"`
	Id                string                                  `json:"id"`
	Name              string                                  `json:"name"`
	ResourceGroupName string                                  `json:"resource_group_name"`
	Scopes            []string                                `json:"scopes"`
	Tags              map[string]string                       `json:"tags"`
	Action            []monitoractivitylogalert.ActionState   `json:"action"`
	Criteria          []monitoractivitylogalert.CriteriaState `json:"criteria"`
	Timeouts          *monitoractivitylogalert.TimeoutsState  `json:"timeouts"`
}
