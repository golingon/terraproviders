// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkmanagernetworkgroup "github.com/golingon/terraproviders/azurerm/3.49.0/networkmanagernetworkgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkManagerNetworkGroup(name string, args NetworkManagerNetworkGroupArgs) *NetworkManagerNetworkGroup {
	return &NetworkManagerNetworkGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkManagerNetworkGroup)(nil)

type NetworkManagerNetworkGroup struct {
	Name  string
	Args  NetworkManagerNetworkGroupArgs
	state *networkManagerNetworkGroupState
}

func (nmng *NetworkManagerNetworkGroup) Type() string {
	return "azurerm_network_manager_network_group"
}

func (nmng *NetworkManagerNetworkGroup) LocalName() string {
	return nmng.Name
}

func (nmng *NetworkManagerNetworkGroup) Configuration() interface{} {
	return nmng.Args
}

func (nmng *NetworkManagerNetworkGroup) Attributes() networkManagerNetworkGroupAttributes {
	return networkManagerNetworkGroupAttributes{ref: terra.ReferenceResource(nmng)}
}

func (nmng *NetworkManagerNetworkGroup) ImportState(av io.Reader) error {
	nmng.state = &networkManagerNetworkGroupState{}
	if err := json.NewDecoder(av).Decode(nmng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nmng.Type(), nmng.LocalName(), err)
	}
	return nil
}

func (nmng *NetworkManagerNetworkGroup) State() (*networkManagerNetworkGroupState, bool) {
	return nmng.state, nmng.state != nil
}

func (nmng *NetworkManagerNetworkGroup) StateMust() *networkManagerNetworkGroupState {
	if nmng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nmng.Type(), nmng.LocalName()))
	}
	return nmng.state
}

func (nmng *NetworkManagerNetworkGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(nmng)
}

type NetworkManagerNetworkGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagernetworkgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkManagerNetworkGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkManagerNetworkGroupAttributes struct {
	ref terra.Reference
}

func (nmng networkManagerNetworkGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nmng.ref.Append("description"))
}

func (nmng networkManagerNetworkGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nmng.ref.Append("id"))
}

func (nmng networkManagerNetworkGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nmng.ref.Append("name"))
}

func (nmng networkManagerNetworkGroupAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceString(nmng.ref.Append("network_manager_id"))
}

func (nmng networkManagerNetworkGroupAttributes) Timeouts() networkmanagernetworkgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagernetworkgroup.TimeoutsAttributes](nmng.ref.Append("timeouts"))
}

type networkManagerNetworkGroupState struct {
	Description      string                                    `json:"description"`
	Id               string                                    `json:"id"`
	Name             string                                    `json:"name"`
	NetworkManagerId string                                    `json:"network_manager_id"`
	Timeouts         *networkmanagernetworkgroup.TimeoutsState `json:"timeouts"`
}
