// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitordatacollectionendpoint "github.com/golingon/terraproviders/azurerm/3.49.0/monitordatacollectionendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorDataCollectionEndpoint(name string, args MonitorDataCollectionEndpointArgs) *MonitorDataCollectionEndpoint {
	return &MonitorDataCollectionEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorDataCollectionEndpoint)(nil)

type MonitorDataCollectionEndpoint struct {
	Name  string
	Args  MonitorDataCollectionEndpointArgs
	state *monitorDataCollectionEndpointState
}

func (mdce *MonitorDataCollectionEndpoint) Type() string {
	return "azurerm_monitor_data_collection_endpoint"
}

func (mdce *MonitorDataCollectionEndpoint) LocalName() string {
	return mdce.Name
}

func (mdce *MonitorDataCollectionEndpoint) Configuration() interface{} {
	return mdce.Args
}

func (mdce *MonitorDataCollectionEndpoint) Attributes() monitorDataCollectionEndpointAttributes {
	return monitorDataCollectionEndpointAttributes{ref: terra.ReferenceResource(mdce)}
}

func (mdce *MonitorDataCollectionEndpoint) ImportState(av io.Reader) error {
	mdce.state = &monitorDataCollectionEndpointState{}
	if err := json.NewDecoder(av).Decode(mdce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdce.Type(), mdce.LocalName(), err)
	}
	return nil
}

func (mdce *MonitorDataCollectionEndpoint) State() (*monitorDataCollectionEndpointState, bool) {
	return mdce.state, mdce.state != nil
}

func (mdce *MonitorDataCollectionEndpoint) StateMust() *monitorDataCollectionEndpointState {
	if mdce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdce.Type(), mdce.LocalName()))
	}
	return mdce.state
}

func (mdce *MonitorDataCollectionEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(mdce)
}

type MonitorDataCollectionEndpointArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *monitordatacollectionendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorDataCollectionEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorDataCollectionEndpointAttributes struct {
	ref terra.Reference
}

func (mdce monitorDataCollectionEndpointAttributes) ConfigurationAccessEndpoint() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("configuration_access_endpoint"))
}

func (mdce monitorDataCollectionEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("description"))
}

func (mdce monitorDataCollectionEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("id"))
}

func (mdce monitorDataCollectionEndpointAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("kind"))
}

func (mdce monitorDataCollectionEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("location"))
}

func (mdce monitorDataCollectionEndpointAttributes) LogsIngestionEndpoint() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("logs_ingestion_endpoint"))
}

func (mdce monitorDataCollectionEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("name"))
}

func (mdce monitorDataCollectionEndpointAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(mdce.ref.Append("public_network_access_enabled"))
}

func (mdce monitorDataCollectionEndpointAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mdce.ref.Append("resource_group_name"))
}

func (mdce monitorDataCollectionEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mdce.ref.Append("tags"))
}

func (mdce monitorDataCollectionEndpointAttributes) Timeouts() monitordatacollectionendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[monitordatacollectionendpoint.TimeoutsAttributes](mdce.ref.Append("timeouts"))
}

type monitorDataCollectionEndpointState struct {
	ConfigurationAccessEndpoint string                                       `json:"configuration_access_endpoint"`
	Description                 string                                       `json:"description"`
	Id                          string                                       `json:"id"`
	Kind                        string                                       `json:"kind"`
	Location                    string                                       `json:"location"`
	LogsIngestionEndpoint       string                                       `json:"logs_ingestion_endpoint"`
	Name                        string                                       `json:"name"`
	PublicNetworkAccessEnabled  bool                                         `json:"public_network_access_enabled"`
	ResourceGroupName           string                                       `json:"resource_group_name"`
	Tags                        map[string]string                            `json:"tags"`
	Timeouts                    *monitordatacollectionendpoint.TimeoutsState `json:"timeouts"`
}
