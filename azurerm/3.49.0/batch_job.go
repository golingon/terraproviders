// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	batchjob "github.com/golingon/terraproviders/azurerm/3.49.0/batchjob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBatchJob(name string, args BatchJobArgs) *BatchJob {
	return &BatchJob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchJob)(nil)

type BatchJob struct {
	Name  string
	Args  BatchJobArgs
	state *batchJobState
}

func (bj *BatchJob) Type() string {
	return "azurerm_batch_job"
}

func (bj *BatchJob) LocalName() string {
	return bj.Name
}

func (bj *BatchJob) Configuration() interface{} {
	return bj.Args
}

func (bj *BatchJob) Attributes() batchJobAttributes {
	return batchJobAttributes{ref: terra.ReferenceResource(bj)}
}

func (bj *BatchJob) ImportState(av io.Reader) error {
	bj.state = &batchJobState{}
	if err := json.NewDecoder(av).Decode(bj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bj.Type(), bj.LocalName(), err)
	}
	return nil
}

func (bj *BatchJob) State() (*batchJobState, bool) {
	return bj.state, bj.state != nil
}

func (bj *BatchJob) StateMust() *batchJobState {
	if bj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bj.Type(), bj.LocalName()))
	}
	return bj.state
}

func (bj *BatchJob) DependOn() terra.Reference {
	return terra.ReferenceResource(bj)
}

type BatchJobArgs struct {
	// BatchPoolId: string, required
	BatchPoolId terra.StringValue `hcl:"batch_pool_id,attr" validate:"required"`
	// CommonEnvironmentProperties: map of string, optional
	CommonEnvironmentProperties terra.MapValue[terra.StringValue] `hcl:"common_environment_properties,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// TaskRetryMaximum: number, optional
	TaskRetryMaximum terra.NumberValue `hcl:"task_retry_maximum,attr"`
	// Timeouts: optional
	Timeouts *batchjob.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BatchJob depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type batchJobAttributes struct {
	ref terra.Reference
}

func (bj batchJobAttributes) BatchPoolId() terra.StringValue {
	return terra.ReferenceString(bj.ref.Append("batch_pool_id"))
}

func (bj batchJobAttributes) CommonEnvironmentProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bj.ref.Append("common_environment_properties"))
}

func (bj batchJobAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(bj.ref.Append("display_name"))
}

func (bj batchJobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bj.ref.Append("id"))
}

func (bj batchJobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bj.ref.Append("name"))
}

func (bj batchJobAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(bj.ref.Append("priority"))
}

func (bj batchJobAttributes) TaskRetryMaximum() terra.NumberValue {
	return terra.ReferenceNumber(bj.ref.Append("task_retry_maximum"))
}

func (bj batchJobAttributes) Timeouts() batchjob.TimeoutsAttributes {
	return terra.ReferenceSingle[batchjob.TimeoutsAttributes](bj.ref.Append("timeouts"))
}

type batchJobState struct {
	BatchPoolId                 string                  `json:"batch_pool_id"`
	CommonEnvironmentProperties map[string]string       `json:"common_environment_properties"`
	DisplayName                 string                  `json:"display_name"`
	Id                          string                  `json:"id"`
	Name                        string                  `json:"name"`
	Priority                    float64                 `json:"priority"`
	TaskRetryMaximum            float64                 `json:"task_retry_maximum"`
	Timeouts                    *batchjob.TimeoutsState `json:"timeouts"`
}
