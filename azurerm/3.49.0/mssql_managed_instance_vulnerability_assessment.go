// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlmanagedinstancevulnerabilityassessment "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlmanagedinstancevulnerabilityassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlManagedInstanceVulnerabilityAssessment(name string, args MssqlManagedInstanceVulnerabilityAssessmentArgs) *MssqlManagedInstanceVulnerabilityAssessment {
	return &MssqlManagedInstanceVulnerabilityAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlManagedInstanceVulnerabilityAssessment)(nil)

type MssqlManagedInstanceVulnerabilityAssessment struct {
	Name  string
	Args  MssqlManagedInstanceVulnerabilityAssessmentArgs
	state *mssqlManagedInstanceVulnerabilityAssessmentState
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) Type() string {
	return "azurerm_mssql_managed_instance_vulnerability_assessment"
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) LocalName() string {
	return mmiva.Name
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) Configuration() interface{} {
	return mmiva.Args
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) Attributes() mssqlManagedInstanceVulnerabilityAssessmentAttributes {
	return mssqlManagedInstanceVulnerabilityAssessmentAttributes{ref: terra.ReferenceResource(mmiva)}
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) ImportState(av io.Reader) error {
	mmiva.state = &mssqlManagedInstanceVulnerabilityAssessmentState{}
	if err := json.NewDecoder(av).Decode(mmiva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mmiva.Type(), mmiva.LocalName(), err)
	}
	return nil
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) State() (*mssqlManagedInstanceVulnerabilityAssessmentState, bool) {
	return mmiva.state, mmiva.state != nil
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) StateMust() *mssqlManagedInstanceVulnerabilityAssessmentState {
	if mmiva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mmiva.Type(), mmiva.LocalName()))
	}
	return mmiva.state
}

func (mmiva *MssqlManagedInstanceVulnerabilityAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(mmiva)
}

type MssqlManagedInstanceVulnerabilityAssessmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedInstanceId: string, required
	ManagedInstanceId terra.StringValue `hcl:"managed_instance_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageContainerPath: string, required
	StorageContainerPath terra.StringValue `hcl:"storage_container_path,attr" validate:"required"`
	// StorageContainerSasKey: string, optional
	StorageContainerSasKey terra.StringValue `hcl:"storage_container_sas_key,attr"`
	// RecurringScans: optional
	RecurringScans *mssqlmanagedinstancevulnerabilityassessment.RecurringScans `hcl:"recurring_scans,block"`
	// Timeouts: optional
	Timeouts *mssqlmanagedinstancevulnerabilityassessment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlManagedInstanceVulnerabilityAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlManagedInstanceVulnerabilityAssessmentAttributes struct {
	ref terra.Reference
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mmiva.ref.Append("id"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) ManagedInstanceId() terra.StringValue {
	return terra.ReferenceString(mmiva.ref.Append("managed_instance_id"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(mmiva.ref.Append("storage_account_access_key"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) StorageContainerPath() terra.StringValue {
	return terra.ReferenceString(mmiva.ref.Append("storage_container_path"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) StorageContainerSasKey() terra.StringValue {
	return terra.ReferenceString(mmiva.ref.Append("storage_container_sas_key"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) RecurringScans() terra.ListValue[mssqlmanagedinstancevulnerabilityassessment.RecurringScansAttributes] {
	return terra.ReferenceList[mssqlmanagedinstancevulnerabilityassessment.RecurringScansAttributes](mmiva.ref.Append("recurring_scans"))
}

func (mmiva mssqlManagedInstanceVulnerabilityAssessmentAttributes) Timeouts() mssqlmanagedinstancevulnerabilityassessment.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlmanagedinstancevulnerabilityassessment.TimeoutsAttributes](mmiva.ref.Append("timeouts"))
}

type mssqlManagedInstanceVulnerabilityAssessmentState struct {
	Id                      string                                                            `json:"id"`
	ManagedInstanceId       string                                                            `json:"managed_instance_id"`
	StorageAccountAccessKey string                                                            `json:"storage_account_access_key"`
	StorageContainerPath    string                                                            `json:"storage_container_path"`
	StorageContainerSasKey  string                                                            `json:"storage_container_sas_key"`
	RecurringScans          []mssqlmanagedinstancevulnerabilityassessment.RecurringScansState `json:"recurring_scans"`
	Timeouts                *mssqlmanagedinstancevulnerabilityassessment.TimeoutsState        `json:"timeouts"`
}
