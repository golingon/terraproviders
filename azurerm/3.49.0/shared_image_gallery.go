// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sharedimagegallery "github.com/golingon/terraproviders/azurerm/3.49.0/sharedimagegallery"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSharedImageGallery(name string, args SharedImageGalleryArgs) *SharedImageGallery {
	return &SharedImageGallery{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SharedImageGallery)(nil)

type SharedImageGallery struct {
	Name  string
	Args  SharedImageGalleryArgs
	state *sharedImageGalleryState
}

func (sig *SharedImageGallery) Type() string {
	return "azurerm_shared_image_gallery"
}

func (sig *SharedImageGallery) LocalName() string {
	return sig.Name
}

func (sig *SharedImageGallery) Configuration() interface{} {
	return sig.Args
}

func (sig *SharedImageGallery) Attributes() sharedImageGalleryAttributes {
	return sharedImageGalleryAttributes{ref: terra.ReferenceResource(sig)}
}

func (sig *SharedImageGallery) ImportState(av io.Reader) error {
	sig.state = &sharedImageGalleryState{}
	if err := json.NewDecoder(av).Decode(sig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sig.Type(), sig.LocalName(), err)
	}
	return nil
}

func (sig *SharedImageGallery) State() (*sharedImageGalleryState, bool) {
	return sig.state, sig.state != nil
}

func (sig *SharedImageGallery) StateMust() *sharedImageGalleryState {
	if sig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sig.Type(), sig.LocalName()))
	}
	return sig.state
}

func (sig *SharedImageGallery) DependOn() terra.Reference {
	return terra.ReferenceResource(sig)
}

type SharedImageGalleryArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *sharedimagegallery.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SharedImageGallery depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sharedImageGalleryAttributes struct {
	ref terra.Reference
}

func (sig sharedImageGalleryAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("description"))
}

func (sig sharedImageGalleryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("id"))
}

func (sig sharedImageGalleryAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("location"))
}

func (sig sharedImageGalleryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("name"))
}

func (sig sharedImageGalleryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("resource_group_name"))
}

func (sig sharedImageGalleryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sig.ref.Append("tags"))
}

func (sig sharedImageGalleryAttributes) UniqueName() terra.StringValue {
	return terra.ReferenceString(sig.ref.Append("unique_name"))
}

func (sig sharedImageGalleryAttributes) Timeouts() sharedimagegallery.TimeoutsAttributes {
	return terra.ReferenceSingle[sharedimagegallery.TimeoutsAttributes](sig.ref.Append("timeouts"))
}

type sharedImageGalleryState struct {
	Description       string                            `json:"description"`
	Id                string                            `json:"id"`
	Location          string                            `json:"location"`
	Name              string                            `json:"name"`
	ResourceGroupName string                            `json:"resource_group_name"`
	Tags              map[string]string                 `json:"tags"`
	UniqueName        string                            `json:"unique_name"`
	Timeouts          *sharedimagegallery.TimeoutsState `json:"timeouts"`
}
