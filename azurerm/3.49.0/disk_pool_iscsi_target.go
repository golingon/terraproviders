// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	diskpooliscsitarget "github.com/golingon/terraproviders/azurerm/3.49.0/diskpooliscsitarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDiskPoolIscsiTarget(name string, args DiskPoolIscsiTargetArgs) *DiskPoolIscsiTarget {
	return &DiskPoolIscsiTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DiskPoolIscsiTarget)(nil)

type DiskPoolIscsiTarget struct {
	Name  string
	Args  DiskPoolIscsiTargetArgs
	state *diskPoolIscsiTargetState
}

func (dpit *DiskPoolIscsiTarget) Type() string {
	return "azurerm_disk_pool_iscsi_target"
}

func (dpit *DiskPoolIscsiTarget) LocalName() string {
	return dpit.Name
}

func (dpit *DiskPoolIscsiTarget) Configuration() interface{} {
	return dpit.Args
}

func (dpit *DiskPoolIscsiTarget) Attributes() diskPoolIscsiTargetAttributes {
	return diskPoolIscsiTargetAttributes{ref: terra.ReferenceResource(dpit)}
}

func (dpit *DiskPoolIscsiTarget) ImportState(av io.Reader) error {
	dpit.state = &diskPoolIscsiTargetState{}
	if err := json.NewDecoder(av).Decode(dpit.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpit.Type(), dpit.LocalName(), err)
	}
	return nil
}

func (dpit *DiskPoolIscsiTarget) State() (*diskPoolIscsiTargetState, bool) {
	return dpit.state, dpit.state != nil
}

func (dpit *DiskPoolIscsiTarget) StateMust() *diskPoolIscsiTargetState {
	if dpit.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpit.Type(), dpit.LocalName()))
	}
	return dpit.state
}

func (dpit *DiskPoolIscsiTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(dpit)
}

type DiskPoolIscsiTargetArgs struct {
	// AclMode: string, required
	AclMode terra.StringValue `hcl:"acl_mode,attr" validate:"required"`
	// DisksPoolId: string, required
	DisksPoolId terra.StringValue `hcl:"disks_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetIqn: string, optional
	TargetIqn terra.StringValue `hcl:"target_iqn,attr"`
	// Timeouts: optional
	Timeouts *diskpooliscsitarget.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DiskPoolIscsiTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type diskPoolIscsiTargetAttributes struct {
	ref terra.Reference
}

func (dpit diskPoolIscsiTargetAttributes) AclMode() terra.StringValue {
	return terra.ReferenceString(dpit.ref.Append("acl_mode"))
}

func (dpit diskPoolIscsiTargetAttributes) DisksPoolId() terra.StringValue {
	return terra.ReferenceString(dpit.ref.Append("disks_pool_id"))
}

func (dpit diskPoolIscsiTargetAttributes) Endpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dpit.ref.Append("endpoints"))
}

func (dpit diskPoolIscsiTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpit.ref.Append("id"))
}

func (dpit diskPoolIscsiTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpit.ref.Append("name"))
}

func (dpit diskPoolIscsiTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(dpit.ref.Append("port"))
}

func (dpit diskPoolIscsiTargetAttributes) TargetIqn() terra.StringValue {
	return terra.ReferenceString(dpit.ref.Append("target_iqn"))
}

func (dpit diskPoolIscsiTargetAttributes) Timeouts() diskpooliscsitarget.TimeoutsAttributes {
	return terra.ReferenceSingle[diskpooliscsitarget.TimeoutsAttributes](dpit.ref.Append("timeouts"))
}

type diskPoolIscsiTargetState struct {
	AclMode     string                             `json:"acl_mode"`
	DisksPoolId string                             `json:"disks_pool_id"`
	Endpoints   []string                           `json:"endpoints"`
	Id          string                             `json:"id"`
	Name        string                             `json:"name"`
	Port        float64                            `json:"port"`
	TargetIqn   string                             `json:"target_iqn"`
	Timeouts    *diskpooliscsitarget.TimeoutsState `json:"timeouts"`
}
