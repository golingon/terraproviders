// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	vmwarenetappvolumeattachment "github.com/golingon/terraproviders/azurerm/3.49.0/vmwarenetappvolumeattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVmwareNetappVolumeAttachment(name string, args VmwareNetappVolumeAttachmentArgs) *VmwareNetappVolumeAttachment {
	return &VmwareNetappVolumeAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VmwareNetappVolumeAttachment)(nil)

type VmwareNetappVolumeAttachment struct {
	Name  string
	Args  VmwareNetappVolumeAttachmentArgs
	state *vmwareNetappVolumeAttachmentState
}

func (vnva *VmwareNetappVolumeAttachment) Type() string {
	return "azurerm_vmware_netapp_volume_attachment"
}

func (vnva *VmwareNetappVolumeAttachment) LocalName() string {
	return vnva.Name
}

func (vnva *VmwareNetappVolumeAttachment) Configuration() interface{} {
	return vnva.Args
}

func (vnva *VmwareNetappVolumeAttachment) Attributes() vmwareNetappVolumeAttachmentAttributes {
	return vmwareNetappVolumeAttachmentAttributes{ref: terra.ReferenceResource(vnva)}
}

func (vnva *VmwareNetappVolumeAttachment) ImportState(av io.Reader) error {
	vnva.state = &vmwareNetappVolumeAttachmentState{}
	if err := json.NewDecoder(av).Decode(vnva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vnva.Type(), vnva.LocalName(), err)
	}
	return nil
}

func (vnva *VmwareNetappVolumeAttachment) State() (*vmwareNetappVolumeAttachmentState, bool) {
	return vnva.state, vnva.state != nil
}

func (vnva *VmwareNetappVolumeAttachment) StateMust() *vmwareNetappVolumeAttachmentState {
	if vnva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vnva.Type(), vnva.LocalName()))
	}
	return vnva.state
}

func (vnva *VmwareNetappVolumeAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(vnva)
}

type VmwareNetappVolumeAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetappVolumeId: string, required
	NetappVolumeId terra.StringValue `hcl:"netapp_volume_id,attr" validate:"required"`
	// VmwareClusterId: string, required
	VmwareClusterId terra.StringValue `hcl:"vmware_cluster_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *vmwarenetappvolumeattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VmwareNetappVolumeAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vmwareNetappVolumeAttachmentAttributes struct {
	ref terra.Reference
}

func (vnva vmwareNetappVolumeAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vnva.ref.Append("id"))
}

func (vnva vmwareNetappVolumeAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vnva.ref.Append("name"))
}

func (vnva vmwareNetappVolumeAttachmentAttributes) NetappVolumeId() terra.StringValue {
	return terra.ReferenceString(vnva.ref.Append("netapp_volume_id"))
}

func (vnva vmwareNetappVolumeAttachmentAttributes) VmwareClusterId() terra.StringValue {
	return terra.ReferenceString(vnva.ref.Append("vmware_cluster_id"))
}

func (vnva vmwareNetappVolumeAttachmentAttributes) Timeouts() vmwarenetappvolumeattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[vmwarenetappvolumeattachment.TimeoutsAttributes](vnva.ref.Append("timeouts"))
}

type vmwareNetappVolumeAttachmentState struct {
	Id              string                                      `json:"id"`
	Name            string                                      `json:"name"`
	NetappVolumeId  string                                      `json:"netapp_volume_id"`
	VmwareClusterId string                                      `json:"vmware_cluster_id"`
	Timeouts        *vmwarenetappvolumeattachment.TimeoutsState `json:"timeouts"`
}
