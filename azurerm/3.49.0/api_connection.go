// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apiconnection "github.com/golingon/terraproviders/azurerm/3.49.0/apiconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiConnection(name string, args ApiConnectionArgs) *ApiConnection {
	return &ApiConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiConnection)(nil)

type ApiConnection struct {
	Name  string
	Args  ApiConnectionArgs
	state *apiConnectionState
}

func (ac *ApiConnection) Type() string {
	return "azurerm_api_connection"
}

func (ac *ApiConnection) LocalName() string {
	return ac.Name
}

func (ac *ApiConnection) Configuration() interface{} {
	return ac.Args
}

func (ac *ApiConnection) Attributes() apiConnectionAttributes {
	return apiConnectionAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *ApiConnection) ImportState(av io.Reader) error {
	ac.state = &apiConnectionState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *ApiConnection) State() (*apiConnectionState, bool) {
	return ac.state, ac.state != nil
}

func (ac *ApiConnection) StateMust() *apiConnectionState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *ApiConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type ApiConnectionArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedApiId: string, required
	ManagedApiId terra.StringValue `hcl:"managed_api_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParameterValues: map of string, optional
	ParameterValues terra.MapValue[terra.StringValue] `hcl:"parameter_values,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *apiconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiConnectionAttributes struct {
	ref terra.Reference
}

func (ac apiConnectionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("display_name"))
}

func (ac apiConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac apiConnectionAttributes) ManagedApiId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("managed_api_id"))
}

func (ac apiConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("name"))
}

func (ac apiConnectionAttributes) ParameterValues() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("parameter_values"))
}

func (ac apiConnectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("resource_group_name"))
}

func (ac apiConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags"))
}

func (ac apiConnectionAttributes) Timeouts() apiconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[apiconnection.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type apiConnectionState struct {
	DisplayName       string                       `json:"display_name"`
	Id                string                       `json:"id"`
	ManagedApiId      string                       `json:"managed_api_id"`
	Name              string                       `json:"name"`
	ParameterValues   map[string]string            `json:"parameter_values"`
	ResourceGroupName string                       `json:"resource_group_name"`
	Tags              map[string]string            `json:"tags"`
	Timeouts          *apiconnection.TimeoutsState `json:"timeouts"`
}
