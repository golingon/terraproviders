// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mobilenetworkslice "github.com/golingon/terraproviders/azurerm/3.49.0/mobilenetworkslice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMobileNetworkSlice(name string, args MobileNetworkSliceArgs) *MobileNetworkSlice {
	return &MobileNetworkSlice{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MobileNetworkSlice)(nil)

type MobileNetworkSlice struct {
	Name  string
	Args  MobileNetworkSliceArgs
	state *mobileNetworkSliceState
}

func (mns *MobileNetworkSlice) Type() string {
	return "azurerm_mobile_network_slice"
}

func (mns *MobileNetworkSlice) LocalName() string {
	return mns.Name
}

func (mns *MobileNetworkSlice) Configuration() interface{} {
	return mns.Args
}

func (mns *MobileNetworkSlice) Attributes() mobileNetworkSliceAttributes {
	return mobileNetworkSliceAttributes{ref: terra.ReferenceResource(mns)}
}

func (mns *MobileNetworkSlice) ImportState(av io.Reader) error {
	mns.state = &mobileNetworkSliceState{}
	if err := json.NewDecoder(av).Decode(mns.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mns.Type(), mns.LocalName(), err)
	}
	return nil
}

func (mns *MobileNetworkSlice) State() (*mobileNetworkSliceState, bool) {
	return mns.state, mns.state != nil
}

func (mns *MobileNetworkSlice) StateMust() *mobileNetworkSliceState {
	if mns.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mns.Type(), mns.LocalName()))
	}
	return mns.state
}

func (mns *MobileNetworkSlice) DependOn() terra.Reference {
	return terra.ReferenceResource(mns)
}

type MobileNetworkSliceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MobileNetworkId: string, required
	MobileNetworkId terra.StringValue `hcl:"mobile_network_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// SingleNetworkSliceSelectionAssistanceInformation: required
	SingleNetworkSliceSelectionAssistanceInformation *mobilenetworkslice.SingleNetworkSliceSelectionAssistanceInformation `hcl:"single_network_slice_selection_assistance_information,block" validate:"required"`
	// Timeouts: optional
	Timeouts *mobilenetworkslice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MobileNetworkSlice depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mobileNetworkSliceAttributes struct {
	ref terra.Reference
}

func (mns mobileNetworkSliceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("description"))
}

func (mns mobileNetworkSliceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("id"))
}

func (mns mobileNetworkSliceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("location"))
}

func (mns mobileNetworkSliceAttributes) MobileNetworkId() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("mobile_network_id"))
}

func (mns mobileNetworkSliceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("name"))
}

func (mns mobileNetworkSliceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mns.ref.Append("tags"))
}

func (mns mobileNetworkSliceAttributes) SingleNetworkSliceSelectionAssistanceInformation() terra.ListValue[mobilenetworkslice.SingleNetworkSliceSelectionAssistanceInformationAttributes] {
	return terra.ReferenceList[mobilenetworkslice.SingleNetworkSliceSelectionAssistanceInformationAttributes](mns.ref.Append("single_network_slice_selection_assistance_information"))
}

func (mns mobileNetworkSliceAttributes) Timeouts() mobilenetworkslice.TimeoutsAttributes {
	return terra.ReferenceSingle[mobilenetworkslice.TimeoutsAttributes](mns.ref.Append("timeouts"))
}

type mobileNetworkSliceState struct {
	Description                                      string                                                                     `json:"description"`
	Id                                               string                                                                     `json:"id"`
	Location                                         string                                                                     `json:"location"`
	MobileNetworkId                                  string                                                                     `json:"mobile_network_id"`
	Name                                             string                                                                     `json:"name"`
	Tags                                             map[string]string                                                          `json:"tags"`
	SingleNetworkSliceSelectionAssistanceInformation []mobilenetworkslice.SingleNetworkSliceSelectionAssistanceInformationState `json:"single_network_slice_selection_assistance_information"`
	Timeouts                                         *mobilenetworkslice.TimeoutsState                                          `json:"timeouts"`
}
