// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediaservicesaccount "github.com/golingon/terraproviders/azurerm/3.49.0/mediaservicesaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaServicesAccount(name string, args MediaServicesAccountArgs) *MediaServicesAccount {
	return &MediaServicesAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaServicesAccount)(nil)

type MediaServicesAccount struct {
	Name  string
	Args  MediaServicesAccountArgs
	state *mediaServicesAccountState
}

func (msa *MediaServicesAccount) Type() string {
	return "azurerm_media_services_account"
}

func (msa *MediaServicesAccount) LocalName() string {
	return msa.Name
}

func (msa *MediaServicesAccount) Configuration() interface{} {
	return msa.Args
}

func (msa *MediaServicesAccount) Attributes() mediaServicesAccountAttributes {
	return mediaServicesAccountAttributes{ref: terra.ReferenceResource(msa)}
}

func (msa *MediaServicesAccount) ImportState(av io.Reader) error {
	msa.state = &mediaServicesAccountState{}
	if err := json.NewDecoder(av).Decode(msa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msa.Type(), msa.LocalName(), err)
	}
	return nil
}

func (msa *MediaServicesAccount) State() (*mediaServicesAccountState, bool) {
	return msa.state, msa.state != nil
}

func (msa *MediaServicesAccount) StateMust() *mediaServicesAccountState {
	if msa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msa.Type(), msa.LocalName()))
	}
	return msa.state
}

func (msa *MediaServicesAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(msa)
}

type MediaServicesAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAuthenticationType: string, optional
	StorageAuthenticationType terra.StringValue `hcl:"storage_authentication_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: optional
	Encryption *mediaservicesaccount.Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *mediaservicesaccount.Identity `hcl:"identity,block"`
	// KeyDeliveryAccessControl: optional
	KeyDeliveryAccessControl *mediaservicesaccount.KeyDeliveryAccessControl `hcl:"key_delivery_access_control,block"`
	// StorageAccount: min=1
	StorageAccount []mediaservicesaccount.StorageAccount `hcl:"storage_account,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *mediaservicesaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MediaServicesAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaServicesAccountAttributes struct {
	ref terra.Reference
}

func (msa mediaServicesAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msa.ref.Append("id"))
}

func (msa mediaServicesAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(msa.ref.Append("location"))
}

func (msa mediaServicesAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msa.ref.Append("name"))
}

func (msa mediaServicesAccountAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(msa.ref.Append("public_network_access_enabled"))
}

func (msa mediaServicesAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(msa.ref.Append("resource_group_name"))
}

func (msa mediaServicesAccountAttributes) StorageAuthenticationType() terra.StringValue {
	return terra.ReferenceString(msa.ref.Append("storage_authentication_type"))
}

func (msa mediaServicesAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msa.ref.Append("tags"))
}

func (msa mediaServicesAccountAttributes) Encryption() terra.ListValue[mediaservicesaccount.EncryptionAttributes] {
	return terra.ReferenceList[mediaservicesaccount.EncryptionAttributes](msa.ref.Append("encryption"))
}

func (msa mediaServicesAccountAttributes) Identity() terra.ListValue[mediaservicesaccount.IdentityAttributes] {
	return terra.ReferenceList[mediaservicesaccount.IdentityAttributes](msa.ref.Append("identity"))
}

func (msa mediaServicesAccountAttributes) KeyDeliveryAccessControl() terra.ListValue[mediaservicesaccount.KeyDeliveryAccessControlAttributes] {
	return terra.ReferenceList[mediaservicesaccount.KeyDeliveryAccessControlAttributes](msa.ref.Append("key_delivery_access_control"))
}

func (msa mediaServicesAccountAttributes) StorageAccount() terra.SetValue[mediaservicesaccount.StorageAccountAttributes] {
	return terra.ReferenceSet[mediaservicesaccount.StorageAccountAttributes](msa.ref.Append("storage_account"))
}

func (msa mediaServicesAccountAttributes) Timeouts() mediaservicesaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[mediaservicesaccount.TimeoutsAttributes](msa.ref.Append("timeouts"))
}

type mediaServicesAccountState struct {
	Id                         string                                               `json:"id"`
	Location                   string                                               `json:"location"`
	Name                       string                                               `json:"name"`
	PublicNetworkAccessEnabled bool                                                 `json:"public_network_access_enabled"`
	ResourceGroupName          string                                               `json:"resource_group_name"`
	StorageAuthenticationType  string                                               `json:"storage_authentication_type"`
	Tags                       map[string]string                                    `json:"tags"`
	Encryption                 []mediaservicesaccount.EncryptionState               `json:"encryption"`
	Identity                   []mediaservicesaccount.IdentityState                 `json:"identity"`
	KeyDeliveryAccessControl   []mediaservicesaccount.KeyDeliveryAccessControlState `json:"key_delivery_access_control"`
	StorageAccount             []mediaservicesaccount.StorageAccountState           `json:"storage_account"`
	Timeouts                   *mediaservicesaccount.TimeoutsState                  `json:"timeouts"`
}
