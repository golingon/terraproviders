// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	notificationhubnamespace "github.com/golingon/terraproviders/azurerm/3.49.0/notificationhubnamespace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNotificationHubNamespace(name string, args NotificationHubNamespaceArgs) *NotificationHubNamespace {
	return &NotificationHubNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NotificationHubNamespace)(nil)

type NotificationHubNamespace struct {
	Name  string
	Args  NotificationHubNamespaceArgs
	state *notificationHubNamespaceState
}

func (nhn *NotificationHubNamespace) Type() string {
	return "azurerm_notification_hub_namespace"
}

func (nhn *NotificationHubNamespace) LocalName() string {
	return nhn.Name
}

func (nhn *NotificationHubNamespace) Configuration() interface{} {
	return nhn.Args
}

func (nhn *NotificationHubNamespace) Attributes() notificationHubNamespaceAttributes {
	return notificationHubNamespaceAttributes{ref: terra.ReferenceResource(nhn)}
}

func (nhn *NotificationHubNamespace) ImportState(av io.Reader) error {
	nhn.state = &notificationHubNamespaceState{}
	if err := json.NewDecoder(av).Decode(nhn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nhn.Type(), nhn.LocalName(), err)
	}
	return nil
}

func (nhn *NotificationHubNamespace) State() (*notificationHubNamespaceState, bool) {
	return nhn.state, nhn.state != nil
}

func (nhn *NotificationHubNamespace) StateMust() *notificationHubNamespaceState {
	if nhn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nhn.Type(), nhn.LocalName()))
	}
	return nhn.state
}

func (nhn *NotificationHubNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(nhn)
}

type NotificationHubNamespaceArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceType: string, required
	NamespaceType terra.StringValue `hcl:"namespace_type,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *notificationhubnamespace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NotificationHubNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type notificationHubNamespaceAttributes struct {
	ref terra.Reference
}

func (nhn notificationHubNamespaceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(nhn.ref.Append("enabled"))
}

func (nhn notificationHubNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("id"))
}

func (nhn notificationHubNamespaceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("location"))
}

func (nhn notificationHubNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("name"))
}

func (nhn notificationHubNamespaceAttributes) NamespaceType() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("namespace_type"))
}

func (nhn notificationHubNamespaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("resource_group_name"))
}

func (nhn notificationHubNamespaceAttributes) ServicebusEndpoint() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("servicebus_endpoint"))
}

func (nhn notificationHubNamespaceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(nhn.ref.Append("sku_name"))
}

func (nhn notificationHubNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nhn.ref.Append("tags"))
}

func (nhn notificationHubNamespaceAttributes) Timeouts() notificationhubnamespace.TimeoutsAttributes {
	return terra.ReferenceSingle[notificationhubnamespace.TimeoutsAttributes](nhn.ref.Append("timeouts"))
}

type notificationHubNamespaceState struct {
	Enabled            bool                                    `json:"enabled"`
	Id                 string                                  `json:"id"`
	Location           string                                  `json:"location"`
	Name               string                                  `json:"name"`
	NamespaceType      string                                  `json:"namespace_type"`
	ResourceGroupName  string                                  `json:"resource_group_name"`
	ServicebusEndpoint string                                  `json:"servicebus_endpoint"`
	SkuName            string                                  `json:"sku_name"`
	Tags               map[string]string                       `json:"tags"`
	Timeouts           *notificationhubnamespace.TimeoutsState `json:"timeouts"`
}
