// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticsdatasourcewindowsevent "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticsdatasourcewindowsevent"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsDatasourceWindowsEvent(name string, args LogAnalyticsDatasourceWindowsEventArgs) *LogAnalyticsDatasourceWindowsEvent {
	return &LogAnalyticsDatasourceWindowsEvent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsDatasourceWindowsEvent)(nil)

type LogAnalyticsDatasourceWindowsEvent struct {
	Name  string
	Args  LogAnalyticsDatasourceWindowsEventArgs
	state *logAnalyticsDatasourceWindowsEventState
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) Type() string {
	return "azurerm_log_analytics_datasource_windows_event"
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) LocalName() string {
	return ladwe.Name
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) Configuration() interface{} {
	return ladwe.Args
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) Attributes() logAnalyticsDatasourceWindowsEventAttributes {
	return logAnalyticsDatasourceWindowsEventAttributes{ref: terra.ReferenceResource(ladwe)}
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) ImportState(av io.Reader) error {
	ladwe.state = &logAnalyticsDatasourceWindowsEventState{}
	if err := json.NewDecoder(av).Decode(ladwe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ladwe.Type(), ladwe.LocalName(), err)
	}
	return nil
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) State() (*logAnalyticsDatasourceWindowsEventState, bool) {
	return ladwe.state, ladwe.state != nil
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) StateMust() *logAnalyticsDatasourceWindowsEventState {
	if ladwe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ladwe.Type(), ladwe.LocalName()))
	}
	return ladwe.state
}

func (ladwe *LogAnalyticsDatasourceWindowsEvent) DependOn() terra.Reference {
	return terra.ReferenceResource(ladwe)
}

type LogAnalyticsDatasourceWindowsEventArgs struct {
	// EventLogName: string, required
	EventLogName terra.StringValue `hcl:"event_log_name,attr" validate:"required"`
	// EventTypes: set of string, required
	EventTypes terra.SetValue[terra.StringValue] `hcl:"event_types,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// WorkspaceName: string, required
	WorkspaceName terra.StringValue `hcl:"workspace_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *loganalyticsdatasourcewindowsevent.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsDatasourceWindowsEvent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsDatasourceWindowsEventAttributes struct {
	ref terra.Reference
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) EventLogName() terra.StringValue {
	return terra.ReferenceString(ladwe.ref.Append("event_log_name"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) EventTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ladwe.ref.Append("event_types"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ladwe.ref.Append("id"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ladwe.ref.Append("name"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ladwe.ref.Append("resource_group_name"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) WorkspaceName() terra.StringValue {
	return terra.ReferenceString(ladwe.ref.Append("workspace_name"))
}

func (ladwe logAnalyticsDatasourceWindowsEventAttributes) Timeouts() loganalyticsdatasourcewindowsevent.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticsdatasourcewindowsevent.TimeoutsAttributes](ladwe.ref.Append("timeouts"))
}

type logAnalyticsDatasourceWindowsEventState struct {
	EventLogName      string                                            `json:"event_log_name"`
	EventTypes        []string                                          `json:"event_types"`
	Id                string                                            `json:"id"`
	Name              string                                            `json:"name"`
	ResourceGroupName string                                            `json:"resource_group_name"`
	WorkspaceName     string                                            `json:"workspace_name"`
	Timeouts          *loganalyticsdatasourcewindowsevent.TimeoutsState `json:"timeouts"`
}
