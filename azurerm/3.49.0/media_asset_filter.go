// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediaassetfilter "github.com/golingon/terraproviders/azurerm/3.49.0/mediaassetfilter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaAssetFilter(name string, args MediaAssetFilterArgs) *MediaAssetFilter {
	return &MediaAssetFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaAssetFilter)(nil)

type MediaAssetFilter struct {
	Name  string
	Args  MediaAssetFilterArgs
	state *mediaAssetFilterState
}

func (maf *MediaAssetFilter) Type() string {
	return "azurerm_media_asset_filter"
}

func (maf *MediaAssetFilter) LocalName() string {
	return maf.Name
}

func (maf *MediaAssetFilter) Configuration() interface{} {
	return maf.Args
}

func (maf *MediaAssetFilter) Attributes() mediaAssetFilterAttributes {
	return mediaAssetFilterAttributes{ref: terra.ReferenceResource(maf)}
}

func (maf *MediaAssetFilter) ImportState(av io.Reader) error {
	maf.state = &mediaAssetFilterState{}
	if err := json.NewDecoder(av).Decode(maf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", maf.Type(), maf.LocalName(), err)
	}
	return nil
}

func (maf *MediaAssetFilter) State() (*mediaAssetFilterState, bool) {
	return maf.state, maf.state != nil
}

func (maf *MediaAssetFilter) StateMust() *mediaAssetFilterState {
	if maf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", maf.Type(), maf.LocalName()))
	}
	return maf.state
}

func (maf *MediaAssetFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(maf)
}

type MediaAssetFilterArgs struct {
	// AssetId: string, required
	AssetId terra.StringValue `hcl:"asset_id,attr" validate:"required"`
	// FirstQualityBitrate: number, optional
	FirstQualityBitrate terra.NumberValue `hcl:"first_quality_bitrate,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PresentationTimeRange: optional
	PresentationTimeRange *mediaassetfilter.PresentationTimeRange `hcl:"presentation_time_range,block"`
	// Timeouts: optional
	Timeouts *mediaassetfilter.Timeouts `hcl:"timeouts,block"`
	// TrackSelection: min=0
	TrackSelection []mediaassetfilter.TrackSelection `hcl:"track_selection,block" validate:"min=0"`
	// DependsOn contains resources that MediaAssetFilter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaAssetFilterAttributes struct {
	ref terra.Reference
}

func (maf mediaAssetFilterAttributes) AssetId() terra.StringValue {
	return terra.ReferenceString(maf.ref.Append("asset_id"))
}

func (maf mediaAssetFilterAttributes) FirstQualityBitrate() terra.NumberValue {
	return terra.ReferenceNumber(maf.ref.Append("first_quality_bitrate"))
}

func (maf mediaAssetFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(maf.ref.Append("id"))
}

func (maf mediaAssetFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(maf.ref.Append("name"))
}

func (maf mediaAssetFilterAttributes) PresentationTimeRange() terra.ListValue[mediaassetfilter.PresentationTimeRangeAttributes] {
	return terra.ReferenceList[mediaassetfilter.PresentationTimeRangeAttributes](maf.ref.Append("presentation_time_range"))
}

func (maf mediaAssetFilterAttributes) Timeouts() mediaassetfilter.TimeoutsAttributes {
	return terra.ReferenceSingle[mediaassetfilter.TimeoutsAttributes](maf.ref.Append("timeouts"))
}

func (maf mediaAssetFilterAttributes) TrackSelection() terra.ListValue[mediaassetfilter.TrackSelectionAttributes] {
	return terra.ReferenceList[mediaassetfilter.TrackSelectionAttributes](maf.ref.Append("track_selection"))
}

type mediaAssetFilterState struct {
	AssetId               string                                        `json:"asset_id"`
	FirstQualityBitrate   float64                                       `json:"first_quality_bitrate"`
	Id                    string                                        `json:"id"`
	Name                  string                                        `json:"name"`
	PresentationTimeRange []mediaassetfilter.PresentationTimeRangeState `json:"presentation_time_range"`
	Timeouts              *mediaassetfilter.TimeoutsState               `json:"timeouts"`
	TrackSelection        []mediaassetfilter.TrackSelectionState        `json:"track_selection"`
}
