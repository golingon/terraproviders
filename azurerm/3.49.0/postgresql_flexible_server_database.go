// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlflexibleserverdatabase "github.com/golingon/terraproviders/azurerm/3.49.0/postgresqlflexibleserverdatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPostgresqlFlexibleServerDatabase(name string, args PostgresqlFlexibleServerDatabaseArgs) *PostgresqlFlexibleServerDatabase {
	return &PostgresqlFlexibleServerDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlFlexibleServerDatabase)(nil)

type PostgresqlFlexibleServerDatabase struct {
	Name  string
	Args  PostgresqlFlexibleServerDatabaseArgs
	state *postgresqlFlexibleServerDatabaseState
}

func (pfsd *PostgresqlFlexibleServerDatabase) Type() string {
	return "azurerm_postgresql_flexible_server_database"
}

func (pfsd *PostgresqlFlexibleServerDatabase) LocalName() string {
	return pfsd.Name
}

func (pfsd *PostgresqlFlexibleServerDatabase) Configuration() interface{} {
	return pfsd.Args
}

func (pfsd *PostgresqlFlexibleServerDatabase) Attributes() postgresqlFlexibleServerDatabaseAttributes {
	return postgresqlFlexibleServerDatabaseAttributes{ref: terra.ReferenceResource(pfsd)}
}

func (pfsd *PostgresqlFlexibleServerDatabase) ImportState(av io.Reader) error {
	pfsd.state = &postgresqlFlexibleServerDatabaseState{}
	if err := json.NewDecoder(av).Decode(pfsd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pfsd.Type(), pfsd.LocalName(), err)
	}
	return nil
}

func (pfsd *PostgresqlFlexibleServerDatabase) State() (*postgresqlFlexibleServerDatabaseState, bool) {
	return pfsd.state, pfsd.state != nil
}

func (pfsd *PostgresqlFlexibleServerDatabase) StateMust() *postgresqlFlexibleServerDatabaseState {
	if pfsd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pfsd.Type(), pfsd.LocalName()))
	}
	return pfsd.state
}

func (pfsd *PostgresqlFlexibleServerDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(pfsd)
}

type PostgresqlFlexibleServerDatabaseArgs struct {
	// Charset: string, optional
	Charset terra.StringValue `hcl:"charset,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *postgresqlflexibleserverdatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PostgresqlFlexibleServerDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type postgresqlFlexibleServerDatabaseAttributes struct {
	ref terra.Reference
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) Charset() terra.StringValue {
	return terra.ReferenceString(pfsd.ref.Append("charset"))
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceString(pfsd.ref.Append("collation"))
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pfsd.ref.Append("id"))
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pfsd.ref.Append("name"))
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) ServerId() terra.StringValue {
	return terra.ReferenceString(pfsd.ref.Append("server_id"))
}

func (pfsd postgresqlFlexibleServerDatabaseAttributes) Timeouts() postgresqlflexibleserverdatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[postgresqlflexibleserverdatabase.TimeoutsAttributes](pfsd.ref.Append("timeouts"))
}

type postgresqlFlexibleServerDatabaseState struct {
	Charset   string                                          `json:"charset"`
	Collation string                                          `json:"collation"`
	Id        string                                          `json:"id"`
	Name      string                                          `json:"name"`
	ServerId  string                                          `json:"server_id"`
	Timeouts  *postgresqlflexibleserverdatabase.TimeoutsState `json:"timeouts"`
}
