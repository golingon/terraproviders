// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementglobalschema "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementglobalschema"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementGlobalSchema(name string, args ApiManagementGlobalSchemaArgs) *ApiManagementGlobalSchema {
	return &ApiManagementGlobalSchema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementGlobalSchema)(nil)

type ApiManagementGlobalSchema struct {
	Name  string
	Args  ApiManagementGlobalSchemaArgs
	state *apiManagementGlobalSchemaState
}

func (amgs *ApiManagementGlobalSchema) Type() string {
	return "azurerm_api_management_global_schema"
}

func (amgs *ApiManagementGlobalSchema) LocalName() string {
	return amgs.Name
}

func (amgs *ApiManagementGlobalSchema) Configuration() interface{} {
	return amgs.Args
}

func (amgs *ApiManagementGlobalSchema) Attributes() apiManagementGlobalSchemaAttributes {
	return apiManagementGlobalSchemaAttributes{ref: terra.ReferenceResource(amgs)}
}

func (amgs *ApiManagementGlobalSchema) ImportState(av io.Reader) error {
	amgs.state = &apiManagementGlobalSchemaState{}
	if err := json.NewDecoder(av).Decode(amgs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amgs.Type(), amgs.LocalName(), err)
	}
	return nil
}

func (amgs *ApiManagementGlobalSchema) State() (*apiManagementGlobalSchemaState, bool) {
	return amgs.state, amgs.state != nil
}

func (amgs *ApiManagementGlobalSchema) StateMust() *apiManagementGlobalSchemaState {
	if amgs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amgs.Type(), amgs.LocalName()))
	}
	return amgs.state
}

func (amgs *ApiManagementGlobalSchema) DependOn() terra.Reference {
	return terra.ReferenceResource(amgs)
}

type ApiManagementGlobalSchemaArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SchemaId: string, required
	SchemaId terra.StringValue `hcl:"schema_id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apimanagementglobalschema.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementGlobalSchema depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementGlobalSchemaAttributes struct {
	ref terra.Reference
}

func (amgs apiManagementGlobalSchemaAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("api_management_name"))
}

func (amgs apiManagementGlobalSchemaAttributes) Description() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("description"))
}

func (amgs apiManagementGlobalSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("id"))
}

func (amgs apiManagementGlobalSchemaAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("resource_group_name"))
}

func (amgs apiManagementGlobalSchemaAttributes) SchemaId() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("schema_id"))
}

func (amgs apiManagementGlobalSchemaAttributes) Type() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("type"))
}

func (amgs apiManagementGlobalSchemaAttributes) Value() terra.StringValue {
	return terra.ReferenceString(amgs.ref.Append("value"))
}

func (amgs apiManagementGlobalSchemaAttributes) Timeouts() apimanagementglobalschema.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementglobalschema.TimeoutsAttributes](amgs.ref.Append("timeouts"))
}

type apiManagementGlobalSchemaState struct {
	ApiManagementName string                                   `json:"api_management_name"`
	Description       string                                   `json:"description"`
	Id                string                                   `json:"id"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	SchemaId          string                                   `json:"schema_id"`
	Type              string                                   `json:"type"`
	Value             string                                   `json:"value"`
	Timeouts          *apimanagementglobalschema.TimeoutsState `json:"timeouts"`
}
