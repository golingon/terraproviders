// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadnssrvrecord

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Record struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type RecordAttributes struct {
	ref terra.Reference
}

func (r RecordAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RecordAttributes) InternalWithRef(ref terra.Reference) RecordAttributes {
	return RecordAttributes{ref: ref}
}

func (r RecordAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RecordAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("port"))
}

func (r RecordAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("priority"))
}

func (r RecordAttributes) Target() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("target"))
}

func (r RecordAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("weight"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type RecordState struct {
	Port     float64 `json:"port"`
	Priority float64 `json:"priority"`
	Target   string  `json:"target"`
	Weight   float64 `json:"weight"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
