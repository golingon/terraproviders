// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	routeserver "github.com/golingon/terraproviders/azurerm/3.49.0/routeserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRouteServer(name string, args RouteServerArgs) *RouteServer {
	return &RouteServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RouteServer)(nil)

type RouteServer struct {
	Name  string
	Args  RouteServerArgs
	state *routeServerState
}

func (rs *RouteServer) Type() string {
	return "azurerm_route_server"
}

func (rs *RouteServer) LocalName() string {
	return rs.Name
}

func (rs *RouteServer) Configuration() interface{} {
	return rs.Args
}

func (rs *RouteServer) Attributes() routeServerAttributes {
	return routeServerAttributes{ref: terra.ReferenceResource(rs)}
}

func (rs *RouteServer) ImportState(av io.Reader) error {
	rs.state = &routeServerState{}
	if err := json.NewDecoder(av).Decode(rs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rs.Type(), rs.LocalName(), err)
	}
	return nil
}

func (rs *RouteServer) State() (*routeServerState, bool) {
	return rs.state, rs.state != nil
}

func (rs *RouteServer) StateMust() *routeServerState {
	if rs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rs.Type(), rs.LocalName()))
	}
	return rs.state
}

func (rs *RouteServer) DependOn() terra.Reference {
	return terra.ReferenceResource(rs)
}

type RouteServerArgs struct {
	// BranchToBranchTrafficEnabled: bool, optional
	BranchToBranchTrafficEnabled terra.BoolValue `hcl:"branch_to_branch_traffic_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *routeserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RouteServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type routeServerAttributes struct {
	ref terra.Reference
}

func (rs routeServerAttributes) BranchToBranchTrafficEnabled() terra.BoolValue {
	return terra.ReferenceBool(rs.ref.Append("branch_to_branch_traffic_enabled"))
}

func (rs routeServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("id"))
}

func (rs routeServerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("location"))
}

func (rs routeServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("name"))
}

func (rs routeServerAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("public_ip_address_id"))
}

func (rs routeServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("resource_group_name"))
}

func (rs routeServerAttributes) RoutingState() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("routing_state"))
}

func (rs routeServerAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("sku"))
}

func (rs routeServerAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("subnet_id"))
}

func (rs routeServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rs.ref.Append("tags"))
}

func (rs routeServerAttributes) VirtualRouterAsn() terra.NumberValue {
	return terra.ReferenceNumber(rs.ref.Append("virtual_router_asn"))
}

func (rs routeServerAttributes) VirtualRouterIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rs.ref.Append("virtual_router_ips"))
}

func (rs routeServerAttributes) Timeouts() routeserver.TimeoutsAttributes {
	return terra.ReferenceSingle[routeserver.TimeoutsAttributes](rs.ref.Append("timeouts"))
}

type routeServerState struct {
	BranchToBranchTrafficEnabled bool                       `json:"branch_to_branch_traffic_enabled"`
	Id                           string                     `json:"id"`
	Location                     string                     `json:"location"`
	Name                         string                     `json:"name"`
	PublicIpAddressId            string                     `json:"public_ip_address_id"`
	ResourceGroupName            string                     `json:"resource_group_name"`
	RoutingState                 string                     `json:"routing_state"`
	Sku                          string                     `json:"sku"`
	SubnetId                     string                     `json:"subnet_id"`
	Tags                         map[string]string          `json:"tags"`
	VirtualRouterAsn             float64                    `json:"virtual_router_asn"`
	VirtualRouterIps             []string                   `json:"virtual_router_ips"`
	Timeouts                     *routeserver.TimeoutsState `json:"timeouts"`
}
