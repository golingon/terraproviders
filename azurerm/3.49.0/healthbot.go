// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	healthbot "github.com/golingon/terraproviders/azurerm/3.49.0/healthbot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthbot(name string, args HealthbotArgs) *Healthbot {
	return &Healthbot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Healthbot)(nil)

type Healthbot struct {
	Name  string
	Args  HealthbotArgs
	state *healthbotState
}

func (h *Healthbot) Type() string {
	return "azurerm_healthbot"
}

func (h *Healthbot) LocalName() string {
	return h.Name
}

func (h *Healthbot) Configuration() interface{} {
	return h.Args
}

func (h *Healthbot) Attributes() healthbotAttributes {
	return healthbotAttributes{ref: terra.ReferenceResource(h)}
}

func (h *Healthbot) ImportState(av io.Reader) error {
	h.state = &healthbotState{}
	if err := json.NewDecoder(av).Decode(h.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", h.Type(), h.LocalName(), err)
	}
	return nil
}

func (h *Healthbot) State() (*healthbotState, bool) {
	return h.state, h.state != nil
}

func (h *Healthbot) StateMust() *healthbotState {
	if h.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", h.Type(), h.LocalName()))
	}
	return h.state
}

func (h *Healthbot) DependOn() terra.Reference {
	return terra.ReferenceResource(h)
}

type HealthbotArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *healthbot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Healthbot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthbotAttributes struct {
	ref terra.Reference
}

func (h healthbotAttributes) BotManagementPortalUrl() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("bot_management_portal_url"))
}

func (h healthbotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("id"))
}

func (h healthbotAttributes) Location() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("location"))
}

func (h healthbotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("name"))
}

func (h healthbotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("resource_group_name"))
}

func (h healthbotAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("sku_name"))
}

func (h healthbotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](h.ref.Append("tags"))
}

func (h healthbotAttributes) Timeouts() healthbot.TimeoutsAttributes {
	return terra.ReferenceSingle[healthbot.TimeoutsAttributes](h.ref.Append("timeouts"))
}

type healthbotState struct {
	BotManagementPortalUrl string                   `json:"bot_management_portal_url"`
	Id                     string                   `json:"id"`
	Location               string                   `json:"location"`
	Name                   string                   `json:"name"`
	ResourceGroupName      string                   `json:"resource_group_name"`
	SkuName                string                   `json:"sku_name"`
	Tags                   map[string]string        `json:"tags"`
	Timeouts               *healthbot.TimeoutsState `json:"timeouts"`
}
