// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	managedapplication "github.com/golingon/terraproviders/azurerm/3.49.0/managedapplication"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagedApplication(name string, args ManagedApplicationArgs) *ManagedApplication {
	return &ManagedApplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagedApplication)(nil)

type ManagedApplication struct {
	Name  string
	Args  ManagedApplicationArgs
	state *managedApplicationState
}

func (ma *ManagedApplication) Type() string {
	return "azurerm_managed_application"
}

func (ma *ManagedApplication) LocalName() string {
	return ma.Name
}

func (ma *ManagedApplication) Configuration() interface{} {
	return ma.Args
}

func (ma *ManagedApplication) Attributes() managedApplicationAttributes {
	return managedApplicationAttributes{ref: terra.ReferenceResource(ma)}
}

func (ma *ManagedApplication) ImportState(av io.Reader) error {
	ma.state = &managedApplicationState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

func (ma *ManagedApplication) State() (*managedApplicationState, bool) {
	return ma.state, ma.state != nil
}

func (ma *ManagedApplication) StateMust() *managedApplicationState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

func (ma *ManagedApplication) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

type ManagedApplicationArgs struct {
	// ApplicationDefinitionId: string, optional
	ApplicationDefinitionId terra.StringValue `hcl:"application_definition_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroupName: string, required
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParameterValues: string, optional
	ParameterValues terra.StringValue `hcl:"parameter_values,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Plan: optional
	Plan *managedapplication.Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *managedapplication.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagedApplication depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managedApplicationAttributes struct {
	ref terra.Reference
}

func (ma managedApplicationAttributes) ApplicationDefinitionId() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("application_definition_id"))
}

func (ma managedApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("id"))
}

func (ma managedApplicationAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("kind"))
}

func (ma managedApplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("location"))
}

func (ma managedApplicationAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("managed_resource_group_name"))
}

func (ma managedApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("name"))
}

func (ma managedApplicationAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("outputs"))
}

func (ma managedApplicationAttributes) ParameterValues() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("parameter_values"))
}

func (ma managedApplicationAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("parameters"))
}

func (ma managedApplicationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("resource_group_name"))
}

func (ma managedApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("tags"))
}

func (ma managedApplicationAttributes) Plan() terra.ListValue[managedapplication.PlanAttributes] {
	return terra.ReferenceList[managedapplication.PlanAttributes](ma.ref.Append("plan"))
}

func (ma managedApplicationAttributes) Timeouts() managedapplication.TimeoutsAttributes {
	return terra.ReferenceSingle[managedapplication.TimeoutsAttributes](ma.ref.Append("timeouts"))
}

type managedApplicationState struct {
	ApplicationDefinitionId  string                            `json:"application_definition_id"`
	Id                       string                            `json:"id"`
	Kind                     string                            `json:"kind"`
	Location                 string                            `json:"location"`
	ManagedResourceGroupName string                            `json:"managed_resource_group_name"`
	Name                     string                            `json:"name"`
	Outputs                  map[string]string                 `json:"outputs"`
	ParameterValues          string                            `json:"parameter_values"`
	Parameters               map[string]string                 `json:"parameters"`
	ResourceGroupName        string                            `json:"resource_group_name"`
	Tags                     map[string]string                 `json:"tags"`
	Plan                     []managedapplication.PlanState    `json:"plan"`
	Timeouts                 *managedapplication.TimeoutsState `json:"timeouts"`
}
