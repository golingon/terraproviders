// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsmxrecord "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsmxrecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsMxRecord(name string, args PrivateDnsMxRecordArgs) *PrivateDnsMxRecord {
	return &PrivateDnsMxRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsMxRecord)(nil)

type PrivateDnsMxRecord struct {
	Name  string
	Args  PrivateDnsMxRecordArgs
	state *privateDnsMxRecordState
}

func (pdmr *PrivateDnsMxRecord) Type() string {
	return "azurerm_private_dns_mx_record"
}

func (pdmr *PrivateDnsMxRecord) LocalName() string {
	return pdmr.Name
}

func (pdmr *PrivateDnsMxRecord) Configuration() interface{} {
	return pdmr.Args
}

func (pdmr *PrivateDnsMxRecord) Attributes() privateDnsMxRecordAttributes {
	return privateDnsMxRecordAttributes{ref: terra.ReferenceResource(pdmr)}
}

func (pdmr *PrivateDnsMxRecord) ImportState(av io.Reader) error {
	pdmr.state = &privateDnsMxRecordState{}
	if err := json.NewDecoder(av).Decode(pdmr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdmr.Type(), pdmr.LocalName(), err)
	}
	return nil
}

func (pdmr *PrivateDnsMxRecord) State() (*privateDnsMxRecordState, bool) {
	return pdmr.state, pdmr.state != nil
}

func (pdmr *PrivateDnsMxRecord) StateMust() *privateDnsMxRecordState {
	if pdmr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdmr.Type(), pdmr.LocalName()))
	}
	return pdmr.state
}

func (pdmr *PrivateDnsMxRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(pdmr)
}

type PrivateDnsMxRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Record: min=1
	Record []privatednsmxrecord.Record `hcl:"record,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *privatednsmxrecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsMxRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsMxRecordAttributes struct {
	ref terra.Reference
}

func (pdmr privateDnsMxRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(pdmr.ref.Append("fqdn"))
}

func (pdmr privateDnsMxRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdmr.ref.Append("id"))
}

func (pdmr privateDnsMxRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdmr.ref.Append("name"))
}

func (pdmr privateDnsMxRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pdmr.ref.Append("resource_group_name"))
}

func (pdmr privateDnsMxRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdmr.ref.Append("tags"))
}

func (pdmr privateDnsMxRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(pdmr.ref.Append("ttl"))
}

func (pdmr privateDnsMxRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(pdmr.ref.Append("zone_name"))
}

func (pdmr privateDnsMxRecordAttributes) Record() terra.SetValue[privatednsmxrecord.RecordAttributes] {
	return terra.ReferenceSet[privatednsmxrecord.RecordAttributes](pdmr.ref.Append("record"))
}

func (pdmr privateDnsMxRecordAttributes) Timeouts() privatednsmxrecord.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsmxrecord.TimeoutsAttributes](pdmr.ref.Append("timeouts"))
}

type privateDnsMxRecordState struct {
	Fqdn              string                            `json:"fqdn"`
	Id                string                            `json:"id"`
	Name              string                            `json:"name"`
	ResourceGroupName string                            `json:"resource_group_name"`
	Tags              map[string]string                 `json:"tags"`
	Ttl               float64                           `json:"ttl"`
	ZoneName          string                            `json:"zone_name"`
	Record            []privatednsmxrecord.RecordState  `json:"record"`
	Timeouts          *privatednsmxrecord.TimeoutsState `json:"timeouts"`
}
