// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	backuppolicyvmworkload "github.com/golingon/terraproviders/azurerm/3.49.0/backuppolicyvmworkload"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupPolicyVmWorkload(name string, args BackupPolicyVmWorkloadArgs) *BackupPolicyVmWorkload {
	return &BackupPolicyVmWorkload{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupPolicyVmWorkload)(nil)

type BackupPolicyVmWorkload struct {
	Name  string
	Args  BackupPolicyVmWorkloadArgs
	state *backupPolicyVmWorkloadState
}

func (bpvw *BackupPolicyVmWorkload) Type() string {
	return "azurerm_backup_policy_vm_workload"
}

func (bpvw *BackupPolicyVmWorkload) LocalName() string {
	return bpvw.Name
}

func (bpvw *BackupPolicyVmWorkload) Configuration() interface{} {
	return bpvw.Args
}

func (bpvw *BackupPolicyVmWorkload) Attributes() backupPolicyVmWorkloadAttributes {
	return backupPolicyVmWorkloadAttributes{ref: terra.ReferenceResource(bpvw)}
}

func (bpvw *BackupPolicyVmWorkload) ImportState(av io.Reader) error {
	bpvw.state = &backupPolicyVmWorkloadState{}
	if err := json.NewDecoder(av).Decode(bpvw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bpvw.Type(), bpvw.LocalName(), err)
	}
	return nil
}

func (bpvw *BackupPolicyVmWorkload) State() (*backupPolicyVmWorkloadState, bool) {
	return bpvw.state, bpvw.state != nil
}

func (bpvw *BackupPolicyVmWorkload) StateMust() *backupPolicyVmWorkloadState {
	if bpvw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bpvw.Type(), bpvw.LocalName()))
	}
	return bpvw.state
}

func (bpvw *BackupPolicyVmWorkload) DependOn() terra.Reference {
	return terra.ReferenceResource(bpvw)
}

type BackupPolicyVmWorkloadArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// WorkloadType: string, required
	WorkloadType terra.StringValue `hcl:"workload_type,attr" validate:"required"`
	// ProtectionPolicy: min=1
	ProtectionPolicy []backuppolicyvmworkload.ProtectionPolicy `hcl:"protection_policy,block" validate:"min=1"`
	// Settings: required
	Settings *backuppolicyvmworkload.Settings `hcl:"settings,block" validate:"required"`
	// Timeouts: optional
	Timeouts *backuppolicyvmworkload.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BackupPolicyVmWorkload depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupPolicyVmWorkloadAttributes struct {
	ref terra.Reference
}

func (bpvw backupPolicyVmWorkloadAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bpvw.ref.Append("id"))
}

func (bpvw backupPolicyVmWorkloadAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bpvw.ref.Append("name"))
}

func (bpvw backupPolicyVmWorkloadAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceString(bpvw.ref.Append("recovery_vault_name"))
}

func (bpvw backupPolicyVmWorkloadAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bpvw.ref.Append("resource_group_name"))
}

func (bpvw backupPolicyVmWorkloadAttributes) WorkloadType() terra.StringValue {
	return terra.ReferenceString(bpvw.ref.Append("workload_type"))
}

func (bpvw backupPolicyVmWorkloadAttributes) ProtectionPolicy() terra.SetValue[backuppolicyvmworkload.ProtectionPolicyAttributes] {
	return terra.ReferenceSet[backuppolicyvmworkload.ProtectionPolicyAttributes](bpvw.ref.Append("protection_policy"))
}

func (bpvw backupPolicyVmWorkloadAttributes) Settings() terra.ListValue[backuppolicyvmworkload.SettingsAttributes] {
	return terra.ReferenceList[backuppolicyvmworkload.SettingsAttributes](bpvw.ref.Append("settings"))
}

func (bpvw backupPolicyVmWorkloadAttributes) Timeouts() backuppolicyvmworkload.TimeoutsAttributes {
	return terra.ReferenceSingle[backuppolicyvmworkload.TimeoutsAttributes](bpvw.ref.Append("timeouts"))
}

type backupPolicyVmWorkloadState struct {
	Id                string                                         `json:"id"`
	Name              string                                         `json:"name"`
	RecoveryVaultName string                                         `json:"recovery_vault_name"`
	ResourceGroupName string                                         `json:"resource_group_name"`
	WorkloadType      string                                         `json:"workload_type"`
	ProtectionPolicy  []backuppolicyvmworkload.ProtectionPolicyState `json:"protection_policy"`
	Settings          []backuppolicyvmworkload.SettingsState         `json:"settings"`
	Timeouts          *backuppolicyvmworkload.TimeoutsState          `json:"timeouts"`
}
