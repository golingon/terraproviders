// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	elasticcloudelasticsearch "github.com/golingon/terraproviders/azurerm/3.49.0/elasticcloudelasticsearch"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticCloudElasticsearch(name string, args ElasticCloudElasticsearchArgs) *ElasticCloudElasticsearch {
	return &ElasticCloudElasticsearch{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticCloudElasticsearch)(nil)

type ElasticCloudElasticsearch struct {
	Name  string
	Args  ElasticCloudElasticsearchArgs
	state *elasticCloudElasticsearchState
}

func (ece *ElasticCloudElasticsearch) Type() string {
	return "azurerm_elastic_cloud_elasticsearch"
}

func (ece *ElasticCloudElasticsearch) LocalName() string {
	return ece.Name
}

func (ece *ElasticCloudElasticsearch) Configuration() interface{} {
	return ece.Args
}

func (ece *ElasticCloudElasticsearch) Attributes() elasticCloudElasticsearchAttributes {
	return elasticCloudElasticsearchAttributes{ref: terra.ReferenceResource(ece)}
}

func (ece *ElasticCloudElasticsearch) ImportState(av io.Reader) error {
	ece.state = &elasticCloudElasticsearchState{}
	if err := json.NewDecoder(av).Decode(ece.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ece.Type(), ece.LocalName(), err)
	}
	return nil
}

func (ece *ElasticCloudElasticsearch) State() (*elasticCloudElasticsearchState, bool) {
	return ece.state, ece.state != nil
}

func (ece *ElasticCloudElasticsearch) StateMust() *elasticCloudElasticsearchState {
	if ece.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ece.Type(), ece.LocalName()))
	}
	return ece.state
}

func (ece *ElasticCloudElasticsearch) DependOn() terra.Reference {
	return terra.ReferenceResource(ece)
}

type ElasticCloudElasticsearchArgs struct {
	// ElasticCloudEmailAddress: string, required
	ElasticCloudEmailAddress terra.StringValue `hcl:"elastic_cloud_email_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MonitoringEnabled: bool, optional
	MonitoringEnabled terra.BoolValue `hcl:"monitoring_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Logs: optional
	Logs *elasticcloudelasticsearch.Logs `hcl:"logs,block"`
	// Timeouts: optional
	Timeouts *elasticcloudelasticsearch.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ElasticCloudElasticsearch depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticCloudElasticsearchAttributes struct {
	ref terra.Reference
}

func (ece elasticCloudElasticsearchAttributes) ElasticCloudDeploymentId() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("elastic_cloud_deployment_id"))
}

func (ece elasticCloudElasticsearchAttributes) ElasticCloudEmailAddress() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("elastic_cloud_email_address"))
}

func (ece elasticCloudElasticsearchAttributes) ElasticCloudSsoDefaultUrl() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("elastic_cloud_sso_default_url"))
}

func (ece elasticCloudElasticsearchAttributes) ElasticCloudUserId() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("elastic_cloud_user_id"))
}

func (ece elasticCloudElasticsearchAttributes) ElasticsearchServiceUrl() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("elasticsearch_service_url"))
}

func (ece elasticCloudElasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("id"))
}

func (ece elasticCloudElasticsearchAttributes) KibanaServiceUrl() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("kibana_service_url"))
}

func (ece elasticCloudElasticsearchAttributes) KibanaSsoUri() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("kibana_sso_uri"))
}

func (ece elasticCloudElasticsearchAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("location"))
}

func (ece elasticCloudElasticsearchAttributes) MonitoringEnabled() terra.BoolValue {
	return terra.ReferenceBool(ece.ref.Append("monitoring_enabled"))
}

func (ece elasticCloudElasticsearchAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("name"))
}

func (ece elasticCloudElasticsearchAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("resource_group_name"))
}

func (ece elasticCloudElasticsearchAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ece.ref.Append("sku_name"))
}

func (ece elasticCloudElasticsearchAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ece.ref.Append("tags"))
}

func (ece elasticCloudElasticsearchAttributes) Logs() terra.ListValue[elasticcloudelasticsearch.LogsAttributes] {
	return terra.ReferenceList[elasticcloudelasticsearch.LogsAttributes](ece.ref.Append("logs"))
}

func (ece elasticCloudElasticsearchAttributes) Timeouts() elasticcloudelasticsearch.TimeoutsAttributes {
	return terra.ReferenceSingle[elasticcloudelasticsearch.TimeoutsAttributes](ece.ref.Append("timeouts"))
}

type elasticCloudElasticsearchState struct {
	ElasticCloudDeploymentId  string                                   `json:"elastic_cloud_deployment_id"`
	ElasticCloudEmailAddress  string                                   `json:"elastic_cloud_email_address"`
	ElasticCloudSsoDefaultUrl string                                   `json:"elastic_cloud_sso_default_url"`
	ElasticCloudUserId        string                                   `json:"elastic_cloud_user_id"`
	ElasticsearchServiceUrl   string                                   `json:"elasticsearch_service_url"`
	Id                        string                                   `json:"id"`
	KibanaServiceUrl          string                                   `json:"kibana_service_url"`
	KibanaSsoUri              string                                   `json:"kibana_sso_uri"`
	Location                  string                                   `json:"location"`
	MonitoringEnabled         bool                                     `json:"monitoring_enabled"`
	Name                      string                                   `json:"name"`
	ResourceGroupName         string                                   `json:"resource_group_name"`
	SkuName                   string                                   `json:"sku_name"`
	Tags                      map[string]string                        `json:"tags"`
	Logs                      []elasticcloudelasticsearch.LogsState    `json:"logs"`
	Timeouts                  *elasticcloudelasticsearch.TimeoutsState `json:"timeouts"`
}
