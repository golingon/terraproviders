// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	botchannelslack "github.com/golingon/terraproviders/azurerm/3.49.0/botchannelslack"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBotChannelSlack(name string, args BotChannelSlackArgs) *BotChannelSlack {
	return &BotChannelSlack{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BotChannelSlack)(nil)

type BotChannelSlack struct {
	Name  string
	Args  BotChannelSlackArgs
	state *botChannelSlackState
}

func (bcs *BotChannelSlack) Type() string {
	return "azurerm_bot_channel_slack"
}

func (bcs *BotChannelSlack) LocalName() string {
	return bcs.Name
}

func (bcs *BotChannelSlack) Configuration() interface{} {
	return bcs.Args
}

func (bcs *BotChannelSlack) Attributes() botChannelSlackAttributes {
	return botChannelSlackAttributes{ref: terra.ReferenceResource(bcs)}
}

func (bcs *BotChannelSlack) ImportState(av io.Reader) error {
	bcs.state = &botChannelSlackState{}
	if err := json.NewDecoder(av).Decode(bcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bcs.Type(), bcs.LocalName(), err)
	}
	return nil
}

func (bcs *BotChannelSlack) State() (*botChannelSlackState, bool) {
	return bcs.state, bcs.state != nil
}

func (bcs *BotChannelSlack) StateMust() *botChannelSlackState {
	if bcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bcs.Type(), bcs.LocalName()))
	}
	return bcs.state
}

func (bcs *BotChannelSlack) DependOn() terra.Reference {
	return terra.ReferenceResource(bcs)
}

type BotChannelSlackArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LandingPageUrl: string, optional
	LandingPageUrl terra.StringValue `hcl:"landing_page_url,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SigningSecret: string, optional
	SigningSecret terra.StringValue `hcl:"signing_secret,attr"`
	// VerificationToken: string, required
	VerificationToken terra.StringValue `hcl:"verification_token,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *botchannelslack.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BotChannelSlack depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type botChannelSlackAttributes struct {
	ref terra.Reference
}

func (bcs botChannelSlackAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("bot_name"))
}

func (bcs botChannelSlackAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("client_id"))
}

func (bcs botChannelSlackAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("client_secret"))
}

func (bcs botChannelSlackAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("id"))
}

func (bcs botChannelSlackAttributes) LandingPageUrl() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("landing_page_url"))
}

func (bcs botChannelSlackAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("location"))
}

func (bcs botChannelSlackAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("resource_group_name"))
}

func (bcs botChannelSlackAttributes) SigningSecret() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("signing_secret"))
}

func (bcs botChannelSlackAttributes) VerificationToken() terra.StringValue {
	return terra.ReferenceString(bcs.ref.Append("verification_token"))
}

func (bcs botChannelSlackAttributes) Timeouts() botchannelslack.TimeoutsAttributes {
	return terra.ReferenceSingle[botchannelslack.TimeoutsAttributes](bcs.ref.Append("timeouts"))
}

type botChannelSlackState struct {
	BotName           string                         `json:"bot_name"`
	ClientId          string                         `json:"client_id"`
	ClientSecret      string                         `json:"client_secret"`
	Id                string                         `json:"id"`
	LandingPageUrl    string                         `json:"landing_page_url"`
	Location          string                         `json:"location"`
	ResourceGroupName string                         `json:"resource_group_name"`
	SigningSecret     string                         `json:"signing_secret"`
	VerificationToken string                         `json:"verification_token"`
	Timeouts          *botchannelslack.TimeoutsState `json:"timeouts"`
}
