// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorycustomdataset "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorycustomdataset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryCustomDataset(name string, args DataFactoryCustomDatasetArgs) *DataFactoryCustomDataset {
	return &DataFactoryCustomDataset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryCustomDataset)(nil)

type DataFactoryCustomDataset struct {
	Name  string
	Args  DataFactoryCustomDatasetArgs
	state *dataFactoryCustomDatasetState
}

func (dfcd *DataFactoryCustomDataset) Type() string {
	return "azurerm_data_factory_custom_dataset"
}

func (dfcd *DataFactoryCustomDataset) LocalName() string {
	return dfcd.Name
}

func (dfcd *DataFactoryCustomDataset) Configuration() interface{} {
	return dfcd.Args
}

func (dfcd *DataFactoryCustomDataset) Attributes() dataFactoryCustomDatasetAttributes {
	return dataFactoryCustomDatasetAttributes{ref: terra.ReferenceResource(dfcd)}
}

func (dfcd *DataFactoryCustomDataset) ImportState(av io.Reader) error {
	dfcd.state = &dataFactoryCustomDatasetState{}
	if err := json.NewDecoder(av).Decode(dfcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfcd.Type(), dfcd.LocalName(), err)
	}
	return nil
}

func (dfcd *DataFactoryCustomDataset) State() (*dataFactoryCustomDatasetState, bool) {
	return dfcd.state, dfcd.state != nil
}

func (dfcd *DataFactoryCustomDataset) StateMust() *dataFactoryCustomDatasetState {
	if dfcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfcd.Type(), dfcd.LocalName()))
	}
	return dfcd.state
}

func (dfcd *DataFactoryCustomDataset) DependOn() terra.Reference {
	return terra.ReferenceResource(dfcd)
}

type DataFactoryCustomDatasetArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SchemaJson: string, optional
	SchemaJson terra.StringValue `hcl:"schema_json,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypePropertiesJson: string, required
	TypePropertiesJson terra.StringValue `hcl:"type_properties_json,attr" validate:"required"`
	// LinkedService: required
	LinkedService *datafactorycustomdataset.LinkedService `hcl:"linked_service,block" validate:"required"`
	// Timeouts: optional
	Timeouts *datafactorycustomdataset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryCustomDataset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryCustomDatasetAttributes struct {
	ref terra.Reference
}

func (dfcd dataFactoryCustomDatasetAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfcd.ref.Append("additional_properties"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfcd.ref.Append("annotations"))
}

func (dfcd dataFactoryCustomDatasetAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("data_factory_id"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("description"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("folder"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("id"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("name"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfcd.ref.Append("parameters"))
}

func (dfcd dataFactoryCustomDatasetAttributes) SchemaJson() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("schema_json"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Type() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("type"))
}

func (dfcd dataFactoryCustomDatasetAttributes) TypePropertiesJson() terra.StringValue {
	return terra.ReferenceString(dfcd.ref.Append("type_properties_json"))
}

func (dfcd dataFactoryCustomDatasetAttributes) LinkedService() terra.ListValue[datafactorycustomdataset.LinkedServiceAttributes] {
	return terra.ReferenceList[datafactorycustomdataset.LinkedServiceAttributes](dfcd.ref.Append("linked_service"))
}

func (dfcd dataFactoryCustomDatasetAttributes) Timeouts() datafactorycustomdataset.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorycustomdataset.TimeoutsAttributes](dfcd.ref.Append("timeouts"))
}

type dataFactoryCustomDatasetState struct {
	AdditionalProperties map[string]string                             `json:"additional_properties"`
	Annotations          []string                                      `json:"annotations"`
	DataFactoryId        string                                        `json:"data_factory_id"`
	Description          string                                        `json:"description"`
	Folder               string                                        `json:"folder"`
	Id                   string                                        `json:"id"`
	Name                 string                                        `json:"name"`
	Parameters           map[string]string                             `json:"parameters"`
	SchemaJson           string                                        `json:"schema_json"`
	Type                 string                                        `json:"type"`
	TypePropertiesJson   string                                        `json:"type_properties_json"`
	LinkedService        []datafactorycustomdataset.LinkedServiceState `json:"linked_service"`
	Timeouts             *datafactorycustomdataset.TimeoutsState       `json:"timeouts"`
}
