// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databasemigrationproject "github.com/golingon/terraproviders/azurerm/3.49.0/databasemigrationproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatabaseMigrationProject(name string, args DatabaseMigrationProjectArgs) *DatabaseMigrationProject {
	return &DatabaseMigrationProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabaseMigrationProject)(nil)

type DatabaseMigrationProject struct {
	Name  string
	Args  DatabaseMigrationProjectArgs
	state *databaseMigrationProjectState
}

func (dmp *DatabaseMigrationProject) Type() string {
	return "azurerm_database_migration_project"
}

func (dmp *DatabaseMigrationProject) LocalName() string {
	return dmp.Name
}

func (dmp *DatabaseMigrationProject) Configuration() interface{} {
	return dmp.Args
}

func (dmp *DatabaseMigrationProject) Attributes() databaseMigrationProjectAttributes {
	return databaseMigrationProjectAttributes{ref: terra.ReferenceResource(dmp)}
}

func (dmp *DatabaseMigrationProject) ImportState(av io.Reader) error {
	dmp.state = &databaseMigrationProjectState{}
	if err := json.NewDecoder(av).Decode(dmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmp.Type(), dmp.LocalName(), err)
	}
	return nil
}

func (dmp *DatabaseMigrationProject) State() (*databaseMigrationProjectState, bool) {
	return dmp.state, dmp.state != nil
}

func (dmp *DatabaseMigrationProject) StateMust() *databaseMigrationProjectState {
	if dmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmp.Type(), dmp.LocalName()))
	}
	return dmp.state
}

func (dmp *DatabaseMigrationProject) DependOn() terra.Reference {
	return terra.ReferenceResource(dmp)
}

type DatabaseMigrationProjectArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// SourcePlatform: string, required
	SourcePlatform terra.StringValue `hcl:"source_platform,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetPlatform: string, required
	TargetPlatform terra.StringValue `hcl:"target_platform,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *databasemigrationproject.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatabaseMigrationProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databaseMigrationProjectAttributes struct {
	ref terra.Reference
}

func (dmp databaseMigrationProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("id"))
}

func (dmp databaseMigrationProjectAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("location"))
}

func (dmp databaseMigrationProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("name"))
}

func (dmp databaseMigrationProjectAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("resource_group_name"))
}

func (dmp databaseMigrationProjectAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("service_name"))
}

func (dmp databaseMigrationProjectAttributes) SourcePlatform() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("source_platform"))
}

func (dmp databaseMigrationProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dmp.ref.Append("tags"))
}

func (dmp databaseMigrationProjectAttributes) TargetPlatform() terra.StringValue {
	return terra.ReferenceString(dmp.ref.Append("target_platform"))
}

func (dmp databaseMigrationProjectAttributes) Timeouts() databasemigrationproject.TimeoutsAttributes {
	return terra.ReferenceSingle[databasemigrationproject.TimeoutsAttributes](dmp.ref.Append("timeouts"))
}

type databaseMigrationProjectState struct {
	Id                string                                  `json:"id"`
	Location          string                                  `json:"location"`
	Name              string                                  `json:"name"`
	ResourceGroupName string                                  `json:"resource_group_name"`
	ServiceName       string                                  `json:"service_name"`
	SourcePlatform    string                                  `json:"source_platform"`
	Tags              map[string]string                       `json:"tags"`
	TargetPlatform    string                                  `json:"target_platform"`
	Timeouts          *databasemigrationproject.TimeoutsState `json:"timeouts"`
}
