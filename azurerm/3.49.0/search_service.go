// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	searchservice "github.com/golingon/terraproviders/azurerm/3.49.0/searchservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSearchService(name string, args SearchServiceArgs) *SearchService {
	return &SearchService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SearchService)(nil)

type SearchService struct {
	Name  string
	Args  SearchServiceArgs
	state *searchServiceState
}

func (ss *SearchService) Type() string {
	return "azurerm_search_service"
}

func (ss *SearchService) LocalName() string {
	return ss.Name
}

func (ss *SearchService) Configuration() interface{} {
	return ss.Args
}

func (ss *SearchService) Attributes() searchServiceAttributes {
	return searchServiceAttributes{ref: terra.ReferenceResource(ss)}
}

func (ss *SearchService) ImportState(av io.Reader) error {
	ss.state = &searchServiceState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

func (ss *SearchService) State() (*searchServiceState, bool) {
	return ss.state, ss.state != nil
}

func (ss *SearchService) StateMust() *searchServiceState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

func (ss *SearchService) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

type SearchServiceArgs struct {
	// AllowedIps: list of string, optional
	AllowedIps terra.ListValue[terra.StringValue] `hcl:"allowed_ips,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionCount: number, optional
	PartitionCount terra.NumberValue `hcl:"partition_count,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// QueryKeys: min=0
	QueryKeys []searchservice.QueryKeys `hcl:"query_keys,block" validate:"min=0"`
	// Identity: optional
	Identity *searchservice.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *searchservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SearchService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type searchServiceAttributes struct {
	ref terra.Reference
}

func (ss searchServiceAttributes) AllowedIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ss.ref.Append("allowed_ips"))
}

func (ss searchServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("id"))
}

func (ss searchServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("location"))
}

func (ss searchServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name"))
}

func (ss searchServiceAttributes) PartitionCount() terra.NumberValue {
	return terra.ReferenceNumber(ss.ref.Append("partition_count"))
}

func (ss searchServiceAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("primary_key"))
}

func (ss searchServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ss.ref.Append("public_network_access_enabled"))
}

func (ss searchServiceAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceNumber(ss.ref.Append("replica_count"))
}

func (ss searchServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("resource_group_name"))
}

func (ss searchServiceAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("secondary_key"))
}

func (ss searchServiceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("sku"))
}

func (ss searchServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags"))
}

func (ss searchServiceAttributes) QueryKeys() terra.ListValue[searchservice.QueryKeysAttributes] {
	return terra.ReferenceList[searchservice.QueryKeysAttributes](ss.ref.Append("query_keys"))
}

func (ss searchServiceAttributes) Identity() terra.ListValue[searchservice.IdentityAttributes] {
	return terra.ReferenceList[searchservice.IdentityAttributes](ss.ref.Append("identity"))
}

func (ss searchServiceAttributes) Timeouts() searchservice.TimeoutsAttributes {
	return terra.ReferenceSingle[searchservice.TimeoutsAttributes](ss.ref.Append("timeouts"))
}

type searchServiceState struct {
	AllowedIps                 []string                       `json:"allowed_ips"`
	Id                         string                         `json:"id"`
	Location                   string                         `json:"location"`
	Name                       string                         `json:"name"`
	PartitionCount             float64                        `json:"partition_count"`
	PrimaryKey                 string                         `json:"primary_key"`
	PublicNetworkAccessEnabled bool                           `json:"public_network_access_enabled"`
	ReplicaCount               float64                        `json:"replica_count"`
	ResourceGroupName          string                         `json:"resource_group_name"`
	SecondaryKey               string                         `json:"secondary_key"`
	Sku                        string                         `json:"sku"`
	Tags                       map[string]string              `json:"tags"`
	QueryKeys                  []searchservice.QueryKeysState `json:"query_keys"`
	Identity                   []searchservice.IdentityState  `json:"identity"`
	Timeouts                   *searchservice.TimeoutsState   `json:"timeouts"`
}
