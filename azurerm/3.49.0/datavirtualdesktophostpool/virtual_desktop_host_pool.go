// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datavirtualdesktophostpool

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ScheduledAgentUpdates struct {
	// Schedule: min=0
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0"`
}

type Schedule struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type ScheduledAgentUpdatesAttributes struct {
	ref terra.Reference
}

func (sau ScheduledAgentUpdatesAttributes) InternalRef() terra.Reference {
	return sau.ref
}

func (sau ScheduledAgentUpdatesAttributes) InternalWithRef(ref terra.Reference) ScheduledAgentUpdatesAttributes {
	return ScheduledAgentUpdatesAttributes{ref: ref}
}

func (sau ScheduledAgentUpdatesAttributes) InternalTokens() hclwrite.Tokens {
	return sau.ref.InternalTokens()
}

func (sau ScheduledAgentUpdatesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(sau.ref.Append("enabled"))
}

func (sau ScheduledAgentUpdatesAttributes) Timezone() terra.StringValue {
	return terra.ReferenceString(sau.ref.Append("timezone"))
}

func (sau ScheduledAgentUpdatesAttributes) UseSessionHostTimezone() terra.BoolValue {
	return terra.ReferenceBool(sau.ref.Append("use_session_host_timezone"))
}

func (sau ScheduledAgentUpdatesAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceList[ScheduleAttributes](sau.ref.Append("schedule"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("day_of_week"))
}

func (s ScheduleAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("hour_of_day"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type ScheduledAgentUpdatesState struct {
	Enabled                bool            `json:"enabled"`
	Timezone               string          `json:"timezone"`
	UseSessionHostTimezone bool            `json:"use_session_host_timezone"`
	Schedule               []ScheduleState `json:"schedule"`
}

type ScheduleState struct {
	DayOfWeek string  `json:"day_of_week"`
	HourOfDay float64 `json:"hour_of_day"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
