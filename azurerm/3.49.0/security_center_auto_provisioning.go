// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterautoprovisioning "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterautoprovisioning"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterAutoProvisioning(name string, args SecurityCenterAutoProvisioningArgs) *SecurityCenterAutoProvisioning {
	return &SecurityCenterAutoProvisioning{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterAutoProvisioning)(nil)

type SecurityCenterAutoProvisioning struct {
	Name  string
	Args  SecurityCenterAutoProvisioningArgs
	state *securityCenterAutoProvisioningState
}

func (scap *SecurityCenterAutoProvisioning) Type() string {
	return "azurerm_security_center_auto_provisioning"
}

func (scap *SecurityCenterAutoProvisioning) LocalName() string {
	return scap.Name
}

func (scap *SecurityCenterAutoProvisioning) Configuration() interface{} {
	return scap.Args
}

func (scap *SecurityCenterAutoProvisioning) Attributes() securityCenterAutoProvisioningAttributes {
	return securityCenterAutoProvisioningAttributes{ref: terra.ReferenceResource(scap)}
}

func (scap *SecurityCenterAutoProvisioning) ImportState(av io.Reader) error {
	scap.state = &securityCenterAutoProvisioningState{}
	if err := json.NewDecoder(av).Decode(scap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scap.Type(), scap.LocalName(), err)
	}
	return nil
}

func (scap *SecurityCenterAutoProvisioning) State() (*securityCenterAutoProvisioningState, bool) {
	return scap.state, scap.state != nil
}

func (scap *SecurityCenterAutoProvisioning) StateMust() *securityCenterAutoProvisioningState {
	if scap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scap.Type(), scap.LocalName()))
	}
	return scap.state
}

func (scap *SecurityCenterAutoProvisioning) DependOn() terra.Reference {
	return terra.ReferenceResource(scap)
}

type SecurityCenterAutoProvisioningArgs struct {
	// AutoProvision: string, required
	AutoProvision terra.StringValue `hcl:"auto_provision,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *securitycenterautoprovisioning.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterAutoProvisioning depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterAutoProvisioningAttributes struct {
	ref terra.Reference
}

func (scap securityCenterAutoProvisioningAttributes) AutoProvision() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("auto_provision"))
}

func (scap securityCenterAutoProvisioningAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("id"))
}

func (scap securityCenterAutoProvisioningAttributes) Timeouts() securitycenterautoprovisioning.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterautoprovisioning.TimeoutsAttributes](scap.ref.Append("timeouts"))
}

type securityCenterAutoProvisioningState struct {
	AutoProvision string                                        `json:"auto_provision"`
	Id            string                                        `json:"id"`
	Timeouts      *securitycenterautoprovisioning.TimeoutsState `json:"timeouts"`
}
