// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	devtestwindowsvirtualmachine "github.com/golingon/terraproviders/azurerm/3.49.0/devtestwindowsvirtualmachine"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDevTestWindowsVirtualMachine(name string, args DevTestWindowsVirtualMachineArgs) *DevTestWindowsVirtualMachine {
	return &DevTestWindowsVirtualMachine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevTestWindowsVirtualMachine)(nil)

type DevTestWindowsVirtualMachine struct {
	Name  string
	Args  DevTestWindowsVirtualMachineArgs
	state *devTestWindowsVirtualMachineState
}

func (dtwvm *DevTestWindowsVirtualMachine) Type() string {
	return "azurerm_dev_test_windows_virtual_machine"
}

func (dtwvm *DevTestWindowsVirtualMachine) LocalName() string {
	return dtwvm.Name
}

func (dtwvm *DevTestWindowsVirtualMachine) Configuration() interface{} {
	return dtwvm.Args
}

func (dtwvm *DevTestWindowsVirtualMachine) Attributes() devTestWindowsVirtualMachineAttributes {
	return devTestWindowsVirtualMachineAttributes{ref: terra.ReferenceResource(dtwvm)}
}

func (dtwvm *DevTestWindowsVirtualMachine) ImportState(av io.Reader) error {
	dtwvm.state = &devTestWindowsVirtualMachineState{}
	if err := json.NewDecoder(av).Decode(dtwvm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dtwvm.Type(), dtwvm.LocalName(), err)
	}
	return nil
}

func (dtwvm *DevTestWindowsVirtualMachine) State() (*devTestWindowsVirtualMachineState, bool) {
	return dtwvm.state, dtwvm.state != nil
}

func (dtwvm *DevTestWindowsVirtualMachine) StateMust() *devTestWindowsVirtualMachineState {
	if dtwvm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dtwvm.Type(), dtwvm.LocalName()))
	}
	return dtwvm.state
}

func (dtwvm *DevTestWindowsVirtualMachine) DependOn() terra.Reference {
	return terra.ReferenceResource(dtwvm)
}

type DevTestWindowsVirtualMachineArgs struct {
	// AllowClaim: bool, optional
	AllowClaim terra.BoolValue `hcl:"allow_claim,attr"`
	// DisallowPublicIpAddress: bool, optional
	DisallowPublicIpAddress terra.BoolValue `hcl:"disallow_public_ip_address,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabName: string, required
	LabName terra.StringValue `hcl:"lab_name,attr" validate:"required"`
	// LabSubnetName: string, required
	LabSubnetName terra.StringValue `hcl:"lab_subnet_name,attr" validate:"required"`
	// LabVirtualNetworkId: string, required
	LabVirtualNetworkId terra.StringValue `hcl:"lab_virtual_network_id,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Size: string, required
	Size terra.StringValue `hcl:"size,attr" validate:"required"`
	// StorageType: string, required
	StorageType terra.StringValue `hcl:"storage_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// GalleryImageReference: required
	GalleryImageReference *devtestwindowsvirtualmachine.GalleryImageReference `hcl:"gallery_image_reference,block" validate:"required"`
	// InboundNatRule: min=0
	InboundNatRule []devtestwindowsvirtualmachine.InboundNatRule `hcl:"inbound_nat_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *devtestwindowsvirtualmachine.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DevTestWindowsVirtualMachine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type devTestWindowsVirtualMachineAttributes struct {
	ref terra.Reference
}

func (dtwvm devTestWindowsVirtualMachineAttributes) AllowClaim() terra.BoolValue {
	return terra.ReferenceBool(dtwvm.ref.Append("allow_claim"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) DisallowPublicIpAddress() terra.BoolValue {
	return terra.ReferenceBool(dtwvm.ref.Append("disallow_public_ip_address"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("fqdn"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("id"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) LabName() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("lab_name"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) LabSubnetName() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("lab_subnet_name"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) LabVirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("lab_virtual_network_id"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("location"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("name"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Notes() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("notes"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Password() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("password"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("resource_group_name"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Size() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("size"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) StorageType() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("storage_type"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtwvm.ref.Append("tags"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) UniqueIdentifier() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("unique_identifier"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Username() terra.StringValue {
	return terra.ReferenceString(dtwvm.ref.Append("username"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) GalleryImageReference() terra.ListValue[devtestwindowsvirtualmachine.GalleryImageReferenceAttributes] {
	return terra.ReferenceList[devtestwindowsvirtualmachine.GalleryImageReferenceAttributes](dtwvm.ref.Append("gallery_image_reference"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) InboundNatRule() terra.SetValue[devtestwindowsvirtualmachine.InboundNatRuleAttributes] {
	return terra.ReferenceSet[devtestwindowsvirtualmachine.InboundNatRuleAttributes](dtwvm.ref.Append("inbound_nat_rule"))
}

func (dtwvm devTestWindowsVirtualMachineAttributes) Timeouts() devtestwindowsvirtualmachine.TimeoutsAttributes {
	return terra.ReferenceSingle[devtestwindowsvirtualmachine.TimeoutsAttributes](dtwvm.ref.Append("timeouts"))
}

type devTestWindowsVirtualMachineState struct {
	AllowClaim              bool                                                      `json:"allow_claim"`
	DisallowPublicIpAddress bool                                                      `json:"disallow_public_ip_address"`
	Fqdn                    string                                                    `json:"fqdn"`
	Id                      string                                                    `json:"id"`
	LabName                 string                                                    `json:"lab_name"`
	LabSubnetName           string                                                    `json:"lab_subnet_name"`
	LabVirtualNetworkId     string                                                    `json:"lab_virtual_network_id"`
	Location                string                                                    `json:"location"`
	Name                    string                                                    `json:"name"`
	Notes                   string                                                    `json:"notes"`
	Password                string                                                    `json:"password"`
	ResourceGroupName       string                                                    `json:"resource_group_name"`
	Size                    string                                                    `json:"size"`
	StorageType             string                                                    `json:"storage_type"`
	Tags                    map[string]string                                         `json:"tags"`
	UniqueIdentifier        string                                                    `json:"unique_identifier"`
	Username                string                                                    `json:"username"`
	GalleryImageReference   []devtestwindowsvirtualmachine.GalleryImageReferenceState `json:"gallery_image_reference"`
	InboundNatRule          []devtestwindowsvirtualmachine.InboundNatRuleState        `json:"inbound_nat_rule"`
	Timeouts                *devtestwindowsvirtualmachine.TimeoutsState               `json:"timeouts"`
}
