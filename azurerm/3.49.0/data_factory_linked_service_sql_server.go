// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicesqlserver "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicesqlserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceSqlServer(name string, args DataFactoryLinkedServiceSqlServerArgs) *DataFactoryLinkedServiceSqlServer {
	return &DataFactoryLinkedServiceSqlServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceSqlServer)(nil)

type DataFactoryLinkedServiceSqlServer struct {
	Name  string
	Args  DataFactoryLinkedServiceSqlServerArgs
	state *dataFactoryLinkedServiceSqlServerState
}

func (dflsss *DataFactoryLinkedServiceSqlServer) Type() string {
	return "azurerm_data_factory_linked_service_sql_server"
}

func (dflsss *DataFactoryLinkedServiceSqlServer) LocalName() string {
	return dflsss.Name
}

func (dflsss *DataFactoryLinkedServiceSqlServer) Configuration() interface{} {
	return dflsss.Args
}

func (dflsss *DataFactoryLinkedServiceSqlServer) Attributes() dataFactoryLinkedServiceSqlServerAttributes {
	return dataFactoryLinkedServiceSqlServerAttributes{ref: terra.ReferenceResource(dflsss)}
}

func (dflsss *DataFactoryLinkedServiceSqlServer) ImportState(av io.Reader) error {
	dflsss.state = &dataFactoryLinkedServiceSqlServerState{}
	if err := json.NewDecoder(av).Decode(dflsss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsss.Type(), dflsss.LocalName(), err)
	}
	return nil
}

func (dflsss *DataFactoryLinkedServiceSqlServer) State() (*dataFactoryLinkedServiceSqlServerState, bool) {
	return dflsss.state, dflsss.state != nil
}

func (dflsss *DataFactoryLinkedServiceSqlServer) StateMust() *dataFactoryLinkedServiceSqlServerState {
	if dflsss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsss.Type(), dflsss.LocalName()))
	}
	return dflsss.state
}

func (dflsss *DataFactoryLinkedServiceSqlServer) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsss)
}

type DataFactoryLinkedServiceSqlServerArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// KeyVaultConnectionString: optional
	KeyVaultConnectionString *datafactorylinkedservicesqlserver.KeyVaultConnectionString `hcl:"key_vault_connection_string,block"`
	// KeyVaultPassword: optional
	KeyVaultPassword *datafactorylinkedservicesqlserver.KeyVaultPassword `hcl:"key_vault_password,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicesqlserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceSqlServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceSqlServerAttributes struct {
	ref terra.Reference
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsss.ref.Append("additional_properties"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsss.ref.Append("annotations"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("connection_string"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("data_factory_id"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("description"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("id"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("integration_runtime_name"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("name"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsss.ref.Append("parameters"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(dflsss.ref.Append("user_name"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) KeyVaultConnectionString() terra.ListValue[datafactorylinkedservicesqlserver.KeyVaultConnectionStringAttributes] {
	return terra.ReferenceList[datafactorylinkedservicesqlserver.KeyVaultConnectionStringAttributes](dflsss.ref.Append("key_vault_connection_string"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) KeyVaultPassword() terra.ListValue[datafactorylinkedservicesqlserver.KeyVaultPasswordAttributes] {
	return terra.ReferenceList[datafactorylinkedservicesqlserver.KeyVaultPasswordAttributes](dflsss.ref.Append("key_vault_password"))
}

func (dflsss dataFactoryLinkedServiceSqlServerAttributes) Timeouts() datafactorylinkedservicesqlserver.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicesqlserver.TimeoutsAttributes](dflsss.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceSqlServerState struct {
	AdditionalProperties     map[string]string                                                 `json:"additional_properties"`
	Annotations              []string                                                          `json:"annotations"`
	ConnectionString         string                                                            `json:"connection_string"`
	DataFactoryId            string                                                            `json:"data_factory_id"`
	Description              string                                                            `json:"description"`
	Id                       string                                                            `json:"id"`
	IntegrationRuntimeName   string                                                            `json:"integration_runtime_name"`
	Name                     string                                                            `json:"name"`
	Parameters               map[string]string                                                 `json:"parameters"`
	UserName                 string                                                            `json:"user_name"`
	KeyVaultConnectionString []datafactorylinkedservicesqlserver.KeyVaultConnectionStringState `json:"key_vault_connection_string"`
	KeyVaultPassword         []datafactorylinkedservicesqlserver.KeyVaultPasswordState         `json:"key_vault_password"`
	Timeouts                 *datafactorylinkedservicesqlserver.TimeoutsState                  `json:"timeouts"`
}
