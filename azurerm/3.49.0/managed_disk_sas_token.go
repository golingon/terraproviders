// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	manageddisksastoken "github.com/golingon/terraproviders/azurerm/3.49.0/manageddisksastoken"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagedDiskSasToken(name string, args ManagedDiskSasTokenArgs) *ManagedDiskSasToken {
	return &ManagedDiskSasToken{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagedDiskSasToken)(nil)

type ManagedDiskSasToken struct {
	Name  string
	Args  ManagedDiskSasTokenArgs
	state *managedDiskSasTokenState
}

func (mdst *ManagedDiskSasToken) Type() string {
	return "azurerm_managed_disk_sas_token"
}

func (mdst *ManagedDiskSasToken) LocalName() string {
	return mdst.Name
}

func (mdst *ManagedDiskSasToken) Configuration() interface{} {
	return mdst.Args
}

func (mdst *ManagedDiskSasToken) Attributes() managedDiskSasTokenAttributes {
	return managedDiskSasTokenAttributes{ref: terra.ReferenceResource(mdst)}
}

func (mdst *ManagedDiskSasToken) ImportState(av io.Reader) error {
	mdst.state = &managedDiskSasTokenState{}
	if err := json.NewDecoder(av).Decode(mdst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdst.Type(), mdst.LocalName(), err)
	}
	return nil
}

func (mdst *ManagedDiskSasToken) State() (*managedDiskSasTokenState, bool) {
	return mdst.state, mdst.state != nil
}

func (mdst *ManagedDiskSasToken) StateMust() *managedDiskSasTokenState {
	if mdst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdst.Type(), mdst.LocalName()))
	}
	return mdst.state
}

func (mdst *ManagedDiskSasToken) DependOn() terra.Reference {
	return terra.ReferenceResource(mdst)
}

type ManagedDiskSasTokenArgs struct {
	// AccessLevel: string, required
	AccessLevel terra.StringValue `hcl:"access_level,attr" validate:"required"`
	// DurationInSeconds: number, required
	DurationInSeconds terra.NumberValue `hcl:"duration_in_seconds,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedDiskId: string, required
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *manageddisksastoken.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagedDiskSasToken depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managedDiskSasTokenAttributes struct {
	ref terra.Reference
}

func (mdst managedDiskSasTokenAttributes) AccessLevel() terra.StringValue {
	return terra.ReferenceString(mdst.ref.Append("access_level"))
}

func (mdst managedDiskSasTokenAttributes) DurationInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(mdst.ref.Append("duration_in_seconds"))
}

func (mdst managedDiskSasTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mdst.ref.Append("id"))
}

func (mdst managedDiskSasTokenAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceString(mdst.ref.Append("managed_disk_id"))
}

func (mdst managedDiskSasTokenAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceString(mdst.ref.Append("sas_url"))
}

func (mdst managedDiskSasTokenAttributes) Timeouts() manageddisksastoken.TimeoutsAttributes {
	return terra.ReferenceSingle[manageddisksastoken.TimeoutsAttributes](mdst.ref.Append("timeouts"))
}

type managedDiskSasTokenState struct {
	AccessLevel       string                             `json:"access_level"`
	DurationInSeconds float64                            `json:"duration_in_seconds"`
	Id                string                             `json:"id"`
	ManagedDiskId     string                             `json:"managed_disk_id"`
	SasUrl            string                             `json:"sas_url"`
	Timeouts          *manageddisksastoken.TimeoutsState `json:"timeouts"`
}
