// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	recoveryservicesvault "github.com/golingon/terraproviders/azurerm/3.49.0/recoveryservicesvault"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRecoveryServicesVault(name string, args RecoveryServicesVaultArgs) *RecoveryServicesVault {
	return &RecoveryServicesVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RecoveryServicesVault)(nil)

type RecoveryServicesVault struct {
	Name  string
	Args  RecoveryServicesVaultArgs
	state *recoveryServicesVaultState
}

func (rsv *RecoveryServicesVault) Type() string {
	return "azurerm_recovery_services_vault"
}

func (rsv *RecoveryServicesVault) LocalName() string {
	return rsv.Name
}

func (rsv *RecoveryServicesVault) Configuration() interface{} {
	return rsv.Args
}

func (rsv *RecoveryServicesVault) Attributes() recoveryServicesVaultAttributes {
	return recoveryServicesVaultAttributes{ref: terra.ReferenceResource(rsv)}
}

func (rsv *RecoveryServicesVault) ImportState(av io.Reader) error {
	rsv.state = &recoveryServicesVaultState{}
	if err := json.NewDecoder(av).Decode(rsv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rsv.Type(), rsv.LocalName(), err)
	}
	return nil
}

func (rsv *RecoveryServicesVault) State() (*recoveryServicesVaultState, bool) {
	return rsv.state, rsv.state != nil
}

func (rsv *RecoveryServicesVault) StateMust() *recoveryServicesVaultState {
	if rsv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rsv.Type(), rsv.LocalName()))
	}
	return rsv.state
}

func (rsv *RecoveryServicesVault) DependOn() terra.Reference {
	return terra.ReferenceResource(rsv)
}

type RecoveryServicesVaultArgs struct {
	// ClassicVmwareReplicationEnabled: bool, optional
	ClassicVmwareReplicationEnabled terra.BoolValue `hcl:"classic_vmware_replication_enabled,attr"`
	// CrossRegionRestoreEnabled: bool, optional
	CrossRegionRestoreEnabled terra.BoolValue `hcl:"cross_region_restore_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Immutability: string, optional
	Immutability terra.StringValue `hcl:"immutability,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// SoftDeleteEnabled: bool, optional
	SoftDeleteEnabled terra.BoolValue `hcl:"soft_delete_enabled,attr"`
	// StorageModeType: string, optional
	StorageModeType terra.StringValue `hcl:"storage_mode_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: optional
	Encryption *recoveryservicesvault.Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *recoveryservicesvault.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *recoveryservicesvault.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RecoveryServicesVault depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type recoveryServicesVaultAttributes struct {
	ref terra.Reference
}

func (rsv recoveryServicesVaultAttributes) ClassicVmwareReplicationEnabled() terra.BoolValue {
	return terra.ReferenceBool(rsv.ref.Append("classic_vmware_replication_enabled"))
}

func (rsv recoveryServicesVaultAttributes) CrossRegionRestoreEnabled() terra.BoolValue {
	return terra.ReferenceBool(rsv.ref.Append("cross_region_restore_enabled"))
}

func (rsv recoveryServicesVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("id"))
}

func (rsv recoveryServicesVaultAttributes) Immutability() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("immutability"))
}

func (rsv recoveryServicesVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("location"))
}

func (rsv recoveryServicesVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("name"))
}

func (rsv recoveryServicesVaultAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(rsv.ref.Append("public_network_access_enabled"))
}

func (rsv recoveryServicesVaultAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("resource_group_name"))
}

func (rsv recoveryServicesVaultAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("sku"))
}

func (rsv recoveryServicesVaultAttributes) SoftDeleteEnabled() terra.BoolValue {
	return terra.ReferenceBool(rsv.ref.Append("soft_delete_enabled"))
}

func (rsv recoveryServicesVaultAttributes) StorageModeType() terra.StringValue {
	return terra.ReferenceString(rsv.ref.Append("storage_mode_type"))
}

func (rsv recoveryServicesVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rsv.ref.Append("tags"))
}

func (rsv recoveryServicesVaultAttributes) Encryption() terra.ListValue[recoveryservicesvault.EncryptionAttributes] {
	return terra.ReferenceList[recoveryservicesvault.EncryptionAttributes](rsv.ref.Append("encryption"))
}

func (rsv recoveryServicesVaultAttributes) Identity() terra.ListValue[recoveryservicesvault.IdentityAttributes] {
	return terra.ReferenceList[recoveryservicesvault.IdentityAttributes](rsv.ref.Append("identity"))
}

func (rsv recoveryServicesVaultAttributes) Timeouts() recoveryservicesvault.TimeoutsAttributes {
	return terra.ReferenceSingle[recoveryservicesvault.TimeoutsAttributes](rsv.ref.Append("timeouts"))
}

type recoveryServicesVaultState struct {
	ClassicVmwareReplicationEnabled bool                                    `json:"classic_vmware_replication_enabled"`
	CrossRegionRestoreEnabled       bool                                    `json:"cross_region_restore_enabled"`
	Id                              string                                  `json:"id"`
	Immutability                    string                                  `json:"immutability"`
	Location                        string                                  `json:"location"`
	Name                            string                                  `json:"name"`
	PublicNetworkAccessEnabled      bool                                    `json:"public_network_access_enabled"`
	ResourceGroupName               string                                  `json:"resource_group_name"`
	Sku                             string                                  `json:"sku"`
	SoftDeleteEnabled               bool                                    `json:"soft_delete_enabled"`
	StorageModeType                 string                                  `json:"storage_mode_type"`
	Tags                            map[string]string                       `json:"tags"`
	Encryption                      []recoveryservicesvault.EncryptionState `json:"encryption"`
	Identity                        []recoveryservicesvault.IdentityState   `json:"identity"`
	Timeouts                        *recoveryservicesvault.TimeoutsState    `json:"timeouts"`
}
