// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mariadbconfiguration "github.com/golingon/terraproviders/azurerm/3.49.0/mariadbconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMariadbConfiguration(name string, args MariadbConfigurationArgs) *MariadbConfiguration {
	return &MariadbConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MariadbConfiguration)(nil)

type MariadbConfiguration struct {
	Name  string
	Args  MariadbConfigurationArgs
	state *mariadbConfigurationState
}

func (mc *MariadbConfiguration) Type() string {
	return "azurerm_mariadb_configuration"
}

func (mc *MariadbConfiguration) LocalName() string {
	return mc.Name
}

func (mc *MariadbConfiguration) Configuration() interface{} {
	return mc.Args
}

func (mc *MariadbConfiguration) Attributes() mariadbConfigurationAttributes {
	return mariadbConfigurationAttributes{ref: terra.ReferenceResource(mc)}
}

func (mc *MariadbConfiguration) ImportState(av io.Reader) error {
	mc.state = &mariadbConfigurationState{}
	if err := json.NewDecoder(av).Decode(mc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mc.Type(), mc.LocalName(), err)
	}
	return nil
}

func (mc *MariadbConfiguration) State() (*mariadbConfigurationState, bool) {
	return mc.state, mc.state != nil
}

func (mc *MariadbConfiguration) StateMust() *mariadbConfigurationState {
	if mc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mc.Type(), mc.LocalName()))
	}
	return mc.state
}

func (mc *MariadbConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(mc)
}

type MariadbConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mariadbconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MariadbConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mariadbConfigurationAttributes struct {
	ref terra.Reference
}

func (mc mariadbConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("id"))
}

func (mc mariadbConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("name"))
}

func (mc mariadbConfigurationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("resource_group_name"))
}

func (mc mariadbConfigurationAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("server_name"))
}

func (mc mariadbConfigurationAttributes) Value() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("value"))
}

func (mc mariadbConfigurationAttributes) Timeouts() mariadbconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[mariadbconfiguration.TimeoutsAttributes](mc.ref.Append("timeouts"))
}

type mariadbConfigurationState struct {
	Id                string                              `json:"id"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	ServerName        string                              `json:"server_name"`
	Value             string                              `json:"value"`
	Timeouts          *mariadbconfiguration.TimeoutsState `json:"timeouts"`
}
