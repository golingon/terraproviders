// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorytriggercustomevent "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorytriggercustomevent"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryTriggerCustomEvent(name string, args DataFactoryTriggerCustomEventArgs) *DataFactoryTriggerCustomEvent {
	return &DataFactoryTriggerCustomEvent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryTriggerCustomEvent)(nil)

type DataFactoryTriggerCustomEvent struct {
	Name  string
	Args  DataFactoryTriggerCustomEventArgs
	state *dataFactoryTriggerCustomEventState
}

func (dftce *DataFactoryTriggerCustomEvent) Type() string {
	return "azurerm_data_factory_trigger_custom_event"
}

func (dftce *DataFactoryTriggerCustomEvent) LocalName() string {
	return dftce.Name
}

func (dftce *DataFactoryTriggerCustomEvent) Configuration() interface{} {
	return dftce.Args
}

func (dftce *DataFactoryTriggerCustomEvent) Attributes() dataFactoryTriggerCustomEventAttributes {
	return dataFactoryTriggerCustomEventAttributes{ref: terra.ReferenceResource(dftce)}
}

func (dftce *DataFactoryTriggerCustomEvent) ImportState(av io.Reader) error {
	dftce.state = &dataFactoryTriggerCustomEventState{}
	if err := json.NewDecoder(av).Decode(dftce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dftce.Type(), dftce.LocalName(), err)
	}
	return nil
}

func (dftce *DataFactoryTriggerCustomEvent) State() (*dataFactoryTriggerCustomEventState, bool) {
	return dftce.state, dftce.state != nil
}

func (dftce *DataFactoryTriggerCustomEvent) StateMust() *dataFactoryTriggerCustomEventState {
	if dftce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dftce.Type(), dftce.LocalName()))
	}
	return dftce.state
}

func (dftce *DataFactoryTriggerCustomEvent) DependOn() terra.Reference {
	return terra.ReferenceResource(dftce)
}

type DataFactoryTriggerCustomEventArgs struct {
	// Activated: bool, optional
	Activated terra.BoolValue `hcl:"activated,attr"`
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventgridTopicId: string, required
	EventgridTopicId terra.StringValue `hcl:"eventgrid_topic_id,attr" validate:"required"`
	// Events: set of string, required
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubjectBeginsWith: string, optional
	SubjectBeginsWith terra.StringValue `hcl:"subject_begins_with,attr"`
	// SubjectEndsWith: string, optional
	SubjectEndsWith terra.StringValue `hcl:"subject_ends_with,attr"`
	// Pipeline: min=1
	Pipeline []datafactorytriggercustomevent.Pipeline `hcl:"pipeline,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *datafactorytriggercustomevent.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryTriggerCustomEvent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryTriggerCustomEventAttributes struct {
	ref terra.Reference
}

func (dftce dataFactoryTriggerCustomEventAttributes) Activated() terra.BoolValue {
	return terra.ReferenceBool(dftce.ref.Append("activated"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dftce.ref.Append("additional_properties"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dftce.ref.Append("annotations"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("data_factory_id"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("description"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) EventgridTopicId() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("eventgrid_topic_id"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dftce.ref.Append("events"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("id"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("name"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) SubjectBeginsWith() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("subject_begins_with"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) SubjectEndsWith() terra.StringValue {
	return terra.ReferenceString(dftce.ref.Append("subject_ends_with"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Pipeline() terra.SetValue[datafactorytriggercustomevent.PipelineAttributes] {
	return terra.ReferenceSet[datafactorytriggercustomevent.PipelineAttributes](dftce.ref.Append("pipeline"))
}

func (dftce dataFactoryTriggerCustomEventAttributes) Timeouts() datafactorytriggercustomevent.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorytriggercustomevent.TimeoutsAttributes](dftce.ref.Append("timeouts"))
}

type dataFactoryTriggerCustomEventState struct {
	Activated            bool                                          `json:"activated"`
	AdditionalProperties map[string]string                             `json:"additional_properties"`
	Annotations          []string                                      `json:"annotations"`
	DataFactoryId        string                                        `json:"data_factory_id"`
	Description          string                                        `json:"description"`
	EventgridTopicId     string                                        `json:"eventgrid_topic_id"`
	Events               []string                                      `json:"events"`
	Id                   string                                        `json:"id"`
	Name                 string                                        `json:"name"`
	SubjectBeginsWith    string                                        `json:"subject_begins_with"`
	SubjectEndsWith      string                                        `json:"subject_ends_with"`
	Pipeline             []datafactorytriggercustomevent.PipelineState `json:"pipeline"`
	Timeouts             *datafactorytriggercustomevent.TimeoutsState  `json:"timeouts"`
}
