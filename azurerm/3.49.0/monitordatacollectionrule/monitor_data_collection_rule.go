// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitordatacollectionrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DataFlow struct {
	// Destinations: list of string, required
	Destinations terra.ListValue[terra.StringValue] `hcl:"destinations,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type DataSources struct {
	// Extension: min=0
	Extension []Extension `hcl:"extension,block" validate:"min=0"`
	// PerformanceCounter: min=0
	PerformanceCounter []PerformanceCounter `hcl:"performance_counter,block" validate:"min=0"`
	// Syslog: min=0
	Syslog []Syslog `hcl:"syslog,block" validate:"min=0"`
	// WindowsEventLog: min=0
	WindowsEventLog []WindowsEventLog `hcl:"windows_event_log,block" validate:"min=0"`
}

type Extension struct {
	// ExtensionJson: string, optional
	ExtensionJson terra.StringValue `hcl:"extension_json,attr"`
	// ExtensionName: string, required
	ExtensionName terra.StringValue `hcl:"extension_name,attr" validate:"required"`
	// InputDataSources: list of string, optional
	InputDataSources terra.ListValue[terra.StringValue] `hcl:"input_data_sources,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type PerformanceCounter struct {
	// CounterSpecifiers: list of string, required
	CounterSpecifiers terra.ListValue[terra.StringValue] `hcl:"counter_specifiers,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SamplingFrequencyInSeconds: number, required
	SamplingFrequencyInSeconds terra.NumberValue `hcl:"sampling_frequency_in_seconds,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type Syslog struct {
	// FacilityNames: list of string, required
	FacilityNames terra.ListValue[terra.StringValue] `hcl:"facility_names,attr" validate:"required"`
	// LogLevels: list of string, required
	LogLevels terra.ListValue[terra.StringValue] `hcl:"log_levels,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, optional
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr"`
}

type WindowsEventLog struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
	// XPathQueries: list of string, required
	XPathQueries terra.ListValue[terra.StringValue] `hcl:"x_path_queries,attr" validate:"required"`
}

type Destinations struct {
	// AzureMonitorMetrics: optional
	AzureMonitorMetrics *AzureMonitorMetrics `hcl:"azure_monitor_metrics,block"`
	// LogAnalytics: min=0
	LogAnalytics []LogAnalytics `hcl:"log_analytics,block" validate:"min=0"`
}

type AzureMonitorMetrics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LogAnalytics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// WorkspaceResourceId: string, required
	WorkspaceResourceId terra.StringValue `hcl:"workspace_resource_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataFlowAttributes struct {
	ref terra.Reference
}

func (df DataFlowAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df DataFlowAttributes) InternalWithRef(ref terra.Reference) DataFlowAttributes {
	return DataFlowAttributes{ref: ref}
}

func (df DataFlowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df DataFlowAttributes) Destinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](df.ref.Append("destinations"))
}

func (df DataFlowAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](df.ref.Append("streams"))
}

type DataSourcesAttributes struct {
	ref terra.Reference
}

func (ds DataSourcesAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DataSourcesAttributes) InternalWithRef(ref terra.Reference) DataSourcesAttributes {
	return DataSourcesAttributes{ref: ref}
}

func (ds DataSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DataSourcesAttributes) Extension() terra.ListValue[ExtensionAttributes] {
	return terra.ReferenceAsList[ExtensionAttributes](ds.ref.Append("extension"))
}

func (ds DataSourcesAttributes) PerformanceCounter() terra.ListValue[PerformanceCounterAttributes] {
	return terra.ReferenceAsList[PerformanceCounterAttributes](ds.ref.Append("performance_counter"))
}

func (ds DataSourcesAttributes) Syslog() terra.ListValue[SyslogAttributes] {
	return terra.ReferenceAsList[SyslogAttributes](ds.ref.Append("syslog"))
}

func (ds DataSourcesAttributes) WindowsEventLog() terra.ListValue[WindowsEventLogAttributes] {
	return terra.ReferenceAsList[WindowsEventLogAttributes](ds.ref.Append("windows_event_log"))
}

type ExtensionAttributes struct {
	ref terra.Reference
}

func (e ExtensionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtensionAttributes) InternalWithRef(ref terra.Reference) ExtensionAttributes {
	return ExtensionAttributes{ref: ref}
}

func (e ExtensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtensionAttributes) ExtensionJson() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("extension_json"))
}

func (e ExtensionAttributes) ExtensionName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("extension_name"))
}

func (e ExtensionAttributes) InputDataSources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("input_data_sources"))
}

func (e ExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ExtensionAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("streams"))
}

type PerformanceCounterAttributes struct {
	ref terra.Reference
}

func (pc PerformanceCounterAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PerformanceCounterAttributes) InternalWithRef(ref terra.Reference) PerformanceCounterAttributes {
	return PerformanceCounterAttributes{ref: ref}
}

func (pc PerformanceCounterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PerformanceCounterAttributes) CounterSpecifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("counter_specifiers"))
}

func (pc PerformanceCounterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("name"))
}

func (pc PerformanceCounterAttributes) SamplingFrequencyInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("sampling_frequency_in_seconds"))
}

func (pc PerformanceCounterAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("streams"))
}

type SyslogAttributes struct {
	ref terra.Reference
}

func (s SyslogAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SyslogAttributes) InternalWithRef(ref terra.Reference) SyslogAttributes {
	return SyslogAttributes{ref: ref}
}

func (s SyslogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SyslogAttributes) FacilityNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("facility_names"))
}

func (s SyslogAttributes) LogLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("log_levels"))
}

func (s SyslogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SyslogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("streams"))
}

type WindowsEventLogAttributes struct {
	ref terra.Reference
}

func (wel WindowsEventLogAttributes) InternalRef() (terra.Reference, error) {
	return wel.ref, nil
}

func (wel WindowsEventLogAttributes) InternalWithRef(ref terra.Reference) WindowsEventLogAttributes {
	return WindowsEventLogAttributes{ref: ref}
}

func (wel WindowsEventLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wel.ref.InternalTokens()
}

func (wel WindowsEventLogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wel.ref.Append("name"))
}

func (wel WindowsEventLogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wel.ref.Append("streams"))
}

func (wel WindowsEventLogAttributes) XPathQueries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wel.ref.Append("x_path_queries"))
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) AzureMonitorMetrics() terra.ListValue[AzureMonitorMetricsAttributes] {
	return terra.ReferenceAsList[AzureMonitorMetricsAttributes](d.ref.Append("azure_monitor_metrics"))
}

func (d DestinationsAttributes) LogAnalytics() terra.ListValue[LogAnalyticsAttributes] {
	return terra.ReferenceAsList[LogAnalyticsAttributes](d.ref.Append("log_analytics"))
}

type AzureMonitorMetricsAttributes struct {
	ref terra.Reference
}

func (amm AzureMonitorMetricsAttributes) InternalRef() (terra.Reference, error) {
	return amm.ref, nil
}

func (amm AzureMonitorMetricsAttributes) InternalWithRef(ref terra.Reference) AzureMonitorMetricsAttributes {
	return AzureMonitorMetricsAttributes{ref: ref}
}

func (amm AzureMonitorMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amm.ref.InternalTokens()
}

func (amm AzureMonitorMetricsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amm.ref.Append("name"))
}

type LogAnalyticsAttributes struct {
	ref terra.Reference
}

func (la LogAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la LogAnalyticsAttributes) InternalWithRef(ref terra.Reference) LogAnalyticsAttributes {
	return LogAnalyticsAttributes{ref: ref}
}

func (la LogAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la LogAnalyticsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("name"))
}

func (la LogAnalyticsAttributes) WorkspaceResourceId() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("workspace_resource_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataFlowState struct {
	Destinations []string `json:"destinations"`
	Streams      []string `json:"streams"`
}

type DataSourcesState struct {
	Extension          []ExtensionState          `json:"extension"`
	PerformanceCounter []PerformanceCounterState `json:"performance_counter"`
	Syslog             []SyslogState             `json:"syslog"`
	WindowsEventLog    []WindowsEventLogState    `json:"windows_event_log"`
}

type ExtensionState struct {
	ExtensionJson    string   `json:"extension_json"`
	ExtensionName    string   `json:"extension_name"`
	InputDataSources []string `json:"input_data_sources"`
	Name             string   `json:"name"`
	Streams          []string `json:"streams"`
}

type PerformanceCounterState struct {
	CounterSpecifiers          []string `json:"counter_specifiers"`
	Name                       string   `json:"name"`
	SamplingFrequencyInSeconds float64  `json:"sampling_frequency_in_seconds"`
	Streams                    []string `json:"streams"`
}

type SyslogState struct {
	FacilityNames []string `json:"facility_names"`
	LogLevels     []string `json:"log_levels"`
	Name          string   `json:"name"`
	Streams       []string `json:"streams"`
}

type WindowsEventLogState struct {
	Name         string   `json:"name"`
	Streams      []string `json:"streams"`
	XPathQueries []string `json:"x_path_queries"`
}

type DestinationsState struct {
	AzureMonitorMetrics []AzureMonitorMetricsState `json:"azure_monitor_metrics"`
	LogAnalytics        []LogAnalyticsState        `json:"log_analytics"`
}

type AzureMonitorMetricsState struct {
	Name string `json:"name"`
}

type LogAnalyticsState struct {
	Name                string `json:"name"`
	WorkspaceResourceId string `json:"workspace_resource_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
