// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	attestationprovider "github.com/golingon/terraproviders/azurerm/3.49.0/attestationprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAttestationProvider(name string, args AttestationProviderArgs) *AttestationProvider {
	return &AttestationProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AttestationProvider)(nil)

type AttestationProvider struct {
	Name  string
	Args  AttestationProviderArgs
	state *attestationProviderState
}

func (ap *AttestationProvider) Type() string {
	return "azurerm_attestation_provider"
}

func (ap *AttestationProvider) LocalName() string {
	return ap.Name
}

func (ap *AttestationProvider) Configuration() interface{} {
	return ap.Args
}

func (ap *AttestationProvider) Attributes() attestationProviderAttributes {
	return attestationProviderAttributes{ref: terra.ReferenceResource(ap)}
}

func (ap *AttestationProvider) ImportState(av io.Reader) error {
	ap.state = &attestationProviderState{}
	if err := json.NewDecoder(av).Decode(ap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ap.Type(), ap.LocalName(), err)
	}
	return nil
}

func (ap *AttestationProvider) State() (*attestationProviderState, bool) {
	return ap.state, ap.state != nil
}

func (ap *AttestationProvider) StateMust() *attestationProviderState {
	if ap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ap.Type(), ap.LocalName()))
	}
	return ap.state
}

func (ap *AttestationProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(ap)
}

type AttestationProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicySigningCertificateData: string, optional
	PolicySigningCertificateData terra.StringValue `hcl:"policy_signing_certificate_data,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *attestationprovider.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AttestationProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type attestationProviderAttributes struct {
	ref terra.Reference
}

func (ap attestationProviderAttributes) AttestationUri() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("attestation_uri"))
}

func (ap attestationProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("id"))
}

func (ap attestationProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("location"))
}

func (ap attestationProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("name"))
}

func (ap attestationProviderAttributes) PolicySigningCertificateData() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("policy_signing_certificate_data"))
}

func (ap attestationProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("resource_group_name"))
}

func (ap attestationProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ap.ref.Append("tags"))
}

func (ap attestationProviderAttributes) TrustModel() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("trust_model"))
}

func (ap attestationProviderAttributes) Timeouts() attestationprovider.TimeoutsAttributes {
	return terra.ReferenceSingle[attestationprovider.TimeoutsAttributes](ap.ref.Append("timeouts"))
}

type attestationProviderState struct {
	AttestationUri               string                             `json:"attestation_uri"`
	Id                           string                             `json:"id"`
	Location                     string                             `json:"location"`
	Name                         string                             `json:"name"`
	PolicySigningCertificateData string                             `json:"policy_signing_certificate_data"`
	ResourceGroupName            string                             `json:"resource_group_name"`
	Tags                         map[string]string                  `json:"tags"`
	TrustModel                   string                             `json:"trust_model"`
	Timeouts                     *attestationprovider.TimeoutsState `json:"timeouts"`
}
