// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dedicatedhost "github.com/golingon/terraproviders/azurerm/3.49.0/dedicatedhost"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDedicatedHost(name string, args DedicatedHostArgs) *DedicatedHost {
	return &DedicatedHost{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DedicatedHost)(nil)

type DedicatedHost struct {
	Name  string
	Args  DedicatedHostArgs
	state *dedicatedHostState
}

func (dh *DedicatedHost) Type() string {
	return "azurerm_dedicated_host"
}

func (dh *DedicatedHost) LocalName() string {
	return dh.Name
}

func (dh *DedicatedHost) Configuration() interface{} {
	return dh.Args
}

func (dh *DedicatedHost) Attributes() dedicatedHostAttributes {
	return dedicatedHostAttributes{ref: terra.ReferenceResource(dh)}
}

func (dh *DedicatedHost) ImportState(av io.Reader) error {
	dh.state = &dedicatedHostState{}
	if err := json.NewDecoder(av).Decode(dh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dh.Type(), dh.LocalName(), err)
	}
	return nil
}

func (dh *DedicatedHost) State() (*dedicatedHostState, bool) {
	return dh.state, dh.state != nil
}

func (dh *DedicatedHost) StateMust() *dedicatedHostState {
	if dh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dh.Type(), dh.LocalName()))
	}
	return dh.state
}

func (dh *DedicatedHost) DependOn() terra.Reference {
	return terra.ReferenceResource(dh)
}

type DedicatedHostArgs struct {
	// AutoReplaceOnFailure: bool, optional
	AutoReplaceOnFailure terra.BoolValue `hcl:"auto_replace_on_failure,attr"`
	// DedicatedHostGroupId: string, required
	DedicatedHostGroupId terra.StringValue `hcl:"dedicated_host_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformFaultDomain: number, required
	PlatformFaultDomain terra.NumberValue `hcl:"platform_fault_domain,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *dedicatedhost.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DedicatedHost depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dedicatedHostAttributes struct {
	ref terra.Reference
}

func (dh dedicatedHostAttributes) AutoReplaceOnFailure() terra.BoolValue {
	return terra.ReferenceBool(dh.ref.Append("auto_replace_on_failure"))
}

func (dh dedicatedHostAttributes) DedicatedHostGroupId() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("dedicated_host_group_id"))
}

func (dh dedicatedHostAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("id"))
}

func (dh dedicatedHostAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("license_type"))
}

func (dh dedicatedHostAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("location"))
}

func (dh dedicatedHostAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("name"))
}

func (dh dedicatedHostAttributes) PlatformFaultDomain() terra.NumberValue {
	return terra.ReferenceNumber(dh.ref.Append("platform_fault_domain"))
}

func (dh dedicatedHostAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(dh.ref.Append("sku_name"))
}

func (dh dedicatedHostAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dh.ref.Append("tags"))
}

func (dh dedicatedHostAttributes) Timeouts() dedicatedhost.TimeoutsAttributes {
	return terra.ReferenceSingle[dedicatedhost.TimeoutsAttributes](dh.ref.Append("timeouts"))
}

type dedicatedHostState struct {
	AutoReplaceOnFailure bool                         `json:"auto_replace_on_failure"`
	DedicatedHostGroupId string                       `json:"dedicated_host_group_id"`
	Id                   string                       `json:"id"`
	LicenseType          string                       `json:"license_type"`
	Location             string                       `json:"location"`
	Name                 string                       `json:"name"`
	PlatformFaultDomain  float64                      `json:"platform_fault_domain"`
	SkuName              string                       `json:"sku_name"`
	Tags                 map[string]string            `json:"tags"`
	Timeouts             *dedicatedhost.TimeoutsState `json:"timeouts"`
}
