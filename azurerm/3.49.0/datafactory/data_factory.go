// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datafactory

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type GithubConfiguration struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// BranchName: string, required
	BranchName terra.StringValue `hcl:"branch_name,attr" validate:"required"`
	// GitUrl: string, required
	GitUrl terra.StringValue `hcl:"git_url,attr" validate:"required"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// RootFolder: string, required
	RootFolder terra.StringValue `hcl:"root_folder,attr" validate:"required"`
}

type GlobalParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VstsConfiguration struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// BranchName: string, required
	BranchName terra.StringValue `hcl:"branch_name,attr" validate:"required"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// RootFolder: string, required
	RootFolder terra.StringValue `hcl:"root_folder,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type GithubConfigurationAttributes struct {
	ref terra.Reference
}

func (gc GithubConfigurationAttributes) InternalRef() terra.Reference {
	return gc.ref
}

func (gc GithubConfigurationAttributes) InternalWithRef(ref terra.Reference) GithubConfigurationAttributes {
	return GithubConfigurationAttributes{ref: ref}
}

func (gc GithubConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return gc.ref.InternalTokens()
}

func (gc GithubConfigurationAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("account_name"))
}

func (gc GithubConfigurationAttributes) BranchName() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("branch_name"))
}

func (gc GithubConfigurationAttributes) GitUrl() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("git_url"))
}

func (gc GithubConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("repository_name"))
}

func (gc GithubConfigurationAttributes) RootFolder() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("root_folder"))
}

type GlobalParameterAttributes struct {
	ref terra.Reference
}

func (gp GlobalParameterAttributes) InternalRef() terra.Reference {
	return gp.ref
}

func (gp GlobalParameterAttributes) InternalWithRef(ref terra.Reference) GlobalParameterAttributes {
	return GlobalParameterAttributes{ref: ref}
}

func (gp GlobalParameterAttributes) InternalTokens() hclwrite.Tokens {
	return gp.ref.InternalTokens()
}

func (gp GlobalParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("name"))
}

func (gp GlobalParameterAttributes) Type() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("type"))
}

func (gp GlobalParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("value"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type VstsConfigurationAttributes struct {
	ref terra.Reference
}

func (vc VstsConfigurationAttributes) InternalRef() terra.Reference {
	return vc.ref
}

func (vc VstsConfigurationAttributes) InternalWithRef(ref terra.Reference) VstsConfigurationAttributes {
	return VstsConfigurationAttributes{ref: ref}
}

func (vc VstsConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VstsConfigurationAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("account_name"))
}

func (vc VstsConfigurationAttributes) BranchName() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("branch_name"))
}

func (vc VstsConfigurationAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("project_name"))
}

func (vc VstsConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("repository_name"))
}

func (vc VstsConfigurationAttributes) RootFolder() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("root_folder"))
}

func (vc VstsConfigurationAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("tenant_id"))
}

type GithubConfigurationState struct {
	AccountName    string `json:"account_name"`
	BranchName     string `json:"branch_name"`
	GitUrl         string `json:"git_url"`
	RepositoryName string `json:"repository_name"`
	RootFolder     string `json:"root_folder"`
}

type GlobalParameterState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VstsConfigurationState struct {
	AccountName    string `json:"account_name"`
	BranchName     string `json:"branch_name"`
	ProjectName    string `json:"project_name"`
	RepositoryName string `json:"repository_name"`
	RootFolder     string `json:"root_folder"`
	TenantId       string `json:"tenant_id"`
}
