// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressrouteconnection "github.com/golingon/terraproviders/azurerm/3.49.0/expressrouteconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRouteConnection(name string, args ExpressRouteConnectionArgs) *ExpressRouteConnection {
	return &ExpressRouteConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRouteConnection)(nil)

type ExpressRouteConnection struct {
	Name  string
	Args  ExpressRouteConnectionArgs
	state *expressRouteConnectionState
}

func (erc *ExpressRouteConnection) Type() string {
	return "azurerm_express_route_connection"
}

func (erc *ExpressRouteConnection) LocalName() string {
	return erc.Name
}

func (erc *ExpressRouteConnection) Configuration() interface{} {
	return erc.Args
}

func (erc *ExpressRouteConnection) Attributes() expressRouteConnectionAttributes {
	return expressRouteConnectionAttributes{ref: terra.ReferenceResource(erc)}
}

func (erc *ExpressRouteConnection) ImportState(av io.Reader) error {
	erc.state = &expressRouteConnectionState{}
	if err := json.NewDecoder(av).Decode(erc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erc.Type(), erc.LocalName(), err)
	}
	return nil
}

func (erc *ExpressRouteConnection) State() (*expressRouteConnectionState, bool) {
	return erc.state, erc.state != nil
}

func (erc *ExpressRouteConnection) StateMust() *expressRouteConnectionState {
	if erc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erc.Type(), erc.LocalName()))
	}
	return erc.state
}

func (erc *ExpressRouteConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(erc)
}

type ExpressRouteConnectionArgs struct {
	// AuthorizationKey: string, optional
	AuthorizationKey terra.StringValue `hcl:"authorization_key,attr"`
	// EnableInternetSecurity: bool, optional
	EnableInternetSecurity terra.BoolValue `hcl:"enable_internet_security,attr"`
	// ExpressRouteCircuitPeeringId: string, required
	ExpressRouteCircuitPeeringId terra.StringValue `hcl:"express_route_circuit_peering_id,attr" validate:"required"`
	// ExpressRouteGatewayBypassEnabled: bool, optional
	ExpressRouteGatewayBypassEnabled terra.BoolValue `hcl:"express_route_gateway_bypass_enabled,attr"`
	// ExpressRouteGatewayId: string, required
	ExpressRouteGatewayId terra.StringValue `hcl:"express_route_gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoutingWeight: number, optional
	RoutingWeight terra.NumberValue `hcl:"routing_weight,attr"`
	// Routing: optional
	Routing *expressrouteconnection.Routing `hcl:"routing,block"`
	// Timeouts: optional
	Timeouts *expressrouteconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRouteConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRouteConnectionAttributes struct {
	ref terra.Reference
}

func (erc expressRouteConnectionAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("authorization_key"))
}

func (erc expressRouteConnectionAttributes) EnableInternetSecurity() terra.BoolValue {
	return terra.ReferenceBool(erc.ref.Append("enable_internet_security"))
}

func (erc expressRouteConnectionAttributes) ExpressRouteCircuitPeeringId() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("express_route_circuit_peering_id"))
}

func (erc expressRouteConnectionAttributes) ExpressRouteGatewayBypassEnabled() terra.BoolValue {
	return terra.ReferenceBool(erc.ref.Append("express_route_gateway_bypass_enabled"))
}

func (erc expressRouteConnectionAttributes) ExpressRouteGatewayId() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("express_route_gateway_id"))
}

func (erc expressRouteConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("id"))
}

func (erc expressRouteConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("name"))
}

func (erc expressRouteConnectionAttributes) RoutingWeight() terra.NumberValue {
	return terra.ReferenceNumber(erc.ref.Append("routing_weight"))
}

func (erc expressRouteConnectionAttributes) Routing() terra.ListValue[expressrouteconnection.RoutingAttributes] {
	return terra.ReferenceList[expressrouteconnection.RoutingAttributes](erc.ref.Append("routing"))
}

func (erc expressRouteConnectionAttributes) Timeouts() expressrouteconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[expressrouteconnection.TimeoutsAttributes](erc.ref.Append("timeouts"))
}

type expressRouteConnectionState struct {
	AuthorizationKey                 string                                `json:"authorization_key"`
	EnableInternetSecurity           bool                                  `json:"enable_internet_security"`
	ExpressRouteCircuitPeeringId     string                                `json:"express_route_circuit_peering_id"`
	ExpressRouteGatewayBypassEnabled bool                                  `json:"express_route_gateway_bypass_enabled"`
	ExpressRouteGatewayId            string                                `json:"express_route_gateway_id"`
	Id                               string                                `json:"id"`
	Name                             string                                `json:"name"`
	RoutingWeight                    float64                               `json:"routing_weight"`
	Routing                          []expressrouteconnection.RoutingState `json:"routing"`
	Timeouts                         *expressrouteconnection.TimeoutsState `json:"timeouts"`
}
