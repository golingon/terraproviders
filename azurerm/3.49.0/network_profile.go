// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkprofile "github.com/golingon/terraproviders/azurerm/3.49.0/networkprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkProfile(name string, args NetworkProfileArgs) *NetworkProfile {
	return &NetworkProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkProfile)(nil)

type NetworkProfile struct {
	Name  string
	Args  NetworkProfileArgs
	state *networkProfileState
}

func (np *NetworkProfile) Type() string {
	return "azurerm_network_profile"
}

func (np *NetworkProfile) LocalName() string {
	return np.Name
}

func (np *NetworkProfile) Configuration() interface{} {
	return np.Args
}

func (np *NetworkProfile) Attributes() networkProfileAttributes {
	return networkProfileAttributes{ref: terra.ReferenceResource(np)}
}

func (np *NetworkProfile) ImportState(av io.Reader) error {
	np.state = &networkProfileState{}
	if err := json.NewDecoder(av).Decode(np.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", np.Type(), np.LocalName(), err)
	}
	return nil
}

func (np *NetworkProfile) State() (*networkProfileState, bool) {
	return np.state, np.state != nil
}

func (np *NetworkProfile) StateMust() *networkProfileState {
	if np.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", np.Type(), np.LocalName()))
	}
	return np.state
}

func (np *NetworkProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(np)
}

type NetworkProfileArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ContainerNetworkInterface: required
	ContainerNetworkInterface *networkprofile.ContainerNetworkInterface `hcl:"container_network_interface,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkprofile.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkProfileAttributes struct {
	ref terra.Reference
}

func (np networkProfileAttributes) ContainerNetworkInterfaceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](np.ref.Append("container_network_interface_ids"))
}

func (np networkProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("id"))
}

func (np networkProfileAttributes) Location() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("location"))
}

func (np networkProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("name"))
}

func (np networkProfileAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("resource_group_name"))
}

func (np networkProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](np.ref.Append("tags"))
}

func (np networkProfileAttributes) ContainerNetworkInterface() terra.ListValue[networkprofile.ContainerNetworkInterfaceAttributes] {
	return terra.ReferenceList[networkprofile.ContainerNetworkInterfaceAttributes](np.ref.Append("container_network_interface"))
}

func (np networkProfileAttributes) Timeouts() networkprofile.TimeoutsAttributes {
	return terra.ReferenceSingle[networkprofile.TimeoutsAttributes](np.ref.Append("timeouts"))
}

type networkProfileState struct {
	ContainerNetworkInterfaceIds []string                                        `json:"container_network_interface_ids"`
	Id                           string                                          `json:"id"`
	Location                     string                                          `json:"location"`
	Name                         string                                          `json:"name"`
	ResourceGroupName            string                                          `json:"resource_group_name"`
	Tags                         map[string]string                               `json:"tags"`
	ContainerNetworkInterface    []networkprofile.ContainerNetworkInterfaceState `json:"container_network_interface"`
	Timeouts                     *networkprofile.TimeoutsState                   `json:"timeouts"`
}
