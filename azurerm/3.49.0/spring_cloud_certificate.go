// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudcertificate "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudCertificate(name string, args SpringCloudCertificateArgs) *SpringCloudCertificate {
	return &SpringCloudCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudCertificate)(nil)

type SpringCloudCertificate struct {
	Name  string
	Args  SpringCloudCertificateArgs
	state *springCloudCertificateState
}

func (scc *SpringCloudCertificate) Type() string {
	return "azurerm_spring_cloud_certificate"
}

func (scc *SpringCloudCertificate) LocalName() string {
	return scc.Name
}

func (scc *SpringCloudCertificate) Configuration() interface{} {
	return scc.Args
}

func (scc *SpringCloudCertificate) Attributes() springCloudCertificateAttributes {
	return springCloudCertificateAttributes{ref: terra.ReferenceResource(scc)}
}

func (scc *SpringCloudCertificate) ImportState(av io.Reader) error {
	scc.state = &springCloudCertificateState{}
	if err := json.NewDecoder(av).Decode(scc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scc.Type(), scc.LocalName(), err)
	}
	return nil
}

func (scc *SpringCloudCertificate) State() (*springCloudCertificateState, bool) {
	return scc.state, scc.state != nil
}

func (scc *SpringCloudCertificate) StateMust() *springCloudCertificateState {
	if scc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scc.Type(), scc.LocalName()))
	}
	return scc.state
}

func (scc *SpringCloudCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(scc)
}

type SpringCloudCertificateArgs struct {
	// CertificateContent: string, optional
	CertificateContent terra.StringValue `hcl:"certificate_content,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultCertificateId: string, optional
	KeyVaultCertificateId terra.StringValue `hcl:"key_vault_certificate_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *springcloudcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudCertificateAttributes struct {
	ref terra.Reference
}

func (scc springCloudCertificateAttributes) CertificateContent() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("certificate_content"))
}

func (scc springCloudCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("id"))
}

func (scc springCloudCertificateAttributes) KeyVaultCertificateId() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("key_vault_certificate_id"))
}

func (scc springCloudCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("name"))
}

func (scc springCloudCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("resource_group_name"))
}

func (scc springCloudCertificateAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("service_name"))
}

func (scc springCloudCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(scc.ref.Append("thumbprint"))
}

func (scc springCloudCertificateAttributes) Timeouts() springcloudcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudcertificate.TimeoutsAttributes](scc.ref.Append("timeouts"))
}

type springCloudCertificateState struct {
	CertificateContent    string                                `json:"certificate_content"`
	Id                    string                                `json:"id"`
	KeyVaultCertificateId string                                `json:"key_vault_certificate_id"`
	Name                  string                                `json:"name"`
	ResourceGroupName     string                                `json:"resource_group_name"`
	ServiceName           string                                `json:"service_name"`
	Thumbprint            string                                `json:"thumbprint"`
	Timeouts              *springcloudcertificate.TimeoutsState `json:"timeouts"`
}
