// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	healthcaremedtechservice "github.com/golingon/terraproviders/azurerm/3.49.0/healthcaremedtechservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareMedtechService(name string, args HealthcareMedtechServiceArgs) *HealthcareMedtechService {
	return &HealthcareMedtechService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareMedtechService)(nil)

type HealthcareMedtechService struct {
	Name  string
	Args  HealthcareMedtechServiceArgs
	state *healthcareMedtechServiceState
}

func (hms *HealthcareMedtechService) Type() string {
	return "azurerm_healthcare_medtech_service"
}

func (hms *HealthcareMedtechService) LocalName() string {
	return hms.Name
}

func (hms *HealthcareMedtechService) Configuration() interface{} {
	return hms.Args
}

func (hms *HealthcareMedtechService) Attributes() healthcareMedtechServiceAttributes {
	return healthcareMedtechServiceAttributes{ref: terra.ReferenceResource(hms)}
}

func (hms *HealthcareMedtechService) ImportState(av io.Reader) error {
	hms.state = &healthcareMedtechServiceState{}
	if err := json.NewDecoder(av).Decode(hms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hms.Type(), hms.LocalName(), err)
	}
	return nil
}

func (hms *HealthcareMedtechService) State() (*healthcareMedtechServiceState, bool) {
	return hms.state, hms.state != nil
}

func (hms *HealthcareMedtechService) StateMust() *healthcareMedtechServiceState {
	if hms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hms.Type(), hms.LocalName()))
	}
	return hms.state
}

func (hms *HealthcareMedtechService) DependOn() terra.Reference {
	return terra.ReferenceResource(hms)
}

type HealthcareMedtechServiceArgs struct {
	// DeviceMappingJson: string, required
	DeviceMappingJson terra.StringValue `hcl:"device_mapping_json,attr" validate:"required"`
	// EventhubConsumerGroupName: string, required
	EventhubConsumerGroupName terra.StringValue `hcl:"eventhub_consumer_group_name,attr" validate:"required"`
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// EventhubNamespaceName: string, required
	EventhubNamespaceName terra.StringValue `hcl:"eventhub_namespace_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Identity: optional
	Identity *healthcaremedtechservice.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *healthcaremedtechservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareMedtechService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareMedtechServiceAttributes struct {
	ref terra.Reference
}

func (hms healthcareMedtechServiceAttributes) DeviceMappingJson() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("device_mapping_json"))
}

func (hms healthcareMedtechServiceAttributes) EventhubConsumerGroupName() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("eventhub_consumer_group_name"))
}

func (hms healthcareMedtechServiceAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("eventhub_name"))
}

func (hms healthcareMedtechServiceAttributes) EventhubNamespaceName() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("eventhub_namespace_name"))
}

func (hms healthcareMedtechServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("id"))
}

func (hms healthcareMedtechServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("location"))
}

func (hms healthcareMedtechServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("name"))
}

func (hms healthcareMedtechServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](hms.ref.Append("tags"))
}

func (hms healthcareMedtechServiceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(hms.ref.Append("workspace_id"))
}

func (hms healthcareMedtechServiceAttributes) Identity() terra.ListValue[healthcaremedtechservice.IdentityAttributes] {
	return terra.ReferenceList[healthcaremedtechservice.IdentityAttributes](hms.ref.Append("identity"))
}

func (hms healthcareMedtechServiceAttributes) Timeouts() healthcaremedtechservice.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcaremedtechservice.TimeoutsAttributes](hms.ref.Append("timeouts"))
}

type healthcareMedtechServiceState struct {
	DeviceMappingJson         string                                   `json:"device_mapping_json"`
	EventhubConsumerGroupName string                                   `json:"eventhub_consumer_group_name"`
	EventhubName              string                                   `json:"eventhub_name"`
	EventhubNamespaceName     string                                   `json:"eventhub_namespace_name"`
	Id                        string                                   `json:"id"`
	Location                  string                                   `json:"location"`
	Name                      string                                   `json:"name"`
	Tags                      map[string]string                        `json:"tags"`
	WorkspaceId               string                                   `json:"workspace_id"`
	Identity                  []healthcaremedtechservice.IdentityState `json:"identity"`
	Timeouts                  *healthcaremedtechservice.TimeoutsState  `json:"timeouts"`
}
