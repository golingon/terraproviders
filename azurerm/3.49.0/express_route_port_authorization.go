// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressrouteportauthorization "github.com/golingon/terraproviders/azurerm/3.49.0/expressrouteportauthorization"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRoutePortAuthorization(name string, args ExpressRoutePortAuthorizationArgs) *ExpressRoutePortAuthorization {
	return &ExpressRoutePortAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRoutePortAuthorization)(nil)

type ExpressRoutePortAuthorization struct {
	Name  string
	Args  ExpressRoutePortAuthorizationArgs
	state *expressRoutePortAuthorizationState
}

func (erpa *ExpressRoutePortAuthorization) Type() string {
	return "azurerm_express_route_port_authorization"
}

func (erpa *ExpressRoutePortAuthorization) LocalName() string {
	return erpa.Name
}

func (erpa *ExpressRoutePortAuthorization) Configuration() interface{} {
	return erpa.Args
}

func (erpa *ExpressRoutePortAuthorization) Attributes() expressRoutePortAuthorizationAttributes {
	return expressRoutePortAuthorizationAttributes{ref: terra.ReferenceResource(erpa)}
}

func (erpa *ExpressRoutePortAuthorization) ImportState(av io.Reader) error {
	erpa.state = &expressRoutePortAuthorizationState{}
	if err := json.NewDecoder(av).Decode(erpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erpa.Type(), erpa.LocalName(), err)
	}
	return nil
}

func (erpa *ExpressRoutePortAuthorization) State() (*expressRoutePortAuthorizationState, bool) {
	return erpa.state, erpa.state != nil
}

func (erpa *ExpressRoutePortAuthorization) StateMust() *expressRoutePortAuthorizationState {
	if erpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erpa.Type(), erpa.LocalName()))
	}
	return erpa.state
}

func (erpa *ExpressRoutePortAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(erpa)
}

type ExpressRoutePortAuthorizationArgs struct {
	// ExpressRoutePortName: string, required
	ExpressRoutePortName terra.StringValue `hcl:"express_route_port_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *expressrouteportauthorization.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRoutePortAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRoutePortAuthorizationAttributes struct {
	ref terra.Reference
}

func (erpa expressRoutePortAuthorizationAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("authorization_key"))
}

func (erpa expressRoutePortAuthorizationAttributes) AuthorizationUseStatus() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("authorization_use_status"))
}

func (erpa expressRoutePortAuthorizationAttributes) ExpressRoutePortName() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("express_route_port_name"))
}

func (erpa expressRoutePortAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("id"))
}

func (erpa expressRoutePortAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("name"))
}

func (erpa expressRoutePortAuthorizationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(erpa.ref.Append("resource_group_name"))
}

func (erpa expressRoutePortAuthorizationAttributes) Timeouts() expressrouteportauthorization.TimeoutsAttributes {
	return terra.ReferenceSingle[expressrouteportauthorization.TimeoutsAttributes](erpa.ref.Append("timeouts"))
}

type expressRoutePortAuthorizationState struct {
	AuthorizationKey       string                                       `json:"authorization_key"`
	AuthorizationUseStatus string                                       `json:"authorization_use_status"`
	ExpressRoutePortName   string                                       `json:"express_route_port_name"`
	Id                     string                                       `json:"id"`
	Name                   string                                       `json:"name"`
	ResourceGroupName      string                                       `json:"resource_group_name"`
	Timeouts               *expressrouteportauthorization.TimeoutsState `json:"timeouts"`
}
