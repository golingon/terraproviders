// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementgatewaycertificateauthority "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementgatewaycertificateauthority"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementGatewayCertificateAuthority(name string, args ApiManagementGatewayCertificateAuthorityArgs) *ApiManagementGatewayCertificateAuthority {
	return &ApiManagementGatewayCertificateAuthority{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementGatewayCertificateAuthority)(nil)

type ApiManagementGatewayCertificateAuthority struct {
	Name  string
	Args  ApiManagementGatewayCertificateAuthorityArgs
	state *apiManagementGatewayCertificateAuthorityState
}

func (amgca *ApiManagementGatewayCertificateAuthority) Type() string {
	return "azurerm_api_management_gateway_certificate_authority"
}

func (amgca *ApiManagementGatewayCertificateAuthority) LocalName() string {
	return amgca.Name
}

func (amgca *ApiManagementGatewayCertificateAuthority) Configuration() interface{} {
	return amgca.Args
}

func (amgca *ApiManagementGatewayCertificateAuthority) Attributes() apiManagementGatewayCertificateAuthorityAttributes {
	return apiManagementGatewayCertificateAuthorityAttributes{ref: terra.ReferenceResource(amgca)}
}

func (amgca *ApiManagementGatewayCertificateAuthority) ImportState(av io.Reader) error {
	amgca.state = &apiManagementGatewayCertificateAuthorityState{}
	if err := json.NewDecoder(av).Decode(amgca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amgca.Type(), amgca.LocalName(), err)
	}
	return nil
}

func (amgca *ApiManagementGatewayCertificateAuthority) State() (*apiManagementGatewayCertificateAuthorityState, bool) {
	return amgca.state, amgca.state != nil
}

func (amgca *ApiManagementGatewayCertificateAuthority) StateMust() *apiManagementGatewayCertificateAuthorityState {
	if amgca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amgca.Type(), amgca.LocalName()))
	}
	return amgca.state
}

func (amgca *ApiManagementGatewayCertificateAuthority) DependOn() terra.Reference {
	return terra.ReferenceResource(amgca)
}

type ApiManagementGatewayCertificateAuthorityArgs struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// CertificateName: string, required
	CertificateName terra.StringValue `hcl:"certificate_name,attr" validate:"required"`
	// GatewayName: string, required
	GatewayName terra.StringValue `hcl:"gateway_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsTrusted: bool, optional
	IsTrusted terra.BoolValue `hcl:"is_trusted,attr"`
	// Timeouts: optional
	Timeouts *apimanagementgatewaycertificateauthority.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementGatewayCertificateAuthority depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementGatewayCertificateAuthorityAttributes struct {
	ref terra.Reference
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceString(amgca.ref.Append("api_management_id"))
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceString(amgca.ref.Append("certificate_name"))
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) GatewayName() terra.StringValue {
	return terra.ReferenceString(amgca.ref.Append("gateway_name"))
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amgca.ref.Append("id"))
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) IsTrusted() terra.BoolValue {
	return terra.ReferenceBool(amgca.ref.Append("is_trusted"))
}

func (amgca apiManagementGatewayCertificateAuthorityAttributes) Timeouts() apimanagementgatewaycertificateauthority.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementgatewaycertificateauthority.TimeoutsAttributes](amgca.ref.Append("timeouts"))
}

type apiManagementGatewayCertificateAuthorityState struct {
	ApiManagementId string                                                  `json:"api_management_id"`
	CertificateName string                                                  `json:"certificate_name"`
	GatewayName     string                                                  `json:"gateway_name"`
	Id              string                                                  `json:"id"`
	IsTrusted       bool                                                    `json:"is_trusted"`
	Timeouts        *apimanagementgatewaycertificateauthority.TimeoutsState `json:"timeouts"`
}
