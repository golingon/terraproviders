// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storageblob "github.com/golingon/terraproviders/azurerm/3.49.0/storageblob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageBlob(name string, args StorageBlobArgs) *StorageBlob {
	return &StorageBlob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageBlob)(nil)

type StorageBlob struct {
	Name  string
	Args  StorageBlobArgs
	state *storageBlobState
}

func (sb *StorageBlob) Type() string {
	return "azurerm_storage_blob"
}

func (sb *StorageBlob) LocalName() string {
	return sb.Name
}

func (sb *StorageBlob) Configuration() interface{} {
	return sb.Args
}

func (sb *StorageBlob) Attributes() storageBlobAttributes {
	return storageBlobAttributes{ref: terra.ReferenceResource(sb)}
}

func (sb *StorageBlob) ImportState(av io.Reader) error {
	sb.state = &storageBlobState{}
	if err := json.NewDecoder(av).Decode(sb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sb.Type(), sb.LocalName(), err)
	}
	return nil
}

func (sb *StorageBlob) State() (*storageBlobState, bool) {
	return sb.state, sb.state != nil
}

func (sb *StorageBlob) StateMust() *storageBlobState {
	if sb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sb.Type(), sb.LocalName()))
	}
	return sb.state
}

func (sb *StorageBlob) DependOn() terra.Reference {
	return terra.ReferenceResource(sb)
}

type StorageBlobArgs struct {
	// AccessTier: string, optional
	AccessTier terra.StringValue `hcl:"access_tier,attr"`
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// ContentMd5: string, optional
	ContentMd5 terra.StringValue `hcl:"content_md5,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parallelism: number, optional
	Parallelism terra.NumberValue `hcl:"parallelism,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// SourceContent: string, optional
	SourceContent terra.StringValue `hcl:"source_content,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// StorageContainerName: string, required
	StorageContainerName terra.StringValue `hcl:"storage_container_name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *storageblob.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageBlob depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageBlobAttributes struct {
	ref terra.Reference
}

func (sb storageBlobAttributes) AccessTier() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("access_tier"))
}

func (sb storageBlobAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("cache_control"))
}

func (sb storageBlobAttributes) ContentMd5() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("content_md5"))
}

func (sb storageBlobAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("content_type"))
}

func (sb storageBlobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("id"))
}

func (sb storageBlobAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sb.ref.Append("metadata"))
}

func (sb storageBlobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("name"))
}

func (sb storageBlobAttributes) Parallelism() terra.NumberValue {
	return terra.ReferenceNumber(sb.ref.Append("parallelism"))
}

func (sb storageBlobAttributes) Size() terra.NumberValue {
	return terra.ReferenceNumber(sb.ref.Append("size"))
}

func (sb storageBlobAttributes) Source() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("source"))
}

func (sb storageBlobAttributes) SourceContent() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("source_content"))
}

func (sb storageBlobAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("source_uri"))
}

func (sb storageBlobAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("storage_account_name"))
}

func (sb storageBlobAttributes) StorageContainerName() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("storage_container_name"))
}

func (sb storageBlobAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("type"))
}

func (sb storageBlobAttributes) Url() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("url"))
}

func (sb storageBlobAttributes) Timeouts() storageblob.TimeoutsAttributes {
	return terra.ReferenceSingle[storageblob.TimeoutsAttributes](sb.ref.Append("timeouts"))
}

type storageBlobState struct {
	AccessTier           string                     `json:"access_tier"`
	CacheControl         string                     `json:"cache_control"`
	ContentMd5           string                     `json:"content_md5"`
	ContentType          string                     `json:"content_type"`
	Id                   string                     `json:"id"`
	Metadata             map[string]string          `json:"metadata"`
	Name                 string                     `json:"name"`
	Parallelism          float64                    `json:"parallelism"`
	Size                 float64                    `json:"size"`
	Source               string                     `json:"source"`
	SourceContent        string                     `json:"source_content"`
	SourceUri            string                     `json:"source_uri"`
	StorageAccountName   string                     `json:"storage_account_name"`
	StorageContainerName string                     `json:"storage_container_name"`
	Type                 string                     `json:"type"`
	Url                  string                     `json:"url"`
	Timeouts             *storageblob.TimeoutsState `json:"timeouts"`
}
