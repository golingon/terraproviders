// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	machinelearningdatastoreblobstorage "github.com/golingon/terraproviders/azurerm/3.49.0/machinelearningdatastoreblobstorage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMachineLearningDatastoreBlobstorage(name string, args MachineLearningDatastoreBlobstorageArgs) *MachineLearningDatastoreBlobstorage {
	return &MachineLearningDatastoreBlobstorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MachineLearningDatastoreBlobstorage)(nil)

type MachineLearningDatastoreBlobstorage struct {
	Name  string
	Args  MachineLearningDatastoreBlobstorageArgs
	state *machineLearningDatastoreBlobstorageState
}

func (mldb *MachineLearningDatastoreBlobstorage) Type() string {
	return "azurerm_machine_learning_datastore_blobstorage"
}

func (mldb *MachineLearningDatastoreBlobstorage) LocalName() string {
	return mldb.Name
}

func (mldb *MachineLearningDatastoreBlobstorage) Configuration() interface{} {
	return mldb.Args
}

func (mldb *MachineLearningDatastoreBlobstorage) Attributes() machineLearningDatastoreBlobstorageAttributes {
	return machineLearningDatastoreBlobstorageAttributes{ref: terra.ReferenceResource(mldb)}
}

func (mldb *MachineLearningDatastoreBlobstorage) ImportState(av io.Reader) error {
	mldb.state = &machineLearningDatastoreBlobstorageState{}
	if err := json.NewDecoder(av).Decode(mldb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mldb.Type(), mldb.LocalName(), err)
	}
	return nil
}

func (mldb *MachineLearningDatastoreBlobstorage) State() (*machineLearningDatastoreBlobstorageState, bool) {
	return mldb.state, mldb.state != nil
}

func (mldb *MachineLearningDatastoreBlobstorage) StateMust() *machineLearningDatastoreBlobstorageState {
	if mldb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mldb.Type(), mldb.LocalName()))
	}
	return mldb.state
}

func (mldb *MachineLearningDatastoreBlobstorage) DependOn() terra.Reference {
	return terra.ReferenceResource(mldb)
}

type MachineLearningDatastoreBlobstorageArgs struct {
	// AccountKey: string, optional
	AccountKey terra.StringValue `hcl:"account_key,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceDataAuthIdentity: string, optional
	ServiceDataAuthIdentity terra.StringValue `hcl:"service_data_auth_identity,attr"`
	// SharedAccessSignature: string, optional
	SharedAccessSignature terra.StringValue `hcl:"shared_access_signature,attr"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *machinelearningdatastoreblobstorage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MachineLearningDatastoreBlobstorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type machineLearningDatastoreBlobstorageAttributes struct {
	ref terra.Reference
}

func (mldb machineLearningDatastoreBlobstorageAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("account_key"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("description"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("id"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceBool(mldb.ref.Append("is_default"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("name"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) ServiceDataAuthIdentity() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("service_data_auth_identity"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) SharedAccessSignature() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("shared_access_signature"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("storage_container_id"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mldb.ref.Append("tags"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(mldb.ref.Append("workspace_id"))
}

func (mldb machineLearningDatastoreBlobstorageAttributes) Timeouts() machinelearningdatastoreblobstorage.TimeoutsAttributes {
	return terra.ReferenceSingle[machinelearningdatastoreblobstorage.TimeoutsAttributes](mldb.ref.Append("timeouts"))
}

type machineLearningDatastoreBlobstorageState struct {
	AccountKey              string                                             `json:"account_key"`
	Description             string                                             `json:"description"`
	Id                      string                                             `json:"id"`
	IsDefault               bool                                               `json:"is_default"`
	Name                    string                                             `json:"name"`
	ServiceDataAuthIdentity string                                             `json:"service_data_auth_identity"`
	SharedAccessSignature   string                                             `json:"shared_access_signature"`
	StorageContainerId      string                                             `json:"storage_container_id"`
	Tags                    map[string]string                                  `json:"tags"`
	WorkspaceId             string                                             `json:"workspace_id"`
	Timeouts                *machinelearningdatastoreblobstorage.TimeoutsState `json:"timeouts"`
}
