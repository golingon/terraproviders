// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package virtualmachine

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdditionalCapabilities struct {
	// UltraSsdEnabled: bool, required
	UltraSsdEnabled terra.BoolValue `hcl:"ultra_ssd_enabled,attr" validate:"required"`
}

type BootDiagnostics struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// StorageUri: string, required
	StorageUri terra.StringValue `hcl:"storage_uri,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: list of string, optional
	IdentityIds terra.ListValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type OsProfile struct {
	// AdminPassword: string, optional
	AdminPassword terra.StringValue `hcl:"admin_password,attr"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// ComputerName: string, required
	ComputerName terra.StringValue `hcl:"computer_name,attr" validate:"required"`
	// CustomData: string, optional
	CustomData terra.StringValue `hcl:"custom_data,attr"`
}

type OsProfileLinuxConfig struct {
	// DisablePasswordAuthentication: bool, required
	DisablePasswordAuthentication terra.BoolValue `hcl:"disable_password_authentication,attr" validate:"required"`
	// SshKeys: min=0
	SshKeys []SshKeys `hcl:"ssh_keys,block" validate:"min=0"`
}

type SshKeys struct {
	// KeyData: string, required
	KeyData terra.StringValue `hcl:"key_data,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type OsProfileSecrets struct {
	// SourceVaultId: string, required
	SourceVaultId terra.StringValue `hcl:"source_vault_id,attr" validate:"required"`
	// VaultCertificates: min=0
	VaultCertificates []VaultCertificates `hcl:"vault_certificates,block" validate:"min=0"`
}

type VaultCertificates struct {
	// CertificateStore: string, optional
	CertificateStore terra.StringValue `hcl:"certificate_store,attr"`
	// CertificateUrl: string, required
	CertificateUrl terra.StringValue `hcl:"certificate_url,attr" validate:"required"`
}

type OsProfileWindowsConfig struct {
	// EnableAutomaticUpgrades: bool, optional
	EnableAutomaticUpgrades terra.BoolValue `hcl:"enable_automatic_upgrades,attr"`
	// ProvisionVmAgent: bool, optional
	ProvisionVmAgent terra.BoolValue `hcl:"provision_vm_agent,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// AdditionalUnattendConfig: min=0
	AdditionalUnattendConfig []AdditionalUnattendConfig `hcl:"additional_unattend_config,block" validate:"min=0"`
	// Winrm: min=0
	Winrm []Winrm `hcl:"winrm,block" validate:"min=0"`
}

type AdditionalUnattendConfig struct {
	// Component: string, required
	Component terra.StringValue `hcl:"component,attr" validate:"required"`
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Pass: string, required
	Pass terra.StringValue `hcl:"pass,attr" validate:"required"`
	// SettingName: string, required
	SettingName terra.StringValue `hcl:"setting_name,attr" validate:"required"`
}

type Winrm struct {
	// CertificateUrl: string, optional
	CertificateUrl terra.StringValue `hcl:"certificate_url,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Plan struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Product: string, required
	Product terra.StringValue `hcl:"product,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
}

type StorageDataDisk struct {
	// Caching: string, optional
	Caching terra.StringValue `hcl:"caching,attr"`
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Lun: number, required
	Lun terra.NumberValue `hcl:"lun,attr" validate:"required"`
	// ManagedDiskId: string, optional
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr"`
	// ManagedDiskType: string, optional
	ManagedDiskType terra.StringValue `hcl:"managed_disk_type,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VhdUri: string, optional
	VhdUri terra.StringValue `hcl:"vhd_uri,attr"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
}

type StorageImageReference struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Offer: string, optional
	Offer terra.StringValue `hcl:"offer,attr"`
	// Publisher: string, optional
	Publisher terra.StringValue `hcl:"publisher,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type StorageOsDisk struct {
	// Caching: string, optional
	Caching terra.StringValue `hcl:"caching,attr"`
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// ManagedDiskId: string, optional
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr"`
	// ManagedDiskType: string, optional
	ManagedDiskType terra.StringValue `hcl:"managed_disk_type,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// VhdUri: string, optional
	VhdUri terra.StringValue `hcl:"vhd_uri,attr"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AdditionalCapabilitiesAttributes struct {
	ref terra.Reference
}

func (ac AdditionalCapabilitiesAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AdditionalCapabilitiesAttributes) InternalWithRef(ref terra.Reference) AdditionalCapabilitiesAttributes {
	return AdditionalCapabilitiesAttributes{ref: ref}
}

func (ac AdditionalCapabilitiesAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AdditionalCapabilitiesAttributes) UltraSsdEnabled() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("ultra_ssd_enabled"))
}

type BootDiagnosticsAttributes struct {
	ref terra.Reference
}

func (bd BootDiagnosticsAttributes) InternalRef() terra.Reference {
	return bd.ref
}

func (bd BootDiagnosticsAttributes) InternalWithRef(ref terra.Reference) BootDiagnosticsAttributes {
	return BootDiagnosticsAttributes{ref: ref}
}

func (bd BootDiagnosticsAttributes) InternalTokens() hclwrite.Tokens {
	return bd.ref.InternalTokens()
}

func (bd BootDiagnosticsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(bd.ref.Append("enabled"))
}

func (bd BootDiagnosticsAttributes) StorageUri() terra.StringValue {
	return terra.ReferenceString(bd.ref.Append("storage_uri"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() terra.Reference {
	return op.ref
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() hclwrite.Tokens {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("admin_password"))
}

func (op OsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("admin_username"))
}

func (op OsProfileAttributes) ComputerName() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("computer_name"))
}

func (op OsProfileAttributes) CustomData() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("custom_data"))
}

type OsProfileLinuxConfigAttributes struct {
	ref terra.Reference
}

func (oplc OsProfileLinuxConfigAttributes) InternalRef() terra.Reference {
	return oplc.ref
}

func (oplc OsProfileLinuxConfigAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigAttributes {
	return OsProfileLinuxConfigAttributes{ref: ref}
}

func (oplc OsProfileLinuxConfigAttributes) InternalTokens() hclwrite.Tokens {
	return oplc.ref.InternalTokens()
}

func (oplc OsProfileLinuxConfigAttributes) DisablePasswordAuthentication() terra.BoolValue {
	return terra.ReferenceBool(oplc.ref.Append("disable_password_authentication"))
}

func (oplc OsProfileLinuxConfigAttributes) SshKeys() terra.ListValue[SshKeysAttributes] {
	return terra.ReferenceList[SshKeysAttributes](oplc.ref.Append("ssh_keys"))
}

type SshKeysAttributes struct {
	ref terra.Reference
}

func (sk SshKeysAttributes) InternalRef() terra.Reference {
	return sk.ref
}

func (sk SshKeysAttributes) InternalWithRef(ref terra.Reference) SshKeysAttributes {
	return SshKeysAttributes{ref: ref}
}

func (sk SshKeysAttributes) InternalTokens() hclwrite.Tokens {
	return sk.ref.InternalTokens()
}

func (sk SshKeysAttributes) KeyData() terra.StringValue {
	return terra.ReferenceString(sk.ref.Append("key_data"))
}

func (sk SshKeysAttributes) Path() terra.StringValue {
	return terra.ReferenceString(sk.ref.Append("path"))
}

type OsProfileSecretsAttributes struct {
	ref terra.Reference
}

func (ops OsProfileSecretsAttributes) InternalRef() terra.Reference {
	return ops.ref
}

func (ops OsProfileSecretsAttributes) InternalWithRef(ref terra.Reference) OsProfileSecretsAttributes {
	return OsProfileSecretsAttributes{ref: ref}
}

func (ops OsProfileSecretsAttributes) InternalTokens() hclwrite.Tokens {
	return ops.ref.InternalTokens()
}

func (ops OsProfileSecretsAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceString(ops.ref.Append("source_vault_id"))
}

func (ops OsProfileSecretsAttributes) VaultCertificates() terra.ListValue[VaultCertificatesAttributes] {
	return terra.ReferenceList[VaultCertificatesAttributes](ops.ref.Append("vault_certificates"))
}

type VaultCertificatesAttributes struct {
	ref terra.Reference
}

func (vc VaultCertificatesAttributes) InternalRef() terra.Reference {
	return vc.ref
}

func (vc VaultCertificatesAttributes) InternalWithRef(ref terra.Reference) VaultCertificatesAttributes {
	return VaultCertificatesAttributes{ref: ref}
}

func (vc VaultCertificatesAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VaultCertificatesAttributes) CertificateStore() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("certificate_store"))
}

func (vc VaultCertificatesAttributes) CertificateUrl() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("certificate_url"))
}

type OsProfileWindowsConfigAttributes struct {
	ref terra.Reference
}

func (opwc OsProfileWindowsConfigAttributes) InternalRef() terra.Reference {
	return opwc.ref
}

func (opwc OsProfileWindowsConfigAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigAttributes {
	return OsProfileWindowsConfigAttributes{ref: ref}
}

func (opwc OsProfileWindowsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return opwc.ref.InternalTokens()
}

func (opwc OsProfileWindowsConfigAttributes) EnableAutomaticUpgrades() terra.BoolValue {
	return terra.ReferenceBool(opwc.ref.Append("enable_automatic_upgrades"))
}

func (opwc OsProfileWindowsConfigAttributes) ProvisionVmAgent() terra.BoolValue {
	return terra.ReferenceBool(opwc.ref.Append("provision_vm_agent"))
}

func (opwc OsProfileWindowsConfigAttributes) Timezone() terra.StringValue {
	return terra.ReferenceString(opwc.ref.Append("timezone"))
}

func (opwc OsProfileWindowsConfigAttributes) AdditionalUnattendConfig() terra.ListValue[AdditionalUnattendConfigAttributes] {
	return terra.ReferenceList[AdditionalUnattendConfigAttributes](opwc.ref.Append("additional_unattend_config"))
}

func (opwc OsProfileWindowsConfigAttributes) Winrm() terra.ListValue[WinrmAttributes] {
	return terra.ReferenceList[WinrmAttributes](opwc.ref.Append("winrm"))
}

type AdditionalUnattendConfigAttributes struct {
	ref terra.Reference
}

func (auc AdditionalUnattendConfigAttributes) InternalRef() terra.Reference {
	return auc.ref
}

func (auc AdditionalUnattendConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalUnattendConfigAttributes {
	return AdditionalUnattendConfigAttributes{ref: ref}
}

func (auc AdditionalUnattendConfigAttributes) InternalTokens() hclwrite.Tokens {
	return auc.ref.InternalTokens()
}

func (auc AdditionalUnattendConfigAttributes) Component() terra.StringValue {
	return terra.ReferenceString(auc.ref.Append("component"))
}

func (auc AdditionalUnattendConfigAttributes) Content() terra.StringValue {
	return terra.ReferenceString(auc.ref.Append("content"))
}

func (auc AdditionalUnattendConfigAttributes) Pass() terra.StringValue {
	return terra.ReferenceString(auc.ref.Append("pass"))
}

func (auc AdditionalUnattendConfigAttributes) SettingName() terra.StringValue {
	return terra.ReferenceString(auc.ref.Append("setting_name"))
}

type WinrmAttributes struct {
	ref terra.Reference
}

func (w WinrmAttributes) InternalRef() terra.Reference {
	return w.ref
}

func (w WinrmAttributes) InternalWithRef(ref terra.Reference) WinrmAttributes {
	return WinrmAttributes{ref: ref}
}

func (w WinrmAttributes) InternalTokens() hclwrite.Tokens {
	return w.ref.InternalTokens()
}

func (w WinrmAttributes) CertificateUrl() terra.StringValue {
	return terra.ReferenceString(w.ref.Append("certificate_url"))
}

func (w WinrmAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(w.ref.Append("protocol"))
}

type PlanAttributes struct {
	ref terra.Reference
}

func (p PlanAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PlanAttributes) InternalWithRef(ref terra.Reference) PlanAttributes {
	return PlanAttributes{ref: ref}
}

func (p PlanAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("name"))
}

func (p PlanAttributes) Product() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("product"))
}

func (p PlanAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("publisher"))
}

type StorageDataDiskAttributes struct {
	ref terra.Reference
}

func (sdd StorageDataDiskAttributes) InternalRef() terra.Reference {
	return sdd.ref
}

func (sdd StorageDataDiskAttributes) InternalWithRef(ref terra.Reference) StorageDataDiskAttributes {
	return StorageDataDiskAttributes{ref: ref}
}

func (sdd StorageDataDiskAttributes) InternalTokens() hclwrite.Tokens {
	return sdd.ref.InternalTokens()
}

func (sdd StorageDataDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("caching"))
}

func (sdd StorageDataDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("create_option"))
}

func (sdd StorageDataDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(sdd.ref.Append("disk_size_gb"))
}

func (sdd StorageDataDiskAttributes) Lun() terra.NumberValue {
	return terra.ReferenceNumber(sdd.ref.Append("lun"))
}

func (sdd StorageDataDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("managed_disk_id"))
}

func (sdd StorageDataDiskAttributes) ManagedDiskType() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("managed_disk_type"))
}

func (sdd StorageDataDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("name"))
}

func (sdd StorageDataDiskAttributes) VhdUri() terra.StringValue {
	return terra.ReferenceString(sdd.ref.Append("vhd_uri"))
}

func (sdd StorageDataDiskAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceBool(sdd.ref.Append("write_accelerator_enabled"))
}

type StorageImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir StorageImageReferenceAttributes) InternalRef() terra.Reference {
	return sir.ref
}

func (sir StorageImageReferenceAttributes) InternalWithRef(ref terra.Reference) StorageImageReferenceAttributes {
	return StorageImageReferenceAttributes{ref: ref}
}

func (sir StorageImageReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return sir.ref.InternalTokens()
}

func (sir StorageImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("id"))
}

func (sir StorageImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("offer"))
}

func (sir StorageImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("publisher"))
}

func (sir StorageImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("sku"))
}

func (sir StorageImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("version"))
}

type StorageOsDiskAttributes struct {
	ref terra.Reference
}

func (sod StorageOsDiskAttributes) InternalRef() terra.Reference {
	return sod.ref
}

func (sod StorageOsDiskAttributes) InternalWithRef(ref terra.Reference) StorageOsDiskAttributes {
	return StorageOsDiskAttributes{ref: ref}
}

func (sod StorageOsDiskAttributes) InternalTokens() hclwrite.Tokens {
	return sod.ref.InternalTokens()
}

func (sod StorageOsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("caching"))
}

func (sod StorageOsDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("create_option"))
}

func (sod StorageOsDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(sod.ref.Append("disk_size_gb"))
}

func (sod StorageOsDiskAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("image_uri"))
}

func (sod StorageOsDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("managed_disk_id"))
}

func (sod StorageOsDiskAttributes) ManagedDiskType() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("managed_disk_type"))
}

func (sod StorageOsDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("name"))
}

func (sod StorageOsDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("os_type"))
}

func (sod StorageOsDiskAttributes) VhdUri() terra.StringValue {
	return terra.ReferenceString(sod.ref.Append("vhd_uri"))
}

func (sod StorageOsDiskAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceBool(sod.ref.Append("write_accelerator_enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AdditionalCapabilitiesState struct {
	UltraSsdEnabled bool `json:"ultra_ssd_enabled"`
}

type BootDiagnosticsState struct {
	Enabled    bool   `json:"enabled"`
	StorageUri string `json:"storage_uri"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	Type        string   `json:"type"`
}

type OsProfileState struct {
	AdminPassword string `json:"admin_password"`
	AdminUsername string `json:"admin_username"`
	ComputerName  string `json:"computer_name"`
	CustomData    string `json:"custom_data"`
}

type OsProfileLinuxConfigState struct {
	DisablePasswordAuthentication bool           `json:"disable_password_authentication"`
	SshKeys                       []SshKeysState `json:"ssh_keys"`
}

type SshKeysState struct {
	KeyData string `json:"key_data"`
	Path    string `json:"path"`
}

type OsProfileSecretsState struct {
	SourceVaultId     string                   `json:"source_vault_id"`
	VaultCertificates []VaultCertificatesState `json:"vault_certificates"`
}

type VaultCertificatesState struct {
	CertificateStore string `json:"certificate_store"`
	CertificateUrl   string `json:"certificate_url"`
}

type OsProfileWindowsConfigState struct {
	EnableAutomaticUpgrades  bool                            `json:"enable_automatic_upgrades"`
	ProvisionVmAgent         bool                            `json:"provision_vm_agent"`
	Timezone                 string                          `json:"timezone"`
	AdditionalUnattendConfig []AdditionalUnattendConfigState `json:"additional_unattend_config"`
	Winrm                    []WinrmState                    `json:"winrm"`
}

type AdditionalUnattendConfigState struct {
	Component   string `json:"component"`
	Content     string `json:"content"`
	Pass        string `json:"pass"`
	SettingName string `json:"setting_name"`
}

type WinrmState struct {
	CertificateUrl string `json:"certificate_url"`
	Protocol       string `json:"protocol"`
}

type PlanState struct {
	Name      string `json:"name"`
	Product   string `json:"product"`
	Publisher string `json:"publisher"`
}

type StorageDataDiskState struct {
	Caching                 string  `json:"caching"`
	CreateOption            string  `json:"create_option"`
	DiskSizeGb              float64 `json:"disk_size_gb"`
	Lun                     float64 `json:"lun"`
	ManagedDiskId           string  `json:"managed_disk_id"`
	ManagedDiskType         string  `json:"managed_disk_type"`
	Name                    string  `json:"name"`
	VhdUri                  string  `json:"vhd_uri"`
	WriteAcceleratorEnabled bool    `json:"write_accelerator_enabled"`
}

type StorageImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type StorageOsDiskState struct {
	Caching                 string  `json:"caching"`
	CreateOption            string  `json:"create_option"`
	DiskSizeGb              float64 `json:"disk_size_gb"`
	ImageUri                string  `json:"image_uri"`
	ManagedDiskId           string  `json:"managed_disk_id"`
	ManagedDiskType         string  `json:"managed_disk_type"`
	Name                    string  `json:"name"`
	OsType                  string  `json:"os_type"`
	VhdUri                  string  `json:"vhd_uri"`
	WriteAcceleratorEnabled bool    `json:"write_accelerator_enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
