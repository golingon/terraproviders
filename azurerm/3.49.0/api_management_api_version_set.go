// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapiversionset "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapiversionset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApiVersionSet(name string, args ApiManagementApiVersionSetArgs) *ApiManagementApiVersionSet {
	return &ApiManagementApiVersionSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApiVersionSet)(nil)

type ApiManagementApiVersionSet struct {
	Name  string
	Args  ApiManagementApiVersionSetArgs
	state *apiManagementApiVersionSetState
}

func (amavs *ApiManagementApiVersionSet) Type() string {
	return "azurerm_api_management_api_version_set"
}

func (amavs *ApiManagementApiVersionSet) LocalName() string {
	return amavs.Name
}

func (amavs *ApiManagementApiVersionSet) Configuration() interface{} {
	return amavs.Args
}

func (amavs *ApiManagementApiVersionSet) Attributes() apiManagementApiVersionSetAttributes {
	return apiManagementApiVersionSetAttributes{ref: terra.ReferenceResource(amavs)}
}

func (amavs *ApiManagementApiVersionSet) ImportState(av io.Reader) error {
	amavs.state = &apiManagementApiVersionSetState{}
	if err := json.NewDecoder(av).Decode(amavs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amavs.Type(), amavs.LocalName(), err)
	}
	return nil
}

func (amavs *ApiManagementApiVersionSet) State() (*apiManagementApiVersionSetState, bool) {
	return amavs.state, amavs.state != nil
}

func (amavs *ApiManagementApiVersionSet) StateMust() *apiManagementApiVersionSetState {
	if amavs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amavs.Type(), amavs.LocalName()))
	}
	return amavs.state
}

func (amavs *ApiManagementApiVersionSet) DependOn() terra.Reference {
	return terra.ReferenceResource(amavs)
}

type ApiManagementApiVersionSetArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// VersionHeaderName: string, optional
	VersionHeaderName terra.StringValue `hcl:"version_header_name,attr"`
	// VersionQueryName: string, optional
	VersionQueryName terra.StringValue `hcl:"version_query_name,attr"`
	// VersioningScheme: string, required
	VersioningScheme terra.StringValue `hcl:"versioning_scheme,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apimanagementapiversionset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApiVersionSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiVersionSetAttributes struct {
	ref terra.Reference
}

func (amavs apiManagementApiVersionSetAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("api_management_name"))
}

func (amavs apiManagementApiVersionSetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("description"))
}

func (amavs apiManagementApiVersionSetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("display_name"))
}

func (amavs apiManagementApiVersionSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("id"))
}

func (amavs apiManagementApiVersionSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("name"))
}

func (amavs apiManagementApiVersionSetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("resource_group_name"))
}

func (amavs apiManagementApiVersionSetAttributes) VersionHeaderName() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("version_header_name"))
}

func (amavs apiManagementApiVersionSetAttributes) VersionQueryName() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("version_query_name"))
}

func (amavs apiManagementApiVersionSetAttributes) VersioningScheme() terra.StringValue {
	return terra.ReferenceString(amavs.ref.Append("versioning_scheme"))
}

func (amavs apiManagementApiVersionSetAttributes) Timeouts() apimanagementapiversionset.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapiversionset.TimeoutsAttributes](amavs.ref.Append("timeouts"))
}

type apiManagementApiVersionSetState struct {
	ApiManagementName string                                    `json:"api_management_name"`
	Description       string                                    `json:"description"`
	DisplayName       string                                    `json:"display_name"`
	Id                string                                    `json:"id"`
	Name              string                                    `json:"name"`
	ResourceGroupName string                                    `json:"resource_group_name"`
	VersionHeaderName string                                    `json:"version_header_name"`
	VersionQueryName  string                                    `json:"version_query_name"`
	VersioningScheme  string                                    `json:"versioning_scheme"`
	Timeouts          *apimanagementapiversionset.TimeoutsState `json:"timeouts"`
}
