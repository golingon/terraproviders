// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitoraaddiagnosticsetting "github.com/golingon/terraproviders/azurerm/3.49.0/monitoraaddiagnosticsetting"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorAadDiagnosticSetting(name string, args MonitorAadDiagnosticSettingArgs) *MonitorAadDiagnosticSetting {
	return &MonitorAadDiagnosticSetting{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorAadDiagnosticSetting)(nil)

type MonitorAadDiagnosticSetting struct {
	Name  string
	Args  MonitorAadDiagnosticSettingArgs
	state *monitorAadDiagnosticSettingState
}

func (mads *MonitorAadDiagnosticSetting) Type() string {
	return "azurerm_monitor_aad_diagnostic_setting"
}

func (mads *MonitorAadDiagnosticSetting) LocalName() string {
	return mads.Name
}

func (mads *MonitorAadDiagnosticSetting) Configuration() interface{} {
	return mads.Args
}

func (mads *MonitorAadDiagnosticSetting) Attributes() monitorAadDiagnosticSettingAttributes {
	return monitorAadDiagnosticSettingAttributes{ref: terra.ReferenceResource(mads)}
}

func (mads *MonitorAadDiagnosticSetting) ImportState(av io.Reader) error {
	mads.state = &monitorAadDiagnosticSettingState{}
	if err := json.NewDecoder(av).Decode(mads.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mads.Type(), mads.LocalName(), err)
	}
	return nil
}

func (mads *MonitorAadDiagnosticSetting) State() (*monitorAadDiagnosticSettingState, bool) {
	return mads.state, mads.state != nil
}

func (mads *MonitorAadDiagnosticSetting) StateMust() *monitorAadDiagnosticSettingState {
	if mads.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mads.Type(), mads.LocalName()))
	}
	return mads.state
}

func (mads *MonitorAadDiagnosticSetting) DependOn() terra.Reference {
	return terra.ReferenceResource(mads)
}

type MonitorAadDiagnosticSettingArgs struct {
	// EventhubAuthorizationRuleId: string, optional
	EventhubAuthorizationRuleId terra.StringValue `hcl:"eventhub_authorization_rule_id,attr"`
	// EventhubName: string, optional
	EventhubName terra.StringValue `hcl:"eventhub_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogAnalyticsWorkspaceId: string, optional
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Log: min=1
	Log []monitoraaddiagnosticsetting.Log `hcl:"log,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *monitoraaddiagnosticsetting.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorAadDiagnosticSetting depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorAadDiagnosticSettingAttributes struct {
	ref terra.Reference
}

func (mads monitorAadDiagnosticSettingAttributes) EventhubAuthorizationRuleId() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("eventhub_authorization_rule_id"))
}

func (mads monitorAadDiagnosticSettingAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("eventhub_name"))
}

func (mads monitorAadDiagnosticSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("id"))
}

func (mads monitorAadDiagnosticSettingAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("log_analytics_workspace_id"))
}

func (mads monitorAadDiagnosticSettingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("name"))
}

func (mads monitorAadDiagnosticSettingAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(mads.ref.Append("storage_account_id"))
}

func (mads monitorAadDiagnosticSettingAttributes) Log() terra.SetValue[monitoraaddiagnosticsetting.LogAttributes] {
	return terra.ReferenceSet[monitoraaddiagnosticsetting.LogAttributes](mads.ref.Append("log"))
}

func (mads monitorAadDiagnosticSettingAttributes) Timeouts() monitoraaddiagnosticsetting.TimeoutsAttributes {
	return terra.ReferenceSingle[monitoraaddiagnosticsetting.TimeoutsAttributes](mads.ref.Append("timeouts"))
}

type monitorAadDiagnosticSettingState struct {
	EventhubAuthorizationRuleId string                                     `json:"eventhub_authorization_rule_id"`
	EventhubName                string                                     `json:"eventhub_name"`
	Id                          string                                     `json:"id"`
	LogAnalyticsWorkspaceId     string                                     `json:"log_analytics_workspace_id"`
	Name                        string                                     `json:"name"`
	StorageAccountId            string                                     `json:"storage_account_id"`
	Log                         []monitoraaddiagnosticsetting.LogState     `json:"log"`
	Timeouts                    *monitoraaddiagnosticsetting.TimeoutsState `json:"timeouts"`
}
