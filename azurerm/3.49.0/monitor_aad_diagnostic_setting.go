// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitoraaddiagnosticsetting "github.com/golingon/terraproviders/azurerm/3.49.0/monitoraaddiagnosticsetting"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMonitorAadDiagnosticSetting creates a new instance of [MonitorAadDiagnosticSetting].
func NewMonitorAadDiagnosticSetting(name string, args MonitorAadDiagnosticSettingArgs) *MonitorAadDiagnosticSetting {
	return &MonitorAadDiagnosticSetting{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorAadDiagnosticSetting)(nil)

// MonitorAadDiagnosticSetting represents the Terraform resource azurerm_monitor_aad_diagnostic_setting.
type MonitorAadDiagnosticSetting struct {
	Name      string
	Args      MonitorAadDiagnosticSettingArgs
	state     *monitorAadDiagnosticSettingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) Type() string {
	return "azurerm_monitor_aad_diagnostic_setting"
}

// LocalName returns the local name for [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) LocalName() string {
	return mads.Name
}

// Configuration returns the configuration (args) for [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) Configuration() interface{} {
	return mads.Args
}

// DependOn is used for other resources to depend on [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) DependOn() terra.Reference {
	return terra.ReferenceResource(mads)
}

// Dependencies returns the list of resources [MonitorAadDiagnosticSetting] depends_on.
func (mads *MonitorAadDiagnosticSetting) Dependencies() terra.Dependencies {
	return mads.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) LifecycleManagement() *terra.Lifecycle {
	return mads.Lifecycle
}

// Attributes returns the attributes for [MonitorAadDiagnosticSetting].
func (mads *MonitorAadDiagnosticSetting) Attributes() monitorAadDiagnosticSettingAttributes {
	return monitorAadDiagnosticSettingAttributes{ref: terra.ReferenceResource(mads)}
}

// ImportState imports the given attribute values into [MonitorAadDiagnosticSetting]'s state.
func (mads *MonitorAadDiagnosticSetting) ImportState(av io.Reader) error {
	mads.state = &monitorAadDiagnosticSettingState{}
	if err := json.NewDecoder(av).Decode(mads.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mads.Type(), mads.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MonitorAadDiagnosticSetting] has state.
func (mads *MonitorAadDiagnosticSetting) State() (*monitorAadDiagnosticSettingState, bool) {
	return mads.state, mads.state != nil
}

// StateMust returns the state for [MonitorAadDiagnosticSetting]. Panics if the state is nil.
func (mads *MonitorAadDiagnosticSetting) StateMust() *monitorAadDiagnosticSettingState {
	if mads.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mads.Type(), mads.LocalName()))
	}
	return mads.state
}

// MonitorAadDiagnosticSettingArgs contains the configurations for azurerm_monitor_aad_diagnostic_setting.
type MonitorAadDiagnosticSettingArgs struct {
	// EventhubAuthorizationRuleId: string, optional
	EventhubAuthorizationRuleId terra.StringValue `hcl:"eventhub_authorization_rule_id,attr"`
	// EventhubName: string, optional
	EventhubName terra.StringValue `hcl:"eventhub_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogAnalyticsWorkspaceId: string, optional
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Log: min=1
	Log []monitoraaddiagnosticsetting.Log `hcl:"log,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *monitoraaddiagnosticsetting.Timeouts `hcl:"timeouts,block"`
}
type monitorAadDiagnosticSettingAttributes struct {
	ref terra.Reference
}

// EventhubAuthorizationRuleId returns a reference to field eventhub_authorization_rule_id of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) EventhubAuthorizationRuleId() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("eventhub_authorization_rule_id"))
}

// EventhubName returns a reference to field eventhub_name of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("eventhub_name"))
}

// Id returns a reference to field id of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("id"))
}

// LogAnalyticsWorkspaceId returns a reference to field log_analytics_workspace_id of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("log_analytics_workspace_id"))
}

// Name returns a reference to field name of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("name"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_monitor_aad_diagnostic_setting.
func (mads monitorAadDiagnosticSettingAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(mads.ref.Append("storage_account_id"))
}

func (mads monitorAadDiagnosticSettingAttributes) Log() terra.SetValue[monitoraaddiagnosticsetting.LogAttributes] {
	return terra.ReferenceAsSet[monitoraaddiagnosticsetting.LogAttributes](mads.ref.Append("log"))
}

func (mads monitorAadDiagnosticSettingAttributes) Timeouts() monitoraaddiagnosticsetting.TimeoutsAttributes {
	return terra.ReferenceAsSingle[monitoraaddiagnosticsetting.TimeoutsAttributes](mads.ref.Append("timeouts"))
}

type monitorAadDiagnosticSettingState struct {
	EventhubAuthorizationRuleId string                                     `json:"eventhub_authorization_rule_id"`
	EventhubName                string                                     `json:"eventhub_name"`
	Id                          string                                     `json:"id"`
	LogAnalyticsWorkspaceId     string                                     `json:"log_analytics_workspace_id"`
	Name                        string                                     `json:"name"`
	StorageAccountId            string                                     `json:"storage_account_id"`
	Log                         []monitoraaddiagnosticsetting.LogState     `json:"log"`
	Timeouts                    *monitoraaddiagnosticsetting.TimeoutsState `json:"timeouts"`
}
