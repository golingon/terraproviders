// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubauthorizationrule "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubauthorizationrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubAuthorizationRule(name string, args EventhubAuthorizationRuleArgs) *EventhubAuthorizationRule {
	return &EventhubAuthorizationRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubAuthorizationRule)(nil)

type EventhubAuthorizationRule struct {
	Name  string
	Args  EventhubAuthorizationRuleArgs
	state *eventhubAuthorizationRuleState
}

func (ear *EventhubAuthorizationRule) Type() string {
	return "azurerm_eventhub_authorization_rule"
}

func (ear *EventhubAuthorizationRule) LocalName() string {
	return ear.Name
}

func (ear *EventhubAuthorizationRule) Configuration() interface{} {
	return ear.Args
}

func (ear *EventhubAuthorizationRule) Attributes() eventhubAuthorizationRuleAttributes {
	return eventhubAuthorizationRuleAttributes{ref: terra.ReferenceResource(ear)}
}

func (ear *EventhubAuthorizationRule) ImportState(av io.Reader) error {
	ear.state = &eventhubAuthorizationRuleState{}
	if err := json.NewDecoder(av).Decode(ear.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ear.Type(), ear.LocalName(), err)
	}
	return nil
}

func (ear *EventhubAuthorizationRule) State() (*eventhubAuthorizationRuleState, bool) {
	return ear.state, ear.state != nil
}

func (ear *EventhubAuthorizationRule) StateMust() *eventhubAuthorizationRuleState {
	if ear.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ear.Type(), ear.LocalName()))
	}
	return ear.state
}

func (ear *EventhubAuthorizationRule) DependOn() terra.Reference {
	return terra.ReferenceResource(ear)
}

type EventhubAuthorizationRuleArgs struct {
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Listen: bool, optional
	Listen terra.BoolValue `hcl:"listen,attr"`
	// Manage: bool, optional
	Manage terra.BoolValue `hcl:"manage,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Send: bool, optional
	Send terra.BoolValue `hcl:"send,attr"`
	// Timeouts: optional
	Timeouts *eventhubauthorizationrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubAuthorizationRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubAuthorizationRuleAttributes struct {
	ref terra.Reference
}

func (ear eventhubAuthorizationRuleAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("eventhub_name"))
}

func (ear eventhubAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("id"))
}

func (ear eventhubAuthorizationRuleAttributes) Listen() terra.BoolValue {
	return terra.ReferenceBool(ear.ref.Append("listen"))
}

func (ear eventhubAuthorizationRuleAttributes) Manage() terra.BoolValue {
	return terra.ReferenceBool(ear.ref.Append("manage"))
}

func (ear eventhubAuthorizationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("name"))
}

func (ear eventhubAuthorizationRuleAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("namespace_name"))
}

func (ear eventhubAuthorizationRuleAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("primary_connection_string"))
}

func (ear eventhubAuthorizationRuleAttributes) PrimaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("primary_connection_string_alias"))
}

func (ear eventhubAuthorizationRuleAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("primary_key"))
}

func (ear eventhubAuthorizationRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("resource_group_name"))
}

func (ear eventhubAuthorizationRuleAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("secondary_connection_string"))
}

func (ear eventhubAuthorizationRuleAttributes) SecondaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("secondary_connection_string_alias"))
}

func (ear eventhubAuthorizationRuleAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(ear.ref.Append("secondary_key"))
}

func (ear eventhubAuthorizationRuleAttributes) Send() terra.BoolValue {
	return terra.ReferenceBool(ear.ref.Append("send"))
}

func (ear eventhubAuthorizationRuleAttributes) Timeouts() eventhubauthorizationrule.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubauthorizationrule.TimeoutsAttributes](ear.ref.Append("timeouts"))
}

type eventhubAuthorizationRuleState struct {
	EventhubName                   string                                   `json:"eventhub_name"`
	Id                             string                                   `json:"id"`
	Listen                         bool                                     `json:"listen"`
	Manage                         bool                                     `json:"manage"`
	Name                           string                                   `json:"name"`
	NamespaceName                  string                                   `json:"namespace_name"`
	PrimaryConnectionString        string                                   `json:"primary_connection_string"`
	PrimaryConnectionStringAlias   string                                   `json:"primary_connection_string_alias"`
	PrimaryKey                     string                                   `json:"primary_key"`
	ResourceGroupName              string                                   `json:"resource_group_name"`
	SecondaryConnectionString      string                                   `json:"secondary_connection_string"`
	SecondaryConnectionStringAlias string                                   `json:"secondary_connection_string_alias"`
	SecondaryKey                   string                                   `json:"secondary_key"`
	Send                           bool                                     `json:"send"`
	Timeouts                       *eventhubauthorizationrule.TimeoutsState `json:"timeouts"`
}
