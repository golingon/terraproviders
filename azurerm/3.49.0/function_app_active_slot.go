// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	functionappactiveslot "github.com/golingon/terraproviders/azurerm/3.49.0/functionappactiveslot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFunctionAppActiveSlot(name string, args FunctionAppActiveSlotArgs) *FunctionAppActiveSlot {
	return &FunctionAppActiveSlot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FunctionAppActiveSlot)(nil)

type FunctionAppActiveSlot struct {
	Name  string
	Args  FunctionAppActiveSlotArgs
	state *functionAppActiveSlotState
}

func (faas *FunctionAppActiveSlot) Type() string {
	return "azurerm_function_app_active_slot"
}

func (faas *FunctionAppActiveSlot) LocalName() string {
	return faas.Name
}

func (faas *FunctionAppActiveSlot) Configuration() interface{} {
	return faas.Args
}

func (faas *FunctionAppActiveSlot) Attributes() functionAppActiveSlotAttributes {
	return functionAppActiveSlotAttributes{ref: terra.ReferenceResource(faas)}
}

func (faas *FunctionAppActiveSlot) ImportState(av io.Reader) error {
	faas.state = &functionAppActiveSlotState{}
	if err := json.NewDecoder(av).Decode(faas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", faas.Type(), faas.LocalName(), err)
	}
	return nil
}

func (faas *FunctionAppActiveSlot) State() (*functionAppActiveSlotState, bool) {
	return faas.state, faas.state != nil
}

func (faas *FunctionAppActiveSlot) StateMust() *functionAppActiveSlotState {
	if faas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", faas.Type(), faas.LocalName()))
	}
	return faas.state
}

func (faas *FunctionAppActiveSlot) DependOn() terra.Reference {
	return terra.ReferenceResource(faas)
}

type FunctionAppActiveSlotArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OverwriteNetworkConfig: bool, optional
	OverwriteNetworkConfig terra.BoolValue `hcl:"overwrite_network_config,attr"`
	// SlotId: string, required
	SlotId terra.StringValue `hcl:"slot_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *functionappactiveslot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FunctionAppActiveSlot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type functionAppActiveSlotAttributes struct {
	ref terra.Reference
}

func (faas functionAppActiveSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("id"))
}

func (faas functionAppActiveSlotAttributes) LastSuccessfulSwap() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("last_successful_swap"))
}

func (faas functionAppActiveSlotAttributes) OverwriteNetworkConfig() terra.BoolValue {
	return terra.ReferenceBool(faas.ref.Append("overwrite_network_config"))
}

func (faas functionAppActiveSlotAttributes) SlotId() terra.StringValue {
	return terra.ReferenceString(faas.ref.Append("slot_id"))
}

func (faas functionAppActiveSlotAttributes) Timeouts() functionappactiveslot.TimeoutsAttributes {
	return terra.ReferenceSingle[functionappactiveslot.TimeoutsAttributes](faas.ref.Append("timeouts"))
}

type functionAppActiveSlotState struct {
	Id                     string                               `json:"id"`
	LastSuccessfulSwap     string                               `json:"last_successful_swap"`
	OverwriteNetworkConfig bool                                 `json:"overwrite_network_config"`
	SlotId                 string                               `json:"slot_id"`
	Timeouts               *functionappactiveslot.TimeoutsState `json:"timeouts"`
}
