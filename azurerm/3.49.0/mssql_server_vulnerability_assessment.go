// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlservervulnerabilityassessment "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlservervulnerabilityassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlServerVulnerabilityAssessment(name string, args MssqlServerVulnerabilityAssessmentArgs) *MssqlServerVulnerabilityAssessment {
	return &MssqlServerVulnerabilityAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlServerVulnerabilityAssessment)(nil)

type MssqlServerVulnerabilityAssessment struct {
	Name  string
	Args  MssqlServerVulnerabilityAssessmentArgs
	state *mssqlServerVulnerabilityAssessmentState
}

func (msva *MssqlServerVulnerabilityAssessment) Type() string {
	return "azurerm_mssql_server_vulnerability_assessment"
}

func (msva *MssqlServerVulnerabilityAssessment) LocalName() string {
	return msva.Name
}

func (msva *MssqlServerVulnerabilityAssessment) Configuration() interface{} {
	return msva.Args
}

func (msva *MssqlServerVulnerabilityAssessment) Attributes() mssqlServerVulnerabilityAssessmentAttributes {
	return mssqlServerVulnerabilityAssessmentAttributes{ref: terra.ReferenceResource(msva)}
}

func (msva *MssqlServerVulnerabilityAssessment) ImportState(av io.Reader) error {
	msva.state = &mssqlServerVulnerabilityAssessmentState{}
	if err := json.NewDecoder(av).Decode(msva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msva.Type(), msva.LocalName(), err)
	}
	return nil
}

func (msva *MssqlServerVulnerabilityAssessment) State() (*mssqlServerVulnerabilityAssessmentState, bool) {
	return msva.state, msva.state != nil
}

func (msva *MssqlServerVulnerabilityAssessment) StateMust() *mssqlServerVulnerabilityAssessmentState {
	if msva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msva.Type(), msva.LocalName()))
	}
	return msva.state
}

func (msva *MssqlServerVulnerabilityAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(msva)
}

type MssqlServerVulnerabilityAssessmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerSecurityAlertPolicyId: string, required
	ServerSecurityAlertPolicyId terra.StringValue `hcl:"server_security_alert_policy_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageContainerPath: string, required
	StorageContainerPath terra.StringValue `hcl:"storage_container_path,attr" validate:"required"`
	// StorageContainerSasKey: string, optional
	StorageContainerSasKey terra.StringValue `hcl:"storage_container_sas_key,attr"`
	// RecurringScans: optional
	RecurringScans *mssqlservervulnerabilityassessment.RecurringScans `hcl:"recurring_scans,block"`
	// Timeouts: optional
	Timeouts *mssqlservervulnerabilityassessment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlServerVulnerabilityAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlServerVulnerabilityAssessmentAttributes struct {
	ref terra.Reference
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msva.ref.Append("id"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) ServerSecurityAlertPolicyId() terra.StringValue {
	return terra.ReferenceString(msva.ref.Append("server_security_alert_policy_id"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(msva.ref.Append("storage_account_access_key"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) StorageContainerPath() terra.StringValue {
	return terra.ReferenceString(msva.ref.Append("storage_container_path"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) StorageContainerSasKey() terra.StringValue {
	return terra.ReferenceString(msva.ref.Append("storage_container_sas_key"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) RecurringScans() terra.ListValue[mssqlservervulnerabilityassessment.RecurringScansAttributes] {
	return terra.ReferenceList[mssqlservervulnerabilityassessment.RecurringScansAttributes](msva.ref.Append("recurring_scans"))
}

func (msva mssqlServerVulnerabilityAssessmentAttributes) Timeouts() mssqlservervulnerabilityassessment.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlservervulnerabilityassessment.TimeoutsAttributes](msva.ref.Append("timeouts"))
}

type mssqlServerVulnerabilityAssessmentState struct {
	Id                          string                                                   `json:"id"`
	ServerSecurityAlertPolicyId string                                                   `json:"server_security_alert_policy_id"`
	StorageAccountAccessKey     string                                                   `json:"storage_account_access_key"`
	StorageContainerPath        string                                                   `json:"storage_container_path"`
	StorageContainerSasKey      string                                                   `json:"storage_container_sas_key"`
	RecurringScans              []mssqlservervulnerabilityassessment.RecurringScansState `json:"recurring_scans"`
	Timeouts                    *mssqlservervulnerabilityassessment.TimeoutsState        `json:"timeouts"`
}
