// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementgatewayapi "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementgatewayapi"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementGatewayApi(name string, args ApiManagementGatewayApiArgs) *ApiManagementGatewayApi {
	return &ApiManagementGatewayApi{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementGatewayApi)(nil)

type ApiManagementGatewayApi struct {
	Name  string
	Args  ApiManagementGatewayApiArgs
	state *apiManagementGatewayApiState
}

func (amga *ApiManagementGatewayApi) Type() string {
	return "azurerm_api_management_gateway_api"
}

func (amga *ApiManagementGatewayApi) LocalName() string {
	return amga.Name
}

func (amga *ApiManagementGatewayApi) Configuration() interface{} {
	return amga.Args
}

func (amga *ApiManagementGatewayApi) Attributes() apiManagementGatewayApiAttributes {
	return apiManagementGatewayApiAttributes{ref: terra.ReferenceResource(amga)}
}

func (amga *ApiManagementGatewayApi) ImportState(av io.Reader) error {
	amga.state = &apiManagementGatewayApiState{}
	if err := json.NewDecoder(av).Decode(amga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amga.Type(), amga.LocalName(), err)
	}
	return nil
}

func (amga *ApiManagementGatewayApi) State() (*apiManagementGatewayApiState, bool) {
	return amga.state, amga.state != nil
}

func (amga *ApiManagementGatewayApi) StateMust() *apiManagementGatewayApiState {
	if amga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amga.Type(), amga.LocalName()))
	}
	return amga.state
}

func (amga *ApiManagementGatewayApi) DependOn() terra.Reference {
	return terra.ReferenceResource(amga)
}

type ApiManagementGatewayApiArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// GatewayId: string, required
	GatewayId terra.StringValue `hcl:"gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *apimanagementgatewayapi.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementGatewayApi depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementGatewayApiAttributes struct {
	ref terra.Reference
}

func (amga apiManagementGatewayApiAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(amga.ref.Append("api_id"))
}

func (amga apiManagementGatewayApiAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceString(amga.ref.Append("gateway_id"))
}

func (amga apiManagementGatewayApiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amga.ref.Append("id"))
}

func (amga apiManagementGatewayApiAttributes) Timeouts() apimanagementgatewayapi.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementgatewayapi.TimeoutsAttributes](amga.ref.Append("timeouts"))
}

type apiManagementGatewayApiState struct {
	ApiId     string                                 `json:"api_id"`
	GatewayId string                                 `json:"gateway_id"`
	Id        string                                 `json:"id"`
	Timeouts  *apimanagementgatewayapi.TimeoutsState `json:"timeouts"`
}
