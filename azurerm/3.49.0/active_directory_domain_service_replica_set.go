// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	activedirectorydomainservicereplicaset "github.com/golingon/terraproviders/azurerm/3.49.0/activedirectorydomainservicereplicaset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewActiveDirectoryDomainServiceReplicaSet(name string, args ActiveDirectoryDomainServiceReplicaSetArgs) *ActiveDirectoryDomainServiceReplicaSet {
	return &ActiveDirectoryDomainServiceReplicaSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ActiveDirectoryDomainServiceReplicaSet)(nil)

type ActiveDirectoryDomainServiceReplicaSet struct {
	Name  string
	Args  ActiveDirectoryDomainServiceReplicaSetArgs
	state *activeDirectoryDomainServiceReplicaSetState
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) Type() string {
	return "azurerm_active_directory_domain_service_replica_set"
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) LocalName() string {
	return addsrs.Name
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) Configuration() interface{} {
	return addsrs.Args
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) Attributes() activeDirectoryDomainServiceReplicaSetAttributes {
	return activeDirectoryDomainServiceReplicaSetAttributes{ref: terra.ReferenceResource(addsrs)}
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) ImportState(av io.Reader) error {
	addsrs.state = &activeDirectoryDomainServiceReplicaSetState{}
	if err := json.NewDecoder(av).Decode(addsrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", addsrs.Type(), addsrs.LocalName(), err)
	}
	return nil
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) State() (*activeDirectoryDomainServiceReplicaSetState, bool) {
	return addsrs.state, addsrs.state != nil
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) StateMust() *activeDirectoryDomainServiceReplicaSetState {
	if addsrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", addsrs.Type(), addsrs.LocalName()))
	}
	return addsrs.state
}

func (addsrs *ActiveDirectoryDomainServiceReplicaSet) DependOn() terra.Reference {
	return terra.ReferenceResource(addsrs)
}

type ActiveDirectoryDomainServiceReplicaSetArgs struct {
	// DomainServiceId: string, required
	DomainServiceId terra.StringValue `hcl:"domain_service_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *activedirectorydomainservicereplicaset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ActiveDirectoryDomainServiceReplicaSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type activeDirectoryDomainServiceReplicaSetAttributes struct {
	ref terra.Reference
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) DomainControllerIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](addsrs.ref.Append("domain_controller_ip_addresses"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) DomainServiceId() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("domain_service_id"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) ExternalAccessIpAddress() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("external_access_ip_address"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("id"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("location"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) ServiceStatus() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("service_status"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(addsrs.ref.Append("subnet_id"))
}

func (addsrs activeDirectoryDomainServiceReplicaSetAttributes) Timeouts() activedirectorydomainservicereplicaset.TimeoutsAttributes {
	return terra.ReferenceSingle[activedirectorydomainservicereplicaset.TimeoutsAttributes](addsrs.ref.Append("timeouts"))
}

type activeDirectoryDomainServiceReplicaSetState struct {
	DomainControllerIpAddresses []string                                              `json:"domain_controller_ip_addresses"`
	DomainServiceId             string                                                `json:"domain_service_id"`
	ExternalAccessIpAddress     string                                                `json:"external_access_ip_address"`
	Id                          string                                                `json:"id"`
	Location                    string                                                `json:"location"`
	ServiceStatus               string                                                `json:"service_status"`
	SubnetId                    string                                                `json:"subnet_id"`
	Timeouts                    *activedirectorydomainservicereplicaset.TimeoutsState `json:"timeouts"`
}
