// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iothubendpointstoragecontainer "github.com/golingon/terraproviders/azurerm/3.49.0/iothubendpointstoragecontainer"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIothubEndpointStorageContainer(name string, args IothubEndpointStorageContainerArgs) *IothubEndpointStorageContainer {
	return &IothubEndpointStorageContainer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IothubEndpointStorageContainer)(nil)

type IothubEndpointStorageContainer struct {
	Name  string
	Args  IothubEndpointStorageContainerArgs
	state *iothubEndpointStorageContainerState
}

func (iesc *IothubEndpointStorageContainer) Type() string {
	return "azurerm_iothub_endpoint_storage_container"
}

func (iesc *IothubEndpointStorageContainer) LocalName() string {
	return iesc.Name
}

func (iesc *IothubEndpointStorageContainer) Configuration() interface{} {
	return iesc.Args
}

func (iesc *IothubEndpointStorageContainer) Attributes() iothubEndpointStorageContainerAttributes {
	return iothubEndpointStorageContainerAttributes{ref: terra.ReferenceResource(iesc)}
}

func (iesc *IothubEndpointStorageContainer) ImportState(av io.Reader) error {
	iesc.state = &iothubEndpointStorageContainerState{}
	if err := json.NewDecoder(av).Decode(iesc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iesc.Type(), iesc.LocalName(), err)
	}
	return nil
}

func (iesc *IothubEndpointStorageContainer) State() (*iothubEndpointStorageContainerState, bool) {
	return iesc.state, iesc.state != nil
}

func (iesc *IothubEndpointStorageContainer) StateMust() *iothubEndpointStorageContainerState {
	if iesc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iesc.Type(), iesc.LocalName()))
	}
	return iesc.state
}

func (iesc *IothubEndpointStorageContainer) DependOn() terra.Reference {
	return terra.ReferenceResource(iesc)
}

type IothubEndpointStorageContainerArgs struct {
	// AuthenticationType: string, optional
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
	// BatchFrequencyInSeconds: number, optional
	BatchFrequencyInSeconds terra.NumberValue `hcl:"batch_frequency_in_seconds,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// EndpointUri: string, optional
	EndpointUri terra.StringValue `hcl:"endpoint_uri,attr"`
	// FileNameFormat: string, optional
	FileNameFormat terra.StringValue `hcl:"file_name_format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityId: string, optional
	IdentityId terra.StringValue `hcl:"identity_id,attr"`
	// IothubId: string, required
	IothubId terra.StringValue `hcl:"iothub_id,attr" validate:"required"`
	// MaxChunkSizeInBytes: number, optional
	MaxChunkSizeInBytes terra.NumberValue `hcl:"max_chunk_size_in_bytes,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *iothubendpointstoragecontainer.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IothubEndpointStorageContainer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iothubEndpointStorageContainerAttributes struct {
	ref terra.Reference
}

func (iesc iothubEndpointStorageContainerAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("authentication_type"))
}

func (iesc iothubEndpointStorageContainerAttributes) BatchFrequencyInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(iesc.ref.Append("batch_frequency_in_seconds"))
}

func (iesc iothubEndpointStorageContainerAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("connection_string"))
}

func (iesc iothubEndpointStorageContainerAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("container_name"))
}

func (iesc iothubEndpointStorageContainerAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("encoding"))
}

func (iesc iothubEndpointStorageContainerAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("endpoint_uri"))
}

func (iesc iothubEndpointStorageContainerAttributes) FileNameFormat() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("file_name_format"))
}

func (iesc iothubEndpointStorageContainerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("id"))
}

func (iesc iothubEndpointStorageContainerAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("identity_id"))
}

func (iesc iothubEndpointStorageContainerAttributes) IothubId() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("iothub_id"))
}

func (iesc iothubEndpointStorageContainerAttributes) MaxChunkSizeInBytes() terra.NumberValue {
	return terra.ReferenceNumber(iesc.ref.Append("max_chunk_size_in_bytes"))
}

func (iesc iothubEndpointStorageContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("name"))
}

func (iesc iothubEndpointStorageContainerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(iesc.ref.Append("resource_group_name"))
}

func (iesc iothubEndpointStorageContainerAttributes) Timeouts() iothubendpointstoragecontainer.TimeoutsAttributes {
	return terra.ReferenceSingle[iothubendpointstoragecontainer.TimeoutsAttributes](iesc.ref.Append("timeouts"))
}

type iothubEndpointStorageContainerState struct {
	AuthenticationType      string                                        `json:"authentication_type"`
	BatchFrequencyInSeconds float64                                       `json:"batch_frequency_in_seconds"`
	ConnectionString        string                                        `json:"connection_string"`
	ContainerName           string                                        `json:"container_name"`
	Encoding                string                                        `json:"encoding"`
	EndpointUri             string                                        `json:"endpoint_uri"`
	FileNameFormat          string                                        `json:"file_name_format"`
	Id                      string                                        `json:"id"`
	IdentityId              string                                        `json:"identity_id"`
	IothubId                string                                        `json:"iothub_id"`
	MaxChunkSizeInBytes     float64                                       `json:"max_chunk_size_in_bytes"`
	Name                    string                                        `json:"name"`
	ResourceGroupName       string                                        `json:"resource_group_name"`
	Timeouts                *iothubendpointstoragecontainer.TimeoutsState `json:"timeouts"`
}
