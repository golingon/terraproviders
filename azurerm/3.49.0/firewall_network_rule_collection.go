// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	firewallnetworkrulecollection "github.com/golingon/terraproviders/azurerm/3.49.0/firewallnetworkrulecollection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirewallNetworkRuleCollection(name string, args FirewallNetworkRuleCollectionArgs) *FirewallNetworkRuleCollection {
	return &FirewallNetworkRuleCollection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirewallNetworkRuleCollection)(nil)

type FirewallNetworkRuleCollection struct {
	Name  string
	Args  FirewallNetworkRuleCollectionArgs
	state *firewallNetworkRuleCollectionState
}

func (fnrc *FirewallNetworkRuleCollection) Type() string {
	return "azurerm_firewall_network_rule_collection"
}

func (fnrc *FirewallNetworkRuleCollection) LocalName() string {
	return fnrc.Name
}

func (fnrc *FirewallNetworkRuleCollection) Configuration() interface{} {
	return fnrc.Args
}

func (fnrc *FirewallNetworkRuleCollection) Attributes() firewallNetworkRuleCollectionAttributes {
	return firewallNetworkRuleCollectionAttributes{ref: terra.ReferenceResource(fnrc)}
}

func (fnrc *FirewallNetworkRuleCollection) ImportState(av io.Reader) error {
	fnrc.state = &firewallNetworkRuleCollectionState{}
	if err := json.NewDecoder(av).Decode(fnrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fnrc.Type(), fnrc.LocalName(), err)
	}
	return nil
}

func (fnrc *FirewallNetworkRuleCollection) State() (*firewallNetworkRuleCollectionState, bool) {
	return fnrc.state, fnrc.state != nil
}

func (fnrc *FirewallNetworkRuleCollection) StateMust() *firewallNetworkRuleCollectionState {
	if fnrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fnrc.Type(), fnrc.LocalName()))
	}
	return fnrc.state
}

func (fnrc *FirewallNetworkRuleCollection) DependOn() terra.Reference {
	return terra.ReferenceResource(fnrc)
}

type FirewallNetworkRuleCollectionArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// AzureFirewallName: string, required
	AzureFirewallName terra.StringValue `hcl:"azure_firewall_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Rule: min=1
	Rule []firewallnetworkrulecollection.Rule `hcl:"rule,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *firewallnetworkrulecollection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FirewallNetworkRuleCollection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firewallNetworkRuleCollectionAttributes struct {
	ref terra.Reference
}

func (fnrc firewallNetworkRuleCollectionAttributes) Action() terra.StringValue {
	return terra.ReferenceString(fnrc.ref.Append("action"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) AzureFirewallName() terra.StringValue {
	return terra.ReferenceString(fnrc.ref.Append("azure_firewall_name"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fnrc.ref.Append("id"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fnrc.ref.Append("name"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(fnrc.ref.Append("priority"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(fnrc.ref.Append("resource_group_name"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) Rule() terra.ListValue[firewallnetworkrulecollection.RuleAttributes] {
	return terra.ReferenceList[firewallnetworkrulecollection.RuleAttributes](fnrc.ref.Append("rule"))
}

func (fnrc firewallNetworkRuleCollectionAttributes) Timeouts() firewallnetworkrulecollection.TimeoutsAttributes {
	return terra.ReferenceSingle[firewallnetworkrulecollection.TimeoutsAttributes](fnrc.ref.Append("timeouts"))
}

type firewallNetworkRuleCollectionState struct {
	Action            string                                       `json:"action"`
	AzureFirewallName string                                       `json:"azure_firewall_name"`
	Id                string                                       `json:"id"`
	Name              string                                       `json:"name"`
	Priority          float64                                      `json:"priority"`
	ResourceGroupName string                                       `json:"resource_group_name"`
	Rule              []firewallnetworkrulecollection.RuleState    `json:"rule"`
	Timeouts          *firewallnetworkrulecollection.TimeoutsState `json:"timeouts"`
}
