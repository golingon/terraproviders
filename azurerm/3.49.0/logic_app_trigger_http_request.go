// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logicapptriggerhttprequest "github.com/golingon/terraproviders/azurerm/3.49.0/logicapptriggerhttprequest"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogicAppTriggerHttpRequest(name string, args LogicAppTriggerHttpRequestArgs) *LogicAppTriggerHttpRequest {
	return &LogicAppTriggerHttpRequest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogicAppTriggerHttpRequest)(nil)

type LogicAppTriggerHttpRequest struct {
	Name  string
	Args  LogicAppTriggerHttpRequestArgs
	state *logicAppTriggerHttpRequestState
}

func (lathr *LogicAppTriggerHttpRequest) Type() string {
	return "azurerm_logic_app_trigger_http_request"
}

func (lathr *LogicAppTriggerHttpRequest) LocalName() string {
	return lathr.Name
}

func (lathr *LogicAppTriggerHttpRequest) Configuration() interface{} {
	return lathr.Args
}

func (lathr *LogicAppTriggerHttpRequest) Attributes() logicAppTriggerHttpRequestAttributes {
	return logicAppTriggerHttpRequestAttributes{ref: terra.ReferenceResource(lathr)}
}

func (lathr *LogicAppTriggerHttpRequest) ImportState(av io.Reader) error {
	lathr.state = &logicAppTriggerHttpRequestState{}
	if err := json.NewDecoder(av).Decode(lathr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lathr.Type(), lathr.LocalName(), err)
	}
	return nil
}

func (lathr *LogicAppTriggerHttpRequest) State() (*logicAppTriggerHttpRequestState, bool) {
	return lathr.state, lathr.state != nil
}

func (lathr *LogicAppTriggerHttpRequest) StateMust() *logicAppTriggerHttpRequestState {
	if lathr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lathr.Type(), lathr.LocalName()))
	}
	return lathr.state
}

func (lathr *LogicAppTriggerHttpRequest) DependOn() terra.Reference {
	return terra.ReferenceResource(lathr)
}

type LogicAppTriggerHttpRequestArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogicAppId: string, required
	LogicAppId terra.StringValue `hcl:"logic_app_id,attr" validate:"required"`
	// Method: string, optional
	Method terra.StringValue `hcl:"method,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RelativePath: string, optional
	RelativePath terra.StringValue `hcl:"relative_path,attr"`
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *logicapptriggerhttprequest.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogicAppTriggerHttpRequest depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logicAppTriggerHttpRequestAttributes struct {
	ref terra.Reference
}

func (lathr logicAppTriggerHttpRequestAttributes) CallbackUrl() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("callback_url"))
}

func (lathr logicAppTriggerHttpRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("id"))
}

func (lathr logicAppTriggerHttpRequestAttributes) LogicAppId() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("logic_app_id"))
}

func (lathr logicAppTriggerHttpRequestAttributes) Method() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("method"))
}

func (lathr logicAppTriggerHttpRequestAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("name"))
}

func (lathr logicAppTriggerHttpRequestAttributes) RelativePath() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("relative_path"))
}

func (lathr logicAppTriggerHttpRequestAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(lathr.ref.Append("schema"))
}

func (lathr logicAppTriggerHttpRequestAttributes) Timeouts() logicapptriggerhttprequest.TimeoutsAttributes {
	return terra.ReferenceSingle[logicapptriggerhttprequest.TimeoutsAttributes](lathr.ref.Append("timeouts"))
}

type logicAppTriggerHttpRequestState struct {
	CallbackUrl  string                                    `json:"callback_url"`
	Id           string                                    `json:"id"`
	LogicAppId   string                                    `json:"logic_app_id"`
	Method       string                                    `json:"method"`
	Name         string                                    `json:"name"`
	RelativePath string                                    `json:"relative_path"`
	Schema       string                                    `json:"schema"`
	Timeouts     *logicapptriggerhttprequest.TimeoutsState `json:"timeouts"`
}
