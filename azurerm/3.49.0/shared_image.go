// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sharedimage "github.com/golingon/terraproviders/azurerm/3.49.0/sharedimage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSharedImage(name string, args SharedImageArgs) *SharedImage {
	return &SharedImage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SharedImage)(nil)

type SharedImage struct {
	Name  string
	Args  SharedImageArgs
	state *sharedImageState
}

func (si *SharedImage) Type() string {
	return "azurerm_shared_image"
}

func (si *SharedImage) LocalName() string {
	return si.Name
}

func (si *SharedImage) Configuration() interface{} {
	return si.Args
}

func (si *SharedImage) Attributes() sharedImageAttributes {
	return sharedImageAttributes{ref: terra.ReferenceResource(si)}
}

func (si *SharedImage) ImportState(av io.Reader) error {
	si.state = &sharedImageState{}
	if err := json.NewDecoder(av).Decode(si.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", si.Type(), si.LocalName(), err)
	}
	return nil
}

func (si *SharedImage) State() (*sharedImageState, bool) {
	return si.state, si.state != nil
}

func (si *SharedImage) StateMust() *sharedImageState {
	if si.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", si.Type(), si.LocalName()))
	}
	return si.state
}

func (si *SharedImage) DependOn() terra.Reference {
	return terra.ReferenceResource(si)
}

type SharedImageArgs struct {
	// AcceleratedNetworkSupportEnabled: bool, optional
	AcceleratedNetworkSupportEnabled terra.BoolValue `hcl:"accelerated_network_support_enabled,attr"`
	// Architecture: string, optional
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// ConfidentialVmEnabled: bool, optional
	ConfidentialVmEnabled terra.BoolValue `hcl:"confidential_vm_enabled,attr"`
	// ConfidentialVmSupported: bool, optional
	ConfidentialVmSupported terra.BoolValue `hcl:"confidential_vm_supported,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DiskTypesNotAllowed: set of string, optional
	DiskTypesNotAllowed terra.SetValue[terra.StringValue] `hcl:"disk_types_not_allowed,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// Eula: string, optional
	Eula terra.StringValue `hcl:"eula,attr"`
	// GalleryName: string, required
	GalleryName terra.StringValue `hcl:"gallery_name,attr" validate:"required"`
	// HyperVGeneration: string, optional
	HyperVGeneration terra.StringValue `hcl:"hyper_v_generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxRecommendedMemoryInGb: number, optional
	MaxRecommendedMemoryInGb terra.NumberValue `hcl:"max_recommended_memory_in_gb,attr"`
	// MaxRecommendedVcpuCount: number, optional
	MaxRecommendedVcpuCount terra.NumberValue `hcl:"max_recommended_vcpu_count,attr"`
	// MinRecommendedMemoryInGb: number, optional
	MinRecommendedMemoryInGb terra.NumberValue `hcl:"min_recommended_memory_in_gb,attr"`
	// MinRecommendedVcpuCount: number, optional
	MinRecommendedVcpuCount terra.NumberValue `hcl:"min_recommended_vcpu_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
	// PrivacyStatementUri: string, optional
	PrivacyStatementUri terra.StringValue `hcl:"privacy_statement_uri,attr"`
	// ReleaseNoteUri: string, optional
	ReleaseNoteUri terra.StringValue `hcl:"release_note_uri,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Specialized: bool, optional
	Specialized terra.BoolValue `hcl:"specialized,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TrustedLaunchEnabled: bool, optional
	TrustedLaunchEnabled terra.BoolValue `hcl:"trusted_launch_enabled,attr"`
	// Identifier: required
	Identifier *sharedimage.Identifier `hcl:"identifier,block" validate:"required"`
	// PurchasePlan: optional
	PurchasePlan *sharedimage.PurchasePlan `hcl:"purchase_plan,block"`
	// Timeouts: optional
	Timeouts *sharedimage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SharedImage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sharedImageAttributes struct {
	ref terra.Reference
}

func (si sharedImageAttributes) AcceleratedNetworkSupportEnabled() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("accelerated_network_support_enabled"))
}

func (si sharedImageAttributes) Architecture() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("architecture"))
}

func (si sharedImageAttributes) ConfidentialVmEnabled() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("confidential_vm_enabled"))
}

func (si sharedImageAttributes) ConfidentialVmSupported() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("confidential_vm_supported"))
}

func (si sharedImageAttributes) Description() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("description"))
}

func (si sharedImageAttributes) DiskTypesNotAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](si.ref.Append("disk_types_not_allowed"))
}

func (si sharedImageAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("end_of_life_date"))
}

func (si sharedImageAttributes) Eula() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("eula"))
}

func (si sharedImageAttributes) GalleryName() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("gallery_name"))
}

func (si sharedImageAttributes) HyperVGeneration() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("hyper_v_generation"))
}

func (si sharedImageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("id"))
}

func (si sharedImageAttributes) Location() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("location"))
}

func (si sharedImageAttributes) MaxRecommendedMemoryInGb() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("max_recommended_memory_in_gb"))
}

func (si sharedImageAttributes) MaxRecommendedVcpuCount() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("max_recommended_vcpu_count"))
}

func (si sharedImageAttributes) MinRecommendedMemoryInGb() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("min_recommended_memory_in_gb"))
}

func (si sharedImageAttributes) MinRecommendedVcpuCount() terra.NumberValue {
	return terra.ReferenceNumber(si.ref.Append("min_recommended_vcpu_count"))
}

func (si sharedImageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("name"))
}

func (si sharedImageAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("os_type"))
}

func (si sharedImageAttributes) PrivacyStatementUri() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("privacy_statement_uri"))
}

func (si sharedImageAttributes) ReleaseNoteUri() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("release_note_uri"))
}

func (si sharedImageAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(si.ref.Append("resource_group_name"))
}

func (si sharedImageAttributes) Specialized() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("specialized"))
}

func (si sharedImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](si.ref.Append("tags"))
}

func (si sharedImageAttributes) TrustedLaunchEnabled() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("trusted_launch_enabled"))
}

func (si sharedImageAttributes) Identifier() terra.ListValue[sharedimage.IdentifierAttributes] {
	return terra.ReferenceList[sharedimage.IdentifierAttributes](si.ref.Append("identifier"))
}

func (si sharedImageAttributes) PurchasePlan() terra.ListValue[sharedimage.PurchasePlanAttributes] {
	return terra.ReferenceList[sharedimage.PurchasePlanAttributes](si.ref.Append("purchase_plan"))
}

func (si sharedImageAttributes) Timeouts() sharedimage.TimeoutsAttributes {
	return terra.ReferenceSingle[sharedimage.TimeoutsAttributes](si.ref.Append("timeouts"))
}

type sharedImageState struct {
	AcceleratedNetworkSupportEnabled bool                            `json:"accelerated_network_support_enabled"`
	Architecture                     string                          `json:"architecture"`
	ConfidentialVmEnabled            bool                            `json:"confidential_vm_enabled"`
	ConfidentialVmSupported          bool                            `json:"confidential_vm_supported"`
	Description                      string                          `json:"description"`
	DiskTypesNotAllowed              []string                        `json:"disk_types_not_allowed"`
	EndOfLifeDate                    string                          `json:"end_of_life_date"`
	Eula                             string                          `json:"eula"`
	GalleryName                      string                          `json:"gallery_name"`
	HyperVGeneration                 string                          `json:"hyper_v_generation"`
	Id                               string                          `json:"id"`
	Location                         string                          `json:"location"`
	MaxRecommendedMemoryInGb         float64                         `json:"max_recommended_memory_in_gb"`
	MaxRecommendedVcpuCount          float64                         `json:"max_recommended_vcpu_count"`
	MinRecommendedMemoryInGb         float64                         `json:"min_recommended_memory_in_gb"`
	MinRecommendedVcpuCount          float64                         `json:"min_recommended_vcpu_count"`
	Name                             string                          `json:"name"`
	OsType                           string                          `json:"os_type"`
	PrivacyStatementUri              string                          `json:"privacy_statement_uri"`
	ReleaseNoteUri                   string                          `json:"release_note_uri"`
	ResourceGroupName                string                          `json:"resource_group_name"`
	Specialized                      bool                            `json:"specialized"`
	Tags                             map[string]string               `json:"tags"`
	TrustedLaunchEnabled             bool                            `json:"trusted_launch_enabled"`
	Identifier                       []sharedimage.IdentifierState   `json:"identifier"`
	PurchasePlan                     []sharedimage.PurchasePlanState `json:"purchase_plan"`
	Timeouts                         *sharedimage.TimeoutsState      `json:"timeouts"`
}
