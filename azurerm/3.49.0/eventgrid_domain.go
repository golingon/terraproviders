// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventgriddomain "github.com/golingon/terraproviders/azurerm/3.49.0/eventgriddomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventgridDomain(name string, args EventgridDomainArgs) *EventgridDomain {
	return &EventgridDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventgridDomain)(nil)

type EventgridDomain struct {
	Name  string
	Args  EventgridDomainArgs
	state *eventgridDomainState
}

func (ed *EventgridDomain) Type() string {
	return "azurerm_eventgrid_domain"
}

func (ed *EventgridDomain) LocalName() string {
	return ed.Name
}

func (ed *EventgridDomain) Configuration() interface{} {
	return ed.Args
}

func (ed *EventgridDomain) Attributes() eventgridDomainAttributes {
	return eventgridDomainAttributes{ref: terra.ReferenceResource(ed)}
}

func (ed *EventgridDomain) ImportState(av io.Reader) error {
	ed.state = &eventgridDomainState{}
	if err := json.NewDecoder(av).Decode(ed.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ed.Type(), ed.LocalName(), err)
	}
	return nil
}

func (ed *EventgridDomain) State() (*eventgridDomainState, bool) {
	return ed.state, ed.state != nil
}

func (ed *EventgridDomain) StateMust() *eventgridDomainState {
	if ed.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ed.Type(), ed.LocalName()))
	}
	return ed.state
}

func (ed *EventgridDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(ed)
}

type EventgridDomainArgs struct {
	// AutoCreateTopicWithFirstSubscription: bool, optional
	AutoCreateTopicWithFirstSubscription terra.BoolValue `hcl:"auto_create_topic_with_first_subscription,attr"`
	// AutoDeleteTopicWithLastSubscription: bool, optional
	AutoDeleteTopicWithLastSubscription terra.BoolValue `hcl:"auto_delete_topic_with_last_subscription,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputSchema: string, optional
	InputSchema terra.StringValue `hcl:"input_schema,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// InboundIpRule: min=0
	InboundIpRule []eventgriddomain.InboundIpRule `hcl:"inbound_ip_rule,block" validate:"min=0"`
	// Identity: optional
	Identity *eventgriddomain.Identity `hcl:"identity,block"`
	// InputMappingDefaultValues: optional
	InputMappingDefaultValues *eventgriddomain.InputMappingDefaultValues `hcl:"input_mapping_default_values,block"`
	// InputMappingFields: optional
	InputMappingFields *eventgriddomain.InputMappingFields `hcl:"input_mapping_fields,block"`
	// Timeouts: optional
	Timeouts *eventgriddomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventgridDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventgridDomainAttributes struct {
	ref terra.Reference
}

func (ed eventgridDomainAttributes) AutoCreateTopicWithFirstSubscription() terra.BoolValue {
	return terra.ReferenceBool(ed.ref.Append("auto_create_topic_with_first_subscription"))
}

func (ed eventgridDomainAttributes) AutoDeleteTopicWithLastSubscription() terra.BoolValue {
	return terra.ReferenceBool(ed.ref.Append("auto_delete_topic_with_last_subscription"))
}

func (ed eventgridDomainAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("endpoint"))
}

func (ed eventgridDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("id"))
}

func (ed eventgridDomainAttributes) InputSchema() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("input_schema"))
}

func (ed eventgridDomainAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(ed.ref.Append("local_auth_enabled"))
}

func (ed eventgridDomainAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("location"))
}

func (ed eventgridDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("name"))
}

func (ed eventgridDomainAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("primary_access_key"))
}

func (ed eventgridDomainAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ed.ref.Append("public_network_access_enabled"))
}

func (ed eventgridDomainAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("resource_group_name"))
}

func (ed eventgridDomainAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("secondary_access_key"))
}

func (ed eventgridDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ed.ref.Append("tags"))
}

func (ed eventgridDomainAttributes) InboundIpRule() terra.ListValue[eventgriddomain.InboundIpRuleAttributes] {
	return terra.ReferenceList[eventgriddomain.InboundIpRuleAttributes](ed.ref.Append("inbound_ip_rule"))
}

func (ed eventgridDomainAttributes) Identity() terra.ListValue[eventgriddomain.IdentityAttributes] {
	return terra.ReferenceList[eventgriddomain.IdentityAttributes](ed.ref.Append("identity"))
}

func (ed eventgridDomainAttributes) InputMappingDefaultValues() terra.ListValue[eventgriddomain.InputMappingDefaultValuesAttributes] {
	return terra.ReferenceList[eventgriddomain.InputMappingDefaultValuesAttributes](ed.ref.Append("input_mapping_default_values"))
}

func (ed eventgridDomainAttributes) InputMappingFields() terra.ListValue[eventgriddomain.InputMappingFieldsAttributes] {
	return terra.ReferenceList[eventgriddomain.InputMappingFieldsAttributes](ed.ref.Append("input_mapping_fields"))
}

func (ed eventgridDomainAttributes) Timeouts() eventgriddomain.TimeoutsAttributes {
	return terra.ReferenceSingle[eventgriddomain.TimeoutsAttributes](ed.ref.Append("timeouts"))
}

type eventgridDomainState struct {
	AutoCreateTopicWithFirstSubscription bool                                             `json:"auto_create_topic_with_first_subscription"`
	AutoDeleteTopicWithLastSubscription  bool                                             `json:"auto_delete_topic_with_last_subscription"`
	Endpoint                             string                                           `json:"endpoint"`
	Id                                   string                                           `json:"id"`
	InputSchema                          string                                           `json:"input_schema"`
	LocalAuthEnabled                     bool                                             `json:"local_auth_enabled"`
	Location                             string                                           `json:"location"`
	Name                                 string                                           `json:"name"`
	PrimaryAccessKey                     string                                           `json:"primary_access_key"`
	PublicNetworkAccessEnabled           bool                                             `json:"public_network_access_enabled"`
	ResourceGroupName                    string                                           `json:"resource_group_name"`
	SecondaryAccessKey                   string                                           `json:"secondary_access_key"`
	Tags                                 map[string]string                                `json:"tags"`
	InboundIpRule                        []eventgriddomain.InboundIpRuleState             `json:"inbound_ip_rule"`
	Identity                             []eventgriddomain.IdentityState                  `json:"identity"`
	InputMappingDefaultValues            []eventgriddomain.InputMappingDefaultValuesState `json:"input_mapping_default_values"`
	InputMappingFields                   []eventgriddomain.InputMappingFieldsState        `json:"input_mapping_fields"`
	Timeouts                             *eventgriddomain.TimeoutsState                   `json:"timeouts"`
}
