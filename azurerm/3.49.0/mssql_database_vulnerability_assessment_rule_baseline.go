// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqldatabasevulnerabilityassessmentrulebaseline "github.com/golingon/terraproviders/azurerm/3.49.0/mssqldatabasevulnerabilityassessmentrulebaseline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlDatabaseVulnerabilityAssessmentRuleBaseline(name string, args MssqlDatabaseVulnerabilityAssessmentRuleBaselineArgs) *MssqlDatabaseVulnerabilityAssessmentRuleBaseline {
	return &MssqlDatabaseVulnerabilityAssessmentRuleBaseline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlDatabaseVulnerabilityAssessmentRuleBaseline)(nil)

type MssqlDatabaseVulnerabilityAssessmentRuleBaseline struct {
	Name  string
	Args  MssqlDatabaseVulnerabilityAssessmentRuleBaselineArgs
	state *mssqlDatabaseVulnerabilityAssessmentRuleBaselineState
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) Type() string {
	return "azurerm_mssql_database_vulnerability_assessment_rule_baseline"
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) LocalName() string {
	return mdvarb.Name
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) Configuration() interface{} {
	return mdvarb.Args
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) Attributes() mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes {
	return mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes{ref: terra.ReferenceResource(mdvarb)}
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) ImportState(av io.Reader) error {
	mdvarb.state = &mssqlDatabaseVulnerabilityAssessmentRuleBaselineState{}
	if err := json.NewDecoder(av).Decode(mdvarb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdvarb.Type(), mdvarb.LocalName(), err)
	}
	return nil
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) State() (*mssqlDatabaseVulnerabilityAssessmentRuleBaselineState, bool) {
	return mdvarb.state, mdvarb.state != nil
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) StateMust() *mssqlDatabaseVulnerabilityAssessmentRuleBaselineState {
	if mdvarb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdvarb.Type(), mdvarb.LocalName()))
	}
	return mdvarb.state
}

func (mdvarb *MssqlDatabaseVulnerabilityAssessmentRuleBaseline) DependOn() terra.Reference {
	return terra.ReferenceResource(mdvarb)
}

type MssqlDatabaseVulnerabilityAssessmentRuleBaselineArgs struct {
	// BaselineName: string, optional
	BaselineName terra.StringValue `hcl:"baseline_name,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RuleId: string, required
	RuleId terra.StringValue `hcl:"rule_id,attr" validate:"required"`
	// ServerVulnerabilityAssessmentId: string, required
	ServerVulnerabilityAssessmentId terra.StringValue `hcl:"server_vulnerability_assessment_id,attr" validate:"required"`
	// BaselineResult: min=1
	BaselineResult []mssqldatabasevulnerabilityassessmentrulebaseline.BaselineResult `hcl:"baseline_result,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *mssqldatabasevulnerabilityassessmentrulebaseline.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlDatabaseVulnerabilityAssessmentRuleBaseline depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes struct {
	ref terra.Reference
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) BaselineName() terra.StringValue {
	return terra.ReferenceString(mdvarb.ref.Append("baseline_name"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(mdvarb.ref.Append("database_name"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mdvarb.ref.Append("id"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) RuleId() terra.StringValue {
	return terra.ReferenceString(mdvarb.ref.Append("rule_id"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) ServerVulnerabilityAssessmentId() terra.StringValue {
	return terra.ReferenceString(mdvarb.ref.Append("server_vulnerability_assessment_id"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) BaselineResult() terra.SetValue[mssqldatabasevulnerabilityassessmentrulebaseline.BaselineResultAttributes] {
	return terra.ReferenceSet[mssqldatabasevulnerabilityassessmentrulebaseline.BaselineResultAttributes](mdvarb.ref.Append("baseline_result"))
}

func (mdvarb mssqlDatabaseVulnerabilityAssessmentRuleBaselineAttributes) Timeouts() mssqldatabasevulnerabilityassessmentrulebaseline.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqldatabasevulnerabilityassessmentrulebaseline.TimeoutsAttributes](mdvarb.ref.Append("timeouts"))
}

type mssqlDatabaseVulnerabilityAssessmentRuleBaselineState struct {
	BaselineName                    string                                                                 `json:"baseline_name"`
	DatabaseName                    string                                                                 `json:"database_name"`
	Id                              string                                                                 `json:"id"`
	RuleId                          string                                                                 `json:"rule_id"`
	ServerVulnerabilityAssessmentId string                                                                 `json:"server_vulnerability_assessment_id"`
	BaselineResult                  []mssqldatabasevulnerabilityassessmentrulebaseline.BaselineResultState `json:"baseline_result"`
	Timeouts                        *mssqldatabasevulnerabilityassessmentrulebaseline.TimeoutsState        `json:"timeouts"`
}
