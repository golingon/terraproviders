// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorytriggertumblingwindow "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorytriggertumblingwindow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryTriggerTumblingWindow(name string, args DataFactoryTriggerTumblingWindowArgs) *DataFactoryTriggerTumblingWindow {
	return &DataFactoryTriggerTumblingWindow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryTriggerTumblingWindow)(nil)

type DataFactoryTriggerTumblingWindow struct {
	Name  string
	Args  DataFactoryTriggerTumblingWindowArgs
	state *dataFactoryTriggerTumblingWindowState
}

func (dfttw *DataFactoryTriggerTumblingWindow) Type() string {
	return "azurerm_data_factory_trigger_tumbling_window"
}

func (dfttw *DataFactoryTriggerTumblingWindow) LocalName() string {
	return dfttw.Name
}

func (dfttw *DataFactoryTriggerTumblingWindow) Configuration() interface{} {
	return dfttw.Args
}

func (dfttw *DataFactoryTriggerTumblingWindow) Attributes() dataFactoryTriggerTumblingWindowAttributes {
	return dataFactoryTriggerTumblingWindowAttributes{ref: terra.ReferenceResource(dfttw)}
}

func (dfttw *DataFactoryTriggerTumblingWindow) ImportState(av io.Reader) error {
	dfttw.state = &dataFactoryTriggerTumblingWindowState{}
	if err := json.NewDecoder(av).Decode(dfttw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfttw.Type(), dfttw.LocalName(), err)
	}
	return nil
}

func (dfttw *DataFactoryTriggerTumblingWindow) State() (*dataFactoryTriggerTumblingWindowState, bool) {
	return dfttw.state, dfttw.state != nil
}

func (dfttw *DataFactoryTriggerTumblingWindow) StateMust() *dataFactoryTriggerTumblingWindowState {
	if dfttw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfttw.Type(), dfttw.LocalName()))
	}
	return dfttw.state
}

func (dfttw *DataFactoryTriggerTumblingWindow) DependOn() terra.Reference {
	return terra.ReferenceResource(dfttw)
}

type DataFactoryTriggerTumblingWindowArgs struct {
	// Activated: bool, optional
	Activated terra.BoolValue `hcl:"activated,attr"`
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Delay: string, optional
	Delay terra.StringValue `hcl:"delay,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// MaxConcurrency: number, optional
	MaxConcurrency terra.NumberValue `hcl:"max_concurrency,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// Pipeline: required
	Pipeline *datafactorytriggertumblingwindow.Pipeline `hcl:"pipeline,block" validate:"required"`
	// Retry: optional
	Retry *datafactorytriggertumblingwindow.Retry `hcl:"retry,block"`
	// Timeouts: optional
	Timeouts *datafactorytriggertumblingwindow.Timeouts `hcl:"timeouts,block"`
	// TriggerDependency: min=0
	TriggerDependency []datafactorytriggertumblingwindow.TriggerDependency `hcl:"trigger_dependency,block" validate:"min=0"`
	// DependsOn contains resources that DataFactoryTriggerTumblingWindow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryTriggerTumblingWindowAttributes struct {
	ref terra.Reference
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Activated() terra.BoolValue {
	return terra.ReferenceBool(dfttw.ref.Append("activated"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfttw.ref.Append("additional_properties"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfttw.ref.Append("annotations"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("data_factory_id"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Delay() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("delay"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("description"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("end_time"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Frequency() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("frequency"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("id"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Interval() terra.NumberValue {
	return terra.ReferenceNumber(dfttw.ref.Append("interval"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) MaxConcurrency() terra.NumberValue {
	return terra.ReferenceNumber(dfttw.ref.Append("max_concurrency"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("name"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(dfttw.ref.Append("start_time"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Pipeline() terra.ListValue[datafactorytriggertumblingwindow.PipelineAttributes] {
	return terra.ReferenceList[datafactorytriggertumblingwindow.PipelineAttributes](dfttw.ref.Append("pipeline"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Retry() terra.ListValue[datafactorytriggertumblingwindow.RetryAttributes] {
	return terra.ReferenceList[datafactorytriggertumblingwindow.RetryAttributes](dfttw.ref.Append("retry"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) Timeouts() datafactorytriggertumblingwindow.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorytriggertumblingwindow.TimeoutsAttributes](dfttw.ref.Append("timeouts"))
}

func (dfttw dataFactoryTriggerTumblingWindowAttributes) TriggerDependency() terra.SetValue[datafactorytriggertumblingwindow.TriggerDependencyAttributes] {
	return terra.ReferenceSet[datafactorytriggertumblingwindow.TriggerDependencyAttributes](dfttw.ref.Append("trigger_dependency"))
}

type dataFactoryTriggerTumblingWindowState struct {
	Activated            bool                                                      `json:"activated"`
	AdditionalProperties map[string]string                                         `json:"additional_properties"`
	Annotations          []string                                                  `json:"annotations"`
	DataFactoryId        string                                                    `json:"data_factory_id"`
	Delay                string                                                    `json:"delay"`
	Description          string                                                    `json:"description"`
	EndTime              string                                                    `json:"end_time"`
	Frequency            string                                                    `json:"frequency"`
	Id                   string                                                    `json:"id"`
	Interval             float64                                                   `json:"interval"`
	MaxConcurrency       float64                                                   `json:"max_concurrency"`
	Name                 string                                                    `json:"name"`
	StartTime            string                                                    `json:"start_time"`
	Pipeline             []datafactorytriggertumblingwindow.PipelineState          `json:"pipeline"`
	Retry                []datafactorytriggertumblingwindow.RetryState             `json:"retry"`
	Timeouts             *datafactorytriggertumblingwindow.TimeoutsState           `json:"timeouts"`
	TriggerDependency    []datafactorytriggertumblingwindow.TriggerDependencyState `json:"trigger_dependency"`
}
