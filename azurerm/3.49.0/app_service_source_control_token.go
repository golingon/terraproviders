// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appservicesourcecontroltoken "github.com/golingon/terraproviders/azurerm/3.49.0/appservicesourcecontroltoken"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServiceSourceControlToken(name string, args AppServiceSourceControlTokenArgs) *AppServiceSourceControlToken {
	return &AppServiceSourceControlToken{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServiceSourceControlToken)(nil)

type AppServiceSourceControlToken struct {
	Name  string
	Args  AppServiceSourceControlTokenArgs
	state *appServiceSourceControlTokenState
}

func (assct *AppServiceSourceControlToken) Type() string {
	return "azurerm_app_service_source_control_token"
}

func (assct *AppServiceSourceControlToken) LocalName() string {
	return assct.Name
}

func (assct *AppServiceSourceControlToken) Configuration() interface{} {
	return assct.Args
}

func (assct *AppServiceSourceControlToken) Attributes() appServiceSourceControlTokenAttributes {
	return appServiceSourceControlTokenAttributes{ref: terra.ReferenceResource(assct)}
}

func (assct *AppServiceSourceControlToken) ImportState(av io.Reader) error {
	assct.state = &appServiceSourceControlTokenState{}
	if err := json.NewDecoder(av).Decode(assct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assct.Type(), assct.LocalName(), err)
	}
	return nil
}

func (assct *AppServiceSourceControlToken) State() (*appServiceSourceControlTokenState, bool) {
	return assct.state, assct.state != nil
}

func (assct *AppServiceSourceControlToken) StateMust() *appServiceSourceControlTokenState {
	if assct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assct.Type(), assct.LocalName()))
	}
	return assct.state
}

func (assct *AppServiceSourceControlToken) DependOn() terra.Reference {
	return terra.ReferenceResource(assct)
}

type AppServiceSourceControlTokenArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// TokenSecret: string, optional
	TokenSecret terra.StringValue `hcl:"token_secret,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *appservicesourcecontroltoken.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServiceSourceControlToken depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServiceSourceControlTokenAttributes struct {
	ref terra.Reference
}

func (assct appServiceSourceControlTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceString(assct.ref.Append("id"))
}

func (assct appServiceSourceControlTokenAttributes) Token() terra.StringValue {
	return terra.ReferenceString(assct.ref.Append("token"))
}

func (assct appServiceSourceControlTokenAttributes) TokenSecret() terra.StringValue {
	return terra.ReferenceString(assct.ref.Append("token_secret"))
}

func (assct appServiceSourceControlTokenAttributes) Type() terra.StringValue {
	return terra.ReferenceString(assct.ref.Append("type"))
}

func (assct appServiceSourceControlTokenAttributes) Timeouts() appservicesourcecontroltoken.TimeoutsAttributes {
	return terra.ReferenceSingle[appservicesourcecontroltoken.TimeoutsAttributes](assct.ref.Append("timeouts"))
}

type appServiceSourceControlTokenState struct {
	Id          string                                      `json:"id"`
	Token       string                                      `json:"token"`
	TokenSecret string                                      `json:"token_secret"`
	Type        string                                      `json:"type"`
	Timeouts    *appservicesourcecontroltoken.TimeoutsState `json:"timeouts"`
}
