// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapischema "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapischema"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApiSchema(name string, args ApiManagementApiSchemaArgs) *ApiManagementApiSchema {
	return &ApiManagementApiSchema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApiSchema)(nil)

type ApiManagementApiSchema struct {
	Name  string
	Args  ApiManagementApiSchemaArgs
	state *apiManagementApiSchemaState
}

func (amas *ApiManagementApiSchema) Type() string {
	return "azurerm_api_management_api_schema"
}

func (amas *ApiManagementApiSchema) LocalName() string {
	return amas.Name
}

func (amas *ApiManagementApiSchema) Configuration() interface{} {
	return amas.Args
}

func (amas *ApiManagementApiSchema) Attributes() apiManagementApiSchemaAttributes {
	return apiManagementApiSchemaAttributes{ref: terra.ReferenceResource(amas)}
}

func (amas *ApiManagementApiSchema) ImportState(av io.Reader) error {
	amas.state = &apiManagementApiSchemaState{}
	if err := json.NewDecoder(av).Decode(amas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amas.Type(), amas.LocalName(), err)
	}
	return nil
}

func (amas *ApiManagementApiSchema) State() (*apiManagementApiSchemaState, bool) {
	return amas.state, amas.state != nil
}

func (amas *ApiManagementApiSchema) StateMust() *apiManagementApiSchemaState {
	if amas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amas.Type(), amas.LocalName()))
	}
	return amas.state
}

func (amas *ApiManagementApiSchema) DependOn() terra.Reference {
	return terra.ReferenceResource(amas)
}

type ApiManagementApiSchemaArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ApiName: string, required
	ApiName terra.StringValue `hcl:"api_name,attr" validate:"required"`
	// Components: string, optional
	Components terra.StringValue `hcl:"components,attr"`
	// ContentType: string, required
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
	// Definitions: string, optional
	Definitions terra.StringValue `hcl:"definitions,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SchemaId: string, required
	SchemaId terra.StringValue `hcl:"schema_id,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// Timeouts: optional
	Timeouts *apimanagementapischema.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApiSchema depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiSchemaAttributes struct {
	ref terra.Reference
}

func (amas apiManagementApiSchemaAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("api_management_name"))
}

func (amas apiManagementApiSchemaAttributes) ApiName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("api_name"))
}

func (amas apiManagementApiSchemaAttributes) Components() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("components"))
}

func (amas apiManagementApiSchemaAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("content_type"))
}

func (amas apiManagementApiSchemaAttributes) Definitions() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("definitions"))
}

func (amas apiManagementApiSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("id"))
}

func (amas apiManagementApiSchemaAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("resource_group_name"))
}

func (amas apiManagementApiSchemaAttributes) SchemaId() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("schema_id"))
}

func (amas apiManagementApiSchemaAttributes) Value() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("value"))
}

func (amas apiManagementApiSchemaAttributes) Timeouts() apimanagementapischema.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapischema.TimeoutsAttributes](amas.ref.Append("timeouts"))
}

type apiManagementApiSchemaState struct {
	ApiManagementName string                                `json:"api_management_name"`
	ApiName           string                                `json:"api_name"`
	Components        string                                `json:"components"`
	ContentType       string                                `json:"content_type"`
	Definitions       string                                `json:"definitions"`
	Id                string                                `json:"id"`
	ResourceGroupName string                                `json:"resource_group_name"`
	SchemaId          string                                `json:"schema_id"`
	Value             string                                `json:"value"`
	Timeouts          *apimanagementapischema.TimeoutsState `json:"timeouts"`
}
