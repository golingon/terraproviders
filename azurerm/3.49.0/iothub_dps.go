// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iothubdps "github.com/golingon/terraproviders/azurerm/3.49.0/iothubdps"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIothubDps(name string, args IothubDpsArgs) *IothubDps {
	return &IothubDps{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IothubDps)(nil)

type IothubDps struct {
	Name  string
	Args  IothubDpsArgs
	state *iothubDpsState
}

func (id *IothubDps) Type() string {
	return "azurerm_iothub_dps"
}

func (id *IothubDps) LocalName() string {
	return id.Name
}

func (id *IothubDps) Configuration() interface{} {
	return id.Args
}

func (id *IothubDps) Attributes() iothubDpsAttributes {
	return iothubDpsAttributes{ref: terra.ReferenceResource(id)}
}

func (id *IothubDps) ImportState(av io.Reader) error {
	id.state = &iothubDpsState{}
	if err := json.NewDecoder(av).Decode(id.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", id.Type(), id.LocalName(), err)
	}
	return nil
}

func (id *IothubDps) State() (*iothubDpsState, bool) {
	return id.state, id.state != nil
}

func (id *IothubDps) StateMust() *iothubDpsState {
	if id.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", id.Type(), id.LocalName()))
	}
	return id.state
}

func (id *IothubDps) DependOn() terra.Reference {
	return terra.ReferenceResource(id)
}

type IothubDpsArgs struct {
	// AllocationPolicy: string, optional
	AllocationPolicy terra.StringValue `hcl:"allocation_policy,attr"`
	// DataResidencyEnabled: bool, optional
	DataResidencyEnabled terra.BoolValue `hcl:"data_residency_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// IpFilterRule: min=0
	IpFilterRule []iothubdps.IpFilterRule `hcl:"ip_filter_rule,block" validate:"min=0"`
	// LinkedHub: min=0
	LinkedHub []iothubdps.LinkedHub `hcl:"linked_hub,block" validate:"min=0"`
	// Sku: required
	Sku *iothubdps.Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *iothubdps.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IothubDps depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iothubDpsAttributes struct {
	ref terra.Reference
}

func (id iothubDpsAttributes) AllocationPolicy() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("allocation_policy"))
}

func (id iothubDpsAttributes) DataResidencyEnabled() terra.BoolValue {
	return terra.ReferenceBool(id.ref.Append("data_residency_enabled"))
}

func (id iothubDpsAttributes) DeviceProvisioningHostName() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("device_provisioning_host_name"))
}

func (id iothubDpsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("id"))
}

func (id iothubDpsAttributes) IdScope() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("id_scope"))
}

func (id iothubDpsAttributes) Location() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("location"))
}

func (id iothubDpsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("name"))
}

func (id iothubDpsAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(id.ref.Append("public_network_access_enabled"))
}

func (id iothubDpsAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("resource_group_name"))
}

func (id iothubDpsAttributes) ServiceOperationsHostName() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("service_operations_host_name"))
}

func (id iothubDpsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](id.ref.Append("tags"))
}

func (id iothubDpsAttributes) IpFilterRule() terra.ListValue[iothubdps.IpFilterRuleAttributes] {
	return terra.ReferenceList[iothubdps.IpFilterRuleAttributes](id.ref.Append("ip_filter_rule"))
}

func (id iothubDpsAttributes) LinkedHub() terra.ListValue[iothubdps.LinkedHubAttributes] {
	return terra.ReferenceList[iothubdps.LinkedHubAttributes](id.ref.Append("linked_hub"))
}

func (id iothubDpsAttributes) Sku() terra.ListValue[iothubdps.SkuAttributes] {
	return terra.ReferenceList[iothubdps.SkuAttributes](id.ref.Append("sku"))
}

func (id iothubDpsAttributes) Timeouts() iothubdps.TimeoutsAttributes {
	return terra.ReferenceSingle[iothubdps.TimeoutsAttributes](id.ref.Append("timeouts"))
}

type iothubDpsState struct {
	AllocationPolicy           string                        `json:"allocation_policy"`
	DataResidencyEnabled       bool                          `json:"data_residency_enabled"`
	DeviceProvisioningHostName string                        `json:"device_provisioning_host_name"`
	Id                         string                        `json:"id"`
	IdScope                    string                        `json:"id_scope"`
	Location                   string                        `json:"location"`
	Name                       string                        `json:"name"`
	PublicNetworkAccessEnabled bool                          `json:"public_network_access_enabled"`
	ResourceGroupName          string                        `json:"resource_group_name"`
	ServiceOperationsHostName  string                        `json:"service_operations_host_name"`
	Tags                       map[string]string             `json:"tags"`
	IpFilterRule               []iothubdps.IpFilterRuleState `json:"ip_filter_rule"`
	LinkedHub                  []iothubdps.LinkedHubState    `json:"linked_hub"`
	Sku                        []iothubdps.SkuState          `json:"sku"`
	Timeouts                   *iothubdps.TimeoutsState      `json:"timeouts"`
}
