// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iothubconsumergroup "github.com/golingon/terraproviders/azurerm/3.49.0/iothubconsumergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIothubConsumerGroup(name string, args IothubConsumerGroupArgs) *IothubConsumerGroup {
	return &IothubConsumerGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IothubConsumerGroup)(nil)

type IothubConsumerGroup struct {
	Name  string
	Args  IothubConsumerGroupArgs
	state *iothubConsumerGroupState
}

func (icg *IothubConsumerGroup) Type() string {
	return "azurerm_iothub_consumer_group"
}

func (icg *IothubConsumerGroup) LocalName() string {
	return icg.Name
}

func (icg *IothubConsumerGroup) Configuration() interface{} {
	return icg.Args
}

func (icg *IothubConsumerGroup) Attributes() iothubConsumerGroupAttributes {
	return iothubConsumerGroupAttributes{ref: terra.ReferenceResource(icg)}
}

func (icg *IothubConsumerGroup) ImportState(av io.Reader) error {
	icg.state = &iothubConsumerGroupState{}
	if err := json.NewDecoder(av).Decode(icg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", icg.Type(), icg.LocalName(), err)
	}
	return nil
}

func (icg *IothubConsumerGroup) State() (*iothubConsumerGroupState, bool) {
	return icg.state, icg.state != nil
}

func (icg *IothubConsumerGroup) StateMust() *iothubConsumerGroupState {
	if icg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", icg.Type(), icg.LocalName()))
	}
	return icg.state
}

func (icg *IothubConsumerGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(icg)
}

type IothubConsumerGroupArgs struct {
	// EventhubEndpointName: string, required
	EventhubEndpointName terra.StringValue `hcl:"eventhub_endpoint_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IothubName: string, required
	IothubName terra.StringValue `hcl:"iothub_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *iothubconsumergroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IothubConsumerGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iothubConsumerGroupAttributes struct {
	ref terra.Reference
}

func (icg iothubConsumerGroupAttributes) EventhubEndpointName() terra.StringValue {
	return terra.ReferenceString(icg.ref.Append("eventhub_endpoint_name"))
}

func (icg iothubConsumerGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(icg.ref.Append("id"))
}

func (icg iothubConsumerGroupAttributes) IothubName() terra.StringValue {
	return terra.ReferenceString(icg.ref.Append("iothub_name"))
}

func (icg iothubConsumerGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(icg.ref.Append("name"))
}

func (icg iothubConsumerGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(icg.ref.Append("resource_group_name"))
}

func (icg iothubConsumerGroupAttributes) Timeouts() iothubconsumergroup.TimeoutsAttributes {
	return terra.ReferenceSingle[iothubconsumergroup.TimeoutsAttributes](icg.ref.Append("timeouts"))
}

type iothubConsumerGroupState struct {
	EventhubEndpointName string                             `json:"eventhub_endpoint_name"`
	Id                   string                             `json:"id"`
	IothubName           string                             `json:"iothub_name"`
	Name                 string                             `json:"name"`
	ResourceGroupName    string                             `json:"resource_group_name"`
	Timeouts             *iothubconsumergroup.TimeoutsState `json:"timeouts"`
}
