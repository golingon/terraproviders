// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package apimanagement

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Policy struct {
	// XmlContent: string, optional
	XmlContent terra.StringValue `hcl:"xml_content,attr"`
	// XmlLink: string, optional
	XmlLink terra.StringValue `hcl:"xml_link,attr"`
}

type AdditionalLocation struct {
	// Capacity: number, optional
	Capacity terra.NumberValue `hcl:"capacity,attr"`
	// GatewayDisabled: bool, optional
	GatewayDisabled terra.BoolValue `hcl:"gateway_disabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// PublicIpAddressId: string, optional
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// AdditionalLocationVirtualNetworkConfiguration: optional
	VirtualNetworkConfiguration *AdditionalLocationVirtualNetworkConfiguration `hcl:"virtual_network_configuration,block"`
}

type AdditionalLocationVirtualNetworkConfiguration struct {
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Certificate struct {
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// EncodedCertificate: string, required
	EncodedCertificate terra.StringValue `hcl:"encoded_certificate,attr" validate:"required"`
	// StoreName: string, required
	StoreName terra.StringValue `hcl:"store_name,attr" validate:"required"`
}

type Delegation struct {
	// SubscriptionsEnabled: bool, optional
	SubscriptionsEnabled terra.BoolValue `hcl:"subscriptions_enabled,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// UserRegistrationEnabled: bool, optional
	UserRegistrationEnabled terra.BoolValue `hcl:"user_registration_enabled,attr"`
	// ValidationKey: string, optional
	ValidationKey terra.StringValue `hcl:"validation_key,attr"`
}

type HostnameConfiguration struct {
	// DeveloperPortal: min=0
	DeveloperPortal []DeveloperPortal `hcl:"developer_portal,block" validate:"min=0"`
	// Management: min=0
	Management []Management `hcl:"management,block" validate:"min=0"`
	// Portal: min=0
	Portal []Portal `hcl:"portal,block" validate:"min=0"`
	// Proxy: min=0
	Proxy []Proxy `hcl:"proxy,block" validate:"min=0"`
	// Scm: min=0
	Scm []Scm `hcl:"scm,block" validate:"min=0"`
}

type DeveloperPortal struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// NegotiateClientCertificate: bool, optional
	NegotiateClientCertificate terra.BoolValue `hcl:"negotiate_client_certificate,attr"`
	// SslKeyvaultIdentityClientId: string, optional
	SslKeyvaultIdentityClientId terra.StringValue `hcl:"ssl_keyvault_identity_client_id,attr"`
}

type Management struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// NegotiateClientCertificate: bool, optional
	NegotiateClientCertificate terra.BoolValue `hcl:"negotiate_client_certificate,attr"`
	// SslKeyvaultIdentityClientId: string, optional
	SslKeyvaultIdentityClientId terra.StringValue `hcl:"ssl_keyvault_identity_client_id,attr"`
}

type Portal struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// NegotiateClientCertificate: bool, optional
	NegotiateClientCertificate terra.BoolValue `hcl:"negotiate_client_certificate,attr"`
	// SslKeyvaultIdentityClientId: string, optional
	SslKeyvaultIdentityClientId terra.StringValue `hcl:"ssl_keyvault_identity_client_id,attr"`
}

type Proxy struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// DefaultSslBinding: bool, optional
	DefaultSslBinding terra.BoolValue `hcl:"default_ssl_binding,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// NegotiateClientCertificate: bool, optional
	NegotiateClientCertificate terra.BoolValue `hcl:"negotiate_client_certificate,attr"`
	// SslKeyvaultIdentityClientId: string, optional
	SslKeyvaultIdentityClientId terra.StringValue `hcl:"ssl_keyvault_identity_client_id,attr"`
}

type Scm struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// CertificatePassword: string, optional
	CertificatePassword terra.StringValue `hcl:"certificate_password,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// NegotiateClientCertificate: bool, optional
	NegotiateClientCertificate terra.BoolValue `hcl:"negotiate_client_certificate,attr"`
	// SslKeyvaultIdentityClientId: string, optional
	SslKeyvaultIdentityClientId terra.StringValue `hcl:"ssl_keyvault_identity_client_id,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Protocols struct {
	// EnableHttp2: bool, optional
	EnableHttp2 terra.BoolValue `hcl:"enable_http2,attr"`
}

type Security struct {
	// EnableBackendSsl30: bool, optional
	EnableBackendSsl30 terra.BoolValue `hcl:"enable_backend_ssl30,attr"`
	// EnableBackendTls10: bool, optional
	EnableBackendTls10 terra.BoolValue `hcl:"enable_backend_tls10,attr"`
	// EnableBackendTls11: bool, optional
	EnableBackendTls11 terra.BoolValue `hcl:"enable_backend_tls11,attr"`
	// EnableFrontendSsl30: bool, optional
	EnableFrontendSsl30 terra.BoolValue `hcl:"enable_frontend_ssl30,attr"`
	// EnableFrontendTls10: bool, optional
	EnableFrontendTls10 terra.BoolValue `hcl:"enable_frontend_tls10,attr"`
	// EnableFrontendTls11: bool, optional
	EnableFrontendTls11 terra.BoolValue `hcl:"enable_frontend_tls11,attr"`
	// TlsEcdheEcdsaWithAes128CbcShaCiphersEnabled: bool, optional
	TlsEcdheEcdsaWithAes128CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_ecdhe_ecdsa_with_aes128_cbc_sha_ciphers_enabled,attr"`
	// TlsEcdheEcdsaWithAes256CbcShaCiphersEnabled: bool, optional
	TlsEcdheEcdsaWithAes256CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_ecdhe_ecdsa_with_aes256_cbc_sha_ciphers_enabled,attr"`
	// TlsEcdheRsaWithAes128CbcShaCiphersEnabled: bool, optional
	TlsEcdheRsaWithAes128CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_ecdhe_rsa_with_aes128_cbc_sha_ciphers_enabled,attr"`
	// TlsEcdheRsaWithAes256CbcShaCiphersEnabled: bool, optional
	TlsEcdheRsaWithAes256CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_ecdhe_rsa_with_aes256_cbc_sha_ciphers_enabled,attr"`
	// TlsRsaWithAes128CbcSha256CiphersEnabled: bool, optional
	TlsRsaWithAes128CbcSha256CiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes128_cbc_sha256_ciphers_enabled,attr"`
	// TlsRsaWithAes128CbcShaCiphersEnabled: bool, optional
	TlsRsaWithAes128CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes128_cbc_sha_ciphers_enabled,attr"`
	// TlsRsaWithAes128GcmSha256CiphersEnabled: bool, optional
	TlsRsaWithAes128GcmSha256CiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes128_gcm_sha256_ciphers_enabled,attr"`
	// TlsRsaWithAes256CbcSha256CiphersEnabled: bool, optional
	TlsRsaWithAes256CbcSha256CiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes256_cbc_sha256_ciphers_enabled,attr"`
	// TlsRsaWithAes256CbcShaCiphersEnabled: bool, optional
	TlsRsaWithAes256CbcShaCiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes256_cbc_sha_ciphers_enabled,attr"`
	// TlsRsaWithAes256GcmSha384CiphersEnabled: bool, optional
	TlsRsaWithAes256GcmSha384CiphersEnabled terra.BoolValue `hcl:"tls_rsa_with_aes256_gcm_sha384_ciphers_enabled,attr"`
	// TripleDesCiphersEnabled: bool, optional
	TripleDesCiphersEnabled terra.BoolValue `hcl:"triple_des_ciphers_enabled,attr"`
}

type SignIn struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type SignUp struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// TermsOfService: required
	TermsOfService *TermsOfService `hcl:"terms_of_service,block" validate:"required"`
}

type TermsOfService struct {
	// ConsentRequired: bool, required
	ConsentRequired terra.BoolValue `hcl:"consent_required,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Text: string, optional
	Text terra.StringValue `hcl:"text,attr"`
}

type TenantAccess struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualNetworkConfiguration struct {
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type PolicyAttributes struct {
	ref terra.Reference
}

func (p PolicyAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PolicyAttributes) InternalWithRef(ref terra.Reference) PolicyAttributes {
	return PolicyAttributes{ref: ref}
}

func (p PolicyAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PolicyAttributes) XmlContent() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("xml_content"))
}

func (p PolicyAttributes) XmlLink() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("xml_link"))
}

type AdditionalLocationAttributes struct {
	ref terra.Reference
}

func (al AdditionalLocationAttributes) InternalRef() terra.Reference {
	return al.ref
}

func (al AdditionalLocationAttributes) InternalWithRef(ref terra.Reference) AdditionalLocationAttributes {
	return AdditionalLocationAttributes{ref: ref}
}

func (al AdditionalLocationAttributes) InternalTokens() hclwrite.Tokens {
	return al.ref.InternalTokens()
}

func (al AdditionalLocationAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(al.ref.Append("capacity"))
}

func (al AdditionalLocationAttributes) GatewayDisabled() terra.BoolValue {
	return terra.ReferenceBool(al.ref.Append("gateway_disabled"))
}

func (al AdditionalLocationAttributes) GatewayRegionalUrl() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("gateway_regional_url"))
}

func (al AdditionalLocationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("location"))
}

func (al AdditionalLocationAttributes) PrivateIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](al.ref.Append("private_ip_addresses"))
}

func (al AdditionalLocationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("public_ip_address_id"))
}

func (al AdditionalLocationAttributes) PublicIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](al.ref.Append("public_ip_addresses"))
}

func (al AdditionalLocationAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](al.ref.Append("zones"))
}

func (al AdditionalLocationAttributes) VirtualNetworkConfiguration() terra.ListValue[AdditionalLocationVirtualNetworkConfigurationAttributes] {
	return terra.ReferenceList[AdditionalLocationVirtualNetworkConfigurationAttributes](al.ref.Append("virtual_network_configuration"))
}

type AdditionalLocationVirtualNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (vnc AdditionalLocationVirtualNetworkConfigurationAttributes) InternalRef() terra.Reference {
	return vnc.ref
}

func (vnc AdditionalLocationVirtualNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) AdditionalLocationVirtualNetworkConfigurationAttributes {
	return AdditionalLocationVirtualNetworkConfigurationAttributes{ref: ref}
}

func (vnc AdditionalLocationVirtualNetworkConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return vnc.ref.InternalTokens()
}

func (vnc AdditionalLocationVirtualNetworkConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(vnc.ref.Append("subnet_id"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("certificate_password"))
}

func (c CertificateAttributes) EncodedCertificate() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("encoded_certificate"))
}

func (c CertificateAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("expiry"))
}

func (c CertificateAttributes) StoreName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("store_name"))
}

func (c CertificateAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("subject"))
}

func (c CertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("thumbprint"))
}

type DelegationAttributes struct {
	ref terra.Reference
}

func (d DelegationAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DelegationAttributes) InternalWithRef(ref terra.Reference) DelegationAttributes {
	return DelegationAttributes{ref: ref}
}

func (d DelegationAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DelegationAttributes) SubscriptionsEnabled() terra.BoolValue {
	return terra.ReferenceBool(d.ref.Append("subscriptions_enabled"))
}

func (d DelegationAttributes) Url() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("url"))
}

func (d DelegationAttributes) UserRegistrationEnabled() terra.BoolValue {
	return terra.ReferenceBool(d.ref.Append("user_registration_enabled"))
}

func (d DelegationAttributes) ValidationKey() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("validation_key"))
}

type HostnameConfigurationAttributes struct {
	ref terra.Reference
}

func (hc HostnameConfigurationAttributes) InternalRef() terra.Reference {
	return hc.ref
}

func (hc HostnameConfigurationAttributes) InternalWithRef(ref terra.Reference) HostnameConfigurationAttributes {
	return HostnameConfigurationAttributes{ref: ref}
}

func (hc HostnameConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return hc.ref.InternalTokens()
}

func (hc HostnameConfigurationAttributes) DeveloperPortal() terra.ListValue[DeveloperPortalAttributes] {
	return terra.ReferenceList[DeveloperPortalAttributes](hc.ref.Append("developer_portal"))
}

func (hc HostnameConfigurationAttributes) Management() terra.ListValue[ManagementAttributes] {
	return terra.ReferenceList[ManagementAttributes](hc.ref.Append("management"))
}

func (hc HostnameConfigurationAttributes) Portal() terra.ListValue[PortalAttributes] {
	return terra.ReferenceList[PortalAttributes](hc.ref.Append("portal"))
}

func (hc HostnameConfigurationAttributes) Proxy() terra.ListValue[ProxyAttributes] {
	return terra.ReferenceList[ProxyAttributes](hc.ref.Append("proxy"))
}

func (hc HostnameConfigurationAttributes) Scm() terra.ListValue[ScmAttributes] {
	return terra.ReferenceList[ScmAttributes](hc.ref.Append("scm"))
}

type DeveloperPortalAttributes struct {
	ref terra.Reference
}

func (dp DeveloperPortalAttributes) InternalRef() terra.Reference {
	return dp.ref
}

func (dp DeveloperPortalAttributes) InternalWithRef(ref terra.Reference) DeveloperPortalAttributes {
	return DeveloperPortalAttributes{ref: ref}
}

func (dp DeveloperPortalAttributes) InternalTokens() hclwrite.Tokens {
	return dp.ref.InternalTokens()
}

func (dp DeveloperPortalAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("certificate"))
}

func (dp DeveloperPortalAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("certificate_password"))
}

func (dp DeveloperPortalAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("certificate_source"))
}

func (dp DeveloperPortalAttributes) CertificateStatus() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("certificate_status"))
}

func (dp DeveloperPortalAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("expiry"))
}

func (dp DeveloperPortalAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("host_name"))
}

func (dp DeveloperPortalAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("key_vault_id"))
}

func (dp DeveloperPortalAttributes) NegotiateClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(dp.ref.Append("negotiate_client_certificate"))
}

func (dp DeveloperPortalAttributes) SslKeyvaultIdentityClientId() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("ssl_keyvault_identity_client_id"))
}

func (dp DeveloperPortalAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("subject"))
}

func (dp DeveloperPortalAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("thumbprint"))
}

type ManagementAttributes struct {
	ref terra.Reference
}

func (m ManagementAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m ManagementAttributes) InternalWithRef(ref terra.Reference) ManagementAttributes {
	return ManagementAttributes{ref: ref}
}

func (m ManagementAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m ManagementAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("certificate"))
}

func (m ManagementAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("certificate_password"))
}

func (m ManagementAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("certificate_source"))
}

func (m ManagementAttributes) CertificateStatus() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("certificate_status"))
}

func (m ManagementAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("expiry"))
}

func (m ManagementAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("host_name"))
}

func (m ManagementAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("key_vault_id"))
}

func (m ManagementAttributes) NegotiateClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("negotiate_client_certificate"))
}

func (m ManagementAttributes) SslKeyvaultIdentityClientId() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("ssl_keyvault_identity_client_id"))
}

func (m ManagementAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("subject"))
}

func (m ManagementAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("thumbprint"))
}

type PortalAttributes struct {
	ref terra.Reference
}

func (p PortalAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PortalAttributes) InternalWithRef(ref terra.Reference) PortalAttributes {
	return PortalAttributes{ref: ref}
}

func (p PortalAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PortalAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate"))
}

func (p PortalAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_password"))
}

func (p PortalAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_source"))
}

func (p PortalAttributes) CertificateStatus() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_status"))
}

func (p PortalAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("expiry"))
}

func (p PortalAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("host_name"))
}

func (p PortalAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("key_vault_id"))
}

func (p PortalAttributes) NegotiateClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("negotiate_client_certificate"))
}

func (p PortalAttributes) SslKeyvaultIdentityClientId() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("ssl_keyvault_identity_client_id"))
}

func (p PortalAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("subject"))
}

func (p PortalAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("thumbprint"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate"))
}

func (p ProxyAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_password"))
}

func (p ProxyAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_source"))
}

func (p ProxyAttributes) CertificateStatus() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("certificate_status"))
}

func (p ProxyAttributes) DefaultSslBinding() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("default_ssl_binding"))
}

func (p ProxyAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("expiry"))
}

func (p ProxyAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("host_name"))
}

func (p ProxyAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("key_vault_id"))
}

func (p ProxyAttributes) NegotiateClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("negotiate_client_certificate"))
}

func (p ProxyAttributes) SslKeyvaultIdentityClientId() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("ssl_keyvault_identity_client_id"))
}

func (p ProxyAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("subject"))
}

func (p ProxyAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("thumbprint"))
}

type ScmAttributes struct {
	ref terra.Reference
}

func (s ScmAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScmAttributes) InternalWithRef(ref terra.Reference) ScmAttributes {
	return ScmAttributes{ref: ref}
}

func (s ScmAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScmAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("certificate"))
}

func (s ScmAttributes) CertificatePassword() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("certificate_password"))
}

func (s ScmAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("certificate_source"))
}

func (s ScmAttributes) CertificateStatus() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("certificate_status"))
}

func (s ScmAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("expiry"))
}

func (s ScmAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("host_name"))
}

func (s ScmAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("key_vault_id"))
}

func (s ScmAttributes) NegotiateClientCertificate() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("negotiate_client_certificate"))
}

func (s ScmAttributes) SslKeyvaultIdentityClientId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("ssl_keyvault_identity_client_id"))
}

func (s ScmAttributes) Subject() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("subject"))
}

func (s ScmAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("thumbprint"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type ProtocolsAttributes struct {
	ref terra.Reference
}

func (p ProtocolsAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p ProtocolsAttributes) InternalWithRef(ref terra.Reference) ProtocolsAttributes {
	return ProtocolsAttributes{ref: ref}
}

func (p ProtocolsAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ProtocolsAttributes) EnableHttp2() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("enable_http2"))
}

type SecurityAttributes struct {
	ref terra.Reference
}

func (s SecurityAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecurityAttributes) InternalWithRef(ref terra.Reference) SecurityAttributes {
	return SecurityAttributes{ref: ref}
}

func (s SecurityAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecurityAttributes) EnableBackendSsl30() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_backend_ssl30"))
}

func (s SecurityAttributes) EnableBackendTls10() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_backend_tls10"))
}

func (s SecurityAttributes) EnableBackendTls11() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_backend_tls11"))
}

func (s SecurityAttributes) EnableFrontendSsl30() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_frontend_ssl30"))
}

func (s SecurityAttributes) EnableFrontendTls10() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_frontend_tls10"))
}

func (s SecurityAttributes) EnableFrontendTls11() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enable_frontend_tls11"))
}

func (s SecurityAttributes) TlsEcdheEcdsaWithAes128CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_ecdhe_ecdsa_with_aes128_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsEcdheEcdsaWithAes256CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_ecdhe_ecdsa_with_aes256_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsEcdheRsaWithAes128CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_ecdhe_rsa_with_aes128_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsEcdheRsaWithAes256CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_ecdhe_rsa_with_aes256_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes128CbcSha256CiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes128_cbc_sha256_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes128CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes128_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes128GcmSha256CiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes128_gcm_sha256_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes256CbcSha256CiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes256_cbc_sha256_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes256CbcShaCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes256_cbc_sha_ciphers_enabled"))
}

func (s SecurityAttributes) TlsRsaWithAes256GcmSha384CiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("tls_rsa_with_aes256_gcm_sha384_ciphers_enabled"))
}

func (s SecurityAttributes) TripleDesCiphersEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("triple_des_ciphers_enabled"))
}

type SignInAttributes struct {
	ref terra.Reference
}

func (si SignInAttributes) InternalRef() terra.Reference {
	return si.ref
}

func (si SignInAttributes) InternalWithRef(ref terra.Reference) SignInAttributes {
	return SignInAttributes{ref: ref}
}

func (si SignInAttributes) InternalTokens() hclwrite.Tokens {
	return si.ref.InternalTokens()
}

func (si SignInAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(si.ref.Append("enabled"))
}

type SignUpAttributes struct {
	ref terra.Reference
}

func (su SignUpAttributes) InternalRef() terra.Reference {
	return su.ref
}

func (su SignUpAttributes) InternalWithRef(ref terra.Reference) SignUpAttributes {
	return SignUpAttributes{ref: ref}
}

func (su SignUpAttributes) InternalTokens() hclwrite.Tokens {
	return su.ref.InternalTokens()
}

func (su SignUpAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(su.ref.Append("enabled"))
}

func (su SignUpAttributes) TermsOfService() terra.ListValue[TermsOfServiceAttributes] {
	return terra.ReferenceList[TermsOfServiceAttributes](su.ref.Append("terms_of_service"))
}

type TermsOfServiceAttributes struct {
	ref terra.Reference
}

func (tos TermsOfServiceAttributes) InternalRef() terra.Reference {
	return tos.ref
}

func (tos TermsOfServiceAttributes) InternalWithRef(ref terra.Reference) TermsOfServiceAttributes {
	return TermsOfServiceAttributes{ref: ref}
}

func (tos TermsOfServiceAttributes) InternalTokens() hclwrite.Tokens {
	return tos.ref.InternalTokens()
}

func (tos TermsOfServiceAttributes) ConsentRequired() terra.BoolValue {
	return terra.ReferenceBool(tos.ref.Append("consent_required"))
}

func (tos TermsOfServiceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(tos.ref.Append("enabled"))
}

func (tos TermsOfServiceAttributes) Text() terra.StringValue {
	return terra.ReferenceString(tos.ref.Append("text"))
}

type TenantAccessAttributes struct {
	ref terra.Reference
}

func (ta TenantAccessAttributes) InternalRef() terra.Reference {
	return ta.ref
}

func (ta TenantAccessAttributes) InternalWithRef(ref terra.Reference) TenantAccessAttributes {
	return TenantAccessAttributes{ref: ref}
}

func (ta TenantAccessAttributes) InternalTokens() hclwrite.Tokens {
	return ta.ref.InternalTokens()
}

func (ta TenantAccessAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ta.ref.Append("enabled"))
}

func (ta TenantAccessAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(ta.ref.Append("primary_key"))
}

func (ta TenantAccessAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(ta.ref.Append("secondary_key"))
}

func (ta TenantAccessAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(ta.ref.Append("tenant_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type VirtualNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (vnc VirtualNetworkConfigurationAttributes) InternalRef() terra.Reference {
	return vnc.ref
}

func (vnc VirtualNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) VirtualNetworkConfigurationAttributes {
	return VirtualNetworkConfigurationAttributes{ref: ref}
}

func (vnc VirtualNetworkConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return vnc.ref.InternalTokens()
}

func (vnc VirtualNetworkConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(vnc.ref.Append("subnet_id"))
}

type PolicyState struct {
	XmlContent string `json:"xml_content"`
	XmlLink    string `json:"xml_link"`
}

type AdditionalLocationState struct {
	Capacity                    float64                                              `json:"capacity"`
	GatewayDisabled             bool                                                 `json:"gateway_disabled"`
	GatewayRegionalUrl          string                                               `json:"gateway_regional_url"`
	Location                    string                                               `json:"location"`
	PrivateIpAddresses          []string                                             `json:"private_ip_addresses"`
	PublicIpAddressId           string                                               `json:"public_ip_address_id"`
	PublicIpAddresses           []string                                             `json:"public_ip_addresses"`
	Zones                       []string                                             `json:"zones"`
	VirtualNetworkConfiguration []AdditionalLocationVirtualNetworkConfigurationState `json:"virtual_network_configuration"`
}

type AdditionalLocationVirtualNetworkConfigurationState struct {
	SubnetId string `json:"subnet_id"`
}

type CertificateState struct {
	CertificatePassword string `json:"certificate_password"`
	EncodedCertificate  string `json:"encoded_certificate"`
	Expiry              string `json:"expiry"`
	StoreName           string `json:"store_name"`
	Subject             string `json:"subject"`
	Thumbprint          string `json:"thumbprint"`
}

type DelegationState struct {
	SubscriptionsEnabled    bool   `json:"subscriptions_enabled"`
	Url                     string `json:"url"`
	UserRegistrationEnabled bool   `json:"user_registration_enabled"`
	ValidationKey           string `json:"validation_key"`
}

type HostnameConfigurationState struct {
	DeveloperPortal []DeveloperPortalState `json:"developer_portal"`
	Management      []ManagementState      `json:"management"`
	Portal          []PortalState          `json:"portal"`
	Proxy           []ProxyState           `json:"proxy"`
	Scm             []ScmState             `json:"scm"`
}

type DeveloperPortalState struct {
	Certificate                 string `json:"certificate"`
	CertificatePassword         string `json:"certificate_password"`
	CertificateSource           string `json:"certificate_source"`
	CertificateStatus           string `json:"certificate_status"`
	Expiry                      string `json:"expiry"`
	HostName                    string `json:"host_name"`
	KeyVaultId                  string `json:"key_vault_id"`
	NegotiateClientCertificate  bool   `json:"negotiate_client_certificate"`
	SslKeyvaultIdentityClientId string `json:"ssl_keyvault_identity_client_id"`
	Subject                     string `json:"subject"`
	Thumbprint                  string `json:"thumbprint"`
}

type ManagementState struct {
	Certificate                 string `json:"certificate"`
	CertificatePassword         string `json:"certificate_password"`
	CertificateSource           string `json:"certificate_source"`
	CertificateStatus           string `json:"certificate_status"`
	Expiry                      string `json:"expiry"`
	HostName                    string `json:"host_name"`
	KeyVaultId                  string `json:"key_vault_id"`
	NegotiateClientCertificate  bool   `json:"negotiate_client_certificate"`
	SslKeyvaultIdentityClientId string `json:"ssl_keyvault_identity_client_id"`
	Subject                     string `json:"subject"`
	Thumbprint                  string `json:"thumbprint"`
}

type PortalState struct {
	Certificate                 string `json:"certificate"`
	CertificatePassword         string `json:"certificate_password"`
	CertificateSource           string `json:"certificate_source"`
	CertificateStatus           string `json:"certificate_status"`
	Expiry                      string `json:"expiry"`
	HostName                    string `json:"host_name"`
	KeyVaultId                  string `json:"key_vault_id"`
	NegotiateClientCertificate  bool   `json:"negotiate_client_certificate"`
	SslKeyvaultIdentityClientId string `json:"ssl_keyvault_identity_client_id"`
	Subject                     string `json:"subject"`
	Thumbprint                  string `json:"thumbprint"`
}

type ProxyState struct {
	Certificate                 string `json:"certificate"`
	CertificatePassword         string `json:"certificate_password"`
	CertificateSource           string `json:"certificate_source"`
	CertificateStatus           string `json:"certificate_status"`
	DefaultSslBinding           bool   `json:"default_ssl_binding"`
	Expiry                      string `json:"expiry"`
	HostName                    string `json:"host_name"`
	KeyVaultId                  string `json:"key_vault_id"`
	NegotiateClientCertificate  bool   `json:"negotiate_client_certificate"`
	SslKeyvaultIdentityClientId string `json:"ssl_keyvault_identity_client_id"`
	Subject                     string `json:"subject"`
	Thumbprint                  string `json:"thumbprint"`
}

type ScmState struct {
	Certificate                 string `json:"certificate"`
	CertificatePassword         string `json:"certificate_password"`
	CertificateSource           string `json:"certificate_source"`
	CertificateStatus           string `json:"certificate_status"`
	Expiry                      string `json:"expiry"`
	HostName                    string `json:"host_name"`
	KeyVaultId                  string `json:"key_vault_id"`
	NegotiateClientCertificate  bool   `json:"negotiate_client_certificate"`
	SslKeyvaultIdentityClientId string `json:"ssl_keyvault_identity_client_id"`
	Subject                     string `json:"subject"`
	Thumbprint                  string `json:"thumbprint"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type ProtocolsState struct {
	EnableHttp2 bool `json:"enable_http2"`
}

type SecurityState struct {
	EnableBackendSsl30                          bool `json:"enable_backend_ssl30"`
	EnableBackendTls10                          bool `json:"enable_backend_tls10"`
	EnableBackendTls11                          bool `json:"enable_backend_tls11"`
	EnableFrontendSsl30                         bool `json:"enable_frontend_ssl30"`
	EnableFrontendTls10                         bool `json:"enable_frontend_tls10"`
	EnableFrontendTls11                         bool `json:"enable_frontend_tls11"`
	TlsEcdheEcdsaWithAes128CbcShaCiphersEnabled bool `json:"tls_ecdhe_ecdsa_with_aes128_cbc_sha_ciphers_enabled"`
	TlsEcdheEcdsaWithAes256CbcShaCiphersEnabled bool `json:"tls_ecdhe_ecdsa_with_aes256_cbc_sha_ciphers_enabled"`
	TlsEcdheRsaWithAes128CbcShaCiphersEnabled   bool `json:"tls_ecdhe_rsa_with_aes128_cbc_sha_ciphers_enabled"`
	TlsEcdheRsaWithAes256CbcShaCiphersEnabled   bool `json:"tls_ecdhe_rsa_with_aes256_cbc_sha_ciphers_enabled"`
	TlsRsaWithAes128CbcSha256CiphersEnabled     bool `json:"tls_rsa_with_aes128_cbc_sha256_ciphers_enabled"`
	TlsRsaWithAes128CbcShaCiphersEnabled        bool `json:"tls_rsa_with_aes128_cbc_sha_ciphers_enabled"`
	TlsRsaWithAes128GcmSha256CiphersEnabled     bool `json:"tls_rsa_with_aes128_gcm_sha256_ciphers_enabled"`
	TlsRsaWithAes256CbcSha256CiphersEnabled     bool `json:"tls_rsa_with_aes256_cbc_sha256_ciphers_enabled"`
	TlsRsaWithAes256CbcShaCiphersEnabled        bool `json:"tls_rsa_with_aes256_cbc_sha_ciphers_enabled"`
	TlsRsaWithAes256GcmSha384CiphersEnabled     bool `json:"tls_rsa_with_aes256_gcm_sha384_ciphers_enabled"`
	TripleDesCiphersEnabled                     bool `json:"triple_des_ciphers_enabled"`
}

type SignInState struct {
	Enabled bool `json:"enabled"`
}

type SignUpState struct {
	Enabled        bool                  `json:"enabled"`
	TermsOfService []TermsOfServiceState `json:"terms_of_service"`
}

type TermsOfServiceState struct {
	ConsentRequired bool   `json:"consent_required"`
	Enabled         bool   `json:"enabled"`
	Text            string `json:"text"`
}

type TenantAccessState struct {
	Enabled      bool   `json:"enabled"`
	PrimaryKey   string `json:"primary_key"`
	SecondaryKey string `json:"secondary_key"`
	TenantId     string `json:"tenant_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VirtualNetworkConfigurationState struct {
	SubnetId string `json:"subnet_id"`
}
