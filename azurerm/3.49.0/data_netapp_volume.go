// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datanetappvolume "github.com/golingon/terraproviders/azurerm/3.49.0/datanetappvolume"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataNetappVolume(name string, args DataNetappVolumeArgs) *DataNetappVolume {
	return &DataNetappVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNetappVolume)(nil)

type DataNetappVolume struct {
	Name string
	Args DataNetappVolumeArgs
}

func (nv *DataNetappVolume) DataSource() string {
	return "azurerm_netapp_volume"
}

func (nv *DataNetappVolume) LocalName() string {
	return nv.Name
}

func (nv *DataNetappVolume) Configuration() interface{} {
	return nv.Args
}

func (nv *DataNetappVolume) Attributes() dataNetappVolumeAttributes {
	return dataNetappVolumeAttributes{ref: terra.ReferenceDataResource(nv)}
}

type DataNetappVolumeArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// DataProtectionReplication: min=0
	DataProtectionReplication []datanetappvolume.DataProtectionReplication `hcl:"data_protection_replication,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datanetappvolume.Timeouts `hcl:"timeouts,block"`
}
type dataNetappVolumeAttributes struct {
	ref terra.Reference
}

func (nv dataNetappVolumeAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("account_name"))
}

func (nv dataNetappVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("id"))
}

func (nv dataNetappVolumeAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("location"))
}

func (nv dataNetappVolumeAttributes) MountIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nv.ref.Append("mount_ip_addresses"))
}

func (nv dataNetappVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("name"))
}

func (nv dataNetappVolumeAttributes) NetworkFeatures() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("network_features"))
}

func (nv dataNetappVolumeAttributes) PoolName() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("pool_name"))
}

func (nv dataNetappVolumeAttributes) Protocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nv.ref.Append("protocols"))
}

func (nv dataNetappVolumeAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("resource_group_name"))
}

func (nv dataNetappVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("security_style"))
}

func (nv dataNetappVolumeAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("service_level"))
}

func (nv dataNetappVolumeAttributes) StorageQuotaInGb() terra.NumberValue {
	return terra.ReferenceNumber(nv.ref.Append("storage_quota_in_gb"))
}

func (nv dataNetappVolumeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("subnet_id"))
}

func (nv dataNetappVolumeAttributes) VolumePath() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("volume_path"))
}

func (nv dataNetappVolumeAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(nv.ref.Append("zone"))
}

func (nv dataNetappVolumeAttributes) DataProtectionReplication() terra.ListValue[datanetappvolume.DataProtectionReplicationAttributes] {
	return terra.ReferenceList[datanetappvolume.DataProtectionReplicationAttributes](nv.ref.Append("data_protection_replication"))
}

func (nv dataNetappVolumeAttributes) Timeouts() datanetappvolume.TimeoutsAttributes {
	return terra.ReferenceSingle[datanetappvolume.TimeoutsAttributes](nv.ref.Append("timeouts"))
}
