// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementnotificationrecipientuser "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementnotificationrecipientuser"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementNotificationRecipientUser(name string, args ApiManagementNotificationRecipientUserArgs) *ApiManagementNotificationRecipientUser {
	return &ApiManagementNotificationRecipientUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementNotificationRecipientUser)(nil)

type ApiManagementNotificationRecipientUser struct {
	Name  string
	Args  ApiManagementNotificationRecipientUserArgs
	state *apiManagementNotificationRecipientUserState
}

func (amnru *ApiManagementNotificationRecipientUser) Type() string {
	return "azurerm_api_management_notification_recipient_user"
}

func (amnru *ApiManagementNotificationRecipientUser) LocalName() string {
	return amnru.Name
}

func (amnru *ApiManagementNotificationRecipientUser) Configuration() interface{} {
	return amnru.Args
}

func (amnru *ApiManagementNotificationRecipientUser) Attributes() apiManagementNotificationRecipientUserAttributes {
	return apiManagementNotificationRecipientUserAttributes{ref: terra.ReferenceResource(amnru)}
}

func (amnru *ApiManagementNotificationRecipientUser) ImportState(av io.Reader) error {
	amnru.state = &apiManagementNotificationRecipientUserState{}
	if err := json.NewDecoder(av).Decode(amnru.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amnru.Type(), amnru.LocalName(), err)
	}
	return nil
}

func (amnru *ApiManagementNotificationRecipientUser) State() (*apiManagementNotificationRecipientUserState, bool) {
	return amnru.state, amnru.state != nil
}

func (amnru *ApiManagementNotificationRecipientUser) StateMust() *apiManagementNotificationRecipientUserState {
	if amnru.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amnru.Type(), amnru.LocalName()))
	}
	return amnru.state
}

func (amnru *ApiManagementNotificationRecipientUser) DependOn() terra.Reference {
	return terra.ReferenceResource(amnru)
}

type ApiManagementNotificationRecipientUserArgs struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationType: string, required
	NotificationType terra.StringValue `hcl:"notification_type,attr" validate:"required"`
	// UserId: string, required
	UserId terra.StringValue `hcl:"user_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apimanagementnotificationrecipientuser.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementNotificationRecipientUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementNotificationRecipientUserAttributes struct {
	ref terra.Reference
}

func (amnru apiManagementNotificationRecipientUserAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceString(amnru.ref.Append("api_management_id"))
}

func (amnru apiManagementNotificationRecipientUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amnru.ref.Append("id"))
}

func (amnru apiManagementNotificationRecipientUserAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceString(amnru.ref.Append("notification_type"))
}

func (amnru apiManagementNotificationRecipientUserAttributes) UserId() terra.StringValue {
	return terra.ReferenceString(amnru.ref.Append("user_id"))
}

func (amnru apiManagementNotificationRecipientUserAttributes) Timeouts() apimanagementnotificationrecipientuser.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementnotificationrecipientuser.TimeoutsAttributes](amnru.ref.Append("timeouts"))
}

type apiManagementNotificationRecipientUserState struct {
	ApiManagementId  string                                                `json:"api_management_id"`
	Id               string                                                `json:"id"`
	NotificationType string                                                `json:"notification_type"`
	UserId           string                                                `json:"user_id"`
	Timeouts         *apimanagementnotificationrecipientuser.TimeoutsState `json:"timeouts"`
}
