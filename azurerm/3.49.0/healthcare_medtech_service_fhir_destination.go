// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	healthcaremedtechservicefhirdestination "github.com/golingon/terraproviders/azurerm/3.49.0/healthcaremedtechservicefhirdestination"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareMedtechServiceFhirDestination(name string, args HealthcareMedtechServiceFhirDestinationArgs) *HealthcareMedtechServiceFhirDestination {
	return &HealthcareMedtechServiceFhirDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareMedtechServiceFhirDestination)(nil)

type HealthcareMedtechServiceFhirDestination struct {
	Name  string
	Args  HealthcareMedtechServiceFhirDestinationArgs
	state *healthcareMedtechServiceFhirDestinationState
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) Type() string {
	return "azurerm_healthcare_medtech_service_fhir_destination"
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) LocalName() string {
	return hmsfd.Name
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) Configuration() interface{} {
	return hmsfd.Args
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) Attributes() healthcareMedtechServiceFhirDestinationAttributes {
	return healthcareMedtechServiceFhirDestinationAttributes{ref: terra.ReferenceResource(hmsfd)}
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) ImportState(av io.Reader) error {
	hmsfd.state = &healthcareMedtechServiceFhirDestinationState{}
	if err := json.NewDecoder(av).Decode(hmsfd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hmsfd.Type(), hmsfd.LocalName(), err)
	}
	return nil
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) State() (*healthcareMedtechServiceFhirDestinationState, bool) {
	return hmsfd.state, hmsfd.state != nil
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) StateMust() *healthcareMedtechServiceFhirDestinationState {
	if hmsfd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hmsfd.Type(), hmsfd.LocalName()))
	}
	return hmsfd.state
}

func (hmsfd *HealthcareMedtechServiceFhirDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(hmsfd)
}

type HealthcareMedtechServiceFhirDestinationArgs struct {
	// DestinationFhirMappingJson: string, required
	DestinationFhirMappingJson terra.StringValue `hcl:"destination_fhir_mapping_json,attr" validate:"required"`
	// DestinationFhirServiceId: string, required
	DestinationFhirServiceId terra.StringValue `hcl:"destination_fhir_service_id,attr" validate:"required"`
	// DestinationIdentityResolutionType: string, required
	DestinationIdentityResolutionType terra.StringValue `hcl:"destination_identity_resolution_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MedtechServiceId: string, required
	MedtechServiceId terra.StringValue `hcl:"medtech_service_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *healthcaremedtechservicefhirdestination.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareMedtechServiceFhirDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareMedtechServiceFhirDestinationAttributes struct {
	ref terra.Reference
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) DestinationFhirMappingJson() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("destination_fhir_mapping_json"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) DestinationFhirServiceId() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("destination_fhir_service_id"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) DestinationIdentityResolutionType() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("destination_identity_resolution_type"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("id"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("location"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) MedtechServiceId() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("medtech_service_id"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hmsfd.ref.Append("name"))
}

func (hmsfd healthcareMedtechServiceFhirDestinationAttributes) Timeouts() healthcaremedtechservicefhirdestination.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcaremedtechservicefhirdestination.TimeoutsAttributes](hmsfd.ref.Append("timeouts"))
}

type healthcareMedtechServiceFhirDestinationState struct {
	DestinationFhirMappingJson        string                                                 `json:"destination_fhir_mapping_json"`
	DestinationFhirServiceId          string                                                 `json:"destination_fhir_service_id"`
	DestinationIdentityResolutionType string                                                 `json:"destination_identity_resolution_type"`
	Id                                string                                                 `json:"id"`
	Location                          string                                                 `json:"location"`
	MedtechServiceId                  string                                                 `json:"medtech_service_id"`
	Name                              string                                                 `json:"name"`
	Timeouts                          *healthcaremedtechservicefhirdestination.TimeoutsState `json:"timeouts"`
}
