// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iottimeseriesinsightseventsourceeventhub "github.com/golingon/terraproviders/azurerm/3.49.0/iottimeseriesinsightseventsourceeventhub"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotTimeSeriesInsightsEventSourceEventhub(name string, args IotTimeSeriesInsightsEventSourceEventhubArgs) *IotTimeSeriesInsightsEventSourceEventhub {
	return &IotTimeSeriesInsightsEventSourceEventhub{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotTimeSeriesInsightsEventSourceEventhub)(nil)

type IotTimeSeriesInsightsEventSourceEventhub struct {
	Name  string
	Args  IotTimeSeriesInsightsEventSourceEventhubArgs
	state *iotTimeSeriesInsightsEventSourceEventhubState
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) Type() string {
	return "azurerm_iot_time_series_insights_event_source_eventhub"
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) LocalName() string {
	return itsiese.Name
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) Configuration() interface{} {
	return itsiese.Args
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) Attributes() iotTimeSeriesInsightsEventSourceEventhubAttributes {
	return iotTimeSeriesInsightsEventSourceEventhubAttributes{ref: terra.ReferenceResource(itsiese)}
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) ImportState(av io.Reader) error {
	itsiese.state = &iotTimeSeriesInsightsEventSourceEventhubState{}
	if err := json.NewDecoder(av).Decode(itsiese.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itsiese.Type(), itsiese.LocalName(), err)
	}
	return nil
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) State() (*iotTimeSeriesInsightsEventSourceEventhubState, bool) {
	return itsiese.state, itsiese.state != nil
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) StateMust() *iotTimeSeriesInsightsEventSourceEventhubState {
	if itsiese.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itsiese.Type(), itsiese.LocalName()))
	}
	return itsiese.state
}

func (itsiese *IotTimeSeriesInsightsEventSourceEventhub) DependOn() terra.Reference {
	return terra.ReferenceResource(itsiese)
}

type IotTimeSeriesInsightsEventSourceEventhubArgs struct {
	// ConsumerGroupName: string, required
	ConsumerGroupName terra.StringValue `hcl:"consumer_group_name,attr" validate:"required"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// EventSourceResourceId: string, required
	EventSourceResourceId terra.StringValue `hcl:"event_source_resource_id,attr" validate:"required"`
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// SharedAccessKey: string, required
	SharedAccessKey terra.StringValue `hcl:"shared_access_key,attr" validate:"required"`
	// SharedAccessKeyName: string, required
	SharedAccessKeyName terra.StringValue `hcl:"shared_access_key_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimestampPropertyName: string, optional
	TimestampPropertyName terra.StringValue `hcl:"timestamp_property_name,attr"`
	// Timeouts: optional
	Timeouts *iottimeseriesinsightseventsourceeventhub.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IotTimeSeriesInsightsEventSourceEventhub depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotTimeSeriesInsightsEventSourceEventhubAttributes struct {
	ref terra.Reference
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) ConsumerGroupName() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("consumer_group_name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("environment_id"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) EventSourceResourceId() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("event_source_resource_id"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("eventhub_name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("id"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) Location() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("location"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) Name() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("namespace_name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) SharedAccessKey() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("shared_access_key"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) SharedAccessKeyName() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("shared_access_key_name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](itsiese.ref.Append("tags"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) TimestampPropertyName() terra.StringValue {
	return terra.ReferenceString(itsiese.ref.Append("timestamp_property_name"))
}

func (itsiese iotTimeSeriesInsightsEventSourceEventhubAttributes) Timeouts() iottimeseriesinsightseventsourceeventhub.TimeoutsAttributes {
	return terra.ReferenceSingle[iottimeseriesinsightseventsourceeventhub.TimeoutsAttributes](itsiese.ref.Append("timeouts"))
}

type iotTimeSeriesInsightsEventSourceEventhubState struct {
	ConsumerGroupName     string                                                  `json:"consumer_group_name"`
	EnvironmentId         string                                                  `json:"environment_id"`
	EventSourceResourceId string                                                  `json:"event_source_resource_id"`
	EventhubName          string                                                  `json:"eventhub_name"`
	Id                    string                                                  `json:"id"`
	Location              string                                                  `json:"location"`
	Name                  string                                                  `json:"name"`
	NamespaceName         string                                                  `json:"namespace_name"`
	SharedAccessKey       string                                                  `json:"shared_access_key"`
	SharedAccessKeyName   string                                                  `json:"shared_access_key_name"`
	Tags                  map[string]string                                       `json:"tags"`
	TimestampPropertyName string                                                  `json:"timestamp_property_name"`
	Timeouts              *iottimeseriesinsightseventsourceeventhub.TimeoutsState `json:"timeouts"`
}
