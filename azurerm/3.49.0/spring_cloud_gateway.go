// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudgateway "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudGateway(name string, args SpringCloudGatewayArgs) *SpringCloudGateway {
	return &SpringCloudGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudGateway)(nil)

type SpringCloudGateway struct {
	Name  string
	Args  SpringCloudGatewayArgs
	state *springCloudGatewayState
}

func (scg *SpringCloudGateway) Type() string {
	return "azurerm_spring_cloud_gateway"
}

func (scg *SpringCloudGateway) LocalName() string {
	return scg.Name
}

func (scg *SpringCloudGateway) Configuration() interface{} {
	return scg.Args
}

func (scg *SpringCloudGateway) Attributes() springCloudGatewayAttributes {
	return springCloudGatewayAttributes{ref: terra.ReferenceResource(scg)}
}

func (scg *SpringCloudGateway) ImportState(av io.Reader) error {
	scg.state = &springCloudGatewayState{}
	if err := json.NewDecoder(av).Decode(scg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scg.Type(), scg.LocalName(), err)
	}
	return nil
}

func (scg *SpringCloudGateway) State() (*springCloudGatewayState, bool) {
	return scg.state, scg.state != nil
}

func (scg *SpringCloudGateway) StateMust() *springCloudGatewayState {
	if scg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scg.Type(), scg.LocalName()))
	}
	return scg.state
}

func (scg *SpringCloudGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(scg)
}

type SpringCloudGatewayArgs struct {
	// ApplicationPerformanceMonitoringTypes: list of string, optional
	ApplicationPerformanceMonitoringTypes terra.ListValue[terra.StringValue] `hcl:"application_performance_monitoring_types,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// SensitiveEnvironmentVariables: map of string, optional
	SensitiveEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"sensitive_environment_variables,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// ApiMetadata: optional
	ApiMetadata *springcloudgateway.ApiMetadata `hcl:"api_metadata,block"`
	// Cors: optional
	Cors *springcloudgateway.Cors `hcl:"cors,block"`
	// Quota: optional
	Quota *springcloudgateway.Quota `hcl:"quota,block"`
	// Sso: optional
	Sso *springcloudgateway.Sso `hcl:"sso,block"`
	// Timeouts: optional
	Timeouts *springcloudgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudGatewayAttributes struct {
	ref terra.Reference
}

func (scg springCloudGatewayAttributes) ApplicationPerformanceMonitoringTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](scg.ref.Append("application_performance_monitoring_types"))
}

func (scg springCloudGatewayAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scg.ref.Append("environment_variables"))
}

func (scg springCloudGatewayAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(scg.ref.Append("https_only"))
}

func (scg springCloudGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scg.ref.Append("id"))
}

func (scg springCloudGatewayAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(scg.ref.Append("instance_count"))
}

func (scg springCloudGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scg.ref.Append("name"))
}

func (scg springCloudGatewayAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(scg.ref.Append("public_network_access_enabled"))
}

func (scg springCloudGatewayAttributes) SensitiveEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scg.ref.Append("sensitive_environment_variables"))
}

func (scg springCloudGatewayAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceString(scg.ref.Append("spring_cloud_service_id"))
}

func (scg springCloudGatewayAttributes) Url() terra.StringValue {
	return terra.ReferenceString(scg.ref.Append("url"))
}

func (scg springCloudGatewayAttributes) ApiMetadata() terra.ListValue[springcloudgateway.ApiMetadataAttributes] {
	return terra.ReferenceList[springcloudgateway.ApiMetadataAttributes](scg.ref.Append("api_metadata"))
}

func (scg springCloudGatewayAttributes) Cors() terra.ListValue[springcloudgateway.CorsAttributes] {
	return terra.ReferenceList[springcloudgateway.CorsAttributes](scg.ref.Append("cors"))
}

func (scg springCloudGatewayAttributes) Quota() terra.ListValue[springcloudgateway.QuotaAttributes] {
	return terra.ReferenceList[springcloudgateway.QuotaAttributes](scg.ref.Append("quota"))
}

func (scg springCloudGatewayAttributes) Sso() terra.ListValue[springcloudgateway.SsoAttributes] {
	return terra.ReferenceList[springcloudgateway.SsoAttributes](scg.ref.Append("sso"))
}

func (scg springCloudGatewayAttributes) Timeouts() springcloudgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudgateway.TimeoutsAttributes](scg.ref.Append("timeouts"))
}

type springCloudGatewayState struct {
	ApplicationPerformanceMonitoringTypes []string                              `json:"application_performance_monitoring_types"`
	EnvironmentVariables                  map[string]string                     `json:"environment_variables"`
	HttpsOnly                             bool                                  `json:"https_only"`
	Id                                    string                                `json:"id"`
	InstanceCount                         float64                               `json:"instance_count"`
	Name                                  string                                `json:"name"`
	PublicNetworkAccessEnabled            bool                                  `json:"public_network_access_enabled"`
	SensitiveEnvironmentVariables         map[string]string                     `json:"sensitive_environment_variables"`
	SpringCloudServiceId                  string                                `json:"spring_cloud_service_id"`
	Url                                   string                                `json:"url"`
	ApiMetadata                           []springcloudgateway.ApiMetadataState `json:"api_metadata"`
	Cors                                  []springcloudgateway.CorsState        `json:"cors"`
	Quota                                 []springcloudgateway.QuotaState       `json:"quota"`
	Sso                                   []springcloudgateway.SsoState         `json:"sso"`
	Timeouts                              *springcloudgateway.TimeoutsState     `json:"timeouts"`
}
