// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	streamanalyticsreferenceinputmssql "github.com/golingon/terraproviders/azurerm/3.49.0/streamanalyticsreferenceinputmssql"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStreamAnalyticsReferenceInputMssql(name string, args StreamAnalyticsReferenceInputMssqlArgs) *StreamAnalyticsReferenceInputMssql {
	return &StreamAnalyticsReferenceInputMssql{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StreamAnalyticsReferenceInputMssql)(nil)

type StreamAnalyticsReferenceInputMssql struct {
	Name  string
	Args  StreamAnalyticsReferenceInputMssqlArgs
	state *streamAnalyticsReferenceInputMssqlState
}

func (sarim *StreamAnalyticsReferenceInputMssql) Type() string {
	return "azurerm_stream_analytics_reference_input_mssql"
}

func (sarim *StreamAnalyticsReferenceInputMssql) LocalName() string {
	return sarim.Name
}

func (sarim *StreamAnalyticsReferenceInputMssql) Configuration() interface{} {
	return sarim.Args
}

func (sarim *StreamAnalyticsReferenceInputMssql) Attributes() streamAnalyticsReferenceInputMssqlAttributes {
	return streamAnalyticsReferenceInputMssqlAttributes{ref: terra.ReferenceResource(sarim)}
}

func (sarim *StreamAnalyticsReferenceInputMssql) ImportState(av io.Reader) error {
	sarim.state = &streamAnalyticsReferenceInputMssqlState{}
	if err := json.NewDecoder(av).Decode(sarim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sarim.Type(), sarim.LocalName(), err)
	}
	return nil
}

func (sarim *StreamAnalyticsReferenceInputMssql) State() (*streamAnalyticsReferenceInputMssqlState, bool) {
	return sarim.state, sarim.state != nil
}

func (sarim *StreamAnalyticsReferenceInputMssql) StateMust() *streamAnalyticsReferenceInputMssqlState {
	if sarim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sarim.Type(), sarim.LocalName()))
	}
	return sarim.state
}

func (sarim *StreamAnalyticsReferenceInputMssql) DependOn() terra.Reference {
	return terra.ReferenceResource(sarim)
}

type StreamAnalyticsReferenceInputMssqlArgs struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DeltaSnapshotQuery: string, optional
	DeltaSnapshotQuery terra.StringValue `hcl:"delta_snapshot_query,attr"`
	// FullSnapshotQuery: string, required
	FullSnapshotQuery terra.StringValue `hcl:"full_snapshot_query,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// RefreshIntervalDuration: string, optional
	RefreshIntervalDuration terra.StringValue `hcl:"refresh_interval_duration,attr"`
	// RefreshType: string, required
	RefreshType terra.StringValue `hcl:"refresh_type,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// StreamAnalyticsJobName: string, required
	StreamAnalyticsJobName terra.StringValue `hcl:"stream_analytics_job_name,attr" validate:"required"`
	// Table: string, optional
	Table terra.StringValue `hcl:"table,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *streamanalyticsreferenceinputmssql.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StreamAnalyticsReferenceInputMssql depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type streamAnalyticsReferenceInputMssqlAttributes struct {
	ref terra.Reference
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Database() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("database"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) DeltaSnapshotQuery() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("delta_snapshot_query"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) FullSnapshotQuery() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("full_snapshot_query"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("id"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("name"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Password() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("password"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) RefreshIntervalDuration() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("refresh_interval_duration"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) RefreshType() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("refresh_type"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("resource_group_name"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Server() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("server"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) StreamAnalyticsJobName() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("stream_analytics_job_name"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Table() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("table"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Username() terra.StringValue {
	return terra.ReferenceString(sarim.ref.Append("username"))
}

func (sarim streamAnalyticsReferenceInputMssqlAttributes) Timeouts() streamanalyticsreferenceinputmssql.TimeoutsAttributes {
	return terra.ReferenceSingle[streamanalyticsreferenceinputmssql.TimeoutsAttributes](sarim.ref.Append("timeouts"))
}

type streamAnalyticsReferenceInputMssqlState struct {
	Database                string                                            `json:"database"`
	DeltaSnapshotQuery      string                                            `json:"delta_snapshot_query"`
	FullSnapshotQuery       string                                            `json:"full_snapshot_query"`
	Id                      string                                            `json:"id"`
	Name                    string                                            `json:"name"`
	Password                string                                            `json:"password"`
	RefreshIntervalDuration string                                            `json:"refresh_interval_duration"`
	RefreshType             string                                            `json:"refresh_type"`
	ResourceGroupName       string                                            `json:"resource_group_name"`
	Server                  string                                            `json:"server"`
	StreamAnalyticsJobName  string                                            `json:"stream_analytics_job_name"`
	Table                   string                                            `json:"table"`
	Username                string                                            `json:"username"`
	Timeouts                *streamanalyticsreferenceinputmssql.TimeoutsState `json:"timeouts"`
}
