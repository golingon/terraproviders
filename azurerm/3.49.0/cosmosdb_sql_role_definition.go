// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqlroledefinition "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqlroledefinition"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlRoleDefinition(name string, args CosmosdbSqlRoleDefinitionArgs) *CosmosdbSqlRoleDefinition {
	return &CosmosdbSqlRoleDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlRoleDefinition)(nil)

type CosmosdbSqlRoleDefinition struct {
	Name  string
	Args  CosmosdbSqlRoleDefinitionArgs
	state *cosmosdbSqlRoleDefinitionState
}

func (csrd *CosmosdbSqlRoleDefinition) Type() string {
	return "azurerm_cosmosdb_sql_role_definition"
}

func (csrd *CosmosdbSqlRoleDefinition) LocalName() string {
	return csrd.Name
}

func (csrd *CosmosdbSqlRoleDefinition) Configuration() interface{} {
	return csrd.Args
}

func (csrd *CosmosdbSqlRoleDefinition) Attributes() cosmosdbSqlRoleDefinitionAttributes {
	return cosmosdbSqlRoleDefinitionAttributes{ref: terra.ReferenceResource(csrd)}
}

func (csrd *CosmosdbSqlRoleDefinition) ImportState(av io.Reader) error {
	csrd.state = &cosmosdbSqlRoleDefinitionState{}
	if err := json.NewDecoder(av).Decode(csrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csrd.Type(), csrd.LocalName(), err)
	}
	return nil
}

func (csrd *CosmosdbSqlRoleDefinition) State() (*cosmosdbSqlRoleDefinitionState, bool) {
	return csrd.state, csrd.state != nil
}

func (csrd *CosmosdbSqlRoleDefinition) StateMust() *cosmosdbSqlRoleDefinitionState {
	if csrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csrd.Type(), csrd.LocalName()))
	}
	return csrd.state
}

func (csrd *CosmosdbSqlRoleDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(csrd)
}

type CosmosdbSqlRoleDefinitionArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// AssignableScopes: set of string, required
	AssignableScopes terra.SetValue[terra.StringValue] `hcl:"assignable_scopes,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RoleDefinitionId: string, optional
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Permissions: min=1
	Permissions []cosmosdbsqlroledefinition.Permissions `hcl:"permissions,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *cosmosdbsqlroledefinition.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlRoleDefinition depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlRoleDefinitionAttributes struct {
	ref terra.Reference
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("account_name"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) AssignableScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](csrd.ref.Append("assignable_scopes"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("id"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("name"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("resource_group_name"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("role_definition_id"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) Type() terra.StringValue {
	return terra.ReferenceString(csrd.ref.Append("type"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) Permissions() terra.SetValue[cosmosdbsqlroledefinition.PermissionsAttributes] {
	return terra.ReferenceSet[cosmosdbsqlroledefinition.PermissionsAttributes](csrd.ref.Append("permissions"))
}

func (csrd cosmosdbSqlRoleDefinitionAttributes) Timeouts() cosmosdbsqlroledefinition.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqlroledefinition.TimeoutsAttributes](csrd.ref.Append("timeouts"))
}

type cosmosdbSqlRoleDefinitionState struct {
	AccountName       string                                       `json:"account_name"`
	AssignableScopes  []string                                     `json:"assignable_scopes"`
	Id                string                                       `json:"id"`
	Name              string                                       `json:"name"`
	ResourceGroupName string                                       `json:"resource_group_name"`
	RoleDefinitionId  string                                       `json:"role_definition_id"`
	Type              string                                       `json:"type"`
	Permissions       []cosmosdbsqlroledefinition.PermissionsState `json:"permissions"`
	Timeouts          *cosmosdbsqlroledefinition.TimeoutsState     `json:"timeouts"`
}
