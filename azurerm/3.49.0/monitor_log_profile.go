// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitorlogprofile "github.com/golingon/terraproviders/azurerm/3.49.0/monitorlogprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorLogProfile(name string, args MonitorLogProfileArgs) *MonitorLogProfile {
	return &MonitorLogProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorLogProfile)(nil)

type MonitorLogProfile struct {
	Name  string
	Args  MonitorLogProfileArgs
	state *monitorLogProfileState
}

func (mlp *MonitorLogProfile) Type() string {
	return "azurerm_monitor_log_profile"
}

func (mlp *MonitorLogProfile) LocalName() string {
	return mlp.Name
}

func (mlp *MonitorLogProfile) Configuration() interface{} {
	return mlp.Args
}

func (mlp *MonitorLogProfile) Attributes() monitorLogProfileAttributes {
	return monitorLogProfileAttributes{ref: terra.ReferenceResource(mlp)}
}

func (mlp *MonitorLogProfile) ImportState(av io.Reader) error {
	mlp.state = &monitorLogProfileState{}
	if err := json.NewDecoder(av).Decode(mlp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mlp.Type(), mlp.LocalName(), err)
	}
	return nil
}

func (mlp *MonitorLogProfile) State() (*monitorLogProfileState, bool) {
	return mlp.state, mlp.state != nil
}

func (mlp *MonitorLogProfile) StateMust() *monitorLogProfileState {
	if mlp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mlp.Type(), mlp.LocalName()))
	}
	return mlp.state
}

func (mlp *MonitorLogProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(mlp)
}

type MonitorLogProfileArgs struct {
	// Categories: set of string, required
	Categories terra.SetValue[terra.StringValue] `hcl:"categories,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Locations: set of string, required
	Locations terra.SetValue[terra.StringValue] `hcl:"locations,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServicebusRuleId: string, optional
	ServicebusRuleId terra.StringValue `hcl:"servicebus_rule_id,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// RetentionPolicy: required
	RetentionPolicy *monitorlogprofile.RetentionPolicy `hcl:"retention_policy,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitorlogprofile.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorLogProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorLogProfileAttributes struct {
	ref terra.Reference
}

func (mlp monitorLogProfileAttributes) Categories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](mlp.ref.Append("categories"))
}

func (mlp monitorLogProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mlp.ref.Append("id"))
}

func (mlp monitorLogProfileAttributes) Locations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](mlp.ref.Append("locations"))
}

func (mlp monitorLogProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mlp.ref.Append("name"))
}

func (mlp monitorLogProfileAttributes) ServicebusRuleId() terra.StringValue {
	return terra.ReferenceString(mlp.ref.Append("servicebus_rule_id"))
}

func (mlp monitorLogProfileAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(mlp.ref.Append("storage_account_id"))
}

func (mlp monitorLogProfileAttributes) RetentionPolicy() terra.ListValue[monitorlogprofile.RetentionPolicyAttributes] {
	return terra.ReferenceList[monitorlogprofile.RetentionPolicyAttributes](mlp.ref.Append("retention_policy"))
}

func (mlp monitorLogProfileAttributes) Timeouts() monitorlogprofile.TimeoutsAttributes {
	return terra.ReferenceSingle[monitorlogprofile.TimeoutsAttributes](mlp.ref.Append("timeouts"))
}

type monitorLogProfileState struct {
	Categories       []string                                 `json:"categories"`
	Id               string                                   `json:"id"`
	Locations        []string                                 `json:"locations"`
	Name             string                                   `json:"name"`
	ServicebusRuleId string                                   `json:"servicebus_rule_id"`
	StorageAccountId string                                   `json:"storage_account_id"`
	RetentionPolicy  []monitorlogprofile.RetentionPolicyState `json:"retention_policy"`
	Timeouts         *monitorlogprofile.TimeoutsState         `json:"timeouts"`
}
