// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatelinkservice "github.com/golingon/terraproviders/azurerm/3.49.0/privatelinkservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateLinkService(name string, args PrivateLinkServiceArgs) *PrivateLinkService {
	return &PrivateLinkService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateLinkService)(nil)

type PrivateLinkService struct {
	Name  string
	Args  PrivateLinkServiceArgs
	state *privateLinkServiceState
}

func (pls *PrivateLinkService) Type() string {
	return "azurerm_private_link_service"
}

func (pls *PrivateLinkService) LocalName() string {
	return pls.Name
}

func (pls *PrivateLinkService) Configuration() interface{} {
	return pls.Args
}

func (pls *PrivateLinkService) Attributes() privateLinkServiceAttributes {
	return privateLinkServiceAttributes{ref: terra.ReferenceResource(pls)}
}

func (pls *PrivateLinkService) ImportState(av io.Reader) error {
	pls.state = &privateLinkServiceState{}
	if err := json.NewDecoder(av).Decode(pls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pls.Type(), pls.LocalName(), err)
	}
	return nil
}

func (pls *PrivateLinkService) State() (*privateLinkServiceState, bool) {
	return pls.state, pls.state != nil
}

func (pls *PrivateLinkService) StateMust() *privateLinkServiceState {
	if pls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pls.Type(), pls.LocalName()))
	}
	return pls.state
}

func (pls *PrivateLinkService) DependOn() terra.Reference {
	return terra.ReferenceResource(pls)
}

type PrivateLinkServiceArgs struct {
	// AutoApprovalSubscriptionIds: set of string, optional
	AutoApprovalSubscriptionIds terra.SetValue[terra.StringValue] `hcl:"auto_approval_subscription_ids,attr"`
	// EnableProxyProtocol: bool, optional
	EnableProxyProtocol terra.BoolValue `hcl:"enable_proxy_protocol,attr"`
	// Fqdns: list of string, optional
	Fqdns terra.ListValue[terra.StringValue] `hcl:"fqdns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerFrontendIpConfigurationIds: set of string, required
	LoadBalancerFrontendIpConfigurationIds terra.SetValue[terra.StringValue] `hcl:"load_balancer_frontend_ip_configuration_ids,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VisibilitySubscriptionIds: set of string, optional
	VisibilitySubscriptionIds terra.SetValue[terra.StringValue] `hcl:"visibility_subscription_ids,attr"`
	// NatIpConfiguration: min=1,max=8
	NatIpConfiguration []privatelinkservice.NatIpConfiguration `hcl:"nat_ip_configuration,block" validate:"min=1,max=8"`
	// Timeouts: optional
	Timeouts *privatelinkservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateLinkService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateLinkServiceAttributes struct {
	ref terra.Reference
}

func (pls privateLinkServiceAttributes) Alias() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("alias"))
}

func (pls privateLinkServiceAttributes) AutoApprovalSubscriptionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](pls.ref.Append("auto_approval_subscription_ids"))
}

func (pls privateLinkServiceAttributes) EnableProxyProtocol() terra.BoolValue {
	return terra.ReferenceBool(pls.ref.Append("enable_proxy_protocol"))
}

func (pls privateLinkServiceAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pls.ref.Append("fqdns"))
}

func (pls privateLinkServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("id"))
}

func (pls privateLinkServiceAttributes) LoadBalancerFrontendIpConfigurationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](pls.ref.Append("load_balancer_frontend_ip_configuration_ids"))
}

func (pls privateLinkServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("location"))
}

func (pls privateLinkServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("name"))
}

func (pls privateLinkServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pls.ref.Append("resource_group_name"))
}

func (pls privateLinkServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pls.ref.Append("tags"))
}

func (pls privateLinkServiceAttributes) VisibilitySubscriptionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](pls.ref.Append("visibility_subscription_ids"))
}

func (pls privateLinkServiceAttributes) NatIpConfiguration() terra.ListValue[privatelinkservice.NatIpConfigurationAttributes] {
	return terra.ReferenceList[privatelinkservice.NatIpConfigurationAttributes](pls.ref.Append("nat_ip_configuration"))
}

func (pls privateLinkServiceAttributes) Timeouts() privatelinkservice.TimeoutsAttributes {
	return terra.ReferenceSingle[privatelinkservice.TimeoutsAttributes](pls.ref.Append("timeouts"))
}

type privateLinkServiceState struct {
	Alias                                  string                                       `json:"alias"`
	AutoApprovalSubscriptionIds            []string                                     `json:"auto_approval_subscription_ids"`
	EnableProxyProtocol                    bool                                         `json:"enable_proxy_protocol"`
	Fqdns                                  []string                                     `json:"fqdns"`
	Id                                     string                                       `json:"id"`
	LoadBalancerFrontendIpConfigurationIds []string                                     `json:"load_balancer_frontend_ip_configuration_ids"`
	Location                               string                                       `json:"location"`
	Name                                   string                                       `json:"name"`
	ResourceGroupName                      string                                       `json:"resource_group_name"`
	Tags                                   map[string]string                            `json:"tags"`
	VisibilitySubscriptionIds              []string                                     `json:"visibility_subscription_ids"`
	NatIpConfiguration                     []privatelinkservice.NatIpConfigurationState `json:"nat_ip_configuration"`
	Timeouts                               *privatelinkservice.TimeoutsState            `json:"timeouts"`
}
