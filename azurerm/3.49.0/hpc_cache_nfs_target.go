// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	hpccachenfstarget "github.com/golingon/terraproviders/azurerm/3.49.0/hpccachenfstarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHpcCacheNfsTarget(name string, args HpcCacheNfsTargetArgs) *HpcCacheNfsTarget {
	return &HpcCacheNfsTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HpcCacheNfsTarget)(nil)

type HpcCacheNfsTarget struct {
	Name  string
	Args  HpcCacheNfsTargetArgs
	state *hpcCacheNfsTargetState
}

func (hcnt *HpcCacheNfsTarget) Type() string {
	return "azurerm_hpc_cache_nfs_target"
}

func (hcnt *HpcCacheNfsTarget) LocalName() string {
	return hcnt.Name
}

func (hcnt *HpcCacheNfsTarget) Configuration() interface{} {
	return hcnt.Args
}

func (hcnt *HpcCacheNfsTarget) Attributes() hpcCacheNfsTargetAttributes {
	return hpcCacheNfsTargetAttributes{ref: terra.ReferenceResource(hcnt)}
}

func (hcnt *HpcCacheNfsTarget) ImportState(av io.Reader) error {
	hcnt.state = &hpcCacheNfsTargetState{}
	if err := json.NewDecoder(av).Decode(hcnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcnt.Type(), hcnt.LocalName(), err)
	}
	return nil
}

func (hcnt *HpcCacheNfsTarget) State() (*hpcCacheNfsTargetState, bool) {
	return hcnt.state, hcnt.state != nil
}

func (hcnt *HpcCacheNfsTarget) StateMust() *hpcCacheNfsTargetState {
	if hcnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcnt.Type(), hcnt.LocalName()))
	}
	return hcnt.state
}

func (hcnt *HpcCacheNfsTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(hcnt)
}

type HpcCacheNfsTargetArgs struct {
	// CacheName: string, required
	CacheName terra.StringValue `hcl:"cache_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TargetHostName: string, required
	TargetHostName terra.StringValue `hcl:"target_host_name,attr" validate:"required"`
	// UsageModel: string, required
	UsageModel terra.StringValue `hcl:"usage_model,attr" validate:"required"`
	// NamespaceJunction: min=1,max=10
	NamespaceJunction []hpccachenfstarget.NamespaceJunction `hcl:"namespace_junction,block" validate:"min=1,max=10"`
	// Timeouts: optional
	Timeouts *hpccachenfstarget.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HpcCacheNfsTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type hpcCacheNfsTargetAttributes struct {
	ref terra.Reference
}

func (hcnt hpcCacheNfsTargetAttributes) CacheName() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("cache_name"))
}

func (hcnt hpcCacheNfsTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("id"))
}

func (hcnt hpcCacheNfsTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("name"))
}

func (hcnt hpcCacheNfsTargetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("resource_group_name"))
}

func (hcnt hpcCacheNfsTargetAttributes) TargetHostName() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("target_host_name"))
}

func (hcnt hpcCacheNfsTargetAttributes) UsageModel() terra.StringValue {
	return terra.ReferenceString(hcnt.ref.Append("usage_model"))
}

func (hcnt hpcCacheNfsTargetAttributes) NamespaceJunction() terra.SetValue[hpccachenfstarget.NamespaceJunctionAttributes] {
	return terra.ReferenceSet[hpccachenfstarget.NamespaceJunctionAttributes](hcnt.ref.Append("namespace_junction"))
}

func (hcnt hpcCacheNfsTargetAttributes) Timeouts() hpccachenfstarget.TimeoutsAttributes {
	return terra.ReferenceSingle[hpccachenfstarget.TimeoutsAttributes](hcnt.ref.Append("timeouts"))
}

type hpcCacheNfsTargetState struct {
	CacheName         string                                     `json:"cache_name"`
	Id                string                                     `json:"id"`
	Name              string                                     `json:"name"`
	ResourceGroupName string                                     `json:"resource_group_name"`
	TargetHostName    string                                     `json:"target_host_name"`
	UsageModel        string                                     `json:"usage_model"`
	NamespaceJunction []hpccachenfstarget.NamespaceJunctionState `json:"namespace_junction"`
	Timeouts          *hpccachenfstarget.TimeoutsState           `json:"timeouts"`
}
