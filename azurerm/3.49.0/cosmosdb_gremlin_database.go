// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbgremlindatabase "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbgremlindatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbGremlinDatabase(name string, args CosmosdbGremlinDatabaseArgs) *CosmosdbGremlinDatabase {
	return &CosmosdbGremlinDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbGremlinDatabase)(nil)

type CosmosdbGremlinDatabase struct {
	Name  string
	Args  CosmosdbGremlinDatabaseArgs
	state *cosmosdbGremlinDatabaseState
}

func (cgd *CosmosdbGremlinDatabase) Type() string {
	return "azurerm_cosmosdb_gremlin_database"
}

func (cgd *CosmosdbGremlinDatabase) LocalName() string {
	return cgd.Name
}

func (cgd *CosmosdbGremlinDatabase) Configuration() interface{} {
	return cgd.Args
}

func (cgd *CosmosdbGremlinDatabase) Attributes() cosmosdbGremlinDatabaseAttributes {
	return cosmosdbGremlinDatabaseAttributes{ref: terra.ReferenceResource(cgd)}
}

func (cgd *CosmosdbGremlinDatabase) ImportState(av io.Reader) error {
	cgd.state = &cosmosdbGremlinDatabaseState{}
	if err := json.NewDecoder(av).Decode(cgd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cgd.Type(), cgd.LocalName(), err)
	}
	return nil
}

func (cgd *CosmosdbGremlinDatabase) State() (*cosmosdbGremlinDatabaseState, bool) {
	return cgd.state, cgd.state != nil
}

func (cgd *CosmosdbGremlinDatabase) StateMust() *cosmosdbGremlinDatabaseState {
	if cgd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cgd.Type(), cgd.LocalName()))
	}
	return cgd.state
}

func (cgd *CosmosdbGremlinDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(cgd)
}

type CosmosdbGremlinDatabaseArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbgremlindatabase.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Timeouts: optional
	Timeouts *cosmosdbgremlindatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbGremlinDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbGremlinDatabaseAttributes struct {
	ref terra.Reference
}

func (cgd cosmosdbGremlinDatabaseAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cgd.ref.Append("account_name"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cgd.ref.Append("id"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cgd.ref.Append("name"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cgd.ref.Append("resource_group_name"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(cgd.ref.Append("throughput"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) AutoscaleSettings() terra.ListValue[cosmosdbgremlindatabase.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbgremlindatabase.AutoscaleSettingsAttributes](cgd.ref.Append("autoscale_settings"))
}

func (cgd cosmosdbGremlinDatabaseAttributes) Timeouts() cosmosdbgremlindatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbgremlindatabase.TimeoutsAttributes](cgd.ref.Append("timeouts"))
}

type cosmosdbGremlinDatabaseState struct {
	AccountName       string                                           `json:"account_name"`
	Id                string                                           `json:"id"`
	Name              string                                           `json:"name"`
	ResourceGroupName string                                           `json:"resource_group_name"`
	Throughput        float64                                          `json:"throughput"`
	AutoscaleSettings []cosmosdbgremlindatabase.AutoscaleSettingsState `json:"autoscale_settings"`
	Timeouts          *cosmosdbgremlindatabase.TimeoutsState           `json:"timeouts"`
}
