// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataadvisorrecommendations

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Recommendations struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type RecommendationsAttributes struct {
	ref terra.Reference
}

func (r RecommendationsAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RecommendationsAttributes) InternalWithRef(ref terra.Reference) RecommendationsAttributes {
	return RecommendationsAttributes{ref: ref}
}

func (r RecommendationsAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RecommendationsAttributes) Category() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("category"))
}

func (r RecommendationsAttributes) Description() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("description"))
}

func (r RecommendationsAttributes) Impact() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("impact"))
}

func (r RecommendationsAttributes) RecommendationName() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("recommendation_name"))
}

func (r RecommendationsAttributes) RecommendationTypeId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("recommendation_type_id"))
}

func (r RecommendationsAttributes) ResourceName() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("resource_name"))
}

func (r RecommendationsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("resource_type"))
}

func (r RecommendationsAttributes) SuppressionNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](r.ref.Append("suppression_names"))
}

func (r RecommendationsAttributes) UpdatedTime() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("updated_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type RecommendationsState struct {
	Category             string   `json:"category"`
	Description          string   `json:"description"`
	Impact               string   `json:"impact"`
	RecommendationName   string   `json:"recommendation_name"`
	RecommendationTypeId string   `json:"recommendation_type_id"`
	ResourceName         string   `json:"resource_name"`
	ResourceType         string   `json:"resource_type"`
	SuppressionNames     []string `json:"suppression_names"`
	UpdatedTime          string   `json:"updated_time"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
