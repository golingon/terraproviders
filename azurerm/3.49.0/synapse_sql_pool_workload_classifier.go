// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsesqlpoolworkloadclassifier "github.com/golingon/terraproviders/azurerm/3.49.0/synapsesqlpoolworkloadclassifier"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseSqlPoolWorkloadClassifier(name string, args SynapseSqlPoolWorkloadClassifierArgs) *SynapseSqlPoolWorkloadClassifier {
	return &SynapseSqlPoolWorkloadClassifier{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseSqlPoolWorkloadClassifier)(nil)

type SynapseSqlPoolWorkloadClassifier struct {
	Name  string
	Args  SynapseSqlPoolWorkloadClassifierArgs
	state *synapseSqlPoolWorkloadClassifierState
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) Type() string {
	return "azurerm_synapse_sql_pool_workload_classifier"
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) LocalName() string {
	return sspwc.Name
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) Configuration() interface{} {
	return sspwc.Args
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) Attributes() synapseSqlPoolWorkloadClassifierAttributes {
	return synapseSqlPoolWorkloadClassifierAttributes{ref: terra.ReferenceResource(sspwc)}
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) ImportState(av io.Reader) error {
	sspwc.state = &synapseSqlPoolWorkloadClassifierState{}
	if err := json.NewDecoder(av).Decode(sspwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sspwc.Type(), sspwc.LocalName(), err)
	}
	return nil
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) State() (*synapseSqlPoolWorkloadClassifierState, bool) {
	return sspwc.state, sspwc.state != nil
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) StateMust() *synapseSqlPoolWorkloadClassifierState {
	if sspwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sspwc.Type(), sspwc.LocalName()))
	}
	return sspwc.state
}

func (sspwc *SynapseSqlPoolWorkloadClassifier) DependOn() terra.Reference {
	return terra.ReferenceResource(sspwc)
}

type SynapseSqlPoolWorkloadClassifierArgs struct {
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Importance: string, optional
	Importance terra.StringValue `hcl:"importance,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// MemberName: string, required
	MemberName terra.StringValue `hcl:"member_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// WorkloadGroupId: string, required
	WorkloadGroupId terra.StringValue `hcl:"workload_group_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *synapsesqlpoolworkloadclassifier.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseSqlPoolWorkloadClassifier depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseSqlPoolWorkloadClassifierAttributes struct {
	ref terra.Reference
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Context() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("context"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("end_time"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("id"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Importance() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("importance"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Label() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("label"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) MemberName() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("member_name"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("name"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("start_time"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) WorkloadGroupId() terra.StringValue {
	return terra.ReferenceString(sspwc.ref.Append("workload_group_id"))
}

func (sspwc synapseSqlPoolWorkloadClassifierAttributes) Timeouts() synapsesqlpoolworkloadclassifier.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsesqlpoolworkloadclassifier.TimeoutsAttributes](sspwc.ref.Append("timeouts"))
}

type synapseSqlPoolWorkloadClassifierState struct {
	Context         string                                          `json:"context"`
	EndTime         string                                          `json:"end_time"`
	Id              string                                          `json:"id"`
	Importance      string                                          `json:"importance"`
	Label           string                                          `json:"label"`
	MemberName      string                                          `json:"member_name"`
	Name            string                                          `json:"name"`
	StartTime       string                                          `json:"start_time"`
	WorkloadGroupId string                                          `json:"workload_group_id"`
	Timeouts        *synapsesqlpoolworkloadclassifier.TimeoutsState `json:"timeouts"`
}
