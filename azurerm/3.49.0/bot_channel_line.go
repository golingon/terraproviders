// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	botchannelline "github.com/golingon/terraproviders/azurerm/3.49.0/botchannelline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBotChannelLine(name string, args BotChannelLineArgs) *BotChannelLine {
	return &BotChannelLine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BotChannelLine)(nil)

type BotChannelLine struct {
	Name  string
	Args  BotChannelLineArgs
	state *botChannelLineState
}

func (bcl *BotChannelLine) Type() string {
	return "azurerm_bot_channel_line"
}

func (bcl *BotChannelLine) LocalName() string {
	return bcl.Name
}

func (bcl *BotChannelLine) Configuration() interface{} {
	return bcl.Args
}

func (bcl *BotChannelLine) Attributes() botChannelLineAttributes {
	return botChannelLineAttributes{ref: terra.ReferenceResource(bcl)}
}

func (bcl *BotChannelLine) ImportState(av io.Reader) error {
	bcl.state = &botChannelLineState{}
	if err := json.NewDecoder(av).Decode(bcl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bcl.Type(), bcl.LocalName(), err)
	}
	return nil
}

func (bcl *BotChannelLine) State() (*botChannelLineState, bool) {
	return bcl.state, bcl.state != nil
}

func (bcl *BotChannelLine) StateMust() *botChannelLineState {
	if bcl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bcl.Type(), bcl.LocalName()))
	}
	return bcl.state
}

func (bcl *BotChannelLine) DependOn() terra.Reference {
	return terra.ReferenceResource(bcl)
}

type BotChannelLineArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// LineChannel: min=1
	LineChannel []botchannelline.LineChannel `hcl:"line_channel,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *botchannelline.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BotChannelLine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type botChannelLineAttributes struct {
	ref terra.Reference
}

func (bcl botChannelLineAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(bcl.ref.Append("bot_name"))
}

func (bcl botChannelLineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bcl.ref.Append("id"))
}

func (bcl botChannelLineAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bcl.ref.Append("location"))
}

func (bcl botChannelLineAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bcl.ref.Append("resource_group_name"))
}

func (bcl botChannelLineAttributes) LineChannel() terra.SetValue[botchannelline.LineChannelAttributes] {
	return terra.ReferenceSet[botchannelline.LineChannelAttributes](bcl.ref.Append("line_channel"))
}

func (bcl botChannelLineAttributes) Timeouts() botchannelline.TimeoutsAttributes {
	return terra.ReferenceSingle[botchannelline.TimeoutsAttributes](bcl.ref.Append("timeouts"))
}

type botChannelLineState struct {
	BotName           string                            `json:"bot_name"`
	Id                string                            `json:"id"`
	Location          string                            `json:"location"`
	ResourceGroupName string                            `json:"resource_group_name"`
	LineChannel       []botchannelline.LineChannelState `json:"line_channel"`
	Timeouts          *botchannelline.TimeoutsState     `json:"timeouts"`
}
