// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudapiportal "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudapiportal"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudApiPortal(name string, args SpringCloudApiPortalArgs) *SpringCloudApiPortal {
	return &SpringCloudApiPortal{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudApiPortal)(nil)

type SpringCloudApiPortal struct {
	Name  string
	Args  SpringCloudApiPortalArgs
	state *springCloudApiPortalState
}

func (scap *SpringCloudApiPortal) Type() string {
	return "azurerm_spring_cloud_api_portal"
}

func (scap *SpringCloudApiPortal) LocalName() string {
	return scap.Name
}

func (scap *SpringCloudApiPortal) Configuration() interface{} {
	return scap.Args
}

func (scap *SpringCloudApiPortal) Attributes() springCloudApiPortalAttributes {
	return springCloudApiPortalAttributes{ref: terra.ReferenceResource(scap)}
}

func (scap *SpringCloudApiPortal) ImportState(av io.Reader) error {
	scap.state = &springCloudApiPortalState{}
	if err := json.NewDecoder(av).Decode(scap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scap.Type(), scap.LocalName(), err)
	}
	return nil
}

func (scap *SpringCloudApiPortal) State() (*springCloudApiPortalState, bool) {
	return scap.state, scap.state != nil
}

func (scap *SpringCloudApiPortal) StateMust() *springCloudApiPortalState {
	if scap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scap.Type(), scap.LocalName()))
	}
	return scap.state
}

func (scap *SpringCloudApiPortal) DependOn() terra.Reference {
	return terra.ReferenceResource(scap)
}

type SpringCloudApiPortalArgs struct {
	// GatewayIds: set of string, optional
	GatewayIds terra.SetValue[terra.StringValue] `hcl:"gateway_ids,attr"`
	// HttpsOnlyEnabled: bool, optional
	HttpsOnlyEnabled terra.BoolValue `hcl:"https_only_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Sso: optional
	Sso *springcloudapiportal.Sso `hcl:"sso,block"`
	// Timeouts: optional
	Timeouts *springcloudapiportal.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudApiPortal depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudApiPortalAttributes struct {
	ref terra.Reference
}

func (scap springCloudApiPortalAttributes) GatewayIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](scap.ref.Append("gateway_ids"))
}

func (scap springCloudApiPortalAttributes) HttpsOnlyEnabled() terra.BoolValue {
	return terra.ReferenceBool(scap.ref.Append("https_only_enabled"))
}

func (scap springCloudApiPortalAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("id"))
}

func (scap springCloudApiPortalAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(scap.ref.Append("instance_count"))
}

func (scap springCloudApiPortalAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("name"))
}

func (scap springCloudApiPortalAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(scap.ref.Append("public_network_access_enabled"))
}

func (scap springCloudApiPortalAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("spring_cloud_service_id"))
}

func (scap springCloudApiPortalAttributes) Url() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("url"))
}

func (scap springCloudApiPortalAttributes) Sso() terra.ListValue[springcloudapiportal.SsoAttributes] {
	return terra.ReferenceList[springcloudapiportal.SsoAttributes](scap.ref.Append("sso"))
}

func (scap springCloudApiPortalAttributes) Timeouts() springcloudapiportal.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudapiportal.TimeoutsAttributes](scap.ref.Append("timeouts"))
}

type springCloudApiPortalState struct {
	GatewayIds                 []string                            `json:"gateway_ids"`
	HttpsOnlyEnabled           bool                                `json:"https_only_enabled"`
	Id                         string                              `json:"id"`
	InstanceCount              float64                             `json:"instance_count"`
	Name                       string                              `json:"name"`
	PublicNetworkAccessEnabled bool                                `json:"public_network_access_enabled"`
	SpringCloudServiceId       string                              `json:"spring_cloud_service_id"`
	Url                        string                              `json:"url"`
	Sso                        []springcloudapiportal.SsoState     `json:"sso"`
	Timeouts                   *springcloudapiportal.TimeoutsState `json:"timeouts"`
}
