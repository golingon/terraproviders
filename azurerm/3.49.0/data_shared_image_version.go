// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datasharedimageversion "github.com/golingon/terraproviders/azurerm/3.49.0/datasharedimageversion"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataSharedImageVersion(name string, args DataSharedImageVersionArgs) *DataSharedImageVersion {
	return &DataSharedImageVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataSharedImageVersion)(nil)

type DataSharedImageVersion struct {
	Name string
	Args DataSharedImageVersionArgs
}

func (siv *DataSharedImageVersion) DataSource() string {
	return "azurerm_shared_image_version"
}

func (siv *DataSharedImageVersion) LocalName() string {
	return siv.Name
}

func (siv *DataSharedImageVersion) Configuration() interface{} {
	return siv.Args
}

func (siv *DataSharedImageVersion) Attributes() dataSharedImageVersionAttributes {
	return dataSharedImageVersionAttributes{ref: terra.ReferenceDataResource(siv)}
}

type DataSharedImageVersionArgs struct {
	// GalleryName: string, required
	GalleryName terra.StringValue `hcl:"gallery_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SortVersionsBySemver: bool, optional
	SortVersionsBySemver terra.BoolValue `hcl:"sort_versions_by_semver,attr"`
	// TargetRegion: min=0
	TargetRegion []datasharedimageversion.TargetRegion `hcl:"target_region,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datasharedimageversion.Timeouts `hcl:"timeouts,block"`
}
type dataSharedImageVersionAttributes struct {
	ref terra.Reference
}

func (siv dataSharedImageVersionAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceBool(siv.ref.Append("exclude_from_latest"))
}

func (siv dataSharedImageVersionAttributes) GalleryName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("gallery_name"))
}

func (siv dataSharedImageVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("id"))
}

func (siv dataSharedImageVersionAttributes) ImageName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("image_name"))
}

func (siv dataSharedImageVersionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("location"))
}

func (siv dataSharedImageVersionAttributes) ManagedImageId() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("managed_image_id"))
}

func (siv dataSharedImageVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("name"))
}

func (siv dataSharedImageVersionAttributes) OsDiskImageSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(siv.ref.Append("os_disk_image_size_gb"))
}

func (siv dataSharedImageVersionAttributes) OsDiskSnapshotId() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("os_disk_snapshot_id"))
}

func (siv dataSharedImageVersionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("resource_group_name"))
}

func (siv dataSharedImageVersionAttributes) SortVersionsBySemver() terra.BoolValue {
	return terra.ReferenceBool(siv.ref.Append("sort_versions_by_semver"))
}

func (siv dataSharedImageVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](siv.ref.Append("tags"))
}

func (siv dataSharedImageVersionAttributes) TargetRegion() terra.ListValue[datasharedimageversion.TargetRegionAttributes] {
	return terra.ReferenceList[datasharedimageversion.TargetRegionAttributes](siv.ref.Append("target_region"))
}

func (siv dataSharedImageVersionAttributes) Timeouts() datasharedimageversion.TimeoutsAttributes {
	return terra.ReferenceSingle[datasharedimageversion.TimeoutsAttributes](siv.ref.Append("timeouts"))
}
