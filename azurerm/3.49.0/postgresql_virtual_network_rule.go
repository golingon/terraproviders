// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlvirtualnetworkrule "github.com/golingon/terraproviders/azurerm/3.49.0/postgresqlvirtualnetworkrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPostgresqlVirtualNetworkRule(name string, args PostgresqlVirtualNetworkRuleArgs) *PostgresqlVirtualNetworkRule {
	return &PostgresqlVirtualNetworkRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlVirtualNetworkRule)(nil)

type PostgresqlVirtualNetworkRule struct {
	Name  string
	Args  PostgresqlVirtualNetworkRuleArgs
	state *postgresqlVirtualNetworkRuleState
}

func (pvnr *PostgresqlVirtualNetworkRule) Type() string {
	return "azurerm_postgresql_virtual_network_rule"
}

func (pvnr *PostgresqlVirtualNetworkRule) LocalName() string {
	return pvnr.Name
}

func (pvnr *PostgresqlVirtualNetworkRule) Configuration() interface{} {
	return pvnr.Args
}

func (pvnr *PostgresqlVirtualNetworkRule) Attributes() postgresqlVirtualNetworkRuleAttributes {
	return postgresqlVirtualNetworkRuleAttributes{ref: terra.ReferenceResource(pvnr)}
}

func (pvnr *PostgresqlVirtualNetworkRule) ImportState(av io.Reader) error {
	pvnr.state = &postgresqlVirtualNetworkRuleState{}
	if err := json.NewDecoder(av).Decode(pvnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pvnr.Type(), pvnr.LocalName(), err)
	}
	return nil
}

func (pvnr *PostgresqlVirtualNetworkRule) State() (*postgresqlVirtualNetworkRuleState, bool) {
	return pvnr.state, pvnr.state != nil
}

func (pvnr *PostgresqlVirtualNetworkRule) StateMust() *postgresqlVirtualNetworkRuleState {
	if pvnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pvnr.Type(), pvnr.LocalName()))
	}
	return pvnr.state
}

func (pvnr *PostgresqlVirtualNetworkRule) DependOn() terra.Reference {
	return terra.ReferenceResource(pvnr)
}

type PostgresqlVirtualNetworkRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreMissingVnetServiceEndpoint: bool, optional
	IgnoreMissingVnetServiceEndpoint terra.BoolValue `hcl:"ignore_missing_vnet_service_endpoint,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *postgresqlvirtualnetworkrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PostgresqlVirtualNetworkRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type postgresqlVirtualNetworkRuleAttributes struct {
	ref terra.Reference
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pvnr.ref.Append("id"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) IgnoreMissingVnetServiceEndpoint() terra.BoolValue {
	return terra.ReferenceBool(pvnr.ref.Append("ignore_missing_vnet_service_endpoint"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pvnr.ref.Append("name"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pvnr.ref.Append("resource_group_name"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(pvnr.ref.Append("server_name"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(pvnr.ref.Append("subnet_id"))
}

func (pvnr postgresqlVirtualNetworkRuleAttributes) Timeouts() postgresqlvirtualnetworkrule.TimeoutsAttributes {
	return terra.ReferenceSingle[postgresqlvirtualnetworkrule.TimeoutsAttributes](pvnr.ref.Append("timeouts"))
}

type postgresqlVirtualNetworkRuleState struct {
	Id                               string                                      `json:"id"`
	IgnoreMissingVnetServiceEndpoint bool                                        `json:"ignore_missing_vnet_service_endpoint"`
	Name                             string                                      `json:"name"`
	ResourceGroupName                string                                      `json:"resource_group_name"`
	ServerName                       string                                      `json:"server_name"`
	SubnetId                         string                                      `json:"subnet_id"`
	Timeouts                         *postgresqlvirtualnetworkrule.TimeoutsState `json:"timeouts"`
}
