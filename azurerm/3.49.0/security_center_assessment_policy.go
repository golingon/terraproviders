// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterassessmentpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterassessmentpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterAssessmentPolicy(name string, args SecurityCenterAssessmentPolicyArgs) *SecurityCenterAssessmentPolicy {
	return &SecurityCenterAssessmentPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterAssessmentPolicy)(nil)

type SecurityCenterAssessmentPolicy struct {
	Name  string
	Args  SecurityCenterAssessmentPolicyArgs
	state *securityCenterAssessmentPolicyState
}

func (scap *SecurityCenterAssessmentPolicy) Type() string {
	return "azurerm_security_center_assessment_policy"
}

func (scap *SecurityCenterAssessmentPolicy) LocalName() string {
	return scap.Name
}

func (scap *SecurityCenterAssessmentPolicy) Configuration() interface{} {
	return scap.Args
}

func (scap *SecurityCenterAssessmentPolicy) Attributes() securityCenterAssessmentPolicyAttributes {
	return securityCenterAssessmentPolicyAttributes{ref: terra.ReferenceResource(scap)}
}

func (scap *SecurityCenterAssessmentPolicy) ImportState(av io.Reader) error {
	scap.state = &securityCenterAssessmentPolicyState{}
	if err := json.NewDecoder(av).Decode(scap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scap.Type(), scap.LocalName(), err)
	}
	return nil
}

func (scap *SecurityCenterAssessmentPolicy) State() (*securityCenterAssessmentPolicyState, bool) {
	return scap.state, scap.state != nil
}

func (scap *SecurityCenterAssessmentPolicy) StateMust() *securityCenterAssessmentPolicyState {
	if scap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scap.Type(), scap.LocalName()))
	}
	return scap.state
}

func (scap *SecurityCenterAssessmentPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(scap)
}

type SecurityCenterAssessmentPolicyArgs struct {
	// Categories: set of string, optional
	Categories terra.SetValue[terra.StringValue] `hcl:"categories,attr"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImplementationEffort: string, optional
	ImplementationEffort terra.StringValue `hcl:"implementation_effort,attr"`
	// RemediationDescription: string, optional
	RemediationDescription terra.StringValue `hcl:"remediation_description,attr"`
	// Severity: string, optional
	Severity terra.StringValue `hcl:"severity,attr"`
	// Threats: set of string, optional
	Threats terra.SetValue[terra.StringValue] `hcl:"threats,attr"`
	// UserImpact: string, optional
	UserImpact terra.StringValue `hcl:"user_impact,attr"`
	// Timeouts: optional
	Timeouts *securitycenterassessmentpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterAssessmentPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterAssessmentPolicyAttributes struct {
	ref terra.Reference
}

func (scap securityCenterAssessmentPolicyAttributes) Categories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](scap.ref.Append("categories"))
}

func (scap securityCenterAssessmentPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("description"))
}

func (scap securityCenterAssessmentPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("display_name"))
}

func (scap securityCenterAssessmentPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("id"))
}

func (scap securityCenterAssessmentPolicyAttributes) ImplementationEffort() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("implementation_effort"))
}

func (scap securityCenterAssessmentPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("name"))
}

func (scap securityCenterAssessmentPolicyAttributes) RemediationDescription() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("remediation_description"))
}

func (scap securityCenterAssessmentPolicyAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("severity"))
}

func (scap securityCenterAssessmentPolicyAttributes) Threats() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](scap.ref.Append("threats"))
}

func (scap securityCenterAssessmentPolicyAttributes) UserImpact() terra.StringValue {
	return terra.ReferenceString(scap.ref.Append("user_impact"))
}

func (scap securityCenterAssessmentPolicyAttributes) Timeouts() securitycenterassessmentpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterassessmentpolicy.TimeoutsAttributes](scap.ref.Append("timeouts"))
}

type securityCenterAssessmentPolicyState struct {
	Categories             []string                                      `json:"categories"`
	Description            string                                        `json:"description"`
	DisplayName            string                                        `json:"display_name"`
	Id                     string                                        `json:"id"`
	ImplementationEffort   string                                        `json:"implementation_effort"`
	Name                   string                                        `json:"name"`
	RemediationDescription string                                        `json:"remediation_description"`
	Severity               string                                        `json:"severity"`
	Threats                []string                                      `json:"threats"`
	UserImpact             string                                        `json:"user_impact"`
	Timeouts               *securitycenterassessmentpolicy.TimeoutsState `json:"timeouts"`
}
