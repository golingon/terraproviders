// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appservice "github.com/golingon/terraproviders/azurerm/3.49.0/appservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppService(name string, args AppServiceArgs) *AppService {
	return &AppService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppService)(nil)

type AppService struct {
	Name  string
	Args  AppServiceArgs
	state *appServiceState
}

func (as *AppService) Type() string {
	return "azurerm_app_service"
}

func (as *AppService) LocalName() string {
	return as.Name
}

func (as *AppService) Configuration() interface{} {
	return as.Args
}

func (as *AppService) Attributes() appServiceAttributes {
	return appServiceAttributes{ref: terra.ReferenceResource(as)}
}

func (as *AppService) ImportState(av io.Reader) error {
	as.state = &appServiceState{}
	if err := json.NewDecoder(av).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

func (as *AppService) State() (*appServiceState, bool) {
	return as.state, as.state != nil
}

func (as *AppService) StateMust() *appServiceState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

func (as *AppService) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

type AppServiceArgs struct {
	// AppServicePlanId: string, required
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr" validate:"required"`
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// ClientAffinityEnabled: bool, optional
	ClientAffinityEnabled terra.BoolValue `hcl:"client_affinity_enabled,attr"`
	// ClientCertEnabled: bool, optional
	ClientCertEnabled terra.BoolValue `hcl:"client_cert_enabled,attr"`
	// ClientCertMode: string, optional
	ClientCertMode terra.StringValue `hcl:"client_cert_mode,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultReferenceIdentityId: string, optional
	KeyVaultReferenceIdentityId terra.StringValue `hcl:"key_vault_reference_identity_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// SiteCredential: min=0
	SiteCredential []appservice.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// AuthSettings: optional
	AuthSettings *appservice.AuthSettings `hcl:"auth_settings,block"`
	// Backup: optional
	Backup *appservice.Backup `hcl:"backup,block"`
	// ConnectionString: min=0
	ConnectionString []appservice.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *appservice.Identity `hcl:"identity,block"`
	// Logs: optional
	Logs *appservice.Logs `hcl:"logs,block"`
	// SiteConfig: optional
	SiteConfig *appservice.SiteConfig `hcl:"site_config,block"`
	// SourceControl: optional
	SourceControl *appservice.SourceControl `hcl:"source_control,block"`
	// StorageAccount: min=0
	StorageAccount []appservice.StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *appservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServiceAttributes struct {
	ref terra.Reference
}

func (as appServiceAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("app_service_plan_id"))
}

func (as appServiceAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](as.ref.Append("app_settings"))
}

func (as appServiceAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceBool(as.ref.Append("client_affinity_enabled"))
}

func (as appServiceAttributes) ClientCertEnabled() terra.BoolValue {
	return terra.ReferenceBool(as.ref.Append("client_cert_enabled"))
}

func (as appServiceAttributes) ClientCertMode() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("client_cert_mode"))
}

func (as appServiceAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("custom_domain_verification_id"))
}

func (as appServiceAttributes) DefaultSiteHostname() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("default_site_hostname"))
}

func (as appServiceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(as.ref.Append("enabled"))
}

func (as appServiceAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(as.ref.Append("https_only"))
}

func (as appServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("id"))
}

func (as appServiceAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("key_vault_reference_identity_id"))
}

func (as appServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("location"))
}

func (as appServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("name"))
}

func (as appServiceAttributes) OutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](as.ref.Append("outbound_ip_address_list"))
}

func (as appServiceAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("outbound_ip_addresses"))
}

func (as appServiceAttributes) PossibleOutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](as.ref.Append("possible_outbound_ip_address_list"))
}

func (as appServiceAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("possible_outbound_ip_addresses"))
}

func (as appServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("resource_group_name"))
}

func (as appServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](as.ref.Append("tags"))
}

func (as appServiceAttributes) SiteCredential() terra.ListValue[appservice.SiteCredentialAttributes] {
	return terra.ReferenceList[appservice.SiteCredentialAttributes](as.ref.Append("site_credential"))
}

func (as appServiceAttributes) AuthSettings() terra.ListValue[appservice.AuthSettingsAttributes] {
	return terra.ReferenceList[appservice.AuthSettingsAttributes](as.ref.Append("auth_settings"))
}

func (as appServiceAttributes) Backup() terra.ListValue[appservice.BackupAttributes] {
	return terra.ReferenceList[appservice.BackupAttributes](as.ref.Append("backup"))
}

func (as appServiceAttributes) ConnectionString() terra.SetValue[appservice.ConnectionStringAttributes] {
	return terra.ReferenceSet[appservice.ConnectionStringAttributes](as.ref.Append("connection_string"))
}

func (as appServiceAttributes) Identity() terra.ListValue[appservice.IdentityAttributes] {
	return terra.ReferenceList[appservice.IdentityAttributes](as.ref.Append("identity"))
}

func (as appServiceAttributes) Logs() terra.ListValue[appservice.LogsAttributes] {
	return terra.ReferenceList[appservice.LogsAttributes](as.ref.Append("logs"))
}

func (as appServiceAttributes) SiteConfig() terra.ListValue[appservice.SiteConfigAttributes] {
	return terra.ReferenceList[appservice.SiteConfigAttributes](as.ref.Append("site_config"))
}

func (as appServiceAttributes) SourceControl() terra.ListValue[appservice.SourceControlAttributes] {
	return terra.ReferenceList[appservice.SourceControlAttributes](as.ref.Append("source_control"))
}

func (as appServiceAttributes) StorageAccount() terra.SetValue[appservice.StorageAccountAttributes] {
	return terra.ReferenceSet[appservice.StorageAccountAttributes](as.ref.Append("storage_account"))
}

func (as appServiceAttributes) Timeouts() appservice.TimeoutsAttributes {
	return terra.ReferenceSingle[appservice.TimeoutsAttributes](as.ref.Append("timeouts"))
}

type appServiceState struct {
	AppServicePlanId              string                             `json:"app_service_plan_id"`
	AppSettings                   map[string]string                  `json:"app_settings"`
	ClientAffinityEnabled         bool                               `json:"client_affinity_enabled"`
	ClientCertEnabled             bool                               `json:"client_cert_enabled"`
	ClientCertMode                string                             `json:"client_cert_mode"`
	CustomDomainVerificationId    string                             `json:"custom_domain_verification_id"`
	DefaultSiteHostname           string                             `json:"default_site_hostname"`
	Enabled                       bool                               `json:"enabled"`
	HttpsOnly                     bool                               `json:"https_only"`
	Id                            string                             `json:"id"`
	KeyVaultReferenceIdentityId   string                             `json:"key_vault_reference_identity_id"`
	Location                      string                             `json:"location"`
	Name                          string                             `json:"name"`
	OutboundIpAddressList         []string                           `json:"outbound_ip_address_list"`
	OutboundIpAddresses           string                             `json:"outbound_ip_addresses"`
	PossibleOutboundIpAddressList []string                           `json:"possible_outbound_ip_address_list"`
	PossibleOutboundIpAddresses   string                             `json:"possible_outbound_ip_addresses"`
	ResourceGroupName             string                             `json:"resource_group_name"`
	Tags                          map[string]string                  `json:"tags"`
	SiteCredential                []appservice.SiteCredentialState   `json:"site_credential"`
	AuthSettings                  []appservice.AuthSettingsState     `json:"auth_settings"`
	Backup                        []appservice.BackupState           `json:"backup"`
	ConnectionString              []appservice.ConnectionStringState `json:"connection_string"`
	Identity                      []appservice.IdentityState         `json:"identity"`
	Logs                          []appservice.LogsState             `json:"logs"`
	SiteConfig                    []appservice.SiteConfigState       `json:"site_config"`
	SourceControl                 []appservice.SourceControlState    `json:"source_control"`
	StorageAccount                []appservice.StorageAccountState   `json:"storage_account"`
	Timeouts                      *appservice.TimeoutsState          `json:"timeouts"`
}
