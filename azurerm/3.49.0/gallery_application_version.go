// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	galleryapplicationversion "github.com/golingon/terraproviders/azurerm/3.49.0/galleryapplicationversion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGalleryApplicationVersion(name string, args GalleryApplicationVersionArgs) *GalleryApplicationVersion {
	return &GalleryApplicationVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GalleryApplicationVersion)(nil)

type GalleryApplicationVersion struct {
	Name  string
	Args  GalleryApplicationVersionArgs
	state *galleryApplicationVersionState
}

func (gav *GalleryApplicationVersion) Type() string {
	return "azurerm_gallery_application_version"
}

func (gav *GalleryApplicationVersion) LocalName() string {
	return gav.Name
}

func (gav *GalleryApplicationVersion) Configuration() interface{} {
	return gav.Args
}

func (gav *GalleryApplicationVersion) Attributes() galleryApplicationVersionAttributes {
	return galleryApplicationVersionAttributes{ref: terra.ReferenceResource(gav)}
}

func (gav *GalleryApplicationVersion) ImportState(av io.Reader) error {
	gav.state = &galleryApplicationVersionState{}
	if err := json.NewDecoder(av).Decode(gav.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gav.Type(), gav.LocalName(), err)
	}
	return nil
}

func (gav *GalleryApplicationVersion) State() (*galleryApplicationVersionState, bool) {
	return gav.state, gav.state != nil
}

func (gav *GalleryApplicationVersion) StateMust() *galleryApplicationVersionState {
	if gav.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gav.Type(), gav.LocalName()))
	}
	return gav.state
}

func (gav *GalleryApplicationVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(gav)
}

type GalleryApplicationVersionArgs struct {
	// EnableHealthCheck: bool, optional
	EnableHealthCheck terra.BoolValue `hcl:"enable_health_check,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// ExcludeFromLatest: bool, optional
	ExcludeFromLatest terra.BoolValue `hcl:"exclude_from_latest,attr"`
	// GalleryApplicationId: string, required
	GalleryApplicationId terra.StringValue `hcl:"gallery_application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ManageAction: required
	ManageAction *galleryapplicationversion.ManageAction `hcl:"manage_action,block" validate:"required"`
	// Source: required
	Source *galleryapplicationversion.Source `hcl:"source,block" validate:"required"`
	// TargetRegion: min=1
	TargetRegion []galleryapplicationversion.TargetRegion `hcl:"target_region,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *galleryapplicationversion.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GalleryApplicationVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type galleryApplicationVersionAttributes struct {
	ref terra.Reference
}

func (gav galleryApplicationVersionAttributes) EnableHealthCheck() terra.BoolValue {
	return terra.ReferenceBool(gav.ref.Append("enable_health_check"))
}

func (gav galleryApplicationVersionAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceString(gav.ref.Append("end_of_life_date"))
}

func (gav galleryApplicationVersionAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceBool(gav.ref.Append("exclude_from_latest"))
}

func (gav galleryApplicationVersionAttributes) GalleryApplicationId() terra.StringValue {
	return terra.ReferenceString(gav.ref.Append("gallery_application_id"))
}

func (gav galleryApplicationVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gav.ref.Append("id"))
}

func (gav galleryApplicationVersionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gav.ref.Append("location"))
}

func (gav galleryApplicationVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gav.ref.Append("name"))
}

func (gav galleryApplicationVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gav.ref.Append("tags"))
}

func (gav galleryApplicationVersionAttributes) ManageAction() terra.ListValue[galleryapplicationversion.ManageActionAttributes] {
	return terra.ReferenceList[galleryapplicationversion.ManageActionAttributes](gav.ref.Append("manage_action"))
}

func (gav galleryApplicationVersionAttributes) Source() terra.ListValue[galleryapplicationversion.SourceAttributes] {
	return terra.ReferenceList[galleryapplicationversion.SourceAttributes](gav.ref.Append("source"))
}

func (gav galleryApplicationVersionAttributes) TargetRegion() terra.ListValue[galleryapplicationversion.TargetRegionAttributes] {
	return terra.ReferenceList[galleryapplicationversion.TargetRegionAttributes](gav.ref.Append("target_region"))
}

func (gav galleryApplicationVersionAttributes) Timeouts() galleryapplicationversion.TimeoutsAttributes {
	return terra.ReferenceSingle[galleryapplicationversion.TimeoutsAttributes](gav.ref.Append("timeouts"))
}

type galleryApplicationVersionState struct {
	EnableHealthCheck    bool                                          `json:"enable_health_check"`
	EndOfLifeDate        string                                        `json:"end_of_life_date"`
	ExcludeFromLatest    bool                                          `json:"exclude_from_latest"`
	GalleryApplicationId string                                        `json:"gallery_application_id"`
	Id                   string                                        `json:"id"`
	Location             string                                        `json:"location"`
	Name                 string                                        `json:"name"`
	Tags                 map[string]string                             `json:"tags"`
	ManageAction         []galleryapplicationversion.ManageActionState `json:"manage_action"`
	Source               []galleryapplicationversion.SourceState       `json:"source"`
	TargetRegion         []galleryapplicationversion.TargetRegionState `json:"target_region"`
	Timeouts             *galleryapplicationversion.TimeoutsState      `json:"timeouts"`
}
