// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasubscriptions

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Subscriptions struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type SubscriptionsAttributes struct {
	ref terra.Reference
}

func (s SubscriptionsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubscriptionsAttributes) InternalWithRef(ref terra.Reference) SubscriptionsAttributes {
	return SubscriptionsAttributes{ref: ref}
}

func (s SubscriptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubscriptionsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("display_name"))
}

func (s SubscriptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

func (s SubscriptionsAttributes) LocationPlacementId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("location_placement_id"))
}

func (s SubscriptionsAttributes) QuotaId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("quota_id"))
}

func (s SubscriptionsAttributes) SpendingLimit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("spending_limit"))
}

func (s SubscriptionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

func (s SubscriptionsAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("subscription_id"))
}

func (s SubscriptionsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags"))
}

func (s SubscriptionsAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tenant_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type SubscriptionsState struct {
	DisplayName         string            `json:"display_name"`
	Id                  string            `json:"id"`
	LocationPlacementId string            `json:"location_placement_id"`
	QuotaId             string            `json:"quota_id"`
	SpendingLimit       string            `json:"spending_limit"`
	State               string            `json:"state"`
	SubscriptionId      string            `json:"subscription_id"`
	Tags                map[string]string `json:"tags"`
	TenantId            string            `json:"tenant_id"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
