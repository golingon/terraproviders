// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticsquerypackquery "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticsquerypackquery"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsQueryPackQuery(name string, args LogAnalyticsQueryPackQueryArgs) *LogAnalyticsQueryPackQuery {
	return &LogAnalyticsQueryPackQuery{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsQueryPackQuery)(nil)

type LogAnalyticsQueryPackQuery struct {
	Name  string
	Args  LogAnalyticsQueryPackQueryArgs
	state *logAnalyticsQueryPackQueryState
}

func (laqpq *LogAnalyticsQueryPackQuery) Type() string {
	return "azurerm_log_analytics_query_pack_query"
}

func (laqpq *LogAnalyticsQueryPackQuery) LocalName() string {
	return laqpq.Name
}

func (laqpq *LogAnalyticsQueryPackQuery) Configuration() interface{} {
	return laqpq.Args
}

func (laqpq *LogAnalyticsQueryPackQuery) Attributes() logAnalyticsQueryPackQueryAttributes {
	return logAnalyticsQueryPackQueryAttributes{ref: terra.ReferenceResource(laqpq)}
}

func (laqpq *LogAnalyticsQueryPackQuery) ImportState(av io.Reader) error {
	laqpq.state = &logAnalyticsQueryPackQueryState{}
	if err := json.NewDecoder(av).Decode(laqpq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", laqpq.Type(), laqpq.LocalName(), err)
	}
	return nil
}

func (laqpq *LogAnalyticsQueryPackQuery) State() (*logAnalyticsQueryPackQueryState, bool) {
	return laqpq.state, laqpq.state != nil
}

func (laqpq *LogAnalyticsQueryPackQuery) StateMust() *logAnalyticsQueryPackQueryState {
	if laqpq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", laqpq.Type(), laqpq.LocalName()))
	}
	return laqpq.state
}

func (laqpq *LogAnalyticsQueryPackQuery) DependOn() terra.Reference {
	return terra.ReferenceResource(laqpq)
}

type LogAnalyticsQueryPackQueryArgs struct {
	// AdditionalSettingsJson: string, optional
	AdditionalSettingsJson terra.StringValue `hcl:"additional_settings_json,attr"`
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// Categories: list of string, optional
	Categories terra.ListValue[terra.StringValue] `hcl:"categories,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// QueryPackId: string, required
	QueryPackId terra.StringValue `hcl:"query_pack_id,attr" validate:"required"`
	// ResourceTypes: list of string, optional
	ResourceTypes terra.ListValue[terra.StringValue] `hcl:"resource_types,attr"`
	// Solutions: list of string, optional
	Solutions terra.ListValue[terra.StringValue] `hcl:"solutions,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *loganalyticsquerypackquery.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsQueryPackQuery depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsQueryPackQueryAttributes struct {
	ref terra.Reference
}

func (laqpq logAnalyticsQueryPackQueryAttributes) AdditionalSettingsJson() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("additional_settings_json"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Body() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("body"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Categories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](laqpq.ref.Append("categories"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Description() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("description"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("display_name"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("id"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("name"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) QueryPackId() terra.StringValue {
	return terra.ReferenceString(laqpq.ref.Append("query_pack_id"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) ResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](laqpq.ref.Append("resource_types"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Solutions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](laqpq.ref.Append("solutions"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](laqpq.ref.Append("tags"))
}

func (laqpq logAnalyticsQueryPackQueryAttributes) Timeouts() loganalyticsquerypackquery.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticsquerypackquery.TimeoutsAttributes](laqpq.ref.Append("timeouts"))
}

type logAnalyticsQueryPackQueryState struct {
	AdditionalSettingsJson string                                    `json:"additional_settings_json"`
	Body                   string                                    `json:"body"`
	Categories             []string                                  `json:"categories"`
	Description            string                                    `json:"description"`
	DisplayName            string                                    `json:"display_name"`
	Id                     string                                    `json:"id"`
	Name                   string                                    `json:"name"`
	QueryPackId            string                                    `json:"query_pack_id"`
	ResourceTypes          []string                                  `json:"resource_types"`
	Solutions              []string                                  `json:"solutions"`
	Tags                   map[string]string                         `json:"tags"`
	Timeouts               *loganalyticsquerypackquery.TimeoutsState `json:"timeouts"`
}
