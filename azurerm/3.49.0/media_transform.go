// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediatransform "github.com/golingon/terraproviders/azurerm/3.49.0/mediatransform"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaTransform(name string, args MediaTransformArgs) *MediaTransform {
	return &MediaTransform{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaTransform)(nil)

type MediaTransform struct {
	Name  string
	Args  MediaTransformArgs
	state *mediaTransformState
}

func (mt *MediaTransform) Type() string {
	return "azurerm_media_transform"
}

func (mt *MediaTransform) LocalName() string {
	return mt.Name
}

func (mt *MediaTransform) Configuration() interface{} {
	return mt.Args
}

func (mt *MediaTransform) Attributes() mediaTransformAttributes {
	return mediaTransformAttributes{ref: terra.ReferenceResource(mt)}
}

func (mt *MediaTransform) ImportState(av io.Reader) error {
	mt.state = &mediaTransformState{}
	if err := json.NewDecoder(av).Decode(mt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mt.Type(), mt.LocalName(), err)
	}
	return nil
}

func (mt *MediaTransform) State() (*mediaTransformState, bool) {
	return mt.state, mt.state != nil
}

func (mt *MediaTransform) StateMust() *mediaTransformState {
	if mt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mt.Type(), mt.LocalName()))
	}
	return mt.state
}

func (mt *MediaTransform) DependOn() terra.Reference {
	return terra.ReferenceResource(mt)
}

type MediaTransformArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Output: min=0
	Output []mediatransform.Output `hcl:"output,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *mediatransform.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MediaTransform depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaTransformAttributes struct {
	ref terra.Reference
}

func (mt mediaTransformAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mt.ref.Append("description"))
}

func (mt mediaTransformAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mt.ref.Append("id"))
}

func (mt mediaTransformAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceString(mt.ref.Append("media_services_account_name"))
}

func (mt mediaTransformAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mt.ref.Append("name"))
}

func (mt mediaTransformAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mt.ref.Append("resource_group_name"))
}

func (mt mediaTransformAttributes) Output() terra.ListValue[mediatransform.OutputAttributes] {
	return terra.ReferenceList[mediatransform.OutputAttributes](mt.ref.Append("output"))
}

func (mt mediaTransformAttributes) Timeouts() mediatransform.TimeoutsAttributes {
	return terra.ReferenceSingle[mediatransform.TimeoutsAttributes](mt.ref.Append("timeouts"))
}

type mediaTransformState struct {
	Description              string                        `json:"description"`
	Id                       string                        `json:"id"`
	MediaServicesAccountName string                        `json:"media_services_account_name"`
	Name                     string                        `json:"name"`
	ResourceGroupName        string                        `json:"resource_group_name"`
	Output                   []mediatransform.OutputState  `json:"output"`
	Timeouts                 *mediatransform.TimeoutsState `json:"timeouts"`
}
