// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	purviewaccount "github.com/golingon/terraproviders/azurerm/3.49.0/purviewaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPurviewAccount(name string, args PurviewAccountArgs) *PurviewAccount {
	return &PurviewAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PurviewAccount)(nil)

type PurviewAccount struct {
	Name  string
	Args  PurviewAccountArgs
	state *purviewAccountState
}

func (pa *PurviewAccount) Type() string {
	return "azurerm_purview_account"
}

func (pa *PurviewAccount) LocalName() string {
	return pa.Name
}

func (pa *PurviewAccount) Configuration() interface{} {
	return pa.Args
}

func (pa *PurviewAccount) Attributes() purviewAccountAttributes {
	return purviewAccountAttributes{ref: terra.ReferenceResource(pa)}
}

func (pa *PurviewAccount) ImportState(av io.Reader) error {
	pa.state = &purviewAccountState{}
	if err := json.NewDecoder(av).Decode(pa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pa.Type(), pa.LocalName(), err)
	}
	return nil
}

func (pa *PurviewAccount) State() (*purviewAccountState, bool) {
	return pa.state, pa.state != nil
}

func (pa *PurviewAccount) StateMust() *purviewAccountState {
	if pa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pa.Type(), pa.LocalName()))
	}
	return pa.state
}

func (pa *PurviewAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(pa)
}

type PurviewAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroupName: string, optional
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkEnabled: bool, optional
	PublicNetworkEnabled terra.BoolValue `hcl:"public_network_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ManagedResources: min=0
	ManagedResources []purviewaccount.ManagedResources `hcl:"managed_resources,block" validate:"min=0"`
	// Identity: required
	Identity *purviewaccount.Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *purviewaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PurviewAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type purviewAccountAttributes struct {
	ref terra.Reference
}

func (pa purviewAccountAttributes) AtlasKafkaEndpointPrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("atlas_kafka_endpoint_primary_connection_string"))
}

func (pa purviewAccountAttributes) AtlasKafkaEndpointSecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("atlas_kafka_endpoint_secondary_connection_string"))
}

func (pa purviewAccountAttributes) CatalogEndpoint() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("catalog_endpoint"))
}

func (pa purviewAccountAttributes) GuardianEndpoint() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("guardian_endpoint"))
}

func (pa purviewAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("id"))
}

func (pa purviewAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("location"))
}

func (pa purviewAccountAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("managed_resource_group_name"))
}

func (pa purviewAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("name"))
}

func (pa purviewAccountAttributes) PublicNetworkEnabled() terra.BoolValue {
	return terra.ReferenceBool(pa.ref.Append("public_network_enabled"))
}

func (pa purviewAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("resource_group_name"))
}

func (pa purviewAccountAttributes) ScanEndpoint() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("scan_endpoint"))
}

func (pa purviewAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pa.ref.Append("tags"))
}

func (pa purviewAccountAttributes) ManagedResources() terra.ListValue[purviewaccount.ManagedResourcesAttributes] {
	return terra.ReferenceList[purviewaccount.ManagedResourcesAttributes](pa.ref.Append("managed_resources"))
}

func (pa purviewAccountAttributes) Identity() terra.ListValue[purviewaccount.IdentityAttributes] {
	return terra.ReferenceList[purviewaccount.IdentityAttributes](pa.ref.Append("identity"))
}

func (pa purviewAccountAttributes) Timeouts() purviewaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[purviewaccount.TimeoutsAttributes](pa.ref.Append("timeouts"))
}

type purviewAccountState struct {
	AtlasKafkaEndpointPrimaryConnectionString   string                                 `json:"atlas_kafka_endpoint_primary_connection_string"`
	AtlasKafkaEndpointSecondaryConnectionString string                                 `json:"atlas_kafka_endpoint_secondary_connection_string"`
	CatalogEndpoint                             string                                 `json:"catalog_endpoint"`
	GuardianEndpoint                            string                                 `json:"guardian_endpoint"`
	Id                                          string                                 `json:"id"`
	Location                                    string                                 `json:"location"`
	ManagedResourceGroupName                    string                                 `json:"managed_resource_group_name"`
	Name                                        string                                 `json:"name"`
	PublicNetworkEnabled                        bool                                   `json:"public_network_enabled"`
	ResourceGroupName                           string                                 `json:"resource_group_name"`
	ScanEndpoint                                string                                 `json:"scan_endpoint"`
	Tags                                        map[string]string                      `json:"tags"`
	ManagedResources                            []purviewaccount.ManagedResourcesState `json:"managed_resources"`
	Identity                                    []purviewaccount.IdentityState         `json:"identity"`
	Timeouts                                    *purviewaccount.TimeoutsState          `json:"timeouts"`
}
