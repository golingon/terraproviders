// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednscnamerecord "github.com/golingon/terraproviders/azurerm/3.49.0/privatednscnamerecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsCnameRecord(name string, args PrivateDnsCnameRecordArgs) *PrivateDnsCnameRecord {
	return &PrivateDnsCnameRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsCnameRecord)(nil)

type PrivateDnsCnameRecord struct {
	Name  string
	Args  PrivateDnsCnameRecordArgs
	state *privateDnsCnameRecordState
}

func (pdcr *PrivateDnsCnameRecord) Type() string {
	return "azurerm_private_dns_cname_record"
}

func (pdcr *PrivateDnsCnameRecord) LocalName() string {
	return pdcr.Name
}

func (pdcr *PrivateDnsCnameRecord) Configuration() interface{} {
	return pdcr.Args
}

func (pdcr *PrivateDnsCnameRecord) Attributes() privateDnsCnameRecordAttributes {
	return privateDnsCnameRecordAttributes{ref: terra.ReferenceResource(pdcr)}
}

func (pdcr *PrivateDnsCnameRecord) ImportState(av io.Reader) error {
	pdcr.state = &privateDnsCnameRecordState{}
	if err := json.NewDecoder(av).Decode(pdcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdcr.Type(), pdcr.LocalName(), err)
	}
	return nil
}

func (pdcr *PrivateDnsCnameRecord) State() (*privateDnsCnameRecordState, bool) {
	return pdcr.state, pdcr.state != nil
}

func (pdcr *PrivateDnsCnameRecord) StateMust() *privateDnsCnameRecordState {
	if pdcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdcr.Type(), pdcr.LocalName()))
	}
	return pdcr.state
}

func (pdcr *PrivateDnsCnameRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(pdcr)
}

type PrivateDnsCnameRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Record: string, required
	Record terra.StringValue `hcl:"record,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *privatednscnamerecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsCnameRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsCnameRecordAttributes struct {
	ref terra.Reference
}

func (pdcr privateDnsCnameRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("fqdn"))
}

func (pdcr privateDnsCnameRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("id"))
}

func (pdcr privateDnsCnameRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("name"))
}

func (pdcr privateDnsCnameRecordAttributes) Record() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("record"))
}

func (pdcr privateDnsCnameRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("resource_group_name"))
}

func (pdcr privateDnsCnameRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdcr.ref.Append("tags"))
}

func (pdcr privateDnsCnameRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(pdcr.ref.Append("ttl"))
}

func (pdcr privateDnsCnameRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(pdcr.ref.Append("zone_name"))
}

func (pdcr privateDnsCnameRecordAttributes) Timeouts() privatednscnamerecord.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednscnamerecord.TimeoutsAttributes](pdcr.ref.Append("timeouts"))
}

type privateDnsCnameRecordState struct {
	Fqdn              string                               `json:"fqdn"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	Record            string                               `json:"record"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	Ttl               float64                              `json:"ttl"`
	ZoneName          string                               `json:"zone_name"`
	Timeouts          *privatednscnamerecord.TimeoutsState `json:"timeouts"`
}
