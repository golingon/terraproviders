// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapitag "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapitag"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApiTag(name string, args ApiManagementApiTagArgs) *ApiManagementApiTag {
	return &ApiManagementApiTag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApiTag)(nil)

type ApiManagementApiTag struct {
	Name  string
	Args  ApiManagementApiTagArgs
	state *apiManagementApiTagState
}

func (amat *ApiManagementApiTag) Type() string {
	return "azurerm_api_management_api_tag"
}

func (amat *ApiManagementApiTag) LocalName() string {
	return amat.Name
}

func (amat *ApiManagementApiTag) Configuration() interface{} {
	return amat.Args
}

func (amat *ApiManagementApiTag) Attributes() apiManagementApiTagAttributes {
	return apiManagementApiTagAttributes{ref: terra.ReferenceResource(amat)}
}

func (amat *ApiManagementApiTag) ImportState(av io.Reader) error {
	amat.state = &apiManagementApiTagState{}
	if err := json.NewDecoder(av).Decode(amat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amat.Type(), amat.LocalName(), err)
	}
	return nil
}

func (amat *ApiManagementApiTag) State() (*apiManagementApiTagState, bool) {
	return amat.state, amat.state != nil
}

func (amat *ApiManagementApiTag) StateMust() *apiManagementApiTagState {
	if amat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amat.Type(), amat.LocalName()))
	}
	return amat.state
}

func (amat *ApiManagementApiTag) DependOn() terra.Reference {
	return terra.ReferenceResource(amat)
}

type ApiManagementApiTagArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apimanagementapitag.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApiTag depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiTagAttributes struct {
	ref terra.Reference
}

func (amat apiManagementApiTagAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(amat.ref.Append("api_id"))
}

func (amat apiManagementApiTagAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amat.ref.Append("id"))
}

func (amat apiManagementApiTagAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amat.ref.Append("name"))
}

func (amat apiManagementApiTagAttributes) Timeouts() apimanagementapitag.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapitag.TimeoutsAttributes](amat.ref.Append("timeouts"))
}

type apiManagementApiTagState struct {
	ApiId    string                             `json:"api_id"`
	Id       string                             `json:"id"`
	Name     string                             `json:"name"`
	Timeouts *apimanagementapitag.TimeoutsState `json:"timeouts"`
}
