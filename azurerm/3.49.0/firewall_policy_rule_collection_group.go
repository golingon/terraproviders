// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	firewallpolicyrulecollectiongroup "github.com/golingon/terraproviders/azurerm/3.49.0/firewallpolicyrulecollectiongroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirewallPolicyRuleCollectionGroup(name string, args FirewallPolicyRuleCollectionGroupArgs) *FirewallPolicyRuleCollectionGroup {
	return &FirewallPolicyRuleCollectionGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirewallPolicyRuleCollectionGroup)(nil)

type FirewallPolicyRuleCollectionGroup struct {
	Name  string
	Args  FirewallPolicyRuleCollectionGroupArgs
	state *firewallPolicyRuleCollectionGroupState
}

func (fprcg *FirewallPolicyRuleCollectionGroup) Type() string {
	return "azurerm_firewall_policy_rule_collection_group"
}

func (fprcg *FirewallPolicyRuleCollectionGroup) LocalName() string {
	return fprcg.Name
}

func (fprcg *FirewallPolicyRuleCollectionGroup) Configuration() interface{} {
	return fprcg.Args
}

func (fprcg *FirewallPolicyRuleCollectionGroup) Attributes() firewallPolicyRuleCollectionGroupAttributes {
	return firewallPolicyRuleCollectionGroupAttributes{ref: terra.ReferenceResource(fprcg)}
}

func (fprcg *FirewallPolicyRuleCollectionGroup) ImportState(av io.Reader) error {
	fprcg.state = &firewallPolicyRuleCollectionGroupState{}
	if err := json.NewDecoder(av).Decode(fprcg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fprcg.Type(), fprcg.LocalName(), err)
	}
	return nil
}

func (fprcg *FirewallPolicyRuleCollectionGroup) State() (*firewallPolicyRuleCollectionGroupState, bool) {
	return fprcg.state, fprcg.state != nil
}

func (fprcg *FirewallPolicyRuleCollectionGroup) StateMust() *firewallPolicyRuleCollectionGroupState {
	if fprcg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fprcg.Type(), fprcg.LocalName()))
	}
	return fprcg.state
}

func (fprcg *FirewallPolicyRuleCollectionGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(fprcg)
}

type FirewallPolicyRuleCollectionGroupArgs struct {
	// FirewallPolicyId: string, required
	FirewallPolicyId terra.StringValue `hcl:"firewall_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ApplicationRuleCollection: min=0
	ApplicationRuleCollection []firewallpolicyrulecollectiongroup.ApplicationRuleCollection `hcl:"application_rule_collection,block" validate:"min=0"`
	// NatRuleCollection: min=0
	NatRuleCollection []firewallpolicyrulecollectiongroup.NatRuleCollection `hcl:"nat_rule_collection,block" validate:"min=0"`
	// NetworkRuleCollection: min=0
	NetworkRuleCollection []firewallpolicyrulecollectiongroup.NetworkRuleCollection `hcl:"network_rule_collection,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *firewallpolicyrulecollectiongroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FirewallPolicyRuleCollectionGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firewallPolicyRuleCollectionGroupAttributes struct {
	ref terra.Reference
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceString(fprcg.ref.Append("firewall_policy_id"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fprcg.ref.Append("id"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fprcg.ref.Append("name"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(fprcg.ref.Append("priority"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) ApplicationRuleCollection() terra.ListValue[firewallpolicyrulecollectiongroup.ApplicationRuleCollectionAttributes] {
	return terra.ReferenceList[firewallpolicyrulecollectiongroup.ApplicationRuleCollectionAttributes](fprcg.ref.Append("application_rule_collection"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) NatRuleCollection() terra.ListValue[firewallpolicyrulecollectiongroup.NatRuleCollectionAttributes] {
	return terra.ReferenceList[firewallpolicyrulecollectiongroup.NatRuleCollectionAttributes](fprcg.ref.Append("nat_rule_collection"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) NetworkRuleCollection() terra.ListValue[firewallpolicyrulecollectiongroup.NetworkRuleCollectionAttributes] {
	return terra.ReferenceList[firewallpolicyrulecollectiongroup.NetworkRuleCollectionAttributes](fprcg.ref.Append("network_rule_collection"))
}

func (fprcg firewallPolicyRuleCollectionGroupAttributes) Timeouts() firewallpolicyrulecollectiongroup.TimeoutsAttributes {
	return terra.ReferenceSingle[firewallpolicyrulecollectiongroup.TimeoutsAttributes](fprcg.ref.Append("timeouts"))
}

type firewallPolicyRuleCollectionGroupState struct {
	FirewallPolicyId          string                                                             `json:"firewall_policy_id"`
	Id                        string                                                             `json:"id"`
	Name                      string                                                             `json:"name"`
	Priority                  float64                                                            `json:"priority"`
	ApplicationRuleCollection []firewallpolicyrulecollectiongroup.ApplicationRuleCollectionState `json:"application_rule_collection"`
	NatRuleCollection         []firewallpolicyrulecollectiongroup.NatRuleCollectionState         `json:"nat_rule_collection"`
	NetworkRuleCollection     []firewallpolicyrulecollectiongroup.NetworkRuleCollectionState     `json:"network_rule_collection"`
	Timeouts                  *firewallpolicyrulecollectiongroup.TimeoutsState                   `json:"timeouts"`
}
