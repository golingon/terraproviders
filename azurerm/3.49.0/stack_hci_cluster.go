// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	stackhcicluster "github.com/golingon/terraproviders/azurerm/3.49.0/stackhcicluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStackHciCluster(name string, args StackHciClusterArgs) *StackHciCluster {
	return &StackHciCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StackHciCluster)(nil)

type StackHciCluster struct {
	Name  string
	Args  StackHciClusterArgs
	state *stackHciClusterState
}

func (shc *StackHciCluster) Type() string {
	return "azurerm_stack_hci_cluster"
}

func (shc *StackHciCluster) LocalName() string {
	return shc.Name
}

func (shc *StackHciCluster) Configuration() interface{} {
	return shc.Args
}

func (shc *StackHciCluster) Attributes() stackHciClusterAttributes {
	return stackHciClusterAttributes{ref: terra.ReferenceResource(shc)}
}

func (shc *StackHciCluster) ImportState(av io.Reader) error {
	shc.state = &stackHciClusterState{}
	if err := json.NewDecoder(av).Decode(shc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", shc.Type(), shc.LocalName(), err)
	}
	return nil
}

func (shc *StackHciCluster) State() (*stackHciClusterState, bool) {
	return shc.state, shc.state != nil
}

func (shc *StackHciCluster) StateMust() *stackHciClusterState {
	if shc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", shc.Type(), shc.LocalName()))
	}
	return shc.state
}

func (shc *StackHciCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(shc)
}

type StackHciClusterArgs struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// Timeouts: optional
	Timeouts *stackhcicluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StackHciCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type stackHciClusterAttributes struct {
	ref terra.Reference
}

func (shc stackHciClusterAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("client_id"))
}

func (shc stackHciClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("id"))
}

func (shc stackHciClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("location"))
}

func (shc stackHciClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("name"))
}

func (shc stackHciClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("resource_group_name"))
}

func (shc stackHciClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](shc.ref.Append("tags"))
}

func (shc stackHciClusterAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(shc.ref.Append("tenant_id"))
}

func (shc stackHciClusterAttributes) Timeouts() stackhcicluster.TimeoutsAttributes {
	return terra.ReferenceSingle[stackhcicluster.TimeoutsAttributes](shc.ref.Append("timeouts"))
}

type stackHciClusterState struct {
	ClientId          string                         `json:"client_id"`
	Id                string                         `json:"id"`
	Location          string                         `json:"location"`
	Name              string                         `json:"name"`
	ResourceGroupName string                         `json:"resource_group_name"`
	Tags              map[string]string              `json:"tags"`
	TenantId          string                         `json:"tenant_id"`
	Timeouts          *stackhcicluster.TimeoutsState `json:"timeouts"`
}
