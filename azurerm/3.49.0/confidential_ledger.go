// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	confidentialledger "github.com/golingon/terraproviders/azurerm/3.49.0/confidentialledger"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfidentialLedger(name string, args ConfidentialLedgerArgs) *ConfidentialLedger {
	return &ConfidentialLedger{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfidentialLedger)(nil)

type ConfidentialLedger struct {
	Name  string
	Args  ConfidentialLedgerArgs
	state *confidentialLedgerState
}

func (cl *ConfidentialLedger) Type() string {
	return "azurerm_confidential_ledger"
}

func (cl *ConfidentialLedger) LocalName() string {
	return cl.Name
}

func (cl *ConfidentialLedger) Configuration() interface{} {
	return cl.Args
}

func (cl *ConfidentialLedger) Attributes() confidentialLedgerAttributes {
	return confidentialLedgerAttributes{ref: terra.ReferenceResource(cl)}
}

func (cl *ConfidentialLedger) ImportState(av io.Reader) error {
	cl.state = &confidentialLedgerState{}
	if err := json.NewDecoder(av).Decode(cl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cl.Type(), cl.LocalName(), err)
	}
	return nil
}

func (cl *ConfidentialLedger) State() (*confidentialLedgerState, bool) {
	return cl.state, cl.state != nil
}

func (cl *ConfidentialLedger) StateMust() *confidentialLedgerState {
	if cl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cl.Type(), cl.LocalName()))
	}
	return cl.state
}

func (cl *ConfidentialLedger) DependOn() terra.Reference {
	return terra.ReferenceResource(cl)
}

type ConfidentialLedgerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LedgerType: string, required
	LedgerType terra.StringValue `hcl:"ledger_type,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AzureadBasedServicePrincipal: min=1
	AzureadBasedServicePrincipal []confidentialledger.AzureadBasedServicePrincipal `hcl:"azuread_based_service_principal,block" validate:"min=1"`
	// CertificateBasedSecurityPrincipal: min=0
	CertificateBasedSecurityPrincipal []confidentialledger.CertificateBasedSecurityPrincipal `hcl:"certificate_based_security_principal,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *confidentialledger.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ConfidentialLedger depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type confidentialLedgerAttributes struct {
	ref terra.Reference
}

func (cl confidentialLedgerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("id"))
}

func (cl confidentialLedgerAttributes) IdentityServiceEndpoint() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("identity_service_endpoint"))
}

func (cl confidentialLedgerAttributes) LedgerEndpoint() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("ledger_endpoint"))
}

func (cl confidentialLedgerAttributes) LedgerType() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("ledger_type"))
}

func (cl confidentialLedgerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("location"))
}

func (cl confidentialLedgerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("name"))
}

func (cl confidentialLedgerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("resource_group_name"))
}

func (cl confidentialLedgerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cl.ref.Append("tags"))
}

func (cl confidentialLedgerAttributes) AzureadBasedServicePrincipal() terra.ListValue[confidentialledger.AzureadBasedServicePrincipalAttributes] {
	return terra.ReferenceList[confidentialledger.AzureadBasedServicePrincipalAttributes](cl.ref.Append("azuread_based_service_principal"))
}

func (cl confidentialLedgerAttributes) CertificateBasedSecurityPrincipal() terra.ListValue[confidentialledger.CertificateBasedSecurityPrincipalAttributes] {
	return terra.ReferenceList[confidentialledger.CertificateBasedSecurityPrincipalAttributes](cl.ref.Append("certificate_based_security_principal"))
}

func (cl confidentialLedgerAttributes) Timeouts() confidentialledger.TimeoutsAttributes {
	return terra.ReferenceSingle[confidentialledger.TimeoutsAttributes](cl.ref.Append("timeouts"))
}

type confidentialLedgerState struct {
	Id                                string                                                      `json:"id"`
	IdentityServiceEndpoint           string                                                      `json:"identity_service_endpoint"`
	LedgerEndpoint                    string                                                      `json:"ledger_endpoint"`
	LedgerType                        string                                                      `json:"ledger_type"`
	Location                          string                                                      `json:"location"`
	Name                              string                                                      `json:"name"`
	ResourceGroupName                 string                                                      `json:"resource_group_name"`
	Tags                              map[string]string                                           `json:"tags"`
	AzureadBasedServicePrincipal      []confidentialledger.AzureadBasedServicePrincipalState      `json:"azuread_based_service_principal"`
	CertificateBasedSecurityPrincipal []confidentialledger.CertificateBasedSecurityPrincipalState `json:"certificate_based_security_principal"`
	Timeouts                          *confidentialledger.TimeoutsState                           `json:"timeouts"`
}
