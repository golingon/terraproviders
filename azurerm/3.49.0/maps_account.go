// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mapsaccount "github.com/golingon/terraproviders/azurerm/3.49.0/mapsaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMapsAccount(name string, args MapsAccountArgs) *MapsAccount {
	return &MapsAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MapsAccount)(nil)

type MapsAccount struct {
	Name  string
	Args  MapsAccountArgs
	state *mapsAccountState
}

func (ma *MapsAccount) Type() string {
	return "azurerm_maps_account"
}

func (ma *MapsAccount) LocalName() string {
	return ma.Name
}

func (ma *MapsAccount) Configuration() interface{} {
	return ma.Args
}

func (ma *MapsAccount) Attributes() mapsAccountAttributes {
	return mapsAccountAttributes{ref: terra.ReferenceResource(ma)}
}

func (ma *MapsAccount) ImportState(av io.Reader) error {
	ma.state = &mapsAccountState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

func (ma *MapsAccount) State() (*mapsAccountState, bool) {
	return ma.state, ma.state != nil
}

func (ma *MapsAccount) StateMust() *mapsAccountState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

func (ma *MapsAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

type MapsAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *mapsaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MapsAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mapsAccountAttributes struct {
	ref terra.Reference
}

func (ma mapsAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("id"))
}

func (ma mapsAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("name"))
}

func (ma mapsAccountAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("primary_access_key"))
}

func (ma mapsAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("resource_group_name"))
}

func (ma mapsAccountAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("secondary_access_key"))
}

func (ma mapsAccountAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("sku_name"))
}

func (ma mapsAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("tags"))
}

func (ma mapsAccountAttributes) XMsClientId() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("x_ms_client_id"))
}

func (ma mapsAccountAttributes) Timeouts() mapsaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[mapsaccount.TimeoutsAttributes](ma.ref.Append("timeouts"))
}

type mapsAccountState struct {
	Id                 string                     `json:"id"`
	Name               string                     `json:"name"`
	PrimaryAccessKey   string                     `json:"primary_access_key"`
	ResourceGroupName  string                     `json:"resource_group_name"`
	SecondaryAccessKey string                     `json:"secondary_access_key"`
	SkuName            string                     `json:"sku_name"`
	Tags               map[string]string          `json:"tags"`
	XMsClientId        string                     `json:"x_ms_client_id"`
	Timeouts           *mapsaccount.TimeoutsState `json:"timeouts"`
}
