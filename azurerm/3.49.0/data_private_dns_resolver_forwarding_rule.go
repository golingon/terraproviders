// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	dataprivatednsresolverforwardingrule "github.com/golingon/terraproviders/azurerm/3.49.0/dataprivatednsresolverforwardingrule"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataPrivateDnsResolverForwardingRule(name string, args DataPrivateDnsResolverForwardingRuleArgs) *DataPrivateDnsResolverForwardingRule {
	return &DataPrivateDnsResolverForwardingRule{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataPrivateDnsResolverForwardingRule)(nil)

type DataPrivateDnsResolverForwardingRule struct {
	Name string
	Args DataPrivateDnsResolverForwardingRuleArgs
}

func (pdrfr *DataPrivateDnsResolverForwardingRule) DataSource() string {
	return "azurerm_private_dns_resolver_forwarding_rule"
}

func (pdrfr *DataPrivateDnsResolverForwardingRule) LocalName() string {
	return pdrfr.Name
}

func (pdrfr *DataPrivateDnsResolverForwardingRule) Configuration() interface{} {
	return pdrfr.Args
}

func (pdrfr *DataPrivateDnsResolverForwardingRule) Attributes() dataPrivateDnsResolverForwardingRuleAttributes {
	return dataPrivateDnsResolverForwardingRuleAttributes{ref: terra.ReferenceDataResource(pdrfr)}
}

type DataPrivateDnsResolverForwardingRuleArgs struct {
	// DnsForwardingRulesetId: string, required
	DnsForwardingRulesetId terra.StringValue `hcl:"dns_forwarding_ruleset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetDnsServers: min=0
	TargetDnsServers []dataprivatednsresolverforwardingrule.TargetDnsServers `hcl:"target_dns_servers,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataprivatednsresolverforwardingrule.Timeouts `hcl:"timeouts,block"`
}
type dataPrivateDnsResolverForwardingRuleAttributes struct {
	ref terra.Reference
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) DnsForwardingRulesetId() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("dns_forwarding_ruleset_id"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("domain_name"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(pdrfr.ref.Append("enabled"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("id"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdrfr.ref.Append("metadata"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("name"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) TargetDnsServers() terra.ListValue[dataprivatednsresolverforwardingrule.TargetDnsServersAttributes] {
	return terra.ReferenceList[dataprivatednsresolverforwardingrule.TargetDnsServersAttributes](pdrfr.ref.Append("target_dns_servers"))
}

func (pdrfr dataPrivateDnsResolverForwardingRuleAttributes) Timeouts() dataprivatednsresolverforwardingrule.TimeoutsAttributes {
	return terra.ReferenceSingle[dataprivatednsresolverforwardingrule.TimeoutsAttributes](pdrfr.ref.Append("timeouts"))
}
