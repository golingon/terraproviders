// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subscription "github.com/golingon/terraproviders/azurerm/3.49.0/subscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubscription(name string, args SubscriptionArgs) *Subscription {
	return &Subscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Subscription)(nil)

type Subscription struct {
	Name  string
	Args  SubscriptionArgs
	state *subscriptionState
}

func (s *Subscription) Type() string {
	return "azurerm_subscription"
}

func (s *Subscription) LocalName() string {
	return s.Name
}

func (s *Subscription) Configuration() interface{} {
	return s.Args
}

func (s *Subscription) Attributes() subscriptionAttributes {
	return subscriptionAttributes{ref: terra.ReferenceResource(s)}
}

func (s *Subscription) ImportState(av io.Reader) error {
	s.state = &subscriptionState{}
	if err := json.NewDecoder(av).Decode(s.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", s.Type(), s.LocalName(), err)
	}
	return nil
}

func (s *Subscription) State() (*subscriptionState, bool) {
	return s.state, s.state != nil
}

func (s *Subscription) StateMust() *subscriptionState {
	if s.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", s.Type(), s.LocalName()))
	}
	return s.state
}

func (s *Subscription) DependOn() terra.Reference {
	return terra.ReferenceResource(s)
}

type SubscriptionArgs struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// BillingScopeId: string, optional
	BillingScopeId terra.StringValue `hcl:"billing_scope_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubscriptionId: string, optional
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr"`
	// SubscriptionName: string, required
	SubscriptionName terra.StringValue `hcl:"subscription_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Workload: string, optional
	Workload terra.StringValue `hcl:"workload,attr"`
	// Timeouts: optional
	Timeouts *subscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Subscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subscriptionAttributes struct {
	ref terra.Reference
}

func (s subscriptionAttributes) Alias() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("alias"))
}

func (s subscriptionAttributes) BillingScopeId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("billing_scope_id"))
}

func (s subscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("id"))
}

func (s subscriptionAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("subscription_id"))
}

func (s subscriptionAttributes) SubscriptionName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("subscription_name"))
}

func (s subscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](s.ref.Append("tags"))
}

func (s subscriptionAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("tenant_id"))
}

func (s subscriptionAttributes) Workload() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("workload"))
}

func (s subscriptionAttributes) Timeouts() subscription.TimeoutsAttributes {
	return terra.ReferenceSingle[subscription.TimeoutsAttributes](s.ref.Append("timeouts"))
}

type subscriptionState struct {
	Alias            string                      `json:"alias"`
	BillingScopeId   string                      `json:"billing_scope_id"`
	Id               string                      `json:"id"`
	SubscriptionId   string                      `json:"subscription_id"`
	SubscriptionName string                      `json:"subscription_name"`
	Tags             map[string]string           `json:"tags"`
	TenantId         string                      `json:"tenant_id"`
	Workload         string                      `json:"workload"`
	Timeouts         *subscription.TimeoutsState `json:"timeouts"`
}
