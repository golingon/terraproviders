// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	consumptionbudgetresourcegroup "github.com/golingon/terraproviders/azurerm/3.49.0/consumptionbudgetresourcegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConsumptionBudgetResourceGroup(name string, args ConsumptionBudgetResourceGroupArgs) *ConsumptionBudgetResourceGroup {
	return &ConsumptionBudgetResourceGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConsumptionBudgetResourceGroup)(nil)

type ConsumptionBudgetResourceGroup struct {
	Name  string
	Args  ConsumptionBudgetResourceGroupArgs
	state *consumptionBudgetResourceGroupState
}

func (cbrg *ConsumptionBudgetResourceGroup) Type() string {
	return "azurerm_consumption_budget_resource_group"
}

func (cbrg *ConsumptionBudgetResourceGroup) LocalName() string {
	return cbrg.Name
}

func (cbrg *ConsumptionBudgetResourceGroup) Configuration() interface{} {
	return cbrg.Args
}

func (cbrg *ConsumptionBudgetResourceGroup) Attributes() consumptionBudgetResourceGroupAttributes {
	return consumptionBudgetResourceGroupAttributes{ref: terra.ReferenceResource(cbrg)}
}

func (cbrg *ConsumptionBudgetResourceGroup) ImportState(av io.Reader) error {
	cbrg.state = &consumptionBudgetResourceGroupState{}
	if err := json.NewDecoder(av).Decode(cbrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cbrg.Type(), cbrg.LocalName(), err)
	}
	return nil
}

func (cbrg *ConsumptionBudgetResourceGroup) State() (*consumptionBudgetResourceGroupState, bool) {
	return cbrg.state, cbrg.state != nil
}

func (cbrg *ConsumptionBudgetResourceGroup) StateMust() *consumptionBudgetResourceGroupState {
	if cbrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cbrg.Type(), cbrg.LocalName()))
	}
	return cbrg.state
}

func (cbrg *ConsumptionBudgetResourceGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cbrg)
}

type ConsumptionBudgetResourceGroupArgs struct {
	// Amount: number, required
	Amount terra.NumberValue `hcl:"amount,attr" validate:"required"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// TimeGrain: string, optional
	TimeGrain terra.StringValue `hcl:"time_grain,attr"`
	// Filter: optional
	Filter *consumptionbudgetresourcegroup.Filter `hcl:"filter,block"`
	// Notification: min=1,max=5
	Notification []consumptionbudgetresourcegroup.Notification `hcl:"notification,block" validate:"min=1,max=5"`
	// TimePeriod: required
	TimePeriod *consumptionbudgetresourcegroup.TimePeriod `hcl:"time_period,block" validate:"required"`
	// Timeouts: optional
	Timeouts *consumptionbudgetresourcegroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ConsumptionBudgetResourceGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type consumptionBudgetResourceGroupAttributes struct {
	ref terra.Reference
}

func (cbrg consumptionBudgetResourceGroupAttributes) Amount() terra.NumberValue {
	return terra.ReferenceNumber(cbrg.ref.Append("amount"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(cbrg.ref.Append("etag"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cbrg.ref.Append("id"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cbrg.ref.Append("name"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceString(cbrg.ref.Append("resource_group_id"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) TimeGrain() terra.StringValue {
	return terra.ReferenceString(cbrg.ref.Append("time_grain"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Filter() terra.ListValue[consumptionbudgetresourcegroup.FilterAttributes] {
	return terra.ReferenceList[consumptionbudgetresourcegroup.FilterAttributes](cbrg.ref.Append("filter"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Notification() terra.SetValue[consumptionbudgetresourcegroup.NotificationAttributes] {
	return terra.ReferenceSet[consumptionbudgetresourcegroup.NotificationAttributes](cbrg.ref.Append("notification"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) TimePeriod() terra.ListValue[consumptionbudgetresourcegroup.TimePeriodAttributes] {
	return terra.ReferenceList[consumptionbudgetresourcegroup.TimePeriodAttributes](cbrg.ref.Append("time_period"))
}

func (cbrg consumptionBudgetResourceGroupAttributes) Timeouts() consumptionbudgetresourcegroup.TimeoutsAttributes {
	return terra.ReferenceSingle[consumptionbudgetresourcegroup.TimeoutsAttributes](cbrg.ref.Append("timeouts"))
}

type consumptionBudgetResourceGroupState struct {
	Amount          float64                                            `json:"amount"`
	Etag            string                                             `json:"etag"`
	Id              string                                             `json:"id"`
	Name            string                                             `json:"name"`
	ResourceGroupId string                                             `json:"resource_group_id"`
	TimeGrain       string                                             `json:"time_grain"`
	Filter          []consumptionbudgetresourcegroup.FilterState       `json:"filter"`
	Notification    []consumptionbudgetresourcegroup.NotificationState `json:"notification"`
	TimePeriod      []consumptionbudgetresourcegroup.TimePeriodState   `json:"time_period"`
	Timeouts        *consumptionbudgetresourcegroup.TimeoutsState      `json:"timeouts"`
}
