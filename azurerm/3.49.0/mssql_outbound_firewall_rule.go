// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqloutboundfirewallrule "github.com/golingon/terraproviders/azurerm/3.49.0/mssqloutboundfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlOutboundFirewallRule(name string, args MssqlOutboundFirewallRuleArgs) *MssqlOutboundFirewallRule {
	return &MssqlOutboundFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlOutboundFirewallRule)(nil)

type MssqlOutboundFirewallRule struct {
	Name  string
	Args  MssqlOutboundFirewallRuleArgs
	state *mssqlOutboundFirewallRuleState
}

func (mofr *MssqlOutboundFirewallRule) Type() string {
	return "azurerm_mssql_outbound_firewall_rule"
}

func (mofr *MssqlOutboundFirewallRule) LocalName() string {
	return mofr.Name
}

func (mofr *MssqlOutboundFirewallRule) Configuration() interface{} {
	return mofr.Args
}

func (mofr *MssqlOutboundFirewallRule) Attributes() mssqlOutboundFirewallRuleAttributes {
	return mssqlOutboundFirewallRuleAttributes{ref: terra.ReferenceResource(mofr)}
}

func (mofr *MssqlOutboundFirewallRule) ImportState(av io.Reader) error {
	mofr.state = &mssqlOutboundFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(mofr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mofr.Type(), mofr.LocalName(), err)
	}
	return nil
}

func (mofr *MssqlOutboundFirewallRule) State() (*mssqlOutboundFirewallRuleState, bool) {
	return mofr.state, mofr.state != nil
}

func (mofr *MssqlOutboundFirewallRule) StateMust() *mssqlOutboundFirewallRuleState {
	if mofr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mofr.Type(), mofr.LocalName()))
	}
	return mofr.state
}

func (mofr *MssqlOutboundFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mofr)
}

type MssqlOutboundFirewallRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqloutboundfirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlOutboundFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlOutboundFirewallRuleAttributes struct {
	ref terra.Reference
}

func (mofr mssqlOutboundFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mofr.ref.Append("id"))
}

func (mofr mssqlOutboundFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mofr.ref.Append("name"))
}

func (mofr mssqlOutboundFirewallRuleAttributes) ServerId() terra.StringValue {
	return terra.ReferenceString(mofr.ref.Append("server_id"))
}

func (mofr mssqlOutboundFirewallRuleAttributes) Timeouts() mssqloutboundfirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqloutboundfirewallrule.TimeoutsAttributes](mofr.ref.Append("timeouts"))
}

type mssqlOutboundFirewallRuleState struct {
	Id       string                                   `json:"id"`
	Name     string                                   `json:"name"`
	ServerId string                                   `json:"server_id"`
	Timeouts *mssqloutboundfirewallrule.TimeoutsState `json:"timeouts"`
}
