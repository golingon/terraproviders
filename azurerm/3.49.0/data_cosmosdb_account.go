// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datacosmosdbaccount "github.com/golingon/terraproviders/azurerm/3.49.0/datacosmosdbaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataCosmosdbAccount(name string, args DataCosmosdbAccountArgs) *DataCosmosdbAccount {
	return &DataCosmosdbAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataCosmosdbAccount)(nil)

type DataCosmosdbAccount struct {
	Name string
	Args DataCosmosdbAccountArgs
}

func (ca *DataCosmosdbAccount) DataSource() string {
	return "azurerm_cosmosdb_account"
}

func (ca *DataCosmosdbAccount) LocalName() string {
	return ca.Name
}

func (ca *DataCosmosdbAccount) Configuration() interface{} {
	return ca.Args
}

func (ca *DataCosmosdbAccount) Attributes() dataCosmosdbAccountAttributes {
	return dataCosmosdbAccountAttributes{ref: terra.ReferenceDataResource(ca)}
}

type DataCosmosdbAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Capabilities: min=0
	Capabilities []datacosmosdbaccount.Capabilities `hcl:"capabilities,block" validate:"min=0"`
	// ConsistencyPolicy: min=0
	ConsistencyPolicy []datacosmosdbaccount.ConsistencyPolicy `hcl:"consistency_policy,block" validate:"min=0"`
	// GeoLocation: min=0
	GeoLocation []datacosmosdbaccount.GeoLocation `hcl:"geo_location,block" validate:"min=0"`
	// VirtualNetworkRule: min=0
	VirtualNetworkRule []datacosmosdbaccount.VirtualNetworkRule `hcl:"virtual_network_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datacosmosdbaccount.Timeouts `hcl:"timeouts,block"`
}
type dataCosmosdbAccountAttributes struct {
	ref terra.Reference
}

func (ca dataCosmosdbAccountAttributes) EnableAutomaticFailover() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("enable_automatic_failover"))
}

func (ca dataCosmosdbAccountAttributes) EnableFreeTier() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("enable_free_tier"))
}

func (ca dataCosmosdbAccountAttributes) EnableMultipleWriteLocations() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("enable_multiple_write_locations"))
}

func (ca dataCosmosdbAccountAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("endpoint"))
}

func (ca dataCosmosdbAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("id"))
}

func (ca dataCosmosdbAccountAttributes) IpRangeFilter() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("ip_range_filter"))
}

func (ca dataCosmosdbAccountAttributes) IsVirtualNetworkFilterEnabled() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("is_virtual_network_filter_enabled"))
}

func (ca dataCosmosdbAccountAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("key_vault_key_id"))
}

func (ca dataCosmosdbAccountAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("kind"))
}

func (ca dataCosmosdbAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("location"))
}

func (ca dataCosmosdbAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("name"))
}

func (ca dataCosmosdbAccountAttributes) OfferType() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("offer_type"))
}

func (ca dataCosmosdbAccountAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("primary_key"))
}

func (ca dataCosmosdbAccountAttributes) PrimaryReadonlyKey() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("primary_readonly_key"))
}

func (ca dataCosmosdbAccountAttributes) ReadEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ca.ref.Append("read_endpoints"))
}

func (ca dataCosmosdbAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("resource_group_name"))
}

func (ca dataCosmosdbAccountAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("secondary_key"))
}

func (ca dataCosmosdbAccountAttributes) SecondaryReadonlyKey() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("secondary_readonly_key"))
}

func (ca dataCosmosdbAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ca.ref.Append("tags"))
}

func (ca dataCosmosdbAccountAttributes) WriteEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ca.ref.Append("write_endpoints"))
}

func (ca dataCosmosdbAccountAttributes) Capabilities() terra.ListValue[datacosmosdbaccount.CapabilitiesAttributes] {
	return terra.ReferenceList[datacosmosdbaccount.CapabilitiesAttributes](ca.ref.Append("capabilities"))
}

func (ca dataCosmosdbAccountAttributes) ConsistencyPolicy() terra.ListValue[datacosmosdbaccount.ConsistencyPolicyAttributes] {
	return terra.ReferenceList[datacosmosdbaccount.ConsistencyPolicyAttributes](ca.ref.Append("consistency_policy"))
}

func (ca dataCosmosdbAccountAttributes) GeoLocation() terra.ListValue[datacosmosdbaccount.GeoLocationAttributes] {
	return terra.ReferenceList[datacosmosdbaccount.GeoLocationAttributes](ca.ref.Append("geo_location"))
}

func (ca dataCosmosdbAccountAttributes) VirtualNetworkRule() terra.ListValue[datacosmosdbaccount.VirtualNetworkRuleAttributes] {
	return terra.ReferenceList[datacosmosdbaccount.VirtualNetworkRuleAttributes](ca.ref.Append("virtual_network_rule"))
}

func (ca dataCosmosdbAccountAttributes) Timeouts() datacosmosdbaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[datacosmosdbaccount.TimeoutsAttributes](ca.ref.Append("timeouts"))
}
