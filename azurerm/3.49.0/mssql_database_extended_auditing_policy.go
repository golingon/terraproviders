// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqldatabaseextendedauditingpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/mssqldatabaseextendedauditingpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlDatabaseExtendedAuditingPolicy(name string, args MssqlDatabaseExtendedAuditingPolicyArgs) *MssqlDatabaseExtendedAuditingPolicy {
	return &MssqlDatabaseExtendedAuditingPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlDatabaseExtendedAuditingPolicy)(nil)

type MssqlDatabaseExtendedAuditingPolicy struct {
	Name  string
	Args  MssqlDatabaseExtendedAuditingPolicyArgs
	state *mssqlDatabaseExtendedAuditingPolicyState
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) Type() string {
	return "azurerm_mssql_database_extended_auditing_policy"
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) LocalName() string {
	return mdeap.Name
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) Configuration() interface{} {
	return mdeap.Args
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) Attributes() mssqlDatabaseExtendedAuditingPolicyAttributes {
	return mssqlDatabaseExtendedAuditingPolicyAttributes{ref: terra.ReferenceResource(mdeap)}
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) ImportState(av io.Reader) error {
	mdeap.state = &mssqlDatabaseExtendedAuditingPolicyState{}
	if err := json.NewDecoder(av).Decode(mdeap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdeap.Type(), mdeap.LocalName(), err)
	}
	return nil
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) State() (*mssqlDatabaseExtendedAuditingPolicyState, bool) {
	return mdeap.state, mdeap.state != nil
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) StateMust() *mssqlDatabaseExtendedAuditingPolicyState {
	if mdeap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdeap.Type(), mdeap.LocalName()))
	}
	return mdeap.state
}

func (mdeap *MssqlDatabaseExtendedAuditingPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(mdeap)
}

type MssqlDatabaseExtendedAuditingPolicyArgs struct {
	// DatabaseId: string, required
	DatabaseId terra.StringValue `hcl:"database_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogMonitoringEnabled: bool, optional
	LogMonitoringEnabled terra.BoolValue `hcl:"log_monitoring_enabled,attr"`
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageAccountAccessKeyIsSecondary: bool, optional
	StorageAccountAccessKeyIsSecondary terra.BoolValue `hcl:"storage_account_access_key_is_secondary,attr"`
	// StorageEndpoint: string, optional
	StorageEndpoint terra.StringValue `hcl:"storage_endpoint,attr"`
	// Timeouts: optional
	Timeouts *mssqldatabaseextendedauditingpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlDatabaseExtendedAuditingPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlDatabaseExtendedAuditingPolicyAttributes struct {
	ref terra.Reference
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) DatabaseId() terra.StringValue {
	return terra.ReferenceString(mdeap.ref.Append("database_id"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(mdeap.ref.Append("enabled"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mdeap.ref.Append("id"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) LogMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceBool(mdeap.ref.Append("log_monitoring_enabled"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceNumber(mdeap.ref.Append("retention_in_days"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(mdeap.ref.Append("storage_account_access_key"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) StorageAccountAccessKeyIsSecondary() terra.BoolValue {
	return terra.ReferenceBool(mdeap.ref.Append("storage_account_access_key_is_secondary"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) StorageEndpoint() terra.StringValue {
	return terra.ReferenceString(mdeap.ref.Append("storage_endpoint"))
}

func (mdeap mssqlDatabaseExtendedAuditingPolicyAttributes) Timeouts() mssqldatabaseextendedauditingpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqldatabaseextendedauditingpolicy.TimeoutsAttributes](mdeap.ref.Append("timeouts"))
}

type mssqlDatabaseExtendedAuditingPolicyState struct {
	DatabaseId                         string                                             `json:"database_id"`
	Enabled                            bool                                               `json:"enabled"`
	Id                                 string                                             `json:"id"`
	LogMonitoringEnabled               bool                                               `json:"log_monitoring_enabled"`
	RetentionInDays                    float64                                            `json:"retention_in_days"`
	StorageAccountAccessKey            string                                             `json:"storage_account_access_key"`
	StorageAccountAccessKeyIsSecondary bool                                               `json:"storage_account_access_key_is_secondary"`
	StorageEndpoint                    string                                             `json:"storage_endpoint"`
	Timeouts                           *mssqldatabaseextendedauditingpolicy.TimeoutsState `json:"timeouts"`
}
