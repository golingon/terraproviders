// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logicappintegrationaccountagreement "github.com/golingon/terraproviders/azurerm/3.49.0/logicappintegrationaccountagreement"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogicAppIntegrationAccountAgreement(name string, args LogicAppIntegrationAccountAgreementArgs) *LogicAppIntegrationAccountAgreement {
	return &LogicAppIntegrationAccountAgreement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogicAppIntegrationAccountAgreement)(nil)

type LogicAppIntegrationAccountAgreement struct {
	Name  string
	Args  LogicAppIntegrationAccountAgreementArgs
	state *logicAppIntegrationAccountAgreementState
}

func (laiaa *LogicAppIntegrationAccountAgreement) Type() string {
	return "azurerm_logic_app_integration_account_agreement"
}

func (laiaa *LogicAppIntegrationAccountAgreement) LocalName() string {
	return laiaa.Name
}

func (laiaa *LogicAppIntegrationAccountAgreement) Configuration() interface{} {
	return laiaa.Args
}

func (laiaa *LogicAppIntegrationAccountAgreement) Attributes() logicAppIntegrationAccountAgreementAttributes {
	return logicAppIntegrationAccountAgreementAttributes{ref: terra.ReferenceResource(laiaa)}
}

func (laiaa *LogicAppIntegrationAccountAgreement) ImportState(av io.Reader) error {
	laiaa.state = &logicAppIntegrationAccountAgreementState{}
	if err := json.NewDecoder(av).Decode(laiaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", laiaa.Type(), laiaa.LocalName(), err)
	}
	return nil
}

func (laiaa *LogicAppIntegrationAccountAgreement) State() (*logicAppIntegrationAccountAgreementState, bool) {
	return laiaa.state, laiaa.state != nil
}

func (laiaa *LogicAppIntegrationAccountAgreement) StateMust() *logicAppIntegrationAccountAgreementState {
	if laiaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", laiaa.Type(), laiaa.LocalName()))
	}
	return laiaa.state
}

func (laiaa *LogicAppIntegrationAccountAgreement) DependOn() terra.Reference {
	return terra.ReferenceResource(laiaa)
}

type LogicAppIntegrationAccountAgreementArgs struct {
	// AgreementType: string, required
	AgreementType terra.StringValue `hcl:"agreement_type,attr" validate:"required"`
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// GuestPartnerName: string, required
	GuestPartnerName terra.StringValue `hcl:"guest_partner_name,attr" validate:"required"`
	// HostPartnerName: string, required
	HostPartnerName terra.StringValue `hcl:"host_partner_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationAccountName: string, required
	IntegrationAccountName terra.StringValue `hcl:"integration_account_name,attr" validate:"required"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// GuestIdentity: required
	GuestIdentity *logicappintegrationaccountagreement.GuestIdentity `hcl:"guest_identity,block" validate:"required"`
	// HostIdentity: required
	HostIdentity *logicappintegrationaccountagreement.HostIdentity `hcl:"host_identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *logicappintegrationaccountagreement.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogicAppIntegrationAccountAgreement depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logicAppIntegrationAccountAgreementAttributes struct {
	ref terra.Reference
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) AgreementType() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("agreement_type"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) Content() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("content"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) GuestPartnerName() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("guest_partner_name"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) HostPartnerName() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("host_partner_name"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) Id() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("id"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) IntegrationAccountName() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("integration_account_name"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](laiaa.ref.Append("metadata"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) Name() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("name"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(laiaa.ref.Append("resource_group_name"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) GuestIdentity() terra.ListValue[logicappintegrationaccountagreement.GuestIdentityAttributes] {
	return terra.ReferenceList[logicappintegrationaccountagreement.GuestIdentityAttributes](laiaa.ref.Append("guest_identity"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) HostIdentity() terra.ListValue[logicappintegrationaccountagreement.HostIdentityAttributes] {
	return terra.ReferenceList[logicappintegrationaccountagreement.HostIdentityAttributes](laiaa.ref.Append("host_identity"))
}

func (laiaa logicAppIntegrationAccountAgreementAttributes) Timeouts() logicappintegrationaccountagreement.TimeoutsAttributes {
	return terra.ReferenceSingle[logicappintegrationaccountagreement.TimeoutsAttributes](laiaa.ref.Append("timeouts"))
}

type logicAppIntegrationAccountAgreementState struct {
	AgreementType          string                                                   `json:"agreement_type"`
	Content                string                                                   `json:"content"`
	GuestPartnerName       string                                                   `json:"guest_partner_name"`
	HostPartnerName        string                                                   `json:"host_partner_name"`
	Id                     string                                                   `json:"id"`
	IntegrationAccountName string                                                   `json:"integration_account_name"`
	Metadata               map[string]string                                        `json:"metadata"`
	Name                   string                                                   `json:"name"`
	ResourceGroupName      string                                                   `json:"resource_group_name"`
	GuestIdentity          []logicappintegrationaccountagreement.GuestIdentityState `json:"guest_identity"`
	HostIdentity           []logicappintegrationaccountagreement.HostIdentityState  `json:"host_identity"`
	Timeouts               *logicappintegrationaccountagreement.TimeoutsState       `json:"timeouts"`
}
