// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnprofile "github.com/golingon/terraproviders/azurerm/3.49.0/cdnprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnProfile(name string, args CdnProfileArgs) *CdnProfile {
	return &CdnProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnProfile)(nil)

type CdnProfile struct {
	Name  string
	Args  CdnProfileArgs
	state *cdnProfileState
}

func (cp *CdnProfile) Type() string {
	return "azurerm_cdn_profile"
}

func (cp *CdnProfile) LocalName() string {
	return cp.Name
}

func (cp *CdnProfile) Configuration() interface{} {
	return cp.Args
}

func (cp *CdnProfile) Attributes() cdnProfileAttributes {
	return cdnProfileAttributes{ref: terra.ReferenceResource(cp)}
}

func (cp *CdnProfile) ImportState(av io.Reader) error {
	cp.state = &cdnProfileState{}
	if err := json.NewDecoder(av).Decode(cp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cp.Type(), cp.LocalName(), err)
	}
	return nil
}

func (cp *CdnProfile) State() (*cdnProfileState, bool) {
	return cp.state, cp.state != nil
}

func (cp *CdnProfile) StateMust() *cdnProfileState {
	if cp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cp.Type(), cp.LocalName()))
	}
	return cp.state
}

func (cp *CdnProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(cp)
}

type CdnProfileArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *cdnprofile.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CdnProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnProfileAttributes struct {
	ref terra.Reference
}

func (cp cdnProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("id"))
}

func (cp cdnProfileAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("location"))
}

func (cp cdnProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("name"))
}

func (cp cdnProfileAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("resource_group_name"))
}

func (cp cdnProfileAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("sku"))
}

func (cp cdnProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp cdnProfileAttributes) Timeouts() cdnprofile.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnprofile.TimeoutsAttributes](cp.ref.Append("timeouts"))
}

type cdnProfileState struct {
	Id                string                    `json:"id"`
	Location          string                    `json:"location"`
	Name              string                    `json:"name"`
	ResourceGroupName string                    `json:"resource_group_name"`
	Sku               string                    `json:"sku"`
	Tags              map[string]string         `json:"tags"`
	Timeouts          *cdnprofile.TimeoutsState `json:"timeouts"`
}
