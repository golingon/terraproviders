// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package routefilter

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rule struct {
	// Access: string, optional
	Access terra.StringValue `hcl:"access,attr"`
	// Communities: list of string, optional
	Communities terra.ListValue[terra.StringValue] `hcl:"communities,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RuleType: string, optional
	RuleType terra.StringValue `hcl:"rule_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Access() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("access"))
}

func (r RuleAttributes) Communities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](r.ref.Append("communities"))
}

func (r RuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("name"))
}

func (r RuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("rule_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type RuleState struct {
	Access      string   `json:"access"`
	Communities []string `json:"communities"`
	Name        string   `json:"name"`
	RuleType    string   `json:"rule_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
