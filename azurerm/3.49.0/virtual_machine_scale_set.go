// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualmachinescaleset "github.com/golingon/terraproviders/azurerm/3.49.0/virtualmachinescaleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualMachineScaleSet(name string, args VirtualMachineScaleSetArgs) *VirtualMachineScaleSet {
	return &VirtualMachineScaleSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualMachineScaleSet)(nil)

type VirtualMachineScaleSet struct {
	Name  string
	Args  VirtualMachineScaleSetArgs
	state *virtualMachineScaleSetState
}

func (vmss *VirtualMachineScaleSet) Type() string {
	return "azurerm_virtual_machine_scale_set"
}

func (vmss *VirtualMachineScaleSet) LocalName() string {
	return vmss.Name
}

func (vmss *VirtualMachineScaleSet) Configuration() interface{} {
	return vmss.Args
}

func (vmss *VirtualMachineScaleSet) Attributes() virtualMachineScaleSetAttributes {
	return virtualMachineScaleSetAttributes{ref: terra.ReferenceResource(vmss)}
}

func (vmss *VirtualMachineScaleSet) ImportState(av io.Reader) error {
	vmss.state = &virtualMachineScaleSetState{}
	if err := json.NewDecoder(av).Decode(vmss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmss.Type(), vmss.LocalName(), err)
	}
	return nil
}

func (vmss *VirtualMachineScaleSet) State() (*virtualMachineScaleSetState, bool) {
	return vmss.state, vmss.state != nil
}

func (vmss *VirtualMachineScaleSet) StateMust() *virtualMachineScaleSetState {
	if vmss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmss.Type(), vmss.LocalName()))
	}
	return vmss.state
}

func (vmss *VirtualMachineScaleSet) DependOn() terra.Reference {
	return terra.ReferenceResource(vmss)
}

type VirtualMachineScaleSetArgs struct {
	// AutomaticOsUpgrade: bool, optional
	AutomaticOsUpgrade terra.BoolValue `hcl:"automatic_os_upgrade,attr"`
	// EvictionPolicy: string, optional
	EvictionPolicy terra.StringValue `hcl:"eviction_policy,attr"`
	// HealthProbeId: string, optional
	HealthProbeId terra.StringValue `hcl:"health_probe_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Overprovision: bool, optional
	Overprovision terra.BoolValue `hcl:"overprovision,attr"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// ProximityPlacementGroupId: string, optional
	ProximityPlacementGroupId terra.StringValue `hcl:"proximity_placement_group_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SinglePlacementGroup: bool, optional
	SinglePlacementGroup terra.BoolValue `hcl:"single_placement_group,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UpgradePolicyMode: string, required
	UpgradePolicyMode terra.StringValue `hcl:"upgrade_policy_mode,attr" validate:"required"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// BootDiagnostics: optional
	BootDiagnostics *virtualmachinescaleset.BootDiagnostics `hcl:"boot_diagnostics,block"`
	// Extension: min=0
	Extension []virtualmachinescaleset.Extension `hcl:"extension,block" validate:"min=0"`
	// Identity: optional
	Identity *virtualmachinescaleset.Identity `hcl:"identity,block"`
	// NetworkProfile: min=1
	NetworkProfile []virtualmachinescaleset.NetworkProfile `hcl:"network_profile,block" validate:"min=1"`
	// OsProfile: required
	OsProfile *virtualmachinescaleset.OsProfile `hcl:"os_profile,block" validate:"required"`
	// OsProfileLinuxConfig: optional
	OsProfileLinuxConfig *virtualmachinescaleset.OsProfileLinuxConfig `hcl:"os_profile_linux_config,block"`
	// OsProfileSecrets: min=0
	OsProfileSecrets []virtualmachinescaleset.OsProfileSecrets `hcl:"os_profile_secrets,block" validate:"min=0"`
	// OsProfileWindowsConfig: optional
	OsProfileWindowsConfig *virtualmachinescaleset.OsProfileWindowsConfig `hcl:"os_profile_windows_config,block"`
	// Plan: optional
	Plan *virtualmachinescaleset.Plan `hcl:"plan,block"`
	// RollingUpgradePolicy: optional
	RollingUpgradePolicy *virtualmachinescaleset.RollingUpgradePolicy `hcl:"rolling_upgrade_policy,block"`
	// Sku: required
	Sku *virtualmachinescaleset.Sku `hcl:"sku,block" validate:"required"`
	// StorageProfileDataDisk: min=0
	StorageProfileDataDisk []virtualmachinescaleset.StorageProfileDataDisk `hcl:"storage_profile_data_disk,block" validate:"min=0"`
	// StorageProfileImageReference: optional
	StorageProfileImageReference *virtualmachinescaleset.StorageProfileImageReference `hcl:"storage_profile_image_reference,block"`
	// StorageProfileOsDisk: required
	StorageProfileOsDisk *virtualmachinescaleset.StorageProfileOsDisk `hcl:"storage_profile_os_disk,block" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualmachinescaleset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualMachineScaleSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualMachineScaleSetAttributes struct {
	ref terra.Reference
}

func (vmss virtualMachineScaleSetAttributes) AutomaticOsUpgrade() terra.BoolValue {
	return terra.ReferenceBool(vmss.ref.Append("automatic_os_upgrade"))
}

func (vmss virtualMachineScaleSetAttributes) EvictionPolicy() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("eviction_policy"))
}

func (vmss virtualMachineScaleSetAttributes) HealthProbeId() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("health_probe_id"))
}

func (vmss virtualMachineScaleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("id"))
}

func (vmss virtualMachineScaleSetAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("license_type"))
}

func (vmss virtualMachineScaleSetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("location"))
}

func (vmss virtualMachineScaleSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("name"))
}

func (vmss virtualMachineScaleSetAttributes) Overprovision() terra.BoolValue {
	return terra.ReferenceBool(vmss.ref.Append("overprovision"))
}

func (vmss virtualMachineScaleSetAttributes) Priority() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("priority"))
}

func (vmss virtualMachineScaleSetAttributes) ProximityPlacementGroupId() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("proximity_placement_group_id"))
}

func (vmss virtualMachineScaleSetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("resource_group_name"))
}

func (vmss virtualMachineScaleSetAttributes) SinglePlacementGroup() terra.BoolValue {
	return terra.ReferenceBool(vmss.ref.Append("single_placement_group"))
}

func (vmss virtualMachineScaleSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vmss.ref.Append("tags"))
}

func (vmss virtualMachineScaleSetAttributes) UpgradePolicyMode() terra.StringValue {
	return terra.ReferenceString(vmss.ref.Append("upgrade_policy_mode"))
}

func (vmss virtualMachineScaleSetAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](vmss.ref.Append("zones"))
}

func (vmss virtualMachineScaleSetAttributes) BootDiagnostics() terra.ListValue[virtualmachinescaleset.BootDiagnosticsAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.BootDiagnosticsAttributes](vmss.ref.Append("boot_diagnostics"))
}

func (vmss virtualMachineScaleSetAttributes) Extension() terra.SetValue[virtualmachinescaleset.ExtensionAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.ExtensionAttributes](vmss.ref.Append("extension"))
}

func (vmss virtualMachineScaleSetAttributes) Identity() terra.ListValue[virtualmachinescaleset.IdentityAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.IdentityAttributes](vmss.ref.Append("identity"))
}

func (vmss virtualMachineScaleSetAttributes) NetworkProfile() terra.SetValue[virtualmachinescaleset.NetworkProfileAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.NetworkProfileAttributes](vmss.ref.Append("network_profile"))
}

func (vmss virtualMachineScaleSetAttributes) OsProfile() terra.ListValue[virtualmachinescaleset.OsProfileAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.OsProfileAttributes](vmss.ref.Append("os_profile"))
}

func (vmss virtualMachineScaleSetAttributes) OsProfileLinuxConfig() terra.SetValue[virtualmachinescaleset.OsProfileLinuxConfigAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.OsProfileLinuxConfigAttributes](vmss.ref.Append("os_profile_linux_config"))
}

func (vmss virtualMachineScaleSetAttributes) OsProfileSecrets() terra.SetValue[virtualmachinescaleset.OsProfileSecretsAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.OsProfileSecretsAttributes](vmss.ref.Append("os_profile_secrets"))
}

func (vmss virtualMachineScaleSetAttributes) OsProfileWindowsConfig() terra.SetValue[virtualmachinescaleset.OsProfileWindowsConfigAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.OsProfileWindowsConfigAttributes](vmss.ref.Append("os_profile_windows_config"))
}

func (vmss virtualMachineScaleSetAttributes) Plan() terra.SetValue[virtualmachinescaleset.PlanAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.PlanAttributes](vmss.ref.Append("plan"))
}

func (vmss virtualMachineScaleSetAttributes) RollingUpgradePolicy() terra.ListValue[virtualmachinescaleset.RollingUpgradePolicyAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.RollingUpgradePolicyAttributes](vmss.ref.Append("rolling_upgrade_policy"))
}

func (vmss virtualMachineScaleSetAttributes) Sku() terra.ListValue[virtualmachinescaleset.SkuAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.SkuAttributes](vmss.ref.Append("sku"))
}

func (vmss virtualMachineScaleSetAttributes) StorageProfileDataDisk() terra.ListValue[virtualmachinescaleset.StorageProfileDataDiskAttributes] {
	return terra.ReferenceList[virtualmachinescaleset.StorageProfileDataDiskAttributes](vmss.ref.Append("storage_profile_data_disk"))
}

func (vmss virtualMachineScaleSetAttributes) StorageProfileImageReference() terra.SetValue[virtualmachinescaleset.StorageProfileImageReferenceAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.StorageProfileImageReferenceAttributes](vmss.ref.Append("storage_profile_image_reference"))
}

func (vmss virtualMachineScaleSetAttributes) StorageProfileOsDisk() terra.SetValue[virtualmachinescaleset.StorageProfileOsDiskAttributes] {
	return terra.ReferenceSet[virtualmachinescaleset.StorageProfileOsDiskAttributes](vmss.ref.Append("storage_profile_os_disk"))
}

func (vmss virtualMachineScaleSetAttributes) Timeouts() virtualmachinescaleset.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualmachinescaleset.TimeoutsAttributes](vmss.ref.Append("timeouts"))
}

type virtualMachineScaleSetState struct {
	AutomaticOsUpgrade           bool                                                       `json:"automatic_os_upgrade"`
	EvictionPolicy               string                                                     `json:"eviction_policy"`
	HealthProbeId                string                                                     `json:"health_probe_id"`
	Id                           string                                                     `json:"id"`
	LicenseType                  string                                                     `json:"license_type"`
	Location                     string                                                     `json:"location"`
	Name                         string                                                     `json:"name"`
	Overprovision                bool                                                       `json:"overprovision"`
	Priority                     string                                                     `json:"priority"`
	ProximityPlacementGroupId    string                                                     `json:"proximity_placement_group_id"`
	ResourceGroupName            string                                                     `json:"resource_group_name"`
	SinglePlacementGroup         bool                                                       `json:"single_placement_group"`
	Tags                         map[string]string                                          `json:"tags"`
	UpgradePolicyMode            string                                                     `json:"upgrade_policy_mode"`
	Zones                        []string                                                   `json:"zones"`
	BootDiagnostics              []virtualmachinescaleset.BootDiagnosticsState              `json:"boot_diagnostics"`
	Extension                    []virtualmachinescaleset.ExtensionState                    `json:"extension"`
	Identity                     []virtualmachinescaleset.IdentityState                     `json:"identity"`
	NetworkProfile               []virtualmachinescaleset.NetworkProfileState               `json:"network_profile"`
	OsProfile                    []virtualmachinescaleset.OsProfileState                    `json:"os_profile"`
	OsProfileLinuxConfig         []virtualmachinescaleset.OsProfileLinuxConfigState         `json:"os_profile_linux_config"`
	OsProfileSecrets             []virtualmachinescaleset.OsProfileSecretsState             `json:"os_profile_secrets"`
	OsProfileWindowsConfig       []virtualmachinescaleset.OsProfileWindowsConfigState       `json:"os_profile_windows_config"`
	Plan                         []virtualmachinescaleset.PlanState                         `json:"plan"`
	RollingUpgradePolicy         []virtualmachinescaleset.RollingUpgradePolicyState         `json:"rolling_upgrade_policy"`
	Sku                          []virtualmachinescaleset.SkuState                          `json:"sku"`
	StorageProfileDataDisk       []virtualmachinescaleset.StorageProfileDataDiskState       `json:"storage_profile_data_disk"`
	StorageProfileImageReference []virtualmachinescaleset.StorageProfileImageReferenceState `json:"storage_profile_image_reference"`
	StorageProfileOsDisk         []virtualmachinescaleset.StorageProfileOsDiskState         `json:"storage_profile_os_disk"`
	Timeouts                     *virtualmachinescaleset.TimeoutsState                      `json:"timeouts"`
}
