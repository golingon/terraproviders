// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnfrontdoorcustomdomain "github.com/golingon/terraproviders/azurerm/3.49.0/cdnfrontdoorcustomdomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnFrontdoorCustomDomain(name string, args CdnFrontdoorCustomDomainArgs) *CdnFrontdoorCustomDomain {
	return &CdnFrontdoorCustomDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnFrontdoorCustomDomain)(nil)

type CdnFrontdoorCustomDomain struct {
	Name  string
	Args  CdnFrontdoorCustomDomainArgs
	state *cdnFrontdoorCustomDomainState
}

func (cfcd *CdnFrontdoorCustomDomain) Type() string {
	return "azurerm_cdn_frontdoor_custom_domain"
}

func (cfcd *CdnFrontdoorCustomDomain) LocalName() string {
	return cfcd.Name
}

func (cfcd *CdnFrontdoorCustomDomain) Configuration() interface{} {
	return cfcd.Args
}

func (cfcd *CdnFrontdoorCustomDomain) Attributes() cdnFrontdoorCustomDomainAttributes {
	return cdnFrontdoorCustomDomainAttributes{ref: terra.ReferenceResource(cfcd)}
}

func (cfcd *CdnFrontdoorCustomDomain) ImportState(av io.Reader) error {
	cfcd.state = &cdnFrontdoorCustomDomainState{}
	if err := json.NewDecoder(av).Decode(cfcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfcd.Type(), cfcd.LocalName(), err)
	}
	return nil
}

func (cfcd *CdnFrontdoorCustomDomain) State() (*cdnFrontdoorCustomDomainState, bool) {
	return cfcd.state, cfcd.state != nil
}

func (cfcd *CdnFrontdoorCustomDomain) StateMust() *cdnFrontdoorCustomDomainState {
	if cfcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfcd.Type(), cfcd.LocalName()))
	}
	return cfcd.state
}

func (cfcd *CdnFrontdoorCustomDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(cfcd)
}

type CdnFrontdoorCustomDomainArgs struct {
	// CdnFrontdoorProfileId: string, required
	CdnFrontdoorProfileId terra.StringValue `hcl:"cdn_frontdoor_profile_id,attr" validate:"required"`
	// DnsZoneId: string, optional
	DnsZoneId terra.StringValue `hcl:"dns_zone_id,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cdnfrontdoorcustomdomain.Timeouts `hcl:"timeouts,block"`
	// Tls: required
	Tls *cdnfrontdoorcustomdomain.Tls `hcl:"tls,block" validate:"required"`
	// DependsOn contains resources that CdnFrontdoorCustomDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnFrontdoorCustomDomainAttributes struct {
	ref terra.Reference
}

func (cfcd cdnFrontdoorCustomDomainAttributes) CdnFrontdoorProfileId() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("cdn_frontdoor_profile_id"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) DnsZoneId() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("dns_zone_id"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("expiration_date"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("host_name"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("id"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("name"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) ValidationToken() terra.StringValue {
	return terra.ReferenceString(cfcd.ref.Append("validation_token"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) Timeouts() cdnfrontdoorcustomdomain.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnfrontdoorcustomdomain.TimeoutsAttributes](cfcd.ref.Append("timeouts"))
}

func (cfcd cdnFrontdoorCustomDomainAttributes) Tls() terra.ListValue[cdnfrontdoorcustomdomain.TlsAttributes] {
	return terra.ReferenceList[cdnfrontdoorcustomdomain.TlsAttributes](cfcd.ref.Append("tls"))
}

type cdnFrontdoorCustomDomainState struct {
	CdnFrontdoorProfileId string                                  `json:"cdn_frontdoor_profile_id"`
	DnsZoneId             string                                  `json:"dns_zone_id"`
	ExpirationDate        string                                  `json:"expiration_date"`
	HostName              string                                  `json:"host_name"`
	Id                    string                                  `json:"id"`
	Name                  string                                  `json:"name"`
	ValidationToken       string                                  `json:"validation_token"`
	Timeouts              *cdnfrontdoorcustomdomain.TimeoutsState `json:"timeouts"`
	Tls                   []cdnfrontdoorcustomdomain.TlsState     `json:"tls"`
}
