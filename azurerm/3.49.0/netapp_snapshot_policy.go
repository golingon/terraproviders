// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	netappsnapshotpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/netappsnapshotpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetappSnapshotPolicy(name string, args NetappSnapshotPolicyArgs) *NetappSnapshotPolicy {
	return &NetappSnapshotPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappSnapshotPolicy)(nil)

type NetappSnapshotPolicy struct {
	Name  string
	Args  NetappSnapshotPolicyArgs
	state *netappSnapshotPolicyState
}

func (nsp *NetappSnapshotPolicy) Type() string {
	return "azurerm_netapp_snapshot_policy"
}

func (nsp *NetappSnapshotPolicy) LocalName() string {
	return nsp.Name
}

func (nsp *NetappSnapshotPolicy) Configuration() interface{} {
	return nsp.Args
}

func (nsp *NetappSnapshotPolicy) Attributes() netappSnapshotPolicyAttributes {
	return netappSnapshotPolicyAttributes{ref: terra.ReferenceResource(nsp)}
}

func (nsp *NetappSnapshotPolicy) ImportState(av io.Reader) error {
	nsp.state = &netappSnapshotPolicyState{}
	if err := json.NewDecoder(av).Decode(nsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsp.Type(), nsp.LocalName(), err)
	}
	return nil
}

func (nsp *NetappSnapshotPolicy) State() (*netappSnapshotPolicyState, bool) {
	return nsp.state, nsp.state != nil
}

func (nsp *NetappSnapshotPolicy) StateMust() *netappSnapshotPolicyState {
	if nsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsp.Type(), nsp.LocalName()))
	}
	return nsp.state
}

func (nsp *NetappSnapshotPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nsp)
}

type NetappSnapshotPolicyArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DailySchedule: optional
	DailySchedule *netappsnapshotpolicy.DailySchedule `hcl:"daily_schedule,block"`
	// HourlySchedule: optional
	HourlySchedule *netappsnapshotpolicy.HourlySchedule `hcl:"hourly_schedule,block"`
	// MonthlySchedule: optional
	MonthlySchedule *netappsnapshotpolicy.MonthlySchedule `hcl:"monthly_schedule,block"`
	// Timeouts: optional
	Timeouts *netappsnapshotpolicy.Timeouts `hcl:"timeouts,block"`
	// WeeklySchedule: optional
	WeeklySchedule *netappsnapshotpolicy.WeeklySchedule `hcl:"weekly_schedule,block"`
	// DependsOn contains resources that NetappSnapshotPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type netappSnapshotPolicyAttributes struct {
	ref terra.Reference
}

func (nsp netappSnapshotPolicyAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("account_name"))
}

func (nsp netappSnapshotPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(nsp.ref.Append("enabled"))
}

func (nsp netappSnapshotPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("id"))
}

func (nsp netappSnapshotPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("location"))
}

func (nsp netappSnapshotPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("name"))
}

func (nsp netappSnapshotPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("resource_group_name"))
}

func (nsp netappSnapshotPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nsp.ref.Append("tags"))
}

func (nsp netappSnapshotPolicyAttributes) DailySchedule() terra.ListValue[netappsnapshotpolicy.DailyScheduleAttributes] {
	return terra.ReferenceList[netappsnapshotpolicy.DailyScheduleAttributes](nsp.ref.Append("daily_schedule"))
}

func (nsp netappSnapshotPolicyAttributes) HourlySchedule() terra.ListValue[netappsnapshotpolicy.HourlyScheduleAttributes] {
	return terra.ReferenceList[netappsnapshotpolicy.HourlyScheduleAttributes](nsp.ref.Append("hourly_schedule"))
}

func (nsp netappSnapshotPolicyAttributes) MonthlySchedule() terra.ListValue[netappsnapshotpolicy.MonthlyScheduleAttributes] {
	return terra.ReferenceList[netappsnapshotpolicy.MonthlyScheduleAttributes](nsp.ref.Append("monthly_schedule"))
}

func (nsp netappSnapshotPolicyAttributes) Timeouts() netappsnapshotpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[netappsnapshotpolicy.TimeoutsAttributes](nsp.ref.Append("timeouts"))
}

func (nsp netappSnapshotPolicyAttributes) WeeklySchedule() terra.ListValue[netappsnapshotpolicy.WeeklyScheduleAttributes] {
	return terra.ReferenceList[netappsnapshotpolicy.WeeklyScheduleAttributes](nsp.ref.Append("weekly_schedule"))
}

type netappSnapshotPolicyState struct {
	AccountName       string                                      `json:"account_name"`
	Enabled           bool                                        `json:"enabled"`
	Id                string                                      `json:"id"`
	Location          string                                      `json:"location"`
	Name              string                                      `json:"name"`
	ResourceGroupName string                                      `json:"resource_group_name"`
	Tags              map[string]string                           `json:"tags"`
	DailySchedule     []netappsnapshotpolicy.DailyScheduleState   `json:"daily_schedule"`
	HourlySchedule    []netappsnapshotpolicy.HourlyScheduleState  `json:"hourly_schedule"`
	MonthlySchedule   []netappsnapshotpolicy.MonthlyScheduleState `json:"monthly_schedule"`
	Timeouts          *netappsnapshotpolicy.TimeoutsState         `json:"timeouts"`
	WeeklySchedule    []netappsnapshotpolicy.WeeklyScheduleState  `json:"weekly_schedule"`
}
