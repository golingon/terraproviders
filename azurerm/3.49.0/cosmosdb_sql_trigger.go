// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqltrigger "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqltrigger"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlTrigger(name string, args CosmosdbSqlTriggerArgs) *CosmosdbSqlTrigger {
	return &CosmosdbSqlTrigger{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlTrigger)(nil)

type CosmosdbSqlTrigger struct {
	Name  string
	Args  CosmosdbSqlTriggerArgs
	state *cosmosdbSqlTriggerState
}

func (cst *CosmosdbSqlTrigger) Type() string {
	return "azurerm_cosmosdb_sql_trigger"
}

func (cst *CosmosdbSqlTrigger) LocalName() string {
	return cst.Name
}

func (cst *CosmosdbSqlTrigger) Configuration() interface{} {
	return cst.Args
}

func (cst *CosmosdbSqlTrigger) Attributes() cosmosdbSqlTriggerAttributes {
	return cosmosdbSqlTriggerAttributes{ref: terra.ReferenceResource(cst)}
}

func (cst *CosmosdbSqlTrigger) ImportState(av io.Reader) error {
	cst.state = &cosmosdbSqlTriggerState{}
	if err := json.NewDecoder(av).Decode(cst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cst.Type(), cst.LocalName(), err)
	}
	return nil
}

func (cst *CosmosdbSqlTrigger) State() (*cosmosdbSqlTriggerState, bool) {
	return cst.state, cst.state != nil
}

func (cst *CosmosdbSqlTrigger) StateMust() *cosmosdbSqlTriggerState {
	if cst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cst.Type(), cst.LocalName()))
	}
	return cst.state
}

func (cst *CosmosdbSqlTrigger) DependOn() terra.Reference {
	return terra.ReferenceResource(cst)
}

type CosmosdbSqlTriggerArgs struct {
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// ContainerId: string, required
	ContainerId terra.StringValue `hcl:"container_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operation: string, required
	Operation terra.StringValue `hcl:"operation,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbsqltrigger.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlTrigger depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlTriggerAttributes struct {
	ref terra.Reference
}

func (cst cosmosdbSqlTriggerAttributes) Body() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("body"))
}

func (cst cosmosdbSqlTriggerAttributes) ContainerId() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("container_id"))
}

func (cst cosmosdbSqlTriggerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("id"))
}

func (cst cosmosdbSqlTriggerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("name"))
}

func (cst cosmosdbSqlTriggerAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("operation"))
}

func (cst cosmosdbSqlTriggerAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cst.ref.Append("type"))
}

func (cst cosmosdbSqlTriggerAttributes) Timeouts() cosmosdbsqltrigger.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqltrigger.TimeoutsAttributes](cst.ref.Append("timeouts"))
}

type cosmosdbSqlTriggerState struct {
	Body        string                            `json:"body"`
	ContainerId string                            `json:"container_id"`
	Id          string                            `json:"id"`
	Name        string                            `json:"name"`
	Operation   string                            `json:"operation"`
	Type        string                            `json:"type"`
	Timeouts    *cosmosdbsqltrigger.TimeoutsState `json:"timeouts"`
}
