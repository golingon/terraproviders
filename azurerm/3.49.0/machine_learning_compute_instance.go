// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	machinelearningcomputeinstance "github.com/golingon/terraproviders/azurerm/3.49.0/machinelearningcomputeinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMachineLearningComputeInstance(name string, args MachineLearningComputeInstanceArgs) *MachineLearningComputeInstance {
	return &MachineLearningComputeInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MachineLearningComputeInstance)(nil)

type MachineLearningComputeInstance struct {
	Name  string
	Args  MachineLearningComputeInstanceArgs
	state *machineLearningComputeInstanceState
}

func (mlci *MachineLearningComputeInstance) Type() string {
	return "azurerm_machine_learning_compute_instance"
}

func (mlci *MachineLearningComputeInstance) LocalName() string {
	return mlci.Name
}

func (mlci *MachineLearningComputeInstance) Configuration() interface{} {
	return mlci.Args
}

func (mlci *MachineLearningComputeInstance) Attributes() machineLearningComputeInstanceAttributes {
	return machineLearningComputeInstanceAttributes{ref: terra.ReferenceResource(mlci)}
}

func (mlci *MachineLearningComputeInstance) ImportState(av io.Reader) error {
	mlci.state = &machineLearningComputeInstanceState{}
	if err := json.NewDecoder(av).Decode(mlci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mlci.Type(), mlci.LocalName(), err)
	}
	return nil
}

func (mlci *MachineLearningComputeInstance) State() (*machineLearningComputeInstanceState, bool) {
	return mlci.state, mlci.state != nil
}

func (mlci *MachineLearningComputeInstance) StateMust() *machineLearningComputeInstanceState {
	if mlci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mlci.Type(), mlci.LocalName()))
	}
	return mlci.state
}

func (mlci *MachineLearningComputeInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(mlci)
}

type MachineLearningComputeInstanceArgs struct {
	// AuthorizationType: string, optional
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineLearningWorkspaceId: string, required
	MachineLearningWorkspaceId terra.StringValue `hcl:"machine_learning_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetResourceId: string, optional
	SubnetResourceId terra.StringValue `hcl:"subnet_resource_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// AssignToUser: optional
	AssignToUser *machinelearningcomputeinstance.AssignToUser `hcl:"assign_to_user,block"`
	// Identity: optional
	Identity *machinelearningcomputeinstance.Identity `hcl:"identity,block"`
	// Ssh: optional
	Ssh *machinelearningcomputeinstance.Ssh `hcl:"ssh,block"`
	// Timeouts: optional
	Timeouts *machinelearningcomputeinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MachineLearningComputeInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type machineLearningComputeInstanceAttributes struct {
	ref terra.Reference
}

func (mlci machineLearningComputeInstanceAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("authorization_type"))
}

func (mlci machineLearningComputeInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("description"))
}

func (mlci machineLearningComputeInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("id"))
}

func (mlci machineLearningComputeInstanceAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(mlci.ref.Append("local_auth_enabled"))
}

func (mlci machineLearningComputeInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("location"))
}

func (mlci machineLearningComputeInstanceAttributes) MachineLearningWorkspaceId() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("machine_learning_workspace_id"))
}

func (mlci machineLearningComputeInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("name"))
}

func (mlci machineLearningComputeInstanceAttributes) SubnetResourceId() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("subnet_resource_id"))
}

func (mlci machineLearningComputeInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mlci.ref.Append("tags"))
}

func (mlci machineLearningComputeInstanceAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceString(mlci.ref.Append("virtual_machine_size"))
}

func (mlci machineLearningComputeInstanceAttributes) AssignToUser() terra.ListValue[machinelearningcomputeinstance.AssignToUserAttributes] {
	return terra.ReferenceList[machinelearningcomputeinstance.AssignToUserAttributes](mlci.ref.Append("assign_to_user"))
}

func (mlci machineLearningComputeInstanceAttributes) Identity() terra.ListValue[machinelearningcomputeinstance.IdentityAttributes] {
	return terra.ReferenceList[machinelearningcomputeinstance.IdentityAttributes](mlci.ref.Append("identity"))
}

func (mlci machineLearningComputeInstanceAttributes) Ssh() terra.ListValue[machinelearningcomputeinstance.SshAttributes] {
	return terra.ReferenceList[machinelearningcomputeinstance.SshAttributes](mlci.ref.Append("ssh"))
}

func (mlci machineLearningComputeInstanceAttributes) Timeouts() machinelearningcomputeinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[machinelearningcomputeinstance.TimeoutsAttributes](mlci.ref.Append("timeouts"))
}

type machineLearningComputeInstanceState struct {
	AuthorizationType          string                                             `json:"authorization_type"`
	Description                string                                             `json:"description"`
	Id                         string                                             `json:"id"`
	LocalAuthEnabled           bool                                               `json:"local_auth_enabled"`
	Location                   string                                             `json:"location"`
	MachineLearningWorkspaceId string                                             `json:"machine_learning_workspace_id"`
	Name                       string                                             `json:"name"`
	SubnetResourceId           string                                             `json:"subnet_resource_id"`
	Tags                       map[string]string                                  `json:"tags"`
	VirtualMachineSize         string                                             `json:"virtual_machine_size"`
	AssignToUser               []machinelearningcomputeinstance.AssignToUserState `json:"assign_to_user"`
	Identity                   []machinelearningcomputeinstance.IdentityState     `json:"identity"`
	Ssh                        []machinelearningcomputeinstance.SshState          `json:"ssh"`
	Timeouts                   *machinelearningcomputeinstance.TimeoutsState      `json:"timeouts"`
}
