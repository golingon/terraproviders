// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementcustomdomain "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementcustomdomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementCustomDomain(name string, args ApiManagementCustomDomainArgs) *ApiManagementCustomDomain {
	return &ApiManagementCustomDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementCustomDomain)(nil)

type ApiManagementCustomDomain struct {
	Name  string
	Args  ApiManagementCustomDomainArgs
	state *apiManagementCustomDomainState
}

func (amcd *ApiManagementCustomDomain) Type() string {
	return "azurerm_api_management_custom_domain"
}

func (amcd *ApiManagementCustomDomain) LocalName() string {
	return amcd.Name
}

func (amcd *ApiManagementCustomDomain) Configuration() interface{} {
	return amcd.Args
}

func (amcd *ApiManagementCustomDomain) Attributes() apiManagementCustomDomainAttributes {
	return apiManagementCustomDomainAttributes{ref: terra.ReferenceResource(amcd)}
}

func (amcd *ApiManagementCustomDomain) ImportState(av io.Reader) error {
	amcd.state = &apiManagementCustomDomainState{}
	if err := json.NewDecoder(av).Decode(amcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amcd.Type(), amcd.LocalName(), err)
	}
	return nil
}

func (amcd *ApiManagementCustomDomain) State() (*apiManagementCustomDomainState, bool) {
	return amcd.state, amcd.state != nil
}

func (amcd *ApiManagementCustomDomain) StateMust() *apiManagementCustomDomainState {
	if amcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amcd.Type(), amcd.LocalName()))
	}
	return amcd.state
}

func (amcd *ApiManagementCustomDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(amcd)
}

type ApiManagementCustomDomainArgs struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DeveloperPortal: min=0
	DeveloperPortal []apimanagementcustomdomain.DeveloperPortal `hcl:"developer_portal,block" validate:"min=0"`
	// Gateway: min=0
	Gateway []apimanagementcustomdomain.Gateway `hcl:"gateway,block" validate:"min=0"`
	// Management: min=0
	Management []apimanagementcustomdomain.Management `hcl:"management,block" validate:"min=0"`
	// Portal: min=0
	Portal []apimanagementcustomdomain.Portal `hcl:"portal,block" validate:"min=0"`
	// Scm: min=0
	Scm []apimanagementcustomdomain.Scm `hcl:"scm,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *apimanagementcustomdomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementCustomDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementCustomDomainAttributes struct {
	ref terra.Reference
}

func (amcd apiManagementCustomDomainAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceString(amcd.ref.Append("api_management_id"))
}

func (amcd apiManagementCustomDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amcd.ref.Append("id"))
}

func (amcd apiManagementCustomDomainAttributes) DeveloperPortal() terra.ListValue[apimanagementcustomdomain.DeveloperPortalAttributes] {
	return terra.ReferenceList[apimanagementcustomdomain.DeveloperPortalAttributes](amcd.ref.Append("developer_portal"))
}

func (amcd apiManagementCustomDomainAttributes) Gateway() terra.ListValue[apimanagementcustomdomain.GatewayAttributes] {
	return terra.ReferenceList[apimanagementcustomdomain.GatewayAttributes](amcd.ref.Append("gateway"))
}

func (amcd apiManagementCustomDomainAttributes) Management() terra.ListValue[apimanagementcustomdomain.ManagementAttributes] {
	return terra.ReferenceList[apimanagementcustomdomain.ManagementAttributes](amcd.ref.Append("management"))
}

func (amcd apiManagementCustomDomainAttributes) Portal() terra.ListValue[apimanagementcustomdomain.PortalAttributes] {
	return terra.ReferenceList[apimanagementcustomdomain.PortalAttributes](amcd.ref.Append("portal"))
}

func (amcd apiManagementCustomDomainAttributes) Scm() terra.ListValue[apimanagementcustomdomain.ScmAttributes] {
	return terra.ReferenceList[apimanagementcustomdomain.ScmAttributes](amcd.ref.Append("scm"))
}

func (amcd apiManagementCustomDomainAttributes) Timeouts() apimanagementcustomdomain.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementcustomdomain.TimeoutsAttributes](amcd.ref.Append("timeouts"))
}

type apiManagementCustomDomainState struct {
	ApiManagementId string                                           `json:"api_management_id"`
	Id              string                                           `json:"id"`
	DeveloperPortal []apimanagementcustomdomain.DeveloperPortalState `json:"developer_portal"`
	Gateway         []apimanagementcustomdomain.GatewayState         `json:"gateway"`
	Management      []apimanagementcustomdomain.ManagementState      `json:"management"`
	Portal          []apimanagementcustomdomain.PortalState          `json:"portal"`
	Scm             []apimanagementcustomdomain.ScmState             `json:"scm"`
	Timeouts        *apimanagementcustomdomain.TimeoutsState         `json:"timeouts"`
}
