// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	linuxfunctionappslot "github.com/golingon/terraproviders/azurerm/3.49.0/linuxfunctionappslot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLinuxFunctionAppSlot(name string, args LinuxFunctionAppSlotArgs) *LinuxFunctionAppSlot {
	return &LinuxFunctionAppSlot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LinuxFunctionAppSlot)(nil)

type LinuxFunctionAppSlot struct {
	Name  string
	Args  LinuxFunctionAppSlotArgs
	state *linuxFunctionAppSlotState
}

func (lfas *LinuxFunctionAppSlot) Type() string {
	return "azurerm_linux_function_app_slot"
}

func (lfas *LinuxFunctionAppSlot) LocalName() string {
	return lfas.Name
}

func (lfas *LinuxFunctionAppSlot) Configuration() interface{} {
	return lfas.Args
}

func (lfas *LinuxFunctionAppSlot) Attributes() linuxFunctionAppSlotAttributes {
	return linuxFunctionAppSlotAttributes{ref: terra.ReferenceResource(lfas)}
}

func (lfas *LinuxFunctionAppSlot) ImportState(av io.Reader) error {
	lfas.state = &linuxFunctionAppSlotState{}
	if err := json.NewDecoder(av).Decode(lfas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lfas.Type(), lfas.LocalName(), err)
	}
	return nil
}

func (lfas *LinuxFunctionAppSlot) State() (*linuxFunctionAppSlotState, bool) {
	return lfas.state, lfas.state != nil
}

func (lfas *LinuxFunctionAppSlot) StateMust() *linuxFunctionAppSlotState {
	if lfas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lfas.Type(), lfas.LocalName()))
	}
	return lfas.state
}

func (lfas *LinuxFunctionAppSlot) DependOn() terra.Reference {
	return terra.ReferenceResource(lfas)
}

type LinuxFunctionAppSlotArgs struct {
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// BuiltinLoggingEnabled: bool, optional
	BuiltinLoggingEnabled terra.BoolValue `hcl:"builtin_logging_enabled,attr"`
	// ClientCertificateEnabled: bool, optional
	ClientCertificateEnabled terra.BoolValue `hcl:"client_certificate_enabled,attr"`
	// ClientCertificateExclusionPaths: string, optional
	ClientCertificateExclusionPaths terra.StringValue `hcl:"client_certificate_exclusion_paths,attr"`
	// ClientCertificateMode: string, optional
	ClientCertificateMode terra.StringValue `hcl:"client_certificate_mode,attr"`
	// ContentShareForceDisabled: bool, optional
	ContentShareForceDisabled terra.BoolValue `hcl:"content_share_force_disabled,attr"`
	// DailyMemoryTimeQuota: number, optional
	DailyMemoryTimeQuota terra.NumberValue `hcl:"daily_memory_time_quota,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FunctionAppId: string, required
	FunctionAppId terra.StringValue `hcl:"function_app_id,attr" validate:"required"`
	// FunctionsExtensionVersion: string, optional
	FunctionsExtensionVersion terra.StringValue `hcl:"functions_extension_version,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultReferenceIdentityId: string, optional
	KeyVaultReferenceIdentityId terra.StringValue `hcl:"key_vault_reference_identity_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServicePlanId: string, optional
	ServicePlanId terra.StringValue `hcl:"service_plan_id,attr"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// StorageKeyVaultSecretId: string, optional
	StorageKeyVaultSecretId terra.StringValue `hcl:"storage_key_vault_secret_id,attr"`
	// StorageUsesManagedIdentity: bool, optional
	StorageUsesManagedIdentity terra.BoolValue `hcl:"storage_uses_managed_identity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteCredential: min=0
	SiteCredential []linuxfunctionappslot.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// AuthSettings: optional
	AuthSettings *linuxfunctionappslot.AuthSettings `hcl:"auth_settings,block"`
	// AuthSettingsV2: optional
	AuthSettingsV2 *linuxfunctionappslot.AuthSettingsV2 `hcl:"auth_settings_v2,block"`
	// Backup: optional
	Backup *linuxfunctionappslot.Backup `hcl:"backup,block"`
	// ConnectionString: min=0
	ConnectionString []linuxfunctionappslot.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *linuxfunctionappslot.Identity `hcl:"identity,block"`
	// SiteConfig: required
	SiteConfig *linuxfunctionappslot.SiteConfig `hcl:"site_config,block" validate:"required"`
	// StorageAccount: min=0
	StorageAccount []linuxfunctionappslot.StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *linuxfunctionappslot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LinuxFunctionAppSlot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type linuxFunctionAppSlotAttributes struct {
	ref terra.Reference
}

func (lfas linuxFunctionAppSlotAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lfas.ref.Append("app_settings"))
}

func (lfas linuxFunctionAppSlotAttributes) BuiltinLoggingEnabled() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("builtin_logging_enabled"))
}

func (lfas linuxFunctionAppSlotAttributes) ClientCertificateEnabled() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("client_certificate_enabled"))
}

func (lfas linuxFunctionAppSlotAttributes) ClientCertificateExclusionPaths() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("client_certificate_exclusion_paths"))
}

func (lfas linuxFunctionAppSlotAttributes) ClientCertificateMode() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("client_certificate_mode"))
}

func (lfas linuxFunctionAppSlotAttributes) ContentShareForceDisabled() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("content_share_force_disabled"))
}

func (lfas linuxFunctionAppSlotAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("custom_domain_verification_id"))
}

func (lfas linuxFunctionAppSlotAttributes) DailyMemoryTimeQuota() terra.NumberValue {
	return terra.ReferenceNumber(lfas.ref.Append("daily_memory_time_quota"))
}

func (lfas linuxFunctionAppSlotAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("default_hostname"))
}

func (lfas linuxFunctionAppSlotAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("enabled"))
}

func (lfas linuxFunctionAppSlotAttributes) FunctionAppId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("function_app_id"))
}

func (lfas linuxFunctionAppSlotAttributes) FunctionsExtensionVersion() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("functions_extension_version"))
}

func (lfas linuxFunctionAppSlotAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("https_only"))
}

func (lfas linuxFunctionAppSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("id"))
}

func (lfas linuxFunctionAppSlotAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("key_vault_reference_identity_id"))
}

func (lfas linuxFunctionAppSlotAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("kind"))
}

func (lfas linuxFunctionAppSlotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("name"))
}

func (lfas linuxFunctionAppSlotAttributes) OutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lfas.ref.Append("outbound_ip_address_list"))
}

func (lfas linuxFunctionAppSlotAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("outbound_ip_addresses"))
}

func (lfas linuxFunctionAppSlotAttributes) PossibleOutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lfas.ref.Append("possible_outbound_ip_address_list"))
}

func (lfas linuxFunctionAppSlotAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("possible_outbound_ip_addresses"))
}

func (lfas linuxFunctionAppSlotAttributes) ServicePlanId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("service_plan_id"))
}

func (lfas linuxFunctionAppSlotAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("storage_account_access_key"))
}

func (lfas linuxFunctionAppSlotAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("storage_account_name"))
}

func (lfas linuxFunctionAppSlotAttributes) StorageKeyVaultSecretId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("storage_key_vault_secret_id"))
}

func (lfas linuxFunctionAppSlotAttributes) StorageUsesManagedIdentity() terra.BoolValue {
	return terra.ReferenceBool(lfas.ref.Append("storage_uses_managed_identity"))
}

func (lfas linuxFunctionAppSlotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lfas.ref.Append("tags"))
}

func (lfas linuxFunctionAppSlotAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceString(lfas.ref.Append("virtual_network_subnet_id"))
}

func (lfas linuxFunctionAppSlotAttributes) SiteCredential() terra.ListValue[linuxfunctionappslot.SiteCredentialAttributes] {
	return terra.ReferenceList[linuxfunctionappslot.SiteCredentialAttributes](lfas.ref.Append("site_credential"))
}

func (lfas linuxFunctionAppSlotAttributes) AuthSettings() terra.ListValue[linuxfunctionappslot.AuthSettingsAttributes] {
	return terra.ReferenceList[linuxfunctionappslot.AuthSettingsAttributes](lfas.ref.Append("auth_settings"))
}

func (lfas linuxFunctionAppSlotAttributes) AuthSettingsV2() terra.ListValue[linuxfunctionappslot.AuthSettingsV2Attributes] {
	return terra.ReferenceList[linuxfunctionappslot.AuthSettingsV2Attributes](lfas.ref.Append("auth_settings_v2"))
}

func (lfas linuxFunctionAppSlotAttributes) Backup() terra.ListValue[linuxfunctionappslot.BackupAttributes] {
	return terra.ReferenceList[linuxfunctionappslot.BackupAttributes](lfas.ref.Append("backup"))
}

func (lfas linuxFunctionAppSlotAttributes) ConnectionString() terra.SetValue[linuxfunctionappslot.ConnectionStringAttributes] {
	return terra.ReferenceSet[linuxfunctionappslot.ConnectionStringAttributes](lfas.ref.Append("connection_string"))
}

func (lfas linuxFunctionAppSlotAttributes) Identity() terra.ListValue[linuxfunctionappslot.IdentityAttributes] {
	return terra.ReferenceList[linuxfunctionappslot.IdentityAttributes](lfas.ref.Append("identity"))
}

func (lfas linuxFunctionAppSlotAttributes) SiteConfig() terra.ListValue[linuxfunctionappslot.SiteConfigAttributes] {
	return terra.ReferenceList[linuxfunctionappslot.SiteConfigAttributes](lfas.ref.Append("site_config"))
}

func (lfas linuxFunctionAppSlotAttributes) StorageAccount() terra.SetValue[linuxfunctionappslot.StorageAccountAttributes] {
	return terra.ReferenceSet[linuxfunctionappslot.StorageAccountAttributes](lfas.ref.Append("storage_account"))
}

func (lfas linuxFunctionAppSlotAttributes) Timeouts() linuxfunctionappslot.TimeoutsAttributes {
	return terra.ReferenceSingle[linuxfunctionappslot.TimeoutsAttributes](lfas.ref.Append("timeouts"))
}

type linuxFunctionAppSlotState struct {
	AppSettings                     map[string]string                            `json:"app_settings"`
	BuiltinLoggingEnabled           bool                                         `json:"builtin_logging_enabled"`
	ClientCertificateEnabled        bool                                         `json:"client_certificate_enabled"`
	ClientCertificateExclusionPaths string                                       `json:"client_certificate_exclusion_paths"`
	ClientCertificateMode           string                                       `json:"client_certificate_mode"`
	ContentShareForceDisabled       bool                                         `json:"content_share_force_disabled"`
	CustomDomainVerificationId      string                                       `json:"custom_domain_verification_id"`
	DailyMemoryTimeQuota            float64                                      `json:"daily_memory_time_quota"`
	DefaultHostname                 string                                       `json:"default_hostname"`
	Enabled                         bool                                         `json:"enabled"`
	FunctionAppId                   string                                       `json:"function_app_id"`
	FunctionsExtensionVersion       string                                       `json:"functions_extension_version"`
	HttpsOnly                       bool                                         `json:"https_only"`
	Id                              string                                       `json:"id"`
	KeyVaultReferenceIdentityId     string                                       `json:"key_vault_reference_identity_id"`
	Kind                            string                                       `json:"kind"`
	Name                            string                                       `json:"name"`
	OutboundIpAddressList           []string                                     `json:"outbound_ip_address_list"`
	OutboundIpAddresses             string                                       `json:"outbound_ip_addresses"`
	PossibleOutboundIpAddressList   []string                                     `json:"possible_outbound_ip_address_list"`
	PossibleOutboundIpAddresses     string                                       `json:"possible_outbound_ip_addresses"`
	ServicePlanId                   string                                       `json:"service_plan_id"`
	StorageAccountAccessKey         string                                       `json:"storage_account_access_key"`
	StorageAccountName              string                                       `json:"storage_account_name"`
	StorageKeyVaultSecretId         string                                       `json:"storage_key_vault_secret_id"`
	StorageUsesManagedIdentity      bool                                         `json:"storage_uses_managed_identity"`
	Tags                            map[string]string                            `json:"tags"`
	VirtualNetworkSubnetId          string                                       `json:"virtual_network_subnet_id"`
	SiteCredential                  []linuxfunctionappslot.SiteCredentialState   `json:"site_credential"`
	AuthSettings                    []linuxfunctionappslot.AuthSettingsState     `json:"auth_settings"`
	AuthSettingsV2                  []linuxfunctionappslot.AuthSettingsV2State   `json:"auth_settings_v2"`
	Backup                          []linuxfunctionappslot.BackupState           `json:"backup"`
	ConnectionString                []linuxfunctionappslot.ConnectionStringState `json:"connection_string"`
	Identity                        []linuxfunctionappslot.IdentityState         `json:"identity"`
	SiteConfig                      []linuxfunctionappslot.SiteConfigState       `json:"site_config"`
	StorageAccount                  []linuxfunctionappslot.StorageAccountState   `json:"storage_account"`
	Timeouts                        *linuxfunctionappslot.TimeoutsState          `json:"timeouts"`
}
