// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	customprovider "github.com/golingon/terraproviders/azurerm/3.49.0/customprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCustomProvider(name string, args CustomProviderArgs) *CustomProvider {
	return &CustomProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CustomProvider)(nil)

type CustomProvider struct {
	Name  string
	Args  CustomProviderArgs
	state *customProviderState
}

func (cp *CustomProvider) Type() string {
	return "azurerm_custom_provider"
}

func (cp *CustomProvider) LocalName() string {
	return cp.Name
}

func (cp *CustomProvider) Configuration() interface{} {
	return cp.Args
}

func (cp *CustomProvider) Attributes() customProviderAttributes {
	return customProviderAttributes{ref: terra.ReferenceResource(cp)}
}

func (cp *CustomProvider) ImportState(av io.Reader) error {
	cp.state = &customProviderState{}
	if err := json.NewDecoder(av).Decode(cp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cp.Type(), cp.LocalName(), err)
	}
	return nil
}

func (cp *CustomProvider) State() (*customProviderState, bool) {
	return cp.state, cp.state != nil
}

func (cp *CustomProvider) StateMust() *customProviderState {
	if cp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cp.Type(), cp.LocalName()))
	}
	return cp.state
}

func (cp *CustomProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(cp)
}

type CustomProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=0
	Action []customprovider.Action `hcl:"action,block" validate:"min=0"`
	// ResourceType: min=0
	ResourceType []customprovider.ResourceType `hcl:"resource_type,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *customprovider.Timeouts `hcl:"timeouts,block"`
	// Validation: min=0
	Validation []customprovider.Validation `hcl:"validation,block" validate:"min=0"`
	// DependsOn contains resources that CustomProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type customProviderAttributes struct {
	ref terra.Reference
}

func (cp customProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("id"))
}

func (cp customProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("location"))
}

func (cp customProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("name"))
}

func (cp customProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("resource_group_name"))
}

func (cp customProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp customProviderAttributes) Action() terra.SetValue[customprovider.ActionAttributes] {
	return terra.ReferenceSet[customprovider.ActionAttributes](cp.ref.Append("action"))
}

func (cp customProviderAttributes) ResourceType() terra.SetValue[customprovider.ResourceTypeAttributes] {
	return terra.ReferenceSet[customprovider.ResourceTypeAttributes](cp.ref.Append("resource_type"))
}

func (cp customProviderAttributes) Timeouts() customprovider.TimeoutsAttributes {
	return terra.ReferenceSingle[customprovider.TimeoutsAttributes](cp.ref.Append("timeouts"))
}

func (cp customProviderAttributes) Validation() terra.SetValue[customprovider.ValidationAttributes] {
	return terra.ReferenceSet[customprovider.ValidationAttributes](cp.ref.Append("validation"))
}

type customProviderState struct {
	Id                string                             `json:"id"`
	Location          string                             `json:"location"`
	Name              string                             `json:"name"`
	ResourceGroupName string                             `json:"resource_group_name"`
	Tags              map[string]string                  `json:"tags"`
	Action            []customprovider.ActionState       `json:"action"`
	ResourceType      []customprovider.ResourceTypeState `json:"resource_type"`
	Timeouts          *customprovider.TimeoutsState      `json:"timeouts"`
	Validation        []customprovider.ValidationState   `json:"validation"`
}
