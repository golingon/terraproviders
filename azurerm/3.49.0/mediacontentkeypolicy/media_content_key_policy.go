// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package mediacontentkeypolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type PolicyOption struct {
	// ClearKeyConfigurationEnabled: bool, optional
	ClearKeyConfigurationEnabled terra.BoolValue `hcl:"clear_key_configuration_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OpenRestrictionEnabled: bool, optional
	OpenRestrictionEnabled terra.BoolValue `hcl:"open_restriction_enabled,attr"`
	// PlayreadyResponseCustomData: string, optional
	PlayreadyResponseCustomData terra.StringValue `hcl:"playready_response_custom_data,attr"`
	// WidevineConfigurationTemplate: string, optional
	WidevineConfigurationTemplate terra.StringValue `hcl:"widevine_configuration_template,attr"`
	// FairplayConfiguration: optional
	FairplayConfiguration *FairplayConfiguration `hcl:"fairplay_configuration,block"`
	// PlayreadyConfigurationLicense: min=0
	PlayreadyConfigurationLicense []PlayreadyConfigurationLicense `hcl:"playready_configuration_license,block" validate:"min=0"`
	// TokenRestriction: optional
	TokenRestriction *TokenRestriction `hcl:"token_restriction,block"`
}

type FairplayConfiguration struct {
	// Ask: string, optional
	Ask terra.StringValue `hcl:"ask,attr"`
	// Pfx: string, optional
	Pfx terra.StringValue `hcl:"pfx,attr"`
	// PfxPassword: string, optional
	PfxPassword terra.StringValue `hcl:"pfx_password,attr"`
	// RentalAndLeaseKeyType: string, optional
	RentalAndLeaseKeyType terra.StringValue `hcl:"rental_and_lease_key_type,attr"`
	// RentalDurationSeconds: number, optional
	RentalDurationSeconds terra.NumberValue `hcl:"rental_duration_seconds,attr"`
	// OfflineRentalConfiguration: optional
	OfflineRentalConfiguration *OfflineRentalConfiguration `hcl:"offline_rental_configuration,block"`
}

type OfflineRentalConfiguration struct {
	// PlaybackDurationSeconds: number, optional
	PlaybackDurationSeconds terra.NumberValue `hcl:"playback_duration_seconds,attr"`
	// StorageDurationSeconds: number, optional
	StorageDurationSeconds terra.NumberValue `hcl:"storage_duration_seconds,attr"`
}

type PlayreadyConfigurationLicense struct {
	// AllowTestDevices: bool, optional
	AllowTestDevices terra.BoolValue `hcl:"allow_test_devices,attr"`
	// BeginDate: string, optional
	BeginDate terra.StringValue `hcl:"begin_date,attr"`
	// ContentKeyLocationFromHeaderEnabled: bool, optional
	ContentKeyLocationFromHeaderEnabled terra.BoolValue `hcl:"content_key_location_from_header_enabled,attr"`
	// ContentKeyLocationFromKeyId: string, optional
	ContentKeyLocationFromKeyId terra.StringValue `hcl:"content_key_location_from_key_id,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// ExpirationDate: string, optional
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr"`
	// GracePeriod: string, optional
	GracePeriod terra.StringValue `hcl:"grace_period,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// RelativeBeginDate: string, optional
	RelativeBeginDate terra.StringValue `hcl:"relative_begin_date,attr"`
	// RelativeExpirationDate: string, optional
	RelativeExpirationDate terra.StringValue `hcl:"relative_expiration_date,attr"`
	// SecurityLevel: string, optional
	SecurityLevel terra.StringValue `hcl:"security_level,attr"`
	// PlayRight: optional
	PlayRight *PlayRight `hcl:"play_right,block"`
}

type PlayRight struct {
	// AgcAndColorStripeRestriction: number, optional
	AgcAndColorStripeRestriction terra.NumberValue `hcl:"agc_and_color_stripe_restriction,attr"`
	// AllowPassingVideoContentToUnknownOutput: string, optional
	AllowPassingVideoContentToUnknownOutput terra.StringValue `hcl:"allow_passing_video_content_to_unknown_output,attr"`
	// AnalogVideoOpl: number, optional
	AnalogVideoOpl terra.NumberValue `hcl:"analog_video_opl,attr"`
	// CompressedDigitalAudioOpl: number, optional
	CompressedDigitalAudioOpl terra.NumberValue `hcl:"compressed_digital_audio_opl,attr"`
	// CompressedDigitalVideoOpl: number, optional
	CompressedDigitalVideoOpl terra.NumberValue `hcl:"compressed_digital_video_opl,attr"`
	// DigitalVideoOnlyContentRestriction: bool, optional
	DigitalVideoOnlyContentRestriction terra.BoolValue `hcl:"digital_video_only_content_restriction,attr"`
	// FirstPlayExpiration: string, optional
	FirstPlayExpiration terra.StringValue `hcl:"first_play_expiration,attr"`
	// ImageConstraintForAnalogComponentVideoRestriction: bool, optional
	ImageConstraintForAnalogComponentVideoRestriction terra.BoolValue `hcl:"image_constraint_for_analog_component_video_restriction,attr"`
	// ImageConstraintForAnalogComputerMonitorRestriction: bool, optional
	ImageConstraintForAnalogComputerMonitorRestriction terra.BoolValue `hcl:"image_constraint_for_analog_computer_monitor_restriction,attr"`
	// ScmsRestriction: number, optional
	ScmsRestriction terra.NumberValue `hcl:"scms_restriction,attr"`
	// UncompressedDigitalAudioOpl: number, optional
	UncompressedDigitalAudioOpl terra.NumberValue `hcl:"uncompressed_digital_audio_opl,attr"`
	// UncompressedDigitalVideoOpl: number, optional
	UncompressedDigitalVideoOpl terra.NumberValue `hcl:"uncompressed_digital_video_opl,attr"`
	// ExplicitAnalogTelevisionOutputRestriction: optional
	ExplicitAnalogTelevisionOutputRestriction *ExplicitAnalogTelevisionOutputRestriction `hcl:"explicit_analog_television_output_restriction,block"`
}

type ExplicitAnalogTelevisionOutputRestriction struct {
	// BestEffortEnforced: bool, optional
	BestEffortEnforced terra.BoolValue `hcl:"best_effort_enforced,attr"`
	// ControlBits: number, required
	ControlBits terra.NumberValue `hcl:"control_bits,attr" validate:"required"`
}

type TokenRestriction struct {
	// Audience: string, optional
	Audience terra.StringValue `hcl:"audience,attr"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// OpenIdConnectDiscoveryDocument: string, optional
	OpenIdConnectDiscoveryDocument terra.StringValue `hcl:"open_id_connect_discovery_document,attr"`
	// PrimaryRsaTokenKeyExponent: string, optional
	PrimaryRsaTokenKeyExponent terra.StringValue `hcl:"primary_rsa_token_key_exponent,attr"`
	// PrimaryRsaTokenKeyModulus: string, optional
	PrimaryRsaTokenKeyModulus terra.StringValue `hcl:"primary_rsa_token_key_modulus,attr"`
	// PrimarySymmetricTokenKey: string, optional
	PrimarySymmetricTokenKey terra.StringValue `hcl:"primary_symmetric_token_key,attr"`
	// PrimaryX509TokenKeyRaw: string, optional
	PrimaryX509TokenKeyRaw terra.StringValue `hcl:"primary_x509_token_key_raw,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
	// AlternateKey: min=0
	AlternateKey []AlternateKey `hcl:"alternate_key,block" validate:"min=0"`
	// RequiredClaim: min=0
	RequiredClaim []RequiredClaim `hcl:"required_claim,block" validate:"min=0"`
}

type AlternateKey struct {
	// RsaTokenKeyExponent: string, optional
	RsaTokenKeyExponent terra.StringValue `hcl:"rsa_token_key_exponent,attr"`
	// RsaTokenKeyModulus: string, optional
	RsaTokenKeyModulus terra.StringValue `hcl:"rsa_token_key_modulus,attr"`
	// SymmetricTokenKey: string, optional
	SymmetricTokenKey terra.StringValue `hcl:"symmetric_token_key,attr"`
	// X509TokenKeyRaw: string, optional
	X509TokenKeyRaw terra.StringValue `hcl:"x509_token_key_raw,attr"`
}

type RequiredClaim struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PolicyOptionAttributes struct {
	ref terra.Reference
}

func (po PolicyOptionAttributes) InternalRef() terra.Reference {
	return po.ref
}

func (po PolicyOptionAttributes) InternalWithRef(ref terra.Reference) PolicyOptionAttributes {
	return PolicyOptionAttributes{ref: ref}
}

func (po PolicyOptionAttributes) InternalTokens() hclwrite.Tokens {
	return po.ref.InternalTokens()
}

func (po PolicyOptionAttributes) ClearKeyConfigurationEnabled() terra.BoolValue {
	return terra.ReferenceBool(po.ref.Append("clear_key_configuration_enabled"))
}

func (po PolicyOptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("name"))
}

func (po PolicyOptionAttributes) OpenRestrictionEnabled() terra.BoolValue {
	return terra.ReferenceBool(po.ref.Append("open_restriction_enabled"))
}

func (po PolicyOptionAttributes) PlayreadyResponseCustomData() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("playready_response_custom_data"))
}

func (po PolicyOptionAttributes) WidevineConfigurationTemplate() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("widevine_configuration_template"))
}

func (po PolicyOptionAttributes) FairplayConfiguration() terra.ListValue[FairplayConfigurationAttributes] {
	return terra.ReferenceList[FairplayConfigurationAttributes](po.ref.Append("fairplay_configuration"))
}

func (po PolicyOptionAttributes) PlayreadyConfigurationLicense() terra.ListValue[PlayreadyConfigurationLicenseAttributes] {
	return terra.ReferenceList[PlayreadyConfigurationLicenseAttributes](po.ref.Append("playready_configuration_license"))
}

func (po PolicyOptionAttributes) TokenRestriction() terra.ListValue[TokenRestrictionAttributes] {
	return terra.ReferenceList[TokenRestrictionAttributes](po.ref.Append("token_restriction"))
}

type FairplayConfigurationAttributes struct {
	ref terra.Reference
}

func (fc FairplayConfigurationAttributes) InternalRef() terra.Reference {
	return fc.ref
}

func (fc FairplayConfigurationAttributes) InternalWithRef(ref terra.Reference) FairplayConfigurationAttributes {
	return FairplayConfigurationAttributes{ref: ref}
}

func (fc FairplayConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return fc.ref.InternalTokens()
}

func (fc FairplayConfigurationAttributes) Ask() terra.StringValue {
	return terra.ReferenceString(fc.ref.Append("ask"))
}

func (fc FairplayConfigurationAttributes) Pfx() terra.StringValue {
	return terra.ReferenceString(fc.ref.Append("pfx"))
}

func (fc FairplayConfigurationAttributes) PfxPassword() terra.StringValue {
	return terra.ReferenceString(fc.ref.Append("pfx_password"))
}

func (fc FairplayConfigurationAttributes) RentalAndLeaseKeyType() terra.StringValue {
	return terra.ReferenceString(fc.ref.Append("rental_and_lease_key_type"))
}

func (fc FairplayConfigurationAttributes) RentalDurationSeconds() terra.NumberValue {
	return terra.ReferenceNumber(fc.ref.Append("rental_duration_seconds"))
}

func (fc FairplayConfigurationAttributes) OfflineRentalConfiguration() terra.ListValue[OfflineRentalConfigurationAttributes] {
	return terra.ReferenceList[OfflineRentalConfigurationAttributes](fc.ref.Append("offline_rental_configuration"))
}

type OfflineRentalConfigurationAttributes struct {
	ref terra.Reference
}

func (orc OfflineRentalConfigurationAttributes) InternalRef() terra.Reference {
	return orc.ref
}

func (orc OfflineRentalConfigurationAttributes) InternalWithRef(ref terra.Reference) OfflineRentalConfigurationAttributes {
	return OfflineRentalConfigurationAttributes{ref: ref}
}

func (orc OfflineRentalConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return orc.ref.InternalTokens()
}

func (orc OfflineRentalConfigurationAttributes) PlaybackDurationSeconds() terra.NumberValue {
	return terra.ReferenceNumber(orc.ref.Append("playback_duration_seconds"))
}

func (orc OfflineRentalConfigurationAttributes) StorageDurationSeconds() terra.NumberValue {
	return terra.ReferenceNumber(orc.ref.Append("storage_duration_seconds"))
}

type PlayreadyConfigurationLicenseAttributes struct {
	ref terra.Reference
}

func (pcl PlayreadyConfigurationLicenseAttributes) InternalRef() terra.Reference {
	return pcl.ref
}

func (pcl PlayreadyConfigurationLicenseAttributes) InternalWithRef(ref terra.Reference) PlayreadyConfigurationLicenseAttributes {
	return PlayreadyConfigurationLicenseAttributes{ref: ref}
}

func (pcl PlayreadyConfigurationLicenseAttributes) InternalTokens() hclwrite.Tokens {
	return pcl.ref.InternalTokens()
}

func (pcl PlayreadyConfigurationLicenseAttributes) AllowTestDevices() terra.BoolValue {
	return terra.ReferenceBool(pcl.ref.Append("allow_test_devices"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) BeginDate() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("begin_date"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) ContentKeyLocationFromHeaderEnabled() terra.BoolValue {
	return terra.ReferenceBool(pcl.ref.Append("content_key_location_from_header_enabled"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) ContentKeyLocationFromKeyId() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("content_key_location_from_key_id"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("content_type"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("expiration_date"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) GracePeriod() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("grace_period"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("license_type"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) RelativeBeginDate() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("relative_begin_date"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) RelativeExpirationDate() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("relative_expiration_date"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) SecurityLevel() terra.StringValue {
	return terra.ReferenceString(pcl.ref.Append("security_level"))
}

func (pcl PlayreadyConfigurationLicenseAttributes) PlayRight() terra.ListValue[PlayRightAttributes] {
	return terra.ReferenceList[PlayRightAttributes](pcl.ref.Append("play_right"))
}

type PlayRightAttributes struct {
	ref terra.Reference
}

func (pr PlayRightAttributes) InternalRef() terra.Reference {
	return pr.ref
}

func (pr PlayRightAttributes) InternalWithRef(ref terra.Reference) PlayRightAttributes {
	return PlayRightAttributes{ref: ref}
}

func (pr PlayRightAttributes) InternalTokens() hclwrite.Tokens {
	return pr.ref.InternalTokens()
}

func (pr PlayRightAttributes) AgcAndColorStripeRestriction() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("agc_and_color_stripe_restriction"))
}

func (pr PlayRightAttributes) AllowPassingVideoContentToUnknownOutput() terra.StringValue {
	return terra.ReferenceString(pr.ref.Append("allow_passing_video_content_to_unknown_output"))
}

func (pr PlayRightAttributes) AnalogVideoOpl() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("analog_video_opl"))
}

func (pr PlayRightAttributes) CompressedDigitalAudioOpl() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("compressed_digital_audio_opl"))
}

func (pr PlayRightAttributes) CompressedDigitalVideoOpl() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("compressed_digital_video_opl"))
}

func (pr PlayRightAttributes) DigitalVideoOnlyContentRestriction() terra.BoolValue {
	return terra.ReferenceBool(pr.ref.Append("digital_video_only_content_restriction"))
}

func (pr PlayRightAttributes) FirstPlayExpiration() terra.StringValue {
	return terra.ReferenceString(pr.ref.Append("first_play_expiration"))
}

func (pr PlayRightAttributes) ImageConstraintForAnalogComponentVideoRestriction() terra.BoolValue {
	return terra.ReferenceBool(pr.ref.Append("image_constraint_for_analog_component_video_restriction"))
}

func (pr PlayRightAttributes) ImageConstraintForAnalogComputerMonitorRestriction() terra.BoolValue {
	return terra.ReferenceBool(pr.ref.Append("image_constraint_for_analog_computer_monitor_restriction"))
}

func (pr PlayRightAttributes) ScmsRestriction() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("scms_restriction"))
}

func (pr PlayRightAttributes) UncompressedDigitalAudioOpl() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("uncompressed_digital_audio_opl"))
}

func (pr PlayRightAttributes) UncompressedDigitalVideoOpl() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("uncompressed_digital_video_opl"))
}

func (pr PlayRightAttributes) ExplicitAnalogTelevisionOutputRestriction() terra.ListValue[ExplicitAnalogTelevisionOutputRestrictionAttributes] {
	return terra.ReferenceList[ExplicitAnalogTelevisionOutputRestrictionAttributes](pr.ref.Append("explicit_analog_television_output_restriction"))
}

type ExplicitAnalogTelevisionOutputRestrictionAttributes struct {
	ref terra.Reference
}

func (eator ExplicitAnalogTelevisionOutputRestrictionAttributes) InternalRef() terra.Reference {
	return eator.ref
}

func (eator ExplicitAnalogTelevisionOutputRestrictionAttributes) InternalWithRef(ref terra.Reference) ExplicitAnalogTelevisionOutputRestrictionAttributes {
	return ExplicitAnalogTelevisionOutputRestrictionAttributes{ref: ref}
}

func (eator ExplicitAnalogTelevisionOutputRestrictionAttributes) InternalTokens() hclwrite.Tokens {
	return eator.ref.InternalTokens()
}

func (eator ExplicitAnalogTelevisionOutputRestrictionAttributes) BestEffortEnforced() terra.BoolValue {
	return terra.ReferenceBool(eator.ref.Append("best_effort_enforced"))
}

func (eator ExplicitAnalogTelevisionOutputRestrictionAttributes) ControlBits() terra.NumberValue {
	return terra.ReferenceNumber(eator.ref.Append("control_bits"))
}

type TokenRestrictionAttributes struct {
	ref terra.Reference
}

func (tr TokenRestrictionAttributes) InternalRef() terra.Reference {
	return tr.ref
}

func (tr TokenRestrictionAttributes) InternalWithRef(ref terra.Reference) TokenRestrictionAttributes {
	return TokenRestrictionAttributes{ref: ref}
}

func (tr TokenRestrictionAttributes) InternalTokens() hclwrite.Tokens {
	return tr.ref.InternalTokens()
}

func (tr TokenRestrictionAttributes) Audience() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("audience"))
}

func (tr TokenRestrictionAttributes) Issuer() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("issuer"))
}

func (tr TokenRestrictionAttributes) OpenIdConnectDiscoveryDocument() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("open_id_connect_discovery_document"))
}

func (tr TokenRestrictionAttributes) PrimaryRsaTokenKeyExponent() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("primary_rsa_token_key_exponent"))
}

func (tr TokenRestrictionAttributes) PrimaryRsaTokenKeyModulus() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("primary_rsa_token_key_modulus"))
}

func (tr TokenRestrictionAttributes) PrimarySymmetricTokenKey() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("primary_symmetric_token_key"))
}

func (tr TokenRestrictionAttributes) PrimaryX509TokenKeyRaw() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("primary_x509_token_key_raw"))
}

func (tr TokenRestrictionAttributes) TokenType() terra.StringValue {
	return terra.ReferenceString(tr.ref.Append("token_type"))
}

func (tr TokenRestrictionAttributes) AlternateKey() terra.ListValue[AlternateKeyAttributes] {
	return terra.ReferenceList[AlternateKeyAttributes](tr.ref.Append("alternate_key"))
}

func (tr TokenRestrictionAttributes) RequiredClaim() terra.ListValue[RequiredClaimAttributes] {
	return terra.ReferenceList[RequiredClaimAttributes](tr.ref.Append("required_claim"))
}

type AlternateKeyAttributes struct {
	ref terra.Reference
}

func (ak AlternateKeyAttributes) InternalRef() terra.Reference {
	return ak.ref
}

func (ak AlternateKeyAttributes) InternalWithRef(ref terra.Reference) AlternateKeyAttributes {
	return AlternateKeyAttributes{ref: ref}
}

func (ak AlternateKeyAttributes) InternalTokens() hclwrite.Tokens {
	return ak.ref.InternalTokens()
}

func (ak AlternateKeyAttributes) RsaTokenKeyExponent() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("rsa_token_key_exponent"))
}

func (ak AlternateKeyAttributes) RsaTokenKeyModulus() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("rsa_token_key_modulus"))
}

func (ak AlternateKeyAttributes) SymmetricTokenKey() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("symmetric_token_key"))
}

func (ak AlternateKeyAttributes) X509TokenKeyRaw() terra.StringValue {
	return terra.ReferenceString(ak.ref.Append("x509_token_key_raw"))
}

type RequiredClaimAttributes struct {
	ref terra.Reference
}

func (rc RequiredClaimAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc RequiredClaimAttributes) InternalWithRef(ref terra.Reference) RequiredClaimAttributes {
	return RequiredClaimAttributes{ref: ref}
}

func (rc RequiredClaimAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc RequiredClaimAttributes) Type() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("type"))
}

func (rc RequiredClaimAttributes) Value() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type PolicyOptionState struct {
	ClearKeyConfigurationEnabled  bool                                 `json:"clear_key_configuration_enabled"`
	Name                          string                               `json:"name"`
	OpenRestrictionEnabled        bool                                 `json:"open_restriction_enabled"`
	PlayreadyResponseCustomData   string                               `json:"playready_response_custom_data"`
	WidevineConfigurationTemplate string                               `json:"widevine_configuration_template"`
	FairplayConfiguration         []FairplayConfigurationState         `json:"fairplay_configuration"`
	PlayreadyConfigurationLicense []PlayreadyConfigurationLicenseState `json:"playready_configuration_license"`
	TokenRestriction              []TokenRestrictionState              `json:"token_restriction"`
}

type FairplayConfigurationState struct {
	Ask                        string                            `json:"ask"`
	Pfx                        string                            `json:"pfx"`
	PfxPassword                string                            `json:"pfx_password"`
	RentalAndLeaseKeyType      string                            `json:"rental_and_lease_key_type"`
	RentalDurationSeconds      float64                           `json:"rental_duration_seconds"`
	OfflineRentalConfiguration []OfflineRentalConfigurationState `json:"offline_rental_configuration"`
}

type OfflineRentalConfigurationState struct {
	PlaybackDurationSeconds float64 `json:"playback_duration_seconds"`
	StorageDurationSeconds  float64 `json:"storage_duration_seconds"`
}

type PlayreadyConfigurationLicenseState struct {
	AllowTestDevices                    bool             `json:"allow_test_devices"`
	BeginDate                           string           `json:"begin_date"`
	ContentKeyLocationFromHeaderEnabled bool             `json:"content_key_location_from_header_enabled"`
	ContentKeyLocationFromKeyId         string           `json:"content_key_location_from_key_id"`
	ContentType                         string           `json:"content_type"`
	ExpirationDate                      string           `json:"expiration_date"`
	GracePeriod                         string           `json:"grace_period"`
	LicenseType                         string           `json:"license_type"`
	RelativeBeginDate                   string           `json:"relative_begin_date"`
	RelativeExpirationDate              string           `json:"relative_expiration_date"`
	SecurityLevel                       string           `json:"security_level"`
	PlayRight                           []PlayRightState `json:"play_right"`
}

type PlayRightState struct {
	AgcAndColorStripeRestriction                       float64                                          `json:"agc_and_color_stripe_restriction"`
	AllowPassingVideoContentToUnknownOutput            string                                           `json:"allow_passing_video_content_to_unknown_output"`
	AnalogVideoOpl                                     float64                                          `json:"analog_video_opl"`
	CompressedDigitalAudioOpl                          float64                                          `json:"compressed_digital_audio_opl"`
	CompressedDigitalVideoOpl                          float64                                          `json:"compressed_digital_video_opl"`
	DigitalVideoOnlyContentRestriction                 bool                                             `json:"digital_video_only_content_restriction"`
	FirstPlayExpiration                                string                                           `json:"first_play_expiration"`
	ImageConstraintForAnalogComponentVideoRestriction  bool                                             `json:"image_constraint_for_analog_component_video_restriction"`
	ImageConstraintForAnalogComputerMonitorRestriction bool                                             `json:"image_constraint_for_analog_computer_monitor_restriction"`
	ScmsRestriction                                    float64                                          `json:"scms_restriction"`
	UncompressedDigitalAudioOpl                        float64                                          `json:"uncompressed_digital_audio_opl"`
	UncompressedDigitalVideoOpl                        float64                                          `json:"uncompressed_digital_video_opl"`
	ExplicitAnalogTelevisionOutputRestriction          []ExplicitAnalogTelevisionOutputRestrictionState `json:"explicit_analog_television_output_restriction"`
}

type ExplicitAnalogTelevisionOutputRestrictionState struct {
	BestEffortEnforced bool    `json:"best_effort_enforced"`
	ControlBits        float64 `json:"control_bits"`
}

type TokenRestrictionState struct {
	Audience                       string               `json:"audience"`
	Issuer                         string               `json:"issuer"`
	OpenIdConnectDiscoveryDocument string               `json:"open_id_connect_discovery_document"`
	PrimaryRsaTokenKeyExponent     string               `json:"primary_rsa_token_key_exponent"`
	PrimaryRsaTokenKeyModulus      string               `json:"primary_rsa_token_key_modulus"`
	PrimarySymmetricTokenKey       string               `json:"primary_symmetric_token_key"`
	PrimaryX509TokenKeyRaw         string               `json:"primary_x509_token_key_raw"`
	TokenType                      string               `json:"token_type"`
	AlternateKey                   []AlternateKeyState  `json:"alternate_key"`
	RequiredClaim                  []RequiredClaimState `json:"required_claim"`
}

type AlternateKeyState struct {
	RsaTokenKeyExponent string `json:"rsa_token_key_exponent"`
	RsaTokenKeyModulus  string `json:"rsa_token_key_modulus"`
	SymmetricTokenKey   string `json:"symmetric_token_key"`
	X509TokenKeyRaw     string `json:"x509_token_key_raw"`
}

type RequiredClaimState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
