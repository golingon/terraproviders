// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourceproviderregistration "github.com/golingon/terraproviders/azurerm/3.49.0/resourceproviderregistration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourceProviderRegistration(name string, args ResourceProviderRegistrationArgs) *ResourceProviderRegistration {
	return &ResourceProviderRegistration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourceProviderRegistration)(nil)

type ResourceProviderRegistration struct {
	Name  string
	Args  ResourceProviderRegistrationArgs
	state *resourceProviderRegistrationState
}

func (rpr *ResourceProviderRegistration) Type() string {
	return "azurerm_resource_provider_registration"
}

func (rpr *ResourceProviderRegistration) LocalName() string {
	return rpr.Name
}

func (rpr *ResourceProviderRegistration) Configuration() interface{} {
	return rpr.Args
}

func (rpr *ResourceProviderRegistration) Attributes() resourceProviderRegistrationAttributes {
	return resourceProviderRegistrationAttributes{ref: terra.ReferenceResource(rpr)}
}

func (rpr *ResourceProviderRegistration) ImportState(av io.Reader) error {
	rpr.state = &resourceProviderRegistrationState{}
	if err := json.NewDecoder(av).Decode(rpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rpr.Type(), rpr.LocalName(), err)
	}
	return nil
}

func (rpr *ResourceProviderRegistration) State() (*resourceProviderRegistrationState, bool) {
	return rpr.state, rpr.state != nil
}

func (rpr *ResourceProviderRegistration) StateMust() *resourceProviderRegistrationState {
	if rpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rpr.Type(), rpr.LocalName()))
	}
	return rpr.state
}

func (rpr *ResourceProviderRegistration) DependOn() terra.Reference {
	return terra.ReferenceResource(rpr)
}

type ResourceProviderRegistrationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Feature: min=0
	Feature []resourceproviderregistration.Feature `hcl:"feature,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *resourceproviderregistration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourceProviderRegistration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourceProviderRegistrationAttributes struct {
	ref terra.Reference
}

func (rpr resourceProviderRegistrationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rpr.ref.Append("id"))
}

func (rpr resourceProviderRegistrationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rpr.ref.Append("name"))
}

func (rpr resourceProviderRegistrationAttributes) Feature() terra.SetValue[resourceproviderregistration.FeatureAttributes] {
	return terra.ReferenceSet[resourceproviderregistration.FeatureAttributes](rpr.ref.Append("feature"))
}

func (rpr resourceProviderRegistrationAttributes) Timeouts() resourceproviderregistration.TimeoutsAttributes {
	return terra.ReferenceSingle[resourceproviderregistration.TimeoutsAttributes](rpr.ref.Append("timeouts"))
}

type resourceProviderRegistrationState struct {
	Id       string                                      `json:"id"`
	Name     string                                      `json:"name"`
	Feature  []resourceproviderregistration.FeatureState `json:"feature"`
	Timeouts *resourceproviderregistration.TimeoutsState `json:"timeouts"`
}
