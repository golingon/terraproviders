// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datalinuxwebapp "github.com/golingon/terraproviders/azurerm/3.49.0/datalinuxwebapp"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataLinuxWebApp(name string, args DataLinuxWebAppArgs) *DataLinuxWebApp {
	return &DataLinuxWebApp{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataLinuxWebApp)(nil)

type DataLinuxWebApp struct {
	Name string
	Args DataLinuxWebAppArgs
}

func (lwa *DataLinuxWebApp) DataSource() string {
	return "azurerm_linux_web_app"
}

func (lwa *DataLinuxWebApp) LocalName() string {
	return lwa.Name
}

func (lwa *DataLinuxWebApp) Configuration() interface{} {
	return lwa.Args
}

func (lwa *DataLinuxWebApp) Attributes() dataLinuxWebAppAttributes {
	return dataLinuxWebAppAttributes{ref: terra.ReferenceDataResource(lwa)}
}

type DataLinuxWebAppArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// AuthSettings: min=0
	AuthSettings []datalinuxwebapp.AuthSettings `hcl:"auth_settings,block" validate:"min=0"`
	// AuthSettingsV2: min=0
	AuthSettingsV2 []datalinuxwebapp.AuthSettingsV2 `hcl:"auth_settings_v2,block" validate:"min=0"`
	// Backup: min=0
	Backup []datalinuxwebapp.Backup `hcl:"backup,block" validate:"min=0"`
	// ConnectionString: min=0
	ConnectionString []datalinuxwebapp.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: min=0
	Identity []datalinuxwebapp.Identity `hcl:"identity,block" validate:"min=0"`
	// Logs: min=0
	Logs []datalinuxwebapp.Logs `hcl:"logs,block" validate:"min=0"`
	// SiteConfig: min=0
	SiteConfig []datalinuxwebapp.SiteConfig `hcl:"site_config,block" validate:"min=0"`
	// SiteCredential: min=0
	SiteCredential []datalinuxwebapp.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// StickySettings: min=0
	StickySettings []datalinuxwebapp.StickySettings `hcl:"sticky_settings,block" validate:"min=0"`
	// StorageAccount: min=0
	StorageAccount []datalinuxwebapp.StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datalinuxwebapp.Timeouts `hcl:"timeouts,block"`
}
type dataLinuxWebAppAttributes struct {
	ref terra.Reference
}

func (lwa dataLinuxWebAppAttributes) AppMetadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lwa.ref.Append("app_metadata"))
}

func (lwa dataLinuxWebAppAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lwa.ref.Append("app_settings"))
}

func (lwa dataLinuxWebAppAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceBool(lwa.ref.Append("client_affinity_enabled"))
}

func (lwa dataLinuxWebAppAttributes) ClientCertificateEnabled() terra.BoolValue {
	return terra.ReferenceBool(lwa.ref.Append("client_certificate_enabled"))
}

func (lwa dataLinuxWebAppAttributes) ClientCertificateExclusionPaths() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("client_certificate_exclusion_paths"))
}

func (lwa dataLinuxWebAppAttributes) ClientCertificateMode() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("client_certificate_mode"))
}

func (lwa dataLinuxWebAppAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("custom_domain_verification_id"))
}

func (lwa dataLinuxWebAppAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("default_hostname"))
}

func (lwa dataLinuxWebAppAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(lwa.ref.Append("enabled"))
}

func (lwa dataLinuxWebAppAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(lwa.ref.Append("https_only"))
}

func (lwa dataLinuxWebAppAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("id"))
}

func (lwa dataLinuxWebAppAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("key_vault_reference_identity_id"))
}

func (lwa dataLinuxWebAppAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("kind"))
}

func (lwa dataLinuxWebAppAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("location"))
}

func (lwa dataLinuxWebAppAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("name"))
}

func (lwa dataLinuxWebAppAttributes) OutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lwa.ref.Append("outbound_ip_address_list"))
}

func (lwa dataLinuxWebAppAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("outbound_ip_addresses"))
}

func (lwa dataLinuxWebAppAttributes) PossibleOutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lwa.ref.Append("possible_outbound_ip_address_list"))
}

func (lwa dataLinuxWebAppAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("possible_outbound_ip_addresses"))
}

func (lwa dataLinuxWebAppAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("resource_group_name"))
}

func (lwa dataLinuxWebAppAttributes) ServicePlanId() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("service_plan_id"))
}

func (lwa dataLinuxWebAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lwa.ref.Append("tags"))
}

func (lwa dataLinuxWebAppAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceString(lwa.ref.Append("virtual_network_subnet_id"))
}

func (lwa dataLinuxWebAppAttributes) AuthSettings() terra.ListValue[datalinuxwebapp.AuthSettingsAttributes] {
	return terra.ReferenceList[datalinuxwebapp.AuthSettingsAttributes](lwa.ref.Append("auth_settings"))
}

func (lwa dataLinuxWebAppAttributes) AuthSettingsV2() terra.ListValue[datalinuxwebapp.AuthSettingsV2Attributes] {
	return terra.ReferenceList[datalinuxwebapp.AuthSettingsV2Attributes](lwa.ref.Append("auth_settings_v2"))
}

func (lwa dataLinuxWebAppAttributes) Backup() terra.ListValue[datalinuxwebapp.BackupAttributes] {
	return terra.ReferenceList[datalinuxwebapp.BackupAttributes](lwa.ref.Append("backup"))
}

func (lwa dataLinuxWebAppAttributes) ConnectionString() terra.SetValue[datalinuxwebapp.ConnectionStringAttributes] {
	return terra.ReferenceSet[datalinuxwebapp.ConnectionStringAttributes](lwa.ref.Append("connection_string"))
}

func (lwa dataLinuxWebAppAttributes) Identity() terra.ListValue[datalinuxwebapp.IdentityAttributes] {
	return terra.ReferenceList[datalinuxwebapp.IdentityAttributes](lwa.ref.Append("identity"))
}

func (lwa dataLinuxWebAppAttributes) Logs() terra.ListValue[datalinuxwebapp.LogsAttributes] {
	return terra.ReferenceList[datalinuxwebapp.LogsAttributes](lwa.ref.Append("logs"))
}

func (lwa dataLinuxWebAppAttributes) SiteConfig() terra.ListValue[datalinuxwebapp.SiteConfigAttributes] {
	return terra.ReferenceList[datalinuxwebapp.SiteConfigAttributes](lwa.ref.Append("site_config"))
}

func (lwa dataLinuxWebAppAttributes) SiteCredential() terra.ListValue[datalinuxwebapp.SiteCredentialAttributes] {
	return terra.ReferenceList[datalinuxwebapp.SiteCredentialAttributes](lwa.ref.Append("site_credential"))
}

func (lwa dataLinuxWebAppAttributes) StickySettings() terra.ListValue[datalinuxwebapp.StickySettingsAttributes] {
	return terra.ReferenceList[datalinuxwebapp.StickySettingsAttributes](lwa.ref.Append("sticky_settings"))
}

func (lwa dataLinuxWebAppAttributes) StorageAccount() terra.ListValue[datalinuxwebapp.StorageAccountAttributes] {
	return terra.ReferenceList[datalinuxwebapp.StorageAccountAttributes](lwa.ref.Append("storage_account"))
}

func (lwa dataLinuxWebAppAttributes) Timeouts() datalinuxwebapp.TimeoutsAttributes {
	return terra.ReferenceSingle[datalinuxwebapp.TimeoutsAttributes](lwa.ref.Append("timeouts"))
}
