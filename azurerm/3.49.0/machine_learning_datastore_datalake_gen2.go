// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	machinelearningdatastoredatalakegen2 "github.com/golingon/terraproviders/azurerm/3.49.0/machinelearningdatastoredatalakegen2"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMachineLearningDatastoreDatalakeGen2(name string, args MachineLearningDatastoreDatalakeGen2Args) *MachineLearningDatastoreDatalakeGen2 {
	return &MachineLearningDatastoreDatalakeGen2{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MachineLearningDatastoreDatalakeGen2)(nil)

type MachineLearningDatastoreDatalakeGen2 struct {
	Name  string
	Args  MachineLearningDatastoreDatalakeGen2Args
	state *machineLearningDatastoreDatalakeGen2State
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) Type() string {
	return "azurerm_machine_learning_datastore_datalake_gen2"
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) LocalName() string {
	return mlddg.Name
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) Configuration() interface{} {
	return mlddg.Args
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) Attributes() machineLearningDatastoreDatalakeGen2Attributes {
	return machineLearningDatastoreDatalakeGen2Attributes{ref: terra.ReferenceResource(mlddg)}
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) ImportState(av io.Reader) error {
	mlddg.state = &machineLearningDatastoreDatalakeGen2State{}
	if err := json.NewDecoder(av).Decode(mlddg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mlddg.Type(), mlddg.LocalName(), err)
	}
	return nil
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) State() (*machineLearningDatastoreDatalakeGen2State, bool) {
	return mlddg.state, mlddg.state != nil
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) StateMust() *machineLearningDatastoreDatalakeGen2State {
	if mlddg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mlddg.Type(), mlddg.LocalName()))
	}
	return mlddg.state
}

func (mlddg *MachineLearningDatastoreDatalakeGen2) DependOn() terra.Reference {
	return terra.ReferenceResource(mlddg)
}

type MachineLearningDatastoreDatalakeGen2Args struct {
	// AuthorityUrl: string, optional
	AuthorityUrl terra.StringValue `hcl:"authority_url,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceDataIdentity: string, optional
	ServiceDataIdentity terra.StringValue `hcl:"service_data_identity,attr"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *machinelearningdatastoredatalakegen2.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MachineLearningDatastoreDatalakeGen2 depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type machineLearningDatastoreDatalakeGen2Attributes struct {
	ref terra.Reference
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) AuthorityUrl() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("authority_url"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("client_id"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("client_secret"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) Description() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("description"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) Id() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("id"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) IsDefault() terra.BoolValue {
	return terra.ReferenceBool(mlddg.ref.Append("is_default"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) Name() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("name"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) ServiceDataIdentity() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("service_data_identity"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("storage_container_id"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mlddg.ref.Append("tags"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) TenantId() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("tenant_id"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(mlddg.ref.Append("workspace_id"))
}

func (mlddg machineLearningDatastoreDatalakeGen2Attributes) Timeouts() machinelearningdatastoredatalakegen2.TimeoutsAttributes {
	return terra.ReferenceSingle[machinelearningdatastoredatalakegen2.TimeoutsAttributes](mlddg.ref.Append("timeouts"))
}

type machineLearningDatastoreDatalakeGen2State struct {
	AuthorityUrl        string                                              `json:"authority_url"`
	ClientId            string                                              `json:"client_id"`
	ClientSecret        string                                              `json:"client_secret"`
	Description         string                                              `json:"description"`
	Id                  string                                              `json:"id"`
	IsDefault           bool                                                `json:"is_default"`
	Name                string                                              `json:"name"`
	ServiceDataIdentity string                                              `json:"service_data_identity"`
	StorageContainerId  string                                              `json:"storage_container_id"`
	Tags                map[string]string                                   `json:"tags"`
	TenantId            string                                              `json:"tenant_id"`
	WorkspaceId         string                                              `json:"workspace_id"`
	Timeouts            *machinelearningdatastoredatalakegen2.TimeoutsState `json:"timeouts"`
}
