// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementproductpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementproductpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementProductPolicy(name string, args ApiManagementProductPolicyArgs) *ApiManagementProductPolicy {
	return &ApiManagementProductPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementProductPolicy)(nil)

type ApiManagementProductPolicy struct {
	Name  string
	Args  ApiManagementProductPolicyArgs
	state *apiManagementProductPolicyState
}

func (ampp *ApiManagementProductPolicy) Type() string {
	return "azurerm_api_management_product_policy"
}

func (ampp *ApiManagementProductPolicy) LocalName() string {
	return ampp.Name
}

func (ampp *ApiManagementProductPolicy) Configuration() interface{} {
	return ampp.Args
}

func (ampp *ApiManagementProductPolicy) Attributes() apiManagementProductPolicyAttributes {
	return apiManagementProductPolicyAttributes{ref: terra.ReferenceResource(ampp)}
}

func (ampp *ApiManagementProductPolicy) ImportState(av io.Reader) error {
	ampp.state = &apiManagementProductPolicyState{}
	if err := json.NewDecoder(av).Decode(ampp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ampp.Type(), ampp.LocalName(), err)
	}
	return nil
}

func (ampp *ApiManagementProductPolicy) State() (*apiManagementProductPolicyState, bool) {
	return ampp.state, ampp.state != nil
}

func (ampp *ApiManagementProductPolicy) StateMust() *apiManagementProductPolicyState {
	if ampp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ampp.Type(), ampp.LocalName()))
	}
	return ampp.state
}

func (ampp *ApiManagementProductPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ampp)
}

type ApiManagementProductPolicyArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProductId: string, required
	ProductId terra.StringValue `hcl:"product_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// XmlContent: string, optional
	XmlContent terra.StringValue `hcl:"xml_content,attr"`
	// XmlLink: string, optional
	XmlLink terra.StringValue `hcl:"xml_link,attr"`
	// Timeouts: optional
	Timeouts *apimanagementproductpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementProductPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementProductPolicyAttributes struct {
	ref terra.Reference
}

func (ampp apiManagementProductPolicyAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("api_management_name"))
}

func (ampp apiManagementProductPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("id"))
}

func (ampp apiManagementProductPolicyAttributes) ProductId() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("product_id"))
}

func (ampp apiManagementProductPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("resource_group_name"))
}

func (ampp apiManagementProductPolicyAttributes) XmlContent() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("xml_content"))
}

func (ampp apiManagementProductPolicyAttributes) XmlLink() terra.StringValue {
	return terra.ReferenceString(ampp.ref.Append("xml_link"))
}

func (ampp apiManagementProductPolicyAttributes) Timeouts() apimanagementproductpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementproductpolicy.TimeoutsAttributes](ampp.ref.Append("timeouts"))
}

type apiManagementProductPolicyState struct {
	ApiManagementName string                                    `json:"api_management_name"`
	Id                string                                    `json:"id"`
	ProductId         string                                    `json:"product_id"`
	ResourceGroupName string                                    `json:"resource_group_name"`
	XmlContent        string                                    `json:"xml_content"`
	XmlLink           string                                    `json:"xml_link"`
	Timeouts          *apimanagementproductpolicy.TimeoutsState `json:"timeouts"`
}
