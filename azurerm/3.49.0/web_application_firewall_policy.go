// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	webapplicationfirewallpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/webapplicationfirewallpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWebApplicationFirewallPolicy(name string, args WebApplicationFirewallPolicyArgs) *WebApplicationFirewallPolicy {
	return &WebApplicationFirewallPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WebApplicationFirewallPolicy)(nil)

type WebApplicationFirewallPolicy struct {
	Name  string
	Args  WebApplicationFirewallPolicyArgs
	state *webApplicationFirewallPolicyState
}

func (wafp *WebApplicationFirewallPolicy) Type() string {
	return "azurerm_web_application_firewall_policy"
}

func (wafp *WebApplicationFirewallPolicy) LocalName() string {
	return wafp.Name
}

func (wafp *WebApplicationFirewallPolicy) Configuration() interface{} {
	return wafp.Args
}

func (wafp *WebApplicationFirewallPolicy) Attributes() webApplicationFirewallPolicyAttributes {
	return webApplicationFirewallPolicyAttributes{ref: terra.ReferenceResource(wafp)}
}

func (wafp *WebApplicationFirewallPolicy) ImportState(av io.Reader) error {
	wafp.state = &webApplicationFirewallPolicyState{}
	if err := json.NewDecoder(av).Decode(wafp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wafp.Type(), wafp.LocalName(), err)
	}
	return nil
}

func (wafp *WebApplicationFirewallPolicy) State() (*webApplicationFirewallPolicyState, bool) {
	return wafp.state, wafp.state != nil
}

func (wafp *WebApplicationFirewallPolicy) StateMust() *webApplicationFirewallPolicyState {
	if wafp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wafp.Type(), wafp.LocalName()))
	}
	return wafp.state
}

func (wafp *WebApplicationFirewallPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(wafp)
}

type WebApplicationFirewallPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// CustomRules: min=0
	CustomRules []webapplicationfirewallpolicy.CustomRules `hcl:"custom_rules,block" validate:"min=0"`
	// ManagedRules: required
	ManagedRules *webapplicationfirewallpolicy.ManagedRules `hcl:"managed_rules,block" validate:"required"`
	// PolicySettings: optional
	PolicySettings *webapplicationfirewallpolicy.PolicySettings `hcl:"policy_settings,block"`
	// Timeouts: optional
	Timeouts *webapplicationfirewallpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that WebApplicationFirewallPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type webApplicationFirewallPolicyAttributes struct {
	ref terra.Reference
}

func (wafp webApplicationFirewallPolicyAttributes) HttpListenerIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](wafp.ref.Append("http_listener_ids"))
}

func (wafp webApplicationFirewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wafp.ref.Append("id"))
}

func (wafp webApplicationFirewallPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(wafp.ref.Append("location"))
}

func (wafp webApplicationFirewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wafp.ref.Append("name"))
}

func (wafp webApplicationFirewallPolicyAttributes) PathBasedRuleIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](wafp.ref.Append("path_based_rule_ids"))
}

func (wafp webApplicationFirewallPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(wafp.ref.Append("resource_group_name"))
}

func (wafp webApplicationFirewallPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wafp.ref.Append("tags"))
}

func (wafp webApplicationFirewallPolicyAttributes) CustomRules() terra.ListValue[webapplicationfirewallpolicy.CustomRulesAttributes] {
	return terra.ReferenceList[webapplicationfirewallpolicy.CustomRulesAttributes](wafp.ref.Append("custom_rules"))
}

func (wafp webApplicationFirewallPolicyAttributes) ManagedRules() terra.ListValue[webapplicationfirewallpolicy.ManagedRulesAttributes] {
	return terra.ReferenceList[webapplicationfirewallpolicy.ManagedRulesAttributes](wafp.ref.Append("managed_rules"))
}

func (wafp webApplicationFirewallPolicyAttributes) PolicySettings() terra.ListValue[webapplicationfirewallpolicy.PolicySettingsAttributes] {
	return terra.ReferenceList[webapplicationfirewallpolicy.PolicySettingsAttributes](wafp.ref.Append("policy_settings"))
}

func (wafp webApplicationFirewallPolicyAttributes) Timeouts() webapplicationfirewallpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[webapplicationfirewallpolicy.TimeoutsAttributes](wafp.ref.Append("timeouts"))
}

type webApplicationFirewallPolicyState struct {
	HttpListenerIds   []string                                           `json:"http_listener_ids"`
	Id                string                                             `json:"id"`
	Location          string                                             `json:"location"`
	Name              string                                             `json:"name"`
	PathBasedRuleIds  []string                                           `json:"path_based_rule_ids"`
	ResourceGroupName string                                             `json:"resource_group_name"`
	Tags              map[string]string                                  `json:"tags"`
	CustomRules       []webapplicationfirewallpolicy.CustomRulesState    `json:"custom_rules"`
	ManagedRules      []webapplicationfirewallpolicy.ManagedRulesState   `json:"managed_rules"`
	PolicySettings    []webapplicationfirewallpolicy.PolicySettingsState `json:"policy_settings"`
	Timeouts          *webapplicationfirewallpolicy.TimeoutsState        `json:"timeouts"`
}
