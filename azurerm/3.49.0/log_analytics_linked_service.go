// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticslinkedservice "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticslinkedservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsLinkedService(name string, args LogAnalyticsLinkedServiceArgs) *LogAnalyticsLinkedService {
	return &LogAnalyticsLinkedService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsLinkedService)(nil)

type LogAnalyticsLinkedService struct {
	Name  string
	Args  LogAnalyticsLinkedServiceArgs
	state *logAnalyticsLinkedServiceState
}

func (lals *LogAnalyticsLinkedService) Type() string {
	return "azurerm_log_analytics_linked_service"
}

func (lals *LogAnalyticsLinkedService) LocalName() string {
	return lals.Name
}

func (lals *LogAnalyticsLinkedService) Configuration() interface{} {
	return lals.Args
}

func (lals *LogAnalyticsLinkedService) Attributes() logAnalyticsLinkedServiceAttributes {
	return logAnalyticsLinkedServiceAttributes{ref: terra.ReferenceResource(lals)}
}

func (lals *LogAnalyticsLinkedService) ImportState(av io.Reader) error {
	lals.state = &logAnalyticsLinkedServiceState{}
	if err := json.NewDecoder(av).Decode(lals.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lals.Type(), lals.LocalName(), err)
	}
	return nil
}

func (lals *LogAnalyticsLinkedService) State() (*logAnalyticsLinkedServiceState, bool) {
	return lals.state, lals.state != nil
}

func (lals *LogAnalyticsLinkedService) StateMust() *logAnalyticsLinkedServiceState {
	if lals.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lals.Type(), lals.LocalName()))
	}
	return lals.state
}

func (lals *LogAnalyticsLinkedService) DependOn() terra.Reference {
	return terra.ReferenceResource(lals)
}

type LogAnalyticsLinkedServiceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReadAccessId: string, optional
	ReadAccessId terra.StringValue `hcl:"read_access_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// WriteAccessId: string, optional
	WriteAccessId terra.StringValue `hcl:"write_access_id,attr"`
	// Timeouts: optional
	Timeouts *loganalyticslinkedservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsLinkedService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsLinkedServiceAttributes struct {
	ref terra.Reference
}

func (lals logAnalyticsLinkedServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("id"))
}

func (lals logAnalyticsLinkedServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("name"))
}

func (lals logAnalyticsLinkedServiceAttributes) ReadAccessId() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("read_access_id"))
}

func (lals logAnalyticsLinkedServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("resource_group_name"))
}

func (lals logAnalyticsLinkedServiceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("workspace_id"))
}

func (lals logAnalyticsLinkedServiceAttributes) WriteAccessId() terra.StringValue {
	return terra.ReferenceString(lals.ref.Append("write_access_id"))
}

func (lals logAnalyticsLinkedServiceAttributes) Timeouts() loganalyticslinkedservice.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticslinkedservice.TimeoutsAttributes](lals.ref.Append("timeouts"))
}

type logAnalyticsLinkedServiceState struct {
	Id                string                                   `json:"id"`
	Name              string                                   `json:"name"`
	ReadAccessId      string                                   `json:"read_access_id"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	WorkspaceId       string                                   `json:"workspace_id"`
	WriteAccessId     string                                   `json:"write_access_id"`
	Timeouts          *loganalyticslinkedservice.TimeoutsState `json:"timeouts"`
}
