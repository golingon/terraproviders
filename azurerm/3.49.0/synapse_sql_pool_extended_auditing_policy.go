// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsesqlpoolextendedauditingpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/synapsesqlpoolextendedauditingpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseSqlPoolExtendedAuditingPolicy(name string, args SynapseSqlPoolExtendedAuditingPolicyArgs) *SynapseSqlPoolExtendedAuditingPolicy {
	return &SynapseSqlPoolExtendedAuditingPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseSqlPoolExtendedAuditingPolicy)(nil)

type SynapseSqlPoolExtendedAuditingPolicy struct {
	Name  string
	Args  SynapseSqlPoolExtendedAuditingPolicyArgs
	state *synapseSqlPoolExtendedAuditingPolicyState
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) Type() string {
	return "azurerm_synapse_sql_pool_extended_auditing_policy"
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) LocalName() string {
	return sspeap.Name
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) Configuration() interface{} {
	return sspeap.Args
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) Attributes() synapseSqlPoolExtendedAuditingPolicyAttributes {
	return synapseSqlPoolExtendedAuditingPolicyAttributes{ref: terra.ReferenceResource(sspeap)}
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) ImportState(av io.Reader) error {
	sspeap.state = &synapseSqlPoolExtendedAuditingPolicyState{}
	if err := json.NewDecoder(av).Decode(sspeap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sspeap.Type(), sspeap.LocalName(), err)
	}
	return nil
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) State() (*synapseSqlPoolExtendedAuditingPolicyState, bool) {
	return sspeap.state, sspeap.state != nil
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) StateMust() *synapseSqlPoolExtendedAuditingPolicyState {
	if sspeap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sspeap.Type(), sspeap.LocalName()))
	}
	return sspeap.state
}

func (sspeap *SynapseSqlPoolExtendedAuditingPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sspeap)
}

type SynapseSqlPoolExtendedAuditingPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogMonitoringEnabled: bool, optional
	LogMonitoringEnabled terra.BoolValue `hcl:"log_monitoring_enabled,attr"`
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// SqlPoolId: string, required
	SqlPoolId terra.StringValue `hcl:"sql_pool_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageAccountAccessKeyIsSecondary: bool, optional
	StorageAccountAccessKeyIsSecondary terra.BoolValue `hcl:"storage_account_access_key_is_secondary,attr"`
	// StorageEndpoint: string, optional
	StorageEndpoint terra.StringValue `hcl:"storage_endpoint,attr"`
	// Timeouts: optional
	Timeouts *synapsesqlpoolextendedauditingpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseSqlPoolExtendedAuditingPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseSqlPoolExtendedAuditingPolicyAttributes struct {
	ref terra.Reference
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sspeap.ref.Append("id"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) LogMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceBool(sspeap.ref.Append("log_monitoring_enabled"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceNumber(sspeap.ref.Append("retention_in_days"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) SqlPoolId() terra.StringValue {
	return terra.ReferenceString(sspeap.ref.Append("sql_pool_id"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(sspeap.ref.Append("storage_account_access_key"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) StorageAccountAccessKeyIsSecondary() terra.BoolValue {
	return terra.ReferenceBool(sspeap.ref.Append("storage_account_access_key_is_secondary"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) StorageEndpoint() terra.StringValue {
	return terra.ReferenceString(sspeap.ref.Append("storage_endpoint"))
}

func (sspeap synapseSqlPoolExtendedAuditingPolicyAttributes) Timeouts() synapsesqlpoolextendedauditingpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsesqlpoolextendedauditingpolicy.TimeoutsAttributes](sspeap.ref.Append("timeouts"))
}

type synapseSqlPoolExtendedAuditingPolicyState struct {
	Id                                 string                                              `json:"id"`
	LogMonitoringEnabled               bool                                                `json:"log_monitoring_enabled"`
	RetentionInDays                    float64                                             `json:"retention_in_days"`
	SqlPoolId                          string                                              `json:"sql_pool_id"`
	StorageAccountAccessKey            string                                              `json:"storage_account_access_key"`
	StorageAccountAccessKeyIsSecondary bool                                                `json:"storage_account_access_key_is_secondary"`
	StorageEndpoint                    string                                              `json:"storage_endpoint"`
	Timeouts                           *synapsesqlpoolextendedauditingpolicy.TimeoutsState `json:"timeouts"`
}
