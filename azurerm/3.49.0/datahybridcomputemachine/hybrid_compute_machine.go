// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datahybridcomputemachine

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AgentConfiguration struct {
	// ExtensionsAllowList: min=0
	ExtensionsAllowList []ExtensionsAllowList `hcl:"extensions_allow_list,block" validate:"min=0"`
	// ExtensionsBlockList: min=0
	ExtensionsBlockList []ExtensionsBlockList `hcl:"extensions_block_list,block" validate:"min=0"`
}

type ExtensionsAllowList struct{}

type ExtensionsBlockList struct{}

type CloudMetadata struct{}

type ErrorDetails struct {
	// AdditionalInfo: min=0
	AdditionalInfo []AdditionalInfo `hcl:"additional_info,block" validate:"min=0"`
}

type AdditionalInfo struct{}

type Identity struct{}

type LocationData struct{}

type OsProfile struct {
	// LinuxConfiguration: min=0
	LinuxConfiguration []LinuxConfiguration `hcl:"linux_configuration,block" validate:"min=0"`
	// WindowsConfiguration: min=0
	WindowsConfiguration []WindowsConfiguration `hcl:"windows_configuration,block" validate:"min=0"`
}

type LinuxConfiguration struct {
	// LinuxConfigurationPatchSettings: min=0
	PatchSettings []LinuxConfigurationPatchSettings `hcl:"patch_settings,block" validate:"min=0"`
}

type LinuxConfigurationPatchSettings struct{}

type WindowsConfiguration struct {
	// WindowsConfigurationPatchSettings: min=0
	PatchSettings []WindowsConfigurationPatchSettings `hcl:"patch_settings,block" validate:"min=0"`
}

type WindowsConfigurationPatchSettings struct{}

type ServiceStatus struct {
	// ExtensionService: min=0
	ExtensionService []ExtensionService `hcl:"extension_service,block" validate:"min=0"`
	// GuestConfigurationService: min=0
	GuestConfigurationService []GuestConfigurationService `hcl:"guest_configuration_service,block" validate:"min=0"`
}

type ExtensionService struct{}

type GuestConfigurationService struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AgentConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AgentConfigurationAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AgentConfigurationAttributes) InternalWithRef(ref terra.Reference) AgentConfigurationAttributes {
	return AgentConfigurationAttributes{ref: ref}
}

func (ac AgentConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AgentConfigurationAttributes) ExtensionsEnabled() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("extensions_enabled"))
}

func (ac AgentConfigurationAttributes) GuestConfigurationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("guest_configuration_enabled"))
}

func (ac AgentConfigurationAttributes) IncomingConnectionsPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ac.ref.Append("incoming_connections_ports"))
}

func (ac AgentConfigurationAttributes) ProxyBypass() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ac.ref.Append("proxy_bypass"))
}

func (ac AgentConfigurationAttributes) ProxyUrl() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("proxy_url"))
}

func (ac AgentConfigurationAttributes) ExtensionsAllowList() terra.ListValue[ExtensionsAllowListAttributes] {
	return terra.ReferenceList[ExtensionsAllowListAttributes](ac.ref.Append("extensions_allow_list"))
}

func (ac AgentConfigurationAttributes) ExtensionsBlockList() terra.ListValue[ExtensionsBlockListAttributes] {
	return terra.ReferenceList[ExtensionsBlockListAttributes](ac.ref.Append("extensions_block_list"))
}

type ExtensionsAllowListAttributes struct {
	ref terra.Reference
}

func (eal ExtensionsAllowListAttributes) InternalRef() terra.Reference {
	return eal.ref
}

func (eal ExtensionsAllowListAttributes) InternalWithRef(ref terra.Reference) ExtensionsAllowListAttributes {
	return ExtensionsAllowListAttributes{ref: ref}
}

func (eal ExtensionsAllowListAttributes) InternalTokens() hclwrite.Tokens {
	return eal.ref.InternalTokens()
}

func (eal ExtensionsAllowListAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(eal.ref.Append("publisher"))
}

func (eal ExtensionsAllowListAttributes) Type() terra.StringValue {
	return terra.ReferenceString(eal.ref.Append("type"))
}

type ExtensionsBlockListAttributes struct {
	ref terra.Reference
}

func (ebl ExtensionsBlockListAttributes) InternalRef() terra.Reference {
	return ebl.ref
}

func (ebl ExtensionsBlockListAttributes) InternalWithRef(ref terra.Reference) ExtensionsBlockListAttributes {
	return ExtensionsBlockListAttributes{ref: ref}
}

func (ebl ExtensionsBlockListAttributes) InternalTokens() hclwrite.Tokens {
	return ebl.ref.InternalTokens()
}

func (ebl ExtensionsBlockListAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(ebl.ref.Append("publisher"))
}

func (ebl ExtensionsBlockListAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ebl.ref.Append("type"))
}

type CloudMetadataAttributes struct {
	ref terra.Reference
}

func (cm CloudMetadataAttributes) InternalRef() terra.Reference {
	return cm.ref
}

func (cm CloudMetadataAttributes) InternalWithRef(ref terra.Reference) CloudMetadataAttributes {
	return CloudMetadataAttributes{ref: ref}
}

func (cm CloudMetadataAttributes) InternalTokens() hclwrite.Tokens {
	return cm.ref.InternalTokens()
}

func (cm CloudMetadataAttributes) Provider() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("provider"))
}

type ErrorDetailsAttributes struct {
	ref terra.Reference
}

func (ed ErrorDetailsAttributes) InternalRef() terra.Reference {
	return ed.ref
}

func (ed ErrorDetailsAttributes) InternalWithRef(ref terra.Reference) ErrorDetailsAttributes {
	return ErrorDetailsAttributes{ref: ref}
}

func (ed ErrorDetailsAttributes) InternalTokens() hclwrite.Tokens {
	return ed.ref.InternalTokens()
}

func (ed ErrorDetailsAttributes) Code() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("code"))
}

func (ed ErrorDetailsAttributes) Message() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("message"))
}

func (ed ErrorDetailsAttributes) Target() terra.StringValue {
	return terra.ReferenceString(ed.ref.Append("target"))
}

func (ed ErrorDetailsAttributes) AdditionalInfo() terra.ListValue[AdditionalInfoAttributes] {
	return terra.ReferenceList[AdditionalInfoAttributes](ed.ref.Append("additional_info"))
}

type AdditionalInfoAttributes struct {
	ref terra.Reference
}

func (ai AdditionalInfoAttributes) InternalRef() terra.Reference {
	return ai.ref
}

func (ai AdditionalInfoAttributes) InternalWithRef(ref terra.Reference) AdditionalInfoAttributes {
	return AdditionalInfoAttributes{ref: ref}
}

func (ai AdditionalInfoAttributes) InternalTokens() hclwrite.Tokens {
	return ai.ref.InternalTokens()
}

func (ai AdditionalInfoAttributes) Info() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("info"))
}

func (ai AdditionalInfoAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("type"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type LocationDataAttributes struct {
	ref terra.Reference
}

func (ld LocationDataAttributes) InternalRef() terra.Reference {
	return ld.ref
}

func (ld LocationDataAttributes) InternalWithRef(ref terra.Reference) LocationDataAttributes {
	return LocationDataAttributes{ref: ref}
}

func (ld LocationDataAttributes) InternalTokens() hclwrite.Tokens {
	return ld.ref.InternalTokens()
}

func (ld LocationDataAttributes) City() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("city"))
}

func (ld LocationDataAttributes) CountryOrRegion() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("country_or_region"))
}

func (ld LocationDataAttributes) District() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("district"))
}

func (ld LocationDataAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("name"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() terra.Reference {
	return op.ref
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() hclwrite.Tokens {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) ComputerName() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("computer_name"))
}

func (op OsProfileAttributes) LinuxConfiguration() terra.ListValue[LinuxConfigurationAttributes] {
	return terra.ReferenceList[LinuxConfigurationAttributes](op.ref.Append("linux_configuration"))
}

func (op OsProfileAttributes) WindowsConfiguration() terra.ListValue[WindowsConfigurationAttributes] {
	return terra.ReferenceList[WindowsConfigurationAttributes](op.ref.Append("windows_configuration"))
}

type LinuxConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LinuxConfigurationAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LinuxConfigurationAttributes) InternalWithRef(ref terra.Reference) LinuxConfigurationAttributes {
	return LinuxConfigurationAttributes{ref: ref}
}

func (lc LinuxConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LinuxConfigurationAttributes) PatchSettings() terra.ListValue[LinuxConfigurationPatchSettingsAttributes] {
	return terra.ReferenceList[LinuxConfigurationPatchSettingsAttributes](lc.ref.Append("patch_settings"))
}

type LinuxConfigurationPatchSettingsAttributes struct {
	ref terra.Reference
}

func (ps LinuxConfigurationPatchSettingsAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps LinuxConfigurationPatchSettingsAttributes) InternalWithRef(ref terra.Reference) LinuxConfigurationPatchSettingsAttributes {
	return LinuxConfigurationPatchSettingsAttributes{ref: ref}
}

func (ps LinuxConfigurationPatchSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps LinuxConfigurationPatchSettingsAttributes) AssessmentMode() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("assessment_mode"))
}

func (ps LinuxConfigurationPatchSettingsAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("patch_mode"))
}

type WindowsConfigurationAttributes struct {
	ref terra.Reference
}

func (wc WindowsConfigurationAttributes) InternalRef() terra.Reference {
	return wc.ref
}

func (wc WindowsConfigurationAttributes) InternalWithRef(ref terra.Reference) WindowsConfigurationAttributes {
	return WindowsConfigurationAttributes{ref: ref}
}

func (wc WindowsConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return wc.ref.InternalTokens()
}

func (wc WindowsConfigurationAttributes) PatchSettings() terra.ListValue[WindowsConfigurationPatchSettingsAttributes] {
	return terra.ReferenceList[WindowsConfigurationPatchSettingsAttributes](wc.ref.Append("patch_settings"))
}

type WindowsConfigurationPatchSettingsAttributes struct {
	ref terra.Reference
}

func (ps WindowsConfigurationPatchSettingsAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps WindowsConfigurationPatchSettingsAttributes) InternalWithRef(ref terra.Reference) WindowsConfigurationPatchSettingsAttributes {
	return WindowsConfigurationPatchSettingsAttributes{ref: ref}
}

func (ps WindowsConfigurationPatchSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps WindowsConfigurationPatchSettingsAttributes) AssessmentMode() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("assessment_mode"))
}

func (ps WindowsConfigurationPatchSettingsAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("patch_mode"))
}

type ServiceStatusAttributes struct {
	ref terra.Reference
}

func (ss ServiceStatusAttributes) InternalRef() terra.Reference {
	return ss.ref
}

func (ss ServiceStatusAttributes) InternalWithRef(ref terra.Reference) ServiceStatusAttributes {
	return ServiceStatusAttributes{ref: ref}
}

func (ss ServiceStatusAttributes) InternalTokens() hclwrite.Tokens {
	return ss.ref.InternalTokens()
}

func (ss ServiceStatusAttributes) ExtensionService() terra.ListValue[ExtensionServiceAttributes] {
	return terra.ReferenceList[ExtensionServiceAttributes](ss.ref.Append("extension_service"))
}

func (ss ServiceStatusAttributes) GuestConfigurationService() terra.ListValue[GuestConfigurationServiceAttributes] {
	return terra.ReferenceList[GuestConfigurationServiceAttributes](ss.ref.Append("guest_configuration_service"))
}

type ExtensionServiceAttributes struct {
	ref terra.Reference
}

func (es ExtensionServiceAttributes) InternalRef() terra.Reference {
	return es.ref
}

func (es ExtensionServiceAttributes) InternalWithRef(ref terra.Reference) ExtensionServiceAttributes {
	return ExtensionServiceAttributes{ref: ref}
}

func (es ExtensionServiceAttributes) InternalTokens() hclwrite.Tokens {
	return es.ref.InternalTokens()
}

func (es ExtensionServiceAttributes) StartupType() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("startup_type"))
}

func (es ExtensionServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("status"))
}

type GuestConfigurationServiceAttributes struct {
	ref terra.Reference
}

func (gcs GuestConfigurationServiceAttributes) InternalRef() terra.Reference {
	return gcs.ref
}

func (gcs GuestConfigurationServiceAttributes) InternalWithRef(ref terra.Reference) GuestConfigurationServiceAttributes {
	return GuestConfigurationServiceAttributes{ref: ref}
}

func (gcs GuestConfigurationServiceAttributes) InternalTokens() hclwrite.Tokens {
	return gcs.ref.InternalTokens()
}

func (gcs GuestConfigurationServiceAttributes) StartupType() terra.StringValue {
	return terra.ReferenceString(gcs.ref.Append("startup_type"))
}

func (gcs GuestConfigurationServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceString(gcs.ref.Append("status"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type AgentConfigurationState struct {
	ExtensionsEnabled         bool                       `json:"extensions_enabled"`
	GuestConfigurationEnabled bool                       `json:"guest_configuration_enabled"`
	IncomingConnectionsPorts  []string                   `json:"incoming_connections_ports"`
	ProxyBypass               []string                   `json:"proxy_bypass"`
	ProxyUrl                  string                     `json:"proxy_url"`
	ExtensionsAllowList       []ExtensionsAllowListState `json:"extensions_allow_list"`
	ExtensionsBlockList       []ExtensionsBlockListState `json:"extensions_block_list"`
}

type ExtensionsAllowListState struct {
	Publisher string `json:"publisher"`
	Type      string `json:"type"`
}

type ExtensionsBlockListState struct {
	Publisher string `json:"publisher"`
	Type      string `json:"type"`
}

type CloudMetadataState struct {
	Provider string `json:"provider"`
}

type ErrorDetailsState struct {
	Code           string                `json:"code"`
	Message        string                `json:"message"`
	Target         string                `json:"target"`
	AdditionalInfo []AdditionalInfoState `json:"additional_info"`
}

type AdditionalInfoState struct {
	Info string `json:"info"`
	Type string `json:"type"`
}

type IdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type LocationDataState struct {
	City            string `json:"city"`
	CountryOrRegion string `json:"country_or_region"`
	District        string `json:"district"`
	Name            string `json:"name"`
}

type OsProfileState struct {
	ComputerName         string                      `json:"computer_name"`
	LinuxConfiguration   []LinuxConfigurationState   `json:"linux_configuration"`
	WindowsConfiguration []WindowsConfigurationState `json:"windows_configuration"`
}

type LinuxConfigurationState struct {
	PatchSettings []LinuxConfigurationPatchSettingsState `json:"patch_settings"`
}

type LinuxConfigurationPatchSettingsState struct {
	AssessmentMode string `json:"assessment_mode"`
	PatchMode      string `json:"patch_mode"`
}

type WindowsConfigurationState struct {
	PatchSettings []WindowsConfigurationPatchSettingsState `json:"patch_settings"`
}

type WindowsConfigurationPatchSettingsState struct {
	AssessmentMode string `json:"assessment_mode"`
	PatchMode      string `json:"patch_mode"`
}

type ServiceStatusState struct {
	ExtensionService          []ExtensionServiceState          `json:"extension_service"`
	GuestConfigurationService []GuestConfigurationServiceState `json:"guest_configuration_service"`
}

type ExtensionServiceState struct {
	StartupType string `json:"startup_type"`
	Status      string `json:"status"`
}

type GuestConfigurationServiceState struct {
	StartupType string `json:"startup_type"`
	Status      string `json:"status"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
