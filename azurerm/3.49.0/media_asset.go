// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mediaasset "github.com/golingon/terraproviders/azurerm/3.49.0/mediaasset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaAsset(name string, args MediaAssetArgs) *MediaAsset {
	return &MediaAsset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaAsset)(nil)

type MediaAsset struct {
	Name  string
	Args  MediaAssetArgs
	state *mediaAssetState
}

func (ma *MediaAsset) Type() string {
	return "azurerm_media_asset"
}

func (ma *MediaAsset) LocalName() string {
	return ma.Name
}

func (ma *MediaAsset) Configuration() interface{} {
	return ma.Args
}

func (ma *MediaAsset) Attributes() mediaAssetAttributes {
	return mediaAssetAttributes{ref: terra.ReferenceResource(ma)}
}

func (ma *MediaAsset) ImportState(av io.Reader) error {
	ma.state = &mediaAssetState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

func (ma *MediaAsset) State() (*mediaAssetState, bool) {
	return ma.state, ma.state != nil
}

func (ma *MediaAsset) StateMust() *mediaAssetState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

func (ma *MediaAsset) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

type MediaAssetArgs struct {
	// AlternateId: string, optional
	AlternateId terra.StringValue `hcl:"alternate_id,attr"`
	// Container: string, optional
	Container terra.StringValue `hcl:"container,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// Timeouts: optional
	Timeouts *mediaasset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MediaAsset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaAssetAttributes struct {
	ref terra.Reference
}

func (ma mediaAssetAttributes) AlternateId() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("alternate_id"))
}

func (ma mediaAssetAttributes) Container() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("container"))
}

func (ma mediaAssetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("description"))
}

func (ma mediaAssetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("id"))
}

func (ma mediaAssetAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("media_services_account_name"))
}

func (ma mediaAssetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("name"))
}

func (ma mediaAssetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("resource_group_name"))
}

func (ma mediaAssetAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("storage_account_name"))
}

func (ma mediaAssetAttributes) Timeouts() mediaasset.TimeoutsAttributes {
	return terra.ReferenceSingle[mediaasset.TimeoutsAttributes](ma.ref.Append("timeouts"))
}

type mediaAssetState struct {
	AlternateId              string                    `json:"alternate_id"`
	Container                string                    `json:"container"`
	Description              string                    `json:"description"`
	Id                       string                    `json:"id"`
	MediaServicesAccountName string                    `json:"media_services_account_name"`
	Name                     string                    `json:"name"`
	ResourceGroupName        string                    `json:"resource_group_name"`
	StorageAccountName       string                    `json:"storage_account_name"`
	Timeouts                 *mediaasset.TimeoutsState `json:"timeouts"`
}
