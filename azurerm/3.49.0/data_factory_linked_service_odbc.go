// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedserviceodbc "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedserviceodbc"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceOdbc(name string, args DataFactoryLinkedServiceOdbcArgs) *DataFactoryLinkedServiceOdbc {
	return &DataFactoryLinkedServiceOdbc{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceOdbc)(nil)

type DataFactoryLinkedServiceOdbc struct {
	Name  string
	Args  DataFactoryLinkedServiceOdbcArgs
	state *dataFactoryLinkedServiceOdbcState
}

func (dflso *DataFactoryLinkedServiceOdbc) Type() string {
	return "azurerm_data_factory_linked_service_odbc"
}

func (dflso *DataFactoryLinkedServiceOdbc) LocalName() string {
	return dflso.Name
}

func (dflso *DataFactoryLinkedServiceOdbc) Configuration() interface{} {
	return dflso.Args
}

func (dflso *DataFactoryLinkedServiceOdbc) Attributes() dataFactoryLinkedServiceOdbcAttributes {
	return dataFactoryLinkedServiceOdbcAttributes{ref: terra.ReferenceResource(dflso)}
}

func (dflso *DataFactoryLinkedServiceOdbc) ImportState(av io.Reader) error {
	dflso.state = &dataFactoryLinkedServiceOdbcState{}
	if err := json.NewDecoder(av).Decode(dflso.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflso.Type(), dflso.LocalName(), err)
	}
	return nil
}

func (dflso *DataFactoryLinkedServiceOdbc) State() (*dataFactoryLinkedServiceOdbcState, bool) {
	return dflso.state, dflso.state != nil
}

func (dflso *DataFactoryLinkedServiceOdbc) StateMust() *dataFactoryLinkedServiceOdbcState {
	if dflso.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflso.Type(), dflso.LocalName()))
	}
	return dflso.state
}

func (dflso *DataFactoryLinkedServiceOdbc) DependOn() terra.Reference {
	return terra.ReferenceResource(dflso)
}

type DataFactoryLinkedServiceOdbcArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// BasicAuthentication: optional
	BasicAuthentication *datafactorylinkedserviceodbc.BasicAuthentication `hcl:"basic_authentication,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedserviceodbc.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceOdbc depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceOdbcAttributes struct {
	ref terra.Reference
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflso.ref.Append("additional_properties"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflso.ref.Append("annotations"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("connection_string"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("data_factory_id"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("description"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("id"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("integration_runtime_name"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflso.ref.Append("name"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflso.ref.Append("parameters"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) BasicAuthentication() terra.ListValue[datafactorylinkedserviceodbc.BasicAuthenticationAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceodbc.BasicAuthenticationAttributes](dflso.ref.Append("basic_authentication"))
}

func (dflso dataFactoryLinkedServiceOdbcAttributes) Timeouts() datafactorylinkedserviceodbc.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedserviceodbc.TimeoutsAttributes](dflso.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceOdbcState struct {
	AdditionalProperties   map[string]string                                       `json:"additional_properties"`
	Annotations            []string                                                `json:"annotations"`
	ConnectionString       string                                                  `json:"connection_string"`
	DataFactoryId          string                                                  `json:"data_factory_id"`
	Description            string                                                  `json:"description"`
	Id                     string                                                  `json:"id"`
	IntegrationRuntimeName string                                                  `json:"integration_runtime_name"`
	Name                   string                                                  `json:"name"`
	Parameters             map[string]string                                       `json:"parameters"`
	BasicAuthentication    []datafactorylinkedserviceodbc.BasicAuthenticationState `json:"basic_authentication"`
	Timeouts               *datafactorylinkedserviceodbc.TimeoutsState             `json:"timeouts"`
}
