// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicekeyvault "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicekeyvault"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceKeyVault(name string, args DataFactoryLinkedServiceKeyVaultArgs) *DataFactoryLinkedServiceKeyVault {
	return &DataFactoryLinkedServiceKeyVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceKeyVault)(nil)

type DataFactoryLinkedServiceKeyVault struct {
	Name  string
	Args  DataFactoryLinkedServiceKeyVaultArgs
	state *dataFactoryLinkedServiceKeyVaultState
}

func (dflskv *DataFactoryLinkedServiceKeyVault) Type() string {
	return "azurerm_data_factory_linked_service_key_vault"
}

func (dflskv *DataFactoryLinkedServiceKeyVault) LocalName() string {
	return dflskv.Name
}

func (dflskv *DataFactoryLinkedServiceKeyVault) Configuration() interface{} {
	return dflskv.Args
}

func (dflskv *DataFactoryLinkedServiceKeyVault) Attributes() dataFactoryLinkedServiceKeyVaultAttributes {
	return dataFactoryLinkedServiceKeyVaultAttributes{ref: terra.ReferenceResource(dflskv)}
}

func (dflskv *DataFactoryLinkedServiceKeyVault) ImportState(av io.Reader) error {
	dflskv.state = &dataFactoryLinkedServiceKeyVaultState{}
	if err := json.NewDecoder(av).Decode(dflskv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflskv.Type(), dflskv.LocalName(), err)
	}
	return nil
}

func (dflskv *DataFactoryLinkedServiceKeyVault) State() (*dataFactoryLinkedServiceKeyVaultState, bool) {
	return dflskv.state, dflskv.state != nil
}

func (dflskv *DataFactoryLinkedServiceKeyVault) StateMust() *dataFactoryLinkedServiceKeyVaultState {
	if dflskv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflskv.Type(), dflskv.LocalName()))
	}
	return dflskv.state
}

func (dflskv *DataFactoryLinkedServiceKeyVault) DependOn() terra.Reference {
	return terra.ReferenceResource(dflskv)
}

type DataFactoryLinkedServiceKeyVaultArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicekeyvault.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceKeyVault depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceKeyVaultAttributes struct {
	ref terra.Reference
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflskv.ref.Append("additional_properties"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflskv.ref.Append("annotations"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("data_factory_id"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("description"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("id"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("integration_runtime_name"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("key_vault_id"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflskv.ref.Append("name"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflskv.ref.Append("parameters"))
}

func (dflskv dataFactoryLinkedServiceKeyVaultAttributes) Timeouts() datafactorylinkedservicekeyvault.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicekeyvault.TimeoutsAttributes](dflskv.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceKeyVaultState struct {
	AdditionalProperties   map[string]string                               `json:"additional_properties"`
	Annotations            []string                                        `json:"annotations"`
	DataFactoryId          string                                          `json:"data_factory_id"`
	Description            string                                          `json:"description"`
	Id                     string                                          `json:"id"`
	IntegrationRuntimeName string                                          `json:"integration_runtime_name"`
	KeyVaultId             string                                          `json:"key_vault_id"`
	Name                   string                                          `json:"name"`
	Parameters             map[string]string                               `json:"parameters"`
	Timeouts               *datafactorylinkedservicekeyvault.TimeoutsState `json:"timeouts"`
}
