// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package databatchaccount

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Encryption struct {
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
}

type KeyVaultReference struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("key_vault_key_id"))
}

type KeyVaultReferenceAttributes struct {
	ref terra.Reference
}

func (kvr KeyVaultReferenceAttributes) InternalRef() terra.Reference {
	return kvr.ref
}

func (kvr KeyVaultReferenceAttributes) InternalWithRef(ref terra.Reference) KeyVaultReferenceAttributes {
	return KeyVaultReferenceAttributes{ref: ref}
}

func (kvr KeyVaultReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return kvr.ref.InternalTokens()
}

func (kvr KeyVaultReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvr.ref.Append("id"))
}

func (kvr KeyVaultReferenceAttributes) Url() terra.StringValue {
	return terra.ReferenceString(kvr.ref.Append("url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type EncryptionState struct {
	KeyVaultKeyId string `json:"key_vault_key_id"`
}

type KeyVaultReferenceState struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
