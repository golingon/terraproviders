// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadnscaarecord

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Record struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type RecordAttributes struct {
	ref terra.Reference
}

func (r RecordAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RecordAttributes) InternalWithRef(ref terra.Reference) RecordAttributes {
	return RecordAttributes{ref: ref}
}

func (r RecordAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RecordAttributes) Flags() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("flags"))
}

func (r RecordAttributes) Tag() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("tag"))
}

func (r RecordAttributes) Value() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type RecordState struct {
	Flags float64 `json:"flags"`
	Tag   string  `json:"tag"`
	Value string  `json:"value"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
