// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorytriggerblobevent "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorytriggerblobevent"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryTriggerBlobEvent(name string, args DataFactoryTriggerBlobEventArgs) *DataFactoryTriggerBlobEvent {
	return &DataFactoryTriggerBlobEvent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryTriggerBlobEvent)(nil)

type DataFactoryTriggerBlobEvent struct {
	Name  string
	Args  DataFactoryTriggerBlobEventArgs
	state *dataFactoryTriggerBlobEventState
}

func (dftbe *DataFactoryTriggerBlobEvent) Type() string {
	return "azurerm_data_factory_trigger_blob_event"
}

func (dftbe *DataFactoryTriggerBlobEvent) LocalName() string {
	return dftbe.Name
}

func (dftbe *DataFactoryTriggerBlobEvent) Configuration() interface{} {
	return dftbe.Args
}

func (dftbe *DataFactoryTriggerBlobEvent) Attributes() dataFactoryTriggerBlobEventAttributes {
	return dataFactoryTriggerBlobEventAttributes{ref: terra.ReferenceResource(dftbe)}
}

func (dftbe *DataFactoryTriggerBlobEvent) ImportState(av io.Reader) error {
	dftbe.state = &dataFactoryTriggerBlobEventState{}
	if err := json.NewDecoder(av).Decode(dftbe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dftbe.Type(), dftbe.LocalName(), err)
	}
	return nil
}

func (dftbe *DataFactoryTriggerBlobEvent) State() (*dataFactoryTriggerBlobEventState, bool) {
	return dftbe.state, dftbe.state != nil
}

func (dftbe *DataFactoryTriggerBlobEvent) StateMust() *dataFactoryTriggerBlobEventState {
	if dftbe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dftbe.Type(), dftbe.LocalName()))
	}
	return dftbe.state
}

func (dftbe *DataFactoryTriggerBlobEvent) DependOn() terra.Reference {
	return terra.ReferenceResource(dftbe)
}

type DataFactoryTriggerBlobEventArgs struct {
	// Activated: bool, optional
	Activated terra.BoolValue `hcl:"activated,attr"`
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// BlobPathBeginsWith: string, optional
	BlobPathBeginsWith terra.StringValue `hcl:"blob_path_begins_with,attr"`
	// BlobPathEndsWith: string, optional
	BlobPathEndsWith terra.StringValue `hcl:"blob_path_ends_with,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Events: set of string, required
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreEmptyBlobs: bool, optional
	IgnoreEmptyBlobs terra.BoolValue `hcl:"ignore_empty_blobs,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Pipeline: min=1
	Pipeline []datafactorytriggerblobevent.Pipeline `hcl:"pipeline,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *datafactorytriggerblobevent.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryTriggerBlobEvent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryTriggerBlobEventAttributes struct {
	ref terra.Reference
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Activated() terra.BoolValue {
	return terra.ReferenceBool(dftbe.ref.Append("activated"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dftbe.ref.Append("additional_properties"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dftbe.ref.Append("annotations"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) BlobPathBeginsWith() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("blob_path_begins_with"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) BlobPathEndsWith() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("blob_path_ends_with"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("data_factory_id"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("description"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dftbe.ref.Append("events"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("id"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) IgnoreEmptyBlobs() terra.BoolValue {
	return terra.ReferenceBool(dftbe.ref.Append("ignore_empty_blobs"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("name"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(dftbe.ref.Append("storage_account_id"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Pipeline() terra.SetValue[datafactorytriggerblobevent.PipelineAttributes] {
	return terra.ReferenceSet[datafactorytriggerblobevent.PipelineAttributes](dftbe.ref.Append("pipeline"))
}

func (dftbe dataFactoryTriggerBlobEventAttributes) Timeouts() datafactorytriggerblobevent.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorytriggerblobevent.TimeoutsAttributes](dftbe.ref.Append("timeouts"))
}

type dataFactoryTriggerBlobEventState struct {
	Activated            bool                                        `json:"activated"`
	AdditionalProperties map[string]string                           `json:"additional_properties"`
	Annotations          []string                                    `json:"annotations"`
	BlobPathBeginsWith   string                                      `json:"blob_path_begins_with"`
	BlobPathEndsWith     string                                      `json:"blob_path_ends_with"`
	DataFactoryId        string                                      `json:"data_factory_id"`
	Description          string                                      `json:"description"`
	Events               []string                                    `json:"events"`
	Id                   string                                      `json:"id"`
	IgnoreEmptyBlobs     bool                                        `json:"ignore_empty_blobs"`
	Name                 string                                      `json:"name"`
	StorageAccountId     string                                      `json:"storage_account_id"`
	Pipeline             []datafactorytriggerblobevent.PipelineState `json:"pipeline"`
	Timeouts             *datafactorytriggerblobevent.TimeoutsState  `json:"timeouts"`
}
