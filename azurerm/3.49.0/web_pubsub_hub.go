// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	webpubsubhub "github.com/golingon/terraproviders/azurerm/3.49.0/webpubsubhub"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWebPubsubHub(name string, args WebPubsubHubArgs) *WebPubsubHub {
	return &WebPubsubHub{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WebPubsubHub)(nil)

type WebPubsubHub struct {
	Name  string
	Args  WebPubsubHubArgs
	state *webPubsubHubState
}

func (wph *WebPubsubHub) Type() string {
	return "azurerm_web_pubsub_hub"
}

func (wph *WebPubsubHub) LocalName() string {
	return wph.Name
}

func (wph *WebPubsubHub) Configuration() interface{} {
	return wph.Args
}

func (wph *WebPubsubHub) Attributes() webPubsubHubAttributes {
	return webPubsubHubAttributes{ref: terra.ReferenceResource(wph)}
}

func (wph *WebPubsubHub) ImportState(av io.Reader) error {
	wph.state = &webPubsubHubState{}
	if err := json.NewDecoder(av).Decode(wph.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wph.Type(), wph.LocalName(), err)
	}
	return nil
}

func (wph *WebPubsubHub) State() (*webPubsubHubState, bool) {
	return wph.state, wph.state != nil
}

func (wph *WebPubsubHub) StateMust() *webPubsubHubState {
	if wph.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wph.Type(), wph.LocalName()))
	}
	return wph.state
}

func (wph *WebPubsubHub) DependOn() terra.Reference {
	return terra.ReferenceResource(wph)
}

type WebPubsubHubArgs struct {
	// AnonymousConnectionsEnabled: bool, optional
	AnonymousConnectionsEnabled terra.BoolValue `hcl:"anonymous_connections_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// WebPubsubId: string, required
	WebPubsubId terra.StringValue `hcl:"web_pubsub_id,attr" validate:"required"`
	// EventHandler: min=0
	EventHandler []webpubsubhub.EventHandler `hcl:"event_handler,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *webpubsubhub.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that WebPubsubHub depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type webPubsubHubAttributes struct {
	ref terra.Reference
}

func (wph webPubsubHubAttributes) AnonymousConnectionsEnabled() terra.BoolValue {
	return terra.ReferenceBool(wph.ref.Append("anonymous_connections_enabled"))
}

func (wph webPubsubHubAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wph.ref.Append("id"))
}

func (wph webPubsubHubAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wph.ref.Append("name"))
}

func (wph webPubsubHubAttributes) WebPubsubId() terra.StringValue {
	return terra.ReferenceString(wph.ref.Append("web_pubsub_id"))
}

func (wph webPubsubHubAttributes) EventHandler() terra.ListValue[webpubsubhub.EventHandlerAttributes] {
	return terra.ReferenceList[webpubsubhub.EventHandlerAttributes](wph.ref.Append("event_handler"))
}

func (wph webPubsubHubAttributes) Timeouts() webpubsubhub.TimeoutsAttributes {
	return terra.ReferenceSingle[webpubsubhub.TimeoutsAttributes](wph.ref.Append("timeouts"))
}

type webPubsubHubState struct {
	AnonymousConnectionsEnabled bool                             `json:"anonymous_connections_enabled"`
	Id                          string                           `json:"id"`
	Name                        string                           `json:"name"`
	WebPubsubId                 string                           `json:"web_pubsub_id"`
	EventHandler                []webpubsubhub.EventHandlerState `json:"event_handler"`
	Timeouts                    *webpubsubhub.TimeoutsState      `json:"timeouts"`
}
