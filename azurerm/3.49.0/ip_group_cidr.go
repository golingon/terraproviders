// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	ipgroupcidr "github.com/golingon/terraproviders/azurerm/3.49.0/ipgroupcidr"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIpGroupCidr(name string, args IpGroupCidrArgs) *IpGroupCidr {
	return &IpGroupCidr{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IpGroupCidr)(nil)

type IpGroupCidr struct {
	Name  string
	Args  IpGroupCidrArgs
	state *ipGroupCidrState
}

func (igc *IpGroupCidr) Type() string {
	return "azurerm_ip_group_cidr"
}

func (igc *IpGroupCidr) LocalName() string {
	return igc.Name
}

func (igc *IpGroupCidr) Configuration() interface{} {
	return igc.Args
}

func (igc *IpGroupCidr) Attributes() ipGroupCidrAttributes {
	return ipGroupCidrAttributes{ref: terra.ReferenceResource(igc)}
}

func (igc *IpGroupCidr) ImportState(av io.Reader) error {
	igc.state = &ipGroupCidrState{}
	if err := json.NewDecoder(av).Decode(igc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", igc.Type(), igc.LocalName(), err)
	}
	return nil
}

func (igc *IpGroupCidr) State() (*ipGroupCidrState, bool) {
	return igc.state, igc.state != nil
}

func (igc *IpGroupCidr) StateMust() *ipGroupCidrState {
	if igc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", igc.Type(), igc.LocalName()))
	}
	return igc.state
}

func (igc *IpGroupCidr) DependOn() terra.Reference {
	return terra.ReferenceResource(igc)
}

type IpGroupCidrArgs struct {
	// Cidr: string, required
	Cidr terra.StringValue `hcl:"cidr,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpGroupId: string, required
	IpGroupId terra.StringValue `hcl:"ip_group_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ipgroupcidr.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IpGroupCidr depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ipGroupCidrAttributes struct {
	ref terra.Reference
}

func (igc ipGroupCidrAttributes) Cidr() terra.StringValue {
	return terra.ReferenceString(igc.ref.Append("cidr"))
}

func (igc ipGroupCidrAttributes) Id() terra.StringValue {
	return terra.ReferenceString(igc.ref.Append("id"))
}

func (igc ipGroupCidrAttributes) IpGroupId() terra.StringValue {
	return terra.ReferenceString(igc.ref.Append("ip_group_id"))
}

func (igc ipGroupCidrAttributes) Timeouts() ipgroupcidr.TimeoutsAttributes {
	return terra.ReferenceSingle[ipgroupcidr.TimeoutsAttributes](igc.ref.Append("timeouts"))
}

type ipGroupCidrState struct {
	Cidr      string                     `json:"cidr"`
	Id        string                     `json:"id"`
	IpGroupId string                     `json:"ip_group_id"`
	Timeouts  *ipgroupcidr.TimeoutsState `json:"timeouts"`
}
