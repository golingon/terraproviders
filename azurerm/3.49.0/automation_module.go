// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationmodule "github.com/golingon/terraproviders/azurerm/3.49.0/automationmodule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationModule(name string, args AutomationModuleArgs) *AutomationModule {
	return &AutomationModule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationModule)(nil)

type AutomationModule struct {
	Name  string
	Args  AutomationModuleArgs
	state *automationModuleState
}

func (am *AutomationModule) Type() string {
	return "azurerm_automation_module"
}

func (am *AutomationModule) LocalName() string {
	return am.Name
}

func (am *AutomationModule) Configuration() interface{} {
	return am.Args
}

func (am *AutomationModule) Attributes() automationModuleAttributes {
	return automationModuleAttributes{ref: terra.ReferenceResource(am)}
}

func (am *AutomationModule) ImportState(av io.Reader) error {
	am.state = &automationModuleState{}
	if err := json.NewDecoder(av).Decode(am.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", am.Type(), am.LocalName(), err)
	}
	return nil
}

func (am *AutomationModule) State() (*automationModuleState, bool) {
	return am.state, am.state != nil
}

func (am *AutomationModule) StateMust() *automationModuleState {
	if am.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", am.Type(), am.LocalName()))
	}
	return am.state
}

func (am *AutomationModule) DependOn() terra.Reference {
	return terra.ReferenceResource(am)
}

type AutomationModuleArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ModuleLink: required
	ModuleLink *automationmodule.ModuleLink `hcl:"module_link,block" validate:"required"`
	// Timeouts: optional
	Timeouts *automationmodule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationModule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationModuleAttributes struct {
	ref terra.Reference
}

func (am automationModuleAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("automation_account_name"))
}

func (am automationModuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("id"))
}

func (am automationModuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("name"))
}

func (am automationModuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("resource_group_name"))
}

func (am automationModuleAttributes) ModuleLink() terra.ListValue[automationmodule.ModuleLinkAttributes] {
	return terra.ReferenceList[automationmodule.ModuleLinkAttributes](am.ref.Append("module_link"))
}

func (am automationModuleAttributes) Timeouts() automationmodule.TimeoutsAttributes {
	return terra.ReferenceSingle[automationmodule.TimeoutsAttributes](am.ref.Append("timeouts"))
}

type automationModuleState struct {
	AutomationAccountName string                             `json:"automation_account_name"`
	Id                    string                             `json:"id"`
	Name                  string                             `json:"name"`
	ResourceGroupName     string                             `json:"resource_group_name"`
	ModuleLink            []automationmodule.ModuleLinkState `json:"module_link"`
	Timeouts              *automationmodule.TimeoutsState    `json:"timeouts"`
}
