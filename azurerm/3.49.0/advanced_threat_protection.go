// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	advancedthreatprotection "github.com/golingon/terraproviders/azurerm/3.49.0/advancedthreatprotection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAdvancedThreatProtection(name string, args AdvancedThreatProtectionArgs) *AdvancedThreatProtection {
	return &AdvancedThreatProtection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AdvancedThreatProtection)(nil)

type AdvancedThreatProtection struct {
	Name  string
	Args  AdvancedThreatProtectionArgs
	state *advancedThreatProtectionState
}

func (atp *AdvancedThreatProtection) Type() string {
	return "azurerm_advanced_threat_protection"
}

func (atp *AdvancedThreatProtection) LocalName() string {
	return atp.Name
}

func (atp *AdvancedThreatProtection) Configuration() interface{} {
	return atp.Args
}

func (atp *AdvancedThreatProtection) Attributes() advancedThreatProtectionAttributes {
	return advancedThreatProtectionAttributes{ref: terra.ReferenceResource(atp)}
}

func (atp *AdvancedThreatProtection) ImportState(av io.Reader) error {
	atp.state = &advancedThreatProtectionState{}
	if err := json.NewDecoder(av).Decode(atp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atp.Type(), atp.LocalName(), err)
	}
	return nil
}

func (atp *AdvancedThreatProtection) State() (*advancedThreatProtectionState, bool) {
	return atp.state, atp.state != nil
}

func (atp *AdvancedThreatProtection) StateMust() *advancedThreatProtectionState {
	if atp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atp.Type(), atp.LocalName()))
	}
	return atp.state
}

func (atp *AdvancedThreatProtection) DependOn() terra.Reference {
	return terra.ReferenceResource(atp)
}

type AdvancedThreatProtectionArgs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *advancedthreatprotection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AdvancedThreatProtection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type advancedThreatProtectionAttributes struct {
	ref terra.Reference
}

func (atp advancedThreatProtectionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(atp.ref.Append("enabled"))
}

func (atp advancedThreatProtectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(atp.ref.Append("id"))
}

func (atp advancedThreatProtectionAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(atp.ref.Append("target_resource_id"))
}

func (atp advancedThreatProtectionAttributes) Timeouts() advancedthreatprotection.TimeoutsAttributes {
	return terra.ReferenceSingle[advancedthreatprotection.TimeoutsAttributes](atp.ref.Append("timeouts"))
}

type advancedThreatProtectionState struct {
	Enabled          bool                                    `json:"enabled"`
	Id               string                                  `json:"id"`
	TargetResourceId string                                  `json:"target_resource_id"`
	Timeouts         *advancedthreatprotection.TimeoutsState `json:"timeouts"`
}
