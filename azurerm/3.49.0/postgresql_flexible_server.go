// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlflexibleserver "github.com/golingon/terraproviders/azurerm/3.49.0/postgresqlflexibleserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPostgresqlFlexibleServer(name string, args PostgresqlFlexibleServerArgs) *PostgresqlFlexibleServer {
	return &PostgresqlFlexibleServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlFlexibleServer)(nil)

type PostgresqlFlexibleServer struct {
	Name  string
	Args  PostgresqlFlexibleServerArgs
	state *postgresqlFlexibleServerState
}

func (pfs *PostgresqlFlexibleServer) Type() string {
	return "azurerm_postgresql_flexible_server"
}

func (pfs *PostgresqlFlexibleServer) LocalName() string {
	return pfs.Name
}

func (pfs *PostgresqlFlexibleServer) Configuration() interface{} {
	return pfs.Args
}

func (pfs *PostgresqlFlexibleServer) Attributes() postgresqlFlexibleServerAttributes {
	return postgresqlFlexibleServerAttributes{ref: terra.ReferenceResource(pfs)}
}

func (pfs *PostgresqlFlexibleServer) ImportState(av io.Reader) error {
	pfs.state = &postgresqlFlexibleServerState{}
	if err := json.NewDecoder(av).Decode(pfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pfs.Type(), pfs.LocalName(), err)
	}
	return nil
}

func (pfs *PostgresqlFlexibleServer) State() (*postgresqlFlexibleServerState, bool) {
	return pfs.state, pfs.state != nil
}

func (pfs *PostgresqlFlexibleServer) StateMust() *postgresqlFlexibleServerState {
	if pfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pfs.Type(), pfs.LocalName()))
	}
	return pfs.state
}

func (pfs *PostgresqlFlexibleServer) DependOn() terra.Reference {
	return terra.ReferenceResource(pfs)
}

type PostgresqlFlexibleServerArgs struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorPassword: string, optional
	AdministratorPassword terra.StringValue `hcl:"administrator_password,attr"`
	// BackupRetentionDays: number, optional
	BackupRetentionDays terra.NumberValue `hcl:"backup_retention_days,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// DelegatedSubnetId: string, optional
	DelegatedSubnetId terra.StringValue `hcl:"delegated_subnet_id,attr"`
	// GeoRedundantBackupEnabled: bool, optional
	GeoRedundantBackupEnabled terra.BoolValue `hcl:"geo_redundant_backup_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PointInTimeRestoreTimeInUtc: string, optional
	PointInTimeRestoreTimeInUtc terra.StringValue `hcl:"point_in_time_restore_time_in_utc,attr"`
	// PrivateDnsZoneId: string, optional
	PrivateDnsZoneId terra.StringValue `hcl:"private_dns_zone_id,attr"`
	// ReplicationRole: string, optional
	ReplicationRole terra.StringValue `hcl:"replication_role,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// SourceServerId: string, optional
	SourceServerId terra.StringValue `hcl:"source_server_id,attr"`
	// StorageMb: number, optional
	StorageMb terra.NumberValue `hcl:"storage_mb,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Authentication: optional
	Authentication *postgresqlflexibleserver.Authentication `hcl:"authentication,block"`
	// CustomerManagedKey: optional
	CustomerManagedKey *postgresqlflexibleserver.CustomerManagedKey `hcl:"customer_managed_key,block"`
	// HighAvailability: optional
	HighAvailability *postgresqlflexibleserver.HighAvailability `hcl:"high_availability,block"`
	// Identity: optional
	Identity *postgresqlflexibleserver.Identity `hcl:"identity,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *postgresqlflexibleserver.MaintenanceWindow `hcl:"maintenance_window,block"`
	// Timeouts: optional
	Timeouts *postgresqlflexibleserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PostgresqlFlexibleServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type postgresqlFlexibleServerAttributes struct {
	ref terra.Reference
}

func (pfs postgresqlFlexibleServerAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("administrator_login"))
}

func (pfs postgresqlFlexibleServerAttributes) AdministratorPassword() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("administrator_password"))
}

func (pfs postgresqlFlexibleServerAttributes) BackupRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(pfs.ref.Append("backup_retention_days"))
}

func (pfs postgresqlFlexibleServerAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("create_mode"))
}

func (pfs postgresqlFlexibleServerAttributes) DelegatedSubnetId() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("delegated_subnet_id"))
}

func (pfs postgresqlFlexibleServerAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("fqdn"))
}

func (pfs postgresqlFlexibleServerAttributes) GeoRedundantBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(pfs.ref.Append("geo_redundant_backup_enabled"))
}

func (pfs postgresqlFlexibleServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("id"))
}

func (pfs postgresqlFlexibleServerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("location"))
}

func (pfs postgresqlFlexibleServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("name"))
}

func (pfs postgresqlFlexibleServerAttributes) PointInTimeRestoreTimeInUtc() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("point_in_time_restore_time_in_utc"))
}

func (pfs postgresqlFlexibleServerAttributes) PrivateDnsZoneId() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("private_dns_zone_id"))
}

func (pfs postgresqlFlexibleServerAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(pfs.ref.Append("public_network_access_enabled"))
}

func (pfs postgresqlFlexibleServerAttributes) ReplicationRole() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("replication_role"))
}

func (pfs postgresqlFlexibleServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("resource_group_name"))
}

func (pfs postgresqlFlexibleServerAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("sku_name"))
}

func (pfs postgresqlFlexibleServerAttributes) SourceServerId() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("source_server_id"))
}

func (pfs postgresqlFlexibleServerAttributes) StorageMb() terra.NumberValue {
	return terra.ReferenceNumber(pfs.ref.Append("storage_mb"))
}

func (pfs postgresqlFlexibleServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pfs.ref.Append("tags"))
}

func (pfs postgresqlFlexibleServerAttributes) Version() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("version"))
}

func (pfs postgresqlFlexibleServerAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(pfs.ref.Append("zone"))
}

func (pfs postgresqlFlexibleServerAttributes) Authentication() terra.ListValue[postgresqlflexibleserver.AuthenticationAttributes] {
	return terra.ReferenceList[postgresqlflexibleserver.AuthenticationAttributes](pfs.ref.Append("authentication"))
}

func (pfs postgresqlFlexibleServerAttributes) CustomerManagedKey() terra.ListValue[postgresqlflexibleserver.CustomerManagedKeyAttributes] {
	return terra.ReferenceList[postgresqlflexibleserver.CustomerManagedKeyAttributes](pfs.ref.Append("customer_managed_key"))
}

func (pfs postgresqlFlexibleServerAttributes) HighAvailability() terra.ListValue[postgresqlflexibleserver.HighAvailabilityAttributes] {
	return terra.ReferenceList[postgresqlflexibleserver.HighAvailabilityAttributes](pfs.ref.Append("high_availability"))
}

func (pfs postgresqlFlexibleServerAttributes) Identity() terra.ListValue[postgresqlflexibleserver.IdentityAttributes] {
	return terra.ReferenceList[postgresqlflexibleserver.IdentityAttributes](pfs.ref.Append("identity"))
}

func (pfs postgresqlFlexibleServerAttributes) MaintenanceWindow() terra.ListValue[postgresqlflexibleserver.MaintenanceWindowAttributes] {
	return terra.ReferenceList[postgresqlflexibleserver.MaintenanceWindowAttributes](pfs.ref.Append("maintenance_window"))
}

func (pfs postgresqlFlexibleServerAttributes) Timeouts() postgresqlflexibleserver.TimeoutsAttributes {
	return terra.ReferenceSingle[postgresqlflexibleserver.TimeoutsAttributes](pfs.ref.Append("timeouts"))
}

type postgresqlFlexibleServerState struct {
	AdministratorLogin          string                                             `json:"administrator_login"`
	AdministratorPassword       string                                             `json:"administrator_password"`
	BackupRetentionDays         float64                                            `json:"backup_retention_days"`
	CreateMode                  string                                             `json:"create_mode"`
	DelegatedSubnetId           string                                             `json:"delegated_subnet_id"`
	Fqdn                        string                                             `json:"fqdn"`
	GeoRedundantBackupEnabled   bool                                               `json:"geo_redundant_backup_enabled"`
	Id                          string                                             `json:"id"`
	Location                    string                                             `json:"location"`
	Name                        string                                             `json:"name"`
	PointInTimeRestoreTimeInUtc string                                             `json:"point_in_time_restore_time_in_utc"`
	PrivateDnsZoneId            string                                             `json:"private_dns_zone_id"`
	PublicNetworkAccessEnabled  bool                                               `json:"public_network_access_enabled"`
	ReplicationRole             string                                             `json:"replication_role"`
	ResourceGroupName           string                                             `json:"resource_group_name"`
	SkuName                     string                                             `json:"sku_name"`
	SourceServerId              string                                             `json:"source_server_id"`
	StorageMb                   float64                                            `json:"storage_mb"`
	Tags                        map[string]string                                  `json:"tags"`
	Version                     string                                             `json:"version"`
	Zone                        string                                             `json:"zone"`
	Authentication              []postgresqlflexibleserver.AuthenticationState     `json:"authentication"`
	CustomerManagedKey          []postgresqlflexibleserver.CustomerManagedKeyState `json:"customer_managed_key"`
	HighAvailability            []postgresqlflexibleserver.HighAvailabilityState   `json:"high_availability"`
	Identity                    []postgresqlflexibleserver.IdentityState           `json:"identity"`
	MaintenanceWindow           []postgresqlflexibleserver.MaintenanceWindowState  `json:"maintenance_window"`
	Timeouts                    *postgresqlflexibleserver.TimeoutsState            `json:"timeouts"`
}
