// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	hpccacheaccesspolicy "github.com/golingon/terraproviders/azurerm/3.49.0/hpccacheaccesspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHpcCacheAccessPolicy(name string, args HpcCacheAccessPolicyArgs) *HpcCacheAccessPolicy {
	return &HpcCacheAccessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HpcCacheAccessPolicy)(nil)

type HpcCacheAccessPolicy struct {
	Name  string
	Args  HpcCacheAccessPolicyArgs
	state *hpcCacheAccessPolicyState
}

func (hcap *HpcCacheAccessPolicy) Type() string {
	return "azurerm_hpc_cache_access_policy"
}

func (hcap *HpcCacheAccessPolicy) LocalName() string {
	return hcap.Name
}

func (hcap *HpcCacheAccessPolicy) Configuration() interface{} {
	return hcap.Args
}

func (hcap *HpcCacheAccessPolicy) Attributes() hpcCacheAccessPolicyAttributes {
	return hpcCacheAccessPolicyAttributes{ref: terra.ReferenceResource(hcap)}
}

func (hcap *HpcCacheAccessPolicy) ImportState(av io.Reader) error {
	hcap.state = &hpcCacheAccessPolicyState{}
	if err := json.NewDecoder(av).Decode(hcap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcap.Type(), hcap.LocalName(), err)
	}
	return nil
}

func (hcap *HpcCacheAccessPolicy) State() (*hpcCacheAccessPolicyState, bool) {
	return hcap.state, hcap.state != nil
}

func (hcap *HpcCacheAccessPolicy) StateMust() *hpcCacheAccessPolicyState {
	if hcap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcap.Type(), hcap.LocalName()))
	}
	return hcap.state
}

func (hcap *HpcCacheAccessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(hcap)
}

type HpcCacheAccessPolicyArgs struct {
	// HpcCacheId: string, required
	HpcCacheId terra.StringValue `hcl:"hpc_cache_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// AccessRule: min=1,max=3
	AccessRule []hpccacheaccesspolicy.AccessRule `hcl:"access_rule,block" validate:"min=1,max=3"`
	// Timeouts: optional
	Timeouts *hpccacheaccesspolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HpcCacheAccessPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type hpcCacheAccessPolicyAttributes struct {
	ref terra.Reference
}

func (hcap hpcCacheAccessPolicyAttributes) HpcCacheId() terra.StringValue {
	return terra.ReferenceString(hcap.ref.Append("hpc_cache_id"))
}

func (hcap hpcCacheAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hcap.ref.Append("id"))
}

func (hcap hpcCacheAccessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hcap.ref.Append("name"))
}

func (hcap hpcCacheAccessPolicyAttributes) AccessRule() terra.SetValue[hpccacheaccesspolicy.AccessRuleAttributes] {
	return terra.ReferenceSet[hpccacheaccesspolicy.AccessRuleAttributes](hcap.ref.Append("access_rule"))
}

func (hcap hpcCacheAccessPolicyAttributes) Timeouts() hpccacheaccesspolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[hpccacheaccesspolicy.TimeoutsAttributes](hcap.ref.Append("timeouts"))
}

type hpcCacheAccessPolicyState struct {
	HpcCacheId string                                 `json:"hpc_cache_id"`
	Id         string                                 `json:"id"`
	Name       string                                 `json:"name"`
	AccessRule []hpccacheaccesspolicy.AccessRuleState `json:"access_rule"`
	Timeouts   *hpccacheaccesspolicy.TimeoutsState    `json:"timeouts"`
}
