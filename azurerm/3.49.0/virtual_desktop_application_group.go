// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualdesktopapplicationgroup "github.com/golingon/terraproviders/azurerm/3.49.0/virtualdesktopapplicationgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualDesktopApplicationGroup(name string, args VirtualDesktopApplicationGroupArgs) *VirtualDesktopApplicationGroup {
	return &VirtualDesktopApplicationGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualDesktopApplicationGroup)(nil)

type VirtualDesktopApplicationGroup struct {
	Name  string
	Args  VirtualDesktopApplicationGroupArgs
	state *virtualDesktopApplicationGroupState
}

func (vdag *VirtualDesktopApplicationGroup) Type() string {
	return "azurerm_virtual_desktop_application_group"
}

func (vdag *VirtualDesktopApplicationGroup) LocalName() string {
	return vdag.Name
}

func (vdag *VirtualDesktopApplicationGroup) Configuration() interface{} {
	return vdag.Args
}

func (vdag *VirtualDesktopApplicationGroup) Attributes() virtualDesktopApplicationGroupAttributes {
	return virtualDesktopApplicationGroupAttributes{ref: terra.ReferenceResource(vdag)}
}

func (vdag *VirtualDesktopApplicationGroup) ImportState(av io.Reader) error {
	vdag.state = &virtualDesktopApplicationGroupState{}
	if err := json.NewDecoder(av).Decode(vdag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vdag.Type(), vdag.LocalName(), err)
	}
	return nil
}

func (vdag *VirtualDesktopApplicationGroup) State() (*virtualDesktopApplicationGroupState, bool) {
	return vdag.state, vdag.state != nil
}

func (vdag *VirtualDesktopApplicationGroup) StateMust() *virtualDesktopApplicationGroupState {
	if vdag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vdag.Type(), vdag.LocalName()))
	}
	return vdag.state
}

func (vdag *VirtualDesktopApplicationGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(vdag)
}

type VirtualDesktopApplicationGroupArgs struct {
	// DefaultDesktopDisplayName: string, optional
	DefaultDesktopDisplayName terra.StringValue `hcl:"default_desktop_display_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// HostPoolId: string, required
	HostPoolId terra.StringValue `hcl:"host_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualdesktopapplicationgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualDesktopApplicationGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualDesktopApplicationGroupAttributes struct {
	ref terra.Reference
}

func (vdag virtualDesktopApplicationGroupAttributes) DefaultDesktopDisplayName() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("default_desktop_display_name"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("description"))
}

func (vdag virtualDesktopApplicationGroupAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("friendly_name"))
}

func (vdag virtualDesktopApplicationGroupAttributes) HostPoolId() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("host_pool_id"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("id"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("location"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("name"))
}

func (vdag virtualDesktopApplicationGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("resource_group_name"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vdag.ref.Append("tags"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Type() terra.StringValue {
	return terra.ReferenceString(vdag.ref.Append("type"))
}

func (vdag virtualDesktopApplicationGroupAttributes) Timeouts() virtualdesktopapplicationgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualdesktopapplicationgroup.TimeoutsAttributes](vdag.ref.Append("timeouts"))
}

type virtualDesktopApplicationGroupState struct {
	DefaultDesktopDisplayName string                                        `json:"default_desktop_display_name"`
	Description               string                                        `json:"description"`
	FriendlyName              string                                        `json:"friendly_name"`
	HostPoolId                string                                        `json:"host_pool_id"`
	Id                        string                                        `json:"id"`
	Location                  string                                        `json:"location"`
	Name                      string                                        `json:"name"`
	ResourceGroupName         string                                        `json:"resource_group_name"`
	Tags                      map[string]string                             `json:"tags"`
	Type                      string                                        `json:"type"`
	Timeouts                  *virtualdesktopapplicationgroup.TimeoutsState `json:"timeouts"`
}
