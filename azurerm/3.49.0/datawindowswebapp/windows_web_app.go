// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datawindowswebapp

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AuthSettings struct {
	// ActiveDirectory: min=0
	ActiveDirectory []ActiveDirectory `hcl:"active_directory,block" validate:"min=0"`
	// Facebook: min=0
	Facebook []Facebook `hcl:"facebook,block" validate:"min=0"`
	// Github: min=0
	Github []Github `hcl:"github,block" validate:"min=0"`
	// Google: min=0
	Google []Google `hcl:"google,block" validate:"min=0"`
	// Microsoft: min=0
	Microsoft []Microsoft `hcl:"microsoft,block" validate:"min=0"`
	// Twitter: min=0
	Twitter []Twitter `hcl:"twitter,block" validate:"min=0"`
}

type ActiveDirectory struct{}

type Facebook struct{}

type Github struct{}

type Google struct{}

type Microsoft struct{}

type Twitter struct{}

type AuthSettingsV2 struct {
	// ActiveDirectoryV2: min=0
	ActiveDirectoryV2 []ActiveDirectoryV2 `hcl:"active_directory_v2,block" validate:"min=0"`
	// AppleV2: min=0
	AppleV2 []AppleV2 `hcl:"apple_v2,block" validate:"min=0"`
	// AzureStaticWebAppV2: min=0
	AzureStaticWebAppV2 []AzureStaticWebAppV2 `hcl:"azure_static_web_app_v2,block" validate:"min=0"`
	// CustomOidcV2: min=0
	CustomOidcV2 []CustomOidcV2 `hcl:"custom_oidc_v2,block" validate:"min=0"`
	// FacebookV2: min=0
	FacebookV2 []FacebookV2 `hcl:"facebook_v2,block" validate:"min=0"`
	// GithubV2: min=0
	GithubV2 []GithubV2 `hcl:"github_v2,block" validate:"min=0"`
	// GoogleV2: min=0
	GoogleV2 []GoogleV2 `hcl:"google_v2,block" validate:"min=0"`
	// Login: min=0
	Login []Login `hcl:"login,block" validate:"min=0"`
	// MicrosoftV2: min=0
	MicrosoftV2 []MicrosoftV2 `hcl:"microsoft_v2,block" validate:"min=0"`
	// TwitterV2: min=0
	TwitterV2 []TwitterV2 `hcl:"twitter_v2,block" validate:"min=0"`
}

type ActiveDirectoryV2 struct{}

type AppleV2 struct{}

type AzureStaticWebAppV2 struct{}

type CustomOidcV2 struct{}

type FacebookV2 struct{}

type GithubV2 struct{}

type GoogleV2 struct{}

type Login struct{}

type MicrosoftV2 struct{}

type TwitterV2 struct{}

type Backup struct {
	// Schedule: min=0
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0"`
}

type Schedule struct{}

type ConnectionString struct{}

type Identity struct{}

type Logs struct {
	// ApplicationLogs: min=0
	ApplicationLogs []ApplicationLogs `hcl:"application_logs,block" validate:"min=0"`
	// HttpLogs: min=0
	HttpLogs []HttpLogs `hcl:"http_logs,block" validate:"min=0"`
}

type ApplicationLogs struct {
	// ApplicationLogsAzureBlobStorage: min=0
	AzureBlobStorage []ApplicationLogsAzureBlobStorage `hcl:"azure_blob_storage,block" validate:"min=0"`
}

type ApplicationLogsAzureBlobStorage struct{}

type HttpLogs struct {
	// HttpLogsAzureBlobStorage: min=0
	AzureBlobStorage []HttpLogsAzureBlobStorage `hcl:"azure_blob_storage,block" validate:"min=0"`
	// FileSystem: min=0
	FileSystem []FileSystem `hcl:"file_system,block" validate:"min=0"`
}

type HttpLogsAzureBlobStorage struct{}

type FileSystem struct{}

type SiteConfig struct {
	// ApplicationStack: min=0
	ApplicationStack []ApplicationStack `hcl:"application_stack,block" validate:"min=0"`
	// AutoHealSetting: min=0
	AutoHealSetting []AutoHealSetting `hcl:"auto_heal_setting,block" validate:"min=0"`
	// Cors: min=0
	Cors []Cors `hcl:"cors,block" validate:"min=0"`
	// IpRestriction: min=0
	IpRestriction []IpRestriction `hcl:"ip_restriction,block" validate:"min=0"`
	// ScmIpRestriction: min=0
	ScmIpRestriction []ScmIpRestriction `hcl:"scm_ip_restriction,block" validate:"min=0"`
	// VirtualApplication: min=0
	VirtualApplication []VirtualApplication `hcl:"virtual_application,block" validate:"min=0"`
}

type ApplicationStack struct{}

type AutoHealSetting struct {
	// Action: min=0
	Action []Action `hcl:"action,block" validate:"min=0"`
	// Trigger: min=0
	Trigger []Trigger `hcl:"trigger,block" validate:"min=0"`
}

type Action struct {
	// CustomAction: min=0
	CustomAction []CustomAction `hcl:"custom_action,block" validate:"min=0"`
}

type CustomAction struct{}

type Trigger struct {
	// Requests: min=0
	Requests []Requests `hcl:"requests,block" validate:"min=0"`
	// SlowRequest: min=0
	SlowRequest []SlowRequest `hcl:"slow_request,block" validate:"min=0"`
	// StatusCode: min=0
	StatusCode []StatusCode `hcl:"status_code,block" validate:"min=0"`
}

type Requests struct{}

type SlowRequest struct{}

type StatusCode struct{}

type Cors struct{}

type IpRestriction struct {
	// IpRestrictionHeaders: min=0
	Headers []IpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type IpRestrictionHeaders struct{}

type ScmIpRestriction struct {
	// ScmIpRestrictionHeaders: min=0
	Headers []ScmIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type ScmIpRestrictionHeaders struct{}

type VirtualApplication struct {
	// VirtualDirectory: min=0
	VirtualDirectory []VirtualDirectory `hcl:"virtual_directory,block" validate:"min=0"`
}

type VirtualDirectory struct{}

type SiteCredential struct{}

type StickySettings struct{}

type StorageAccount struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AuthSettingsAttributes struct {
	ref terra.Reference
}

func (as AuthSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AuthSettingsAttributes) InternalWithRef(ref terra.Reference) AuthSettingsAttributes {
	return AuthSettingsAttributes{ref: ref}
}

func (as AuthSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AuthSettingsAttributes) AdditionalLoginParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("additional_login_parameters"))
}

func (as AuthSettingsAttributes) AllowedExternalRedirectUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("allowed_external_redirect_urls"))
}

func (as AuthSettingsAttributes) DefaultProvider() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("default_provider"))
}

func (as AuthSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enabled"))
}

func (as AuthSettingsAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("issuer"))
}

func (as AuthSettingsAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("runtime_version"))
}

func (as AuthSettingsAttributes) TokenRefreshExtensionHours() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("token_refresh_extension_hours"))
}

func (as AuthSettingsAttributes) TokenStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("token_store_enabled"))
}

func (as AuthSettingsAttributes) UnauthenticatedClientAction() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("unauthenticated_client_action"))
}

func (as AuthSettingsAttributes) ActiveDirectory() terra.ListValue[ActiveDirectoryAttributes] {
	return terra.ReferenceAsList[ActiveDirectoryAttributes](as.ref.Append("active_directory"))
}

func (as AuthSettingsAttributes) Facebook() terra.ListValue[FacebookAttributes] {
	return terra.ReferenceAsList[FacebookAttributes](as.ref.Append("facebook"))
}

func (as AuthSettingsAttributes) Github() terra.ListValue[GithubAttributes] {
	return terra.ReferenceAsList[GithubAttributes](as.ref.Append("github"))
}

func (as AuthSettingsAttributes) Google() terra.ListValue[GoogleAttributes] {
	return terra.ReferenceAsList[GoogleAttributes](as.ref.Append("google"))
}

func (as AuthSettingsAttributes) Microsoft() terra.ListValue[MicrosoftAttributes] {
	return terra.ReferenceAsList[MicrosoftAttributes](as.ref.Append("microsoft"))
}

func (as AuthSettingsAttributes) Twitter() terra.ListValue[TwitterAttributes] {
	return terra.ReferenceAsList[TwitterAttributes](as.ref.Append("twitter"))
}

type ActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad ActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad ActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) ActiveDirectoryAttributes {
	return ActiveDirectoryAttributes{ref: ref}
}

func (ad ActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad ActiveDirectoryAttributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ad.ref.Append("allowed_audiences"))
}

func (ad ActiveDirectoryAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_id"))
}

func (ad ActiveDirectoryAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_secret"))
}

func (ad ActiveDirectoryAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_secret_setting_name"))
}

type FacebookAttributes struct {
	ref terra.Reference
}

func (f FacebookAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FacebookAttributes) InternalWithRef(ref terra.Reference) FacebookAttributes {
	return FacebookAttributes{ref: ref}
}

func (f FacebookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FacebookAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_id"))
}

func (f FacebookAttributes) AppSecret() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_secret"))
}

func (f FacebookAttributes) AppSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_secret_setting_name"))
}

func (f FacebookAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("oauth_scopes"))
}

type GithubAttributes struct {
	ref terra.Reference
}

func (g GithubAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GithubAttributes) InternalWithRef(ref terra.Reference) GithubAttributes {
	return GithubAttributes{ref: ref}
}

func (g GithubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GithubAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_id"))
}

func (g GithubAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret"))
}

func (g GithubAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret_setting_name"))
}

func (g GithubAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("oauth_scopes"))
}

type GoogleAttributes struct {
	ref terra.Reference
}

func (g GoogleAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GoogleAttributes) InternalWithRef(ref terra.Reference) GoogleAttributes {
	return GoogleAttributes{ref: ref}
}

func (g GoogleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GoogleAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_id"))
}

func (g GoogleAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret"))
}

func (g GoogleAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret_setting_name"))
}

func (g GoogleAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("oauth_scopes"))
}

type MicrosoftAttributes struct {
	ref terra.Reference
}

func (m MicrosoftAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MicrosoftAttributes) InternalWithRef(ref terra.Reference) MicrosoftAttributes {
	return MicrosoftAttributes{ref: ref}
}

func (m MicrosoftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MicrosoftAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_id"))
}

func (m MicrosoftAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_secret"))
}

func (m MicrosoftAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_secret_setting_name"))
}

func (m MicrosoftAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("oauth_scopes"))
}

type TwitterAttributes struct {
	ref terra.Reference
}

func (t TwitterAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TwitterAttributes) InternalWithRef(ref terra.Reference) TwitterAttributes {
	return TwitterAttributes{ref: ref}
}

func (t TwitterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TwitterAttributes) ConsumerKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_key"))
}

func (t TwitterAttributes) ConsumerSecret() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_secret"))
}

func (t TwitterAttributes) ConsumerSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_secret_setting_name"))
}

type AuthSettingsV2Attributes struct {
	ref terra.Reference
}

func (asv AuthSettingsV2Attributes) InternalRef() (terra.Reference, error) {
	return asv.ref, nil
}

func (asv AuthSettingsV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2Attributes {
	return AuthSettingsV2Attributes{ref: ref}
}

func (asv AuthSettingsV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return asv.ref.InternalTokens()
}

func (asv AuthSettingsV2Attributes) AuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("auth_enabled"))
}

func (asv AuthSettingsV2Attributes) ConfigFilePath() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("config_file_path"))
}

func (asv AuthSettingsV2Attributes) DefaultProvider() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("default_provider"))
}

func (asv AuthSettingsV2Attributes) ExcludedPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asv.ref.Append("excluded_paths"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyConvention() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_convention"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyCustomHostHeaderName() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_custom_host_header_name"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyCustomSchemeHeaderName() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_custom_scheme_header_name"))
}

func (asv AuthSettingsV2Attributes) HttpRouteApiPrefix() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("http_route_api_prefix"))
}

func (asv AuthSettingsV2Attributes) RequireAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("require_authentication"))
}

func (asv AuthSettingsV2Attributes) RequireHttps() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("require_https"))
}

func (asv AuthSettingsV2Attributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("runtime_version"))
}

func (asv AuthSettingsV2Attributes) UnauthenticatedAction() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("unauthenticated_action"))
}

func (asv AuthSettingsV2Attributes) ActiveDirectoryV2() terra.ListValue[ActiveDirectoryV2Attributes] {
	return terra.ReferenceAsList[ActiveDirectoryV2Attributes](asv.ref.Append("active_directory_v2"))
}

func (asv AuthSettingsV2Attributes) AppleV2() terra.ListValue[AppleV2Attributes] {
	return terra.ReferenceAsList[AppleV2Attributes](asv.ref.Append("apple_v2"))
}

func (asv AuthSettingsV2Attributes) AzureStaticWebAppV2() terra.ListValue[AzureStaticWebAppV2Attributes] {
	return terra.ReferenceAsList[AzureStaticWebAppV2Attributes](asv.ref.Append("azure_static_web_app_v2"))
}

func (asv AuthSettingsV2Attributes) CustomOidcV2() terra.ListValue[CustomOidcV2Attributes] {
	return terra.ReferenceAsList[CustomOidcV2Attributes](asv.ref.Append("custom_oidc_v2"))
}

func (asv AuthSettingsV2Attributes) FacebookV2() terra.ListValue[FacebookV2Attributes] {
	return terra.ReferenceAsList[FacebookV2Attributes](asv.ref.Append("facebook_v2"))
}

func (asv AuthSettingsV2Attributes) GithubV2() terra.ListValue[GithubV2Attributes] {
	return terra.ReferenceAsList[GithubV2Attributes](asv.ref.Append("github_v2"))
}

func (asv AuthSettingsV2Attributes) GoogleV2() terra.ListValue[GoogleV2Attributes] {
	return terra.ReferenceAsList[GoogleV2Attributes](asv.ref.Append("google_v2"))
}

func (asv AuthSettingsV2Attributes) Login() terra.ListValue[LoginAttributes] {
	return terra.ReferenceAsList[LoginAttributes](asv.ref.Append("login"))
}

func (asv AuthSettingsV2Attributes) MicrosoftV2() terra.ListValue[MicrosoftV2Attributes] {
	return terra.ReferenceAsList[MicrosoftV2Attributes](asv.ref.Append("microsoft_v2"))
}

func (asv AuthSettingsV2Attributes) TwitterV2() terra.ListValue[TwitterV2Attributes] {
	return terra.ReferenceAsList[TwitterV2Attributes](asv.ref.Append("twitter_v2"))
}

type ActiveDirectoryV2Attributes struct {
	ref terra.Reference
}

func (adv ActiveDirectoryV2Attributes) InternalRef() (terra.Reference, error) {
	return adv.ref, nil
}

func (adv ActiveDirectoryV2Attributes) InternalWithRef(ref terra.Reference) ActiveDirectoryV2Attributes {
	return ActiveDirectoryV2Attributes{ref: ref}
}

func (adv ActiveDirectoryV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return adv.ref.InternalTokens()
}

func (adv ActiveDirectoryV2Attributes) AllowedApplications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_applications"))
}

func (adv ActiveDirectoryV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_audiences"))
}

func (adv ActiveDirectoryV2Attributes) AllowedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_groups"))
}

func (adv ActiveDirectoryV2Attributes) AllowedIdentities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_identities"))
}

func (adv ActiveDirectoryV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_id"))
}

func (adv ActiveDirectoryV2Attributes) ClientSecretCertificateThumbprint() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_secret_certificate_thumbprint"))
}

func (adv ActiveDirectoryV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_secret_setting_name"))
}

func (adv ActiveDirectoryV2Attributes) JwtAllowedClientApplications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("jwt_allowed_client_applications"))
}

func (adv ActiveDirectoryV2Attributes) JwtAllowedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("jwt_allowed_groups"))
}

func (adv ActiveDirectoryV2Attributes) LoginParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adv.ref.Append("login_parameters"))
}

func (adv ActiveDirectoryV2Attributes) TenantAuthEndpoint() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("tenant_auth_endpoint"))
}

func (adv ActiveDirectoryV2Attributes) WwwAuthenticationDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(adv.ref.Append("www_authentication_disabled"))
}

type AppleV2Attributes struct {
	ref terra.Reference
}

func (av AppleV2Attributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av AppleV2Attributes) InternalWithRef(ref terra.Reference) AppleV2Attributes {
	return AppleV2Attributes{ref: ref}
}

func (av AppleV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av AppleV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("client_id"))
}

func (av AppleV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("client_secret_setting_name"))
}

func (av AppleV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](av.ref.Append("login_scopes"))
}

type AzureStaticWebAppV2Attributes struct {
	ref terra.Reference
}

func (aswav AzureStaticWebAppV2Attributes) InternalRef() (terra.Reference, error) {
	return aswav.ref, nil
}

func (aswav AzureStaticWebAppV2Attributes) InternalWithRef(ref terra.Reference) AzureStaticWebAppV2Attributes {
	return AzureStaticWebAppV2Attributes{ref: ref}
}

func (aswav AzureStaticWebAppV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return aswav.ref.InternalTokens()
}

func (aswav AzureStaticWebAppV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(aswav.ref.Append("client_id"))
}

type CustomOidcV2Attributes struct {
	ref terra.Reference
}

func (cov CustomOidcV2Attributes) InternalRef() (terra.Reference, error) {
	return cov.ref, nil
}

func (cov CustomOidcV2Attributes) InternalWithRef(ref terra.Reference) CustomOidcV2Attributes {
	return CustomOidcV2Attributes{ref: ref}
}

func (cov CustomOidcV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return cov.ref.InternalTokens()
}

func (cov CustomOidcV2Attributes) AuthorisationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("authorisation_endpoint"))
}

func (cov CustomOidcV2Attributes) CertificationUri() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("certification_uri"))
}

func (cov CustomOidcV2Attributes) ClientCredentialMethod() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_credential_method"))
}

func (cov CustomOidcV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_id"))
}

func (cov CustomOidcV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_secret_setting_name"))
}

func (cov CustomOidcV2Attributes) IssuerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("issuer_endpoint"))
}

func (cov CustomOidcV2Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("name"))
}

func (cov CustomOidcV2Attributes) NameClaimType() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("name_claim_type"))
}

func (cov CustomOidcV2Attributes) OpenidConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("openid_configuration_endpoint"))
}

func (cov CustomOidcV2Attributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cov.ref.Append("scopes"))
}

func (cov CustomOidcV2Attributes) TokenEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("token_endpoint"))
}

type FacebookV2Attributes struct {
	ref terra.Reference
}

func (fv FacebookV2Attributes) InternalRef() (terra.Reference, error) {
	return fv.ref, nil
}

func (fv FacebookV2Attributes) InternalWithRef(ref terra.Reference) FacebookV2Attributes {
	return FacebookV2Attributes{ref: ref}
}

func (fv FacebookV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return fv.ref.InternalTokens()
}

func (fv FacebookV2Attributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("app_id"))
}

func (fv FacebookV2Attributes) AppSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("app_secret_setting_name"))
}

func (fv FacebookV2Attributes) GraphApiVersion() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("graph_api_version"))
}

func (fv FacebookV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fv.ref.Append("login_scopes"))
}

type GithubV2Attributes struct {
	ref terra.Reference
}

func (gv GithubV2Attributes) InternalRef() (terra.Reference, error) {
	return gv.ref, nil
}

func (gv GithubV2Attributes) InternalWithRef(ref terra.Reference) GithubV2Attributes {
	return GithubV2Attributes{ref: ref}
}

func (gv GithubV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return gv.ref.InternalTokens()
}

func (gv GithubV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_id"))
}

func (gv GithubV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_secret_setting_name"))
}

func (gv GithubV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("login_scopes"))
}

type GoogleV2Attributes struct {
	ref terra.Reference
}

func (gv GoogleV2Attributes) InternalRef() (terra.Reference, error) {
	return gv.ref, nil
}

func (gv GoogleV2Attributes) InternalWithRef(ref terra.Reference) GoogleV2Attributes {
	return GoogleV2Attributes{ref: ref}
}

func (gv GoogleV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return gv.ref.InternalTokens()
}

func (gv GoogleV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("allowed_audiences"))
}

func (gv GoogleV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_id"))
}

func (gv GoogleV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_secret_setting_name"))
}

func (gv GoogleV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("login_scopes"))
}

type LoginAttributes struct {
	ref terra.Reference
}

func (l LoginAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LoginAttributes) InternalWithRef(ref terra.Reference) LoginAttributes {
	return LoginAttributes{ref: ref}
}

func (l LoginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LoginAttributes) AllowedExternalRedirectUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("allowed_external_redirect_urls"))
}

func (l LoginAttributes) CookieExpirationConvention() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cookie_expiration_convention"))
}

func (l LoginAttributes) CookieExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cookie_expiration_time"))
}

func (l LoginAttributes) LogoutEndpoint() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("logout_endpoint"))
}

func (l LoginAttributes) NonceExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("nonce_expiration_time"))
}

func (l LoginAttributes) PreserveUrlFragmentsForLogins() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("preserve_url_fragments_for_logins"))
}

func (l LoginAttributes) TokenRefreshExtensionTime() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("token_refresh_extension_time"))
}

func (l LoginAttributes) TokenStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("token_store_enabled"))
}

func (l LoginAttributes) TokenStorePath() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("token_store_path"))
}

func (l LoginAttributes) TokenStoreSasSettingName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("token_store_sas_setting_name"))
}

func (l LoginAttributes) ValidateNonce() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("validate_nonce"))
}

type MicrosoftV2Attributes struct {
	ref terra.Reference
}

func (mv MicrosoftV2Attributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv MicrosoftV2Attributes) InternalWithRef(ref terra.Reference) MicrosoftV2Attributes {
	return MicrosoftV2Attributes{ref: ref}
}

func (mv MicrosoftV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv MicrosoftV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mv.ref.Append("allowed_audiences"))
}

func (mv MicrosoftV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("client_id"))
}

func (mv MicrosoftV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("client_secret_setting_name"))
}

func (mv MicrosoftV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mv.ref.Append("login_scopes"))
}

type TwitterV2Attributes struct {
	ref terra.Reference
}

func (tv TwitterV2Attributes) InternalRef() (terra.Reference, error) {
	return tv.ref, nil
}

func (tv TwitterV2Attributes) InternalWithRef(ref terra.Reference) TwitterV2Attributes {
	return TwitterV2Attributes{ref: ref}
}

func (tv TwitterV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return tv.ref.InternalTokens()
}

func (tv TwitterV2Attributes) ConsumerKey() terra.StringValue {
	return terra.ReferenceAsString(tv.ref.Append("consumer_key"))
}

func (tv TwitterV2Attributes) ConsumerSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(tv.ref.Append("consumer_secret_setting_name"))
}

type BackupAttributes struct {
	ref terra.Reference
}

func (b BackupAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackupAttributes) InternalWithRef(ref terra.Reference) BackupAttributes {
	return BackupAttributes{ref: ref}
}

func (b BackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackupAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("enabled"))
}

func (b BackupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b BackupAttributes) StorageAccountUrl() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("storage_account_url"))
}

func (b BackupAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](b.ref.Append("schedule"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) FrequencyInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("frequency_interval"))
}

func (s ScheduleAttributes) FrequencyUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency_unit"))
}

func (s ScheduleAttributes) KeepAtLeastOneBackup() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("keep_at_least_one_backup"))
}

func (s ScheduleAttributes) LastExecutionTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("last_execution_time"))
}

func (s ScheduleAttributes) RetentionPeriodDays() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("retention_period_days"))
}

func (s ScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

type ConnectionStringAttributes struct {
	ref terra.Reference
}

func (cs ConnectionStringAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConnectionStringAttributes) InternalWithRef(ref terra.Reference) ConnectionStringAttributes {
	return ConnectionStringAttributes{ref: ref}
}

func (cs ConnectionStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConnectionStringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs ConnectionStringAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

func (cs ConnectionStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type LogsAttributes struct {
	ref terra.Reference
}

func (l LogsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LogsAttributes) InternalWithRef(ref terra.Reference) LogsAttributes {
	return LogsAttributes{ref: ref}
}

func (l LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LogsAttributes) DetailedErrorMessages() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("detailed_error_messages"))
}

func (l LogsAttributes) FailedRequestTracing() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("failed_request_tracing"))
}

func (l LogsAttributes) ApplicationLogs() terra.ListValue[ApplicationLogsAttributes] {
	return terra.ReferenceAsList[ApplicationLogsAttributes](l.ref.Append("application_logs"))
}

func (l LogsAttributes) HttpLogs() terra.ListValue[HttpLogsAttributes] {
	return terra.ReferenceAsList[HttpLogsAttributes](l.ref.Append("http_logs"))
}

type ApplicationLogsAttributes struct {
	ref terra.Reference
}

func (al ApplicationLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al ApplicationLogsAttributes) InternalWithRef(ref terra.Reference) ApplicationLogsAttributes {
	return ApplicationLogsAttributes{ref: ref}
}

func (al ApplicationLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al ApplicationLogsAttributes) FileSystemLevel() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("file_system_level"))
}

func (al ApplicationLogsAttributes) AzureBlobStorage() terra.ListValue[ApplicationLogsAzureBlobStorageAttributes] {
	return terra.ReferenceAsList[ApplicationLogsAzureBlobStorageAttributes](al.ref.Append("azure_blob_storage"))
}

type ApplicationLogsAzureBlobStorageAttributes struct {
	ref terra.Reference
}

func (abs ApplicationLogsAzureBlobStorageAttributes) InternalRef() (terra.Reference, error) {
	return abs.ref, nil
}

func (abs ApplicationLogsAzureBlobStorageAttributes) InternalWithRef(ref terra.Reference) ApplicationLogsAzureBlobStorageAttributes {
	return ApplicationLogsAzureBlobStorageAttributes{ref: ref}
}

func (abs ApplicationLogsAzureBlobStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abs.ref.InternalTokens()
}

func (abs ApplicationLogsAzureBlobStorageAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("level"))
}

func (abs ApplicationLogsAzureBlobStorageAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(abs.ref.Append("retention_in_days"))
}

func (abs ApplicationLogsAzureBlobStorageAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("sas_url"))
}

type HttpLogsAttributes struct {
	ref terra.Reference
}

func (hl HttpLogsAttributes) InternalRef() (terra.Reference, error) {
	return hl.ref, nil
}

func (hl HttpLogsAttributes) InternalWithRef(ref terra.Reference) HttpLogsAttributes {
	return HttpLogsAttributes{ref: ref}
}

func (hl HttpLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hl.ref.InternalTokens()
}

func (hl HttpLogsAttributes) AzureBlobStorage() terra.ListValue[HttpLogsAzureBlobStorageAttributes] {
	return terra.ReferenceAsList[HttpLogsAzureBlobStorageAttributes](hl.ref.Append("azure_blob_storage"))
}

func (hl HttpLogsAttributes) FileSystem() terra.ListValue[FileSystemAttributes] {
	return terra.ReferenceAsList[FileSystemAttributes](hl.ref.Append("file_system"))
}

type HttpLogsAzureBlobStorageAttributes struct {
	ref terra.Reference
}

func (abs HttpLogsAzureBlobStorageAttributes) InternalRef() (terra.Reference, error) {
	return abs.ref, nil
}

func (abs HttpLogsAzureBlobStorageAttributes) InternalWithRef(ref terra.Reference) HttpLogsAzureBlobStorageAttributes {
	return HttpLogsAzureBlobStorageAttributes{ref: ref}
}

func (abs HttpLogsAzureBlobStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abs.ref.InternalTokens()
}

func (abs HttpLogsAzureBlobStorageAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(abs.ref.Append("retention_in_days"))
}

func (abs HttpLogsAzureBlobStorageAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("sas_url"))
}

type FileSystemAttributes struct {
	ref terra.Reference
}

func (fs FileSystemAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FileSystemAttributes) InternalWithRef(ref terra.Reference) FileSystemAttributes {
	return FileSystemAttributes{ref: ref}
}

func (fs FileSystemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FileSystemAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("retention_in_days"))
}

func (fs FileSystemAttributes) RetentionInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("retention_in_mb"))
}

type SiteConfigAttributes struct {
	ref terra.Reference
}

func (sc SiteConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteConfigAttributes) InternalWithRef(ref terra.Reference) SiteConfigAttributes {
	return SiteConfigAttributes{ref: ref}
}

func (sc SiteConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteConfigAttributes) AlwaysOn() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("always_on"))
}

func (sc SiteConfigAttributes) ApiDefinitionUrl() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("api_definition_url"))
}

func (sc SiteConfigAttributes) ApiManagementApiId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("api_management_api_id"))
}

func (sc SiteConfigAttributes) AppCommandLine() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("app_command_line"))
}

func (sc SiteConfigAttributes) AutoHealEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("auto_heal_enabled"))
}

func (sc SiteConfigAttributes) ContainerRegistryManagedIdentityClientId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("container_registry_managed_identity_client_id"))
}

func (sc SiteConfigAttributes) ContainerRegistryUseManagedIdentity() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("container_registry_use_managed_identity"))
}

func (sc SiteConfigAttributes) DefaultDocuments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("default_documents"))
}

func (sc SiteConfigAttributes) DetailedErrorLoggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("detailed_error_logging_enabled"))
}

func (sc SiteConfigAttributes) FtpsState() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ftps_state"))
}

func (sc SiteConfigAttributes) HealthCheckEvictionTimeInMin() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("health_check_eviction_time_in_min"))
}

func (sc SiteConfigAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("health_check_path"))
}

func (sc SiteConfigAttributes) Http2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("http2_enabled"))
}

func (sc SiteConfigAttributes) LoadBalancingMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("load_balancing_mode"))
}

func (sc SiteConfigAttributes) LocalMysqlEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("local_mysql_enabled"))
}

func (sc SiteConfigAttributes) ManagedPipelineMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("managed_pipeline_mode"))
}

func (sc SiteConfigAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("minimum_tls_version"))
}

func (sc SiteConfigAttributes) RemoteDebuggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("remote_debugging_enabled"))
}

func (sc SiteConfigAttributes) RemoteDebuggingVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("remote_debugging_version"))
}

func (sc SiteConfigAttributes) ScmMinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_minimum_tls_version"))
}

func (sc SiteConfigAttributes) ScmType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_type"))
}

func (sc SiteConfigAttributes) ScmUseMainIpRestriction() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("scm_use_main_ip_restriction"))
}

func (sc SiteConfigAttributes) Use32BitWorker() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_32_bit_worker"))
}

func (sc SiteConfigAttributes) VnetRouteAllEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("vnet_route_all_enabled"))
}

func (sc SiteConfigAttributes) WebsocketsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("websockets_enabled"))
}

func (sc SiteConfigAttributes) WindowsFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("windows_fx_version"))
}

func (sc SiteConfigAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("worker_count"))
}

func (sc SiteConfigAttributes) ApplicationStack() terra.ListValue[ApplicationStackAttributes] {
	return terra.ReferenceAsList[ApplicationStackAttributes](sc.ref.Append("application_stack"))
}

func (sc SiteConfigAttributes) AutoHealSetting() terra.ListValue[AutoHealSettingAttributes] {
	return terra.ReferenceAsList[AutoHealSettingAttributes](sc.ref.Append("auto_heal_setting"))
}

func (sc SiteConfigAttributes) Cors() terra.ListValue[CorsAttributes] {
	return terra.ReferenceAsList[CorsAttributes](sc.ref.Append("cors"))
}

func (sc SiteConfigAttributes) IpRestriction() terra.ListValue[IpRestrictionAttributes] {
	return terra.ReferenceAsList[IpRestrictionAttributes](sc.ref.Append("ip_restriction"))
}

func (sc SiteConfigAttributes) ScmIpRestriction() terra.ListValue[ScmIpRestrictionAttributes] {
	return terra.ReferenceAsList[ScmIpRestrictionAttributes](sc.ref.Append("scm_ip_restriction"))
}

func (sc SiteConfigAttributes) VirtualApplication() terra.ListValue[VirtualApplicationAttributes] {
	return terra.ReferenceAsList[VirtualApplicationAttributes](sc.ref.Append("virtual_application"))
}

type ApplicationStackAttributes struct {
	ref terra.Reference
}

func (as ApplicationStackAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ApplicationStackAttributes) InternalWithRef(ref terra.Reference) ApplicationStackAttributes {
	return ApplicationStackAttributes{ref: ref}
}

func (as ApplicationStackAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ApplicationStackAttributes) CurrentStack() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("current_stack"))
}

func (as ApplicationStackAttributes) DockerContainerName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_name"))
}

func (as ApplicationStackAttributes) DockerContainerRegistry() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_registry"))
}

func (as ApplicationStackAttributes) DockerContainerTag() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_tag"))
}

func (as ApplicationStackAttributes) DotnetCoreVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("dotnet_core_version"))
}

func (as ApplicationStackAttributes) DotnetVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("dotnet_version"))
}

func (as ApplicationStackAttributes) JavaContainer() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_container"))
}

func (as ApplicationStackAttributes) JavaContainerVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_container_version"))
}

func (as ApplicationStackAttributes) JavaEmbeddedServerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("java_embedded_server_enabled"))
}

func (as ApplicationStackAttributes) JavaVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_version"))
}

func (as ApplicationStackAttributes) NodeVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("node_version"))
}

func (as ApplicationStackAttributes) PhpVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("php_version"))
}

func (as ApplicationStackAttributes) Python() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("python"))
}

func (as ApplicationStackAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("python_version"))
}

func (as ApplicationStackAttributes) TomcatVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("tomcat_version"))
}

type AutoHealSettingAttributes struct {
	ref terra.Reference
}

func (ahs AutoHealSettingAttributes) InternalRef() (terra.Reference, error) {
	return ahs.ref, nil
}

func (ahs AutoHealSettingAttributes) InternalWithRef(ref terra.Reference) AutoHealSettingAttributes {
	return AutoHealSettingAttributes{ref: ref}
}

func (ahs AutoHealSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ahs.ref.InternalTokens()
}

func (ahs AutoHealSettingAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](ahs.ref.Append("action"))
}

func (ahs AutoHealSettingAttributes) Trigger() terra.ListValue[TriggerAttributes] {
	return terra.ReferenceAsList[TriggerAttributes](ahs.ref.Append("trigger"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_type"))
}

func (a ActionAttributes) MinimumProcessExecutionTime() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("minimum_process_execution_time"))
}

func (a ActionAttributes) CustomAction() terra.ListValue[CustomActionAttributes] {
	return terra.ReferenceAsList[CustomActionAttributes](a.ref.Append("custom_action"))
}

type CustomActionAttributes struct {
	ref terra.Reference
}

func (ca CustomActionAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CustomActionAttributes) InternalWithRef(ref terra.Reference) CustomActionAttributes {
	return CustomActionAttributes{ref: ref}
}

func (ca CustomActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CustomActionAttributes) Executable() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("executable"))
}

func (ca CustomActionAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("parameters"))
}

type TriggerAttributes struct {
	ref terra.Reference
}

func (t TriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerAttributes) InternalWithRef(ref terra.Reference) TriggerAttributes {
	return TriggerAttributes{ref: ref}
}

func (t TriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerAttributes) PrivateMemoryKb() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("private_memory_kb"))
}

func (t TriggerAttributes) Requests() terra.ListValue[RequestsAttributes] {
	return terra.ReferenceAsList[RequestsAttributes](t.ref.Append("requests"))
}

func (t TriggerAttributes) SlowRequest() terra.ListValue[SlowRequestAttributes] {
	return terra.ReferenceAsList[SlowRequestAttributes](t.ref.Append("slow_request"))
}

func (t TriggerAttributes) StatusCode() terra.ListValue[StatusCodeAttributes] {
	return terra.ReferenceAsList[StatusCodeAttributes](t.ref.Append("status_code"))
}

type RequestsAttributes struct {
	ref terra.Reference
}

func (r RequestsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequestsAttributes) InternalWithRef(ref terra.Reference) RequestsAttributes {
	return RequestsAttributes{ref: ref}
}

func (r RequestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequestsAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("count"))
}

func (r RequestsAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("interval"))
}

type SlowRequestAttributes struct {
	ref terra.Reference
}

func (sr SlowRequestAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr SlowRequestAttributes) InternalWithRef(ref terra.Reference) SlowRequestAttributes {
	return SlowRequestAttributes{ref: ref}
}

func (sr SlowRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr SlowRequestAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("count"))
}

func (sr SlowRequestAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interval"))
}

func (sr SlowRequestAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("path"))
}

func (sr SlowRequestAttributes) TimeTaken() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("time_taken"))
}

type StatusCodeAttributes struct {
	ref terra.Reference
}

func (sc StatusCodeAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StatusCodeAttributes) InternalWithRef(ref terra.Reference) StatusCodeAttributes {
	return StatusCodeAttributes{ref: ref}
}

func (sc StatusCodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StatusCodeAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("count"))
}

func (sc StatusCodeAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("interval"))
}

func (sc StatusCodeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("path"))
}

func (sc StatusCodeAttributes) StatusCodeRange() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("status_code_range"))
}

func (sc StatusCodeAttributes) SubStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sub_status"))
}

func (sc StatusCodeAttributes) Win32Status() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("win32_status"))
}

type CorsAttributes struct {
	ref terra.Reference
}

func (c CorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CorsAttributes) InternalWithRef(ref terra.Reference) CorsAttributes {
	return CorsAttributes{ref: ref}
}

func (c CorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CorsAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c CorsAttributes) SupportCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("support_credentials"))
}

type IpRestrictionAttributes struct {
	ref terra.Reference
}

func (ir IpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir IpRestrictionAttributes) InternalWithRef(ref terra.Reference) IpRestrictionAttributes {
	return IpRestrictionAttributes{ref: ref}
}

func (ir IpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir IpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir IpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_address"))
}

func (ir IpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("name"))
}

func (ir IpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("priority"))
}

func (ir IpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("service_tag"))
}

func (ir IpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("virtual_network_subnet_id"))
}

func (ir IpRestrictionAttributes) Headers() terra.ListValue[IpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[IpRestrictionHeadersAttributes](ir.ref.Append("headers"))
}

type IpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h IpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h IpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) IpRestrictionHeadersAttributes {
	return IpRestrictionHeadersAttributes{ref: ref}
}

func (h IpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h IpRestrictionHeadersAttributes) XAzureFdid() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h IpRestrictionHeadersAttributes) XFdHealthProbe() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h IpRestrictionHeadersAttributes) XForwardedFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h IpRestrictionHeadersAttributes) XForwardedHost() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type ScmIpRestrictionAttributes struct {
	ref terra.Reference
}

func (sir ScmIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir ScmIpRestrictionAttributes) InternalWithRef(ref terra.Reference) ScmIpRestrictionAttributes {
	return ScmIpRestrictionAttributes{ref: ref}
}

func (sir ScmIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir ScmIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("action"))
}

func (sir ScmIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("ip_address"))
}

func (sir ScmIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("name"))
}

func (sir ScmIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(sir.ref.Append("priority"))
}

func (sir ScmIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("service_tag"))
}

func (sir ScmIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("virtual_network_subnet_id"))
}

func (sir ScmIpRestrictionAttributes) Headers() terra.ListValue[ScmIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[ScmIpRestrictionHeadersAttributes](sir.ref.Append("headers"))
}

type ScmIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h ScmIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h ScmIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) ScmIpRestrictionHeadersAttributes {
	return ScmIpRestrictionHeadersAttributes{ref: ref}
}

func (h ScmIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h ScmIpRestrictionHeadersAttributes) XAzureFdid() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h ScmIpRestrictionHeadersAttributes) XFdHealthProbe() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h ScmIpRestrictionHeadersAttributes) XForwardedFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h ScmIpRestrictionHeadersAttributes) XForwardedHost() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type VirtualApplicationAttributes struct {
	ref terra.Reference
}

func (va VirtualApplicationAttributes) InternalRef() (terra.Reference, error) {
	return va.ref, nil
}

func (va VirtualApplicationAttributes) InternalWithRef(ref terra.Reference) VirtualApplicationAttributes {
	return VirtualApplicationAttributes{ref: ref}
}

func (va VirtualApplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return va.ref.InternalTokens()
}

func (va VirtualApplicationAttributes) PhysicalPath() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("physical_path"))
}

func (va VirtualApplicationAttributes) Preload() terra.BoolValue {
	return terra.ReferenceAsBool(va.ref.Append("preload"))
}

func (va VirtualApplicationAttributes) VirtualPath() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("virtual_path"))
}

func (va VirtualApplicationAttributes) VirtualDirectory() terra.ListValue[VirtualDirectoryAttributes] {
	return terra.ReferenceAsList[VirtualDirectoryAttributes](va.ref.Append("virtual_directory"))
}

type VirtualDirectoryAttributes struct {
	ref terra.Reference
}

func (vd VirtualDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return vd.ref, nil
}

func (vd VirtualDirectoryAttributes) InternalWithRef(ref terra.Reference) VirtualDirectoryAttributes {
	return VirtualDirectoryAttributes{ref: ref}
}

func (vd VirtualDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vd.ref.InternalTokens()
}

func (vd VirtualDirectoryAttributes) PhysicalPath() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("physical_path"))
}

func (vd VirtualDirectoryAttributes) VirtualPath() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("virtual_path"))
}

type SiteCredentialAttributes struct {
	ref terra.Reference
}

func (sc SiteCredentialAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteCredentialAttributes) InternalWithRef(ref terra.Reference) SiteCredentialAttributes {
	return SiteCredentialAttributes{ref: ref}
}

func (sc SiteCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteCredentialAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc SiteCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

type StickySettingsAttributes struct {
	ref terra.Reference
}

func (ss StickySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss StickySettingsAttributes) InternalWithRef(ref terra.Reference) StickySettingsAttributes {
	return StickySettingsAttributes{ref: ref}
}

func (ss StickySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss StickySettingsAttributes) AppSettingNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ss.ref.Append("app_setting_names"))
}

func (ss StickySettingsAttributes) ConnectionStringNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ss.ref.Append("connection_string_names"))
}

type StorageAccountAttributes struct {
	ref terra.Reference
}

func (sa StorageAccountAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa StorageAccountAttributes) InternalWithRef(ref terra.Reference) StorageAccountAttributes {
	return StorageAccountAttributes{ref: ref}
}

func (sa StorageAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa StorageAccountAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("access_key"))
}

func (sa StorageAccountAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("account_name"))
}

func (sa StorageAccountAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("mount_path"))
}

func (sa StorageAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa StorageAccountAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("share_name"))
}

func (sa StorageAccountAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AuthSettingsState struct {
	AdditionalLoginParameters   map[string]string      `json:"additional_login_parameters"`
	AllowedExternalRedirectUrls []string               `json:"allowed_external_redirect_urls"`
	DefaultProvider             string                 `json:"default_provider"`
	Enabled                     bool                   `json:"enabled"`
	Issuer                      string                 `json:"issuer"`
	RuntimeVersion              string                 `json:"runtime_version"`
	TokenRefreshExtensionHours  float64                `json:"token_refresh_extension_hours"`
	TokenStoreEnabled           bool                   `json:"token_store_enabled"`
	UnauthenticatedClientAction string                 `json:"unauthenticated_client_action"`
	ActiveDirectory             []ActiveDirectoryState `json:"active_directory"`
	Facebook                    []FacebookState        `json:"facebook"`
	Github                      []GithubState          `json:"github"`
	Google                      []GoogleState          `json:"google"`
	Microsoft                   []MicrosoftState       `json:"microsoft"`
	Twitter                     []TwitterState         `json:"twitter"`
}

type ActiveDirectoryState struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
}

type FacebookState struct {
	AppId                string   `json:"app_id"`
	AppSecret            string   `json:"app_secret"`
	AppSecretSettingName string   `json:"app_secret_setting_name"`
	OauthScopes          []string `json:"oauth_scopes"`
}

type GithubState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type GoogleState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type MicrosoftState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type TwitterState struct {
	ConsumerKey               string `json:"consumer_key"`
	ConsumerSecret            string `json:"consumer_secret"`
	ConsumerSecretSettingName string `json:"consumer_secret_setting_name"`
}

type AuthSettingsV2State struct {
	AuthEnabled                        bool                       `json:"auth_enabled"`
	ConfigFilePath                     string                     `json:"config_file_path"`
	DefaultProvider                    string                     `json:"default_provider"`
	ExcludedPaths                      []string                   `json:"excluded_paths"`
	ForwardProxyConvention             string                     `json:"forward_proxy_convention"`
	ForwardProxyCustomHostHeaderName   string                     `json:"forward_proxy_custom_host_header_name"`
	ForwardProxyCustomSchemeHeaderName string                     `json:"forward_proxy_custom_scheme_header_name"`
	HttpRouteApiPrefix                 string                     `json:"http_route_api_prefix"`
	RequireAuthentication              bool                       `json:"require_authentication"`
	RequireHttps                       bool                       `json:"require_https"`
	RuntimeVersion                     string                     `json:"runtime_version"`
	UnauthenticatedAction              string                     `json:"unauthenticated_action"`
	ActiveDirectoryV2                  []ActiveDirectoryV2State   `json:"active_directory_v2"`
	AppleV2                            []AppleV2State             `json:"apple_v2"`
	AzureStaticWebAppV2                []AzureStaticWebAppV2State `json:"azure_static_web_app_v2"`
	CustomOidcV2                       []CustomOidcV2State        `json:"custom_oidc_v2"`
	FacebookV2                         []FacebookV2State          `json:"facebook_v2"`
	GithubV2                           []GithubV2State            `json:"github_v2"`
	GoogleV2                           []GoogleV2State            `json:"google_v2"`
	Login                              []LoginState               `json:"login"`
	MicrosoftV2                        []MicrosoftV2State         `json:"microsoft_v2"`
	TwitterV2                          []TwitterV2State           `json:"twitter_v2"`
}

type ActiveDirectoryV2State struct {
	AllowedApplications               []string          `json:"allowed_applications"`
	AllowedAudiences                  []string          `json:"allowed_audiences"`
	AllowedGroups                     []string          `json:"allowed_groups"`
	AllowedIdentities                 []string          `json:"allowed_identities"`
	ClientId                          string            `json:"client_id"`
	ClientSecretCertificateThumbprint string            `json:"client_secret_certificate_thumbprint"`
	ClientSecretSettingName           string            `json:"client_secret_setting_name"`
	JwtAllowedClientApplications      []string          `json:"jwt_allowed_client_applications"`
	JwtAllowedGroups                  []string          `json:"jwt_allowed_groups"`
	LoginParameters                   map[string]string `json:"login_parameters"`
	TenantAuthEndpoint                string            `json:"tenant_auth_endpoint"`
	WwwAuthenticationDisabled         bool              `json:"www_authentication_disabled"`
}

type AppleV2State struct {
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type AzureStaticWebAppV2State struct {
	ClientId string `json:"client_id"`
}

type CustomOidcV2State struct {
	AuthorisationEndpoint       string   `json:"authorisation_endpoint"`
	CertificationUri            string   `json:"certification_uri"`
	ClientCredentialMethod      string   `json:"client_credential_method"`
	ClientId                    string   `json:"client_id"`
	ClientSecretSettingName     string   `json:"client_secret_setting_name"`
	IssuerEndpoint              string   `json:"issuer_endpoint"`
	Name                        string   `json:"name"`
	NameClaimType               string   `json:"name_claim_type"`
	OpenidConfigurationEndpoint string   `json:"openid_configuration_endpoint"`
	Scopes                      []string `json:"scopes"`
	TokenEndpoint               string   `json:"token_endpoint"`
}

type FacebookV2State struct {
	AppId                string   `json:"app_id"`
	AppSecretSettingName string   `json:"app_secret_setting_name"`
	GraphApiVersion      string   `json:"graph_api_version"`
	LoginScopes          []string `json:"login_scopes"`
}

type GithubV2State struct {
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type GoogleV2State struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type LoginState struct {
	AllowedExternalRedirectUrls   []string `json:"allowed_external_redirect_urls"`
	CookieExpirationConvention    string   `json:"cookie_expiration_convention"`
	CookieExpirationTime          string   `json:"cookie_expiration_time"`
	LogoutEndpoint                string   `json:"logout_endpoint"`
	NonceExpirationTime           string   `json:"nonce_expiration_time"`
	PreserveUrlFragmentsForLogins bool     `json:"preserve_url_fragments_for_logins"`
	TokenRefreshExtensionTime     float64  `json:"token_refresh_extension_time"`
	TokenStoreEnabled             bool     `json:"token_store_enabled"`
	TokenStorePath                string   `json:"token_store_path"`
	TokenStoreSasSettingName      string   `json:"token_store_sas_setting_name"`
	ValidateNonce                 bool     `json:"validate_nonce"`
}

type MicrosoftV2State struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type TwitterV2State struct {
	ConsumerKey               string `json:"consumer_key"`
	ConsumerSecretSettingName string `json:"consumer_secret_setting_name"`
}

type BackupState struct {
	Enabled           bool            `json:"enabled"`
	Name              string          `json:"name"`
	StorageAccountUrl string          `json:"storage_account_url"`
	Schedule          []ScheduleState `json:"schedule"`
}

type ScheduleState struct {
	FrequencyInterval    float64 `json:"frequency_interval"`
	FrequencyUnit        string  `json:"frequency_unit"`
	KeepAtLeastOneBackup bool    `json:"keep_at_least_one_backup"`
	LastExecutionTime    string  `json:"last_execution_time"`
	RetentionPeriodDays  float64 `json:"retention_period_days"`
	StartTime            string  `json:"start_time"`
}

type ConnectionStringState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type LogsState struct {
	DetailedErrorMessages bool                   `json:"detailed_error_messages"`
	FailedRequestTracing  bool                   `json:"failed_request_tracing"`
	ApplicationLogs       []ApplicationLogsState `json:"application_logs"`
	HttpLogs              []HttpLogsState        `json:"http_logs"`
}

type ApplicationLogsState struct {
	FileSystemLevel  string                                 `json:"file_system_level"`
	AzureBlobStorage []ApplicationLogsAzureBlobStorageState `json:"azure_blob_storage"`
}

type ApplicationLogsAzureBlobStorageState struct {
	Level           string  `json:"level"`
	RetentionInDays float64 `json:"retention_in_days"`
	SasUrl          string  `json:"sas_url"`
}

type HttpLogsState struct {
	AzureBlobStorage []HttpLogsAzureBlobStorageState `json:"azure_blob_storage"`
	FileSystem       []FileSystemState               `json:"file_system"`
}

type HttpLogsAzureBlobStorageState struct {
	RetentionInDays float64 `json:"retention_in_days"`
	SasUrl          string  `json:"sas_url"`
}

type FileSystemState struct {
	RetentionInDays float64 `json:"retention_in_days"`
	RetentionInMb   float64 `json:"retention_in_mb"`
}

type SiteConfigState struct {
	AlwaysOn                                 bool                      `json:"always_on"`
	ApiDefinitionUrl                         string                    `json:"api_definition_url"`
	ApiManagementApiId                       string                    `json:"api_management_api_id"`
	AppCommandLine                           string                    `json:"app_command_line"`
	AutoHealEnabled                          bool                      `json:"auto_heal_enabled"`
	ContainerRegistryManagedIdentityClientId string                    `json:"container_registry_managed_identity_client_id"`
	ContainerRegistryUseManagedIdentity      bool                      `json:"container_registry_use_managed_identity"`
	DefaultDocuments                         []string                  `json:"default_documents"`
	DetailedErrorLoggingEnabled              bool                      `json:"detailed_error_logging_enabled"`
	FtpsState                                string                    `json:"ftps_state"`
	HealthCheckEvictionTimeInMin             float64                   `json:"health_check_eviction_time_in_min"`
	HealthCheckPath                          string                    `json:"health_check_path"`
	Http2Enabled                             bool                      `json:"http2_enabled"`
	LoadBalancingMode                        string                    `json:"load_balancing_mode"`
	LocalMysqlEnabled                        bool                      `json:"local_mysql_enabled"`
	ManagedPipelineMode                      string                    `json:"managed_pipeline_mode"`
	MinimumTlsVersion                        string                    `json:"minimum_tls_version"`
	RemoteDebuggingEnabled                   bool                      `json:"remote_debugging_enabled"`
	RemoteDebuggingVersion                   string                    `json:"remote_debugging_version"`
	ScmMinimumTlsVersion                     string                    `json:"scm_minimum_tls_version"`
	ScmType                                  string                    `json:"scm_type"`
	ScmUseMainIpRestriction                  bool                      `json:"scm_use_main_ip_restriction"`
	Use32BitWorker                           bool                      `json:"use_32_bit_worker"`
	VnetRouteAllEnabled                      bool                      `json:"vnet_route_all_enabled"`
	WebsocketsEnabled                        bool                      `json:"websockets_enabled"`
	WindowsFxVersion                         string                    `json:"windows_fx_version"`
	WorkerCount                              float64                   `json:"worker_count"`
	ApplicationStack                         []ApplicationStackState   `json:"application_stack"`
	AutoHealSetting                          []AutoHealSettingState    `json:"auto_heal_setting"`
	Cors                                     []CorsState               `json:"cors"`
	IpRestriction                            []IpRestrictionState      `json:"ip_restriction"`
	ScmIpRestriction                         []ScmIpRestrictionState   `json:"scm_ip_restriction"`
	VirtualApplication                       []VirtualApplicationState `json:"virtual_application"`
}

type ApplicationStackState struct {
	CurrentStack              string `json:"current_stack"`
	DockerContainerName       string `json:"docker_container_name"`
	DockerContainerRegistry   string `json:"docker_container_registry"`
	DockerContainerTag        string `json:"docker_container_tag"`
	DotnetCoreVersion         string `json:"dotnet_core_version"`
	DotnetVersion             string `json:"dotnet_version"`
	JavaContainer             string `json:"java_container"`
	JavaContainerVersion      string `json:"java_container_version"`
	JavaEmbeddedServerEnabled bool   `json:"java_embedded_server_enabled"`
	JavaVersion               string `json:"java_version"`
	NodeVersion               string `json:"node_version"`
	PhpVersion                string `json:"php_version"`
	Python                    bool   `json:"python"`
	PythonVersion             string `json:"python_version"`
	TomcatVersion             string `json:"tomcat_version"`
}

type AutoHealSettingState struct {
	Action  []ActionState  `json:"action"`
	Trigger []TriggerState `json:"trigger"`
}

type ActionState struct {
	ActionType                  string              `json:"action_type"`
	MinimumProcessExecutionTime string              `json:"minimum_process_execution_time"`
	CustomAction                []CustomActionState `json:"custom_action"`
}

type CustomActionState struct {
	Executable string `json:"executable"`
	Parameters string `json:"parameters"`
}

type TriggerState struct {
	PrivateMemoryKb float64            `json:"private_memory_kb"`
	Requests        []RequestsState    `json:"requests"`
	SlowRequest     []SlowRequestState `json:"slow_request"`
	StatusCode      []StatusCodeState  `json:"status_code"`
}

type RequestsState struct {
	Count    float64 `json:"count"`
	Interval string  `json:"interval"`
}

type SlowRequestState struct {
	Count     float64 `json:"count"`
	Interval  string  `json:"interval"`
	Path      string  `json:"path"`
	TimeTaken string  `json:"time_taken"`
}

type StatusCodeState struct {
	Count           float64 `json:"count"`
	Interval        string  `json:"interval"`
	Path            string  `json:"path"`
	StatusCodeRange string  `json:"status_code_range"`
	SubStatus       float64 `json:"sub_status"`
	Win32Status     string  `json:"win32_status"`
}

type CorsState struct {
	AllowedOrigins     []string `json:"allowed_origins"`
	SupportCredentials bool     `json:"support_credentials"`
}

type IpRestrictionState struct {
	Action                 string                      `json:"action"`
	IpAddress              string                      `json:"ip_address"`
	Name                   string                      `json:"name"`
	Priority               float64                     `json:"priority"`
	ServiceTag             string                      `json:"service_tag"`
	VirtualNetworkSubnetId string                      `json:"virtual_network_subnet_id"`
	Headers                []IpRestrictionHeadersState `json:"headers"`
}

type IpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type ScmIpRestrictionState struct {
	Action                 string                         `json:"action"`
	IpAddress              string                         `json:"ip_address"`
	Name                   string                         `json:"name"`
	Priority               float64                        `json:"priority"`
	ServiceTag             string                         `json:"service_tag"`
	VirtualNetworkSubnetId string                         `json:"virtual_network_subnet_id"`
	Headers                []ScmIpRestrictionHeadersState `json:"headers"`
}

type ScmIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type VirtualApplicationState struct {
	PhysicalPath     string                  `json:"physical_path"`
	Preload          bool                    `json:"preload"`
	VirtualPath      string                  `json:"virtual_path"`
	VirtualDirectory []VirtualDirectoryState `json:"virtual_directory"`
}

type VirtualDirectoryState struct {
	PhysicalPath string `json:"physical_path"`
	VirtualPath  string `json:"virtual_path"`
}

type SiteCredentialState struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type StickySettingsState struct {
	AppSettingNames       []string `json:"app_setting_names"`
	ConnectionStringNames []string `json:"connection_string_names"`
}

type StorageAccountState struct {
	AccessKey   string `json:"access_key"`
	AccountName string `json:"account_name"`
	MountPath   string `json:"mount_path"`
	Name        string `json:"name"`
	ShareName   string `json:"share_name"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
