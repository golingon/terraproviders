// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	fluidrelayserver "github.com/golingon/terraproviders/azurerm/3.49.0/fluidrelayserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFluidRelayServer(name string, args FluidRelayServerArgs) *FluidRelayServer {
	return &FluidRelayServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FluidRelayServer)(nil)

type FluidRelayServer struct {
	Name  string
	Args  FluidRelayServerArgs
	state *fluidRelayServerState
}

func (frs *FluidRelayServer) Type() string {
	return "azurerm_fluid_relay_server"
}

func (frs *FluidRelayServer) LocalName() string {
	return frs.Name
}

func (frs *FluidRelayServer) Configuration() interface{} {
	return frs.Args
}

func (frs *FluidRelayServer) Attributes() fluidRelayServerAttributes {
	return fluidRelayServerAttributes{ref: terra.ReferenceResource(frs)}
}

func (frs *FluidRelayServer) ImportState(av io.Reader) error {
	frs.state = &fluidRelayServerState{}
	if err := json.NewDecoder(av).Decode(frs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", frs.Type(), frs.LocalName(), err)
	}
	return nil
}

func (frs *FluidRelayServer) State() (*fluidRelayServerState, bool) {
	return frs.state, frs.state != nil
}

func (frs *FluidRelayServer) StateMust() *fluidRelayServerState {
	if frs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", frs.Type(), frs.LocalName()))
	}
	return frs.state
}

func (frs *FluidRelayServer) DependOn() terra.Reference {
	return terra.ReferenceResource(frs)
}

type FluidRelayServerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageSku: string, optional
	StorageSku terra.StringValue `hcl:"storage_sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *fluidrelayserver.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *fluidrelayserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FluidRelayServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fluidRelayServerAttributes struct {
	ref terra.Reference
}

func (frs fluidRelayServerAttributes) FrsTenantId() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("frs_tenant_id"))
}

func (frs fluidRelayServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("id"))
}

func (frs fluidRelayServerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("location"))
}

func (frs fluidRelayServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("name"))
}

func (frs fluidRelayServerAttributes) OrdererEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](frs.ref.Append("orderer_endpoints"))
}

func (frs fluidRelayServerAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("primary_key"))
}

func (frs fluidRelayServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("resource_group_name"))
}

func (frs fluidRelayServerAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("secondary_key"))
}

func (frs fluidRelayServerAttributes) ServiceEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](frs.ref.Append("service_endpoints"))
}

func (frs fluidRelayServerAttributes) StorageEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](frs.ref.Append("storage_endpoints"))
}

func (frs fluidRelayServerAttributes) StorageSku() terra.StringValue {
	return terra.ReferenceString(frs.ref.Append("storage_sku"))
}

func (frs fluidRelayServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](frs.ref.Append("tags"))
}

func (frs fluidRelayServerAttributes) Identity() terra.ListValue[fluidrelayserver.IdentityAttributes] {
	return terra.ReferenceList[fluidrelayserver.IdentityAttributes](frs.ref.Append("identity"))
}

func (frs fluidRelayServerAttributes) Timeouts() fluidrelayserver.TimeoutsAttributes {
	return terra.ReferenceSingle[fluidrelayserver.TimeoutsAttributes](frs.ref.Append("timeouts"))
}

type fluidRelayServerState struct {
	FrsTenantId       string                           `json:"frs_tenant_id"`
	Id                string                           `json:"id"`
	Location          string                           `json:"location"`
	Name              string                           `json:"name"`
	OrdererEndpoints  []string                         `json:"orderer_endpoints"`
	PrimaryKey        string                           `json:"primary_key"`
	ResourceGroupName string                           `json:"resource_group_name"`
	SecondaryKey      string                           `json:"secondary_key"`
	ServiceEndpoints  []string                         `json:"service_endpoints"`
	StorageEndpoints  []string                         `json:"storage_endpoints"`
	StorageSku        string                           `json:"storage_sku"`
	Tags              map[string]string                `json:"tags"`
	Identity          []fluidrelayserver.IdentityState `json:"identity"`
	Timeouts          *fluidrelayserver.TimeoutsState  `json:"timeouts"`
}
