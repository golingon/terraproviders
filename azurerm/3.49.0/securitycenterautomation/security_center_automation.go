// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package securitycenterautomation

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Action struct {
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// TriggerUrl: string, optional
	TriggerUrl terra.StringValue `hcl:"trigger_url,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Source struct {
	// EventSource: string, required
	EventSource terra.StringValue `hcl:"event_source,attr" validate:"required"`
	// RuleSet: min=0
	RuleSet []RuleSet `hcl:"rule_set,block" validate:"min=0"`
}

type RuleSet struct {
	// Rule: min=1
	Rule []Rule `hcl:"rule,block" validate:"min=1"`
}

type Rule struct {
	// ExpectedValue: string, required
	ExpectedValue terra.StringValue `hcl:"expected_value,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// PropertyPath: string, required
	PropertyPath terra.StringValue `hcl:"property_path,attr" validate:"required"`
	// PropertyType: string, required
	PropertyType terra.StringValue `hcl:"property_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("connection_string"))
}

func (a ActionAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("resource_id"))
}

func (a ActionAttributes) TriggerUrl() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("trigger_url"))
}

func (a ActionAttributes) Type() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("type"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) EventSource() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("event_source"))
}

func (s SourceAttributes) RuleSet() terra.ListValue[RuleSetAttributes] {
	return terra.ReferenceList[RuleSetAttributes](s.ref.Append("rule_set"))
}

type RuleSetAttributes struct {
	ref terra.Reference
}

func (rs RuleSetAttributes) InternalRef() terra.Reference {
	return rs.ref
}

func (rs RuleSetAttributes) InternalWithRef(ref terra.Reference) RuleSetAttributes {
	return RuleSetAttributes{ref: ref}
}

func (rs RuleSetAttributes) InternalTokens() hclwrite.Tokens {
	return rs.ref.InternalTokens()
}

func (rs RuleSetAttributes) Rule() terra.ListValue[RuleAttributes] {
	return terra.ReferenceList[RuleAttributes](rs.ref.Append("rule"))
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) ExpectedValue() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("expected_value"))
}

func (r RuleAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("operator"))
}

func (r RuleAttributes) PropertyPath() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("property_path"))
}

func (r RuleAttributes) PropertyType() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("property_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ActionState struct {
	ConnectionString string `json:"connection_string"`
	ResourceId       string `json:"resource_id"`
	TriggerUrl       string `json:"trigger_url"`
	Type             string `json:"type"`
}

type SourceState struct {
	EventSource string         `json:"event_source"`
	RuleSet     []RuleSetState `json:"rule_set"`
}

type RuleSetState struct {
	Rule []RuleState `json:"rule"`
}

type RuleState struct {
	ExpectedValue string `json:"expected_value"`
	Operator      string `json:"operator"`
	PropertyPath  string `json:"property_path"`
	PropertyType  string `json:"property_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
