// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	databatchaccount "github.com/golingon/terraproviders/azurerm/3.49.0/databatchaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataBatchAccount(name string, args DataBatchAccountArgs) *DataBatchAccount {
	return &DataBatchAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataBatchAccount)(nil)

type DataBatchAccount struct {
	Name string
	Args DataBatchAccountArgs
}

func (ba *DataBatchAccount) DataSource() string {
	return "azurerm_batch_account"
}

func (ba *DataBatchAccount) LocalName() string {
	return ba.Name
}

func (ba *DataBatchAccount) Configuration() interface{} {
	return ba.Args
}

func (ba *DataBatchAccount) Attributes() dataBatchAccountAttributes {
	return dataBatchAccountAttributes{ref: terra.ReferenceDataResource(ba)}
}

type DataBatchAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Encryption: min=0
	Encryption []databatchaccount.Encryption `hcl:"encryption,block" validate:"min=0"`
	// KeyVaultReference: min=0
	KeyVaultReference []databatchaccount.KeyVaultReference `hcl:"key_vault_reference,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *databatchaccount.Timeouts `hcl:"timeouts,block"`
}
type dataBatchAccountAttributes struct {
	ref terra.Reference
}

func (ba dataBatchAccountAttributes) AccountEndpoint() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("account_endpoint"))
}

func (ba dataBatchAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("id"))
}

func (ba dataBatchAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("location"))
}

func (ba dataBatchAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("name"))
}

func (ba dataBatchAccountAttributes) PoolAllocationMode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("pool_allocation_mode"))
}

func (ba dataBatchAccountAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("primary_access_key"))
}

func (ba dataBatchAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("resource_group_name"))
}

func (ba dataBatchAccountAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("secondary_access_key"))
}

func (ba dataBatchAccountAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("storage_account_id"))
}

func (ba dataBatchAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ba.ref.Append("tags"))
}

func (ba dataBatchAccountAttributes) Encryption() terra.ListValue[databatchaccount.EncryptionAttributes] {
	return terra.ReferenceList[databatchaccount.EncryptionAttributes](ba.ref.Append("encryption"))
}

func (ba dataBatchAccountAttributes) KeyVaultReference() terra.ListValue[databatchaccount.KeyVaultReferenceAttributes] {
	return terra.ReferenceList[databatchaccount.KeyVaultReferenceAttributes](ba.ref.Append("key_vault_reference"))
}

func (ba dataBatchAccountAttributes) Timeouts() databatchaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[databatchaccount.TimeoutsAttributes](ba.ref.Append("timeouts"))
}
