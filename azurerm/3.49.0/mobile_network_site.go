// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mobilenetworksite "github.com/golingon/terraproviders/azurerm/3.49.0/mobilenetworksite"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMobileNetworkSite(name string, args MobileNetworkSiteArgs) *MobileNetworkSite {
	return &MobileNetworkSite{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MobileNetworkSite)(nil)

type MobileNetworkSite struct {
	Name  string
	Args  MobileNetworkSiteArgs
	state *mobileNetworkSiteState
}

func (mns *MobileNetworkSite) Type() string {
	return "azurerm_mobile_network_site"
}

func (mns *MobileNetworkSite) LocalName() string {
	return mns.Name
}

func (mns *MobileNetworkSite) Configuration() interface{} {
	return mns.Args
}

func (mns *MobileNetworkSite) Attributes() mobileNetworkSiteAttributes {
	return mobileNetworkSiteAttributes{ref: terra.ReferenceResource(mns)}
}

func (mns *MobileNetworkSite) ImportState(av io.Reader) error {
	mns.state = &mobileNetworkSiteState{}
	if err := json.NewDecoder(av).Decode(mns.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mns.Type(), mns.LocalName(), err)
	}
	return nil
}

func (mns *MobileNetworkSite) State() (*mobileNetworkSiteState, bool) {
	return mns.state, mns.state != nil
}

func (mns *MobileNetworkSite) StateMust() *mobileNetworkSiteState {
	if mns.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mns.Type(), mns.LocalName()))
	}
	return mns.state
}

func (mns *MobileNetworkSite) DependOn() terra.Reference {
	return terra.ReferenceResource(mns)
}

type MobileNetworkSiteArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MobileNetworkId: string, required
	MobileNetworkId terra.StringValue `hcl:"mobile_network_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *mobilenetworksite.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MobileNetworkSite depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mobileNetworkSiteAttributes struct {
	ref terra.Reference
}

func (mns mobileNetworkSiteAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("id"))
}

func (mns mobileNetworkSiteAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("location"))
}

func (mns mobileNetworkSiteAttributes) MobileNetworkId() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("mobile_network_id"))
}

func (mns mobileNetworkSiteAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("name"))
}

func (mns mobileNetworkSiteAttributes) NetworkFunctionIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mns.ref.Append("network_function_ids"))
}

func (mns mobileNetworkSiteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mns.ref.Append("tags"))
}

func (mns mobileNetworkSiteAttributes) Timeouts() mobilenetworksite.TimeoutsAttributes {
	return terra.ReferenceSingle[mobilenetworksite.TimeoutsAttributes](mns.ref.Append("timeouts"))
}

type mobileNetworkSiteState struct {
	Id                 string                           `json:"id"`
	Location           string                           `json:"location"`
	MobileNetworkId    string                           `json:"mobile_network_id"`
	Name               string                           `json:"name"`
	NetworkFunctionIds []string                         `json:"network_function_ids"`
	Tags               map[string]string                `json:"tags"`
	Timeouts           *mobilenetworksite.TimeoutsState `json:"timeouts"`
}
