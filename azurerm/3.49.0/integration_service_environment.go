// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	integrationserviceenvironment "github.com/golingon/terraproviders/azurerm/3.49.0/integrationserviceenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIntegrationServiceEnvironment(name string, args IntegrationServiceEnvironmentArgs) *IntegrationServiceEnvironment {
	return &IntegrationServiceEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IntegrationServiceEnvironment)(nil)

type IntegrationServiceEnvironment struct {
	Name  string
	Args  IntegrationServiceEnvironmentArgs
	state *integrationServiceEnvironmentState
}

func (ise *IntegrationServiceEnvironment) Type() string {
	return "azurerm_integration_service_environment"
}

func (ise *IntegrationServiceEnvironment) LocalName() string {
	return ise.Name
}

func (ise *IntegrationServiceEnvironment) Configuration() interface{} {
	return ise.Args
}

func (ise *IntegrationServiceEnvironment) Attributes() integrationServiceEnvironmentAttributes {
	return integrationServiceEnvironmentAttributes{ref: terra.ReferenceResource(ise)}
}

func (ise *IntegrationServiceEnvironment) ImportState(av io.Reader) error {
	ise.state = &integrationServiceEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ise.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ise.Type(), ise.LocalName(), err)
	}
	return nil
}

func (ise *IntegrationServiceEnvironment) State() (*integrationServiceEnvironmentState, bool) {
	return ise.state, ise.state != nil
}

func (ise *IntegrationServiceEnvironment) StateMust() *integrationServiceEnvironmentState {
	if ise.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ise.Type(), ise.LocalName()))
	}
	return ise.state
}

func (ise *IntegrationServiceEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ise)
}

type IntegrationServiceEnvironmentArgs struct {
	// AccessEndpointType: string, required
	AccessEndpointType terra.StringValue `hcl:"access_endpoint_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualNetworkSubnetIds: set of string, required
	VirtualNetworkSubnetIds terra.SetValue[terra.StringValue] `hcl:"virtual_network_subnet_ids,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *integrationserviceenvironment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IntegrationServiceEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type integrationServiceEnvironmentAttributes struct {
	ref terra.Reference
}

func (ise integrationServiceEnvironmentAttributes) AccessEndpointType() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("access_endpoint_type"))
}

func (ise integrationServiceEnvironmentAttributes) ConnectorEndpointIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ise.ref.Append("connector_endpoint_ip_addresses"))
}

func (ise integrationServiceEnvironmentAttributes) ConnectorOutboundIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ise.ref.Append("connector_outbound_ip_addresses"))
}

func (ise integrationServiceEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("id"))
}

func (ise integrationServiceEnvironmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("location"))
}

func (ise integrationServiceEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("name"))
}

func (ise integrationServiceEnvironmentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("resource_group_name"))
}

func (ise integrationServiceEnvironmentAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ise.ref.Append("sku_name"))
}

func (ise integrationServiceEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ise.ref.Append("tags"))
}

func (ise integrationServiceEnvironmentAttributes) VirtualNetworkSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ise.ref.Append("virtual_network_subnet_ids"))
}

func (ise integrationServiceEnvironmentAttributes) WorkflowEndpointIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ise.ref.Append("workflow_endpoint_ip_addresses"))
}

func (ise integrationServiceEnvironmentAttributes) WorkflowOutboundIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ise.ref.Append("workflow_outbound_ip_addresses"))
}

func (ise integrationServiceEnvironmentAttributes) Timeouts() integrationserviceenvironment.TimeoutsAttributes {
	return terra.ReferenceSingle[integrationserviceenvironment.TimeoutsAttributes](ise.ref.Append("timeouts"))
}

type integrationServiceEnvironmentState struct {
	AccessEndpointType           string                                       `json:"access_endpoint_type"`
	ConnectorEndpointIpAddresses []string                                     `json:"connector_endpoint_ip_addresses"`
	ConnectorOutboundIpAddresses []string                                     `json:"connector_outbound_ip_addresses"`
	Id                           string                                       `json:"id"`
	Location                     string                                       `json:"location"`
	Name                         string                                       `json:"name"`
	ResourceGroupName            string                                       `json:"resource_group_name"`
	SkuName                      string                                       `json:"sku_name"`
	Tags                         map[string]string                            `json:"tags"`
	VirtualNetworkSubnetIds      []string                                     `json:"virtual_network_subnet_ids"`
	WorkflowEndpointIpAddresses  []string                                     `json:"workflow_endpoint_ip_addresses"`
	WorkflowOutboundIpAddresses  []string                                     `json:"workflow_outbound_ip_addresses"`
	Timeouts                     *integrationserviceenvironment.TimeoutsState `json:"timeouts"`
}
