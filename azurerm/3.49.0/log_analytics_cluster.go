// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticscluster "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsCluster(name string, args LogAnalyticsClusterArgs) *LogAnalyticsCluster {
	return &LogAnalyticsCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsCluster)(nil)

type LogAnalyticsCluster struct {
	Name  string
	Args  LogAnalyticsClusterArgs
	state *logAnalyticsClusterState
}

func (lac *LogAnalyticsCluster) Type() string {
	return "azurerm_log_analytics_cluster"
}

func (lac *LogAnalyticsCluster) LocalName() string {
	return lac.Name
}

func (lac *LogAnalyticsCluster) Configuration() interface{} {
	return lac.Args
}

func (lac *LogAnalyticsCluster) Attributes() logAnalyticsClusterAttributes {
	return logAnalyticsClusterAttributes{ref: terra.ReferenceResource(lac)}
}

func (lac *LogAnalyticsCluster) ImportState(av io.Reader) error {
	lac.state = &logAnalyticsClusterState{}
	if err := json.NewDecoder(av).Decode(lac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lac.Type(), lac.LocalName(), err)
	}
	return nil
}

func (lac *LogAnalyticsCluster) State() (*logAnalyticsClusterState, bool) {
	return lac.state, lac.state != nil
}

func (lac *LogAnalyticsCluster) StateMust() *logAnalyticsClusterState {
	if lac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lac.Type(), lac.LocalName()))
	}
	return lac.state
}

func (lac *LogAnalyticsCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(lac)
}

type LogAnalyticsClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SizeGb: number, optional
	SizeGb terra.NumberValue `hcl:"size_gb,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *loganalyticscluster.Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *loganalyticscluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsClusterAttributes struct {
	ref terra.Reference
}

func (lac logAnalyticsClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(lac.ref.Append("cluster_id"))
}

func (lac logAnalyticsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lac.ref.Append("id"))
}

func (lac logAnalyticsClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lac.ref.Append("location"))
}

func (lac logAnalyticsClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lac.ref.Append("name"))
}

func (lac logAnalyticsClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lac.ref.Append("resource_group_name"))
}

func (lac logAnalyticsClusterAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceNumber(lac.ref.Append("size_gb"))
}

func (lac logAnalyticsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lac.ref.Append("tags"))
}

func (lac logAnalyticsClusterAttributes) Identity() terra.ListValue[loganalyticscluster.IdentityAttributes] {
	return terra.ReferenceList[loganalyticscluster.IdentityAttributes](lac.ref.Append("identity"))
}

func (lac logAnalyticsClusterAttributes) Timeouts() loganalyticscluster.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticscluster.TimeoutsAttributes](lac.ref.Append("timeouts"))
}

type logAnalyticsClusterState struct {
	ClusterId         string                              `json:"cluster_id"`
	Id                string                              `json:"id"`
	Location          string                              `json:"location"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	SizeGb            float64                             `json:"size_gb"`
	Tags              map[string]string                   `json:"tags"`
	Identity          []loganalyticscluster.IdentityState `json:"identity"`
	Timeouts          *loganalyticscluster.TimeoutsState  `json:"timeouts"`
}
