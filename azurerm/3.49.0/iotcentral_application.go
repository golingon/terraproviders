// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iotcentralapplication "github.com/golingon/terraproviders/azurerm/3.49.0/iotcentralapplication"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotcentralApplication(name string, args IotcentralApplicationArgs) *IotcentralApplication {
	return &IotcentralApplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotcentralApplication)(nil)

type IotcentralApplication struct {
	Name  string
	Args  IotcentralApplicationArgs
	state *iotcentralApplicationState
}

func (ia *IotcentralApplication) Type() string {
	return "azurerm_iotcentral_application"
}

func (ia *IotcentralApplication) LocalName() string {
	return ia.Name
}

func (ia *IotcentralApplication) Configuration() interface{} {
	return ia.Args
}

func (ia *IotcentralApplication) Attributes() iotcentralApplicationAttributes {
	return iotcentralApplicationAttributes{ref: terra.ReferenceResource(ia)}
}

func (ia *IotcentralApplication) ImportState(av io.Reader) error {
	ia.state = &iotcentralApplicationState{}
	if err := json.NewDecoder(av).Decode(ia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ia.Type(), ia.LocalName(), err)
	}
	return nil
}

func (ia *IotcentralApplication) State() (*iotcentralApplicationState, bool) {
	return ia.state, ia.state != nil
}

func (ia *IotcentralApplication) StateMust() *iotcentralApplicationState {
	if ia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ia.Type(), ia.LocalName()))
	}
	return ia.state
}

func (ia *IotcentralApplication) DependOn() terra.Reference {
	return terra.ReferenceResource(ia)
}

type IotcentralApplicationArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// SubDomain: string, required
	SubDomain terra.StringValue `hcl:"sub_domain,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Template: string, optional
	Template terra.StringValue `hcl:"template,attr"`
	// Identity: optional
	Identity *iotcentralapplication.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *iotcentralapplication.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IotcentralApplication depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotcentralApplicationAttributes struct {
	ref terra.Reference
}

func (ia iotcentralApplicationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("display_name"))
}

func (ia iotcentralApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("id"))
}

func (ia iotcentralApplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("location"))
}

func (ia iotcentralApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("name"))
}

func (ia iotcentralApplicationAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ia.ref.Append("public_network_access_enabled"))
}

func (ia iotcentralApplicationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("resource_group_name"))
}

func (ia iotcentralApplicationAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("sku"))
}

func (ia iotcentralApplicationAttributes) SubDomain() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("sub_domain"))
}

func (ia iotcentralApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ia.ref.Append("tags"))
}

func (ia iotcentralApplicationAttributes) Template() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("template"))
}

func (ia iotcentralApplicationAttributes) Identity() terra.ListValue[iotcentralapplication.IdentityAttributes] {
	return terra.ReferenceList[iotcentralapplication.IdentityAttributes](ia.ref.Append("identity"))
}

func (ia iotcentralApplicationAttributes) Timeouts() iotcentralapplication.TimeoutsAttributes {
	return terra.ReferenceSingle[iotcentralapplication.TimeoutsAttributes](ia.ref.Append("timeouts"))
}

type iotcentralApplicationState struct {
	DisplayName                string                                `json:"display_name"`
	Id                         string                                `json:"id"`
	Location                   string                                `json:"location"`
	Name                       string                                `json:"name"`
	PublicNetworkAccessEnabled bool                                  `json:"public_network_access_enabled"`
	ResourceGroupName          string                                `json:"resource_group_name"`
	Sku                        string                                `json:"sku"`
	SubDomain                  string                                `json:"sub_domain"`
	Tags                       map[string]string                     `json:"tags"`
	Template                   string                                `json:"template"`
	Identity                   []iotcentralapplication.IdentityState `json:"identity"`
	Timeouts                   *iotcentralapplication.TimeoutsState  `json:"timeouts"`
}
