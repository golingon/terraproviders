// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlelasticpool "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlelasticpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlElasticpool(name string, args MssqlElasticpoolArgs) *MssqlElasticpool {
	return &MssqlElasticpool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlElasticpool)(nil)

type MssqlElasticpool struct {
	Name  string
	Args  MssqlElasticpoolArgs
	state *mssqlElasticpoolState
}

func (me *MssqlElasticpool) Type() string {
	return "azurerm_mssql_elasticpool"
}

func (me *MssqlElasticpool) LocalName() string {
	return me.Name
}

func (me *MssqlElasticpool) Configuration() interface{} {
	return me.Args
}

func (me *MssqlElasticpool) Attributes() mssqlElasticpoolAttributes {
	return mssqlElasticpoolAttributes{ref: terra.ReferenceResource(me)}
}

func (me *MssqlElasticpool) ImportState(av io.Reader) error {
	me.state = &mssqlElasticpoolState{}
	if err := json.NewDecoder(av).Decode(me.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", me.Type(), me.LocalName(), err)
	}
	return nil
}

func (me *MssqlElasticpool) State() (*mssqlElasticpoolState, bool) {
	return me.state, me.state != nil
}

func (me *MssqlElasticpool) StateMust() *mssqlElasticpoolState {
	if me.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", me.Type(), me.LocalName()))
	}
	return me.state
}

func (me *MssqlElasticpool) DependOn() terra.Reference {
	return terra.ReferenceResource(me)
}

type MssqlElasticpoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaintenanceConfigurationName: string, optional
	MaintenanceConfigurationName terra.StringValue `hcl:"maintenance_configuration_name,attr"`
	// MaxSizeBytes: number, optional
	MaxSizeBytes terra.NumberValue `hcl:"max_size_bytes,attr"`
	// MaxSizeGb: number, optional
	MaxSizeGb terra.NumberValue `hcl:"max_size_gb,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// PerDatabaseSettings: required
	PerDatabaseSettings *mssqlelasticpool.PerDatabaseSettings `hcl:"per_database_settings,block" validate:"required"`
	// Sku: required
	Sku *mssqlelasticpool.Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqlelasticpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlElasticpool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlElasticpoolAttributes struct {
	ref terra.Reference
}

func (me mssqlElasticpoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("id"))
}

func (me mssqlElasticpoolAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("license_type"))
}

func (me mssqlElasticpoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("location"))
}

func (me mssqlElasticpoolAttributes) MaintenanceConfigurationName() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("maintenance_configuration_name"))
}

func (me mssqlElasticpoolAttributes) MaxSizeBytes() terra.NumberValue {
	return terra.ReferenceNumber(me.ref.Append("max_size_bytes"))
}

func (me mssqlElasticpoolAttributes) MaxSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(me.ref.Append("max_size_gb"))
}

func (me mssqlElasticpoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("name"))
}

func (me mssqlElasticpoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("resource_group_name"))
}

func (me mssqlElasticpoolAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(me.ref.Append("server_name"))
}

func (me mssqlElasticpoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](me.ref.Append("tags"))
}

func (me mssqlElasticpoolAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceBool(me.ref.Append("zone_redundant"))
}

func (me mssqlElasticpoolAttributes) PerDatabaseSettings() terra.ListValue[mssqlelasticpool.PerDatabaseSettingsAttributes] {
	return terra.ReferenceList[mssqlelasticpool.PerDatabaseSettingsAttributes](me.ref.Append("per_database_settings"))
}

func (me mssqlElasticpoolAttributes) Sku() terra.ListValue[mssqlelasticpool.SkuAttributes] {
	return terra.ReferenceList[mssqlelasticpool.SkuAttributes](me.ref.Append("sku"))
}

func (me mssqlElasticpoolAttributes) Timeouts() mssqlelasticpool.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlelasticpool.TimeoutsAttributes](me.ref.Append("timeouts"))
}

type mssqlElasticpoolState struct {
	Id                           string                                      `json:"id"`
	LicenseType                  string                                      `json:"license_type"`
	Location                     string                                      `json:"location"`
	MaintenanceConfigurationName string                                      `json:"maintenance_configuration_name"`
	MaxSizeBytes                 float64                                     `json:"max_size_bytes"`
	MaxSizeGb                    float64                                     `json:"max_size_gb"`
	Name                         string                                      `json:"name"`
	ResourceGroupName            string                                      `json:"resource_group_name"`
	ServerName                   string                                      `json:"server_name"`
	Tags                         map[string]string                           `json:"tags"`
	ZoneRedundant                bool                                        `json:"zone_redundant"`
	PerDatabaseSettings          []mssqlelasticpool.PerDatabaseSettingsState `json:"per_database_settings"`
	Sku                          []mssqlelasticpool.SkuState                 `json:"sku"`
	Timeouts                     *mssqlelasticpool.TimeoutsState             `json:"timeouts"`
}
