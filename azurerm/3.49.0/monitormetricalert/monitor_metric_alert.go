// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitormetricalert

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Action struct {
	// ActionGroupId: string, required
	ActionGroupId terra.StringValue `hcl:"action_group_id,attr" validate:"required"`
	// WebhookProperties: map of string, optional
	WebhookProperties terra.MapValue[terra.StringValue] `hcl:"webhook_properties,attr"`
}

type ApplicationInsightsWebTestLocationAvailabilityCriteria struct {
	// ComponentId: string, required
	ComponentId terra.StringValue `hcl:"component_id,attr" validate:"required"`
	// FailedLocationCount: number, required
	FailedLocationCount terra.NumberValue `hcl:"failed_location_count,attr" validate:"required"`
	// WebTestId: string, required
	WebTestId terra.StringValue `hcl:"web_test_id,attr" validate:"required"`
}

type Criteria struct {
	// Aggregation: string, required
	Aggregation terra.StringValue `hcl:"aggregation,attr" validate:"required"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace: string, required
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// SkipMetricValidation: bool, optional
	SkipMetricValidation terra.BoolValue `hcl:"skip_metric_validation,attr"`
	// Threshold: number, required
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// CriteriaDimension: min=0
	Dimension []CriteriaDimension `hcl:"dimension,block" validate:"min=0"`
}

type CriteriaDimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DynamicCriteria struct {
	// Aggregation: string, required
	Aggregation terra.StringValue `hcl:"aggregation,attr" validate:"required"`
	// AlertSensitivity: string, required
	AlertSensitivity terra.StringValue `hcl:"alert_sensitivity,attr" validate:"required"`
	// EvaluationFailureCount: number, optional
	EvaluationFailureCount terra.NumberValue `hcl:"evaluation_failure_count,attr"`
	// EvaluationTotalCount: number, optional
	EvaluationTotalCount terra.NumberValue `hcl:"evaluation_total_count,attr"`
	// IgnoreDataBefore: string, optional
	IgnoreDataBefore terra.StringValue `hcl:"ignore_data_before,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace: string, required
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// SkipMetricValidation: bool, optional
	SkipMetricValidation terra.BoolValue `hcl:"skip_metric_validation,attr"`
	// DynamicCriteriaDimension: min=0
	Dimension []DynamicCriteriaDimension `hcl:"dimension,block" validate:"min=0"`
}

type DynamicCriteriaDimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionGroupId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_group_id"))
}

func (a ActionAttributes) WebhookProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("webhook_properties"))
}

type ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes struct {
	ref terra.Reference
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return aiwtlac.ref, nil
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) InternalWithRef(ref terra.Reference) ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes {
	return ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes{ref: ref}
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aiwtlac.ref.InternalTokens()
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) ComponentId() terra.StringValue {
	return terra.ReferenceAsString(aiwtlac.ref.Append("component_id"))
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) FailedLocationCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aiwtlac.ref.Append("failed_location_count"))
}

func (aiwtlac ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes) WebTestId() terra.StringValue {
	return terra.ReferenceAsString(aiwtlac.ref.Append("web_test_id"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) Aggregation() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("aggregation"))
}

func (c CriteriaAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("metric_name"))
}

func (c CriteriaAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("metric_namespace"))
}

func (c CriteriaAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("operator"))
}

func (c CriteriaAttributes) SkipMetricValidation() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("skip_metric_validation"))
}

func (c CriteriaAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("threshold"))
}

func (c CriteriaAttributes) Dimension() terra.ListValue[CriteriaDimensionAttributes] {
	return terra.ReferenceAsList[CriteriaDimensionAttributes](c.ref.Append("dimension"))
}

type CriteriaDimensionAttributes struct {
	ref terra.Reference
}

func (d CriteriaDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d CriteriaDimensionAttributes) InternalWithRef(ref terra.Reference) CriteriaDimensionAttributes {
	return CriteriaDimensionAttributes{ref: ref}
}

func (d CriteriaDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d CriteriaDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d CriteriaDimensionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d CriteriaDimensionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("values"))
}

type DynamicCriteriaAttributes struct {
	ref terra.Reference
}

func (dc DynamicCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DynamicCriteriaAttributes) InternalWithRef(ref terra.Reference) DynamicCriteriaAttributes {
	return DynamicCriteriaAttributes{ref: ref}
}

func (dc DynamicCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DynamicCriteriaAttributes) Aggregation() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("aggregation"))
}

func (dc DynamicCriteriaAttributes) AlertSensitivity() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("alert_sensitivity"))
}

func (dc DynamicCriteriaAttributes) EvaluationFailureCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("evaluation_failure_count"))
}

func (dc DynamicCriteriaAttributes) EvaluationTotalCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("evaluation_total_count"))
}

func (dc DynamicCriteriaAttributes) IgnoreDataBefore() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("ignore_data_before"))
}

func (dc DynamicCriteriaAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("metric_name"))
}

func (dc DynamicCriteriaAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("metric_namespace"))
}

func (dc DynamicCriteriaAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("operator"))
}

func (dc DynamicCriteriaAttributes) SkipMetricValidation() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("skip_metric_validation"))
}

func (dc DynamicCriteriaAttributes) Dimension() terra.ListValue[DynamicCriteriaDimensionAttributes] {
	return terra.ReferenceAsList[DynamicCriteriaDimensionAttributes](dc.ref.Append("dimension"))
}

type DynamicCriteriaDimensionAttributes struct {
	ref terra.Reference
}

func (d DynamicCriteriaDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DynamicCriteriaDimensionAttributes) InternalWithRef(ref terra.Reference) DynamicCriteriaDimensionAttributes {
	return DynamicCriteriaDimensionAttributes{ref: ref}
}

func (d DynamicCriteriaDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DynamicCriteriaDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DynamicCriteriaDimensionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d DynamicCriteriaDimensionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	ActionGroupId     string            `json:"action_group_id"`
	WebhookProperties map[string]string `json:"webhook_properties"`
}

type ApplicationInsightsWebTestLocationAvailabilityCriteriaState struct {
	ComponentId         string  `json:"component_id"`
	FailedLocationCount float64 `json:"failed_location_count"`
	WebTestId           string  `json:"web_test_id"`
}

type CriteriaState struct {
	Aggregation          string                   `json:"aggregation"`
	MetricName           string                   `json:"metric_name"`
	MetricNamespace      string                   `json:"metric_namespace"`
	Operator             string                   `json:"operator"`
	SkipMetricValidation bool                     `json:"skip_metric_validation"`
	Threshold            float64                  `json:"threshold"`
	Dimension            []CriteriaDimensionState `json:"dimension"`
}

type CriteriaDimensionState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type DynamicCriteriaState struct {
	Aggregation            string                          `json:"aggregation"`
	AlertSensitivity       string                          `json:"alert_sensitivity"`
	EvaluationFailureCount float64                         `json:"evaluation_failure_count"`
	EvaluationTotalCount   float64                         `json:"evaluation_total_count"`
	IgnoreDataBefore       string                          `json:"ignore_data_before"`
	MetricName             string                          `json:"metric_name"`
	MetricNamespace        string                          `json:"metric_namespace"`
	Operator               string                          `json:"operator"`
	SkipMetricValidation   bool                            `json:"skip_metric_validation"`
	Dimension              []DynamicCriteriaDimensionState `json:"dimension"`
}

type DynamicCriteriaDimensionState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
