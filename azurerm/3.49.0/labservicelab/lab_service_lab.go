// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package labservicelab

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoShutdown struct {
	// DisconnectDelay: string, optional
	DisconnectDelay terra.StringValue `hcl:"disconnect_delay,attr"`
	// IdleDelay: string, optional
	IdleDelay terra.StringValue `hcl:"idle_delay,attr"`
	// NoConnectDelay: string, optional
	NoConnectDelay terra.StringValue `hcl:"no_connect_delay,attr"`
	// ShutdownOnIdle: string, optional
	ShutdownOnIdle terra.StringValue `hcl:"shutdown_on_idle,attr"`
}

type ConnectionSetting struct {
	// ClientRdpAccess: string, optional
	ClientRdpAccess terra.StringValue `hcl:"client_rdp_access,attr"`
	// ClientSshAccess: string, optional
	ClientSshAccess terra.StringValue `hcl:"client_ssh_access,attr"`
}

type Network struct {
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
}

type Roster struct {
	// ActiveDirectoryGroupId: string, optional
	ActiveDirectoryGroupId terra.StringValue `hcl:"active_directory_group_id,attr"`
	// LmsInstance: string, optional
	LmsInstance terra.StringValue `hcl:"lms_instance,attr"`
	// LtiClientId: string, optional
	LtiClientId terra.StringValue `hcl:"lti_client_id,attr"`
	// LtiContextId: string, optional
	LtiContextId terra.StringValue `hcl:"lti_context_id,attr"`
	// LtiRosterEndpoint: string, optional
	LtiRosterEndpoint terra.StringValue `hcl:"lti_roster_endpoint,attr"`
}

type Security struct {
	// OpenAccessEnabled: bool, required
	OpenAccessEnabled terra.BoolValue `hcl:"open_access_enabled,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualMachine struct {
	// AdditionalCapabilityGpuDriversInstalled: bool, optional
	AdditionalCapabilityGpuDriversInstalled terra.BoolValue `hcl:"additional_capability_gpu_drivers_installed,attr"`
	// CreateOption: string, optional
	CreateOption terra.StringValue `hcl:"create_option,attr"`
	// SharedPasswordEnabled: bool, optional
	SharedPasswordEnabled terra.BoolValue `hcl:"shared_password_enabled,attr"`
	// UsageQuota: string, optional
	UsageQuota terra.StringValue `hcl:"usage_quota,attr"`
	// AdminUser: required
	AdminUser *AdminUser `hcl:"admin_user,block" validate:"required"`
	// ImageReference: required
	ImageReference *ImageReference `hcl:"image_reference,block" validate:"required"`
	// NonAdminUser: optional
	NonAdminUser *NonAdminUser `hcl:"non_admin_user,block"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
}

type AdminUser struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type ImageReference struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Offer: string, optional
	Offer terra.StringValue `hcl:"offer,attr"`
	// Publisher: string, optional
	Publisher terra.StringValue `hcl:"publisher,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type NonAdminUser struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Sku struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type AutoShutdownAttributes struct {
	ref terra.Reference
}

func (as AutoShutdownAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AutoShutdownAttributes) InternalWithRef(ref terra.Reference) AutoShutdownAttributes {
	return AutoShutdownAttributes{ref: ref}
}

func (as AutoShutdownAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AutoShutdownAttributes) DisconnectDelay() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("disconnect_delay"))
}

func (as AutoShutdownAttributes) IdleDelay() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("idle_delay"))
}

func (as AutoShutdownAttributes) NoConnectDelay() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("no_connect_delay"))
}

func (as AutoShutdownAttributes) ShutdownOnIdle() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("shutdown_on_idle"))
}

type ConnectionSettingAttributes struct {
	ref terra.Reference
}

func (cs ConnectionSettingAttributes) InternalRef() terra.Reference {
	return cs.ref
}

func (cs ConnectionSettingAttributes) InternalWithRef(ref terra.Reference) ConnectionSettingAttributes {
	return ConnectionSettingAttributes{ref: ref}
}

func (cs ConnectionSettingAttributes) InternalTokens() hclwrite.Tokens {
	return cs.ref.InternalTokens()
}

func (cs ConnectionSettingAttributes) ClientRdpAccess() terra.StringValue {
	return terra.ReferenceString(cs.ref.Append("client_rdp_access"))
}

func (cs ConnectionSettingAttributes) ClientSshAccess() terra.StringValue {
	return terra.ReferenceString(cs.ref.Append("client_ssh_access"))
}

type NetworkAttributes struct {
	ref terra.Reference
}

func (n NetworkAttributes) InternalRef() terra.Reference {
	return n.ref
}

func (n NetworkAttributes) InternalWithRef(ref terra.Reference) NetworkAttributes {
	return NetworkAttributes{ref: ref}
}

func (n NetworkAttributes) InternalTokens() hclwrite.Tokens {
	return n.ref.InternalTokens()
}

func (n NetworkAttributes) LoadBalancerId() terra.StringValue {
	return terra.ReferenceString(n.ref.Append("load_balancer_id"))
}

func (n NetworkAttributes) PublicIpId() terra.StringValue {
	return terra.ReferenceString(n.ref.Append("public_ip_id"))
}

func (n NetworkAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(n.ref.Append("subnet_id"))
}

type RosterAttributes struct {
	ref terra.Reference
}

func (r RosterAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RosterAttributes) InternalWithRef(ref terra.Reference) RosterAttributes {
	return RosterAttributes{ref: ref}
}

func (r RosterAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RosterAttributes) ActiveDirectoryGroupId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("active_directory_group_id"))
}

func (r RosterAttributes) LmsInstance() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("lms_instance"))
}

func (r RosterAttributes) LtiClientId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("lti_client_id"))
}

func (r RosterAttributes) LtiContextId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("lti_context_id"))
}

func (r RosterAttributes) LtiRosterEndpoint() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("lti_roster_endpoint"))
}

type SecurityAttributes struct {
	ref terra.Reference
}

func (s SecurityAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecurityAttributes) InternalWithRef(ref terra.Reference) SecurityAttributes {
	return SecurityAttributes{ref: ref}
}

func (s SecurityAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecurityAttributes) OpenAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("open_access_enabled"))
}

func (s SecurityAttributes) RegistrationCode() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("registration_code"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type VirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm VirtualMachineAttributes) InternalRef() terra.Reference {
	return vm.ref
}

func (vm VirtualMachineAttributes) InternalWithRef(ref terra.Reference) VirtualMachineAttributes {
	return VirtualMachineAttributes{ref: ref}
}

func (vm VirtualMachineAttributes) InternalTokens() hclwrite.Tokens {
	return vm.ref.InternalTokens()
}

func (vm VirtualMachineAttributes) AdditionalCapabilityGpuDriversInstalled() terra.BoolValue {
	return terra.ReferenceBool(vm.ref.Append("additional_capability_gpu_drivers_installed"))
}

func (vm VirtualMachineAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(vm.ref.Append("create_option"))
}

func (vm VirtualMachineAttributes) SharedPasswordEnabled() terra.BoolValue {
	return terra.ReferenceBool(vm.ref.Append("shared_password_enabled"))
}

func (vm VirtualMachineAttributes) UsageQuota() terra.StringValue {
	return terra.ReferenceString(vm.ref.Append("usage_quota"))
}

func (vm VirtualMachineAttributes) AdminUser() terra.ListValue[AdminUserAttributes] {
	return terra.ReferenceList[AdminUserAttributes](vm.ref.Append("admin_user"))
}

func (vm VirtualMachineAttributes) ImageReference() terra.ListValue[ImageReferenceAttributes] {
	return terra.ReferenceList[ImageReferenceAttributes](vm.ref.Append("image_reference"))
}

func (vm VirtualMachineAttributes) NonAdminUser() terra.ListValue[NonAdminUserAttributes] {
	return terra.ReferenceList[NonAdminUserAttributes](vm.ref.Append("non_admin_user"))
}

func (vm VirtualMachineAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceList[SkuAttributes](vm.ref.Append("sku"))
}

type AdminUserAttributes struct {
	ref terra.Reference
}

func (au AdminUserAttributes) InternalRef() terra.Reference {
	return au.ref
}

func (au AdminUserAttributes) InternalWithRef(ref terra.Reference) AdminUserAttributes {
	return AdminUserAttributes{ref: ref}
}

func (au AdminUserAttributes) InternalTokens() hclwrite.Tokens {
	return au.ref.InternalTokens()
}

func (au AdminUserAttributes) Password() terra.StringValue {
	return terra.ReferenceString(au.ref.Append("password"))
}

func (au AdminUserAttributes) Username() terra.StringValue {
	return terra.ReferenceString(au.ref.Append("username"))
}

type ImageReferenceAttributes struct {
	ref terra.Reference
}

func (ir ImageReferenceAttributes) InternalRef() terra.Reference {
	return ir.ref
}

func (ir ImageReferenceAttributes) InternalWithRef(ref terra.Reference) ImageReferenceAttributes {
	return ImageReferenceAttributes{ref: ref}
}

func (ir ImageReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return ir.ref.InternalTokens()
}

func (ir ImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("id"))
}

func (ir ImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("offer"))
}

func (ir ImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("publisher"))
}

func (ir ImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("sku"))
}

func (ir ImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("version"))
}

type NonAdminUserAttributes struct {
	ref terra.Reference
}

func (nau NonAdminUserAttributes) InternalRef() terra.Reference {
	return nau.ref
}

func (nau NonAdminUserAttributes) InternalWithRef(ref terra.Reference) NonAdminUserAttributes {
	return NonAdminUserAttributes{ref: ref}
}

func (nau NonAdminUserAttributes) InternalTokens() hclwrite.Tokens {
	return nau.ref.InternalTokens()
}

func (nau NonAdminUserAttributes) Password() terra.StringValue {
	return terra.ReferenceString(nau.ref.Append("password"))
}

func (nau NonAdminUserAttributes) Username() terra.StringValue {
	return terra.ReferenceString(nau.ref.Append("username"))
}

type SkuAttributes struct {
	ref terra.Reference
}

func (s SkuAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SkuAttributes) InternalWithRef(ref terra.Reference) SkuAttributes {
	return SkuAttributes{ref: ref}
}

func (s SkuAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("capacity"))
}

func (s SkuAttributes) Name() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("name"))
}

type AutoShutdownState struct {
	DisconnectDelay string `json:"disconnect_delay"`
	IdleDelay       string `json:"idle_delay"`
	NoConnectDelay  string `json:"no_connect_delay"`
	ShutdownOnIdle  string `json:"shutdown_on_idle"`
}

type ConnectionSettingState struct {
	ClientRdpAccess string `json:"client_rdp_access"`
	ClientSshAccess string `json:"client_ssh_access"`
}

type NetworkState struct {
	LoadBalancerId string `json:"load_balancer_id"`
	PublicIpId     string `json:"public_ip_id"`
	SubnetId       string `json:"subnet_id"`
}

type RosterState struct {
	ActiveDirectoryGroupId string `json:"active_directory_group_id"`
	LmsInstance            string `json:"lms_instance"`
	LtiClientId            string `json:"lti_client_id"`
	LtiContextId           string `json:"lti_context_id"`
	LtiRosterEndpoint      string `json:"lti_roster_endpoint"`
}

type SecurityState struct {
	OpenAccessEnabled bool   `json:"open_access_enabled"`
	RegistrationCode  string `json:"registration_code"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VirtualMachineState struct {
	AdditionalCapabilityGpuDriversInstalled bool                  `json:"additional_capability_gpu_drivers_installed"`
	CreateOption                            string                `json:"create_option"`
	SharedPasswordEnabled                   bool                  `json:"shared_password_enabled"`
	UsageQuota                              string                `json:"usage_quota"`
	AdminUser                               []AdminUserState      `json:"admin_user"`
	ImageReference                          []ImageReferenceState `json:"image_reference"`
	NonAdminUser                            []NonAdminUserState   `json:"non_admin_user"`
	Sku                                     []SkuState            `json:"sku"`
}

type AdminUserState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type ImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type NonAdminUserState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type SkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
}
