// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicesftp "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicesftp"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceSftp(name string, args DataFactoryLinkedServiceSftpArgs) *DataFactoryLinkedServiceSftp {
	return &DataFactoryLinkedServiceSftp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceSftp)(nil)

type DataFactoryLinkedServiceSftp struct {
	Name  string
	Args  DataFactoryLinkedServiceSftpArgs
	state *dataFactoryLinkedServiceSftpState
}

func (dflss *DataFactoryLinkedServiceSftp) Type() string {
	return "azurerm_data_factory_linked_service_sftp"
}

func (dflss *DataFactoryLinkedServiceSftp) LocalName() string {
	return dflss.Name
}

func (dflss *DataFactoryLinkedServiceSftp) Configuration() interface{} {
	return dflss.Args
}

func (dflss *DataFactoryLinkedServiceSftp) Attributes() dataFactoryLinkedServiceSftpAttributes {
	return dataFactoryLinkedServiceSftpAttributes{ref: terra.ReferenceResource(dflss)}
}

func (dflss *DataFactoryLinkedServiceSftp) ImportState(av io.Reader) error {
	dflss.state = &dataFactoryLinkedServiceSftpState{}
	if err := json.NewDecoder(av).Decode(dflss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflss.Type(), dflss.LocalName(), err)
	}
	return nil
}

func (dflss *DataFactoryLinkedServiceSftp) State() (*dataFactoryLinkedServiceSftpState, bool) {
	return dflss.state, dflss.state != nil
}

func (dflss *DataFactoryLinkedServiceSftp) StateMust() *dataFactoryLinkedServiceSftpState {
	if dflss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflss.Type(), dflss.LocalName()))
	}
	return dflss.state
}

func (dflss *DataFactoryLinkedServiceSftp) DependOn() terra.Reference {
	return terra.ReferenceResource(dflss)
}

type DataFactoryLinkedServiceSftpArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// HostKeyFingerprint: string, optional
	HostKeyFingerprint terra.StringValue `hcl:"host_key_fingerprint,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// SkipHostKeyValidation: bool, optional
	SkipHostKeyValidation terra.BoolValue `hcl:"skip_host_key_validation,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicesftp.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceSftp depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceSftpAttributes struct {
	ref terra.Reference
}

func (dflss dataFactoryLinkedServiceSftpAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflss.ref.Append("additional_properties"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflss.ref.Append("annotations"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("authentication_type"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("data_factory_id"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("description"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Host() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("host"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) HostKeyFingerprint() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("host_key_fingerprint"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("id"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("integration_runtime_name"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("name"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflss.ref.Append("parameters"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Password() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("password"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(dflss.ref.Append("port"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) SkipHostKeyValidation() terra.BoolValue {
	return terra.ReferenceBool(dflss.ref.Append("skip_host_key_validation"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Username() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("username"))
}

func (dflss dataFactoryLinkedServiceSftpAttributes) Timeouts() datafactorylinkedservicesftp.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicesftp.TimeoutsAttributes](dflss.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceSftpState struct {
	AdditionalProperties   map[string]string                           `json:"additional_properties"`
	Annotations            []string                                    `json:"annotations"`
	AuthenticationType     string                                      `json:"authentication_type"`
	DataFactoryId          string                                      `json:"data_factory_id"`
	Description            string                                      `json:"description"`
	Host                   string                                      `json:"host"`
	HostKeyFingerprint     string                                      `json:"host_key_fingerprint"`
	Id                     string                                      `json:"id"`
	IntegrationRuntimeName string                                      `json:"integration_runtime_name"`
	Name                   string                                      `json:"name"`
	Parameters             map[string]string                           `json:"parameters"`
	Password               string                                      `json:"password"`
	Port                   float64                                     `json:"port"`
	SkipHostKeyValidation  bool                                        `json:"skip_host_key_validation"`
	Username               string                                      `json:"username"`
	Timeouts               *datafactorylinkedservicesftp.TimeoutsState `json:"timeouts"`
}
