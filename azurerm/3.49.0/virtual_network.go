// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualnetwork "github.com/golingon/terraproviders/azurerm/3.49.0/virtualnetwork"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualNetwork(name string, args VirtualNetworkArgs) *VirtualNetwork {
	return &VirtualNetwork{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualNetwork)(nil)

type VirtualNetwork struct {
	Name  string
	Args  VirtualNetworkArgs
	state *virtualNetworkState
}

func (vn *VirtualNetwork) Type() string {
	return "azurerm_virtual_network"
}

func (vn *VirtualNetwork) LocalName() string {
	return vn.Name
}

func (vn *VirtualNetwork) Configuration() interface{} {
	return vn.Args
}

func (vn *VirtualNetwork) Attributes() virtualNetworkAttributes {
	return virtualNetworkAttributes{ref: terra.ReferenceResource(vn)}
}

func (vn *VirtualNetwork) ImportState(av io.Reader) error {
	vn.state = &virtualNetworkState{}
	if err := json.NewDecoder(av).Decode(vn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vn.Type(), vn.LocalName(), err)
	}
	return nil
}

func (vn *VirtualNetwork) State() (*virtualNetworkState, bool) {
	return vn.state, vn.state != nil
}

func (vn *VirtualNetwork) StateMust() *virtualNetworkState {
	if vn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vn.Type(), vn.LocalName()))
	}
	return vn.state
}

func (vn *VirtualNetwork) DependOn() terra.Reference {
	return terra.ReferenceResource(vn)
}

type VirtualNetworkArgs struct {
	// AddressSpace: list of string, required
	AddressSpace terra.ListValue[terra.StringValue] `hcl:"address_space,attr" validate:"required"`
	// BgpCommunity: string, optional
	BgpCommunity terra.StringValue `hcl:"bgp_community,attr"`
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// EdgeZone: string, optional
	EdgeZone terra.StringValue `hcl:"edge_zone,attr"`
	// FlowTimeoutInMinutes: number, optional
	FlowTimeoutInMinutes terra.NumberValue `hcl:"flow_timeout_in_minutes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Subnet: min=0
	Subnet []virtualnetwork.Subnet `hcl:"subnet,block" validate:"min=0"`
	// DdosProtectionPlan: optional
	DdosProtectionPlan *virtualnetwork.DdosProtectionPlan `hcl:"ddos_protection_plan,block"`
	// Timeouts: optional
	Timeouts *virtualnetwork.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualNetwork depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualNetworkAttributes struct {
	ref terra.Reference
}

func (vn virtualNetworkAttributes) AddressSpace() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](vn.ref.Append("address_space"))
}

func (vn virtualNetworkAttributes) BgpCommunity() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("bgp_community"))
}

func (vn virtualNetworkAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](vn.ref.Append("dns_servers"))
}

func (vn virtualNetworkAttributes) EdgeZone() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("edge_zone"))
}

func (vn virtualNetworkAttributes) FlowTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(vn.ref.Append("flow_timeout_in_minutes"))
}

func (vn virtualNetworkAttributes) Guid() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("guid"))
}

func (vn virtualNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("id"))
}

func (vn virtualNetworkAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("location"))
}

func (vn virtualNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("name"))
}

func (vn virtualNetworkAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vn.ref.Append("resource_group_name"))
}

func (vn virtualNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vn.ref.Append("tags"))
}

func (vn virtualNetworkAttributes) Subnet() terra.SetValue[virtualnetwork.SubnetAttributes] {
	return terra.ReferenceSet[virtualnetwork.SubnetAttributes](vn.ref.Append("subnet"))
}

func (vn virtualNetworkAttributes) DdosProtectionPlan() terra.ListValue[virtualnetwork.DdosProtectionPlanAttributes] {
	return terra.ReferenceList[virtualnetwork.DdosProtectionPlanAttributes](vn.ref.Append("ddos_protection_plan"))
}

func (vn virtualNetworkAttributes) Timeouts() virtualnetwork.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualnetwork.TimeoutsAttributes](vn.ref.Append("timeouts"))
}

type virtualNetworkState struct {
	AddressSpace         []string                                 `json:"address_space"`
	BgpCommunity         string                                   `json:"bgp_community"`
	DnsServers           []string                                 `json:"dns_servers"`
	EdgeZone             string                                   `json:"edge_zone"`
	FlowTimeoutInMinutes float64                                  `json:"flow_timeout_in_minutes"`
	Guid                 string                                   `json:"guid"`
	Id                   string                                   `json:"id"`
	Location             string                                   `json:"location"`
	Name                 string                                   `json:"name"`
	ResourceGroupName    string                                   `json:"resource_group_name"`
	Tags                 map[string]string                        `json:"tags"`
	Subnet               []virtualnetwork.SubnetState             `json:"subnet"`
	DdosProtectionPlan   []virtualnetwork.DdosProtectionPlanState `json:"ddos_protection_plan"`
	Timeouts             *virtualnetwork.TimeoutsState            `json:"timeouts"`
}
