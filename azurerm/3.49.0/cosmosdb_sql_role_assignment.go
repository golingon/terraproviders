// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqlroleassignment "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqlroleassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlRoleAssignment(name string, args CosmosdbSqlRoleAssignmentArgs) *CosmosdbSqlRoleAssignment {
	return &CosmosdbSqlRoleAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlRoleAssignment)(nil)

type CosmosdbSqlRoleAssignment struct {
	Name  string
	Args  CosmosdbSqlRoleAssignmentArgs
	state *cosmosdbSqlRoleAssignmentState
}

func (csra *CosmosdbSqlRoleAssignment) Type() string {
	return "azurerm_cosmosdb_sql_role_assignment"
}

func (csra *CosmosdbSqlRoleAssignment) LocalName() string {
	return csra.Name
}

func (csra *CosmosdbSqlRoleAssignment) Configuration() interface{} {
	return csra.Args
}

func (csra *CosmosdbSqlRoleAssignment) Attributes() cosmosdbSqlRoleAssignmentAttributes {
	return cosmosdbSqlRoleAssignmentAttributes{ref: terra.ReferenceResource(csra)}
}

func (csra *CosmosdbSqlRoleAssignment) ImportState(av io.Reader) error {
	csra.state = &cosmosdbSqlRoleAssignmentState{}
	if err := json.NewDecoder(av).Decode(csra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csra.Type(), csra.LocalName(), err)
	}
	return nil
}

func (csra *CosmosdbSqlRoleAssignment) State() (*cosmosdbSqlRoleAssignmentState, bool) {
	return csra.state, csra.state != nil
}

func (csra *CosmosdbSqlRoleAssignment) StateMust() *cosmosdbSqlRoleAssignmentState {
	if csra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csra.Type(), csra.LocalName()))
	}
	return csra.state
}

func (csra *CosmosdbSqlRoleAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(csra)
}

type CosmosdbSqlRoleAssignmentArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RoleDefinitionId: string, required
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbsqlroleassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlRoleAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlRoleAssignmentAttributes struct {
	ref terra.Reference
}

func (csra cosmosdbSqlRoleAssignmentAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("account_name"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("id"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("name"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("principal_id"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("resource_group_name"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("role_definition_id"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(csra.ref.Append("scope"))
}

func (csra cosmosdbSqlRoleAssignmentAttributes) Timeouts() cosmosdbsqlroleassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqlroleassignment.TimeoutsAttributes](csra.ref.Append("timeouts"))
}

type cosmosdbSqlRoleAssignmentState struct {
	AccountName       string                                   `json:"account_name"`
	Id                string                                   `json:"id"`
	Name              string                                   `json:"name"`
	PrincipalId       string                                   `json:"principal_id"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	RoleDefinitionId  string                                   `json:"role_definition_id"`
	Scope             string                                   `json:"scope"`
	Timeouts          *cosmosdbsqlroleassignment.TimeoutsState `json:"timeouts"`
}
