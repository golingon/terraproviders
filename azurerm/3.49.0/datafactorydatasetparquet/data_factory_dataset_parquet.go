// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datafactorydatasetparquet

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AzureBlobStorageLocation struct {
	// Container: string, required
	Container terra.StringValue `hcl:"container,attr" validate:"required"`
	// DynamicContainerEnabled: bool, optional
	DynamicContainerEnabled terra.BoolValue `hcl:"dynamic_container_enabled,attr"`
	// DynamicFilenameEnabled: bool, optional
	DynamicFilenameEnabled terra.BoolValue `hcl:"dynamic_filename_enabled,attr"`
	// DynamicPathEnabled: bool, optional
	DynamicPathEnabled terra.BoolValue `hcl:"dynamic_path_enabled,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}

type HttpServerLocation struct {
	// DynamicFilenameEnabled: bool, optional
	DynamicFilenameEnabled terra.BoolValue `hcl:"dynamic_filename_enabled,attr"`
	// DynamicPathEnabled: bool, optional
	DynamicPathEnabled terra.BoolValue `hcl:"dynamic_path_enabled,attr"`
	// Filename: string, required
	Filename terra.StringValue `hcl:"filename,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// RelativeUrl: string, required
	RelativeUrl terra.StringValue `hcl:"relative_url,attr" validate:"required"`
}

type SchemaColumn struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AzureBlobStorageLocationAttributes struct {
	ref terra.Reference
}

func (absl AzureBlobStorageLocationAttributes) InternalRef() terra.Reference {
	return absl.ref
}

func (absl AzureBlobStorageLocationAttributes) InternalWithRef(ref terra.Reference) AzureBlobStorageLocationAttributes {
	return AzureBlobStorageLocationAttributes{ref: ref}
}

func (absl AzureBlobStorageLocationAttributes) InternalTokens() hclwrite.Tokens {
	return absl.ref.InternalTokens()
}

func (absl AzureBlobStorageLocationAttributes) Container() terra.StringValue {
	return terra.ReferenceString(absl.ref.Append("container"))
}

func (absl AzureBlobStorageLocationAttributes) DynamicContainerEnabled() terra.BoolValue {
	return terra.ReferenceBool(absl.ref.Append("dynamic_container_enabled"))
}

func (absl AzureBlobStorageLocationAttributes) DynamicFilenameEnabled() terra.BoolValue {
	return terra.ReferenceBool(absl.ref.Append("dynamic_filename_enabled"))
}

func (absl AzureBlobStorageLocationAttributes) DynamicPathEnabled() terra.BoolValue {
	return terra.ReferenceBool(absl.ref.Append("dynamic_path_enabled"))
}

func (absl AzureBlobStorageLocationAttributes) Filename() terra.StringValue {
	return terra.ReferenceString(absl.ref.Append("filename"))
}

func (absl AzureBlobStorageLocationAttributes) Path() terra.StringValue {
	return terra.ReferenceString(absl.ref.Append("path"))
}

type HttpServerLocationAttributes struct {
	ref terra.Reference
}

func (hsl HttpServerLocationAttributes) InternalRef() terra.Reference {
	return hsl.ref
}

func (hsl HttpServerLocationAttributes) InternalWithRef(ref terra.Reference) HttpServerLocationAttributes {
	return HttpServerLocationAttributes{ref: ref}
}

func (hsl HttpServerLocationAttributes) InternalTokens() hclwrite.Tokens {
	return hsl.ref.InternalTokens()
}

func (hsl HttpServerLocationAttributes) DynamicFilenameEnabled() terra.BoolValue {
	return terra.ReferenceBool(hsl.ref.Append("dynamic_filename_enabled"))
}

func (hsl HttpServerLocationAttributes) DynamicPathEnabled() terra.BoolValue {
	return terra.ReferenceBool(hsl.ref.Append("dynamic_path_enabled"))
}

func (hsl HttpServerLocationAttributes) Filename() terra.StringValue {
	return terra.ReferenceString(hsl.ref.Append("filename"))
}

func (hsl HttpServerLocationAttributes) Path() terra.StringValue {
	return terra.ReferenceString(hsl.ref.Append("path"))
}

func (hsl HttpServerLocationAttributes) RelativeUrl() terra.StringValue {
	return terra.ReferenceString(hsl.ref.Append("relative_url"))
}

type SchemaColumnAttributes struct {
	ref terra.Reference
}

func (sc SchemaColumnAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc SchemaColumnAttributes) InternalWithRef(ref terra.Reference) SchemaColumnAttributes {
	return SchemaColumnAttributes{ref: ref}
}

func (sc SchemaColumnAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SchemaColumnAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("description"))
}

func (sc SchemaColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("name"))
}

func (sc SchemaColumnAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AzureBlobStorageLocationState struct {
	Container               string `json:"container"`
	DynamicContainerEnabled bool   `json:"dynamic_container_enabled"`
	DynamicFilenameEnabled  bool   `json:"dynamic_filename_enabled"`
	DynamicPathEnabled      bool   `json:"dynamic_path_enabled"`
	Filename                string `json:"filename"`
	Path                    string `json:"path"`
}

type HttpServerLocationState struct {
	DynamicFilenameEnabled bool   `json:"dynamic_filename_enabled"`
	DynamicPathEnabled     bool   `json:"dynamic_path_enabled"`
	Filename               string `json:"filename"`
	Path                   string `json:"path"`
	RelativeUrl            string `json:"relative_url"`
}

type SchemaColumnState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
