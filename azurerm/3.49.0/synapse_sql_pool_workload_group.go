// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsesqlpoolworkloadgroup "github.com/golingon/terraproviders/azurerm/3.49.0/synapsesqlpoolworkloadgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseSqlPoolWorkloadGroup(name string, args SynapseSqlPoolWorkloadGroupArgs) *SynapseSqlPoolWorkloadGroup {
	return &SynapseSqlPoolWorkloadGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseSqlPoolWorkloadGroup)(nil)

type SynapseSqlPoolWorkloadGroup struct {
	Name  string
	Args  SynapseSqlPoolWorkloadGroupArgs
	state *synapseSqlPoolWorkloadGroupState
}

func (sspwg *SynapseSqlPoolWorkloadGroup) Type() string {
	return "azurerm_synapse_sql_pool_workload_group"
}

func (sspwg *SynapseSqlPoolWorkloadGroup) LocalName() string {
	return sspwg.Name
}

func (sspwg *SynapseSqlPoolWorkloadGroup) Configuration() interface{} {
	return sspwg.Args
}

func (sspwg *SynapseSqlPoolWorkloadGroup) Attributes() synapseSqlPoolWorkloadGroupAttributes {
	return synapseSqlPoolWorkloadGroupAttributes{ref: terra.ReferenceResource(sspwg)}
}

func (sspwg *SynapseSqlPoolWorkloadGroup) ImportState(av io.Reader) error {
	sspwg.state = &synapseSqlPoolWorkloadGroupState{}
	if err := json.NewDecoder(av).Decode(sspwg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sspwg.Type(), sspwg.LocalName(), err)
	}
	return nil
}

func (sspwg *SynapseSqlPoolWorkloadGroup) State() (*synapseSqlPoolWorkloadGroupState, bool) {
	return sspwg.state, sspwg.state != nil
}

func (sspwg *SynapseSqlPoolWorkloadGroup) StateMust() *synapseSqlPoolWorkloadGroupState {
	if sspwg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sspwg.Type(), sspwg.LocalName()))
	}
	return sspwg.state
}

func (sspwg *SynapseSqlPoolWorkloadGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(sspwg)
}

type SynapseSqlPoolWorkloadGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Importance: string, optional
	Importance terra.StringValue `hcl:"importance,attr"`
	// MaxResourcePercent: number, required
	MaxResourcePercent terra.NumberValue `hcl:"max_resource_percent,attr" validate:"required"`
	// MaxResourcePercentPerRequest: number, optional
	MaxResourcePercentPerRequest terra.NumberValue `hcl:"max_resource_percent_per_request,attr"`
	// MinResourcePercent: number, required
	MinResourcePercent terra.NumberValue `hcl:"min_resource_percent,attr" validate:"required"`
	// MinResourcePercentPerRequest: number, optional
	MinResourcePercentPerRequest terra.NumberValue `hcl:"min_resource_percent_per_request,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryExecutionTimeoutInSeconds: number, optional
	QueryExecutionTimeoutInSeconds terra.NumberValue `hcl:"query_execution_timeout_in_seconds,attr"`
	// SqlPoolId: string, required
	SqlPoolId terra.StringValue `hcl:"sql_pool_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *synapsesqlpoolworkloadgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseSqlPoolWorkloadGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseSqlPoolWorkloadGroupAttributes struct {
	ref terra.Reference
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sspwg.ref.Append("id"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) Importance() terra.StringValue {
	return terra.ReferenceString(sspwg.ref.Append("importance"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) MaxResourcePercent() terra.NumberValue {
	return terra.ReferenceNumber(sspwg.ref.Append("max_resource_percent"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) MaxResourcePercentPerRequest() terra.NumberValue {
	return terra.ReferenceNumber(sspwg.ref.Append("max_resource_percent_per_request"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) MinResourcePercent() terra.NumberValue {
	return terra.ReferenceNumber(sspwg.ref.Append("min_resource_percent"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) MinResourcePercentPerRequest() terra.NumberValue {
	return terra.ReferenceNumber(sspwg.ref.Append("min_resource_percent_per_request"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sspwg.ref.Append("name"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) QueryExecutionTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(sspwg.ref.Append("query_execution_timeout_in_seconds"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) SqlPoolId() terra.StringValue {
	return terra.ReferenceString(sspwg.ref.Append("sql_pool_id"))
}

func (sspwg synapseSqlPoolWorkloadGroupAttributes) Timeouts() synapsesqlpoolworkloadgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsesqlpoolworkloadgroup.TimeoutsAttributes](sspwg.ref.Append("timeouts"))
}

type synapseSqlPoolWorkloadGroupState struct {
	Id                             string                                     `json:"id"`
	Importance                     string                                     `json:"importance"`
	MaxResourcePercent             float64                                    `json:"max_resource_percent"`
	MaxResourcePercentPerRequest   float64                                    `json:"max_resource_percent_per_request"`
	MinResourcePercent             float64                                    `json:"min_resource_percent"`
	MinResourcePercentPerRequest   float64                                    `json:"min_resource_percent_per_request"`
	Name                           string                                     `json:"name"`
	QueryExecutionTimeoutInSeconds float64                                    `json:"query_execution_timeout_in_seconds"`
	SqlPoolId                      string                                     `json:"sql_pool_id"`
	Timeouts                       *synapsesqlpoolworkloadgroup.TimeoutsState `json:"timeouts"`
}
