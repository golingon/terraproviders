// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterservervulnerabilityassessment "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterservervulnerabilityassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterServerVulnerabilityAssessment(name string, args SecurityCenterServerVulnerabilityAssessmentArgs) *SecurityCenterServerVulnerabilityAssessment {
	return &SecurityCenterServerVulnerabilityAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterServerVulnerabilityAssessment)(nil)

type SecurityCenterServerVulnerabilityAssessment struct {
	Name  string
	Args  SecurityCenterServerVulnerabilityAssessmentArgs
	state *securityCenterServerVulnerabilityAssessmentState
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) Type() string {
	return "azurerm_security_center_server_vulnerability_assessment"
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) LocalName() string {
	return scsva.Name
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) Configuration() interface{} {
	return scsva.Args
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) Attributes() securityCenterServerVulnerabilityAssessmentAttributes {
	return securityCenterServerVulnerabilityAssessmentAttributes{ref: terra.ReferenceResource(scsva)}
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) ImportState(av io.Reader) error {
	scsva.state = &securityCenterServerVulnerabilityAssessmentState{}
	if err := json.NewDecoder(av).Decode(scsva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scsva.Type(), scsva.LocalName(), err)
	}
	return nil
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) State() (*securityCenterServerVulnerabilityAssessmentState, bool) {
	return scsva.state, scsva.state != nil
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) StateMust() *securityCenterServerVulnerabilityAssessmentState {
	if scsva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scsva.Type(), scsva.LocalName()))
	}
	return scsva.state
}

func (scsva *SecurityCenterServerVulnerabilityAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(scsva)
}

type SecurityCenterServerVulnerabilityAssessmentArgs struct {
	// HybridMachineId: string, optional
	HybridMachineId terra.StringValue `hcl:"hybrid_machine_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VirtualMachineId: string, optional
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr"`
	// Timeouts: optional
	Timeouts *securitycenterservervulnerabilityassessment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterServerVulnerabilityAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterServerVulnerabilityAssessmentAttributes struct {
	ref terra.Reference
}

func (scsva securityCenterServerVulnerabilityAssessmentAttributes) HybridMachineId() terra.StringValue {
	return terra.ReferenceString(scsva.ref.Append("hybrid_machine_id"))
}

func (scsva securityCenterServerVulnerabilityAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scsva.ref.Append("id"))
}

func (scsva securityCenterServerVulnerabilityAssessmentAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceString(scsva.ref.Append("virtual_machine_id"))
}

func (scsva securityCenterServerVulnerabilityAssessmentAttributes) Timeouts() securitycenterservervulnerabilityassessment.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterservervulnerabilityassessment.TimeoutsAttributes](scsva.ref.Append("timeouts"))
}

type securityCenterServerVulnerabilityAssessmentState struct {
	HybridMachineId  string                                                     `json:"hybrid_machine_id"`
	Id               string                                                     `json:"id"`
	VirtualMachineId string                                                     `json:"virtual_machine_id"`
	Timeouts         *securitycenterservervulnerabilityassessment.TimeoutsState `json:"timeouts"`
}
