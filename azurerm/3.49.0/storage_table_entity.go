// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagetableentity "github.com/golingon/terraproviders/azurerm/3.49.0/storagetableentity"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageTableEntity(name string, args StorageTableEntityArgs) *StorageTableEntity {
	return &StorageTableEntity{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageTableEntity)(nil)

type StorageTableEntity struct {
	Name  string
	Args  StorageTableEntityArgs
	state *storageTableEntityState
}

func (ste *StorageTableEntity) Type() string {
	return "azurerm_storage_table_entity"
}

func (ste *StorageTableEntity) LocalName() string {
	return ste.Name
}

func (ste *StorageTableEntity) Configuration() interface{} {
	return ste.Args
}

func (ste *StorageTableEntity) Attributes() storageTableEntityAttributes {
	return storageTableEntityAttributes{ref: terra.ReferenceResource(ste)}
}

func (ste *StorageTableEntity) ImportState(av io.Reader) error {
	ste.state = &storageTableEntityState{}
	if err := json.NewDecoder(av).Decode(ste.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ste.Type(), ste.LocalName(), err)
	}
	return nil
}

func (ste *StorageTableEntity) State() (*storageTableEntityState, bool) {
	return ste.state, ste.state != nil
}

func (ste *StorageTableEntity) StateMust() *storageTableEntityState {
	if ste.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ste.Type(), ste.LocalName()))
	}
	return ste.state
}

func (ste *StorageTableEntity) DependOn() terra.Reference {
	return terra.ReferenceResource(ste)
}

type StorageTableEntityArgs struct {
	// Entity: map of string, required
	Entity terra.MapValue[terra.StringValue] `hcl:"entity,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
	// RowKey: string, required
	RowKey terra.StringValue `hcl:"row_key,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *storagetableentity.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageTableEntity depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageTableEntityAttributes struct {
	ref terra.Reference
}

func (ste storageTableEntityAttributes) Entity() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ste.ref.Append("entity"))
}

func (ste storageTableEntityAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ste.ref.Append("id"))
}

func (ste storageTableEntityAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceString(ste.ref.Append("partition_key"))
}

func (ste storageTableEntityAttributes) RowKey() terra.StringValue {
	return terra.ReferenceString(ste.ref.Append("row_key"))
}

func (ste storageTableEntityAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(ste.ref.Append("storage_account_name"))
}

func (ste storageTableEntityAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(ste.ref.Append("table_name"))
}

func (ste storageTableEntityAttributes) Timeouts() storagetableentity.TimeoutsAttributes {
	return terra.ReferenceSingle[storagetableentity.TimeoutsAttributes](ste.ref.Append("timeouts"))
}

type storageTableEntityState struct {
	Entity             map[string]string                 `json:"entity"`
	Id                 string                            `json:"id"`
	PartitionKey       string                            `json:"partition_key"`
	RowKey             string                            `json:"row_key"`
	StorageAccountName string                            `json:"storage_account_name"`
	TableName          string                            `json:"table_name"`
	Timeouts           *storagetableentity.TimeoutsState `json:"timeouts"`
}
