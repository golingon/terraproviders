// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	bastionhost "github.com/golingon/terraproviders/azurerm/3.49.0/bastionhost"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBastionHost(name string, args BastionHostArgs) *BastionHost {
	return &BastionHost{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BastionHost)(nil)

type BastionHost struct {
	Name  string
	Args  BastionHostArgs
	state *bastionHostState
}

func (bh *BastionHost) Type() string {
	return "azurerm_bastion_host"
}

func (bh *BastionHost) LocalName() string {
	return bh.Name
}

func (bh *BastionHost) Configuration() interface{} {
	return bh.Args
}

func (bh *BastionHost) Attributes() bastionHostAttributes {
	return bastionHostAttributes{ref: terra.ReferenceResource(bh)}
}

func (bh *BastionHost) ImportState(av io.Reader) error {
	bh.state = &bastionHostState{}
	if err := json.NewDecoder(av).Decode(bh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bh.Type(), bh.LocalName(), err)
	}
	return nil
}

func (bh *BastionHost) State() (*bastionHostState, bool) {
	return bh.state, bh.state != nil
}

func (bh *BastionHost) StateMust() *bastionHostState {
	if bh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bh.Type(), bh.LocalName()))
	}
	return bh.state
}

func (bh *BastionHost) DependOn() terra.Reference {
	return terra.ReferenceResource(bh)
}

type BastionHostArgs struct {
	// CopyPasteEnabled: bool, optional
	CopyPasteEnabled terra.BoolValue `hcl:"copy_paste_enabled,attr"`
	// FileCopyEnabled: bool, optional
	FileCopyEnabled terra.BoolValue `hcl:"file_copy_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpConnectEnabled: bool, optional
	IpConnectEnabled terra.BoolValue `hcl:"ip_connect_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScaleUnits: number, optional
	ScaleUnits terra.NumberValue `hcl:"scale_units,attr"`
	// ShareableLinkEnabled: bool, optional
	ShareableLinkEnabled terra.BoolValue `hcl:"shareable_link_enabled,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TunnelingEnabled: bool, optional
	TunnelingEnabled terra.BoolValue `hcl:"tunneling_enabled,attr"`
	// IpConfiguration: optional
	IpConfiguration *bastionhost.IpConfiguration `hcl:"ip_configuration,block"`
	// Timeouts: optional
	Timeouts *bastionhost.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BastionHost depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type bastionHostAttributes struct {
	ref terra.Reference
}

func (bh bastionHostAttributes) CopyPasteEnabled() terra.BoolValue {
	return terra.ReferenceBool(bh.ref.Append("copy_paste_enabled"))
}

func (bh bastionHostAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("dns_name"))
}

func (bh bastionHostAttributes) FileCopyEnabled() terra.BoolValue {
	return terra.ReferenceBool(bh.ref.Append("file_copy_enabled"))
}

func (bh bastionHostAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("id"))
}

func (bh bastionHostAttributes) IpConnectEnabled() terra.BoolValue {
	return terra.ReferenceBool(bh.ref.Append("ip_connect_enabled"))
}

func (bh bastionHostAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("location"))
}

func (bh bastionHostAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("name"))
}

func (bh bastionHostAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("resource_group_name"))
}

func (bh bastionHostAttributes) ScaleUnits() terra.NumberValue {
	return terra.ReferenceNumber(bh.ref.Append("scale_units"))
}

func (bh bastionHostAttributes) ShareableLinkEnabled() terra.BoolValue {
	return terra.ReferenceBool(bh.ref.Append("shareable_link_enabled"))
}

func (bh bastionHostAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(bh.ref.Append("sku"))
}

func (bh bastionHostAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bh.ref.Append("tags"))
}

func (bh bastionHostAttributes) TunnelingEnabled() terra.BoolValue {
	return terra.ReferenceBool(bh.ref.Append("tunneling_enabled"))
}

func (bh bastionHostAttributes) IpConfiguration() terra.ListValue[bastionhost.IpConfigurationAttributes] {
	return terra.ReferenceList[bastionhost.IpConfigurationAttributes](bh.ref.Append("ip_configuration"))
}

func (bh bastionHostAttributes) Timeouts() bastionhost.TimeoutsAttributes {
	return terra.ReferenceSingle[bastionhost.TimeoutsAttributes](bh.ref.Append("timeouts"))
}

type bastionHostState struct {
	CopyPasteEnabled     bool                               `json:"copy_paste_enabled"`
	DnsName              string                             `json:"dns_name"`
	FileCopyEnabled      bool                               `json:"file_copy_enabled"`
	Id                   string                             `json:"id"`
	IpConnectEnabled     bool                               `json:"ip_connect_enabled"`
	Location             string                             `json:"location"`
	Name                 string                             `json:"name"`
	ResourceGroupName    string                             `json:"resource_group_name"`
	ScaleUnits           float64                            `json:"scale_units"`
	ShareableLinkEnabled bool                               `json:"shareable_link_enabled"`
	Sku                  string                             `json:"sku"`
	Tags                 map[string]string                  `json:"tags"`
	TunnelingEnabled     bool                               `json:"tunneling_enabled"`
	IpConfiguration      []bastionhost.IpConfigurationState `json:"ip_configuration"`
	Timeouts             *bastionhost.TimeoutsState         `json:"timeouts"`
}
