// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databricksvirtualnetworkpeering "github.com/golingon/terraproviders/azurerm/3.49.0/databricksvirtualnetworkpeering"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatabricksVirtualNetworkPeering(name string, args DatabricksVirtualNetworkPeeringArgs) *DatabricksVirtualNetworkPeering {
	return &DatabricksVirtualNetworkPeering{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabricksVirtualNetworkPeering)(nil)

type DatabricksVirtualNetworkPeering struct {
	Name  string
	Args  DatabricksVirtualNetworkPeeringArgs
	state *databricksVirtualNetworkPeeringState
}

func (dvnp *DatabricksVirtualNetworkPeering) Type() string {
	return "azurerm_databricks_virtual_network_peering"
}

func (dvnp *DatabricksVirtualNetworkPeering) LocalName() string {
	return dvnp.Name
}

func (dvnp *DatabricksVirtualNetworkPeering) Configuration() interface{} {
	return dvnp.Args
}

func (dvnp *DatabricksVirtualNetworkPeering) Attributes() databricksVirtualNetworkPeeringAttributes {
	return databricksVirtualNetworkPeeringAttributes{ref: terra.ReferenceResource(dvnp)}
}

func (dvnp *DatabricksVirtualNetworkPeering) ImportState(av io.Reader) error {
	dvnp.state = &databricksVirtualNetworkPeeringState{}
	if err := json.NewDecoder(av).Decode(dvnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dvnp.Type(), dvnp.LocalName(), err)
	}
	return nil
}

func (dvnp *DatabricksVirtualNetworkPeering) State() (*databricksVirtualNetworkPeeringState, bool) {
	return dvnp.state, dvnp.state != nil
}

func (dvnp *DatabricksVirtualNetworkPeering) StateMust() *databricksVirtualNetworkPeeringState {
	if dvnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dvnp.Type(), dvnp.LocalName()))
	}
	return dvnp.state
}

func (dvnp *DatabricksVirtualNetworkPeering) DependOn() terra.Reference {
	return terra.ReferenceResource(dvnp)
}

type DatabricksVirtualNetworkPeeringArgs struct {
	// AllowForwardedTraffic: bool, optional
	AllowForwardedTraffic terra.BoolValue `hcl:"allow_forwarded_traffic,attr"`
	// AllowGatewayTransit: bool, optional
	AllowGatewayTransit terra.BoolValue `hcl:"allow_gateway_transit,attr"`
	// AllowVirtualNetworkAccess: bool, optional
	AllowVirtualNetworkAccess terra.BoolValue `hcl:"allow_virtual_network_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RemoteAddressSpacePrefixes: list of string, required
	RemoteAddressSpacePrefixes terra.ListValue[terra.StringValue] `hcl:"remote_address_space_prefixes,attr" validate:"required"`
	// RemoteVirtualNetworkId: string, required
	RemoteVirtualNetworkId terra.StringValue `hcl:"remote_virtual_network_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// UseRemoteGateways: bool, optional
	UseRemoteGateways terra.BoolValue `hcl:"use_remote_gateways,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *databricksvirtualnetworkpeering.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatabricksVirtualNetworkPeering depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databricksVirtualNetworkPeeringAttributes struct {
	ref terra.Reference
}

func (dvnp databricksVirtualNetworkPeeringAttributes) AddressSpacePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dvnp.ref.Append("address_space_prefixes"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) AllowForwardedTraffic() terra.BoolValue {
	return terra.ReferenceBool(dvnp.ref.Append("allow_forwarded_traffic"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) AllowGatewayTransit() terra.BoolValue {
	return terra.ReferenceBool(dvnp.ref.Append("allow_gateway_transit"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) AllowVirtualNetworkAccess() terra.BoolValue {
	return terra.ReferenceBool(dvnp.ref.Append("allow_virtual_network_access"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("id"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("name"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) RemoteAddressSpacePrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dvnp.ref.Append("remote_address_space_prefixes"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) RemoteVirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("remote_virtual_network_id"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("resource_group_name"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) UseRemoteGateways() terra.BoolValue {
	return terra.ReferenceBool(dvnp.ref.Append("use_remote_gateways"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("virtual_network_id"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(dvnp.ref.Append("workspace_id"))
}

func (dvnp databricksVirtualNetworkPeeringAttributes) Timeouts() databricksvirtualnetworkpeering.TimeoutsAttributes {
	return terra.ReferenceSingle[databricksvirtualnetworkpeering.TimeoutsAttributes](dvnp.ref.Append("timeouts"))
}

type databricksVirtualNetworkPeeringState struct {
	AddressSpacePrefixes       []string                                       `json:"address_space_prefixes"`
	AllowForwardedTraffic      bool                                           `json:"allow_forwarded_traffic"`
	AllowGatewayTransit        bool                                           `json:"allow_gateway_transit"`
	AllowVirtualNetworkAccess  bool                                           `json:"allow_virtual_network_access"`
	Id                         string                                         `json:"id"`
	Name                       string                                         `json:"name"`
	RemoteAddressSpacePrefixes []string                                       `json:"remote_address_space_prefixes"`
	RemoteVirtualNetworkId     string                                         `json:"remote_virtual_network_id"`
	ResourceGroupName          string                                         `json:"resource_group_name"`
	UseRemoteGateways          bool                                           `json:"use_remote_gateways"`
	VirtualNetworkId           string                                         `json:"virtual_network_id"`
	WorkspaceId                string                                         `json:"workspace_id"`
	Timeouts                   *databricksvirtualnetworkpeering.TimeoutsState `json:"timeouts"`
}
