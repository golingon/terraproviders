// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressrouteport "github.com/golingon/terraproviders/azurerm/3.49.0/expressrouteport"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRoutePort(name string, args ExpressRoutePortArgs) *ExpressRoutePort {
	return &ExpressRoutePort{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRoutePort)(nil)

type ExpressRoutePort struct {
	Name  string
	Args  ExpressRoutePortArgs
	state *expressRoutePortState
}

func (erp *ExpressRoutePort) Type() string {
	return "azurerm_express_route_port"
}

func (erp *ExpressRoutePort) LocalName() string {
	return erp.Name
}

func (erp *ExpressRoutePort) Configuration() interface{} {
	return erp.Args
}

func (erp *ExpressRoutePort) Attributes() expressRoutePortAttributes {
	return expressRoutePortAttributes{ref: terra.ReferenceResource(erp)}
}

func (erp *ExpressRoutePort) ImportState(av io.Reader) error {
	erp.state = &expressRoutePortState{}
	if err := json.NewDecoder(av).Decode(erp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erp.Type(), erp.LocalName(), err)
	}
	return nil
}

func (erp *ExpressRoutePort) State() (*expressRoutePortState, bool) {
	return erp.state, erp.state != nil
}

func (erp *ExpressRoutePort) StateMust() *expressRoutePortState {
	if erp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erp.Type(), erp.LocalName()))
	}
	return erp.state
}

func (erp *ExpressRoutePort) DependOn() terra.Reference {
	return terra.ReferenceResource(erp)
}

type ExpressRoutePortArgs struct {
	// BandwidthInGbps: number, required
	BandwidthInGbps terra.NumberValue `hcl:"bandwidth_in_gbps,attr" validate:"required"`
	// BillingType: string, optional
	BillingType terra.StringValue `hcl:"billing_type,attr"`
	// Encapsulation: string, required
	Encapsulation terra.StringValue `hcl:"encapsulation,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeeringLocation: string, required
	PeeringLocation terra.StringValue `hcl:"peering_location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *expressrouteport.Identity `hcl:"identity,block"`
	// Link1: optional
	Link1 *expressrouteport.Link1 `hcl:"link1,block"`
	// Link2: optional
	Link2 *expressrouteport.Link2 `hcl:"link2,block"`
	// Timeouts: optional
	Timeouts *expressrouteport.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRoutePort depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRoutePortAttributes struct {
	ref terra.Reference
}

func (erp expressRoutePortAttributes) BandwidthInGbps() terra.NumberValue {
	return terra.ReferenceNumber(erp.ref.Append("bandwidth_in_gbps"))
}

func (erp expressRoutePortAttributes) BillingType() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("billing_type"))
}

func (erp expressRoutePortAttributes) Encapsulation() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("encapsulation"))
}

func (erp expressRoutePortAttributes) Ethertype() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("ethertype"))
}

func (erp expressRoutePortAttributes) Guid() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("guid"))
}

func (erp expressRoutePortAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("id"))
}

func (erp expressRoutePortAttributes) Location() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("location"))
}

func (erp expressRoutePortAttributes) Mtu() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("mtu"))
}

func (erp expressRoutePortAttributes) Name() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("name"))
}

func (erp expressRoutePortAttributes) PeeringLocation() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("peering_location"))
}

func (erp expressRoutePortAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(erp.ref.Append("resource_group_name"))
}

func (erp expressRoutePortAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](erp.ref.Append("tags"))
}

func (erp expressRoutePortAttributes) Identity() terra.ListValue[expressrouteport.IdentityAttributes] {
	return terra.ReferenceList[expressrouteport.IdentityAttributes](erp.ref.Append("identity"))
}

func (erp expressRoutePortAttributes) Link1() terra.ListValue[expressrouteport.Link1Attributes] {
	return terra.ReferenceList[expressrouteport.Link1Attributes](erp.ref.Append("link1"))
}

func (erp expressRoutePortAttributes) Link2() terra.ListValue[expressrouteport.Link2Attributes] {
	return terra.ReferenceList[expressrouteport.Link2Attributes](erp.ref.Append("link2"))
}

func (erp expressRoutePortAttributes) Timeouts() expressrouteport.TimeoutsAttributes {
	return terra.ReferenceSingle[expressrouteport.TimeoutsAttributes](erp.ref.Append("timeouts"))
}

type expressRoutePortState struct {
	BandwidthInGbps   float64                          `json:"bandwidth_in_gbps"`
	BillingType       string                           `json:"billing_type"`
	Encapsulation     string                           `json:"encapsulation"`
	Ethertype         string                           `json:"ethertype"`
	Guid              string                           `json:"guid"`
	Id                string                           `json:"id"`
	Location          string                           `json:"location"`
	Mtu               string                           `json:"mtu"`
	Name              string                           `json:"name"`
	PeeringLocation   string                           `json:"peering_location"`
	ResourceGroupName string                           `json:"resource_group_name"`
	Tags              map[string]string                `json:"tags"`
	Identity          []expressrouteport.IdentityState `json:"identity"`
	Link1             []expressrouteport.Link1State    `json:"link1"`
	Link2             []expressrouteport.Link2State    `json:"link2"`
	Timeouts          *expressrouteport.TimeoutsState  `json:"timeouts"`
}
