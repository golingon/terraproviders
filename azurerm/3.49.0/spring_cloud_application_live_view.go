// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudapplicationliveview "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudapplicationliveview"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudApplicationLiveView(name string, args SpringCloudApplicationLiveViewArgs) *SpringCloudApplicationLiveView {
	return &SpringCloudApplicationLiveView{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudApplicationLiveView)(nil)

type SpringCloudApplicationLiveView struct {
	Name  string
	Args  SpringCloudApplicationLiveViewArgs
	state *springCloudApplicationLiveViewState
}

func (scalv *SpringCloudApplicationLiveView) Type() string {
	return "azurerm_spring_cloud_application_live_view"
}

func (scalv *SpringCloudApplicationLiveView) LocalName() string {
	return scalv.Name
}

func (scalv *SpringCloudApplicationLiveView) Configuration() interface{} {
	return scalv.Args
}

func (scalv *SpringCloudApplicationLiveView) Attributes() springCloudApplicationLiveViewAttributes {
	return springCloudApplicationLiveViewAttributes{ref: terra.ReferenceResource(scalv)}
}

func (scalv *SpringCloudApplicationLiveView) ImportState(av io.Reader) error {
	scalv.state = &springCloudApplicationLiveViewState{}
	if err := json.NewDecoder(av).Decode(scalv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scalv.Type(), scalv.LocalName(), err)
	}
	return nil
}

func (scalv *SpringCloudApplicationLiveView) State() (*springCloudApplicationLiveViewState, bool) {
	return scalv.state, scalv.state != nil
}

func (scalv *SpringCloudApplicationLiveView) StateMust() *springCloudApplicationLiveViewState {
	if scalv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scalv.Type(), scalv.LocalName()))
	}
	return scalv.state
}

func (scalv *SpringCloudApplicationLiveView) DependOn() terra.Reference {
	return terra.ReferenceResource(scalv)
}

type SpringCloudApplicationLiveViewArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *springcloudapplicationliveview.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudApplicationLiveView depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudApplicationLiveViewAttributes struct {
	ref terra.Reference
}

func (scalv springCloudApplicationLiveViewAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scalv.ref.Append("id"))
}

func (scalv springCloudApplicationLiveViewAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scalv.ref.Append("name"))
}

func (scalv springCloudApplicationLiveViewAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceString(scalv.ref.Append("spring_cloud_service_id"))
}

func (scalv springCloudApplicationLiveViewAttributes) Timeouts() springcloudapplicationliveview.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudapplicationliveview.TimeoutsAttributes](scalv.ref.Append("timeouts"))
}

type springCloudApplicationLiveViewState struct {
	Id                   string                                        `json:"id"`
	Name                 string                                        `json:"name"`
	SpringCloudServiceId string                                        `json:"spring_cloud_service_id"`
	Timeouts             *springcloudapplicationliveview.TimeoutsState `json:"timeouts"`
}
