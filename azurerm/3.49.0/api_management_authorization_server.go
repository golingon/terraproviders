// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementauthorizationserver "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementauthorizationserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementAuthorizationServer(name string, args ApiManagementAuthorizationServerArgs) *ApiManagementAuthorizationServer {
	return &ApiManagementAuthorizationServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementAuthorizationServer)(nil)

type ApiManagementAuthorizationServer struct {
	Name  string
	Args  ApiManagementAuthorizationServerArgs
	state *apiManagementAuthorizationServerState
}

func (amas *ApiManagementAuthorizationServer) Type() string {
	return "azurerm_api_management_authorization_server"
}

func (amas *ApiManagementAuthorizationServer) LocalName() string {
	return amas.Name
}

func (amas *ApiManagementAuthorizationServer) Configuration() interface{} {
	return amas.Args
}

func (amas *ApiManagementAuthorizationServer) Attributes() apiManagementAuthorizationServerAttributes {
	return apiManagementAuthorizationServerAttributes{ref: terra.ReferenceResource(amas)}
}

func (amas *ApiManagementAuthorizationServer) ImportState(av io.Reader) error {
	amas.state = &apiManagementAuthorizationServerState{}
	if err := json.NewDecoder(av).Decode(amas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amas.Type(), amas.LocalName(), err)
	}
	return nil
}

func (amas *ApiManagementAuthorizationServer) State() (*apiManagementAuthorizationServerState, bool) {
	return amas.state, amas.state != nil
}

func (amas *ApiManagementAuthorizationServer) StateMust() *apiManagementAuthorizationServerState {
	if amas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amas.Type(), amas.LocalName()))
	}
	return amas.state
}

func (amas *ApiManagementAuthorizationServer) DependOn() terra.Reference {
	return terra.ReferenceResource(amas)
}

type ApiManagementAuthorizationServerArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// AuthorizationEndpoint: string, required
	AuthorizationEndpoint terra.StringValue `hcl:"authorization_endpoint,attr" validate:"required"`
	// AuthorizationMethods: set of string, required
	AuthorizationMethods terra.SetValue[terra.StringValue] `hcl:"authorization_methods,attr" validate:"required"`
	// BearerTokenSendingMethods: set of string, optional
	BearerTokenSendingMethods terra.SetValue[terra.StringValue] `hcl:"bearer_token_sending_methods,attr"`
	// ClientAuthenticationMethod: set of string, optional
	ClientAuthenticationMethod terra.SetValue[terra.StringValue] `hcl:"client_authentication_method,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientRegistrationEndpoint: string, required
	ClientRegistrationEndpoint terra.StringValue `hcl:"client_registration_endpoint,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// DefaultScope: string, optional
	DefaultScope terra.StringValue `hcl:"default_scope,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// GrantTypes: set of string, required
	GrantTypes terra.SetValue[terra.StringValue] `hcl:"grant_types,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ResourceOwnerPassword: string, optional
	ResourceOwnerPassword terra.StringValue `hcl:"resource_owner_password,attr"`
	// ResourceOwnerUsername: string, optional
	ResourceOwnerUsername terra.StringValue `hcl:"resource_owner_username,attr"`
	// SupportState: bool, optional
	SupportState terra.BoolValue `hcl:"support_state,attr"`
	// TokenEndpoint: string, optional
	TokenEndpoint terra.StringValue `hcl:"token_endpoint,attr"`
	// Timeouts: optional
	Timeouts *apimanagementauthorizationserver.Timeouts `hcl:"timeouts,block"`
	// TokenBodyParameter: min=0
	TokenBodyParameter []apimanagementauthorizationserver.TokenBodyParameter `hcl:"token_body_parameter,block" validate:"min=0"`
	// DependsOn contains resources that ApiManagementAuthorizationServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementAuthorizationServerAttributes struct {
	ref terra.Reference
}

func (amas apiManagementAuthorizationServerAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("api_management_name"))
}

func (amas apiManagementAuthorizationServerAttributes) AuthorizationEndpoint() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("authorization_endpoint"))
}

func (amas apiManagementAuthorizationServerAttributes) AuthorizationMethods() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](amas.ref.Append("authorization_methods"))
}

func (amas apiManagementAuthorizationServerAttributes) BearerTokenSendingMethods() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](amas.ref.Append("bearer_token_sending_methods"))
}

func (amas apiManagementAuthorizationServerAttributes) ClientAuthenticationMethod() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](amas.ref.Append("client_authentication_method"))
}

func (amas apiManagementAuthorizationServerAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("client_id"))
}

func (amas apiManagementAuthorizationServerAttributes) ClientRegistrationEndpoint() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("client_registration_endpoint"))
}

func (amas apiManagementAuthorizationServerAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("client_secret"))
}

func (amas apiManagementAuthorizationServerAttributes) DefaultScope() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("default_scope"))
}

func (amas apiManagementAuthorizationServerAttributes) Description() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("description"))
}

func (amas apiManagementAuthorizationServerAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("display_name"))
}

func (amas apiManagementAuthorizationServerAttributes) GrantTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](amas.ref.Append("grant_types"))
}

func (amas apiManagementAuthorizationServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("id"))
}

func (amas apiManagementAuthorizationServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("name"))
}

func (amas apiManagementAuthorizationServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("resource_group_name"))
}

func (amas apiManagementAuthorizationServerAttributes) ResourceOwnerPassword() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("resource_owner_password"))
}

func (amas apiManagementAuthorizationServerAttributes) ResourceOwnerUsername() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("resource_owner_username"))
}

func (amas apiManagementAuthorizationServerAttributes) SupportState() terra.BoolValue {
	return terra.ReferenceBool(amas.ref.Append("support_state"))
}

func (amas apiManagementAuthorizationServerAttributes) TokenEndpoint() terra.StringValue {
	return terra.ReferenceString(amas.ref.Append("token_endpoint"))
}

func (amas apiManagementAuthorizationServerAttributes) Timeouts() apimanagementauthorizationserver.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementauthorizationserver.TimeoutsAttributes](amas.ref.Append("timeouts"))
}

func (amas apiManagementAuthorizationServerAttributes) TokenBodyParameter() terra.ListValue[apimanagementauthorizationserver.TokenBodyParameterAttributes] {
	return terra.ReferenceList[apimanagementauthorizationserver.TokenBodyParameterAttributes](amas.ref.Append("token_body_parameter"))
}

type apiManagementAuthorizationServerState struct {
	ApiManagementName          string                                                     `json:"api_management_name"`
	AuthorizationEndpoint      string                                                     `json:"authorization_endpoint"`
	AuthorizationMethods       []string                                                   `json:"authorization_methods"`
	BearerTokenSendingMethods  []string                                                   `json:"bearer_token_sending_methods"`
	ClientAuthenticationMethod []string                                                   `json:"client_authentication_method"`
	ClientId                   string                                                     `json:"client_id"`
	ClientRegistrationEndpoint string                                                     `json:"client_registration_endpoint"`
	ClientSecret               string                                                     `json:"client_secret"`
	DefaultScope               string                                                     `json:"default_scope"`
	Description                string                                                     `json:"description"`
	DisplayName                string                                                     `json:"display_name"`
	GrantTypes                 []string                                                   `json:"grant_types"`
	Id                         string                                                     `json:"id"`
	Name                       string                                                     `json:"name"`
	ResourceGroupName          string                                                     `json:"resource_group_name"`
	ResourceOwnerPassword      string                                                     `json:"resource_owner_password"`
	ResourceOwnerUsername      string                                                     `json:"resource_owner_username"`
	SupportState               bool                                                       `json:"support_state"`
	TokenEndpoint              string                                                     `json:"token_endpoint"`
	Timeouts                   *apimanagementauthorizationserver.TimeoutsState            `json:"timeouts"`
	TokenBodyParameter         []apimanagementauthorizationserver.TokenBodyParameterState `json:"token_body_parameter"`
}
