// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	redisenterprisecluster "github.com/golingon/terraproviders/azurerm/3.49.0/redisenterprisecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedisEnterpriseCluster(name string, args RedisEnterpriseClusterArgs) *RedisEnterpriseCluster {
	return &RedisEnterpriseCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisEnterpriseCluster)(nil)

type RedisEnterpriseCluster struct {
	Name  string
	Args  RedisEnterpriseClusterArgs
	state *redisEnterpriseClusterState
}

func (rec *RedisEnterpriseCluster) Type() string {
	return "azurerm_redis_enterprise_cluster"
}

func (rec *RedisEnterpriseCluster) LocalName() string {
	return rec.Name
}

func (rec *RedisEnterpriseCluster) Configuration() interface{} {
	return rec.Args
}

func (rec *RedisEnterpriseCluster) Attributes() redisEnterpriseClusterAttributes {
	return redisEnterpriseClusterAttributes{ref: terra.ReferenceResource(rec)}
}

func (rec *RedisEnterpriseCluster) ImportState(av io.Reader) error {
	rec.state = &redisEnterpriseClusterState{}
	if err := json.NewDecoder(av).Decode(rec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rec.Type(), rec.LocalName(), err)
	}
	return nil
}

func (rec *RedisEnterpriseCluster) State() (*redisEnterpriseClusterState, bool) {
	return rec.state, rec.state != nil
}

func (rec *RedisEnterpriseCluster) StateMust() *redisEnterpriseClusterState {
	if rec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rec.Type(), rec.LocalName()))
	}
	return rec.state
}

func (rec *RedisEnterpriseCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(rec)
}

type RedisEnterpriseClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Timeouts: optional
	Timeouts *redisenterprisecluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedisEnterpriseCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redisEnterpriseClusterAttributes struct {
	ref terra.Reference
}

func (rec redisEnterpriseClusterAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("hostname"))
}

func (rec redisEnterpriseClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("id"))
}

func (rec redisEnterpriseClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("location"))
}

func (rec redisEnterpriseClusterAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("minimum_tls_version"))
}

func (rec redisEnterpriseClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("name"))
}

func (rec redisEnterpriseClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("resource_group_name"))
}

func (rec redisEnterpriseClusterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(rec.ref.Append("sku_name"))
}

func (rec redisEnterpriseClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rec.ref.Append("tags"))
}

func (rec redisEnterpriseClusterAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rec.ref.Append("zones"))
}

func (rec redisEnterpriseClusterAttributes) Timeouts() redisenterprisecluster.TimeoutsAttributes {
	return terra.ReferenceSingle[redisenterprisecluster.TimeoutsAttributes](rec.ref.Append("timeouts"))
}

type redisEnterpriseClusterState struct {
	Hostname          string                                `json:"hostname"`
	Id                string                                `json:"id"`
	Location          string                                `json:"location"`
	MinimumTlsVersion string                                `json:"minimum_tls_version"`
	Name              string                                `json:"name"`
	ResourceGroupName string                                `json:"resource_group_name"`
	SkuName           string                                `json:"sku_name"`
	Tags              map[string]string                     `json:"tags"`
	Zones             []string                              `json:"zones"`
	Timeouts          *redisenterprisecluster.TimeoutsState `json:"timeouts"`
}
