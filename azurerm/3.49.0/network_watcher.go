// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkwatcher "github.com/golingon/terraproviders/azurerm/3.49.0/networkwatcher"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkWatcher(name string, args NetworkWatcherArgs) *NetworkWatcher {
	return &NetworkWatcher{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkWatcher)(nil)

type NetworkWatcher struct {
	Name  string
	Args  NetworkWatcherArgs
	state *networkWatcherState
}

func (nw *NetworkWatcher) Type() string {
	return "azurerm_network_watcher"
}

func (nw *NetworkWatcher) LocalName() string {
	return nw.Name
}

func (nw *NetworkWatcher) Configuration() interface{} {
	return nw.Args
}

func (nw *NetworkWatcher) Attributes() networkWatcherAttributes {
	return networkWatcherAttributes{ref: terra.ReferenceResource(nw)}
}

func (nw *NetworkWatcher) ImportState(av io.Reader) error {
	nw.state = &networkWatcherState{}
	if err := json.NewDecoder(av).Decode(nw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nw.Type(), nw.LocalName(), err)
	}
	return nil
}

func (nw *NetworkWatcher) State() (*networkWatcherState, bool) {
	return nw.state, nw.state != nil
}

func (nw *NetworkWatcher) StateMust() *networkWatcherState {
	if nw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nw.Type(), nw.LocalName()))
	}
	return nw.state
}

func (nw *NetworkWatcher) DependOn() terra.Reference {
	return terra.ReferenceResource(nw)
}

type NetworkWatcherArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *networkwatcher.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkWatcher depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkWatcherAttributes struct {
	ref terra.Reference
}

func (nw networkWatcherAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nw.ref.Append("id"))
}

func (nw networkWatcherAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nw.ref.Append("location"))
}

func (nw networkWatcherAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nw.ref.Append("name"))
}

func (nw networkWatcherAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nw.ref.Append("resource_group_name"))
}

func (nw networkWatcherAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nw.ref.Append("tags"))
}

func (nw networkWatcherAttributes) Timeouts() networkwatcher.TimeoutsAttributes {
	return terra.ReferenceSingle[networkwatcher.TimeoutsAttributes](nw.ref.Append("timeouts"))
}

type networkWatcherState struct {
	Id                string                        `json:"id"`
	Location          string                        `json:"location"`
	Name              string                        `json:"name"`
	ResourceGroupName string                        `json:"resource_group_name"`
	Tags              map[string]string             `json:"tags"`
	Timeouts          *networkwatcher.TimeoutsState `json:"timeouts"`
}
