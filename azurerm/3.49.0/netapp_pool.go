// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	netapppool "github.com/golingon/terraproviders/azurerm/3.49.0/netapppool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetappPool(name string, args NetappPoolArgs) *NetappPool {
	return &NetappPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappPool)(nil)

type NetappPool struct {
	Name  string
	Args  NetappPoolArgs
	state *netappPoolState
}

func (np *NetappPool) Type() string {
	return "azurerm_netapp_pool"
}

func (np *NetappPool) LocalName() string {
	return np.Name
}

func (np *NetappPool) Configuration() interface{} {
	return np.Args
}

func (np *NetappPool) Attributes() netappPoolAttributes {
	return netappPoolAttributes{ref: terra.ReferenceResource(np)}
}

func (np *NetappPool) ImportState(av io.Reader) error {
	np.state = &netappPoolState{}
	if err := json.NewDecoder(av).Decode(np.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", np.Type(), np.LocalName(), err)
	}
	return nil
}

func (np *NetappPool) State() (*netappPoolState, bool) {
	return np.state, np.state != nil
}

func (np *NetappPool) StateMust() *netappPoolState {
	if np.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", np.Type(), np.LocalName()))
	}
	return np.state
}

func (np *NetappPool) DependOn() terra.Reference {
	return terra.ReferenceResource(np)
}

type NetappPoolArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QosType: string, optional
	QosType terra.StringValue `hcl:"qos_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceLevel: string, required
	ServiceLevel terra.StringValue `hcl:"service_level,attr" validate:"required"`
	// SizeInTb: number, required
	SizeInTb terra.NumberValue `hcl:"size_in_tb,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *netapppool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetappPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type netappPoolAttributes struct {
	ref terra.Reference
}

func (np netappPoolAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("account_name"))
}

func (np netappPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("id"))
}

func (np netappPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("location"))
}

func (np netappPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("name"))
}

func (np netappPoolAttributes) QosType() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("qos_type"))
}

func (np netappPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("resource_group_name"))
}

func (np netappPoolAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("service_level"))
}

func (np netappPoolAttributes) SizeInTb() terra.NumberValue {
	return terra.ReferenceNumber(np.ref.Append("size_in_tb"))
}

func (np netappPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](np.ref.Append("tags"))
}

func (np netappPoolAttributes) Timeouts() netapppool.TimeoutsAttributes {
	return terra.ReferenceSingle[netapppool.TimeoutsAttributes](np.ref.Append("timeouts"))
}

type netappPoolState struct {
	AccountName       string                    `json:"account_name"`
	Id                string                    `json:"id"`
	Location          string                    `json:"location"`
	Name              string                    `json:"name"`
	QosType           string                    `json:"qos_type"`
	ResourceGroupName string                    `json:"resource_group_name"`
	ServiceLevel      string                    `json:"service_level"`
	SizeInTb          float64                   `json:"size_in_tb"`
	Tags              map[string]string         `json:"tags"`
	Timeouts          *netapppool.TimeoutsState `json:"timeouts"`
}
