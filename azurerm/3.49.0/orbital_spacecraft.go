// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	orbitalspacecraft "github.com/golingon/terraproviders/azurerm/3.49.0/orbitalspacecraft"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrbitalSpacecraft(name string, args OrbitalSpacecraftArgs) *OrbitalSpacecraft {
	return &OrbitalSpacecraft{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrbitalSpacecraft)(nil)

type OrbitalSpacecraft struct {
	Name  string
	Args  OrbitalSpacecraftArgs
	state *orbitalSpacecraftState
}

func (os *OrbitalSpacecraft) Type() string {
	return "azurerm_orbital_spacecraft"
}

func (os *OrbitalSpacecraft) LocalName() string {
	return os.Name
}

func (os *OrbitalSpacecraft) Configuration() interface{} {
	return os.Args
}

func (os *OrbitalSpacecraft) Attributes() orbitalSpacecraftAttributes {
	return orbitalSpacecraftAttributes{ref: terra.ReferenceResource(os)}
}

func (os *OrbitalSpacecraft) ImportState(av io.Reader) error {
	os.state = &orbitalSpacecraftState{}
	if err := json.NewDecoder(av).Decode(os.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", os.Type(), os.LocalName(), err)
	}
	return nil
}

func (os *OrbitalSpacecraft) State() (*orbitalSpacecraftState, bool) {
	return os.state, os.state != nil
}

func (os *OrbitalSpacecraft) StateMust() *orbitalSpacecraftState {
	if os.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", os.Type(), os.LocalName()))
	}
	return os.state
}

func (os *OrbitalSpacecraft) DependOn() terra.Reference {
	return terra.ReferenceResource(os)
}

type OrbitalSpacecraftArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NoradId: string, required
	NoradId terra.StringValue `hcl:"norad_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TitleLine: string, required
	TitleLine terra.StringValue `hcl:"title_line,attr" validate:"required"`
	// TwoLineElements: list of string, required
	TwoLineElements terra.ListValue[terra.StringValue] `hcl:"two_line_elements,attr" validate:"required"`
	// Links: min=1
	Links []orbitalspacecraft.Links `hcl:"links,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *orbitalspacecraft.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OrbitalSpacecraft depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type orbitalSpacecraftAttributes struct {
	ref terra.Reference
}

func (os orbitalSpacecraftAttributes) Id() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("id"))
}

func (os orbitalSpacecraftAttributes) Location() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("location"))
}

func (os orbitalSpacecraftAttributes) Name() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("name"))
}

func (os orbitalSpacecraftAttributes) NoradId() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("norad_id"))
}

func (os orbitalSpacecraftAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("resource_group_name"))
}

func (os orbitalSpacecraftAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](os.ref.Append("tags"))
}

func (os orbitalSpacecraftAttributes) TitleLine() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("title_line"))
}

func (os orbitalSpacecraftAttributes) TwoLineElements() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](os.ref.Append("two_line_elements"))
}

func (os orbitalSpacecraftAttributes) Links() terra.ListValue[orbitalspacecraft.LinksAttributes] {
	return terra.ReferenceList[orbitalspacecraft.LinksAttributes](os.ref.Append("links"))
}

func (os orbitalSpacecraftAttributes) Timeouts() orbitalspacecraft.TimeoutsAttributes {
	return terra.ReferenceSingle[orbitalspacecraft.TimeoutsAttributes](os.ref.Append("timeouts"))
}

type orbitalSpacecraftState struct {
	Id                string                           `json:"id"`
	Location          string                           `json:"location"`
	Name              string                           `json:"name"`
	NoradId           string                           `json:"norad_id"`
	ResourceGroupName string                           `json:"resource_group_name"`
	Tags              map[string]string                `json:"tags"`
	TitleLine         string                           `json:"title_line"`
	TwoLineElements   []string                         `json:"two_line_elements"`
	Links             []orbitalspacecraft.LinksState   `json:"links"`
	Timeouts          *orbitalspacecraft.TimeoutsState `json:"timeouts"`
}
