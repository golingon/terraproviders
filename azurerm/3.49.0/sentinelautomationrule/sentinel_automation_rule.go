// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sentinelautomationrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ActionIncident struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// ClassificationComment: string, optional
	ClassificationComment terra.StringValue `hcl:"classification_comment,attr"`
	// Labels: list of string, optional
	Labels terra.ListValue[terra.StringValue] `hcl:"labels,attr"`
	// Order: number, required
	Order terra.NumberValue `hcl:"order,attr" validate:"required"`
	// OwnerId: string, optional
	OwnerId terra.StringValue `hcl:"owner_id,attr"`
	// Severity: string, optional
	Severity terra.StringValue `hcl:"severity,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type ActionPlaybook struct {
	// LogicAppId: string, required
	LogicAppId terra.StringValue `hcl:"logic_app_id,attr" validate:"required"`
	// Order: number, required
	Order terra.NumberValue `hcl:"order,attr" validate:"required"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
}

type Condition struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Property: string, required
	Property terra.StringValue `hcl:"property,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionIncidentAttributes struct {
	ref terra.Reference
}

func (ai ActionIncidentAttributes) InternalRef() terra.Reference {
	return ai.ref
}

func (ai ActionIncidentAttributes) InternalWithRef(ref terra.Reference) ActionIncidentAttributes {
	return ActionIncidentAttributes{ref: ref}
}

func (ai ActionIncidentAttributes) InternalTokens() hclwrite.Tokens {
	return ai.ref.InternalTokens()
}

func (ai ActionIncidentAttributes) Classification() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("classification"))
}

func (ai ActionIncidentAttributes) ClassificationComment() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("classification_comment"))
}

func (ai ActionIncidentAttributes) Labels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ai.ref.Append("labels"))
}

func (ai ActionIncidentAttributes) Order() terra.NumberValue {
	return terra.ReferenceNumber(ai.ref.Append("order"))
}

func (ai ActionIncidentAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("owner_id"))
}

func (ai ActionIncidentAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("severity"))
}

func (ai ActionIncidentAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("status"))
}

type ActionPlaybookAttributes struct {
	ref terra.Reference
}

func (ap ActionPlaybookAttributes) InternalRef() terra.Reference {
	return ap.ref
}

func (ap ActionPlaybookAttributes) InternalWithRef(ref terra.Reference) ActionPlaybookAttributes {
	return ActionPlaybookAttributes{ref: ref}
}

func (ap ActionPlaybookAttributes) InternalTokens() hclwrite.Tokens {
	return ap.ref.InternalTokens()
}

func (ap ActionPlaybookAttributes) LogicAppId() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("logic_app_id"))
}

func (ap ActionPlaybookAttributes) Order() terra.NumberValue {
	return terra.ReferenceNumber(ap.ref.Append("order"))
}

func (ap ActionPlaybookAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("tenant_id"))
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("operator"))
}

func (c ConditionAttributes) Property() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("property"))
}

func (c ConditionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](c.ref.Append("values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ActionIncidentState struct {
	Classification        string   `json:"classification"`
	ClassificationComment string   `json:"classification_comment"`
	Labels                []string `json:"labels"`
	Order                 float64  `json:"order"`
	OwnerId               string   `json:"owner_id"`
	Severity              string   `json:"severity"`
	Status                string   `json:"status"`
}

type ActionPlaybookState struct {
	LogicAppId string  `json:"logic_app_id"`
	Order      float64 `json:"order"`
	TenantId   string  `json:"tenant_id"`
}

type ConditionState struct {
	Operator string   `json:"operator"`
	Property string   `json:"property"`
	Values   []string `json:"values"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
