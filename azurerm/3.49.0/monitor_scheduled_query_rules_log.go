// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitorscheduledqueryruleslog "github.com/golingon/terraproviders/azurerm/3.49.0/monitorscheduledqueryruleslog"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorScheduledQueryRulesLog(name string, args MonitorScheduledQueryRulesLogArgs) *MonitorScheduledQueryRulesLog {
	return &MonitorScheduledQueryRulesLog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorScheduledQueryRulesLog)(nil)

type MonitorScheduledQueryRulesLog struct {
	Name  string
	Args  MonitorScheduledQueryRulesLogArgs
	state *monitorScheduledQueryRulesLogState
}

func (msqrl *MonitorScheduledQueryRulesLog) Type() string {
	return "azurerm_monitor_scheduled_query_rules_log"
}

func (msqrl *MonitorScheduledQueryRulesLog) LocalName() string {
	return msqrl.Name
}

func (msqrl *MonitorScheduledQueryRulesLog) Configuration() interface{} {
	return msqrl.Args
}

func (msqrl *MonitorScheduledQueryRulesLog) Attributes() monitorScheduledQueryRulesLogAttributes {
	return monitorScheduledQueryRulesLogAttributes{ref: terra.ReferenceResource(msqrl)}
}

func (msqrl *MonitorScheduledQueryRulesLog) ImportState(av io.Reader) error {
	msqrl.state = &monitorScheduledQueryRulesLogState{}
	if err := json.NewDecoder(av).Decode(msqrl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msqrl.Type(), msqrl.LocalName(), err)
	}
	return nil
}

func (msqrl *MonitorScheduledQueryRulesLog) State() (*monitorScheduledQueryRulesLogState, bool) {
	return msqrl.state, msqrl.state != nil
}

func (msqrl *MonitorScheduledQueryRulesLog) StateMust() *monitorScheduledQueryRulesLogState {
	if msqrl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msqrl.Type(), msqrl.LocalName()))
	}
	return msqrl.state
}

func (msqrl *MonitorScheduledQueryRulesLog) DependOn() terra.Reference {
	return terra.ReferenceResource(msqrl)
}

type MonitorScheduledQueryRulesLogArgs struct {
	// AuthorizedResourceIds: set of string, optional
	AuthorizedResourceIds terra.SetValue[terra.StringValue] `hcl:"authorized_resource_ids,attr"`
	// DataSourceId: string, required
	DataSourceId terra.StringValue `hcl:"data_source_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Criteria: required
	Criteria *monitorscheduledqueryruleslog.Criteria `hcl:"criteria,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitorscheduledqueryruleslog.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorScheduledQueryRulesLog depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorScheduledQueryRulesLogAttributes struct {
	ref terra.Reference
}

func (msqrl monitorScheduledQueryRulesLogAttributes) AuthorizedResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](msqrl.ref.Append("authorized_resource_ids"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) DataSourceId() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("data_source_id"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Description() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("description"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(msqrl.ref.Append("enabled"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("id"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Location() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("location"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("name"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(msqrl.ref.Append("resource_group_name"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msqrl.ref.Append("tags"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Criteria() terra.ListValue[monitorscheduledqueryruleslog.CriteriaAttributes] {
	return terra.ReferenceList[monitorscheduledqueryruleslog.CriteriaAttributes](msqrl.ref.Append("criteria"))
}

func (msqrl monitorScheduledQueryRulesLogAttributes) Timeouts() monitorscheduledqueryruleslog.TimeoutsAttributes {
	return terra.ReferenceSingle[monitorscheduledqueryruleslog.TimeoutsAttributes](msqrl.ref.Append("timeouts"))
}

type monitorScheduledQueryRulesLogState struct {
	AuthorizedResourceIds []string                                      `json:"authorized_resource_ids"`
	DataSourceId          string                                        `json:"data_source_id"`
	Description           string                                        `json:"description"`
	Enabled               bool                                          `json:"enabled"`
	Id                    string                                        `json:"id"`
	Location              string                                        `json:"location"`
	Name                  string                                        `json:"name"`
	ResourceGroupName     string                                        `json:"resource_group_name"`
	Tags                  map[string]string                             `json:"tags"`
	Criteria              []monitorscheduledqueryruleslog.CriteriaState `json:"criteria"`
	Timeouts              *monitorscheduledqueryruleslog.TimeoutsState  `json:"timeouts"`
}
