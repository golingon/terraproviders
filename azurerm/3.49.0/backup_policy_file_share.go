// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	backuppolicyfileshare "github.com/golingon/terraproviders/azurerm/3.49.0/backuppolicyfileshare"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupPolicyFileShare(name string, args BackupPolicyFileShareArgs) *BackupPolicyFileShare {
	return &BackupPolicyFileShare{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupPolicyFileShare)(nil)

type BackupPolicyFileShare struct {
	Name  string
	Args  BackupPolicyFileShareArgs
	state *backupPolicyFileShareState
}

func (bpfs *BackupPolicyFileShare) Type() string {
	return "azurerm_backup_policy_file_share"
}

func (bpfs *BackupPolicyFileShare) LocalName() string {
	return bpfs.Name
}

func (bpfs *BackupPolicyFileShare) Configuration() interface{} {
	return bpfs.Args
}

func (bpfs *BackupPolicyFileShare) Attributes() backupPolicyFileShareAttributes {
	return backupPolicyFileShareAttributes{ref: terra.ReferenceResource(bpfs)}
}

func (bpfs *BackupPolicyFileShare) ImportState(av io.Reader) error {
	bpfs.state = &backupPolicyFileShareState{}
	if err := json.NewDecoder(av).Decode(bpfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bpfs.Type(), bpfs.LocalName(), err)
	}
	return nil
}

func (bpfs *BackupPolicyFileShare) State() (*backupPolicyFileShareState, bool) {
	return bpfs.state, bpfs.state != nil
}

func (bpfs *BackupPolicyFileShare) StateMust() *backupPolicyFileShareState {
	if bpfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bpfs.Type(), bpfs.LocalName()))
	}
	return bpfs.state
}

func (bpfs *BackupPolicyFileShare) DependOn() terra.Reference {
	return terra.ReferenceResource(bpfs)
}

type BackupPolicyFileShareArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// Backup: required
	Backup *backuppolicyfileshare.Backup `hcl:"backup,block" validate:"required"`
	// RetentionDaily: required
	RetentionDaily *backuppolicyfileshare.RetentionDaily `hcl:"retention_daily,block" validate:"required"`
	// RetentionMonthly: optional
	RetentionMonthly *backuppolicyfileshare.RetentionMonthly `hcl:"retention_monthly,block"`
	// RetentionWeekly: optional
	RetentionWeekly *backuppolicyfileshare.RetentionWeekly `hcl:"retention_weekly,block"`
	// RetentionYearly: optional
	RetentionYearly *backuppolicyfileshare.RetentionYearly `hcl:"retention_yearly,block"`
	// Timeouts: optional
	Timeouts *backuppolicyfileshare.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BackupPolicyFileShare depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupPolicyFileShareAttributes struct {
	ref terra.Reference
}

func (bpfs backupPolicyFileShareAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("id"))
}

func (bpfs backupPolicyFileShareAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("name"))
}

func (bpfs backupPolicyFileShareAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("recovery_vault_name"))
}

func (bpfs backupPolicyFileShareAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("resource_group_name"))
}

func (bpfs backupPolicyFileShareAttributes) Timezone() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("timezone"))
}

func (bpfs backupPolicyFileShareAttributes) Backup() terra.ListValue[backuppolicyfileshare.BackupAttributes] {
	return terra.ReferenceList[backuppolicyfileshare.BackupAttributes](bpfs.ref.Append("backup"))
}

func (bpfs backupPolicyFileShareAttributes) RetentionDaily() terra.ListValue[backuppolicyfileshare.RetentionDailyAttributes] {
	return terra.ReferenceList[backuppolicyfileshare.RetentionDailyAttributes](bpfs.ref.Append("retention_daily"))
}

func (bpfs backupPolicyFileShareAttributes) RetentionMonthly() terra.ListValue[backuppolicyfileshare.RetentionMonthlyAttributes] {
	return terra.ReferenceList[backuppolicyfileshare.RetentionMonthlyAttributes](bpfs.ref.Append("retention_monthly"))
}

func (bpfs backupPolicyFileShareAttributes) RetentionWeekly() terra.ListValue[backuppolicyfileshare.RetentionWeeklyAttributes] {
	return terra.ReferenceList[backuppolicyfileshare.RetentionWeeklyAttributes](bpfs.ref.Append("retention_weekly"))
}

func (bpfs backupPolicyFileShareAttributes) RetentionYearly() terra.ListValue[backuppolicyfileshare.RetentionYearlyAttributes] {
	return terra.ReferenceList[backuppolicyfileshare.RetentionYearlyAttributes](bpfs.ref.Append("retention_yearly"))
}

func (bpfs backupPolicyFileShareAttributes) Timeouts() backuppolicyfileshare.TimeoutsAttributes {
	return terra.ReferenceSingle[backuppolicyfileshare.TimeoutsAttributes](bpfs.ref.Append("timeouts"))
}

type backupPolicyFileShareState struct {
	Id                string                                        `json:"id"`
	Name              string                                        `json:"name"`
	RecoveryVaultName string                                        `json:"recovery_vault_name"`
	ResourceGroupName string                                        `json:"resource_group_name"`
	Timezone          string                                        `json:"timezone"`
	Backup            []backuppolicyfileshare.BackupState           `json:"backup"`
	RetentionDaily    []backuppolicyfileshare.RetentionDailyState   `json:"retention_daily"`
	RetentionMonthly  []backuppolicyfileshare.RetentionMonthlyState `json:"retention_monthly"`
	RetentionWeekly   []backuppolicyfileshare.RetentionWeeklyState  `json:"retention_weekly"`
	RetentionYearly   []backuppolicyfileshare.RetentionYearlyState  `json:"retention_yearly"`
	Timeouts          *backuppolicyfileshare.TimeoutsState          `json:"timeouts"`
}
