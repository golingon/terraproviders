// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitorsmartdetectoralertrule "github.com/golingon/terraproviders/azurerm/3.49.0/monitorsmartdetectoralertrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorSmartDetectorAlertRule(name string, args MonitorSmartDetectorAlertRuleArgs) *MonitorSmartDetectorAlertRule {
	return &MonitorSmartDetectorAlertRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorSmartDetectorAlertRule)(nil)

type MonitorSmartDetectorAlertRule struct {
	Name  string
	Args  MonitorSmartDetectorAlertRuleArgs
	state *monitorSmartDetectorAlertRuleState
}

func (msdar *MonitorSmartDetectorAlertRule) Type() string {
	return "azurerm_monitor_smart_detector_alert_rule"
}

func (msdar *MonitorSmartDetectorAlertRule) LocalName() string {
	return msdar.Name
}

func (msdar *MonitorSmartDetectorAlertRule) Configuration() interface{} {
	return msdar.Args
}

func (msdar *MonitorSmartDetectorAlertRule) Attributes() monitorSmartDetectorAlertRuleAttributes {
	return monitorSmartDetectorAlertRuleAttributes{ref: terra.ReferenceResource(msdar)}
}

func (msdar *MonitorSmartDetectorAlertRule) ImportState(av io.Reader) error {
	msdar.state = &monitorSmartDetectorAlertRuleState{}
	if err := json.NewDecoder(av).Decode(msdar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msdar.Type(), msdar.LocalName(), err)
	}
	return nil
}

func (msdar *MonitorSmartDetectorAlertRule) State() (*monitorSmartDetectorAlertRuleState, bool) {
	return msdar.state, msdar.state != nil
}

func (msdar *MonitorSmartDetectorAlertRule) StateMust() *monitorSmartDetectorAlertRuleState {
	if msdar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msdar.Type(), msdar.LocalName()))
	}
	return msdar.state
}

func (msdar *MonitorSmartDetectorAlertRule) DependOn() terra.Reference {
	return terra.ReferenceResource(msdar)
}

type MonitorSmartDetectorAlertRuleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DetectorType: string, required
	DetectorType terra.StringValue `hcl:"detector_type,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScopeResourceIds: set of string, required
	ScopeResourceIds terra.SetValue[terra.StringValue] `hcl:"scope_resource_ids,attr" validate:"required"`
	// Severity: string, required
	Severity terra.StringValue `hcl:"severity,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ThrottlingDuration: string, optional
	ThrottlingDuration terra.StringValue `hcl:"throttling_duration,attr"`
	// ActionGroup: required
	ActionGroup *monitorsmartdetectoralertrule.ActionGroup `hcl:"action_group,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitorsmartdetectoralertrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorSmartDetectorAlertRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorSmartDetectorAlertRuleAttributes struct {
	ref terra.Reference
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("description"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) DetectorType() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("detector_type"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(msdar.ref.Append("enabled"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("frequency"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("id"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("name"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("resource_group_name"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) ScopeResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](msdar.ref.Append("scope_resource_ids"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("severity"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msdar.ref.Append("tags"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) ThrottlingDuration() terra.StringValue {
	return terra.ReferenceString(msdar.ref.Append("throttling_duration"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) ActionGroup() terra.ListValue[monitorsmartdetectoralertrule.ActionGroupAttributes] {
	return terra.ReferenceList[monitorsmartdetectoralertrule.ActionGroupAttributes](msdar.ref.Append("action_group"))
}

func (msdar monitorSmartDetectorAlertRuleAttributes) Timeouts() monitorsmartdetectoralertrule.TimeoutsAttributes {
	return terra.ReferenceSingle[monitorsmartdetectoralertrule.TimeoutsAttributes](msdar.ref.Append("timeouts"))
}

type monitorSmartDetectorAlertRuleState struct {
	Description        string                                           `json:"description"`
	DetectorType       string                                           `json:"detector_type"`
	Enabled            bool                                             `json:"enabled"`
	Frequency          string                                           `json:"frequency"`
	Id                 string                                           `json:"id"`
	Name               string                                           `json:"name"`
	ResourceGroupName  string                                           `json:"resource_group_name"`
	ScopeResourceIds   []string                                         `json:"scope_resource_ids"`
	Severity           string                                           `json:"severity"`
	Tags               map[string]string                                `json:"tags"`
	ThrottlingDuration string                                           `json:"throttling_duration"`
	ActionGroup        []monitorsmartdetectoralertrule.ActionGroupState `json:"action_group"`
	Timeouts           *monitorsmartdetectoralertrule.TimeoutsState     `json:"timeouts"`
}
