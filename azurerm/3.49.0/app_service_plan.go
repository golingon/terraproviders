// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appserviceplan "github.com/golingon/terraproviders/azurerm/3.49.0/appserviceplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServicePlan(name string, args AppServicePlanArgs) *AppServicePlan {
	return &AppServicePlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServicePlan)(nil)

type AppServicePlan struct {
	Name  string
	Args  AppServicePlanArgs
	state *appServicePlanState
}

func (asp *AppServicePlan) Type() string {
	return "azurerm_app_service_plan"
}

func (asp *AppServicePlan) LocalName() string {
	return asp.Name
}

func (asp *AppServicePlan) Configuration() interface{} {
	return asp.Args
}

func (asp *AppServicePlan) Attributes() appServicePlanAttributes {
	return appServicePlanAttributes{ref: terra.ReferenceResource(asp)}
}

func (asp *AppServicePlan) ImportState(av io.Reader) error {
	asp.state = &appServicePlanState{}
	if err := json.NewDecoder(av).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

func (asp *AppServicePlan) State() (*appServicePlanState, bool) {
	return asp.state, asp.state != nil
}

func (asp *AppServicePlan) StateMust() *appServicePlanState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

func (asp *AppServicePlan) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

type AppServicePlanArgs struct {
	// AppServiceEnvironmentId: string, optional
	AppServiceEnvironmentId terra.StringValue `hcl:"app_service_environment_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsXenon: bool, optional
	IsXenon terra.BoolValue `hcl:"is_xenon,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumElasticWorkerCount: number, optional
	MaximumElasticWorkerCount terra.NumberValue `hcl:"maximum_elastic_worker_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PerSiteScaling: bool, optional
	PerSiteScaling terra.BoolValue `hcl:"per_site_scaling,attr"`
	// Reserved: bool, optional
	Reserved terra.BoolValue `hcl:"reserved,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// Sku: required
	Sku *appserviceplan.Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *appserviceplan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServicePlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServicePlanAttributes struct {
	ref terra.Reference
}

func (asp appServicePlanAttributes) AppServiceEnvironmentId() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("app_service_environment_id"))
}

func (asp appServicePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("id"))
}

func (asp appServicePlanAttributes) IsXenon() terra.BoolValue {
	return terra.ReferenceBool(asp.ref.Append("is_xenon"))
}

func (asp appServicePlanAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("kind"))
}

func (asp appServicePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("location"))
}

func (asp appServicePlanAttributes) MaximumElasticWorkerCount() terra.NumberValue {
	return terra.ReferenceNumber(asp.ref.Append("maximum_elastic_worker_count"))
}

func (asp appServicePlanAttributes) MaximumNumberOfWorkers() terra.NumberValue {
	return terra.ReferenceNumber(asp.ref.Append("maximum_number_of_workers"))
}

func (asp appServicePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("name"))
}

func (asp appServicePlanAttributes) PerSiteScaling() terra.BoolValue {
	return terra.ReferenceBool(asp.ref.Append("per_site_scaling"))
}

func (asp appServicePlanAttributes) Reserved() terra.BoolValue {
	return terra.ReferenceBool(asp.ref.Append("reserved"))
}

func (asp appServicePlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("resource_group_name"))
}

func (asp appServicePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](asp.ref.Append("tags"))
}

func (asp appServicePlanAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceBool(asp.ref.Append("zone_redundant"))
}

func (asp appServicePlanAttributes) Sku() terra.ListValue[appserviceplan.SkuAttributes] {
	return terra.ReferenceList[appserviceplan.SkuAttributes](asp.ref.Append("sku"))
}

func (asp appServicePlanAttributes) Timeouts() appserviceplan.TimeoutsAttributes {
	return terra.ReferenceSingle[appserviceplan.TimeoutsAttributes](asp.ref.Append("timeouts"))
}

type appServicePlanState struct {
	AppServiceEnvironmentId   string                        `json:"app_service_environment_id"`
	Id                        string                        `json:"id"`
	IsXenon                   bool                          `json:"is_xenon"`
	Kind                      string                        `json:"kind"`
	Location                  string                        `json:"location"`
	MaximumElasticWorkerCount float64                       `json:"maximum_elastic_worker_count"`
	MaximumNumberOfWorkers    float64                       `json:"maximum_number_of_workers"`
	Name                      string                        `json:"name"`
	PerSiteScaling            bool                          `json:"per_site_scaling"`
	Reserved                  bool                          `json:"reserved"`
	ResourceGroupName         string                        `json:"resource_group_name"`
	Tags                      map[string]string             `json:"tags"`
	ZoneRedundant             bool                          `json:"zone_redundant"`
	Sku                       []appserviceplan.SkuState     `json:"sku"`
	Timeouts                  *appserviceplan.TimeoutsState `json:"timeouts"`
}
