// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storageobjectreplication "github.com/golingon/terraproviders/azurerm/3.49.0/storageobjectreplication"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageObjectReplication(name string, args StorageObjectReplicationArgs) *StorageObjectReplication {
	return &StorageObjectReplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageObjectReplication)(nil)

type StorageObjectReplication struct {
	Name  string
	Args  StorageObjectReplicationArgs
	state *storageObjectReplicationState
}

func (sor *StorageObjectReplication) Type() string {
	return "azurerm_storage_object_replication"
}

func (sor *StorageObjectReplication) LocalName() string {
	return sor.Name
}

func (sor *StorageObjectReplication) Configuration() interface{} {
	return sor.Args
}

func (sor *StorageObjectReplication) Attributes() storageObjectReplicationAttributes {
	return storageObjectReplicationAttributes{ref: terra.ReferenceResource(sor)}
}

func (sor *StorageObjectReplication) ImportState(av io.Reader) error {
	sor.state = &storageObjectReplicationState{}
	if err := json.NewDecoder(av).Decode(sor.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sor.Type(), sor.LocalName(), err)
	}
	return nil
}

func (sor *StorageObjectReplication) State() (*storageObjectReplicationState, bool) {
	return sor.state, sor.state != nil
}

func (sor *StorageObjectReplication) StateMust() *storageObjectReplicationState {
	if sor.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sor.Type(), sor.LocalName()))
	}
	return sor.state
}

func (sor *StorageObjectReplication) DependOn() terra.Reference {
	return terra.ReferenceResource(sor)
}

type StorageObjectReplicationArgs struct {
	// DestinationStorageAccountId: string, required
	DestinationStorageAccountId terra.StringValue `hcl:"destination_storage_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SourceStorageAccountId: string, required
	SourceStorageAccountId terra.StringValue `hcl:"source_storage_account_id,attr" validate:"required"`
	// Rules: min=1
	Rules []storageobjectreplication.Rules `hcl:"rules,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *storageobjectreplication.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageObjectReplication depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageObjectReplicationAttributes struct {
	ref terra.Reference
}

func (sor storageObjectReplicationAttributes) DestinationObjectReplicationId() terra.StringValue {
	return terra.ReferenceString(sor.ref.Append("destination_object_replication_id"))
}

func (sor storageObjectReplicationAttributes) DestinationStorageAccountId() terra.StringValue {
	return terra.ReferenceString(sor.ref.Append("destination_storage_account_id"))
}

func (sor storageObjectReplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sor.ref.Append("id"))
}

func (sor storageObjectReplicationAttributes) SourceObjectReplicationId() terra.StringValue {
	return terra.ReferenceString(sor.ref.Append("source_object_replication_id"))
}

func (sor storageObjectReplicationAttributes) SourceStorageAccountId() terra.StringValue {
	return terra.ReferenceString(sor.ref.Append("source_storage_account_id"))
}

func (sor storageObjectReplicationAttributes) Rules() terra.SetValue[storageobjectreplication.RulesAttributes] {
	return terra.ReferenceSet[storageobjectreplication.RulesAttributes](sor.ref.Append("rules"))
}

func (sor storageObjectReplicationAttributes) Timeouts() storageobjectreplication.TimeoutsAttributes {
	return terra.ReferenceSingle[storageobjectreplication.TimeoutsAttributes](sor.ref.Append("timeouts"))
}

type storageObjectReplicationState struct {
	DestinationObjectReplicationId string                                  `json:"destination_object_replication_id"`
	DestinationStorageAccountId    string                                  `json:"destination_storage_account_id"`
	Id                             string                                  `json:"id"`
	SourceObjectReplicationId      string                                  `json:"source_object_replication_id"`
	SourceStorageAccountId         string                                  `json:"source_storage_account_id"`
	Rules                          []storageobjectreplication.RulesState   `json:"rules"`
	Timeouts                       *storageobjectreplication.TimeoutsState `json:"timeouts"`
}
