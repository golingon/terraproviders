// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationconnectionserviceprincipal "github.com/golingon/terraproviders/azurerm/3.49.0/automationconnectionserviceprincipal"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationConnectionServicePrincipal(name string, args AutomationConnectionServicePrincipalArgs) *AutomationConnectionServicePrincipal {
	return &AutomationConnectionServicePrincipal{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationConnectionServicePrincipal)(nil)

type AutomationConnectionServicePrincipal struct {
	Name  string
	Args  AutomationConnectionServicePrincipalArgs
	state *automationConnectionServicePrincipalState
}

func (acsp *AutomationConnectionServicePrincipal) Type() string {
	return "azurerm_automation_connection_service_principal"
}

func (acsp *AutomationConnectionServicePrincipal) LocalName() string {
	return acsp.Name
}

func (acsp *AutomationConnectionServicePrincipal) Configuration() interface{} {
	return acsp.Args
}

func (acsp *AutomationConnectionServicePrincipal) Attributes() automationConnectionServicePrincipalAttributes {
	return automationConnectionServicePrincipalAttributes{ref: terra.ReferenceResource(acsp)}
}

func (acsp *AutomationConnectionServicePrincipal) ImportState(av io.Reader) error {
	acsp.state = &automationConnectionServicePrincipalState{}
	if err := json.NewDecoder(av).Decode(acsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsp.Type(), acsp.LocalName(), err)
	}
	return nil
}

func (acsp *AutomationConnectionServicePrincipal) State() (*automationConnectionServicePrincipalState, bool) {
	return acsp.state, acsp.state != nil
}

func (acsp *AutomationConnectionServicePrincipal) StateMust() *automationConnectionServicePrincipalState {
	if acsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsp.Type(), acsp.LocalName()))
	}
	return acsp.state
}

func (acsp *AutomationConnectionServicePrincipal) DependOn() terra.Reference {
	return terra.ReferenceResource(acsp)
}

type AutomationConnectionServicePrincipalArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// CertificateThumbprint: string, required
	CertificateThumbprint terra.StringValue `hcl:"certificate_thumbprint,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *automationconnectionserviceprincipal.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationConnectionServicePrincipal depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationConnectionServicePrincipalAttributes struct {
	ref terra.Reference
}

func (acsp automationConnectionServicePrincipalAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("application_id"))
}

func (acsp automationConnectionServicePrincipalAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("automation_account_name"))
}

func (acsp automationConnectionServicePrincipalAttributes) CertificateThumbprint() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("certificate_thumbprint"))
}

func (acsp automationConnectionServicePrincipalAttributes) Description() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("description"))
}

func (acsp automationConnectionServicePrincipalAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("id"))
}

func (acsp automationConnectionServicePrincipalAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("name"))
}

func (acsp automationConnectionServicePrincipalAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("resource_group_name"))
}

func (acsp automationConnectionServicePrincipalAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("subscription_id"))
}

func (acsp automationConnectionServicePrincipalAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("tenant_id"))
}

func (acsp automationConnectionServicePrincipalAttributes) Timeouts() automationconnectionserviceprincipal.TimeoutsAttributes {
	return terra.ReferenceSingle[automationconnectionserviceprincipal.TimeoutsAttributes](acsp.ref.Append("timeouts"))
}

type automationConnectionServicePrincipalState struct {
	ApplicationId         string                                              `json:"application_id"`
	AutomationAccountName string                                              `json:"automation_account_name"`
	CertificateThumbprint string                                              `json:"certificate_thumbprint"`
	Description           string                                              `json:"description"`
	Id                    string                                              `json:"id"`
	Name                  string                                              `json:"name"`
	ResourceGroupName     string                                              `json:"resource_group_name"`
	SubscriptionId        string                                              `json:"subscription_id"`
	TenantId              string                                              `json:"tenant_id"`
	Timeouts              *automationconnectionserviceprincipal.TimeoutsState `json:"timeouts"`
}
