// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	publicipprefix "github.com/golingon/terraproviders/azurerm/3.49.0/publicipprefix"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPublicIpPrefix(name string, args PublicIpPrefixArgs) *PublicIpPrefix {
	return &PublicIpPrefix{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PublicIpPrefix)(nil)

type PublicIpPrefix struct {
	Name  string
	Args  PublicIpPrefixArgs
	state *publicIpPrefixState
}

func (pip *PublicIpPrefix) Type() string {
	return "azurerm_public_ip_prefix"
}

func (pip *PublicIpPrefix) LocalName() string {
	return pip.Name
}

func (pip *PublicIpPrefix) Configuration() interface{} {
	return pip.Args
}

func (pip *PublicIpPrefix) Attributes() publicIpPrefixAttributes {
	return publicIpPrefixAttributes{ref: terra.ReferenceResource(pip)}
}

func (pip *PublicIpPrefix) ImportState(av io.Reader) error {
	pip.state = &publicIpPrefixState{}
	if err := json.NewDecoder(av).Decode(pip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pip.Type(), pip.LocalName(), err)
	}
	return nil
}

func (pip *PublicIpPrefix) State() (*publicIpPrefixState, bool) {
	return pip.state, pip.state != nil
}

func (pip *PublicIpPrefix) StateMust() *publicIpPrefixState {
	if pip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pip.Type(), pip.LocalName()))
	}
	return pip.state
}

func (pip *PublicIpPrefix) DependOn() terra.Reference {
	return terra.ReferenceResource(pip)
}

type PublicIpPrefixArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpVersion: string, optional
	IpVersion terra.StringValue `hcl:"ip_version,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrefixLength: number, optional
	PrefixLength terra.NumberValue `hcl:"prefix_length,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Timeouts: optional
	Timeouts *publicipprefix.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PublicIpPrefix depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type publicIpPrefixAttributes struct {
	ref terra.Reference
}

func (pip publicIpPrefixAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("id"))
}

func (pip publicIpPrefixAttributes) IpPrefix() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("ip_prefix"))
}

func (pip publicIpPrefixAttributes) IpVersion() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("ip_version"))
}

func (pip publicIpPrefixAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("location"))
}

func (pip publicIpPrefixAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("name"))
}

func (pip publicIpPrefixAttributes) PrefixLength() terra.NumberValue {
	return terra.ReferenceNumber(pip.ref.Append("prefix_length"))
}

func (pip publicIpPrefixAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("resource_group_name"))
}

func (pip publicIpPrefixAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(pip.ref.Append("sku"))
}

func (pip publicIpPrefixAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pip.ref.Append("tags"))
}

func (pip publicIpPrefixAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](pip.ref.Append("zones"))
}

func (pip publicIpPrefixAttributes) Timeouts() publicipprefix.TimeoutsAttributes {
	return terra.ReferenceSingle[publicipprefix.TimeoutsAttributes](pip.ref.Append("timeouts"))
}

type publicIpPrefixState struct {
	Id                string                        `json:"id"`
	IpPrefix          string                        `json:"ip_prefix"`
	IpVersion         string                        `json:"ip_version"`
	Location          string                        `json:"location"`
	Name              string                        `json:"name"`
	PrefixLength      float64                       `json:"prefix_length"`
	ResourceGroupName string                        `json:"resource_group_name"`
	Sku               string                        `json:"sku"`
	Tags              map[string]string             `json:"tags"`
	Zones             []string                      `json:"zones"`
	Timeouts          *publicipprefix.TimeoutsState `json:"timeouts"`
}
