// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourcegrouptemplatedeployment "github.com/golingon/terraproviders/azurerm/3.49.0/resourcegrouptemplatedeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourceGroupTemplateDeployment(name string, args ResourceGroupTemplateDeploymentArgs) *ResourceGroupTemplateDeployment {
	return &ResourceGroupTemplateDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourceGroupTemplateDeployment)(nil)

type ResourceGroupTemplateDeployment struct {
	Name  string
	Args  ResourceGroupTemplateDeploymentArgs
	state *resourceGroupTemplateDeploymentState
}

func (rgtd *ResourceGroupTemplateDeployment) Type() string {
	return "azurerm_resource_group_template_deployment"
}

func (rgtd *ResourceGroupTemplateDeployment) LocalName() string {
	return rgtd.Name
}

func (rgtd *ResourceGroupTemplateDeployment) Configuration() interface{} {
	return rgtd.Args
}

func (rgtd *ResourceGroupTemplateDeployment) Attributes() resourceGroupTemplateDeploymentAttributes {
	return resourceGroupTemplateDeploymentAttributes{ref: terra.ReferenceResource(rgtd)}
}

func (rgtd *ResourceGroupTemplateDeployment) ImportState(av io.Reader) error {
	rgtd.state = &resourceGroupTemplateDeploymentState{}
	if err := json.NewDecoder(av).Decode(rgtd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rgtd.Type(), rgtd.LocalName(), err)
	}
	return nil
}

func (rgtd *ResourceGroupTemplateDeployment) State() (*resourceGroupTemplateDeploymentState, bool) {
	return rgtd.state, rgtd.state != nil
}

func (rgtd *ResourceGroupTemplateDeployment) StateMust() *resourceGroupTemplateDeploymentState {
	if rgtd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rgtd.Type(), rgtd.LocalName()))
	}
	return rgtd.state
}

func (rgtd *ResourceGroupTemplateDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(rgtd)
}

type ResourceGroupTemplateDeploymentArgs struct {
	// DebugLevel: string, optional
	DebugLevel terra.StringValue `hcl:"debug_level,attr"`
	// DeploymentMode: string, required
	DeploymentMode terra.StringValue `hcl:"deployment_mode,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersContent: string, optional
	ParametersContent terra.StringValue `hcl:"parameters_content,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TemplateContent: string, optional
	TemplateContent terra.StringValue `hcl:"template_content,attr"`
	// TemplateSpecVersionId: string, optional
	TemplateSpecVersionId terra.StringValue `hcl:"template_spec_version_id,attr"`
	// Timeouts: optional
	Timeouts *resourcegrouptemplatedeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourceGroupTemplateDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourceGroupTemplateDeploymentAttributes struct {
	ref terra.Reference
}

func (rgtd resourceGroupTemplateDeploymentAttributes) DebugLevel() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("debug_level"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) DeploymentMode() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("deployment_mode"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("id"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("name"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) OutputContent() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("output_content"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) ParametersContent() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("parameters_content"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("resource_group_name"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rgtd.ref.Append("tags"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) TemplateContent() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("template_content"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) TemplateSpecVersionId() terra.StringValue {
	return terra.ReferenceString(rgtd.ref.Append("template_spec_version_id"))
}

func (rgtd resourceGroupTemplateDeploymentAttributes) Timeouts() resourcegrouptemplatedeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[resourcegrouptemplatedeployment.TimeoutsAttributes](rgtd.ref.Append("timeouts"))
}

type resourceGroupTemplateDeploymentState struct {
	DebugLevel            string                                         `json:"debug_level"`
	DeploymentMode        string                                         `json:"deployment_mode"`
	Id                    string                                         `json:"id"`
	Name                  string                                         `json:"name"`
	OutputContent         string                                         `json:"output_content"`
	ParametersContent     string                                         `json:"parameters_content"`
	ResourceGroupName     string                                         `json:"resource_group_name"`
	Tags                  map[string]string                              `json:"tags"`
	TemplateContent       string                                         `json:"template_content"`
	TemplateSpecVersionId string                                         `json:"template_spec_version_id"`
	Timeouts              *resourcegrouptemplatedeployment.TimeoutsState `json:"timeouts"`
}
