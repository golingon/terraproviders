// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package iothubdps

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type IpFilterRule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// IpMask: string, required
	IpMask terra.StringValue `hcl:"ip_mask,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
}

type LinkedHub struct {
	// AllocationWeight: number, optional
	AllocationWeight terra.NumberValue `hcl:"allocation_weight,attr"`
	// ApplyAllocationPolicy: bool, optional
	ApplyAllocationPolicy terra.BoolValue `hcl:"apply_allocation_policy,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
}

type Sku struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IpFilterRuleAttributes struct {
	ref terra.Reference
}

func (ifr IpFilterRuleAttributes) InternalRef() terra.Reference {
	return ifr.ref
}

func (ifr IpFilterRuleAttributes) InternalWithRef(ref terra.Reference) IpFilterRuleAttributes {
	return IpFilterRuleAttributes{ref: ref}
}

func (ifr IpFilterRuleAttributes) InternalTokens() hclwrite.Tokens {
	return ifr.ref.InternalTokens()
}

func (ifr IpFilterRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(ifr.ref.Append("action"))
}

func (ifr IpFilterRuleAttributes) IpMask() terra.StringValue {
	return terra.ReferenceString(ifr.ref.Append("ip_mask"))
}

func (ifr IpFilterRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ifr.ref.Append("name"))
}

func (ifr IpFilterRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceString(ifr.ref.Append("target"))
}

type LinkedHubAttributes struct {
	ref terra.Reference
}

func (lh LinkedHubAttributes) InternalRef() terra.Reference {
	return lh.ref
}

func (lh LinkedHubAttributes) InternalWithRef(ref terra.Reference) LinkedHubAttributes {
	return LinkedHubAttributes{ref: ref}
}

func (lh LinkedHubAttributes) InternalTokens() hclwrite.Tokens {
	return lh.ref.InternalTokens()
}

func (lh LinkedHubAttributes) AllocationWeight() terra.NumberValue {
	return terra.ReferenceNumber(lh.ref.Append("allocation_weight"))
}

func (lh LinkedHubAttributes) ApplyAllocationPolicy() terra.BoolValue {
	return terra.ReferenceBool(lh.ref.Append("apply_allocation_policy"))
}

func (lh LinkedHubAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(lh.ref.Append("connection_string"))
}

func (lh LinkedHubAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(lh.ref.Append("hostname"))
}

func (lh LinkedHubAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lh.ref.Append("location"))
}

type SkuAttributes struct {
	ref terra.Reference
}

func (s SkuAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SkuAttributes) InternalWithRef(ref terra.Reference) SkuAttributes {
	return SkuAttributes{ref: ref}
}

func (s SkuAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("capacity"))
}

func (s SkuAttributes) Name() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type IpFilterRuleState struct {
	Action string `json:"action"`
	IpMask string `json:"ip_mask"`
	Name   string `json:"name"`
	Target string `json:"target"`
}

type LinkedHubState struct {
	AllocationWeight      float64 `json:"allocation_weight"`
	ApplyAllocationPolicy bool    `json:"apply_allocation_policy"`
	ConnectionString      string  `json:"connection_string"`
	Hostname              string  `json:"hostname"`
	Location              string  `json:"location"`
}

type SkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
