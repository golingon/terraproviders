// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sqlfirewallrule "github.com/golingon/terraproviders/azurerm/3.49.0/sqlfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlFirewallRule(name string, args SqlFirewallRuleArgs) *SqlFirewallRule {
	return &SqlFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlFirewallRule)(nil)

type SqlFirewallRule struct {
	Name  string
	Args  SqlFirewallRuleArgs
	state *sqlFirewallRuleState
}

func (sfr *SqlFirewallRule) Type() string {
	return "azurerm_sql_firewall_rule"
}

func (sfr *SqlFirewallRule) LocalName() string {
	return sfr.Name
}

func (sfr *SqlFirewallRule) Configuration() interface{} {
	return sfr.Args
}

func (sfr *SqlFirewallRule) Attributes() sqlFirewallRuleAttributes {
	return sqlFirewallRuleAttributes{ref: terra.ReferenceResource(sfr)}
}

func (sfr *SqlFirewallRule) ImportState(av io.Reader) error {
	sfr.state = &sqlFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(sfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sfr.Type(), sfr.LocalName(), err)
	}
	return nil
}

func (sfr *SqlFirewallRule) State() (*sqlFirewallRuleState, bool) {
	return sfr.state, sfr.state != nil
}

func (sfr *SqlFirewallRule) StateMust() *sqlFirewallRuleState {
	if sfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sfr.Type(), sfr.LocalName()))
	}
	return sfr.state
}

func (sfr *SqlFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(sfr)
}

type SqlFirewallRuleArgs struct {
	// EndIpAddress: string, required
	EndIpAddress terra.StringValue `hcl:"end_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// StartIpAddress: string, required
	StartIpAddress terra.StringValue `hcl:"start_ip_address,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *sqlfirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlFirewallRuleAttributes struct {
	ref terra.Reference
}

func (sfr sqlFirewallRuleAttributes) EndIpAddress() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("end_ip_address"))
}

func (sfr sqlFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("id"))
}

func (sfr sqlFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("name"))
}

func (sfr sqlFirewallRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("resource_group_name"))
}

func (sfr sqlFirewallRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("server_name"))
}

func (sfr sqlFirewallRuleAttributes) StartIpAddress() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("start_ip_address"))
}

func (sfr sqlFirewallRuleAttributes) Timeouts() sqlfirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[sqlfirewallrule.TimeoutsAttributes](sfr.ref.Append("timeouts"))
}

type sqlFirewallRuleState struct {
	EndIpAddress      string                         `json:"end_ip_address"`
	Id                string                         `json:"id"`
	Name              string                         `json:"name"`
	ResourceGroupName string                         `json:"resource_group_name"`
	ServerName        string                         `json:"server_name"`
	StartIpAddress    string                         `json:"start_ip_address"`
	Timeouts          *sqlfirewallrule.TimeoutsState `json:"timeouts"`
}
