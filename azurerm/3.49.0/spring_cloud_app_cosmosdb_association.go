// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudappcosmosdbassociation "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudappcosmosdbassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudAppCosmosdbAssociation(name string, args SpringCloudAppCosmosdbAssociationArgs) *SpringCloudAppCosmosdbAssociation {
	return &SpringCloudAppCosmosdbAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudAppCosmosdbAssociation)(nil)

type SpringCloudAppCosmosdbAssociation struct {
	Name  string
	Args  SpringCloudAppCosmosdbAssociationArgs
	state *springCloudAppCosmosdbAssociationState
}

func (scaca *SpringCloudAppCosmosdbAssociation) Type() string {
	return "azurerm_spring_cloud_app_cosmosdb_association"
}

func (scaca *SpringCloudAppCosmosdbAssociation) LocalName() string {
	return scaca.Name
}

func (scaca *SpringCloudAppCosmosdbAssociation) Configuration() interface{} {
	return scaca.Args
}

func (scaca *SpringCloudAppCosmosdbAssociation) Attributes() springCloudAppCosmosdbAssociationAttributes {
	return springCloudAppCosmosdbAssociationAttributes{ref: terra.ReferenceResource(scaca)}
}

func (scaca *SpringCloudAppCosmosdbAssociation) ImportState(av io.Reader) error {
	scaca.state = &springCloudAppCosmosdbAssociationState{}
	if err := json.NewDecoder(av).Decode(scaca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scaca.Type(), scaca.LocalName(), err)
	}
	return nil
}

func (scaca *SpringCloudAppCosmosdbAssociation) State() (*springCloudAppCosmosdbAssociationState, bool) {
	return scaca.state, scaca.state != nil
}

func (scaca *SpringCloudAppCosmosdbAssociation) StateMust() *springCloudAppCosmosdbAssociationState {
	if scaca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scaca.Type(), scaca.LocalName()))
	}
	return scaca.state
}

func (scaca *SpringCloudAppCosmosdbAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(scaca)
}

type SpringCloudAppCosmosdbAssociationArgs struct {
	// ApiType: string, required
	ApiType terra.StringValue `hcl:"api_type,attr" validate:"required"`
	// CosmosdbAccessKey: string, required
	CosmosdbAccessKey terra.StringValue `hcl:"cosmosdb_access_key,attr" validate:"required"`
	// CosmosdbAccountId: string, required
	CosmosdbAccountId terra.StringValue `hcl:"cosmosdb_account_id,attr" validate:"required"`
	// CosmosdbCassandraKeyspaceName: string, optional
	CosmosdbCassandraKeyspaceName terra.StringValue `hcl:"cosmosdb_cassandra_keyspace_name,attr"`
	// CosmosdbGremlinDatabaseName: string, optional
	CosmosdbGremlinDatabaseName terra.StringValue `hcl:"cosmosdb_gremlin_database_name,attr"`
	// CosmosdbGremlinGraphName: string, optional
	CosmosdbGremlinGraphName terra.StringValue `hcl:"cosmosdb_gremlin_graph_name,attr"`
	// CosmosdbMongoDatabaseName: string, optional
	CosmosdbMongoDatabaseName terra.StringValue `hcl:"cosmosdb_mongo_database_name,attr"`
	// CosmosdbSqlDatabaseName: string, optional
	CosmosdbSqlDatabaseName terra.StringValue `hcl:"cosmosdb_sql_database_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *springcloudappcosmosdbassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudAppCosmosdbAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudAppCosmosdbAssociationAttributes struct {
	ref terra.Reference
}

func (scaca springCloudAppCosmosdbAssociationAttributes) ApiType() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("api_type"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbAccessKey() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_access_key"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbAccountId() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_account_id"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbCassandraKeyspaceName() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_cassandra_keyspace_name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbGremlinDatabaseName() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_gremlin_database_name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbGremlinGraphName() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_gremlin_graph_name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbMongoDatabaseName() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_mongo_database_name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) CosmosdbSqlDatabaseName() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("cosmosdb_sql_database_name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("id"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("name"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceString(scaca.ref.Append("spring_cloud_app_id"))
}

func (scaca springCloudAppCosmosdbAssociationAttributes) Timeouts() springcloudappcosmosdbassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudappcosmosdbassociation.TimeoutsAttributes](scaca.ref.Append("timeouts"))
}

type springCloudAppCosmosdbAssociationState struct {
	ApiType                       string                                           `json:"api_type"`
	CosmosdbAccessKey             string                                           `json:"cosmosdb_access_key"`
	CosmosdbAccountId             string                                           `json:"cosmosdb_account_id"`
	CosmosdbCassandraKeyspaceName string                                           `json:"cosmosdb_cassandra_keyspace_name"`
	CosmosdbGremlinDatabaseName   string                                           `json:"cosmosdb_gremlin_database_name"`
	CosmosdbGremlinGraphName      string                                           `json:"cosmosdb_gremlin_graph_name"`
	CosmosdbMongoDatabaseName     string                                           `json:"cosmosdb_mongo_database_name"`
	CosmosdbSqlDatabaseName       string                                           `json:"cosmosdb_sql_database_name"`
	Id                            string                                           `json:"id"`
	Name                          string                                           `json:"name"`
	SpringCloudAppId              string                                           `json:"spring_cloud_app_id"`
	Timeouts                      *springcloudappcosmosdbassociation.TimeoutsState `json:"timeouts"`
}
