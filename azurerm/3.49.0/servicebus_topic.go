// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	servicebustopic "github.com/golingon/terraproviders/azurerm/3.49.0/servicebustopic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicebusTopic(name string, args ServicebusTopicArgs) *ServicebusTopic {
	return &ServicebusTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicebusTopic)(nil)

type ServicebusTopic struct {
	Name  string
	Args  ServicebusTopicArgs
	state *servicebusTopicState
}

func (st *ServicebusTopic) Type() string {
	return "azurerm_servicebus_topic"
}

func (st *ServicebusTopic) LocalName() string {
	return st.Name
}

func (st *ServicebusTopic) Configuration() interface{} {
	return st.Args
}

func (st *ServicebusTopic) Attributes() servicebusTopicAttributes {
	return servicebusTopicAttributes{ref: terra.ReferenceResource(st)}
}

func (st *ServicebusTopic) ImportState(av io.Reader) error {
	st.state = &servicebusTopicState{}
	if err := json.NewDecoder(av).Decode(st.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", st.Type(), st.LocalName(), err)
	}
	return nil
}

func (st *ServicebusTopic) State() (*servicebusTopicState, bool) {
	return st.state, st.state != nil
}

func (st *ServicebusTopic) StateMust() *servicebusTopicState {
	if st.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", st.Type(), st.LocalName()))
	}
	return st.state
}

func (st *ServicebusTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(st)
}

type ServicebusTopicArgs struct {
	// AutoDeleteOnIdle: string, optional
	AutoDeleteOnIdle terra.StringValue `hcl:"auto_delete_on_idle,attr"`
	// DefaultMessageTtl: string, optional
	DefaultMessageTtl terra.StringValue `hcl:"default_message_ttl,attr"`
	// DuplicateDetectionHistoryTimeWindow: string, optional
	DuplicateDetectionHistoryTimeWindow terra.StringValue `hcl:"duplicate_detection_history_time_window,attr"`
	// EnableBatchedOperations: bool, optional
	EnableBatchedOperations terra.BoolValue `hcl:"enable_batched_operations,attr"`
	// EnableExpress: bool, optional
	EnableExpress terra.BoolValue `hcl:"enable_express,attr"`
	// EnablePartitioning: bool, optional
	EnablePartitioning terra.BoolValue `hcl:"enable_partitioning,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxMessageSizeInKilobytes: number, optional
	MaxMessageSizeInKilobytes terra.NumberValue `hcl:"max_message_size_in_kilobytes,attr"`
	// MaxSizeInMegabytes: number, optional
	MaxSizeInMegabytes terra.NumberValue `hcl:"max_size_in_megabytes,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceId: string, required
	NamespaceId terra.StringValue `hcl:"namespace_id,attr" validate:"required"`
	// RequiresDuplicateDetection: bool, optional
	RequiresDuplicateDetection terra.BoolValue `hcl:"requires_duplicate_detection,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// SupportOrdering: bool, optional
	SupportOrdering terra.BoolValue `hcl:"support_ordering,attr"`
	// Timeouts: optional
	Timeouts *servicebustopic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicebusTopic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicebusTopicAttributes struct {
	ref terra.Reference
}

func (st servicebusTopicAttributes) AutoDeleteOnIdle() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("auto_delete_on_idle"))
}

func (st servicebusTopicAttributes) DefaultMessageTtl() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("default_message_ttl"))
}

func (st servicebusTopicAttributes) DuplicateDetectionHistoryTimeWindow() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("duplicate_detection_history_time_window"))
}

func (st servicebusTopicAttributes) EnableBatchedOperations() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("enable_batched_operations"))
}

func (st servicebusTopicAttributes) EnableExpress() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("enable_express"))
}

func (st servicebusTopicAttributes) EnablePartitioning() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("enable_partitioning"))
}

func (st servicebusTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("id"))
}

func (st servicebusTopicAttributes) MaxMessageSizeInKilobytes() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("max_message_size_in_kilobytes"))
}

func (st servicebusTopicAttributes) MaxSizeInMegabytes() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("max_size_in_megabytes"))
}

func (st servicebusTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("name"))
}

func (st servicebusTopicAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("namespace_id"))
}

func (st servicebusTopicAttributes) RequiresDuplicateDetection() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("requires_duplicate_detection"))
}

func (st servicebusTopicAttributes) Status() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("status"))
}

func (st servicebusTopicAttributes) SupportOrdering() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("support_ordering"))
}

func (st servicebusTopicAttributes) Timeouts() servicebustopic.TimeoutsAttributes {
	return terra.ReferenceSingle[servicebustopic.TimeoutsAttributes](st.ref.Append("timeouts"))
}

type servicebusTopicState struct {
	AutoDeleteOnIdle                    string                         `json:"auto_delete_on_idle"`
	DefaultMessageTtl                   string                         `json:"default_message_ttl"`
	DuplicateDetectionHistoryTimeWindow string                         `json:"duplicate_detection_history_time_window"`
	EnableBatchedOperations             bool                           `json:"enable_batched_operations"`
	EnableExpress                       bool                           `json:"enable_express"`
	EnablePartitioning                  bool                           `json:"enable_partitioning"`
	Id                                  string                         `json:"id"`
	MaxMessageSizeInKilobytes           float64                        `json:"max_message_size_in_kilobytes"`
	MaxSizeInMegabytes                  float64                        `json:"max_size_in_megabytes"`
	Name                                string                         `json:"name"`
	NamespaceId                         string                         `json:"namespace_id"`
	RequiresDuplicateDetection          bool                           `json:"requires_duplicate_detection"`
	Status                              string                         `json:"status"`
	SupportOrdering                     bool                           `json:"support_ordering"`
	Timeouts                            *servicebustopic.TimeoutsState `json:"timeouts"`
}
