// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementrediscache "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementrediscache"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementRedisCache(name string, args ApiManagementRedisCacheArgs) *ApiManagementRedisCache {
	return &ApiManagementRedisCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementRedisCache)(nil)

type ApiManagementRedisCache struct {
	Name  string
	Args  ApiManagementRedisCacheArgs
	state *apiManagementRedisCacheState
}

func (amrc *ApiManagementRedisCache) Type() string {
	return "azurerm_api_management_redis_cache"
}

func (amrc *ApiManagementRedisCache) LocalName() string {
	return amrc.Name
}

func (amrc *ApiManagementRedisCache) Configuration() interface{} {
	return amrc.Args
}

func (amrc *ApiManagementRedisCache) Attributes() apiManagementRedisCacheAttributes {
	return apiManagementRedisCacheAttributes{ref: terra.ReferenceResource(amrc)}
}

func (amrc *ApiManagementRedisCache) ImportState(av io.Reader) error {
	amrc.state = &apiManagementRedisCacheState{}
	if err := json.NewDecoder(av).Decode(amrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amrc.Type(), amrc.LocalName(), err)
	}
	return nil
}

func (amrc *ApiManagementRedisCache) State() (*apiManagementRedisCacheState, bool) {
	return amrc.state, amrc.state != nil
}

func (amrc *ApiManagementRedisCache) StateMust() *apiManagementRedisCacheState {
	if amrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amrc.Type(), amrc.LocalName()))
	}
	return amrc.state
}

func (amrc *ApiManagementRedisCache) DependOn() terra.Reference {
	return terra.ReferenceResource(amrc)
}

type ApiManagementRedisCacheArgs struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// CacheLocation: string, optional
	CacheLocation terra.StringValue `hcl:"cache_location,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedisCacheId: string, optional
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr"`
	// Timeouts: optional
	Timeouts *apimanagementrediscache.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementRedisCache depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementRedisCacheAttributes struct {
	ref terra.Reference
}

func (amrc apiManagementRedisCacheAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("api_management_id"))
}

func (amrc apiManagementRedisCacheAttributes) CacheLocation() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("cache_location"))
}

func (amrc apiManagementRedisCacheAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("connection_string"))
}

func (amrc apiManagementRedisCacheAttributes) Description() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("description"))
}

func (amrc apiManagementRedisCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("id"))
}

func (amrc apiManagementRedisCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("name"))
}

func (amrc apiManagementRedisCacheAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceString(amrc.ref.Append("redis_cache_id"))
}

func (amrc apiManagementRedisCacheAttributes) Timeouts() apimanagementrediscache.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementrediscache.TimeoutsAttributes](amrc.ref.Append("timeouts"))
}

type apiManagementRedisCacheState struct {
	ApiManagementId  string                                 `json:"api_management_id"`
	CacheLocation    string                                 `json:"cache_location"`
	ConnectionString string                                 `json:"connection_string"`
	Description      string                                 `json:"description"`
	Id               string                                 `json:"id"`
	Name             string                                 `json:"name"`
	RedisCacheId     string                                 `json:"redis_cache_id"`
	Timeouts         *apimanagementrediscache.TimeoutsState `json:"timeouts"`
}
