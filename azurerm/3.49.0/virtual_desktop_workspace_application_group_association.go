// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualdesktopworkspaceapplicationgroupassociation "github.com/golingon/terraproviders/azurerm/3.49.0/virtualdesktopworkspaceapplicationgroupassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualDesktopWorkspaceApplicationGroupAssociation(name string, args VirtualDesktopWorkspaceApplicationGroupAssociationArgs) *VirtualDesktopWorkspaceApplicationGroupAssociation {
	return &VirtualDesktopWorkspaceApplicationGroupAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualDesktopWorkspaceApplicationGroupAssociation)(nil)

type VirtualDesktopWorkspaceApplicationGroupAssociation struct {
	Name  string
	Args  VirtualDesktopWorkspaceApplicationGroupAssociationArgs
	state *virtualDesktopWorkspaceApplicationGroupAssociationState
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) Type() string {
	return "azurerm_virtual_desktop_workspace_application_group_association"
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) LocalName() string {
	return vdwaga.Name
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) Configuration() interface{} {
	return vdwaga.Args
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) Attributes() virtualDesktopWorkspaceApplicationGroupAssociationAttributes {
	return virtualDesktopWorkspaceApplicationGroupAssociationAttributes{ref: terra.ReferenceResource(vdwaga)}
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) ImportState(av io.Reader) error {
	vdwaga.state = &virtualDesktopWorkspaceApplicationGroupAssociationState{}
	if err := json.NewDecoder(av).Decode(vdwaga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vdwaga.Type(), vdwaga.LocalName(), err)
	}
	return nil
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) State() (*virtualDesktopWorkspaceApplicationGroupAssociationState, bool) {
	return vdwaga.state, vdwaga.state != nil
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) StateMust() *virtualDesktopWorkspaceApplicationGroupAssociationState {
	if vdwaga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vdwaga.Type(), vdwaga.LocalName()))
	}
	return vdwaga.state
}

func (vdwaga *VirtualDesktopWorkspaceApplicationGroupAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(vdwaga)
}

type VirtualDesktopWorkspaceApplicationGroupAssociationArgs struct {
	// ApplicationGroupId: string, required
	ApplicationGroupId terra.StringValue `hcl:"application_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualdesktopworkspaceapplicationgroupassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualDesktopWorkspaceApplicationGroupAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualDesktopWorkspaceApplicationGroupAssociationAttributes struct {
	ref terra.Reference
}

func (vdwaga virtualDesktopWorkspaceApplicationGroupAssociationAttributes) ApplicationGroupId() terra.StringValue {
	return terra.ReferenceString(vdwaga.ref.Append("application_group_id"))
}

func (vdwaga virtualDesktopWorkspaceApplicationGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vdwaga.ref.Append("id"))
}

func (vdwaga virtualDesktopWorkspaceApplicationGroupAssociationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(vdwaga.ref.Append("workspace_id"))
}

func (vdwaga virtualDesktopWorkspaceApplicationGroupAssociationAttributes) Timeouts() virtualdesktopworkspaceapplicationgroupassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualdesktopworkspaceapplicationgroupassociation.TimeoutsAttributes](vdwaga.ref.Append("timeouts"))
}

type virtualDesktopWorkspaceApplicationGroupAssociationState struct {
	ApplicationGroupId string                                                            `json:"application_group_id"`
	Id                 string                                                            `json:"id"`
	WorkspaceId        string                                                            `json:"workspace_id"`
	Timeouts           *virtualdesktopworkspaceapplicationgroupassociation.TimeoutsState `json:"timeouts"`
}
