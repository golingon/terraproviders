// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlmanagedinstanceactivedirectoryadministrator "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlmanagedinstanceactivedirectoryadministrator"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlManagedInstanceActiveDirectoryAdministrator(name string, args MssqlManagedInstanceActiveDirectoryAdministratorArgs) *MssqlManagedInstanceActiveDirectoryAdministrator {
	return &MssqlManagedInstanceActiveDirectoryAdministrator{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlManagedInstanceActiveDirectoryAdministrator)(nil)

type MssqlManagedInstanceActiveDirectoryAdministrator struct {
	Name  string
	Args  MssqlManagedInstanceActiveDirectoryAdministratorArgs
	state *mssqlManagedInstanceActiveDirectoryAdministratorState
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) Type() string {
	return "azurerm_mssql_managed_instance_active_directory_administrator"
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) LocalName() string {
	return mmiada.Name
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) Configuration() interface{} {
	return mmiada.Args
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) Attributes() mssqlManagedInstanceActiveDirectoryAdministratorAttributes {
	return mssqlManagedInstanceActiveDirectoryAdministratorAttributes{ref: terra.ReferenceResource(mmiada)}
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) ImportState(av io.Reader) error {
	mmiada.state = &mssqlManagedInstanceActiveDirectoryAdministratorState{}
	if err := json.NewDecoder(av).Decode(mmiada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mmiada.Type(), mmiada.LocalName(), err)
	}
	return nil
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) State() (*mssqlManagedInstanceActiveDirectoryAdministratorState, bool) {
	return mmiada.state, mmiada.state != nil
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) StateMust() *mssqlManagedInstanceActiveDirectoryAdministratorState {
	if mmiada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mmiada.Type(), mmiada.LocalName()))
	}
	return mmiada.state
}

func (mmiada *MssqlManagedInstanceActiveDirectoryAdministrator) DependOn() terra.Reference {
	return terra.ReferenceResource(mmiada)
}

type MssqlManagedInstanceActiveDirectoryAdministratorArgs struct {
	// AzureadAuthenticationOnly: bool, optional
	AzureadAuthenticationOnly terra.BoolValue `hcl:"azuread_authentication_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoginUsername: string, required
	LoginUsername terra.StringValue `hcl:"login_username,attr" validate:"required"`
	// ManagedInstanceId: string, required
	ManagedInstanceId terra.StringValue `hcl:"managed_instance_id,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqlmanagedinstanceactivedirectoryadministrator.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlManagedInstanceActiveDirectoryAdministrator depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlManagedInstanceActiveDirectoryAdministratorAttributes struct {
	ref terra.Reference
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) AzureadAuthenticationOnly() terra.BoolValue {
	return terra.ReferenceBool(mmiada.ref.Append("azuread_authentication_only"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mmiada.ref.Append("id"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) LoginUsername() terra.StringValue {
	return terra.ReferenceString(mmiada.ref.Append("login_username"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) ManagedInstanceId() terra.StringValue {
	return terra.ReferenceString(mmiada.ref.Append("managed_instance_id"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceString(mmiada.ref.Append("object_id"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(mmiada.ref.Append("tenant_id"))
}

func (mmiada mssqlManagedInstanceActiveDirectoryAdministratorAttributes) Timeouts() mssqlmanagedinstanceactivedirectoryadministrator.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlmanagedinstanceactivedirectoryadministrator.TimeoutsAttributes](mmiada.ref.Append("timeouts"))
}

type mssqlManagedInstanceActiveDirectoryAdministratorState struct {
	AzureadAuthenticationOnly bool                                                            `json:"azuread_authentication_only"`
	Id                        string                                                          `json:"id"`
	LoginUsername             string                                                          `json:"login_username"`
	ManagedInstanceId         string                                                          `json:"managed_instance_id"`
	ObjectId                  string                                                          `json:"object_id"`
	TenantId                  string                                                          `json:"tenant_id"`
	Timeouts                  *mssqlmanagedinstanceactivedirectoryadministrator.TimeoutsState `json:"timeouts"`
}
