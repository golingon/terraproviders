// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	managementgrouppolicyremediation "github.com/golingon/terraproviders/azurerm/3.49.0/managementgrouppolicyremediation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagementGroupPolicyRemediation(name string, args ManagementGroupPolicyRemediationArgs) *ManagementGroupPolicyRemediation {
	return &ManagementGroupPolicyRemediation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagementGroupPolicyRemediation)(nil)

type ManagementGroupPolicyRemediation struct {
	Name  string
	Args  ManagementGroupPolicyRemediationArgs
	state *managementGroupPolicyRemediationState
}

func (mgpr *ManagementGroupPolicyRemediation) Type() string {
	return "azurerm_management_group_policy_remediation"
}

func (mgpr *ManagementGroupPolicyRemediation) LocalName() string {
	return mgpr.Name
}

func (mgpr *ManagementGroupPolicyRemediation) Configuration() interface{} {
	return mgpr.Args
}

func (mgpr *ManagementGroupPolicyRemediation) Attributes() managementGroupPolicyRemediationAttributes {
	return managementGroupPolicyRemediationAttributes{ref: terra.ReferenceResource(mgpr)}
}

func (mgpr *ManagementGroupPolicyRemediation) ImportState(av io.Reader) error {
	mgpr.state = &managementGroupPolicyRemediationState{}
	if err := json.NewDecoder(av).Decode(mgpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mgpr.Type(), mgpr.LocalName(), err)
	}
	return nil
}

func (mgpr *ManagementGroupPolicyRemediation) State() (*managementGroupPolicyRemediationState, bool) {
	return mgpr.state, mgpr.state != nil
}

func (mgpr *ManagementGroupPolicyRemediation) StateMust() *managementGroupPolicyRemediationState {
	if mgpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mgpr.Type(), mgpr.LocalName()))
	}
	return mgpr.state
}

func (mgpr *ManagementGroupPolicyRemediation) DependOn() terra.Reference {
	return terra.ReferenceResource(mgpr)
}

type ManagementGroupPolicyRemediationArgs struct {
	// FailurePercentage: number, optional
	FailurePercentage terra.NumberValue `hcl:"failure_percentage,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocationFilters: list of string, optional
	LocationFilters terra.ListValue[terra.StringValue] `hcl:"location_filters,attr"`
	// ManagementGroupId: string, required
	ManagementGroupId terra.StringValue `hcl:"management_group_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParallelDeployments: number, optional
	ParallelDeployments terra.NumberValue `hcl:"parallel_deployments,attr"`
	// PolicyAssignmentId: string, required
	PolicyAssignmentId terra.StringValue `hcl:"policy_assignment_id,attr" validate:"required"`
	// PolicyDefinitionId: string, optional
	PolicyDefinitionId terra.StringValue `hcl:"policy_definition_id,attr"`
	// PolicyDefinitionReferenceId: string, optional
	PolicyDefinitionReferenceId terra.StringValue `hcl:"policy_definition_reference_id,attr"`
	// ResourceCount: number, optional
	ResourceCount terra.NumberValue `hcl:"resource_count,attr"`
	// ResourceDiscoveryMode: string, optional
	ResourceDiscoveryMode terra.StringValue `hcl:"resource_discovery_mode,attr"`
	// Timeouts: optional
	Timeouts *managementgrouppolicyremediation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagementGroupPolicyRemediation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managementGroupPolicyRemediationAttributes struct {
	ref terra.Reference
}

func (mgpr managementGroupPolicyRemediationAttributes) FailurePercentage() terra.NumberValue {
	return terra.ReferenceNumber(mgpr.ref.Append("failure_percentage"))
}

func (mgpr managementGroupPolicyRemediationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("id"))
}

func (mgpr managementGroupPolicyRemediationAttributes) LocationFilters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mgpr.ref.Append("location_filters"))
}

func (mgpr managementGroupPolicyRemediationAttributes) ManagementGroupId() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("management_group_id"))
}

func (mgpr managementGroupPolicyRemediationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("name"))
}

func (mgpr managementGroupPolicyRemediationAttributes) ParallelDeployments() terra.NumberValue {
	return terra.ReferenceNumber(mgpr.ref.Append("parallel_deployments"))
}

func (mgpr managementGroupPolicyRemediationAttributes) PolicyAssignmentId() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("policy_assignment_id"))
}

func (mgpr managementGroupPolicyRemediationAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("policy_definition_id"))
}

func (mgpr managementGroupPolicyRemediationAttributes) PolicyDefinitionReferenceId() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("policy_definition_reference_id"))
}

func (mgpr managementGroupPolicyRemediationAttributes) ResourceCount() terra.NumberValue {
	return terra.ReferenceNumber(mgpr.ref.Append("resource_count"))
}

func (mgpr managementGroupPolicyRemediationAttributes) ResourceDiscoveryMode() terra.StringValue {
	return terra.ReferenceString(mgpr.ref.Append("resource_discovery_mode"))
}

func (mgpr managementGroupPolicyRemediationAttributes) Timeouts() managementgrouppolicyremediation.TimeoutsAttributes {
	return terra.ReferenceSingle[managementgrouppolicyremediation.TimeoutsAttributes](mgpr.ref.Append("timeouts"))
}

type managementGroupPolicyRemediationState struct {
	FailurePercentage           float64                                         `json:"failure_percentage"`
	Id                          string                                          `json:"id"`
	LocationFilters             []string                                        `json:"location_filters"`
	ManagementGroupId           string                                          `json:"management_group_id"`
	Name                        string                                          `json:"name"`
	ParallelDeployments         float64                                         `json:"parallel_deployments"`
	PolicyAssignmentId          string                                          `json:"policy_assignment_id"`
	PolicyDefinitionId          string                                          `json:"policy_definition_id"`
	PolicyDefinitionReferenceId string                                          `json:"policy_definition_reference_id"`
	ResourceCount               float64                                         `json:"resource_count"`
	ResourceDiscoveryMode       string                                          `json:"resource_discovery_mode"`
	Timeouts                    *managementgrouppolicyremediation.TimeoutsState `json:"timeouts"`
}
