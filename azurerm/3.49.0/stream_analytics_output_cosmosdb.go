// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	streamanalyticsoutputcosmosdb "github.com/golingon/terraproviders/azurerm/3.49.0/streamanalyticsoutputcosmosdb"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStreamAnalyticsOutputCosmosdb(name string, args StreamAnalyticsOutputCosmosdbArgs) *StreamAnalyticsOutputCosmosdb {
	return &StreamAnalyticsOutputCosmosdb{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StreamAnalyticsOutputCosmosdb)(nil)

type StreamAnalyticsOutputCosmosdb struct {
	Name  string
	Args  StreamAnalyticsOutputCosmosdbArgs
	state *streamAnalyticsOutputCosmosdbState
}

func (saoc *StreamAnalyticsOutputCosmosdb) Type() string {
	return "azurerm_stream_analytics_output_cosmosdb"
}

func (saoc *StreamAnalyticsOutputCosmosdb) LocalName() string {
	return saoc.Name
}

func (saoc *StreamAnalyticsOutputCosmosdb) Configuration() interface{} {
	return saoc.Args
}

func (saoc *StreamAnalyticsOutputCosmosdb) Attributes() streamAnalyticsOutputCosmosdbAttributes {
	return streamAnalyticsOutputCosmosdbAttributes{ref: terra.ReferenceResource(saoc)}
}

func (saoc *StreamAnalyticsOutputCosmosdb) ImportState(av io.Reader) error {
	saoc.state = &streamAnalyticsOutputCosmosdbState{}
	if err := json.NewDecoder(av).Decode(saoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saoc.Type(), saoc.LocalName(), err)
	}
	return nil
}

func (saoc *StreamAnalyticsOutputCosmosdb) State() (*streamAnalyticsOutputCosmosdbState, bool) {
	return saoc.state, saoc.state != nil
}

func (saoc *StreamAnalyticsOutputCosmosdb) StateMust() *streamAnalyticsOutputCosmosdbState {
	if saoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saoc.Type(), saoc.LocalName()))
	}
	return saoc.state
}

func (saoc *StreamAnalyticsOutputCosmosdb) DependOn() terra.Reference {
	return terra.ReferenceResource(saoc)
}

type StreamAnalyticsOutputCosmosdbArgs struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// CosmosdbAccountKey: string, required
	CosmosdbAccountKey terra.StringValue `hcl:"cosmosdb_account_key,attr" validate:"required"`
	// CosmosdbSqlDatabaseId: string, required
	CosmosdbSqlDatabaseId terra.StringValue `hcl:"cosmosdb_sql_database_id,attr" validate:"required"`
	// DocumentId: string, optional
	DocumentId terra.StringValue `hcl:"document_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKey: string, optional
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// StreamAnalyticsJobId: string, required
	StreamAnalyticsJobId terra.StringValue `hcl:"stream_analytics_job_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *streamanalyticsoutputcosmosdb.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StreamAnalyticsOutputCosmosdb depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type streamAnalyticsOutputCosmosdbAttributes struct {
	ref terra.Reference
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("container_name"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) CosmosdbAccountKey() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("cosmosdb_account_key"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) CosmosdbSqlDatabaseId() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("cosmosdb_sql_database_id"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) DocumentId() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("document_id"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("id"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) Name() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("name"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("partition_key"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) StreamAnalyticsJobId() terra.StringValue {
	return terra.ReferenceString(saoc.ref.Append("stream_analytics_job_id"))
}

func (saoc streamAnalyticsOutputCosmosdbAttributes) Timeouts() streamanalyticsoutputcosmosdb.TimeoutsAttributes {
	return terra.ReferenceSingle[streamanalyticsoutputcosmosdb.TimeoutsAttributes](saoc.ref.Append("timeouts"))
}

type streamAnalyticsOutputCosmosdbState struct {
	ContainerName         string                                       `json:"container_name"`
	CosmosdbAccountKey    string                                       `json:"cosmosdb_account_key"`
	CosmosdbSqlDatabaseId string                                       `json:"cosmosdb_sql_database_id"`
	DocumentId            string                                       `json:"document_id"`
	Id                    string                                       `json:"id"`
	Name                  string                                       `json:"name"`
	PartitionKey          string                                       `json:"partition_key"`
	StreamAnalyticsJobId  string                                       `json:"stream_analytics_job_id"`
	Timeouts              *streamanalyticsoutputcosmosdb.TimeoutsState `json:"timeouts"`
}
