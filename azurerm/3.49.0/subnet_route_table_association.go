// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subnetroutetableassociation "github.com/golingon/terraproviders/azurerm/3.49.0/subnetroutetableassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubnetRouteTableAssociation(name string, args SubnetRouteTableAssociationArgs) *SubnetRouteTableAssociation {
	return &SubnetRouteTableAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubnetRouteTableAssociation)(nil)

type SubnetRouteTableAssociation struct {
	Name  string
	Args  SubnetRouteTableAssociationArgs
	state *subnetRouteTableAssociationState
}

func (srta *SubnetRouteTableAssociation) Type() string {
	return "azurerm_subnet_route_table_association"
}

func (srta *SubnetRouteTableAssociation) LocalName() string {
	return srta.Name
}

func (srta *SubnetRouteTableAssociation) Configuration() interface{} {
	return srta.Args
}

func (srta *SubnetRouteTableAssociation) Attributes() subnetRouteTableAssociationAttributes {
	return subnetRouteTableAssociationAttributes{ref: terra.ReferenceResource(srta)}
}

func (srta *SubnetRouteTableAssociation) ImportState(av io.Reader) error {
	srta.state = &subnetRouteTableAssociationState{}
	if err := json.NewDecoder(av).Decode(srta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srta.Type(), srta.LocalName(), err)
	}
	return nil
}

func (srta *SubnetRouteTableAssociation) State() (*subnetRouteTableAssociationState, bool) {
	return srta.state, srta.state != nil
}

func (srta *SubnetRouteTableAssociation) StateMust() *subnetRouteTableAssociationState {
	if srta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srta.Type(), srta.LocalName()))
	}
	return srta.state
}

func (srta *SubnetRouteTableAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(srta)
}

type SubnetRouteTableAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *subnetroutetableassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubnetRouteTableAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subnetRouteTableAssociationAttributes struct {
	ref terra.Reference
}

func (srta subnetRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srta.ref.Append("id"))
}

func (srta subnetRouteTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceString(srta.ref.Append("route_table_id"))
}

func (srta subnetRouteTableAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(srta.ref.Append("subnet_id"))
}

func (srta subnetRouteTableAssociationAttributes) Timeouts() subnetroutetableassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[subnetroutetableassociation.TimeoutsAttributes](srta.ref.Append("timeouts"))
}

type subnetRouteTableAssociationState struct {
	Id           string                                     `json:"id"`
	RouteTableId string                                     `json:"route_table_id"`
	SubnetId     string                                     `json:"subnet_id"`
	Timeouts     *subnetroutetableassociation.TimeoutsState `json:"timeouts"`
}
