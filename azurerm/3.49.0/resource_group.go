// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourcegroup "github.com/golingon/terraproviders/azurerm/3.49.0/resourcegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourceGroup(name string, args ResourceGroupArgs) *ResourceGroup {
	return &ResourceGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourceGroup)(nil)

type ResourceGroup struct {
	Name  string
	Args  ResourceGroupArgs
	state *resourceGroupState
}

func (rg *ResourceGroup) Type() string {
	return "azurerm_resource_group"
}

func (rg *ResourceGroup) LocalName() string {
	return rg.Name
}

func (rg *ResourceGroup) Configuration() interface{} {
	return rg.Args
}

func (rg *ResourceGroup) Attributes() resourceGroupAttributes {
	return resourceGroupAttributes{ref: terra.ReferenceResource(rg)}
}

func (rg *ResourceGroup) ImportState(av io.Reader) error {
	rg.state = &resourceGroupState{}
	if err := json.NewDecoder(av).Decode(rg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rg.Type(), rg.LocalName(), err)
	}
	return nil
}

func (rg *ResourceGroup) State() (*resourceGroupState, bool) {
	return rg.state, rg.state != nil
}

func (rg *ResourceGroup) StateMust() *resourceGroupState {
	if rg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rg.Type(), rg.LocalName()))
	}
	return rg.state
}

func (rg *ResourceGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rg)
}

type ResourceGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *resourcegroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourceGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourceGroupAttributes struct {
	ref terra.Reference
}

func (rg resourceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("id"))
}

func (rg resourceGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("location"))
}

func (rg resourceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("name"))
}

func (rg resourceGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rg.ref.Append("tags"))
}

func (rg resourceGroupAttributes) Timeouts() resourcegroup.TimeoutsAttributes {
	return terra.ReferenceSingle[resourcegroup.TimeoutsAttributes](rg.ref.Append("timeouts"))
}

type resourceGroupState struct {
	Id       string                       `json:"id"`
	Location string                       `json:"location"`
	Name     string                       `json:"name"`
	Tags     map[string]string            `json:"tags"`
	Timeouts *resourcegroup.TimeoutsState `json:"timeouts"`
}
