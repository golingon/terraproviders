// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubcluster "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubcluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubCluster(name string, args EventhubClusterArgs) *EventhubCluster {
	return &EventhubCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubCluster)(nil)

type EventhubCluster struct {
	Name  string
	Args  EventhubClusterArgs
	state *eventhubClusterState
}

func (ec *EventhubCluster) Type() string {
	return "azurerm_eventhub_cluster"
}

func (ec *EventhubCluster) LocalName() string {
	return ec.Name
}

func (ec *EventhubCluster) Configuration() interface{} {
	return ec.Args
}

func (ec *EventhubCluster) Attributes() eventhubClusterAttributes {
	return eventhubClusterAttributes{ref: terra.ReferenceResource(ec)}
}

func (ec *EventhubCluster) ImportState(av io.Reader) error {
	ec.state = &eventhubClusterState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

func (ec *EventhubCluster) State() (*eventhubClusterState, bool) {
	return ec.state, ec.state != nil
}

func (ec *EventhubCluster) StateMust() *eventhubClusterState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

func (ec *EventhubCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

type EventhubClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *eventhubcluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubClusterAttributes struct {
	ref terra.Reference
}

func (ec eventhubClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("id"))
}

func (ec eventhubClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("location"))
}

func (ec eventhubClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("name"))
}

func (ec eventhubClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("resource_group_name"))
}

func (ec eventhubClusterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("sku_name"))
}

func (ec eventhubClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags"))
}

func (ec eventhubClusterAttributes) Timeouts() eventhubcluster.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubcluster.TimeoutsAttributes](ec.ref.Append("timeouts"))
}

type eventhubClusterState struct {
	Id                string                         `json:"id"`
	Location          string                         `json:"location"`
	Name              string                         `json:"name"`
	ResourceGroupName string                         `json:"resource_group_name"`
	SkuName           string                         `json:"sku_name"`
	Tags              map[string]string              `json:"tags"`
	Timeouts          *eventhubcluster.TimeoutsState `json:"timeouts"`
}
