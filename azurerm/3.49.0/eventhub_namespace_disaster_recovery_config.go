// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubnamespacedisasterrecoveryconfig "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubnamespacedisasterrecoveryconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubNamespaceDisasterRecoveryConfig(name string, args EventhubNamespaceDisasterRecoveryConfigArgs) *EventhubNamespaceDisasterRecoveryConfig {
	return &EventhubNamespaceDisasterRecoveryConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubNamespaceDisasterRecoveryConfig)(nil)

type EventhubNamespaceDisasterRecoveryConfig struct {
	Name  string
	Args  EventhubNamespaceDisasterRecoveryConfigArgs
	state *eventhubNamespaceDisasterRecoveryConfigState
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) Type() string {
	return "azurerm_eventhub_namespace_disaster_recovery_config"
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) LocalName() string {
	return endrc.Name
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) Configuration() interface{} {
	return endrc.Args
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) Attributes() eventhubNamespaceDisasterRecoveryConfigAttributes {
	return eventhubNamespaceDisasterRecoveryConfigAttributes{ref: terra.ReferenceResource(endrc)}
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) ImportState(av io.Reader) error {
	endrc.state = &eventhubNamespaceDisasterRecoveryConfigState{}
	if err := json.NewDecoder(av).Decode(endrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", endrc.Type(), endrc.LocalName(), err)
	}
	return nil
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) State() (*eventhubNamespaceDisasterRecoveryConfigState, bool) {
	return endrc.state, endrc.state != nil
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) StateMust() *eventhubNamespaceDisasterRecoveryConfigState {
	if endrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", endrc.Type(), endrc.LocalName()))
	}
	return endrc.state
}

func (endrc *EventhubNamespaceDisasterRecoveryConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(endrc)
}

type EventhubNamespaceDisasterRecoveryConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// PartnerNamespaceId: string, required
	PartnerNamespaceId terra.StringValue `hcl:"partner_namespace_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *eventhubnamespacedisasterrecoveryconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubNamespaceDisasterRecoveryConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubNamespaceDisasterRecoveryConfigAttributes struct {
	ref terra.Reference
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(endrc.ref.Append("id"))
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(endrc.ref.Append("name"))
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(endrc.ref.Append("namespace_name"))
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) PartnerNamespaceId() terra.StringValue {
	return terra.ReferenceString(endrc.ref.Append("partner_namespace_id"))
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(endrc.ref.Append("resource_group_name"))
}

func (endrc eventhubNamespaceDisasterRecoveryConfigAttributes) Timeouts() eventhubnamespacedisasterrecoveryconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubnamespacedisasterrecoveryconfig.TimeoutsAttributes](endrc.ref.Append("timeouts"))
}

type eventhubNamespaceDisasterRecoveryConfigState struct {
	Id                 string                                                 `json:"id"`
	Name               string                                                 `json:"name"`
	NamespaceName      string                                                 `json:"namespace_name"`
	PartnerNamespaceId string                                                 `json:"partner_namespace_id"`
	ResourceGroupName  string                                                 `json:"resource_group_name"`
	Timeouts           *eventhubnamespacedisasterrecoveryconfig.TimeoutsState `json:"timeouts"`
}
