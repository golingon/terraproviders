// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistry "github.com/golingon/terraproviders/azurerm/3.49.0/containerregistry"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerRegistry(name string, args ContainerRegistryArgs) *ContainerRegistry {
	return &ContainerRegistry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistry)(nil)

type ContainerRegistry struct {
	Name  string
	Args  ContainerRegistryArgs
	state *containerRegistryState
}

func (cr *ContainerRegistry) Type() string {
	return "azurerm_container_registry"
}

func (cr *ContainerRegistry) LocalName() string {
	return cr.Name
}

func (cr *ContainerRegistry) Configuration() interface{} {
	return cr.Args
}

func (cr *ContainerRegistry) Attributes() containerRegistryAttributes {
	return containerRegistryAttributes{ref: terra.ReferenceResource(cr)}
}

func (cr *ContainerRegistry) ImportState(av io.Reader) error {
	cr.state = &containerRegistryState{}
	if err := json.NewDecoder(av).Decode(cr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cr.Type(), cr.LocalName(), err)
	}
	return nil
}

func (cr *ContainerRegistry) State() (*containerRegistryState, bool) {
	return cr.state, cr.state != nil
}

func (cr *ContainerRegistry) StateMust() *containerRegistryState {
	if cr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cr.Type(), cr.LocalName()))
	}
	return cr.state
}

func (cr *ContainerRegistry) DependOn() terra.Reference {
	return terra.ReferenceResource(cr)
}

type ContainerRegistryArgs struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// AnonymousPullEnabled: bool, optional
	AnonymousPullEnabled terra.BoolValue `hcl:"anonymous_pull_enabled,attr"`
	// DataEndpointEnabled: bool, optional
	DataEndpointEnabled terra.BoolValue `hcl:"data_endpoint_enabled,attr"`
	// ExportPolicyEnabled: bool, optional
	ExportPolicyEnabled terra.BoolValue `hcl:"export_policy_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkRuleBypassOption: string, optional
	NetworkRuleBypassOption terra.StringValue `hcl:"network_rule_bypass_option,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// QuarantinePolicyEnabled: bool, optional
	QuarantinePolicyEnabled terra.BoolValue `hcl:"quarantine_policy_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundancyEnabled: bool, optional
	ZoneRedundancyEnabled terra.BoolValue `hcl:"zone_redundancy_enabled,attr"`
	// Encryption: min=0
	Encryption []containerregistry.Encryption `hcl:"encryption,block" validate:"min=0"`
	// NetworkRuleSet: min=0
	NetworkRuleSet []containerregistry.NetworkRuleSet `hcl:"network_rule_set,block" validate:"min=0"`
	// RetentionPolicy: min=0
	RetentionPolicy []containerregistry.RetentionPolicy `hcl:"retention_policy,block" validate:"min=0"`
	// TrustPolicy: min=0
	TrustPolicy []containerregistry.TrustPolicy `hcl:"trust_policy,block" validate:"min=0"`
	// Georeplications: min=0
	Georeplications []containerregistry.Georeplications `hcl:"georeplications,block" validate:"min=0"`
	// Identity: optional
	Identity *containerregistry.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *containerregistry.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerRegistry depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerRegistryAttributes struct {
	ref terra.Reference
}

func (cr containerRegistryAttributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("admin_enabled"))
}

func (cr containerRegistryAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("admin_password"))
}

func (cr containerRegistryAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("admin_username"))
}

func (cr containerRegistryAttributes) AnonymousPullEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("anonymous_pull_enabled"))
}

func (cr containerRegistryAttributes) DataEndpointEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("data_endpoint_enabled"))
}

func (cr containerRegistryAttributes) ExportPolicyEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("export_policy_enabled"))
}

func (cr containerRegistryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("id"))
}

func (cr containerRegistryAttributes) Location() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("location"))
}

func (cr containerRegistryAttributes) LoginServer() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("login_server"))
}

func (cr containerRegistryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("name"))
}

func (cr containerRegistryAttributes) NetworkRuleBypassOption() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("network_rule_bypass_option"))
}

func (cr containerRegistryAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("public_network_access_enabled"))
}

func (cr containerRegistryAttributes) QuarantinePolicyEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("quarantine_policy_enabled"))
}

func (cr containerRegistryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("resource_group_name"))
}

func (cr containerRegistryAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("sku"))
}

func (cr containerRegistryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cr.ref.Append("tags"))
}

func (cr containerRegistryAttributes) ZoneRedundancyEnabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("zone_redundancy_enabled"))
}

func (cr containerRegistryAttributes) Encryption() terra.ListValue[containerregistry.EncryptionAttributes] {
	return terra.ReferenceList[containerregistry.EncryptionAttributes](cr.ref.Append("encryption"))
}

func (cr containerRegistryAttributes) NetworkRuleSet() terra.ListValue[containerregistry.NetworkRuleSetAttributes] {
	return terra.ReferenceList[containerregistry.NetworkRuleSetAttributes](cr.ref.Append("network_rule_set"))
}

func (cr containerRegistryAttributes) RetentionPolicy() terra.ListValue[containerregistry.RetentionPolicyAttributes] {
	return terra.ReferenceList[containerregistry.RetentionPolicyAttributes](cr.ref.Append("retention_policy"))
}

func (cr containerRegistryAttributes) TrustPolicy() terra.ListValue[containerregistry.TrustPolicyAttributes] {
	return terra.ReferenceList[containerregistry.TrustPolicyAttributes](cr.ref.Append("trust_policy"))
}

func (cr containerRegistryAttributes) Georeplications() terra.ListValue[containerregistry.GeoreplicationsAttributes] {
	return terra.ReferenceList[containerregistry.GeoreplicationsAttributes](cr.ref.Append("georeplications"))
}

func (cr containerRegistryAttributes) Identity() terra.ListValue[containerregistry.IdentityAttributes] {
	return terra.ReferenceList[containerregistry.IdentityAttributes](cr.ref.Append("identity"))
}

func (cr containerRegistryAttributes) Timeouts() containerregistry.TimeoutsAttributes {
	return terra.ReferenceSingle[containerregistry.TimeoutsAttributes](cr.ref.Append("timeouts"))
}

type containerRegistryState struct {
	AdminEnabled               bool                                     `json:"admin_enabled"`
	AdminPassword              string                                   `json:"admin_password"`
	AdminUsername              string                                   `json:"admin_username"`
	AnonymousPullEnabled       bool                                     `json:"anonymous_pull_enabled"`
	DataEndpointEnabled        bool                                     `json:"data_endpoint_enabled"`
	ExportPolicyEnabled        bool                                     `json:"export_policy_enabled"`
	Id                         string                                   `json:"id"`
	Location                   string                                   `json:"location"`
	LoginServer                string                                   `json:"login_server"`
	Name                       string                                   `json:"name"`
	NetworkRuleBypassOption    string                                   `json:"network_rule_bypass_option"`
	PublicNetworkAccessEnabled bool                                     `json:"public_network_access_enabled"`
	QuarantinePolicyEnabled    bool                                     `json:"quarantine_policy_enabled"`
	ResourceGroupName          string                                   `json:"resource_group_name"`
	Sku                        string                                   `json:"sku"`
	Tags                       map[string]string                        `json:"tags"`
	ZoneRedundancyEnabled      bool                                     `json:"zone_redundancy_enabled"`
	Encryption                 []containerregistry.EncryptionState      `json:"encryption"`
	NetworkRuleSet             []containerregistry.NetworkRuleSetState  `json:"network_rule_set"`
	RetentionPolicy            []containerregistry.RetentionPolicyState `json:"retention_policy"`
	TrustPolicy                []containerregistry.TrustPolicyState     `json:"trust_policy"`
	Georeplications            []containerregistry.GeoreplicationsState `json:"georeplications"`
	Identity                   []containerregistry.IdentityState        `json:"identity"`
	Timeouts                   *containerregistry.TimeoutsState         `json:"timeouts"`
}
