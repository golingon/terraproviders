// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	siterecoveryreplicationpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/siterecoveryreplicationpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSiteRecoveryReplicationPolicy(name string, args SiteRecoveryReplicationPolicyArgs) *SiteRecoveryReplicationPolicy {
	return &SiteRecoveryReplicationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SiteRecoveryReplicationPolicy)(nil)

type SiteRecoveryReplicationPolicy struct {
	Name  string
	Args  SiteRecoveryReplicationPolicyArgs
	state *siteRecoveryReplicationPolicyState
}

func (srrp *SiteRecoveryReplicationPolicy) Type() string {
	return "azurerm_site_recovery_replication_policy"
}

func (srrp *SiteRecoveryReplicationPolicy) LocalName() string {
	return srrp.Name
}

func (srrp *SiteRecoveryReplicationPolicy) Configuration() interface{} {
	return srrp.Args
}

func (srrp *SiteRecoveryReplicationPolicy) Attributes() siteRecoveryReplicationPolicyAttributes {
	return siteRecoveryReplicationPolicyAttributes{ref: terra.ReferenceResource(srrp)}
}

func (srrp *SiteRecoveryReplicationPolicy) ImportState(av io.Reader) error {
	srrp.state = &siteRecoveryReplicationPolicyState{}
	if err := json.NewDecoder(av).Decode(srrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srrp.Type(), srrp.LocalName(), err)
	}
	return nil
}

func (srrp *SiteRecoveryReplicationPolicy) State() (*siteRecoveryReplicationPolicyState, bool) {
	return srrp.state, srrp.state != nil
}

func (srrp *SiteRecoveryReplicationPolicy) StateMust() *siteRecoveryReplicationPolicyState {
	if srrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srrp.Type(), srrp.LocalName()))
	}
	return srrp.state
}

func (srrp *SiteRecoveryReplicationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(srrp)
}

type SiteRecoveryReplicationPolicyArgs struct {
	// ApplicationConsistentSnapshotFrequencyInMinutes: number, required
	ApplicationConsistentSnapshotFrequencyInMinutes terra.NumberValue `hcl:"application_consistent_snapshot_frequency_in_minutes,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryPointRetentionInMinutes: number, required
	RecoveryPointRetentionInMinutes terra.NumberValue `hcl:"recovery_point_retention_in_minutes,attr" validate:"required"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *siterecoveryreplicationpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SiteRecoveryReplicationPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type siteRecoveryReplicationPolicyAttributes struct {
	ref terra.Reference
}

func (srrp siteRecoveryReplicationPolicyAttributes) ApplicationConsistentSnapshotFrequencyInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(srrp.ref.Append("application_consistent_snapshot_frequency_in_minutes"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srrp.ref.Append("id"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(srrp.ref.Append("name"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) RecoveryPointRetentionInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(srrp.ref.Append("recovery_point_retention_in_minutes"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceString(srrp.ref.Append("recovery_vault_name"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(srrp.ref.Append("resource_group_name"))
}

func (srrp siteRecoveryReplicationPolicyAttributes) Timeouts() siterecoveryreplicationpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[siterecoveryreplicationpolicy.TimeoutsAttributes](srrp.ref.Append("timeouts"))
}

type siteRecoveryReplicationPolicyState struct {
	ApplicationConsistentSnapshotFrequencyInMinutes float64                                      `json:"application_consistent_snapshot_frequency_in_minutes"`
	Id                                              string                                       `json:"id"`
	Name                                            string                                       `json:"name"`
	RecoveryPointRetentionInMinutes                 float64                                      `json:"recovery_point_retention_in_minutes"`
	RecoveryVaultName                               string                                       `json:"recovery_vault_name"`
	ResourceGroupName                               string                                       `json:"resource_group_name"`
	Timeouts                                        *siterecoveryreplicationpolicy.TimeoutsState `json:"timeouts"`
}
