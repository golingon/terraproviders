// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitoractivitylogalert

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Action struct {
	// ActionGroupId: string, required
	ActionGroupId terra.StringValue `hcl:"action_group_id,attr" validate:"required"`
	// WebhookProperties: map of string, optional
	WebhookProperties terra.MapValue[terra.StringValue] `hcl:"webhook_properties,attr"`
}

type Criteria struct {
	// Caller: string, optional
	Caller terra.StringValue `hcl:"caller,attr"`
	// Category: string, required
	Category terra.StringValue `hcl:"category,attr" validate:"required"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// OperationName: string, optional
	OperationName terra.StringValue `hcl:"operation_name,attr"`
	// RecommendationCategory: string, optional
	RecommendationCategory terra.StringValue `hcl:"recommendation_category,attr"`
	// RecommendationImpact: string, optional
	RecommendationImpact terra.StringValue `hcl:"recommendation_impact,attr"`
	// RecommendationType: string, optional
	RecommendationType terra.StringValue `hcl:"recommendation_type,attr"`
	// ResourceGroup: string, optional
	ResourceGroup terra.StringValue `hcl:"resource_group,attr"`
	// ResourceId: string, optional
	ResourceId terra.StringValue `hcl:"resource_id,attr"`
	// ResourceProvider: string, optional
	ResourceProvider terra.StringValue `hcl:"resource_provider,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// SubStatus: string, optional
	SubStatus terra.StringValue `hcl:"sub_status,attr"`
	// ResourceHealth: min=0
	ResourceHealth []ResourceHealth `hcl:"resource_health,block" validate:"min=0"`
	// ServiceHealth: min=0
	ServiceHealth []ServiceHealth `hcl:"service_health,block" validate:"min=0"`
}

type ResourceHealth struct {
	// Current: set of string, optional
	Current terra.SetValue[terra.StringValue] `hcl:"current,attr"`
	// Previous: set of string, optional
	Previous terra.SetValue[terra.StringValue] `hcl:"previous,attr"`
	// Reason: set of string, optional
	Reason terra.SetValue[terra.StringValue] `hcl:"reason,attr"`
}

type ServiceHealth struct {
	// Events: set of string, optional
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr"`
	// Locations: set of string, optional
	Locations terra.SetValue[terra.StringValue] `hcl:"locations,attr"`
	// Services: set of string, optional
	Services terra.SetValue[terra.StringValue] `hcl:"services,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionGroupId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_group_id"))
}

func (a ActionAttributes) WebhookProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("webhook_properties"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) Caller() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("caller"))
}

func (c CriteriaAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("category"))
}

func (c CriteriaAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("level"))
}

func (c CriteriaAttributes) OperationName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("operation_name"))
}

func (c CriteriaAttributes) RecommendationCategory() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("recommendation_category"))
}

func (c CriteriaAttributes) RecommendationImpact() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("recommendation_impact"))
}

func (c CriteriaAttributes) RecommendationType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("recommendation_type"))
}

func (c CriteriaAttributes) ResourceGroup() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resource_group"))
}

func (c CriteriaAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resource_id"))
}

func (c CriteriaAttributes) ResourceProvider() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resource_provider"))
}

func (c CriteriaAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resource_type"))
}

func (c CriteriaAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("status"))
}

func (c CriteriaAttributes) SubStatus() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sub_status"))
}

func (c CriteriaAttributes) ResourceHealth() terra.ListValue[ResourceHealthAttributes] {
	return terra.ReferenceAsList[ResourceHealthAttributes](c.ref.Append("resource_health"))
}

func (c CriteriaAttributes) ServiceHealth() terra.ListValue[ServiceHealthAttributes] {
	return terra.ReferenceAsList[ServiceHealthAttributes](c.ref.Append("service_health"))
}

type ResourceHealthAttributes struct {
	ref terra.Reference
}

func (rh ResourceHealthAttributes) InternalRef() (terra.Reference, error) {
	return rh.ref, nil
}

func (rh ResourceHealthAttributes) InternalWithRef(ref terra.Reference) ResourceHealthAttributes {
	return ResourceHealthAttributes{ref: ref}
}

func (rh ResourceHealthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rh.ref.InternalTokens()
}

func (rh ResourceHealthAttributes) Current() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rh.ref.Append("current"))
}

func (rh ResourceHealthAttributes) Previous() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rh.ref.Append("previous"))
}

func (rh ResourceHealthAttributes) Reason() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rh.ref.Append("reason"))
}

type ServiceHealthAttributes struct {
	ref terra.Reference
}

func (sh ServiceHealthAttributes) InternalRef() (terra.Reference, error) {
	return sh.ref, nil
}

func (sh ServiceHealthAttributes) InternalWithRef(ref terra.Reference) ServiceHealthAttributes {
	return ServiceHealthAttributes{ref: ref}
}

func (sh ServiceHealthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sh.ref.InternalTokens()
}

func (sh ServiceHealthAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sh.ref.Append("events"))
}

func (sh ServiceHealthAttributes) Locations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sh.ref.Append("locations"))
}

func (sh ServiceHealthAttributes) Services() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sh.ref.Append("services"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	ActionGroupId     string            `json:"action_group_id"`
	WebhookProperties map[string]string `json:"webhook_properties"`
}

type CriteriaState struct {
	Caller                 string                `json:"caller"`
	Category               string                `json:"category"`
	Level                  string                `json:"level"`
	OperationName          string                `json:"operation_name"`
	RecommendationCategory string                `json:"recommendation_category"`
	RecommendationImpact   string                `json:"recommendation_impact"`
	RecommendationType     string                `json:"recommendation_type"`
	ResourceGroup          string                `json:"resource_group"`
	ResourceId             string                `json:"resource_id"`
	ResourceProvider       string                `json:"resource_provider"`
	ResourceType           string                `json:"resource_type"`
	Status                 string                `json:"status"`
	SubStatus              string                `json:"sub_status"`
	ResourceHealth         []ResourceHealthState `json:"resource_health"`
	ServiceHealth          []ServiceHealthState  `json:"service_health"`
}

type ResourceHealthState struct {
	Current  []string `json:"current"`
	Previous []string `json:"previous"`
	Reason   []string `json:"reason"`
}

type ServiceHealthState struct {
	Events    []string `json:"events"`
	Locations []string `json:"locations"`
	Services  []string `json:"services"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
