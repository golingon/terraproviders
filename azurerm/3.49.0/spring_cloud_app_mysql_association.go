// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudappmysqlassociation "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudappmysqlassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudAppMysqlAssociation(name string, args SpringCloudAppMysqlAssociationArgs) *SpringCloudAppMysqlAssociation {
	return &SpringCloudAppMysqlAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudAppMysqlAssociation)(nil)

type SpringCloudAppMysqlAssociation struct {
	Name  string
	Args  SpringCloudAppMysqlAssociationArgs
	state *springCloudAppMysqlAssociationState
}

func (scama *SpringCloudAppMysqlAssociation) Type() string {
	return "azurerm_spring_cloud_app_mysql_association"
}

func (scama *SpringCloudAppMysqlAssociation) LocalName() string {
	return scama.Name
}

func (scama *SpringCloudAppMysqlAssociation) Configuration() interface{} {
	return scama.Args
}

func (scama *SpringCloudAppMysqlAssociation) Attributes() springCloudAppMysqlAssociationAttributes {
	return springCloudAppMysqlAssociationAttributes{ref: terra.ReferenceResource(scama)}
}

func (scama *SpringCloudAppMysqlAssociation) ImportState(av io.Reader) error {
	scama.state = &springCloudAppMysqlAssociationState{}
	if err := json.NewDecoder(av).Decode(scama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scama.Type(), scama.LocalName(), err)
	}
	return nil
}

func (scama *SpringCloudAppMysqlAssociation) State() (*springCloudAppMysqlAssociationState, bool) {
	return scama.state, scama.state != nil
}

func (scama *SpringCloudAppMysqlAssociation) StateMust() *springCloudAppMysqlAssociationState {
	if scama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scama.Type(), scama.LocalName()))
	}
	return scama.state
}

func (scama *SpringCloudAppMysqlAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(scama)
}

type SpringCloudAppMysqlAssociationArgs struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MysqlServerId: string, required
	MysqlServerId terra.StringValue `hcl:"mysql_server_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *springcloudappmysqlassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudAppMysqlAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudAppMysqlAssociationAttributes struct {
	ref terra.Reference
}

func (scama springCloudAppMysqlAssociationAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("database_name"))
}

func (scama springCloudAppMysqlAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("id"))
}

func (scama springCloudAppMysqlAssociationAttributes) MysqlServerId() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("mysql_server_id"))
}

func (scama springCloudAppMysqlAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("name"))
}

func (scama springCloudAppMysqlAssociationAttributes) Password() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("password"))
}

func (scama springCloudAppMysqlAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("spring_cloud_app_id"))
}

func (scama springCloudAppMysqlAssociationAttributes) Username() terra.StringValue {
	return terra.ReferenceString(scama.ref.Append("username"))
}

func (scama springCloudAppMysqlAssociationAttributes) Timeouts() springcloudappmysqlassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudappmysqlassociation.TimeoutsAttributes](scama.ref.Append("timeouts"))
}

type springCloudAppMysqlAssociationState struct {
	DatabaseName     string                                        `json:"database_name"`
	Id               string                                        `json:"id"`
	MysqlServerId    string                                        `json:"mysql_server_id"`
	Name             string                                        `json:"name"`
	Password         string                                        `json:"password"`
	SpringCloudAppId string                                        `json:"spring_cloud_app_id"`
	Username         string                                        `json:"username"`
	Timeouts         *springcloudappmysqlassociation.TimeoutsState `json:"timeouts"`
}
