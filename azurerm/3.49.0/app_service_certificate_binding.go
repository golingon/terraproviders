// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appservicecertificatebinding "github.com/golingon/terraproviders/azurerm/3.49.0/appservicecertificatebinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServiceCertificateBinding(name string, args AppServiceCertificateBindingArgs) *AppServiceCertificateBinding {
	return &AppServiceCertificateBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServiceCertificateBinding)(nil)

type AppServiceCertificateBinding struct {
	Name  string
	Args  AppServiceCertificateBindingArgs
	state *appServiceCertificateBindingState
}

func (ascb *AppServiceCertificateBinding) Type() string {
	return "azurerm_app_service_certificate_binding"
}

func (ascb *AppServiceCertificateBinding) LocalName() string {
	return ascb.Name
}

func (ascb *AppServiceCertificateBinding) Configuration() interface{} {
	return ascb.Args
}

func (ascb *AppServiceCertificateBinding) Attributes() appServiceCertificateBindingAttributes {
	return appServiceCertificateBindingAttributes{ref: terra.ReferenceResource(ascb)}
}

func (ascb *AppServiceCertificateBinding) ImportState(av io.Reader) error {
	ascb.state = &appServiceCertificateBindingState{}
	if err := json.NewDecoder(av).Decode(ascb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascb.Type(), ascb.LocalName(), err)
	}
	return nil
}

func (ascb *AppServiceCertificateBinding) State() (*appServiceCertificateBindingState, bool) {
	return ascb.state, ascb.state != nil
}

func (ascb *AppServiceCertificateBinding) StateMust() *appServiceCertificateBindingState {
	if ascb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascb.Type(), ascb.LocalName()))
	}
	return ascb.state
}

func (ascb *AppServiceCertificateBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ascb)
}

type AppServiceCertificateBindingArgs struct {
	// CertificateId: string, required
	CertificateId terra.StringValue `hcl:"certificate_id,attr" validate:"required"`
	// HostnameBindingId: string, required
	HostnameBindingId terra.StringValue `hcl:"hostname_binding_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SslState: string, required
	SslState terra.StringValue `hcl:"ssl_state,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *appservicecertificatebinding.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServiceCertificateBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServiceCertificateBindingAttributes struct {
	ref terra.Reference
}

func (ascb appServiceCertificateBindingAttributes) AppServiceName() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("app_service_name"))
}

func (ascb appServiceCertificateBindingAttributes) CertificateId() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("certificate_id"))
}

func (ascb appServiceCertificateBindingAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("hostname"))
}

func (ascb appServiceCertificateBindingAttributes) HostnameBindingId() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("hostname_binding_id"))
}

func (ascb appServiceCertificateBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("id"))
}

func (ascb appServiceCertificateBindingAttributes) SslState() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("ssl_state"))
}

func (ascb appServiceCertificateBindingAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(ascb.ref.Append("thumbprint"))
}

func (ascb appServiceCertificateBindingAttributes) Timeouts() appservicecertificatebinding.TimeoutsAttributes {
	return terra.ReferenceSingle[appservicecertificatebinding.TimeoutsAttributes](ascb.ref.Append("timeouts"))
}

type appServiceCertificateBindingState struct {
	AppServiceName    string                                      `json:"app_service_name"`
	CertificateId     string                                      `json:"certificate_id"`
	Hostname          string                                      `json:"hostname"`
	HostnameBindingId string                                      `json:"hostname_binding_id"`
	Id                string                                      `json:"id"`
	SslState          string                                      `json:"ssl_state"`
	Thumbprint        string                                      `json:"thumbprint"`
	Timeouts          *appservicecertificatebinding.TimeoutsState `json:"timeouts"`
}
