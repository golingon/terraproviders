// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package servicefabricmanagedcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Authentication struct {
	// ActiveDirectory: optional
	ActiveDirectory *ActiveDirectory `hcl:"active_directory,block"`
	// Certificate: min=0
	Certificate []Certificate `hcl:"certificate,block" validate:"min=0"`
}

type ActiveDirectory struct {
	// ClientApplicationId: string, required
	ClientApplicationId terra.StringValue `hcl:"client_application_id,attr" validate:"required"`
	// ClusterApplicationId: string, required
	ClusterApplicationId terra.StringValue `hcl:"cluster_application_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type Certificate struct {
	// CommonName: string, optional
	CommonName terra.StringValue `hcl:"common_name,attr"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type CustomFabricSetting struct {
	// Parameter: string, required
	Parameter terra.StringValue `hcl:"parameter,attr" validate:"required"`
	// Section: string, required
	Section terra.StringValue `hcl:"section,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type LbRule struct {
	// BackendPort: number, required
	BackendPort terra.NumberValue `hcl:"backend_port,attr" validate:"required"`
	// FrontendPort: number, required
	FrontendPort terra.NumberValue `hcl:"frontend_port,attr" validate:"required"`
	// ProbeProtocol: string, required
	ProbeProtocol terra.StringValue `hcl:"probe_protocol,attr" validate:"required"`
	// ProbeRequestPath: string, optional
	ProbeRequestPath terra.StringValue `hcl:"probe_request_path,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type NodeType struct {
	// ApplicationPortRange: string, required
	ApplicationPortRange terra.StringValue `hcl:"application_port_range,attr" validate:"required"`
	// Capacities: map of string, optional
	Capacities terra.MapValue[terra.StringValue] `hcl:"capacities,attr"`
	// DataDiskSizeGb: number, required
	DataDiskSizeGb terra.NumberValue `hcl:"data_disk_size_gb,attr" validate:"required"`
	// DataDiskType: string, optional
	DataDiskType terra.StringValue `hcl:"data_disk_type,attr"`
	// EphemeralPortRange: string, required
	EphemeralPortRange terra.StringValue `hcl:"ephemeral_port_range,attr" validate:"required"`
	// MultiplePlacementGroupsEnabled: bool, optional
	MultiplePlacementGroupsEnabled terra.BoolValue `hcl:"multiple_placement_groups_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlacementProperties: map of string, optional
	PlacementProperties terra.MapValue[terra.StringValue] `hcl:"placement_properties,attr"`
	// Primary: bool, optional
	Primary terra.BoolValue `hcl:"primary,attr"`
	// Stateless: bool, optional
	Stateless terra.BoolValue `hcl:"stateless,attr"`
	// VmImageOffer: string, required
	VmImageOffer terra.StringValue `hcl:"vm_image_offer,attr" validate:"required"`
	// VmImagePublisher: string, required
	VmImagePublisher terra.StringValue `hcl:"vm_image_publisher,attr" validate:"required"`
	// VmImageSku: string, required
	VmImageSku terra.StringValue `hcl:"vm_image_sku,attr" validate:"required"`
	// VmImageVersion: string, required
	VmImageVersion terra.StringValue `hcl:"vm_image_version,attr" validate:"required"`
	// VmInstanceCount: number, required
	VmInstanceCount terra.NumberValue `hcl:"vm_instance_count,attr" validate:"required"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// VmSecrets: min=0
	VmSecrets []VmSecrets `hcl:"vm_secrets,block" validate:"min=0"`
}

type VmSecrets struct {
	// VaultId: string, required
	VaultId terra.StringValue `hcl:"vault_id,attr" validate:"required"`
	// Certificates: min=1
	Certificates []Certificates `hcl:"certificates,block" validate:"min=1"`
}

type Certificates struct {
	// Store: string, required
	Store terra.StringValue `hcl:"store,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) ActiveDirectory() terra.ListValue[ActiveDirectoryAttributes] {
	return terra.ReferenceList[ActiveDirectoryAttributes](a.ref.Append("active_directory"))
}

func (a AuthenticationAttributes) Certificate() terra.ListValue[CertificateAttributes] {
	return terra.ReferenceList[CertificateAttributes](a.ref.Append("certificate"))
}

type ActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad ActiveDirectoryAttributes) InternalRef() terra.Reference {
	return ad.ref
}

func (ad ActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) ActiveDirectoryAttributes {
	return ActiveDirectoryAttributes{ref: ref}
}

func (ad ActiveDirectoryAttributes) InternalTokens() hclwrite.Tokens {
	return ad.ref.InternalTokens()
}

func (ad ActiveDirectoryAttributes) ClientApplicationId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("client_application_id"))
}

func (ad ActiveDirectoryAttributes) ClusterApplicationId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("cluster_application_id"))
}

func (ad ActiveDirectoryAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("tenant_id"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) CommonName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("common_name"))
}

func (c CertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("thumbprint"))
}

func (c CertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("type"))
}

type CustomFabricSettingAttributes struct {
	ref terra.Reference
}

func (cfs CustomFabricSettingAttributes) InternalRef() terra.Reference {
	return cfs.ref
}

func (cfs CustomFabricSettingAttributes) InternalWithRef(ref terra.Reference) CustomFabricSettingAttributes {
	return CustomFabricSettingAttributes{ref: ref}
}

func (cfs CustomFabricSettingAttributes) InternalTokens() hclwrite.Tokens {
	return cfs.ref.InternalTokens()
}

func (cfs CustomFabricSettingAttributes) Parameter() terra.StringValue {
	return terra.ReferenceString(cfs.ref.Append("parameter"))
}

func (cfs CustomFabricSettingAttributes) Section() terra.StringValue {
	return terra.ReferenceString(cfs.ref.Append("section"))
}

func (cfs CustomFabricSettingAttributes) Value() terra.StringValue {
	return terra.ReferenceString(cfs.ref.Append("value"))
}

type LbRuleAttributes struct {
	ref terra.Reference
}

func (lr LbRuleAttributes) InternalRef() terra.Reference {
	return lr.ref
}

func (lr LbRuleAttributes) InternalWithRef(ref terra.Reference) LbRuleAttributes {
	return LbRuleAttributes{ref: ref}
}

func (lr LbRuleAttributes) InternalTokens() hclwrite.Tokens {
	return lr.ref.InternalTokens()
}

func (lr LbRuleAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceNumber(lr.ref.Append("backend_port"))
}

func (lr LbRuleAttributes) FrontendPort() terra.NumberValue {
	return terra.ReferenceNumber(lr.ref.Append("frontend_port"))
}

func (lr LbRuleAttributes) ProbeProtocol() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("probe_protocol"))
}

func (lr LbRuleAttributes) ProbeRequestPath() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("probe_request_path"))
}

func (lr LbRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("protocol"))
}

type NodeTypeAttributes struct {
	ref terra.Reference
}

func (nt NodeTypeAttributes) InternalRef() terra.Reference {
	return nt.ref
}

func (nt NodeTypeAttributes) InternalWithRef(ref terra.Reference) NodeTypeAttributes {
	return NodeTypeAttributes{ref: ref}
}

func (nt NodeTypeAttributes) InternalTokens() hclwrite.Tokens {
	return nt.ref.InternalTokens()
}

func (nt NodeTypeAttributes) ApplicationPortRange() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("application_port_range"))
}

func (nt NodeTypeAttributes) Capacities() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nt.ref.Append("capacities"))
}

func (nt NodeTypeAttributes) DataDiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(nt.ref.Append("data_disk_size_gb"))
}

func (nt NodeTypeAttributes) DataDiskType() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("data_disk_type"))
}

func (nt NodeTypeAttributes) EphemeralPortRange() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("ephemeral_port_range"))
}

func (nt NodeTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("id"))
}

func (nt NodeTypeAttributes) MultiplePlacementGroupsEnabled() terra.BoolValue {
	return terra.ReferenceBool(nt.ref.Append("multiple_placement_groups_enabled"))
}

func (nt NodeTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("name"))
}

func (nt NodeTypeAttributes) PlacementProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nt.ref.Append("placement_properties"))
}

func (nt NodeTypeAttributes) Primary() terra.BoolValue {
	return terra.ReferenceBool(nt.ref.Append("primary"))
}

func (nt NodeTypeAttributes) Stateless() terra.BoolValue {
	return terra.ReferenceBool(nt.ref.Append("stateless"))
}

func (nt NodeTypeAttributes) VmImageOffer() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("vm_image_offer"))
}

func (nt NodeTypeAttributes) VmImagePublisher() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("vm_image_publisher"))
}

func (nt NodeTypeAttributes) VmImageSku() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("vm_image_sku"))
}

func (nt NodeTypeAttributes) VmImageVersion() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("vm_image_version"))
}

func (nt NodeTypeAttributes) VmInstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(nt.ref.Append("vm_instance_count"))
}

func (nt NodeTypeAttributes) VmSize() terra.StringValue {
	return terra.ReferenceString(nt.ref.Append("vm_size"))
}

func (nt NodeTypeAttributes) VmSecrets() terra.ListValue[VmSecretsAttributes] {
	return terra.ReferenceList[VmSecretsAttributes](nt.ref.Append("vm_secrets"))
}

type VmSecretsAttributes struct {
	ref terra.Reference
}

func (vs VmSecretsAttributes) InternalRef() terra.Reference {
	return vs.ref
}

func (vs VmSecretsAttributes) InternalWithRef(ref terra.Reference) VmSecretsAttributes {
	return VmSecretsAttributes{ref: ref}
}

func (vs VmSecretsAttributes) InternalTokens() hclwrite.Tokens {
	return vs.ref.InternalTokens()
}

func (vs VmSecretsAttributes) VaultId() terra.StringValue {
	return terra.ReferenceString(vs.ref.Append("vault_id"))
}

func (vs VmSecretsAttributes) Certificates() terra.ListValue[CertificatesAttributes] {
	return terra.ReferenceList[CertificatesAttributes](vs.ref.Append("certificates"))
}

type CertificatesAttributes struct {
	ref terra.Reference
}

func (c CertificatesAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CertificatesAttributes) InternalWithRef(ref terra.Reference) CertificatesAttributes {
	return CertificatesAttributes{ref: ref}
}

func (c CertificatesAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CertificatesAttributes) Store() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("store"))
}

func (c CertificatesAttributes) Url() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AuthenticationState struct {
	ActiveDirectory []ActiveDirectoryState `json:"active_directory"`
	Certificate     []CertificateState     `json:"certificate"`
}

type ActiveDirectoryState struct {
	ClientApplicationId  string `json:"client_application_id"`
	ClusterApplicationId string `json:"cluster_application_id"`
	TenantId             string `json:"tenant_id"`
}

type CertificateState struct {
	CommonName string `json:"common_name"`
	Thumbprint string `json:"thumbprint"`
	Type       string `json:"type"`
}

type CustomFabricSettingState struct {
	Parameter string `json:"parameter"`
	Section   string `json:"section"`
	Value     string `json:"value"`
}

type LbRuleState struct {
	BackendPort      float64 `json:"backend_port"`
	FrontendPort     float64 `json:"frontend_port"`
	ProbeProtocol    string  `json:"probe_protocol"`
	ProbeRequestPath string  `json:"probe_request_path"`
	Protocol         string  `json:"protocol"`
}

type NodeTypeState struct {
	ApplicationPortRange           string            `json:"application_port_range"`
	Capacities                     map[string]string `json:"capacities"`
	DataDiskSizeGb                 float64           `json:"data_disk_size_gb"`
	DataDiskType                   string            `json:"data_disk_type"`
	EphemeralPortRange             string            `json:"ephemeral_port_range"`
	Id                             string            `json:"id"`
	MultiplePlacementGroupsEnabled bool              `json:"multiple_placement_groups_enabled"`
	Name                           string            `json:"name"`
	PlacementProperties            map[string]string `json:"placement_properties"`
	Primary                        bool              `json:"primary"`
	Stateless                      bool              `json:"stateless"`
	VmImageOffer                   string            `json:"vm_image_offer"`
	VmImagePublisher               string            `json:"vm_image_publisher"`
	VmImageSku                     string            `json:"vm_image_sku"`
	VmImageVersion                 string            `json:"vm_image_version"`
	VmInstanceCount                float64           `json:"vm_instance_count"`
	VmSize                         string            `json:"vm_size"`
	VmSecrets                      []VmSecretsState  `json:"vm_secrets"`
}

type VmSecretsState struct {
	VaultId      string              `json:"vault_id"`
	Certificates []CertificatesState `json:"certificates"`
}

type CertificatesState struct {
	Store string `json:"store"`
	Url   string `json:"url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
