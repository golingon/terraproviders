// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnfrontdoorcustomdomainassociation "github.com/golingon/terraproviders/azurerm/3.49.0/cdnfrontdoorcustomdomainassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnFrontdoorCustomDomainAssociation(name string, args CdnFrontdoorCustomDomainAssociationArgs) *CdnFrontdoorCustomDomainAssociation {
	return &CdnFrontdoorCustomDomainAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnFrontdoorCustomDomainAssociation)(nil)

type CdnFrontdoorCustomDomainAssociation struct {
	Name  string
	Args  CdnFrontdoorCustomDomainAssociationArgs
	state *cdnFrontdoorCustomDomainAssociationState
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) Type() string {
	return "azurerm_cdn_frontdoor_custom_domain_association"
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) LocalName() string {
	return cfcda.Name
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) Configuration() interface{} {
	return cfcda.Args
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) Attributes() cdnFrontdoorCustomDomainAssociationAttributes {
	return cdnFrontdoorCustomDomainAssociationAttributes{ref: terra.ReferenceResource(cfcda)}
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) ImportState(av io.Reader) error {
	cfcda.state = &cdnFrontdoorCustomDomainAssociationState{}
	if err := json.NewDecoder(av).Decode(cfcda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cfcda.Type(), cfcda.LocalName(), err)
	}
	return nil
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) State() (*cdnFrontdoorCustomDomainAssociationState, bool) {
	return cfcda.state, cfcda.state != nil
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) StateMust() *cdnFrontdoorCustomDomainAssociationState {
	if cfcda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cfcda.Type(), cfcda.LocalName()))
	}
	return cfcda.state
}

func (cfcda *CdnFrontdoorCustomDomainAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(cfcda)
}

type CdnFrontdoorCustomDomainAssociationArgs struct {
	// CdnFrontdoorCustomDomainId: string, required
	CdnFrontdoorCustomDomainId terra.StringValue `hcl:"cdn_frontdoor_custom_domain_id,attr" validate:"required"`
	// CdnFrontdoorRouteIds: list of string, required
	CdnFrontdoorRouteIds terra.ListValue[terra.StringValue] `hcl:"cdn_frontdoor_route_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *cdnfrontdoorcustomdomainassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CdnFrontdoorCustomDomainAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnFrontdoorCustomDomainAssociationAttributes struct {
	ref terra.Reference
}

func (cfcda cdnFrontdoorCustomDomainAssociationAttributes) CdnFrontdoorCustomDomainId() terra.StringValue {
	return terra.ReferenceString(cfcda.ref.Append("cdn_frontdoor_custom_domain_id"))
}

func (cfcda cdnFrontdoorCustomDomainAssociationAttributes) CdnFrontdoorRouteIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cfcda.ref.Append("cdn_frontdoor_route_ids"))
}

func (cfcda cdnFrontdoorCustomDomainAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cfcda.ref.Append("id"))
}

func (cfcda cdnFrontdoorCustomDomainAssociationAttributes) Timeouts() cdnfrontdoorcustomdomainassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnfrontdoorcustomdomainassociation.TimeoutsAttributes](cfcda.ref.Append("timeouts"))
}

type cdnFrontdoorCustomDomainAssociationState struct {
	CdnFrontdoorCustomDomainId string                                             `json:"cdn_frontdoor_custom_domain_id"`
	CdnFrontdoorRouteIds       []string                                           `json:"cdn_frontdoor_route_ids"`
	Id                         string                                             `json:"id"`
	Timeouts                   *cdnfrontdoorcustomdomainassociation.TimeoutsState `json:"timeouts"`
}
