// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	batchcertificate "github.com/golingon/terraproviders/azurerm/3.49.0/batchcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBatchCertificate(name string, args BatchCertificateArgs) *BatchCertificate {
	return &BatchCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchCertificate)(nil)

type BatchCertificate struct {
	Name  string
	Args  BatchCertificateArgs
	state *batchCertificateState
}

func (bc *BatchCertificate) Type() string {
	return "azurerm_batch_certificate"
}

func (bc *BatchCertificate) LocalName() string {
	return bc.Name
}

func (bc *BatchCertificate) Configuration() interface{} {
	return bc.Args
}

func (bc *BatchCertificate) Attributes() batchCertificateAttributes {
	return batchCertificateAttributes{ref: terra.ReferenceResource(bc)}
}

func (bc *BatchCertificate) ImportState(av io.Reader) error {
	bc.state = &batchCertificateState{}
	if err := json.NewDecoder(av).Decode(bc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bc.Type(), bc.LocalName(), err)
	}
	return nil
}

func (bc *BatchCertificate) State() (*batchCertificateState, bool) {
	return bc.state, bc.state != nil
}

func (bc *BatchCertificate) StateMust() *batchCertificateState {
	if bc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bc.Type(), bc.LocalName()))
	}
	return bc.state
}

func (bc *BatchCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(bc)
}

type BatchCertificateArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
	// ThumbprintAlgorithm: string, required
	ThumbprintAlgorithm terra.StringValue `hcl:"thumbprint_algorithm,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *batchcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BatchCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type batchCertificateAttributes struct {
	ref terra.Reference
}

func (bc batchCertificateAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("account_name"))
}

func (bc batchCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("certificate"))
}

func (bc batchCertificateAttributes) Format() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("format"))
}

func (bc batchCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("id"))
}

func (bc batchCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("name"))
}

func (bc batchCertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("password"))
}

func (bc batchCertificateAttributes) PublicData() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("public_data"))
}

func (bc batchCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("resource_group_name"))
}

func (bc batchCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("thumbprint"))
}

func (bc batchCertificateAttributes) ThumbprintAlgorithm() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("thumbprint_algorithm"))
}

func (bc batchCertificateAttributes) Timeouts() batchcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[batchcertificate.TimeoutsAttributes](bc.ref.Append("timeouts"))
}

type batchCertificateState struct {
	AccountName         string                          `json:"account_name"`
	Certificate         string                          `json:"certificate"`
	Format              string                          `json:"format"`
	Id                  string                          `json:"id"`
	Name                string                          `json:"name"`
	Password            string                          `json:"password"`
	PublicData          string                          `json:"public_data"`
	ResourceGroupName   string                          `json:"resource_group_name"`
	Thumbprint          string                          `json:"thumbprint"`
	ThumbprintAlgorithm string                          `json:"thumbprint_algorithm"`
	Timeouts            *batchcertificate.TimeoutsState `json:"timeouts"`
}
