// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsesqlpoolsecurityalertpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/synapsesqlpoolsecurityalertpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseSqlPoolSecurityAlertPolicy(name string, args SynapseSqlPoolSecurityAlertPolicyArgs) *SynapseSqlPoolSecurityAlertPolicy {
	return &SynapseSqlPoolSecurityAlertPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseSqlPoolSecurityAlertPolicy)(nil)

type SynapseSqlPoolSecurityAlertPolicy struct {
	Name  string
	Args  SynapseSqlPoolSecurityAlertPolicyArgs
	state *synapseSqlPoolSecurityAlertPolicyState
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) Type() string {
	return "azurerm_synapse_sql_pool_security_alert_policy"
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) LocalName() string {
	return sspsap.Name
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) Configuration() interface{} {
	return sspsap.Args
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) Attributes() synapseSqlPoolSecurityAlertPolicyAttributes {
	return synapseSqlPoolSecurityAlertPolicyAttributes{ref: terra.ReferenceResource(sspsap)}
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) ImportState(av io.Reader) error {
	sspsap.state = &synapseSqlPoolSecurityAlertPolicyState{}
	if err := json.NewDecoder(av).Decode(sspsap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sspsap.Type(), sspsap.LocalName(), err)
	}
	return nil
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) State() (*synapseSqlPoolSecurityAlertPolicyState, bool) {
	return sspsap.state, sspsap.state != nil
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) StateMust() *synapseSqlPoolSecurityAlertPolicyState {
	if sspsap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sspsap.Type(), sspsap.LocalName()))
	}
	return sspsap.state
}

func (sspsap *SynapseSqlPoolSecurityAlertPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sspsap)
}

type SynapseSqlPoolSecurityAlertPolicyArgs struct {
	// DisabledAlerts: set of string, optional
	DisabledAlerts terra.SetValue[terra.StringValue] `hcl:"disabled_alerts,attr"`
	// EmailAccountAdminsEnabled: bool, optional
	EmailAccountAdminsEnabled terra.BoolValue `hcl:"email_account_admins_enabled,attr"`
	// EmailAddresses: set of string, optional
	EmailAddresses terra.SetValue[terra.StringValue] `hcl:"email_addresses,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyState: string, required
	PolicyState terra.StringValue `hcl:"policy_state,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
	// SqlPoolId: string, required
	SqlPoolId terra.StringValue `hcl:"sql_pool_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageEndpoint: string, optional
	StorageEndpoint terra.StringValue `hcl:"storage_endpoint,attr"`
	// Timeouts: optional
	Timeouts *synapsesqlpoolsecurityalertpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseSqlPoolSecurityAlertPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseSqlPoolSecurityAlertPolicyAttributes struct {
	ref terra.Reference
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) DisabledAlerts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sspsap.ref.Append("disabled_alerts"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) EmailAccountAdminsEnabled() terra.BoolValue {
	return terra.ReferenceBool(sspsap.ref.Append("email_account_admins_enabled"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) EmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sspsap.ref.Append("email_addresses"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sspsap.ref.Append("id"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) PolicyState() terra.StringValue {
	return terra.ReferenceString(sspsap.ref.Append("policy_state"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(sspsap.ref.Append("retention_days"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) SqlPoolId() terra.StringValue {
	return terra.ReferenceString(sspsap.ref.Append("sql_pool_id"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(sspsap.ref.Append("storage_account_access_key"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) StorageEndpoint() terra.StringValue {
	return terra.ReferenceString(sspsap.ref.Append("storage_endpoint"))
}

func (sspsap synapseSqlPoolSecurityAlertPolicyAttributes) Timeouts() synapsesqlpoolsecurityalertpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsesqlpoolsecurityalertpolicy.TimeoutsAttributes](sspsap.ref.Append("timeouts"))
}

type synapseSqlPoolSecurityAlertPolicyState struct {
	DisabledAlerts            []string                                         `json:"disabled_alerts"`
	EmailAccountAdminsEnabled bool                                             `json:"email_account_admins_enabled"`
	EmailAddresses            []string                                         `json:"email_addresses"`
	Id                        string                                           `json:"id"`
	PolicyState               string                                           `json:"policy_state"`
	RetentionDays             float64                                          `json:"retention_days"`
	SqlPoolId                 string                                           `json:"sql_pool_id"`
	StorageAccountAccessKey   string                                           `json:"storage_account_access_key"`
	StorageEndpoint           string                                           `json:"storage_endpoint"`
	Timeouts                  *synapsesqlpoolsecurityalertpolicy.TimeoutsState `json:"timeouts"`
}
