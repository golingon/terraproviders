// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkinterfacenatruleassociation "github.com/golingon/terraproviders/azurerm/3.49.0/networkinterfacenatruleassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkInterfaceNatRuleAssociation(name string, args NetworkInterfaceNatRuleAssociationArgs) *NetworkInterfaceNatRuleAssociation {
	return &NetworkInterfaceNatRuleAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkInterfaceNatRuleAssociation)(nil)

type NetworkInterfaceNatRuleAssociation struct {
	Name  string
	Args  NetworkInterfaceNatRuleAssociationArgs
	state *networkInterfaceNatRuleAssociationState
}

func (ninra *NetworkInterfaceNatRuleAssociation) Type() string {
	return "azurerm_network_interface_nat_rule_association"
}

func (ninra *NetworkInterfaceNatRuleAssociation) LocalName() string {
	return ninra.Name
}

func (ninra *NetworkInterfaceNatRuleAssociation) Configuration() interface{} {
	return ninra.Args
}

func (ninra *NetworkInterfaceNatRuleAssociation) Attributes() networkInterfaceNatRuleAssociationAttributes {
	return networkInterfaceNatRuleAssociationAttributes{ref: terra.ReferenceResource(ninra)}
}

func (ninra *NetworkInterfaceNatRuleAssociation) ImportState(av io.Reader) error {
	ninra.state = &networkInterfaceNatRuleAssociationState{}
	if err := json.NewDecoder(av).Decode(ninra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ninra.Type(), ninra.LocalName(), err)
	}
	return nil
}

func (ninra *NetworkInterfaceNatRuleAssociation) State() (*networkInterfaceNatRuleAssociationState, bool) {
	return ninra.state, ninra.state != nil
}

func (ninra *NetworkInterfaceNatRuleAssociation) StateMust() *networkInterfaceNatRuleAssociationState {
	if ninra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ninra.Type(), ninra.LocalName()))
	}
	return ninra.state
}

func (ninra *NetworkInterfaceNatRuleAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ninra)
}

type NetworkInterfaceNatRuleAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpConfigurationName: string, required
	IpConfigurationName terra.StringValue `hcl:"ip_configuration_name,attr" validate:"required"`
	// NatRuleId: string, required
	NatRuleId terra.StringValue `hcl:"nat_rule_id,attr" validate:"required"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkinterfacenatruleassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkInterfaceNatRuleAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkInterfaceNatRuleAssociationAttributes struct {
	ref terra.Reference
}

func (ninra networkInterfaceNatRuleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ninra.ref.Append("id"))
}

func (ninra networkInterfaceNatRuleAssociationAttributes) IpConfigurationName() terra.StringValue {
	return terra.ReferenceString(ninra.ref.Append("ip_configuration_name"))
}

func (ninra networkInterfaceNatRuleAssociationAttributes) NatRuleId() terra.StringValue {
	return terra.ReferenceString(ninra.ref.Append("nat_rule_id"))
}

func (ninra networkInterfaceNatRuleAssociationAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(ninra.ref.Append("network_interface_id"))
}

func (ninra networkInterfaceNatRuleAssociationAttributes) Timeouts() networkinterfacenatruleassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[networkinterfacenatruleassociation.TimeoutsAttributes](ninra.ref.Append("timeouts"))
}

type networkInterfaceNatRuleAssociationState struct {
	Id                  string                                            `json:"id"`
	IpConfigurationName string                                            `json:"ip_configuration_name"`
	NatRuleId           string                                            `json:"nat_rule_id"`
	NetworkInterfaceId  string                                            `json:"network_interface_id"`
	Timeouts            *networkinterfacenatruleassociation.TimeoutsState `json:"timeouts"`
}
