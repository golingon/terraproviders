// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedserviceweb "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedserviceweb"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceWeb(name string, args DataFactoryLinkedServiceWebArgs) *DataFactoryLinkedServiceWeb {
	return &DataFactoryLinkedServiceWeb{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceWeb)(nil)

type DataFactoryLinkedServiceWeb struct {
	Name  string
	Args  DataFactoryLinkedServiceWebArgs
	state *dataFactoryLinkedServiceWebState
}

func (dflsw *DataFactoryLinkedServiceWeb) Type() string {
	return "azurerm_data_factory_linked_service_web"
}

func (dflsw *DataFactoryLinkedServiceWeb) LocalName() string {
	return dflsw.Name
}

func (dflsw *DataFactoryLinkedServiceWeb) Configuration() interface{} {
	return dflsw.Args
}

func (dflsw *DataFactoryLinkedServiceWeb) Attributes() dataFactoryLinkedServiceWebAttributes {
	return dataFactoryLinkedServiceWebAttributes{ref: terra.ReferenceResource(dflsw)}
}

func (dflsw *DataFactoryLinkedServiceWeb) ImportState(av io.Reader) error {
	dflsw.state = &dataFactoryLinkedServiceWebState{}
	if err := json.NewDecoder(av).Decode(dflsw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsw.Type(), dflsw.LocalName(), err)
	}
	return nil
}

func (dflsw *DataFactoryLinkedServiceWeb) State() (*dataFactoryLinkedServiceWebState, bool) {
	return dflsw.state, dflsw.state != nil
}

func (dflsw *DataFactoryLinkedServiceWeb) StateMust() *dataFactoryLinkedServiceWebState {
	if dflsw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsw.Type(), dflsw.LocalName()))
	}
	return dflsw.state
}

func (dflsw *DataFactoryLinkedServiceWeb) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsw)
}

type DataFactoryLinkedServiceWebArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// Timeouts: optional
	Timeouts *datafactorylinkedserviceweb.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceWeb depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceWebAttributes struct {
	ref terra.Reference
}

func (dflsw dataFactoryLinkedServiceWebAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsw.ref.Append("additional_properties"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsw.ref.Append("annotations"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("authentication_type"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("data_factory_id"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("description"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("id"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("integration_runtime_name"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("name"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsw.ref.Append("parameters"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Password() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("password"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Url() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("url"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Username() terra.StringValue {
	return terra.ReferenceString(dflsw.ref.Append("username"))
}

func (dflsw dataFactoryLinkedServiceWebAttributes) Timeouts() datafactorylinkedserviceweb.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedserviceweb.TimeoutsAttributes](dflsw.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceWebState struct {
	AdditionalProperties   map[string]string                          `json:"additional_properties"`
	Annotations            []string                                   `json:"annotations"`
	AuthenticationType     string                                     `json:"authentication_type"`
	DataFactoryId          string                                     `json:"data_factory_id"`
	Description            string                                     `json:"description"`
	Id                     string                                     `json:"id"`
	IntegrationRuntimeName string                                     `json:"integration_runtime_name"`
	Name                   string                                     `json:"name"`
	Parameters             map[string]string                          `json:"parameters"`
	Password               string                                     `json:"password"`
	Url                    string                                     `json:"url"`
	Username               string                                     `json:"username"`
	Timeouts               *datafactorylinkedserviceweb.TimeoutsState `json:"timeouts"`
}
