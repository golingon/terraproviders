// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitorscheduledqueryrulesalert "github.com/golingon/terraproviders/azurerm/3.49.0/monitorscheduledqueryrulesalert"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorScheduledQueryRulesAlert(name string, args MonitorScheduledQueryRulesAlertArgs) *MonitorScheduledQueryRulesAlert {
	return &MonitorScheduledQueryRulesAlert{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorScheduledQueryRulesAlert)(nil)

type MonitorScheduledQueryRulesAlert struct {
	Name  string
	Args  MonitorScheduledQueryRulesAlertArgs
	state *monitorScheduledQueryRulesAlertState
}

func (msqra *MonitorScheduledQueryRulesAlert) Type() string {
	return "azurerm_monitor_scheduled_query_rules_alert"
}

func (msqra *MonitorScheduledQueryRulesAlert) LocalName() string {
	return msqra.Name
}

func (msqra *MonitorScheduledQueryRulesAlert) Configuration() interface{} {
	return msqra.Args
}

func (msqra *MonitorScheduledQueryRulesAlert) Attributes() monitorScheduledQueryRulesAlertAttributes {
	return monitorScheduledQueryRulesAlertAttributes{ref: terra.ReferenceResource(msqra)}
}

func (msqra *MonitorScheduledQueryRulesAlert) ImportState(av io.Reader) error {
	msqra.state = &monitorScheduledQueryRulesAlertState{}
	if err := json.NewDecoder(av).Decode(msqra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msqra.Type(), msqra.LocalName(), err)
	}
	return nil
}

func (msqra *MonitorScheduledQueryRulesAlert) State() (*monitorScheduledQueryRulesAlertState, bool) {
	return msqra.state, msqra.state != nil
}

func (msqra *MonitorScheduledQueryRulesAlert) StateMust() *monitorScheduledQueryRulesAlertState {
	if msqra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msqra.Type(), msqra.LocalName()))
	}
	return msqra.state
}

func (msqra *MonitorScheduledQueryRulesAlert) DependOn() terra.Reference {
	return terra.ReferenceResource(msqra)
}

type MonitorScheduledQueryRulesAlertArgs struct {
	// AuthorizedResourceIds: set of string, optional
	AuthorizedResourceIds terra.SetValue[terra.StringValue] `hcl:"authorized_resource_ids,attr"`
	// AutoMitigationEnabled: bool, optional
	AutoMitigationEnabled terra.BoolValue `hcl:"auto_mitigation_enabled,attr"`
	// DataSourceId: string, required
	DataSourceId terra.StringValue `hcl:"data_source_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: number, required
	Frequency terra.NumberValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// QueryType: string, optional
	QueryType terra.StringValue `hcl:"query_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Severity: number, optional
	Severity terra.NumberValue `hcl:"severity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Throttling: number, optional
	Throttling terra.NumberValue `hcl:"throttling,attr"`
	// TimeWindow: number, required
	TimeWindow terra.NumberValue `hcl:"time_window,attr" validate:"required"`
	// Action: required
	Action *monitorscheduledqueryrulesalert.Action `hcl:"action,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitorscheduledqueryrulesalert.Timeouts `hcl:"timeouts,block"`
	// Trigger: required
	Trigger *monitorscheduledqueryrulesalert.Trigger `hcl:"trigger,block" validate:"required"`
	// DependsOn contains resources that MonitorScheduledQueryRulesAlert depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorScheduledQueryRulesAlertAttributes struct {
	ref terra.Reference
}

func (msqra monitorScheduledQueryRulesAlertAttributes) AuthorizedResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](msqra.ref.Append("authorized_resource_ids"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) AutoMitigationEnabled() terra.BoolValue {
	return terra.ReferenceBool(msqra.ref.Append("auto_mitigation_enabled"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) DataSourceId() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("data_source_id"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Description() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("description"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(msqra.ref.Append("enabled"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Frequency() terra.NumberValue {
	return terra.ReferenceNumber(msqra.ref.Append("frequency"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("id"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Location() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("location"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("name"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Query() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("query"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) QueryType() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("query_type"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(msqra.ref.Append("resource_group_name"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Severity() terra.NumberValue {
	return terra.ReferenceNumber(msqra.ref.Append("severity"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msqra.ref.Append("tags"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Throttling() terra.NumberValue {
	return terra.ReferenceNumber(msqra.ref.Append("throttling"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) TimeWindow() terra.NumberValue {
	return terra.ReferenceNumber(msqra.ref.Append("time_window"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Action() terra.ListValue[monitorscheduledqueryrulesalert.ActionAttributes] {
	return terra.ReferenceList[monitorscheduledqueryrulesalert.ActionAttributes](msqra.ref.Append("action"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Timeouts() monitorscheduledqueryrulesalert.TimeoutsAttributes {
	return terra.ReferenceSingle[monitorscheduledqueryrulesalert.TimeoutsAttributes](msqra.ref.Append("timeouts"))
}

func (msqra monitorScheduledQueryRulesAlertAttributes) Trigger() terra.ListValue[monitorscheduledqueryrulesalert.TriggerAttributes] {
	return terra.ReferenceList[monitorscheduledqueryrulesalert.TriggerAttributes](msqra.ref.Append("trigger"))
}

type monitorScheduledQueryRulesAlertState struct {
	AuthorizedResourceIds []string                                       `json:"authorized_resource_ids"`
	AutoMitigationEnabled bool                                           `json:"auto_mitigation_enabled"`
	DataSourceId          string                                         `json:"data_source_id"`
	Description           string                                         `json:"description"`
	Enabled               bool                                           `json:"enabled"`
	Frequency             float64                                        `json:"frequency"`
	Id                    string                                         `json:"id"`
	Location              string                                         `json:"location"`
	Name                  string                                         `json:"name"`
	Query                 string                                         `json:"query"`
	QueryType             string                                         `json:"query_type"`
	ResourceGroupName     string                                         `json:"resource_group_name"`
	Severity              float64                                        `json:"severity"`
	Tags                  map[string]string                              `json:"tags"`
	Throttling            float64                                        `json:"throttling"`
	TimeWindow            float64                                        `json:"time_window"`
	Action                []monitorscheduledqueryrulesalert.ActionState  `json:"action"`
	Timeouts              *monitorscheduledqueryrulesalert.TimeoutsState `json:"timeouts"`
	Trigger               []monitorscheduledqueryrulesalert.TriggerState `json:"trigger"`
}
