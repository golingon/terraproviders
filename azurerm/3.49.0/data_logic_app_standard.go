// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datalogicappstandard "github.com/golingon/terraproviders/azurerm/3.49.0/datalogicappstandard"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataLogicAppStandard(name string, args DataLogicAppStandardArgs) *DataLogicAppStandard {
	return &DataLogicAppStandard{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataLogicAppStandard)(nil)

type DataLogicAppStandard struct {
	Name string
	Args DataLogicAppStandardArgs
}

func (las *DataLogicAppStandard) DataSource() string {
	return "azurerm_logic_app_standard"
}

func (las *DataLogicAppStandard) LocalName() string {
	return las.Name
}

func (las *DataLogicAppStandard) Configuration() interface{} {
	return las.Args
}

func (las *DataLogicAppStandard) Attributes() dataLogicAppStandardAttributes {
	return dataLogicAppStandardAttributes{ref: terra.ReferenceDataResource(las)}
}

type DataLogicAppStandardArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ConnectionString: min=0
	ConnectionString []datalogicappstandard.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: min=0
	Identity []datalogicappstandard.Identity `hcl:"identity,block" validate:"min=0"`
	// SiteCredential: min=0
	SiteCredential []datalogicappstandard.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// SiteConfig: optional
	SiteConfig *datalogicappstandard.SiteConfig `hcl:"site_config,block"`
	// Timeouts: optional
	Timeouts *datalogicappstandard.Timeouts `hcl:"timeouts,block"`
}
type dataLogicAppStandardAttributes struct {
	ref terra.Reference
}

func (las dataLogicAppStandardAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("app_service_plan_id"))
}

func (las dataLogicAppStandardAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](las.ref.Append("app_settings"))
}

func (las dataLogicAppStandardAttributes) BundleVersion() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("bundle_version"))
}

func (las dataLogicAppStandardAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceBool(las.ref.Append("client_affinity_enabled"))
}

func (las dataLogicAppStandardAttributes) ClientCertificateMode() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("client_certificate_mode"))
}

func (las dataLogicAppStandardAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("custom_domain_verification_id"))
}

func (las dataLogicAppStandardAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("default_hostname"))
}

func (las dataLogicAppStandardAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(las.ref.Append("enabled"))
}

func (las dataLogicAppStandardAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(las.ref.Append("https_only"))
}

func (las dataLogicAppStandardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("id"))
}

func (las dataLogicAppStandardAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("kind"))
}

func (las dataLogicAppStandardAttributes) Location() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("location"))
}

func (las dataLogicAppStandardAttributes) Name() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("name"))
}

func (las dataLogicAppStandardAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("outbound_ip_addresses"))
}

func (las dataLogicAppStandardAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("possible_outbound_ip_addresses"))
}

func (las dataLogicAppStandardAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("resource_group_name"))
}

func (las dataLogicAppStandardAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("storage_account_access_key"))
}

func (las dataLogicAppStandardAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("storage_account_name"))
}

func (las dataLogicAppStandardAttributes) StorageAccountShareName() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("storage_account_share_name"))
}

func (las dataLogicAppStandardAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](las.ref.Append("tags"))
}

func (las dataLogicAppStandardAttributes) UseExtensionBundle() terra.BoolValue {
	return terra.ReferenceBool(las.ref.Append("use_extension_bundle"))
}

func (las dataLogicAppStandardAttributes) Version() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("version"))
}

func (las dataLogicAppStandardAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceString(las.ref.Append("virtual_network_subnet_id"))
}

func (las dataLogicAppStandardAttributes) ConnectionString() terra.SetValue[datalogicappstandard.ConnectionStringAttributes] {
	return terra.ReferenceSet[datalogicappstandard.ConnectionStringAttributes](las.ref.Append("connection_string"))
}

func (las dataLogicAppStandardAttributes) Identity() terra.ListValue[datalogicappstandard.IdentityAttributes] {
	return terra.ReferenceList[datalogicappstandard.IdentityAttributes](las.ref.Append("identity"))
}

func (las dataLogicAppStandardAttributes) SiteCredential() terra.ListValue[datalogicappstandard.SiteCredentialAttributes] {
	return terra.ReferenceList[datalogicappstandard.SiteCredentialAttributes](las.ref.Append("site_credential"))
}

func (las dataLogicAppStandardAttributes) SiteConfig() terra.ListValue[datalogicappstandard.SiteConfigAttributes] {
	return terra.ReferenceList[datalogicappstandard.SiteConfigAttributes](las.ref.Append("site_config"))
}

func (las dataLogicAppStandardAttributes) Timeouts() datalogicappstandard.TimeoutsAttributes {
	return terra.ReferenceSingle[datalogicappstandard.TimeoutsAttributes](las.ref.Append("timeouts"))
}
