// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkmanagersecurityadminconfiguration "github.com/golingon/terraproviders/azurerm/3.49.0/networkmanagersecurityadminconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkManagerSecurityAdminConfiguration(name string, args NetworkManagerSecurityAdminConfigurationArgs) *NetworkManagerSecurityAdminConfiguration {
	return &NetworkManagerSecurityAdminConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkManagerSecurityAdminConfiguration)(nil)

type NetworkManagerSecurityAdminConfiguration struct {
	Name  string
	Args  NetworkManagerSecurityAdminConfigurationArgs
	state *networkManagerSecurityAdminConfigurationState
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) Type() string {
	return "azurerm_network_manager_security_admin_configuration"
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) LocalName() string {
	return nmsac.Name
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) Configuration() interface{} {
	return nmsac.Args
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) Attributes() networkManagerSecurityAdminConfigurationAttributes {
	return networkManagerSecurityAdminConfigurationAttributes{ref: terra.ReferenceResource(nmsac)}
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) ImportState(av io.Reader) error {
	nmsac.state = &networkManagerSecurityAdminConfigurationState{}
	if err := json.NewDecoder(av).Decode(nmsac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nmsac.Type(), nmsac.LocalName(), err)
	}
	return nil
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) State() (*networkManagerSecurityAdminConfigurationState, bool) {
	return nmsac.state, nmsac.state != nil
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) StateMust() *networkManagerSecurityAdminConfigurationState {
	if nmsac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nmsac.Type(), nmsac.LocalName()))
	}
	return nmsac.state
}

func (nmsac *NetworkManagerSecurityAdminConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(nmsac)
}

type NetworkManagerSecurityAdminConfigurationArgs struct {
	// ApplyOnNetworkIntentPolicyBasedServices: list of string, optional
	ApplyOnNetworkIntentPolicyBasedServices terra.ListValue[terra.StringValue] `hcl:"apply_on_network_intent_policy_based_services,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagersecurityadminconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkManagerSecurityAdminConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkManagerSecurityAdminConfigurationAttributes struct {
	ref terra.Reference
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) ApplyOnNetworkIntentPolicyBasedServices() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nmsac.ref.Append("apply_on_network_intent_policy_based_services"))
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nmsac.ref.Append("description"))
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nmsac.ref.Append("id"))
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nmsac.ref.Append("name"))
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceString(nmsac.ref.Append("network_manager_id"))
}

func (nmsac networkManagerSecurityAdminConfigurationAttributes) Timeouts() networkmanagersecurityadminconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagersecurityadminconfiguration.TimeoutsAttributes](nmsac.ref.Append("timeouts"))
}

type networkManagerSecurityAdminConfigurationState struct {
	ApplyOnNetworkIntentPolicyBasedServices []string                                                `json:"apply_on_network_intent_policy_based_services"`
	Description                             string                                                  `json:"description"`
	Id                                      string                                                  `json:"id"`
	Name                                    string                                                  `json:"name"`
	NetworkManagerId                        string                                                  `json:"network_manager_id"`
	Timeouts                                *networkmanagersecurityadminconfiguration.TimeoutsState `json:"timeouts"`
}
