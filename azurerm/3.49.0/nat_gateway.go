// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	natgateway "github.com/golingon/terraproviders/azurerm/3.49.0/natgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNatGateway(name string, args NatGatewayArgs) *NatGateway {
	return &NatGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NatGateway)(nil)

type NatGateway struct {
	Name  string
	Args  NatGatewayArgs
	state *natGatewayState
}

func (ng *NatGateway) Type() string {
	return "azurerm_nat_gateway"
}

func (ng *NatGateway) LocalName() string {
	return ng.Name
}

func (ng *NatGateway) Configuration() interface{} {
	return ng.Args
}

func (ng *NatGateway) Attributes() natGatewayAttributes {
	return natGatewayAttributes{ref: terra.ReferenceResource(ng)}
}

func (ng *NatGateway) ImportState(av io.Reader) error {
	ng.state = &natGatewayState{}
	if err := json.NewDecoder(av).Decode(ng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ng.Type(), ng.LocalName(), err)
	}
	return nil
}

func (ng *NatGateway) State() (*natGatewayState, bool) {
	return ng.state, ng.state != nil
}

func (ng *NatGateway) StateMust() *natGatewayState {
	if ng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ng.Type(), ng.LocalName()))
	}
	return ng.state
}

func (ng *NatGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(ng)
}

type NatGatewayArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Timeouts: optional
	Timeouts *natgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NatGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type natGatewayAttributes struct {
	ref terra.Reference
}

func (ng natGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("id"))
}

func (ng natGatewayAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(ng.ref.Append("idle_timeout_in_minutes"))
}

func (ng natGatewayAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("location"))
}

func (ng natGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("name"))
}

func (ng natGatewayAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("resource_group_name"))
}

func (ng natGatewayAttributes) ResourceGuid() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("resource_guid"))
}

func (ng natGatewayAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("sku_name"))
}

func (ng natGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ng.ref.Append("tags"))
}

func (ng natGatewayAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ng.ref.Append("zones"))
}

func (ng natGatewayAttributes) Timeouts() natgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[natgateway.TimeoutsAttributes](ng.ref.Append("timeouts"))
}

type natGatewayState struct {
	Id                   string                    `json:"id"`
	IdleTimeoutInMinutes float64                   `json:"idle_timeout_in_minutes"`
	Location             string                    `json:"location"`
	Name                 string                    `json:"name"`
	ResourceGroupName    string                    `json:"resource_group_name"`
	ResourceGuid         string                    `json:"resource_guid"`
	SkuName              string                    `json:"sku_name"`
	Tags                 map[string]string         `json:"tags"`
	Zones                []string                  `json:"zones"`
	Timeouts             *natgateway.TimeoutsState `json:"timeouts"`
}
