// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	managementgroupsubscriptionassociation "github.com/golingon/terraproviders/azurerm/3.49.0/managementgroupsubscriptionassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagementGroupSubscriptionAssociation(name string, args ManagementGroupSubscriptionAssociationArgs) *ManagementGroupSubscriptionAssociation {
	return &ManagementGroupSubscriptionAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagementGroupSubscriptionAssociation)(nil)

type ManagementGroupSubscriptionAssociation struct {
	Name  string
	Args  ManagementGroupSubscriptionAssociationArgs
	state *managementGroupSubscriptionAssociationState
}

func (mgsa *ManagementGroupSubscriptionAssociation) Type() string {
	return "azurerm_management_group_subscription_association"
}

func (mgsa *ManagementGroupSubscriptionAssociation) LocalName() string {
	return mgsa.Name
}

func (mgsa *ManagementGroupSubscriptionAssociation) Configuration() interface{} {
	return mgsa.Args
}

func (mgsa *ManagementGroupSubscriptionAssociation) Attributes() managementGroupSubscriptionAssociationAttributes {
	return managementGroupSubscriptionAssociationAttributes{ref: terra.ReferenceResource(mgsa)}
}

func (mgsa *ManagementGroupSubscriptionAssociation) ImportState(av io.Reader) error {
	mgsa.state = &managementGroupSubscriptionAssociationState{}
	if err := json.NewDecoder(av).Decode(mgsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mgsa.Type(), mgsa.LocalName(), err)
	}
	return nil
}

func (mgsa *ManagementGroupSubscriptionAssociation) State() (*managementGroupSubscriptionAssociationState, bool) {
	return mgsa.state, mgsa.state != nil
}

func (mgsa *ManagementGroupSubscriptionAssociation) StateMust() *managementGroupSubscriptionAssociationState {
	if mgsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mgsa.Type(), mgsa.LocalName()))
	}
	return mgsa.state
}

func (mgsa *ManagementGroupSubscriptionAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(mgsa)
}

type ManagementGroupSubscriptionAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagementGroupId: string, required
	ManagementGroupId terra.StringValue `hcl:"management_group_id,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *managementgroupsubscriptionassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagementGroupSubscriptionAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managementGroupSubscriptionAssociationAttributes struct {
	ref terra.Reference
}

func (mgsa managementGroupSubscriptionAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mgsa.ref.Append("id"))
}

func (mgsa managementGroupSubscriptionAssociationAttributes) ManagementGroupId() terra.StringValue {
	return terra.ReferenceString(mgsa.ref.Append("management_group_id"))
}

func (mgsa managementGroupSubscriptionAssociationAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(mgsa.ref.Append("subscription_id"))
}

func (mgsa managementGroupSubscriptionAssociationAttributes) Timeouts() managementgroupsubscriptionassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[managementgroupsubscriptionassociation.TimeoutsAttributes](mgsa.ref.Append("timeouts"))
}

type managementGroupSubscriptionAssociationState struct {
	Id                string                                                `json:"id"`
	ManagementGroupId string                                                `json:"management_group_id"`
	SubscriptionId    string                                                `json:"subscription_id"`
	Timeouts          *managementgroupsubscriptionassociation.TimeoutsState `json:"timeouts"`
}
