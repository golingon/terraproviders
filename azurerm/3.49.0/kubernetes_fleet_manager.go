// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	kubernetesfleetmanager "github.com/golingon/terraproviders/azurerm/3.49.0/kubernetesfleetmanager"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKubernetesFleetManager(name string, args KubernetesFleetManagerArgs) *KubernetesFleetManager {
	return &KubernetesFleetManager{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KubernetesFleetManager)(nil)

type KubernetesFleetManager struct {
	Name  string
	Args  KubernetesFleetManagerArgs
	state *kubernetesFleetManagerState
}

func (kfm *KubernetesFleetManager) Type() string {
	return "azurerm_kubernetes_fleet_manager"
}

func (kfm *KubernetesFleetManager) LocalName() string {
	return kfm.Name
}

func (kfm *KubernetesFleetManager) Configuration() interface{} {
	return kfm.Args
}

func (kfm *KubernetesFleetManager) Attributes() kubernetesFleetManagerAttributes {
	return kubernetesFleetManagerAttributes{ref: terra.ReferenceResource(kfm)}
}

func (kfm *KubernetesFleetManager) ImportState(av io.Reader) error {
	kfm.state = &kubernetesFleetManagerState{}
	if err := json.NewDecoder(av).Decode(kfm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kfm.Type(), kfm.LocalName(), err)
	}
	return nil
}

func (kfm *KubernetesFleetManager) State() (*kubernetesFleetManagerState, bool) {
	return kfm.state, kfm.state != nil
}

func (kfm *KubernetesFleetManager) StateMust() *kubernetesFleetManagerState {
	if kfm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kfm.Type(), kfm.LocalName()))
	}
	return kfm.state
}

func (kfm *KubernetesFleetManager) DependOn() terra.Reference {
	return terra.ReferenceResource(kfm)
}

type KubernetesFleetManagerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// HubProfile: optional
	HubProfile *kubernetesfleetmanager.HubProfile `hcl:"hub_profile,block"`
	// Timeouts: optional
	Timeouts *kubernetesfleetmanager.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KubernetesFleetManager depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kubernetesFleetManagerAttributes struct {
	ref terra.Reference
}

func (kfm kubernetesFleetManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kfm.ref.Append("id"))
}

func (kfm kubernetesFleetManagerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(kfm.ref.Append("location"))
}

func (kfm kubernetesFleetManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kfm.ref.Append("name"))
}

func (kfm kubernetesFleetManagerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(kfm.ref.Append("resource_group_name"))
}

func (kfm kubernetesFleetManagerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kfm.ref.Append("tags"))
}

func (kfm kubernetesFleetManagerAttributes) HubProfile() terra.ListValue[kubernetesfleetmanager.HubProfileAttributes] {
	return terra.ReferenceList[kubernetesfleetmanager.HubProfileAttributes](kfm.ref.Append("hub_profile"))
}

func (kfm kubernetesFleetManagerAttributes) Timeouts() kubernetesfleetmanager.TimeoutsAttributes {
	return terra.ReferenceSingle[kubernetesfleetmanager.TimeoutsAttributes](kfm.ref.Append("timeouts"))
}

type kubernetesFleetManagerState struct {
	Id                string                                   `json:"id"`
	Location          string                                   `json:"location"`
	Name              string                                   `json:"name"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	Tags              map[string]string                        `json:"tags"`
	HubProfile        []kubernetesfleetmanager.HubProfileState `json:"hub_profile"`
	Timeouts          *kubernetesfleetmanager.TimeoutsState    `json:"timeouts"`
}
