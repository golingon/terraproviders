// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logzmonitor "github.com/golingon/terraproviders/azurerm/3.49.0/logzmonitor"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogzMonitor(name string, args LogzMonitorArgs) *LogzMonitor {
	return &LogzMonitor{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogzMonitor)(nil)

type LogzMonitor struct {
	Name  string
	Args  LogzMonitorArgs
	state *logzMonitorState
}

func (lm *LogzMonitor) Type() string {
	return "azurerm_logz_monitor"
}

func (lm *LogzMonitor) LocalName() string {
	return lm.Name
}

func (lm *LogzMonitor) Configuration() interface{} {
	return lm.Args
}

func (lm *LogzMonitor) Attributes() logzMonitorAttributes {
	return logzMonitorAttributes{ref: terra.ReferenceResource(lm)}
}

func (lm *LogzMonitor) ImportState(av io.Reader) error {
	lm.state = &logzMonitorState{}
	if err := json.NewDecoder(av).Decode(lm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lm.Type(), lm.LocalName(), err)
	}
	return nil
}

func (lm *LogzMonitor) State() (*logzMonitorState, bool) {
	return lm.state, lm.state != nil
}

func (lm *LogzMonitor) StateMust() *logzMonitorState {
	if lm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lm.Type(), lm.LocalName()))
	}
	return lm.state
}

func (lm *LogzMonitor) DependOn() terra.Reference {
	return terra.ReferenceResource(lm)
}

type LogzMonitorArgs struct {
	// CompanyName: string, optional
	CompanyName terra.StringValue `hcl:"company_name,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EnterpriseAppId: string, optional
	EnterpriseAppId terra.StringValue `hcl:"enterprise_app_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Plan: required
	Plan *logzmonitor.Plan `hcl:"plan,block" validate:"required"`
	// Timeouts: optional
	Timeouts *logzmonitor.Timeouts `hcl:"timeouts,block"`
	// User: required
	User *logzmonitor.User `hcl:"user,block" validate:"required"`
	// DependsOn contains resources that LogzMonitor depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logzMonitorAttributes struct {
	ref terra.Reference
}

func (lm logzMonitorAttributes) CompanyName() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("company_name"))
}

func (lm logzMonitorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(lm.ref.Append("enabled"))
}

func (lm logzMonitorAttributes) EnterpriseAppId() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("enterprise_app_id"))
}

func (lm logzMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("id"))
}

func (lm logzMonitorAttributes) Location() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("location"))
}

func (lm logzMonitorAttributes) LogzOrganizationId() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("logz_organization_id"))
}

func (lm logzMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("name"))
}

func (lm logzMonitorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("resource_group_name"))
}

func (lm logzMonitorAttributes) SingleSignOnUrl() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("single_sign_on_url"))
}

func (lm logzMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lm.ref.Append("tags"))
}

func (lm logzMonitorAttributes) Plan() terra.ListValue[logzmonitor.PlanAttributes] {
	return terra.ReferenceList[logzmonitor.PlanAttributes](lm.ref.Append("plan"))
}

func (lm logzMonitorAttributes) Timeouts() logzmonitor.TimeoutsAttributes {
	return terra.ReferenceSingle[logzmonitor.TimeoutsAttributes](lm.ref.Append("timeouts"))
}

func (lm logzMonitorAttributes) User() terra.ListValue[logzmonitor.UserAttributes] {
	return terra.ReferenceList[logzmonitor.UserAttributes](lm.ref.Append("user"))
}

type logzMonitorState struct {
	CompanyName        string                     `json:"company_name"`
	Enabled            bool                       `json:"enabled"`
	EnterpriseAppId    string                     `json:"enterprise_app_id"`
	Id                 string                     `json:"id"`
	Location           string                     `json:"location"`
	LogzOrganizationId string                     `json:"logz_organization_id"`
	Name               string                     `json:"name"`
	ResourceGroupName  string                     `json:"resource_group_name"`
	SingleSignOnUrl    string                     `json:"single_sign_on_url"`
	Tags               map[string]string          `json:"tags"`
	Plan               []logzmonitor.PlanState    `json:"plan"`
	Timeouts           *logzmonitor.TimeoutsState `json:"timeouts"`
	User               []logzmonitor.UserState    `json:"user"`
}
