// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbcassandratable "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbcassandratable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbCassandraTable(name string, args CosmosdbCassandraTableArgs) *CosmosdbCassandraTable {
	return &CosmosdbCassandraTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbCassandraTable)(nil)

type CosmosdbCassandraTable struct {
	Name  string
	Args  CosmosdbCassandraTableArgs
	state *cosmosdbCassandraTableState
}

func (cct *CosmosdbCassandraTable) Type() string {
	return "azurerm_cosmosdb_cassandra_table"
}

func (cct *CosmosdbCassandraTable) LocalName() string {
	return cct.Name
}

func (cct *CosmosdbCassandraTable) Configuration() interface{} {
	return cct.Args
}

func (cct *CosmosdbCassandraTable) Attributes() cosmosdbCassandraTableAttributes {
	return cosmosdbCassandraTableAttributes{ref: terra.ReferenceResource(cct)}
}

func (cct *CosmosdbCassandraTable) ImportState(av io.Reader) error {
	cct.state = &cosmosdbCassandraTableState{}
	if err := json.NewDecoder(av).Decode(cct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cct.Type(), cct.LocalName(), err)
	}
	return nil
}

func (cct *CosmosdbCassandraTable) State() (*cosmosdbCassandraTableState, bool) {
	return cct.state, cct.state != nil
}

func (cct *CosmosdbCassandraTable) StateMust() *cosmosdbCassandraTableState {
	if cct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cct.Type(), cct.LocalName()))
	}
	return cct.state
}

func (cct *CosmosdbCassandraTable) DependOn() terra.Reference {
	return terra.ReferenceResource(cct)
}

type CosmosdbCassandraTableArgs struct {
	// AnalyticalStorageTtl: number, optional
	AnalyticalStorageTtl terra.NumberValue `hcl:"analytical_storage_ttl,attr"`
	// CassandraKeyspaceId: string, required
	CassandraKeyspaceId terra.StringValue `hcl:"cassandra_keyspace_id,attr" validate:"required"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbcassandratable.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Schema: required
	Schema *cosmosdbcassandratable.Schema `hcl:"schema,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbcassandratable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbCassandraTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbCassandraTableAttributes struct {
	ref terra.Reference
}

func (cct cosmosdbCassandraTableAttributes) AnalyticalStorageTtl() terra.NumberValue {
	return terra.ReferenceNumber(cct.ref.Append("analytical_storage_ttl"))
}

func (cct cosmosdbCassandraTableAttributes) CassandraKeyspaceId() terra.StringValue {
	return terra.ReferenceString(cct.ref.Append("cassandra_keyspace_id"))
}

func (cct cosmosdbCassandraTableAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceNumber(cct.ref.Append("default_ttl"))
}

func (cct cosmosdbCassandraTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cct.ref.Append("id"))
}

func (cct cosmosdbCassandraTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cct.ref.Append("name"))
}

func (cct cosmosdbCassandraTableAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(cct.ref.Append("throughput"))
}

func (cct cosmosdbCassandraTableAttributes) AutoscaleSettings() terra.ListValue[cosmosdbcassandratable.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbcassandratable.AutoscaleSettingsAttributes](cct.ref.Append("autoscale_settings"))
}

func (cct cosmosdbCassandraTableAttributes) Schema() terra.ListValue[cosmosdbcassandratable.SchemaAttributes] {
	return terra.ReferenceList[cosmosdbcassandratable.SchemaAttributes](cct.ref.Append("schema"))
}

func (cct cosmosdbCassandraTableAttributes) Timeouts() cosmosdbcassandratable.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbcassandratable.TimeoutsAttributes](cct.ref.Append("timeouts"))
}

type cosmosdbCassandraTableState struct {
	AnalyticalStorageTtl float64                                         `json:"analytical_storage_ttl"`
	CassandraKeyspaceId  string                                          `json:"cassandra_keyspace_id"`
	DefaultTtl           float64                                         `json:"default_ttl"`
	Id                   string                                          `json:"id"`
	Name                 string                                          `json:"name"`
	Throughput           float64                                         `json:"throughput"`
	AutoscaleSettings    []cosmosdbcassandratable.AutoscaleSettingsState `json:"autoscale_settings"`
	Schema               []cosmosdbcassandratable.SchemaState            `json:"schema"`
	Timeouts             *cosmosdbcassandratable.TimeoutsState           `json:"timeouts"`
}
