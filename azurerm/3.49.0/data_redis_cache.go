// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datarediscache "github.com/golingon/terraproviders/azurerm/3.49.0/datarediscache"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataRedisCache(name string, args DataRedisCacheArgs) *DataRedisCache {
	return &DataRedisCache{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataRedisCache)(nil)

type DataRedisCache struct {
	Name string
	Args DataRedisCacheArgs
}

func (rc *DataRedisCache) DataSource() string {
	return "azurerm_redis_cache"
}

func (rc *DataRedisCache) LocalName() string {
	return rc.Name
}

func (rc *DataRedisCache) Configuration() interface{} {
	return rc.Args
}

func (rc *DataRedisCache) Attributes() dataRedisCacheAttributes {
	return dataRedisCacheAttributes{ref: terra.ReferenceDataResource(rc)}
}

type DataRedisCacheArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// PatchSchedule: min=0
	PatchSchedule []datarediscache.PatchSchedule `hcl:"patch_schedule,block" validate:"min=0"`
	// RedisConfiguration: min=0
	RedisConfiguration []datarediscache.RedisConfiguration `hcl:"redis_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datarediscache.Timeouts `hcl:"timeouts,block"`
}
type dataRedisCacheAttributes struct {
	ref terra.Reference
}

func (rc dataRedisCacheAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("capacity"))
}

func (rc dataRedisCacheAttributes) EnableNonSslPort() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("enable_non_ssl_port"))
}

func (rc dataRedisCacheAttributes) Family() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("family"))
}

func (rc dataRedisCacheAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("hostname"))
}

func (rc dataRedisCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("id"))
}

func (rc dataRedisCacheAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("location"))
}

func (rc dataRedisCacheAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("minimum_tls_version"))
}

func (rc dataRedisCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("name"))
}

func (rc dataRedisCacheAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("port"))
}

func (rc dataRedisCacheAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("primary_access_key"))
}

func (rc dataRedisCacheAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("primary_connection_string"))
}

func (rc dataRedisCacheAttributes) PrivateStaticIpAddress() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("private_static_ip_address"))
}

func (rc dataRedisCacheAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("resource_group_name"))
}

func (rc dataRedisCacheAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("secondary_access_key"))
}

func (rc dataRedisCacheAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("secondary_connection_string"))
}

func (rc dataRedisCacheAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("shard_count"))
}

func (rc dataRedisCacheAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("sku_name"))
}

func (rc dataRedisCacheAttributes) SslPort() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("ssl_port"))
}

func (rc dataRedisCacheAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("subnet_id"))
}

func (rc dataRedisCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags"))
}

func (rc dataRedisCacheAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rc.ref.Append("zones"))
}

func (rc dataRedisCacheAttributes) PatchSchedule() terra.ListValue[datarediscache.PatchScheduleAttributes] {
	return terra.ReferenceList[datarediscache.PatchScheduleAttributes](rc.ref.Append("patch_schedule"))
}

func (rc dataRedisCacheAttributes) RedisConfiguration() terra.ListValue[datarediscache.RedisConfigurationAttributes] {
	return terra.ReferenceList[datarediscache.RedisConfigurationAttributes](rc.ref.Append("redis_configuration"))
}

func (rc dataRedisCacheAttributes) Timeouts() datarediscache.TimeoutsAttributes {
	return terra.ReferenceSingle[datarediscache.TimeoutsAttributes](rc.ref.Append("timeouts"))
}
