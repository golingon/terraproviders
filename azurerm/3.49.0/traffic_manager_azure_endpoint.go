// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	trafficmanagerazureendpoint "github.com/golingon/terraproviders/azurerm/3.49.0/trafficmanagerazureendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTrafficManagerAzureEndpoint(name string, args TrafficManagerAzureEndpointArgs) *TrafficManagerAzureEndpoint {
	return &TrafficManagerAzureEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TrafficManagerAzureEndpoint)(nil)

type TrafficManagerAzureEndpoint struct {
	Name  string
	Args  TrafficManagerAzureEndpointArgs
	state *trafficManagerAzureEndpointState
}

func (tmae *TrafficManagerAzureEndpoint) Type() string {
	return "azurerm_traffic_manager_azure_endpoint"
}

func (tmae *TrafficManagerAzureEndpoint) LocalName() string {
	return tmae.Name
}

func (tmae *TrafficManagerAzureEndpoint) Configuration() interface{} {
	return tmae.Args
}

func (tmae *TrafficManagerAzureEndpoint) Attributes() trafficManagerAzureEndpointAttributes {
	return trafficManagerAzureEndpointAttributes{ref: terra.ReferenceResource(tmae)}
}

func (tmae *TrafficManagerAzureEndpoint) ImportState(av io.Reader) error {
	tmae.state = &trafficManagerAzureEndpointState{}
	if err := json.NewDecoder(av).Decode(tmae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tmae.Type(), tmae.LocalName(), err)
	}
	return nil
}

func (tmae *TrafficManagerAzureEndpoint) State() (*trafficManagerAzureEndpointState, bool) {
	return tmae.state, tmae.state != nil
}

func (tmae *TrafficManagerAzureEndpoint) StateMust() *trafficManagerAzureEndpointState {
	if tmae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tmae.Type(), tmae.LocalName()))
	}
	return tmae.state
}

func (tmae *TrafficManagerAzureEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(tmae)
}

type TrafficManagerAzureEndpointArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// GeoMappings: list of string, optional
	GeoMappings terra.ListValue[terra.StringValue] `hcl:"geo_mappings,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ProfileId: string, required
	ProfileId terra.StringValue `hcl:"profile_id,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// CustomHeader: min=0
	CustomHeader []trafficmanagerazureendpoint.CustomHeader `hcl:"custom_header,block" validate:"min=0"`
	// Subnet: min=0
	Subnet []trafficmanagerazureendpoint.Subnet `hcl:"subnet,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *trafficmanagerazureendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TrafficManagerAzureEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type trafficManagerAzureEndpointAttributes struct {
	ref terra.Reference
}

func (tmae trafficManagerAzureEndpointAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(tmae.ref.Append("enabled"))
}

func (tmae trafficManagerAzureEndpointAttributes) GeoMappings() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](tmae.ref.Append("geo_mappings"))
}

func (tmae trafficManagerAzureEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tmae.ref.Append("id"))
}

func (tmae trafficManagerAzureEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(tmae.ref.Append("name"))
}

func (tmae trafficManagerAzureEndpointAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(tmae.ref.Append("priority"))
}

func (tmae trafficManagerAzureEndpointAttributes) ProfileId() terra.StringValue {
	return terra.ReferenceString(tmae.ref.Append("profile_id"))
}

func (tmae trafficManagerAzureEndpointAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(tmae.ref.Append("target_resource_id"))
}

func (tmae trafficManagerAzureEndpointAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(tmae.ref.Append("weight"))
}

func (tmae trafficManagerAzureEndpointAttributes) CustomHeader() terra.ListValue[trafficmanagerazureendpoint.CustomHeaderAttributes] {
	return terra.ReferenceList[trafficmanagerazureendpoint.CustomHeaderAttributes](tmae.ref.Append("custom_header"))
}

func (tmae trafficManagerAzureEndpointAttributes) Subnet() terra.ListValue[trafficmanagerazureendpoint.SubnetAttributes] {
	return terra.ReferenceList[trafficmanagerazureendpoint.SubnetAttributes](tmae.ref.Append("subnet"))
}

func (tmae trafficManagerAzureEndpointAttributes) Timeouts() trafficmanagerazureendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[trafficmanagerazureendpoint.TimeoutsAttributes](tmae.ref.Append("timeouts"))
}

type trafficManagerAzureEndpointState struct {
	Enabled          bool                                            `json:"enabled"`
	GeoMappings      []string                                        `json:"geo_mappings"`
	Id               string                                          `json:"id"`
	Name             string                                          `json:"name"`
	Priority         float64                                         `json:"priority"`
	ProfileId        string                                          `json:"profile_id"`
	TargetResourceId string                                          `json:"target_resource_id"`
	Weight           float64                                         `json:"weight"`
	CustomHeader     []trafficmanagerazureendpoint.CustomHeaderState `json:"custom_header"`
	Subnet           []trafficmanagerazureendpoint.SubnetState       `json:"subnet"`
	Timeouts         *trafficmanagerazureendpoint.TimeoutsState      `json:"timeouts"`
}
