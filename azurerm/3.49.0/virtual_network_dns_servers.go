// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualnetworkdnsservers "github.com/golingon/terraproviders/azurerm/3.49.0/virtualnetworkdnsservers"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualNetworkDnsServers(name string, args VirtualNetworkDnsServersArgs) *VirtualNetworkDnsServers {
	return &VirtualNetworkDnsServers{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualNetworkDnsServers)(nil)

type VirtualNetworkDnsServers struct {
	Name  string
	Args  VirtualNetworkDnsServersArgs
	state *virtualNetworkDnsServersState
}

func (vnds *VirtualNetworkDnsServers) Type() string {
	return "azurerm_virtual_network_dns_servers"
}

func (vnds *VirtualNetworkDnsServers) LocalName() string {
	return vnds.Name
}

func (vnds *VirtualNetworkDnsServers) Configuration() interface{} {
	return vnds.Args
}

func (vnds *VirtualNetworkDnsServers) Attributes() virtualNetworkDnsServersAttributes {
	return virtualNetworkDnsServersAttributes{ref: terra.ReferenceResource(vnds)}
}

func (vnds *VirtualNetworkDnsServers) ImportState(av io.Reader) error {
	vnds.state = &virtualNetworkDnsServersState{}
	if err := json.NewDecoder(av).Decode(vnds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vnds.Type(), vnds.LocalName(), err)
	}
	return nil
}

func (vnds *VirtualNetworkDnsServers) State() (*virtualNetworkDnsServersState, bool) {
	return vnds.state, vnds.state != nil
}

func (vnds *VirtualNetworkDnsServers) StateMust() *virtualNetworkDnsServersState {
	if vnds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vnds.Type(), vnds.LocalName()))
	}
	return vnds.state
}

func (vnds *VirtualNetworkDnsServers) DependOn() terra.Reference {
	return terra.ReferenceResource(vnds)
}

type VirtualNetworkDnsServersArgs struct {
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualnetworkdnsservers.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualNetworkDnsServers depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualNetworkDnsServersAttributes struct {
	ref terra.Reference
}

func (vnds virtualNetworkDnsServersAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](vnds.ref.Append("dns_servers"))
}

func (vnds virtualNetworkDnsServersAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vnds.ref.Append("id"))
}

func (vnds virtualNetworkDnsServersAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(vnds.ref.Append("virtual_network_id"))
}

func (vnds virtualNetworkDnsServersAttributes) Timeouts() virtualnetworkdnsservers.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualnetworkdnsservers.TimeoutsAttributes](vnds.ref.Append("timeouts"))
}

type virtualNetworkDnsServersState struct {
	DnsServers       []string                                `json:"dns_servers"`
	Id               string                                  `json:"id"`
	VirtualNetworkId string                                  `json:"virtual_network_id"`
	Timeouts         *virtualnetworkdnsservers.TimeoutsState `json:"timeouts"`
}
