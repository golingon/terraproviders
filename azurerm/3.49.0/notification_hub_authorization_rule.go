// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	notificationhubauthorizationrule "github.com/golingon/terraproviders/azurerm/3.49.0/notificationhubauthorizationrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNotificationHubAuthorizationRule(name string, args NotificationHubAuthorizationRuleArgs) *NotificationHubAuthorizationRule {
	return &NotificationHubAuthorizationRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NotificationHubAuthorizationRule)(nil)

type NotificationHubAuthorizationRule struct {
	Name  string
	Args  NotificationHubAuthorizationRuleArgs
	state *notificationHubAuthorizationRuleState
}

func (nhar *NotificationHubAuthorizationRule) Type() string {
	return "azurerm_notification_hub_authorization_rule"
}

func (nhar *NotificationHubAuthorizationRule) LocalName() string {
	return nhar.Name
}

func (nhar *NotificationHubAuthorizationRule) Configuration() interface{} {
	return nhar.Args
}

func (nhar *NotificationHubAuthorizationRule) Attributes() notificationHubAuthorizationRuleAttributes {
	return notificationHubAuthorizationRuleAttributes{ref: terra.ReferenceResource(nhar)}
}

func (nhar *NotificationHubAuthorizationRule) ImportState(av io.Reader) error {
	nhar.state = &notificationHubAuthorizationRuleState{}
	if err := json.NewDecoder(av).Decode(nhar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nhar.Type(), nhar.LocalName(), err)
	}
	return nil
}

func (nhar *NotificationHubAuthorizationRule) State() (*notificationHubAuthorizationRuleState, bool) {
	return nhar.state, nhar.state != nil
}

func (nhar *NotificationHubAuthorizationRule) StateMust() *notificationHubAuthorizationRuleState {
	if nhar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nhar.Type(), nhar.LocalName()))
	}
	return nhar.state
}

func (nhar *NotificationHubAuthorizationRule) DependOn() terra.Reference {
	return terra.ReferenceResource(nhar)
}

type NotificationHubAuthorizationRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Listen: bool, optional
	Listen terra.BoolValue `hcl:"listen,attr"`
	// Manage: bool, optional
	Manage terra.BoolValue `hcl:"manage,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// NotificationHubName: string, required
	NotificationHubName terra.StringValue `hcl:"notification_hub_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Send: bool, optional
	Send terra.BoolValue `hcl:"send,attr"`
	// Timeouts: optional
	Timeouts *notificationhubauthorizationrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NotificationHubAuthorizationRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type notificationHubAuthorizationRuleAttributes struct {
	ref terra.Reference
}

func (nhar notificationHubAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("id"))
}

func (nhar notificationHubAuthorizationRuleAttributes) Listen() terra.BoolValue {
	return terra.ReferenceBool(nhar.ref.Append("listen"))
}

func (nhar notificationHubAuthorizationRuleAttributes) Manage() terra.BoolValue {
	return terra.ReferenceBool(nhar.ref.Append("manage"))
}

func (nhar notificationHubAuthorizationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("name"))
}

func (nhar notificationHubAuthorizationRuleAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("namespace_name"))
}

func (nhar notificationHubAuthorizationRuleAttributes) NotificationHubName() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("notification_hub_name"))
}

func (nhar notificationHubAuthorizationRuleAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("primary_access_key"))
}

func (nhar notificationHubAuthorizationRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("resource_group_name"))
}

func (nhar notificationHubAuthorizationRuleAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(nhar.ref.Append("secondary_access_key"))
}

func (nhar notificationHubAuthorizationRuleAttributes) Send() terra.BoolValue {
	return terra.ReferenceBool(nhar.ref.Append("send"))
}

func (nhar notificationHubAuthorizationRuleAttributes) Timeouts() notificationhubauthorizationrule.TimeoutsAttributes {
	return terra.ReferenceSingle[notificationhubauthorizationrule.TimeoutsAttributes](nhar.ref.Append("timeouts"))
}

type notificationHubAuthorizationRuleState struct {
	Id                  string                                          `json:"id"`
	Listen              bool                                            `json:"listen"`
	Manage              bool                                            `json:"manage"`
	Name                string                                          `json:"name"`
	NamespaceName       string                                          `json:"namespace_name"`
	NotificationHubName string                                          `json:"notification_hub_name"`
	PrimaryAccessKey    string                                          `json:"primary_access_key"`
	ResourceGroupName   string                                          `json:"resource_group_name"`
	SecondaryAccessKey  string                                          `json:"secondary_access_key"`
	Send                bool                                            `json:"send"`
	Timeouts            *notificationhubauthorizationrule.TimeoutsState `json:"timeouts"`
}
