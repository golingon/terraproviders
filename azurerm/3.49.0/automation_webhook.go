// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationwebhook "github.com/golingon/terraproviders/azurerm/3.49.0/automationwebhook"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationWebhook(name string, args AutomationWebhookArgs) *AutomationWebhook {
	return &AutomationWebhook{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationWebhook)(nil)

type AutomationWebhook struct {
	Name  string
	Args  AutomationWebhookArgs
	state *automationWebhookState
}

func (aw *AutomationWebhook) Type() string {
	return "azurerm_automation_webhook"
}

func (aw *AutomationWebhook) LocalName() string {
	return aw.Name
}

func (aw *AutomationWebhook) Configuration() interface{} {
	return aw.Args
}

func (aw *AutomationWebhook) Attributes() automationWebhookAttributes {
	return automationWebhookAttributes{ref: terra.ReferenceResource(aw)}
}

func (aw *AutomationWebhook) ImportState(av io.Reader) error {
	aw.state = &automationWebhookState{}
	if err := json.NewDecoder(av).Decode(aw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aw.Type(), aw.LocalName(), err)
	}
	return nil
}

func (aw *AutomationWebhook) State() (*automationWebhookState, bool) {
	return aw.state, aw.state != nil
}

func (aw *AutomationWebhook) StateMust() *automationWebhookState {
	if aw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aw.Type(), aw.LocalName()))
	}
	return aw.state
}

func (aw *AutomationWebhook) DependOn() terra.Reference {
	return terra.ReferenceResource(aw)
}

type AutomationWebhookArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExpiryTime: string, required
	ExpiryTime terra.StringValue `hcl:"expiry_time,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RunOnWorkerGroup: string, optional
	RunOnWorkerGroup terra.StringValue `hcl:"run_on_worker_group,attr"`
	// RunbookName: string, required
	RunbookName terra.StringValue `hcl:"runbook_name,attr" validate:"required"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
	// Timeouts: optional
	Timeouts *automationwebhook.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationWebhook depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationWebhookAttributes struct {
	ref terra.Reference
}

func (aw automationWebhookAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("automation_account_name"))
}

func (aw automationWebhookAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(aw.ref.Append("enabled"))
}

func (aw automationWebhookAttributes) ExpiryTime() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("expiry_time"))
}

func (aw automationWebhookAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("id"))
}

func (aw automationWebhookAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("name"))
}

func (aw automationWebhookAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aw.ref.Append("parameters"))
}

func (aw automationWebhookAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("resource_group_name"))
}

func (aw automationWebhookAttributes) RunOnWorkerGroup() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("run_on_worker_group"))
}

func (aw automationWebhookAttributes) RunbookName() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("runbook_name"))
}

func (aw automationWebhookAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("uri"))
}

func (aw automationWebhookAttributes) Timeouts() automationwebhook.TimeoutsAttributes {
	return terra.ReferenceSingle[automationwebhook.TimeoutsAttributes](aw.ref.Append("timeouts"))
}

type automationWebhookState struct {
	AutomationAccountName string                           `json:"automation_account_name"`
	Enabled               bool                             `json:"enabled"`
	ExpiryTime            string                           `json:"expiry_time"`
	Id                    string                           `json:"id"`
	Name                  string                           `json:"name"`
	Parameters            map[string]string                `json:"parameters"`
	ResourceGroupName     string                           `json:"resource_group_name"`
	RunOnWorkerGroup      string                           `json:"run_on_worker_group"`
	RunbookName           string                           `json:"runbook_name"`
	Uri                   string                           `json:"uri"`
	Timeouts              *automationwebhook.TimeoutsState `json:"timeouts"`
}
