// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storageaccountnetworkrules "github.com/golingon/terraproviders/azurerm/3.49.0/storageaccountnetworkrules"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageAccountNetworkRules(name string, args StorageAccountNetworkRulesArgs) *StorageAccountNetworkRules {
	return &StorageAccountNetworkRules{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageAccountNetworkRules)(nil)

type StorageAccountNetworkRules struct {
	Name  string
	Args  StorageAccountNetworkRulesArgs
	state *storageAccountNetworkRulesState
}

func (sanr *StorageAccountNetworkRules) Type() string {
	return "azurerm_storage_account_network_rules"
}

func (sanr *StorageAccountNetworkRules) LocalName() string {
	return sanr.Name
}

func (sanr *StorageAccountNetworkRules) Configuration() interface{} {
	return sanr.Args
}

func (sanr *StorageAccountNetworkRules) Attributes() storageAccountNetworkRulesAttributes {
	return storageAccountNetworkRulesAttributes{ref: terra.ReferenceResource(sanr)}
}

func (sanr *StorageAccountNetworkRules) ImportState(av io.Reader) error {
	sanr.state = &storageAccountNetworkRulesState{}
	if err := json.NewDecoder(av).Decode(sanr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sanr.Type(), sanr.LocalName(), err)
	}
	return nil
}

func (sanr *StorageAccountNetworkRules) State() (*storageAccountNetworkRulesState, bool) {
	return sanr.state, sanr.state != nil
}

func (sanr *StorageAccountNetworkRules) StateMust() *storageAccountNetworkRulesState {
	if sanr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sanr.Type(), sanr.LocalName()))
	}
	return sanr.state
}

func (sanr *StorageAccountNetworkRules) DependOn() terra.Reference {
	return terra.ReferenceResource(sanr)
}

type StorageAccountNetworkRulesArgs struct {
	// Bypass: set of string, optional
	Bypass terra.SetValue[terra.StringValue] `hcl:"bypass,attr"`
	// DefaultAction: string, required
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRules: set of string, optional
	IpRules terra.SetValue[terra.StringValue] `hcl:"ip_rules,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// VirtualNetworkSubnetIds: set of string, optional
	VirtualNetworkSubnetIds terra.SetValue[terra.StringValue] `hcl:"virtual_network_subnet_ids,attr"`
	// PrivateLinkAccess: min=0
	PrivateLinkAccess []storageaccountnetworkrules.PrivateLinkAccess `hcl:"private_link_access,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *storageaccountnetworkrules.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageAccountNetworkRules depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageAccountNetworkRulesAttributes struct {
	ref terra.Reference
}

func (sanr storageAccountNetworkRulesAttributes) Bypass() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sanr.ref.Append("bypass"))
}

func (sanr storageAccountNetworkRulesAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceString(sanr.ref.Append("default_action"))
}

func (sanr storageAccountNetworkRulesAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sanr.ref.Append("id"))
}

func (sanr storageAccountNetworkRulesAttributes) IpRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sanr.ref.Append("ip_rules"))
}

func (sanr storageAccountNetworkRulesAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(sanr.ref.Append("storage_account_id"))
}

func (sanr storageAccountNetworkRulesAttributes) VirtualNetworkSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sanr.ref.Append("virtual_network_subnet_ids"))
}

func (sanr storageAccountNetworkRulesAttributes) PrivateLinkAccess() terra.ListValue[storageaccountnetworkrules.PrivateLinkAccessAttributes] {
	return terra.ReferenceList[storageaccountnetworkrules.PrivateLinkAccessAttributes](sanr.ref.Append("private_link_access"))
}

func (sanr storageAccountNetworkRulesAttributes) Timeouts() storageaccountnetworkrules.TimeoutsAttributes {
	return terra.ReferenceSingle[storageaccountnetworkrules.TimeoutsAttributes](sanr.ref.Append("timeouts"))
}

type storageAccountNetworkRulesState struct {
	Bypass                  []string                                            `json:"bypass"`
	DefaultAction           string                                              `json:"default_action"`
	Id                      string                                              `json:"id"`
	IpRules                 []string                                            `json:"ip_rules"`
	StorageAccountId        string                                              `json:"storage_account_id"`
	VirtualNetworkSubnetIds []string                                            `json:"virtual_network_subnet_ids"`
	PrivateLinkAccess       []storageaccountnetworkrules.PrivateLinkAccessState `json:"private_link_access"`
	Timeouts                *storageaccountnetworkrules.TimeoutsState           `json:"timeouts"`
}
