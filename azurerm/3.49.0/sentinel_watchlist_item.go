// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sentinelwatchlistitem "github.com/golingon/terraproviders/azurerm/3.49.0/sentinelwatchlistitem"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSentinelWatchlistItem(name string, args SentinelWatchlistItemArgs) *SentinelWatchlistItem {
	return &SentinelWatchlistItem{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SentinelWatchlistItem)(nil)

type SentinelWatchlistItem struct {
	Name  string
	Args  SentinelWatchlistItemArgs
	state *sentinelWatchlistItemState
}

func (swi *SentinelWatchlistItem) Type() string {
	return "azurerm_sentinel_watchlist_item"
}

func (swi *SentinelWatchlistItem) LocalName() string {
	return swi.Name
}

func (swi *SentinelWatchlistItem) Configuration() interface{} {
	return swi.Args
}

func (swi *SentinelWatchlistItem) Attributes() sentinelWatchlistItemAttributes {
	return sentinelWatchlistItemAttributes{ref: terra.ReferenceResource(swi)}
}

func (swi *SentinelWatchlistItem) ImportState(av io.Reader) error {
	swi.state = &sentinelWatchlistItemState{}
	if err := json.NewDecoder(av).Decode(swi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", swi.Type(), swi.LocalName(), err)
	}
	return nil
}

func (swi *SentinelWatchlistItem) State() (*sentinelWatchlistItemState, bool) {
	return swi.state, swi.state != nil
}

func (swi *SentinelWatchlistItem) StateMust() *sentinelWatchlistItemState {
	if swi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", swi.Type(), swi.LocalName()))
	}
	return swi.state
}

func (swi *SentinelWatchlistItem) DependOn() terra.Reference {
	return terra.ReferenceResource(swi)
}

type SentinelWatchlistItemArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Properties: map of string, required
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr" validate:"required"`
	// WatchlistId: string, required
	WatchlistId terra.StringValue `hcl:"watchlist_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *sentinelwatchlistitem.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SentinelWatchlistItem depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sentinelWatchlistItemAttributes struct {
	ref terra.Reference
}

func (swi sentinelWatchlistItemAttributes) Id() terra.StringValue {
	return terra.ReferenceString(swi.ref.Append("id"))
}

func (swi sentinelWatchlistItemAttributes) Name() terra.StringValue {
	return terra.ReferenceString(swi.ref.Append("name"))
}

func (swi sentinelWatchlistItemAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](swi.ref.Append("properties"))
}

func (swi sentinelWatchlistItemAttributes) WatchlistId() terra.StringValue {
	return terra.ReferenceString(swi.ref.Append("watchlist_id"))
}

func (swi sentinelWatchlistItemAttributes) Timeouts() sentinelwatchlistitem.TimeoutsAttributes {
	return terra.ReferenceSingle[sentinelwatchlistitem.TimeoutsAttributes](swi.ref.Append("timeouts"))
}

type sentinelWatchlistItemState struct {
	Id          string                               `json:"id"`
	Name        string                               `json:"name"`
	Properties  map[string]string                    `json:"properties"`
	WatchlistId string                               `json:"watchlist_id"`
	Timeouts    *sentinelwatchlistitem.TimeoutsState `json:"timeouts"`
}
