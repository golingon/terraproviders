// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataimages

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Images struct {
	// DataDisk: min=0
	DataDisk []DataDisk `hcl:"data_disk,block" validate:"min=0"`
	// OsDisk: min=0
	OsDisk []OsDisk `hcl:"os_disk,block" validate:"min=0"`
}

type DataDisk struct{}

type OsDisk struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type ImagesAttributes struct {
	ref terra.Reference
}

func (i ImagesAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i ImagesAttributes) InternalWithRef(ref terra.Reference) ImagesAttributes {
	return ImagesAttributes{ref: ref}
}

func (i ImagesAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i ImagesAttributes) Location() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("location"))
}

func (i ImagesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("name"))
}

func (i ImagesAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](i.ref.Append("tags"))
}

func (i ImagesAttributes) ZoneResilient() terra.BoolValue {
	return terra.ReferenceBool(i.ref.Append("zone_resilient"))
}

func (i ImagesAttributes) DataDisk() terra.ListValue[DataDiskAttributes] {
	return terra.ReferenceList[DataDiskAttributes](i.ref.Append("data_disk"))
}

func (i ImagesAttributes) OsDisk() terra.ListValue[OsDiskAttributes] {
	return terra.ReferenceList[OsDiskAttributes](i.ref.Append("os_disk"))
}

type DataDiskAttributes struct {
	ref terra.Reference
}

func (dd DataDiskAttributes) InternalRef() terra.Reference {
	return dd.ref
}

func (dd DataDiskAttributes) InternalWithRef(ref terra.Reference) DataDiskAttributes {
	return DataDiskAttributes{ref: ref}
}

func (dd DataDiskAttributes) InternalTokens() hclwrite.Tokens {
	return dd.ref.InternalTokens()
}

func (dd DataDiskAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceString(dd.ref.Append("blob_uri"))
}

func (dd DataDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceString(dd.ref.Append("caching"))
}

func (dd DataDiskAttributes) Lun() terra.NumberValue {
	return terra.ReferenceNumber(dd.ref.Append("lun"))
}

func (dd DataDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceString(dd.ref.Append("managed_disk_id"))
}

func (dd DataDiskAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceNumber(dd.ref.Append("size_gb"))
}

type OsDiskAttributes struct {
	ref terra.Reference
}

func (od OsDiskAttributes) InternalRef() terra.Reference {
	return od.ref
}

func (od OsDiskAttributes) InternalWithRef(ref terra.Reference) OsDiskAttributes {
	return OsDiskAttributes{ref: ref}
}

func (od OsDiskAttributes) InternalTokens() hclwrite.Tokens {
	return od.ref.InternalTokens()
}

func (od OsDiskAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceString(od.ref.Append("blob_uri"))
}

func (od OsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceString(od.ref.Append("caching"))
}

func (od OsDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceString(od.ref.Append("managed_disk_id"))
}

func (od OsDiskAttributes) OsState() terra.StringValue {
	return terra.ReferenceString(od.ref.Append("os_state"))
}

func (od OsDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(od.ref.Append("os_type"))
}

func (od OsDiskAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceNumber(od.ref.Append("size_gb"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type ImagesState struct {
	Location      string            `json:"location"`
	Name          string            `json:"name"`
	Tags          map[string]string `json:"tags"`
	ZoneResilient bool              `json:"zone_resilient"`
	DataDisk      []DataDiskState   `json:"data_disk"`
	OsDisk        []OsDiskState     `json:"os_disk"`
}

type DataDiskState struct {
	BlobUri       string  `json:"blob_uri"`
	Caching       string  `json:"caching"`
	Lun           float64 `json:"lun"`
	ManagedDiskId string  `json:"managed_disk_id"`
	SizeGb        float64 `json:"size_gb"`
}

type OsDiskState struct {
	BlobUri       string  `json:"blob_uri"`
	Caching       string  `json:"caching"`
	ManagedDiskId string  `json:"managed_disk_id"`
	OsState       string  `json:"os_state"`
	OsType        string  `json:"os_type"`
	SizeGb        float64 `json:"size_gb"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
