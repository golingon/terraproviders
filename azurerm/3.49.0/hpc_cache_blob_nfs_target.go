// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	hpccacheblobnfstarget "github.com/golingon/terraproviders/azurerm/3.49.0/hpccacheblobnfstarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHpcCacheBlobNfsTarget(name string, args HpcCacheBlobNfsTargetArgs) *HpcCacheBlobNfsTarget {
	return &HpcCacheBlobNfsTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HpcCacheBlobNfsTarget)(nil)

type HpcCacheBlobNfsTarget struct {
	Name  string
	Args  HpcCacheBlobNfsTargetArgs
	state *hpcCacheBlobNfsTargetState
}

func (hcbnt *HpcCacheBlobNfsTarget) Type() string {
	return "azurerm_hpc_cache_blob_nfs_target"
}

func (hcbnt *HpcCacheBlobNfsTarget) LocalName() string {
	return hcbnt.Name
}

func (hcbnt *HpcCacheBlobNfsTarget) Configuration() interface{} {
	return hcbnt.Args
}

func (hcbnt *HpcCacheBlobNfsTarget) Attributes() hpcCacheBlobNfsTargetAttributes {
	return hpcCacheBlobNfsTargetAttributes{ref: terra.ReferenceResource(hcbnt)}
}

func (hcbnt *HpcCacheBlobNfsTarget) ImportState(av io.Reader) error {
	hcbnt.state = &hpcCacheBlobNfsTargetState{}
	if err := json.NewDecoder(av).Decode(hcbnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcbnt.Type(), hcbnt.LocalName(), err)
	}
	return nil
}

func (hcbnt *HpcCacheBlobNfsTarget) State() (*hpcCacheBlobNfsTargetState, bool) {
	return hcbnt.state, hcbnt.state != nil
}

func (hcbnt *HpcCacheBlobNfsTarget) StateMust() *hpcCacheBlobNfsTargetState {
	if hcbnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcbnt.Type(), hcbnt.LocalName()))
	}
	return hcbnt.state
}

func (hcbnt *HpcCacheBlobNfsTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(hcbnt)
}

type HpcCacheBlobNfsTargetArgs struct {
	// AccessPolicyName: string, optional
	AccessPolicyName terra.StringValue `hcl:"access_policy_name,attr"`
	// CacheName: string, required
	CacheName terra.StringValue `hcl:"cache_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespacePath: string, required
	NamespacePath terra.StringValue `hcl:"namespace_path,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// UsageModel: string, required
	UsageModel terra.StringValue `hcl:"usage_model,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *hpccacheblobnfstarget.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HpcCacheBlobNfsTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type hpcCacheBlobNfsTargetAttributes struct {
	ref terra.Reference
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) AccessPolicyName() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("access_policy_name"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) CacheName() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("cache_name"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("id"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("name"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("namespace_path"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("resource_group_name"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("storage_container_id"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) UsageModel() terra.StringValue {
	return terra.ReferenceString(hcbnt.ref.Append("usage_model"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) Timeouts() hpccacheblobnfstarget.TimeoutsAttributes {
	return terra.ReferenceSingle[hpccacheblobnfstarget.TimeoutsAttributes](hcbnt.ref.Append("timeouts"))
}

type hpcCacheBlobNfsTargetState struct {
	AccessPolicyName   string                               `json:"access_policy_name"`
	CacheName          string                               `json:"cache_name"`
	Id                 string                               `json:"id"`
	Name               string                               `json:"name"`
	NamespacePath      string                               `json:"namespace_path"`
	ResourceGroupName  string                               `json:"resource_group_name"`
	StorageContainerId string                               `json:"storage_container_id"`
	UsageModel         string                               `json:"usage_model"`
	Timeouts           *hpccacheblobnfstarget.TimeoutsState `json:"timeouts"`
}
