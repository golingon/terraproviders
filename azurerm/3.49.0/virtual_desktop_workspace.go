// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualdesktopworkspace "github.com/golingon/terraproviders/azurerm/3.49.0/virtualdesktopworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualDesktopWorkspace(name string, args VirtualDesktopWorkspaceArgs) *VirtualDesktopWorkspace {
	return &VirtualDesktopWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualDesktopWorkspace)(nil)

type VirtualDesktopWorkspace struct {
	Name  string
	Args  VirtualDesktopWorkspaceArgs
	state *virtualDesktopWorkspaceState
}

func (vdw *VirtualDesktopWorkspace) Type() string {
	return "azurerm_virtual_desktop_workspace"
}

func (vdw *VirtualDesktopWorkspace) LocalName() string {
	return vdw.Name
}

func (vdw *VirtualDesktopWorkspace) Configuration() interface{} {
	return vdw.Args
}

func (vdw *VirtualDesktopWorkspace) Attributes() virtualDesktopWorkspaceAttributes {
	return virtualDesktopWorkspaceAttributes{ref: terra.ReferenceResource(vdw)}
}

func (vdw *VirtualDesktopWorkspace) ImportState(av io.Reader) error {
	vdw.state = &virtualDesktopWorkspaceState{}
	if err := json.NewDecoder(av).Decode(vdw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vdw.Type(), vdw.LocalName(), err)
	}
	return nil
}

func (vdw *VirtualDesktopWorkspace) State() (*virtualDesktopWorkspaceState, bool) {
	return vdw.state, vdw.state != nil
}

func (vdw *VirtualDesktopWorkspace) StateMust() *virtualDesktopWorkspaceState {
	if vdw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vdw.Type(), vdw.LocalName()))
	}
	return vdw.state
}

func (vdw *VirtualDesktopWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(vdw)
}

type VirtualDesktopWorkspaceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *virtualdesktopworkspace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualDesktopWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualDesktopWorkspaceAttributes struct {
	ref terra.Reference
}

func (vdw virtualDesktopWorkspaceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("description"))
}

func (vdw virtualDesktopWorkspaceAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("friendly_name"))
}

func (vdw virtualDesktopWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("id"))
}

func (vdw virtualDesktopWorkspaceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("location"))
}

func (vdw virtualDesktopWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("name"))
}

func (vdw virtualDesktopWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vdw.ref.Append("resource_group_name"))
}

func (vdw virtualDesktopWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vdw.ref.Append("tags"))
}

func (vdw virtualDesktopWorkspaceAttributes) Timeouts() virtualdesktopworkspace.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualdesktopworkspace.TimeoutsAttributes](vdw.ref.Append("timeouts"))
}

type virtualDesktopWorkspaceState struct {
	Description       string                                 `json:"description"`
	FriendlyName      string                                 `json:"friendly_name"`
	Id                string                                 `json:"id"`
	Location          string                                 `json:"location"`
	Name              string                                 `json:"name"`
	ResourceGroupName string                                 `json:"resource_group_name"`
	Tags              map[string]string                      `json:"tags"`
	Timeouts          *virtualdesktopworkspace.TimeoutsState `json:"timeouts"`
}
