// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	batchaccount "github.com/golingon/terraproviders/azurerm/3.49.0/batchaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBatchAccount(name string, args BatchAccountArgs) *BatchAccount {
	return &BatchAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchAccount)(nil)

type BatchAccount struct {
	Name  string
	Args  BatchAccountArgs
	state *batchAccountState
}

func (ba *BatchAccount) Type() string {
	return "azurerm_batch_account"
}

func (ba *BatchAccount) LocalName() string {
	return ba.Name
}

func (ba *BatchAccount) Configuration() interface{} {
	return ba.Args
}

func (ba *BatchAccount) Attributes() batchAccountAttributes {
	return batchAccountAttributes{ref: terra.ReferenceResource(ba)}
}

func (ba *BatchAccount) ImportState(av io.Reader) error {
	ba.state = &batchAccountState{}
	if err := json.NewDecoder(av).Decode(ba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ba.Type(), ba.LocalName(), err)
	}
	return nil
}

func (ba *BatchAccount) State() (*batchAccountState, bool) {
	return ba.state, ba.state != nil
}

func (ba *BatchAccount) StateMust() *batchAccountState {
	if ba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ba.Type(), ba.LocalName()))
	}
	return ba.state
}

func (ba *BatchAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(ba)
}

type BatchAccountArgs struct {
	// AllowedAuthenticationModes: set of string, optional
	AllowedAuthenticationModes terra.SetValue[terra.StringValue] `hcl:"allowed_authentication_modes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolAllocationMode: string, optional
	PoolAllocationMode terra.StringValue `hcl:"pool_allocation_mode,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountAuthenticationMode: string, optional
	StorageAccountAuthenticationMode terra.StringValue `hcl:"storage_account_authentication_mode,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// StorageAccountNodeIdentity: string, optional
	StorageAccountNodeIdentity terra.StringValue `hcl:"storage_account_node_identity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: min=0
	Encryption []batchaccount.Encryption `hcl:"encryption,block" validate:"min=0"`
	// Identity: optional
	Identity *batchaccount.Identity `hcl:"identity,block"`
	// KeyVaultReference: optional
	KeyVaultReference *batchaccount.KeyVaultReference `hcl:"key_vault_reference,block"`
	// Timeouts: optional
	Timeouts *batchaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BatchAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type batchAccountAttributes struct {
	ref terra.Reference
}

func (ba batchAccountAttributes) AccountEndpoint() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("account_endpoint"))
}

func (ba batchAccountAttributes) AllowedAuthenticationModes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ba.ref.Append("allowed_authentication_modes"))
}

func (ba batchAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("id"))
}

func (ba batchAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("location"))
}

func (ba batchAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("name"))
}

func (ba batchAccountAttributes) PoolAllocationMode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("pool_allocation_mode"))
}

func (ba batchAccountAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("primary_access_key"))
}

func (ba batchAccountAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ba.ref.Append("public_network_access_enabled"))
}

func (ba batchAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("resource_group_name"))
}

func (ba batchAccountAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("secondary_access_key"))
}

func (ba batchAccountAttributes) StorageAccountAuthenticationMode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("storage_account_authentication_mode"))
}

func (ba batchAccountAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("storage_account_id"))
}

func (ba batchAccountAttributes) StorageAccountNodeIdentity() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("storage_account_node_identity"))
}

func (ba batchAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ba.ref.Append("tags"))
}

func (ba batchAccountAttributes) Encryption() terra.ListValue[batchaccount.EncryptionAttributes] {
	return terra.ReferenceList[batchaccount.EncryptionAttributes](ba.ref.Append("encryption"))
}

func (ba batchAccountAttributes) Identity() terra.ListValue[batchaccount.IdentityAttributes] {
	return terra.ReferenceList[batchaccount.IdentityAttributes](ba.ref.Append("identity"))
}

func (ba batchAccountAttributes) KeyVaultReference() terra.ListValue[batchaccount.KeyVaultReferenceAttributes] {
	return terra.ReferenceList[batchaccount.KeyVaultReferenceAttributes](ba.ref.Append("key_vault_reference"))
}

func (ba batchAccountAttributes) Timeouts() batchaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[batchaccount.TimeoutsAttributes](ba.ref.Append("timeouts"))
}

type batchAccountState struct {
	AccountEndpoint                  string                                `json:"account_endpoint"`
	AllowedAuthenticationModes       []string                              `json:"allowed_authentication_modes"`
	Id                               string                                `json:"id"`
	Location                         string                                `json:"location"`
	Name                             string                                `json:"name"`
	PoolAllocationMode               string                                `json:"pool_allocation_mode"`
	PrimaryAccessKey                 string                                `json:"primary_access_key"`
	PublicNetworkAccessEnabled       bool                                  `json:"public_network_access_enabled"`
	ResourceGroupName                string                                `json:"resource_group_name"`
	SecondaryAccessKey               string                                `json:"secondary_access_key"`
	StorageAccountAuthenticationMode string                                `json:"storage_account_authentication_mode"`
	StorageAccountId                 string                                `json:"storage_account_id"`
	StorageAccountNodeIdentity       string                                `json:"storage_account_node_identity"`
	Tags                             map[string]string                     `json:"tags"`
	Encryption                       []batchaccount.EncryptionState        `json:"encryption"`
	Identity                         []batchaccount.IdentityState          `json:"identity"`
	KeyVaultReference                []batchaccount.KeyVaultReferenceState `json:"key_vault_reference"`
	Timeouts                         *batchaccount.TimeoutsState           `json:"timeouts"`
}
