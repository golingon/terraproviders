// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dataprotectionbackupinstancedisk "github.com/golingon/terraproviders/azurerm/3.49.0/dataprotectionbackupinstancedisk"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataProtectionBackupInstanceDisk(name string, args DataProtectionBackupInstanceDiskArgs) *DataProtectionBackupInstanceDisk {
	return &DataProtectionBackupInstanceDisk{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataProtectionBackupInstanceDisk)(nil)

type DataProtectionBackupInstanceDisk struct {
	Name  string
	Args  DataProtectionBackupInstanceDiskArgs
	state *dataProtectionBackupInstanceDiskState
}

func (dpbid *DataProtectionBackupInstanceDisk) Type() string {
	return "azurerm_data_protection_backup_instance_disk"
}

func (dpbid *DataProtectionBackupInstanceDisk) LocalName() string {
	return dpbid.Name
}

func (dpbid *DataProtectionBackupInstanceDisk) Configuration() interface{} {
	return dpbid.Args
}

func (dpbid *DataProtectionBackupInstanceDisk) Attributes() dataProtectionBackupInstanceDiskAttributes {
	return dataProtectionBackupInstanceDiskAttributes{ref: terra.ReferenceResource(dpbid)}
}

func (dpbid *DataProtectionBackupInstanceDisk) ImportState(av io.Reader) error {
	dpbid.state = &dataProtectionBackupInstanceDiskState{}
	if err := json.NewDecoder(av).Decode(dpbid.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpbid.Type(), dpbid.LocalName(), err)
	}
	return nil
}

func (dpbid *DataProtectionBackupInstanceDisk) State() (*dataProtectionBackupInstanceDiskState, bool) {
	return dpbid.state, dpbid.state != nil
}

func (dpbid *DataProtectionBackupInstanceDisk) StateMust() *dataProtectionBackupInstanceDiskState {
	if dpbid.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpbid.Type(), dpbid.LocalName()))
	}
	return dpbid.state
}

func (dpbid *DataProtectionBackupInstanceDisk) DependOn() terra.Reference {
	return terra.ReferenceResource(dpbid)
}

type DataProtectionBackupInstanceDiskArgs struct {
	// BackupPolicyId: string, required
	BackupPolicyId terra.StringValue `hcl:"backup_policy_id,attr" validate:"required"`
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SnapshotResourceGroupName: string, required
	SnapshotResourceGroupName terra.StringValue `hcl:"snapshot_resource_group_name,attr" validate:"required"`
	// VaultId: string, required
	VaultId terra.StringValue `hcl:"vault_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dataprotectionbackupinstancedisk.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataProtectionBackupInstanceDisk depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataProtectionBackupInstanceDiskAttributes struct {
	ref terra.Reference
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) BackupPolicyId() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("backup_policy_id"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) DiskId() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("disk_id"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("id"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("location"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("name"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) SnapshotResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("snapshot_resource_group_name"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) VaultId() terra.StringValue {
	return terra.ReferenceString(dpbid.ref.Append("vault_id"))
}

func (dpbid dataProtectionBackupInstanceDiskAttributes) Timeouts() dataprotectionbackupinstancedisk.TimeoutsAttributes {
	return terra.ReferenceSingle[dataprotectionbackupinstancedisk.TimeoutsAttributes](dpbid.ref.Append("timeouts"))
}

type dataProtectionBackupInstanceDiskState struct {
	BackupPolicyId            string                                          `json:"backup_policy_id"`
	DiskId                    string                                          `json:"disk_id"`
	Id                        string                                          `json:"id"`
	Location                  string                                          `json:"location"`
	Name                      string                                          `json:"name"`
	SnapshotResourceGroupName string                                          `json:"snapshot_resource_group_name"`
	VaultId                   string                                          `json:"vault_id"`
	Timeouts                  *dataprotectionbackupinstancedisk.TimeoutsState `json:"timeouts"`
}
