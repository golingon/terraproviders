// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	relaynamespace "github.com/golingon/terraproviders/azurerm/3.49.0/relaynamespace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRelayNamespace(name string, args RelayNamespaceArgs) *RelayNamespace {
	return &RelayNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RelayNamespace)(nil)

type RelayNamespace struct {
	Name  string
	Args  RelayNamespaceArgs
	state *relayNamespaceState
}

func (rn *RelayNamespace) Type() string {
	return "azurerm_relay_namespace"
}

func (rn *RelayNamespace) LocalName() string {
	return rn.Name
}

func (rn *RelayNamespace) Configuration() interface{} {
	return rn.Args
}

func (rn *RelayNamespace) Attributes() relayNamespaceAttributes {
	return relayNamespaceAttributes{ref: terra.ReferenceResource(rn)}
}

func (rn *RelayNamespace) ImportState(av io.Reader) error {
	rn.state = &relayNamespaceState{}
	if err := json.NewDecoder(av).Decode(rn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rn.Type(), rn.LocalName(), err)
	}
	return nil
}

func (rn *RelayNamespace) State() (*relayNamespaceState, bool) {
	return rn.state, rn.state != nil
}

func (rn *RelayNamespace) StateMust() *relayNamespaceState {
	if rn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rn.Type(), rn.LocalName()))
	}
	return rn.state
}

func (rn *RelayNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(rn)
}

type RelayNamespaceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *relaynamespace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RelayNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type relayNamespaceAttributes struct {
	ref terra.Reference
}

func (rn relayNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("id"))
}

func (rn relayNamespaceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("location"))
}

func (rn relayNamespaceAttributes) MetricId() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("metric_id"))
}

func (rn relayNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("name"))
}

func (rn relayNamespaceAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("primary_connection_string"))
}

func (rn relayNamespaceAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("primary_key"))
}

func (rn relayNamespaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("resource_group_name"))
}

func (rn relayNamespaceAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("secondary_connection_string"))
}

func (rn relayNamespaceAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("secondary_key"))
}

func (rn relayNamespaceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("sku_name"))
}

func (rn relayNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rn.ref.Append("tags"))
}

func (rn relayNamespaceAttributes) Timeouts() relaynamespace.TimeoutsAttributes {
	return terra.ReferenceSingle[relaynamespace.TimeoutsAttributes](rn.ref.Append("timeouts"))
}

type relayNamespaceState struct {
	Id                        string                        `json:"id"`
	Location                  string                        `json:"location"`
	MetricId                  string                        `json:"metric_id"`
	Name                      string                        `json:"name"`
	PrimaryConnectionString   string                        `json:"primary_connection_string"`
	PrimaryKey                string                        `json:"primary_key"`
	ResourceGroupName         string                        `json:"resource_group_name"`
	SecondaryConnectionString string                        `json:"secondary_connection_string"`
	SecondaryKey              string                        `json:"secondary_key"`
	SkuName                   string                        `json:"sku_name"`
	Tags                      map[string]string             `json:"tags"`
	Timeouts                  *relaynamespace.TimeoutsState `json:"timeouts"`
}
