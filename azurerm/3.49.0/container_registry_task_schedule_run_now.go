// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistrytaskschedulerunnow "github.com/golingon/terraproviders/azurerm/3.49.0/containerregistrytaskschedulerunnow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerRegistryTaskScheduleRunNow(name string, args ContainerRegistryTaskScheduleRunNowArgs) *ContainerRegistryTaskScheduleRunNow {
	return &ContainerRegistryTaskScheduleRunNow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistryTaskScheduleRunNow)(nil)

type ContainerRegistryTaskScheduleRunNow struct {
	Name  string
	Args  ContainerRegistryTaskScheduleRunNowArgs
	state *containerRegistryTaskScheduleRunNowState
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) Type() string {
	return "azurerm_container_registry_task_schedule_run_now"
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) LocalName() string {
	return crtsrn.Name
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) Configuration() interface{} {
	return crtsrn.Args
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) Attributes() containerRegistryTaskScheduleRunNowAttributes {
	return containerRegistryTaskScheduleRunNowAttributes{ref: terra.ReferenceResource(crtsrn)}
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) ImportState(av io.Reader) error {
	crtsrn.state = &containerRegistryTaskScheduleRunNowState{}
	if err := json.NewDecoder(av).Decode(crtsrn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crtsrn.Type(), crtsrn.LocalName(), err)
	}
	return nil
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) State() (*containerRegistryTaskScheduleRunNowState, bool) {
	return crtsrn.state, crtsrn.state != nil
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) StateMust() *containerRegistryTaskScheduleRunNowState {
	if crtsrn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crtsrn.Type(), crtsrn.LocalName()))
	}
	return crtsrn.state
}

func (crtsrn *ContainerRegistryTaskScheduleRunNow) DependOn() terra.Reference {
	return terra.ReferenceResource(crtsrn)
}

type ContainerRegistryTaskScheduleRunNowArgs struct {
	// ContainerRegistryTaskId: string, required
	ContainerRegistryTaskId terra.StringValue `hcl:"container_registry_task_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *containerregistrytaskschedulerunnow.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerRegistryTaskScheduleRunNow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerRegistryTaskScheduleRunNowAttributes struct {
	ref terra.Reference
}

func (crtsrn containerRegistryTaskScheduleRunNowAttributes) ContainerRegistryTaskId() terra.StringValue {
	return terra.ReferenceString(crtsrn.ref.Append("container_registry_task_id"))
}

func (crtsrn containerRegistryTaskScheduleRunNowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crtsrn.ref.Append("id"))
}

func (crtsrn containerRegistryTaskScheduleRunNowAttributes) Timeouts() containerregistrytaskschedulerunnow.TimeoutsAttributes {
	return terra.ReferenceSingle[containerregistrytaskschedulerunnow.TimeoutsAttributes](crtsrn.ref.Append("timeouts"))
}

type containerRegistryTaskScheduleRunNowState struct {
	ContainerRegistryTaskId string                                             `json:"container_registry_task_id"`
	Id                      string                                             `json:"id"`
	Timeouts                *containerregistrytaskschedulerunnow.TimeoutsState `json:"timeouts"`
}
