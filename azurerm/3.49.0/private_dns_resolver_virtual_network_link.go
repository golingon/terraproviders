// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsresolvervirtualnetworklink "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsresolvervirtualnetworklink"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsResolverVirtualNetworkLink(name string, args PrivateDnsResolverVirtualNetworkLinkArgs) *PrivateDnsResolverVirtualNetworkLink {
	return &PrivateDnsResolverVirtualNetworkLink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsResolverVirtualNetworkLink)(nil)

type PrivateDnsResolverVirtualNetworkLink struct {
	Name  string
	Args  PrivateDnsResolverVirtualNetworkLinkArgs
	state *privateDnsResolverVirtualNetworkLinkState
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) Type() string {
	return "azurerm_private_dns_resolver_virtual_network_link"
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) LocalName() string {
	return pdrvnl.Name
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) Configuration() interface{} {
	return pdrvnl.Args
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) Attributes() privateDnsResolverVirtualNetworkLinkAttributes {
	return privateDnsResolverVirtualNetworkLinkAttributes{ref: terra.ReferenceResource(pdrvnl)}
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) ImportState(av io.Reader) error {
	pdrvnl.state = &privateDnsResolverVirtualNetworkLinkState{}
	if err := json.NewDecoder(av).Decode(pdrvnl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdrvnl.Type(), pdrvnl.LocalName(), err)
	}
	return nil
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) State() (*privateDnsResolverVirtualNetworkLinkState, bool) {
	return pdrvnl.state, pdrvnl.state != nil
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) StateMust() *privateDnsResolverVirtualNetworkLinkState {
	if pdrvnl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdrvnl.Type(), pdrvnl.LocalName()))
	}
	return pdrvnl.state
}

func (pdrvnl *PrivateDnsResolverVirtualNetworkLink) DependOn() terra.Reference {
	return terra.ReferenceResource(pdrvnl)
}

type PrivateDnsResolverVirtualNetworkLinkArgs struct {
	// DnsForwardingRulesetId: string, required
	DnsForwardingRulesetId terra.StringValue `hcl:"dns_forwarding_ruleset_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *privatednsresolvervirtualnetworklink.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsResolverVirtualNetworkLink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsResolverVirtualNetworkLinkAttributes struct {
	ref terra.Reference
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) DnsForwardingRulesetId() terra.StringValue {
	return terra.ReferenceString(pdrvnl.ref.Append("dns_forwarding_ruleset_id"))
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdrvnl.ref.Append("id"))
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdrvnl.ref.Append("metadata"))
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdrvnl.ref.Append("name"))
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(pdrvnl.ref.Append("virtual_network_id"))
}

func (pdrvnl privateDnsResolverVirtualNetworkLinkAttributes) Timeouts() privatednsresolvervirtualnetworklink.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsresolvervirtualnetworklink.TimeoutsAttributes](pdrvnl.ref.Append("timeouts"))
}

type privateDnsResolverVirtualNetworkLinkState struct {
	DnsForwardingRulesetId string                                              `json:"dns_forwarding_ruleset_id"`
	Id                     string                                              `json:"id"`
	Metadata               map[string]string                                   `json:"metadata"`
	Name                   string                                              `json:"name"`
	VirtualNetworkId       string                                              `json:"virtual_network_id"`
	Timeouts               *privatednsresolvervirtualnetworklink.TimeoutsState `json:"timeouts"`
}
