// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsresolverforwardingrule "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsresolverforwardingrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsResolverForwardingRule(name string, args PrivateDnsResolverForwardingRuleArgs) *PrivateDnsResolverForwardingRule {
	return &PrivateDnsResolverForwardingRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsResolverForwardingRule)(nil)

type PrivateDnsResolverForwardingRule struct {
	Name  string
	Args  PrivateDnsResolverForwardingRuleArgs
	state *privateDnsResolverForwardingRuleState
}

func (pdrfr *PrivateDnsResolverForwardingRule) Type() string {
	return "azurerm_private_dns_resolver_forwarding_rule"
}

func (pdrfr *PrivateDnsResolverForwardingRule) LocalName() string {
	return pdrfr.Name
}

func (pdrfr *PrivateDnsResolverForwardingRule) Configuration() interface{} {
	return pdrfr.Args
}

func (pdrfr *PrivateDnsResolverForwardingRule) Attributes() privateDnsResolverForwardingRuleAttributes {
	return privateDnsResolverForwardingRuleAttributes{ref: terra.ReferenceResource(pdrfr)}
}

func (pdrfr *PrivateDnsResolverForwardingRule) ImportState(av io.Reader) error {
	pdrfr.state = &privateDnsResolverForwardingRuleState{}
	if err := json.NewDecoder(av).Decode(pdrfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdrfr.Type(), pdrfr.LocalName(), err)
	}
	return nil
}

func (pdrfr *PrivateDnsResolverForwardingRule) State() (*privateDnsResolverForwardingRuleState, bool) {
	return pdrfr.state, pdrfr.state != nil
}

func (pdrfr *PrivateDnsResolverForwardingRule) StateMust() *privateDnsResolverForwardingRuleState {
	if pdrfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdrfr.Type(), pdrfr.LocalName()))
	}
	return pdrfr.state
}

func (pdrfr *PrivateDnsResolverForwardingRule) DependOn() terra.Reference {
	return terra.ReferenceResource(pdrfr)
}

type PrivateDnsResolverForwardingRuleArgs struct {
	// DnsForwardingRulesetId: string, required
	DnsForwardingRulesetId terra.StringValue `hcl:"dns_forwarding_ruleset_id,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetDnsServers: min=1
	TargetDnsServers []privatednsresolverforwardingrule.TargetDnsServers `hcl:"target_dns_servers,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *privatednsresolverforwardingrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsResolverForwardingRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsResolverForwardingRuleAttributes struct {
	ref terra.Reference
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) DnsForwardingRulesetId() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("dns_forwarding_ruleset_id"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("domain_name"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(pdrfr.ref.Append("enabled"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("id"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdrfr.ref.Append("metadata"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdrfr.ref.Append("name"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) TargetDnsServers() terra.ListValue[privatednsresolverforwardingrule.TargetDnsServersAttributes] {
	return terra.ReferenceList[privatednsresolverforwardingrule.TargetDnsServersAttributes](pdrfr.ref.Append("target_dns_servers"))
}

func (pdrfr privateDnsResolverForwardingRuleAttributes) Timeouts() privatednsresolverforwardingrule.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsresolverforwardingrule.TimeoutsAttributes](pdrfr.ref.Append("timeouts"))
}

type privateDnsResolverForwardingRuleState struct {
	DnsForwardingRulesetId string                                                   `json:"dns_forwarding_ruleset_id"`
	DomainName             string                                                   `json:"domain_name"`
	Enabled                bool                                                     `json:"enabled"`
	Id                     string                                                   `json:"id"`
	Metadata               map[string]string                                        `json:"metadata"`
	Name                   string                                                   `json:"name"`
	TargetDnsServers       []privatednsresolverforwardingrule.TargetDnsServersState `json:"target_dns_servers"`
	Timeouts               *privatednsresolverforwardingrule.TimeoutsState          `json:"timeouts"`
}
