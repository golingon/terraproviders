// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudappredisassociation "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudappredisassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudAppRedisAssociation(name string, args SpringCloudAppRedisAssociationArgs) *SpringCloudAppRedisAssociation {
	return &SpringCloudAppRedisAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudAppRedisAssociation)(nil)

type SpringCloudAppRedisAssociation struct {
	Name  string
	Args  SpringCloudAppRedisAssociationArgs
	state *springCloudAppRedisAssociationState
}

func (scara *SpringCloudAppRedisAssociation) Type() string {
	return "azurerm_spring_cloud_app_redis_association"
}

func (scara *SpringCloudAppRedisAssociation) LocalName() string {
	return scara.Name
}

func (scara *SpringCloudAppRedisAssociation) Configuration() interface{} {
	return scara.Args
}

func (scara *SpringCloudAppRedisAssociation) Attributes() springCloudAppRedisAssociationAttributes {
	return springCloudAppRedisAssociationAttributes{ref: terra.ReferenceResource(scara)}
}

func (scara *SpringCloudAppRedisAssociation) ImportState(av io.Reader) error {
	scara.state = &springCloudAppRedisAssociationState{}
	if err := json.NewDecoder(av).Decode(scara.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scara.Type(), scara.LocalName(), err)
	}
	return nil
}

func (scara *SpringCloudAppRedisAssociation) State() (*springCloudAppRedisAssociationState, bool) {
	return scara.state, scara.state != nil
}

func (scara *SpringCloudAppRedisAssociation) StateMust() *springCloudAppRedisAssociationState {
	if scara.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scara.Type(), scara.LocalName()))
	}
	return scara.state
}

func (scara *SpringCloudAppRedisAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(scara)
}

type SpringCloudAppRedisAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedisAccessKey: string, required
	RedisAccessKey terra.StringValue `hcl:"redis_access_key,attr" validate:"required"`
	// RedisCacheId: string, required
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// SslEnabled: bool, optional
	SslEnabled terra.BoolValue `hcl:"ssl_enabled,attr"`
	// Timeouts: optional
	Timeouts *springcloudappredisassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudAppRedisAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudAppRedisAssociationAttributes struct {
	ref terra.Reference
}

func (scara springCloudAppRedisAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scara.ref.Append("id"))
}

func (scara springCloudAppRedisAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scara.ref.Append("name"))
}

func (scara springCloudAppRedisAssociationAttributes) RedisAccessKey() terra.StringValue {
	return terra.ReferenceString(scara.ref.Append("redis_access_key"))
}

func (scara springCloudAppRedisAssociationAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceString(scara.ref.Append("redis_cache_id"))
}

func (scara springCloudAppRedisAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceString(scara.ref.Append("spring_cloud_app_id"))
}

func (scara springCloudAppRedisAssociationAttributes) SslEnabled() terra.BoolValue {
	return terra.ReferenceBool(scara.ref.Append("ssl_enabled"))
}

func (scara springCloudAppRedisAssociationAttributes) Timeouts() springcloudappredisassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudappredisassociation.TimeoutsAttributes](scara.ref.Append("timeouts"))
}

type springCloudAppRedisAssociationState struct {
	Id               string                                        `json:"id"`
	Name             string                                        `json:"name"`
	RedisAccessKey   string                                        `json:"redis_access_key"`
	RedisCacheId     string                                        `json:"redis_cache_id"`
	SpringCloudAppId string                                        `json:"spring_cloud_app_id"`
	SslEnabled       bool                                          `json:"ssl_enabled"`
	Timeouts         *springcloudappredisassociation.TimeoutsState `json:"timeouts"`
}
