// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkddosprotectionplan "github.com/golingon/terraproviders/azurerm/3.49.0/networkddosprotectionplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkDdosProtectionPlan(name string, args NetworkDdosProtectionPlanArgs) *NetworkDdosProtectionPlan {
	return &NetworkDdosProtectionPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkDdosProtectionPlan)(nil)

type NetworkDdosProtectionPlan struct {
	Name  string
	Args  NetworkDdosProtectionPlanArgs
	state *networkDdosProtectionPlanState
}

func (ndpp *NetworkDdosProtectionPlan) Type() string {
	return "azurerm_network_ddos_protection_plan"
}

func (ndpp *NetworkDdosProtectionPlan) LocalName() string {
	return ndpp.Name
}

func (ndpp *NetworkDdosProtectionPlan) Configuration() interface{} {
	return ndpp.Args
}

func (ndpp *NetworkDdosProtectionPlan) Attributes() networkDdosProtectionPlanAttributes {
	return networkDdosProtectionPlanAttributes{ref: terra.ReferenceResource(ndpp)}
}

func (ndpp *NetworkDdosProtectionPlan) ImportState(av io.Reader) error {
	ndpp.state = &networkDdosProtectionPlanState{}
	if err := json.NewDecoder(av).Decode(ndpp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ndpp.Type(), ndpp.LocalName(), err)
	}
	return nil
}

func (ndpp *NetworkDdosProtectionPlan) State() (*networkDdosProtectionPlanState, bool) {
	return ndpp.state, ndpp.state != nil
}

func (ndpp *NetworkDdosProtectionPlan) StateMust() *networkDdosProtectionPlanState {
	if ndpp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ndpp.Type(), ndpp.LocalName()))
	}
	return ndpp.state
}

func (ndpp *NetworkDdosProtectionPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(ndpp)
}

type NetworkDdosProtectionPlanArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *networkddosprotectionplan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkDdosProtectionPlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkDdosProtectionPlanAttributes struct {
	ref terra.Reference
}

func (ndpp networkDdosProtectionPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ndpp.ref.Append("id"))
}

func (ndpp networkDdosProtectionPlanAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ndpp.ref.Append("location"))
}

func (ndpp networkDdosProtectionPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ndpp.ref.Append("name"))
}

func (ndpp networkDdosProtectionPlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ndpp.ref.Append("resource_group_name"))
}

func (ndpp networkDdosProtectionPlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ndpp.ref.Append("tags"))
}

func (ndpp networkDdosProtectionPlanAttributes) VirtualNetworkIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ndpp.ref.Append("virtual_network_ids"))
}

func (ndpp networkDdosProtectionPlanAttributes) Timeouts() networkddosprotectionplan.TimeoutsAttributes {
	return terra.ReferenceSingle[networkddosprotectionplan.TimeoutsAttributes](ndpp.ref.Append("timeouts"))
}

type networkDdosProtectionPlanState struct {
	Id                string                                   `json:"id"`
	Location          string                                   `json:"location"`
	Name              string                                   `json:"name"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	Tags              map[string]string                        `json:"tags"`
	VirtualNetworkIds []string                                 `json:"virtual_network_ids"`
	Timeouts          *networkddosprotectionplan.TimeoutsState `json:"timeouts"`
}
