// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicedatalakestoragegen2 "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicedatalakestoragegen2"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceDataLakeStorageGen2(name string, args DataFactoryLinkedServiceDataLakeStorageGen2Args) *DataFactoryLinkedServiceDataLakeStorageGen2 {
	return &DataFactoryLinkedServiceDataLakeStorageGen2{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceDataLakeStorageGen2)(nil)

type DataFactoryLinkedServiceDataLakeStorageGen2 struct {
	Name  string
	Args  DataFactoryLinkedServiceDataLakeStorageGen2Args
	state *dataFactoryLinkedServiceDataLakeStorageGen2State
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) Type() string {
	return "azurerm_data_factory_linked_service_data_lake_storage_gen2"
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) LocalName() string {
	return dflsdlsg.Name
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) Configuration() interface{} {
	return dflsdlsg.Args
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) Attributes() dataFactoryLinkedServiceDataLakeStorageGen2Attributes {
	return dataFactoryLinkedServiceDataLakeStorageGen2Attributes{ref: terra.ReferenceResource(dflsdlsg)}
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) ImportState(av io.Reader) error {
	dflsdlsg.state = &dataFactoryLinkedServiceDataLakeStorageGen2State{}
	if err := json.NewDecoder(av).Decode(dflsdlsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsdlsg.Type(), dflsdlsg.LocalName(), err)
	}
	return nil
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) State() (*dataFactoryLinkedServiceDataLakeStorageGen2State, bool) {
	return dflsdlsg.state, dflsdlsg.state != nil
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) StateMust() *dataFactoryLinkedServiceDataLakeStorageGen2State {
	if dflsdlsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsdlsg.Type(), dflsdlsg.LocalName()))
	}
	return dflsdlsg.state
}

func (dflsdlsg *DataFactoryLinkedServiceDataLakeStorageGen2) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsdlsg)
}

type DataFactoryLinkedServiceDataLakeStorageGen2Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ServicePrincipalId: string, optional
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr"`
	// ServicePrincipalKey: string, optional
	ServicePrincipalKey terra.StringValue `hcl:"service_principal_key,attr"`
	// StorageAccountKey: string, optional
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr"`
	// Tenant: string, optional
	Tenant terra.StringValue `hcl:"tenant,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// UseManagedIdentity: bool, optional
	UseManagedIdentity terra.BoolValue `hcl:"use_managed_identity,attr"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicedatalakestoragegen2.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceDataLakeStorageGen2 depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceDataLakeStorageGen2Attributes struct {
	ref terra.Reference
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsdlsg.ref.Append("additional_properties"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsdlsg.ref.Append("annotations"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("data_factory_id"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("description"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("id"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("integration_runtime_name"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("name"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsdlsg.ref.Append("parameters"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("service_principal_id"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) ServicePrincipalKey() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("service_principal_key"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("storage_account_key"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Tenant() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("tenant"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Url() terra.StringValue {
	return terra.ReferenceString(dflsdlsg.ref.Append("url"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) UseManagedIdentity() terra.BoolValue {
	return terra.ReferenceBool(dflsdlsg.ref.Append("use_managed_identity"))
}

func (dflsdlsg dataFactoryLinkedServiceDataLakeStorageGen2Attributes) Timeouts() datafactorylinkedservicedatalakestoragegen2.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicedatalakestoragegen2.TimeoutsAttributes](dflsdlsg.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceDataLakeStorageGen2State struct {
	AdditionalProperties   map[string]string                                          `json:"additional_properties"`
	Annotations            []string                                                   `json:"annotations"`
	DataFactoryId          string                                                     `json:"data_factory_id"`
	Description            string                                                     `json:"description"`
	Id                     string                                                     `json:"id"`
	IntegrationRuntimeName string                                                     `json:"integration_runtime_name"`
	Name                   string                                                     `json:"name"`
	Parameters             map[string]string                                          `json:"parameters"`
	ServicePrincipalId     string                                                     `json:"service_principal_id"`
	ServicePrincipalKey    string                                                     `json:"service_principal_key"`
	StorageAccountKey      string                                                     `json:"storage_account_key"`
	Tenant                 string                                                     `json:"tenant"`
	Url                    string                                                     `json:"url"`
	UseManagedIdentity     bool                                                       `json:"use_managed_identity"`
	Timeouts               *datafactorylinkedservicedatalakestoragegen2.TimeoutsState `json:"timeouts"`
}
