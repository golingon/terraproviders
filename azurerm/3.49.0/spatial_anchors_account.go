// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	spatialanchorsaccount "github.com/golingon/terraproviders/azurerm/3.49.0/spatialanchorsaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpatialAnchorsAccount(name string, args SpatialAnchorsAccountArgs) *SpatialAnchorsAccount {
	return &SpatialAnchorsAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpatialAnchorsAccount)(nil)

type SpatialAnchorsAccount struct {
	Name  string
	Args  SpatialAnchorsAccountArgs
	state *spatialAnchorsAccountState
}

func (saa *SpatialAnchorsAccount) Type() string {
	return "azurerm_spatial_anchors_account"
}

func (saa *SpatialAnchorsAccount) LocalName() string {
	return saa.Name
}

func (saa *SpatialAnchorsAccount) Configuration() interface{} {
	return saa.Args
}

func (saa *SpatialAnchorsAccount) Attributes() spatialAnchorsAccountAttributes {
	return spatialAnchorsAccountAttributes{ref: terra.ReferenceResource(saa)}
}

func (saa *SpatialAnchorsAccount) ImportState(av io.Reader) error {
	saa.state = &spatialAnchorsAccountState{}
	if err := json.NewDecoder(av).Decode(saa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saa.Type(), saa.LocalName(), err)
	}
	return nil
}

func (saa *SpatialAnchorsAccount) State() (*spatialAnchorsAccountState, bool) {
	return saa.state, saa.state != nil
}

func (saa *SpatialAnchorsAccount) StateMust() *spatialAnchorsAccountState {
	if saa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saa.Type(), saa.LocalName()))
	}
	return saa.state
}

func (saa *SpatialAnchorsAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(saa)
}

type SpatialAnchorsAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *spatialanchorsaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpatialAnchorsAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spatialAnchorsAccountAttributes struct {
	ref terra.Reference
}

func (saa spatialAnchorsAccountAttributes) AccountDomain() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("account_domain"))
}

func (saa spatialAnchorsAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("account_id"))
}

func (saa spatialAnchorsAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("id"))
}

func (saa spatialAnchorsAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("location"))
}

func (saa spatialAnchorsAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("name"))
}

func (saa spatialAnchorsAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("resource_group_name"))
}

func (saa spatialAnchorsAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](saa.ref.Append("tags"))
}

func (saa spatialAnchorsAccountAttributes) Timeouts() spatialanchorsaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[spatialanchorsaccount.TimeoutsAttributes](saa.ref.Append("timeouts"))
}

type spatialAnchorsAccountState struct {
	AccountDomain     string                               `json:"account_domain"`
	AccountId         string                               `json:"account_id"`
	Id                string                               `json:"id"`
	Location          string                               `json:"location"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	Timeouts          *spatialanchorsaccount.TimeoutsState `json:"timeouts"`
}
