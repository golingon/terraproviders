// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadevtestvirtualnetwork

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AllowedSubnets struct{}

type SubnetOverrides struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AllowedSubnetsAttributes struct {
	ref terra.Reference
}

func (as AllowedSubnetsAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AllowedSubnetsAttributes) InternalWithRef(ref terra.Reference) AllowedSubnetsAttributes {
	return AllowedSubnetsAttributes{ref: ref}
}

func (as AllowedSubnetsAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AllowedSubnetsAttributes) AllowPublicIp() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("allow_public_ip"))
}

func (as AllowedSubnetsAttributes) LabSubnetName() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("lab_subnet_name"))
}

func (as AllowedSubnetsAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("resource_id"))
}

type SubnetOverridesAttributes struct {
	ref terra.Reference
}

func (so SubnetOverridesAttributes) InternalRef() terra.Reference {
	return so.ref
}

func (so SubnetOverridesAttributes) InternalWithRef(ref terra.Reference) SubnetOverridesAttributes {
	return SubnetOverridesAttributes{ref: ref}
}

func (so SubnetOverridesAttributes) InternalTokens() hclwrite.Tokens {
	return so.ref.InternalTokens()
}

func (so SubnetOverridesAttributes) LabSubnetName() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("lab_subnet_name"))
}

func (so SubnetOverridesAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("resource_id"))
}

func (so SubnetOverridesAttributes) UseInVmCreationPermission() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("use_in_vm_creation_permission"))
}

func (so SubnetOverridesAttributes) UsePublicIpAddressPermission() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("use_public_ip_address_permission"))
}

func (so SubnetOverridesAttributes) VirtualNetworkPoolName() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("virtual_network_pool_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type AllowedSubnetsState struct {
	AllowPublicIp string `json:"allow_public_ip"`
	LabSubnetName string `json:"lab_subnet_name"`
	ResourceId    string `json:"resource_id"`
}

type SubnetOverridesState struct {
	LabSubnetName                string `json:"lab_subnet_name"`
	ResourceId                   string `json:"resource_id"`
	UseInVmCreationPermission    string `json:"use_in_vm_creation_permission"`
	UsePublicIpAddressPermission string `json:"use_public_ip_address_permission"`
	VirtualNetworkPoolName       string `json:"virtual_network_pool_name"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
