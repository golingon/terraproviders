// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourcepolicyexemption "github.com/golingon/terraproviders/azurerm/3.49.0/resourcepolicyexemption"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourcePolicyExemption(name string, args ResourcePolicyExemptionArgs) *ResourcePolicyExemption {
	return &ResourcePolicyExemption{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourcePolicyExemption)(nil)

type ResourcePolicyExemption struct {
	Name  string
	Args  ResourcePolicyExemptionArgs
	state *resourcePolicyExemptionState
}

func (rpe *ResourcePolicyExemption) Type() string {
	return "azurerm_resource_policy_exemption"
}

func (rpe *ResourcePolicyExemption) LocalName() string {
	return rpe.Name
}

func (rpe *ResourcePolicyExemption) Configuration() interface{} {
	return rpe.Args
}

func (rpe *ResourcePolicyExemption) Attributes() resourcePolicyExemptionAttributes {
	return resourcePolicyExemptionAttributes{ref: terra.ReferenceResource(rpe)}
}

func (rpe *ResourcePolicyExemption) ImportState(av io.Reader) error {
	rpe.state = &resourcePolicyExemptionState{}
	if err := json.NewDecoder(av).Decode(rpe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rpe.Type(), rpe.LocalName(), err)
	}
	return nil
}

func (rpe *ResourcePolicyExemption) State() (*resourcePolicyExemptionState, bool) {
	return rpe.state, rpe.state != nil
}

func (rpe *ResourcePolicyExemption) StateMust() *resourcePolicyExemptionState {
	if rpe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rpe.Type(), rpe.LocalName()))
	}
	return rpe.state
}

func (rpe *ResourcePolicyExemption) DependOn() terra.Reference {
	return terra.ReferenceResource(rpe)
}

type ResourcePolicyExemptionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// ExemptionCategory: string, required
	ExemptionCategory terra.StringValue `hcl:"exemption_category,attr" validate:"required"`
	// ExpiresOn: string, optional
	ExpiresOn terra.StringValue `hcl:"expires_on,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyAssignmentId: string, required
	PolicyAssignmentId terra.StringValue `hcl:"policy_assignment_id,attr" validate:"required"`
	// PolicyDefinitionReferenceIds: list of string, optional
	PolicyDefinitionReferenceIds terra.ListValue[terra.StringValue] `hcl:"policy_definition_reference_ids,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *resourcepolicyexemption.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourcePolicyExemption depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourcePolicyExemptionAttributes struct {
	ref terra.Reference
}

func (rpe resourcePolicyExemptionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("description"))
}

func (rpe resourcePolicyExemptionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("display_name"))
}

func (rpe resourcePolicyExemptionAttributes) ExemptionCategory() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("exemption_category"))
}

func (rpe resourcePolicyExemptionAttributes) ExpiresOn() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("expires_on"))
}

func (rpe resourcePolicyExemptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("id"))
}

func (rpe resourcePolicyExemptionAttributes) Metadata() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("metadata"))
}

func (rpe resourcePolicyExemptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("name"))
}

func (rpe resourcePolicyExemptionAttributes) PolicyAssignmentId() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("policy_assignment_id"))
}

func (rpe resourcePolicyExemptionAttributes) PolicyDefinitionReferenceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rpe.ref.Append("policy_definition_reference_ids"))
}

func (rpe resourcePolicyExemptionAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(rpe.ref.Append("resource_id"))
}

func (rpe resourcePolicyExemptionAttributes) Timeouts() resourcepolicyexemption.TimeoutsAttributes {
	return terra.ReferenceSingle[resourcepolicyexemption.TimeoutsAttributes](rpe.ref.Append("timeouts"))
}

type resourcePolicyExemptionState struct {
	Description                  string                                 `json:"description"`
	DisplayName                  string                                 `json:"display_name"`
	ExemptionCategory            string                                 `json:"exemption_category"`
	ExpiresOn                    string                                 `json:"expires_on"`
	Id                           string                                 `json:"id"`
	Metadata                     string                                 `json:"metadata"`
	Name                         string                                 `json:"name"`
	PolicyAssignmentId           string                                 `json:"policy_assignment_id"`
	PolicyDefinitionReferenceIds []string                               `json:"policy_definition_reference_ids"`
	ResourceId                   string                                 `json:"resource_id"`
	Timeouts                     *resourcepolicyexemption.TimeoutsState `json:"timeouts"`
}
