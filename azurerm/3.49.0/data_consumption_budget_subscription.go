// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	dataconsumptionbudgetsubscription "github.com/golingon/terraproviders/azurerm/3.49.0/dataconsumptionbudgetsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataConsumptionBudgetSubscription(name string, args DataConsumptionBudgetSubscriptionArgs) *DataConsumptionBudgetSubscription {
	return &DataConsumptionBudgetSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataConsumptionBudgetSubscription)(nil)

type DataConsumptionBudgetSubscription struct {
	Name string
	Args DataConsumptionBudgetSubscriptionArgs
}

func (cbs *DataConsumptionBudgetSubscription) DataSource() string {
	return "azurerm_consumption_budget_subscription"
}

func (cbs *DataConsumptionBudgetSubscription) LocalName() string {
	return cbs.Name
}

func (cbs *DataConsumptionBudgetSubscription) Configuration() interface{} {
	return cbs.Args
}

func (cbs *DataConsumptionBudgetSubscription) Attributes() dataConsumptionBudgetSubscriptionAttributes {
	return dataConsumptionBudgetSubscriptionAttributes{ref: terra.ReferenceDataResource(cbs)}
}

type DataConsumptionBudgetSubscriptionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Filter: min=0
	Filter []dataconsumptionbudgetsubscription.Filter `hcl:"filter,block" validate:"min=0"`
	// Notification: min=0
	Notification []dataconsumptionbudgetsubscription.Notification `hcl:"notification,block" validate:"min=0"`
	// TimePeriod: min=0
	TimePeriod []dataconsumptionbudgetsubscription.TimePeriod `hcl:"time_period,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataconsumptionbudgetsubscription.Timeouts `hcl:"timeouts,block"`
}
type dataConsumptionBudgetSubscriptionAttributes struct {
	ref terra.Reference
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Amount() terra.NumberValue {
	return terra.ReferenceNumber(cbs.ref.Append("amount"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cbs.ref.Append("id"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cbs.ref.Append("name"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(cbs.ref.Append("subscription_id"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) TimeGrain() terra.StringValue {
	return terra.ReferenceString(cbs.ref.Append("time_grain"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Filter() terra.ListValue[dataconsumptionbudgetsubscription.FilterAttributes] {
	return terra.ReferenceList[dataconsumptionbudgetsubscription.FilterAttributes](cbs.ref.Append("filter"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Notification() terra.ListValue[dataconsumptionbudgetsubscription.NotificationAttributes] {
	return terra.ReferenceList[dataconsumptionbudgetsubscription.NotificationAttributes](cbs.ref.Append("notification"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) TimePeriod() terra.ListValue[dataconsumptionbudgetsubscription.TimePeriodAttributes] {
	return terra.ReferenceList[dataconsumptionbudgetsubscription.TimePeriodAttributes](cbs.ref.Append("time_period"))
}

func (cbs dataConsumptionBudgetSubscriptionAttributes) Timeouts() dataconsumptionbudgetsubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[dataconsumptionbudgetsubscription.TimeoutsAttributes](cbs.ref.Append("timeouts"))
}
