// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqldatabase "github.com/golingon/terraproviders/azurerm/3.49.0/mssqldatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlDatabase(name string, args MssqlDatabaseArgs) *MssqlDatabase {
	return &MssqlDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlDatabase)(nil)

type MssqlDatabase struct {
	Name  string
	Args  MssqlDatabaseArgs
	state *mssqlDatabaseState
}

func (md *MssqlDatabase) Type() string {
	return "azurerm_mssql_database"
}

func (md *MssqlDatabase) LocalName() string {
	return md.Name
}

func (md *MssqlDatabase) Configuration() interface{} {
	return md.Args
}

func (md *MssqlDatabase) Attributes() mssqlDatabaseAttributes {
	return mssqlDatabaseAttributes{ref: terra.ReferenceResource(md)}
}

func (md *MssqlDatabase) ImportState(av io.Reader) error {
	md.state = &mssqlDatabaseState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

func (md *MssqlDatabase) State() (*mssqlDatabaseState, bool) {
	return md.state, md.state != nil
}

func (md *MssqlDatabase) StateMust() *mssqlDatabaseState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

func (md *MssqlDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

type MssqlDatabaseArgs struct {
	// AutoPauseDelayInMinutes: number, optional
	AutoPauseDelayInMinutes terra.NumberValue `hcl:"auto_pause_delay_in_minutes,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// CreationSourceDatabaseId: string, optional
	CreationSourceDatabaseId terra.StringValue `hcl:"creation_source_database_id,attr"`
	// ElasticPoolId: string, optional
	ElasticPoolId terra.StringValue `hcl:"elastic_pool_id,attr"`
	// GeoBackupEnabled: bool, optional
	GeoBackupEnabled terra.BoolValue `hcl:"geo_backup_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LedgerEnabled: bool, optional
	LedgerEnabled terra.BoolValue `hcl:"ledger_enabled,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// MaintenanceConfigurationName: string, optional
	MaintenanceConfigurationName terra.StringValue `hcl:"maintenance_configuration_name,attr"`
	// MaxSizeGb: number, optional
	MaxSizeGb terra.NumberValue `hcl:"max_size_gb,attr"`
	// MinCapacity: number, optional
	MinCapacity terra.NumberValue `hcl:"min_capacity,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadReplicaCount: number, optional
	ReadReplicaCount terra.NumberValue `hcl:"read_replica_count,attr"`
	// ReadScale: bool, optional
	ReadScale terra.BoolValue `hcl:"read_scale,attr"`
	// RecoverDatabaseId: string, optional
	RecoverDatabaseId terra.StringValue `hcl:"recover_database_id,attr"`
	// RestoreDroppedDatabaseId: string, optional
	RestoreDroppedDatabaseId terra.StringValue `hcl:"restore_dropped_database_id,attr"`
	// RestorePointInTime: string, optional
	RestorePointInTime terra.StringValue `hcl:"restore_point_in_time,attr"`
	// SampleName: string, optional
	SampleName terra.StringValue `hcl:"sample_name,attr"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// StorageAccountType: string, optional
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransparentDataEncryptionEnabled: bool, optional
	TransparentDataEncryptionEnabled terra.BoolValue `hcl:"transparent_data_encryption_enabled,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// Import: optional
	Import *mssqldatabase.Import `hcl:"import,block"`
	// LongTermRetentionPolicy: optional
	LongTermRetentionPolicy *mssqldatabase.LongTermRetentionPolicy `hcl:"long_term_retention_policy,block"`
	// ShortTermRetentionPolicy: optional
	ShortTermRetentionPolicy *mssqldatabase.ShortTermRetentionPolicy `hcl:"short_term_retention_policy,block"`
	// ThreatDetectionPolicy: optional
	ThreatDetectionPolicy *mssqldatabase.ThreatDetectionPolicy `hcl:"threat_detection_policy,block"`
	// Timeouts: optional
	Timeouts *mssqldatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlDatabaseAttributes struct {
	ref terra.Reference
}

func (md mssqlDatabaseAttributes) AutoPauseDelayInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("auto_pause_delay_in_minutes"))
}

func (md mssqlDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("collation"))
}

func (md mssqlDatabaseAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("create_mode"))
}

func (md mssqlDatabaseAttributes) CreationSourceDatabaseId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("creation_source_database_id"))
}

func (md mssqlDatabaseAttributes) ElasticPoolId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("elastic_pool_id"))
}

func (md mssqlDatabaseAttributes) GeoBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("geo_backup_enabled"))
}

func (md mssqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("id"))
}

func (md mssqlDatabaseAttributes) LedgerEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("ledger_enabled"))
}

func (md mssqlDatabaseAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("license_type"))
}

func (md mssqlDatabaseAttributes) MaintenanceConfigurationName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("maintenance_configuration_name"))
}

func (md mssqlDatabaseAttributes) MaxSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("max_size_gb"))
}

func (md mssqlDatabaseAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("min_capacity"))
}

func (md mssqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("name"))
}

func (md mssqlDatabaseAttributes) ReadReplicaCount() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("read_replica_count"))
}

func (md mssqlDatabaseAttributes) ReadScale() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("read_scale"))
}

func (md mssqlDatabaseAttributes) RecoverDatabaseId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("recover_database_id"))
}

func (md mssqlDatabaseAttributes) RestoreDroppedDatabaseId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("restore_dropped_database_id"))
}

func (md mssqlDatabaseAttributes) RestorePointInTime() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("restore_point_in_time"))
}

func (md mssqlDatabaseAttributes) SampleName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("sample_name"))
}

func (md mssqlDatabaseAttributes) ServerId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("server_id"))
}

func (md mssqlDatabaseAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("sku_name"))
}

func (md mssqlDatabaseAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("storage_account_type"))
}

func (md mssqlDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](md.ref.Append("tags"))
}

func (md mssqlDatabaseAttributes) TransparentDataEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("transparent_data_encryption_enabled"))
}

func (md mssqlDatabaseAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("zone_redundant"))
}

func (md mssqlDatabaseAttributes) Import() terra.ListValue[mssqldatabase.ImportAttributes] {
	return terra.ReferenceList[mssqldatabase.ImportAttributes](md.ref.Append("import"))
}

func (md mssqlDatabaseAttributes) LongTermRetentionPolicy() terra.ListValue[mssqldatabase.LongTermRetentionPolicyAttributes] {
	return terra.ReferenceList[mssqldatabase.LongTermRetentionPolicyAttributes](md.ref.Append("long_term_retention_policy"))
}

func (md mssqlDatabaseAttributes) ShortTermRetentionPolicy() terra.ListValue[mssqldatabase.ShortTermRetentionPolicyAttributes] {
	return terra.ReferenceList[mssqldatabase.ShortTermRetentionPolicyAttributes](md.ref.Append("short_term_retention_policy"))
}

func (md mssqlDatabaseAttributes) ThreatDetectionPolicy() terra.ListValue[mssqldatabase.ThreatDetectionPolicyAttributes] {
	return terra.ReferenceList[mssqldatabase.ThreatDetectionPolicyAttributes](md.ref.Append("threat_detection_policy"))
}

func (md mssqlDatabaseAttributes) Timeouts() mssqldatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqldatabase.TimeoutsAttributes](md.ref.Append("timeouts"))
}

type mssqlDatabaseState struct {
	AutoPauseDelayInMinutes          float64                                       `json:"auto_pause_delay_in_minutes"`
	Collation                        string                                        `json:"collation"`
	CreateMode                       string                                        `json:"create_mode"`
	CreationSourceDatabaseId         string                                        `json:"creation_source_database_id"`
	ElasticPoolId                    string                                        `json:"elastic_pool_id"`
	GeoBackupEnabled                 bool                                          `json:"geo_backup_enabled"`
	Id                               string                                        `json:"id"`
	LedgerEnabled                    bool                                          `json:"ledger_enabled"`
	LicenseType                      string                                        `json:"license_type"`
	MaintenanceConfigurationName     string                                        `json:"maintenance_configuration_name"`
	MaxSizeGb                        float64                                       `json:"max_size_gb"`
	MinCapacity                      float64                                       `json:"min_capacity"`
	Name                             string                                        `json:"name"`
	ReadReplicaCount                 float64                                       `json:"read_replica_count"`
	ReadScale                        bool                                          `json:"read_scale"`
	RecoverDatabaseId                string                                        `json:"recover_database_id"`
	RestoreDroppedDatabaseId         string                                        `json:"restore_dropped_database_id"`
	RestorePointInTime               string                                        `json:"restore_point_in_time"`
	SampleName                       string                                        `json:"sample_name"`
	ServerId                         string                                        `json:"server_id"`
	SkuName                          string                                        `json:"sku_name"`
	StorageAccountType               string                                        `json:"storage_account_type"`
	Tags                             map[string]string                             `json:"tags"`
	TransparentDataEncryptionEnabled bool                                          `json:"transparent_data_encryption_enabled"`
	ZoneRedundant                    bool                                          `json:"zone_redundant"`
	Import                           []mssqldatabase.ImportState                   `json:"import"`
	LongTermRetentionPolicy          []mssqldatabase.LongTermRetentionPolicyState  `json:"long_term_retention_policy"`
	ShortTermRetentionPolicy         []mssqldatabase.ShortTermRetentionPolicyState `json:"short_term_retention_policy"`
	ThreatDetectionPolicy            []mssqldatabase.ThreatDetectionPolicyState    `json:"threat_detection_policy"`
	Timeouts                         *mssqldatabase.TimeoutsState                  `json:"timeouts"`
}
