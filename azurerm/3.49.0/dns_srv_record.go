// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dnssrvrecord "github.com/golingon/terraproviders/azurerm/3.49.0/dnssrvrecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsSrvRecord(name string, args DnsSrvRecordArgs) *DnsSrvRecord {
	return &DnsSrvRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsSrvRecord)(nil)

type DnsSrvRecord struct {
	Name  string
	Args  DnsSrvRecordArgs
	state *dnsSrvRecordState
}

func (dsr *DnsSrvRecord) Type() string {
	return "azurerm_dns_srv_record"
}

func (dsr *DnsSrvRecord) LocalName() string {
	return dsr.Name
}

func (dsr *DnsSrvRecord) Configuration() interface{} {
	return dsr.Args
}

func (dsr *DnsSrvRecord) Attributes() dnsSrvRecordAttributes {
	return dnsSrvRecordAttributes{ref: terra.ReferenceResource(dsr)}
}

func (dsr *DnsSrvRecord) ImportState(av io.Reader) error {
	dsr.state = &dnsSrvRecordState{}
	if err := json.NewDecoder(av).Decode(dsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsr.Type(), dsr.LocalName(), err)
	}
	return nil
}

func (dsr *DnsSrvRecord) State() (*dnsSrvRecordState, bool) {
	return dsr.state, dsr.state != nil
}

func (dsr *DnsSrvRecord) StateMust() *dnsSrvRecordState {
	if dsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsr.Type(), dsr.LocalName()))
	}
	return dsr.state
}

func (dsr *DnsSrvRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(dsr)
}

type DnsSrvRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Record: min=1
	Record []dnssrvrecord.Record `hcl:"record,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *dnssrvrecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsSrvRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsSrvRecordAttributes struct {
	ref terra.Reference
}

func (dsr dnsSrvRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("fqdn"))
}

func (dsr dnsSrvRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("id"))
}

func (dsr dnsSrvRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("name"))
}

func (dsr dnsSrvRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("resource_group_name"))
}

func (dsr dnsSrvRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsr.ref.Append("tags"))
}

func (dsr dnsSrvRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(dsr.ref.Append("ttl"))
}

func (dsr dnsSrvRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("zone_name"))
}

func (dsr dnsSrvRecordAttributes) Record() terra.SetValue[dnssrvrecord.RecordAttributes] {
	return terra.ReferenceSet[dnssrvrecord.RecordAttributes](dsr.ref.Append("record"))
}

func (dsr dnsSrvRecordAttributes) Timeouts() dnssrvrecord.TimeoutsAttributes {
	return terra.ReferenceSingle[dnssrvrecord.TimeoutsAttributes](dsr.ref.Append("timeouts"))
}

type dnsSrvRecordState struct {
	Fqdn              string                      `json:"fqdn"`
	Id                string                      `json:"id"`
	Name              string                      `json:"name"`
	ResourceGroupName string                      `json:"resource_group_name"`
	Tags              map[string]string           `json:"tags"`
	Ttl               float64                     `json:"ttl"`
	ZoneName          string                      `json:"zone_name"`
	Record            []dnssrvrecord.RecordState  `json:"record"`
	Timeouts          *dnssrvrecord.TimeoutsState `json:"timeouts"`
}
