// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubnamespace "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubnamespace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubNamespace(name string, args EventhubNamespaceArgs) *EventhubNamespace {
	return &EventhubNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubNamespace)(nil)

type EventhubNamespace struct {
	Name  string
	Args  EventhubNamespaceArgs
	state *eventhubNamespaceState
}

func (en *EventhubNamespace) Type() string {
	return "azurerm_eventhub_namespace"
}

func (en *EventhubNamespace) LocalName() string {
	return en.Name
}

func (en *EventhubNamespace) Configuration() interface{} {
	return en.Args
}

func (en *EventhubNamespace) Attributes() eventhubNamespaceAttributes {
	return eventhubNamespaceAttributes{ref: terra.ReferenceResource(en)}
}

func (en *EventhubNamespace) ImportState(av io.Reader) error {
	en.state = &eventhubNamespaceState{}
	if err := json.NewDecoder(av).Decode(en.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", en.Type(), en.LocalName(), err)
	}
	return nil
}

func (en *EventhubNamespace) State() (*eventhubNamespaceState, bool) {
	return en.state, en.state != nil
}

func (en *EventhubNamespace) StateMust() *eventhubNamespaceState {
	if en.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", en.Type(), en.LocalName()))
	}
	return en.state
}

func (en *EventhubNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(en)
}

type EventhubNamespaceArgs struct {
	// AutoInflateEnabled: bool, optional
	AutoInflateEnabled terra.BoolValue `hcl:"auto_inflate_enabled,attr"`
	// Capacity: number, optional
	Capacity terra.NumberValue `hcl:"capacity,attr"`
	// DedicatedClusterId: string, optional
	DedicatedClusterId terra.StringValue `hcl:"dedicated_cluster_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthenticationEnabled: bool, optional
	LocalAuthenticationEnabled terra.BoolValue `hcl:"local_authentication_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumThroughputUnits: number, optional
	MaximumThroughputUnits terra.NumberValue `hcl:"maximum_throughput_units,attr"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// NetworkRulesets: min=0
	NetworkRulesets []eventhubnamespace.NetworkRulesets `hcl:"network_rulesets,block" validate:"min=0"`
	// Identity: optional
	Identity *eventhubnamespace.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *eventhubnamespace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubNamespaceAttributes struct {
	ref terra.Reference
}

func (en eventhubNamespaceAttributes) AutoInflateEnabled() terra.BoolValue {
	return terra.ReferenceBool(en.ref.Append("auto_inflate_enabled"))
}

func (en eventhubNamespaceAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(en.ref.Append("capacity"))
}

func (en eventhubNamespaceAttributes) DedicatedClusterId() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("dedicated_cluster_id"))
}

func (en eventhubNamespaceAttributes) DefaultPrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_primary_connection_string"))
}

func (en eventhubNamespaceAttributes) DefaultPrimaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_primary_connection_string_alias"))
}

func (en eventhubNamespaceAttributes) DefaultPrimaryKey() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_primary_key"))
}

func (en eventhubNamespaceAttributes) DefaultSecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_secondary_connection_string"))
}

func (en eventhubNamespaceAttributes) DefaultSecondaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_secondary_connection_string_alias"))
}

func (en eventhubNamespaceAttributes) DefaultSecondaryKey() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("default_secondary_key"))
}

func (en eventhubNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("id"))
}

func (en eventhubNamespaceAttributes) LocalAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceBool(en.ref.Append("local_authentication_enabled"))
}

func (en eventhubNamespaceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("location"))
}

func (en eventhubNamespaceAttributes) MaximumThroughputUnits() terra.NumberValue {
	return terra.ReferenceNumber(en.ref.Append("maximum_throughput_units"))
}

func (en eventhubNamespaceAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("minimum_tls_version"))
}

func (en eventhubNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("name"))
}

func (en eventhubNamespaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(en.ref.Append("public_network_access_enabled"))
}

func (en eventhubNamespaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("resource_group_name"))
}

func (en eventhubNamespaceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(en.ref.Append("sku"))
}

func (en eventhubNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](en.ref.Append("tags"))
}

func (en eventhubNamespaceAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceBool(en.ref.Append("zone_redundant"))
}

func (en eventhubNamespaceAttributes) NetworkRulesets() terra.ListValue[eventhubnamespace.NetworkRulesetsAttributes] {
	return terra.ReferenceList[eventhubnamespace.NetworkRulesetsAttributes](en.ref.Append("network_rulesets"))
}

func (en eventhubNamespaceAttributes) Identity() terra.ListValue[eventhubnamespace.IdentityAttributes] {
	return terra.ReferenceList[eventhubnamespace.IdentityAttributes](en.ref.Append("identity"))
}

func (en eventhubNamespaceAttributes) Timeouts() eventhubnamespace.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubnamespace.TimeoutsAttributes](en.ref.Append("timeouts"))
}

type eventhubNamespaceState struct {
	AutoInflateEnabled                    bool                                     `json:"auto_inflate_enabled"`
	Capacity                              float64                                  `json:"capacity"`
	DedicatedClusterId                    string                                   `json:"dedicated_cluster_id"`
	DefaultPrimaryConnectionString        string                                   `json:"default_primary_connection_string"`
	DefaultPrimaryConnectionStringAlias   string                                   `json:"default_primary_connection_string_alias"`
	DefaultPrimaryKey                     string                                   `json:"default_primary_key"`
	DefaultSecondaryConnectionString      string                                   `json:"default_secondary_connection_string"`
	DefaultSecondaryConnectionStringAlias string                                   `json:"default_secondary_connection_string_alias"`
	DefaultSecondaryKey                   string                                   `json:"default_secondary_key"`
	Id                                    string                                   `json:"id"`
	LocalAuthenticationEnabled            bool                                     `json:"local_authentication_enabled"`
	Location                              string                                   `json:"location"`
	MaximumThroughputUnits                float64                                  `json:"maximum_throughput_units"`
	MinimumTlsVersion                     string                                   `json:"minimum_tls_version"`
	Name                                  string                                   `json:"name"`
	PublicNetworkAccessEnabled            bool                                     `json:"public_network_access_enabled"`
	ResourceGroupName                     string                                   `json:"resource_group_name"`
	Sku                                   string                                   `json:"sku"`
	Tags                                  map[string]string                        `json:"tags"`
	ZoneRedundant                         bool                                     `json:"zone_redundant"`
	NetworkRulesets                       []eventhubnamespace.NetworkRulesetsState `json:"network_rulesets"`
	Identity                              []eventhubnamespace.IdentityState        `json:"identity"`
	Timeouts                              *eventhubnamespace.TimeoutsState         `json:"timeouts"`
}
