// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterassessment "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterAssessment(name string, args SecurityCenterAssessmentArgs) *SecurityCenterAssessment {
	return &SecurityCenterAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterAssessment)(nil)

type SecurityCenterAssessment struct {
	Name  string
	Args  SecurityCenterAssessmentArgs
	state *securityCenterAssessmentState
}

func (sca *SecurityCenterAssessment) Type() string {
	return "azurerm_security_center_assessment"
}

func (sca *SecurityCenterAssessment) LocalName() string {
	return sca.Name
}

func (sca *SecurityCenterAssessment) Configuration() interface{} {
	return sca.Args
}

func (sca *SecurityCenterAssessment) Attributes() securityCenterAssessmentAttributes {
	return securityCenterAssessmentAttributes{ref: terra.ReferenceResource(sca)}
}

func (sca *SecurityCenterAssessment) ImportState(av io.Reader) error {
	sca.state = &securityCenterAssessmentState{}
	if err := json.NewDecoder(av).Decode(sca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sca.Type(), sca.LocalName(), err)
	}
	return nil
}

func (sca *SecurityCenterAssessment) State() (*securityCenterAssessmentState, bool) {
	return sca.state, sca.state != nil
}

func (sca *SecurityCenterAssessment) StateMust() *securityCenterAssessmentState {
	if sca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sca.Type(), sca.LocalName()))
	}
	return sca.state
}

func (sca *SecurityCenterAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(sca)
}

type SecurityCenterAssessmentArgs struct {
	// AdditionalData: map of string, optional
	AdditionalData terra.MapValue[terra.StringValue] `hcl:"additional_data,attr"`
	// AssessmentPolicyId: string, required
	AssessmentPolicyId terra.StringValue `hcl:"assessment_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Status: required
	Status *securitycenterassessment.Status `hcl:"status,block" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycenterassessment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterAssessmentAttributes struct {
	ref terra.Reference
}

func (sca securityCenterAssessmentAttributes) AdditionalData() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sca.ref.Append("additional_data"))
}

func (sca securityCenterAssessmentAttributes) AssessmentPolicyId() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("assessment_policy_id"))
}

func (sca securityCenterAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("id"))
}

func (sca securityCenterAssessmentAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(sca.ref.Append("target_resource_id"))
}

func (sca securityCenterAssessmentAttributes) Status() terra.ListValue[securitycenterassessment.StatusAttributes] {
	return terra.ReferenceList[securitycenterassessment.StatusAttributes](sca.ref.Append("status"))
}

func (sca securityCenterAssessmentAttributes) Timeouts() securitycenterassessment.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterassessment.TimeoutsAttributes](sca.ref.Append("timeouts"))
}

type securityCenterAssessmentState struct {
	AdditionalData     map[string]string                       `json:"additional_data"`
	AssessmentPolicyId string                                  `json:"assessment_policy_id"`
	Id                 string                                  `json:"id"`
	TargetResourceId   string                                  `json:"target_resource_id"`
	Status             []securitycenterassessment.StatusState  `json:"status"`
	Timeouts           *securitycenterassessment.TimeoutsState `json:"timeouts"`
}
