// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapi "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapi"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApi(name string, args ApiManagementApiArgs) *ApiManagementApi {
	return &ApiManagementApi{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApi)(nil)

type ApiManagementApi struct {
	Name  string
	Args  ApiManagementApiArgs
	state *apiManagementApiState
}

func (ama *ApiManagementApi) Type() string {
	return "azurerm_api_management_api"
}

func (ama *ApiManagementApi) LocalName() string {
	return ama.Name
}

func (ama *ApiManagementApi) Configuration() interface{} {
	return ama.Args
}

func (ama *ApiManagementApi) Attributes() apiManagementApiAttributes {
	return apiManagementApiAttributes{ref: terra.ReferenceResource(ama)}
}

func (ama *ApiManagementApi) ImportState(av io.Reader) error {
	ama.state = &apiManagementApiState{}
	if err := json.NewDecoder(av).Decode(ama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ama.Type(), ama.LocalName(), err)
	}
	return nil
}

func (ama *ApiManagementApi) State() (*apiManagementApiState, bool) {
	return ama.state, ama.state != nil
}

func (ama *ApiManagementApi) StateMust() *apiManagementApiState {
	if ama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ama.Type(), ama.LocalName()))
	}
	return ama.state
}

func (ama *ApiManagementApi) DependOn() terra.Reference {
	return terra.ReferenceResource(ama)
}

type ApiManagementApiArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ApiType: string, optional
	ApiType terra.StringValue `hcl:"api_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Protocols: set of string, optional
	Protocols terra.SetValue[terra.StringValue] `hcl:"protocols,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Revision: string, required
	Revision terra.StringValue `hcl:"revision,attr" validate:"required"`
	// RevisionDescription: string, optional
	RevisionDescription terra.StringValue `hcl:"revision_description,attr"`
	// ServiceUrl: string, optional
	ServiceUrl terra.StringValue `hcl:"service_url,attr"`
	// SoapPassThrough: bool, optional
	SoapPassThrough terra.BoolValue `hcl:"soap_pass_through,attr"`
	// SourceApiId: string, optional
	SourceApiId terra.StringValue `hcl:"source_api_id,attr"`
	// SubscriptionRequired: bool, optional
	SubscriptionRequired terra.BoolValue `hcl:"subscription_required,attr"`
	// TermsOfServiceUrl: string, optional
	TermsOfServiceUrl terra.StringValue `hcl:"terms_of_service_url,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// VersionDescription: string, optional
	VersionDescription terra.StringValue `hcl:"version_description,attr"`
	// VersionSetId: string, optional
	VersionSetId terra.StringValue `hcl:"version_set_id,attr"`
	// Contact: optional
	Contact *apimanagementapi.Contact `hcl:"contact,block"`
	// Import: optional
	Import *apimanagementapi.Import `hcl:"import,block"`
	// License: optional
	License *apimanagementapi.License `hcl:"license,block"`
	// Oauth2Authorization: optional
	Oauth2Authorization *apimanagementapi.Oauth2Authorization `hcl:"oauth2_authorization,block"`
	// OpenidAuthentication: optional
	OpenidAuthentication *apimanagementapi.OpenidAuthentication `hcl:"openid_authentication,block"`
	// SubscriptionKeyParameterNames: optional
	SubscriptionKeyParameterNames *apimanagementapi.SubscriptionKeyParameterNames `hcl:"subscription_key_parameter_names,block"`
	// Timeouts: optional
	Timeouts *apimanagementapi.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApi depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiAttributes struct {
	ref terra.Reference
}

func (ama apiManagementApiAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("api_management_name"))
}

func (ama apiManagementApiAttributes) ApiType() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("api_type"))
}

func (ama apiManagementApiAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("description"))
}

func (ama apiManagementApiAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("display_name"))
}

func (ama apiManagementApiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("id"))
}

func (ama apiManagementApiAttributes) IsCurrent() terra.BoolValue {
	return terra.ReferenceBool(ama.ref.Append("is_current"))
}

func (ama apiManagementApiAttributes) IsOnline() terra.BoolValue {
	return terra.ReferenceBool(ama.ref.Append("is_online"))
}

func (ama apiManagementApiAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("name"))
}

func (ama apiManagementApiAttributes) Path() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("path"))
}

func (ama apiManagementApiAttributes) Protocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ama.ref.Append("protocols"))
}

func (ama apiManagementApiAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("resource_group_name"))
}

func (ama apiManagementApiAttributes) Revision() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("revision"))
}

func (ama apiManagementApiAttributes) RevisionDescription() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("revision_description"))
}

func (ama apiManagementApiAttributes) ServiceUrl() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("service_url"))
}

func (ama apiManagementApiAttributes) SoapPassThrough() terra.BoolValue {
	return terra.ReferenceBool(ama.ref.Append("soap_pass_through"))
}

func (ama apiManagementApiAttributes) SourceApiId() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("source_api_id"))
}

func (ama apiManagementApiAttributes) SubscriptionRequired() terra.BoolValue {
	return terra.ReferenceBool(ama.ref.Append("subscription_required"))
}

func (ama apiManagementApiAttributes) TermsOfServiceUrl() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("terms_of_service_url"))
}

func (ama apiManagementApiAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("version"))
}

func (ama apiManagementApiAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("version_description"))
}

func (ama apiManagementApiAttributes) VersionSetId() terra.StringValue {
	return terra.ReferenceString(ama.ref.Append("version_set_id"))
}

func (ama apiManagementApiAttributes) Contact() terra.ListValue[apimanagementapi.ContactAttributes] {
	return terra.ReferenceList[apimanagementapi.ContactAttributes](ama.ref.Append("contact"))
}

func (ama apiManagementApiAttributes) Import() terra.ListValue[apimanagementapi.ImportAttributes] {
	return terra.ReferenceList[apimanagementapi.ImportAttributes](ama.ref.Append("import"))
}

func (ama apiManagementApiAttributes) License() terra.ListValue[apimanagementapi.LicenseAttributes] {
	return terra.ReferenceList[apimanagementapi.LicenseAttributes](ama.ref.Append("license"))
}

func (ama apiManagementApiAttributes) Oauth2Authorization() terra.ListValue[apimanagementapi.Oauth2AuthorizationAttributes] {
	return terra.ReferenceList[apimanagementapi.Oauth2AuthorizationAttributes](ama.ref.Append("oauth2_authorization"))
}

func (ama apiManagementApiAttributes) OpenidAuthentication() terra.ListValue[apimanagementapi.OpenidAuthenticationAttributes] {
	return terra.ReferenceList[apimanagementapi.OpenidAuthenticationAttributes](ama.ref.Append("openid_authentication"))
}

func (ama apiManagementApiAttributes) SubscriptionKeyParameterNames() terra.ListValue[apimanagementapi.SubscriptionKeyParameterNamesAttributes] {
	return terra.ReferenceList[apimanagementapi.SubscriptionKeyParameterNamesAttributes](ama.ref.Append("subscription_key_parameter_names"))
}

func (ama apiManagementApiAttributes) Timeouts() apimanagementapi.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapi.TimeoutsAttributes](ama.ref.Append("timeouts"))
}

type apiManagementApiState struct {
	ApiManagementName             string                                                `json:"api_management_name"`
	ApiType                       string                                                `json:"api_type"`
	Description                   string                                                `json:"description"`
	DisplayName                   string                                                `json:"display_name"`
	Id                            string                                                `json:"id"`
	IsCurrent                     bool                                                  `json:"is_current"`
	IsOnline                      bool                                                  `json:"is_online"`
	Name                          string                                                `json:"name"`
	Path                          string                                                `json:"path"`
	Protocols                     []string                                              `json:"protocols"`
	ResourceGroupName             string                                                `json:"resource_group_name"`
	Revision                      string                                                `json:"revision"`
	RevisionDescription           string                                                `json:"revision_description"`
	ServiceUrl                    string                                                `json:"service_url"`
	SoapPassThrough               bool                                                  `json:"soap_pass_through"`
	SourceApiId                   string                                                `json:"source_api_id"`
	SubscriptionRequired          bool                                                  `json:"subscription_required"`
	TermsOfServiceUrl             string                                                `json:"terms_of_service_url"`
	Version                       string                                                `json:"version"`
	VersionDescription            string                                                `json:"version_description"`
	VersionSetId                  string                                                `json:"version_set_id"`
	Contact                       []apimanagementapi.ContactState                       `json:"contact"`
	Import                        []apimanagementapi.ImportState                        `json:"import"`
	License                       []apimanagementapi.LicenseState                       `json:"license"`
	Oauth2Authorization           []apimanagementapi.Oauth2AuthorizationState           `json:"oauth2_authorization"`
	OpenidAuthentication          []apimanagementapi.OpenidAuthenticationState          `json:"openid_authentication"`
	SubscriptionKeyParameterNames []apimanagementapi.SubscriptionKeyParameterNamesState `json:"subscription_key_parameter_names"`
	Timeouts                      *apimanagementapi.TimeoutsState                       `json:"timeouts"`
}
