// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqljobcredential "github.com/golingon/terraproviders/azurerm/3.49.0/mssqljobcredential"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlJobCredential(name string, args MssqlJobCredentialArgs) *MssqlJobCredential {
	return &MssqlJobCredential{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlJobCredential)(nil)

type MssqlJobCredential struct {
	Name  string
	Args  MssqlJobCredentialArgs
	state *mssqlJobCredentialState
}

func (mjc *MssqlJobCredential) Type() string {
	return "azurerm_mssql_job_credential"
}

func (mjc *MssqlJobCredential) LocalName() string {
	return mjc.Name
}

func (mjc *MssqlJobCredential) Configuration() interface{} {
	return mjc.Args
}

func (mjc *MssqlJobCredential) Attributes() mssqlJobCredentialAttributes {
	return mssqlJobCredentialAttributes{ref: terra.ReferenceResource(mjc)}
}

func (mjc *MssqlJobCredential) ImportState(av io.Reader) error {
	mjc.state = &mssqlJobCredentialState{}
	if err := json.NewDecoder(av).Decode(mjc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mjc.Type(), mjc.LocalName(), err)
	}
	return nil
}

func (mjc *MssqlJobCredential) State() (*mssqlJobCredentialState, bool) {
	return mjc.state, mjc.state != nil
}

func (mjc *MssqlJobCredential) StateMust() *mssqlJobCredentialState {
	if mjc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mjc.Type(), mjc.LocalName()))
	}
	return mjc.state
}

func (mjc *MssqlJobCredential) DependOn() terra.Reference {
	return terra.ReferenceResource(mjc)
}

type MssqlJobCredentialArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JobAgentId: string, required
	JobAgentId terra.StringValue `hcl:"job_agent_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqljobcredential.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlJobCredential depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlJobCredentialAttributes struct {
	ref terra.Reference
}

func (mjc mssqlJobCredentialAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mjc.ref.Append("id"))
}

func (mjc mssqlJobCredentialAttributes) JobAgentId() terra.StringValue {
	return terra.ReferenceString(mjc.ref.Append("job_agent_id"))
}

func (mjc mssqlJobCredentialAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mjc.ref.Append("name"))
}

func (mjc mssqlJobCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceString(mjc.ref.Append("password"))
}

func (mjc mssqlJobCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceString(mjc.ref.Append("username"))
}

func (mjc mssqlJobCredentialAttributes) Timeouts() mssqljobcredential.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqljobcredential.TimeoutsAttributes](mjc.ref.Append("timeouts"))
}

type mssqlJobCredentialState struct {
	Id         string                            `json:"id"`
	JobAgentId string                            `json:"job_agent_id"`
	Name       string                            `json:"name"`
	Password   string                            `json:"password"`
	Username   string                            `json:"username"`
	Timeouts   *mssqljobcredential.TimeoutsState `json:"timeouts"`
}
