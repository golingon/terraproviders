// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logzsubaccount "github.com/golingon/terraproviders/azurerm/3.49.0/logzsubaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogzSubAccount(name string, args LogzSubAccountArgs) *LogzSubAccount {
	return &LogzSubAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogzSubAccount)(nil)

type LogzSubAccount struct {
	Name  string
	Args  LogzSubAccountArgs
	state *logzSubAccountState
}

func (lsa *LogzSubAccount) Type() string {
	return "azurerm_logz_sub_account"
}

func (lsa *LogzSubAccount) LocalName() string {
	return lsa.Name
}

func (lsa *LogzSubAccount) Configuration() interface{} {
	return lsa.Args
}

func (lsa *LogzSubAccount) Attributes() logzSubAccountAttributes {
	return logzSubAccountAttributes{ref: terra.ReferenceResource(lsa)}
}

func (lsa *LogzSubAccount) ImportState(av io.Reader) error {
	lsa.state = &logzSubAccountState{}
	if err := json.NewDecoder(av).Decode(lsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lsa.Type(), lsa.LocalName(), err)
	}
	return nil
}

func (lsa *LogzSubAccount) State() (*logzSubAccountState, bool) {
	return lsa.state, lsa.state != nil
}

func (lsa *LogzSubAccount) StateMust() *logzSubAccountState {
	if lsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lsa.Type(), lsa.LocalName()))
	}
	return lsa.state
}

func (lsa *LogzSubAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(lsa)
}

type LogzSubAccountArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogzMonitorId: string, required
	LogzMonitorId terra.StringValue `hcl:"logz_monitor_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *logzsubaccount.Timeouts `hcl:"timeouts,block"`
	// User: required
	User *logzsubaccount.User `hcl:"user,block" validate:"required"`
	// DependsOn contains resources that LogzSubAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logzSubAccountAttributes struct {
	ref terra.Reference
}

func (lsa logzSubAccountAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(lsa.ref.Append("enabled"))
}

func (lsa logzSubAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lsa.ref.Append("id"))
}

func (lsa logzSubAccountAttributes) LogzMonitorId() terra.StringValue {
	return terra.ReferenceString(lsa.ref.Append("logz_monitor_id"))
}

func (lsa logzSubAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lsa.ref.Append("name"))
}

func (lsa logzSubAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lsa.ref.Append("tags"))
}

func (lsa logzSubAccountAttributes) Timeouts() logzsubaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[logzsubaccount.TimeoutsAttributes](lsa.ref.Append("timeouts"))
}

func (lsa logzSubAccountAttributes) User() terra.ListValue[logzsubaccount.UserAttributes] {
	return terra.ReferenceList[logzsubaccount.UserAttributes](lsa.ref.Append("user"))
}

type logzSubAccountState struct {
	Enabled       bool                          `json:"enabled"`
	Id            string                        `json:"id"`
	LogzMonitorId string                        `json:"logz_monitor_id"`
	Name          string                        `json:"name"`
	Tags          map[string]string             `json:"tags"`
	Timeouts      *logzsubaccount.TimeoutsState `json:"timeouts"`
	User          []logzsubaccount.UserState    `json:"user"`
}
