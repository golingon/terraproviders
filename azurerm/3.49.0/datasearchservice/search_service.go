// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasearchservice

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Identity struct{}

type QueryKeys struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type QueryKeysAttributes struct {
	ref terra.Reference
}

func (qk QueryKeysAttributes) InternalRef() terra.Reference {
	return qk.ref
}

func (qk QueryKeysAttributes) InternalWithRef(ref terra.Reference) QueryKeysAttributes {
	return QueryKeysAttributes{ref: ref}
}

func (qk QueryKeysAttributes) InternalTokens() hclwrite.Tokens {
	return qk.ref.InternalTokens()
}

func (qk QueryKeysAttributes) Key() terra.StringValue {
	return terra.ReferenceString(qk.ref.Append("key"))
}

func (qk QueryKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceString(qk.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type IdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type QueryKeysState struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
