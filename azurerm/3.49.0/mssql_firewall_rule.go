// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlfirewallrule "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlFirewallRule(name string, args MssqlFirewallRuleArgs) *MssqlFirewallRule {
	return &MssqlFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlFirewallRule)(nil)

type MssqlFirewallRule struct {
	Name  string
	Args  MssqlFirewallRuleArgs
	state *mssqlFirewallRuleState
}

func (mfr *MssqlFirewallRule) Type() string {
	return "azurerm_mssql_firewall_rule"
}

func (mfr *MssqlFirewallRule) LocalName() string {
	return mfr.Name
}

func (mfr *MssqlFirewallRule) Configuration() interface{} {
	return mfr.Args
}

func (mfr *MssqlFirewallRule) Attributes() mssqlFirewallRuleAttributes {
	return mssqlFirewallRuleAttributes{ref: terra.ReferenceResource(mfr)}
}

func (mfr *MssqlFirewallRule) ImportState(av io.Reader) error {
	mfr.state = &mssqlFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(mfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mfr.Type(), mfr.LocalName(), err)
	}
	return nil
}

func (mfr *MssqlFirewallRule) State() (*mssqlFirewallRuleState, bool) {
	return mfr.state, mfr.state != nil
}

func (mfr *MssqlFirewallRule) StateMust() *mssqlFirewallRuleState {
	if mfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mfr.Type(), mfr.LocalName()))
	}
	return mfr.state
}

func (mfr *MssqlFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mfr)
}

type MssqlFirewallRuleArgs struct {
	// EndIpAddress: string, required
	EndIpAddress terra.StringValue `hcl:"end_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// StartIpAddress: string, required
	StartIpAddress terra.StringValue `hcl:"start_ip_address,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mssqlfirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlFirewallRuleAttributes struct {
	ref terra.Reference
}

func (mfr mssqlFirewallRuleAttributes) EndIpAddress() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("end_ip_address"))
}

func (mfr mssqlFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("id"))
}

func (mfr mssqlFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("name"))
}

func (mfr mssqlFirewallRuleAttributes) ServerId() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("server_id"))
}

func (mfr mssqlFirewallRuleAttributes) StartIpAddress() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("start_ip_address"))
}

func (mfr mssqlFirewallRuleAttributes) Timeouts() mssqlfirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlfirewallrule.TimeoutsAttributes](mfr.ref.Append("timeouts"))
}

type mssqlFirewallRuleState struct {
	EndIpAddress   string                           `json:"end_ip_address"`
	Id             string                           `json:"id"`
	Name           string                           `json:"name"`
	ServerId       string                           `json:"server_id"`
	StartIpAddress string                           `json:"start_ip_address"`
	Timeouts       *mssqlfirewallrule.TimeoutsState `json:"timeouts"`
}
