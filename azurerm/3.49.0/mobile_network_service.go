// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mobilenetworkservice "github.com/golingon/terraproviders/azurerm/3.49.0/mobilenetworkservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMobileNetworkService(name string, args MobileNetworkServiceArgs) *MobileNetworkService {
	return &MobileNetworkService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MobileNetworkService)(nil)

type MobileNetworkService struct {
	Name  string
	Args  MobileNetworkServiceArgs
	state *mobileNetworkServiceState
}

func (mns *MobileNetworkService) Type() string {
	return "azurerm_mobile_network_service"
}

func (mns *MobileNetworkService) LocalName() string {
	return mns.Name
}

func (mns *MobileNetworkService) Configuration() interface{} {
	return mns.Args
}

func (mns *MobileNetworkService) Attributes() mobileNetworkServiceAttributes {
	return mobileNetworkServiceAttributes{ref: terra.ReferenceResource(mns)}
}

func (mns *MobileNetworkService) ImportState(av io.Reader) error {
	mns.state = &mobileNetworkServiceState{}
	if err := json.NewDecoder(av).Decode(mns.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mns.Type(), mns.LocalName(), err)
	}
	return nil
}

func (mns *MobileNetworkService) State() (*mobileNetworkServiceState, bool) {
	return mns.state, mns.state != nil
}

func (mns *MobileNetworkService) StateMust() *mobileNetworkServiceState {
	if mns.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mns.Type(), mns.LocalName()))
	}
	return mns.state
}

func (mns *MobileNetworkService) DependOn() terra.Reference {
	return terra.ReferenceResource(mns)
}

type MobileNetworkServiceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MobileNetworkId: string, required
	MobileNetworkId terra.StringValue `hcl:"mobile_network_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServicePrecedence: number, required
	ServicePrecedence terra.NumberValue `hcl:"service_precedence,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// PccRule: min=1
	PccRule []mobilenetworkservice.PccRule `hcl:"pcc_rule,block" validate:"min=1"`
	// ServiceQosPolicy: optional
	ServiceQosPolicy *mobilenetworkservice.ServiceQosPolicy `hcl:"service_qos_policy,block"`
	// Timeouts: optional
	Timeouts *mobilenetworkservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MobileNetworkService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mobileNetworkServiceAttributes struct {
	ref terra.Reference
}

func (mns mobileNetworkServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("id"))
}

func (mns mobileNetworkServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("location"))
}

func (mns mobileNetworkServiceAttributes) MobileNetworkId() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("mobile_network_id"))
}

func (mns mobileNetworkServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mns.ref.Append("name"))
}

func (mns mobileNetworkServiceAttributes) ServicePrecedence() terra.NumberValue {
	return terra.ReferenceNumber(mns.ref.Append("service_precedence"))
}

func (mns mobileNetworkServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mns.ref.Append("tags"))
}

func (mns mobileNetworkServiceAttributes) PccRule() terra.ListValue[mobilenetworkservice.PccRuleAttributes] {
	return terra.ReferenceList[mobilenetworkservice.PccRuleAttributes](mns.ref.Append("pcc_rule"))
}

func (mns mobileNetworkServiceAttributes) ServiceQosPolicy() terra.ListValue[mobilenetworkservice.ServiceQosPolicyAttributes] {
	return terra.ReferenceList[mobilenetworkservice.ServiceQosPolicyAttributes](mns.ref.Append("service_qos_policy"))
}

func (mns mobileNetworkServiceAttributes) Timeouts() mobilenetworkservice.TimeoutsAttributes {
	return terra.ReferenceSingle[mobilenetworkservice.TimeoutsAttributes](mns.ref.Append("timeouts"))
}

type mobileNetworkServiceState struct {
	Id                string                                       `json:"id"`
	Location          string                                       `json:"location"`
	MobileNetworkId   string                                       `json:"mobile_network_id"`
	Name              string                                       `json:"name"`
	ServicePrecedence float64                                      `json:"service_precedence"`
	Tags              map[string]string                            `json:"tags"`
	PccRule           []mobilenetworkservice.PccRuleState          `json:"pcc_rule"`
	ServiceQosPolicy  []mobilenetworkservice.ServiceQosPolicyState `json:"service_qos_policy"`
	Timeouts          *mobilenetworkservice.TimeoutsState          `json:"timeouts"`
}
