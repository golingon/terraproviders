// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlvirtualmachine "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlvirtualmachine"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlVirtualMachine(name string, args MssqlVirtualMachineArgs) *MssqlVirtualMachine {
	return &MssqlVirtualMachine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlVirtualMachine)(nil)

type MssqlVirtualMachine struct {
	Name  string
	Args  MssqlVirtualMachineArgs
	state *mssqlVirtualMachineState
}

func (mvm *MssqlVirtualMachine) Type() string {
	return "azurerm_mssql_virtual_machine"
}

func (mvm *MssqlVirtualMachine) LocalName() string {
	return mvm.Name
}

func (mvm *MssqlVirtualMachine) Configuration() interface{} {
	return mvm.Args
}

func (mvm *MssqlVirtualMachine) Attributes() mssqlVirtualMachineAttributes {
	return mssqlVirtualMachineAttributes{ref: terra.ReferenceResource(mvm)}
}

func (mvm *MssqlVirtualMachine) ImportState(av io.Reader) error {
	mvm.state = &mssqlVirtualMachineState{}
	if err := json.NewDecoder(av).Decode(mvm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mvm.Type(), mvm.LocalName(), err)
	}
	return nil
}

func (mvm *MssqlVirtualMachine) State() (*mssqlVirtualMachineState, bool) {
	return mvm.state, mvm.state != nil
}

func (mvm *MssqlVirtualMachine) StateMust() *mssqlVirtualMachineState {
	if mvm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mvm.Type(), mvm.LocalName()))
	}
	return mvm.state
}

func (mvm *MssqlVirtualMachine) DependOn() terra.Reference {
	return terra.ReferenceResource(mvm)
}

type MssqlVirtualMachineArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RServicesEnabled: bool, optional
	RServicesEnabled terra.BoolValue `hcl:"r_services_enabled,attr"`
	// SqlConnectivityPort: number, optional
	SqlConnectivityPort terra.NumberValue `hcl:"sql_connectivity_port,attr"`
	// SqlConnectivityType: string, optional
	SqlConnectivityType terra.StringValue `hcl:"sql_connectivity_type,attr"`
	// SqlConnectivityUpdatePassword: string, optional
	SqlConnectivityUpdatePassword terra.StringValue `hcl:"sql_connectivity_update_password,attr"`
	// SqlConnectivityUpdateUsername: string, optional
	SqlConnectivityUpdateUsername terra.StringValue `hcl:"sql_connectivity_update_username,attr"`
	// SqlLicenseType: string, required
	SqlLicenseType terra.StringValue `hcl:"sql_license_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// Assessment: optional
	Assessment *mssqlvirtualmachine.Assessment `hcl:"assessment,block"`
	// AutoBackup: optional
	AutoBackup *mssqlvirtualmachine.AutoBackup `hcl:"auto_backup,block"`
	// AutoPatching: optional
	AutoPatching *mssqlvirtualmachine.AutoPatching `hcl:"auto_patching,block"`
	// KeyVaultCredential: optional
	KeyVaultCredential *mssqlvirtualmachine.KeyVaultCredential `hcl:"key_vault_credential,block"`
	// SqlInstance: optional
	SqlInstance *mssqlvirtualmachine.SqlInstance `hcl:"sql_instance,block"`
	// StorageConfiguration: optional
	StorageConfiguration *mssqlvirtualmachine.StorageConfiguration `hcl:"storage_configuration,block"`
	// Timeouts: optional
	Timeouts *mssqlvirtualmachine.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlVirtualMachine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlVirtualMachineAttributes struct {
	ref terra.Reference
}

func (mvm mssqlVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("id"))
}

func (mvm mssqlVirtualMachineAttributes) RServicesEnabled() terra.BoolValue {
	return terra.ReferenceBool(mvm.ref.Append("r_services_enabled"))
}

func (mvm mssqlVirtualMachineAttributes) SqlConnectivityPort() terra.NumberValue {
	return terra.ReferenceNumber(mvm.ref.Append("sql_connectivity_port"))
}

func (mvm mssqlVirtualMachineAttributes) SqlConnectivityType() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("sql_connectivity_type"))
}

func (mvm mssqlVirtualMachineAttributes) SqlConnectivityUpdatePassword() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("sql_connectivity_update_password"))
}

func (mvm mssqlVirtualMachineAttributes) SqlConnectivityUpdateUsername() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("sql_connectivity_update_username"))
}

func (mvm mssqlVirtualMachineAttributes) SqlLicenseType() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("sql_license_type"))
}

func (mvm mssqlVirtualMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mvm.ref.Append("tags"))
}

func (mvm mssqlVirtualMachineAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceString(mvm.ref.Append("virtual_machine_id"))
}

func (mvm mssqlVirtualMachineAttributes) Assessment() terra.ListValue[mssqlvirtualmachine.AssessmentAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.AssessmentAttributes](mvm.ref.Append("assessment"))
}

func (mvm mssqlVirtualMachineAttributes) AutoBackup() terra.ListValue[mssqlvirtualmachine.AutoBackupAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.AutoBackupAttributes](mvm.ref.Append("auto_backup"))
}

func (mvm mssqlVirtualMachineAttributes) AutoPatching() terra.ListValue[mssqlvirtualmachine.AutoPatchingAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.AutoPatchingAttributes](mvm.ref.Append("auto_patching"))
}

func (mvm mssqlVirtualMachineAttributes) KeyVaultCredential() terra.ListValue[mssqlvirtualmachine.KeyVaultCredentialAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.KeyVaultCredentialAttributes](mvm.ref.Append("key_vault_credential"))
}

func (mvm mssqlVirtualMachineAttributes) SqlInstance() terra.ListValue[mssqlvirtualmachine.SqlInstanceAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.SqlInstanceAttributes](mvm.ref.Append("sql_instance"))
}

func (mvm mssqlVirtualMachineAttributes) StorageConfiguration() terra.ListValue[mssqlvirtualmachine.StorageConfigurationAttributes] {
	return terra.ReferenceList[mssqlvirtualmachine.StorageConfigurationAttributes](mvm.ref.Append("storage_configuration"))
}

func (mvm mssqlVirtualMachineAttributes) Timeouts() mssqlvirtualmachine.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlvirtualmachine.TimeoutsAttributes](mvm.ref.Append("timeouts"))
}

type mssqlVirtualMachineState struct {
	Id                            string                                          `json:"id"`
	RServicesEnabled              bool                                            `json:"r_services_enabled"`
	SqlConnectivityPort           float64                                         `json:"sql_connectivity_port"`
	SqlConnectivityType           string                                          `json:"sql_connectivity_type"`
	SqlConnectivityUpdatePassword string                                          `json:"sql_connectivity_update_password"`
	SqlConnectivityUpdateUsername string                                          `json:"sql_connectivity_update_username"`
	SqlLicenseType                string                                          `json:"sql_license_type"`
	Tags                          map[string]string                               `json:"tags"`
	VirtualMachineId              string                                          `json:"virtual_machine_id"`
	Assessment                    []mssqlvirtualmachine.AssessmentState           `json:"assessment"`
	AutoBackup                    []mssqlvirtualmachine.AutoBackupState           `json:"auto_backup"`
	AutoPatching                  []mssqlvirtualmachine.AutoPatchingState         `json:"auto_patching"`
	KeyVaultCredential            []mssqlvirtualmachine.KeyVaultCredentialState   `json:"key_vault_credential"`
	SqlInstance                   []mssqlvirtualmachine.SqlInstanceState          `json:"sql_instance"`
	StorageConfiguration          []mssqlvirtualmachine.StorageConfigurationState `json:"storage_configuration"`
	Timeouts                      *mssqlvirtualmachine.TimeoutsState              `json:"timeouts"`
}
