// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subscriptioncostmanagementexport "github.com/golingon/terraproviders/azurerm/3.49.0/subscriptioncostmanagementexport"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubscriptionCostManagementExport(name string, args SubscriptionCostManagementExportArgs) *SubscriptionCostManagementExport {
	return &SubscriptionCostManagementExport{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubscriptionCostManagementExport)(nil)

type SubscriptionCostManagementExport struct {
	Name  string
	Args  SubscriptionCostManagementExportArgs
	state *subscriptionCostManagementExportState
}

func (scme *SubscriptionCostManagementExport) Type() string {
	return "azurerm_subscription_cost_management_export"
}

func (scme *SubscriptionCostManagementExport) LocalName() string {
	return scme.Name
}

func (scme *SubscriptionCostManagementExport) Configuration() interface{} {
	return scme.Args
}

func (scme *SubscriptionCostManagementExport) Attributes() subscriptionCostManagementExportAttributes {
	return subscriptionCostManagementExportAttributes{ref: terra.ReferenceResource(scme)}
}

func (scme *SubscriptionCostManagementExport) ImportState(av io.Reader) error {
	scme.state = &subscriptionCostManagementExportState{}
	if err := json.NewDecoder(av).Decode(scme.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scme.Type(), scme.LocalName(), err)
	}
	return nil
}

func (scme *SubscriptionCostManagementExport) State() (*subscriptionCostManagementExportState, bool) {
	return scme.state, scme.state != nil
}

func (scme *SubscriptionCostManagementExport) StateMust() *subscriptionCostManagementExportState {
	if scme.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scme.Type(), scme.LocalName()))
	}
	return scme.state
}

func (scme *SubscriptionCostManagementExport) DependOn() terra.Reference {
	return terra.ReferenceResource(scme)
}

type SubscriptionCostManagementExportArgs struct {
	// Active: bool, optional
	Active terra.BoolValue `hcl:"active,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecurrencePeriodEndDate: string, required
	RecurrencePeriodEndDate terra.StringValue `hcl:"recurrence_period_end_date,attr" validate:"required"`
	// RecurrencePeriodStartDate: string, required
	RecurrencePeriodStartDate terra.StringValue `hcl:"recurrence_period_start_date,attr" validate:"required"`
	// RecurrenceType: string, required
	RecurrenceType terra.StringValue `hcl:"recurrence_type,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// ExportDataOptions: required
	ExportDataOptions *subscriptioncostmanagementexport.ExportDataOptions `hcl:"export_data_options,block" validate:"required"`
	// ExportDataStorageLocation: required
	ExportDataStorageLocation *subscriptioncostmanagementexport.ExportDataStorageLocation `hcl:"export_data_storage_location,block" validate:"required"`
	// Timeouts: optional
	Timeouts *subscriptioncostmanagementexport.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubscriptionCostManagementExport depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subscriptionCostManagementExportAttributes struct {
	ref terra.Reference
}

func (scme subscriptionCostManagementExportAttributes) Active() terra.BoolValue {
	return terra.ReferenceBool(scme.ref.Append("active"))
}

func (scme subscriptionCostManagementExportAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("id"))
}

func (scme subscriptionCostManagementExportAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("name"))
}

func (scme subscriptionCostManagementExportAttributes) RecurrencePeriodEndDate() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("recurrence_period_end_date"))
}

func (scme subscriptionCostManagementExportAttributes) RecurrencePeriodStartDate() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("recurrence_period_start_date"))
}

func (scme subscriptionCostManagementExportAttributes) RecurrenceType() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("recurrence_type"))
}

func (scme subscriptionCostManagementExportAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(scme.ref.Append("subscription_id"))
}

func (scme subscriptionCostManagementExportAttributes) ExportDataOptions() terra.ListValue[subscriptioncostmanagementexport.ExportDataOptionsAttributes] {
	return terra.ReferenceList[subscriptioncostmanagementexport.ExportDataOptionsAttributes](scme.ref.Append("export_data_options"))
}

func (scme subscriptionCostManagementExportAttributes) ExportDataStorageLocation() terra.ListValue[subscriptioncostmanagementexport.ExportDataStorageLocationAttributes] {
	return terra.ReferenceList[subscriptioncostmanagementexport.ExportDataStorageLocationAttributes](scme.ref.Append("export_data_storage_location"))
}

func (scme subscriptionCostManagementExportAttributes) Timeouts() subscriptioncostmanagementexport.TimeoutsAttributes {
	return terra.ReferenceSingle[subscriptioncostmanagementexport.TimeoutsAttributes](scme.ref.Append("timeouts"))
}

type subscriptionCostManagementExportState struct {
	Active                    bool                                                              `json:"active"`
	Id                        string                                                            `json:"id"`
	Name                      string                                                            `json:"name"`
	RecurrencePeriodEndDate   string                                                            `json:"recurrence_period_end_date"`
	RecurrencePeriodStartDate string                                                            `json:"recurrence_period_start_date"`
	RecurrenceType            string                                                            `json:"recurrence_type"`
	SubscriptionId            string                                                            `json:"subscription_id"`
	ExportDataOptions         []subscriptioncostmanagementexport.ExportDataOptionsState         `json:"export_data_options"`
	ExportDataStorageLocation []subscriptioncostmanagementexport.ExportDataStorageLocationState `json:"export_data_storage_location"`
	Timeouts                  *subscriptioncostmanagementexport.TimeoutsState                   `json:"timeouts"`
}
