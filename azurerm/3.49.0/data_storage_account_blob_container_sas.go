// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datastorageaccountblobcontainersas "github.com/golingon/terraproviders/azurerm/3.49.0/datastorageaccountblobcontainersas"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataStorageAccountBlobContainerSas(name string, args DataStorageAccountBlobContainerSasArgs) *DataStorageAccountBlobContainerSas {
	return &DataStorageAccountBlobContainerSas{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataStorageAccountBlobContainerSas)(nil)

type DataStorageAccountBlobContainerSas struct {
	Name string
	Args DataStorageAccountBlobContainerSasArgs
}

func (sabcs *DataStorageAccountBlobContainerSas) DataSource() string {
	return "azurerm_storage_account_blob_container_sas"
}

func (sabcs *DataStorageAccountBlobContainerSas) LocalName() string {
	return sabcs.Name
}

func (sabcs *DataStorageAccountBlobContainerSas) Configuration() interface{} {
	return sabcs.Args
}

func (sabcs *DataStorageAccountBlobContainerSas) Attributes() dataStorageAccountBlobContainerSasAttributes {
	return dataStorageAccountBlobContainerSasAttributes{ref: terra.ReferenceDataResource(sabcs)}
}

type DataStorageAccountBlobContainerSasArgs struct {
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// ContentDisposition: string, optional
	ContentDisposition terra.StringValue `hcl:"content_disposition,attr"`
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// ContentLanguage: string, optional
	ContentLanguage terra.StringValue `hcl:"content_language,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Expiry: string, required
	Expiry terra.StringValue `hcl:"expiry,attr" validate:"required"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
	// Permissions: required
	Permissions *datastorageaccountblobcontainersas.Permissions `hcl:"permissions,block" validate:"required"`
	// Timeouts: optional
	Timeouts *datastorageaccountblobcontainersas.Timeouts `hcl:"timeouts,block"`
}
type dataStorageAccountBlobContainerSasAttributes struct {
	ref terra.Reference
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("cache_control"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("connection_string"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("container_name"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ContentDisposition() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("content_disposition"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("content_encoding"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ContentLanguage() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("content_language"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("content_type"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Expiry() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("expiry"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(sabcs.ref.Append("https_only"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("id"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("ip_address"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Sas() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("sas"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Start() terra.StringValue {
	return terra.ReferenceString(sabcs.ref.Append("start"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Permissions() terra.ListValue[datastorageaccountblobcontainersas.PermissionsAttributes] {
	return terra.ReferenceList[datastorageaccountblobcontainersas.PermissionsAttributes](sabcs.ref.Append("permissions"))
}

func (sabcs dataStorageAccountBlobContainerSasAttributes) Timeouts() datastorageaccountblobcontainersas.TimeoutsAttributes {
	return terra.ReferenceSingle[datastorageaccountblobcontainersas.TimeoutsAttributes](sabcs.ref.Append("timeouts"))
}
