// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appconfigurationkey "github.com/golingon/terraproviders/azurerm/3.49.0/appconfigurationkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppConfigurationKey(name string, args AppConfigurationKeyArgs) *AppConfigurationKey {
	return &AppConfigurationKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppConfigurationKey)(nil)

type AppConfigurationKey struct {
	Name  string
	Args  AppConfigurationKeyArgs
	state *appConfigurationKeyState
}

func (ack *AppConfigurationKey) Type() string {
	return "azurerm_app_configuration_key"
}

func (ack *AppConfigurationKey) LocalName() string {
	return ack.Name
}

func (ack *AppConfigurationKey) Configuration() interface{} {
	return ack.Args
}

func (ack *AppConfigurationKey) Attributes() appConfigurationKeyAttributes {
	return appConfigurationKeyAttributes{ref: terra.ReferenceResource(ack)}
}

func (ack *AppConfigurationKey) ImportState(av io.Reader) error {
	ack.state = &appConfigurationKeyState{}
	if err := json.NewDecoder(av).Decode(ack.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ack.Type(), ack.LocalName(), err)
	}
	return nil
}

func (ack *AppConfigurationKey) State() (*appConfigurationKeyState, bool) {
	return ack.state, ack.state != nil
}

func (ack *AppConfigurationKey) StateMust() *appConfigurationKeyState {
	if ack.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ack.Type(), ack.LocalName()))
	}
	return ack.state
}

func (ack *AppConfigurationKey) DependOn() terra.Reference {
	return terra.ReferenceResource(ack)
}

type AppConfigurationKeyArgs struct {
	// ConfigurationStoreId: string, required
	ConfigurationStoreId terra.StringValue `hcl:"configuration_store_id,attr" validate:"required"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Locked: bool, optional
	Locked terra.BoolValue `hcl:"locked,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// VaultKeyReference: string, optional
	VaultKeyReference terra.StringValue `hcl:"vault_key_reference,attr"`
	// Timeouts: optional
	Timeouts *appconfigurationkey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppConfigurationKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appConfigurationKeyAttributes struct {
	ref terra.Reference
}

func (ack appConfigurationKeyAttributes) ConfigurationStoreId() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("configuration_store_id"))
}

func (ack appConfigurationKeyAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("content_type"))
}

func (ack appConfigurationKeyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("etag"))
}

func (ack appConfigurationKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("id"))
}

func (ack appConfigurationKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("key"))
}

func (ack appConfigurationKeyAttributes) Label() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("label"))
}

func (ack appConfigurationKeyAttributes) Locked() terra.BoolValue {
	return terra.ReferenceBool(ack.ref.Append("locked"))
}

func (ack appConfigurationKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ack.ref.Append("tags"))
}

func (ack appConfigurationKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("type"))
}

func (ack appConfigurationKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("value"))
}

func (ack appConfigurationKeyAttributes) VaultKeyReference() terra.StringValue {
	return terra.ReferenceString(ack.ref.Append("vault_key_reference"))
}

func (ack appConfigurationKeyAttributes) Timeouts() appconfigurationkey.TimeoutsAttributes {
	return terra.ReferenceSingle[appconfigurationkey.TimeoutsAttributes](ack.ref.Append("timeouts"))
}

type appConfigurationKeyState struct {
	ConfigurationStoreId string                             `json:"configuration_store_id"`
	ContentType          string                             `json:"content_type"`
	Etag                 string                             `json:"etag"`
	Id                   string                             `json:"id"`
	Key                  string                             `json:"key"`
	Label                string                             `json:"label"`
	Locked               bool                               `json:"locked"`
	Tags                 map[string]string                  `json:"tags"`
	Type                 string                             `json:"type"`
	Value                string                             `json:"value"`
	VaultKeyReference    string                             `json:"vault_key_reference"`
	Timeouts             *appconfigurationkey.TimeoutsState `json:"timeouts"`
}
