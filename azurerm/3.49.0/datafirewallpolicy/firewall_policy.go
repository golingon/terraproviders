// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datafirewallpolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Dns struct{}

type ThreatIntelligenceAllowlist struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DnsAttributes struct {
	ref terra.Reference
}

func (d DnsAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DnsAttributes) InternalWithRef(ref terra.Reference) DnsAttributes {
	return DnsAttributes{ref: ref}
}

func (d DnsAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DnsAttributes) NetworkRuleFqdnEnabled() terra.BoolValue {
	return terra.ReferenceBool(d.ref.Append("network_rule_fqdn_enabled"))
}

func (d DnsAttributes) ProxyEnabled() terra.BoolValue {
	return terra.ReferenceBool(d.ref.Append("proxy_enabled"))
}

func (d DnsAttributes) Servers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](d.ref.Append("servers"))
}

type ThreatIntelligenceAllowlistAttributes struct {
	ref terra.Reference
}

func (tia ThreatIntelligenceAllowlistAttributes) InternalRef() terra.Reference {
	return tia.ref
}

func (tia ThreatIntelligenceAllowlistAttributes) InternalWithRef(ref terra.Reference) ThreatIntelligenceAllowlistAttributes {
	return ThreatIntelligenceAllowlistAttributes{ref: ref}
}

func (tia ThreatIntelligenceAllowlistAttributes) InternalTokens() hclwrite.Tokens {
	return tia.ref.InternalTokens()
}

func (tia ThreatIntelligenceAllowlistAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](tia.ref.Append("fqdns"))
}

func (tia ThreatIntelligenceAllowlistAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](tia.ref.Append("ip_addresses"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type DnsState struct {
	NetworkRuleFqdnEnabled bool     `json:"network_rule_fqdn_enabled"`
	ProxyEnabled           bool     `json:"proxy_enabled"`
	Servers                []string `json:"servers"`
}

type ThreatIntelligenceAllowlistState struct {
	Fqdns       []string `json:"fqdns"`
	IpAddresses []string `json:"ip_addresses"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
