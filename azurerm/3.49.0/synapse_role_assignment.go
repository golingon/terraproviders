// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapseroleassignment "github.com/golingon/terraproviders/azurerm/3.49.0/synapseroleassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseRoleAssignment(name string, args SynapseRoleAssignmentArgs) *SynapseRoleAssignment {
	return &SynapseRoleAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseRoleAssignment)(nil)

type SynapseRoleAssignment struct {
	Name  string
	Args  SynapseRoleAssignmentArgs
	state *synapseRoleAssignmentState
}

func (sra *SynapseRoleAssignment) Type() string {
	return "azurerm_synapse_role_assignment"
}

func (sra *SynapseRoleAssignment) LocalName() string {
	return sra.Name
}

func (sra *SynapseRoleAssignment) Configuration() interface{} {
	return sra.Args
}

func (sra *SynapseRoleAssignment) Attributes() synapseRoleAssignmentAttributes {
	return synapseRoleAssignmentAttributes{ref: terra.ReferenceResource(sra)}
}

func (sra *SynapseRoleAssignment) ImportState(av io.Reader) error {
	sra.state = &synapseRoleAssignmentState{}
	if err := json.NewDecoder(av).Decode(sra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sra.Type(), sra.LocalName(), err)
	}
	return nil
}

func (sra *SynapseRoleAssignment) State() (*synapseRoleAssignmentState, bool) {
	return sra.state, sra.state != nil
}

func (sra *SynapseRoleAssignment) StateMust() *synapseRoleAssignmentState {
	if sra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sra.Type(), sra.LocalName()))
	}
	return sra.state
}

func (sra *SynapseRoleAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(sra)
}

type SynapseRoleAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// SynapseSparkPoolId: string, optional
	SynapseSparkPoolId terra.StringValue `hcl:"synapse_spark_pool_id,attr"`
	// SynapseWorkspaceId: string, optional
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr"`
	// Timeouts: optional
	Timeouts *synapseroleassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseRoleAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseRoleAssignmentAttributes struct {
	ref terra.Reference
}

func (sra synapseRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sra.ref.Append("id"))
}

func (sra synapseRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(sra.ref.Append("principal_id"))
}

func (sra synapseRoleAssignmentAttributes) RoleName() terra.StringValue {
	return terra.ReferenceString(sra.ref.Append("role_name"))
}

func (sra synapseRoleAssignmentAttributes) SynapseSparkPoolId() terra.StringValue {
	return terra.ReferenceString(sra.ref.Append("synapse_spark_pool_id"))
}

func (sra synapseRoleAssignmentAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(sra.ref.Append("synapse_workspace_id"))
}

func (sra synapseRoleAssignmentAttributes) Timeouts() synapseroleassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[synapseroleassignment.TimeoutsAttributes](sra.ref.Append("timeouts"))
}

type synapseRoleAssignmentState struct {
	Id                 string                               `json:"id"`
	PrincipalId        string                               `json:"principal_id"`
	RoleName           string                               `json:"role_name"`
	SynapseSparkPoolId string                               `json:"synapse_spark_pool_id"`
	SynapseWorkspaceId string                               `json:"synapse_workspace_id"`
	Timeouts           *synapseroleassignment.TimeoutsState `json:"timeouts"`
}
