// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cosmosdbcassandratable

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoscaleSettings struct {
	// MaxThroughput: number, optional
	MaxThroughput terra.NumberValue `hcl:"max_throughput,attr"`
}

type Schema struct {
	// ClusterKey: min=0
	ClusterKey []ClusterKey `hcl:"cluster_key,block" validate:"min=0"`
	// Column: min=1
	Column []Column `hcl:"column,block" validate:"min=1"`
	// PartitionKey: min=1
	PartitionKey []PartitionKey `hcl:"partition_key,block" validate:"min=1"`
}

type ClusterKey struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrderBy: string, required
	OrderBy terra.StringValue `hcl:"order_by,attr" validate:"required"`
}

type Column struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PartitionKey struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AutoscaleSettingsAttributes struct {
	ref terra.Reference
}

func (as AutoscaleSettingsAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AutoscaleSettingsAttributes) InternalWithRef(ref terra.Reference) AutoscaleSettingsAttributes {
	return AutoscaleSettingsAttributes{ref: ref}
}

func (as AutoscaleSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AutoscaleSettingsAttributes) MaxThroughput() terra.NumberValue {
	return terra.ReferenceNumber(as.ref.Append("max_throughput"))
}

type SchemaAttributes struct {
	ref terra.Reference
}

func (s SchemaAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SchemaAttributes) InternalWithRef(ref terra.Reference) SchemaAttributes {
	return SchemaAttributes{ref: ref}
}

func (s SchemaAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SchemaAttributes) ClusterKey() terra.ListValue[ClusterKeyAttributes] {
	return terra.ReferenceList[ClusterKeyAttributes](s.ref.Append("cluster_key"))
}

func (s SchemaAttributes) Column() terra.ListValue[ColumnAttributes] {
	return terra.ReferenceList[ColumnAttributes](s.ref.Append("column"))
}

func (s SchemaAttributes) PartitionKey() terra.ListValue[PartitionKeyAttributes] {
	return terra.ReferenceList[PartitionKeyAttributes](s.ref.Append("partition_key"))
}

type ClusterKeyAttributes struct {
	ref terra.Reference
}

func (ck ClusterKeyAttributes) InternalRef() terra.Reference {
	return ck.ref
}

func (ck ClusterKeyAttributes) InternalWithRef(ref terra.Reference) ClusterKeyAttributes {
	return ClusterKeyAttributes{ref: ref}
}

func (ck ClusterKeyAttributes) InternalTokens() hclwrite.Tokens {
	return ck.ref.InternalTokens()
}

func (ck ClusterKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ck.ref.Append("name"))
}

func (ck ClusterKeyAttributes) OrderBy() terra.StringValue {
	return terra.ReferenceString(ck.ref.Append("order_by"))
}

type ColumnAttributes struct {
	ref terra.Reference
}

func (c ColumnAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ColumnAttributes) InternalWithRef(ref terra.Reference) ColumnAttributes {
	return ColumnAttributes{ref: ref}
}

func (c ColumnAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c ColumnAttributes) Type() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("type"))
}

type PartitionKeyAttributes struct {
	ref terra.Reference
}

func (pk PartitionKeyAttributes) InternalRef() terra.Reference {
	return pk.ref
}

func (pk PartitionKeyAttributes) InternalWithRef(ref terra.Reference) PartitionKeyAttributes {
	return PartitionKeyAttributes{ref: ref}
}

func (pk PartitionKeyAttributes) InternalTokens() hclwrite.Tokens {
	return pk.ref.InternalTokens()
}

func (pk PartitionKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AutoscaleSettingsState struct {
	MaxThroughput float64 `json:"max_throughput"`
}

type SchemaState struct {
	ClusterKey   []ClusterKeyState   `json:"cluster_key"`
	Column       []ColumnState       `json:"column"`
	PartitionKey []PartitionKeyState `json:"partition_key"`
}

type ClusterKeyState struct {
	Name    string `json:"name"`
	OrderBy string `json:"order_by"`
}

type ColumnState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PartitionKeyState struct {
	Name string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
