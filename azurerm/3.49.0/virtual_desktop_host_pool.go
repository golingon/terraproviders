// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualdesktophostpool "github.com/golingon/terraproviders/azurerm/3.49.0/virtualdesktophostpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualDesktopHostPool(name string, args VirtualDesktopHostPoolArgs) *VirtualDesktopHostPool {
	return &VirtualDesktopHostPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualDesktopHostPool)(nil)

type VirtualDesktopHostPool struct {
	Name  string
	Args  VirtualDesktopHostPoolArgs
	state *virtualDesktopHostPoolState
}

func (vdhp *VirtualDesktopHostPool) Type() string {
	return "azurerm_virtual_desktop_host_pool"
}

func (vdhp *VirtualDesktopHostPool) LocalName() string {
	return vdhp.Name
}

func (vdhp *VirtualDesktopHostPool) Configuration() interface{} {
	return vdhp.Args
}

func (vdhp *VirtualDesktopHostPool) Attributes() virtualDesktopHostPoolAttributes {
	return virtualDesktopHostPoolAttributes{ref: terra.ReferenceResource(vdhp)}
}

func (vdhp *VirtualDesktopHostPool) ImportState(av io.Reader) error {
	vdhp.state = &virtualDesktopHostPoolState{}
	if err := json.NewDecoder(av).Decode(vdhp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vdhp.Type(), vdhp.LocalName(), err)
	}
	return nil
}

func (vdhp *VirtualDesktopHostPool) State() (*virtualDesktopHostPoolState, bool) {
	return vdhp.state, vdhp.state != nil
}

func (vdhp *VirtualDesktopHostPool) StateMust() *virtualDesktopHostPoolState {
	if vdhp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vdhp.Type(), vdhp.LocalName()))
	}
	return vdhp.state
}

func (vdhp *VirtualDesktopHostPool) DependOn() terra.Reference {
	return terra.ReferenceResource(vdhp)
}

type VirtualDesktopHostPoolArgs struct {
	// CustomRdpProperties: string, optional
	CustomRdpProperties terra.StringValue `hcl:"custom_rdp_properties,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumSessionsAllowed: number, optional
	MaximumSessionsAllowed terra.NumberValue `hcl:"maximum_sessions_allowed,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PersonalDesktopAssignmentType: string, optional
	PersonalDesktopAssignmentType terra.StringValue `hcl:"personal_desktop_assignment_type,attr"`
	// PreferredAppGroupType: string, optional
	PreferredAppGroupType terra.StringValue `hcl:"preferred_app_group_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StartVmOnConnect: bool, optional
	StartVmOnConnect terra.BoolValue `hcl:"start_vm_on_connect,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ValidateEnvironment: bool, optional
	ValidateEnvironment terra.BoolValue `hcl:"validate_environment,attr"`
	// ScheduledAgentUpdates: optional
	ScheduledAgentUpdates *virtualdesktophostpool.ScheduledAgentUpdates `hcl:"scheduled_agent_updates,block"`
	// Timeouts: optional
	Timeouts *virtualdesktophostpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualDesktopHostPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualDesktopHostPoolAttributes struct {
	ref terra.Reference
}

func (vdhp virtualDesktopHostPoolAttributes) CustomRdpProperties() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("custom_rdp_properties"))
}

func (vdhp virtualDesktopHostPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("description"))
}

func (vdhp virtualDesktopHostPoolAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("friendly_name"))
}

func (vdhp virtualDesktopHostPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("id"))
}

func (vdhp virtualDesktopHostPoolAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("load_balancer_type"))
}

func (vdhp virtualDesktopHostPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("location"))
}

func (vdhp virtualDesktopHostPoolAttributes) MaximumSessionsAllowed() terra.NumberValue {
	return terra.ReferenceNumber(vdhp.ref.Append("maximum_sessions_allowed"))
}

func (vdhp virtualDesktopHostPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("name"))
}

func (vdhp virtualDesktopHostPoolAttributes) PersonalDesktopAssignmentType() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("personal_desktop_assignment_type"))
}

func (vdhp virtualDesktopHostPoolAttributes) PreferredAppGroupType() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("preferred_app_group_type"))
}

func (vdhp virtualDesktopHostPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("resource_group_name"))
}

func (vdhp virtualDesktopHostPoolAttributes) StartVmOnConnect() terra.BoolValue {
	return terra.ReferenceBool(vdhp.ref.Append("start_vm_on_connect"))
}

func (vdhp virtualDesktopHostPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vdhp.ref.Append("tags"))
}

func (vdhp virtualDesktopHostPoolAttributes) Type() terra.StringValue {
	return terra.ReferenceString(vdhp.ref.Append("type"))
}

func (vdhp virtualDesktopHostPoolAttributes) ValidateEnvironment() terra.BoolValue {
	return terra.ReferenceBool(vdhp.ref.Append("validate_environment"))
}

func (vdhp virtualDesktopHostPoolAttributes) ScheduledAgentUpdates() terra.ListValue[virtualdesktophostpool.ScheduledAgentUpdatesAttributes] {
	return terra.ReferenceList[virtualdesktophostpool.ScheduledAgentUpdatesAttributes](vdhp.ref.Append("scheduled_agent_updates"))
}

func (vdhp virtualDesktopHostPoolAttributes) Timeouts() virtualdesktophostpool.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualdesktophostpool.TimeoutsAttributes](vdhp.ref.Append("timeouts"))
}

type virtualDesktopHostPoolState struct {
	CustomRdpProperties           string                                              `json:"custom_rdp_properties"`
	Description                   string                                              `json:"description"`
	FriendlyName                  string                                              `json:"friendly_name"`
	Id                            string                                              `json:"id"`
	LoadBalancerType              string                                              `json:"load_balancer_type"`
	Location                      string                                              `json:"location"`
	MaximumSessionsAllowed        float64                                             `json:"maximum_sessions_allowed"`
	Name                          string                                              `json:"name"`
	PersonalDesktopAssignmentType string                                              `json:"personal_desktop_assignment_type"`
	PreferredAppGroupType         string                                              `json:"preferred_app_group_type"`
	ResourceGroupName             string                                              `json:"resource_group_name"`
	StartVmOnConnect              bool                                                `json:"start_vm_on_connect"`
	Tags                          map[string]string                                   `json:"tags"`
	Type                          string                                              `json:"type"`
	ValidateEnvironment           bool                                                `json:"validate_environment"`
	ScheduledAgentUpdates         []virtualdesktophostpool.ScheduledAgentUpdatesState `json:"scheduled_agent_updates"`
	Timeouts                      *virtualdesktophostpool.TimeoutsState               `json:"timeouts"`
}
