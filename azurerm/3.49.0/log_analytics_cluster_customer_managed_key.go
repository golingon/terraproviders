// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticsclustercustomermanagedkey "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticsclustercustomermanagedkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsClusterCustomerManagedKey(name string, args LogAnalyticsClusterCustomerManagedKeyArgs) *LogAnalyticsClusterCustomerManagedKey {
	return &LogAnalyticsClusterCustomerManagedKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsClusterCustomerManagedKey)(nil)

type LogAnalyticsClusterCustomerManagedKey struct {
	Name  string
	Args  LogAnalyticsClusterCustomerManagedKeyArgs
	state *logAnalyticsClusterCustomerManagedKeyState
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) Type() string {
	return "azurerm_log_analytics_cluster_customer_managed_key"
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) LocalName() string {
	return laccmk.Name
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) Configuration() interface{} {
	return laccmk.Args
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) Attributes() logAnalyticsClusterCustomerManagedKeyAttributes {
	return logAnalyticsClusterCustomerManagedKeyAttributes{ref: terra.ReferenceResource(laccmk)}
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) ImportState(av io.Reader) error {
	laccmk.state = &logAnalyticsClusterCustomerManagedKeyState{}
	if err := json.NewDecoder(av).Decode(laccmk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", laccmk.Type(), laccmk.LocalName(), err)
	}
	return nil
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) State() (*logAnalyticsClusterCustomerManagedKeyState, bool) {
	return laccmk.state, laccmk.state != nil
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) StateMust() *logAnalyticsClusterCustomerManagedKeyState {
	if laccmk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", laccmk.Type(), laccmk.LocalName()))
	}
	return laccmk.state
}

func (laccmk *LogAnalyticsClusterCustomerManagedKey) DependOn() terra.Reference {
	return terra.ReferenceResource(laccmk)
}

type LogAnalyticsClusterCustomerManagedKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultKeyId: string, required
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr" validate:"required"`
	// LogAnalyticsClusterId: string, required
	LogAnalyticsClusterId terra.StringValue `hcl:"log_analytics_cluster_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *loganalyticsclustercustomermanagedkey.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsClusterCustomerManagedKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsClusterCustomerManagedKeyAttributes struct {
	ref terra.Reference
}

func (laccmk logAnalyticsClusterCustomerManagedKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(laccmk.ref.Append("id"))
}

func (laccmk logAnalyticsClusterCustomerManagedKeyAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(laccmk.ref.Append("key_vault_key_id"))
}

func (laccmk logAnalyticsClusterCustomerManagedKeyAttributes) LogAnalyticsClusterId() terra.StringValue {
	return terra.ReferenceString(laccmk.ref.Append("log_analytics_cluster_id"))
}

func (laccmk logAnalyticsClusterCustomerManagedKeyAttributes) Timeouts() loganalyticsclustercustomermanagedkey.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticsclustercustomermanagedkey.TimeoutsAttributes](laccmk.ref.Append("timeouts"))
}

type logAnalyticsClusterCustomerManagedKeyState struct {
	Id                    string                                               `json:"id"`
	KeyVaultKeyId         string                                               `json:"key_vault_key_id"`
	LogAnalyticsClusterId string                                               `json:"log_analytics_cluster_id"`
	Timeouts              *loganalyticsclustercustomermanagedkey.TimeoutsState `json:"timeouts"`
}
