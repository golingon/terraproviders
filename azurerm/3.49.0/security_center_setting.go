// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycentersetting "github.com/golingon/terraproviders/azurerm/3.49.0/securitycentersetting"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterSetting(name string, args SecurityCenterSettingArgs) *SecurityCenterSetting {
	return &SecurityCenterSetting{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterSetting)(nil)

type SecurityCenterSetting struct {
	Name  string
	Args  SecurityCenterSettingArgs
	state *securityCenterSettingState
}

func (scs *SecurityCenterSetting) Type() string {
	return "azurerm_security_center_setting"
}

func (scs *SecurityCenterSetting) LocalName() string {
	return scs.Name
}

func (scs *SecurityCenterSetting) Configuration() interface{} {
	return scs.Args
}

func (scs *SecurityCenterSetting) Attributes() securityCenterSettingAttributes {
	return securityCenterSettingAttributes{ref: terra.ReferenceResource(scs)}
}

func (scs *SecurityCenterSetting) ImportState(av io.Reader) error {
	scs.state = &securityCenterSettingState{}
	if err := json.NewDecoder(av).Decode(scs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scs.Type(), scs.LocalName(), err)
	}
	return nil
}

func (scs *SecurityCenterSetting) State() (*securityCenterSettingState, bool) {
	return scs.state, scs.state != nil
}

func (scs *SecurityCenterSetting) StateMust() *securityCenterSettingState {
	if scs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scs.Type(), scs.LocalName()))
	}
	return scs.state
}

func (scs *SecurityCenterSetting) DependOn() terra.Reference {
	return terra.ReferenceResource(scs)
}

type SecurityCenterSettingArgs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SettingName: string, required
	SettingName terra.StringValue `hcl:"setting_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycentersetting.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterSetting depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterSettingAttributes struct {
	ref terra.Reference
}

func (scs securityCenterSettingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(scs.ref.Append("enabled"))
}

func (scs securityCenterSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("id"))
}

func (scs securityCenterSettingAttributes) SettingName() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("setting_name"))
}

func (scs securityCenterSettingAttributes) Timeouts() securitycentersetting.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycentersetting.TimeoutsAttributes](scs.ref.Append("timeouts"))
}

type securityCenterSettingState struct {
	Enabled     bool                                 `json:"enabled"`
	Id          string                               `json:"id"`
	SettingName string                               `json:"setting_name"`
	Timeouts    *securitycentersetting.TimeoutsState `json:"timeouts"`
}
