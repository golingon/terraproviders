// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mariadbdatabase "github.com/golingon/terraproviders/azurerm/3.49.0/mariadbdatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMariadbDatabase(name string, args MariadbDatabaseArgs) *MariadbDatabase {
	return &MariadbDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MariadbDatabase)(nil)

type MariadbDatabase struct {
	Name  string
	Args  MariadbDatabaseArgs
	state *mariadbDatabaseState
}

func (md *MariadbDatabase) Type() string {
	return "azurerm_mariadb_database"
}

func (md *MariadbDatabase) LocalName() string {
	return md.Name
}

func (md *MariadbDatabase) Configuration() interface{} {
	return md.Args
}

func (md *MariadbDatabase) Attributes() mariadbDatabaseAttributes {
	return mariadbDatabaseAttributes{ref: terra.ReferenceResource(md)}
}

func (md *MariadbDatabase) ImportState(av io.Reader) error {
	md.state = &mariadbDatabaseState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

func (md *MariadbDatabase) State() (*mariadbDatabaseState, bool) {
	return md.state, md.state != nil
}

func (md *MariadbDatabase) StateMust() *mariadbDatabaseState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

func (md *MariadbDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

type MariadbDatabaseArgs struct {
	// Charset: string, required
	Charset terra.StringValue `hcl:"charset,attr" validate:"required"`
	// Collation: string, required
	Collation terra.StringValue `hcl:"collation,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mariadbdatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MariadbDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mariadbDatabaseAttributes struct {
	ref terra.Reference
}

func (md mariadbDatabaseAttributes) Charset() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("charset"))
}

func (md mariadbDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("collation"))
}

func (md mariadbDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("id"))
}

func (md mariadbDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("name"))
}

func (md mariadbDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("resource_group_name"))
}

func (md mariadbDatabaseAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("server_name"))
}

func (md mariadbDatabaseAttributes) Timeouts() mariadbdatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[mariadbdatabase.TimeoutsAttributes](md.ref.Append("timeouts"))
}

type mariadbDatabaseState struct {
	Charset           string                         `json:"charset"`
	Collation         string                         `json:"collation"`
	Id                string                         `json:"id"`
	Name              string                         `json:"name"`
	ResourceGroupName string                         `json:"resource_group_name"`
	ServerName        string                         `json:"server_name"`
	Timeouts          *mariadbdatabase.TimeoutsState `json:"timeouts"`
}
