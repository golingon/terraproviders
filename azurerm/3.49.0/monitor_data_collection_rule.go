// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	monitordatacollectionrule "github.com/golingon/terraproviders/azurerm/3.49.0/monitordatacollectionrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMonitorDataCollectionRule(name string, args MonitorDataCollectionRuleArgs) *MonitorDataCollectionRule {
	return &MonitorDataCollectionRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MonitorDataCollectionRule)(nil)

type MonitorDataCollectionRule struct {
	Name  string
	Args  MonitorDataCollectionRuleArgs
	state *monitorDataCollectionRuleState
}

func (mdcr *MonitorDataCollectionRule) Type() string {
	return "azurerm_monitor_data_collection_rule"
}

func (mdcr *MonitorDataCollectionRule) LocalName() string {
	return mdcr.Name
}

func (mdcr *MonitorDataCollectionRule) Configuration() interface{} {
	return mdcr.Args
}

func (mdcr *MonitorDataCollectionRule) Attributes() monitorDataCollectionRuleAttributes {
	return monitorDataCollectionRuleAttributes{ref: terra.ReferenceResource(mdcr)}
}

func (mdcr *MonitorDataCollectionRule) ImportState(av io.Reader) error {
	mdcr.state = &monitorDataCollectionRuleState{}
	if err := json.NewDecoder(av).Decode(mdcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mdcr.Type(), mdcr.LocalName(), err)
	}
	return nil
}

func (mdcr *MonitorDataCollectionRule) State() (*monitorDataCollectionRuleState, bool) {
	return mdcr.state, mdcr.state != nil
}

func (mdcr *MonitorDataCollectionRule) StateMust() *monitorDataCollectionRuleState {
	if mdcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mdcr.Type(), mdcr.LocalName()))
	}
	return mdcr.state
}

func (mdcr *MonitorDataCollectionRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mdcr)
}

type MonitorDataCollectionRuleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DataFlow: min=1
	DataFlow []monitordatacollectionrule.DataFlow `hcl:"data_flow,block" validate:"min=1"`
	// DataSources: optional
	DataSources *monitordatacollectionrule.DataSources `hcl:"data_sources,block"`
	// Destinations: required
	Destinations *monitordatacollectionrule.Destinations `hcl:"destinations,block" validate:"required"`
	// Timeouts: optional
	Timeouts *monitordatacollectionrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MonitorDataCollectionRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type monitorDataCollectionRuleAttributes struct {
	ref terra.Reference
}

func (mdcr monitorDataCollectionRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("description"))
}

func (mdcr monitorDataCollectionRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("id"))
}

func (mdcr monitorDataCollectionRuleAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("kind"))
}

func (mdcr monitorDataCollectionRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("location"))
}

func (mdcr monitorDataCollectionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("name"))
}

func (mdcr monitorDataCollectionRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mdcr.ref.Append("resource_group_name"))
}

func (mdcr monitorDataCollectionRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mdcr.ref.Append("tags"))
}

func (mdcr monitorDataCollectionRuleAttributes) DataFlow() terra.ListValue[monitordatacollectionrule.DataFlowAttributes] {
	return terra.ReferenceList[monitordatacollectionrule.DataFlowAttributes](mdcr.ref.Append("data_flow"))
}

func (mdcr monitorDataCollectionRuleAttributes) DataSources() terra.ListValue[monitordatacollectionrule.DataSourcesAttributes] {
	return terra.ReferenceList[monitordatacollectionrule.DataSourcesAttributes](mdcr.ref.Append("data_sources"))
}

func (mdcr monitorDataCollectionRuleAttributes) Destinations() terra.ListValue[monitordatacollectionrule.DestinationsAttributes] {
	return terra.ReferenceList[monitordatacollectionrule.DestinationsAttributes](mdcr.ref.Append("destinations"))
}

func (mdcr monitorDataCollectionRuleAttributes) Timeouts() monitordatacollectionrule.TimeoutsAttributes {
	return terra.ReferenceSingle[monitordatacollectionrule.TimeoutsAttributes](mdcr.ref.Append("timeouts"))
}

type monitorDataCollectionRuleState struct {
	Description       string                                        `json:"description"`
	Id                string                                        `json:"id"`
	Kind              string                                        `json:"kind"`
	Location          string                                        `json:"location"`
	Name              string                                        `json:"name"`
	ResourceGroupName string                                        `json:"resource_group_name"`
	Tags              map[string]string                             `json:"tags"`
	DataFlow          []monitordatacollectionrule.DataFlowState     `json:"data_flow"`
	DataSources       []monitordatacollectionrule.DataSourcesState  `json:"data_sources"`
	Destinations      []monitordatacollectionrule.DestinationsState `json:"destinations"`
	Timeouts          *monitordatacollectionrule.TimeoutsState      `json:"timeouts"`
}
