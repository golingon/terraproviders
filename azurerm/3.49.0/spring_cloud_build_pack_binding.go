// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudbuildpackbinding "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudbuildpackbinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudBuildPackBinding(name string, args SpringCloudBuildPackBindingArgs) *SpringCloudBuildPackBinding {
	return &SpringCloudBuildPackBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudBuildPackBinding)(nil)

type SpringCloudBuildPackBinding struct {
	Name  string
	Args  SpringCloudBuildPackBindingArgs
	state *springCloudBuildPackBindingState
}

func (scbpb *SpringCloudBuildPackBinding) Type() string {
	return "azurerm_spring_cloud_build_pack_binding"
}

func (scbpb *SpringCloudBuildPackBinding) LocalName() string {
	return scbpb.Name
}

func (scbpb *SpringCloudBuildPackBinding) Configuration() interface{} {
	return scbpb.Args
}

func (scbpb *SpringCloudBuildPackBinding) Attributes() springCloudBuildPackBindingAttributes {
	return springCloudBuildPackBindingAttributes{ref: terra.ReferenceResource(scbpb)}
}

func (scbpb *SpringCloudBuildPackBinding) ImportState(av io.Reader) error {
	scbpb.state = &springCloudBuildPackBindingState{}
	if err := json.NewDecoder(av).Decode(scbpb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scbpb.Type(), scbpb.LocalName(), err)
	}
	return nil
}

func (scbpb *SpringCloudBuildPackBinding) State() (*springCloudBuildPackBindingState, bool) {
	return scbpb.state, scbpb.state != nil
}

func (scbpb *SpringCloudBuildPackBinding) StateMust() *springCloudBuildPackBindingState {
	if scbpb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scbpb.Type(), scbpb.LocalName()))
	}
	return scbpb.state
}

func (scbpb *SpringCloudBuildPackBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(scbpb)
}

type SpringCloudBuildPackBindingArgs struct {
	// BindingType: string, optional
	BindingType terra.StringValue `hcl:"binding_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudBuilderId: string, required
	SpringCloudBuilderId terra.StringValue `hcl:"spring_cloud_builder_id,attr" validate:"required"`
	// Launch: optional
	Launch *springcloudbuildpackbinding.Launch `hcl:"launch,block"`
	// Timeouts: optional
	Timeouts *springcloudbuildpackbinding.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudBuildPackBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudBuildPackBindingAttributes struct {
	ref terra.Reference
}

func (scbpb springCloudBuildPackBindingAttributes) BindingType() terra.StringValue {
	return terra.ReferenceString(scbpb.ref.Append("binding_type"))
}

func (scbpb springCloudBuildPackBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scbpb.ref.Append("id"))
}

func (scbpb springCloudBuildPackBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scbpb.ref.Append("name"))
}

func (scbpb springCloudBuildPackBindingAttributes) SpringCloudBuilderId() terra.StringValue {
	return terra.ReferenceString(scbpb.ref.Append("spring_cloud_builder_id"))
}

func (scbpb springCloudBuildPackBindingAttributes) Launch() terra.ListValue[springcloudbuildpackbinding.LaunchAttributes] {
	return terra.ReferenceList[springcloudbuildpackbinding.LaunchAttributes](scbpb.ref.Append("launch"))
}

func (scbpb springCloudBuildPackBindingAttributes) Timeouts() springcloudbuildpackbinding.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudbuildpackbinding.TimeoutsAttributes](scbpb.ref.Append("timeouts"))
}

type springCloudBuildPackBindingState struct {
	BindingType          string                                     `json:"binding_type"`
	Id                   string                                     `json:"id"`
	Name                 string                                     `json:"name"`
	SpringCloudBuilderId string                                     `json:"spring_cloud_builder_id"`
	Launch               []springcloudbuildpackbinding.LaunchState  `json:"launch"`
	Timeouts             *springcloudbuildpackbinding.TimeoutsState `json:"timeouts"`
}
