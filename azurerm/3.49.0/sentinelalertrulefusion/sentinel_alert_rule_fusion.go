// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sentinelalertrulefusion

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Source struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubType: min=0
	SubType []SubType `hcl:"sub_type,block" validate:"min=0"`
}

type SubType struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SeveritiesAllowed: set of string, required
	SeveritiesAllowed terra.SetValue[terra.StringValue] `hcl:"severities_allowed,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("enabled"))
}

func (s SourceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("name"))
}

func (s SourceAttributes) SubType() terra.ListValue[SubTypeAttributes] {
	return terra.ReferenceList[SubTypeAttributes](s.ref.Append("sub_type"))
}

type SubTypeAttributes struct {
	ref terra.Reference
}

func (st SubTypeAttributes) InternalRef() terra.Reference {
	return st.ref
}

func (st SubTypeAttributes) InternalWithRef(ref terra.Reference) SubTypeAttributes {
	return SubTypeAttributes{ref: ref}
}

func (st SubTypeAttributes) InternalTokens() hclwrite.Tokens {
	return st.ref.InternalTokens()
}

func (st SubTypeAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("enabled"))
}

func (st SubTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("name"))
}

func (st SubTypeAttributes) SeveritiesAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](st.ref.Append("severities_allowed"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type SourceState struct {
	Enabled bool           `json:"enabled"`
	Name    string         `json:"name"`
	SubType []SubTypeState `json:"sub_type"`
}

type SubTypeState struct {
	Enabled           bool     `json:"enabled"`
	Name              string   `json:"name"`
	SeveritiesAllowed []string `json:"severities_allowed"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
