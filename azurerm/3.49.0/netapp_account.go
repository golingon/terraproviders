// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	netappaccount "github.com/golingon/terraproviders/azurerm/3.49.0/netappaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetappAccount(name string, args NetappAccountArgs) *NetappAccount {
	return &NetappAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappAccount)(nil)

type NetappAccount struct {
	Name  string
	Args  NetappAccountArgs
	state *netappAccountState
}

func (na *NetappAccount) Type() string {
	return "azurerm_netapp_account"
}

func (na *NetappAccount) LocalName() string {
	return na.Name
}

func (na *NetappAccount) Configuration() interface{} {
	return na.Args
}

func (na *NetappAccount) Attributes() netappAccountAttributes {
	return netappAccountAttributes{ref: terra.ReferenceResource(na)}
}

func (na *NetappAccount) ImportState(av io.Reader) error {
	na.state = &netappAccountState{}
	if err := json.NewDecoder(av).Decode(na.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", na.Type(), na.LocalName(), err)
	}
	return nil
}

func (na *NetappAccount) State() (*netappAccountState, bool) {
	return na.state, na.state != nil
}

func (na *NetappAccount) StateMust() *netappAccountState {
	if na.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", na.Type(), na.LocalName()))
	}
	return na.state
}

func (na *NetappAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(na)
}

type NetappAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ActiveDirectory: optional
	ActiveDirectory *netappaccount.ActiveDirectory `hcl:"active_directory,block"`
	// Timeouts: optional
	Timeouts *netappaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetappAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type netappAccountAttributes struct {
	ref terra.Reference
}

func (na netappAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("id"))
}

func (na netappAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("location"))
}

func (na netappAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("name"))
}

func (na netappAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("resource_group_name"))
}

func (na netappAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](na.ref.Append("tags"))
}

func (na netappAccountAttributes) ActiveDirectory() terra.ListValue[netappaccount.ActiveDirectoryAttributes] {
	return terra.ReferenceList[netappaccount.ActiveDirectoryAttributes](na.ref.Append("active_directory"))
}

func (na netappAccountAttributes) Timeouts() netappaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[netappaccount.TimeoutsAttributes](na.ref.Append("timeouts"))
}

type netappAccountState struct {
	Id                string                               `json:"id"`
	Location          string                               `json:"location"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	ActiveDirectory   []netappaccount.ActiveDirectoryState `json:"active_directory"`
	Timeouts          *netappaccount.TimeoutsState         `json:"timeouts"`
}
