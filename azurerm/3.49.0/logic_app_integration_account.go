// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	logicappintegrationaccount "github.com/golingon/terraproviders/azurerm/3.49.0/logicappintegrationaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogicAppIntegrationAccount(name string, args LogicAppIntegrationAccountArgs) *LogicAppIntegrationAccount {
	return &LogicAppIntegrationAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogicAppIntegrationAccount)(nil)

type LogicAppIntegrationAccount struct {
	Name  string
	Args  LogicAppIntegrationAccountArgs
	state *logicAppIntegrationAccountState
}

func (laia *LogicAppIntegrationAccount) Type() string {
	return "azurerm_logic_app_integration_account"
}

func (laia *LogicAppIntegrationAccount) LocalName() string {
	return laia.Name
}

func (laia *LogicAppIntegrationAccount) Configuration() interface{} {
	return laia.Args
}

func (laia *LogicAppIntegrationAccount) Attributes() logicAppIntegrationAccountAttributes {
	return logicAppIntegrationAccountAttributes{ref: terra.ReferenceResource(laia)}
}

func (laia *LogicAppIntegrationAccount) ImportState(av io.Reader) error {
	laia.state = &logicAppIntegrationAccountState{}
	if err := json.NewDecoder(av).Decode(laia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", laia.Type(), laia.LocalName(), err)
	}
	return nil
}

func (laia *LogicAppIntegrationAccount) State() (*logicAppIntegrationAccountState, bool) {
	return laia.state, laia.state != nil
}

func (laia *LogicAppIntegrationAccount) StateMust() *logicAppIntegrationAccountState {
	if laia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", laia.Type(), laia.LocalName()))
	}
	return laia.state
}

func (laia *LogicAppIntegrationAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(laia)
}

type LogicAppIntegrationAccountArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationServiceEnvironmentId: string, optional
	IntegrationServiceEnvironmentId terra.StringValue `hcl:"integration_service_environment_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *logicappintegrationaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogicAppIntegrationAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logicAppIntegrationAccountAttributes struct {
	ref terra.Reference
}

func (laia logicAppIntegrationAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("id"))
}

func (laia logicAppIntegrationAccountAttributes) IntegrationServiceEnvironmentId() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("integration_service_environment_id"))
}

func (laia logicAppIntegrationAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("location"))
}

func (laia logicAppIntegrationAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("name"))
}

func (laia logicAppIntegrationAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("resource_group_name"))
}

func (laia logicAppIntegrationAccountAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(laia.ref.Append("sku_name"))
}

func (laia logicAppIntegrationAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](laia.ref.Append("tags"))
}

func (laia logicAppIntegrationAccountAttributes) Timeouts() logicappintegrationaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[logicappintegrationaccount.TimeoutsAttributes](laia.ref.Append("timeouts"))
}

type logicAppIntegrationAccountState struct {
	Id                              string                                    `json:"id"`
	IntegrationServiceEnvironmentId string                                    `json:"integration_service_environment_id"`
	Location                        string                                    `json:"location"`
	Name                            string                                    `json:"name"`
	ResourceGroupName               string                                    `json:"resource_group_name"`
	SkuName                         string                                    `json:"sku_name"`
	Tags                            map[string]string                         `json:"tags"`
	Timeouts                        *logicappintegrationaccount.TimeoutsState `json:"timeouts"`
}
