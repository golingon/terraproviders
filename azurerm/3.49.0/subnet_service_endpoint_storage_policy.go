// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subnetserviceendpointstoragepolicy "github.com/golingon/terraproviders/azurerm/3.49.0/subnetserviceendpointstoragepolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubnetServiceEndpointStoragePolicy(name string, args SubnetServiceEndpointStoragePolicyArgs) *SubnetServiceEndpointStoragePolicy {
	return &SubnetServiceEndpointStoragePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubnetServiceEndpointStoragePolicy)(nil)

type SubnetServiceEndpointStoragePolicy struct {
	Name  string
	Args  SubnetServiceEndpointStoragePolicyArgs
	state *subnetServiceEndpointStoragePolicyState
}

func (ssesp *SubnetServiceEndpointStoragePolicy) Type() string {
	return "azurerm_subnet_service_endpoint_storage_policy"
}

func (ssesp *SubnetServiceEndpointStoragePolicy) LocalName() string {
	return ssesp.Name
}

func (ssesp *SubnetServiceEndpointStoragePolicy) Configuration() interface{} {
	return ssesp.Args
}

func (ssesp *SubnetServiceEndpointStoragePolicy) Attributes() subnetServiceEndpointStoragePolicyAttributes {
	return subnetServiceEndpointStoragePolicyAttributes{ref: terra.ReferenceResource(ssesp)}
}

func (ssesp *SubnetServiceEndpointStoragePolicy) ImportState(av io.Reader) error {
	ssesp.state = &subnetServiceEndpointStoragePolicyState{}
	if err := json.NewDecoder(av).Decode(ssesp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssesp.Type(), ssesp.LocalName(), err)
	}
	return nil
}

func (ssesp *SubnetServiceEndpointStoragePolicy) State() (*subnetServiceEndpointStoragePolicyState, bool) {
	return ssesp.state, ssesp.state != nil
}

func (ssesp *SubnetServiceEndpointStoragePolicy) StateMust() *subnetServiceEndpointStoragePolicyState {
	if ssesp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssesp.Type(), ssesp.LocalName()))
	}
	return ssesp.state
}

func (ssesp *SubnetServiceEndpointStoragePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ssesp)
}

type SubnetServiceEndpointStoragePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Definition: optional
	Definition *subnetserviceendpointstoragepolicy.Definition `hcl:"definition,block"`
	// Timeouts: optional
	Timeouts *subnetserviceendpointstoragepolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubnetServiceEndpointStoragePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subnetServiceEndpointStoragePolicyAttributes struct {
	ref terra.Reference
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssesp.ref.Append("id"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ssesp.ref.Append("location"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssesp.ref.Append("name"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ssesp.ref.Append("resource_group_name"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssesp.ref.Append("tags"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Definition() terra.ListValue[subnetserviceendpointstoragepolicy.DefinitionAttributes] {
	return terra.ReferenceList[subnetserviceendpointstoragepolicy.DefinitionAttributes](ssesp.ref.Append("definition"))
}

func (ssesp subnetServiceEndpointStoragePolicyAttributes) Timeouts() subnetserviceendpointstoragepolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[subnetserviceendpointstoragepolicy.TimeoutsAttributes](ssesp.ref.Append("timeouts"))
}

type subnetServiceEndpointStoragePolicyState struct {
	Id                string                                               `json:"id"`
	Location          string                                               `json:"location"`
	Name              string                                               `json:"name"`
	ResourceGroupName string                                               `json:"resource_group_name"`
	Tags              map[string]string                                    `json:"tags"`
	Definition        []subnetserviceendpointstoragepolicy.DefinitionState `json:"definition"`
	Timeouts          *subnetserviceendpointstoragepolicy.TimeoutsState    `json:"timeouts"`
}
