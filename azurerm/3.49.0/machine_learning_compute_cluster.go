// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	machinelearningcomputecluster "github.com/golingon/terraproviders/azurerm/3.49.0/machinelearningcomputecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMachineLearningComputeCluster(name string, args MachineLearningComputeClusterArgs) *MachineLearningComputeCluster {
	return &MachineLearningComputeCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MachineLearningComputeCluster)(nil)

type MachineLearningComputeCluster struct {
	Name  string
	Args  MachineLearningComputeClusterArgs
	state *machineLearningComputeClusterState
}

func (mlcc *MachineLearningComputeCluster) Type() string {
	return "azurerm_machine_learning_compute_cluster"
}

func (mlcc *MachineLearningComputeCluster) LocalName() string {
	return mlcc.Name
}

func (mlcc *MachineLearningComputeCluster) Configuration() interface{} {
	return mlcc.Args
}

func (mlcc *MachineLearningComputeCluster) Attributes() machineLearningComputeClusterAttributes {
	return machineLearningComputeClusterAttributes{ref: terra.ReferenceResource(mlcc)}
}

func (mlcc *MachineLearningComputeCluster) ImportState(av io.Reader) error {
	mlcc.state = &machineLearningComputeClusterState{}
	if err := json.NewDecoder(av).Decode(mlcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mlcc.Type(), mlcc.LocalName(), err)
	}
	return nil
}

func (mlcc *MachineLearningComputeCluster) State() (*machineLearningComputeClusterState, bool) {
	return mlcc.state, mlcc.state != nil
}

func (mlcc *MachineLearningComputeCluster) StateMust() *machineLearningComputeClusterState {
	if mlcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mlcc.Type(), mlcc.LocalName()))
	}
	return mlcc.state
}

func (mlcc *MachineLearningComputeCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(mlcc)
}

type MachineLearningComputeClusterArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineLearningWorkspaceId: string, required
	MachineLearningWorkspaceId terra.StringValue `hcl:"machine_learning_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SshPublicAccessEnabled: bool, optional
	SshPublicAccessEnabled terra.BoolValue `hcl:"ssh_public_access_enabled,attr"`
	// SubnetResourceId: string, optional
	SubnetResourceId terra.StringValue `hcl:"subnet_resource_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VmPriority: string, required
	VmPriority terra.StringValue `hcl:"vm_priority,attr" validate:"required"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// Identity: optional
	Identity *machinelearningcomputecluster.Identity `hcl:"identity,block"`
	// ScaleSettings: required
	ScaleSettings *machinelearningcomputecluster.ScaleSettings `hcl:"scale_settings,block" validate:"required"`
	// Ssh: optional
	Ssh *machinelearningcomputecluster.Ssh `hcl:"ssh,block"`
	// Timeouts: optional
	Timeouts *machinelearningcomputecluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MachineLearningComputeCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type machineLearningComputeClusterAttributes struct {
	ref terra.Reference
}

func (mlcc machineLearningComputeClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("description"))
}

func (mlcc machineLearningComputeClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("id"))
}

func (mlcc machineLearningComputeClusterAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(mlcc.ref.Append("local_auth_enabled"))
}

func (mlcc machineLearningComputeClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("location"))
}

func (mlcc machineLearningComputeClusterAttributes) MachineLearningWorkspaceId() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("machine_learning_workspace_id"))
}

func (mlcc machineLearningComputeClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("name"))
}

func (mlcc machineLearningComputeClusterAttributes) SshPublicAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(mlcc.ref.Append("ssh_public_access_enabled"))
}

func (mlcc machineLearningComputeClusterAttributes) SubnetResourceId() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("subnet_resource_id"))
}

func (mlcc machineLearningComputeClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mlcc.ref.Append("tags"))
}

func (mlcc machineLearningComputeClusterAttributes) VmPriority() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("vm_priority"))
}

func (mlcc machineLearningComputeClusterAttributes) VmSize() terra.StringValue {
	return terra.ReferenceString(mlcc.ref.Append("vm_size"))
}

func (mlcc machineLearningComputeClusterAttributes) Identity() terra.ListValue[machinelearningcomputecluster.IdentityAttributes] {
	return terra.ReferenceList[machinelearningcomputecluster.IdentityAttributes](mlcc.ref.Append("identity"))
}

func (mlcc machineLearningComputeClusterAttributes) ScaleSettings() terra.ListValue[machinelearningcomputecluster.ScaleSettingsAttributes] {
	return terra.ReferenceList[machinelearningcomputecluster.ScaleSettingsAttributes](mlcc.ref.Append("scale_settings"))
}

func (mlcc machineLearningComputeClusterAttributes) Ssh() terra.ListValue[machinelearningcomputecluster.SshAttributes] {
	return terra.ReferenceList[machinelearningcomputecluster.SshAttributes](mlcc.ref.Append("ssh"))
}

func (mlcc machineLearningComputeClusterAttributes) Timeouts() machinelearningcomputecluster.TimeoutsAttributes {
	return terra.ReferenceSingle[machinelearningcomputecluster.TimeoutsAttributes](mlcc.ref.Append("timeouts"))
}

type machineLearningComputeClusterState struct {
	Description                string                                             `json:"description"`
	Id                         string                                             `json:"id"`
	LocalAuthEnabled           bool                                               `json:"local_auth_enabled"`
	Location                   string                                             `json:"location"`
	MachineLearningWorkspaceId string                                             `json:"machine_learning_workspace_id"`
	Name                       string                                             `json:"name"`
	SshPublicAccessEnabled     bool                                               `json:"ssh_public_access_enabled"`
	SubnetResourceId           string                                             `json:"subnet_resource_id"`
	Tags                       map[string]string                                  `json:"tags"`
	VmPriority                 string                                             `json:"vm_priority"`
	VmSize                     string                                             `json:"vm_size"`
	Identity                   []machinelearningcomputecluster.IdentityState      `json:"identity"`
	ScaleSettings              []machinelearningcomputecluster.ScaleSettingsState `json:"scale_settings"`
	Ssh                        []machinelearningcomputecluster.SshState           `json:"ssh"`
	Timeouts                   *machinelearningcomputecluster.TimeoutsState       `json:"timeouts"`
}
