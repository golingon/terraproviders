// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	servicebussubscriptionrule "github.com/golingon/terraproviders/azurerm/3.49.0/servicebussubscriptionrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicebusSubscriptionRule(name string, args ServicebusSubscriptionRuleArgs) *ServicebusSubscriptionRule {
	return &ServicebusSubscriptionRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicebusSubscriptionRule)(nil)

type ServicebusSubscriptionRule struct {
	Name  string
	Args  ServicebusSubscriptionRuleArgs
	state *servicebusSubscriptionRuleState
}

func (ssr *ServicebusSubscriptionRule) Type() string {
	return "azurerm_servicebus_subscription_rule"
}

func (ssr *ServicebusSubscriptionRule) LocalName() string {
	return ssr.Name
}

func (ssr *ServicebusSubscriptionRule) Configuration() interface{} {
	return ssr.Args
}

func (ssr *ServicebusSubscriptionRule) Attributes() servicebusSubscriptionRuleAttributes {
	return servicebusSubscriptionRuleAttributes{ref: terra.ReferenceResource(ssr)}
}

func (ssr *ServicebusSubscriptionRule) ImportState(av io.Reader) error {
	ssr.state = &servicebusSubscriptionRuleState{}
	if err := json.NewDecoder(av).Decode(ssr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssr.Type(), ssr.LocalName(), err)
	}
	return nil
}

func (ssr *ServicebusSubscriptionRule) State() (*servicebusSubscriptionRuleState, bool) {
	return ssr.state, ssr.state != nil
}

func (ssr *ServicebusSubscriptionRule) StateMust() *servicebusSubscriptionRuleState {
	if ssr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssr.Type(), ssr.LocalName()))
	}
	return ssr.state
}

func (ssr *ServicebusSubscriptionRule) DependOn() terra.Reference {
	return terra.ReferenceResource(ssr)
}

type ServicebusSubscriptionRuleArgs struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// FilterType: string, required
	FilterType terra.StringValue `hcl:"filter_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlFilter: string, optional
	SqlFilter terra.StringValue `hcl:"sql_filter,attr"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// CorrelationFilter: optional
	CorrelationFilter *servicebussubscriptionrule.CorrelationFilter `hcl:"correlation_filter,block"`
	// Timeouts: optional
	Timeouts *servicebussubscriptionrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicebusSubscriptionRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicebusSubscriptionRuleAttributes struct {
	ref terra.Reference
}

func (ssr servicebusSubscriptionRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("action"))
}

func (ssr servicebusSubscriptionRuleAttributes) FilterType() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("filter_type"))
}

func (ssr servicebusSubscriptionRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("id"))
}

func (ssr servicebusSubscriptionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("name"))
}

func (ssr servicebusSubscriptionRuleAttributes) SqlFilter() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("sql_filter"))
}

func (ssr servicebusSubscriptionRuleAttributes) SqlFilterCompatibilityLevel() terra.NumberValue {
	return terra.ReferenceNumber(ssr.ref.Append("sql_filter_compatibility_level"))
}

func (ssr servicebusSubscriptionRuleAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("subscription_id"))
}

func (ssr servicebusSubscriptionRuleAttributes) CorrelationFilter() terra.ListValue[servicebussubscriptionrule.CorrelationFilterAttributes] {
	return terra.ReferenceList[servicebussubscriptionrule.CorrelationFilterAttributes](ssr.ref.Append("correlation_filter"))
}

func (ssr servicebusSubscriptionRuleAttributes) Timeouts() servicebussubscriptionrule.TimeoutsAttributes {
	return terra.ReferenceSingle[servicebussubscriptionrule.TimeoutsAttributes](ssr.ref.Append("timeouts"))
}

type servicebusSubscriptionRuleState struct {
	Action                      string                                              `json:"action"`
	FilterType                  string                                              `json:"filter_type"`
	Id                          string                                              `json:"id"`
	Name                        string                                              `json:"name"`
	SqlFilter                   string                                              `json:"sql_filter"`
	SqlFilterCompatibilityLevel float64                                             `json:"sql_filter_compatibility_level"`
	SubscriptionId              string                                              `json:"subscription_id"`
	CorrelationFilter           []servicebussubscriptionrule.CorrelationFilterState `json:"correlation_filter"`
	Timeouts                    *servicebussubscriptionrule.TimeoutsState           `json:"timeouts"`
}
