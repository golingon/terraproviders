// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subnetnatgatewayassociation "github.com/golingon/terraproviders/azurerm/3.49.0/subnetnatgatewayassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubnetNatGatewayAssociation(name string, args SubnetNatGatewayAssociationArgs) *SubnetNatGatewayAssociation {
	return &SubnetNatGatewayAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubnetNatGatewayAssociation)(nil)

type SubnetNatGatewayAssociation struct {
	Name  string
	Args  SubnetNatGatewayAssociationArgs
	state *subnetNatGatewayAssociationState
}

func (snga *SubnetNatGatewayAssociation) Type() string {
	return "azurerm_subnet_nat_gateway_association"
}

func (snga *SubnetNatGatewayAssociation) LocalName() string {
	return snga.Name
}

func (snga *SubnetNatGatewayAssociation) Configuration() interface{} {
	return snga.Args
}

func (snga *SubnetNatGatewayAssociation) Attributes() subnetNatGatewayAssociationAttributes {
	return subnetNatGatewayAssociationAttributes{ref: terra.ReferenceResource(snga)}
}

func (snga *SubnetNatGatewayAssociation) ImportState(av io.Reader) error {
	snga.state = &subnetNatGatewayAssociationState{}
	if err := json.NewDecoder(av).Decode(snga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snga.Type(), snga.LocalName(), err)
	}
	return nil
}

func (snga *SubnetNatGatewayAssociation) State() (*subnetNatGatewayAssociationState, bool) {
	return snga.state, snga.state != nil
}

func (snga *SubnetNatGatewayAssociation) StateMust() *subnetNatGatewayAssociationState {
	if snga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snga.Type(), snga.LocalName()))
	}
	return snga.state
}

func (snga *SubnetNatGatewayAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(snga)
}

type SubnetNatGatewayAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NatGatewayId: string, required
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *subnetnatgatewayassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubnetNatGatewayAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subnetNatGatewayAssociationAttributes struct {
	ref terra.Reference
}

func (snga subnetNatGatewayAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snga.ref.Append("id"))
}

func (snga subnetNatGatewayAssociationAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceString(snga.ref.Append("nat_gateway_id"))
}

func (snga subnetNatGatewayAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(snga.ref.Append("subnet_id"))
}

func (snga subnetNatGatewayAssociationAttributes) Timeouts() subnetnatgatewayassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[subnetnatgatewayassociation.TimeoutsAttributes](snga.ref.Append("timeouts"))
}

type subnetNatGatewayAssociationState struct {
	Id           string                                     `json:"id"`
	NatGatewayId string                                     `json:"nat_gateway_id"`
	SubnetId     string                                     `json:"subnet_id"`
	Timeouts     *subnetnatgatewayassociation.TimeoutsState `json:"timeouts"`
}
