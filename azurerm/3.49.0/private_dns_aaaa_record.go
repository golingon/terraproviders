// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsaaaarecord "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsaaaarecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsAaaaRecord(name string, args PrivateDnsAaaaRecordArgs) *PrivateDnsAaaaRecord {
	return &PrivateDnsAaaaRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsAaaaRecord)(nil)

type PrivateDnsAaaaRecord struct {
	Name  string
	Args  PrivateDnsAaaaRecordArgs
	state *privateDnsAaaaRecordState
}

func (pdar *PrivateDnsAaaaRecord) Type() string {
	return "azurerm_private_dns_aaaa_record"
}

func (pdar *PrivateDnsAaaaRecord) LocalName() string {
	return pdar.Name
}

func (pdar *PrivateDnsAaaaRecord) Configuration() interface{} {
	return pdar.Args
}

func (pdar *PrivateDnsAaaaRecord) Attributes() privateDnsAaaaRecordAttributes {
	return privateDnsAaaaRecordAttributes{ref: terra.ReferenceResource(pdar)}
}

func (pdar *PrivateDnsAaaaRecord) ImportState(av io.Reader) error {
	pdar.state = &privateDnsAaaaRecordState{}
	if err := json.NewDecoder(av).Decode(pdar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdar.Type(), pdar.LocalName(), err)
	}
	return nil
}

func (pdar *PrivateDnsAaaaRecord) State() (*privateDnsAaaaRecordState, bool) {
	return pdar.state, pdar.state != nil
}

func (pdar *PrivateDnsAaaaRecord) StateMust() *privateDnsAaaaRecordState {
	if pdar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdar.Type(), pdar.LocalName()))
	}
	return pdar.state
}

func (pdar *PrivateDnsAaaaRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(pdar)
}

type PrivateDnsAaaaRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Records: set of string, required
	Records terra.SetValue[terra.StringValue] `hcl:"records,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *privatednsaaaarecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsAaaaRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsAaaaRecordAttributes struct {
	ref terra.Reference
}

func (pdar privateDnsAaaaRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(pdar.ref.Append("fqdn"))
}

func (pdar privateDnsAaaaRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdar.ref.Append("id"))
}

func (pdar privateDnsAaaaRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdar.ref.Append("name"))
}

func (pdar privateDnsAaaaRecordAttributes) Records() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](pdar.ref.Append("records"))
}

func (pdar privateDnsAaaaRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pdar.ref.Append("resource_group_name"))
}

func (pdar privateDnsAaaaRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdar.ref.Append("tags"))
}

func (pdar privateDnsAaaaRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(pdar.ref.Append("ttl"))
}

func (pdar privateDnsAaaaRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(pdar.ref.Append("zone_name"))
}

func (pdar privateDnsAaaaRecordAttributes) Timeouts() privatednsaaaarecord.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsaaaarecord.TimeoutsAttributes](pdar.ref.Append("timeouts"))
}

type privateDnsAaaaRecordState struct {
	Fqdn              string                              `json:"fqdn"`
	Id                string                              `json:"id"`
	Name              string                              `json:"name"`
	Records           []string                            `json:"records"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Tags              map[string]string                   `json:"tags"`
	Ttl               float64                             `json:"ttl"`
	ZoneName          string                              `json:"zone_name"`
	Timeouts          *privatednsaaaarecord.TimeoutsState `json:"timeouts"`
}
