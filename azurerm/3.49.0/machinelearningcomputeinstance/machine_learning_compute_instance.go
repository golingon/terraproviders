// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package machinelearningcomputeinstance

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AssignToUser struct {
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Ssh struct {
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AssignToUserAttributes struct {
	ref terra.Reference
}

func (atu AssignToUserAttributes) InternalRef() terra.Reference {
	return atu.ref
}

func (atu AssignToUserAttributes) InternalWithRef(ref terra.Reference) AssignToUserAttributes {
	return AssignToUserAttributes{ref: ref}
}

func (atu AssignToUserAttributes) InternalTokens() hclwrite.Tokens {
	return atu.ref.InternalTokens()
}

func (atu AssignToUserAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceString(atu.ref.Append("object_id"))
}

func (atu AssignToUserAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(atu.ref.Append("tenant_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type SshAttributes struct {
	ref terra.Reference
}

func (s SshAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SshAttributes) InternalWithRef(ref terra.Reference) SshAttributes {
	return SshAttributes{ref: ref}
}

func (s SshAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SshAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("port"))
}

func (s SshAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("public_key"))
}

func (s SshAttributes) Username() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type AssignToUserState struct {
	ObjectId string `json:"object_id"`
	TenantId string `json:"tenant_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type SshState struct {
	Port      float64 `json:"port"`
	PublicKey string  `json:"public_key"`
	Username  string  `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
