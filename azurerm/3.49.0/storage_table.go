// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagetable "github.com/golingon/terraproviders/azurerm/3.49.0/storagetable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageTable(name string, args StorageTableArgs) *StorageTable {
	return &StorageTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageTable)(nil)

type StorageTable struct {
	Name  string
	Args  StorageTableArgs
	state *storageTableState
}

func (st *StorageTable) Type() string {
	return "azurerm_storage_table"
}

func (st *StorageTable) LocalName() string {
	return st.Name
}

func (st *StorageTable) Configuration() interface{} {
	return st.Args
}

func (st *StorageTable) Attributes() storageTableAttributes {
	return storageTableAttributes{ref: terra.ReferenceResource(st)}
}

func (st *StorageTable) ImportState(av io.Reader) error {
	st.state = &storageTableState{}
	if err := json.NewDecoder(av).Decode(st.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", st.Type(), st.LocalName(), err)
	}
	return nil
}

func (st *StorageTable) State() (*storageTableState, bool) {
	return st.state, st.state != nil
}

func (st *StorageTable) StateMust() *storageTableState {
	if st.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", st.Type(), st.LocalName()))
	}
	return st.state
}

func (st *StorageTable) DependOn() terra.Reference {
	return terra.ReferenceResource(st)
}

type StorageTableArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Acl: min=0
	Acl []storagetable.Acl `hcl:"acl,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *storagetable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageTableAttributes struct {
	ref terra.Reference
}

func (st storageTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("id"))
}

func (st storageTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("name"))
}

func (st storageTableAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("storage_account_name"))
}

func (st storageTableAttributes) Acl() terra.SetValue[storagetable.AclAttributes] {
	return terra.ReferenceSet[storagetable.AclAttributes](st.ref.Append("acl"))
}

func (st storageTableAttributes) Timeouts() storagetable.TimeoutsAttributes {
	return terra.ReferenceSingle[storagetable.TimeoutsAttributes](st.ref.Append("timeouts"))
}

type storageTableState struct {
	Id                 string                      `json:"id"`
	Name               string                      `json:"name"`
	StorageAccountName string                      `json:"storage_account_name"`
	Acl                []storagetable.AclState     `json:"acl"`
	Timeouts           *storagetable.TimeoutsState `json:"timeouts"`
}
