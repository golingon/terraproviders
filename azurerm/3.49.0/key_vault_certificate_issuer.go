// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	keyvaultcertificateissuer "github.com/golingon/terraproviders/azurerm/3.49.0/keyvaultcertificateissuer"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKeyVaultCertificateIssuer(name string, args KeyVaultCertificateIssuerArgs) *KeyVaultCertificateIssuer {
	return &KeyVaultCertificateIssuer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultCertificateIssuer)(nil)

type KeyVaultCertificateIssuer struct {
	Name  string
	Args  KeyVaultCertificateIssuerArgs
	state *keyVaultCertificateIssuerState
}

func (kvci *KeyVaultCertificateIssuer) Type() string {
	return "azurerm_key_vault_certificate_issuer"
}

func (kvci *KeyVaultCertificateIssuer) LocalName() string {
	return kvci.Name
}

func (kvci *KeyVaultCertificateIssuer) Configuration() interface{} {
	return kvci.Args
}

func (kvci *KeyVaultCertificateIssuer) Attributes() keyVaultCertificateIssuerAttributes {
	return keyVaultCertificateIssuerAttributes{ref: terra.ReferenceResource(kvci)}
}

func (kvci *KeyVaultCertificateIssuer) ImportState(av io.Reader) error {
	kvci.state = &keyVaultCertificateIssuerState{}
	if err := json.NewDecoder(av).Decode(kvci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvci.Type(), kvci.LocalName(), err)
	}
	return nil
}

func (kvci *KeyVaultCertificateIssuer) State() (*keyVaultCertificateIssuerState, bool) {
	return kvci.state, kvci.state != nil
}

func (kvci *KeyVaultCertificateIssuer) StateMust() *keyVaultCertificateIssuerState {
	if kvci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvci.Type(), kvci.LocalName()))
	}
	return kvci.state
}

func (kvci *KeyVaultCertificateIssuer) DependOn() terra.Reference {
	return terra.ReferenceResource(kvci)
}

type KeyVaultCertificateIssuerArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, optional
	OrgId terra.StringValue `hcl:"org_id,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// Admin: min=0
	Admin []keyvaultcertificateissuer.Admin `hcl:"admin,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *keyvaultcertificateissuer.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KeyVaultCertificateIssuer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type keyVaultCertificateIssuerAttributes struct {
	ref terra.Reference
}

func (kvci keyVaultCertificateIssuerAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("account_id"))
}

func (kvci keyVaultCertificateIssuerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("id"))
}

func (kvci keyVaultCertificateIssuerAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("key_vault_id"))
}

func (kvci keyVaultCertificateIssuerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("name"))
}

func (kvci keyVaultCertificateIssuerAttributes) OrgId() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("org_id"))
}

func (kvci keyVaultCertificateIssuerAttributes) Password() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("password"))
}

func (kvci keyVaultCertificateIssuerAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceString(kvci.ref.Append("provider_name"))
}

func (kvci keyVaultCertificateIssuerAttributes) Admin() terra.ListValue[keyvaultcertificateissuer.AdminAttributes] {
	return terra.ReferenceList[keyvaultcertificateissuer.AdminAttributes](kvci.ref.Append("admin"))
}

func (kvci keyVaultCertificateIssuerAttributes) Timeouts() keyvaultcertificateissuer.TimeoutsAttributes {
	return terra.ReferenceSingle[keyvaultcertificateissuer.TimeoutsAttributes](kvci.ref.Append("timeouts"))
}

type keyVaultCertificateIssuerState struct {
	AccountId    string                                   `json:"account_id"`
	Id           string                                   `json:"id"`
	KeyVaultId   string                                   `json:"key_vault_id"`
	Name         string                                   `json:"name"`
	OrgId        string                                   `json:"org_id"`
	Password     string                                   `json:"password"`
	ProviderName string                                   `json:"provider_name"`
	Admin        []keyvaultcertificateissuer.AdminState   `json:"admin"`
	Timeouts     *keyvaultcertificateissuer.TimeoutsState `json:"timeouts"`
}
