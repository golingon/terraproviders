// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package webpubsubhub

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EventHandler struct {
	// SystemEvents: set of string, optional
	SystemEvents terra.SetValue[terra.StringValue] `hcl:"system_events,attr"`
	// UrlTemplate: string, required
	UrlTemplate terra.StringValue `hcl:"url_template,attr" validate:"required"`
	// UserEventPattern: string, optional
	UserEventPattern terra.StringValue `hcl:"user_event_pattern,attr"`
	// Auth: optional
	Auth *Auth `hcl:"auth,block"`
}

type Auth struct {
	// ManagedIdentityId: string, required
	ManagedIdentityId terra.StringValue `hcl:"managed_identity_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EventHandlerAttributes struct {
	ref terra.Reference
}

func (eh EventHandlerAttributes) InternalRef() (terra.Reference, error) {
	return eh.ref, nil
}

func (eh EventHandlerAttributes) InternalWithRef(ref terra.Reference) EventHandlerAttributes {
	return EventHandlerAttributes{ref: ref}
}

func (eh EventHandlerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eh.ref.InternalTokens()
}

func (eh EventHandlerAttributes) SystemEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](eh.ref.Append("system_events"))
}

func (eh EventHandlerAttributes) UrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(eh.ref.Append("url_template"))
}

func (eh EventHandlerAttributes) UserEventPattern() terra.StringValue {
	return terra.ReferenceAsString(eh.ref.Append("user_event_pattern"))
}

func (eh EventHandlerAttributes) Auth() terra.ListValue[AuthAttributes] {
	return terra.ReferenceAsList[AuthAttributes](eh.ref.Append("auth"))
}

type AuthAttributes struct {
	ref terra.Reference
}

func (a AuthAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthAttributes) InternalWithRef(ref terra.Reference) AuthAttributes {
	return AuthAttributes{ref: ref}
}

func (a AuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthAttributes) ManagedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("managed_identity_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EventHandlerState struct {
	SystemEvents     []string    `json:"system_events"`
	UrlTemplate      string      `json:"url_template"`
	UserEventPattern string      `json:"user_event_pattern"`
	Auth             []AuthState `json:"auth"`
}

type AuthState struct {
	ManagedIdentityId string `json:"managed_identity_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
