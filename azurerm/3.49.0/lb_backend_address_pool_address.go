// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lbbackendaddresspooladdress "github.com/golingon/terraproviders/azurerm/3.49.0/lbbackendaddresspooladdress"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbBackendAddressPoolAddress(name string, args LbBackendAddressPoolAddressArgs) *LbBackendAddressPoolAddress {
	return &LbBackendAddressPoolAddress{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbBackendAddressPoolAddress)(nil)

type LbBackendAddressPoolAddress struct {
	Name  string
	Args  LbBackendAddressPoolAddressArgs
	state *lbBackendAddressPoolAddressState
}

func (lbapa *LbBackendAddressPoolAddress) Type() string {
	return "azurerm_lb_backend_address_pool_address"
}

func (lbapa *LbBackendAddressPoolAddress) LocalName() string {
	return lbapa.Name
}

func (lbapa *LbBackendAddressPoolAddress) Configuration() interface{} {
	return lbapa.Args
}

func (lbapa *LbBackendAddressPoolAddress) Attributes() lbBackendAddressPoolAddressAttributes {
	return lbBackendAddressPoolAddressAttributes{ref: terra.ReferenceResource(lbapa)}
}

func (lbapa *LbBackendAddressPoolAddress) ImportState(av io.Reader) error {
	lbapa.state = &lbBackendAddressPoolAddressState{}
	if err := json.NewDecoder(av).Decode(lbapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lbapa.Type(), lbapa.LocalName(), err)
	}
	return nil
}

func (lbapa *LbBackendAddressPoolAddress) State() (*lbBackendAddressPoolAddressState, bool) {
	return lbapa.state, lbapa.state != nil
}

func (lbapa *LbBackendAddressPoolAddress) StateMust() *lbBackendAddressPoolAddressState {
	if lbapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lbapa.Type(), lbapa.LocalName()))
	}
	return lbapa.state
}

func (lbapa *LbBackendAddressPoolAddress) DependOn() terra.Reference {
	return terra.ReferenceResource(lbapa)
}

type LbBackendAddressPoolAddressArgs struct {
	// BackendAddressIpConfigurationId: string, optional
	BackendAddressIpConfigurationId terra.StringValue `hcl:"backend_address_ip_configuration_id,attr"`
	// BackendAddressPoolId: string, required
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// InboundNatRulePortMapping: min=0
	InboundNatRulePortMapping []lbbackendaddresspooladdress.InboundNatRulePortMapping `hcl:"inbound_nat_rule_port_mapping,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *lbbackendaddresspooladdress.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LbBackendAddressPoolAddress depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbBackendAddressPoolAddressAttributes struct {
	ref terra.Reference
}

func (lbapa lbBackendAddressPoolAddressAttributes) BackendAddressIpConfigurationId() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("backend_address_ip_configuration_id"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("backend_address_pool_id"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("id"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("ip_address"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("name"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(lbapa.ref.Append("virtual_network_id"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) InboundNatRulePortMapping() terra.ListValue[lbbackendaddresspooladdress.InboundNatRulePortMappingAttributes] {
	return terra.ReferenceList[lbbackendaddresspooladdress.InboundNatRulePortMappingAttributes](lbapa.ref.Append("inbound_nat_rule_port_mapping"))
}

func (lbapa lbBackendAddressPoolAddressAttributes) Timeouts() lbbackendaddresspooladdress.TimeoutsAttributes {
	return terra.ReferenceSingle[lbbackendaddresspooladdress.TimeoutsAttributes](lbapa.ref.Append("timeouts"))
}

type lbBackendAddressPoolAddressState struct {
	BackendAddressIpConfigurationId string                                                       `json:"backend_address_ip_configuration_id"`
	BackendAddressPoolId            string                                                       `json:"backend_address_pool_id"`
	Id                              string                                                       `json:"id"`
	IpAddress                       string                                                       `json:"ip_address"`
	Name                            string                                                       `json:"name"`
	VirtualNetworkId                string                                                       `json:"virtual_network_id"`
	InboundNatRulePortMapping       []lbbackendaddresspooladdress.InboundNatRulePortMappingState `json:"inbound_nat_rule_port_mapping"`
	Timeouts                        *lbbackendaddresspooladdress.TimeoutsState                   `json:"timeouts"`
}
