// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitorscheduledqueryrulesalertv2

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Action struct {
	// ActionGroups: list of string, optional
	ActionGroups terra.ListValue[terra.StringValue] `hcl:"action_groups,attr"`
	// CustomProperties: map of string, optional
	CustomProperties terra.MapValue[terra.StringValue] `hcl:"custom_properties,attr"`
}

type Criteria struct {
	// MetricMeasureColumn: string, optional
	MetricMeasureColumn terra.StringValue `hcl:"metric_measure_column,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// ResourceIdColumn: string, optional
	ResourceIdColumn terra.StringValue `hcl:"resource_id_column,attr"`
	// Threshold: number, required
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// TimeAggregationMethod: string, required
	TimeAggregationMethod terra.StringValue `hcl:"time_aggregation_method,attr" validate:"required"`
	// Dimension: min=0
	Dimension []Dimension `hcl:"dimension,block" validate:"min=0"`
	// FailingPeriods: optional
	FailingPeriods *FailingPeriods `hcl:"failing_periods,block"`
}

type Dimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type FailingPeriods struct {
	// MinimumFailingPeriodsToTriggerAlert: number, required
	MinimumFailingPeriodsToTriggerAlert terra.NumberValue `hcl:"minimum_failing_periods_to_trigger_alert,attr" validate:"required"`
	// NumberOfEvaluationPeriods: number, required
	NumberOfEvaluationPeriods terra.NumberValue `hcl:"number_of_evaluation_periods,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](a.ref.Append("action_groups"))
}

func (a ActionAttributes) CustomProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](a.ref.Append("custom_properties"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) MetricMeasureColumn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("metric_measure_column"))
}

func (c CriteriaAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("operator"))
}

func (c CriteriaAttributes) Query() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("query"))
}

func (c CriteriaAttributes) ResourceIdColumn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("resource_id_column"))
}

func (c CriteriaAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceNumber(c.ref.Append("threshold"))
}

func (c CriteriaAttributes) TimeAggregationMethod() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("time_aggregation_method"))
}

func (c CriteriaAttributes) Dimension() terra.ListValue[DimensionAttributes] {
	return terra.ReferenceList[DimensionAttributes](c.ref.Append("dimension"))
}

func (c CriteriaAttributes) FailingPeriods() terra.ListValue[FailingPeriodsAttributes] {
	return terra.ReferenceList[FailingPeriodsAttributes](c.ref.Append("failing_periods"))
}

type DimensionAttributes struct {
	ref terra.Reference
}

func (d DimensionAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DimensionAttributes) InternalWithRef(ref terra.Reference) DimensionAttributes {
	return DimensionAttributes{ref: ref}
}

func (d DimensionAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("name"))
}

func (d DimensionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("operator"))
}

func (d DimensionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](d.ref.Append("values"))
}

type FailingPeriodsAttributes struct {
	ref terra.Reference
}

func (fp FailingPeriodsAttributes) InternalRef() terra.Reference {
	return fp.ref
}

func (fp FailingPeriodsAttributes) InternalWithRef(ref terra.Reference) FailingPeriodsAttributes {
	return FailingPeriodsAttributes{ref: ref}
}

func (fp FailingPeriodsAttributes) InternalTokens() hclwrite.Tokens {
	return fp.ref.InternalTokens()
}

func (fp FailingPeriodsAttributes) MinimumFailingPeriodsToTriggerAlert() terra.NumberValue {
	return terra.ReferenceNumber(fp.ref.Append("minimum_failing_periods_to_trigger_alert"))
}

func (fp FailingPeriodsAttributes) NumberOfEvaluationPeriods() terra.NumberValue {
	return terra.ReferenceNumber(fp.ref.Append("number_of_evaluation_periods"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ActionState struct {
	ActionGroups     []string          `json:"action_groups"`
	CustomProperties map[string]string `json:"custom_properties"`
}

type CriteriaState struct {
	MetricMeasureColumn   string                `json:"metric_measure_column"`
	Operator              string                `json:"operator"`
	Query                 string                `json:"query"`
	ResourceIdColumn      string                `json:"resource_id_column"`
	Threshold             float64               `json:"threshold"`
	TimeAggregationMethod string                `json:"time_aggregation_method"`
	Dimension             []DimensionState      `json:"dimension"`
	FailingPeriods        []FailingPeriodsState `json:"failing_periods"`
}

type DimensionState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type FailingPeriodsState struct {
	MinimumFailingPeriodsToTriggerAlert float64 `json:"minimum_failing_periods_to_trigger_alert"`
	NumberOfEvaluationPeriods           float64 `json:"number_of_evaluation_periods"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
