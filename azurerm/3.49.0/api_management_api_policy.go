// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapipolicy "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapipolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApiPolicy(name string, args ApiManagementApiPolicyArgs) *ApiManagementApiPolicy {
	return &ApiManagementApiPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApiPolicy)(nil)

type ApiManagementApiPolicy struct {
	Name  string
	Args  ApiManagementApiPolicyArgs
	state *apiManagementApiPolicyState
}

func (amap *ApiManagementApiPolicy) Type() string {
	return "azurerm_api_management_api_policy"
}

func (amap *ApiManagementApiPolicy) LocalName() string {
	return amap.Name
}

func (amap *ApiManagementApiPolicy) Configuration() interface{} {
	return amap.Args
}

func (amap *ApiManagementApiPolicy) Attributes() apiManagementApiPolicyAttributes {
	return apiManagementApiPolicyAttributes{ref: terra.ReferenceResource(amap)}
}

func (amap *ApiManagementApiPolicy) ImportState(av io.Reader) error {
	amap.state = &apiManagementApiPolicyState{}
	if err := json.NewDecoder(av).Decode(amap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amap.Type(), amap.LocalName(), err)
	}
	return nil
}

func (amap *ApiManagementApiPolicy) State() (*apiManagementApiPolicyState, bool) {
	return amap.state, amap.state != nil
}

func (amap *ApiManagementApiPolicy) StateMust() *apiManagementApiPolicyState {
	if amap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amap.Type(), amap.LocalName()))
	}
	return amap.state
}

func (amap *ApiManagementApiPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(amap)
}

type ApiManagementApiPolicyArgs struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ApiName: string, required
	ApiName terra.StringValue `hcl:"api_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// XmlContent: string, optional
	XmlContent terra.StringValue `hcl:"xml_content,attr"`
	// XmlLink: string, optional
	XmlLink terra.StringValue `hcl:"xml_link,attr"`
	// Timeouts: optional
	Timeouts *apimanagementapipolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApiPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiPolicyAttributes struct {
	ref terra.Reference
}

func (amap apiManagementApiPolicyAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("api_management_name"))
}

func (amap apiManagementApiPolicyAttributes) ApiName() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("api_name"))
}

func (amap apiManagementApiPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("id"))
}

func (amap apiManagementApiPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("resource_group_name"))
}

func (amap apiManagementApiPolicyAttributes) XmlContent() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("xml_content"))
}

func (amap apiManagementApiPolicyAttributes) XmlLink() terra.StringValue {
	return terra.ReferenceString(amap.ref.Append("xml_link"))
}

func (amap apiManagementApiPolicyAttributes) Timeouts() apimanagementapipolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapipolicy.TimeoutsAttributes](amap.ref.Append("timeouts"))
}

type apiManagementApiPolicyState struct {
	ApiManagementName string                                `json:"api_management_name"`
	ApiName           string                                `json:"api_name"`
	Id                string                                `json:"id"`
	ResourceGroupName string                                `json:"resource_group_name"`
	XmlContent        string                                `json:"xml_content"`
	XmlLink           string                                `json:"xml_link"`
	Timeouts          *apimanagementapipolicy.TimeoutsState `json:"timeouts"`
}
