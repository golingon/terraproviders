// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventhubconsumergroup "github.com/golingon/terraproviders/azurerm/3.49.0/eventhubconsumergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventhubConsumerGroup(name string, args EventhubConsumerGroupArgs) *EventhubConsumerGroup {
	return &EventhubConsumerGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubConsumerGroup)(nil)

type EventhubConsumerGroup struct {
	Name  string
	Args  EventhubConsumerGroupArgs
	state *eventhubConsumerGroupState
}

func (ecg *EventhubConsumerGroup) Type() string {
	return "azurerm_eventhub_consumer_group"
}

func (ecg *EventhubConsumerGroup) LocalName() string {
	return ecg.Name
}

func (ecg *EventhubConsumerGroup) Configuration() interface{} {
	return ecg.Args
}

func (ecg *EventhubConsumerGroup) Attributes() eventhubConsumerGroupAttributes {
	return eventhubConsumerGroupAttributes{ref: terra.ReferenceResource(ecg)}
}

func (ecg *EventhubConsumerGroup) ImportState(av io.Reader) error {
	ecg.state = &eventhubConsumerGroupState{}
	if err := json.NewDecoder(av).Decode(ecg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ecg.Type(), ecg.LocalName(), err)
	}
	return nil
}

func (ecg *EventhubConsumerGroup) State() (*eventhubConsumerGroupState, bool) {
	return ecg.state, ecg.state != nil
}

func (ecg *EventhubConsumerGroup) StateMust() *eventhubConsumerGroupState {
	if ecg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ecg.Type(), ecg.LocalName()))
	}
	return ecg.state
}

func (ecg *EventhubConsumerGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ecg)
}

type EventhubConsumerGroupArgs struct {
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// UserMetadata: string, optional
	UserMetadata terra.StringValue `hcl:"user_metadata,attr"`
	// Timeouts: optional
	Timeouts *eventhubconsumergroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventhubConsumerGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventhubConsumerGroupAttributes struct {
	ref terra.Reference
}

func (ecg eventhubConsumerGroupAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("eventhub_name"))
}

func (ecg eventhubConsumerGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("id"))
}

func (ecg eventhubConsumerGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("name"))
}

func (ecg eventhubConsumerGroupAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("namespace_name"))
}

func (ecg eventhubConsumerGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("resource_group_name"))
}

func (ecg eventhubConsumerGroupAttributes) UserMetadata() terra.StringValue {
	return terra.ReferenceString(ecg.ref.Append("user_metadata"))
}

func (ecg eventhubConsumerGroupAttributes) Timeouts() eventhubconsumergroup.TimeoutsAttributes {
	return terra.ReferenceSingle[eventhubconsumergroup.TimeoutsAttributes](ecg.ref.Append("timeouts"))
}

type eventhubConsumerGroupState struct {
	EventhubName      string                               `json:"eventhub_name"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	NamespaceName     string                               `json:"namespace_name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	UserMetadata      string                               `json:"user_metadata"`
	Timeouts          *eventhubconsumergroup.TimeoutsState `json:"timeouts"`
}
