// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datahealthcarefhirservice

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Authentication struct{}

type Cors struct{}

type Identity struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) Audience() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("audience"))
}

func (a AuthenticationAttributes) Authority() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("authority"))
}

func (a AuthenticationAttributes) SmartProxyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("smart_proxy_enabled"))
}

type CorsAttributes struct {
	ref terra.Reference
}

func (c CorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CorsAttributes) InternalWithRef(ref terra.Reference) CorsAttributes {
	return CorsAttributes{ref: ref}
}

func (c CorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CorsAttributes) AllowedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("allowed_headers"))
}

func (c CorsAttributes) AllowedMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("allowed_methods"))
}

func (c CorsAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c CorsAttributes) CredentialsAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("credentials_allowed"))
}

func (c CorsAttributes) MaxAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("max_age_in_seconds"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AuthenticationState struct {
	Audience          string `json:"audience"`
	Authority         string `json:"authority"`
	SmartProxyEnabled bool   `json:"smart_proxy_enabled"`
}

type CorsState struct {
	AllowedHeaders     []string `json:"allowed_headers"`
	AllowedMethods     []string `json:"allowed_methods"`
	AllowedOrigins     []string `json:"allowed_origins"`
	CredentialsAllowed bool     `json:"credentials_allowed"`
	MaxAgeInSeconds    float64  `json:"max_age_in_seconds"`
}

type IdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
