// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datamonitorscheduledqueryruleslog

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Criteria struct {
	// Dimension: min=0
	Dimension []Dimension `hcl:"dimension,block" validate:"min=0"`
}

type Dimension struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("metric_name"))
}

func (c CriteriaAttributes) Dimension() terra.SetValue[DimensionAttributes] {
	return terra.ReferenceSet[DimensionAttributes](c.ref.Append("dimension"))
}

type DimensionAttributes struct {
	ref terra.Reference
}

func (d DimensionAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DimensionAttributes) InternalWithRef(ref terra.Reference) DimensionAttributes {
	return DimensionAttributes{ref: ref}
}

func (d DimensionAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("name"))
}

func (d DimensionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("operator"))
}

func (d DimensionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](d.ref.Append("values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type CriteriaState struct {
	MetricName string           `json:"metric_name"`
	Dimension  []DimensionState `json:"dimension"`
}

type DimensionState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
