// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	backupprotectedfileshare "github.com/golingon/terraproviders/azurerm/3.49.0/backupprotectedfileshare"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupProtectedFileShare(name string, args BackupProtectedFileShareArgs) *BackupProtectedFileShare {
	return &BackupProtectedFileShare{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupProtectedFileShare)(nil)

type BackupProtectedFileShare struct {
	Name  string
	Args  BackupProtectedFileShareArgs
	state *backupProtectedFileShareState
}

func (bpfs *BackupProtectedFileShare) Type() string {
	return "azurerm_backup_protected_file_share"
}

func (bpfs *BackupProtectedFileShare) LocalName() string {
	return bpfs.Name
}

func (bpfs *BackupProtectedFileShare) Configuration() interface{} {
	return bpfs.Args
}

func (bpfs *BackupProtectedFileShare) Attributes() backupProtectedFileShareAttributes {
	return backupProtectedFileShareAttributes{ref: terra.ReferenceResource(bpfs)}
}

func (bpfs *BackupProtectedFileShare) ImportState(av io.Reader) error {
	bpfs.state = &backupProtectedFileShareState{}
	if err := json.NewDecoder(av).Decode(bpfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bpfs.Type(), bpfs.LocalName(), err)
	}
	return nil
}

func (bpfs *BackupProtectedFileShare) State() (*backupProtectedFileShareState, bool) {
	return bpfs.state, bpfs.state != nil
}

func (bpfs *BackupProtectedFileShare) StateMust() *backupProtectedFileShareState {
	if bpfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bpfs.Type(), bpfs.LocalName()))
	}
	return bpfs.state
}

func (bpfs *BackupProtectedFileShare) DependOn() terra.Reference {
	return terra.ReferenceResource(bpfs)
}

type BackupProtectedFileShareArgs struct {
	// BackupPolicyId: string, required
	BackupPolicyId terra.StringValue `hcl:"backup_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceFileShareName: string, required
	SourceFileShareName terra.StringValue `hcl:"source_file_share_name,attr" validate:"required"`
	// SourceStorageAccountId: string, required
	SourceStorageAccountId terra.StringValue `hcl:"source_storage_account_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *backupprotectedfileshare.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BackupProtectedFileShare depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupProtectedFileShareAttributes struct {
	ref terra.Reference
}

func (bpfs backupProtectedFileShareAttributes) BackupPolicyId() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("backup_policy_id"))
}

func (bpfs backupProtectedFileShareAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("id"))
}

func (bpfs backupProtectedFileShareAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("recovery_vault_name"))
}

func (bpfs backupProtectedFileShareAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("resource_group_name"))
}

func (bpfs backupProtectedFileShareAttributes) SourceFileShareName() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("source_file_share_name"))
}

func (bpfs backupProtectedFileShareAttributes) SourceStorageAccountId() terra.StringValue {
	return terra.ReferenceString(bpfs.ref.Append("source_storage_account_id"))
}

func (bpfs backupProtectedFileShareAttributes) Timeouts() backupprotectedfileshare.TimeoutsAttributes {
	return terra.ReferenceSingle[backupprotectedfileshare.TimeoutsAttributes](bpfs.ref.Append("timeouts"))
}

type backupProtectedFileShareState struct {
	BackupPolicyId         string                                  `json:"backup_policy_id"`
	Id                     string                                  `json:"id"`
	RecoveryVaultName      string                                  `json:"recovery_vault_name"`
	ResourceGroupName      string                                  `json:"resource_group_name"`
	SourceFileShareName    string                                  `json:"source_file_share_name"`
	SourceStorageAccountId string                                  `json:"source_storage_account_id"`
	Timeouts               *backupprotectedfileshare.TimeoutsState `json:"timeouts"`
}
