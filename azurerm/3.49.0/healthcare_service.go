// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	healthcareservice "github.com/golingon/terraproviders/azurerm/3.49.0/healthcareservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewHealthcareService(name string, args HealthcareServiceArgs) *HealthcareService {
	return &HealthcareService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HealthcareService)(nil)

type HealthcareService struct {
	Name  string
	Args  HealthcareServiceArgs
	state *healthcareServiceState
}

func (hs *HealthcareService) Type() string {
	return "azurerm_healthcare_service"
}

func (hs *HealthcareService) LocalName() string {
	return hs.Name
}

func (hs *HealthcareService) Configuration() interface{} {
	return hs.Args
}

func (hs *HealthcareService) Attributes() healthcareServiceAttributes {
	return healthcareServiceAttributes{ref: terra.ReferenceResource(hs)}
}

func (hs *HealthcareService) ImportState(av io.Reader) error {
	hs.state = &healthcareServiceState{}
	if err := json.NewDecoder(av).Decode(hs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hs.Type(), hs.LocalName(), err)
	}
	return nil
}

func (hs *HealthcareService) State() (*healthcareServiceState, bool) {
	return hs.state, hs.state != nil
}

func (hs *HealthcareService) StateMust() *healthcareServiceState {
	if hs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hs.Type(), hs.LocalName()))
	}
	return hs.state
}

func (hs *HealthcareService) DependOn() terra.Reference {
	return terra.ReferenceResource(hs)
}

type HealthcareServiceArgs struct {
	// AccessPolicyObjectIds: set of string, optional
	AccessPolicyObjectIds terra.SetValue[terra.StringValue] `hcl:"access_policy_object_ids,attr"`
	// CosmosdbKeyVaultKeyVersionlessId: string, optional
	CosmosdbKeyVaultKeyVersionlessId terra.StringValue `hcl:"cosmosdb_key_vault_key_versionless_id,attr"`
	// CosmosdbThroughput: number, optional
	CosmosdbThroughput terra.NumberValue `hcl:"cosmosdb_throughput,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AuthenticationConfiguration: optional
	AuthenticationConfiguration *healthcareservice.AuthenticationConfiguration `hcl:"authentication_configuration,block"`
	// CorsConfiguration: optional
	CorsConfiguration *healthcareservice.CorsConfiguration `hcl:"cors_configuration,block"`
	// Timeouts: optional
	Timeouts *healthcareservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that HealthcareService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type healthcareServiceAttributes struct {
	ref terra.Reference
}

func (hs healthcareServiceAttributes) AccessPolicyObjectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](hs.ref.Append("access_policy_object_ids"))
}

func (hs healthcareServiceAttributes) CosmosdbKeyVaultKeyVersionlessId() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("cosmosdb_key_vault_key_versionless_id"))
}

func (hs healthcareServiceAttributes) CosmosdbThroughput() terra.NumberValue {
	return terra.ReferenceNumber(hs.ref.Append("cosmosdb_throughput"))
}

func (hs healthcareServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("id"))
}

func (hs healthcareServiceAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("kind"))
}

func (hs healthcareServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("location"))
}

func (hs healthcareServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("name"))
}

func (hs healthcareServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(hs.ref.Append("public_network_access_enabled"))
}

func (hs healthcareServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(hs.ref.Append("resource_group_name"))
}

func (hs healthcareServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](hs.ref.Append("tags"))
}

func (hs healthcareServiceAttributes) AuthenticationConfiguration() terra.ListValue[healthcareservice.AuthenticationConfigurationAttributes] {
	return terra.ReferenceList[healthcareservice.AuthenticationConfigurationAttributes](hs.ref.Append("authentication_configuration"))
}

func (hs healthcareServiceAttributes) CorsConfiguration() terra.ListValue[healthcareservice.CorsConfigurationAttributes] {
	return terra.ReferenceList[healthcareservice.CorsConfigurationAttributes](hs.ref.Append("cors_configuration"))
}

func (hs healthcareServiceAttributes) Timeouts() healthcareservice.TimeoutsAttributes {
	return terra.ReferenceSingle[healthcareservice.TimeoutsAttributes](hs.ref.Append("timeouts"))
}

type healthcareServiceState struct {
	AccessPolicyObjectIds            []string                                             `json:"access_policy_object_ids"`
	CosmosdbKeyVaultKeyVersionlessId string                                               `json:"cosmosdb_key_vault_key_versionless_id"`
	CosmosdbThroughput               float64                                              `json:"cosmosdb_throughput"`
	Id                               string                                               `json:"id"`
	Kind                             string                                               `json:"kind"`
	Location                         string                                               `json:"location"`
	Name                             string                                               `json:"name"`
	PublicNetworkAccessEnabled       bool                                                 `json:"public_network_access_enabled"`
	ResourceGroupName                string                                               `json:"resource_group_name"`
	Tags                             map[string]string                                    `json:"tags"`
	AuthenticationConfiguration      []healthcareservice.AuthenticationConfigurationState `json:"authentication_configuration"`
	CorsConfiguration                []healthcareservice.CorsConfigurationState           `json:"cors_configuration"`
	Timeouts                         *healthcareservice.TimeoutsState                     `json:"timeouts"`
}
