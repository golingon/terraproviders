// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationconnectioncertificate "github.com/golingon/terraproviders/azurerm/3.49.0/automationconnectioncertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationConnectionCertificate(name string, args AutomationConnectionCertificateArgs) *AutomationConnectionCertificate {
	return &AutomationConnectionCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationConnectionCertificate)(nil)

type AutomationConnectionCertificate struct {
	Name  string
	Args  AutomationConnectionCertificateArgs
	state *automationConnectionCertificateState
}

func (acc *AutomationConnectionCertificate) Type() string {
	return "azurerm_automation_connection_certificate"
}

func (acc *AutomationConnectionCertificate) LocalName() string {
	return acc.Name
}

func (acc *AutomationConnectionCertificate) Configuration() interface{} {
	return acc.Args
}

func (acc *AutomationConnectionCertificate) Attributes() automationConnectionCertificateAttributes {
	return automationConnectionCertificateAttributes{ref: terra.ReferenceResource(acc)}
}

func (acc *AutomationConnectionCertificate) ImportState(av io.Reader) error {
	acc.state = &automationConnectionCertificateState{}
	if err := json.NewDecoder(av).Decode(acc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acc.Type(), acc.LocalName(), err)
	}
	return nil
}

func (acc *AutomationConnectionCertificate) State() (*automationConnectionCertificateState, bool) {
	return acc.state, acc.state != nil
}

func (acc *AutomationConnectionCertificate) StateMust() *automationConnectionCertificateState {
	if acc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acc.Type(), acc.LocalName()))
	}
	return acc.state
}

func (acc *AutomationConnectionCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(acc)
}

type AutomationConnectionCertificateArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// AutomationCertificateName: string, required
	AutomationCertificateName terra.StringValue `hcl:"automation_certificate_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *automationconnectioncertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationConnectionCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationConnectionCertificateAttributes struct {
	ref terra.Reference
}

func (acc automationConnectionCertificateAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("automation_account_name"))
}

func (acc automationConnectionCertificateAttributes) AutomationCertificateName() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("automation_certificate_name"))
}

func (acc automationConnectionCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("description"))
}

func (acc automationConnectionCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("id"))
}

func (acc automationConnectionCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("name"))
}

func (acc automationConnectionCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("resource_group_name"))
}

func (acc automationConnectionCertificateAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(acc.ref.Append("subscription_id"))
}

func (acc automationConnectionCertificateAttributes) Timeouts() automationconnectioncertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[automationconnectioncertificate.TimeoutsAttributes](acc.ref.Append("timeouts"))
}

type automationConnectionCertificateState struct {
	AutomationAccountName     string                                         `json:"automation_account_name"`
	AutomationCertificateName string                                         `json:"automation_certificate_name"`
	Description               string                                         `json:"description"`
	Id                        string                                         `json:"id"`
	Name                      string                                         `json:"name"`
	ResourceGroupName         string                                         `json:"resource_group_name"`
	SubscriptionId            string                                         `json:"subscription_id"`
	Timeouts                  *automationconnectioncertificate.TimeoutsState `json:"timeouts"`
}
