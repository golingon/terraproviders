// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedserviceazuresqldatabase "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedserviceazuresqldatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceAzureSqlDatabase(name string, args DataFactoryLinkedServiceAzureSqlDatabaseArgs) *DataFactoryLinkedServiceAzureSqlDatabase {
	return &DataFactoryLinkedServiceAzureSqlDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceAzureSqlDatabase)(nil)

type DataFactoryLinkedServiceAzureSqlDatabase struct {
	Name  string
	Args  DataFactoryLinkedServiceAzureSqlDatabaseArgs
	state *dataFactoryLinkedServiceAzureSqlDatabaseState
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) Type() string {
	return "azurerm_data_factory_linked_service_azure_sql_database"
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) LocalName() string {
	return dflsasd.Name
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) Configuration() interface{} {
	return dflsasd.Args
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) Attributes() dataFactoryLinkedServiceAzureSqlDatabaseAttributes {
	return dataFactoryLinkedServiceAzureSqlDatabaseAttributes{ref: terra.ReferenceResource(dflsasd)}
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) ImportState(av io.Reader) error {
	dflsasd.state = &dataFactoryLinkedServiceAzureSqlDatabaseState{}
	if err := json.NewDecoder(av).Decode(dflsasd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsasd.Type(), dflsasd.LocalName(), err)
	}
	return nil
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) State() (*dataFactoryLinkedServiceAzureSqlDatabaseState, bool) {
	return dflsasd.state, dflsasd.state != nil
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) StateMust() *dataFactoryLinkedServiceAzureSqlDatabaseState {
	if dflsasd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsasd.Type(), dflsasd.LocalName()))
	}
	return dflsasd.state
}

func (dflsasd *DataFactoryLinkedServiceAzureSqlDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsasd)
}

type DataFactoryLinkedServiceAzureSqlDatabaseArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ServicePrincipalId: string, optional
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr"`
	// ServicePrincipalKey: string, optional
	ServicePrincipalKey terra.StringValue `hcl:"service_principal_key,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// UseManagedIdentity: bool, optional
	UseManagedIdentity terra.BoolValue `hcl:"use_managed_identity,attr"`
	// KeyVaultConnectionString: optional
	KeyVaultConnectionString *datafactorylinkedserviceazuresqldatabase.KeyVaultConnectionString `hcl:"key_vault_connection_string,block"`
	// KeyVaultPassword: optional
	KeyVaultPassword *datafactorylinkedserviceazuresqldatabase.KeyVaultPassword `hcl:"key_vault_password,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedserviceazuresqldatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceAzureSqlDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceAzureSqlDatabaseAttributes struct {
	ref terra.Reference
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsasd.ref.Append("additional_properties"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsasd.ref.Append("annotations"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("connection_string"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("data_factory_id"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("description"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("id"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("integration_runtime_name"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("name"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsasd.ref.Append("parameters"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("service_principal_id"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) ServicePrincipalKey() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("service_principal_key"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(dflsasd.ref.Append("tenant_id"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) UseManagedIdentity() terra.BoolValue {
	return terra.ReferenceBool(dflsasd.ref.Append("use_managed_identity"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) KeyVaultConnectionString() terra.ListValue[datafactorylinkedserviceazuresqldatabase.KeyVaultConnectionStringAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceazuresqldatabase.KeyVaultConnectionStringAttributes](dflsasd.ref.Append("key_vault_connection_string"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) KeyVaultPassword() terra.ListValue[datafactorylinkedserviceazuresqldatabase.KeyVaultPasswordAttributes] {
	return terra.ReferenceList[datafactorylinkedserviceazuresqldatabase.KeyVaultPasswordAttributes](dflsasd.ref.Append("key_vault_password"))
}

func (dflsasd dataFactoryLinkedServiceAzureSqlDatabaseAttributes) Timeouts() datafactorylinkedserviceazuresqldatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedserviceazuresqldatabase.TimeoutsAttributes](dflsasd.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceAzureSqlDatabaseState struct {
	AdditionalProperties     map[string]string                                                        `json:"additional_properties"`
	Annotations              []string                                                                 `json:"annotations"`
	ConnectionString         string                                                                   `json:"connection_string"`
	DataFactoryId            string                                                                   `json:"data_factory_id"`
	Description              string                                                                   `json:"description"`
	Id                       string                                                                   `json:"id"`
	IntegrationRuntimeName   string                                                                   `json:"integration_runtime_name"`
	Name                     string                                                                   `json:"name"`
	Parameters               map[string]string                                                        `json:"parameters"`
	ServicePrincipalId       string                                                                   `json:"service_principal_id"`
	ServicePrincipalKey      string                                                                   `json:"service_principal_key"`
	TenantId                 string                                                                   `json:"tenant_id"`
	UseManagedIdentity       bool                                                                     `json:"use_managed_identity"`
	KeyVaultConnectionString []datafactorylinkedserviceazuresqldatabase.KeyVaultConnectionStringState `json:"key_vault_connection_string"`
	KeyVaultPassword         []datafactorylinkedserviceazuresqldatabase.KeyVaultPasswordState         `json:"key_vault_password"`
	Timeouts                 *datafactorylinkedserviceazuresqldatabase.TimeoutsState                  `json:"timeouts"`
}
