// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistryscopemap "github.com/golingon/terraproviders/azurerm/3.49.0/containerregistryscopemap"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewContainerRegistryScopeMap(name string, args ContainerRegistryScopeMapArgs) *ContainerRegistryScopeMap {
	return &ContainerRegistryScopeMap{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistryScopeMap)(nil)

type ContainerRegistryScopeMap struct {
	Name  string
	Args  ContainerRegistryScopeMapArgs
	state *containerRegistryScopeMapState
}

func (crsm *ContainerRegistryScopeMap) Type() string {
	return "azurerm_container_registry_scope_map"
}

func (crsm *ContainerRegistryScopeMap) LocalName() string {
	return crsm.Name
}

func (crsm *ContainerRegistryScopeMap) Configuration() interface{} {
	return crsm.Args
}

func (crsm *ContainerRegistryScopeMap) Attributes() containerRegistryScopeMapAttributes {
	return containerRegistryScopeMapAttributes{ref: terra.ReferenceResource(crsm)}
}

func (crsm *ContainerRegistryScopeMap) ImportState(av io.Reader) error {
	crsm.state = &containerRegistryScopeMapState{}
	if err := json.NewDecoder(av).Decode(crsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crsm.Type(), crsm.LocalName(), err)
	}
	return nil
}

func (crsm *ContainerRegistryScopeMap) State() (*containerRegistryScopeMapState, bool) {
	return crsm.state, crsm.state != nil
}

func (crsm *ContainerRegistryScopeMap) StateMust() *containerRegistryScopeMapState {
	if crsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crsm.Type(), crsm.LocalName()))
	}
	return crsm.state
}

func (crsm *ContainerRegistryScopeMap) DependOn() terra.Reference {
	return terra.ReferenceResource(crsm)
}

type ContainerRegistryScopeMapArgs struct {
	// Actions: list of string, required
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// ContainerRegistryName: string, required
	ContainerRegistryName terra.StringValue `hcl:"container_registry_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *containerregistryscopemap.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ContainerRegistryScopeMap depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type containerRegistryScopeMapAttributes struct {
	ref terra.Reference
}

func (crsm containerRegistryScopeMapAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](crsm.ref.Append("actions"))
}

func (crsm containerRegistryScopeMapAttributes) ContainerRegistryName() terra.StringValue {
	return terra.ReferenceString(crsm.ref.Append("container_registry_name"))
}

func (crsm containerRegistryScopeMapAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crsm.ref.Append("description"))
}

func (crsm containerRegistryScopeMapAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crsm.ref.Append("id"))
}

func (crsm containerRegistryScopeMapAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crsm.ref.Append("name"))
}

func (crsm containerRegistryScopeMapAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(crsm.ref.Append("resource_group_name"))
}

func (crsm containerRegistryScopeMapAttributes) Timeouts() containerregistryscopemap.TimeoutsAttributes {
	return terra.ReferenceSingle[containerregistryscopemap.TimeoutsAttributes](crsm.ref.Append("timeouts"))
}

type containerRegistryScopeMapState struct {
	Actions               []string                                 `json:"actions"`
	ContainerRegistryName string                                   `json:"container_registry_name"`
	Description           string                                   `json:"description"`
	Id                    string                                   `json:"id"`
	Name                  string                                   `json:"name"`
	ResourceGroupName     string                                   `json:"resource_group_name"`
	Timeouts              *containerregistryscopemap.TimeoutsState `json:"timeouts"`
}
