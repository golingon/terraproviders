// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mariadbserver "github.com/golingon/terraproviders/azurerm/3.49.0/mariadbserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMariadbServer(name string, args MariadbServerArgs) *MariadbServer {
	return &MariadbServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MariadbServer)(nil)

type MariadbServer struct {
	Name  string
	Args  MariadbServerArgs
	state *mariadbServerState
}

func (ms *MariadbServer) Type() string {
	return "azurerm_mariadb_server"
}

func (ms *MariadbServer) LocalName() string {
	return ms.Name
}

func (ms *MariadbServer) Configuration() interface{} {
	return ms.Args
}

func (ms *MariadbServer) Attributes() mariadbServerAttributes {
	return mariadbServerAttributes{ref: terra.ReferenceResource(ms)}
}

func (ms *MariadbServer) ImportState(av io.Reader) error {
	ms.state = &mariadbServerState{}
	if err := json.NewDecoder(av).Decode(ms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ms.Type(), ms.LocalName(), err)
	}
	return nil
}

func (ms *MariadbServer) State() (*mariadbServerState, bool) {
	return ms.state, ms.state != nil
}

func (ms *MariadbServer) StateMust() *mariadbServerState {
	if ms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ms.Type(), ms.LocalName()))
	}
	return ms.state
}

func (ms *MariadbServer) DependOn() terra.Reference {
	return terra.ReferenceResource(ms)
}

type MariadbServerArgs struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorLoginPassword: string, optional
	AdministratorLoginPassword terra.StringValue `hcl:"administrator_login_password,attr"`
	// AutoGrowEnabled: bool, optional
	AutoGrowEnabled terra.BoolValue `hcl:"auto_grow_enabled,attr"`
	// BackupRetentionDays: number, optional
	BackupRetentionDays terra.NumberValue `hcl:"backup_retention_days,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// CreationSourceServerId: string, optional
	CreationSourceServerId terra.StringValue `hcl:"creation_source_server_id,attr"`
	// GeoRedundantBackupEnabled: bool, optional
	GeoRedundantBackupEnabled terra.BoolValue `hcl:"geo_redundant_backup_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RestorePointInTime: string, optional
	RestorePointInTime terra.StringValue `hcl:"restore_point_in_time,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SslEnforcementEnabled: bool, required
	SslEnforcementEnabled terra.BoolValue `hcl:"ssl_enforcement_enabled,attr" validate:"required"`
	// SslMinimalTlsVersionEnforced: string, optional
	SslMinimalTlsVersionEnforced terra.StringValue `hcl:"ssl_minimal_tls_version_enforced,attr"`
	// StorageMb: number, optional
	StorageMb terra.NumberValue `hcl:"storage_mb,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mariadbserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MariadbServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mariadbServerAttributes struct {
	ref terra.Reference
}

func (ms mariadbServerAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("administrator_login"))
}

func (ms mariadbServerAttributes) AdministratorLoginPassword() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("administrator_login_password"))
}

func (ms mariadbServerAttributes) AutoGrowEnabled() terra.BoolValue {
	return terra.ReferenceBool(ms.ref.Append("auto_grow_enabled"))
}

func (ms mariadbServerAttributes) BackupRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("backup_retention_days"))
}

func (ms mariadbServerAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("create_mode"))
}

func (ms mariadbServerAttributes) CreationSourceServerId() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("creation_source_server_id"))
}

func (ms mariadbServerAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("fqdn"))
}

func (ms mariadbServerAttributes) GeoRedundantBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(ms.ref.Append("geo_redundant_backup_enabled"))
}

func (ms mariadbServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("id"))
}

func (ms mariadbServerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("location"))
}

func (ms mariadbServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("name"))
}

func (ms mariadbServerAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(ms.ref.Append("public_network_access_enabled"))
}

func (ms mariadbServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("resource_group_name"))
}

func (ms mariadbServerAttributes) RestorePointInTime() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("restore_point_in_time"))
}

func (ms mariadbServerAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("sku_name"))
}

func (ms mariadbServerAttributes) SslEnforcementEnabled() terra.BoolValue {
	return terra.ReferenceBool(ms.ref.Append("ssl_enforcement_enabled"))
}

func (ms mariadbServerAttributes) SslMinimalTlsVersionEnforced() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("ssl_minimal_tls_version_enforced"))
}

func (ms mariadbServerAttributes) StorageMb() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("storage_mb"))
}

func (ms mariadbServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ms.ref.Append("tags"))
}

func (ms mariadbServerAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("version"))
}

func (ms mariadbServerAttributes) Timeouts() mariadbserver.TimeoutsAttributes {
	return terra.ReferenceSingle[mariadbserver.TimeoutsAttributes](ms.ref.Append("timeouts"))
}

type mariadbServerState struct {
	AdministratorLogin           string                       `json:"administrator_login"`
	AdministratorLoginPassword   string                       `json:"administrator_login_password"`
	AutoGrowEnabled              bool                         `json:"auto_grow_enabled"`
	BackupRetentionDays          float64                      `json:"backup_retention_days"`
	CreateMode                   string                       `json:"create_mode"`
	CreationSourceServerId       string                       `json:"creation_source_server_id"`
	Fqdn                         string                       `json:"fqdn"`
	GeoRedundantBackupEnabled    bool                         `json:"geo_redundant_backup_enabled"`
	Id                           string                       `json:"id"`
	Location                     string                       `json:"location"`
	Name                         string                       `json:"name"`
	PublicNetworkAccessEnabled   bool                         `json:"public_network_access_enabled"`
	ResourceGroupName            string                       `json:"resource_group_name"`
	RestorePointInTime           string                       `json:"restore_point_in_time"`
	SkuName                      string                       `json:"sku_name"`
	SslEnforcementEnabled        bool                         `json:"ssl_enforcement_enabled"`
	SslMinimalTlsVersionEnforced string                       `json:"ssl_minimal_tls_version_enforced"`
	StorageMb                    float64                      `json:"storage_mb"`
	Tags                         map[string]string            `json:"tags"`
	Version                      string                       `json:"version"`
	Timeouts                     *mariadbserver.TimeoutsState `json:"timeouts"`
}
