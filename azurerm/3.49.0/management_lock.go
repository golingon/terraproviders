// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	managementlock "github.com/golingon/terraproviders/azurerm/3.49.0/managementlock"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagementLock(name string, args ManagementLockArgs) *ManagementLock {
	return &ManagementLock{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagementLock)(nil)

type ManagementLock struct {
	Name  string
	Args  ManagementLockArgs
	state *managementLockState
}

func (ml *ManagementLock) Type() string {
	return "azurerm_management_lock"
}

func (ml *ManagementLock) LocalName() string {
	return ml.Name
}

func (ml *ManagementLock) Configuration() interface{} {
	return ml.Args
}

func (ml *ManagementLock) Attributes() managementLockAttributes {
	return managementLockAttributes{ref: terra.ReferenceResource(ml)}
}

func (ml *ManagementLock) ImportState(av io.Reader) error {
	ml.state = &managementLockState{}
	if err := json.NewDecoder(av).Decode(ml.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ml.Type(), ml.LocalName(), err)
	}
	return nil
}

func (ml *ManagementLock) State() (*managementLockState, bool) {
	return ml.state, ml.state != nil
}

func (ml *ManagementLock) StateMust() *managementLockState {
	if ml.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ml.Type(), ml.LocalName()))
	}
	return ml.state
}

func (ml *ManagementLock) DependOn() terra.Reference {
	return terra.ReferenceResource(ml)
}

type ManagementLockArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LockLevel: string, required
	LockLevel terra.StringValue `hcl:"lock_level,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *managementlock.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagementLock depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managementLockAttributes struct {
	ref terra.Reference
}

func (ml managementLockAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ml.ref.Append("id"))
}

func (ml managementLockAttributes) LockLevel() terra.StringValue {
	return terra.ReferenceString(ml.ref.Append("lock_level"))
}

func (ml managementLockAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ml.ref.Append("name"))
}

func (ml managementLockAttributes) Notes() terra.StringValue {
	return terra.ReferenceString(ml.ref.Append("notes"))
}

func (ml managementLockAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(ml.ref.Append("scope"))
}

func (ml managementLockAttributes) Timeouts() managementlock.TimeoutsAttributes {
	return terra.ReferenceSingle[managementlock.TimeoutsAttributes](ml.ref.Append("timeouts"))
}

type managementLockState struct {
	Id        string                        `json:"id"`
	LockLevel string                        `json:"lock_level"`
	Name      string                        `json:"name"`
	Notes     string                        `json:"notes"`
	Scope     string                        `json:"scope"`
	Timeouts  *managementlock.TimeoutsState `json:"timeouts"`
}
