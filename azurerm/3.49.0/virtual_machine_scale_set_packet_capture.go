// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualmachinescalesetpacketcapture "github.com/golingon/terraproviders/azurerm/3.49.0/virtualmachinescalesetpacketcapture"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualMachineScaleSetPacketCapture(name string, args VirtualMachineScaleSetPacketCaptureArgs) *VirtualMachineScaleSetPacketCapture {
	return &VirtualMachineScaleSetPacketCapture{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualMachineScaleSetPacketCapture)(nil)

type VirtualMachineScaleSetPacketCapture struct {
	Name  string
	Args  VirtualMachineScaleSetPacketCaptureArgs
	state *virtualMachineScaleSetPacketCaptureState
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) Type() string {
	return "azurerm_virtual_machine_scale_set_packet_capture"
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) LocalName() string {
	return vmsspc.Name
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) Configuration() interface{} {
	return vmsspc.Args
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) Attributes() virtualMachineScaleSetPacketCaptureAttributes {
	return virtualMachineScaleSetPacketCaptureAttributes{ref: terra.ReferenceResource(vmsspc)}
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) ImportState(av io.Reader) error {
	vmsspc.state = &virtualMachineScaleSetPacketCaptureState{}
	if err := json.NewDecoder(av).Decode(vmsspc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmsspc.Type(), vmsspc.LocalName(), err)
	}
	return nil
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) State() (*virtualMachineScaleSetPacketCaptureState, bool) {
	return vmsspc.state, vmsspc.state != nil
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) StateMust() *virtualMachineScaleSetPacketCaptureState {
	if vmsspc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmsspc.Type(), vmsspc.LocalName()))
	}
	return vmsspc.state
}

func (vmsspc *VirtualMachineScaleSetPacketCapture) DependOn() terra.Reference {
	return terra.ReferenceResource(vmsspc)
}

type VirtualMachineScaleSetPacketCaptureArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumBytesPerPacket: number, optional
	MaximumBytesPerPacket terra.NumberValue `hcl:"maximum_bytes_per_packet,attr"`
	// MaximumBytesPerSession: number, optional
	MaximumBytesPerSession terra.NumberValue `hcl:"maximum_bytes_per_session,attr"`
	// MaximumCaptureDurationInSeconds: number, optional
	MaximumCaptureDurationInSeconds terra.NumberValue `hcl:"maximum_capture_duration_in_seconds,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkWatcherId: string, required
	NetworkWatcherId terra.StringValue `hcl:"network_watcher_id,attr" validate:"required"`
	// VirtualMachineScaleSetId: string, required
	VirtualMachineScaleSetId terra.StringValue `hcl:"virtual_machine_scale_set_id,attr" validate:"required"`
	// Filter: min=0
	Filter []virtualmachinescalesetpacketcapture.Filter `hcl:"filter,block" validate:"min=0"`
	// MachineScope: optional
	MachineScope *virtualmachinescalesetpacketcapture.MachineScope `hcl:"machine_scope,block"`
	// StorageLocation: required
	StorageLocation *virtualmachinescalesetpacketcapture.StorageLocation `hcl:"storage_location,block" validate:"required"`
	// Timeouts: optional
	Timeouts *virtualmachinescalesetpacketcapture.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualMachineScaleSetPacketCapture depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualMachineScaleSetPacketCaptureAttributes struct {
	ref terra.Reference
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vmsspc.ref.Append("id"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) MaximumBytesPerPacket() terra.NumberValue {
	return terra.ReferenceNumber(vmsspc.ref.Append("maximum_bytes_per_packet"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) MaximumBytesPerSession() terra.NumberValue {
	return terra.ReferenceNumber(vmsspc.ref.Append("maximum_bytes_per_session"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) MaximumCaptureDurationInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(vmsspc.ref.Append("maximum_capture_duration_in_seconds"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vmsspc.ref.Append("name"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) NetworkWatcherId() terra.StringValue {
	return terra.ReferenceString(vmsspc.ref.Append("network_watcher_id"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) VirtualMachineScaleSetId() terra.StringValue {
	return terra.ReferenceString(vmsspc.ref.Append("virtual_machine_scale_set_id"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) Filter() terra.ListValue[virtualmachinescalesetpacketcapture.FilterAttributes] {
	return terra.ReferenceList[virtualmachinescalesetpacketcapture.FilterAttributes](vmsspc.ref.Append("filter"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) MachineScope() terra.ListValue[virtualmachinescalesetpacketcapture.MachineScopeAttributes] {
	return terra.ReferenceList[virtualmachinescalesetpacketcapture.MachineScopeAttributes](vmsspc.ref.Append("machine_scope"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) StorageLocation() terra.ListValue[virtualmachinescalesetpacketcapture.StorageLocationAttributes] {
	return terra.ReferenceList[virtualmachinescalesetpacketcapture.StorageLocationAttributes](vmsspc.ref.Append("storage_location"))
}

func (vmsspc virtualMachineScaleSetPacketCaptureAttributes) Timeouts() virtualmachinescalesetpacketcapture.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualmachinescalesetpacketcapture.TimeoutsAttributes](vmsspc.ref.Append("timeouts"))
}

type virtualMachineScaleSetPacketCaptureState struct {
	Id                              string                                                     `json:"id"`
	MaximumBytesPerPacket           float64                                                    `json:"maximum_bytes_per_packet"`
	MaximumBytesPerSession          float64                                                    `json:"maximum_bytes_per_session"`
	MaximumCaptureDurationInSeconds float64                                                    `json:"maximum_capture_duration_in_seconds"`
	Name                            string                                                     `json:"name"`
	NetworkWatcherId                string                                                     `json:"network_watcher_id"`
	VirtualMachineScaleSetId        string                                                     `json:"virtual_machine_scale_set_id"`
	Filter                          []virtualmachinescalesetpacketcapture.FilterState          `json:"filter"`
	MachineScope                    []virtualmachinescalesetpacketcapture.MachineScopeState    `json:"machine_scope"`
	StorageLocation                 []virtualmachinescalesetpacketcapture.StorageLocationState `json:"storage_location"`
	Timeouts                        *virtualmachinescalesetpacketcapture.TimeoutsState         `json:"timeouts"`
}
