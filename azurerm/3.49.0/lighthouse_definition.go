// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lighthousedefinition "github.com/golingon/terraproviders/azurerm/3.49.0/lighthousedefinition"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLighthouseDefinition creates a new instance of [LighthouseDefinition].
func NewLighthouseDefinition(name string, args LighthouseDefinitionArgs) *LighthouseDefinition {
	return &LighthouseDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LighthouseDefinition)(nil)

// LighthouseDefinition represents the Terraform resource azurerm_lighthouse_definition.
type LighthouseDefinition struct {
	Name      string
	Args      LighthouseDefinitionArgs
	state     *lighthouseDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LighthouseDefinition].
func (ld *LighthouseDefinition) Type() string {
	return "azurerm_lighthouse_definition"
}

// LocalName returns the local name for [LighthouseDefinition].
func (ld *LighthouseDefinition) LocalName() string {
	return ld.Name
}

// Configuration returns the configuration (args) for [LighthouseDefinition].
func (ld *LighthouseDefinition) Configuration() interface{} {
	return ld.Args
}

// DependOn is used for other resources to depend on [LighthouseDefinition].
func (ld *LighthouseDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(ld)
}

// Dependencies returns the list of resources [LighthouseDefinition] depends_on.
func (ld *LighthouseDefinition) Dependencies() terra.Dependencies {
	return ld.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LighthouseDefinition].
func (ld *LighthouseDefinition) LifecycleManagement() *terra.Lifecycle {
	return ld.Lifecycle
}

// Attributes returns the attributes for [LighthouseDefinition].
func (ld *LighthouseDefinition) Attributes() lighthouseDefinitionAttributes {
	return lighthouseDefinitionAttributes{ref: terra.ReferenceResource(ld)}
}

// ImportState imports the given attribute values into [LighthouseDefinition]'s state.
func (ld *LighthouseDefinition) ImportState(av io.Reader) error {
	ld.state = &lighthouseDefinitionState{}
	if err := json.NewDecoder(av).Decode(ld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ld.Type(), ld.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LighthouseDefinition] has state.
func (ld *LighthouseDefinition) State() (*lighthouseDefinitionState, bool) {
	return ld.state, ld.state != nil
}

// StateMust returns the state for [LighthouseDefinition]. Panics if the state is nil.
func (ld *LighthouseDefinition) StateMust() *lighthouseDefinitionState {
	if ld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ld.Type(), ld.LocalName()))
	}
	return ld.state
}

// LighthouseDefinitionArgs contains the configurations for azurerm_lighthouse_definition.
type LighthouseDefinitionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LighthouseDefinitionId: string, optional
	LighthouseDefinitionId terra.StringValue `hcl:"lighthouse_definition_id,attr"`
	// ManagingTenantId: string, required
	ManagingTenantId terra.StringValue `hcl:"managing_tenant_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Authorization: min=1
	Authorization []lighthousedefinition.Authorization `hcl:"authorization,block" validate:"min=1"`
	// EligibleAuthorization: min=0
	EligibleAuthorization []lighthousedefinition.EligibleAuthorization `hcl:"eligible_authorization,block" validate:"min=0"`
	// Plan: optional
	Plan *lighthousedefinition.Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *lighthousedefinition.Timeouts `hcl:"timeouts,block"`
}
type lighthouseDefinitionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("id"))
}

// LighthouseDefinitionId returns a reference to field lighthouse_definition_id of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) LighthouseDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("lighthouse_definition_id"))
}

// ManagingTenantId returns a reference to field managing_tenant_id of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) ManagingTenantId() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("managing_tenant_id"))
}

// Name returns a reference to field name of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("name"))
}

// Scope returns a reference to field scope of azurerm_lighthouse_definition.
func (ld lighthouseDefinitionAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("scope"))
}

func (ld lighthouseDefinitionAttributes) Authorization() terra.SetValue[lighthousedefinition.AuthorizationAttributes] {
	return terra.ReferenceAsSet[lighthousedefinition.AuthorizationAttributes](ld.ref.Append("authorization"))
}

func (ld lighthouseDefinitionAttributes) EligibleAuthorization() terra.SetValue[lighthousedefinition.EligibleAuthorizationAttributes] {
	return terra.ReferenceAsSet[lighthousedefinition.EligibleAuthorizationAttributes](ld.ref.Append("eligible_authorization"))
}

func (ld lighthouseDefinitionAttributes) Plan() terra.ListValue[lighthousedefinition.PlanAttributes] {
	return terra.ReferenceAsList[lighthousedefinition.PlanAttributes](ld.ref.Append("plan"))
}

func (ld lighthouseDefinitionAttributes) Timeouts() lighthousedefinition.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lighthousedefinition.TimeoutsAttributes](ld.ref.Append("timeouts"))
}

type lighthouseDefinitionState struct {
	Description            string                                            `json:"description"`
	Id                     string                                            `json:"id"`
	LighthouseDefinitionId string                                            `json:"lighthouse_definition_id"`
	ManagingTenantId       string                                            `json:"managing_tenant_id"`
	Name                   string                                            `json:"name"`
	Scope                  string                                            `json:"scope"`
	Authorization          []lighthousedefinition.AuthorizationState         `json:"authorization"`
	EligibleAuthorization  []lighthousedefinition.EligibleAuthorizationState `json:"eligible_authorization"`
	Plan                   []lighthousedefinition.PlanState                  `json:"plan"`
	Timeouts               *lighthousedefinition.TimeoutsState               `json:"timeouts"`
}
