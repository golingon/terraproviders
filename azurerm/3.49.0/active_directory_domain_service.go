// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	activedirectorydomainservice "github.com/golingon/terraproviders/azurerm/3.49.0/activedirectorydomainservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewActiveDirectoryDomainService(name string, args ActiveDirectoryDomainServiceArgs) *ActiveDirectoryDomainService {
	return &ActiveDirectoryDomainService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ActiveDirectoryDomainService)(nil)

type ActiveDirectoryDomainService struct {
	Name  string
	Args  ActiveDirectoryDomainServiceArgs
	state *activeDirectoryDomainServiceState
}

func (adds *ActiveDirectoryDomainService) Type() string {
	return "azurerm_active_directory_domain_service"
}

func (adds *ActiveDirectoryDomainService) LocalName() string {
	return adds.Name
}

func (adds *ActiveDirectoryDomainService) Configuration() interface{} {
	return adds.Args
}

func (adds *ActiveDirectoryDomainService) Attributes() activeDirectoryDomainServiceAttributes {
	return activeDirectoryDomainServiceAttributes{ref: terra.ReferenceResource(adds)}
}

func (adds *ActiveDirectoryDomainService) ImportState(av io.Reader) error {
	adds.state = &activeDirectoryDomainServiceState{}
	if err := json.NewDecoder(av).Decode(adds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adds.Type(), adds.LocalName(), err)
	}
	return nil
}

func (adds *ActiveDirectoryDomainService) State() (*activeDirectoryDomainServiceState, bool) {
	return adds.state, adds.state != nil
}

func (adds *ActiveDirectoryDomainService) StateMust() *activeDirectoryDomainServiceState {
	if adds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adds.Type(), adds.LocalName()))
	}
	return adds.state
}

func (adds *ActiveDirectoryDomainService) DependOn() terra.Reference {
	return terra.ReferenceResource(adds)
}

type ActiveDirectoryDomainServiceArgs struct {
	// DomainConfigurationType: string, optional
	DomainConfigurationType terra.StringValue `hcl:"domain_configuration_type,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// FilteredSyncEnabled: bool, optional
	FilteredSyncEnabled terra.BoolValue `hcl:"filtered_sync_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// InitialReplicaSet: required
	InitialReplicaSet *activedirectorydomainservice.InitialReplicaSet `hcl:"initial_replica_set,block" validate:"required"`
	// Notifications: optional
	Notifications *activedirectorydomainservice.Notifications `hcl:"notifications,block"`
	// SecureLdap: optional
	SecureLdap *activedirectorydomainservice.SecureLdap `hcl:"secure_ldap,block"`
	// Security: optional
	Security *activedirectorydomainservice.Security `hcl:"security,block"`
	// Timeouts: optional
	Timeouts *activedirectorydomainservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ActiveDirectoryDomainService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type activeDirectoryDomainServiceAttributes struct {
	ref terra.Reference
}

func (adds activeDirectoryDomainServiceAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("deployment_id"))
}

func (adds activeDirectoryDomainServiceAttributes) DomainConfigurationType() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("domain_configuration_type"))
}

func (adds activeDirectoryDomainServiceAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("domain_name"))
}

func (adds activeDirectoryDomainServiceAttributes) FilteredSyncEnabled() terra.BoolValue {
	return terra.ReferenceBool(adds.ref.Append("filtered_sync_enabled"))
}

func (adds activeDirectoryDomainServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("id"))
}

func (adds activeDirectoryDomainServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("location"))
}

func (adds activeDirectoryDomainServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("name"))
}

func (adds activeDirectoryDomainServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("resource_group_name"))
}

func (adds activeDirectoryDomainServiceAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("resource_id"))
}

func (adds activeDirectoryDomainServiceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("sku"))
}

func (adds activeDirectoryDomainServiceAttributes) SyncOwner() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("sync_owner"))
}

func (adds activeDirectoryDomainServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adds.ref.Append("tags"))
}

func (adds activeDirectoryDomainServiceAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("tenant_id"))
}

func (adds activeDirectoryDomainServiceAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(adds.ref.Append("version"))
}

func (adds activeDirectoryDomainServiceAttributes) InitialReplicaSet() terra.ListValue[activedirectorydomainservice.InitialReplicaSetAttributes] {
	return terra.ReferenceList[activedirectorydomainservice.InitialReplicaSetAttributes](adds.ref.Append("initial_replica_set"))
}

func (adds activeDirectoryDomainServiceAttributes) Notifications() terra.ListValue[activedirectorydomainservice.NotificationsAttributes] {
	return terra.ReferenceList[activedirectorydomainservice.NotificationsAttributes](adds.ref.Append("notifications"))
}

func (adds activeDirectoryDomainServiceAttributes) SecureLdap() terra.ListValue[activedirectorydomainservice.SecureLdapAttributes] {
	return terra.ReferenceList[activedirectorydomainservice.SecureLdapAttributes](adds.ref.Append("secure_ldap"))
}

func (adds activeDirectoryDomainServiceAttributes) Security() terra.ListValue[activedirectorydomainservice.SecurityAttributes] {
	return terra.ReferenceList[activedirectorydomainservice.SecurityAttributes](adds.ref.Append("security"))
}

func (adds activeDirectoryDomainServiceAttributes) Timeouts() activedirectorydomainservice.TimeoutsAttributes {
	return terra.ReferenceSingle[activedirectorydomainservice.TimeoutsAttributes](adds.ref.Append("timeouts"))
}

type activeDirectoryDomainServiceState struct {
	DeploymentId            string                                                `json:"deployment_id"`
	DomainConfigurationType string                                                `json:"domain_configuration_type"`
	DomainName              string                                                `json:"domain_name"`
	FilteredSyncEnabled     bool                                                  `json:"filtered_sync_enabled"`
	Id                      string                                                `json:"id"`
	Location                string                                                `json:"location"`
	Name                    string                                                `json:"name"`
	ResourceGroupName       string                                                `json:"resource_group_name"`
	ResourceId              string                                                `json:"resource_id"`
	Sku                     string                                                `json:"sku"`
	SyncOwner               string                                                `json:"sync_owner"`
	Tags                    map[string]string                                     `json:"tags"`
	TenantId                string                                                `json:"tenant_id"`
	Version                 float64                                               `json:"version"`
	InitialReplicaSet       []activedirectorydomainservice.InitialReplicaSetState `json:"initial_replica_set"`
	Notifications           []activedirectorydomainservice.NotificationsState     `json:"notifications"`
	SecureLdap              []activedirectorydomainservice.SecureLdapState        `json:"secure_ldap"`
	Security                []activedirectorydomainservice.SecurityState          `json:"security"`
	Timeouts                *activedirectorydomainservice.TimeoutsState           `json:"timeouts"`
}
