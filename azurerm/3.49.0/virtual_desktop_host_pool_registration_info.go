// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	virtualdesktophostpoolregistrationinfo "github.com/golingon/terraproviders/azurerm/3.49.0/virtualdesktophostpoolregistrationinfo"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVirtualDesktopHostPoolRegistrationInfo(name string, args VirtualDesktopHostPoolRegistrationInfoArgs) *VirtualDesktopHostPoolRegistrationInfo {
	return &VirtualDesktopHostPoolRegistrationInfo{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VirtualDesktopHostPoolRegistrationInfo)(nil)

type VirtualDesktopHostPoolRegistrationInfo struct {
	Name  string
	Args  VirtualDesktopHostPoolRegistrationInfoArgs
	state *virtualDesktopHostPoolRegistrationInfoState
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) Type() string {
	return "azurerm_virtual_desktop_host_pool_registration_info"
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) LocalName() string {
	return vdhpri.Name
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) Configuration() interface{} {
	return vdhpri.Args
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) Attributes() virtualDesktopHostPoolRegistrationInfoAttributes {
	return virtualDesktopHostPoolRegistrationInfoAttributes{ref: terra.ReferenceResource(vdhpri)}
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) ImportState(av io.Reader) error {
	vdhpri.state = &virtualDesktopHostPoolRegistrationInfoState{}
	if err := json.NewDecoder(av).Decode(vdhpri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vdhpri.Type(), vdhpri.LocalName(), err)
	}
	return nil
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) State() (*virtualDesktopHostPoolRegistrationInfoState, bool) {
	return vdhpri.state, vdhpri.state != nil
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) StateMust() *virtualDesktopHostPoolRegistrationInfoState {
	if vdhpri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vdhpri.Type(), vdhpri.LocalName()))
	}
	return vdhpri.state
}

func (vdhpri *VirtualDesktopHostPoolRegistrationInfo) DependOn() terra.Reference {
	return terra.ReferenceResource(vdhpri)
}

type VirtualDesktopHostPoolRegistrationInfoArgs struct {
	// ExpirationDate: string, required
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr" validate:"required"`
	// HostpoolId: string, required
	HostpoolId terra.StringValue `hcl:"hostpool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *virtualdesktophostpoolregistrationinfo.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VirtualDesktopHostPoolRegistrationInfo depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type virtualDesktopHostPoolRegistrationInfoAttributes struct {
	ref terra.Reference
}

func (vdhpri virtualDesktopHostPoolRegistrationInfoAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(vdhpri.ref.Append("expiration_date"))
}

func (vdhpri virtualDesktopHostPoolRegistrationInfoAttributes) HostpoolId() terra.StringValue {
	return terra.ReferenceString(vdhpri.ref.Append("hostpool_id"))
}

func (vdhpri virtualDesktopHostPoolRegistrationInfoAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vdhpri.ref.Append("id"))
}

func (vdhpri virtualDesktopHostPoolRegistrationInfoAttributes) Token() terra.StringValue {
	return terra.ReferenceString(vdhpri.ref.Append("token"))
}

func (vdhpri virtualDesktopHostPoolRegistrationInfoAttributes) Timeouts() virtualdesktophostpoolregistrationinfo.TimeoutsAttributes {
	return terra.ReferenceSingle[virtualdesktophostpoolregistrationinfo.TimeoutsAttributes](vdhpri.ref.Append("timeouts"))
}

type virtualDesktopHostPoolRegistrationInfoState struct {
	ExpirationDate string                                                `json:"expiration_date"`
	HostpoolId     string                                                `json:"hostpool_id"`
	Id             string                                                `json:"id"`
	Token          string                                                `json:"token"`
	Timeouts       *virtualdesktophostpoolregistrationinfo.TimeoutsState `json:"timeouts"`
}
