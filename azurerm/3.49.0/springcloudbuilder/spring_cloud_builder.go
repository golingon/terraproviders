// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package springcloudbuilder

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BuildPackGroup struct {
	// BuildPackIds: list of string, optional
	BuildPackIds terra.ListValue[terra.StringValue] `hcl:"build_pack_ids,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Stack struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BuildPackGroupAttributes struct {
	ref terra.Reference
}

func (bpg BuildPackGroupAttributes) InternalRef() terra.Reference {
	return bpg.ref
}

func (bpg BuildPackGroupAttributes) InternalWithRef(ref terra.Reference) BuildPackGroupAttributes {
	return BuildPackGroupAttributes{ref: ref}
}

func (bpg BuildPackGroupAttributes) InternalTokens() hclwrite.Tokens {
	return bpg.ref.InternalTokens()
}

func (bpg BuildPackGroupAttributes) BuildPackIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bpg.ref.Append("build_pack_ids"))
}

func (bpg BuildPackGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bpg.ref.Append("name"))
}

type StackAttributes struct {
	ref terra.Reference
}

func (s StackAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s StackAttributes) InternalWithRef(ref terra.Reference) StackAttributes {
	return StackAttributes{ref: ref}
}

func (s StackAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s StackAttributes) Id() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("id"))
}

func (s StackAttributes) Version() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type BuildPackGroupState struct {
	BuildPackIds []string `json:"build_pack_ids"`
	Name         string   `json:"name"`
}

type StackState struct {
	Id      string `json:"id"`
	Version string `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
