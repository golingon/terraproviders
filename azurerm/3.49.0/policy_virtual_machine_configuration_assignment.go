// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	policyvirtualmachineconfigurationassignment "github.com/golingon/terraproviders/azurerm/3.49.0/policyvirtualmachineconfigurationassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPolicyVirtualMachineConfigurationAssignment(name string, args PolicyVirtualMachineConfigurationAssignmentArgs) *PolicyVirtualMachineConfigurationAssignment {
	return &PolicyVirtualMachineConfigurationAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PolicyVirtualMachineConfigurationAssignment)(nil)

type PolicyVirtualMachineConfigurationAssignment struct {
	Name  string
	Args  PolicyVirtualMachineConfigurationAssignmentArgs
	state *policyVirtualMachineConfigurationAssignmentState
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) Type() string {
	return "azurerm_policy_virtual_machine_configuration_assignment"
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) LocalName() string {
	return pvmca.Name
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) Configuration() interface{} {
	return pvmca.Args
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) Attributes() policyVirtualMachineConfigurationAssignmentAttributes {
	return policyVirtualMachineConfigurationAssignmentAttributes{ref: terra.ReferenceResource(pvmca)}
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) ImportState(av io.Reader) error {
	pvmca.state = &policyVirtualMachineConfigurationAssignmentState{}
	if err := json.NewDecoder(av).Decode(pvmca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pvmca.Type(), pvmca.LocalName(), err)
	}
	return nil
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) State() (*policyVirtualMachineConfigurationAssignmentState, bool) {
	return pvmca.state, pvmca.state != nil
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) StateMust() *policyVirtualMachineConfigurationAssignmentState {
	if pvmca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pvmca.Type(), pvmca.LocalName()))
	}
	return pvmca.state
}

func (pvmca *PolicyVirtualMachineConfigurationAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(pvmca)
}

type PolicyVirtualMachineConfigurationAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// Configuration: required
	Configuration *policyvirtualmachineconfigurationassignment.Configuration `hcl:"configuration,block" validate:"required"`
	// Timeouts: optional
	Timeouts *policyvirtualmachineconfigurationassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PolicyVirtualMachineConfigurationAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type policyVirtualMachineConfigurationAssignmentAttributes struct {
	ref terra.Reference
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pvmca.ref.Append("id"))
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pvmca.ref.Append("location"))
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pvmca.ref.Append("name"))
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceString(pvmca.ref.Append("virtual_machine_id"))
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) Configuration() terra.ListValue[policyvirtualmachineconfigurationassignment.ConfigurationAttributes] {
	return terra.ReferenceList[policyvirtualmachineconfigurationassignment.ConfigurationAttributes](pvmca.ref.Append("configuration"))
}

func (pvmca policyVirtualMachineConfigurationAssignmentAttributes) Timeouts() policyvirtualmachineconfigurationassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[policyvirtualmachineconfigurationassignment.TimeoutsAttributes](pvmca.ref.Append("timeouts"))
}

type policyVirtualMachineConfigurationAssignmentState struct {
	Id               string                                                           `json:"id"`
	Location         string                                                           `json:"location"`
	Name             string                                                           `json:"name"`
	VirtualMachineId string                                                           `json:"virtual_machine_id"`
	Configuration    []policyvirtualmachineconfigurationassignment.ConfigurationState `json:"configuration"`
	Timeouts         *policyvirtualmachineconfigurationassignment.TimeoutsState       `json:"timeouts"`
}
