// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subnetnetworksecuritygroupassociation "github.com/golingon/terraproviders/azurerm/3.49.0/subnetnetworksecuritygroupassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubnetNetworkSecurityGroupAssociation(name string, args SubnetNetworkSecurityGroupAssociationArgs) *SubnetNetworkSecurityGroupAssociation {
	return &SubnetNetworkSecurityGroupAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubnetNetworkSecurityGroupAssociation)(nil)

type SubnetNetworkSecurityGroupAssociation struct {
	Name  string
	Args  SubnetNetworkSecurityGroupAssociationArgs
	state *subnetNetworkSecurityGroupAssociationState
}

func (snsga *SubnetNetworkSecurityGroupAssociation) Type() string {
	return "azurerm_subnet_network_security_group_association"
}

func (snsga *SubnetNetworkSecurityGroupAssociation) LocalName() string {
	return snsga.Name
}

func (snsga *SubnetNetworkSecurityGroupAssociation) Configuration() interface{} {
	return snsga.Args
}

func (snsga *SubnetNetworkSecurityGroupAssociation) Attributes() subnetNetworkSecurityGroupAssociationAttributes {
	return subnetNetworkSecurityGroupAssociationAttributes{ref: terra.ReferenceResource(snsga)}
}

func (snsga *SubnetNetworkSecurityGroupAssociation) ImportState(av io.Reader) error {
	snsga.state = &subnetNetworkSecurityGroupAssociationState{}
	if err := json.NewDecoder(av).Decode(snsga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snsga.Type(), snsga.LocalName(), err)
	}
	return nil
}

func (snsga *SubnetNetworkSecurityGroupAssociation) State() (*subnetNetworkSecurityGroupAssociationState, bool) {
	return snsga.state, snsga.state != nil
}

func (snsga *SubnetNetworkSecurityGroupAssociation) StateMust() *subnetNetworkSecurityGroupAssociationState {
	if snsga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snsga.Type(), snsga.LocalName()))
	}
	return snsga.state
}

func (snsga *SubnetNetworkSecurityGroupAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(snsga)
}

type SubnetNetworkSecurityGroupAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkSecurityGroupId: string, required
	NetworkSecurityGroupId terra.StringValue `hcl:"network_security_group_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *subnetnetworksecuritygroupassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubnetNetworkSecurityGroupAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subnetNetworkSecurityGroupAssociationAttributes struct {
	ref terra.Reference
}

func (snsga subnetNetworkSecurityGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snsga.ref.Append("id"))
}

func (snsga subnetNetworkSecurityGroupAssociationAttributes) NetworkSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(snsga.ref.Append("network_security_group_id"))
}

func (snsga subnetNetworkSecurityGroupAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(snsga.ref.Append("subnet_id"))
}

func (snsga subnetNetworkSecurityGroupAssociationAttributes) Timeouts() subnetnetworksecuritygroupassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[subnetnetworksecuritygroupassociation.TimeoutsAttributes](snsga.ref.Append("timeouts"))
}

type subnetNetworkSecurityGroupAssociationState struct {
	Id                     string                                               `json:"id"`
	NetworkSecurityGroupId string                                               `json:"network_security_group_id"`
	SubnetId               string                                               `json:"subnet_id"`
	Timeouts               *subnetnetworksecuritygroupassociation.TimeoutsState `json:"timeouts"`
}
