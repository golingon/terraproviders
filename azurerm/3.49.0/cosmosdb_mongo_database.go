// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbmongodatabase "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbmongodatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbMongoDatabase(name string, args CosmosdbMongoDatabaseArgs) *CosmosdbMongoDatabase {
	return &CosmosdbMongoDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbMongoDatabase)(nil)

type CosmosdbMongoDatabase struct {
	Name  string
	Args  CosmosdbMongoDatabaseArgs
	state *cosmosdbMongoDatabaseState
}

func (cmd *CosmosdbMongoDatabase) Type() string {
	return "azurerm_cosmosdb_mongo_database"
}

func (cmd *CosmosdbMongoDatabase) LocalName() string {
	return cmd.Name
}

func (cmd *CosmosdbMongoDatabase) Configuration() interface{} {
	return cmd.Args
}

func (cmd *CosmosdbMongoDatabase) Attributes() cosmosdbMongoDatabaseAttributes {
	return cosmosdbMongoDatabaseAttributes{ref: terra.ReferenceResource(cmd)}
}

func (cmd *CosmosdbMongoDatabase) ImportState(av io.Reader) error {
	cmd.state = &cosmosdbMongoDatabaseState{}
	if err := json.NewDecoder(av).Decode(cmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmd.Type(), cmd.LocalName(), err)
	}
	return nil
}

func (cmd *CosmosdbMongoDatabase) State() (*cosmosdbMongoDatabaseState, bool) {
	return cmd.state, cmd.state != nil
}

func (cmd *CosmosdbMongoDatabase) StateMust() *cosmosdbMongoDatabaseState {
	if cmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmd.Type(), cmd.LocalName()))
	}
	return cmd.state
}

func (cmd *CosmosdbMongoDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(cmd)
}

type CosmosdbMongoDatabaseArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbmongodatabase.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Timeouts: optional
	Timeouts *cosmosdbmongodatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbMongoDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbMongoDatabaseAttributes struct {
	ref terra.Reference
}

func (cmd cosmosdbMongoDatabaseAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cmd.ref.Append("account_name"))
}

func (cmd cosmosdbMongoDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cmd.ref.Append("id"))
}

func (cmd cosmosdbMongoDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cmd.ref.Append("name"))
}

func (cmd cosmosdbMongoDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cmd.ref.Append("resource_group_name"))
}

func (cmd cosmosdbMongoDatabaseAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(cmd.ref.Append("throughput"))
}

func (cmd cosmosdbMongoDatabaseAttributes) AutoscaleSettings() terra.ListValue[cosmosdbmongodatabase.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbmongodatabase.AutoscaleSettingsAttributes](cmd.ref.Append("autoscale_settings"))
}

func (cmd cosmosdbMongoDatabaseAttributes) Timeouts() cosmosdbmongodatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbmongodatabase.TimeoutsAttributes](cmd.ref.Append("timeouts"))
}

type cosmosdbMongoDatabaseState struct {
	AccountName       string                                         `json:"account_name"`
	Id                string                                         `json:"id"`
	Name              string                                         `json:"name"`
	ResourceGroupName string                                         `json:"resource_group_name"`
	Throughput        float64                                        `json:"throughput"`
	AutoscaleSettings []cosmosdbmongodatabase.AutoscaleSettingsState `json:"autoscale_settings"`
	Timeouts          *cosmosdbmongodatabase.TimeoutsState           `json:"timeouts"`
}
