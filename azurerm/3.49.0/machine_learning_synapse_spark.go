// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	machinelearningsynapsespark "github.com/golingon/terraproviders/azurerm/3.49.0/machinelearningsynapsespark"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMachineLearningSynapseSpark(name string, args MachineLearningSynapseSparkArgs) *MachineLearningSynapseSpark {
	return &MachineLearningSynapseSpark{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MachineLearningSynapseSpark)(nil)

type MachineLearningSynapseSpark struct {
	Name  string
	Args  MachineLearningSynapseSparkArgs
	state *machineLearningSynapseSparkState
}

func (mlss *MachineLearningSynapseSpark) Type() string {
	return "azurerm_machine_learning_synapse_spark"
}

func (mlss *MachineLearningSynapseSpark) LocalName() string {
	return mlss.Name
}

func (mlss *MachineLearningSynapseSpark) Configuration() interface{} {
	return mlss.Args
}

func (mlss *MachineLearningSynapseSpark) Attributes() machineLearningSynapseSparkAttributes {
	return machineLearningSynapseSparkAttributes{ref: terra.ReferenceResource(mlss)}
}

func (mlss *MachineLearningSynapseSpark) ImportState(av io.Reader) error {
	mlss.state = &machineLearningSynapseSparkState{}
	if err := json.NewDecoder(av).Decode(mlss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mlss.Type(), mlss.LocalName(), err)
	}
	return nil
}

func (mlss *MachineLearningSynapseSpark) State() (*machineLearningSynapseSparkState, bool) {
	return mlss.state, mlss.state != nil
}

func (mlss *MachineLearningSynapseSpark) StateMust() *machineLearningSynapseSparkState {
	if mlss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mlss.Type(), mlss.LocalName()))
	}
	return mlss.state
}

func (mlss *MachineLearningSynapseSpark) DependOn() terra.Reference {
	return terra.ReferenceResource(mlss)
}

type MachineLearningSynapseSparkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineLearningWorkspaceId: string, required
	MachineLearningWorkspaceId terra.StringValue `hcl:"machine_learning_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SynapseSparkPoolId: string, required
	SynapseSparkPoolId terra.StringValue `hcl:"synapse_spark_pool_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *machinelearningsynapsespark.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *machinelearningsynapsespark.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MachineLearningSynapseSpark depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type machineLearningSynapseSparkAttributes struct {
	ref terra.Reference
}

func (mlss machineLearningSynapseSparkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("description"))
}

func (mlss machineLearningSynapseSparkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("id"))
}

func (mlss machineLearningSynapseSparkAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(mlss.ref.Append("local_auth_enabled"))
}

func (mlss machineLearningSynapseSparkAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("location"))
}

func (mlss machineLearningSynapseSparkAttributes) MachineLearningWorkspaceId() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("machine_learning_workspace_id"))
}

func (mlss machineLearningSynapseSparkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("name"))
}

func (mlss machineLearningSynapseSparkAttributes) SynapseSparkPoolId() terra.StringValue {
	return terra.ReferenceString(mlss.ref.Append("synapse_spark_pool_id"))
}

func (mlss machineLearningSynapseSparkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mlss.ref.Append("tags"))
}

func (mlss machineLearningSynapseSparkAttributes) Identity() terra.ListValue[machinelearningsynapsespark.IdentityAttributes] {
	return terra.ReferenceList[machinelearningsynapsespark.IdentityAttributes](mlss.ref.Append("identity"))
}

func (mlss machineLearningSynapseSparkAttributes) Timeouts() machinelearningsynapsespark.TimeoutsAttributes {
	return terra.ReferenceSingle[machinelearningsynapsespark.TimeoutsAttributes](mlss.ref.Append("timeouts"))
}

type machineLearningSynapseSparkState struct {
	Description                string                                      `json:"description"`
	Id                         string                                      `json:"id"`
	LocalAuthEnabled           bool                                        `json:"local_auth_enabled"`
	Location                   string                                      `json:"location"`
	MachineLearningWorkspaceId string                                      `json:"machine_learning_workspace_id"`
	Name                       string                                      `json:"name"`
	SynapseSparkPoolId         string                                      `json:"synapse_spark_pool_id"`
	Tags                       map[string]string                           `json:"tags"`
	Identity                   []machinelearningsynapsespark.IdentityState `json:"identity"`
	Timeouts                   *machinelearningsynapsespark.TimeoutsState  `json:"timeouts"`
}
