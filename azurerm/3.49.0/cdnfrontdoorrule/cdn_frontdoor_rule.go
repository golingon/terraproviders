// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cdnfrontdoorrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Actions struct {
	// RequestHeaderAction: min=0
	RequestHeaderAction []RequestHeaderAction `hcl:"request_header_action,block" validate:"min=0"`
	// ResponseHeaderAction: min=0
	ResponseHeaderAction []ResponseHeaderAction `hcl:"response_header_action,block" validate:"min=0"`
	// RouteConfigurationOverrideAction: optional
	RouteConfigurationOverrideAction *RouteConfigurationOverrideAction `hcl:"route_configuration_override_action,block"`
	// UrlRedirectAction: optional
	UrlRedirectAction *UrlRedirectAction `hcl:"url_redirect_action,block"`
	// UrlRewriteAction: optional
	UrlRewriteAction *UrlRewriteAction `hcl:"url_rewrite_action,block"`
}

type RequestHeaderAction struct {
	// HeaderAction: string, required
	HeaderAction terra.StringValue `hcl:"header_action,attr" validate:"required"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type ResponseHeaderAction struct {
	// HeaderAction: string, required
	HeaderAction terra.StringValue `hcl:"header_action,attr" validate:"required"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type RouteConfigurationOverrideAction struct {
	// CacheBehavior: string, optional
	CacheBehavior terra.StringValue `hcl:"cache_behavior,attr"`
	// CacheDuration: string, optional
	CacheDuration terra.StringValue `hcl:"cache_duration,attr"`
	// CdnFrontdoorOriginGroupId: string, optional
	CdnFrontdoorOriginGroupId terra.StringValue `hcl:"cdn_frontdoor_origin_group_id,attr"`
	// CompressionEnabled: bool, optional
	CompressionEnabled terra.BoolValue `hcl:"compression_enabled,attr"`
	// ForwardingProtocol: string, optional
	ForwardingProtocol terra.StringValue `hcl:"forwarding_protocol,attr"`
	// QueryStringCachingBehavior: string, optional
	QueryStringCachingBehavior terra.StringValue `hcl:"query_string_caching_behavior,attr"`
	// QueryStringParameters: list of string, optional
	QueryStringParameters terra.ListValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type UrlRedirectAction struct {
	// DestinationFragment: string, optional
	DestinationFragment terra.StringValue `hcl:"destination_fragment,attr"`
	// DestinationHostname: string, required
	DestinationHostname terra.StringValue `hcl:"destination_hostname,attr" validate:"required"`
	// DestinationPath: string, optional
	DestinationPath terra.StringValue `hcl:"destination_path,attr"`
	// QueryString: string, optional
	QueryString terra.StringValue `hcl:"query_string,attr"`
	// RedirectProtocol: string, optional
	RedirectProtocol terra.StringValue `hcl:"redirect_protocol,attr"`
	// RedirectType: string, required
	RedirectType terra.StringValue `hcl:"redirect_type,attr" validate:"required"`
}

type UrlRewriteAction struct {
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// PreserveUnmatchedPath: bool, optional
	PreserveUnmatchedPath terra.BoolValue `hcl:"preserve_unmatched_path,attr"`
	// SourcePattern: string, required
	SourcePattern terra.StringValue `hcl:"source_pattern,attr" validate:"required"`
}

type Conditions struct {
	// ClientPortCondition: min=0
	ClientPortCondition []ClientPortCondition `hcl:"client_port_condition,block" validate:"min=0"`
	// CookiesCondition: min=0
	CookiesCondition []CookiesCondition `hcl:"cookies_condition,block" validate:"min=0"`
	// HostNameCondition: min=0
	HostNameCondition []HostNameCondition `hcl:"host_name_condition,block" validate:"min=0"`
	// HttpVersionCondition: min=0
	HttpVersionCondition []HttpVersionCondition `hcl:"http_version_condition,block" validate:"min=0"`
	// IsDeviceCondition: min=0
	IsDeviceCondition []IsDeviceCondition `hcl:"is_device_condition,block" validate:"min=0"`
	// PostArgsCondition: min=0
	PostArgsCondition []PostArgsCondition `hcl:"post_args_condition,block" validate:"min=0"`
	// QueryStringCondition: min=0
	QueryStringCondition []QueryStringCondition `hcl:"query_string_condition,block" validate:"min=0"`
	// RemoteAddressCondition: min=0
	RemoteAddressCondition []RemoteAddressCondition `hcl:"remote_address_condition,block" validate:"min=0"`
	// RequestBodyCondition: min=0
	RequestBodyCondition []RequestBodyCondition `hcl:"request_body_condition,block" validate:"min=0"`
	// RequestHeaderCondition: min=0
	RequestHeaderCondition []RequestHeaderCondition `hcl:"request_header_condition,block" validate:"min=0"`
	// RequestMethodCondition: min=0
	RequestMethodCondition []RequestMethodCondition `hcl:"request_method_condition,block" validate:"min=0"`
	// RequestSchemeCondition: min=0
	RequestSchemeCondition []RequestSchemeCondition `hcl:"request_scheme_condition,block" validate:"min=0"`
	// RequestUriCondition: min=0
	RequestUriCondition []RequestUriCondition `hcl:"request_uri_condition,block" validate:"min=0"`
	// ServerPortCondition: min=0
	ServerPortCondition []ServerPortCondition `hcl:"server_port_condition,block" validate:"min=0"`
	// SocketAddressCondition: min=0
	SocketAddressCondition []SocketAddressCondition `hcl:"socket_address_condition,block" validate:"min=0"`
	// SslProtocolCondition: min=0
	SslProtocolCondition []SslProtocolCondition `hcl:"ssl_protocol_condition,block" validate:"min=0"`
	// UrlFileExtensionCondition: min=0
	UrlFileExtensionCondition []UrlFileExtensionCondition `hcl:"url_file_extension_condition,block" validate:"min=0"`
	// UrlFilenameCondition: min=0
	UrlFilenameCondition []UrlFilenameCondition `hcl:"url_filename_condition,block" validate:"min=0"`
	// UrlPathCondition: min=0
	UrlPathCondition []UrlPathCondition `hcl:"url_path_condition,block" validate:"min=0"`
}

type ClientPortCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
}

type CookiesCondition struct {
	// CookieName: string, required
	CookieName terra.StringValue `hcl:"cookie_name,attr" validate:"required"`
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type HostNameCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type HttpVersionCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type IsDeviceCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type PostArgsCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// PostArgsName: string, required
	PostArgsName terra.StringValue `hcl:"post_args_name,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type QueryStringCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type RemoteAddressCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type RequestBodyCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type RequestHeaderCondition struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type RequestMethodCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type RequestSchemeCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type RequestUriCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ServerPortCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
}

type SocketAddressCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type SslProtocolCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type UrlFileExtensionCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type UrlFilenameCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type UrlPathCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) RequestHeaderAction() terra.ListValue[RequestHeaderActionAttributes] {
	return terra.ReferenceAsList[RequestHeaderActionAttributes](a.ref.Append("request_header_action"))
}

func (a ActionsAttributes) ResponseHeaderAction() terra.ListValue[ResponseHeaderActionAttributes] {
	return terra.ReferenceAsList[ResponseHeaderActionAttributes](a.ref.Append("response_header_action"))
}

func (a ActionsAttributes) RouteConfigurationOverrideAction() terra.ListValue[RouteConfigurationOverrideActionAttributes] {
	return terra.ReferenceAsList[RouteConfigurationOverrideActionAttributes](a.ref.Append("route_configuration_override_action"))
}

func (a ActionsAttributes) UrlRedirectAction() terra.ListValue[UrlRedirectActionAttributes] {
	return terra.ReferenceAsList[UrlRedirectActionAttributes](a.ref.Append("url_redirect_action"))
}

func (a ActionsAttributes) UrlRewriteAction() terra.ListValue[UrlRewriteActionAttributes] {
	return terra.ReferenceAsList[UrlRewriteActionAttributes](a.ref.Append("url_rewrite_action"))
}

type RequestHeaderActionAttributes struct {
	ref terra.Reference
}

func (rha RequestHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return rha.ref, nil
}

func (rha RequestHeaderActionAttributes) InternalWithRef(ref terra.Reference) RequestHeaderActionAttributes {
	return RequestHeaderActionAttributes{ref: ref}
}

func (rha RequestHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rha.ref.InternalTokens()
}

func (rha RequestHeaderActionAttributes) HeaderAction() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_action"))
}

func (rha RequestHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_name"))
}

func (rha RequestHeaderActionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("value"))
}

type ResponseHeaderActionAttributes struct {
	ref terra.Reference
}

func (rha ResponseHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return rha.ref, nil
}

func (rha ResponseHeaderActionAttributes) InternalWithRef(ref terra.Reference) ResponseHeaderActionAttributes {
	return ResponseHeaderActionAttributes{ref: ref}
}

func (rha ResponseHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rha.ref.InternalTokens()
}

func (rha ResponseHeaderActionAttributes) HeaderAction() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_action"))
}

func (rha ResponseHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_name"))
}

func (rha ResponseHeaderActionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("value"))
}

type RouteConfigurationOverrideActionAttributes struct {
	ref terra.Reference
}

func (rcoa RouteConfigurationOverrideActionAttributes) InternalRef() (terra.Reference, error) {
	return rcoa.ref, nil
}

func (rcoa RouteConfigurationOverrideActionAttributes) InternalWithRef(ref terra.Reference) RouteConfigurationOverrideActionAttributes {
	return RouteConfigurationOverrideActionAttributes{ref: ref}
}

func (rcoa RouteConfigurationOverrideActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rcoa.ref.InternalTokens()
}

func (rcoa RouteConfigurationOverrideActionAttributes) CacheBehavior() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cache_behavior"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) CacheDuration() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cache_duration"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) CdnFrontdoorOriginGroupId() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cdn_frontdoor_origin_group_id"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) CompressionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rcoa.ref.Append("compression_enabled"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) ForwardingProtocol() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("forwarding_protocol"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) QueryStringCachingBehavior() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("query_string_caching_behavior"))
}

func (rcoa RouteConfigurationOverrideActionAttributes) QueryStringParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rcoa.ref.Append("query_string_parameters"))
}

type UrlRedirectActionAttributes struct {
	ref terra.Reference
}

func (ura UrlRedirectActionAttributes) InternalRef() (terra.Reference, error) {
	return ura.ref, nil
}

func (ura UrlRedirectActionAttributes) InternalWithRef(ref terra.Reference) UrlRedirectActionAttributes {
	return UrlRedirectActionAttributes{ref: ref}
}

func (ura UrlRedirectActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ura.ref.InternalTokens()
}

func (ura UrlRedirectActionAttributes) DestinationFragment() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_fragment"))
}

func (ura UrlRedirectActionAttributes) DestinationHostname() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_hostname"))
}

func (ura UrlRedirectActionAttributes) DestinationPath() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_path"))
}

func (ura UrlRedirectActionAttributes) QueryString() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("query_string"))
}

func (ura UrlRedirectActionAttributes) RedirectProtocol() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("redirect_protocol"))
}

func (ura UrlRedirectActionAttributes) RedirectType() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("redirect_type"))
}

type UrlRewriteActionAttributes struct {
	ref terra.Reference
}

func (ura UrlRewriteActionAttributes) InternalRef() (terra.Reference, error) {
	return ura.ref, nil
}

func (ura UrlRewriteActionAttributes) InternalWithRef(ref terra.Reference) UrlRewriteActionAttributes {
	return UrlRewriteActionAttributes{ref: ref}
}

func (ura UrlRewriteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ura.ref.InternalTokens()
}

func (ura UrlRewriteActionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination"))
}

func (ura UrlRewriteActionAttributes) PreserveUnmatchedPath() terra.BoolValue {
	return terra.ReferenceAsBool(ura.ref.Append("preserve_unmatched_path"))
}

func (ura UrlRewriteActionAttributes) SourcePattern() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("source_pattern"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ClientPortCondition() terra.ListValue[ClientPortConditionAttributes] {
	return terra.ReferenceAsList[ClientPortConditionAttributes](c.ref.Append("client_port_condition"))
}

func (c ConditionsAttributes) CookiesCondition() terra.ListValue[CookiesConditionAttributes] {
	return terra.ReferenceAsList[CookiesConditionAttributes](c.ref.Append("cookies_condition"))
}

func (c ConditionsAttributes) HostNameCondition() terra.ListValue[HostNameConditionAttributes] {
	return terra.ReferenceAsList[HostNameConditionAttributes](c.ref.Append("host_name_condition"))
}

func (c ConditionsAttributes) HttpVersionCondition() terra.ListValue[HttpVersionConditionAttributes] {
	return terra.ReferenceAsList[HttpVersionConditionAttributes](c.ref.Append("http_version_condition"))
}

func (c ConditionsAttributes) IsDeviceCondition() terra.ListValue[IsDeviceConditionAttributes] {
	return terra.ReferenceAsList[IsDeviceConditionAttributes](c.ref.Append("is_device_condition"))
}

func (c ConditionsAttributes) PostArgsCondition() terra.ListValue[PostArgsConditionAttributes] {
	return terra.ReferenceAsList[PostArgsConditionAttributes](c.ref.Append("post_args_condition"))
}

func (c ConditionsAttributes) QueryStringCondition() terra.ListValue[QueryStringConditionAttributes] {
	return terra.ReferenceAsList[QueryStringConditionAttributes](c.ref.Append("query_string_condition"))
}

func (c ConditionsAttributes) RemoteAddressCondition() terra.ListValue[RemoteAddressConditionAttributes] {
	return terra.ReferenceAsList[RemoteAddressConditionAttributes](c.ref.Append("remote_address_condition"))
}

func (c ConditionsAttributes) RequestBodyCondition() terra.ListValue[RequestBodyConditionAttributes] {
	return terra.ReferenceAsList[RequestBodyConditionAttributes](c.ref.Append("request_body_condition"))
}

func (c ConditionsAttributes) RequestHeaderCondition() terra.ListValue[RequestHeaderConditionAttributes] {
	return terra.ReferenceAsList[RequestHeaderConditionAttributes](c.ref.Append("request_header_condition"))
}

func (c ConditionsAttributes) RequestMethodCondition() terra.ListValue[RequestMethodConditionAttributes] {
	return terra.ReferenceAsList[RequestMethodConditionAttributes](c.ref.Append("request_method_condition"))
}

func (c ConditionsAttributes) RequestSchemeCondition() terra.ListValue[RequestSchemeConditionAttributes] {
	return terra.ReferenceAsList[RequestSchemeConditionAttributes](c.ref.Append("request_scheme_condition"))
}

func (c ConditionsAttributes) RequestUriCondition() terra.ListValue[RequestUriConditionAttributes] {
	return terra.ReferenceAsList[RequestUriConditionAttributes](c.ref.Append("request_uri_condition"))
}

func (c ConditionsAttributes) ServerPortCondition() terra.ListValue[ServerPortConditionAttributes] {
	return terra.ReferenceAsList[ServerPortConditionAttributes](c.ref.Append("server_port_condition"))
}

func (c ConditionsAttributes) SocketAddressCondition() terra.ListValue[SocketAddressConditionAttributes] {
	return terra.ReferenceAsList[SocketAddressConditionAttributes](c.ref.Append("socket_address_condition"))
}

func (c ConditionsAttributes) SslProtocolCondition() terra.ListValue[SslProtocolConditionAttributes] {
	return terra.ReferenceAsList[SslProtocolConditionAttributes](c.ref.Append("ssl_protocol_condition"))
}

func (c ConditionsAttributes) UrlFileExtensionCondition() terra.ListValue[UrlFileExtensionConditionAttributes] {
	return terra.ReferenceAsList[UrlFileExtensionConditionAttributes](c.ref.Append("url_file_extension_condition"))
}

func (c ConditionsAttributes) UrlFilenameCondition() terra.ListValue[UrlFilenameConditionAttributes] {
	return terra.ReferenceAsList[UrlFilenameConditionAttributes](c.ref.Append("url_filename_condition"))
}

func (c ConditionsAttributes) UrlPathCondition() terra.ListValue[UrlPathConditionAttributes] {
	return terra.ReferenceAsList[UrlPathConditionAttributes](c.ref.Append("url_path_condition"))
}

type ClientPortConditionAttributes struct {
	ref terra.Reference
}

func (cpc ClientPortConditionAttributes) InternalRef() (terra.Reference, error) {
	return cpc.ref, nil
}

func (cpc ClientPortConditionAttributes) InternalWithRef(ref terra.Reference) ClientPortConditionAttributes {
	return ClientPortConditionAttributes{ref: ref}
}

func (cpc ClientPortConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpc.ref.InternalTokens()
}

func (cpc ClientPortConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cpc.ref.Append("match_values"))
}

func (cpc ClientPortConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(cpc.ref.Append("negate_condition"))
}

func (cpc ClientPortConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(cpc.ref.Append("operator"))
}

type CookiesConditionAttributes struct {
	ref terra.Reference
}

func (cc CookiesConditionAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CookiesConditionAttributes) InternalWithRef(ref terra.Reference) CookiesConditionAttributes {
	return CookiesConditionAttributes{ref: ref}
}

func (cc CookiesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CookiesConditionAttributes) CookieName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("cookie_name"))
}

func (cc CookiesConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("match_values"))
}

func (cc CookiesConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("negate_condition"))
}

func (cc CookiesConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("operator"))
}

func (cc CookiesConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("transforms"))
}

type HostNameConditionAttributes struct {
	ref terra.Reference
}

func (hnc HostNameConditionAttributes) InternalRef() (terra.Reference, error) {
	return hnc.ref, nil
}

func (hnc HostNameConditionAttributes) InternalWithRef(ref terra.Reference) HostNameConditionAttributes {
	return HostNameConditionAttributes{ref: ref}
}

func (hnc HostNameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hnc.ref.InternalTokens()
}

func (hnc HostNameConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hnc.ref.Append("match_values"))
}

func (hnc HostNameConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(hnc.ref.Append("negate_condition"))
}

func (hnc HostNameConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(hnc.ref.Append("operator"))
}

func (hnc HostNameConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hnc.ref.Append("transforms"))
}

type HttpVersionConditionAttributes struct {
	ref terra.Reference
}

func (hvc HttpVersionConditionAttributes) InternalRef() (terra.Reference, error) {
	return hvc.ref, nil
}

func (hvc HttpVersionConditionAttributes) InternalWithRef(ref terra.Reference) HttpVersionConditionAttributes {
	return HttpVersionConditionAttributes{ref: ref}
}

func (hvc HttpVersionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hvc.ref.InternalTokens()
}

func (hvc HttpVersionConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hvc.ref.Append("match_values"))
}

func (hvc HttpVersionConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(hvc.ref.Append("negate_condition"))
}

func (hvc HttpVersionConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(hvc.ref.Append("operator"))
}

type IsDeviceConditionAttributes struct {
	ref terra.Reference
}

func (idc IsDeviceConditionAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc IsDeviceConditionAttributes) InternalWithRef(ref terra.Reference) IsDeviceConditionAttributes {
	return IsDeviceConditionAttributes{ref: ref}
}

func (idc IsDeviceConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc IsDeviceConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](idc.ref.Append("match_values"))
}

func (idc IsDeviceConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(idc.ref.Append("negate_condition"))
}

func (idc IsDeviceConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("operator"))
}

type PostArgsConditionAttributes struct {
	ref terra.Reference
}

func (pac PostArgsConditionAttributes) InternalRef() (terra.Reference, error) {
	return pac.ref, nil
}

func (pac PostArgsConditionAttributes) InternalWithRef(ref terra.Reference) PostArgsConditionAttributes {
	return PostArgsConditionAttributes{ref: ref}
}

func (pac PostArgsConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pac.ref.InternalTokens()
}

func (pac PostArgsConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pac.ref.Append("match_values"))
}

func (pac PostArgsConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(pac.ref.Append("negate_condition"))
}

func (pac PostArgsConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(pac.ref.Append("operator"))
}

func (pac PostArgsConditionAttributes) PostArgsName() terra.StringValue {
	return terra.ReferenceAsString(pac.ref.Append("post_args_name"))
}

func (pac PostArgsConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pac.ref.Append("transforms"))
}

type QueryStringConditionAttributes struct {
	ref terra.Reference
}

func (qsc QueryStringConditionAttributes) InternalRef() (terra.Reference, error) {
	return qsc.ref, nil
}

func (qsc QueryStringConditionAttributes) InternalWithRef(ref terra.Reference) QueryStringConditionAttributes {
	return QueryStringConditionAttributes{ref: ref}
}

func (qsc QueryStringConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qsc.ref.InternalTokens()
}

func (qsc QueryStringConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](qsc.ref.Append("match_values"))
}

func (qsc QueryStringConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(qsc.ref.Append("negate_condition"))
}

func (qsc QueryStringConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(qsc.ref.Append("operator"))
}

func (qsc QueryStringConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](qsc.ref.Append("transforms"))
}

type RemoteAddressConditionAttributes struct {
	ref terra.Reference
}

func (rac RemoteAddressConditionAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac RemoteAddressConditionAttributes) InternalWithRef(ref terra.Reference) RemoteAddressConditionAttributes {
	return RemoteAddressConditionAttributes{ref: ref}
}

func (rac RemoteAddressConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac RemoteAddressConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rac.ref.Append("match_values"))
}

func (rac RemoteAddressConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rac.ref.Append("negate_condition"))
}

func (rac RemoteAddressConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("operator"))
}

type RequestBodyConditionAttributes struct {
	ref terra.Reference
}

func (rbc RequestBodyConditionAttributes) InternalRef() (terra.Reference, error) {
	return rbc.ref, nil
}

func (rbc RequestBodyConditionAttributes) InternalWithRef(ref terra.Reference) RequestBodyConditionAttributes {
	return RequestBodyConditionAttributes{ref: ref}
}

func (rbc RequestBodyConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbc.ref.InternalTokens()
}

func (rbc RequestBodyConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rbc.ref.Append("match_values"))
}

func (rbc RequestBodyConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rbc.ref.Append("negate_condition"))
}

func (rbc RequestBodyConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("operator"))
}

func (rbc RequestBodyConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rbc.ref.Append("transforms"))
}

type RequestHeaderConditionAttributes struct {
	ref terra.Reference
}

func (rhc RequestHeaderConditionAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc RequestHeaderConditionAttributes) InternalWithRef(ref terra.Reference) RequestHeaderConditionAttributes {
	return RequestHeaderConditionAttributes{ref: ref}
}

func (rhc RequestHeaderConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc RequestHeaderConditionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc RequestHeaderConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhc.ref.Append("match_values"))
}

func (rhc RequestHeaderConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rhc.ref.Append("negate_condition"))
}

func (rhc RequestHeaderConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("operator"))
}

func (rhc RequestHeaderConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rhc.ref.Append("transforms"))
}

type RequestMethodConditionAttributes struct {
	ref terra.Reference
}

func (rmc RequestMethodConditionAttributes) InternalRef() (terra.Reference, error) {
	return rmc.ref, nil
}

func (rmc RequestMethodConditionAttributes) InternalWithRef(ref terra.Reference) RequestMethodConditionAttributes {
	return RequestMethodConditionAttributes{ref: ref}
}

func (rmc RequestMethodConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmc.ref.InternalTokens()
}

func (rmc RequestMethodConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rmc.ref.Append("match_values"))
}

func (rmc RequestMethodConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rmc.ref.Append("negate_condition"))
}

func (rmc RequestMethodConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rmc.ref.Append("operator"))
}

type RequestSchemeConditionAttributes struct {
	ref terra.Reference
}

func (rsc RequestSchemeConditionAttributes) InternalRef() (terra.Reference, error) {
	return rsc.ref, nil
}

func (rsc RequestSchemeConditionAttributes) InternalWithRef(ref terra.Reference) RequestSchemeConditionAttributes {
	return RequestSchemeConditionAttributes{ref: ref}
}

func (rsc RequestSchemeConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rsc.ref.InternalTokens()
}

func (rsc RequestSchemeConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rsc.ref.Append("match_values"))
}

func (rsc RequestSchemeConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rsc.ref.Append("negate_condition"))
}

func (rsc RequestSchemeConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rsc.ref.Append("operator"))
}

type RequestUriConditionAttributes struct {
	ref terra.Reference
}

func (ruc RequestUriConditionAttributes) InternalRef() (terra.Reference, error) {
	return ruc.ref, nil
}

func (ruc RequestUriConditionAttributes) InternalWithRef(ref terra.Reference) RequestUriConditionAttributes {
	return RequestUriConditionAttributes{ref: ref}
}

func (ruc RequestUriConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ruc.ref.InternalTokens()
}

func (ruc RequestUriConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ruc.ref.Append("match_values"))
}

func (ruc RequestUriConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ruc.ref.Append("negate_condition"))
}

func (ruc RequestUriConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ruc.ref.Append("operator"))
}

func (ruc RequestUriConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ruc.ref.Append("transforms"))
}

type ServerPortConditionAttributes struct {
	ref terra.Reference
}

func (spc ServerPortConditionAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc ServerPortConditionAttributes) InternalWithRef(ref terra.Reference) ServerPortConditionAttributes {
	return ServerPortConditionAttributes{ref: ref}
}

func (spc ServerPortConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc ServerPortConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](spc.ref.Append("match_values"))
}

func (spc ServerPortConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(spc.ref.Append("negate_condition"))
}

func (spc ServerPortConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("operator"))
}

type SocketAddressConditionAttributes struct {
	ref terra.Reference
}

func (sac SocketAddressConditionAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac SocketAddressConditionAttributes) InternalWithRef(ref terra.Reference) SocketAddressConditionAttributes {
	return SocketAddressConditionAttributes{ref: ref}
}

func (sac SocketAddressConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac SocketAddressConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sac.ref.Append("match_values"))
}

func (sac SocketAddressConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(sac.ref.Append("negate_condition"))
}

func (sac SocketAddressConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("operator"))
}

type SslProtocolConditionAttributes struct {
	ref terra.Reference
}

func (spc SslProtocolConditionAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc SslProtocolConditionAttributes) InternalWithRef(ref terra.Reference) SslProtocolConditionAttributes {
	return SslProtocolConditionAttributes{ref: ref}
}

func (spc SslProtocolConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc SslProtocolConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](spc.ref.Append("match_values"))
}

func (spc SslProtocolConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(spc.ref.Append("negate_condition"))
}

func (spc SslProtocolConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("operator"))
}

type UrlFileExtensionConditionAttributes struct {
	ref terra.Reference
}

func (ufec UrlFileExtensionConditionAttributes) InternalRef() (terra.Reference, error) {
	return ufec.ref, nil
}

func (ufec UrlFileExtensionConditionAttributes) InternalWithRef(ref terra.Reference) UrlFileExtensionConditionAttributes {
	return UrlFileExtensionConditionAttributes{ref: ref}
}

func (ufec UrlFileExtensionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ufec.ref.InternalTokens()
}

func (ufec UrlFileExtensionConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ufec.ref.Append("match_values"))
}

func (ufec UrlFileExtensionConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ufec.ref.Append("negate_condition"))
}

func (ufec UrlFileExtensionConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ufec.ref.Append("operator"))
}

func (ufec UrlFileExtensionConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ufec.ref.Append("transforms"))
}

type UrlFilenameConditionAttributes struct {
	ref terra.Reference
}

func (ufc UrlFilenameConditionAttributes) InternalRef() (terra.Reference, error) {
	return ufc.ref, nil
}

func (ufc UrlFilenameConditionAttributes) InternalWithRef(ref terra.Reference) UrlFilenameConditionAttributes {
	return UrlFilenameConditionAttributes{ref: ref}
}

func (ufc UrlFilenameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ufc.ref.InternalTokens()
}

func (ufc UrlFilenameConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ufc.ref.Append("match_values"))
}

func (ufc UrlFilenameConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ufc.ref.Append("negate_condition"))
}

func (ufc UrlFilenameConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ufc.ref.Append("operator"))
}

func (ufc UrlFilenameConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ufc.ref.Append("transforms"))
}

type UrlPathConditionAttributes struct {
	ref terra.Reference
}

func (upc UrlPathConditionAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc UrlPathConditionAttributes) InternalWithRef(ref terra.Reference) UrlPathConditionAttributes {
	return UrlPathConditionAttributes{ref: ref}
}

func (upc UrlPathConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc UrlPathConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](upc.ref.Append("match_values"))
}

func (upc UrlPathConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(upc.ref.Append("negate_condition"))
}

func (upc UrlPathConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("operator"))
}

func (upc UrlPathConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](upc.ref.Append("transforms"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionsState struct {
	RequestHeaderAction              []RequestHeaderActionState              `json:"request_header_action"`
	ResponseHeaderAction             []ResponseHeaderActionState             `json:"response_header_action"`
	RouteConfigurationOverrideAction []RouteConfigurationOverrideActionState `json:"route_configuration_override_action"`
	UrlRedirectAction                []UrlRedirectActionState                `json:"url_redirect_action"`
	UrlRewriteAction                 []UrlRewriteActionState                 `json:"url_rewrite_action"`
}

type RequestHeaderActionState struct {
	HeaderAction string `json:"header_action"`
	HeaderName   string `json:"header_name"`
	Value        string `json:"value"`
}

type ResponseHeaderActionState struct {
	HeaderAction string `json:"header_action"`
	HeaderName   string `json:"header_name"`
	Value        string `json:"value"`
}

type RouteConfigurationOverrideActionState struct {
	CacheBehavior              string   `json:"cache_behavior"`
	CacheDuration              string   `json:"cache_duration"`
	CdnFrontdoorOriginGroupId  string   `json:"cdn_frontdoor_origin_group_id"`
	CompressionEnabled         bool     `json:"compression_enabled"`
	ForwardingProtocol         string   `json:"forwarding_protocol"`
	QueryStringCachingBehavior string   `json:"query_string_caching_behavior"`
	QueryStringParameters      []string `json:"query_string_parameters"`
}

type UrlRedirectActionState struct {
	DestinationFragment string `json:"destination_fragment"`
	DestinationHostname string `json:"destination_hostname"`
	DestinationPath     string `json:"destination_path"`
	QueryString         string `json:"query_string"`
	RedirectProtocol    string `json:"redirect_protocol"`
	RedirectType        string `json:"redirect_type"`
}

type UrlRewriteActionState struct {
	Destination           string `json:"destination"`
	PreserveUnmatchedPath bool   `json:"preserve_unmatched_path"`
	SourcePattern         string `json:"source_pattern"`
}

type ConditionsState struct {
	ClientPortCondition       []ClientPortConditionState       `json:"client_port_condition"`
	CookiesCondition          []CookiesConditionState          `json:"cookies_condition"`
	HostNameCondition         []HostNameConditionState         `json:"host_name_condition"`
	HttpVersionCondition      []HttpVersionConditionState      `json:"http_version_condition"`
	IsDeviceCondition         []IsDeviceConditionState         `json:"is_device_condition"`
	PostArgsCondition         []PostArgsConditionState         `json:"post_args_condition"`
	QueryStringCondition      []QueryStringConditionState      `json:"query_string_condition"`
	RemoteAddressCondition    []RemoteAddressConditionState    `json:"remote_address_condition"`
	RequestBodyCondition      []RequestBodyConditionState      `json:"request_body_condition"`
	RequestHeaderCondition    []RequestHeaderConditionState    `json:"request_header_condition"`
	RequestMethodCondition    []RequestMethodConditionState    `json:"request_method_condition"`
	RequestSchemeCondition    []RequestSchemeConditionState    `json:"request_scheme_condition"`
	RequestUriCondition       []RequestUriConditionState       `json:"request_uri_condition"`
	ServerPortCondition       []ServerPortConditionState       `json:"server_port_condition"`
	SocketAddressCondition    []SocketAddressConditionState    `json:"socket_address_condition"`
	SslProtocolCondition      []SslProtocolConditionState      `json:"ssl_protocol_condition"`
	UrlFileExtensionCondition []UrlFileExtensionConditionState `json:"url_file_extension_condition"`
	UrlFilenameCondition      []UrlFilenameConditionState      `json:"url_filename_condition"`
	UrlPathCondition          []UrlPathConditionState          `json:"url_path_condition"`
}

type ClientPortConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type CookiesConditionState struct {
	CookieName      string   `json:"cookie_name"`
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type HostNameConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type HttpVersionConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type IsDeviceConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type PostArgsConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	PostArgsName    string   `json:"post_args_name"`
	Transforms      []string `json:"transforms"`
}

type QueryStringConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type RemoteAddressConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type RequestBodyConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type RequestHeaderConditionState struct {
	HeaderName      string   `json:"header_name"`
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type RequestMethodConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type RequestSchemeConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type RequestUriConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ServerPortConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type SocketAddressConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type SslProtocolConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type UrlFileExtensionConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type UrlFilenameConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type UrlPathConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
