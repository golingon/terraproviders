// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticsdatasourcewindowsperformancecounter "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticsdatasourcewindowsperformancecounter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsDatasourceWindowsPerformanceCounter(name string, args LogAnalyticsDatasourceWindowsPerformanceCounterArgs) *LogAnalyticsDatasourceWindowsPerformanceCounter {
	return &LogAnalyticsDatasourceWindowsPerformanceCounter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsDatasourceWindowsPerformanceCounter)(nil)

type LogAnalyticsDatasourceWindowsPerformanceCounter struct {
	Name  string
	Args  LogAnalyticsDatasourceWindowsPerformanceCounterArgs
	state *logAnalyticsDatasourceWindowsPerformanceCounterState
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) Type() string {
	return "azurerm_log_analytics_datasource_windows_performance_counter"
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) LocalName() string {
	return ladwpc.Name
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) Configuration() interface{} {
	return ladwpc.Args
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) Attributes() logAnalyticsDatasourceWindowsPerformanceCounterAttributes {
	return logAnalyticsDatasourceWindowsPerformanceCounterAttributes{ref: terra.ReferenceResource(ladwpc)}
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) ImportState(av io.Reader) error {
	ladwpc.state = &logAnalyticsDatasourceWindowsPerformanceCounterState{}
	if err := json.NewDecoder(av).Decode(ladwpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ladwpc.Type(), ladwpc.LocalName(), err)
	}
	return nil
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) State() (*logAnalyticsDatasourceWindowsPerformanceCounterState, bool) {
	return ladwpc.state, ladwpc.state != nil
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) StateMust() *logAnalyticsDatasourceWindowsPerformanceCounterState {
	if ladwpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ladwpc.Type(), ladwpc.LocalName()))
	}
	return ladwpc.state
}

func (ladwpc *LogAnalyticsDatasourceWindowsPerformanceCounter) DependOn() terra.Reference {
	return terra.ReferenceResource(ladwpc)
}

type LogAnalyticsDatasourceWindowsPerformanceCounterArgs struct {
	// CounterName: string, required
	CounterName terra.StringValue `hcl:"counter_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// IntervalSeconds: number, required
	IntervalSeconds terra.NumberValue `hcl:"interval_seconds,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ObjectName: string, required
	ObjectName terra.StringValue `hcl:"object_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// WorkspaceName: string, required
	WorkspaceName terra.StringValue `hcl:"workspace_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *loganalyticsdatasourcewindowsperformancecounter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsDatasourceWindowsPerformanceCounter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsDatasourceWindowsPerformanceCounterAttributes struct {
	ref terra.Reference
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) CounterName() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("counter_name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("id"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("instance_name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) IntervalSeconds() terra.NumberValue {
	return terra.ReferenceNumber(ladwpc.ref.Append("interval_seconds"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) ObjectName() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("object_name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("resource_group_name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) WorkspaceName() terra.StringValue {
	return terra.ReferenceString(ladwpc.ref.Append("workspace_name"))
}

func (ladwpc logAnalyticsDatasourceWindowsPerformanceCounterAttributes) Timeouts() loganalyticsdatasourcewindowsperformancecounter.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticsdatasourcewindowsperformancecounter.TimeoutsAttributes](ladwpc.ref.Append("timeouts"))
}

type logAnalyticsDatasourceWindowsPerformanceCounterState struct {
	CounterName       string                                                         `json:"counter_name"`
	Id                string                                                         `json:"id"`
	InstanceName      string                                                         `json:"instance_name"`
	IntervalSeconds   float64                                                        `json:"interval_seconds"`
	Name              string                                                         `json:"name"`
	ObjectName        string                                                         `json:"object_name"`
	ResourceGroupName string                                                         `json:"resource_group_name"`
	WorkspaceName     string                                                         `json:"workspace_name"`
	Timeouts          *loganalyticsdatasourcewindowsperformancecounter.TimeoutsState `json:"timeouts"`
}
