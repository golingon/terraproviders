// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsemanagedprivateendpoint "github.com/golingon/terraproviders/azurerm/3.49.0/synapsemanagedprivateendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseManagedPrivateEndpoint(name string, args SynapseManagedPrivateEndpointArgs) *SynapseManagedPrivateEndpoint {
	return &SynapseManagedPrivateEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseManagedPrivateEndpoint)(nil)

type SynapseManagedPrivateEndpoint struct {
	Name  string
	Args  SynapseManagedPrivateEndpointArgs
	state *synapseManagedPrivateEndpointState
}

func (smpe *SynapseManagedPrivateEndpoint) Type() string {
	return "azurerm_synapse_managed_private_endpoint"
}

func (smpe *SynapseManagedPrivateEndpoint) LocalName() string {
	return smpe.Name
}

func (smpe *SynapseManagedPrivateEndpoint) Configuration() interface{} {
	return smpe.Args
}

func (smpe *SynapseManagedPrivateEndpoint) Attributes() synapseManagedPrivateEndpointAttributes {
	return synapseManagedPrivateEndpointAttributes{ref: terra.ReferenceResource(smpe)}
}

func (smpe *SynapseManagedPrivateEndpoint) ImportState(av io.Reader) error {
	smpe.state = &synapseManagedPrivateEndpointState{}
	if err := json.NewDecoder(av).Decode(smpe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smpe.Type(), smpe.LocalName(), err)
	}
	return nil
}

func (smpe *SynapseManagedPrivateEndpoint) State() (*synapseManagedPrivateEndpointState, bool) {
	return smpe.state, smpe.state != nil
}

func (smpe *SynapseManagedPrivateEndpoint) StateMust() *synapseManagedPrivateEndpointState {
	if smpe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smpe.Type(), smpe.LocalName()))
	}
	return smpe.state
}

func (smpe *SynapseManagedPrivateEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(smpe)
}

type SynapseManagedPrivateEndpointArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubresourceName: string, required
	SubresourceName terra.StringValue `hcl:"subresource_name,attr" validate:"required"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *synapsemanagedprivateendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseManagedPrivateEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseManagedPrivateEndpointAttributes struct {
	ref terra.Reference
}

func (smpe synapseManagedPrivateEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smpe.ref.Append("id"))
}

func (smpe synapseManagedPrivateEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smpe.ref.Append("name"))
}

func (smpe synapseManagedPrivateEndpointAttributes) SubresourceName() terra.StringValue {
	return terra.ReferenceString(smpe.ref.Append("subresource_name"))
}

func (smpe synapseManagedPrivateEndpointAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(smpe.ref.Append("synapse_workspace_id"))
}

func (smpe synapseManagedPrivateEndpointAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(smpe.ref.Append("target_resource_id"))
}

func (smpe synapseManagedPrivateEndpointAttributes) Timeouts() synapsemanagedprivateendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsemanagedprivateendpoint.TimeoutsAttributes](smpe.ref.Append("timeouts"))
}

type synapseManagedPrivateEndpointState struct {
	Id                 string                                       `json:"id"`
	Name               string                                       `json:"name"`
	SubresourceName    string                                       `json:"subresource_name"`
	SynapseWorkspaceId string                                       `json:"synapse_workspace_id"`
	TargetResourceId   string                                       `json:"target_resource_id"`
	Timeouts           *synapsemanagedprivateendpoint.TimeoutsState `json:"timeouts"`
}
