// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	natgatewaypublicipassociation "github.com/golingon/terraproviders/azurerm/3.49.0/natgatewaypublicipassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNatGatewayPublicIpAssociation(name string, args NatGatewayPublicIpAssociationArgs) *NatGatewayPublicIpAssociation {
	return &NatGatewayPublicIpAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NatGatewayPublicIpAssociation)(nil)

type NatGatewayPublicIpAssociation struct {
	Name  string
	Args  NatGatewayPublicIpAssociationArgs
	state *natGatewayPublicIpAssociationState
}

func (ngpia *NatGatewayPublicIpAssociation) Type() string {
	return "azurerm_nat_gateway_public_ip_association"
}

func (ngpia *NatGatewayPublicIpAssociation) LocalName() string {
	return ngpia.Name
}

func (ngpia *NatGatewayPublicIpAssociation) Configuration() interface{} {
	return ngpia.Args
}

func (ngpia *NatGatewayPublicIpAssociation) Attributes() natGatewayPublicIpAssociationAttributes {
	return natGatewayPublicIpAssociationAttributes{ref: terra.ReferenceResource(ngpia)}
}

func (ngpia *NatGatewayPublicIpAssociation) ImportState(av io.Reader) error {
	ngpia.state = &natGatewayPublicIpAssociationState{}
	if err := json.NewDecoder(av).Decode(ngpia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ngpia.Type(), ngpia.LocalName(), err)
	}
	return nil
}

func (ngpia *NatGatewayPublicIpAssociation) State() (*natGatewayPublicIpAssociationState, bool) {
	return ngpia.state, ngpia.state != nil
}

func (ngpia *NatGatewayPublicIpAssociation) StateMust() *natGatewayPublicIpAssociationState {
	if ngpia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ngpia.Type(), ngpia.LocalName()))
	}
	return ngpia.state
}

func (ngpia *NatGatewayPublicIpAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ngpia)
}

type NatGatewayPublicIpAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NatGatewayId: string, required
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr" validate:"required"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *natgatewaypublicipassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NatGatewayPublicIpAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type natGatewayPublicIpAssociationAttributes struct {
	ref terra.Reference
}

func (ngpia natGatewayPublicIpAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ngpia.ref.Append("id"))
}

func (ngpia natGatewayPublicIpAssociationAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceString(ngpia.ref.Append("nat_gateway_id"))
}

func (ngpia natGatewayPublicIpAssociationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceString(ngpia.ref.Append("public_ip_address_id"))
}

func (ngpia natGatewayPublicIpAssociationAttributes) Timeouts() natgatewaypublicipassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[natgatewaypublicipassociation.TimeoutsAttributes](ngpia.ref.Append("timeouts"))
}

type natGatewayPublicIpAssociationState struct {
	Id                string                                       `json:"id"`
	NatGatewayId      string                                       `json:"nat_gateway_id"`
	PublicIpAddressId string                                       `json:"public_ip_address_id"`
	Timeouts          *natgatewaypublicipassociation.TimeoutsState `json:"timeouts"`
}
