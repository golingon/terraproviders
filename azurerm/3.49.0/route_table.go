// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	routetable "github.com/golingon/terraproviders/azurerm/3.49.0/routetable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRouteTable(name string, args RouteTableArgs) *RouteTable {
	return &RouteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RouteTable)(nil)

type RouteTable struct {
	Name  string
	Args  RouteTableArgs
	state *routeTableState
}

func (rt *RouteTable) Type() string {
	return "azurerm_route_table"
}

func (rt *RouteTable) LocalName() string {
	return rt.Name
}

func (rt *RouteTable) Configuration() interface{} {
	return rt.Args
}

func (rt *RouteTable) Attributes() routeTableAttributes {
	return routeTableAttributes{ref: terra.ReferenceResource(rt)}
}

func (rt *RouteTable) ImportState(av io.Reader) error {
	rt.state = &routeTableState{}
	if err := json.NewDecoder(av).Decode(rt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rt.Type(), rt.LocalName(), err)
	}
	return nil
}

func (rt *RouteTable) State() (*routeTableState, bool) {
	return rt.state, rt.state != nil
}

func (rt *RouteTable) StateMust() *routeTableState {
	if rt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rt.Type(), rt.LocalName()))
	}
	return rt.state
}

func (rt *RouteTable) DependOn() terra.Reference {
	return terra.ReferenceResource(rt)
}

type RouteTableArgs struct {
	// DisableBgpRoutePropagation: bool, optional
	DisableBgpRoutePropagation terra.BoolValue `hcl:"disable_bgp_route_propagation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Route: min=0
	Route []routetable.Route `hcl:"route,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *routetable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RouteTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type routeTableAttributes struct {
	ref terra.Reference
}

func (rt routeTableAttributes) DisableBgpRoutePropagation() terra.BoolValue {
	return terra.ReferenceBool(rt.ref.Append("disable_bgp_route_propagation"))
}

func (rt routeTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("id"))
}

func (rt routeTableAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("location"))
}

func (rt routeTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("name"))
}

func (rt routeTableAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("resource_group_name"))
}

func (rt routeTableAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rt.ref.Append("subnets"))
}

func (rt routeTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rt.ref.Append("tags"))
}

func (rt routeTableAttributes) Route() terra.SetValue[routetable.RouteAttributes] {
	return terra.ReferenceSet[routetable.RouteAttributes](rt.ref.Append("route"))
}

func (rt routeTableAttributes) Timeouts() routetable.TimeoutsAttributes {
	return terra.ReferenceSingle[routetable.TimeoutsAttributes](rt.ref.Append("timeouts"))
}

type routeTableState struct {
	DisableBgpRoutePropagation bool                      `json:"disable_bgp_route_propagation"`
	Id                         string                    `json:"id"`
	Location                   string                    `json:"location"`
	Name                       string                    `json:"name"`
	ResourceGroupName          string                    `json:"resource_group_name"`
	Subnets                    []string                  `json:"subnets"`
	Tags                       map[string]string         `json:"tags"`
	Route                      []routetable.RouteState   `json:"route"`
	Timeouts                   *routetable.TimeoutsState `json:"timeouts"`
}
