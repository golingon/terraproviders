// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementgateway "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementGateway(name string, args ApiManagementGatewayArgs) *ApiManagementGateway {
	return &ApiManagementGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementGateway)(nil)

type ApiManagementGateway struct {
	Name  string
	Args  ApiManagementGatewayArgs
	state *apiManagementGatewayState
}

func (amg *ApiManagementGateway) Type() string {
	return "azurerm_api_management_gateway"
}

func (amg *ApiManagementGateway) LocalName() string {
	return amg.Name
}

func (amg *ApiManagementGateway) Configuration() interface{} {
	return amg.Args
}

func (amg *ApiManagementGateway) Attributes() apiManagementGatewayAttributes {
	return apiManagementGatewayAttributes{ref: terra.ReferenceResource(amg)}
}

func (amg *ApiManagementGateway) ImportState(av io.Reader) error {
	amg.state = &apiManagementGatewayState{}
	if err := json.NewDecoder(av).Decode(amg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amg.Type(), amg.LocalName(), err)
	}
	return nil
}

func (amg *ApiManagementGateway) State() (*apiManagementGatewayState, bool) {
	return amg.state, amg.state != nil
}

func (amg *ApiManagementGateway) StateMust() *apiManagementGatewayState {
	if amg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amg.Type(), amg.LocalName()))
	}
	return amg.state
}

func (amg *ApiManagementGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(amg)
}

type ApiManagementGatewayArgs struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// LocationData: required
	LocationData *apimanagementgateway.LocationData `hcl:"location_data,block" validate:"required"`
	// Timeouts: optional
	Timeouts *apimanagementgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementGatewayAttributes struct {
	ref terra.Reference
}

func (amg apiManagementGatewayAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceString(amg.ref.Append("api_management_id"))
}

func (amg apiManagementGatewayAttributes) Description() terra.StringValue {
	return terra.ReferenceString(amg.ref.Append("description"))
}

func (amg apiManagementGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amg.ref.Append("id"))
}

func (amg apiManagementGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amg.ref.Append("name"))
}

func (amg apiManagementGatewayAttributes) LocationData() terra.ListValue[apimanagementgateway.LocationDataAttributes] {
	return terra.ReferenceList[apimanagementgateway.LocationDataAttributes](amg.ref.Append("location_data"))
}

func (amg apiManagementGatewayAttributes) Timeouts() apimanagementgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementgateway.TimeoutsAttributes](amg.ref.Append("timeouts"))
}

type apiManagementGatewayState struct {
	ApiManagementId string                                   `json:"api_management_id"`
	Description     string                                   `json:"description"`
	Id              string                                   `json:"id"`
	Name            string                                   `json:"name"`
	LocationData    []apimanagementgateway.LocationDataState `json:"location_data"`
	Timeouts        *apimanagementgateway.TimeoutsState      `json:"timeouts"`
}
