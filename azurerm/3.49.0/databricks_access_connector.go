// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databricksaccessconnector "github.com/golingon/terraproviders/azurerm/3.49.0/databricksaccessconnector"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatabricksAccessConnector(name string, args DatabricksAccessConnectorArgs) *DatabricksAccessConnector {
	return &DatabricksAccessConnector{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabricksAccessConnector)(nil)

type DatabricksAccessConnector struct {
	Name  string
	Args  DatabricksAccessConnectorArgs
	state *databricksAccessConnectorState
}

func (dac *DatabricksAccessConnector) Type() string {
	return "azurerm_databricks_access_connector"
}

func (dac *DatabricksAccessConnector) LocalName() string {
	return dac.Name
}

func (dac *DatabricksAccessConnector) Configuration() interface{} {
	return dac.Args
}

func (dac *DatabricksAccessConnector) Attributes() databricksAccessConnectorAttributes {
	return databricksAccessConnectorAttributes{ref: terra.ReferenceResource(dac)}
}

func (dac *DatabricksAccessConnector) ImportState(av io.Reader) error {
	dac.state = &databricksAccessConnectorState{}
	if err := json.NewDecoder(av).Decode(dac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dac.Type(), dac.LocalName(), err)
	}
	return nil
}

func (dac *DatabricksAccessConnector) State() (*databricksAccessConnectorState, bool) {
	return dac.state, dac.state != nil
}

func (dac *DatabricksAccessConnector) StateMust() *databricksAccessConnectorState {
	if dac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dac.Type(), dac.LocalName()))
	}
	return dac.state
}

func (dac *DatabricksAccessConnector) DependOn() terra.Reference {
	return terra.ReferenceResource(dac)
}

type DatabricksAccessConnectorArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *databricksaccessconnector.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *databricksaccessconnector.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatabricksAccessConnector depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databricksAccessConnectorAttributes struct {
	ref terra.Reference
}

func (dac databricksAccessConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dac.ref.Append("id"))
}

func (dac databricksAccessConnectorAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dac.ref.Append("location"))
}

func (dac databricksAccessConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dac.ref.Append("name"))
}

func (dac databricksAccessConnectorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dac.ref.Append("resource_group_name"))
}

func (dac databricksAccessConnectorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dac.ref.Append("tags"))
}

func (dac databricksAccessConnectorAttributes) Identity() terra.ListValue[databricksaccessconnector.IdentityAttributes] {
	return terra.ReferenceList[databricksaccessconnector.IdentityAttributes](dac.ref.Append("identity"))
}

func (dac databricksAccessConnectorAttributes) Timeouts() databricksaccessconnector.TimeoutsAttributes {
	return terra.ReferenceSingle[databricksaccessconnector.TimeoutsAttributes](dac.ref.Append("timeouts"))
}

type databricksAccessConnectorState struct {
	Id                string                                    `json:"id"`
	Location          string                                    `json:"location"`
	Name              string                                    `json:"name"`
	ResourceGroupName string                                    `json:"resource_group_name"`
	Tags              map[string]string                         `json:"tags"`
	Identity          []databricksaccessconnector.IdentityState `json:"identity"`
	Timeouts          *databricksaccessconnector.TimeoutsState  `json:"timeouts"`
}
