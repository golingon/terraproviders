// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datanetappsnapshotpolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DailySchedule struct{}

type HourlySchedule struct{}

type MonthlySchedule struct{}

type WeeklySchedule struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DailyScheduleAttributes) InternalRef() terra.Reference {
	return ds.ref
}

func (ds DailyScheduleAttributes) InternalWithRef(ref terra.Reference) DailyScheduleAttributes {
	return DailyScheduleAttributes{ref: ref}
}

func (ds DailyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ds.ref.InternalTokens()
}

func (ds DailyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("hour"))
}

func (ds DailyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("minute"))
}

func (ds DailyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("snapshots_to_keep"))
}

type HourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs HourlyScheduleAttributes) InternalRef() terra.Reference {
	return hs.ref
}

func (hs HourlyScheduleAttributes) InternalWithRef(ref terra.Reference) HourlyScheduleAttributes {
	return HourlyScheduleAttributes{ref: ref}
}

func (hs HourlyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return hs.ref.InternalTokens()
}

func (hs HourlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceNumber(hs.ref.Append("minute"))
}

func (hs HourlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceNumber(hs.ref.Append("snapshots_to_keep"))
}

type MonthlyScheduleAttributes struct {
	ref terra.Reference
}

func (ms MonthlyScheduleAttributes) InternalRef() terra.Reference {
	return ms.ref
}

func (ms MonthlyScheduleAttributes) InternalWithRef(ref terra.Reference) MonthlyScheduleAttributes {
	return MonthlyScheduleAttributes{ref: ref}
}

func (ms MonthlyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms MonthlyScheduleAttributes) DaysOfMonth() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceSet[terra.NumberValue](ms.ref.Append("days_of_month"))
}

func (ms MonthlyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("hour"))
}

func (ms MonthlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("minute"))
}

func (ms MonthlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceNumber(ms.ref.Append("snapshots_to_keep"))
}

type WeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws WeeklyScheduleAttributes) InternalRef() terra.Reference {
	return ws.ref
}

func (ws WeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleAttributes {
	return WeeklyScheduleAttributes{ref: ref}
}

func (ws WeeklyScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ws.ref.InternalTokens()
}

func (ws WeeklyScheduleAttributes) DaysOfWeek() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ws.ref.Append("days_of_week"))
}

func (ws WeeklyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceNumber(ws.ref.Append("hour"))
}

func (ws WeeklyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceNumber(ws.ref.Append("minute"))
}

func (ws WeeklyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceNumber(ws.ref.Append("snapshots_to_keep"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type DailyScheduleState struct {
	Hour            float64 `json:"hour"`
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type HourlyScheduleState struct {
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type MonthlyScheduleState struct {
	DaysOfMonth     []float64 `json:"days_of_month"`
	Hour            float64   `json:"hour"`
	Minute          float64   `json:"minute"`
	SnapshotsToKeep float64   `json:"snapshots_to_keep"`
}

type WeeklyScheduleState struct {
	DaysOfWeek      []string `json:"days_of_week"`
	Hour            float64  `json:"hour"`
	Minute          float64  `json:"minute"`
	SnapshotsToKeep float64  `json:"snapshots_to_keep"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
