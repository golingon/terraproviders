// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagesharedirectory "github.com/golingon/terraproviders/azurerm/3.49.0/storagesharedirectory"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStorageShareDirectory(name string, args StorageShareDirectoryArgs) *StorageShareDirectory {
	return &StorageShareDirectory{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageShareDirectory)(nil)

type StorageShareDirectory struct {
	Name  string
	Args  StorageShareDirectoryArgs
	state *storageShareDirectoryState
}

func (ssd *StorageShareDirectory) Type() string {
	return "azurerm_storage_share_directory"
}

func (ssd *StorageShareDirectory) LocalName() string {
	return ssd.Name
}

func (ssd *StorageShareDirectory) Configuration() interface{} {
	return ssd.Args
}

func (ssd *StorageShareDirectory) Attributes() storageShareDirectoryAttributes {
	return storageShareDirectoryAttributes{ref: terra.ReferenceResource(ssd)}
}

func (ssd *StorageShareDirectory) ImportState(av io.Reader) error {
	ssd.state = &storageShareDirectoryState{}
	if err := json.NewDecoder(av).Decode(ssd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssd.Type(), ssd.LocalName(), err)
	}
	return nil
}

func (ssd *StorageShareDirectory) State() (*storageShareDirectoryState, bool) {
	return ssd.state, ssd.state != nil
}

func (ssd *StorageShareDirectory) StateMust() *storageShareDirectoryState {
	if ssd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssd.Type(), ssd.LocalName()))
	}
	return ssd.state
}

func (ssd *StorageShareDirectory) DependOn() terra.Reference {
	return terra.ReferenceResource(ssd)
}

type StorageShareDirectoryArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ShareName: string, required
	ShareName terra.StringValue `hcl:"share_name,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *storagesharedirectory.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StorageShareDirectory depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storageShareDirectoryAttributes struct {
	ref terra.Reference
}

func (ssd storageShareDirectoryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssd.ref.Append("id"))
}

func (ssd storageShareDirectoryAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssd.ref.Append("metadata"))
}

func (ssd storageShareDirectoryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssd.ref.Append("name"))
}

func (ssd storageShareDirectoryAttributes) ShareName() terra.StringValue {
	return terra.ReferenceString(ssd.ref.Append("share_name"))
}

func (ssd storageShareDirectoryAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(ssd.ref.Append("storage_account_name"))
}

func (ssd storageShareDirectoryAttributes) Timeouts() storagesharedirectory.TimeoutsAttributes {
	return terra.ReferenceSingle[storagesharedirectory.TimeoutsAttributes](ssd.ref.Append("timeouts"))
}

type storageShareDirectoryState struct {
	Id                 string                               `json:"id"`
	Metadata           map[string]string                    `json:"metadata"`
	Name               string                               `json:"name"`
	ShareName          string                               `json:"share_name"`
	StorageAccountName string                               `json:"storage_account_name"`
	Timeouts           *storagesharedirectory.TimeoutsState `json:"timeouts"`
}
