// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datadatasharedatasetblobstorage "github.com/golingon/terraproviders/azurerm/3.49.0/datadatasharedatasetblobstorage"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataDataShareDatasetBlobStorage(name string, args DataDataShareDatasetBlobStorageArgs) *DataDataShareDatasetBlobStorage {
	return &DataDataShareDatasetBlobStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataDataShareDatasetBlobStorage)(nil)

type DataDataShareDatasetBlobStorage struct {
	Name string
	Args DataDataShareDatasetBlobStorageArgs
}

func (dsdbs *DataDataShareDatasetBlobStorage) DataSource() string {
	return "azurerm_data_share_dataset_blob_storage"
}

func (dsdbs *DataDataShareDatasetBlobStorage) LocalName() string {
	return dsdbs.Name
}

func (dsdbs *DataDataShareDatasetBlobStorage) Configuration() interface{} {
	return dsdbs.Args
}

func (dsdbs *DataDataShareDatasetBlobStorage) Attributes() dataDataShareDatasetBlobStorageAttributes {
	return dataDataShareDatasetBlobStorageAttributes{ref: terra.ReferenceDataResource(dsdbs)}
}

type DataDataShareDatasetBlobStorageArgs struct {
	// DataShareId: string, required
	DataShareId terra.StringValue `hcl:"data_share_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccount: min=0
	StorageAccount []datadatasharedatasetblobstorage.StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datadatasharedatasetblobstorage.Timeouts `hcl:"timeouts,block"`
}
type dataDataShareDatasetBlobStorageAttributes struct {
	ref terra.Reference
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("container_name"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) DataShareId() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("data_share_id"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("display_name"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) FilePath() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("file_path"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) FolderPath() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("folder_path"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("id"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("name"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) StorageAccount() terra.ListValue[datadatasharedatasetblobstorage.StorageAccountAttributes] {
	return terra.ReferenceList[datadatasharedatasetblobstorage.StorageAccountAttributes](dsdbs.ref.Append("storage_account"))
}

func (dsdbs dataDataShareDatasetBlobStorageAttributes) Timeouts() datadatasharedatasetblobstorage.TimeoutsAttributes {
	return terra.ReferenceSingle[datadatasharedatasetblobstorage.TimeoutsAttributes](dsdbs.ref.Append("timeouts"))
}
