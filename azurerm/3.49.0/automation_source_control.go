// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationsourcecontrol "github.com/golingon/terraproviders/azurerm/3.49.0/automationsourcecontrol"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationSourceControl(name string, args AutomationSourceControlArgs) *AutomationSourceControl {
	return &AutomationSourceControl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationSourceControl)(nil)

type AutomationSourceControl struct {
	Name  string
	Args  AutomationSourceControlArgs
	state *automationSourceControlState
}

func (asc *AutomationSourceControl) Type() string {
	return "azurerm_automation_source_control"
}

func (asc *AutomationSourceControl) LocalName() string {
	return asc.Name
}

func (asc *AutomationSourceControl) Configuration() interface{} {
	return asc.Args
}

func (asc *AutomationSourceControl) Attributes() automationSourceControlAttributes {
	return automationSourceControlAttributes{ref: terra.ReferenceResource(asc)}
}

func (asc *AutomationSourceControl) ImportState(av io.Reader) error {
	asc.state = &automationSourceControlState{}
	if err := json.NewDecoder(av).Decode(asc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asc.Type(), asc.LocalName(), err)
	}
	return nil
}

func (asc *AutomationSourceControl) State() (*automationSourceControlState, bool) {
	return asc.state, asc.state != nil
}

func (asc *AutomationSourceControl) StateMust() *automationSourceControlState {
	if asc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asc.Type(), asc.LocalName()))
	}
	return asc.state
}

func (asc *AutomationSourceControl) DependOn() terra.Reference {
	return terra.ReferenceResource(asc)
}

type AutomationSourceControlArgs struct {
	// AutomaticSync: bool, optional
	AutomaticSync terra.BoolValue `hcl:"automatic_sync,attr"`
	// AutomationAccountId: string, required
	AutomationAccountId terra.StringValue `hcl:"automation_account_id,attr" validate:"required"`
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FolderPath: string, required
	FolderPath terra.StringValue `hcl:"folder_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublishRunbookEnabled: bool, optional
	PublishRunbookEnabled terra.BoolValue `hcl:"publish_runbook_enabled,attr"`
	// RepositoryUrl: string, required
	RepositoryUrl terra.StringValue `hcl:"repository_url,attr" validate:"required"`
	// SourceControlType: string, required
	SourceControlType terra.StringValue `hcl:"source_control_type,attr" validate:"required"`
	// Security: required
	Security *automationsourcecontrol.Security `hcl:"security,block" validate:"required"`
	// Timeouts: optional
	Timeouts *automationsourcecontrol.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationSourceControl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationSourceControlAttributes struct {
	ref terra.Reference
}

func (asc automationSourceControlAttributes) AutomaticSync() terra.BoolValue {
	return terra.ReferenceBool(asc.ref.Append("automatic_sync"))
}

func (asc automationSourceControlAttributes) AutomationAccountId() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("automation_account_id"))
}

func (asc automationSourceControlAttributes) Branch() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("branch"))
}

func (asc automationSourceControlAttributes) Description() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("description"))
}

func (asc automationSourceControlAttributes) FolderPath() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("folder_path"))
}

func (asc automationSourceControlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("id"))
}

func (asc automationSourceControlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("name"))
}

func (asc automationSourceControlAttributes) PublishRunbookEnabled() terra.BoolValue {
	return terra.ReferenceBool(asc.ref.Append("publish_runbook_enabled"))
}

func (asc automationSourceControlAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("repository_url"))
}

func (asc automationSourceControlAttributes) SourceControlType() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("source_control_type"))
}

func (asc automationSourceControlAttributes) Security() terra.ListValue[automationsourcecontrol.SecurityAttributes] {
	return terra.ReferenceList[automationsourcecontrol.SecurityAttributes](asc.ref.Append("security"))
}

func (asc automationSourceControlAttributes) Timeouts() automationsourcecontrol.TimeoutsAttributes {
	return terra.ReferenceSingle[automationsourcecontrol.TimeoutsAttributes](asc.ref.Append("timeouts"))
}

type automationSourceControlState struct {
	AutomaticSync         bool                                    `json:"automatic_sync"`
	AutomationAccountId   string                                  `json:"automation_account_id"`
	Branch                string                                  `json:"branch"`
	Description           string                                  `json:"description"`
	FolderPath            string                                  `json:"folder_path"`
	Id                    string                                  `json:"id"`
	Name                  string                                  `json:"name"`
	PublishRunbookEnabled bool                                    `json:"publish_runbook_enabled"`
	RepositoryUrl         string                                  `json:"repository_url"`
	SourceControlType     string                                  `json:"source_control_type"`
	Security              []automationsourcecontrol.SecurityState `json:"security"`
	Timeouts              *automationsourcecontrol.TimeoutsState  `json:"timeouts"`
}
