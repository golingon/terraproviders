// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dataprotectionbackupinstanceblobstorage "github.com/golingon/terraproviders/azurerm/3.49.0/dataprotectionbackupinstanceblobstorage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataProtectionBackupInstanceBlobStorage(name string, args DataProtectionBackupInstanceBlobStorageArgs) *DataProtectionBackupInstanceBlobStorage {
	return &DataProtectionBackupInstanceBlobStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataProtectionBackupInstanceBlobStorage)(nil)

type DataProtectionBackupInstanceBlobStorage struct {
	Name  string
	Args  DataProtectionBackupInstanceBlobStorageArgs
	state *dataProtectionBackupInstanceBlobStorageState
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) Type() string {
	return "azurerm_data_protection_backup_instance_blob_storage"
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) LocalName() string {
	return dpbibs.Name
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) Configuration() interface{} {
	return dpbibs.Args
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) Attributes() dataProtectionBackupInstanceBlobStorageAttributes {
	return dataProtectionBackupInstanceBlobStorageAttributes{ref: terra.ReferenceResource(dpbibs)}
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) ImportState(av io.Reader) error {
	dpbibs.state = &dataProtectionBackupInstanceBlobStorageState{}
	if err := json.NewDecoder(av).Decode(dpbibs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpbibs.Type(), dpbibs.LocalName(), err)
	}
	return nil
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) State() (*dataProtectionBackupInstanceBlobStorageState, bool) {
	return dpbibs.state, dpbibs.state != nil
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) StateMust() *dataProtectionBackupInstanceBlobStorageState {
	if dpbibs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpbibs.Type(), dpbibs.LocalName()))
	}
	return dpbibs.state
}

func (dpbibs *DataProtectionBackupInstanceBlobStorage) DependOn() terra.Reference {
	return terra.ReferenceResource(dpbibs)
}

type DataProtectionBackupInstanceBlobStorageArgs struct {
	// BackupPolicyId: string, required
	BackupPolicyId terra.StringValue `hcl:"backup_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// VaultId: string, required
	VaultId terra.StringValue `hcl:"vault_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dataprotectionbackupinstanceblobstorage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataProtectionBackupInstanceBlobStorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataProtectionBackupInstanceBlobStorageAttributes struct {
	ref terra.Reference
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) BackupPolicyId() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("backup_policy_id"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("id"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("location"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("name"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("storage_account_id"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) VaultId() terra.StringValue {
	return terra.ReferenceString(dpbibs.ref.Append("vault_id"))
}

func (dpbibs dataProtectionBackupInstanceBlobStorageAttributes) Timeouts() dataprotectionbackupinstanceblobstorage.TimeoutsAttributes {
	return terra.ReferenceSingle[dataprotectionbackupinstanceblobstorage.TimeoutsAttributes](dpbibs.ref.Append("timeouts"))
}

type dataProtectionBackupInstanceBlobStorageState struct {
	BackupPolicyId   string                                                 `json:"backup_policy_id"`
	Id               string                                                 `json:"id"`
	Location         string                                                 `json:"location"`
	Name             string                                                 `json:"name"`
	StorageAccountId string                                                 `json:"storage_account_id"`
	VaultId          string                                                 `json:"vault_id"`
	Timeouts         *dataprotectionbackupinstanceblobstorage.TimeoutsState `json:"timeouts"`
}
