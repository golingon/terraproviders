// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	siterecoveryreplicationrecoveryplan "github.com/golingon/terraproviders/azurerm/3.49.0/siterecoveryreplicationrecoveryplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSiteRecoveryReplicationRecoveryPlan(name string, args SiteRecoveryReplicationRecoveryPlanArgs) *SiteRecoveryReplicationRecoveryPlan {
	return &SiteRecoveryReplicationRecoveryPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SiteRecoveryReplicationRecoveryPlan)(nil)

type SiteRecoveryReplicationRecoveryPlan struct {
	Name  string
	Args  SiteRecoveryReplicationRecoveryPlanArgs
	state *siteRecoveryReplicationRecoveryPlanState
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) Type() string {
	return "azurerm_site_recovery_replication_recovery_plan"
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) LocalName() string {
	return srrrp.Name
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) Configuration() interface{} {
	return srrrp.Args
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) Attributes() siteRecoveryReplicationRecoveryPlanAttributes {
	return siteRecoveryReplicationRecoveryPlanAttributes{ref: terra.ReferenceResource(srrrp)}
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) ImportState(av io.Reader) error {
	srrrp.state = &siteRecoveryReplicationRecoveryPlanState{}
	if err := json.NewDecoder(av).Decode(srrrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srrrp.Type(), srrrp.LocalName(), err)
	}
	return nil
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) State() (*siteRecoveryReplicationRecoveryPlanState, bool) {
	return srrrp.state, srrrp.state != nil
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) StateMust() *siteRecoveryReplicationRecoveryPlanState {
	if srrrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srrrp.Type(), srrrp.LocalName()))
	}
	return srrrp.state
}

func (srrrp *SiteRecoveryReplicationRecoveryPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(srrrp)
}

type SiteRecoveryReplicationRecoveryPlanArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryVaultId: string, required
	RecoveryVaultId terra.StringValue `hcl:"recovery_vault_id,attr" validate:"required"`
	// SourceRecoveryFabricId: string, required
	SourceRecoveryFabricId terra.StringValue `hcl:"source_recovery_fabric_id,attr" validate:"required"`
	// TargetRecoveryFabricId: string, required
	TargetRecoveryFabricId terra.StringValue `hcl:"target_recovery_fabric_id,attr" validate:"required"`
	// RecoveryGroup: min=0
	RecoveryGroup []siterecoveryreplicationrecoveryplan.RecoveryGroup `hcl:"recovery_group,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *siterecoveryreplicationrecoveryplan.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SiteRecoveryReplicationRecoveryPlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type siteRecoveryReplicationRecoveryPlanAttributes struct {
	ref terra.Reference
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srrrp.ref.Append("id"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(srrrp.ref.Append("name"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) RecoveryVaultId() terra.StringValue {
	return terra.ReferenceString(srrrp.ref.Append("recovery_vault_id"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) SourceRecoveryFabricId() terra.StringValue {
	return terra.ReferenceString(srrrp.ref.Append("source_recovery_fabric_id"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) TargetRecoveryFabricId() terra.StringValue {
	return terra.ReferenceString(srrrp.ref.Append("target_recovery_fabric_id"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) RecoveryGroup() terra.SetValue[siterecoveryreplicationrecoveryplan.RecoveryGroupAttributes] {
	return terra.ReferenceSet[siterecoveryreplicationrecoveryplan.RecoveryGroupAttributes](srrrp.ref.Append("recovery_group"))
}

func (srrrp siteRecoveryReplicationRecoveryPlanAttributes) Timeouts() siterecoveryreplicationrecoveryplan.TimeoutsAttributes {
	return terra.ReferenceSingle[siterecoveryreplicationrecoveryplan.TimeoutsAttributes](srrrp.ref.Append("timeouts"))
}

type siteRecoveryReplicationRecoveryPlanState struct {
	Id                     string                                                   `json:"id"`
	Name                   string                                                   `json:"name"`
	RecoveryVaultId        string                                                   `json:"recovery_vault_id"`
	SourceRecoveryFabricId string                                                   `json:"source_recovery_fabric_id"`
	TargetRecoveryFabricId string                                                   `json:"target_recovery_fabric_id"`
	RecoveryGroup          []siterecoveryreplicationrecoveryplan.RecoveryGroupState `json:"recovery_group"`
	Timeouts               *siterecoveryreplicationrecoveryplan.TimeoutsState       `json:"timeouts"`
}
