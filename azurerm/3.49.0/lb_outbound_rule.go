// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lboutboundrule "github.com/golingon/terraproviders/azurerm/3.49.0/lboutboundrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbOutboundRule(name string, args LbOutboundRuleArgs) *LbOutboundRule {
	return &LbOutboundRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbOutboundRule)(nil)

type LbOutboundRule struct {
	Name  string
	Args  LbOutboundRuleArgs
	state *lbOutboundRuleState
}

func (lor *LbOutboundRule) Type() string {
	return "azurerm_lb_outbound_rule"
}

func (lor *LbOutboundRule) LocalName() string {
	return lor.Name
}

func (lor *LbOutboundRule) Configuration() interface{} {
	return lor.Args
}

func (lor *LbOutboundRule) Attributes() lbOutboundRuleAttributes {
	return lbOutboundRuleAttributes{ref: terra.ReferenceResource(lor)}
}

func (lor *LbOutboundRule) ImportState(av io.Reader) error {
	lor.state = &lbOutboundRuleState{}
	if err := json.NewDecoder(av).Decode(lor.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lor.Type(), lor.LocalName(), err)
	}
	return nil
}

func (lor *LbOutboundRule) State() (*lbOutboundRuleState, bool) {
	return lor.state, lor.state != nil
}

func (lor *LbOutboundRule) StateMust() *lbOutboundRuleState {
	if lor.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lor.Type(), lor.LocalName()))
	}
	return lor.state
}

func (lor *LbOutboundRule) DependOn() terra.Reference {
	return terra.ReferenceResource(lor)
}

type LbOutboundRuleArgs struct {
	// AllocatedOutboundPorts: number, optional
	AllocatedOutboundPorts terra.NumberValue `hcl:"allocated_outbound_ports,attr"`
	// BackendAddressPoolId: string, required
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr" validate:"required"`
	// EnableTcpReset: bool, optional
	EnableTcpReset terra.BoolValue `hcl:"enable_tcp_reset,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// FrontendIpConfiguration: min=0
	FrontendIpConfiguration []lboutboundrule.FrontendIpConfiguration `hcl:"frontend_ip_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *lboutboundrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LbOutboundRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbOutboundRuleAttributes struct {
	ref terra.Reference
}

func (lor lbOutboundRuleAttributes) AllocatedOutboundPorts() terra.NumberValue {
	return terra.ReferenceNumber(lor.ref.Append("allocated_outbound_ports"))
}

func (lor lbOutboundRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceString(lor.ref.Append("backend_address_pool_id"))
}

func (lor lbOutboundRuleAttributes) EnableTcpReset() terra.BoolValue {
	return terra.ReferenceBool(lor.ref.Append("enable_tcp_reset"))
}

func (lor lbOutboundRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lor.ref.Append("id"))
}

func (lor lbOutboundRuleAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(lor.ref.Append("idle_timeout_in_minutes"))
}

func (lor lbOutboundRuleAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceString(lor.ref.Append("loadbalancer_id"))
}

func (lor lbOutboundRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lor.ref.Append("name"))
}

func (lor lbOutboundRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(lor.ref.Append("protocol"))
}

func (lor lbOutboundRuleAttributes) FrontendIpConfiguration() terra.ListValue[lboutboundrule.FrontendIpConfigurationAttributes] {
	return terra.ReferenceList[lboutboundrule.FrontendIpConfigurationAttributes](lor.ref.Append("frontend_ip_configuration"))
}

func (lor lbOutboundRuleAttributes) Timeouts() lboutboundrule.TimeoutsAttributes {
	return terra.ReferenceSingle[lboutboundrule.TimeoutsAttributes](lor.ref.Append("timeouts"))
}

type lbOutboundRuleState struct {
	AllocatedOutboundPorts  float64                                       `json:"allocated_outbound_ports"`
	BackendAddressPoolId    string                                        `json:"backend_address_pool_id"`
	EnableTcpReset          bool                                          `json:"enable_tcp_reset"`
	Id                      string                                        `json:"id"`
	IdleTimeoutInMinutes    float64                                       `json:"idle_timeout_in_minutes"`
	LoadbalancerId          string                                        `json:"loadbalancer_id"`
	Name                    string                                        `json:"name"`
	Protocol                string                                        `json:"protocol"`
	FrontendIpConfiguration []lboutboundrule.FrontendIpConfigurationState `json:"frontend_ip_configuration"`
	Timeouts                *lboutboundrule.TimeoutsState                 `json:"timeouts"`
}
