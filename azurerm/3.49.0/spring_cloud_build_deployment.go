// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudbuilddeployment "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudbuilddeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudBuildDeployment(name string, args SpringCloudBuildDeploymentArgs) *SpringCloudBuildDeployment {
	return &SpringCloudBuildDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudBuildDeployment)(nil)

type SpringCloudBuildDeployment struct {
	Name  string
	Args  SpringCloudBuildDeploymentArgs
	state *springCloudBuildDeploymentState
}

func (scbd *SpringCloudBuildDeployment) Type() string {
	return "azurerm_spring_cloud_build_deployment"
}

func (scbd *SpringCloudBuildDeployment) LocalName() string {
	return scbd.Name
}

func (scbd *SpringCloudBuildDeployment) Configuration() interface{} {
	return scbd.Args
}

func (scbd *SpringCloudBuildDeployment) Attributes() springCloudBuildDeploymentAttributes {
	return springCloudBuildDeploymentAttributes{ref: terra.ReferenceResource(scbd)}
}

func (scbd *SpringCloudBuildDeployment) ImportState(av io.Reader) error {
	scbd.state = &springCloudBuildDeploymentState{}
	if err := json.NewDecoder(av).Decode(scbd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scbd.Type(), scbd.LocalName(), err)
	}
	return nil
}

func (scbd *SpringCloudBuildDeployment) State() (*springCloudBuildDeploymentState, bool) {
	return scbd.state, scbd.state != nil
}

func (scbd *SpringCloudBuildDeployment) StateMust() *springCloudBuildDeploymentState {
	if scbd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scbd.Type(), scbd.LocalName()))
	}
	return scbd.state
}

func (scbd *SpringCloudBuildDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(scbd)
}

type SpringCloudBuildDeploymentArgs struct {
	// AddonJson: string, optional
	AddonJson terra.StringValue `hcl:"addon_json,attr"`
	// BuildResultId: string, required
	BuildResultId terra.StringValue `hcl:"build_result_id,attr" validate:"required"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Quota: optional
	Quota *springcloudbuilddeployment.Quota `hcl:"quota,block"`
	// Timeouts: optional
	Timeouts *springcloudbuilddeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudBuildDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudBuildDeploymentAttributes struct {
	ref terra.Reference
}

func (scbd springCloudBuildDeploymentAttributes) AddonJson() terra.StringValue {
	return terra.ReferenceString(scbd.ref.Append("addon_json"))
}

func (scbd springCloudBuildDeploymentAttributes) BuildResultId() terra.StringValue {
	return terra.ReferenceString(scbd.ref.Append("build_result_id"))
}

func (scbd springCloudBuildDeploymentAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scbd.ref.Append("environment_variables"))
}

func (scbd springCloudBuildDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scbd.ref.Append("id"))
}

func (scbd springCloudBuildDeploymentAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(scbd.ref.Append("instance_count"))
}

func (scbd springCloudBuildDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scbd.ref.Append("name"))
}

func (scbd springCloudBuildDeploymentAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceString(scbd.ref.Append("spring_cloud_app_id"))
}

func (scbd springCloudBuildDeploymentAttributes) Quota() terra.ListValue[springcloudbuilddeployment.QuotaAttributes] {
	return terra.ReferenceList[springcloudbuilddeployment.QuotaAttributes](scbd.ref.Append("quota"))
}

func (scbd springCloudBuildDeploymentAttributes) Timeouts() springcloudbuilddeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudbuilddeployment.TimeoutsAttributes](scbd.ref.Append("timeouts"))
}

type springCloudBuildDeploymentState struct {
	AddonJson            string                                    `json:"addon_json"`
	BuildResultId        string                                    `json:"build_result_id"`
	EnvironmentVariables map[string]string                         `json:"environment_variables"`
	Id                   string                                    `json:"id"`
	InstanceCount        float64                                   `json:"instance_count"`
	Name                 string                                    `json:"name"`
	SpringCloudAppId     string                                    `json:"spring_cloud_app_id"`
	Quota                []springcloudbuilddeployment.QuotaState   `json:"quota"`
	Timeouts             *springcloudbuilddeployment.TimeoutsState `json:"timeouts"`
}
