// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapseprivatelinkhub "github.com/golingon/terraproviders/azurerm/3.49.0/synapseprivatelinkhub"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapsePrivateLinkHub(name string, args SynapsePrivateLinkHubArgs) *SynapsePrivateLinkHub {
	return &SynapsePrivateLinkHub{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapsePrivateLinkHub)(nil)

type SynapsePrivateLinkHub struct {
	Name  string
	Args  SynapsePrivateLinkHubArgs
	state *synapsePrivateLinkHubState
}

func (splh *SynapsePrivateLinkHub) Type() string {
	return "azurerm_synapse_private_link_hub"
}

func (splh *SynapsePrivateLinkHub) LocalName() string {
	return splh.Name
}

func (splh *SynapsePrivateLinkHub) Configuration() interface{} {
	return splh.Args
}

func (splh *SynapsePrivateLinkHub) Attributes() synapsePrivateLinkHubAttributes {
	return synapsePrivateLinkHubAttributes{ref: terra.ReferenceResource(splh)}
}

func (splh *SynapsePrivateLinkHub) ImportState(av io.Reader) error {
	splh.state = &synapsePrivateLinkHubState{}
	if err := json.NewDecoder(av).Decode(splh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", splh.Type(), splh.LocalName(), err)
	}
	return nil
}

func (splh *SynapsePrivateLinkHub) State() (*synapsePrivateLinkHubState, bool) {
	return splh.state, splh.state != nil
}

func (splh *SynapsePrivateLinkHub) StateMust() *synapsePrivateLinkHubState {
	if splh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", splh.Type(), splh.LocalName()))
	}
	return splh.state
}

func (splh *SynapsePrivateLinkHub) DependOn() terra.Reference {
	return terra.ReferenceResource(splh)
}

type SynapsePrivateLinkHubArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *synapseprivatelinkhub.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapsePrivateLinkHub depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapsePrivateLinkHubAttributes struct {
	ref terra.Reference
}

func (splh synapsePrivateLinkHubAttributes) Id() terra.StringValue {
	return terra.ReferenceString(splh.ref.Append("id"))
}

func (splh synapsePrivateLinkHubAttributes) Location() terra.StringValue {
	return terra.ReferenceString(splh.ref.Append("location"))
}

func (splh synapsePrivateLinkHubAttributes) Name() terra.StringValue {
	return terra.ReferenceString(splh.ref.Append("name"))
}

func (splh synapsePrivateLinkHubAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(splh.ref.Append("resource_group_name"))
}

func (splh synapsePrivateLinkHubAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](splh.ref.Append("tags"))
}

func (splh synapsePrivateLinkHubAttributes) Timeouts() synapseprivatelinkhub.TimeoutsAttributes {
	return terra.ReferenceSingle[synapseprivatelinkhub.TimeoutsAttributes](splh.ref.Append("timeouts"))
}

type synapsePrivateLinkHubState struct {
	Id                string                               `json:"id"`
	Location          string                               `json:"location"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	Timeouts          *synapseprivatelinkhub.TimeoutsState `json:"timeouts"`
}
