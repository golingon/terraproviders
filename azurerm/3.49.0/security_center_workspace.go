// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterworkspace "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterWorkspace(name string, args SecurityCenterWorkspaceArgs) *SecurityCenterWorkspace {
	return &SecurityCenterWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterWorkspace)(nil)

type SecurityCenterWorkspace struct {
	Name  string
	Args  SecurityCenterWorkspaceArgs
	state *securityCenterWorkspaceState
}

func (scw *SecurityCenterWorkspace) Type() string {
	return "azurerm_security_center_workspace"
}

func (scw *SecurityCenterWorkspace) LocalName() string {
	return scw.Name
}

func (scw *SecurityCenterWorkspace) Configuration() interface{} {
	return scw.Args
}

func (scw *SecurityCenterWorkspace) Attributes() securityCenterWorkspaceAttributes {
	return securityCenterWorkspaceAttributes{ref: terra.ReferenceResource(scw)}
}

func (scw *SecurityCenterWorkspace) ImportState(av io.Reader) error {
	scw.state = &securityCenterWorkspaceState{}
	if err := json.NewDecoder(av).Decode(scw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scw.Type(), scw.LocalName(), err)
	}
	return nil
}

func (scw *SecurityCenterWorkspace) State() (*securityCenterWorkspaceState, bool) {
	return scw.state, scw.state != nil
}

func (scw *SecurityCenterWorkspace) StateMust() *securityCenterWorkspaceState {
	if scw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scw.Type(), scw.LocalName()))
	}
	return scw.state
}

func (scw *SecurityCenterWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(scw)
}

type SecurityCenterWorkspaceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycenterworkspace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterWorkspaceAttributes struct {
	ref terra.Reference
}

func (scw securityCenterWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scw.ref.Append("id"))
}

func (scw securityCenterWorkspaceAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(scw.ref.Append("scope"))
}

func (scw securityCenterWorkspaceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(scw.ref.Append("workspace_id"))
}

func (scw securityCenterWorkspaceAttributes) Timeouts() securitycenterworkspace.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterworkspace.TimeoutsAttributes](scw.ref.Append("timeouts"))
}

type securityCenterWorkspaceState struct {
	Id          string                                 `json:"id"`
	Scope       string                                 `json:"scope"`
	WorkspaceId string                                 `json:"workspace_id"`
	Timeouts    *securitycenterworkspace.TimeoutsState `json:"timeouts"`
}
