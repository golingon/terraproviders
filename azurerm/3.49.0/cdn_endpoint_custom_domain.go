// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnendpointcustomdomain "github.com/golingon/terraproviders/azurerm/3.49.0/cdnendpointcustomdomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnEndpointCustomDomain(name string, args CdnEndpointCustomDomainArgs) *CdnEndpointCustomDomain {
	return &CdnEndpointCustomDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnEndpointCustomDomain)(nil)

type CdnEndpointCustomDomain struct {
	Name  string
	Args  CdnEndpointCustomDomainArgs
	state *cdnEndpointCustomDomainState
}

func (cecd *CdnEndpointCustomDomain) Type() string {
	return "azurerm_cdn_endpoint_custom_domain"
}

func (cecd *CdnEndpointCustomDomain) LocalName() string {
	return cecd.Name
}

func (cecd *CdnEndpointCustomDomain) Configuration() interface{} {
	return cecd.Args
}

func (cecd *CdnEndpointCustomDomain) Attributes() cdnEndpointCustomDomainAttributes {
	return cdnEndpointCustomDomainAttributes{ref: terra.ReferenceResource(cecd)}
}

func (cecd *CdnEndpointCustomDomain) ImportState(av io.Reader) error {
	cecd.state = &cdnEndpointCustomDomainState{}
	if err := json.NewDecoder(av).Decode(cecd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cecd.Type(), cecd.LocalName(), err)
	}
	return nil
}

func (cecd *CdnEndpointCustomDomain) State() (*cdnEndpointCustomDomainState, bool) {
	return cecd.state, cecd.state != nil
}

func (cecd *CdnEndpointCustomDomain) StateMust() *cdnEndpointCustomDomainState {
	if cecd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cecd.Type(), cecd.LocalName()))
	}
	return cecd.state
}

func (cecd *CdnEndpointCustomDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(cecd)
}

type CdnEndpointCustomDomainArgs struct {
	// CdnEndpointId: string, required
	CdnEndpointId terra.StringValue `hcl:"cdn_endpoint_id,attr" validate:"required"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CdnManagedHttps: optional
	CdnManagedHttps *cdnendpointcustomdomain.CdnManagedHttps `hcl:"cdn_managed_https,block"`
	// Timeouts: optional
	Timeouts *cdnendpointcustomdomain.Timeouts `hcl:"timeouts,block"`
	// UserManagedHttps: optional
	UserManagedHttps *cdnendpointcustomdomain.UserManagedHttps `hcl:"user_managed_https,block"`
	// DependsOn contains resources that CdnEndpointCustomDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnEndpointCustomDomainAttributes struct {
	ref terra.Reference
}

func (cecd cdnEndpointCustomDomainAttributes) CdnEndpointId() terra.StringValue {
	return terra.ReferenceString(cecd.ref.Append("cdn_endpoint_id"))
}

func (cecd cdnEndpointCustomDomainAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(cecd.ref.Append("host_name"))
}

func (cecd cdnEndpointCustomDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cecd.ref.Append("id"))
}

func (cecd cdnEndpointCustomDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cecd.ref.Append("name"))
}

func (cecd cdnEndpointCustomDomainAttributes) CdnManagedHttps() terra.ListValue[cdnendpointcustomdomain.CdnManagedHttpsAttributes] {
	return terra.ReferenceList[cdnendpointcustomdomain.CdnManagedHttpsAttributes](cecd.ref.Append("cdn_managed_https"))
}

func (cecd cdnEndpointCustomDomainAttributes) Timeouts() cdnendpointcustomdomain.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnendpointcustomdomain.TimeoutsAttributes](cecd.ref.Append("timeouts"))
}

func (cecd cdnEndpointCustomDomainAttributes) UserManagedHttps() terra.ListValue[cdnendpointcustomdomain.UserManagedHttpsAttributes] {
	return terra.ReferenceList[cdnendpointcustomdomain.UserManagedHttpsAttributes](cecd.ref.Append("user_managed_https"))
}

type cdnEndpointCustomDomainState struct {
	CdnEndpointId    string                                          `json:"cdn_endpoint_id"`
	HostName         string                                          `json:"host_name"`
	Id               string                                          `json:"id"`
	Name             string                                          `json:"name"`
	CdnManagedHttps  []cdnendpointcustomdomain.CdnManagedHttpsState  `json:"cdn_managed_https"`
	Timeouts         *cdnendpointcustomdomain.TimeoutsState          `json:"timeouts"`
	UserManagedHttps []cdnendpointcustomdomain.UserManagedHttpsState `json:"user_managed_https"`
}
