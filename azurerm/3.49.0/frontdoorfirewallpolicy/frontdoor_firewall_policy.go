// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package frontdoorfirewallpolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CustomRule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// RateLimitDurationInMinutes: number, optional
	RateLimitDurationInMinutes terra.NumberValue `hcl:"rate_limit_duration_in_minutes,attr"`
	// RateLimitThreshold: number, optional
	RateLimitThreshold terra.NumberValue `hcl:"rate_limit_threshold,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// MatchCondition: min=0,max=10
	MatchCondition []MatchCondition `hcl:"match_condition,block" validate:"min=0,max=10"`
}

type MatchCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// NegationCondition: bool, optional
	NegationCondition terra.BoolValue `hcl:"negation_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// Transforms: list of string, optional
	Transforms terra.ListValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ManagedRule struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// ManagedRuleExclusion: min=0,max=100
	Exclusion []ManagedRuleExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
	// Override: min=0,max=100
	Override []Override `hcl:"override,block" validate:"min=0,max=100"`
}

type ManagedRuleExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type Override struct {
	// RuleGroupName: string, required
	RuleGroupName terra.StringValue `hcl:"rule_group_name,attr" validate:"required"`
	// OverrideExclusion: min=0,max=100
	Exclusion []OverrideExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
	// Rule: min=0,max=1000
	Rule []Rule `hcl:"rule,block" validate:"min=0,max=1000"`
}

type OverrideExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type Rule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RuleId: string, required
	RuleId terra.StringValue `hcl:"rule_id,attr" validate:"required"`
	// RuleExclusion: min=0,max=100
	Exclusion []RuleExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
}

type RuleExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomRuleAttributes struct {
	ref terra.Reference
}

func (cr CustomRuleAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr CustomRuleAttributes) InternalWithRef(ref terra.Reference) CustomRuleAttributes {
	return CustomRuleAttributes{ref: ref}
}

func (cr CustomRuleAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr CustomRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("action"))
}

func (cr CustomRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cr.ref.Append("enabled"))
}

func (cr CustomRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("name"))
}

func (cr CustomRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("priority"))
}

func (cr CustomRuleAttributes) RateLimitDurationInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("rate_limit_duration_in_minutes"))
}

func (cr CustomRuleAttributes) RateLimitThreshold() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("rate_limit_threshold"))
}

func (cr CustomRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("type"))
}

func (cr CustomRuleAttributes) MatchCondition() terra.ListValue[MatchConditionAttributes] {
	return terra.ReferenceList[MatchConditionAttributes](cr.ref.Append("match_condition"))
}

type MatchConditionAttributes struct {
	ref terra.Reference
}

func (mc MatchConditionAttributes) InternalRef() terra.Reference {
	return mc.ref
}

func (mc MatchConditionAttributes) InternalWithRef(ref terra.Reference) MatchConditionAttributes {
	return MatchConditionAttributes{ref: ref}
}

func (mc MatchConditionAttributes) InternalTokens() hclwrite.Tokens {
	return mc.ref.InternalTokens()
}

func (mc MatchConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mc.ref.Append("match_values"))
}

func (mc MatchConditionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("match_variable"))
}

func (mc MatchConditionAttributes) NegationCondition() terra.BoolValue {
	return terra.ReferenceBool(mc.ref.Append("negation_condition"))
}

func (mc MatchConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("operator"))
}

func (mc MatchConditionAttributes) Selector() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("selector"))
}

func (mc MatchConditionAttributes) Transforms() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mc.ref.Append("transforms"))
}

type ManagedRuleAttributes struct {
	ref terra.Reference
}

func (mr ManagedRuleAttributes) InternalRef() terra.Reference {
	return mr.ref
}

func (mr ManagedRuleAttributes) InternalWithRef(ref terra.Reference) ManagedRuleAttributes {
	return ManagedRuleAttributes{ref: ref}
}

func (mr ManagedRuleAttributes) InternalTokens() hclwrite.Tokens {
	return mr.ref.InternalTokens()
}

func (mr ManagedRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceString(mr.ref.Append("type"))
}

func (mr ManagedRuleAttributes) Version() terra.StringValue {
	return terra.ReferenceString(mr.ref.Append("version"))
}

func (mr ManagedRuleAttributes) Exclusion() terra.ListValue[ManagedRuleExclusionAttributes] {
	return terra.ReferenceList[ManagedRuleExclusionAttributes](mr.ref.Append("exclusion"))
}

func (mr ManagedRuleAttributes) Override() terra.ListValue[OverrideAttributes] {
	return terra.ReferenceList[OverrideAttributes](mr.ref.Append("override"))
}

type ManagedRuleExclusionAttributes struct {
	ref terra.Reference
}

func (e ManagedRuleExclusionAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e ManagedRuleExclusionAttributes) InternalWithRef(ref terra.Reference) ManagedRuleExclusionAttributes {
	return ManagedRuleExclusionAttributes{ref: ref}
}

func (e ManagedRuleExclusionAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ManagedRuleExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("match_variable"))
}

func (e ManagedRuleExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("operator"))
}

func (e ManagedRuleExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("selector"))
}

type OverrideAttributes struct {
	ref terra.Reference
}

func (o OverrideAttributes) InternalRef() terra.Reference {
	return o.ref
}

func (o OverrideAttributes) InternalWithRef(ref terra.Reference) OverrideAttributes {
	return OverrideAttributes{ref: ref}
}

func (o OverrideAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OverrideAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("rule_group_name"))
}

func (o OverrideAttributes) Exclusion() terra.ListValue[OverrideExclusionAttributes] {
	return terra.ReferenceList[OverrideExclusionAttributes](o.ref.Append("exclusion"))
}

func (o OverrideAttributes) Rule() terra.ListValue[RuleAttributes] {
	return terra.ReferenceList[RuleAttributes](o.ref.Append("rule"))
}

type OverrideExclusionAttributes struct {
	ref terra.Reference
}

func (e OverrideExclusionAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e OverrideExclusionAttributes) InternalWithRef(ref terra.Reference) OverrideExclusionAttributes {
	return OverrideExclusionAttributes{ref: ref}
}

func (e OverrideExclusionAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e OverrideExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("match_variable"))
}

func (e OverrideExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("operator"))
}

func (e OverrideExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("selector"))
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Action() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("action"))
}

func (r RuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(r.ref.Append("enabled"))
}

func (r RuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("rule_id"))
}

func (r RuleAttributes) Exclusion() terra.ListValue[RuleExclusionAttributes] {
	return terra.ReferenceList[RuleExclusionAttributes](r.ref.Append("exclusion"))
}

type RuleExclusionAttributes struct {
	ref terra.Reference
}

func (e RuleExclusionAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e RuleExclusionAttributes) InternalWithRef(ref terra.Reference) RuleExclusionAttributes {
	return RuleExclusionAttributes{ref: ref}
}

func (e RuleExclusionAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e RuleExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("match_variable"))
}

func (e RuleExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("operator"))
}

func (e RuleExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("selector"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CustomRuleState struct {
	Action                     string                `json:"action"`
	Enabled                    bool                  `json:"enabled"`
	Name                       string                `json:"name"`
	Priority                   float64               `json:"priority"`
	RateLimitDurationInMinutes float64               `json:"rate_limit_duration_in_minutes"`
	RateLimitThreshold         float64               `json:"rate_limit_threshold"`
	Type                       string                `json:"type"`
	MatchCondition             []MatchConditionState `json:"match_condition"`
}

type MatchConditionState struct {
	MatchValues       []string `json:"match_values"`
	MatchVariable     string   `json:"match_variable"`
	NegationCondition bool     `json:"negation_condition"`
	Operator          string   `json:"operator"`
	Selector          string   `json:"selector"`
	Transforms        []string `json:"transforms"`
}

type ManagedRuleState struct {
	Type      string                      `json:"type"`
	Version   string                      `json:"version"`
	Exclusion []ManagedRuleExclusionState `json:"exclusion"`
	Override  []OverrideState             `json:"override"`
}

type ManagedRuleExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type OverrideState struct {
	RuleGroupName string                   `json:"rule_group_name"`
	Exclusion     []OverrideExclusionState `json:"exclusion"`
	Rule          []RuleState              `json:"rule"`
}

type OverrideExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type RuleState struct {
	Action    string               `json:"action"`
	Enabled   bool                 `json:"enabled"`
	RuleId    string               `json:"rule_id"`
	Exclusion []RuleExclusionState `json:"exclusion"`
}

type RuleExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
