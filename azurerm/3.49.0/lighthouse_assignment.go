// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lighthouseassignment "github.com/golingon/terraproviders/azurerm/3.49.0/lighthouseassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLighthouseAssignment(name string, args LighthouseAssignmentArgs) *LighthouseAssignment {
	return &LighthouseAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LighthouseAssignment)(nil)

type LighthouseAssignment struct {
	Name  string
	Args  LighthouseAssignmentArgs
	state *lighthouseAssignmentState
}

func (la *LighthouseAssignment) Type() string {
	return "azurerm_lighthouse_assignment"
}

func (la *LighthouseAssignment) LocalName() string {
	return la.Name
}

func (la *LighthouseAssignment) Configuration() interface{} {
	return la.Args
}

func (la *LighthouseAssignment) Attributes() lighthouseAssignmentAttributes {
	return lighthouseAssignmentAttributes{ref: terra.ReferenceResource(la)}
}

func (la *LighthouseAssignment) ImportState(av io.Reader) error {
	la.state = &lighthouseAssignmentState{}
	if err := json.NewDecoder(av).Decode(la.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", la.Type(), la.LocalName(), err)
	}
	return nil
}

func (la *LighthouseAssignment) State() (*lighthouseAssignmentState, bool) {
	return la.state, la.state != nil
}

func (la *LighthouseAssignment) StateMust() *lighthouseAssignmentState {
	if la.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", la.Type(), la.LocalName()))
	}
	return la.state
}

func (la *LighthouseAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(la)
}

type LighthouseAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LighthouseDefinitionId: string, required
	LighthouseDefinitionId terra.StringValue `hcl:"lighthouse_definition_id,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *lighthouseassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LighthouseAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lighthouseAssignmentAttributes struct {
	ref terra.Reference
}

func (la lighthouseAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("id"))
}

func (la lighthouseAssignmentAttributes) LighthouseDefinitionId() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("lighthouse_definition_id"))
}

func (la lighthouseAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("name"))
}

func (la lighthouseAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("scope"))
}

func (la lighthouseAssignmentAttributes) Timeouts() lighthouseassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[lighthouseassignment.TimeoutsAttributes](la.ref.Append("timeouts"))
}

type lighthouseAssignmentState struct {
	Id                     string                              `json:"id"`
	LighthouseDefinitionId string                              `json:"lighthouse_definition_id"`
	Name                   string                              `json:"name"`
	Scope                  string                              `json:"scope"`
	Timeouts               *lighthouseassignment.TimeoutsState `json:"timeouts"`
}
