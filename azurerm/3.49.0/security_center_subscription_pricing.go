// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycentersubscriptionpricing "github.com/golingon/terraproviders/azurerm/3.49.0/securitycentersubscriptionpricing"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterSubscriptionPricing(name string, args SecurityCenterSubscriptionPricingArgs) *SecurityCenterSubscriptionPricing {
	return &SecurityCenterSubscriptionPricing{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterSubscriptionPricing)(nil)

type SecurityCenterSubscriptionPricing struct {
	Name  string
	Args  SecurityCenterSubscriptionPricingArgs
	state *securityCenterSubscriptionPricingState
}

func (scsp *SecurityCenterSubscriptionPricing) Type() string {
	return "azurerm_security_center_subscription_pricing"
}

func (scsp *SecurityCenterSubscriptionPricing) LocalName() string {
	return scsp.Name
}

func (scsp *SecurityCenterSubscriptionPricing) Configuration() interface{} {
	return scsp.Args
}

func (scsp *SecurityCenterSubscriptionPricing) Attributes() securityCenterSubscriptionPricingAttributes {
	return securityCenterSubscriptionPricingAttributes{ref: terra.ReferenceResource(scsp)}
}

func (scsp *SecurityCenterSubscriptionPricing) ImportState(av io.Reader) error {
	scsp.state = &securityCenterSubscriptionPricingState{}
	if err := json.NewDecoder(av).Decode(scsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scsp.Type(), scsp.LocalName(), err)
	}
	return nil
}

func (scsp *SecurityCenterSubscriptionPricing) State() (*securityCenterSubscriptionPricingState, bool) {
	return scsp.state, scsp.state != nil
}

func (scsp *SecurityCenterSubscriptionPricing) StateMust() *securityCenterSubscriptionPricingState {
	if scsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scsp.Type(), scsp.LocalName()))
	}
	return scsp.state
}

func (scsp *SecurityCenterSubscriptionPricing) DependOn() terra.Reference {
	return terra.ReferenceResource(scsp)
}

type SecurityCenterSubscriptionPricingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// Subplan: string, optional
	Subplan terra.StringValue `hcl:"subplan,attr"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycentersubscriptionpricing.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterSubscriptionPricing depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterSubscriptionPricingAttributes struct {
	ref terra.Reference
}

func (scsp securityCenterSubscriptionPricingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scsp.ref.Append("id"))
}

func (scsp securityCenterSubscriptionPricingAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(scsp.ref.Append("resource_type"))
}

func (scsp securityCenterSubscriptionPricingAttributes) Subplan() terra.StringValue {
	return terra.ReferenceString(scsp.ref.Append("subplan"))
}

func (scsp securityCenterSubscriptionPricingAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(scsp.ref.Append("tier"))
}

func (scsp securityCenterSubscriptionPricingAttributes) Timeouts() securitycentersubscriptionpricing.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycentersubscriptionpricing.TimeoutsAttributes](scsp.ref.Append("timeouts"))
}

type securityCenterSubscriptionPricingState struct {
	Id           string                                           `json:"id"`
	ResourceType string                                           `json:"resource_type"`
	Subplan      string                                           `json:"subplan"`
	Tier         string                                           `json:"tier"`
	Timeouts     *securitycentersubscriptionpricing.TimeoutsState `json:"timeouts"`
}
