// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mariadbfirewallrule "github.com/golingon/terraproviders/azurerm/3.49.0/mariadbfirewallrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMariadbFirewallRule(name string, args MariadbFirewallRuleArgs) *MariadbFirewallRule {
	return &MariadbFirewallRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MariadbFirewallRule)(nil)

type MariadbFirewallRule struct {
	Name  string
	Args  MariadbFirewallRuleArgs
	state *mariadbFirewallRuleState
}

func (mfr *MariadbFirewallRule) Type() string {
	return "azurerm_mariadb_firewall_rule"
}

func (mfr *MariadbFirewallRule) LocalName() string {
	return mfr.Name
}

func (mfr *MariadbFirewallRule) Configuration() interface{} {
	return mfr.Args
}

func (mfr *MariadbFirewallRule) Attributes() mariadbFirewallRuleAttributes {
	return mariadbFirewallRuleAttributes{ref: terra.ReferenceResource(mfr)}
}

func (mfr *MariadbFirewallRule) ImportState(av io.Reader) error {
	mfr.state = &mariadbFirewallRuleState{}
	if err := json.NewDecoder(av).Decode(mfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mfr.Type(), mfr.LocalName(), err)
	}
	return nil
}

func (mfr *MariadbFirewallRule) State() (*mariadbFirewallRuleState, bool) {
	return mfr.state, mfr.state != nil
}

func (mfr *MariadbFirewallRule) StateMust() *mariadbFirewallRuleState {
	if mfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mfr.Type(), mfr.LocalName()))
	}
	return mfr.state
}

func (mfr *MariadbFirewallRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mfr)
}

type MariadbFirewallRuleArgs struct {
	// EndIpAddress: string, required
	EndIpAddress terra.StringValue `hcl:"end_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// StartIpAddress: string, required
	StartIpAddress terra.StringValue `hcl:"start_ip_address,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mariadbfirewallrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MariadbFirewallRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mariadbFirewallRuleAttributes struct {
	ref terra.Reference
}

func (mfr mariadbFirewallRuleAttributes) EndIpAddress() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("end_ip_address"))
}

func (mfr mariadbFirewallRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("id"))
}

func (mfr mariadbFirewallRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("name"))
}

func (mfr mariadbFirewallRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("resource_group_name"))
}

func (mfr mariadbFirewallRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("server_name"))
}

func (mfr mariadbFirewallRuleAttributes) StartIpAddress() terra.StringValue {
	return terra.ReferenceString(mfr.ref.Append("start_ip_address"))
}

func (mfr mariadbFirewallRuleAttributes) Timeouts() mariadbfirewallrule.TimeoutsAttributes {
	return terra.ReferenceSingle[mariadbfirewallrule.TimeoutsAttributes](mfr.ref.Append("timeouts"))
}

type mariadbFirewallRuleState struct {
	EndIpAddress      string                             `json:"end_ip_address"`
	Id                string                             `json:"id"`
	Name              string                             `json:"name"`
	ResourceGroupName string                             `json:"resource_group_name"`
	ServerName        string                             `json:"server_name"`
	StartIpAddress    string                             `json:"start_ip_address"`
	Timeouts          *mariadbfirewallrule.TimeoutsState `json:"timeouts"`
}
