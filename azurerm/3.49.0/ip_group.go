// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	ipgroup "github.com/golingon/terraproviders/azurerm/3.49.0/ipgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIpGroup(name string, args IpGroupArgs) *IpGroup {
	return &IpGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IpGroup)(nil)

type IpGroup struct {
	Name  string
	Args  IpGroupArgs
	state *ipGroupState
}

func (ig *IpGroup) Type() string {
	return "azurerm_ip_group"
}

func (ig *IpGroup) LocalName() string {
	return ig.Name
}

func (ig *IpGroup) Configuration() interface{} {
	return ig.Args
}

func (ig *IpGroup) Attributes() ipGroupAttributes {
	return ipGroupAttributes{ref: terra.ReferenceResource(ig)}
}

func (ig *IpGroup) ImportState(av io.Reader) error {
	ig.state = &ipGroupState{}
	if err := json.NewDecoder(av).Decode(ig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ig.Type(), ig.LocalName(), err)
	}
	return nil
}

func (ig *IpGroup) State() (*ipGroupState, bool) {
	return ig.state, ig.state != nil
}

func (ig *IpGroup) StateMust() *ipGroupState {
	if ig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ig.Type(), ig.LocalName()))
	}
	return ig.state
}

func (ig *IpGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ig)
}

type IpGroupArgs struct {
	// Cidrs: set of string, optional
	Cidrs terra.SetValue[terra.StringValue] `hcl:"cidrs,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *ipgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IpGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ipGroupAttributes struct {
	ref terra.Reference
}

func (ig ipGroupAttributes) Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ig.ref.Append("cidrs"))
}

func (ig ipGroupAttributes) FirewallIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ig.ref.Append("firewall_ids"))
}

func (ig ipGroupAttributes) FirewallPolicyIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ig.ref.Append("firewall_policy_ids"))
}

func (ig ipGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("id"))
}

func (ig ipGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("location"))
}

func (ig ipGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("name"))
}

func (ig ipGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("resource_group_name"))
}

func (ig ipGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ig.ref.Append("tags"))
}

func (ig ipGroupAttributes) Timeouts() ipgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[ipgroup.TimeoutsAttributes](ig.ref.Append("timeouts"))
}

type ipGroupState struct {
	Cidrs             []string               `json:"cidrs"`
	FirewallIds       []string               `json:"firewall_ids"`
	FirewallPolicyIds []string               `json:"firewall_policy_ids"`
	Id                string                 `json:"id"`
	Location          string                 `json:"location"`
	Name              string                 `json:"name"`
	ResourceGroupName string                 `json:"resource_group_name"`
	Tags              map[string]string      `json:"tags"`
	Timeouts          *ipgroup.TimeoutsState `json:"timeouts"`
}
