// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementidentityprovideraad "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementidentityprovideraad"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementIdentityProviderAad(name string, args ApiManagementIdentityProviderAadArgs) *ApiManagementIdentityProviderAad {
	return &ApiManagementIdentityProviderAad{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementIdentityProviderAad)(nil)

type ApiManagementIdentityProviderAad struct {
	Name  string
	Args  ApiManagementIdentityProviderAadArgs
	state *apiManagementIdentityProviderAadState
}

func (amipa *ApiManagementIdentityProviderAad) Type() string {
	return "azurerm_api_management_identity_provider_aad"
}

func (amipa *ApiManagementIdentityProviderAad) LocalName() string {
	return amipa.Name
}

func (amipa *ApiManagementIdentityProviderAad) Configuration() interface{} {
	return amipa.Args
}

func (amipa *ApiManagementIdentityProviderAad) Attributes() apiManagementIdentityProviderAadAttributes {
	return apiManagementIdentityProviderAadAttributes{ref: terra.ReferenceResource(amipa)}
}

func (amipa *ApiManagementIdentityProviderAad) ImportState(av io.Reader) error {
	amipa.state = &apiManagementIdentityProviderAadState{}
	if err := json.NewDecoder(av).Decode(amipa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amipa.Type(), amipa.LocalName(), err)
	}
	return nil
}

func (amipa *ApiManagementIdentityProviderAad) State() (*apiManagementIdentityProviderAadState, bool) {
	return amipa.state, amipa.state != nil
}

func (amipa *ApiManagementIdentityProviderAad) StateMust() *apiManagementIdentityProviderAadState {
	if amipa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amipa.Type(), amipa.LocalName()))
	}
	return amipa.state
}

func (amipa *ApiManagementIdentityProviderAad) DependOn() terra.Reference {
	return terra.ReferenceResource(amipa)
}

type ApiManagementIdentityProviderAadArgs struct {
	// AllowedTenants: list of string, required
	AllowedTenants terra.ListValue[terra.StringValue] `hcl:"allowed_tenants,attr" validate:"required"`
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SigninTenant: string, optional
	SigninTenant terra.StringValue `hcl:"signin_tenant,attr"`
	// Timeouts: optional
	Timeouts *apimanagementidentityprovideraad.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementIdentityProviderAad depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementIdentityProviderAadAttributes struct {
	ref terra.Reference
}

func (amipa apiManagementIdentityProviderAadAttributes) AllowedTenants() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](amipa.ref.Append("allowed_tenants"))
}

func (amipa apiManagementIdentityProviderAadAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("api_management_name"))
}

func (amipa apiManagementIdentityProviderAadAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("client_id"))
}

func (amipa apiManagementIdentityProviderAadAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("client_secret"))
}

func (amipa apiManagementIdentityProviderAadAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("id"))
}

func (amipa apiManagementIdentityProviderAadAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("resource_group_name"))
}

func (amipa apiManagementIdentityProviderAadAttributes) SigninTenant() terra.StringValue {
	return terra.ReferenceString(amipa.ref.Append("signin_tenant"))
}

func (amipa apiManagementIdentityProviderAadAttributes) Timeouts() apimanagementidentityprovideraad.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementidentityprovideraad.TimeoutsAttributes](amipa.ref.Append("timeouts"))
}

type apiManagementIdentityProviderAadState struct {
	AllowedTenants    []string                                        `json:"allowed_tenants"`
	ApiManagementName string                                          `json:"api_management_name"`
	ClientId          string                                          `json:"client_id"`
	ClientSecret      string                                          `json:"client_secret"`
	Id                string                                          `json:"id"`
	ResourceGroupName string                                          `json:"resource_group_name"`
	SigninTenant      string                                          `json:"signin_tenant"`
	Timeouts          *apimanagementidentityprovideraad.TimeoutsState `json:"timeouts"`
}
