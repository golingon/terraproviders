// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapselinkedservice "github.com/golingon/terraproviders/azurerm/3.49.0/synapselinkedservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseLinkedService(name string, args SynapseLinkedServiceArgs) *SynapseLinkedService {
	return &SynapseLinkedService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseLinkedService)(nil)

type SynapseLinkedService struct {
	Name  string
	Args  SynapseLinkedServiceArgs
	state *synapseLinkedServiceState
}

func (sls *SynapseLinkedService) Type() string {
	return "azurerm_synapse_linked_service"
}

func (sls *SynapseLinkedService) LocalName() string {
	return sls.Name
}

func (sls *SynapseLinkedService) Configuration() interface{} {
	return sls.Args
}

func (sls *SynapseLinkedService) Attributes() synapseLinkedServiceAttributes {
	return synapseLinkedServiceAttributes{ref: terra.ReferenceResource(sls)}
}

func (sls *SynapseLinkedService) ImportState(av io.Reader) error {
	sls.state = &synapseLinkedServiceState{}
	if err := json.NewDecoder(av).Decode(sls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sls.Type(), sls.LocalName(), err)
	}
	return nil
}

func (sls *SynapseLinkedService) State() (*synapseLinkedServiceState, bool) {
	return sls.state, sls.state != nil
}

func (sls *SynapseLinkedService) StateMust() *synapseLinkedServiceState {
	if sls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sls.Type(), sls.LocalName()))
	}
	return sls.state
}

func (sls *SynapseLinkedService) DependOn() terra.Reference {
	return terra.ReferenceResource(sls)
}

type SynapseLinkedServiceArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypePropertiesJson: string, required
	TypePropertiesJson terra.StringValue `hcl:"type_properties_json,attr" validate:"required"`
	// IntegrationRuntime: optional
	IntegrationRuntime *synapselinkedservice.IntegrationRuntime `hcl:"integration_runtime,block"`
	// Timeouts: optional
	Timeouts *synapselinkedservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseLinkedService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseLinkedServiceAttributes struct {
	ref terra.Reference
}

func (sls synapseLinkedServiceAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sls.ref.Append("additional_properties"))
}

func (sls synapseLinkedServiceAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](sls.ref.Append("annotations"))
}

func (sls synapseLinkedServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("description"))
}

func (sls synapseLinkedServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("id"))
}

func (sls synapseLinkedServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("name"))
}

func (sls synapseLinkedServiceAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sls.ref.Append("parameters"))
}

func (sls synapseLinkedServiceAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("synapse_workspace_id"))
}

func (sls synapseLinkedServiceAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("type"))
}

func (sls synapseLinkedServiceAttributes) TypePropertiesJson() terra.StringValue {
	return terra.ReferenceString(sls.ref.Append("type_properties_json"))
}

func (sls synapseLinkedServiceAttributes) IntegrationRuntime() terra.ListValue[synapselinkedservice.IntegrationRuntimeAttributes] {
	return terra.ReferenceList[synapselinkedservice.IntegrationRuntimeAttributes](sls.ref.Append("integration_runtime"))
}

func (sls synapseLinkedServiceAttributes) Timeouts() synapselinkedservice.TimeoutsAttributes {
	return terra.ReferenceSingle[synapselinkedservice.TimeoutsAttributes](sls.ref.Append("timeouts"))
}

type synapseLinkedServiceState struct {
	AdditionalProperties map[string]string                              `json:"additional_properties"`
	Annotations          []string                                       `json:"annotations"`
	Description          string                                         `json:"description"`
	Id                   string                                         `json:"id"`
	Name                 string                                         `json:"name"`
	Parameters           map[string]string                              `json:"parameters"`
	SynapseWorkspaceId   string                                         `json:"synapse_workspace_id"`
	Type                 string                                         `json:"type"`
	TypePropertiesJson   string                                         `json:"type_properties_json"`
	IntegrationRuntime   []synapselinkedservice.IntegrationRuntimeState `json:"integration_runtime"`
	Timeouts             *synapselinkedservice.TimeoutsState            `json:"timeouts"`
}
