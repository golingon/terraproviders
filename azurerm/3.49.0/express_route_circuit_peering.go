// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressroutecircuitpeering "github.com/golingon/terraproviders/azurerm/3.49.0/expressroutecircuitpeering"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRouteCircuitPeering(name string, args ExpressRouteCircuitPeeringArgs) *ExpressRouteCircuitPeering {
	return &ExpressRouteCircuitPeering{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRouteCircuitPeering)(nil)

type ExpressRouteCircuitPeering struct {
	Name  string
	Args  ExpressRouteCircuitPeeringArgs
	state *expressRouteCircuitPeeringState
}

func (ercp *ExpressRouteCircuitPeering) Type() string {
	return "azurerm_express_route_circuit_peering"
}

func (ercp *ExpressRouteCircuitPeering) LocalName() string {
	return ercp.Name
}

func (ercp *ExpressRouteCircuitPeering) Configuration() interface{} {
	return ercp.Args
}

func (ercp *ExpressRouteCircuitPeering) Attributes() expressRouteCircuitPeeringAttributes {
	return expressRouteCircuitPeeringAttributes{ref: terra.ReferenceResource(ercp)}
}

func (ercp *ExpressRouteCircuitPeering) ImportState(av io.Reader) error {
	ercp.state = &expressRouteCircuitPeeringState{}
	if err := json.NewDecoder(av).Decode(ercp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ercp.Type(), ercp.LocalName(), err)
	}
	return nil
}

func (ercp *ExpressRouteCircuitPeering) State() (*expressRouteCircuitPeeringState, bool) {
	return ercp.state, ercp.state != nil
}

func (ercp *ExpressRouteCircuitPeering) StateMust() *expressRouteCircuitPeeringState {
	if ercp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ercp.Type(), ercp.LocalName()))
	}
	return ercp.state
}

func (ercp *ExpressRouteCircuitPeering) DependOn() terra.Reference {
	return terra.ReferenceResource(ercp)
}

type ExpressRouteCircuitPeeringArgs struct {
	// ExpressRouteCircuitName: string, required
	ExpressRouteCircuitName terra.StringValue `hcl:"express_route_circuit_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv4Enabled: bool, optional
	Ipv4Enabled terra.BoolValue `hcl:"ipv4_enabled,attr"`
	// PeerAsn: number, optional
	PeerAsn terra.NumberValue `hcl:"peer_asn,attr"`
	// PeeringType: string, required
	PeeringType terra.StringValue `hcl:"peering_type,attr" validate:"required"`
	// PrimaryPeerAddressPrefix: string, optional
	PrimaryPeerAddressPrefix terra.StringValue `hcl:"primary_peer_address_prefix,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RouteFilterId: string, optional
	RouteFilterId terra.StringValue `hcl:"route_filter_id,attr"`
	// SecondaryPeerAddressPrefix: string, optional
	SecondaryPeerAddressPrefix terra.StringValue `hcl:"secondary_peer_address_prefix,attr"`
	// SharedKey: string, optional
	SharedKey terra.StringValue `hcl:"shared_key,attr"`
	// VlanId: number, required
	VlanId terra.NumberValue `hcl:"vlan_id,attr" validate:"required"`
	// Ipv6: optional
	Ipv6 *expressroutecircuitpeering.Ipv6 `hcl:"ipv6,block"`
	// MicrosoftPeeringConfig: optional
	MicrosoftPeeringConfig *expressroutecircuitpeering.MicrosoftPeeringConfig `hcl:"microsoft_peering_config,block"`
	// Timeouts: optional
	Timeouts *expressroutecircuitpeering.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRouteCircuitPeering depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRouteCircuitPeeringAttributes struct {
	ref terra.Reference
}

func (ercp expressRouteCircuitPeeringAttributes) AzureAsn() terra.NumberValue {
	return terra.ReferenceNumber(ercp.ref.Append("azure_asn"))
}

func (ercp expressRouteCircuitPeeringAttributes) ExpressRouteCircuitName() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("express_route_circuit_name"))
}

func (ercp expressRouteCircuitPeeringAttributes) GatewayManagerEtag() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("gateway_manager_etag"))
}

func (ercp expressRouteCircuitPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("id"))
}

func (ercp expressRouteCircuitPeeringAttributes) Ipv4Enabled() terra.BoolValue {
	return terra.ReferenceBool(ercp.ref.Append("ipv4_enabled"))
}

func (ercp expressRouteCircuitPeeringAttributes) PeerAsn() terra.NumberValue {
	return terra.ReferenceNumber(ercp.ref.Append("peer_asn"))
}

func (ercp expressRouteCircuitPeeringAttributes) PeeringType() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("peering_type"))
}

func (ercp expressRouteCircuitPeeringAttributes) PrimaryAzurePort() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("primary_azure_port"))
}

func (ercp expressRouteCircuitPeeringAttributes) PrimaryPeerAddressPrefix() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("primary_peer_address_prefix"))
}

func (ercp expressRouteCircuitPeeringAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("resource_group_name"))
}

func (ercp expressRouteCircuitPeeringAttributes) RouteFilterId() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("route_filter_id"))
}

func (ercp expressRouteCircuitPeeringAttributes) SecondaryAzurePort() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("secondary_azure_port"))
}

func (ercp expressRouteCircuitPeeringAttributes) SecondaryPeerAddressPrefix() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("secondary_peer_address_prefix"))
}

func (ercp expressRouteCircuitPeeringAttributes) SharedKey() terra.StringValue {
	return terra.ReferenceString(ercp.ref.Append("shared_key"))
}

func (ercp expressRouteCircuitPeeringAttributes) VlanId() terra.NumberValue {
	return terra.ReferenceNumber(ercp.ref.Append("vlan_id"))
}

func (ercp expressRouteCircuitPeeringAttributes) Ipv6() terra.ListValue[expressroutecircuitpeering.Ipv6Attributes] {
	return terra.ReferenceList[expressroutecircuitpeering.Ipv6Attributes](ercp.ref.Append("ipv6"))
}

func (ercp expressRouteCircuitPeeringAttributes) MicrosoftPeeringConfig() terra.ListValue[expressroutecircuitpeering.MicrosoftPeeringConfigAttributes] {
	return terra.ReferenceList[expressroutecircuitpeering.MicrosoftPeeringConfigAttributes](ercp.ref.Append("microsoft_peering_config"))
}

func (ercp expressRouteCircuitPeeringAttributes) Timeouts() expressroutecircuitpeering.TimeoutsAttributes {
	return terra.ReferenceSingle[expressroutecircuitpeering.TimeoutsAttributes](ercp.ref.Append("timeouts"))
}

type expressRouteCircuitPeeringState struct {
	AzureAsn                   float64                                                  `json:"azure_asn"`
	ExpressRouteCircuitName    string                                                   `json:"express_route_circuit_name"`
	GatewayManagerEtag         string                                                   `json:"gateway_manager_etag"`
	Id                         string                                                   `json:"id"`
	Ipv4Enabled                bool                                                     `json:"ipv4_enabled"`
	PeerAsn                    float64                                                  `json:"peer_asn"`
	PeeringType                string                                                   `json:"peering_type"`
	PrimaryAzurePort           string                                                   `json:"primary_azure_port"`
	PrimaryPeerAddressPrefix   string                                                   `json:"primary_peer_address_prefix"`
	ResourceGroupName          string                                                   `json:"resource_group_name"`
	RouteFilterId              string                                                   `json:"route_filter_id"`
	SecondaryAzurePort         string                                                   `json:"secondary_azure_port"`
	SecondaryPeerAddressPrefix string                                                   `json:"secondary_peer_address_prefix"`
	SharedKey                  string                                                   `json:"shared_key"`
	VlanId                     float64                                                  `json:"vlan_id"`
	Ipv6                       []expressroutecircuitpeering.Ipv6State                   `json:"ipv6"`
	MicrosoftPeeringConfig     []expressroutecircuitpeering.MicrosoftPeeringConfigState `json:"microsoft_peering_config"`
	Timeouts                   *expressroutecircuitpeering.TimeoutsState                `json:"timeouts"`
}
