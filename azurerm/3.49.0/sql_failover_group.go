// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sqlfailovergroup "github.com/golingon/terraproviders/azurerm/3.49.0/sqlfailovergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlFailoverGroup(name string, args SqlFailoverGroupArgs) *SqlFailoverGroup {
	return &SqlFailoverGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlFailoverGroup)(nil)

type SqlFailoverGroup struct {
	Name  string
	Args  SqlFailoverGroupArgs
	state *sqlFailoverGroupState
}

func (sfg *SqlFailoverGroup) Type() string {
	return "azurerm_sql_failover_group"
}

func (sfg *SqlFailoverGroup) LocalName() string {
	return sfg.Name
}

func (sfg *SqlFailoverGroup) Configuration() interface{} {
	return sfg.Args
}

func (sfg *SqlFailoverGroup) Attributes() sqlFailoverGroupAttributes {
	return sqlFailoverGroupAttributes{ref: terra.ReferenceResource(sfg)}
}

func (sfg *SqlFailoverGroup) ImportState(av io.Reader) error {
	sfg.state = &sqlFailoverGroupState{}
	if err := json.NewDecoder(av).Decode(sfg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sfg.Type(), sfg.LocalName(), err)
	}
	return nil
}

func (sfg *SqlFailoverGroup) State() (*sqlFailoverGroupState, bool) {
	return sfg.state, sfg.state != nil
}

func (sfg *SqlFailoverGroup) StateMust() *sqlFailoverGroupState {
	if sfg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sfg.Type(), sfg.LocalName()))
	}
	return sfg.state
}

func (sfg *SqlFailoverGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(sfg)
}

type SqlFailoverGroupArgs struct {
	// Databases: set of string, optional
	Databases terra.SetValue[terra.StringValue] `hcl:"databases,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// PartnerServers: min=1
	PartnerServers []sqlfailovergroup.PartnerServers `hcl:"partner_servers,block" validate:"min=1"`
	// ReadWriteEndpointFailoverPolicy: required
	ReadWriteEndpointFailoverPolicy *sqlfailovergroup.ReadWriteEndpointFailoverPolicy `hcl:"read_write_endpoint_failover_policy,block" validate:"required"`
	// ReadonlyEndpointFailoverPolicy: optional
	ReadonlyEndpointFailoverPolicy *sqlfailovergroup.ReadonlyEndpointFailoverPolicy `hcl:"readonly_endpoint_failover_policy,block"`
	// Timeouts: optional
	Timeouts *sqlfailovergroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlFailoverGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlFailoverGroupAttributes struct {
	ref terra.Reference
}

func (sfg sqlFailoverGroupAttributes) Databases() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sfg.ref.Append("databases"))
}

func (sfg sqlFailoverGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("id"))
}

func (sfg sqlFailoverGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("location"))
}

func (sfg sqlFailoverGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("name"))
}

func (sfg sqlFailoverGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("resource_group_name"))
}

func (sfg sqlFailoverGroupAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("role"))
}

func (sfg sqlFailoverGroupAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("server_name"))
}

func (sfg sqlFailoverGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sfg.ref.Append("tags"))
}

func (sfg sqlFailoverGroupAttributes) PartnerServers() terra.ListValue[sqlfailovergroup.PartnerServersAttributes] {
	return terra.ReferenceList[sqlfailovergroup.PartnerServersAttributes](sfg.ref.Append("partner_servers"))
}

func (sfg sqlFailoverGroupAttributes) ReadWriteEndpointFailoverPolicy() terra.ListValue[sqlfailovergroup.ReadWriteEndpointFailoverPolicyAttributes] {
	return terra.ReferenceList[sqlfailovergroup.ReadWriteEndpointFailoverPolicyAttributes](sfg.ref.Append("read_write_endpoint_failover_policy"))
}

func (sfg sqlFailoverGroupAttributes) ReadonlyEndpointFailoverPolicy() terra.ListValue[sqlfailovergroup.ReadonlyEndpointFailoverPolicyAttributes] {
	return terra.ReferenceList[sqlfailovergroup.ReadonlyEndpointFailoverPolicyAttributes](sfg.ref.Append("readonly_endpoint_failover_policy"))
}

func (sfg sqlFailoverGroupAttributes) Timeouts() sqlfailovergroup.TimeoutsAttributes {
	return terra.ReferenceSingle[sqlfailovergroup.TimeoutsAttributes](sfg.ref.Append("timeouts"))
}

type sqlFailoverGroupState struct {
	Databases                       []string                                                `json:"databases"`
	Id                              string                                                  `json:"id"`
	Location                        string                                                  `json:"location"`
	Name                            string                                                  `json:"name"`
	ResourceGroupName               string                                                  `json:"resource_group_name"`
	Role                            string                                                  `json:"role"`
	ServerName                      string                                                  `json:"server_name"`
	Tags                            map[string]string                                       `json:"tags"`
	PartnerServers                  []sqlfailovergroup.PartnerServersState                  `json:"partner_servers"`
	ReadWriteEndpointFailoverPolicy []sqlfailovergroup.ReadWriteEndpointFailoverPolicyState `json:"read_write_endpoint_failover_policy"`
	ReadonlyEndpointFailoverPolicy  []sqlfailovergroup.ReadonlyEndpointFailoverPolicyState  `json:"readonly_endpoint_failover_policy"`
	Timeouts                        *sqlfailovergroup.TimeoutsState                         `json:"timeouts"`
}
