// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	keyvaultaccesspolicy "github.com/golingon/terraproviders/azurerm/3.49.0/keyvaultaccesspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKeyVaultAccessPolicy(name string, args KeyVaultAccessPolicyArgs) *KeyVaultAccessPolicy {
	return &KeyVaultAccessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultAccessPolicy)(nil)

type KeyVaultAccessPolicy struct {
	Name  string
	Args  KeyVaultAccessPolicyArgs
	state *keyVaultAccessPolicyState
}

func (kvap *KeyVaultAccessPolicy) Type() string {
	return "azurerm_key_vault_access_policy"
}

func (kvap *KeyVaultAccessPolicy) LocalName() string {
	return kvap.Name
}

func (kvap *KeyVaultAccessPolicy) Configuration() interface{} {
	return kvap.Args
}

func (kvap *KeyVaultAccessPolicy) Attributes() keyVaultAccessPolicyAttributes {
	return keyVaultAccessPolicyAttributes{ref: terra.ReferenceResource(kvap)}
}

func (kvap *KeyVaultAccessPolicy) ImportState(av io.Reader) error {
	kvap.state = &keyVaultAccessPolicyState{}
	if err := json.NewDecoder(av).Decode(kvap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvap.Type(), kvap.LocalName(), err)
	}
	return nil
}

func (kvap *KeyVaultAccessPolicy) State() (*keyVaultAccessPolicyState, bool) {
	return kvap.state, kvap.state != nil
}

func (kvap *KeyVaultAccessPolicy) StateMust() *keyVaultAccessPolicyState {
	if kvap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvap.Type(), kvap.LocalName()))
	}
	return kvap.state
}

func (kvap *KeyVaultAccessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(kvap)
}

type KeyVaultAccessPolicyArgs struct {
	// ApplicationId: string, optional
	ApplicationId terra.StringValue `hcl:"application_id,attr"`
	// CertificatePermissions: list of string, optional
	CertificatePermissions terra.ListValue[terra.StringValue] `hcl:"certificate_permissions,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyPermissions: list of string, optional
	KeyPermissions terra.ListValue[terra.StringValue] `hcl:"key_permissions,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// SecretPermissions: list of string, optional
	SecretPermissions terra.ListValue[terra.StringValue] `hcl:"secret_permissions,attr"`
	// StoragePermissions: list of string, optional
	StoragePermissions terra.ListValue[terra.StringValue] `hcl:"storage_permissions,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *keyvaultaccesspolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KeyVaultAccessPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type keyVaultAccessPolicyAttributes struct {
	ref terra.Reference
}

func (kvap keyVaultAccessPolicyAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(kvap.ref.Append("application_id"))
}

func (kvap keyVaultAccessPolicyAttributes) CertificatePermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](kvap.ref.Append("certificate_permissions"))
}

func (kvap keyVaultAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvap.ref.Append("id"))
}

func (kvap keyVaultAccessPolicyAttributes) KeyPermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](kvap.ref.Append("key_permissions"))
}

func (kvap keyVaultAccessPolicyAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceString(kvap.ref.Append("key_vault_id"))
}

func (kvap keyVaultAccessPolicyAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceString(kvap.ref.Append("object_id"))
}

func (kvap keyVaultAccessPolicyAttributes) SecretPermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](kvap.ref.Append("secret_permissions"))
}

func (kvap keyVaultAccessPolicyAttributes) StoragePermissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](kvap.ref.Append("storage_permissions"))
}

func (kvap keyVaultAccessPolicyAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(kvap.ref.Append("tenant_id"))
}

func (kvap keyVaultAccessPolicyAttributes) Timeouts() keyvaultaccesspolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[keyvaultaccesspolicy.TimeoutsAttributes](kvap.ref.Append("timeouts"))
}

type keyVaultAccessPolicyState struct {
	ApplicationId          string                              `json:"application_id"`
	CertificatePermissions []string                            `json:"certificate_permissions"`
	Id                     string                              `json:"id"`
	KeyPermissions         []string                            `json:"key_permissions"`
	KeyVaultId             string                              `json:"key_vault_id"`
	ObjectId               string                              `json:"object_id"`
	SecretPermissions      []string                            `json:"secret_permissions"`
	StoragePermissions     []string                            `json:"storage_permissions"`
	TenantId               string                              `json:"tenant_id"`
	Timeouts               *keyvaultaccesspolicy.TimeoutsState `json:"timeouts"`
}
