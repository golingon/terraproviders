// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicesynapse "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicesynapse"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceSynapse(name string, args DataFactoryLinkedServiceSynapseArgs) *DataFactoryLinkedServiceSynapse {
	return &DataFactoryLinkedServiceSynapse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceSynapse)(nil)

type DataFactoryLinkedServiceSynapse struct {
	Name  string
	Args  DataFactoryLinkedServiceSynapseArgs
	state *dataFactoryLinkedServiceSynapseState
}

func (dflss *DataFactoryLinkedServiceSynapse) Type() string {
	return "azurerm_data_factory_linked_service_synapse"
}

func (dflss *DataFactoryLinkedServiceSynapse) LocalName() string {
	return dflss.Name
}

func (dflss *DataFactoryLinkedServiceSynapse) Configuration() interface{} {
	return dflss.Args
}

func (dflss *DataFactoryLinkedServiceSynapse) Attributes() dataFactoryLinkedServiceSynapseAttributes {
	return dataFactoryLinkedServiceSynapseAttributes{ref: terra.ReferenceResource(dflss)}
}

func (dflss *DataFactoryLinkedServiceSynapse) ImportState(av io.Reader) error {
	dflss.state = &dataFactoryLinkedServiceSynapseState{}
	if err := json.NewDecoder(av).Decode(dflss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflss.Type(), dflss.LocalName(), err)
	}
	return nil
}

func (dflss *DataFactoryLinkedServiceSynapse) State() (*dataFactoryLinkedServiceSynapseState, bool) {
	return dflss.state, dflss.state != nil
}

func (dflss *DataFactoryLinkedServiceSynapse) StateMust() *dataFactoryLinkedServiceSynapseState {
	if dflss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflss.Type(), dflss.LocalName()))
	}
	return dflss.state
}

func (dflss *DataFactoryLinkedServiceSynapse) DependOn() terra.Reference {
	return terra.ReferenceResource(dflss)
}

type DataFactoryLinkedServiceSynapseArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// KeyVaultPassword: optional
	KeyVaultPassword *datafactorylinkedservicesynapse.KeyVaultPassword `hcl:"key_vault_password,block"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicesynapse.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceSynapse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceSynapseAttributes struct {
	ref terra.Reference
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflss.ref.Append("additional_properties"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflss.ref.Append("annotations"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("connection_string"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("data_factory_id"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("description"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("id"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("integration_runtime_name"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflss.ref.Append("name"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflss.ref.Append("parameters"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) KeyVaultPassword() terra.ListValue[datafactorylinkedservicesynapse.KeyVaultPasswordAttributes] {
	return terra.ReferenceList[datafactorylinkedservicesynapse.KeyVaultPasswordAttributes](dflss.ref.Append("key_vault_password"))
}

func (dflss dataFactoryLinkedServiceSynapseAttributes) Timeouts() datafactorylinkedservicesynapse.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicesynapse.TimeoutsAttributes](dflss.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceSynapseState struct {
	AdditionalProperties   map[string]string                                       `json:"additional_properties"`
	Annotations            []string                                                `json:"annotations"`
	ConnectionString       string                                                  `json:"connection_string"`
	DataFactoryId          string                                                  `json:"data_factory_id"`
	Description            string                                                  `json:"description"`
	Id                     string                                                  `json:"id"`
	IntegrationRuntimeName string                                                  `json:"integration_runtime_name"`
	Name                   string                                                  `json:"name"`
	Parameters             map[string]string                                       `json:"parameters"`
	KeyVaultPassword       []datafactorylinkedservicesynapse.KeyVaultPasswordState `json:"key_vault_password"`
	Timeouts               *datafactorylinkedservicesynapse.TimeoutsState          `json:"timeouts"`
}
