// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package medialiveevent

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CrossSiteAccessPolicy struct {
	// ClientAccessPolicy: string, optional
	ClientAccessPolicy terra.StringValue `hcl:"client_access_policy,attr"`
	// CrossDomainPolicy: string, optional
	CrossDomainPolicy terra.StringValue `hcl:"cross_domain_policy,attr"`
}

type Encoding struct {
	// KeyFrameInterval: string, optional
	KeyFrameInterval terra.StringValue `hcl:"key_frame_interval,attr"`
	// PresetName: string, optional
	PresetName terra.StringValue `hcl:"preset_name,attr"`
	// StretchMode: string, optional
	StretchMode terra.StringValue `hcl:"stretch_mode,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Input struct {
	// AccessToken: string, optional
	AccessToken terra.StringValue `hcl:"access_token,attr"`
	// KeyFrameIntervalDuration: string, optional
	KeyFrameIntervalDuration terra.StringValue `hcl:"key_frame_interval_duration,attr"`
	// StreamingProtocol: string, optional
	StreamingProtocol terra.StringValue `hcl:"streaming_protocol,attr"`
	// InputEndpoint: min=0
	Endpoint []InputEndpoint `hcl:"endpoint,block" validate:"min=0"`
	// InputIpAccessControlAllow: min=0
	IpAccessControlAllow []InputIpAccessControlAllow `hcl:"ip_access_control_allow,block" validate:"min=0"`
}

type InputEndpoint struct{}

type InputIpAccessControlAllow struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// SubnetPrefixLength: number, optional
	SubnetPrefixLength terra.NumberValue `hcl:"subnet_prefix_length,attr"`
}

type Preview struct {
	// AlternativeMediaId: string, optional
	AlternativeMediaId terra.StringValue `hcl:"alternative_media_id,attr"`
	// PreviewLocator: string, optional
	PreviewLocator terra.StringValue `hcl:"preview_locator,attr"`
	// StreamingPolicyName: string, optional
	StreamingPolicyName terra.StringValue `hcl:"streaming_policy_name,attr"`
	// PreviewEndpoint: min=0
	Endpoint []PreviewEndpoint `hcl:"endpoint,block" validate:"min=0"`
	// PreviewIpAccessControlAllow: min=0
	IpAccessControlAllow []PreviewIpAccessControlAllow `hcl:"ip_access_control_allow,block" validate:"min=0"`
}

type PreviewEndpoint struct{}

type PreviewIpAccessControlAllow struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// SubnetPrefixLength: number, optional
	SubnetPrefixLength terra.NumberValue `hcl:"subnet_prefix_length,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CrossSiteAccessPolicyAttributes struct {
	ref terra.Reference
}

func (csap CrossSiteAccessPolicyAttributes) InternalRef() terra.Reference {
	return csap.ref
}

func (csap CrossSiteAccessPolicyAttributes) InternalWithRef(ref terra.Reference) CrossSiteAccessPolicyAttributes {
	return CrossSiteAccessPolicyAttributes{ref: ref}
}

func (csap CrossSiteAccessPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return csap.ref.InternalTokens()
}

func (csap CrossSiteAccessPolicyAttributes) ClientAccessPolicy() terra.StringValue {
	return terra.ReferenceString(csap.ref.Append("client_access_policy"))
}

func (csap CrossSiteAccessPolicyAttributes) CrossDomainPolicy() terra.StringValue {
	return terra.ReferenceString(csap.ref.Append("cross_domain_policy"))
}

type EncodingAttributes struct {
	ref terra.Reference
}

func (e EncodingAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EncodingAttributes) InternalWithRef(ref terra.Reference) EncodingAttributes {
	return EncodingAttributes{ref: ref}
}

func (e EncodingAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EncodingAttributes) KeyFrameInterval() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("key_frame_interval"))
}

func (e EncodingAttributes) PresetName() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("preset_name"))
}

func (e EncodingAttributes) StretchMode() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("stretch_mode"))
}

func (e EncodingAttributes) Type() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("type"))
}

type InputAttributes struct {
	ref terra.Reference
}

func (i InputAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i InputAttributes) InternalWithRef(ref terra.Reference) InputAttributes {
	return InputAttributes{ref: ref}
}

func (i InputAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i InputAttributes) AccessToken() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("access_token"))
}

func (i InputAttributes) KeyFrameIntervalDuration() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("key_frame_interval_duration"))
}

func (i InputAttributes) StreamingProtocol() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("streaming_protocol"))
}

func (i InputAttributes) Endpoint() terra.ListValue[InputEndpointAttributes] {
	return terra.ReferenceList[InputEndpointAttributes](i.ref.Append("endpoint"))
}

func (i InputAttributes) IpAccessControlAllow() terra.ListValue[InputIpAccessControlAllowAttributes] {
	return terra.ReferenceList[InputIpAccessControlAllowAttributes](i.ref.Append("ip_access_control_allow"))
}

type InputEndpointAttributes struct {
	ref terra.Reference
}

func (e InputEndpointAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e InputEndpointAttributes) InternalWithRef(ref terra.Reference) InputEndpointAttributes {
	return InputEndpointAttributes{ref: ref}
}

func (e InputEndpointAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e InputEndpointAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("protocol"))
}

func (e InputEndpointAttributes) Url() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("url"))
}

type InputIpAccessControlAllowAttributes struct {
	ref terra.Reference
}

func (iaca InputIpAccessControlAllowAttributes) InternalRef() terra.Reference {
	return iaca.ref
}

func (iaca InputIpAccessControlAllowAttributes) InternalWithRef(ref terra.Reference) InputIpAccessControlAllowAttributes {
	return InputIpAccessControlAllowAttributes{ref: ref}
}

func (iaca InputIpAccessControlAllowAttributes) InternalTokens() hclwrite.Tokens {
	return iaca.ref.InternalTokens()
}

func (iaca InputIpAccessControlAllowAttributes) Address() terra.StringValue {
	return terra.ReferenceString(iaca.ref.Append("address"))
}

func (iaca InputIpAccessControlAllowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iaca.ref.Append("name"))
}

func (iaca InputIpAccessControlAllowAttributes) SubnetPrefixLength() terra.NumberValue {
	return terra.ReferenceNumber(iaca.ref.Append("subnet_prefix_length"))
}

type PreviewAttributes struct {
	ref terra.Reference
}

func (p PreviewAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PreviewAttributes) InternalWithRef(ref terra.Reference) PreviewAttributes {
	return PreviewAttributes{ref: ref}
}

func (p PreviewAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PreviewAttributes) AlternativeMediaId() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("alternative_media_id"))
}

func (p PreviewAttributes) PreviewLocator() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("preview_locator"))
}

func (p PreviewAttributes) StreamingPolicyName() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("streaming_policy_name"))
}

func (p PreviewAttributes) Endpoint() terra.ListValue[PreviewEndpointAttributes] {
	return terra.ReferenceList[PreviewEndpointAttributes](p.ref.Append("endpoint"))
}

func (p PreviewAttributes) IpAccessControlAllow() terra.ListValue[PreviewIpAccessControlAllowAttributes] {
	return terra.ReferenceList[PreviewIpAccessControlAllowAttributes](p.ref.Append("ip_access_control_allow"))
}

type PreviewEndpointAttributes struct {
	ref terra.Reference
}

func (e PreviewEndpointAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e PreviewEndpointAttributes) InternalWithRef(ref terra.Reference) PreviewEndpointAttributes {
	return PreviewEndpointAttributes{ref: ref}
}

func (e PreviewEndpointAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e PreviewEndpointAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("protocol"))
}

func (e PreviewEndpointAttributes) Url() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("url"))
}

type PreviewIpAccessControlAllowAttributes struct {
	ref terra.Reference
}

func (iaca PreviewIpAccessControlAllowAttributes) InternalRef() terra.Reference {
	return iaca.ref
}

func (iaca PreviewIpAccessControlAllowAttributes) InternalWithRef(ref terra.Reference) PreviewIpAccessControlAllowAttributes {
	return PreviewIpAccessControlAllowAttributes{ref: ref}
}

func (iaca PreviewIpAccessControlAllowAttributes) InternalTokens() hclwrite.Tokens {
	return iaca.ref.InternalTokens()
}

func (iaca PreviewIpAccessControlAllowAttributes) Address() terra.StringValue {
	return terra.ReferenceString(iaca.ref.Append("address"))
}

func (iaca PreviewIpAccessControlAllowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iaca.ref.Append("name"))
}

func (iaca PreviewIpAccessControlAllowAttributes) SubnetPrefixLength() terra.NumberValue {
	return terra.ReferenceNumber(iaca.ref.Append("subnet_prefix_length"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CrossSiteAccessPolicyState struct {
	ClientAccessPolicy string `json:"client_access_policy"`
	CrossDomainPolicy  string `json:"cross_domain_policy"`
}

type EncodingState struct {
	KeyFrameInterval string `json:"key_frame_interval"`
	PresetName       string `json:"preset_name"`
	StretchMode      string `json:"stretch_mode"`
	Type             string `json:"type"`
}

type InputState struct {
	AccessToken              string                           `json:"access_token"`
	KeyFrameIntervalDuration string                           `json:"key_frame_interval_duration"`
	StreamingProtocol        string                           `json:"streaming_protocol"`
	Endpoint                 []InputEndpointState             `json:"endpoint"`
	IpAccessControlAllow     []InputIpAccessControlAllowState `json:"ip_access_control_allow"`
}

type InputEndpointState struct {
	Protocol string `json:"protocol"`
	Url      string `json:"url"`
}

type InputIpAccessControlAllowState struct {
	Address            string  `json:"address"`
	Name               string  `json:"name"`
	SubnetPrefixLength float64 `json:"subnet_prefix_length"`
}

type PreviewState struct {
	AlternativeMediaId   string                             `json:"alternative_media_id"`
	PreviewLocator       string                             `json:"preview_locator"`
	StreamingPolicyName  string                             `json:"streaming_policy_name"`
	Endpoint             []PreviewEndpointState             `json:"endpoint"`
	IpAccessControlAllow []PreviewIpAccessControlAllowState `json:"ip_access_control_allow"`
}

type PreviewEndpointState struct {
	Protocol string `json:"protocol"`
	Url      string `json:"url"`
}

type PreviewIpAccessControlAllowState struct {
	Address            string  `json:"address"`
	Name               string  `json:"name"`
	SubnetPrefixLength float64 `json:"subnet_prefix_length"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
