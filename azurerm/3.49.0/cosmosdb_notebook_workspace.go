// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbnotebookworkspace "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbnotebookworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbNotebookWorkspace(name string, args CosmosdbNotebookWorkspaceArgs) *CosmosdbNotebookWorkspace {
	return &CosmosdbNotebookWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbNotebookWorkspace)(nil)

type CosmosdbNotebookWorkspace struct {
	Name  string
	Args  CosmosdbNotebookWorkspaceArgs
	state *cosmosdbNotebookWorkspaceState
}

func (cnw *CosmosdbNotebookWorkspace) Type() string {
	return "azurerm_cosmosdb_notebook_workspace"
}

func (cnw *CosmosdbNotebookWorkspace) LocalName() string {
	return cnw.Name
}

func (cnw *CosmosdbNotebookWorkspace) Configuration() interface{} {
	return cnw.Args
}

func (cnw *CosmosdbNotebookWorkspace) Attributes() cosmosdbNotebookWorkspaceAttributes {
	return cosmosdbNotebookWorkspaceAttributes{ref: terra.ReferenceResource(cnw)}
}

func (cnw *CosmosdbNotebookWorkspace) ImportState(av io.Reader) error {
	cnw.state = &cosmosdbNotebookWorkspaceState{}
	if err := json.NewDecoder(av).Decode(cnw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cnw.Type(), cnw.LocalName(), err)
	}
	return nil
}

func (cnw *CosmosdbNotebookWorkspace) State() (*cosmosdbNotebookWorkspaceState, bool) {
	return cnw.state, cnw.state != nil
}

func (cnw *CosmosdbNotebookWorkspace) StateMust() *cosmosdbNotebookWorkspaceState {
	if cnw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cnw.Type(), cnw.LocalName()))
	}
	return cnw.state
}

func (cnw *CosmosdbNotebookWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(cnw)
}

type CosmosdbNotebookWorkspaceArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbnotebookworkspace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbNotebookWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbNotebookWorkspaceAttributes struct {
	ref terra.Reference
}

func (cnw cosmosdbNotebookWorkspaceAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cnw.ref.Append("account_name"))
}

func (cnw cosmosdbNotebookWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cnw.ref.Append("id"))
}

func (cnw cosmosdbNotebookWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cnw.ref.Append("name"))
}

func (cnw cosmosdbNotebookWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cnw.ref.Append("resource_group_name"))
}

func (cnw cosmosdbNotebookWorkspaceAttributes) ServerEndpoint() terra.StringValue {
	return terra.ReferenceString(cnw.ref.Append("server_endpoint"))
}

func (cnw cosmosdbNotebookWorkspaceAttributes) Timeouts() cosmosdbnotebookworkspace.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbnotebookworkspace.TimeoutsAttributes](cnw.ref.Append("timeouts"))
}

type cosmosdbNotebookWorkspaceState struct {
	AccountName       string                                   `json:"account_name"`
	Id                string                                   `json:"id"`
	Name              string                                   `json:"name"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	ServerEndpoint    string                                   `json:"server_endpoint"`
	Timeouts          *cosmosdbnotebookworkspace.TimeoutsState `json:"timeouts"`
}
