// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationvariableint "github.com/golingon/terraproviders/azurerm/3.49.0/automationvariableint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationVariableInt(name string, args AutomationVariableIntArgs) *AutomationVariableInt {
	return &AutomationVariableInt{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationVariableInt)(nil)

type AutomationVariableInt struct {
	Name  string
	Args  AutomationVariableIntArgs
	state *automationVariableIntState
}

func (avi *AutomationVariableInt) Type() string {
	return "azurerm_automation_variable_int"
}

func (avi *AutomationVariableInt) LocalName() string {
	return avi.Name
}

func (avi *AutomationVariableInt) Configuration() interface{} {
	return avi.Args
}

func (avi *AutomationVariableInt) Attributes() automationVariableIntAttributes {
	return automationVariableIntAttributes{ref: terra.ReferenceResource(avi)}
}

func (avi *AutomationVariableInt) ImportState(av io.Reader) error {
	avi.state = &automationVariableIntState{}
	if err := json.NewDecoder(av).Decode(avi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avi.Type(), avi.LocalName(), err)
	}
	return nil
}

func (avi *AutomationVariableInt) State() (*automationVariableIntState, bool) {
	return avi.state, avi.state != nil
}

func (avi *AutomationVariableInt) StateMust() *automationVariableIntState {
	if avi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avi.Type(), avi.LocalName()))
	}
	return avi.state
}

func (avi *AutomationVariableInt) DependOn() terra.Reference {
	return terra.ReferenceResource(avi)
}

type AutomationVariableIntArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
	// Timeouts: optional
	Timeouts *automationvariableint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationVariableInt depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationVariableIntAttributes struct {
	ref terra.Reference
}

func (avi automationVariableIntAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(avi.ref.Append("automation_account_name"))
}

func (avi automationVariableIntAttributes) Description() terra.StringValue {
	return terra.ReferenceString(avi.ref.Append("description"))
}

func (avi automationVariableIntAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(avi.ref.Append("encrypted"))
}

func (avi automationVariableIntAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avi.ref.Append("id"))
}

func (avi automationVariableIntAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avi.ref.Append("name"))
}

func (avi automationVariableIntAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(avi.ref.Append("resource_group_name"))
}

func (avi automationVariableIntAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(avi.ref.Append("value"))
}

func (avi automationVariableIntAttributes) Timeouts() automationvariableint.TimeoutsAttributes {
	return terra.ReferenceSingle[automationvariableint.TimeoutsAttributes](avi.ref.Append("timeouts"))
}

type automationVariableIntState struct {
	AutomationAccountName string                               `json:"automation_account_name"`
	Description           string                               `json:"description"`
	Encrypted             bool                                 `json:"encrypted"`
	Id                    string                               `json:"id"`
	Name                  string                               `json:"name"`
	ResourceGroupName     string                               `json:"resource_group_name"`
	Value                 float64                              `json:"value"`
	Timeouts              *automationvariableint.TimeoutsState `json:"timeouts"`
}
