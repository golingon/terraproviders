// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	loganalyticslinkedstorageaccount "github.com/golingon/terraproviders/azurerm/3.49.0/loganalyticslinkedstorageaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLogAnalyticsLinkedStorageAccount(name string, args LogAnalyticsLinkedStorageAccountArgs) *LogAnalyticsLinkedStorageAccount {
	return &LogAnalyticsLinkedStorageAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LogAnalyticsLinkedStorageAccount)(nil)

type LogAnalyticsLinkedStorageAccount struct {
	Name  string
	Args  LogAnalyticsLinkedStorageAccountArgs
	state *logAnalyticsLinkedStorageAccountState
}

func (lalsa *LogAnalyticsLinkedStorageAccount) Type() string {
	return "azurerm_log_analytics_linked_storage_account"
}

func (lalsa *LogAnalyticsLinkedStorageAccount) LocalName() string {
	return lalsa.Name
}

func (lalsa *LogAnalyticsLinkedStorageAccount) Configuration() interface{} {
	return lalsa.Args
}

func (lalsa *LogAnalyticsLinkedStorageAccount) Attributes() logAnalyticsLinkedStorageAccountAttributes {
	return logAnalyticsLinkedStorageAccountAttributes{ref: terra.ReferenceResource(lalsa)}
}

func (lalsa *LogAnalyticsLinkedStorageAccount) ImportState(av io.Reader) error {
	lalsa.state = &logAnalyticsLinkedStorageAccountState{}
	if err := json.NewDecoder(av).Decode(lalsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lalsa.Type(), lalsa.LocalName(), err)
	}
	return nil
}

func (lalsa *LogAnalyticsLinkedStorageAccount) State() (*logAnalyticsLinkedStorageAccountState, bool) {
	return lalsa.state, lalsa.state != nil
}

func (lalsa *LogAnalyticsLinkedStorageAccount) StateMust() *logAnalyticsLinkedStorageAccountState {
	if lalsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lalsa.Type(), lalsa.LocalName()))
	}
	return lalsa.state
}

func (lalsa *LogAnalyticsLinkedStorageAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(lalsa)
}

type LogAnalyticsLinkedStorageAccountArgs struct {
	// DataSourceType: string, required
	DataSourceType terra.StringValue `hcl:"data_source_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountIds: set of string, required
	StorageAccountIds terra.SetValue[terra.StringValue] `hcl:"storage_account_ids,attr" validate:"required"`
	// WorkspaceResourceId: string, required
	WorkspaceResourceId terra.StringValue `hcl:"workspace_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *loganalyticslinkedstorageaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LogAnalyticsLinkedStorageAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type logAnalyticsLinkedStorageAccountAttributes struct {
	ref terra.Reference
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) DataSourceType() terra.StringValue {
	return terra.ReferenceString(lalsa.ref.Append("data_source_type"))
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lalsa.ref.Append("id"))
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lalsa.ref.Append("resource_group_name"))
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) StorageAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lalsa.ref.Append("storage_account_ids"))
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) WorkspaceResourceId() terra.StringValue {
	return terra.ReferenceString(lalsa.ref.Append("workspace_resource_id"))
}

func (lalsa logAnalyticsLinkedStorageAccountAttributes) Timeouts() loganalyticslinkedstorageaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[loganalyticslinkedstorageaccount.TimeoutsAttributes](lalsa.ref.Append("timeouts"))
}

type logAnalyticsLinkedStorageAccountState struct {
	DataSourceType      string                                          `json:"data_source_type"`
	Id                  string                                          `json:"id"`
	ResourceGroupName   string                                          `json:"resource_group_name"`
	StorageAccountIds   []string                                        `json:"storage_account_ids"`
	WorkspaceResourceId string                                          `json:"workspace_resource_id"`
	Timeouts            *loganalyticslinkedstorageaccount.TimeoutsState `json:"timeouts"`
}
