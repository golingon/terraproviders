// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkconnectionmonitor "github.com/golingon/terraproviders/azurerm/3.49.0/networkconnectionmonitor"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkConnectionMonitor(name string, args NetworkConnectionMonitorArgs) *NetworkConnectionMonitor {
	return &NetworkConnectionMonitor{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkConnectionMonitor)(nil)

type NetworkConnectionMonitor struct {
	Name  string
	Args  NetworkConnectionMonitorArgs
	state *networkConnectionMonitorState
}

func (ncm *NetworkConnectionMonitor) Type() string {
	return "azurerm_network_connection_monitor"
}

func (ncm *NetworkConnectionMonitor) LocalName() string {
	return ncm.Name
}

func (ncm *NetworkConnectionMonitor) Configuration() interface{} {
	return ncm.Args
}

func (ncm *NetworkConnectionMonitor) Attributes() networkConnectionMonitorAttributes {
	return networkConnectionMonitorAttributes{ref: terra.ReferenceResource(ncm)}
}

func (ncm *NetworkConnectionMonitor) ImportState(av io.Reader) error {
	ncm.state = &networkConnectionMonitorState{}
	if err := json.NewDecoder(av).Decode(ncm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncm.Type(), ncm.LocalName(), err)
	}
	return nil
}

func (ncm *NetworkConnectionMonitor) State() (*networkConnectionMonitorState, bool) {
	return ncm.state, ncm.state != nil
}

func (ncm *NetworkConnectionMonitor) StateMust() *networkConnectionMonitorState {
	if ncm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncm.Type(), ncm.LocalName()))
	}
	return ncm.state
}

func (ncm *NetworkConnectionMonitor) DependOn() terra.Reference {
	return terra.ReferenceResource(ncm)
}

type NetworkConnectionMonitorArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkWatcherId: string, required
	NetworkWatcherId terra.StringValue `hcl:"network_watcher_id,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// OutputWorkspaceResourceIds: set of string, optional
	OutputWorkspaceResourceIds terra.SetValue[terra.StringValue] `hcl:"output_workspace_resource_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Endpoint: min=1
	Endpoint []networkconnectionmonitor.Endpoint `hcl:"endpoint,block" validate:"min=1"`
	// TestConfiguration: min=1
	TestConfiguration []networkconnectionmonitor.TestConfiguration `hcl:"test_configuration,block" validate:"min=1"`
	// TestGroup: min=1
	TestGroup []networkconnectionmonitor.TestGroup `hcl:"test_group,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *networkconnectionmonitor.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkConnectionMonitor depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkConnectionMonitorAttributes struct {
	ref terra.Reference
}

func (ncm networkConnectionMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ncm.ref.Append("id"))
}

func (ncm networkConnectionMonitorAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ncm.ref.Append("location"))
}

func (ncm networkConnectionMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ncm.ref.Append("name"))
}

func (ncm networkConnectionMonitorAttributes) NetworkWatcherId() terra.StringValue {
	return terra.ReferenceString(ncm.ref.Append("network_watcher_id"))
}

func (ncm networkConnectionMonitorAttributes) Notes() terra.StringValue {
	return terra.ReferenceString(ncm.ref.Append("notes"))
}

func (ncm networkConnectionMonitorAttributes) OutputWorkspaceResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ncm.ref.Append("output_workspace_resource_ids"))
}

func (ncm networkConnectionMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ncm.ref.Append("tags"))
}

func (ncm networkConnectionMonitorAttributes) Endpoint() terra.SetValue[networkconnectionmonitor.EndpointAttributes] {
	return terra.ReferenceSet[networkconnectionmonitor.EndpointAttributes](ncm.ref.Append("endpoint"))
}

func (ncm networkConnectionMonitorAttributes) TestConfiguration() terra.SetValue[networkconnectionmonitor.TestConfigurationAttributes] {
	return terra.ReferenceSet[networkconnectionmonitor.TestConfigurationAttributes](ncm.ref.Append("test_configuration"))
}

func (ncm networkConnectionMonitorAttributes) TestGroup() terra.SetValue[networkconnectionmonitor.TestGroupAttributes] {
	return terra.ReferenceSet[networkconnectionmonitor.TestGroupAttributes](ncm.ref.Append("test_group"))
}

func (ncm networkConnectionMonitorAttributes) Timeouts() networkconnectionmonitor.TimeoutsAttributes {
	return terra.ReferenceSingle[networkconnectionmonitor.TimeoutsAttributes](ncm.ref.Append("timeouts"))
}

type networkConnectionMonitorState struct {
	Id                         string                                            `json:"id"`
	Location                   string                                            `json:"location"`
	Name                       string                                            `json:"name"`
	NetworkWatcherId           string                                            `json:"network_watcher_id"`
	Notes                      string                                            `json:"notes"`
	OutputWorkspaceResourceIds []string                                          `json:"output_workspace_resource_ids"`
	Tags                       map[string]string                                 `json:"tags"`
	Endpoint                   []networkconnectionmonitor.EndpointState          `json:"endpoint"`
	TestConfiguration          []networkconnectionmonitor.TestConfigurationState `json:"test_configuration"`
	TestGroup                  []networkconnectionmonitor.TestGroupState         `json:"test_group"`
	Timeouts                   *networkconnectionmonitor.TimeoutsState           `json:"timeouts"`
}
