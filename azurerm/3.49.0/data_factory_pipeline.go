// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorypipeline "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorypipeline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryPipeline(name string, args DataFactoryPipelineArgs) *DataFactoryPipeline {
	return &DataFactoryPipeline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryPipeline)(nil)

type DataFactoryPipeline struct {
	Name  string
	Args  DataFactoryPipelineArgs
	state *dataFactoryPipelineState
}

func (dfp *DataFactoryPipeline) Type() string {
	return "azurerm_data_factory_pipeline"
}

func (dfp *DataFactoryPipeline) LocalName() string {
	return dfp.Name
}

func (dfp *DataFactoryPipeline) Configuration() interface{} {
	return dfp.Args
}

func (dfp *DataFactoryPipeline) Attributes() dataFactoryPipelineAttributes {
	return dataFactoryPipelineAttributes{ref: terra.ReferenceResource(dfp)}
}

func (dfp *DataFactoryPipeline) ImportState(av io.Reader) error {
	dfp.state = &dataFactoryPipelineState{}
	if err := json.NewDecoder(av).Decode(dfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfp.Type(), dfp.LocalName(), err)
	}
	return nil
}

func (dfp *DataFactoryPipeline) State() (*dataFactoryPipelineState, bool) {
	return dfp.state, dfp.state != nil
}

func (dfp *DataFactoryPipeline) StateMust() *dataFactoryPipelineState {
	if dfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfp.Type(), dfp.LocalName()))
	}
	return dfp.state
}

func (dfp *DataFactoryPipeline) DependOn() terra.Reference {
	return terra.ReferenceResource(dfp)
}

type DataFactoryPipelineArgs struct {
	// ActivitiesJson: string, optional
	ActivitiesJson terra.StringValue `hcl:"activities_json,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// Concurrency: number, optional
	Concurrency terra.NumberValue `hcl:"concurrency,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MoniterMetricsAfterDuration: string, optional
	MoniterMetricsAfterDuration terra.StringValue `hcl:"moniter_metrics_after_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
	// Timeouts: optional
	Timeouts *datafactorypipeline.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryPipeline depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryPipelineAttributes struct {
	ref terra.Reference
}

func (dfp dataFactoryPipelineAttributes) ActivitiesJson() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("activities_json"))
}

func (dfp dataFactoryPipelineAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfp.ref.Append("annotations"))
}

func (dfp dataFactoryPipelineAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceNumber(dfp.ref.Append("concurrency"))
}

func (dfp dataFactoryPipelineAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("data_factory_id"))
}

func (dfp dataFactoryPipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("description"))
}

func (dfp dataFactoryPipelineAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("folder"))
}

func (dfp dataFactoryPipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("id"))
}

func (dfp dataFactoryPipelineAttributes) MoniterMetricsAfterDuration() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("moniter_metrics_after_duration"))
}

func (dfp dataFactoryPipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfp.ref.Append("name"))
}

func (dfp dataFactoryPipelineAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfp.ref.Append("parameters"))
}

func (dfp dataFactoryPipelineAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfp.ref.Append("variables"))
}

func (dfp dataFactoryPipelineAttributes) Timeouts() datafactorypipeline.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorypipeline.TimeoutsAttributes](dfp.ref.Append("timeouts"))
}

type dataFactoryPipelineState struct {
	ActivitiesJson              string                             `json:"activities_json"`
	Annotations                 []string                           `json:"annotations"`
	Concurrency                 float64                            `json:"concurrency"`
	DataFactoryId               string                             `json:"data_factory_id"`
	Description                 string                             `json:"description"`
	Folder                      string                             `json:"folder"`
	Id                          string                             `json:"id"`
	MoniterMetricsAfterDuration string                             `json:"moniter_metrics_after_duration"`
	Name                        string                             `json:"name"`
	Parameters                  map[string]string                  `json:"parameters"`
	Variables                   map[string]string                  `json:"variables"`
	Timeouts                    *datafactorypipeline.TimeoutsState `json:"timeouts"`
}
