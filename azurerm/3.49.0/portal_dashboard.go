// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	portaldashboard "github.com/golingon/terraproviders/azurerm/3.49.0/portaldashboard"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPortalDashboard(name string, args PortalDashboardArgs) *PortalDashboard {
	return &PortalDashboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PortalDashboard)(nil)

type PortalDashboard struct {
	Name  string
	Args  PortalDashboardArgs
	state *portalDashboardState
}

func (pd *PortalDashboard) Type() string {
	return "azurerm_portal_dashboard"
}

func (pd *PortalDashboard) LocalName() string {
	return pd.Name
}

func (pd *PortalDashboard) Configuration() interface{} {
	return pd.Args
}

func (pd *PortalDashboard) Attributes() portalDashboardAttributes {
	return portalDashboardAttributes{ref: terra.ReferenceResource(pd)}
}

func (pd *PortalDashboard) ImportState(av io.Reader) error {
	pd.state = &portalDashboardState{}
	if err := json.NewDecoder(av).Decode(pd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pd.Type(), pd.LocalName(), err)
	}
	return nil
}

func (pd *PortalDashboard) State() (*portalDashboardState, bool) {
	return pd.state, pd.state != nil
}

func (pd *PortalDashboard) StateMust() *portalDashboardState {
	if pd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pd.Type(), pd.LocalName()))
	}
	return pd.state
}

func (pd *PortalDashboard) DependOn() terra.Reference {
	return terra.ReferenceResource(pd)
}

type PortalDashboardArgs struct {
	// DashboardProperties: string, required
	DashboardProperties terra.StringValue `hcl:"dashboard_properties,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *portaldashboard.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PortalDashboard depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type portalDashboardAttributes struct {
	ref terra.Reference
}

func (pd portalDashboardAttributes) DashboardProperties() terra.StringValue {
	return terra.ReferenceString(pd.ref.Append("dashboard_properties"))
}

func (pd portalDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pd.ref.Append("id"))
}

func (pd portalDashboardAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pd.ref.Append("location"))
}

func (pd portalDashboardAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pd.ref.Append("name"))
}

func (pd portalDashboardAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pd.ref.Append("resource_group_name"))
}

func (pd portalDashboardAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pd.ref.Append("tags"))
}

func (pd portalDashboardAttributes) Timeouts() portaldashboard.TimeoutsAttributes {
	return terra.ReferenceSingle[portaldashboard.TimeoutsAttributes](pd.ref.Append("timeouts"))
}

type portalDashboardState struct {
	DashboardProperties string                         `json:"dashboard_properties"`
	Id                  string                         `json:"id"`
	Location            string                         `json:"location"`
	Name                string                         `json:"name"`
	ResourceGroupName   string                         `json:"resource_group_name"`
	Tags                map[string]string              `json:"tags"`
	Timeouts            *portaldashboard.TimeoutsState `json:"timeouts"`
}
