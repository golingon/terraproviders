// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package virtualhubroutetable

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Route struct {
	// Destinations: set of string, required
	Destinations terra.SetValue[terra.StringValue] `hcl:"destinations,attr" validate:"required"`
	// DestinationsType: string, required
	DestinationsType terra.StringValue `hcl:"destinations_type,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NextHop: string, required
	NextHop terra.StringValue `hcl:"next_hop,attr" validate:"required"`
	// NextHopType: string, optional
	NextHopType terra.StringValue `hcl:"next_hop_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RouteAttributes struct {
	ref terra.Reference
}

func (r RouteAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RouteAttributes) InternalWithRef(ref terra.Reference) RouteAttributes {
	return RouteAttributes{ref: ref}
}

func (r RouteAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RouteAttributes) Destinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](r.ref.Append("destinations"))
}

func (r RouteAttributes) DestinationsType() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("destinations_type"))
}

func (r RouteAttributes) Name() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("name"))
}

func (r RouteAttributes) NextHop() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("next_hop"))
}

func (r RouteAttributes) NextHopType() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("next_hop_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type RouteState struct {
	Destinations     []string `json:"destinations"`
	DestinationsType string   `json:"destinations_type"`
	Name             string   `json:"name"`
	NextHop          string   `json:"next_hop"`
	NextHopType      string   `json:"next_hop_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
