// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package storageaccount

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AzureFilesAuthentication struct {
	// DirectoryType: string, required
	DirectoryType terra.StringValue `hcl:"directory_type,attr" validate:"required"`
	// ActiveDirectory: optional
	ActiveDirectory *ActiveDirectory `hcl:"active_directory,block"`
}

type ActiveDirectory struct {
	// DomainGuid: string, required
	DomainGuid terra.StringValue `hcl:"domain_guid,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// DomainSid: string, required
	DomainSid terra.StringValue `hcl:"domain_sid,attr" validate:"required"`
	// ForestName: string, required
	ForestName terra.StringValue `hcl:"forest_name,attr" validate:"required"`
	// NetbiosDomainName: string, required
	NetbiosDomainName terra.StringValue `hcl:"netbios_domain_name,attr" validate:"required"`
	// StorageSid: string, required
	StorageSid terra.StringValue `hcl:"storage_sid,attr" validate:"required"`
}

type BlobProperties struct {
	// ChangeFeedEnabled: bool, optional
	ChangeFeedEnabled terra.BoolValue `hcl:"change_feed_enabled,attr"`
	// ChangeFeedRetentionInDays: number, optional
	ChangeFeedRetentionInDays terra.NumberValue `hcl:"change_feed_retention_in_days,attr"`
	// DefaultServiceVersion: string, optional
	DefaultServiceVersion terra.StringValue `hcl:"default_service_version,attr"`
	// LastAccessTimeEnabled: bool, optional
	LastAccessTimeEnabled terra.BoolValue `hcl:"last_access_time_enabled,attr"`
	// VersioningEnabled: bool, optional
	VersioningEnabled terra.BoolValue `hcl:"versioning_enabled,attr"`
	// ContainerDeleteRetentionPolicy: optional
	ContainerDeleteRetentionPolicy *ContainerDeleteRetentionPolicy `hcl:"container_delete_retention_policy,block"`
	// BlobPropertiesCorsRule: min=0,max=5
	CorsRule []BlobPropertiesCorsRule `hcl:"cors_rule,block" validate:"min=0,max=5"`
	// DeleteRetentionPolicy: optional
	DeleteRetentionPolicy *DeleteRetentionPolicy `hcl:"delete_retention_policy,block"`
	// RestorePolicy: optional
	RestorePolicy *RestorePolicy `hcl:"restore_policy,block"`
}

type ContainerDeleteRetentionPolicy struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
}

type BlobPropertiesCorsRule struct {
	// AllowedHeaders: list of string, required
	AllowedHeaders terra.ListValue[terra.StringValue] `hcl:"allowed_headers,attr" validate:"required"`
	// AllowedMethods: list of string, required
	AllowedMethods terra.ListValue[terra.StringValue] `hcl:"allowed_methods,attr" validate:"required"`
	// AllowedOrigins: list of string, required
	AllowedOrigins terra.ListValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// ExposedHeaders: list of string, required
	ExposedHeaders terra.ListValue[terra.StringValue] `hcl:"exposed_headers,attr" validate:"required"`
	// MaxAgeInSeconds: number, required
	MaxAgeInSeconds terra.NumberValue `hcl:"max_age_in_seconds,attr" validate:"required"`
}

type DeleteRetentionPolicy struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
}

type RestorePolicy struct {
	// Days: number, required
	Days terra.NumberValue `hcl:"days,attr" validate:"required"`
}

type CustomDomain struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UseSubdomain: bool, optional
	UseSubdomain terra.BoolValue `hcl:"use_subdomain,attr"`
}

type CustomerManagedKey struct {
	// KeyVaultKeyId: string, required
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr" validate:"required"`
	// UserAssignedIdentityId: string, required
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ImmutabilityPolicy struct {
	// AllowProtectedAppendWrites: bool, required
	AllowProtectedAppendWrites terra.BoolValue `hcl:"allow_protected_append_writes,attr" validate:"required"`
	// PeriodSinceCreationInDays: number, required
	PeriodSinceCreationInDays terra.NumberValue `hcl:"period_since_creation_in_days,attr" validate:"required"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
}

type NetworkRules struct {
	// Bypass: set of string, optional
	Bypass terra.SetValue[terra.StringValue] `hcl:"bypass,attr"`
	// DefaultAction: string, required
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
	// IpRules: set of string, optional
	IpRules terra.SetValue[terra.StringValue] `hcl:"ip_rules,attr"`
	// VirtualNetworkSubnetIds: set of string, optional
	VirtualNetworkSubnetIds terra.SetValue[terra.StringValue] `hcl:"virtual_network_subnet_ids,attr"`
	// PrivateLinkAccess: min=0
	PrivateLinkAccess []PrivateLinkAccess `hcl:"private_link_access,block" validate:"min=0"`
}

type PrivateLinkAccess struct {
	// EndpointResourceId: string, required
	EndpointResourceId terra.StringValue `hcl:"endpoint_resource_id,attr" validate:"required"`
	// EndpointTenantId: string, optional
	EndpointTenantId terra.StringValue `hcl:"endpoint_tenant_id,attr"`
}

type QueueProperties struct {
	// QueuePropertiesCorsRule: min=0,max=5
	CorsRule []QueuePropertiesCorsRule `hcl:"cors_rule,block" validate:"min=0,max=5"`
	// HourMetrics: optional
	HourMetrics *HourMetrics `hcl:"hour_metrics,block"`
	// Logging: optional
	Logging *Logging `hcl:"logging,block"`
	// MinuteMetrics: optional
	MinuteMetrics *MinuteMetrics `hcl:"minute_metrics,block"`
}

type QueuePropertiesCorsRule struct {
	// AllowedHeaders: list of string, required
	AllowedHeaders terra.ListValue[terra.StringValue] `hcl:"allowed_headers,attr" validate:"required"`
	// AllowedMethods: list of string, required
	AllowedMethods terra.ListValue[terra.StringValue] `hcl:"allowed_methods,attr" validate:"required"`
	// AllowedOrigins: list of string, required
	AllowedOrigins terra.ListValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// ExposedHeaders: list of string, required
	ExposedHeaders terra.ListValue[terra.StringValue] `hcl:"exposed_headers,attr" validate:"required"`
	// MaxAgeInSeconds: number, required
	MaxAgeInSeconds terra.NumberValue `hcl:"max_age_in_seconds,attr" validate:"required"`
}

type HourMetrics struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// IncludeApis: bool, optional
	IncludeApis terra.BoolValue `hcl:"include_apis,attr"`
	// RetentionPolicyDays: number, optional
	RetentionPolicyDays terra.NumberValue `hcl:"retention_policy_days,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Logging struct {
	// Delete: bool, required
	Delete terra.BoolValue `hcl:"delete,attr" validate:"required"`
	// Read: bool, required
	Read terra.BoolValue `hcl:"read,attr" validate:"required"`
	// RetentionPolicyDays: number, optional
	RetentionPolicyDays terra.NumberValue `hcl:"retention_policy_days,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Write: bool, required
	Write terra.BoolValue `hcl:"write,attr" validate:"required"`
}

type MinuteMetrics struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// IncludeApis: bool, optional
	IncludeApis terra.BoolValue `hcl:"include_apis,attr"`
	// RetentionPolicyDays: number, optional
	RetentionPolicyDays terra.NumberValue `hcl:"retention_policy_days,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Routing struct {
	// Choice: string, optional
	Choice terra.StringValue `hcl:"choice,attr"`
	// PublishInternetEndpoints: bool, optional
	PublishInternetEndpoints terra.BoolValue `hcl:"publish_internet_endpoints,attr"`
	// PublishMicrosoftEndpoints: bool, optional
	PublishMicrosoftEndpoints terra.BoolValue `hcl:"publish_microsoft_endpoints,attr"`
}

type SasPolicy struct {
	// ExpirationAction: string, optional
	ExpirationAction terra.StringValue `hcl:"expiration_action,attr"`
	// ExpirationPeriod: string, required
	ExpirationPeriod terra.StringValue `hcl:"expiration_period,attr" validate:"required"`
}

type ShareProperties struct {
	// SharePropertiesCorsRule: min=0,max=5
	CorsRule []SharePropertiesCorsRule `hcl:"cors_rule,block" validate:"min=0,max=5"`
	// RetentionPolicy: optional
	RetentionPolicy *RetentionPolicy `hcl:"retention_policy,block"`
	// Smb: optional
	Smb *Smb `hcl:"smb,block"`
}

type SharePropertiesCorsRule struct {
	// AllowedHeaders: list of string, required
	AllowedHeaders terra.ListValue[terra.StringValue] `hcl:"allowed_headers,attr" validate:"required"`
	// AllowedMethods: list of string, required
	AllowedMethods terra.ListValue[terra.StringValue] `hcl:"allowed_methods,attr" validate:"required"`
	// AllowedOrigins: list of string, required
	AllowedOrigins terra.ListValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// ExposedHeaders: list of string, required
	ExposedHeaders terra.ListValue[terra.StringValue] `hcl:"exposed_headers,attr" validate:"required"`
	// MaxAgeInSeconds: number, required
	MaxAgeInSeconds terra.NumberValue `hcl:"max_age_in_seconds,attr" validate:"required"`
}

type RetentionPolicy struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
}

type Smb struct {
	// AuthenticationTypes: set of string, optional
	AuthenticationTypes terra.SetValue[terra.StringValue] `hcl:"authentication_types,attr"`
	// ChannelEncryptionType: set of string, optional
	ChannelEncryptionType terra.SetValue[terra.StringValue] `hcl:"channel_encryption_type,attr"`
	// KerberosTicketEncryptionType: set of string, optional
	KerberosTicketEncryptionType terra.SetValue[terra.StringValue] `hcl:"kerberos_ticket_encryption_type,attr"`
	// MultichannelEnabled: bool, optional
	MultichannelEnabled terra.BoolValue `hcl:"multichannel_enabled,attr"`
	// Versions: set of string, optional
	Versions terra.SetValue[terra.StringValue] `hcl:"versions,attr"`
}

type StaticWebsite struct {
	// Error404Document: string, optional
	Error404Document terra.StringValue `hcl:"error_404_document,attr"`
	// IndexDocument: string, optional
	IndexDocument terra.StringValue `hcl:"index_document,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AzureFilesAuthenticationAttributes struct {
	ref terra.Reference
}

func (afa AzureFilesAuthenticationAttributes) InternalRef() terra.Reference {
	return afa.ref
}

func (afa AzureFilesAuthenticationAttributes) InternalWithRef(ref terra.Reference) AzureFilesAuthenticationAttributes {
	return AzureFilesAuthenticationAttributes{ref: ref}
}

func (afa AzureFilesAuthenticationAttributes) InternalTokens() hclwrite.Tokens {
	return afa.ref.InternalTokens()
}

func (afa AzureFilesAuthenticationAttributes) DirectoryType() terra.StringValue {
	return terra.ReferenceString(afa.ref.Append("directory_type"))
}

func (afa AzureFilesAuthenticationAttributes) ActiveDirectory() terra.ListValue[ActiveDirectoryAttributes] {
	return terra.ReferenceList[ActiveDirectoryAttributes](afa.ref.Append("active_directory"))
}

type ActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad ActiveDirectoryAttributes) InternalRef() terra.Reference {
	return ad.ref
}

func (ad ActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) ActiveDirectoryAttributes {
	return ActiveDirectoryAttributes{ref: ref}
}

func (ad ActiveDirectoryAttributes) InternalTokens() hclwrite.Tokens {
	return ad.ref.InternalTokens()
}

func (ad ActiveDirectoryAttributes) DomainGuid() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("domain_guid"))
}

func (ad ActiveDirectoryAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("domain_name"))
}

func (ad ActiveDirectoryAttributes) DomainSid() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("domain_sid"))
}

func (ad ActiveDirectoryAttributes) ForestName() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("forest_name"))
}

func (ad ActiveDirectoryAttributes) NetbiosDomainName() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("netbios_domain_name"))
}

func (ad ActiveDirectoryAttributes) StorageSid() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("storage_sid"))
}

type BlobPropertiesAttributes struct {
	ref terra.Reference
}

func (bp BlobPropertiesAttributes) InternalRef() terra.Reference {
	return bp.ref
}

func (bp BlobPropertiesAttributes) InternalWithRef(ref terra.Reference) BlobPropertiesAttributes {
	return BlobPropertiesAttributes{ref: ref}
}

func (bp BlobPropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return bp.ref.InternalTokens()
}

func (bp BlobPropertiesAttributes) ChangeFeedEnabled() terra.BoolValue {
	return terra.ReferenceBool(bp.ref.Append("change_feed_enabled"))
}

func (bp BlobPropertiesAttributes) ChangeFeedRetentionInDays() terra.NumberValue {
	return terra.ReferenceNumber(bp.ref.Append("change_feed_retention_in_days"))
}

func (bp BlobPropertiesAttributes) DefaultServiceVersion() terra.StringValue {
	return terra.ReferenceString(bp.ref.Append("default_service_version"))
}

func (bp BlobPropertiesAttributes) LastAccessTimeEnabled() terra.BoolValue {
	return terra.ReferenceBool(bp.ref.Append("last_access_time_enabled"))
}

func (bp BlobPropertiesAttributes) VersioningEnabled() terra.BoolValue {
	return terra.ReferenceBool(bp.ref.Append("versioning_enabled"))
}

func (bp BlobPropertiesAttributes) ContainerDeleteRetentionPolicy() terra.ListValue[ContainerDeleteRetentionPolicyAttributes] {
	return terra.ReferenceList[ContainerDeleteRetentionPolicyAttributes](bp.ref.Append("container_delete_retention_policy"))
}

func (bp BlobPropertiesAttributes) CorsRule() terra.ListValue[BlobPropertiesCorsRuleAttributes] {
	return terra.ReferenceList[BlobPropertiesCorsRuleAttributes](bp.ref.Append("cors_rule"))
}

func (bp BlobPropertiesAttributes) DeleteRetentionPolicy() terra.ListValue[DeleteRetentionPolicyAttributes] {
	return terra.ReferenceList[DeleteRetentionPolicyAttributes](bp.ref.Append("delete_retention_policy"))
}

func (bp BlobPropertiesAttributes) RestorePolicy() terra.ListValue[RestorePolicyAttributes] {
	return terra.ReferenceList[RestorePolicyAttributes](bp.ref.Append("restore_policy"))
}

type ContainerDeleteRetentionPolicyAttributes struct {
	ref terra.Reference
}

func (cdrp ContainerDeleteRetentionPolicyAttributes) InternalRef() terra.Reference {
	return cdrp.ref
}

func (cdrp ContainerDeleteRetentionPolicyAttributes) InternalWithRef(ref terra.Reference) ContainerDeleteRetentionPolicyAttributes {
	return ContainerDeleteRetentionPolicyAttributes{ref: ref}
}

func (cdrp ContainerDeleteRetentionPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return cdrp.ref.InternalTokens()
}

func (cdrp ContainerDeleteRetentionPolicyAttributes) Days() terra.NumberValue {
	return terra.ReferenceNumber(cdrp.ref.Append("days"))
}

type BlobPropertiesCorsRuleAttributes struct {
	ref terra.Reference
}

func (cr BlobPropertiesCorsRuleAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr BlobPropertiesCorsRuleAttributes) InternalWithRef(ref terra.Reference) BlobPropertiesCorsRuleAttributes {
	return BlobPropertiesCorsRuleAttributes{ref: ref}
}

func (cr BlobPropertiesCorsRuleAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr BlobPropertiesCorsRuleAttributes) AllowedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_headers"))
}

func (cr BlobPropertiesCorsRuleAttributes) AllowedMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_methods"))
}

func (cr BlobPropertiesCorsRuleAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_origins"))
}

func (cr BlobPropertiesCorsRuleAttributes) ExposedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("exposed_headers"))
}

func (cr BlobPropertiesCorsRuleAttributes) MaxAgeInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("max_age_in_seconds"))
}

type DeleteRetentionPolicyAttributes struct {
	ref terra.Reference
}

func (drp DeleteRetentionPolicyAttributes) InternalRef() terra.Reference {
	return drp.ref
}

func (drp DeleteRetentionPolicyAttributes) InternalWithRef(ref terra.Reference) DeleteRetentionPolicyAttributes {
	return DeleteRetentionPolicyAttributes{ref: ref}
}

func (drp DeleteRetentionPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return drp.ref.InternalTokens()
}

func (drp DeleteRetentionPolicyAttributes) Days() terra.NumberValue {
	return terra.ReferenceNumber(drp.ref.Append("days"))
}

type RestorePolicyAttributes struct {
	ref terra.Reference
}

func (rp RestorePolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp RestorePolicyAttributes) InternalWithRef(ref terra.Reference) RestorePolicyAttributes {
	return RestorePolicyAttributes{ref: ref}
}

func (rp RestorePolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp RestorePolicyAttributes) Days() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("days"))
}

type CustomDomainAttributes struct {
	ref terra.Reference
}

func (cd CustomDomainAttributes) InternalRef() terra.Reference {
	return cd.ref
}

func (cd CustomDomainAttributes) InternalWithRef(ref terra.Reference) CustomDomainAttributes {
	return CustomDomainAttributes{ref: ref}
}

func (cd CustomDomainAttributes) InternalTokens() hclwrite.Tokens {
	return cd.ref.InternalTokens()
}

func (cd CustomDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("name"))
}

func (cd CustomDomainAttributes) UseSubdomain() terra.BoolValue {
	return terra.ReferenceBool(cd.ref.Append("use_subdomain"))
}

type CustomerManagedKeyAttributes struct {
	ref terra.Reference
}

func (cmk CustomerManagedKeyAttributes) InternalRef() terra.Reference {
	return cmk.ref
}

func (cmk CustomerManagedKeyAttributes) InternalWithRef(ref terra.Reference) CustomerManagedKeyAttributes {
	return CustomerManagedKeyAttributes{ref: ref}
}

func (cmk CustomerManagedKeyAttributes) InternalTokens() hclwrite.Tokens {
	return cmk.ref.InternalTokens()
}

func (cmk CustomerManagedKeyAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceString(cmk.ref.Append("key_vault_key_id"))
}

func (cmk CustomerManagedKeyAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceString(cmk.ref.Append("user_assigned_identity_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type ImmutabilityPolicyAttributes struct {
	ref terra.Reference
}

func (ip ImmutabilityPolicyAttributes) InternalRef() terra.Reference {
	return ip.ref
}

func (ip ImmutabilityPolicyAttributes) InternalWithRef(ref terra.Reference) ImmutabilityPolicyAttributes {
	return ImmutabilityPolicyAttributes{ref: ref}
}

func (ip ImmutabilityPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return ip.ref.InternalTokens()
}

func (ip ImmutabilityPolicyAttributes) AllowProtectedAppendWrites() terra.BoolValue {
	return terra.ReferenceBool(ip.ref.Append("allow_protected_append_writes"))
}

func (ip ImmutabilityPolicyAttributes) PeriodSinceCreationInDays() terra.NumberValue {
	return terra.ReferenceNumber(ip.ref.Append("period_since_creation_in_days"))
}

func (ip ImmutabilityPolicyAttributes) State() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("state"))
}

type NetworkRulesAttributes struct {
	ref terra.Reference
}

func (nr NetworkRulesAttributes) InternalRef() terra.Reference {
	return nr.ref
}

func (nr NetworkRulesAttributes) InternalWithRef(ref terra.Reference) NetworkRulesAttributes {
	return NetworkRulesAttributes{ref: ref}
}

func (nr NetworkRulesAttributes) InternalTokens() hclwrite.Tokens {
	return nr.ref.InternalTokens()
}

func (nr NetworkRulesAttributes) Bypass() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nr.ref.Append("bypass"))
}

func (nr NetworkRulesAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceString(nr.ref.Append("default_action"))
}

func (nr NetworkRulesAttributes) IpRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nr.ref.Append("ip_rules"))
}

func (nr NetworkRulesAttributes) VirtualNetworkSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nr.ref.Append("virtual_network_subnet_ids"))
}

func (nr NetworkRulesAttributes) PrivateLinkAccess() terra.ListValue[PrivateLinkAccessAttributes] {
	return terra.ReferenceList[PrivateLinkAccessAttributes](nr.ref.Append("private_link_access"))
}

type PrivateLinkAccessAttributes struct {
	ref terra.Reference
}

func (pla PrivateLinkAccessAttributes) InternalRef() terra.Reference {
	return pla.ref
}

func (pla PrivateLinkAccessAttributes) InternalWithRef(ref terra.Reference) PrivateLinkAccessAttributes {
	return PrivateLinkAccessAttributes{ref: ref}
}

func (pla PrivateLinkAccessAttributes) InternalTokens() hclwrite.Tokens {
	return pla.ref.InternalTokens()
}

func (pla PrivateLinkAccessAttributes) EndpointResourceId() terra.StringValue {
	return terra.ReferenceString(pla.ref.Append("endpoint_resource_id"))
}

func (pla PrivateLinkAccessAttributes) EndpointTenantId() terra.StringValue {
	return terra.ReferenceString(pla.ref.Append("endpoint_tenant_id"))
}

type QueuePropertiesAttributes struct {
	ref terra.Reference
}

func (qp QueuePropertiesAttributes) InternalRef() terra.Reference {
	return qp.ref
}

func (qp QueuePropertiesAttributes) InternalWithRef(ref terra.Reference) QueuePropertiesAttributes {
	return QueuePropertiesAttributes{ref: ref}
}

func (qp QueuePropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return qp.ref.InternalTokens()
}

func (qp QueuePropertiesAttributes) CorsRule() terra.ListValue[QueuePropertiesCorsRuleAttributes] {
	return terra.ReferenceList[QueuePropertiesCorsRuleAttributes](qp.ref.Append("cors_rule"))
}

func (qp QueuePropertiesAttributes) HourMetrics() terra.ListValue[HourMetricsAttributes] {
	return terra.ReferenceList[HourMetricsAttributes](qp.ref.Append("hour_metrics"))
}

func (qp QueuePropertiesAttributes) Logging() terra.ListValue[LoggingAttributes] {
	return terra.ReferenceList[LoggingAttributes](qp.ref.Append("logging"))
}

func (qp QueuePropertiesAttributes) MinuteMetrics() terra.ListValue[MinuteMetricsAttributes] {
	return terra.ReferenceList[MinuteMetricsAttributes](qp.ref.Append("minute_metrics"))
}

type QueuePropertiesCorsRuleAttributes struct {
	ref terra.Reference
}

func (cr QueuePropertiesCorsRuleAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr QueuePropertiesCorsRuleAttributes) InternalWithRef(ref terra.Reference) QueuePropertiesCorsRuleAttributes {
	return QueuePropertiesCorsRuleAttributes{ref: ref}
}

func (cr QueuePropertiesCorsRuleAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr QueuePropertiesCorsRuleAttributes) AllowedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_headers"))
}

func (cr QueuePropertiesCorsRuleAttributes) AllowedMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_methods"))
}

func (cr QueuePropertiesCorsRuleAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_origins"))
}

func (cr QueuePropertiesCorsRuleAttributes) ExposedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("exposed_headers"))
}

func (cr QueuePropertiesCorsRuleAttributes) MaxAgeInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("max_age_in_seconds"))
}

type HourMetricsAttributes struct {
	ref terra.Reference
}

func (hm HourMetricsAttributes) InternalRef() terra.Reference {
	return hm.ref
}

func (hm HourMetricsAttributes) InternalWithRef(ref terra.Reference) HourMetricsAttributes {
	return HourMetricsAttributes{ref: ref}
}

func (hm HourMetricsAttributes) InternalTokens() hclwrite.Tokens {
	return hm.ref.InternalTokens()
}

func (hm HourMetricsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(hm.ref.Append("enabled"))
}

func (hm HourMetricsAttributes) IncludeApis() terra.BoolValue {
	return terra.ReferenceBool(hm.ref.Append("include_apis"))
}

func (hm HourMetricsAttributes) RetentionPolicyDays() terra.NumberValue {
	return terra.ReferenceNumber(hm.ref.Append("retention_policy_days"))
}

func (hm HourMetricsAttributes) Version() terra.StringValue {
	return terra.ReferenceString(hm.ref.Append("version"))
}

type LoggingAttributes struct {
	ref terra.Reference
}

func (l LoggingAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LoggingAttributes) InternalWithRef(ref terra.Reference) LoggingAttributes {
	return LoggingAttributes{ref: ref}
}

func (l LoggingAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LoggingAttributes) Delete() terra.BoolValue {
	return terra.ReferenceBool(l.ref.Append("delete"))
}

func (l LoggingAttributes) Read() terra.BoolValue {
	return terra.ReferenceBool(l.ref.Append("read"))
}

func (l LoggingAttributes) RetentionPolicyDays() terra.NumberValue {
	return terra.ReferenceNumber(l.ref.Append("retention_policy_days"))
}

func (l LoggingAttributes) Version() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("version"))
}

func (l LoggingAttributes) Write() terra.BoolValue {
	return terra.ReferenceBool(l.ref.Append("write"))
}

type MinuteMetricsAttributes struct {
	ref terra.Reference
}

func (mm MinuteMetricsAttributes) InternalRef() terra.Reference {
	return mm.ref
}

func (mm MinuteMetricsAttributes) InternalWithRef(ref terra.Reference) MinuteMetricsAttributes {
	return MinuteMetricsAttributes{ref: ref}
}

func (mm MinuteMetricsAttributes) InternalTokens() hclwrite.Tokens {
	return mm.ref.InternalTokens()
}

func (mm MinuteMetricsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(mm.ref.Append("enabled"))
}

func (mm MinuteMetricsAttributes) IncludeApis() terra.BoolValue {
	return terra.ReferenceBool(mm.ref.Append("include_apis"))
}

func (mm MinuteMetricsAttributes) RetentionPolicyDays() terra.NumberValue {
	return terra.ReferenceNumber(mm.ref.Append("retention_policy_days"))
}

func (mm MinuteMetricsAttributes) Version() terra.StringValue {
	return terra.ReferenceString(mm.ref.Append("version"))
}

type RoutingAttributes struct {
	ref terra.Reference
}

func (r RoutingAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RoutingAttributes) InternalWithRef(ref terra.Reference) RoutingAttributes {
	return RoutingAttributes{ref: ref}
}

func (r RoutingAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RoutingAttributes) Choice() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("choice"))
}

func (r RoutingAttributes) PublishInternetEndpoints() terra.BoolValue {
	return terra.ReferenceBool(r.ref.Append("publish_internet_endpoints"))
}

func (r RoutingAttributes) PublishMicrosoftEndpoints() terra.BoolValue {
	return terra.ReferenceBool(r.ref.Append("publish_microsoft_endpoints"))
}

type SasPolicyAttributes struct {
	ref terra.Reference
}

func (sp SasPolicyAttributes) InternalRef() terra.Reference {
	return sp.ref
}

func (sp SasPolicyAttributes) InternalWithRef(ref terra.Reference) SasPolicyAttributes {
	return SasPolicyAttributes{ref: ref}
}

func (sp SasPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return sp.ref.InternalTokens()
}

func (sp SasPolicyAttributes) ExpirationAction() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("expiration_action"))
}

func (sp SasPolicyAttributes) ExpirationPeriod() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("expiration_period"))
}

type SharePropertiesAttributes struct {
	ref terra.Reference
}

func (sp SharePropertiesAttributes) InternalRef() terra.Reference {
	return sp.ref
}

func (sp SharePropertiesAttributes) InternalWithRef(ref terra.Reference) SharePropertiesAttributes {
	return SharePropertiesAttributes{ref: ref}
}

func (sp SharePropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return sp.ref.InternalTokens()
}

func (sp SharePropertiesAttributes) CorsRule() terra.ListValue[SharePropertiesCorsRuleAttributes] {
	return terra.ReferenceList[SharePropertiesCorsRuleAttributes](sp.ref.Append("cors_rule"))
}

func (sp SharePropertiesAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceList[RetentionPolicyAttributes](sp.ref.Append("retention_policy"))
}

func (sp SharePropertiesAttributes) Smb() terra.ListValue[SmbAttributes] {
	return terra.ReferenceList[SmbAttributes](sp.ref.Append("smb"))
}

type SharePropertiesCorsRuleAttributes struct {
	ref terra.Reference
}

func (cr SharePropertiesCorsRuleAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr SharePropertiesCorsRuleAttributes) InternalWithRef(ref terra.Reference) SharePropertiesCorsRuleAttributes {
	return SharePropertiesCorsRuleAttributes{ref: ref}
}

func (cr SharePropertiesCorsRuleAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr SharePropertiesCorsRuleAttributes) AllowedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_headers"))
}

func (cr SharePropertiesCorsRuleAttributes) AllowedMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_methods"))
}

func (cr SharePropertiesCorsRuleAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("allowed_origins"))
}

func (cr SharePropertiesCorsRuleAttributes) ExposedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cr.ref.Append("exposed_headers"))
}

func (cr SharePropertiesCorsRuleAttributes) MaxAgeInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(cr.ref.Append("max_age_in_seconds"))
}

type RetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetentionPolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp RetentionPolicyAttributes) InternalWithRef(ref terra.Reference) RetentionPolicyAttributes {
	return RetentionPolicyAttributes{ref: ref}
}

func (rp RetentionPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp RetentionPolicyAttributes) Days() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("days"))
}

type SmbAttributes struct {
	ref terra.Reference
}

func (s SmbAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SmbAttributes) InternalWithRef(ref terra.Reference) SmbAttributes {
	return SmbAttributes{ref: ref}
}

func (s SmbAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SmbAttributes) AuthenticationTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("authentication_types"))
}

func (s SmbAttributes) ChannelEncryptionType() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("channel_encryption_type"))
}

func (s SmbAttributes) KerberosTicketEncryptionType() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("kerberos_ticket_encryption_type"))
}

func (s SmbAttributes) MultichannelEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("multichannel_enabled"))
}

func (s SmbAttributes) Versions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("versions"))
}

type StaticWebsiteAttributes struct {
	ref terra.Reference
}

func (sw StaticWebsiteAttributes) InternalRef() terra.Reference {
	return sw.ref
}

func (sw StaticWebsiteAttributes) InternalWithRef(ref terra.Reference) StaticWebsiteAttributes {
	return StaticWebsiteAttributes{ref: ref}
}

func (sw StaticWebsiteAttributes) InternalTokens() hclwrite.Tokens {
	return sw.ref.InternalTokens()
}

func (sw StaticWebsiteAttributes) Error404Document() terra.StringValue {
	return terra.ReferenceString(sw.ref.Append("error_404_document"))
}

func (sw StaticWebsiteAttributes) IndexDocument() terra.StringValue {
	return terra.ReferenceString(sw.ref.Append("index_document"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type AzureFilesAuthenticationState struct {
	DirectoryType   string                 `json:"directory_type"`
	ActiveDirectory []ActiveDirectoryState `json:"active_directory"`
}

type ActiveDirectoryState struct {
	DomainGuid        string `json:"domain_guid"`
	DomainName        string `json:"domain_name"`
	DomainSid         string `json:"domain_sid"`
	ForestName        string `json:"forest_name"`
	NetbiosDomainName string `json:"netbios_domain_name"`
	StorageSid        string `json:"storage_sid"`
}

type BlobPropertiesState struct {
	ChangeFeedEnabled              bool                                  `json:"change_feed_enabled"`
	ChangeFeedRetentionInDays      float64                               `json:"change_feed_retention_in_days"`
	DefaultServiceVersion          string                                `json:"default_service_version"`
	LastAccessTimeEnabled          bool                                  `json:"last_access_time_enabled"`
	VersioningEnabled              bool                                  `json:"versioning_enabled"`
	ContainerDeleteRetentionPolicy []ContainerDeleteRetentionPolicyState `json:"container_delete_retention_policy"`
	CorsRule                       []BlobPropertiesCorsRuleState         `json:"cors_rule"`
	DeleteRetentionPolicy          []DeleteRetentionPolicyState          `json:"delete_retention_policy"`
	RestorePolicy                  []RestorePolicyState                  `json:"restore_policy"`
}

type ContainerDeleteRetentionPolicyState struct {
	Days float64 `json:"days"`
}

type BlobPropertiesCorsRuleState struct {
	AllowedHeaders  []string `json:"allowed_headers"`
	AllowedMethods  []string `json:"allowed_methods"`
	AllowedOrigins  []string `json:"allowed_origins"`
	ExposedHeaders  []string `json:"exposed_headers"`
	MaxAgeInSeconds float64  `json:"max_age_in_seconds"`
}

type DeleteRetentionPolicyState struct {
	Days float64 `json:"days"`
}

type RestorePolicyState struct {
	Days float64 `json:"days"`
}

type CustomDomainState struct {
	Name         string `json:"name"`
	UseSubdomain bool   `json:"use_subdomain"`
}

type CustomerManagedKeyState struct {
	KeyVaultKeyId          string `json:"key_vault_key_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type ImmutabilityPolicyState struct {
	AllowProtectedAppendWrites bool    `json:"allow_protected_append_writes"`
	PeriodSinceCreationInDays  float64 `json:"period_since_creation_in_days"`
	State                      string  `json:"state"`
}

type NetworkRulesState struct {
	Bypass                  []string                 `json:"bypass"`
	DefaultAction           string                   `json:"default_action"`
	IpRules                 []string                 `json:"ip_rules"`
	VirtualNetworkSubnetIds []string                 `json:"virtual_network_subnet_ids"`
	PrivateLinkAccess       []PrivateLinkAccessState `json:"private_link_access"`
}

type PrivateLinkAccessState struct {
	EndpointResourceId string `json:"endpoint_resource_id"`
	EndpointTenantId   string `json:"endpoint_tenant_id"`
}

type QueuePropertiesState struct {
	CorsRule      []QueuePropertiesCorsRuleState `json:"cors_rule"`
	HourMetrics   []HourMetricsState             `json:"hour_metrics"`
	Logging       []LoggingState                 `json:"logging"`
	MinuteMetrics []MinuteMetricsState           `json:"minute_metrics"`
}

type QueuePropertiesCorsRuleState struct {
	AllowedHeaders  []string `json:"allowed_headers"`
	AllowedMethods  []string `json:"allowed_methods"`
	AllowedOrigins  []string `json:"allowed_origins"`
	ExposedHeaders  []string `json:"exposed_headers"`
	MaxAgeInSeconds float64  `json:"max_age_in_seconds"`
}

type HourMetricsState struct {
	Enabled             bool    `json:"enabled"`
	IncludeApis         bool    `json:"include_apis"`
	RetentionPolicyDays float64 `json:"retention_policy_days"`
	Version             string  `json:"version"`
}

type LoggingState struct {
	Delete              bool    `json:"delete"`
	Read                bool    `json:"read"`
	RetentionPolicyDays float64 `json:"retention_policy_days"`
	Version             string  `json:"version"`
	Write               bool    `json:"write"`
}

type MinuteMetricsState struct {
	Enabled             bool    `json:"enabled"`
	IncludeApis         bool    `json:"include_apis"`
	RetentionPolicyDays float64 `json:"retention_policy_days"`
	Version             string  `json:"version"`
}

type RoutingState struct {
	Choice                    string `json:"choice"`
	PublishInternetEndpoints  bool   `json:"publish_internet_endpoints"`
	PublishMicrosoftEndpoints bool   `json:"publish_microsoft_endpoints"`
}

type SasPolicyState struct {
	ExpirationAction string `json:"expiration_action"`
	ExpirationPeriod string `json:"expiration_period"`
}

type SharePropertiesState struct {
	CorsRule        []SharePropertiesCorsRuleState `json:"cors_rule"`
	RetentionPolicy []RetentionPolicyState         `json:"retention_policy"`
	Smb             []SmbState                     `json:"smb"`
}

type SharePropertiesCorsRuleState struct {
	AllowedHeaders  []string `json:"allowed_headers"`
	AllowedMethods  []string `json:"allowed_methods"`
	AllowedOrigins  []string `json:"allowed_origins"`
	ExposedHeaders  []string `json:"exposed_headers"`
	MaxAgeInSeconds float64  `json:"max_age_in_seconds"`
}

type RetentionPolicyState struct {
	Days float64 `json:"days"`
}

type SmbState struct {
	AuthenticationTypes          []string `json:"authentication_types"`
	ChannelEncryptionType        []string `json:"channel_encryption_type"`
	KerberosTicketEncryptionType []string `json:"kerberos_ticket_encryption_type"`
	MultichannelEnabled          bool     `json:"multichannel_enabled"`
	Versions                     []string `json:"versions"`
}

type StaticWebsiteState struct {
	Error404Document string `json:"error_404_document"`
	IndexDocument    string `json:"index_document"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
