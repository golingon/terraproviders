// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	botconnection "github.com/golingon/terraproviders/azurerm/3.49.0/botconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBotConnection(name string, args BotConnectionArgs) *BotConnection {
	return &BotConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BotConnection)(nil)

type BotConnection struct {
	Name  string
	Args  BotConnectionArgs
	state *botConnectionState
}

func (bc *BotConnection) Type() string {
	return "azurerm_bot_connection"
}

func (bc *BotConnection) LocalName() string {
	return bc.Name
}

func (bc *BotConnection) Configuration() interface{} {
	return bc.Args
}

func (bc *BotConnection) Attributes() botConnectionAttributes {
	return botConnectionAttributes{ref: terra.ReferenceResource(bc)}
}

func (bc *BotConnection) ImportState(av io.Reader) error {
	bc.state = &botConnectionState{}
	if err := json.NewDecoder(av).Decode(bc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bc.Type(), bc.LocalName(), err)
	}
	return nil
}

func (bc *BotConnection) State() (*botConnectionState, bool) {
	return bc.state, bc.state != nil
}

func (bc *BotConnection) StateMust() *botConnectionState {
	if bc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bc.Type(), bc.LocalName()))
	}
	return bc.state
}

func (bc *BotConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(bc)
}

type BotConnectionArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: string, optional
	Scopes terra.StringValue `hcl:"scopes,attr"`
	// ServiceProviderName: string, required
	ServiceProviderName terra.StringValue `hcl:"service_provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *botconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BotConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type botConnectionAttributes struct {
	ref terra.Reference
}

func (bc botConnectionAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("bot_name"))
}

func (bc botConnectionAttributes) ClientId() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("client_id"))
}

func (bc botConnectionAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("client_secret"))
}

func (bc botConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("id"))
}

func (bc botConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("location"))
}

func (bc botConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("name"))
}

func (bc botConnectionAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bc.ref.Append("parameters"))
}

func (bc botConnectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("resource_group_name"))
}

func (bc botConnectionAttributes) Scopes() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("scopes"))
}

func (bc botConnectionAttributes) ServiceProviderName() terra.StringValue {
	return terra.ReferenceString(bc.ref.Append("service_provider_name"))
}

func (bc botConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bc.ref.Append("tags"))
}

func (bc botConnectionAttributes) Timeouts() botconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[botconnection.TimeoutsAttributes](bc.ref.Append("timeouts"))
}

type botConnectionState struct {
	BotName             string                       `json:"bot_name"`
	ClientId            string                       `json:"client_id"`
	ClientSecret        string                       `json:"client_secret"`
	Id                  string                       `json:"id"`
	Location            string                       `json:"location"`
	Name                string                       `json:"name"`
	Parameters          map[string]string            `json:"parameters"`
	ResourceGroupName   string                       `json:"resource_group_name"`
	Scopes              string                       `json:"scopes"`
	ServiceProviderName string                       `json:"service_provider_name"`
	Tags                map[string]string            `json:"tags"`
	Timeouts            *botconnection.TimeoutsState `json:"timeouts"`
}
