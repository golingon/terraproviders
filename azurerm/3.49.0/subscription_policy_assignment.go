// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	subscriptionpolicyassignment "github.com/golingon/terraproviders/azurerm/3.49.0/subscriptionpolicyassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSubscriptionPolicyAssignment(name string, args SubscriptionPolicyAssignmentArgs) *SubscriptionPolicyAssignment {
	return &SubscriptionPolicyAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SubscriptionPolicyAssignment)(nil)

type SubscriptionPolicyAssignment struct {
	Name  string
	Args  SubscriptionPolicyAssignmentArgs
	state *subscriptionPolicyAssignmentState
}

func (spa *SubscriptionPolicyAssignment) Type() string {
	return "azurerm_subscription_policy_assignment"
}

func (spa *SubscriptionPolicyAssignment) LocalName() string {
	return spa.Name
}

func (spa *SubscriptionPolicyAssignment) Configuration() interface{} {
	return spa.Args
}

func (spa *SubscriptionPolicyAssignment) Attributes() subscriptionPolicyAssignmentAttributes {
	return subscriptionPolicyAssignmentAttributes{ref: terra.ReferenceResource(spa)}
}

func (spa *SubscriptionPolicyAssignment) ImportState(av io.Reader) error {
	spa.state = &subscriptionPolicyAssignmentState{}
	if err := json.NewDecoder(av).Decode(spa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", spa.Type(), spa.LocalName(), err)
	}
	return nil
}

func (spa *SubscriptionPolicyAssignment) State() (*subscriptionPolicyAssignmentState, bool) {
	return spa.state, spa.state != nil
}

func (spa *SubscriptionPolicyAssignment) StateMust() *subscriptionPolicyAssignmentState {
	if spa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", spa.Type(), spa.LocalName()))
	}
	return spa.state
}

func (spa *SubscriptionPolicyAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(spa)
}

type SubscriptionPolicyAssignmentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Enforce: bool, optional
	Enforce terra.BoolValue `hcl:"enforce,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotScopes: list of string, optional
	NotScopes terra.ListValue[terra.StringValue] `hcl:"not_scopes,attr"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// PolicyDefinitionId: string, required
	PolicyDefinitionId terra.StringValue `hcl:"policy_definition_id,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Identity: optional
	Identity *subscriptionpolicyassignment.Identity `hcl:"identity,block"`
	// NonComplianceMessage: min=0
	NonComplianceMessage []subscriptionpolicyassignment.NonComplianceMessage `hcl:"non_compliance_message,block" validate:"min=0"`
	// Overrides: min=0
	Overrides []subscriptionpolicyassignment.Overrides `hcl:"overrides,block" validate:"min=0"`
	// ResourceSelectors: min=0
	ResourceSelectors []subscriptionpolicyassignment.ResourceSelectors `hcl:"resource_selectors,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *subscriptionpolicyassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SubscriptionPolicyAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type subscriptionPolicyAssignmentAttributes struct {
	ref terra.Reference
}

func (spa subscriptionPolicyAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("description"))
}

func (spa subscriptionPolicyAssignmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("display_name"))
}

func (spa subscriptionPolicyAssignmentAttributes) Enforce() terra.BoolValue {
	return terra.ReferenceBool(spa.ref.Append("enforce"))
}

func (spa subscriptionPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("id"))
}

func (spa subscriptionPolicyAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("location"))
}

func (spa subscriptionPolicyAssignmentAttributes) Metadata() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("metadata"))
}

func (spa subscriptionPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("name"))
}

func (spa subscriptionPolicyAssignmentAttributes) NotScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](spa.ref.Append("not_scopes"))
}

func (spa subscriptionPolicyAssignmentAttributes) Parameters() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("parameters"))
}

func (spa subscriptionPolicyAssignmentAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("policy_definition_id"))
}

func (spa subscriptionPolicyAssignmentAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("subscription_id"))
}

func (spa subscriptionPolicyAssignmentAttributes) Identity() terra.ListValue[subscriptionpolicyassignment.IdentityAttributes] {
	return terra.ReferenceList[subscriptionpolicyassignment.IdentityAttributes](spa.ref.Append("identity"))
}

func (spa subscriptionPolicyAssignmentAttributes) NonComplianceMessage() terra.ListValue[subscriptionpolicyassignment.NonComplianceMessageAttributes] {
	return terra.ReferenceList[subscriptionpolicyassignment.NonComplianceMessageAttributes](spa.ref.Append("non_compliance_message"))
}

func (spa subscriptionPolicyAssignmentAttributes) Overrides() terra.ListValue[subscriptionpolicyassignment.OverridesAttributes] {
	return terra.ReferenceList[subscriptionpolicyassignment.OverridesAttributes](spa.ref.Append("overrides"))
}

func (spa subscriptionPolicyAssignmentAttributes) ResourceSelectors() terra.ListValue[subscriptionpolicyassignment.ResourceSelectorsAttributes] {
	return terra.ReferenceList[subscriptionpolicyassignment.ResourceSelectorsAttributes](spa.ref.Append("resource_selectors"))
}

func (spa subscriptionPolicyAssignmentAttributes) Timeouts() subscriptionpolicyassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[subscriptionpolicyassignment.TimeoutsAttributes](spa.ref.Append("timeouts"))
}

type subscriptionPolicyAssignmentState struct {
	Description          string                                                   `json:"description"`
	DisplayName          string                                                   `json:"display_name"`
	Enforce              bool                                                     `json:"enforce"`
	Id                   string                                                   `json:"id"`
	Location             string                                                   `json:"location"`
	Metadata             string                                                   `json:"metadata"`
	Name                 string                                                   `json:"name"`
	NotScopes            []string                                                 `json:"not_scopes"`
	Parameters           string                                                   `json:"parameters"`
	PolicyDefinitionId   string                                                   `json:"policy_definition_id"`
	SubscriptionId       string                                                   `json:"subscription_id"`
	Identity             []subscriptionpolicyassignment.IdentityState             `json:"identity"`
	NonComplianceMessage []subscriptionpolicyassignment.NonComplianceMessageState `json:"non_compliance_message"`
	Overrides            []subscriptionpolicyassignment.OverridesState            `json:"overrides"`
	ResourceSelectors    []subscriptionpolicyassignment.ResourceSelectorsState    `json:"resource_selectors"`
	Timeouts             *subscriptionpolicyassignment.TimeoutsState              `json:"timeouts"`
}
