// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationconnectionclassiccertificate "github.com/golingon/terraproviders/azurerm/3.49.0/automationconnectionclassiccertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationConnectionClassicCertificate(name string, args AutomationConnectionClassicCertificateArgs) *AutomationConnectionClassicCertificate {
	return &AutomationConnectionClassicCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationConnectionClassicCertificate)(nil)

type AutomationConnectionClassicCertificate struct {
	Name  string
	Args  AutomationConnectionClassicCertificateArgs
	state *automationConnectionClassicCertificateState
}

func (accc *AutomationConnectionClassicCertificate) Type() string {
	return "azurerm_automation_connection_classic_certificate"
}

func (accc *AutomationConnectionClassicCertificate) LocalName() string {
	return accc.Name
}

func (accc *AutomationConnectionClassicCertificate) Configuration() interface{} {
	return accc.Args
}

func (accc *AutomationConnectionClassicCertificate) Attributes() automationConnectionClassicCertificateAttributes {
	return automationConnectionClassicCertificateAttributes{ref: terra.ReferenceResource(accc)}
}

func (accc *AutomationConnectionClassicCertificate) ImportState(av io.Reader) error {
	accc.state = &automationConnectionClassicCertificateState{}
	if err := json.NewDecoder(av).Decode(accc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accc.Type(), accc.LocalName(), err)
	}
	return nil
}

func (accc *AutomationConnectionClassicCertificate) State() (*automationConnectionClassicCertificateState, bool) {
	return accc.state, accc.state != nil
}

func (accc *AutomationConnectionClassicCertificate) StateMust() *automationConnectionClassicCertificateState {
	if accc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accc.Type(), accc.LocalName()))
	}
	return accc.state
}

func (accc *AutomationConnectionClassicCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(accc)
}

type AutomationConnectionClassicCertificateArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// CertificateAssetName: string, required
	CertificateAssetName terra.StringValue `hcl:"certificate_asset_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// SubscriptionName: string, required
	SubscriptionName terra.StringValue `hcl:"subscription_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *automationconnectionclassiccertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationConnectionClassicCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationConnectionClassicCertificateAttributes struct {
	ref terra.Reference
}

func (accc automationConnectionClassicCertificateAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("automation_account_name"))
}

func (accc automationConnectionClassicCertificateAttributes) CertificateAssetName() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("certificate_asset_name"))
}

func (accc automationConnectionClassicCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("description"))
}

func (accc automationConnectionClassicCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("id"))
}

func (accc automationConnectionClassicCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("name"))
}

func (accc automationConnectionClassicCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("resource_group_name"))
}

func (accc automationConnectionClassicCertificateAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("subscription_id"))
}

func (accc automationConnectionClassicCertificateAttributes) SubscriptionName() terra.StringValue {
	return terra.ReferenceString(accc.ref.Append("subscription_name"))
}

func (accc automationConnectionClassicCertificateAttributes) Timeouts() automationconnectionclassiccertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[automationconnectionclassiccertificate.TimeoutsAttributes](accc.ref.Append("timeouts"))
}

type automationConnectionClassicCertificateState struct {
	AutomationAccountName string                                                `json:"automation_account_name"`
	CertificateAssetName  string                                                `json:"certificate_asset_name"`
	Description           string                                                `json:"description"`
	Id                    string                                                `json:"id"`
	Name                  string                                                `json:"name"`
	ResourceGroupName     string                                                `json:"resource_group_name"`
	SubscriptionId        string                                                `json:"subscription_id"`
	SubscriptionName      string                                                `json:"subscription_name"`
	Timeouts              *automationconnectionclassiccertificate.TimeoutsState `json:"timeouts"`
}
