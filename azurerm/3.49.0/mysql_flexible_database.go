// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mysqlflexibledatabase "github.com/golingon/terraproviders/azurerm/3.49.0/mysqlflexibledatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMysqlFlexibleDatabase(name string, args MysqlFlexibleDatabaseArgs) *MysqlFlexibleDatabase {
	return &MysqlFlexibleDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MysqlFlexibleDatabase)(nil)

type MysqlFlexibleDatabase struct {
	Name  string
	Args  MysqlFlexibleDatabaseArgs
	state *mysqlFlexibleDatabaseState
}

func (mfd *MysqlFlexibleDatabase) Type() string {
	return "azurerm_mysql_flexible_database"
}

func (mfd *MysqlFlexibleDatabase) LocalName() string {
	return mfd.Name
}

func (mfd *MysqlFlexibleDatabase) Configuration() interface{} {
	return mfd.Args
}

func (mfd *MysqlFlexibleDatabase) Attributes() mysqlFlexibleDatabaseAttributes {
	return mysqlFlexibleDatabaseAttributes{ref: terra.ReferenceResource(mfd)}
}

func (mfd *MysqlFlexibleDatabase) ImportState(av io.Reader) error {
	mfd.state = &mysqlFlexibleDatabaseState{}
	if err := json.NewDecoder(av).Decode(mfd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mfd.Type(), mfd.LocalName(), err)
	}
	return nil
}

func (mfd *MysqlFlexibleDatabase) State() (*mysqlFlexibleDatabaseState, bool) {
	return mfd.state, mfd.state != nil
}

func (mfd *MysqlFlexibleDatabase) StateMust() *mysqlFlexibleDatabaseState {
	if mfd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mfd.Type(), mfd.LocalName()))
	}
	return mfd.state
}

func (mfd *MysqlFlexibleDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(mfd)
}

type MysqlFlexibleDatabaseArgs struct {
	// Charset: string, required
	Charset terra.StringValue `hcl:"charset,attr" validate:"required"`
	// Collation: string, required
	Collation terra.StringValue `hcl:"collation,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mysqlflexibledatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MysqlFlexibleDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mysqlFlexibleDatabaseAttributes struct {
	ref terra.Reference
}

func (mfd mysqlFlexibleDatabaseAttributes) Charset() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("charset"))
}

func (mfd mysqlFlexibleDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("collation"))
}

func (mfd mysqlFlexibleDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("id"))
}

func (mfd mysqlFlexibleDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("name"))
}

func (mfd mysqlFlexibleDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("resource_group_name"))
}

func (mfd mysqlFlexibleDatabaseAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(mfd.ref.Append("server_name"))
}

func (mfd mysqlFlexibleDatabaseAttributes) Timeouts() mysqlflexibledatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[mysqlflexibledatabase.TimeoutsAttributes](mfd.ref.Append("timeouts"))
}

type mysqlFlexibleDatabaseState struct {
	Charset           string                               `json:"charset"`
	Collation         string                               `json:"collation"`
	Id                string                               `json:"id"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	ServerName        string                               `json:"server_name"`
	Timeouts          *mysqlflexibledatabase.TimeoutsState `json:"timeouts"`
}
