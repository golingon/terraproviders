// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	streamanalyticsoutputtable "github.com/golingon/terraproviders/azurerm/3.49.0/streamanalyticsoutputtable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStreamAnalyticsOutputTable(name string, args StreamAnalyticsOutputTableArgs) *StreamAnalyticsOutputTable {
	return &StreamAnalyticsOutputTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StreamAnalyticsOutputTable)(nil)

type StreamAnalyticsOutputTable struct {
	Name  string
	Args  StreamAnalyticsOutputTableArgs
	state *streamAnalyticsOutputTableState
}

func (saot *StreamAnalyticsOutputTable) Type() string {
	return "azurerm_stream_analytics_output_table"
}

func (saot *StreamAnalyticsOutputTable) LocalName() string {
	return saot.Name
}

func (saot *StreamAnalyticsOutputTable) Configuration() interface{} {
	return saot.Args
}

func (saot *StreamAnalyticsOutputTable) Attributes() streamAnalyticsOutputTableAttributes {
	return streamAnalyticsOutputTableAttributes{ref: terra.ReferenceResource(saot)}
}

func (saot *StreamAnalyticsOutputTable) ImportState(av io.Reader) error {
	saot.state = &streamAnalyticsOutputTableState{}
	if err := json.NewDecoder(av).Decode(saot.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saot.Type(), saot.LocalName(), err)
	}
	return nil
}

func (saot *StreamAnalyticsOutputTable) State() (*streamAnalyticsOutputTableState, bool) {
	return saot.state, saot.state != nil
}

func (saot *StreamAnalyticsOutputTable) StateMust() *streamAnalyticsOutputTableState {
	if saot.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saot.Type(), saot.LocalName()))
	}
	return saot.state
}

func (saot *StreamAnalyticsOutputTable) DependOn() terra.Reference {
	return terra.ReferenceResource(saot)
}

type StreamAnalyticsOutputTableArgs struct {
	// BatchSize: number, required
	BatchSize terra.NumberValue `hcl:"batch_size,attr" validate:"required"`
	// ColumnsToRemove: list of string, optional
	ColumnsToRemove terra.ListValue[terra.StringValue] `hcl:"columns_to_remove,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RowKey: string, required
	RowKey terra.StringValue `hcl:"row_key,attr" validate:"required"`
	// StorageAccountKey: string, required
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// StreamAnalyticsJobName: string, required
	StreamAnalyticsJobName terra.StringValue `hcl:"stream_analytics_job_name,attr" validate:"required"`
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *streamanalyticsoutputtable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StreamAnalyticsOutputTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type streamAnalyticsOutputTableAttributes struct {
	ref terra.Reference
}

func (saot streamAnalyticsOutputTableAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceNumber(saot.ref.Append("batch_size"))
}

func (saot streamAnalyticsOutputTableAttributes) ColumnsToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](saot.ref.Append("columns_to_remove"))
}

func (saot streamAnalyticsOutputTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("id"))
}

func (saot streamAnalyticsOutputTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("name"))
}

func (saot streamAnalyticsOutputTableAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("partition_key"))
}

func (saot streamAnalyticsOutputTableAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("resource_group_name"))
}

func (saot streamAnalyticsOutputTableAttributes) RowKey() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("row_key"))
}

func (saot streamAnalyticsOutputTableAttributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("storage_account_key"))
}

func (saot streamAnalyticsOutputTableAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("storage_account_name"))
}

func (saot streamAnalyticsOutputTableAttributes) StreamAnalyticsJobName() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("stream_analytics_job_name"))
}

func (saot streamAnalyticsOutputTableAttributes) Table() terra.StringValue {
	return terra.ReferenceString(saot.ref.Append("table"))
}

func (saot streamAnalyticsOutputTableAttributes) Timeouts() streamanalyticsoutputtable.TimeoutsAttributes {
	return terra.ReferenceSingle[streamanalyticsoutputtable.TimeoutsAttributes](saot.ref.Append("timeouts"))
}

type streamAnalyticsOutputTableState struct {
	BatchSize              float64                                   `json:"batch_size"`
	ColumnsToRemove        []string                                  `json:"columns_to_remove"`
	Id                     string                                    `json:"id"`
	Name                   string                                    `json:"name"`
	PartitionKey           string                                    `json:"partition_key"`
	ResourceGroupName      string                                    `json:"resource_group_name"`
	RowKey                 string                                    `json:"row_key"`
	StorageAccountKey      string                                    `json:"storage_account_key"`
	StorageAccountName     string                                    `json:"storage_account_name"`
	StreamAnalyticsJobName string                                    `json:"stream_analytics_job_name"`
	Table                  string                                    `json:"table"`
	Timeouts               *streamanalyticsoutputtable.TimeoutsState `json:"timeouts"`
}
