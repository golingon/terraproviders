// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	digitaltwinsinstance "github.com/golingon/terraproviders/azurerm/3.49.0/digitaltwinsinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDigitalTwinsInstance(name string, args DigitalTwinsInstanceArgs) *DigitalTwinsInstance {
	return &DigitalTwinsInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DigitalTwinsInstance)(nil)

type DigitalTwinsInstance struct {
	Name  string
	Args  DigitalTwinsInstanceArgs
	state *digitalTwinsInstanceState
}

func (dti *DigitalTwinsInstance) Type() string {
	return "azurerm_digital_twins_instance"
}

func (dti *DigitalTwinsInstance) LocalName() string {
	return dti.Name
}

func (dti *DigitalTwinsInstance) Configuration() interface{} {
	return dti.Args
}

func (dti *DigitalTwinsInstance) Attributes() digitalTwinsInstanceAttributes {
	return digitalTwinsInstanceAttributes{ref: terra.ReferenceResource(dti)}
}

func (dti *DigitalTwinsInstance) ImportState(av io.Reader) error {
	dti.state = &digitalTwinsInstanceState{}
	if err := json.NewDecoder(av).Decode(dti.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dti.Type(), dti.LocalName(), err)
	}
	return nil
}

func (dti *DigitalTwinsInstance) State() (*digitalTwinsInstanceState, bool) {
	return dti.state, dti.state != nil
}

func (dti *DigitalTwinsInstance) StateMust() *digitalTwinsInstanceState {
	if dti.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dti.Type(), dti.LocalName()))
	}
	return dti.state
}

func (dti *DigitalTwinsInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(dti)
}

type DigitalTwinsInstanceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *digitaltwinsinstance.Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *digitaltwinsinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DigitalTwinsInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type digitalTwinsInstanceAttributes struct {
	ref terra.Reference
}

func (dti digitalTwinsInstanceAttributes) HostName() terra.StringValue {
	return terra.ReferenceString(dti.ref.Append("host_name"))
}

func (dti digitalTwinsInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dti.ref.Append("id"))
}

func (dti digitalTwinsInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dti.ref.Append("location"))
}

func (dti digitalTwinsInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dti.ref.Append("name"))
}

func (dti digitalTwinsInstanceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dti.ref.Append("resource_group_name"))
}

func (dti digitalTwinsInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dti.ref.Append("tags"))
}

func (dti digitalTwinsInstanceAttributes) Identity() terra.ListValue[digitaltwinsinstance.IdentityAttributes] {
	return terra.ReferenceList[digitaltwinsinstance.IdentityAttributes](dti.ref.Append("identity"))
}

func (dti digitalTwinsInstanceAttributes) Timeouts() digitaltwinsinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[digitaltwinsinstance.TimeoutsAttributes](dti.ref.Append("timeouts"))
}

type digitalTwinsInstanceState struct {
	HostName          string                               `json:"host_name"`
	Id                string                               `json:"id"`
	Location          string                               `json:"location"`
	Name              string                               `json:"name"`
	ResourceGroupName string                               `json:"resource_group_name"`
	Tags              map[string]string                    `json:"tags"`
	Identity          []digitaltwinsinstance.IdentityState `json:"identity"`
	Timeouts          *digitaltwinsinstance.TimeoutsState  `json:"timeouts"`
}
