// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkpacketcapture "github.com/golingon/terraproviders/azurerm/3.49.0/networkpacketcapture"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkPacketCapture(name string, args NetworkPacketCaptureArgs) *NetworkPacketCapture {
	return &NetworkPacketCapture{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkPacketCapture)(nil)

type NetworkPacketCapture struct {
	Name  string
	Args  NetworkPacketCaptureArgs
	state *networkPacketCaptureState
}

func (npc *NetworkPacketCapture) Type() string {
	return "azurerm_network_packet_capture"
}

func (npc *NetworkPacketCapture) LocalName() string {
	return npc.Name
}

func (npc *NetworkPacketCapture) Configuration() interface{} {
	return npc.Args
}

func (npc *NetworkPacketCapture) Attributes() networkPacketCaptureAttributes {
	return networkPacketCaptureAttributes{ref: terra.ReferenceResource(npc)}
}

func (npc *NetworkPacketCapture) ImportState(av io.Reader) error {
	npc.state = &networkPacketCaptureState{}
	if err := json.NewDecoder(av).Decode(npc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", npc.Type(), npc.LocalName(), err)
	}
	return nil
}

func (npc *NetworkPacketCapture) State() (*networkPacketCaptureState, bool) {
	return npc.state, npc.state != nil
}

func (npc *NetworkPacketCapture) StateMust() *networkPacketCaptureState {
	if npc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", npc.Type(), npc.LocalName()))
	}
	return npc.state
}

func (npc *NetworkPacketCapture) DependOn() terra.Reference {
	return terra.ReferenceResource(npc)
}

type NetworkPacketCaptureArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumBytesPerPacket: number, optional
	MaximumBytesPerPacket terra.NumberValue `hcl:"maximum_bytes_per_packet,attr"`
	// MaximumBytesPerSession: number, optional
	MaximumBytesPerSession terra.NumberValue `hcl:"maximum_bytes_per_session,attr"`
	// MaximumCaptureDuration: number, optional
	MaximumCaptureDuration terra.NumberValue `hcl:"maximum_capture_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkWatcherName: string, required
	NetworkWatcherName terra.StringValue `hcl:"network_watcher_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Filter: min=0
	Filter []networkpacketcapture.Filter `hcl:"filter,block" validate:"min=0"`
	// StorageLocation: required
	StorageLocation *networkpacketcapture.StorageLocation `hcl:"storage_location,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkpacketcapture.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkPacketCapture depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkPacketCaptureAttributes struct {
	ref terra.Reference
}

func (npc networkPacketCaptureAttributes) Id() terra.StringValue {
	return terra.ReferenceString(npc.ref.Append("id"))
}

func (npc networkPacketCaptureAttributes) MaximumBytesPerPacket() terra.NumberValue {
	return terra.ReferenceNumber(npc.ref.Append("maximum_bytes_per_packet"))
}

func (npc networkPacketCaptureAttributes) MaximumBytesPerSession() terra.NumberValue {
	return terra.ReferenceNumber(npc.ref.Append("maximum_bytes_per_session"))
}

func (npc networkPacketCaptureAttributes) MaximumCaptureDuration() terra.NumberValue {
	return terra.ReferenceNumber(npc.ref.Append("maximum_capture_duration"))
}

func (npc networkPacketCaptureAttributes) Name() terra.StringValue {
	return terra.ReferenceString(npc.ref.Append("name"))
}

func (npc networkPacketCaptureAttributes) NetworkWatcherName() terra.StringValue {
	return terra.ReferenceString(npc.ref.Append("network_watcher_name"))
}

func (npc networkPacketCaptureAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(npc.ref.Append("resource_group_name"))
}

func (npc networkPacketCaptureAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(npc.ref.Append("target_resource_id"))
}

func (npc networkPacketCaptureAttributes) Filter() terra.ListValue[networkpacketcapture.FilterAttributes] {
	return terra.ReferenceList[networkpacketcapture.FilterAttributes](npc.ref.Append("filter"))
}

func (npc networkPacketCaptureAttributes) StorageLocation() terra.ListValue[networkpacketcapture.StorageLocationAttributes] {
	return terra.ReferenceList[networkpacketcapture.StorageLocationAttributes](npc.ref.Append("storage_location"))
}

func (npc networkPacketCaptureAttributes) Timeouts() networkpacketcapture.TimeoutsAttributes {
	return terra.ReferenceSingle[networkpacketcapture.TimeoutsAttributes](npc.ref.Append("timeouts"))
}

type networkPacketCaptureState struct {
	Id                     string                                      `json:"id"`
	MaximumBytesPerPacket  float64                                     `json:"maximum_bytes_per_packet"`
	MaximumBytesPerSession float64                                     `json:"maximum_bytes_per_session"`
	MaximumCaptureDuration float64                                     `json:"maximum_capture_duration"`
	Name                   string                                      `json:"name"`
	NetworkWatcherName     string                                      `json:"network_watcher_name"`
	ResourceGroupName      string                                      `json:"resource_group_name"`
	TargetResourceId       string                                      `json:"target_resource_id"`
	Filter                 []networkpacketcapture.FilterState          `json:"filter"`
	StorageLocation        []networkpacketcapture.StorageLocationState `json:"storage_location"`
	Timeouts               *networkpacketcapture.TimeoutsState         `json:"timeouts"`
}
