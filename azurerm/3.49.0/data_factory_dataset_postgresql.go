// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorydatasetpostgresql "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorydatasetpostgresql"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryDatasetPostgresql(name string, args DataFactoryDatasetPostgresqlArgs) *DataFactoryDatasetPostgresql {
	return &DataFactoryDatasetPostgresql{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryDatasetPostgresql)(nil)

type DataFactoryDatasetPostgresql struct {
	Name  string
	Args  DataFactoryDatasetPostgresqlArgs
	state *dataFactoryDatasetPostgresqlState
}

func (dfdp *DataFactoryDatasetPostgresql) Type() string {
	return "azurerm_data_factory_dataset_postgresql"
}

func (dfdp *DataFactoryDatasetPostgresql) LocalName() string {
	return dfdp.Name
}

func (dfdp *DataFactoryDatasetPostgresql) Configuration() interface{} {
	return dfdp.Args
}

func (dfdp *DataFactoryDatasetPostgresql) Attributes() dataFactoryDatasetPostgresqlAttributes {
	return dataFactoryDatasetPostgresqlAttributes{ref: terra.ReferenceResource(dfdp)}
}

func (dfdp *DataFactoryDatasetPostgresql) ImportState(av io.Reader) error {
	dfdp.state = &dataFactoryDatasetPostgresqlState{}
	if err := json.NewDecoder(av).Decode(dfdp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfdp.Type(), dfdp.LocalName(), err)
	}
	return nil
}

func (dfdp *DataFactoryDatasetPostgresql) State() (*dataFactoryDatasetPostgresqlState, bool) {
	return dfdp.state, dfdp.state != nil
}

func (dfdp *DataFactoryDatasetPostgresql) StateMust() *dataFactoryDatasetPostgresqlState {
	if dfdp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfdp.Type(), dfdp.LocalName()))
	}
	return dfdp.state
}

func (dfdp *DataFactoryDatasetPostgresql) DependOn() terra.Reference {
	return terra.ReferenceResource(dfdp)
}

type DataFactoryDatasetPostgresqlArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TableName: string, optional
	TableName terra.StringValue `hcl:"table_name,attr"`
	// SchemaColumn: min=0
	SchemaColumn []datafactorydatasetpostgresql.SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datafactorydatasetpostgresql.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryDatasetPostgresql depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryDatasetPostgresqlAttributes struct {
	ref terra.Reference
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdp.ref.Append("additional_properties"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfdp.ref.Append("annotations"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("data_factory_id"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("description"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("folder"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("id"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("linked_service_name"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("name"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdp.ref.Append("parameters"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(dfdp.ref.Append("table_name"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) SchemaColumn() terra.ListValue[datafactorydatasetpostgresql.SchemaColumnAttributes] {
	return terra.ReferenceList[datafactorydatasetpostgresql.SchemaColumnAttributes](dfdp.ref.Append("schema_column"))
}

func (dfdp dataFactoryDatasetPostgresqlAttributes) Timeouts() datafactorydatasetpostgresql.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorydatasetpostgresql.TimeoutsAttributes](dfdp.ref.Append("timeouts"))
}

type dataFactoryDatasetPostgresqlState struct {
	AdditionalProperties map[string]string                                `json:"additional_properties"`
	Annotations          []string                                         `json:"annotations"`
	DataFactoryId        string                                           `json:"data_factory_id"`
	Description          string                                           `json:"description"`
	Folder               string                                           `json:"folder"`
	Id                   string                                           `json:"id"`
	LinkedServiceName    string                                           `json:"linked_service_name"`
	Name                 string                                           `json:"name"`
	Parameters           map[string]string                                `json:"parameters"`
	TableName            string                                           `json:"table_name"`
	SchemaColumn         []datafactorydatasetpostgresql.SchemaColumnState `json:"schema_column"`
	Timeouts             *datafactorydatasetpostgresql.TimeoutsState      `json:"timeouts"`
}
