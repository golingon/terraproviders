// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	redisenterprisedatabase "github.com/golingon/terraproviders/azurerm/3.49.0/redisenterprisedatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedisEnterpriseDatabase(name string, args RedisEnterpriseDatabaseArgs) *RedisEnterpriseDatabase {
	return &RedisEnterpriseDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisEnterpriseDatabase)(nil)

type RedisEnterpriseDatabase struct {
	Name  string
	Args  RedisEnterpriseDatabaseArgs
	state *redisEnterpriseDatabaseState
}

func (red *RedisEnterpriseDatabase) Type() string {
	return "azurerm_redis_enterprise_database"
}

func (red *RedisEnterpriseDatabase) LocalName() string {
	return red.Name
}

func (red *RedisEnterpriseDatabase) Configuration() interface{} {
	return red.Args
}

func (red *RedisEnterpriseDatabase) Attributes() redisEnterpriseDatabaseAttributes {
	return redisEnterpriseDatabaseAttributes{ref: terra.ReferenceResource(red)}
}

func (red *RedisEnterpriseDatabase) ImportState(av io.Reader) error {
	red.state = &redisEnterpriseDatabaseState{}
	if err := json.NewDecoder(av).Decode(red.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", red.Type(), red.LocalName(), err)
	}
	return nil
}

func (red *RedisEnterpriseDatabase) State() (*redisEnterpriseDatabaseState, bool) {
	return red.state, red.state != nil
}

func (red *RedisEnterpriseDatabase) StateMust() *redisEnterpriseDatabaseState {
	if red.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", red.Type(), red.LocalName()))
	}
	return red.state
}

func (red *RedisEnterpriseDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(red)
}

type RedisEnterpriseDatabaseArgs struct {
	// ClientProtocol: string, optional
	ClientProtocol terra.StringValue `hcl:"client_protocol,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ClusteringPolicy: string, optional
	ClusteringPolicy terra.StringValue `hcl:"clustering_policy,attr"`
	// EvictionPolicy: string, optional
	EvictionPolicy terra.StringValue `hcl:"eviction_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedDatabaseGroupNickname: string, optional
	LinkedDatabaseGroupNickname terra.StringValue `hcl:"linked_database_group_nickname,attr"`
	// LinkedDatabaseId: set of string, optional
	LinkedDatabaseId terra.SetValue[terra.StringValue] `hcl:"linked_database_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ResourceGroupName: string, optional
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr"`
	// Module: min=0,max=4
	Module []redisenterprisedatabase.Module `hcl:"module,block" validate:"min=0,max=4"`
	// Timeouts: optional
	Timeouts *redisenterprisedatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedisEnterpriseDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redisEnterpriseDatabaseAttributes struct {
	ref terra.Reference
}

func (red redisEnterpriseDatabaseAttributes) ClientProtocol() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("client_protocol"))
}

func (red redisEnterpriseDatabaseAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("cluster_id"))
}

func (red redisEnterpriseDatabaseAttributes) ClusteringPolicy() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("clustering_policy"))
}

func (red redisEnterpriseDatabaseAttributes) EvictionPolicy() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("eviction_policy"))
}

func (red redisEnterpriseDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("id"))
}

func (red redisEnterpriseDatabaseAttributes) LinkedDatabaseGroupNickname() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("linked_database_group_nickname"))
}

func (red redisEnterpriseDatabaseAttributes) LinkedDatabaseId() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](red.ref.Append("linked_database_id"))
}

func (red redisEnterpriseDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("name"))
}

func (red redisEnterpriseDatabaseAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(red.ref.Append("port"))
}

func (red redisEnterpriseDatabaseAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("primary_access_key"))
}

func (red redisEnterpriseDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("resource_group_name"))
}

func (red redisEnterpriseDatabaseAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(red.ref.Append("secondary_access_key"))
}

func (red redisEnterpriseDatabaseAttributes) Module() terra.ListValue[redisenterprisedatabase.ModuleAttributes] {
	return terra.ReferenceList[redisenterprisedatabase.ModuleAttributes](red.ref.Append("module"))
}

func (red redisEnterpriseDatabaseAttributes) Timeouts() redisenterprisedatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[redisenterprisedatabase.TimeoutsAttributes](red.ref.Append("timeouts"))
}

type redisEnterpriseDatabaseState struct {
	ClientProtocol              string                                 `json:"client_protocol"`
	ClusterId                   string                                 `json:"cluster_id"`
	ClusteringPolicy            string                                 `json:"clustering_policy"`
	EvictionPolicy              string                                 `json:"eviction_policy"`
	Id                          string                                 `json:"id"`
	LinkedDatabaseGroupNickname string                                 `json:"linked_database_group_nickname"`
	LinkedDatabaseId            []string                               `json:"linked_database_id"`
	Name                        string                                 `json:"name"`
	Port                        float64                                `json:"port"`
	PrimaryAccessKey            string                                 `json:"primary_access_key"`
	ResourceGroupName           string                                 `json:"resource_group_name"`
	SecondaryAccessKey          string                                 `json:"secondary_access_key"`
	Module                      []redisenterprisedatabase.ModuleState  `json:"module"`
	Timeouts                    *redisenterprisedatabase.TimeoutsState `json:"timeouts"`
}
