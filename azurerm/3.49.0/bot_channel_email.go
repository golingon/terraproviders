// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	botchannelemail "github.com/golingon/terraproviders/azurerm/3.49.0/botchannelemail"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBotChannelEmail(name string, args BotChannelEmailArgs) *BotChannelEmail {
	return &BotChannelEmail{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BotChannelEmail)(nil)

type BotChannelEmail struct {
	Name  string
	Args  BotChannelEmailArgs
	state *botChannelEmailState
}

func (bce *BotChannelEmail) Type() string {
	return "azurerm_bot_channel_email"
}

func (bce *BotChannelEmail) LocalName() string {
	return bce.Name
}

func (bce *BotChannelEmail) Configuration() interface{} {
	return bce.Args
}

func (bce *BotChannelEmail) Attributes() botChannelEmailAttributes {
	return botChannelEmailAttributes{ref: terra.ReferenceResource(bce)}
}

func (bce *BotChannelEmail) ImportState(av io.Reader) error {
	bce.state = &botChannelEmailState{}
	if err := json.NewDecoder(av).Decode(bce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bce.Type(), bce.LocalName(), err)
	}
	return nil
}

func (bce *BotChannelEmail) State() (*botChannelEmailState, bool) {
	return bce.state, bce.state != nil
}

func (bce *BotChannelEmail) StateMust() *botChannelEmailState {
	if bce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bce.Type(), bce.LocalName()))
	}
	return bce.state
}

func (bce *BotChannelEmail) DependOn() terra.Reference {
	return terra.ReferenceResource(bce)
}

type BotChannelEmailArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// EmailAddress: string, required
	EmailAddress terra.StringValue `hcl:"email_address,attr" validate:"required"`
	// EmailPassword: string, required
	EmailPassword terra.StringValue `hcl:"email_password,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *botchannelemail.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BotChannelEmail depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type botChannelEmailAttributes struct {
	ref terra.Reference
}

func (bce botChannelEmailAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("bot_name"))
}

func (bce botChannelEmailAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("email_address"))
}

func (bce botChannelEmailAttributes) EmailPassword() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("email_password"))
}

func (bce botChannelEmailAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("id"))
}

func (bce botChannelEmailAttributes) Location() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("location"))
}

func (bce botChannelEmailAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(bce.ref.Append("resource_group_name"))
}

func (bce botChannelEmailAttributes) Timeouts() botchannelemail.TimeoutsAttributes {
	return terra.ReferenceSingle[botchannelemail.TimeoutsAttributes](bce.ref.Append("timeouts"))
}

type botChannelEmailState struct {
	BotName           string                         `json:"bot_name"`
	EmailAddress      string                         `json:"email_address"`
	EmailPassword     string                         `json:"email_password"`
	Id                string                         `json:"id"`
	Location          string                         `json:"location"`
	ResourceGroupName string                         `json:"resource_group_name"`
	Timeouts          *botchannelemail.TimeoutsState `json:"timeouts"`
}
