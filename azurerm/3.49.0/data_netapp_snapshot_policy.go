// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datanetappsnapshotpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/datanetappsnapshotpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataNetappSnapshotPolicy(name string, args DataNetappSnapshotPolicyArgs) *DataNetappSnapshotPolicy {
	return &DataNetappSnapshotPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNetappSnapshotPolicy)(nil)

type DataNetappSnapshotPolicy struct {
	Name string
	Args DataNetappSnapshotPolicyArgs
}

func (nsp *DataNetappSnapshotPolicy) DataSource() string {
	return "azurerm_netapp_snapshot_policy"
}

func (nsp *DataNetappSnapshotPolicy) LocalName() string {
	return nsp.Name
}

func (nsp *DataNetappSnapshotPolicy) Configuration() interface{} {
	return nsp.Args
}

func (nsp *DataNetappSnapshotPolicy) Attributes() dataNetappSnapshotPolicyAttributes {
	return dataNetappSnapshotPolicyAttributes{ref: terra.ReferenceDataResource(nsp)}
}

type DataNetappSnapshotPolicyArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// DailySchedule: min=0
	DailySchedule []datanetappsnapshotpolicy.DailySchedule `hcl:"daily_schedule,block" validate:"min=0"`
	// HourlySchedule: min=0
	HourlySchedule []datanetappsnapshotpolicy.HourlySchedule `hcl:"hourly_schedule,block" validate:"min=0"`
	// MonthlySchedule: min=0
	MonthlySchedule []datanetappsnapshotpolicy.MonthlySchedule `hcl:"monthly_schedule,block" validate:"min=0"`
	// WeeklySchedule: min=0
	WeeklySchedule []datanetappsnapshotpolicy.WeeklySchedule `hcl:"weekly_schedule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datanetappsnapshotpolicy.Timeouts `hcl:"timeouts,block"`
}
type dataNetappSnapshotPolicyAttributes struct {
	ref terra.Reference
}

func (nsp dataNetappSnapshotPolicyAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("account_name"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(nsp.ref.Append("enabled"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("id"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("location"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("name"))
}

func (nsp dataNetappSnapshotPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nsp.ref.Append("resource_group_name"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nsp.ref.Append("tags"))
}

func (nsp dataNetappSnapshotPolicyAttributes) DailySchedule() terra.ListValue[datanetappsnapshotpolicy.DailyScheduleAttributes] {
	return terra.ReferenceList[datanetappsnapshotpolicy.DailyScheduleAttributes](nsp.ref.Append("daily_schedule"))
}

func (nsp dataNetappSnapshotPolicyAttributes) HourlySchedule() terra.ListValue[datanetappsnapshotpolicy.HourlyScheduleAttributes] {
	return terra.ReferenceList[datanetappsnapshotpolicy.HourlyScheduleAttributes](nsp.ref.Append("hourly_schedule"))
}

func (nsp dataNetappSnapshotPolicyAttributes) MonthlySchedule() terra.ListValue[datanetappsnapshotpolicy.MonthlyScheduleAttributes] {
	return terra.ReferenceList[datanetappsnapshotpolicy.MonthlyScheduleAttributes](nsp.ref.Append("monthly_schedule"))
}

func (nsp dataNetappSnapshotPolicyAttributes) WeeklySchedule() terra.ListValue[datanetappsnapshotpolicy.WeeklyScheduleAttributes] {
	return terra.ReferenceList[datanetappsnapshotpolicy.WeeklyScheduleAttributes](nsp.ref.Append("weekly_schedule"))
}

func (nsp dataNetappSnapshotPolicyAttributes) Timeouts() datanetappsnapshotpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[datanetappsnapshotpolicy.TimeoutsAttributes](nsp.ref.Append("timeouts"))
}
