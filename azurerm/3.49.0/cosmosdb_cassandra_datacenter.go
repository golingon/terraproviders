// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbcassandradatacenter "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbcassandradatacenter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbCassandraDatacenter(name string, args CosmosdbCassandraDatacenterArgs) *CosmosdbCassandraDatacenter {
	return &CosmosdbCassandraDatacenter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbCassandraDatacenter)(nil)

type CosmosdbCassandraDatacenter struct {
	Name  string
	Args  CosmosdbCassandraDatacenterArgs
	state *cosmosdbCassandraDatacenterState
}

func (ccd *CosmosdbCassandraDatacenter) Type() string {
	return "azurerm_cosmosdb_cassandra_datacenter"
}

func (ccd *CosmosdbCassandraDatacenter) LocalName() string {
	return ccd.Name
}

func (ccd *CosmosdbCassandraDatacenter) Configuration() interface{} {
	return ccd.Args
}

func (ccd *CosmosdbCassandraDatacenter) Attributes() cosmosdbCassandraDatacenterAttributes {
	return cosmosdbCassandraDatacenterAttributes{ref: terra.ReferenceResource(ccd)}
}

func (ccd *CosmosdbCassandraDatacenter) ImportState(av io.Reader) error {
	ccd.state = &cosmosdbCassandraDatacenterState{}
	if err := json.NewDecoder(av).Decode(ccd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccd.Type(), ccd.LocalName(), err)
	}
	return nil
}

func (ccd *CosmosdbCassandraDatacenter) State() (*cosmosdbCassandraDatacenterState, bool) {
	return ccd.state, ccd.state != nil
}

func (ccd *CosmosdbCassandraDatacenter) StateMust() *cosmosdbCassandraDatacenterState {
	if ccd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccd.Type(), ccd.LocalName()))
	}
	return ccd.state
}

func (ccd *CosmosdbCassandraDatacenter) DependOn() terra.Reference {
	return terra.ReferenceResource(ccd)
}

type CosmosdbCassandraDatacenterArgs struct {
	// AvailabilityZonesEnabled: bool, optional
	AvailabilityZonesEnabled terra.BoolValue `hcl:"availability_zones_enabled,attr"`
	// BackupStorageCustomerKeyUri: string, optional
	BackupStorageCustomerKeyUri terra.StringValue `hcl:"backup_storage_customer_key_uri,attr"`
	// Base64EncodedYamlFragment: string, optional
	Base64EncodedYamlFragment terra.StringValue `hcl:"base64_encoded_yaml_fragment,attr"`
	// CassandraClusterId: string, required
	CassandraClusterId terra.StringValue `hcl:"cassandra_cluster_id,attr" validate:"required"`
	// DelegatedManagementSubnetId: string, required
	DelegatedManagementSubnetId terra.StringValue `hcl:"delegated_management_subnet_id,attr" validate:"required"`
	// DiskCount: number, optional
	DiskCount terra.NumberValue `hcl:"disk_count,attr"`
	// DiskSku: string, optional
	DiskSku terra.StringValue `hcl:"disk_sku,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedDiskCustomerKeyUri: string, optional
	ManagedDiskCustomerKeyUri terra.StringValue `hcl:"managed_disk_customer_key_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// Timeouts: optional
	Timeouts *cosmosdbcassandradatacenter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbCassandraDatacenter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbCassandraDatacenterAttributes struct {
	ref terra.Reference
}

func (ccd cosmosdbCassandraDatacenterAttributes) AvailabilityZonesEnabled() terra.BoolValue {
	return terra.ReferenceBool(ccd.ref.Append("availability_zones_enabled"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) BackupStorageCustomerKeyUri() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("backup_storage_customer_key_uri"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) Base64EncodedYamlFragment() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("base64_encoded_yaml_fragment"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) CassandraClusterId() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("cassandra_cluster_id"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) DelegatedManagementSubnetId() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("delegated_management_subnet_id"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) DiskCount() terra.NumberValue {
	return terra.ReferenceNumber(ccd.ref.Append("disk_count"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) DiskSku() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("disk_sku"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("id"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("location"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) ManagedDiskCustomerKeyUri() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("managed_disk_customer_key_uri"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("name"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceNumber(ccd.ref.Append("node_count"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(ccd.ref.Append("sku_name"))
}

func (ccd cosmosdbCassandraDatacenterAttributes) Timeouts() cosmosdbcassandradatacenter.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbcassandradatacenter.TimeoutsAttributes](ccd.ref.Append("timeouts"))
}

type cosmosdbCassandraDatacenterState struct {
	AvailabilityZonesEnabled    bool                                       `json:"availability_zones_enabled"`
	BackupStorageCustomerKeyUri string                                     `json:"backup_storage_customer_key_uri"`
	Base64EncodedYamlFragment   string                                     `json:"base64_encoded_yaml_fragment"`
	CassandraClusterId          string                                     `json:"cassandra_cluster_id"`
	DelegatedManagementSubnetId string                                     `json:"delegated_management_subnet_id"`
	DiskCount                   float64                                    `json:"disk_count"`
	DiskSku                     string                                     `json:"disk_sku"`
	Id                          string                                     `json:"id"`
	Location                    string                                     `json:"location"`
	ManagedDiskCustomerKeyUri   string                                     `json:"managed_disk_customer_key_uri"`
	Name                        string                                     `json:"name"`
	NodeCount                   float64                                    `json:"node_count"`
	SkuName                     string                                     `json:"sku_name"`
	Timeouts                    *cosmosdbcassandradatacenter.TimeoutsState `json:"timeouts"`
}
