// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsresolver "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsresolver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsResolver(name string, args PrivateDnsResolverArgs) *PrivateDnsResolver {
	return &PrivateDnsResolver{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsResolver)(nil)

type PrivateDnsResolver struct {
	Name  string
	Args  PrivateDnsResolverArgs
	state *privateDnsResolverState
}

func (pdr *PrivateDnsResolver) Type() string {
	return "azurerm_private_dns_resolver"
}

func (pdr *PrivateDnsResolver) LocalName() string {
	return pdr.Name
}

func (pdr *PrivateDnsResolver) Configuration() interface{} {
	return pdr.Args
}

func (pdr *PrivateDnsResolver) Attributes() privateDnsResolverAttributes {
	return privateDnsResolverAttributes{ref: terra.ReferenceResource(pdr)}
}

func (pdr *PrivateDnsResolver) ImportState(av io.Reader) error {
	pdr.state = &privateDnsResolverState{}
	if err := json.NewDecoder(av).Decode(pdr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdr.Type(), pdr.LocalName(), err)
	}
	return nil
}

func (pdr *PrivateDnsResolver) State() (*privateDnsResolverState, bool) {
	return pdr.state, pdr.state != nil
}

func (pdr *PrivateDnsResolver) StateMust() *privateDnsResolverState {
	if pdr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdr.Type(), pdr.LocalName()))
	}
	return pdr.state
}

func (pdr *PrivateDnsResolver) DependOn() terra.Reference {
	return terra.ReferenceResource(pdr)
}

type PrivateDnsResolverArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *privatednsresolver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsResolver depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsResolverAttributes struct {
	ref terra.Reference
}

func (pdr privateDnsResolverAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdr.ref.Append("id"))
}

func (pdr privateDnsResolverAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pdr.ref.Append("location"))
}

func (pdr privateDnsResolverAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdr.ref.Append("name"))
}

func (pdr privateDnsResolverAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pdr.ref.Append("resource_group_name"))
}

func (pdr privateDnsResolverAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdr.ref.Append("tags"))
}

func (pdr privateDnsResolverAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceString(pdr.ref.Append("virtual_network_id"))
}

func (pdr privateDnsResolverAttributes) Timeouts() privatednsresolver.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsresolver.TimeoutsAttributes](pdr.ref.Append("timeouts"))
}

type privateDnsResolverState struct {
	Id                string                            `json:"id"`
	Location          string                            `json:"location"`
	Name              string                            `json:"name"`
	ResourceGroupName string                            `json:"resource_group_name"`
	Tags              map[string]string                 `json:"tags"`
	VirtualNetworkId  string                            `json:"virtual_network_id"`
	Timeouts          *privatednsresolver.TimeoutsState `json:"timeouts"`
}
