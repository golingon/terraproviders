// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dnscaarecord "github.com/golingon/terraproviders/azurerm/3.49.0/dnscaarecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsCaaRecord(name string, args DnsCaaRecordArgs) *DnsCaaRecord {
	return &DnsCaaRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsCaaRecord)(nil)

type DnsCaaRecord struct {
	Name  string
	Args  DnsCaaRecordArgs
	state *dnsCaaRecordState
}

func (dcr *DnsCaaRecord) Type() string {
	return "azurerm_dns_caa_record"
}

func (dcr *DnsCaaRecord) LocalName() string {
	return dcr.Name
}

func (dcr *DnsCaaRecord) Configuration() interface{} {
	return dcr.Args
}

func (dcr *DnsCaaRecord) Attributes() dnsCaaRecordAttributes {
	return dnsCaaRecordAttributes{ref: terra.ReferenceResource(dcr)}
}

func (dcr *DnsCaaRecord) ImportState(av io.Reader) error {
	dcr.state = &dnsCaaRecordState{}
	if err := json.NewDecoder(av).Decode(dcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcr.Type(), dcr.LocalName(), err)
	}
	return nil
}

func (dcr *DnsCaaRecord) State() (*dnsCaaRecordState, bool) {
	return dcr.state, dcr.state != nil
}

func (dcr *DnsCaaRecord) StateMust() *dnsCaaRecordState {
	if dcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcr.Type(), dcr.LocalName()))
	}
	return dcr.state
}

func (dcr *DnsCaaRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(dcr)
}

type DnsCaaRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Record: min=1
	Record []dnscaarecord.Record `hcl:"record,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *dnscaarecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsCaaRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsCaaRecordAttributes struct {
	ref terra.Reference
}

func (dcr dnsCaaRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(dcr.ref.Append("fqdn"))
}

func (dcr dnsCaaRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcr.ref.Append("id"))
}

func (dcr dnsCaaRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcr.ref.Append("name"))
}

func (dcr dnsCaaRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dcr.ref.Append("resource_group_name"))
}

func (dcr dnsCaaRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dcr.ref.Append("tags"))
}

func (dcr dnsCaaRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(dcr.ref.Append("ttl"))
}

func (dcr dnsCaaRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(dcr.ref.Append("zone_name"))
}

func (dcr dnsCaaRecordAttributes) Record() terra.SetValue[dnscaarecord.RecordAttributes] {
	return terra.ReferenceSet[dnscaarecord.RecordAttributes](dcr.ref.Append("record"))
}

func (dcr dnsCaaRecordAttributes) Timeouts() dnscaarecord.TimeoutsAttributes {
	return terra.ReferenceSingle[dnscaarecord.TimeoutsAttributes](dcr.ref.Append("timeouts"))
}

type dnsCaaRecordState struct {
	Fqdn              string                      `json:"fqdn"`
	Id                string                      `json:"id"`
	Name              string                      `json:"name"`
	ResourceGroupName string                      `json:"resource_group_name"`
	Tags              map[string]string           `json:"tags"`
	Ttl               float64                     `json:"ttl"`
	ZoneName          string                      `json:"zone_name"`
	Record            []dnscaarecord.RecordState  `json:"record"`
	Timeouts          *dnscaarecord.TimeoutsState `json:"timeouts"`
}
