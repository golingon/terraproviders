// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	rediscache "github.com/golingon/terraproviders/azurerm/3.49.0/rediscache"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedisCache(name string, args RedisCacheArgs) *RedisCache {
	return &RedisCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisCache)(nil)

type RedisCache struct {
	Name  string
	Args  RedisCacheArgs
	state *redisCacheState
}

func (rc *RedisCache) Type() string {
	return "azurerm_redis_cache"
}

func (rc *RedisCache) LocalName() string {
	return rc.Name
}

func (rc *RedisCache) Configuration() interface{} {
	return rc.Args
}

func (rc *RedisCache) Attributes() redisCacheAttributes {
	return redisCacheAttributes{ref: terra.ReferenceResource(rc)}
}

func (rc *RedisCache) ImportState(av io.Reader) error {
	rc.state = &redisCacheState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

func (rc *RedisCache) State() (*redisCacheState, bool) {
	return rc.state, rc.state != nil
}

func (rc *RedisCache) StateMust() *redisCacheState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

func (rc *RedisCache) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

type RedisCacheArgs struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// EnableNonSslPort: bool, optional
	EnableNonSslPort terra.BoolValue `hcl:"enable_non_ssl_port,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateStaticIpAddress: string, optional
	PrivateStaticIpAddress terra.StringValue `hcl:"private_static_ip_address,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// RedisVersion: string, optional
	RedisVersion terra.StringValue `hcl:"redis_version,attr"`
	// ReplicasPerMaster: number, optional
	ReplicasPerMaster terra.NumberValue `hcl:"replicas_per_master,attr"`
	// ReplicasPerPrimary: number, optional
	ReplicasPerPrimary terra.NumberValue `hcl:"replicas_per_primary,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ShardCount: number, optional
	ShardCount terra.NumberValue `hcl:"shard_count,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantSettings: map of string, optional
	TenantSettings terra.MapValue[terra.StringValue] `hcl:"tenant_settings,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Identity: optional
	Identity *rediscache.Identity `hcl:"identity,block"`
	// PatchSchedule: min=0
	PatchSchedule []rediscache.PatchSchedule `hcl:"patch_schedule,block" validate:"min=0"`
	// RedisConfiguration: optional
	RedisConfiguration *rediscache.RedisConfiguration `hcl:"redis_configuration,block"`
	// Timeouts: optional
	Timeouts *rediscache.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedisCache depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redisCacheAttributes struct {
	ref terra.Reference
}

func (rc redisCacheAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("capacity"))
}

func (rc redisCacheAttributes) EnableNonSslPort() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("enable_non_ssl_port"))
}

func (rc redisCacheAttributes) Family() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("family"))
}

func (rc redisCacheAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("hostname"))
}

func (rc redisCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("id"))
}

func (rc redisCacheAttributes) Location() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("location"))
}

func (rc redisCacheAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("minimum_tls_version"))
}

func (rc redisCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("name"))
}

func (rc redisCacheAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("port"))
}

func (rc redisCacheAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("primary_access_key"))
}

func (rc redisCacheAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("primary_connection_string"))
}

func (rc redisCacheAttributes) PrivateStaticIpAddress() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("private_static_ip_address"))
}

func (rc redisCacheAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("public_network_access_enabled"))
}

func (rc redisCacheAttributes) RedisVersion() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("redis_version"))
}

func (rc redisCacheAttributes) ReplicasPerMaster() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("replicas_per_master"))
}

func (rc redisCacheAttributes) ReplicasPerPrimary() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("replicas_per_primary"))
}

func (rc redisCacheAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("resource_group_name"))
}

func (rc redisCacheAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("secondary_access_key"))
}

func (rc redisCacheAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("secondary_connection_string"))
}

func (rc redisCacheAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("shard_count"))
}

func (rc redisCacheAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("sku_name"))
}

func (rc redisCacheAttributes) SslPort() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("ssl_port"))
}

func (rc redisCacheAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("subnet_id"))
}

func (rc redisCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags"))
}

func (rc redisCacheAttributes) TenantSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tenant_settings"))
}

func (rc redisCacheAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("zones"))
}

func (rc redisCacheAttributes) Identity() terra.ListValue[rediscache.IdentityAttributes] {
	return terra.ReferenceList[rediscache.IdentityAttributes](rc.ref.Append("identity"))
}

func (rc redisCacheAttributes) PatchSchedule() terra.ListValue[rediscache.PatchScheduleAttributes] {
	return terra.ReferenceList[rediscache.PatchScheduleAttributes](rc.ref.Append("patch_schedule"))
}

func (rc redisCacheAttributes) RedisConfiguration() terra.ListValue[rediscache.RedisConfigurationAttributes] {
	return terra.ReferenceList[rediscache.RedisConfigurationAttributes](rc.ref.Append("redis_configuration"))
}

func (rc redisCacheAttributes) Timeouts() rediscache.TimeoutsAttributes {
	return terra.ReferenceSingle[rediscache.TimeoutsAttributes](rc.ref.Append("timeouts"))
}

type redisCacheState struct {
	Capacity                   float64                              `json:"capacity"`
	EnableNonSslPort           bool                                 `json:"enable_non_ssl_port"`
	Family                     string                               `json:"family"`
	Hostname                   string                               `json:"hostname"`
	Id                         string                               `json:"id"`
	Location                   string                               `json:"location"`
	MinimumTlsVersion          string                               `json:"minimum_tls_version"`
	Name                       string                               `json:"name"`
	Port                       float64                              `json:"port"`
	PrimaryAccessKey           string                               `json:"primary_access_key"`
	PrimaryConnectionString    string                               `json:"primary_connection_string"`
	PrivateStaticIpAddress     string                               `json:"private_static_ip_address"`
	PublicNetworkAccessEnabled bool                                 `json:"public_network_access_enabled"`
	RedisVersion               string                               `json:"redis_version"`
	ReplicasPerMaster          float64                              `json:"replicas_per_master"`
	ReplicasPerPrimary         float64                              `json:"replicas_per_primary"`
	ResourceGroupName          string                               `json:"resource_group_name"`
	SecondaryAccessKey         string                               `json:"secondary_access_key"`
	SecondaryConnectionString  string                               `json:"secondary_connection_string"`
	ShardCount                 float64                              `json:"shard_count"`
	SkuName                    string                               `json:"sku_name"`
	SslPort                    float64                              `json:"ssl_port"`
	SubnetId                   string                               `json:"subnet_id"`
	Tags                       map[string]string                    `json:"tags"`
	TenantSettings             map[string]string                    `json:"tenant_settings"`
	Zones                      []string                             `json:"zones"`
	Identity                   []rediscache.IdentityState           `json:"identity"`
	PatchSchedule              []rediscache.PatchScheduleState      `json:"patch_schedule"`
	RedisConfiguration         []rediscache.RedisConfigurationState `json:"redis_configuration"`
	Timeouts                   *rediscache.TimeoutsState            `json:"timeouts"`
}
