// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	windowswebappslot "github.com/golingon/terraproviders/azurerm/3.49.0/windowswebappslot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWindowsWebAppSlot(name string, args WindowsWebAppSlotArgs) *WindowsWebAppSlot {
	return &WindowsWebAppSlot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WindowsWebAppSlot)(nil)

type WindowsWebAppSlot struct {
	Name  string
	Args  WindowsWebAppSlotArgs
	state *windowsWebAppSlotState
}

func (wwas *WindowsWebAppSlot) Type() string {
	return "azurerm_windows_web_app_slot"
}

func (wwas *WindowsWebAppSlot) LocalName() string {
	return wwas.Name
}

func (wwas *WindowsWebAppSlot) Configuration() interface{} {
	return wwas.Args
}

func (wwas *WindowsWebAppSlot) Attributes() windowsWebAppSlotAttributes {
	return windowsWebAppSlotAttributes{ref: terra.ReferenceResource(wwas)}
}

func (wwas *WindowsWebAppSlot) ImportState(av io.Reader) error {
	wwas.state = &windowsWebAppSlotState{}
	if err := json.NewDecoder(av).Decode(wwas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wwas.Type(), wwas.LocalName(), err)
	}
	return nil
}

func (wwas *WindowsWebAppSlot) State() (*windowsWebAppSlotState, bool) {
	return wwas.state, wwas.state != nil
}

func (wwas *WindowsWebAppSlot) StateMust() *windowsWebAppSlotState {
	if wwas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wwas.Type(), wwas.LocalName()))
	}
	return wwas.state
}

func (wwas *WindowsWebAppSlot) DependOn() terra.Reference {
	return terra.ReferenceResource(wwas)
}

type WindowsWebAppSlotArgs struct {
	// AppServiceId: string, required
	AppServiceId terra.StringValue `hcl:"app_service_id,attr" validate:"required"`
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// ClientAffinityEnabled: bool, optional
	ClientAffinityEnabled terra.BoolValue `hcl:"client_affinity_enabled,attr"`
	// ClientCertificateEnabled: bool, optional
	ClientCertificateEnabled terra.BoolValue `hcl:"client_certificate_enabled,attr"`
	// ClientCertificateExclusionPaths: string, optional
	ClientCertificateExclusionPaths terra.StringValue `hcl:"client_certificate_exclusion_paths,attr"`
	// ClientCertificateMode: string, optional
	ClientCertificateMode terra.StringValue `hcl:"client_certificate_mode,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultReferenceIdentityId: string, optional
	KeyVaultReferenceIdentityId terra.StringValue `hcl:"key_vault_reference_identity_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServicePlanId: string, optional
	ServicePlanId terra.StringValue `hcl:"service_plan_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// ZipDeployFile: string, optional
	ZipDeployFile terra.StringValue `hcl:"zip_deploy_file,attr"`
	// SiteCredential: min=0
	SiteCredential []windowswebappslot.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// AuthSettings: optional
	AuthSettings *windowswebappslot.AuthSettings `hcl:"auth_settings,block"`
	// AuthSettingsV2: optional
	AuthSettingsV2 *windowswebappslot.AuthSettingsV2 `hcl:"auth_settings_v2,block"`
	// Backup: optional
	Backup *windowswebappslot.Backup `hcl:"backup,block"`
	// ConnectionString: min=0
	ConnectionString []windowswebappslot.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *windowswebappslot.Identity `hcl:"identity,block"`
	// Logs: optional
	Logs *windowswebappslot.Logs `hcl:"logs,block"`
	// SiteConfig: required
	SiteConfig *windowswebappslot.SiteConfig `hcl:"site_config,block" validate:"required"`
	// StorageAccount: min=0
	StorageAccount []windowswebappslot.StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *windowswebappslot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that WindowsWebAppSlot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type windowsWebAppSlotAttributes struct {
	ref terra.Reference
}

func (wwas windowsWebAppSlotAttributes) AppServiceId() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("app_service_id"))
}

func (wwas windowsWebAppSlotAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwas.ref.Append("app_settings"))
}

func (wwas windowsWebAppSlotAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceBool(wwas.ref.Append("client_affinity_enabled"))
}

func (wwas windowsWebAppSlotAttributes) ClientCertificateEnabled() terra.BoolValue {
	return terra.ReferenceBool(wwas.ref.Append("client_certificate_enabled"))
}

func (wwas windowsWebAppSlotAttributes) ClientCertificateExclusionPaths() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("client_certificate_exclusion_paths"))
}

func (wwas windowsWebAppSlotAttributes) ClientCertificateMode() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("client_certificate_mode"))
}

func (wwas windowsWebAppSlotAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("custom_domain_verification_id"))
}

func (wwas windowsWebAppSlotAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("default_hostname"))
}

func (wwas windowsWebAppSlotAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(wwas.ref.Append("enabled"))
}

func (wwas windowsWebAppSlotAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(wwas.ref.Append("https_only"))
}

func (wwas windowsWebAppSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("id"))
}

func (wwas windowsWebAppSlotAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("key_vault_reference_identity_id"))
}

func (wwas windowsWebAppSlotAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("kind"))
}

func (wwas windowsWebAppSlotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("name"))
}

func (wwas windowsWebAppSlotAttributes) OutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](wwas.ref.Append("outbound_ip_address_list"))
}

func (wwas windowsWebAppSlotAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("outbound_ip_addresses"))
}

func (wwas windowsWebAppSlotAttributes) PossibleOutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](wwas.ref.Append("possible_outbound_ip_address_list"))
}

func (wwas windowsWebAppSlotAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("possible_outbound_ip_addresses"))
}

func (wwas windowsWebAppSlotAttributes) ServicePlanId() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("service_plan_id"))
}

func (wwas windowsWebAppSlotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwas.ref.Append("tags"))
}

func (wwas windowsWebAppSlotAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("virtual_network_subnet_id"))
}

func (wwas windowsWebAppSlotAttributes) ZipDeployFile() terra.StringValue {
	return terra.ReferenceString(wwas.ref.Append("zip_deploy_file"))
}

func (wwas windowsWebAppSlotAttributes) SiteCredential() terra.ListValue[windowswebappslot.SiteCredentialAttributes] {
	return terra.ReferenceList[windowswebappslot.SiteCredentialAttributes](wwas.ref.Append("site_credential"))
}

func (wwas windowsWebAppSlotAttributes) AuthSettings() terra.ListValue[windowswebappslot.AuthSettingsAttributes] {
	return terra.ReferenceList[windowswebappslot.AuthSettingsAttributes](wwas.ref.Append("auth_settings"))
}

func (wwas windowsWebAppSlotAttributes) AuthSettingsV2() terra.ListValue[windowswebappslot.AuthSettingsV2Attributes] {
	return terra.ReferenceList[windowswebappslot.AuthSettingsV2Attributes](wwas.ref.Append("auth_settings_v2"))
}

func (wwas windowsWebAppSlotAttributes) Backup() terra.ListValue[windowswebappslot.BackupAttributes] {
	return terra.ReferenceList[windowswebappslot.BackupAttributes](wwas.ref.Append("backup"))
}

func (wwas windowsWebAppSlotAttributes) ConnectionString() terra.SetValue[windowswebappslot.ConnectionStringAttributes] {
	return terra.ReferenceSet[windowswebappslot.ConnectionStringAttributes](wwas.ref.Append("connection_string"))
}

func (wwas windowsWebAppSlotAttributes) Identity() terra.ListValue[windowswebappslot.IdentityAttributes] {
	return terra.ReferenceList[windowswebappslot.IdentityAttributes](wwas.ref.Append("identity"))
}

func (wwas windowsWebAppSlotAttributes) Logs() terra.ListValue[windowswebappslot.LogsAttributes] {
	return terra.ReferenceList[windowswebappslot.LogsAttributes](wwas.ref.Append("logs"))
}

func (wwas windowsWebAppSlotAttributes) SiteConfig() terra.ListValue[windowswebappslot.SiteConfigAttributes] {
	return terra.ReferenceList[windowswebappslot.SiteConfigAttributes](wwas.ref.Append("site_config"))
}

func (wwas windowsWebAppSlotAttributes) StorageAccount() terra.SetValue[windowswebappslot.StorageAccountAttributes] {
	return terra.ReferenceSet[windowswebappslot.StorageAccountAttributes](wwas.ref.Append("storage_account"))
}

func (wwas windowsWebAppSlotAttributes) Timeouts() windowswebappslot.TimeoutsAttributes {
	return terra.ReferenceSingle[windowswebappslot.TimeoutsAttributes](wwas.ref.Append("timeouts"))
}

type windowsWebAppSlotState struct {
	AppServiceId                    string                                    `json:"app_service_id"`
	AppSettings                     map[string]string                         `json:"app_settings"`
	ClientAffinityEnabled           bool                                      `json:"client_affinity_enabled"`
	ClientCertificateEnabled        bool                                      `json:"client_certificate_enabled"`
	ClientCertificateExclusionPaths string                                    `json:"client_certificate_exclusion_paths"`
	ClientCertificateMode           string                                    `json:"client_certificate_mode"`
	CustomDomainVerificationId      string                                    `json:"custom_domain_verification_id"`
	DefaultHostname                 string                                    `json:"default_hostname"`
	Enabled                         bool                                      `json:"enabled"`
	HttpsOnly                       bool                                      `json:"https_only"`
	Id                              string                                    `json:"id"`
	KeyVaultReferenceIdentityId     string                                    `json:"key_vault_reference_identity_id"`
	Kind                            string                                    `json:"kind"`
	Name                            string                                    `json:"name"`
	OutboundIpAddressList           []string                                  `json:"outbound_ip_address_list"`
	OutboundIpAddresses             string                                    `json:"outbound_ip_addresses"`
	PossibleOutboundIpAddressList   []string                                  `json:"possible_outbound_ip_address_list"`
	PossibleOutboundIpAddresses     string                                    `json:"possible_outbound_ip_addresses"`
	ServicePlanId                   string                                    `json:"service_plan_id"`
	Tags                            map[string]string                         `json:"tags"`
	VirtualNetworkSubnetId          string                                    `json:"virtual_network_subnet_id"`
	ZipDeployFile                   string                                    `json:"zip_deploy_file"`
	SiteCredential                  []windowswebappslot.SiteCredentialState   `json:"site_credential"`
	AuthSettings                    []windowswebappslot.AuthSettingsState     `json:"auth_settings"`
	AuthSettingsV2                  []windowswebappslot.AuthSettingsV2State   `json:"auth_settings_v2"`
	Backup                          []windowswebappslot.BackupState           `json:"backup"`
	ConnectionString                []windowswebappslot.ConnectionStringState `json:"connection_string"`
	Identity                        []windowswebappslot.IdentityState         `json:"identity"`
	Logs                            []windowswebappslot.LogsState             `json:"logs"`
	SiteConfig                      []windowswebappslot.SiteConfigState       `json:"site_config"`
	StorageAccount                  []windowswebappslot.StorageAccountState   `json:"storage_account"`
	Timeouts                        *windowswebappslot.TimeoutsState          `json:"timeouts"`
}
