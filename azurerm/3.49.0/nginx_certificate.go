// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	nginxcertificate "github.com/golingon/terraproviders/azurerm/3.49.0/nginxcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNginxCertificate(name string, args NginxCertificateArgs) *NginxCertificate {
	return &NginxCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NginxCertificate)(nil)

type NginxCertificate struct {
	Name  string
	Args  NginxCertificateArgs
	state *nginxCertificateState
}

func (nc *NginxCertificate) Type() string {
	return "azurerm_nginx_certificate"
}

func (nc *NginxCertificate) LocalName() string {
	return nc.Name
}

func (nc *NginxCertificate) Configuration() interface{} {
	return nc.Args
}

func (nc *NginxCertificate) Attributes() nginxCertificateAttributes {
	return nginxCertificateAttributes{ref: terra.ReferenceResource(nc)}
}

func (nc *NginxCertificate) ImportState(av io.Reader) error {
	nc.state = &nginxCertificateState{}
	if err := json.NewDecoder(av).Decode(nc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nc.Type(), nc.LocalName(), err)
	}
	return nil
}

func (nc *NginxCertificate) State() (*nginxCertificateState, bool) {
	return nc.state, nc.state != nil
}

func (nc *NginxCertificate) StateMust() *nginxCertificateState {
	if nc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nc.Type(), nc.LocalName()))
	}
	return nc.state
}

func (nc *NginxCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(nc)
}

type NginxCertificateArgs struct {
	// CertificateVirtualPath: string, required
	CertificateVirtualPath terra.StringValue `hcl:"certificate_virtual_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultSecretId: string, required
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr" validate:"required"`
	// KeyVirtualPath: string, required
	KeyVirtualPath terra.StringValue `hcl:"key_virtual_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NginxDeploymentId: string, required
	NginxDeploymentId terra.StringValue `hcl:"nginx_deployment_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *nginxcertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NginxCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type nginxCertificateAttributes struct {
	ref terra.Reference
}

func (nc nginxCertificateAttributes) CertificateVirtualPath() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("certificate_virtual_path"))
}

func (nc nginxCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("id"))
}

func (nc nginxCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("key_vault_secret_id"))
}

func (nc nginxCertificateAttributes) KeyVirtualPath() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("key_virtual_path"))
}

func (nc nginxCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("name"))
}

func (nc nginxCertificateAttributes) NginxDeploymentId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("nginx_deployment_id"))
}

func (nc nginxCertificateAttributes) Timeouts() nginxcertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[nginxcertificate.TimeoutsAttributes](nc.ref.Append("timeouts"))
}

type nginxCertificateState struct {
	CertificateVirtualPath string                          `json:"certificate_virtual_path"`
	Id                     string                          `json:"id"`
	KeyVaultSecretId       string                          `json:"key_vault_secret_id"`
	KeyVirtualPath         string                          `json:"key_virtual_path"`
	Name                   string                          `json:"name"`
	NginxDeploymentId      string                          `json:"nginx_deployment_id"`
	Timeouts               *nginxcertificate.TimeoutsState `json:"timeouts"`
}
