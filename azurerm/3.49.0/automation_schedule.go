// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationschedule "github.com/golingon/terraproviders/azurerm/3.49.0/automationschedule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationSchedule(name string, args AutomationScheduleArgs) *AutomationSchedule {
	return &AutomationSchedule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationSchedule)(nil)

type AutomationSchedule struct {
	Name  string
	Args  AutomationScheduleArgs
	state *automationScheduleState
}

func (as *AutomationSchedule) Type() string {
	return "azurerm_automation_schedule"
}

func (as *AutomationSchedule) LocalName() string {
	return as.Name
}

func (as *AutomationSchedule) Configuration() interface{} {
	return as.Args
}

func (as *AutomationSchedule) Attributes() automationScheduleAttributes {
	return automationScheduleAttributes{ref: terra.ReferenceResource(as)}
}

func (as *AutomationSchedule) ImportState(av io.Reader) error {
	as.state = &automationScheduleState{}
	if err := json.NewDecoder(av).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

func (as *AutomationSchedule) State() (*automationScheduleState, bool) {
	return as.state, as.state != nil
}

func (as *AutomationSchedule) StateMust() *automationScheduleState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

func (as *AutomationSchedule) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

type AutomationScheduleArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExpiryTime: string, optional
	ExpiryTime terra.StringValue `hcl:"expiry_time,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// MonthDays: set of number, optional
	MonthDays terra.SetValue[terra.NumberValue] `hcl:"month_days,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// WeekDays: set of string, optional
	WeekDays terra.SetValue[terra.StringValue] `hcl:"week_days,attr"`
	// MonthlyOccurrence: min=0
	MonthlyOccurrence []automationschedule.MonthlyOccurrence `hcl:"monthly_occurrence,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *automationschedule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationSchedule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationScheduleAttributes struct {
	ref terra.Reference
}

func (as automationScheduleAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("automation_account_name"))
}

func (as automationScheduleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("description"))
}

func (as automationScheduleAttributes) ExpiryTime() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("expiry_time"))
}

func (as automationScheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("frequency"))
}

func (as automationScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("id"))
}

func (as automationScheduleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceNumber(as.ref.Append("interval"))
}

func (as automationScheduleAttributes) MonthDays() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceSet[terra.NumberValue](as.ref.Append("month_days"))
}

func (as automationScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("name"))
}

func (as automationScheduleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("resource_group_name"))
}

func (as automationScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("start_time"))
}

func (as automationScheduleAttributes) Timezone() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("timezone"))
}

func (as automationScheduleAttributes) WeekDays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](as.ref.Append("week_days"))
}

func (as automationScheduleAttributes) MonthlyOccurrence() terra.ListValue[automationschedule.MonthlyOccurrenceAttributes] {
	return terra.ReferenceList[automationschedule.MonthlyOccurrenceAttributes](as.ref.Append("monthly_occurrence"))
}

func (as automationScheduleAttributes) Timeouts() automationschedule.TimeoutsAttributes {
	return terra.ReferenceSingle[automationschedule.TimeoutsAttributes](as.ref.Append("timeouts"))
}

type automationScheduleState struct {
	AutomationAccountName string                                      `json:"automation_account_name"`
	Description           string                                      `json:"description"`
	ExpiryTime            string                                      `json:"expiry_time"`
	Frequency             string                                      `json:"frequency"`
	Id                    string                                      `json:"id"`
	Interval              float64                                     `json:"interval"`
	MonthDays             []float64                                   `json:"month_days"`
	Name                  string                                      `json:"name"`
	ResourceGroupName     string                                      `json:"resource_group_name"`
	StartTime             string                                      `json:"start_time"`
	Timezone              string                                      `json:"timezone"`
	WeekDays              []string                                    `json:"week_days"`
	MonthlyOccurrence     []automationschedule.MonthlyOccurrenceState `json:"monthly_occurrence"`
	Timeouts              *automationschedule.TimeoutsState           `json:"timeouts"`
}
