// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	relaynamespaceauthorizationrule "github.com/golingon/terraproviders/azurerm/3.49.0/relaynamespaceauthorizationrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRelayNamespaceAuthorizationRule creates a new instance of [RelayNamespaceAuthorizationRule].
func NewRelayNamespaceAuthorizationRule(name string, args RelayNamespaceAuthorizationRuleArgs) *RelayNamespaceAuthorizationRule {
	return &RelayNamespaceAuthorizationRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RelayNamespaceAuthorizationRule)(nil)

// RelayNamespaceAuthorizationRule represents the Terraform resource azurerm_relay_namespace_authorization_rule.
type RelayNamespaceAuthorizationRule struct {
	Name      string
	Args      RelayNamespaceAuthorizationRuleArgs
	state     *relayNamespaceAuthorizationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) Type() string {
	return "azurerm_relay_namespace_authorization_rule"
}

// LocalName returns the local name for [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) LocalName() string {
	return rnar.Name
}

// Configuration returns the configuration (args) for [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) Configuration() interface{} {
	return rnar.Args
}

// DependOn is used for other resources to depend on [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) DependOn() terra.Reference {
	return terra.ReferenceResource(rnar)
}

// Dependencies returns the list of resources [RelayNamespaceAuthorizationRule] depends_on.
func (rnar *RelayNamespaceAuthorizationRule) Dependencies() terra.Dependencies {
	return rnar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) LifecycleManagement() *terra.Lifecycle {
	return rnar.Lifecycle
}

// Attributes returns the attributes for [RelayNamespaceAuthorizationRule].
func (rnar *RelayNamespaceAuthorizationRule) Attributes() relayNamespaceAuthorizationRuleAttributes {
	return relayNamespaceAuthorizationRuleAttributes{ref: terra.ReferenceResource(rnar)}
}

// ImportState imports the given attribute values into [RelayNamespaceAuthorizationRule]'s state.
func (rnar *RelayNamespaceAuthorizationRule) ImportState(av io.Reader) error {
	rnar.state = &relayNamespaceAuthorizationRuleState{}
	if err := json.NewDecoder(av).Decode(rnar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rnar.Type(), rnar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RelayNamespaceAuthorizationRule] has state.
func (rnar *RelayNamespaceAuthorizationRule) State() (*relayNamespaceAuthorizationRuleState, bool) {
	return rnar.state, rnar.state != nil
}

// StateMust returns the state for [RelayNamespaceAuthorizationRule]. Panics if the state is nil.
func (rnar *RelayNamespaceAuthorizationRule) StateMust() *relayNamespaceAuthorizationRuleState {
	if rnar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rnar.Type(), rnar.LocalName()))
	}
	return rnar.state
}

// RelayNamespaceAuthorizationRuleArgs contains the configurations for azurerm_relay_namespace_authorization_rule.
type RelayNamespaceAuthorizationRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Listen: bool, optional
	Listen terra.BoolValue `hcl:"listen,attr"`
	// Manage: bool, optional
	Manage terra.BoolValue `hcl:"manage,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Send: bool, optional
	Send terra.BoolValue `hcl:"send,attr"`
	// Timeouts: optional
	Timeouts *relaynamespaceauthorizationrule.Timeouts `hcl:"timeouts,block"`
}
type relayNamespaceAuthorizationRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("id"))
}

// Listen returns a reference to field listen of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) Listen() terra.BoolValue {
	return terra.ReferenceAsBool(rnar.ref.Append("listen"))
}

// Manage returns a reference to field manage of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) Manage() terra.BoolValue {
	return terra.ReferenceAsBool(rnar.ref.Append("manage"))
}

// Name returns a reference to field name of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("name"))
}

// NamespaceName returns a reference to field namespace_name of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("namespace_name"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("primary_connection_string"))
}

// PrimaryKey returns a reference to field primary_key of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("primary_key"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("resource_group_name"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("secondary_connection_string"))
}

// SecondaryKey returns a reference to field secondary_key of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceAsString(rnar.ref.Append("secondary_key"))
}

// Send returns a reference to field send of azurerm_relay_namespace_authorization_rule.
func (rnar relayNamespaceAuthorizationRuleAttributes) Send() terra.BoolValue {
	return terra.ReferenceAsBool(rnar.ref.Append("send"))
}

func (rnar relayNamespaceAuthorizationRuleAttributes) Timeouts() relaynamespaceauthorizationrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[relaynamespaceauthorizationrule.TimeoutsAttributes](rnar.ref.Append("timeouts"))
}

type relayNamespaceAuthorizationRuleState struct {
	Id                        string                                         `json:"id"`
	Listen                    bool                                           `json:"listen"`
	Manage                    bool                                           `json:"manage"`
	Name                      string                                         `json:"name"`
	NamespaceName             string                                         `json:"namespace_name"`
	PrimaryConnectionString   string                                         `json:"primary_connection_string"`
	PrimaryKey                string                                         `json:"primary_key"`
	ResourceGroupName         string                                         `json:"resource_group_name"`
	SecondaryConnectionString string                                         `json:"secondary_connection_string"`
	SecondaryKey              string                                         `json:"secondary_key"`
	Send                      bool                                           `json:"send"`
	Timeouts                  *relaynamespaceauthorizationrule.TimeoutsState `json:"timeouts"`
}
