// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iotcentralapplicationnetworkruleset "github.com/golingon/terraproviders/azurerm/3.49.0/iotcentralapplicationnetworkruleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotcentralApplicationNetworkRuleSet(name string, args IotcentralApplicationNetworkRuleSetArgs) *IotcentralApplicationNetworkRuleSet {
	return &IotcentralApplicationNetworkRuleSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotcentralApplicationNetworkRuleSet)(nil)

type IotcentralApplicationNetworkRuleSet struct {
	Name  string
	Args  IotcentralApplicationNetworkRuleSetArgs
	state *iotcentralApplicationNetworkRuleSetState
}

func (ianrs *IotcentralApplicationNetworkRuleSet) Type() string {
	return "azurerm_iotcentral_application_network_rule_set"
}

func (ianrs *IotcentralApplicationNetworkRuleSet) LocalName() string {
	return ianrs.Name
}

func (ianrs *IotcentralApplicationNetworkRuleSet) Configuration() interface{} {
	return ianrs.Args
}

func (ianrs *IotcentralApplicationNetworkRuleSet) Attributes() iotcentralApplicationNetworkRuleSetAttributes {
	return iotcentralApplicationNetworkRuleSetAttributes{ref: terra.ReferenceResource(ianrs)}
}

func (ianrs *IotcentralApplicationNetworkRuleSet) ImportState(av io.Reader) error {
	ianrs.state = &iotcentralApplicationNetworkRuleSetState{}
	if err := json.NewDecoder(av).Decode(ianrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ianrs.Type(), ianrs.LocalName(), err)
	}
	return nil
}

func (ianrs *IotcentralApplicationNetworkRuleSet) State() (*iotcentralApplicationNetworkRuleSetState, bool) {
	return ianrs.state, ianrs.state != nil
}

func (ianrs *IotcentralApplicationNetworkRuleSet) StateMust() *iotcentralApplicationNetworkRuleSetState {
	if ianrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ianrs.Type(), ianrs.LocalName()))
	}
	return ianrs.state
}

func (ianrs *IotcentralApplicationNetworkRuleSet) DependOn() terra.Reference {
	return terra.ReferenceResource(ianrs)
}

type IotcentralApplicationNetworkRuleSetArgs struct {
	// ApplyToDevice: bool, optional
	ApplyToDevice terra.BoolValue `hcl:"apply_to_device,attr"`
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IotcentralApplicationId: string, required
	IotcentralApplicationId terra.StringValue `hcl:"iotcentral_application_id,attr" validate:"required"`
	// IpRule: min=0
	IpRule []iotcentralapplicationnetworkruleset.IpRule `hcl:"ip_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *iotcentralapplicationnetworkruleset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IotcentralApplicationNetworkRuleSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotcentralApplicationNetworkRuleSetAttributes struct {
	ref terra.Reference
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) ApplyToDevice() terra.BoolValue {
	return terra.ReferenceBool(ianrs.ref.Append("apply_to_device"))
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceString(ianrs.ref.Append("default_action"))
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ianrs.ref.Append("id"))
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) IotcentralApplicationId() terra.StringValue {
	return terra.ReferenceString(ianrs.ref.Append("iotcentral_application_id"))
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) IpRule() terra.ListValue[iotcentralapplicationnetworkruleset.IpRuleAttributes] {
	return terra.ReferenceList[iotcentralapplicationnetworkruleset.IpRuleAttributes](ianrs.ref.Append("ip_rule"))
}

func (ianrs iotcentralApplicationNetworkRuleSetAttributes) Timeouts() iotcentralapplicationnetworkruleset.TimeoutsAttributes {
	return terra.ReferenceSingle[iotcentralapplicationnetworkruleset.TimeoutsAttributes](ianrs.ref.Append("timeouts"))
}

type iotcentralApplicationNetworkRuleSetState struct {
	ApplyToDevice           bool                                               `json:"apply_to_device"`
	DefaultAction           string                                             `json:"default_action"`
	Id                      string                                             `json:"id"`
	IotcentralApplicationId string                                             `json:"iotcentral_application_id"`
	IpRule                  []iotcentralapplicationnetworkruleset.IpRuleState  `json:"ip_rule"`
	Timeouts                *iotcentralapplicationnetworkruleset.TimeoutsState `json:"timeouts"`
}
