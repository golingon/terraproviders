// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package virtualmachinescaleset

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BootDiagnostics struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// StorageUri: string, required
	StorageUri terra.StringValue `hcl:"storage_uri,attr" validate:"required"`
}

type Extension struct {
	// AutoUpgradeMinorVersion: bool, optional
	AutoUpgradeMinorVersion terra.BoolValue `hcl:"auto_upgrade_minor_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// ProvisionAfterExtensions: set of string, optional
	ProvisionAfterExtensions terra.SetValue[terra.StringValue] `hcl:"provision_after_extensions,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Settings: string, optional
	Settings terra.StringValue `hcl:"settings,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, required
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: list of string, optional
	IdentityIds terra.ListValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type NetworkProfile struct {
	// AcceleratedNetworking: bool, optional
	AcceleratedNetworking terra.BoolValue `hcl:"accelerated_networking,attr"`
	// IpForwarding: bool, optional
	IpForwarding terra.BoolValue `hcl:"ip_forwarding,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkSecurityGroupId: string, optional
	NetworkSecurityGroupId terra.StringValue `hcl:"network_security_group_id,attr"`
	// Primary: bool, required
	Primary terra.BoolValue `hcl:"primary,attr" validate:"required"`
	// DnsSettings: optional
	DnsSettings *DnsSettings `hcl:"dns_settings,block"`
	// IpConfiguration: min=1
	IpConfiguration []IpConfiguration `hcl:"ip_configuration,block" validate:"min=1"`
}

type DnsSettings struct {
	// DnsServers: list of string, required
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr" validate:"required"`
}

type IpConfiguration struct {
	// ApplicationGatewayBackendAddressPoolIds: set of string, optional
	ApplicationGatewayBackendAddressPoolIds terra.SetValue[terra.StringValue] `hcl:"application_gateway_backend_address_pool_ids,attr"`
	// ApplicationSecurityGroupIds: set of string, optional
	ApplicationSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"application_security_group_ids,attr"`
	// LoadBalancerBackendAddressPoolIds: set of string, optional
	LoadBalancerBackendAddressPoolIds terra.SetValue[terra.StringValue] `hcl:"load_balancer_backend_address_pool_ids,attr"`
	// LoadBalancerInboundNatRulesIds: set of string, optional
	LoadBalancerInboundNatRulesIds terra.SetValue[terra.StringValue] `hcl:"load_balancer_inbound_nat_rules_ids,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Primary: bool, required
	Primary terra.BoolValue `hcl:"primary,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// PublicIpAddressConfiguration: optional
	PublicIpAddressConfiguration *PublicIpAddressConfiguration `hcl:"public_ip_address_configuration,block"`
}

type PublicIpAddressConfiguration struct {
	// DomainNameLabel: string, required
	DomainNameLabel terra.StringValue `hcl:"domain_name_label,attr" validate:"required"`
	// IdleTimeout: number, required
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type OsProfile struct {
	// AdminPassword: string, optional
	AdminPassword terra.StringValue `hcl:"admin_password,attr"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// ComputerNamePrefix: string, required
	ComputerNamePrefix terra.StringValue `hcl:"computer_name_prefix,attr" validate:"required"`
	// CustomData: string, optional
	CustomData terra.StringValue `hcl:"custom_data,attr"`
}

type OsProfileLinuxConfig struct {
	// DisablePasswordAuthentication: bool, optional
	DisablePasswordAuthentication terra.BoolValue `hcl:"disable_password_authentication,attr"`
	// SshKeys: min=0
	SshKeys []SshKeys `hcl:"ssh_keys,block" validate:"min=0"`
}

type SshKeys struct {
	// KeyData: string, optional
	KeyData terra.StringValue `hcl:"key_data,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type OsProfileSecrets struct {
	// SourceVaultId: string, required
	SourceVaultId terra.StringValue `hcl:"source_vault_id,attr" validate:"required"`
	// VaultCertificates: min=0
	VaultCertificates []VaultCertificates `hcl:"vault_certificates,block" validate:"min=0"`
}

type VaultCertificates struct {
	// CertificateStore: string, optional
	CertificateStore terra.StringValue `hcl:"certificate_store,attr"`
	// CertificateUrl: string, required
	CertificateUrl terra.StringValue `hcl:"certificate_url,attr" validate:"required"`
}

type OsProfileWindowsConfig struct {
	// EnableAutomaticUpgrades: bool, optional
	EnableAutomaticUpgrades terra.BoolValue `hcl:"enable_automatic_upgrades,attr"`
	// ProvisionVmAgent: bool, optional
	ProvisionVmAgent terra.BoolValue `hcl:"provision_vm_agent,attr"`
	// AdditionalUnattendConfig: min=0
	AdditionalUnattendConfig []AdditionalUnattendConfig `hcl:"additional_unattend_config,block" validate:"min=0"`
	// Winrm: min=0
	Winrm []Winrm `hcl:"winrm,block" validate:"min=0"`
}

type AdditionalUnattendConfig struct {
	// Component: string, required
	Component terra.StringValue `hcl:"component,attr" validate:"required"`
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Pass: string, required
	Pass terra.StringValue `hcl:"pass,attr" validate:"required"`
	// SettingName: string, required
	SettingName terra.StringValue `hcl:"setting_name,attr" validate:"required"`
}

type Winrm struct {
	// CertificateUrl: string, optional
	CertificateUrl terra.StringValue `hcl:"certificate_url,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Plan struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Product: string, required
	Product terra.StringValue `hcl:"product,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
}

type RollingUpgradePolicy struct {
	// MaxBatchInstancePercent: number, optional
	MaxBatchInstancePercent terra.NumberValue `hcl:"max_batch_instance_percent,attr"`
	// MaxUnhealthyInstancePercent: number, optional
	MaxUnhealthyInstancePercent terra.NumberValue `hcl:"max_unhealthy_instance_percent,attr"`
	// MaxUnhealthyUpgradedInstancePercent: number, optional
	MaxUnhealthyUpgradedInstancePercent terra.NumberValue `hcl:"max_unhealthy_upgraded_instance_percent,attr"`
	// PauseTimeBetweenBatches: string, optional
	PauseTimeBetweenBatches terra.StringValue `hcl:"pause_time_between_batches,attr"`
}

type Sku struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
}

type StorageProfileDataDisk struct {
	// Caching: string, optional
	Caching terra.StringValue `hcl:"caching,attr"`
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Lun: number, required
	Lun terra.NumberValue `hcl:"lun,attr" validate:"required"`
	// ManagedDiskType: string, optional
	ManagedDiskType terra.StringValue `hcl:"managed_disk_type,attr"`
}

type StorageProfileImageReference struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Offer: string, optional
	Offer terra.StringValue `hcl:"offer,attr"`
	// Publisher: string, optional
	Publisher terra.StringValue `hcl:"publisher,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type StorageProfileOsDisk struct {
	// Caching: string, optional
	Caching terra.StringValue `hcl:"caching,attr"`
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// ManagedDiskType: string, optional
	ManagedDiskType terra.StringValue `hcl:"managed_disk_type,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// VhdContainers: set of string, optional
	VhdContainers terra.SetValue[terra.StringValue] `hcl:"vhd_containers,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BootDiagnosticsAttributes struct {
	ref terra.Reference
}

func (bd BootDiagnosticsAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd BootDiagnosticsAttributes) InternalWithRef(ref terra.Reference) BootDiagnosticsAttributes {
	return BootDiagnosticsAttributes{ref: ref}
}

func (bd BootDiagnosticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd BootDiagnosticsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bd.ref.Append("enabled"))
}

func (bd BootDiagnosticsAttributes) StorageUri() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("storage_uri"))
}

type ExtensionAttributes struct {
	ref terra.Reference
}

func (e ExtensionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtensionAttributes) InternalWithRef(ref terra.Reference) ExtensionAttributes {
	return ExtensionAttributes{ref: ref}
}

func (e ExtensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtensionAttributes) AutoUpgradeMinorVersion() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("auto_upgrade_minor_version"))
}

func (e ExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ExtensionAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protected_settings"))
}

func (e ExtensionAttributes) ProvisionAfterExtensions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("provision_after_extensions"))
}

func (e ExtensionAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("publisher"))
}

func (e ExtensionAttributes) Settings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("settings"))
}

func (e ExtensionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e ExtensionAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type_handler_version"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type NetworkProfileAttributes struct {
	ref terra.Reference
}

func (np NetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkProfileAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAttributes {
	return NetworkProfileAttributes{ref: ref}
}

func (np NetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkProfileAttributes) AcceleratedNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(np.ref.Append("accelerated_networking"))
}

func (np NetworkProfileAttributes) IpForwarding() terra.BoolValue {
	return terra.ReferenceAsBool(np.ref.Append("ip_forwarding"))
}

func (np NetworkProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("name"))
}

func (np NetworkProfileAttributes) NetworkSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_security_group_id"))
}

func (np NetworkProfileAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(np.ref.Append("primary"))
}

func (np NetworkProfileAttributes) DnsSettings() terra.ListValue[DnsSettingsAttributes] {
	return terra.ReferenceAsList[DnsSettingsAttributes](np.ref.Append("dns_settings"))
}

func (np NetworkProfileAttributes) IpConfiguration() terra.ListValue[IpConfigurationAttributes] {
	return terra.ReferenceAsList[IpConfigurationAttributes](np.ref.Append("ip_configuration"))
}

type DnsSettingsAttributes struct {
	ref terra.Reference
}

func (ds DnsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DnsSettingsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsAttributes {
	return DnsSettingsAttributes{ref: ref}
}

func (ds DnsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DnsSettingsAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("dns_servers"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) ApplicationGatewayBackendAddressPoolIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("application_gateway_backend_address_pool_ids"))
}

func (ic IpConfigurationAttributes) ApplicationSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("application_security_group_ids"))
}

func (ic IpConfigurationAttributes) LoadBalancerBackendAddressPoolIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("load_balancer_backend_address_pool_ids"))
}

func (ic IpConfigurationAttributes) LoadBalancerInboundNatRulesIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("load_balancer_inbound_nat_rules_ids"))
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("primary"))
}

func (ic IpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

func (ic IpConfigurationAttributes) PublicIpAddressConfiguration() terra.ListValue[PublicIpAddressConfigurationAttributes] {
	return terra.ReferenceAsList[PublicIpAddressConfigurationAttributes](ic.ref.Append("public_ip_address_configuration"))
}

type PublicIpAddressConfigurationAttributes struct {
	ref terra.Reference
}

func (piac PublicIpAddressConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return piac.ref, nil
}

func (piac PublicIpAddressConfigurationAttributes) InternalWithRef(ref terra.Reference) PublicIpAddressConfigurationAttributes {
	return PublicIpAddressConfigurationAttributes{ref: ref}
}

func (piac PublicIpAddressConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return piac.ref.InternalTokens()
}

func (piac PublicIpAddressConfigurationAttributes) DomainNameLabel() terra.StringValue {
	return terra.ReferenceAsString(piac.ref.Append("domain_name_label"))
}

func (piac PublicIpAddressConfigurationAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(piac.ref.Append("idle_timeout"))
}

func (piac PublicIpAddressConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(piac.ref.Append("name"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_password"))
}

func (op OsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op OsProfileAttributes) ComputerNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("computer_name_prefix"))
}

func (op OsProfileAttributes) CustomData() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("custom_data"))
}

type OsProfileLinuxConfigAttributes struct {
	ref terra.Reference
}

func (oplc OsProfileLinuxConfigAttributes) InternalRef() (terra.Reference, error) {
	return oplc.ref, nil
}

func (oplc OsProfileLinuxConfigAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigAttributes {
	return OsProfileLinuxConfigAttributes{ref: ref}
}

func (oplc OsProfileLinuxConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oplc.ref.InternalTokens()
}

func (oplc OsProfileLinuxConfigAttributes) DisablePasswordAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(oplc.ref.Append("disable_password_authentication"))
}

func (oplc OsProfileLinuxConfigAttributes) SshKeys() terra.ListValue[SshKeysAttributes] {
	return terra.ReferenceAsList[SshKeysAttributes](oplc.ref.Append("ssh_keys"))
}

type SshKeysAttributes struct {
	ref terra.Reference
}

func (sk SshKeysAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk SshKeysAttributes) InternalWithRef(ref terra.Reference) SshKeysAttributes {
	return SshKeysAttributes{ref: ref}
}

func (sk SshKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk SshKeysAttributes) KeyData() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("key_data"))
}

func (sk SshKeysAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("path"))
}

type OsProfileSecretsAttributes struct {
	ref terra.Reference
}

func (ops OsProfileSecretsAttributes) InternalRef() (terra.Reference, error) {
	return ops.ref, nil
}

func (ops OsProfileSecretsAttributes) InternalWithRef(ref terra.Reference) OsProfileSecretsAttributes {
	return OsProfileSecretsAttributes{ref: ref}
}

func (ops OsProfileSecretsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ops.ref.InternalTokens()
}

func (ops OsProfileSecretsAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("source_vault_id"))
}

func (ops OsProfileSecretsAttributes) VaultCertificates() terra.ListValue[VaultCertificatesAttributes] {
	return terra.ReferenceAsList[VaultCertificatesAttributes](ops.ref.Append("vault_certificates"))
}

type VaultCertificatesAttributes struct {
	ref terra.Reference
}

func (vc VaultCertificatesAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VaultCertificatesAttributes) InternalWithRef(ref terra.Reference) VaultCertificatesAttributes {
	return VaultCertificatesAttributes{ref: ref}
}

func (vc VaultCertificatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VaultCertificatesAttributes) CertificateStore() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("certificate_store"))
}

func (vc VaultCertificatesAttributes) CertificateUrl() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("certificate_url"))
}

type OsProfileWindowsConfigAttributes struct {
	ref terra.Reference
}

func (opwc OsProfileWindowsConfigAttributes) InternalRef() (terra.Reference, error) {
	return opwc.ref, nil
}

func (opwc OsProfileWindowsConfigAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigAttributes {
	return OsProfileWindowsConfigAttributes{ref: ref}
}

func (opwc OsProfileWindowsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return opwc.ref.InternalTokens()
}

func (opwc OsProfileWindowsConfigAttributes) EnableAutomaticUpgrades() terra.BoolValue {
	return terra.ReferenceAsBool(opwc.ref.Append("enable_automatic_upgrades"))
}

func (opwc OsProfileWindowsConfigAttributes) ProvisionVmAgent() terra.BoolValue {
	return terra.ReferenceAsBool(opwc.ref.Append("provision_vm_agent"))
}

func (opwc OsProfileWindowsConfigAttributes) AdditionalUnattendConfig() terra.ListValue[AdditionalUnattendConfigAttributes] {
	return terra.ReferenceAsList[AdditionalUnattendConfigAttributes](opwc.ref.Append("additional_unattend_config"))
}

func (opwc OsProfileWindowsConfigAttributes) Winrm() terra.ListValue[WinrmAttributes] {
	return terra.ReferenceAsList[WinrmAttributes](opwc.ref.Append("winrm"))
}

type AdditionalUnattendConfigAttributes struct {
	ref terra.Reference
}

func (auc AdditionalUnattendConfigAttributes) InternalRef() (terra.Reference, error) {
	return auc.ref, nil
}

func (auc AdditionalUnattendConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalUnattendConfigAttributes {
	return AdditionalUnattendConfigAttributes{ref: ref}
}

func (auc AdditionalUnattendConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return auc.ref.InternalTokens()
}

func (auc AdditionalUnattendConfigAttributes) Component() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("component"))
}

func (auc AdditionalUnattendConfigAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("content"))
}

func (auc AdditionalUnattendConfigAttributes) Pass() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("pass"))
}

func (auc AdditionalUnattendConfigAttributes) SettingName() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("setting_name"))
}

type WinrmAttributes struct {
	ref terra.Reference
}

func (w WinrmAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WinrmAttributes) InternalWithRef(ref terra.Reference) WinrmAttributes {
	return WinrmAttributes{ref: ref}
}

func (w WinrmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WinrmAttributes) CertificateUrl() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("certificate_url"))
}

func (w WinrmAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("protocol"))
}

type PlanAttributes struct {
	ref terra.Reference
}

func (p PlanAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlanAttributes) InternalWithRef(ref terra.Reference) PlanAttributes {
	return PlanAttributes{ref: ref}
}

func (p PlanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PlanAttributes) Product() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("product"))
}

func (p PlanAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("publisher"))
}

type RollingUpgradePolicyAttributes struct {
	ref terra.Reference
}

func (rup RollingUpgradePolicyAttributes) InternalRef() (terra.Reference, error) {
	return rup.ref, nil
}

func (rup RollingUpgradePolicyAttributes) InternalWithRef(ref terra.Reference) RollingUpgradePolicyAttributes {
	return RollingUpgradePolicyAttributes{ref: ref}
}

func (rup RollingUpgradePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rup.ref.InternalTokens()
}

func (rup RollingUpgradePolicyAttributes) MaxBatchInstancePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(rup.ref.Append("max_batch_instance_percent"))
}

func (rup RollingUpgradePolicyAttributes) MaxUnhealthyInstancePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(rup.ref.Append("max_unhealthy_instance_percent"))
}

func (rup RollingUpgradePolicyAttributes) MaxUnhealthyUpgradedInstancePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(rup.ref.Append("max_unhealthy_upgraded_instance_percent"))
}

func (rup RollingUpgradePolicyAttributes) PauseTimeBetweenBatches() terra.StringValue {
	return terra.ReferenceAsString(rup.ref.Append("pause_time_between_batches"))
}

type SkuAttributes struct {
	ref terra.Reference
}

func (s SkuAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SkuAttributes) InternalWithRef(ref terra.Reference) SkuAttributes {
	return SkuAttributes{ref: ref}
}

func (s SkuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("capacity"))
}

func (s SkuAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SkuAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

type StorageProfileDataDiskAttributes struct {
	ref terra.Reference
}

func (spdd StorageProfileDataDiskAttributes) InternalRef() (terra.Reference, error) {
	return spdd.ref, nil
}

func (spdd StorageProfileDataDiskAttributes) InternalWithRef(ref terra.Reference) StorageProfileDataDiskAttributes {
	return StorageProfileDataDiskAttributes{ref: ref}
}

func (spdd StorageProfileDataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spdd.ref.InternalTokens()
}

func (spdd StorageProfileDataDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(spdd.ref.Append("caching"))
}

func (spdd StorageProfileDataDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(spdd.ref.Append("create_option"))
}

func (spdd StorageProfileDataDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(spdd.ref.Append("disk_size_gb"))
}

func (spdd StorageProfileDataDiskAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(spdd.ref.Append("lun"))
}

func (spdd StorageProfileDataDiskAttributes) ManagedDiskType() terra.StringValue {
	return terra.ReferenceAsString(spdd.ref.Append("managed_disk_type"))
}

type StorageProfileImageReferenceAttributes struct {
	ref terra.Reference
}

func (spir StorageProfileImageReferenceAttributes) InternalRef() (terra.Reference, error) {
	return spir.ref, nil
}

func (spir StorageProfileImageReferenceAttributes) InternalWithRef(ref terra.Reference) StorageProfileImageReferenceAttributes {
	return StorageProfileImageReferenceAttributes{ref: ref}
}

func (spir StorageProfileImageReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spir.ref.InternalTokens()
}

func (spir StorageProfileImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(spir.ref.Append("id"))
}

func (spir StorageProfileImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(spir.ref.Append("offer"))
}

func (spir StorageProfileImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(spir.ref.Append("publisher"))
}

func (spir StorageProfileImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(spir.ref.Append("sku"))
}

func (spir StorageProfileImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(spir.ref.Append("version"))
}

type StorageProfileOsDiskAttributes struct {
	ref terra.Reference
}

func (spod StorageProfileOsDiskAttributes) InternalRef() (terra.Reference, error) {
	return spod.ref, nil
}

func (spod StorageProfileOsDiskAttributes) InternalWithRef(ref terra.Reference) StorageProfileOsDiskAttributes {
	return StorageProfileOsDiskAttributes{ref: ref}
}

func (spod StorageProfileOsDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spod.ref.InternalTokens()
}

func (spod StorageProfileOsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("caching"))
}

func (spod StorageProfileOsDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("create_option"))
}

func (spod StorageProfileOsDiskAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("image"))
}

func (spod StorageProfileOsDiskAttributes) ManagedDiskType() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("managed_disk_type"))
}

func (spod StorageProfileOsDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("name"))
}

func (spod StorageProfileOsDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(spod.ref.Append("os_type"))
}

func (spod StorageProfileOsDiskAttributes) VhdContainers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](spod.ref.Append("vhd_containers"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BootDiagnosticsState struct {
	Enabled    bool   `json:"enabled"`
	StorageUri string `json:"storage_uri"`
}

type ExtensionState struct {
	AutoUpgradeMinorVersion  bool     `json:"auto_upgrade_minor_version"`
	Name                     string   `json:"name"`
	ProtectedSettings        string   `json:"protected_settings"`
	ProvisionAfterExtensions []string `json:"provision_after_extensions"`
	Publisher                string   `json:"publisher"`
	Settings                 string   `json:"settings"`
	Type                     string   `json:"type"`
	TypeHandlerVersion       string   `json:"type_handler_version"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	Type        string   `json:"type"`
}

type NetworkProfileState struct {
	AcceleratedNetworking  bool                   `json:"accelerated_networking"`
	IpForwarding           bool                   `json:"ip_forwarding"`
	Name                   string                 `json:"name"`
	NetworkSecurityGroupId string                 `json:"network_security_group_id"`
	Primary                bool                   `json:"primary"`
	DnsSettings            []DnsSettingsState     `json:"dns_settings"`
	IpConfiguration        []IpConfigurationState `json:"ip_configuration"`
}

type DnsSettingsState struct {
	DnsServers []string `json:"dns_servers"`
}

type IpConfigurationState struct {
	ApplicationGatewayBackendAddressPoolIds []string                            `json:"application_gateway_backend_address_pool_ids"`
	ApplicationSecurityGroupIds             []string                            `json:"application_security_group_ids"`
	LoadBalancerBackendAddressPoolIds       []string                            `json:"load_balancer_backend_address_pool_ids"`
	LoadBalancerInboundNatRulesIds          []string                            `json:"load_balancer_inbound_nat_rules_ids"`
	Name                                    string                              `json:"name"`
	Primary                                 bool                                `json:"primary"`
	SubnetId                                string                              `json:"subnet_id"`
	PublicIpAddressConfiguration            []PublicIpAddressConfigurationState `json:"public_ip_address_configuration"`
}

type PublicIpAddressConfigurationState struct {
	DomainNameLabel string  `json:"domain_name_label"`
	IdleTimeout     float64 `json:"idle_timeout"`
	Name            string  `json:"name"`
}

type OsProfileState struct {
	AdminPassword      string `json:"admin_password"`
	AdminUsername      string `json:"admin_username"`
	ComputerNamePrefix string `json:"computer_name_prefix"`
	CustomData         string `json:"custom_data"`
}

type OsProfileLinuxConfigState struct {
	DisablePasswordAuthentication bool           `json:"disable_password_authentication"`
	SshKeys                       []SshKeysState `json:"ssh_keys"`
}

type SshKeysState struct {
	KeyData string `json:"key_data"`
	Path    string `json:"path"`
}

type OsProfileSecretsState struct {
	SourceVaultId     string                   `json:"source_vault_id"`
	VaultCertificates []VaultCertificatesState `json:"vault_certificates"`
}

type VaultCertificatesState struct {
	CertificateStore string `json:"certificate_store"`
	CertificateUrl   string `json:"certificate_url"`
}

type OsProfileWindowsConfigState struct {
	EnableAutomaticUpgrades  bool                            `json:"enable_automatic_upgrades"`
	ProvisionVmAgent         bool                            `json:"provision_vm_agent"`
	AdditionalUnattendConfig []AdditionalUnattendConfigState `json:"additional_unattend_config"`
	Winrm                    []WinrmState                    `json:"winrm"`
}

type AdditionalUnattendConfigState struct {
	Component   string `json:"component"`
	Content     string `json:"content"`
	Pass        string `json:"pass"`
	SettingName string `json:"setting_name"`
}

type WinrmState struct {
	CertificateUrl string `json:"certificate_url"`
	Protocol       string `json:"protocol"`
}

type PlanState struct {
	Name      string `json:"name"`
	Product   string `json:"product"`
	Publisher string `json:"publisher"`
}

type RollingUpgradePolicyState struct {
	MaxBatchInstancePercent             float64 `json:"max_batch_instance_percent"`
	MaxUnhealthyInstancePercent         float64 `json:"max_unhealthy_instance_percent"`
	MaxUnhealthyUpgradedInstancePercent float64 `json:"max_unhealthy_upgraded_instance_percent"`
	PauseTimeBetweenBatches             string  `json:"pause_time_between_batches"`
}

type SkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
	Tier     string  `json:"tier"`
}

type StorageProfileDataDiskState struct {
	Caching         string  `json:"caching"`
	CreateOption    string  `json:"create_option"`
	DiskSizeGb      float64 `json:"disk_size_gb"`
	Lun             float64 `json:"lun"`
	ManagedDiskType string  `json:"managed_disk_type"`
}

type StorageProfileImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type StorageProfileOsDiskState struct {
	Caching         string   `json:"caching"`
	CreateOption    string   `json:"create_option"`
	Image           string   `json:"image"`
	ManagedDiskType string   `json:"managed_disk_type"`
	Name            string   `json:"name"`
	OsType          string   `json:"os_type"`
	VhdContainers   []string `json:"vhd_containers"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
