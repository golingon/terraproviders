// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	expressroutecircuitauthorization "github.com/golingon/terraproviders/azurerm/3.49.0/expressroutecircuitauthorization"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewExpressRouteCircuitAuthorization(name string, args ExpressRouteCircuitAuthorizationArgs) *ExpressRouteCircuitAuthorization {
	return &ExpressRouteCircuitAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ExpressRouteCircuitAuthorization)(nil)

type ExpressRouteCircuitAuthorization struct {
	Name  string
	Args  ExpressRouteCircuitAuthorizationArgs
	state *expressRouteCircuitAuthorizationState
}

func (erca *ExpressRouteCircuitAuthorization) Type() string {
	return "azurerm_express_route_circuit_authorization"
}

func (erca *ExpressRouteCircuitAuthorization) LocalName() string {
	return erca.Name
}

func (erca *ExpressRouteCircuitAuthorization) Configuration() interface{} {
	return erca.Args
}

func (erca *ExpressRouteCircuitAuthorization) Attributes() expressRouteCircuitAuthorizationAttributes {
	return expressRouteCircuitAuthorizationAttributes{ref: terra.ReferenceResource(erca)}
}

func (erca *ExpressRouteCircuitAuthorization) ImportState(av io.Reader) error {
	erca.state = &expressRouteCircuitAuthorizationState{}
	if err := json.NewDecoder(av).Decode(erca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erca.Type(), erca.LocalName(), err)
	}
	return nil
}

func (erca *ExpressRouteCircuitAuthorization) State() (*expressRouteCircuitAuthorizationState, bool) {
	return erca.state, erca.state != nil
}

func (erca *ExpressRouteCircuitAuthorization) StateMust() *expressRouteCircuitAuthorizationState {
	if erca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erca.Type(), erca.LocalName()))
	}
	return erca.state
}

func (erca *ExpressRouteCircuitAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(erca)
}

type ExpressRouteCircuitAuthorizationArgs struct {
	// ExpressRouteCircuitName: string, required
	ExpressRouteCircuitName terra.StringValue `hcl:"express_route_circuit_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *expressroutecircuitauthorization.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ExpressRouteCircuitAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type expressRouteCircuitAuthorizationAttributes struct {
	ref terra.Reference
}

func (erca expressRouteCircuitAuthorizationAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("authorization_key"))
}

func (erca expressRouteCircuitAuthorizationAttributes) AuthorizationUseStatus() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("authorization_use_status"))
}

func (erca expressRouteCircuitAuthorizationAttributes) ExpressRouteCircuitName() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("express_route_circuit_name"))
}

func (erca expressRouteCircuitAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("id"))
}

func (erca expressRouteCircuitAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("name"))
}

func (erca expressRouteCircuitAuthorizationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(erca.ref.Append("resource_group_name"))
}

func (erca expressRouteCircuitAuthorizationAttributes) Timeouts() expressroutecircuitauthorization.TimeoutsAttributes {
	return terra.ReferenceSingle[expressroutecircuitauthorization.TimeoutsAttributes](erca.ref.Append("timeouts"))
}

type expressRouteCircuitAuthorizationState struct {
	AuthorizationKey        string                                          `json:"authorization_key"`
	AuthorizationUseStatus  string                                          `json:"authorization_use_status"`
	ExpressRouteCircuitName string                                          `json:"express_route_circuit_name"`
	Id                      string                                          `json:"id"`
	Name                    string                                          `json:"name"`
	ResourceGroupName       string                                          `json:"resource_group_name"`
	Timeouts                *expressroutecircuitauthorization.TimeoutsState `json:"timeouts"`
}
