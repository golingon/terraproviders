// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationconnection "github.com/golingon/terraproviders/azurerm/3.49.0/automationconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationConnection(name string, args AutomationConnectionArgs) *AutomationConnection {
	return &AutomationConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationConnection)(nil)

type AutomationConnection struct {
	Name  string
	Args  AutomationConnectionArgs
	state *automationConnectionState
}

func (ac *AutomationConnection) Type() string {
	return "azurerm_automation_connection"
}

func (ac *AutomationConnection) LocalName() string {
	return ac.Name
}

func (ac *AutomationConnection) Configuration() interface{} {
	return ac.Args
}

func (ac *AutomationConnection) Attributes() automationConnectionAttributes {
	return automationConnectionAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *AutomationConnection) ImportState(av io.Reader) error {
	ac.state = &automationConnectionState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *AutomationConnection) State() (*automationConnectionState, bool) {
	return ac.state, ac.state != nil
}

func (ac *AutomationConnection) StateMust() *automationConnectionState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *AutomationConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type AutomationConnectionArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Values: map of string, required
	Values terra.MapValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *automationconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationConnectionAttributes struct {
	ref terra.Reference
}

func (ac automationConnectionAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("automation_account_name"))
}

func (ac automationConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("description"))
}

func (ac automationConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac automationConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("name"))
}

func (ac automationConnectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("resource_group_name"))
}

func (ac automationConnectionAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("type"))
}

func (ac automationConnectionAttributes) Values() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("values"))
}

func (ac automationConnectionAttributes) Timeouts() automationconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[automationconnection.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type automationConnectionState struct {
	AutomationAccountName string                              `json:"automation_account_name"`
	Description           string                              `json:"description"`
	Id                    string                              `json:"id"`
	Name                  string                              `json:"name"`
	ResourceGroupName     string                              `json:"resource_group_name"`
	Type                  string                              `json:"type"`
	Values                map[string]string                   `json:"values"`
	Timeouts              *automationconnection.TimeoutsState `json:"timeouts"`
}
