// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datamaintenanceconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type InstallPatches struct {
	// Linux: min=0
	Linux []Linux `hcl:"linux,block" validate:"min=0"`
	// Windows: min=0
	Windows []Windows `hcl:"windows,block" validate:"min=0"`
}

type Linux struct{}

type Windows struct{}

type Window struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type InstallPatchesAttributes struct {
	ref terra.Reference
}

func (ip InstallPatchesAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip InstallPatchesAttributes) InternalWithRef(ref terra.Reference) InstallPatchesAttributes {
	return InstallPatchesAttributes{ref: ref}
}

func (ip InstallPatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip InstallPatchesAttributes) Reboot() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("reboot"))
}

func (ip InstallPatchesAttributes) Linux() terra.ListValue[LinuxAttributes] {
	return terra.ReferenceAsList[LinuxAttributes](ip.ref.Append("linux"))
}

func (ip InstallPatchesAttributes) Windows() terra.ListValue[WindowsAttributes] {
	return terra.ReferenceAsList[WindowsAttributes](ip.ref.Append("windows"))
}

type LinuxAttributes struct {
	ref terra.Reference
}

func (l LinuxAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LinuxAttributes) InternalWithRef(ref terra.Reference) LinuxAttributes {
	return LinuxAttributes{ref: ref}
}

func (l LinuxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LinuxAttributes) ClassificationsToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("classifications_to_include"))
}

func (l LinuxAttributes) PackageNamesMaskToExclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("package_names_mask_to_exclude"))
}

func (l LinuxAttributes) PackageNamesMaskToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("package_names_mask_to_include"))
}

type WindowsAttributes struct {
	ref terra.Reference
}

func (w WindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WindowsAttributes) InternalWithRef(ref terra.Reference) WindowsAttributes {
	return WindowsAttributes{ref: ref}
}

func (w WindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WindowsAttributes) ClassificationsToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("classifications_to_include"))
}

func (w WindowsAttributes) KbNumbersToExclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("kb_numbers_to_exclude"))
}

func (w WindowsAttributes) KbNumbersToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("kb_numbers_to_include"))
}

type WindowAttributes struct {
	ref terra.Reference
}

func (w WindowAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WindowAttributes) InternalWithRef(ref terra.Reference) WindowAttributes {
	return WindowAttributes{ref: ref}
}

func (w WindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("duration"))
}

func (w WindowAttributes) ExpirationDateTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("expiration_date_time"))
}

func (w WindowAttributes) RecurEvery() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("recur_every"))
}

func (w WindowAttributes) StartDateTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("start_date_time"))
}

func (w WindowAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("time_zone"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type InstallPatchesState struct {
	Reboot  string         `json:"reboot"`
	Linux   []LinuxState   `json:"linux"`
	Windows []WindowsState `json:"windows"`
}

type LinuxState struct {
	ClassificationsToInclude  []string `json:"classifications_to_include"`
	PackageNamesMaskToExclude []string `json:"package_names_mask_to_exclude"`
	PackageNamesMaskToInclude []string `json:"package_names_mask_to_include"`
}

type WindowsState struct {
	ClassificationsToInclude []string `json:"classifications_to_include"`
	KbNumbersToExclude       []string `json:"kb_numbers_to_exclude"`
	KbNumbersToInclude       []string `json:"kb_numbers_to_include"`
}

type WindowState struct {
	Duration           string `json:"duration"`
	ExpirationDateTime string `json:"expiration_date_time"`
	RecurEvery         string `json:"recur_every"`
	StartDateTime      string `json:"start_date_time"`
	TimeZone           string `json:"time_zone"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
