// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	firewallpolicy "github.com/golingon/terraproviders/azurerm/3.49.0/firewallpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirewallPolicy(name string, args FirewallPolicyArgs) *FirewallPolicy {
	return &FirewallPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirewallPolicy)(nil)

type FirewallPolicy struct {
	Name  string
	Args  FirewallPolicyArgs
	state *firewallPolicyState
}

func (fp *FirewallPolicy) Type() string {
	return "azurerm_firewall_policy"
}

func (fp *FirewallPolicy) LocalName() string {
	return fp.Name
}

func (fp *FirewallPolicy) Configuration() interface{} {
	return fp.Args
}

func (fp *FirewallPolicy) Attributes() firewallPolicyAttributes {
	return firewallPolicyAttributes{ref: terra.ReferenceResource(fp)}
}

func (fp *FirewallPolicy) ImportState(av io.Reader) error {
	fp.state = &firewallPolicyState{}
	if err := json.NewDecoder(av).Decode(fp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fp.Type(), fp.LocalName(), err)
	}
	return nil
}

func (fp *FirewallPolicy) State() (*firewallPolicyState, bool) {
	return fp.state, fp.state != nil
}

func (fp *FirewallPolicy) StateMust() *firewallPolicyState {
	if fp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fp.Type(), fp.LocalName()))
	}
	return fp.state
}

func (fp *FirewallPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(fp)
}

type FirewallPolicyArgs struct {
	// AutoLearnPrivateRangesEnabled: bool, optional
	AutoLearnPrivateRangesEnabled terra.BoolValue `hcl:"auto_learn_private_ranges_enabled,attr"`
	// BasePolicyId: string, optional
	BasePolicyId terra.StringValue `hcl:"base_policy_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpRanges: list of string, optional
	PrivateIpRanges terra.ListValue[terra.StringValue] `hcl:"private_ip_ranges,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// SqlRedirectAllowed: bool, optional
	SqlRedirectAllowed terra.BoolValue `hcl:"sql_redirect_allowed,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ThreatIntelligenceMode: string, optional
	ThreatIntelligenceMode terra.StringValue `hcl:"threat_intelligence_mode,attr"`
	// Dns: optional
	Dns *firewallpolicy.Dns `hcl:"dns,block"`
	// ExplicitProxy: optional
	ExplicitProxy *firewallpolicy.ExplicitProxy `hcl:"explicit_proxy,block"`
	// Identity: optional
	Identity *firewallpolicy.Identity `hcl:"identity,block"`
	// Insights: optional
	Insights *firewallpolicy.Insights `hcl:"insights,block"`
	// IntrusionDetection: optional
	IntrusionDetection *firewallpolicy.IntrusionDetection `hcl:"intrusion_detection,block"`
	// ThreatIntelligenceAllowlist: optional
	ThreatIntelligenceAllowlist *firewallpolicy.ThreatIntelligenceAllowlist `hcl:"threat_intelligence_allowlist,block"`
	// Timeouts: optional
	Timeouts *firewallpolicy.Timeouts `hcl:"timeouts,block"`
	// TlsCertificate: optional
	TlsCertificate *firewallpolicy.TlsCertificate `hcl:"tls_certificate,block"`
	// DependsOn contains resources that FirewallPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firewallPolicyAttributes struct {
	ref terra.Reference
}

func (fp firewallPolicyAttributes) AutoLearnPrivateRangesEnabled() terra.BoolValue {
	return terra.ReferenceBool(fp.ref.Append("auto_learn_private_ranges_enabled"))
}

func (fp firewallPolicyAttributes) BasePolicyId() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("base_policy_id"))
}

func (fp firewallPolicyAttributes) ChildPolicies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](fp.ref.Append("child_policies"))
}

func (fp firewallPolicyAttributes) Firewalls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](fp.ref.Append("firewalls"))
}

func (fp firewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("id"))
}

func (fp firewallPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("location"))
}

func (fp firewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("name"))
}

func (fp firewallPolicyAttributes) PrivateIpRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](fp.ref.Append("private_ip_ranges"))
}

func (fp firewallPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("resource_group_name"))
}

func (fp firewallPolicyAttributes) RuleCollectionGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](fp.ref.Append("rule_collection_groups"))
}

func (fp firewallPolicyAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("sku"))
}

func (fp firewallPolicyAttributes) SqlRedirectAllowed() terra.BoolValue {
	return terra.ReferenceBool(fp.ref.Append("sql_redirect_allowed"))
}

func (fp firewallPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fp.ref.Append("tags"))
}

func (fp firewallPolicyAttributes) ThreatIntelligenceMode() terra.StringValue {
	return terra.ReferenceString(fp.ref.Append("threat_intelligence_mode"))
}

func (fp firewallPolicyAttributes) Dns() terra.ListValue[firewallpolicy.DnsAttributes] {
	return terra.ReferenceList[firewallpolicy.DnsAttributes](fp.ref.Append("dns"))
}

func (fp firewallPolicyAttributes) ExplicitProxy() terra.ListValue[firewallpolicy.ExplicitProxyAttributes] {
	return terra.ReferenceList[firewallpolicy.ExplicitProxyAttributes](fp.ref.Append("explicit_proxy"))
}

func (fp firewallPolicyAttributes) Identity() terra.ListValue[firewallpolicy.IdentityAttributes] {
	return terra.ReferenceList[firewallpolicy.IdentityAttributes](fp.ref.Append("identity"))
}

func (fp firewallPolicyAttributes) Insights() terra.ListValue[firewallpolicy.InsightsAttributes] {
	return terra.ReferenceList[firewallpolicy.InsightsAttributes](fp.ref.Append("insights"))
}

func (fp firewallPolicyAttributes) IntrusionDetection() terra.ListValue[firewallpolicy.IntrusionDetectionAttributes] {
	return terra.ReferenceList[firewallpolicy.IntrusionDetectionAttributes](fp.ref.Append("intrusion_detection"))
}

func (fp firewallPolicyAttributes) ThreatIntelligenceAllowlist() terra.ListValue[firewallpolicy.ThreatIntelligenceAllowlistAttributes] {
	return terra.ReferenceList[firewallpolicy.ThreatIntelligenceAllowlistAttributes](fp.ref.Append("threat_intelligence_allowlist"))
}

func (fp firewallPolicyAttributes) Timeouts() firewallpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[firewallpolicy.TimeoutsAttributes](fp.ref.Append("timeouts"))
}

func (fp firewallPolicyAttributes) TlsCertificate() terra.ListValue[firewallpolicy.TlsCertificateAttributes] {
	return terra.ReferenceList[firewallpolicy.TlsCertificateAttributes](fp.ref.Append("tls_certificate"))
}

type firewallPolicyState struct {
	AutoLearnPrivateRangesEnabled bool                                              `json:"auto_learn_private_ranges_enabled"`
	BasePolicyId                  string                                            `json:"base_policy_id"`
	ChildPolicies                 []string                                          `json:"child_policies"`
	Firewalls                     []string                                          `json:"firewalls"`
	Id                            string                                            `json:"id"`
	Location                      string                                            `json:"location"`
	Name                          string                                            `json:"name"`
	PrivateIpRanges               []string                                          `json:"private_ip_ranges"`
	ResourceGroupName             string                                            `json:"resource_group_name"`
	RuleCollectionGroups          []string                                          `json:"rule_collection_groups"`
	Sku                           string                                            `json:"sku"`
	SqlRedirectAllowed            bool                                              `json:"sql_redirect_allowed"`
	Tags                          map[string]string                                 `json:"tags"`
	ThreatIntelligenceMode        string                                            `json:"threat_intelligence_mode"`
	Dns                           []firewallpolicy.DnsState                         `json:"dns"`
	ExplicitProxy                 []firewallpolicy.ExplicitProxyState               `json:"explicit_proxy"`
	Identity                      []firewallpolicy.IdentityState                    `json:"identity"`
	Insights                      []firewallpolicy.InsightsState                    `json:"insights"`
	IntrusionDetection            []firewallpolicy.IntrusionDetectionState          `json:"intrusion_detection"`
	ThreatIntelligenceAllowlist   []firewallpolicy.ThreatIntelligenceAllowlistState `json:"threat_intelligence_allowlist"`
	Timeouts                      *firewallpolicy.TimeoutsState                     `json:"timeouts"`
	TlsCertificate                []firewallpolicy.TlsCertificateState              `json:"tls_certificate"`
}
