// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventgridtopic "github.com/golingon/terraproviders/azurerm/3.49.0/eventgridtopic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventgridTopic(name string, args EventgridTopicArgs) *EventgridTopic {
	return &EventgridTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventgridTopic)(nil)

type EventgridTopic struct {
	Name  string
	Args  EventgridTopicArgs
	state *eventgridTopicState
}

func (et *EventgridTopic) Type() string {
	return "azurerm_eventgrid_topic"
}

func (et *EventgridTopic) LocalName() string {
	return et.Name
}

func (et *EventgridTopic) Configuration() interface{} {
	return et.Args
}

func (et *EventgridTopic) Attributes() eventgridTopicAttributes {
	return eventgridTopicAttributes{ref: terra.ReferenceResource(et)}
}

func (et *EventgridTopic) ImportState(av io.Reader) error {
	et.state = &eventgridTopicState{}
	if err := json.NewDecoder(av).Decode(et.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", et.Type(), et.LocalName(), err)
	}
	return nil
}

func (et *EventgridTopic) State() (*eventgridTopicState, bool) {
	return et.state, et.state != nil
}

func (et *EventgridTopic) StateMust() *eventgridTopicState {
	if et.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", et.Type(), et.LocalName()))
	}
	return et.state
}

func (et *EventgridTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(et)
}

type EventgridTopicArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputSchema: string, optional
	InputSchema terra.StringValue `hcl:"input_schema,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// InboundIpRule: min=0
	InboundIpRule []eventgridtopic.InboundIpRule `hcl:"inbound_ip_rule,block" validate:"min=0"`
	// Identity: optional
	Identity *eventgridtopic.Identity `hcl:"identity,block"`
	// InputMappingDefaultValues: optional
	InputMappingDefaultValues *eventgridtopic.InputMappingDefaultValues `hcl:"input_mapping_default_values,block"`
	// InputMappingFields: optional
	InputMappingFields *eventgridtopic.InputMappingFields `hcl:"input_mapping_fields,block"`
	// Timeouts: optional
	Timeouts *eventgridtopic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventgridTopic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventgridTopicAttributes struct {
	ref terra.Reference
}

func (et eventgridTopicAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("endpoint"))
}

func (et eventgridTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("id"))
}

func (et eventgridTopicAttributes) InputSchema() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("input_schema"))
}

func (et eventgridTopicAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceBool(et.ref.Append("local_auth_enabled"))
}

func (et eventgridTopicAttributes) Location() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("location"))
}

func (et eventgridTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("name"))
}

func (et eventgridTopicAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("primary_access_key"))
}

func (et eventgridTopicAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(et.ref.Append("public_network_access_enabled"))
}

func (et eventgridTopicAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("resource_group_name"))
}

func (et eventgridTopicAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("secondary_access_key"))
}

func (et eventgridTopicAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](et.ref.Append("tags"))
}

func (et eventgridTopicAttributes) InboundIpRule() terra.ListValue[eventgridtopic.InboundIpRuleAttributes] {
	return terra.ReferenceList[eventgridtopic.InboundIpRuleAttributes](et.ref.Append("inbound_ip_rule"))
}

func (et eventgridTopicAttributes) Identity() terra.ListValue[eventgridtopic.IdentityAttributes] {
	return terra.ReferenceList[eventgridtopic.IdentityAttributes](et.ref.Append("identity"))
}

func (et eventgridTopicAttributes) InputMappingDefaultValues() terra.ListValue[eventgridtopic.InputMappingDefaultValuesAttributes] {
	return terra.ReferenceList[eventgridtopic.InputMappingDefaultValuesAttributes](et.ref.Append("input_mapping_default_values"))
}

func (et eventgridTopicAttributes) InputMappingFields() terra.ListValue[eventgridtopic.InputMappingFieldsAttributes] {
	return terra.ReferenceList[eventgridtopic.InputMappingFieldsAttributes](et.ref.Append("input_mapping_fields"))
}

func (et eventgridTopicAttributes) Timeouts() eventgridtopic.TimeoutsAttributes {
	return terra.ReferenceSingle[eventgridtopic.TimeoutsAttributes](et.ref.Append("timeouts"))
}

type eventgridTopicState struct {
	Endpoint                   string                                          `json:"endpoint"`
	Id                         string                                          `json:"id"`
	InputSchema                string                                          `json:"input_schema"`
	LocalAuthEnabled           bool                                            `json:"local_auth_enabled"`
	Location                   string                                          `json:"location"`
	Name                       string                                          `json:"name"`
	PrimaryAccessKey           string                                          `json:"primary_access_key"`
	PublicNetworkAccessEnabled bool                                            `json:"public_network_access_enabled"`
	ResourceGroupName          string                                          `json:"resource_group_name"`
	SecondaryAccessKey         string                                          `json:"secondary_access_key"`
	Tags                       map[string]string                               `json:"tags"`
	InboundIpRule              []eventgridtopic.InboundIpRuleState             `json:"inbound_ip_rule"`
	Identity                   []eventgridtopic.IdentityState                  `json:"identity"`
	InputMappingDefaultValues  []eventgridtopic.InputMappingDefaultValuesState `json:"input_mapping_default_values"`
	InputMappingFields         []eventgridtopic.InputMappingFieldsState        `json:"input_mapping_fields"`
	Timeouts                   *eventgridtopic.TimeoutsState                   `json:"timeouts"`
}
