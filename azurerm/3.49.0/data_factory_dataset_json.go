// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorydatasetjson "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorydatasetjson"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryDatasetJson(name string, args DataFactoryDatasetJsonArgs) *DataFactoryDatasetJson {
	return &DataFactoryDatasetJson{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryDatasetJson)(nil)

type DataFactoryDatasetJson struct {
	Name  string
	Args  DataFactoryDatasetJsonArgs
	state *dataFactoryDatasetJsonState
}

func (dfdj *DataFactoryDatasetJson) Type() string {
	return "azurerm_data_factory_dataset_json"
}

func (dfdj *DataFactoryDatasetJson) LocalName() string {
	return dfdj.Name
}

func (dfdj *DataFactoryDatasetJson) Configuration() interface{} {
	return dfdj.Args
}

func (dfdj *DataFactoryDatasetJson) Attributes() dataFactoryDatasetJsonAttributes {
	return dataFactoryDatasetJsonAttributes{ref: terra.ReferenceResource(dfdj)}
}

func (dfdj *DataFactoryDatasetJson) ImportState(av io.Reader) error {
	dfdj.state = &dataFactoryDatasetJsonState{}
	if err := json.NewDecoder(av).Decode(dfdj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfdj.Type(), dfdj.LocalName(), err)
	}
	return nil
}

func (dfdj *DataFactoryDatasetJson) State() (*dataFactoryDatasetJsonState, bool) {
	return dfdj.state, dfdj.state != nil
}

func (dfdj *DataFactoryDatasetJson) StateMust() *dataFactoryDatasetJsonState {
	if dfdj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfdj.Type(), dfdj.LocalName()))
	}
	return dfdj.state
}

func (dfdj *DataFactoryDatasetJson) DependOn() terra.Reference {
	return terra.ReferenceResource(dfdj)
}

type DataFactoryDatasetJsonArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// AzureBlobStorageLocation: optional
	AzureBlobStorageLocation *datafactorydatasetjson.AzureBlobStorageLocation `hcl:"azure_blob_storage_location,block"`
	// HttpServerLocation: optional
	HttpServerLocation *datafactorydatasetjson.HttpServerLocation `hcl:"http_server_location,block"`
	// SchemaColumn: min=0
	SchemaColumn []datafactorydatasetjson.SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datafactorydatasetjson.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryDatasetJson depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryDatasetJsonAttributes struct {
	ref terra.Reference
}

func (dfdj dataFactoryDatasetJsonAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdj.ref.Append("additional_properties"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfdj.ref.Append("annotations"))
}

func (dfdj dataFactoryDatasetJsonAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("data_factory_id"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("description"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("encoding"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("folder"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("id"))
}

func (dfdj dataFactoryDatasetJsonAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("linked_service_name"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfdj.ref.Append("name"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdj.ref.Append("parameters"))
}

func (dfdj dataFactoryDatasetJsonAttributes) AzureBlobStorageLocation() terra.ListValue[datafactorydatasetjson.AzureBlobStorageLocationAttributes] {
	return terra.ReferenceList[datafactorydatasetjson.AzureBlobStorageLocationAttributes](dfdj.ref.Append("azure_blob_storage_location"))
}

func (dfdj dataFactoryDatasetJsonAttributes) HttpServerLocation() terra.ListValue[datafactorydatasetjson.HttpServerLocationAttributes] {
	return terra.ReferenceList[datafactorydatasetjson.HttpServerLocationAttributes](dfdj.ref.Append("http_server_location"))
}

func (dfdj dataFactoryDatasetJsonAttributes) SchemaColumn() terra.ListValue[datafactorydatasetjson.SchemaColumnAttributes] {
	return terra.ReferenceList[datafactorydatasetjson.SchemaColumnAttributes](dfdj.ref.Append("schema_column"))
}

func (dfdj dataFactoryDatasetJsonAttributes) Timeouts() datafactorydatasetjson.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorydatasetjson.TimeoutsAttributes](dfdj.ref.Append("timeouts"))
}

type dataFactoryDatasetJsonState struct {
	AdditionalProperties     map[string]string                                      `json:"additional_properties"`
	Annotations              []string                                               `json:"annotations"`
	DataFactoryId            string                                                 `json:"data_factory_id"`
	Description              string                                                 `json:"description"`
	Encoding                 string                                                 `json:"encoding"`
	Folder                   string                                                 `json:"folder"`
	Id                       string                                                 `json:"id"`
	LinkedServiceName        string                                                 `json:"linked_service_name"`
	Name                     string                                                 `json:"name"`
	Parameters               map[string]string                                      `json:"parameters"`
	AzureBlobStorageLocation []datafactorydatasetjson.AzureBlobStorageLocationState `json:"azure_blob_storage_location"`
	HttpServerLocation       []datafactorydatasetjson.HttpServerLocationState       `json:"http_server_location"`
	SchemaColumn             []datafactorydatasetjson.SchemaColumnState             `json:"schema_column"`
	Timeouts                 *datafactorydatasetjson.TimeoutsState                  `json:"timeouts"`
}
