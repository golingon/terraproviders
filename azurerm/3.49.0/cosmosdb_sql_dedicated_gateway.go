// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqldedicatedgateway "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqldedicatedgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlDedicatedGateway(name string, args CosmosdbSqlDedicatedGatewayArgs) *CosmosdbSqlDedicatedGateway {
	return &CosmosdbSqlDedicatedGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlDedicatedGateway)(nil)

type CosmosdbSqlDedicatedGateway struct {
	Name  string
	Args  CosmosdbSqlDedicatedGatewayArgs
	state *cosmosdbSqlDedicatedGatewayState
}

func (csdg *CosmosdbSqlDedicatedGateway) Type() string {
	return "azurerm_cosmosdb_sql_dedicated_gateway"
}

func (csdg *CosmosdbSqlDedicatedGateway) LocalName() string {
	return csdg.Name
}

func (csdg *CosmosdbSqlDedicatedGateway) Configuration() interface{} {
	return csdg.Args
}

func (csdg *CosmosdbSqlDedicatedGateway) Attributes() cosmosdbSqlDedicatedGatewayAttributes {
	return cosmosdbSqlDedicatedGatewayAttributes{ref: terra.ReferenceResource(csdg)}
}

func (csdg *CosmosdbSqlDedicatedGateway) ImportState(av io.Reader) error {
	csdg.state = &cosmosdbSqlDedicatedGatewayState{}
	if err := json.NewDecoder(av).Decode(csdg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csdg.Type(), csdg.LocalName(), err)
	}
	return nil
}

func (csdg *CosmosdbSqlDedicatedGateway) State() (*cosmosdbSqlDedicatedGatewayState, bool) {
	return csdg.state, csdg.state != nil
}

func (csdg *CosmosdbSqlDedicatedGateway) StateMust() *cosmosdbSqlDedicatedGatewayState {
	if csdg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csdg.Type(), csdg.LocalName()))
	}
	return csdg.state
}

func (csdg *CosmosdbSqlDedicatedGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(csdg)
}

type CosmosdbSqlDedicatedGatewayArgs struct {
	// CosmosdbAccountId: string, required
	CosmosdbAccountId terra.StringValue `hcl:"cosmosdb_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// InstanceSize: string, required
	InstanceSize terra.StringValue `hcl:"instance_size,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbsqldedicatedgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlDedicatedGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlDedicatedGatewayAttributes struct {
	ref terra.Reference
}

func (csdg cosmosdbSqlDedicatedGatewayAttributes) CosmosdbAccountId() terra.StringValue {
	return terra.ReferenceString(csdg.ref.Append("cosmosdb_account_id"))
}

func (csdg cosmosdbSqlDedicatedGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csdg.ref.Append("id"))
}

func (csdg cosmosdbSqlDedicatedGatewayAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(csdg.ref.Append("instance_count"))
}

func (csdg cosmosdbSqlDedicatedGatewayAttributes) InstanceSize() terra.StringValue {
	return terra.ReferenceString(csdg.ref.Append("instance_size"))
}

func (csdg cosmosdbSqlDedicatedGatewayAttributes) Timeouts() cosmosdbsqldedicatedgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqldedicatedgateway.TimeoutsAttributes](csdg.ref.Append("timeouts"))
}

type cosmosdbSqlDedicatedGatewayState struct {
	CosmosdbAccountId string                                     `json:"cosmosdb_account_id"`
	Id                string                                     `json:"id"`
	InstanceCount     float64                                    `json:"instance_count"`
	InstanceSize      string                                     `json:"instance_size"`
	Timeouts          *cosmosdbsqldedicatedgateway.TimeoutsState `json:"timeouts"`
}
