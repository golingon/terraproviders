// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbgremlingraph "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbgremlingraph"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbGremlinGraph(name string, args CosmosdbGremlinGraphArgs) *CosmosdbGremlinGraph {
	return &CosmosdbGremlinGraph{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbGremlinGraph)(nil)

type CosmosdbGremlinGraph struct {
	Name  string
	Args  CosmosdbGremlinGraphArgs
	state *cosmosdbGremlinGraphState
}

func (cgg *CosmosdbGremlinGraph) Type() string {
	return "azurerm_cosmosdb_gremlin_graph"
}

func (cgg *CosmosdbGremlinGraph) LocalName() string {
	return cgg.Name
}

func (cgg *CosmosdbGremlinGraph) Configuration() interface{} {
	return cgg.Args
}

func (cgg *CosmosdbGremlinGraph) Attributes() cosmosdbGremlinGraphAttributes {
	return cosmosdbGremlinGraphAttributes{ref: terra.ReferenceResource(cgg)}
}

func (cgg *CosmosdbGremlinGraph) ImportState(av io.Reader) error {
	cgg.state = &cosmosdbGremlinGraphState{}
	if err := json.NewDecoder(av).Decode(cgg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cgg.Type(), cgg.LocalName(), err)
	}
	return nil
}

func (cgg *CosmosdbGremlinGraph) State() (*cosmosdbGremlinGraphState, bool) {
	return cgg.state, cgg.state != nil
}

func (cgg *CosmosdbGremlinGraph) StateMust() *cosmosdbGremlinGraphState {
	if cgg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cgg.Type(), cgg.LocalName()))
	}
	return cgg.state
}

func (cgg *CosmosdbGremlinGraph) DependOn() terra.Reference {
	return terra.ReferenceResource(cgg)
}

type CosmosdbGremlinGraphArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKeyPath: string, required
	PartitionKeyPath terra.StringValue `hcl:"partition_key_path,attr" validate:"required"`
	// PartitionKeyVersion: number, optional
	PartitionKeyVersion terra.NumberValue `hcl:"partition_key_version,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbgremlingraph.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// ConflictResolutionPolicy: optional
	ConflictResolutionPolicy *cosmosdbgremlingraph.ConflictResolutionPolicy `hcl:"conflict_resolution_policy,block"`
	// IndexPolicy: optional
	IndexPolicy *cosmosdbgremlingraph.IndexPolicy `hcl:"index_policy,block"`
	// Timeouts: optional
	Timeouts *cosmosdbgremlingraph.Timeouts `hcl:"timeouts,block"`
	// UniqueKey: min=0
	UniqueKey []cosmosdbgremlingraph.UniqueKey `hcl:"unique_key,block" validate:"min=0"`
	// DependsOn contains resources that CosmosdbGremlinGraph depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbGremlinGraphAttributes struct {
	ref terra.Reference
}

func (cgg cosmosdbGremlinGraphAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("account_name"))
}

func (cgg cosmosdbGremlinGraphAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("database_name"))
}

func (cgg cosmosdbGremlinGraphAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceNumber(cgg.ref.Append("default_ttl"))
}

func (cgg cosmosdbGremlinGraphAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("id"))
}

func (cgg cosmosdbGremlinGraphAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("name"))
}

func (cgg cosmosdbGremlinGraphAttributes) PartitionKeyPath() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("partition_key_path"))
}

func (cgg cosmosdbGremlinGraphAttributes) PartitionKeyVersion() terra.NumberValue {
	return terra.ReferenceNumber(cgg.ref.Append("partition_key_version"))
}

func (cgg cosmosdbGremlinGraphAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cgg.ref.Append("resource_group_name"))
}

func (cgg cosmosdbGremlinGraphAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(cgg.ref.Append("throughput"))
}

func (cgg cosmosdbGremlinGraphAttributes) AutoscaleSettings() terra.ListValue[cosmosdbgremlingraph.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbgremlingraph.AutoscaleSettingsAttributes](cgg.ref.Append("autoscale_settings"))
}

func (cgg cosmosdbGremlinGraphAttributes) ConflictResolutionPolicy() terra.ListValue[cosmosdbgremlingraph.ConflictResolutionPolicyAttributes] {
	return terra.ReferenceList[cosmosdbgremlingraph.ConflictResolutionPolicyAttributes](cgg.ref.Append("conflict_resolution_policy"))
}

func (cgg cosmosdbGremlinGraphAttributes) IndexPolicy() terra.ListValue[cosmosdbgremlingraph.IndexPolicyAttributes] {
	return terra.ReferenceList[cosmosdbgremlingraph.IndexPolicyAttributes](cgg.ref.Append("index_policy"))
}

func (cgg cosmosdbGremlinGraphAttributes) Timeouts() cosmosdbgremlingraph.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbgremlingraph.TimeoutsAttributes](cgg.ref.Append("timeouts"))
}

func (cgg cosmosdbGremlinGraphAttributes) UniqueKey() terra.SetValue[cosmosdbgremlingraph.UniqueKeyAttributes] {
	return terra.ReferenceSet[cosmosdbgremlingraph.UniqueKeyAttributes](cgg.ref.Append("unique_key"))
}

type cosmosdbGremlinGraphState struct {
	AccountName              string                                               `json:"account_name"`
	DatabaseName             string                                               `json:"database_name"`
	DefaultTtl               float64                                              `json:"default_ttl"`
	Id                       string                                               `json:"id"`
	Name                     string                                               `json:"name"`
	PartitionKeyPath         string                                               `json:"partition_key_path"`
	PartitionKeyVersion      float64                                              `json:"partition_key_version"`
	ResourceGroupName        string                                               `json:"resource_group_name"`
	Throughput               float64                                              `json:"throughput"`
	AutoscaleSettings        []cosmosdbgremlingraph.AutoscaleSettingsState        `json:"autoscale_settings"`
	ConflictResolutionPolicy []cosmosdbgremlingraph.ConflictResolutionPolicyState `json:"conflict_resolution_policy"`
	IndexPolicy              []cosmosdbgremlingraph.IndexPolicyState              `json:"index_policy"`
	Timeouts                 *cosmosdbgremlingraph.TimeoutsState                  `json:"timeouts"`
	UniqueKey                []cosmosdbgremlingraph.UniqueKeyState                `json:"unique_key"`
}
