// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	templatedeployment "github.com/golingon/terraproviders/azurerm/3.49.0/templatedeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTemplateDeployment(name string, args TemplateDeploymentArgs) *TemplateDeployment {
	return &TemplateDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TemplateDeployment)(nil)

type TemplateDeployment struct {
	Name  string
	Args  TemplateDeploymentArgs
	state *templateDeploymentState
}

func (td *TemplateDeployment) Type() string {
	return "azurerm_template_deployment"
}

func (td *TemplateDeployment) LocalName() string {
	return td.Name
}

func (td *TemplateDeployment) Configuration() interface{} {
	return td.Args
}

func (td *TemplateDeployment) Attributes() templateDeploymentAttributes {
	return templateDeploymentAttributes{ref: terra.ReferenceResource(td)}
}

func (td *TemplateDeployment) ImportState(av io.Reader) error {
	td.state = &templateDeploymentState{}
	if err := json.NewDecoder(av).Decode(td.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", td.Type(), td.LocalName(), err)
	}
	return nil
}

func (td *TemplateDeployment) State() (*templateDeploymentState, bool) {
	return td.state, td.state != nil
}

func (td *TemplateDeployment) StateMust() *templateDeploymentState {
	if td.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", td.Type(), td.LocalName()))
	}
	return td.state
}

func (td *TemplateDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(td)
}

type TemplateDeploymentArgs struct {
	// DeploymentMode: string, required
	DeploymentMode terra.StringValue `hcl:"deployment_mode,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ParametersBody: string, optional
	ParametersBody terra.StringValue `hcl:"parameters_body,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TemplateBody: string, optional
	TemplateBody terra.StringValue `hcl:"template_body,attr"`
	// Timeouts: optional
	Timeouts *templatedeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TemplateDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type templateDeploymentAttributes struct {
	ref terra.Reference
}

func (td templateDeploymentAttributes) DeploymentMode() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("deployment_mode"))
}

func (td templateDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("id"))
}

func (td templateDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("name"))
}

func (td templateDeploymentAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](td.ref.Append("outputs"))
}

func (td templateDeploymentAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](td.ref.Append("parameters"))
}

func (td templateDeploymentAttributes) ParametersBody() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("parameters_body"))
}

func (td templateDeploymentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("resource_group_name"))
}

func (td templateDeploymentAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceString(td.ref.Append("template_body"))
}

func (td templateDeploymentAttributes) Timeouts() templatedeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[templatedeployment.TimeoutsAttributes](td.ref.Append("timeouts"))
}

type templateDeploymentState struct {
	DeploymentMode    string                            `json:"deployment_mode"`
	Id                string                            `json:"id"`
	Name              string                            `json:"name"`
	Outputs           map[string]string                 `json:"outputs"`
	Parameters        map[string]string                 `json:"parameters"`
	ParametersBody    string                            `json:"parameters_body"`
	ResourceGroupName string                            `json:"resource_group_name"`
	TemplateBody      string                            `json:"template_body"`
	Timeouts          *templatedeployment.TimeoutsState `json:"timeouts"`
}
