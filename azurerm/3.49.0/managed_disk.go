// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	manageddisk "github.com/golingon/terraproviders/azurerm/3.49.0/manageddisk"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewManagedDisk(name string, args ManagedDiskArgs) *ManagedDisk {
	return &ManagedDisk{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ManagedDisk)(nil)

type ManagedDisk struct {
	Name  string
	Args  ManagedDiskArgs
	state *managedDiskState
}

func (md *ManagedDisk) Type() string {
	return "azurerm_managed_disk"
}

func (md *ManagedDisk) LocalName() string {
	return md.Name
}

func (md *ManagedDisk) Configuration() interface{} {
	return md.Args
}

func (md *ManagedDisk) Attributes() managedDiskAttributes {
	return managedDiskAttributes{ref: terra.ReferenceResource(md)}
}

func (md *ManagedDisk) ImportState(av io.Reader) error {
	md.state = &managedDiskState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

func (md *ManagedDisk) State() (*managedDiskState, bool) {
	return md.state, md.state != nil
}

func (md *ManagedDisk) StateMust() *managedDiskState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

func (md *ManagedDisk) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

type ManagedDiskArgs struct {
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskAccessId: string, optional
	DiskAccessId terra.StringValue `hcl:"disk_access_id,attr"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DiskIopsReadOnly: number, optional
	DiskIopsReadOnly terra.NumberValue `hcl:"disk_iops_read_only,attr"`
	// DiskIopsReadWrite: number, optional
	DiskIopsReadWrite terra.NumberValue `hcl:"disk_iops_read_write,attr"`
	// DiskMbpsReadOnly: number, optional
	DiskMbpsReadOnly terra.NumberValue `hcl:"disk_mbps_read_only,attr"`
	// DiskMbpsReadWrite: number, optional
	DiskMbpsReadWrite terra.NumberValue `hcl:"disk_mbps_read_write,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// EdgeZone: string, optional
	EdgeZone terra.StringValue `hcl:"edge_zone,attr"`
	// GalleryImageReferenceId: string, optional
	GalleryImageReferenceId terra.StringValue `hcl:"gallery_image_reference_id,attr"`
	// HyperVGeneration: string, optional
	HyperVGeneration terra.StringValue `hcl:"hyper_v_generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageReferenceId: string, optional
	ImageReferenceId terra.StringValue `hcl:"image_reference_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LogicalSectorSize: number, optional
	LogicalSectorSize terra.NumberValue `hcl:"logical_sector_size,attr"`
	// MaxShares: number, optional
	MaxShares terra.NumberValue `hcl:"max_shares,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkAccessPolicy: string, optional
	NetworkAccessPolicy terra.StringValue `hcl:"network_access_policy,attr"`
	// OnDemandBurstingEnabled: bool, optional
	OnDemandBurstingEnabled terra.BoolValue `hcl:"on_demand_bursting_enabled,attr"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecureVmDiskEncryptionSetId: string, optional
	SecureVmDiskEncryptionSetId terra.StringValue `hcl:"secure_vm_disk_encryption_set_id,attr"`
	// SecurityType: string, optional
	SecurityType terra.StringValue `hcl:"security_type,attr"`
	// SourceResourceId: string, optional
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// TrustedLaunchEnabled: bool, optional
	TrustedLaunchEnabled terra.BoolValue `hcl:"trusted_launch_enabled,attr"`
	// UploadSizeBytes: number, optional
	UploadSizeBytes terra.NumberValue `hcl:"upload_size_bytes,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// EncryptionSettings: optional
	EncryptionSettings *manageddisk.EncryptionSettings `hcl:"encryption_settings,block"`
	// Timeouts: optional
	Timeouts *manageddisk.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ManagedDisk depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type managedDiskAttributes struct {
	ref terra.Reference
}

func (md managedDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("create_option"))
}

func (md managedDiskAttributes) DiskAccessId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("disk_access_id"))
}

func (md managedDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("disk_encryption_set_id"))
}

func (md managedDiskAttributes) DiskIopsReadOnly() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_iops_read_only"))
}

func (md managedDiskAttributes) DiskIopsReadWrite() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_iops_read_write"))
}

func (md managedDiskAttributes) DiskMbpsReadOnly() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_mbps_read_only"))
}

func (md managedDiskAttributes) DiskMbpsReadWrite() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_mbps_read_write"))
}

func (md managedDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("disk_size_gb"))
}

func (md managedDiskAttributes) EdgeZone() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("edge_zone"))
}

func (md managedDiskAttributes) GalleryImageReferenceId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("gallery_image_reference_id"))
}

func (md managedDiskAttributes) HyperVGeneration() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("hyper_v_generation"))
}

func (md managedDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("id"))
}

func (md managedDiskAttributes) ImageReferenceId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("image_reference_id"))
}

func (md managedDiskAttributes) Location() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("location"))
}

func (md managedDiskAttributes) LogicalSectorSize() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("logical_sector_size"))
}

func (md managedDiskAttributes) MaxShares() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("max_shares"))
}

func (md managedDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("name"))
}

func (md managedDiskAttributes) NetworkAccessPolicy() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("network_access_policy"))
}

func (md managedDiskAttributes) OnDemandBurstingEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("on_demand_bursting_enabled"))
}

func (md managedDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("os_type"))
}

func (md managedDiskAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("public_network_access_enabled"))
}

func (md managedDiskAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("resource_group_name"))
}

func (md managedDiskAttributes) SecureVmDiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("secure_vm_disk_encryption_set_id"))
}

func (md managedDiskAttributes) SecurityType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("security_type"))
}

func (md managedDiskAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("source_resource_id"))
}

func (md managedDiskAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("source_uri"))
}

func (md managedDiskAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("storage_account_id"))
}

func (md managedDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("storage_account_type"))
}

func (md managedDiskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](md.ref.Append("tags"))
}

func (md managedDiskAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("tier"))
}

func (md managedDiskAttributes) TrustedLaunchEnabled() terra.BoolValue {
	return terra.ReferenceBool(md.ref.Append("trusted_launch_enabled"))
}

func (md managedDiskAttributes) UploadSizeBytes() terra.NumberValue {
	return terra.ReferenceNumber(md.ref.Append("upload_size_bytes"))
}

func (md managedDiskAttributes) Zone() terra.StringValue {
	return terra.ReferenceString(md.ref.Append("zone"))
}

func (md managedDiskAttributes) EncryptionSettings() terra.ListValue[manageddisk.EncryptionSettingsAttributes] {
	return terra.ReferenceList[manageddisk.EncryptionSettingsAttributes](md.ref.Append("encryption_settings"))
}

func (md managedDiskAttributes) Timeouts() manageddisk.TimeoutsAttributes {
	return terra.ReferenceSingle[manageddisk.TimeoutsAttributes](md.ref.Append("timeouts"))
}

type managedDiskState struct {
	CreateOption                string                                `json:"create_option"`
	DiskAccessId                string                                `json:"disk_access_id"`
	DiskEncryptionSetId         string                                `json:"disk_encryption_set_id"`
	DiskIopsReadOnly            float64                               `json:"disk_iops_read_only"`
	DiskIopsReadWrite           float64                               `json:"disk_iops_read_write"`
	DiskMbpsReadOnly            float64                               `json:"disk_mbps_read_only"`
	DiskMbpsReadWrite           float64                               `json:"disk_mbps_read_write"`
	DiskSizeGb                  float64                               `json:"disk_size_gb"`
	EdgeZone                    string                                `json:"edge_zone"`
	GalleryImageReferenceId     string                                `json:"gallery_image_reference_id"`
	HyperVGeneration            string                                `json:"hyper_v_generation"`
	Id                          string                                `json:"id"`
	ImageReferenceId            string                                `json:"image_reference_id"`
	Location                    string                                `json:"location"`
	LogicalSectorSize           float64                               `json:"logical_sector_size"`
	MaxShares                   float64                               `json:"max_shares"`
	Name                        string                                `json:"name"`
	NetworkAccessPolicy         string                                `json:"network_access_policy"`
	OnDemandBurstingEnabled     bool                                  `json:"on_demand_bursting_enabled"`
	OsType                      string                                `json:"os_type"`
	PublicNetworkAccessEnabled  bool                                  `json:"public_network_access_enabled"`
	ResourceGroupName           string                                `json:"resource_group_name"`
	SecureVmDiskEncryptionSetId string                                `json:"secure_vm_disk_encryption_set_id"`
	SecurityType                string                                `json:"security_type"`
	SourceResourceId            string                                `json:"source_resource_id"`
	SourceUri                   string                                `json:"source_uri"`
	StorageAccountId            string                                `json:"storage_account_id"`
	StorageAccountType          string                                `json:"storage_account_type"`
	Tags                        map[string]string                     `json:"tags"`
	Tier                        string                                `json:"tier"`
	TrustedLaunchEnabled        bool                                  `json:"trusted_launch_enabled"`
	UploadSizeBytes             float64                               `json:"upload_size_bytes"`
	Zone                        string                                `json:"zone"`
	EncryptionSettings          []manageddisk.EncryptionSettingsState `json:"encryption_settings"`
	Timeouts                    *manageddisk.TimeoutsState            `json:"timeouts"`
}
