// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	securitycenterservervulnerabilityassessmentvirtualmachine "github.com/golingon/terraproviders/azurerm/3.49.0/securitycenterservervulnerabilityassessmentvirtualmachine"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityCenterServerVulnerabilityAssessmentVirtualMachine(name string, args SecurityCenterServerVulnerabilityAssessmentVirtualMachineArgs) *SecurityCenterServerVulnerabilityAssessmentVirtualMachine {
	return &SecurityCenterServerVulnerabilityAssessmentVirtualMachine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterServerVulnerabilityAssessmentVirtualMachine)(nil)

type SecurityCenterServerVulnerabilityAssessmentVirtualMachine struct {
	Name  string
	Args  SecurityCenterServerVulnerabilityAssessmentVirtualMachineArgs
	state *securityCenterServerVulnerabilityAssessmentVirtualMachineState
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) Type() string {
	return "azurerm_security_center_server_vulnerability_assessment_virtual_machine"
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) LocalName() string {
	return scsvavm.Name
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) Configuration() interface{} {
	return scsvavm.Args
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) Attributes() securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes {
	return securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes{ref: terra.ReferenceResource(scsvavm)}
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) ImportState(av io.Reader) error {
	scsvavm.state = &securityCenterServerVulnerabilityAssessmentVirtualMachineState{}
	if err := json.NewDecoder(av).Decode(scsvavm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scsvavm.Type(), scsvavm.LocalName(), err)
	}
	return nil
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) State() (*securityCenterServerVulnerabilityAssessmentVirtualMachineState, bool) {
	return scsvavm.state, scsvavm.state != nil
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) StateMust() *securityCenterServerVulnerabilityAssessmentVirtualMachineState {
	if scsvavm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scsvavm.Type(), scsvavm.LocalName()))
	}
	return scsvavm.state
}

func (scsvavm *SecurityCenterServerVulnerabilityAssessmentVirtualMachine) DependOn() terra.Reference {
	return terra.ReferenceResource(scsvavm)
}

type SecurityCenterServerVulnerabilityAssessmentVirtualMachineArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycenterservervulnerabilityassessmentvirtualmachine.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SecurityCenterServerVulnerabilityAssessmentVirtualMachine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes struct {
	ref terra.Reference
}

func (scsvavm securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scsvavm.ref.Append("id"))
}

func (scsvavm securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceString(scsvavm.ref.Append("virtual_machine_id"))
}

func (scsvavm securityCenterServerVulnerabilityAssessmentVirtualMachineAttributes) Timeouts() securitycenterservervulnerabilityassessmentvirtualmachine.TimeoutsAttributes {
	return terra.ReferenceSingle[securitycenterservervulnerabilityassessmentvirtualmachine.TimeoutsAttributes](scsvavm.ref.Append("timeouts"))
}

type securityCenterServerVulnerabilityAssessmentVirtualMachineState struct {
	Id               string                                                                   `json:"id"`
	VirtualMachineId string                                                                   `json:"virtual_machine_id"`
	Timeouts         *securitycenterservervulnerabilityassessmentvirtualmachine.TimeoutsState `json:"timeouts"`
}
