// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	servicebusnamespacenetworkruleset "github.com/golingon/terraproviders/azurerm/3.49.0/servicebusnamespacenetworkruleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicebusNamespaceNetworkRuleSet(name string, args ServicebusNamespaceNetworkRuleSetArgs) *ServicebusNamespaceNetworkRuleSet {
	return &ServicebusNamespaceNetworkRuleSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicebusNamespaceNetworkRuleSet)(nil)

type ServicebusNamespaceNetworkRuleSet struct {
	Name  string
	Args  ServicebusNamespaceNetworkRuleSetArgs
	state *servicebusNamespaceNetworkRuleSetState
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) Type() string {
	return "azurerm_servicebus_namespace_network_rule_set"
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) LocalName() string {
	return snnrs.Name
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) Configuration() interface{} {
	return snnrs.Args
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) Attributes() servicebusNamespaceNetworkRuleSetAttributes {
	return servicebusNamespaceNetworkRuleSetAttributes{ref: terra.ReferenceResource(snnrs)}
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) ImportState(av io.Reader) error {
	snnrs.state = &servicebusNamespaceNetworkRuleSetState{}
	if err := json.NewDecoder(av).Decode(snnrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snnrs.Type(), snnrs.LocalName(), err)
	}
	return nil
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) State() (*servicebusNamespaceNetworkRuleSetState, bool) {
	return snnrs.state, snnrs.state != nil
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) StateMust() *servicebusNamespaceNetworkRuleSetState {
	if snnrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snnrs.Type(), snnrs.LocalName()))
	}
	return snnrs.state
}

func (snnrs *ServicebusNamespaceNetworkRuleSet) DependOn() terra.Reference {
	return terra.ReferenceResource(snnrs)
}

type ServicebusNamespaceNetworkRuleSetArgs struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRules: set of string, optional
	IpRules terra.SetValue[terra.StringValue] `hcl:"ip_rules,attr"`
	// NamespaceId: string, required
	NamespaceId terra.StringValue `hcl:"namespace_id,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// TrustedServicesAllowed: bool, optional
	TrustedServicesAllowed terra.BoolValue `hcl:"trusted_services_allowed,attr"`
	// NetworkRules: min=0
	NetworkRules []servicebusnamespacenetworkruleset.NetworkRules `hcl:"network_rules,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *servicebusnamespacenetworkruleset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicebusNamespaceNetworkRuleSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicebusNamespaceNetworkRuleSetAttributes struct {
	ref terra.Reference
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceString(snnrs.ref.Append("default_action"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snnrs.ref.Append("id"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) IpRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](snnrs.ref.Append("ip_rules"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceString(snnrs.ref.Append("namespace_id"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceBool(snnrs.ref.Append("public_network_access_enabled"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) TrustedServicesAllowed() terra.BoolValue {
	return terra.ReferenceBool(snnrs.ref.Append("trusted_services_allowed"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) NetworkRules() terra.SetValue[servicebusnamespacenetworkruleset.NetworkRulesAttributes] {
	return terra.ReferenceSet[servicebusnamespacenetworkruleset.NetworkRulesAttributes](snnrs.ref.Append("network_rules"))
}

func (snnrs servicebusNamespaceNetworkRuleSetAttributes) Timeouts() servicebusnamespacenetworkruleset.TimeoutsAttributes {
	return terra.ReferenceSingle[servicebusnamespacenetworkruleset.TimeoutsAttributes](snnrs.ref.Append("timeouts"))
}

type servicebusNamespaceNetworkRuleSetState struct {
	DefaultAction              string                                                `json:"default_action"`
	Id                         string                                                `json:"id"`
	IpRules                    []string                                              `json:"ip_rules"`
	NamespaceId                string                                                `json:"namespace_id"`
	PublicNetworkAccessEnabled bool                                                  `json:"public_network_access_enabled"`
	TrustedServicesAllowed     bool                                                  `json:"trusted_services_allowed"`
	NetworkRules               []servicebusnamespacenetworkruleset.NetworkRulesState `json:"network_rules"`
	Timeouts                   *servicebusnamespacenetworkruleset.TimeoutsState      `json:"timeouts"`
}
