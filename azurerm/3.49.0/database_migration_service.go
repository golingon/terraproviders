// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	databasemigrationservice "github.com/golingon/terraproviders/azurerm/3.49.0/databasemigrationservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatabaseMigrationService(name string, args DatabaseMigrationServiceArgs) *DatabaseMigrationService {
	return &DatabaseMigrationService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatabaseMigrationService)(nil)

type DatabaseMigrationService struct {
	Name  string
	Args  DatabaseMigrationServiceArgs
	state *databaseMigrationServiceState
}

func (dms *DatabaseMigrationService) Type() string {
	return "azurerm_database_migration_service"
}

func (dms *DatabaseMigrationService) LocalName() string {
	return dms.Name
}

func (dms *DatabaseMigrationService) Configuration() interface{} {
	return dms.Args
}

func (dms *DatabaseMigrationService) Attributes() databaseMigrationServiceAttributes {
	return databaseMigrationServiceAttributes{ref: terra.ReferenceResource(dms)}
}

func (dms *DatabaseMigrationService) ImportState(av io.Reader) error {
	dms.state = &databaseMigrationServiceState{}
	if err := json.NewDecoder(av).Decode(dms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dms.Type(), dms.LocalName(), err)
	}
	return nil
}

func (dms *DatabaseMigrationService) State() (*databaseMigrationServiceState, bool) {
	return dms.state, dms.state != nil
}

func (dms *DatabaseMigrationService) StateMust() *databaseMigrationServiceState {
	if dms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dms.Type(), dms.LocalName()))
	}
	return dms.state
}

func (dms *DatabaseMigrationService) DependOn() terra.Reference {
	return terra.ReferenceResource(dms)
}

type DatabaseMigrationServiceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *databasemigrationservice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatabaseMigrationService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type databaseMigrationServiceAttributes struct {
	ref terra.Reference
}

func (dms databaseMigrationServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("id"))
}

func (dms databaseMigrationServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("location"))
}

func (dms databaseMigrationServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("name"))
}

func (dms databaseMigrationServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("resource_group_name"))
}

func (dms databaseMigrationServiceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("sku_name"))
}

func (dms databaseMigrationServiceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(dms.ref.Append("subnet_id"))
}

func (dms databaseMigrationServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dms.ref.Append("tags"))
}

func (dms databaseMigrationServiceAttributes) Timeouts() databasemigrationservice.TimeoutsAttributes {
	return terra.ReferenceSingle[databasemigrationservice.TimeoutsAttributes](dms.ref.Append("timeouts"))
}

type databaseMigrationServiceState struct {
	Id                string                                  `json:"id"`
	Location          string                                  `json:"location"`
	Name              string                                  `json:"name"`
	ResourceGroupName string                                  `json:"resource_group_name"`
	SkuName           string                                  `json:"sku_name"`
	SubnetId          string                                  `json:"subnet_id"`
	Tags              map[string]string                       `json:"tags"`
	Timeouts          *databasemigrationservice.TimeoutsState `json:"timeouts"`
}
