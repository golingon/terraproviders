// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorylinkedservicemysql "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorylinkedservicemysql"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryLinkedServiceMysql(name string, args DataFactoryLinkedServiceMysqlArgs) *DataFactoryLinkedServiceMysql {
	return &DataFactoryLinkedServiceMysql{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryLinkedServiceMysql)(nil)

type DataFactoryLinkedServiceMysql struct {
	Name  string
	Args  DataFactoryLinkedServiceMysqlArgs
	state *dataFactoryLinkedServiceMysqlState
}

func (dflsm *DataFactoryLinkedServiceMysql) Type() string {
	return "azurerm_data_factory_linked_service_mysql"
}

func (dflsm *DataFactoryLinkedServiceMysql) LocalName() string {
	return dflsm.Name
}

func (dflsm *DataFactoryLinkedServiceMysql) Configuration() interface{} {
	return dflsm.Args
}

func (dflsm *DataFactoryLinkedServiceMysql) Attributes() dataFactoryLinkedServiceMysqlAttributes {
	return dataFactoryLinkedServiceMysqlAttributes{ref: terra.ReferenceResource(dflsm)}
}

func (dflsm *DataFactoryLinkedServiceMysql) ImportState(av io.Reader) error {
	dflsm.state = &dataFactoryLinkedServiceMysqlState{}
	if err := json.NewDecoder(av).Decode(dflsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dflsm.Type(), dflsm.LocalName(), err)
	}
	return nil
}

func (dflsm *DataFactoryLinkedServiceMysql) State() (*dataFactoryLinkedServiceMysqlState, bool) {
	return dflsm.state, dflsm.state != nil
}

func (dflsm *DataFactoryLinkedServiceMysql) StateMust() *dataFactoryLinkedServiceMysqlState {
	if dflsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dflsm.Type(), dflsm.LocalName()))
	}
	return dflsm.state
}

func (dflsm *DataFactoryLinkedServiceMysql) DependOn() terra.Reference {
	return terra.ReferenceResource(dflsm)
}

type DataFactoryLinkedServiceMysqlArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Timeouts: optional
	Timeouts *datafactorylinkedservicemysql.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryLinkedServiceMysql depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryLinkedServiceMysqlAttributes struct {
	ref terra.Reference
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsm.ref.Append("additional_properties"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dflsm.ref.Append("annotations"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("connection_string"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("data_factory_id"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("description"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("id"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("integration_runtime_name"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dflsm.ref.Append("name"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dflsm.ref.Append("parameters"))
}

func (dflsm dataFactoryLinkedServiceMysqlAttributes) Timeouts() datafactorylinkedservicemysql.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorylinkedservicemysql.TimeoutsAttributes](dflsm.ref.Append("timeouts"))
}

type dataFactoryLinkedServiceMysqlState struct {
	AdditionalProperties   map[string]string                            `json:"additional_properties"`
	Annotations            []string                                     `json:"annotations"`
	ConnectionString       string                                       `json:"connection_string"`
	DataFactoryId          string                                       `json:"data_factory_id"`
	Description            string                                       `json:"description"`
	Id                     string                                       `json:"id"`
	IntegrationRuntimeName string                                       `json:"integration_runtime_name"`
	Name                   string                                       `json:"name"`
	Parameters             map[string]string                            `json:"parameters"`
	Timeouts               *datafactorylinkedservicemysql.TimeoutsState `json:"timeouts"`
}
