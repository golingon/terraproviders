// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbcassandrakeyspace "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbcassandrakeyspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbCassandraKeyspace(name string, args CosmosdbCassandraKeyspaceArgs) *CosmosdbCassandraKeyspace {
	return &CosmosdbCassandraKeyspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbCassandraKeyspace)(nil)

type CosmosdbCassandraKeyspace struct {
	Name  string
	Args  CosmosdbCassandraKeyspaceArgs
	state *cosmosdbCassandraKeyspaceState
}

func (cck *CosmosdbCassandraKeyspace) Type() string {
	return "azurerm_cosmosdb_cassandra_keyspace"
}

func (cck *CosmosdbCassandraKeyspace) LocalName() string {
	return cck.Name
}

func (cck *CosmosdbCassandraKeyspace) Configuration() interface{} {
	return cck.Args
}

func (cck *CosmosdbCassandraKeyspace) Attributes() cosmosdbCassandraKeyspaceAttributes {
	return cosmosdbCassandraKeyspaceAttributes{ref: terra.ReferenceResource(cck)}
}

func (cck *CosmosdbCassandraKeyspace) ImportState(av io.Reader) error {
	cck.state = &cosmosdbCassandraKeyspaceState{}
	if err := json.NewDecoder(av).Decode(cck.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cck.Type(), cck.LocalName(), err)
	}
	return nil
}

func (cck *CosmosdbCassandraKeyspace) State() (*cosmosdbCassandraKeyspaceState, bool) {
	return cck.state, cck.state != nil
}

func (cck *CosmosdbCassandraKeyspace) StateMust() *cosmosdbCassandraKeyspaceState {
	if cck.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cck.Type(), cck.LocalName()))
	}
	return cck.state
}

func (cck *CosmosdbCassandraKeyspace) DependOn() terra.Reference {
	return terra.ReferenceResource(cck)
}

type CosmosdbCassandraKeyspaceArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbcassandrakeyspace.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Timeouts: optional
	Timeouts *cosmosdbcassandrakeyspace.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbCassandraKeyspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbCassandraKeyspaceAttributes struct {
	ref terra.Reference
}

func (cck cosmosdbCassandraKeyspaceAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cck.ref.Append("account_name"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cck.ref.Append("id"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cck.ref.Append("name"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cck.ref.Append("resource_group_name"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(cck.ref.Append("throughput"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) AutoscaleSettings() terra.ListValue[cosmosdbcassandrakeyspace.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbcassandrakeyspace.AutoscaleSettingsAttributes](cck.ref.Append("autoscale_settings"))
}

func (cck cosmosdbCassandraKeyspaceAttributes) Timeouts() cosmosdbcassandrakeyspace.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbcassandrakeyspace.TimeoutsAttributes](cck.ref.Append("timeouts"))
}

type cosmosdbCassandraKeyspaceState struct {
	AccountName       string                                             `json:"account_name"`
	Id                string                                             `json:"id"`
	Name              string                                             `json:"name"`
	ResourceGroupName string                                             `json:"resource_group_name"`
	Throughput        float64                                            `json:"throughput"`
	AutoscaleSettings []cosmosdbcassandrakeyspace.AutoscaleSettingsState `json:"autoscale_settings"`
	Timeouts          *cosmosdbcassandrakeyspace.TimeoutsState           `json:"timeouts"`
}
