// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	blueprintassignment "github.com/golingon/terraproviders/azurerm/3.49.0/blueprintassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBlueprintAssignment(name string, args BlueprintAssignmentArgs) *BlueprintAssignment {
	return &BlueprintAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BlueprintAssignment)(nil)

type BlueprintAssignment struct {
	Name  string
	Args  BlueprintAssignmentArgs
	state *blueprintAssignmentState
}

func (ba *BlueprintAssignment) Type() string {
	return "azurerm_blueprint_assignment"
}

func (ba *BlueprintAssignment) LocalName() string {
	return ba.Name
}

func (ba *BlueprintAssignment) Configuration() interface{} {
	return ba.Args
}

func (ba *BlueprintAssignment) Attributes() blueprintAssignmentAttributes {
	return blueprintAssignmentAttributes{ref: terra.ReferenceResource(ba)}
}

func (ba *BlueprintAssignment) ImportState(av io.Reader) error {
	ba.state = &blueprintAssignmentState{}
	if err := json.NewDecoder(av).Decode(ba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ba.Type(), ba.LocalName(), err)
	}
	return nil
}

func (ba *BlueprintAssignment) State() (*blueprintAssignmentState, bool) {
	return ba.state, ba.state != nil
}

func (ba *BlueprintAssignment) StateMust() *blueprintAssignmentState {
	if ba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ba.Type(), ba.LocalName()))
	}
	return ba.state
}

func (ba *BlueprintAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(ba)
}

type BlueprintAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LockExcludeActions: list of string, optional
	LockExcludeActions terra.ListValue[terra.StringValue] `hcl:"lock_exclude_actions,attr"`
	// LockExcludePrincipals: list of string, optional
	LockExcludePrincipals terra.ListValue[terra.StringValue] `hcl:"lock_exclude_principals,attr"`
	// LockMode: string, optional
	LockMode terra.StringValue `hcl:"lock_mode,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParameterValues: string, optional
	ParameterValues terra.StringValue `hcl:"parameter_values,attr"`
	// ResourceGroups: string, optional
	ResourceGroups terra.StringValue `hcl:"resource_groups,attr"`
	// TargetSubscriptionId: string, required
	TargetSubscriptionId terra.StringValue `hcl:"target_subscription_id,attr" validate:"required"`
	// VersionId: string, required
	VersionId terra.StringValue `hcl:"version_id,attr" validate:"required"`
	// Identity: required
	Identity *blueprintassignment.Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *blueprintassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BlueprintAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type blueprintAssignmentAttributes struct {
	ref terra.Reference
}

func (ba blueprintAssignmentAttributes) BlueprintName() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("blueprint_name"))
}

func (ba blueprintAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("description"))
}

func (ba blueprintAssignmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("display_name"))
}

func (ba blueprintAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("id"))
}

func (ba blueprintAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("location"))
}

func (ba blueprintAssignmentAttributes) LockExcludeActions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ba.ref.Append("lock_exclude_actions"))
}

func (ba blueprintAssignmentAttributes) LockExcludePrincipals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ba.ref.Append("lock_exclude_principals"))
}

func (ba blueprintAssignmentAttributes) LockMode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("lock_mode"))
}

func (ba blueprintAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("name"))
}

func (ba blueprintAssignmentAttributes) ParameterValues() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("parameter_values"))
}

func (ba blueprintAssignmentAttributes) ResourceGroups() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("resource_groups"))
}

func (ba blueprintAssignmentAttributes) TargetSubscriptionId() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("target_subscription_id"))
}

func (ba blueprintAssignmentAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("type"))
}

func (ba blueprintAssignmentAttributes) VersionId() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("version_id"))
}

func (ba blueprintAssignmentAttributes) Identity() terra.ListValue[blueprintassignment.IdentityAttributes] {
	return terra.ReferenceList[blueprintassignment.IdentityAttributes](ba.ref.Append("identity"))
}

func (ba blueprintAssignmentAttributes) Timeouts() blueprintassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[blueprintassignment.TimeoutsAttributes](ba.ref.Append("timeouts"))
}

type blueprintAssignmentState struct {
	BlueprintName         string                              `json:"blueprint_name"`
	Description           string                              `json:"description"`
	DisplayName           string                              `json:"display_name"`
	Id                    string                              `json:"id"`
	Location              string                              `json:"location"`
	LockExcludeActions    []string                            `json:"lock_exclude_actions"`
	LockExcludePrincipals []string                            `json:"lock_exclude_principals"`
	LockMode              string                              `json:"lock_mode"`
	Name                  string                              `json:"name"`
	ParameterValues       string                              `json:"parameter_values"`
	ResourceGroups        string                              `json:"resource_groups"`
	TargetSubscriptionId  string                              `json:"target_subscription_id"`
	Type                  string                              `json:"type"`
	VersionId             string                              `json:"version_id"`
	Identity              []blueprintassignment.IdentityState `json:"identity"`
	Timeouts              *blueprintassignment.TimeoutsState  `json:"timeouts"`
}
