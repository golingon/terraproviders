// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sqlfailovergroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type PartnerServers struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type ReadWriteEndpointFailoverPolicy struct {
	// GraceMinutes: number, optional
	GraceMinutes terra.NumberValue `hcl:"grace_minutes,attr"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type ReadonlyEndpointFailoverPolicy struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PartnerServersAttributes struct {
	ref terra.Reference
}

func (ps PartnerServersAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps PartnerServersAttributes) InternalWithRef(ref terra.Reference) PartnerServersAttributes {
	return PartnerServersAttributes{ref: ref}
}

func (ps PartnerServersAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps PartnerServersAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("id"))
}

func (ps PartnerServersAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("location"))
}

func (ps PartnerServersAttributes) Role() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("role"))
}

type ReadWriteEndpointFailoverPolicyAttributes struct {
	ref terra.Reference
}

func (rwefp ReadWriteEndpointFailoverPolicyAttributes) InternalRef() terra.Reference {
	return rwefp.ref
}

func (rwefp ReadWriteEndpointFailoverPolicyAttributes) InternalWithRef(ref terra.Reference) ReadWriteEndpointFailoverPolicyAttributes {
	return ReadWriteEndpointFailoverPolicyAttributes{ref: ref}
}

func (rwefp ReadWriteEndpointFailoverPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rwefp.ref.InternalTokens()
}

func (rwefp ReadWriteEndpointFailoverPolicyAttributes) GraceMinutes() terra.NumberValue {
	return terra.ReferenceNumber(rwefp.ref.Append("grace_minutes"))
}

func (rwefp ReadWriteEndpointFailoverPolicyAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(rwefp.ref.Append("mode"))
}

type ReadonlyEndpointFailoverPolicyAttributes struct {
	ref terra.Reference
}

func (refp ReadonlyEndpointFailoverPolicyAttributes) InternalRef() terra.Reference {
	return refp.ref
}

func (refp ReadonlyEndpointFailoverPolicyAttributes) InternalWithRef(ref terra.Reference) ReadonlyEndpointFailoverPolicyAttributes {
	return ReadonlyEndpointFailoverPolicyAttributes{ref: ref}
}

func (refp ReadonlyEndpointFailoverPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return refp.ref.InternalTokens()
}

func (refp ReadonlyEndpointFailoverPolicyAttributes) Mode() terra.StringValue {
	return terra.ReferenceString(refp.ref.Append("mode"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type PartnerServersState struct {
	Id       string `json:"id"`
	Location string `json:"location"`
	Role     string `json:"role"`
}

type ReadWriteEndpointFailoverPolicyState struct {
	GraceMinutes float64 `json:"grace_minutes"`
	Mode         string  `json:"mode"`
}

type ReadonlyEndpointFailoverPolicyState struct {
	Mode string `json:"mode"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
