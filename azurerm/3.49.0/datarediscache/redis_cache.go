// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datarediscache

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type PatchSchedule struct{}

type RedisConfiguration struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type PatchScheduleAttributes struct {
	ref terra.Reference
}

func (ps PatchScheduleAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps PatchScheduleAttributes) InternalWithRef(ref terra.Reference) PatchScheduleAttributes {
	return PatchScheduleAttributes{ref: ref}
}

func (ps PatchScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps PatchScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("day_of_week"))
}

func (ps PatchScheduleAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(ps.ref.Append("maintenance_window"))
}

func (ps PatchScheduleAttributes) StartHourUtc() terra.NumberValue {
	return terra.ReferenceNumber(ps.ref.Append("start_hour_utc"))
}

type RedisConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RedisConfigurationAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc RedisConfigurationAttributes) InternalWithRef(ref terra.Reference) RedisConfigurationAttributes {
	return RedisConfigurationAttributes{ref: ref}
}

func (rc RedisConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc RedisConfigurationAttributes) AofBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("aof_backup_enabled"))
}

func (rc RedisConfigurationAttributes) AofStorageConnectionString0() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("aof_storage_connection_string_0"))
}

func (rc RedisConfigurationAttributes) AofStorageConnectionString1() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("aof_storage_connection_string_1"))
}

func (rc RedisConfigurationAttributes) EnableAuthentication() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("enable_authentication"))
}

func (rc RedisConfigurationAttributes) Maxclients() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("maxclients"))
}

func (rc RedisConfigurationAttributes) MaxfragmentationmemoryReserved() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("maxfragmentationmemory_reserved"))
}

func (rc RedisConfigurationAttributes) MaxmemoryDelta() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("maxmemory_delta"))
}

func (rc RedisConfigurationAttributes) MaxmemoryPolicy() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("maxmemory_policy"))
}

func (rc RedisConfigurationAttributes) MaxmemoryReserved() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("maxmemory_reserved"))
}

func (rc RedisConfigurationAttributes) NotifyKeyspaceEvents() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("notify_keyspace_events"))
}

func (rc RedisConfigurationAttributes) RdbBackupEnabled() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("rdb_backup_enabled"))
}

func (rc RedisConfigurationAttributes) RdbBackupFrequency() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("rdb_backup_frequency"))
}

func (rc RedisConfigurationAttributes) RdbBackupMaxSnapshotCount() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("rdb_backup_max_snapshot_count"))
}

func (rc RedisConfigurationAttributes) RdbStorageConnectionString() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("rdb_storage_connection_string"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type PatchScheduleState struct {
	DayOfWeek         string  `json:"day_of_week"`
	MaintenanceWindow string  `json:"maintenance_window"`
	StartHourUtc      float64 `json:"start_hour_utc"`
}

type RedisConfigurationState struct {
	AofBackupEnabled               bool    `json:"aof_backup_enabled"`
	AofStorageConnectionString0    string  `json:"aof_storage_connection_string_0"`
	AofStorageConnectionString1    string  `json:"aof_storage_connection_string_1"`
	EnableAuthentication           bool    `json:"enable_authentication"`
	Maxclients                     float64 `json:"maxclients"`
	MaxfragmentationmemoryReserved float64 `json:"maxfragmentationmemory_reserved"`
	MaxmemoryDelta                 float64 `json:"maxmemory_delta"`
	MaxmemoryPolicy                string  `json:"maxmemory_policy"`
	MaxmemoryReserved              float64 `json:"maxmemory_reserved"`
	NotifyKeyspaceEvents           string  `json:"notify_keyspace_events"`
	RdbBackupEnabled               bool    `json:"rdb_backup_enabled"`
	RdbBackupFrequency             float64 `json:"rdb_backup_frequency"`
	RdbBackupMaxSnapshotCount      float64 `json:"rdb_backup_max_snapshot_count"`
	RdbStorageConnectionString     string  `json:"rdb_storage_connection_string"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
