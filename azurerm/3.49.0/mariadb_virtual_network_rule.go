// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mariadbvirtualnetworkrule "github.com/golingon/terraproviders/azurerm/3.49.0/mariadbvirtualnetworkrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMariadbVirtualNetworkRule(name string, args MariadbVirtualNetworkRuleArgs) *MariadbVirtualNetworkRule {
	return &MariadbVirtualNetworkRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MariadbVirtualNetworkRule)(nil)

type MariadbVirtualNetworkRule struct {
	Name  string
	Args  MariadbVirtualNetworkRuleArgs
	state *mariadbVirtualNetworkRuleState
}

func (mvnr *MariadbVirtualNetworkRule) Type() string {
	return "azurerm_mariadb_virtual_network_rule"
}

func (mvnr *MariadbVirtualNetworkRule) LocalName() string {
	return mvnr.Name
}

func (mvnr *MariadbVirtualNetworkRule) Configuration() interface{} {
	return mvnr.Args
}

func (mvnr *MariadbVirtualNetworkRule) Attributes() mariadbVirtualNetworkRuleAttributes {
	return mariadbVirtualNetworkRuleAttributes{ref: terra.ReferenceResource(mvnr)}
}

func (mvnr *MariadbVirtualNetworkRule) ImportState(av io.Reader) error {
	mvnr.state = &mariadbVirtualNetworkRuleState{}
	if err := json.NewDecoder(av).Decode(mvnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mvnr.Type(), mvnr.LocalName(), err)
	}
	return nil
}

func (mvnr *MariadbVirtualNetworkRule) State() (*mariadbVirtualNetworkRuleState, bool) {
	return mvnr.state, mvnr.state != nil
}

func (mvnr *MariadbVirtualNetworkRule) StateMust() *mariadbVirtualNetworkRuleState {
	if mvnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mvnr.Type(), mvnr.LocalName()))
	}
	return mvnr.state
}

func (mvnr *MariadbVirtualNetworkRule) DependOn() terra.Reference {
	return terra.ReferenceResource(mvnr)
}

type MariadbVirtualNetworkRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *mariadbvirtualnetworkrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MariadbVirtualNetworkRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mariadbVirtualNetworkRuleAttributes struct {
	ref terra.Reference
}

func (mvnr mariadbVirtualNetworkRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mvnr.ref.Append("id"))
}

func (mvnr mariadbVirtualNetworkRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mvnr.ref.Append("name"))
}

func (mvnr mariadbVirtualNetworkRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(mvnr.ref.Append("resource_group_name"))
}

func (mvnr mariadbVirtualNetworkRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(mvnr.ref.Append("server_name"))
}

func (mvnr mariadbVirtualNetworkRuleAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(mvnr.ref.Append("subnet_id"))
}

func (mvnr mariadbVirtualNetworkRuleAttributes) Timeouts() mariadbvirtualnetworkrule.TimeoutsAttributes {
	return terra.ReferenceSingle[mariadbvirtualnetworkrule.TimeoutsAttributes](mvnr.ref.Append("timeouts"))
}

type mariadbVirtualNetworkRuleState struct {
	Id                string                                   `json:"id"`
	Name              string                                   `json:"name"`
	ResourceGroupName string                                   `json:"resource_group_name"`
	ServerName        string                                   `json:"server_name"`
	SubnetId          string                                   `json:"subnet_id"`
	Timeouts          *mariadbvirtualnetworkrule.TimeoutsState `json:"timeouts"`
}
