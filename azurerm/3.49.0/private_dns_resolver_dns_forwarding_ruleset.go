// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	privatednsresolverdnsforwardingruleset "github.com/golingon/terraproviders/azurerm/3.49.0/privatednsresolverdnsforwardingruleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrivateDnsResolverDnsForwardingRuleset(name string, args PrivateDnsResolverDnsForwardingRulesetArgs) *PrivateDnsResolverDnsForwardingRuleset {
	return &PrivateDnsResolverDnsForwardingRuleset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrivateDnsResolverDnsForwardingRuleset)(nil)

type PrivateDnsResolverDnsForwardingRuleset struct {
	Name  string
	Args  PrivateDnsResolverDnsForwardingRulesetArgs
	state *privateDnsResolverDnsForwardingRulesetState
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) Type() string {
	return "azurerm_private_dns_resolver_dns_forwarding_ruleset"
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) LocalName() string {
	return pdrdfr.Name
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) Configuration() interface{} {
	return pdrdfr.Args
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) Attributes() privateDnsResolverDnsForwardingRulesetAttributes {
	return privateDnsResolverDnsForwardingRulesetAttributes{ref: terra.ReferenceResource(pdrdfr)}
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) ImportState(av io.Reader) error {
	pdrdfr.state = &privateDnsResolverDnsForwardingRulesetState{}
	if err := json.NewDecoder(av).Decode(pdrdfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pdrdfr.Type(), pdrdfr.LocalName(), err)
	}
	return nil
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) State() (*privateDnsResolverDnsForwardingRulesetState, bool) {
	return pdrdfr.state, pdrdfr.state != nil
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) StateMust() *privateDnsResolverDnsForwardingRulesetState {
	if pdrdfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pdrdfr.Type(), pdrdfr.LocalName()))
	}
	return pdrdfr.state
}

func (pdrdfr *PrivateDnsResolverDnsForwardingRuleset) DependOn() terra.Reference {
	return terra.ReferenceResource(pdrdfr)
}

type PrivateDnsResolverDnsForwardingRulesetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateDnsResolverOutboundEndpointIds: list of string, required
	PrivateDnsResolverOutboundEndpointIds terra.ListValue[terra.StringValue] `hcl:"private_dns_resolver_outbound_endpoint_ids,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *privatednsresolverdnsforwardingruleset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PrivateDnsResolverDnsForwardingRuleset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type privateDnsResolverDnsForwardingRulesetAttributes struct {
	ref terra.Reference
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pdrdfr.ref.Append("id"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pdrdfr.ref.Append("location"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pdrdfr.ref.Append("name"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) PrivateDnsResolverOutboundEndpointIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pdrdfr.ref.Append("private_dns_resolver_outbound_endpoint_ids"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(pdrdfr.ref.Append("resource_group_name"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pdrdfr.ref.Append("tags"))
}

func (pdrdfr privateDnsResolverDnsForwardingRulesetAttributes) Timeouts() privatednsresolverdnsforwardingruleset.TimeoutsAttributes {
	return terra.ReferenceSingle[privatednsresolverdnsforwardingruleset.TimeoutsAttributes](pdrdfr.ref.Append("timeouts"))
}

type privateDnsResolverDnsForwardingRulesetState struct {
	Id                                    string                                                `json:"id"`
	Location                              string                                                `json:"location"`
	Name                                  string                                                `json:"name"`
	PrivateDnsResolverOutboundEndpointIds []string                                              `json:"private_dns_resolver_outbound_endpoint_ids"`
	ResourceGroupName                     string                                                `json:"resource_group_name"`
	Tags                                  map[string]string                                     `json:"tags"`
	Timeouts                              *privatednsresolverdnsforwardingruleset.TimeoutsState `json:"timeouts"`
}
