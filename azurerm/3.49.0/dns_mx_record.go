// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dnsmxrecord "github.com/golingon/terraproviders/azurerm/3.49.0/dnsmxrecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsMxRecord(name string, args DnsMxRecordArgs) *DnsMxRecord {
	return &DnsMxRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsMxRecord)(nil)

type DnsMxRecord struct {
	Name  string
	Args  DnsMxRecordArgs
	state *dnsMxRecordState
}

func (dmr *DnsMxRecord) Type() string {
	return "azurerm_dns_mx_record"
}

func (dmr *DnsMxRecord) LocalName() string {
	return dmr.Name
}

func (dmr *DnsMxRecord) Configuration() interface{} {
	return dmr.Args
}

func (dmr *DnsMxRecord) Attributes() dnsMxRecordAttributes {
	return dnsMxRecordAttributes{ref: terra.ReferenceResource(dmr)}
}

func (dmr *DnsMxRecord) ImportState(av io.Reader) error {
	dmr.state = &dnsMxRecordState{}
	if err := json.NewDecoder(av).Decode(dmr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmr.Type(), dmr.LocalName(), err)
	}
	return nil
}

func (dmr *DnsMxRecord) State() (*dnsMxRecordState, bool) {
	return dmr.state, dmr.state != nil
}

func (dmr *DnsMxRecord) StateMust() *dnsMxRecordState {
	if dmr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmr.Type(), dmr.LocalName()))
	}
	return dmr.state
}

func (dmr *DnsMxRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(dmr)
}

type DnsMxRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Record: min=1
	Record []dnsmxrecord.Record `hcl:"record,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *dnsmxrecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsMxRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsMxRecordAttributes struct {
	ref terra.Reference
}

func (dmr dnsMxRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(dmr.ref.Append("fqdn"))
}

func (dmr dnsMxRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmr.ref.Append("id"))
}

func (dmr dnsMxRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dmr.ref.Append("name"))
}

func (dmr dnsMxRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dmr.ref.Append("resource_group_name"))
}

func (dmr dnsMxRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dmr.ref.Append("tags"))
}

func (dmr dnsMxRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(dmr.ref.Append("ttl"))
}

func (dmr dnsMxRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(dmr.ref.Append("zone_name"))
}

func (dmr dnsMxRecordAttributes) Record() terra.SetValue[dnsmxrecord.RecordAttributes] {
	return terra.ReferenceSet[dnsmxrecord.RecordAttributes](dmr.ref.Append("record"))
}

func (dmr dnsMxRecordAttributes) Timeouts() dnsmxrecord.TimeoutsAttributes {
	return terra.ReferenceSingle[dnsmxrecord.TimeoutsAttributes](dmr.ref.Append("timeouts"))
}

type dnsMxRecordState struct {
	Fqdn              string                     `json:"fqdn"`
	Id                string                     `json:"id"`
	Name              string                     `json:"name"`
	ResourceGroupName string                     `json:"resource_group_name"`
	Tags              map[string]string          `json:"tags"`
	Ttl               float64                    `json:"ttl"`
	ZoneName          string                     `json:"zone_name"`
	Record            []dnsmxrecord.RecordState  `json:"record"`
	Timeouts          *dnsmxrecord.TimeoutsState `json:"timeouts"`
}
