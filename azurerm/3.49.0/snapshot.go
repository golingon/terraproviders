// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	snapshot "github.com/golingon/terraproviders/azurerm/3.49.0/snapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSnapshot(name string, args SnapshotArgs) *Snapshot {
	return &Snapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Snapshot)(nil)

type Snapshot struct {
	Name  string
	Args  SnapshotArgs
	state *snapshotState
}

func (s *Snapshot) Type() string {
	return "azurerm_snapshot"
}

func (s *Snapshot) LocalName() string {
	return s.Name
}

func (s *Snapshot) Configuration() interface{} {
	return s.Args
}

func (s *Snapshot) Attributes() snapshotAttributes {
	return snapshotAttributes{ref: terra.ReferenceResource(s)}
}

func (s *Snapshot) ImportState(av io.Reader) error {
	s.state = &snapshotState{}
	if err := json.NewDecoder(av).Decode(s.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", s.Type(), s.LocalName(), err)
	}
	return nil
}

func (s *Snapshot) State() (*snapshotState, bool) {
	return s.state, s.state != nil
}

func (s *Snapshot) StateMust() *snapshotState {
	if s.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", s.Type(), s.LocalName()))
	}
	return s.state
}

func (s *Snapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(s)
}

type SnapshotArgs struct {
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceResourceId: string, optional
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// EncryptionSettings: optional
	EncryptionSettings *snapshot.EncryptionSettings `hcl:"encryption_settings,block"`
	// Timeouts: optional
	Timeouts *snapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Snapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type snapshotAttributes struct {
	ref terra.Reference
}

func (s snapshotAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("create_option"))
}

func (s snapshotAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("disk_size_gb"))
}

func (s snapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("id"))
}

func (s snapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("location"))
}

func (s snapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("name"))
}

func (s snapshotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("resource_group_name"))
}

func (s snapshotAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("source_resource_id"))
}

func (s snapshotAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("source_uri"))
}

func (s snapshotAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("storage_account_id"))
}

func (s snapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](s.ref.Append("tags"))
}

func (s snapshotAttributes) TrustedLaunchEnabled() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("trusted_launch_enabled"))
}

func (s snapshotAttributes) EncryptionSettings() terra.ListValue[snapshot.EncryptionSettingsAttributes] {
	return terra.ReferenceList[snapshot.EncryptionSettingsAttributes](s.ref.Append("encryption_settings"))
}

func (s snapshotAttributes) Timeouts() snapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[snapshot.TimeoutsAttributes](s.ref.Append("timeouts"))
}

type snapshotState struct {
	CreateOption         string                             `json:"create_option"`
	DiskSizeGb           float64                            `json:"disk_size_gb"`
	Id                   string                             `json:"id"`
	Location             string                             `json:"location"`
	Name                 string                             `json:"name"`
	ResourceGroupName    string                             `json:"resource_group_name"`
	SourceResourceId     string                             `json:"source_resource_id"`
	SourceUri            string                             `json:"source_uri"`
	StorageAccountId     string                             `json:"storage_account_id"`
	Tags                 map[string]string                  `json:"tags"`
	TrustedLaunchEnabled bool                               `json:"trusted_launch_enabled"`
	EncryptionSettings   []snapshot.EncryptionSettingsState `json:"encryption_settings"`
	Timeouts             *snapshot.TimeoutsState            `json:"timeouts"`
}
