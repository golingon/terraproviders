// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appservicepubliccertificate "github.com/golingon/terraproviders/azurerm/3.49.0/appservicepubliccertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServicePublicCertificate(name string, args AppServicePublicCertificateArgs) *AppServicePublicCertificate {
	return &AppServicePublicCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServicePublicCertificate)(nil)

type AppServicePublicCertificate struct {
	Name  string
	Args  AppServicePublicCertificateArgs
	state *appServicePublicCertificateState
}

func (aspc *AppServicePublicCertificate) Type() string {
	return "azurerm_app_service_public_certificate"
}

func (aspc *AppServicePublicCertificate) LocalName() string {
	return aspc.Name
}

func (aspc *AppServicePublicCertificate) Configuration() interface{} {
	return aspc.Args
}

func (aspc *AppServicePublicCertificate) Attributes() appServicePublicCertificateAttributes {
	return appServicePublicCertificateAttributes{ref: terra.ReferenceResource(aspc)}
}

func (aspc *AppServicePublicCertificate) ImportState(av io.Reader) error {
	aspc.state = &appServicePublicCertificateState{}
	if err := json.NewDecoder(av).Decode(aspc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspc.Type(), aspc.LocalName(), err)
	}
	return nil
}

func (aspc *AppServicePublicCertificate) State() (*appServicePublicCertificateState, bool) {
	return aspc.state, aspc.state != nil
}

func (aspc *AppServicePublicCertificate) StateMust() *appServicePublicCertificateState {
	if aspc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspc.Type(), aspc.LocalName()))
	}
	return aspc.state
}

func (aspc *AppServicePublicCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(aspc)
}

type AppServicePublicCertificateArgs struct {
	// AppServiceName: string, required
	AppServiceName terra.StringValue `hcl:"app_service_name,attr" validate:"required"`
	// Blob: string, required
	Blob terra.StringValue `hcl:"blob,attr" validate:"required"`
	// CertificateLocation: string, required
	CertificateLocation terra.StringValue `hcl:"certificate_location,attr" validate:"required"`
	// CertificateName: string, required
	CertificateName terra.StringValue `hcl:"certificate_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *appservicepubliccertificate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServicePublicCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServicePublicCertificateAttributes struct {
	ref terra.Reference
}

func (aspc appServicePublicCertificateAttributes) AppServiceName() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("app_service_name"))
}

func (aspc appServicePublicCertificateAttributes) Blob() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("blob"))
}

func (aspc appServicePublicCertificateAttributes) CertificateLocation() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("certificate_location"))
}

func (aspc appServicePublicCertificateAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("certificate_name"))
}

func (aspc appServicePublicCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("id"))
}

func (aspc appServicePublicCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("resource_group_name"))
}

func (aspc appServicePublicCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(aspc.ref.Append("thumbprint"))
}

func (aspc appServicePublicCertificateAttributes) Timeouts() appservicepubliccertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[appservicepubliccertificate.TimeoutsAttributes](aspc.ref.Append("timeouts"))
}

type appServicePublicCertificateState struct {
	AppServiceName      string                                     `json:"app_service_name"`
	Blob                string                                     `json:"blob"`
	CertificateLocation string                                     `json:"certificate_location"`
	CertificateName     string                                     `json:"certificate_name"`
	Id                  string                                     `json:"id"`
	ResourceGroupName   string                                     `json:"resource_group_name"`
	Thumbprint          string                                     `json:"thumbprint"`
	Timeouts            *appservicepubliccertificate.TimeoutsState `json:"timeouts"`
}
