// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqlstoredprocedure "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqlstoredprocedure"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlStoredProcedure(name string, args CosmosdbSqlStoredProcedureArgs) *CosmosdbSqlStoredProcedure {
	return &CosmosdbSqlStoredProcedure{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlStoredProcedure)(nil)

type CosmosdbSqlStoredProcedure struct {
	Name  string
	Args  CosmosdbSqlStoredProcedureArgs
	state *cosmosdbSqlStoredProcedureState
}

func (cssp *CosmosdbSqlStoredProcedure) Type() string {
	return "azurerm_cosmosdb_sql_stored_procedure"
}

func (cssp *CosmosdbSqlStoredProcedure) LocalName() string {
	return cssp.Name
}

func (cssp *CosmosdbSqlStoredProcedure) Configuration() interface{} {
	return cssp.Args
}

func (cssp *CosmosdbSqlStoredProcedure) Attributes() cosmosdbSqlStoredProcedureAttributes {
	return cosmosdbSqlStoredProcedureAttributes{ref: terra.ReferenceResource(cssp)}
}

func (cssp *CosmosdbSqlStoredProcedure) ImportState(av io.Reader) error {
	cssp.state = &cosmosdbSqlStoredProcedureState{}
	if err := json.NewDecoder(av).Decode(cssp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cssp.Type(), cssp.LocalName(), err)
	}
	return nil
}

func (cssp *CosmosdbSqlStoredProcedure) State() (*cosmosdbSqlStoredProcedureState, bool) {
	return cssp.state, cssp.state != nil
}

func (cssp *CosmosdbSqlStoredProcedure) StateMust() *cosmosdbSqlStoredProcedureState {
	if cssp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cssp.Type(), cssp.LocalName()))
	}
	return cssp.state
}

func (cssp *CosmosdbSqlStoredProcedure) DependOn() terra.Reference {
	return terra.ReferenceResource(cssp)
}

type CosmosdbSqlStoredProcedureArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbsqlstoredprocedure.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlStoredProcedure depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlStoredProcedureAttributes struct {
	ref terra.Reference
}

func (cssp cosmosdbSqlStoredProcedureAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("account_name"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) Body() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("body"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("container_name"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("database_name"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("id"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("name"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(cssp.ref.Append("resource_group_name"))
}

func (cssp cosmosdbSqlStoredProcedureAttributes) Timeouts() cosmosdbsqlstoredprocedure.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqlstoredprocedure.TimeoutsAttributes](cssp.ref.Append("timeouts"))
}

type cosmosdbSqlStoredProcedureState struct {
	AccountName       string                                    `json:"account_name"`
	Body              string                                    `json:"body"`
	ContainerName     string                                    `json:"container_name"`
	DatabaseName      string                                    `json:"database_name"`
	Id                string                                    `json:"id"`
	Name              string                                    `json:"name"`
	ResourceGroupName string                                    `json:"resource_group_name"`
	Timeouts          *cosmosdbsqlstoredprocedure.TimeoutsState `json:"timeouts"`
}
