// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package mediastreamingpolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CommonEncryptionCbcs struct {
	// CommonEncryptionCbcsClearKeyEncryption: optional
	ClearKeyEncryption *CommonEncryptionCbcsClearKeyEncryption `hcl:"clear_key_encryption,block"`
	// CommonEncryptionCbcsDefaultContentKey: optional
	DefaultContentKey *CommonEncryptionCbcsDefaultContentKey `hcl:"default_content_key,block"`
	// DrmFairplay: optional
	DrmFairplay *DrmFairplay `hcl:"drm_fairplay,block"`
	// CommonEncryptionCbcsEnabledProtocols: optional
	EnabledProtocols *CommonEncryptionCbcsEnabledProtocols `hcl:"enabled_protocols,block"`
}

type CommonEncryptionCbcsClearKeyEncryption struct {
	// CustomKeysAcquisitionUrlTemplate: string, required
	CustomKeysAcquisitionUrlTemplate terra.StringValue `hcl:"custom_keys_acquisition_url_template,attr" validate:"required"`
}

type CommonEncryptionCbcsDefaultContentKey struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
}

type DrmFairplay struct {
	// AllowPersistentLicense: bool, optional
	AllowPersistentLicense terra.BoolValue `hcl:"allow_persistent_license,attr"`
	// CustomLicenseAcquisitionUrlTemplate: string, optional
	CustomLicenseAcquisitionUrlTemplate terra.StringValue `hcl:"custom_license_acquisition_url_template,attr"`
}

type CommonEncryptionCbcsEnabledProtocols struct {
	// Dash: bool, optional
	Dash terra.BoolValue `hcl:"dash,attr"`
	// Download: bool, optional
	Download terra.BoolValue `hcl:"download,attr"`
	// Hls: bool, optional
	Hls terra.BoolValue `hcl:"hls,attr"`
	// SmoothStreaming: bool, optional
	SmoothStreaming terra.BoolValue `hcl:"smooth_streaming,attr"`
}

type CommonEncryptionCenc struct {
	// DrmWidevineCustomLicenseAcquisitionUrlTemplate: string, optional
	DrmWidevineCustomLicenseAcquisitionUrlTemplate terra.StringValue `hcl:"drm_widevine_custom_license_acquisition_url_template,attr"`
	// CommonEncryptionCencClearKeyEncryption: optional
	ClearKeyEncryption *CommonEncryptionCencClearKeyEncryption `hcl:"clear_key_encryption,block"`
	// ClearTrack: min=0
	ClearTrack []ClearTrack `hcl:"clear_track,block" validate:"min=0"`
	// ContentKeyToTrackMapping: min=0
	ContentKeyToTrackMapping []ContentKeyToTrackMapping `hcl:"content_key_to_track_mapping,block" validate:"min=0"`
	// CommonEncryptionCencDefaultContentKey: optional
	DefaultContentKey *CommonEncryptionCencDefaultContentKey `hcl:"default_content_key,block"`
	// DrmPlayready: optional
	DrmPlayready *DrmPlayready `hcl:"drm_playready,block"`
	// CommonEncryptionCencEnabledProtocols: optional
	EnabledProtocols *CommonEncryptionCencEnabledProtocols `hcl:"enabled_protocols,block"`
}

type CommonEncryptionCencClearKeyEncryption struct {
	// CustomKeysAcquisitionUrlTemplate: string, required
	CustomKeysAcquisitionUrlTemplate terra.StringValue `hcl:"custom_keys_acquisition_url_template,attr" validate:"required"`
}

type ClearTrack struct {
	// ClearTrackCondition: min=1
	Condition []ClearTrackCondition `hcl:"condition,block" validate:"min=1"`
}

type ClearTrackCondition struct {
	// Operation: string, required
	Operation terra.StringValue `hcl:"operation,attr" validate:"required"`
	// Property: string, required
	Property terra.StringValue `hcl:"property,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ContentKeyToTrackMapping struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// Track: min=1
	Track []Track `hcl:"track,block" validate:"min=1"`
}

type Track struct {
	// TrackCondition: min=1
	Condition []TrackCondition `hcl:"condition,block" validate:"min=1"`
}

type TrackCondition struct {
	// Operation: string, required
	Operation terra.StringValue `hcl:"operation,attr" validate:"required"`
	// Property: string, required
	Property terra.StringValue `hcl:"property,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type CommonEncryptionCencDefaultContentKey struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
}

type DrmPlayready struct {
	// CustomAttributes: string, optional
	CustomAttributes terra.StringValue `hcl:"custom_attributes,attr"`
	// CustomLicenseAcquisitionUrlTemplate: string, optional
	CustomLicenseAcquisitionUrlTemplate terra.StringValue `hcl:"custom_license_acquisition_url_template,attr"`
}

type CommonEncryptionCencEnabledProtocols struct {
	// Dash: bool, optional
	Dash terra.BoolValue `hcl:"dash,attr"`
	// Download: bool, optional
	Download terra.BoolValue `hcl:"download,attr"`
	// Hls: bool, optional
	Hls terra.BoolValue `hcl:"hls,attr"`
	// SmoothStreaming: bool, optional
	SmoothStreaming terra.BoolValue `hcl:"smooth_streaming,attr"`
}

type EnvelopeEncryption struct {
	// CustomKeysAcquisitionUrlTemplate: string, optional
	CustomKeysAcquisitionUrlTemplate terra.StringValue `hcl:"custom_keys_acquisition_url_template,attr"`
	// EnvelopeEncryptionDefaultContentKey: optional
	DefaultContentKey *EnvelopeEncryptionDefaultContentKey `hcl:"default_content_key,block"`
	// EnvelopeEncryptionEnabledProtocols: optional
	EnabledProtocols *EnvelopeEncryptionEnabledProtocols `hcl:"enabled_protocols,block"`
}

type EnvelopeEncryptionDefaultContentKey struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
}

type EnvelopeEncryptionEnabledProtocols struct {
	// Dash: bool, optional
	Dash terra.BoolValue `hcl:"dash,attr"`
	// Download: bool, optional
	Download terra.BoolValue `hcl:"download,attr"`
	// Hls: bool, optional
	Hls terra.BoolValue `hcl:"hls,attr"`
	// SmoothStreaming: bool, optional
	SmoothStreaming terra.BoolValue `hcl:"smooth_streaming,attr"`
}

type NoEncryptionEnabledProtocols struct {
	// Dash: bool, optional
	Dash terra.BoolValue `hcl:"dash,attr"`
	// Download: bool, optional
	Download terra.BoolValue `hcl:"download,attr"`
	// Hls: bool, optional
	Hls terra.BoolValue `hcl:"hls,attr"`
	// SmoothStreaming: bool, optional
	SmoothStreaming terra.BoolValue `hcl:"smooth_streaming,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type CommonEncryptionCbcsAttributes struct {
	ref terra.Reference
}

func (cec CommonEncryptionCbcsAttributes) InternalRef() terra.Reference {
	return cec.ref
}

func (cec CommonEncryptionCbcsAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCbcsAttributes {
	return CommonEncryptionCbcsAttributes{ref: ref}
}

func (cec CommonEncryptionCbcsAttributes) InternalTokens() hclwrite.Tokens {
	return cec.ref.InternalTokens()
}

func (cec CommonEncryptionCbcsAttributes) ClearKeyEncryption() terra.ListValue[CommonEncryptionCbcsClearKeyEncryptionAttributes] {
	return terra.ReferenceList[CommonEncryptionCbcsClearKeyEncryptionAttributes](cec.ref.Append("clear_key_encryption"))
}

func (cec CommonEncryptionCbcsAttributes) DefaultContentKey() terra.ListValue[CommonEncryptionCbcsDefaultContentKeyAttributes] {
	return terra.ReferenceList[CommonEncryptionCbcsDefaultContentKeyAttributes](cec.ref.Append("default_content_key"))
}

func (cec CommonEncryptionCbcsAttributes) DrmFairplay() terra.ListValue[DrmFairplayAttributes] {
	return terra.ReferenceList[DrmFairplayAttributes](cec.ref.Append("drm_fairplay"))
}

func (cec CommonEncryptionCbcsAttributes) EnabledProtocols() terra.ListValue[CommonEncryptionCbcsEnabledProtocolsAttributes] {
	return terra.ReferenceList[CommonEncryptionCbcsEnabledProtocolsAttributes](cec.ref.Append("enabled_protocols"))
}

type CommonEncryptionCbcsClearKeyEncryptionAttributes struct {
	ref terra.Reference
}

func (cke CommonEncryptionCbcsClearKeyEncryptionAttributes) InternalRef() terra.Reference {
	return cke.ref
}

func (cke CommonEncryptionCbcsClearKeyEncryptionAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCbcsClearKeyEncryptionAttributes {
	return CommonEncryptionCbcsClearKeyEncryptionAttributes{ref: ref}
}

func (cke CommonEncryptionCbcsClearKeyEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return cke.ref.InternalTokens()
}

func (cke CommonEncryptionCbcsClearKeyEncryptionAttributes) CustomKeysAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(cke.ref.Append("custom_keys_acquisition_url_template"))
}

type CommonEncryptionCbcsDefaultContentKeyAttributes struct {
	ref terra.Reference
}

func (dck CommonEncryptionCbcsDefaultContentKeyAttributes) InternalRef() terra.Reference {
	return dck.ref
}

func (dck CommonEncryptionCbcsDefaultContentKeyAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCbcsDefaultContentKeyAttributes {
	return CommonEncryptionCbcsDefaultContentKeyAttributes{ref: ref}
}

func (dck CommonEncryptionCbcsDefaultContentKeyAttributes) InternalTokens() hclwrite.Tokens {
	return dck.ref.InternalTokens()
}

func (dck CommonEncryptionCbcsDefaultContentKeyAttributes) Label() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("label"))
}

func (dck CommonEncryptionCbcsDefaultContentKeyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("policy_name"))
}

type DrmFairplayAttributes struct {
	ref terra.Reference
}

func (df DrmFairplayAttributes) InternalRef() terra.Reference {
	return df.ref
}

func (df DrmFairplayAttributes) InternalWithRef(ref terra.Reference) DrmFairplayAttributes {
	return DrmFairplayAttributes{ref: ref}
}

func (df DrmFairplayAttributes) InternalTokens() hclwrite.Tokens {
	return df.ref.InternalTokens()
}

func (df DrmFairplayAttributes) AllowPersistentLicense() terra.BoolValue {
	return terra.ReferenceBool(df.ref.Append("allow_persistent_license"))
}

func (df DrmFairplayAttributes) CustomLicenseAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(df.ref.Append("custom_license_acquisition_url_template"))
}

type CommonEncryptionCbcsEnabledProtocolsAttributes struct {
	ref terra.Reference
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) InternalRef() terra.Reference {
	return ep.ref
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCbcsEnabledProtocolsAttributes {
	return CommonEncryptionCbcsEnabledProtocolsAttributes{ref: ref}
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) InternalTokens() hclwrite.Tokens {
	return ep.ref.InternalTokens()
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) Dash() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("dash"))
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) Download() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("download"))
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) Hls() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("hls"))
}

func (ep CommonEncryptionCbcsEnabledProtocolsAttributes) SmoothStreaming() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("smooth_streaming"))
}

type CommonEncryptionCencAttributes struct {
	ref terra.Reference
}

func (cec CommonEncryptionCencAttributes) InternalRef() terra.Reference {
	return cec.ref
}

func (cec CommonEncryptionCencAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCencAttributes {
	return CommonEncryptionCencAttributes{ref: ref}
}

func (cec CommonEncryptionCencAttributes) InternalTokens() hclwrite.Tokens {
	return cec.ref.InternalTokens()
}

func (cec CommonEncryptionCencAttributes) DrmWidevineCustomLicenseAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("drm_widevine_custom_license_acquisition_url_template"))
}

func (cec CommonEncryptionCencAttributes) ClearKeyEncryption() terra.ListValue[CommonEncryptionCencClearKeyEncryptionAttributes] {
	return terra.ReferenceList[CommonEncryptionCencClearKeyEncryptionAttributes](cec.ref.Append("clear_key_encryption"))
}

func (cec CommonEncryptionCencAttributes) ClearTrack() terra.SetValue[ClearTrackAttributes] {
	return terra.ReferenceSet[ClearTrackAttributes](cec.ref.Append("clear_track"))
}

func (cec CommonEncryptionCencAttributes) ContentKeyToTrackMapping() terra.SetValue[ContentKeyToTrackMappingAttributes] {
	return terra.ReferenceSet[ContentKeyToTrackMappingAttributes](cec.ref.Append("content_key_to_track_mapping"))
}

func (cec CommonEncryptionCencAttributes) DefaultContentKey() terra.ListValue[CommonEncryptionCencDefaultContentKeyAttributes] {
	return terra.ReferenceList[CommonEncryptionCencDefaultContentKeyAttributes](cec.ref.Append("default_content_key"))
}

func (cec CommonEncryptionCencAttributes) DrmPlayready() terra.ListValue[DrmPlayreadyAttributes] {
	return terra.ReferenceList[DrmPlayreadyAttributes](cec.ref.Append("drm_playready"))
}

func (cec CommonEncryptionCencAttributes) EnabledProtocols() terra.ListValue[CommonEncryptionCencEnabledProtocolsAttributes] {
	return terra.ReferenceList[CommonEncryptionCencEnabledProtocolsAttributes](cec.ref.Append("enabled_protocols"))
}

type CommonEncryptionCencClearKeyEncryptionAttributes struct {
	ref terra.Reference
}

func (cke CommonEncryptionCencClearKeyEncryptionAttributes) InternalRef() terra.Reference {
	return cke.ref
}

func (cke CommonEncryptionCencClearKeyEncryptionAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCencClearKeyEncryptionAttributes {
	return CommonEncryptionCencClearKeyEncryptionAttributes{ref: ref}
}

func (cke CommonEncryptionCencClearKeyEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return cke.ref.InternalTokens()
}

func (cke CommonEncryptionCencClearKeyEncryptionAttributes) CustomKeysAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(cke.ref.Append("custom_keys_acquisition_url_template"))
}

type ClearTrackAttributes struct {
	ref terra.Reference
}

func (ct ClearTrackAttributes) InternalRef() terra.Reference {
	return ct.ref
}

func (ct ClearTrackAttributes) InternalWithRef(ref terra.Reference) ClearTrackAttributes {
	return ClearTrackAttributes{ref: ref}
}

func (ct ClearTrackAttributes) InternalTokens() hclwrite.Tokens {
	return ct.ref.InternalTokens()
}

func (ct ClearTrackAttributes) Condition() terra.SetValue[ClearTrackConditionAttributes] {
	return terra.ReferenceSet[ClearTrackConditionAttributes](ct.ref.Append("condition"))
}

type ClearTrackConditionAttributes struct {
	ref terra.Reference
}

func (c ClearTrackConditionAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ClearTrackConditionAttributes) InternalWithRef(ref terra.Reference) ClearTrackConditionAttributes {
	return ClearTrackConditionAttributes{ref: ref}
}

func (c ClearTrackConditionAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ClearTrackConditionAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("operation"))
}

func (c ClearTrackConditionAttributes) Property() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("property"))
}

func (c ClearTrackConditionAttributes) Value() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("value"))
}

type ContentKeyToTrackMappingAttributes struct {
	ref terra.Reference
}

func (ckttm ContentKeyToTrackMappingAttributes) InternalRef() terra.Reference {
	return ckttm.ref
}

func (ckttm ContentKeyToTrackMappingAttributes) InternalWithRef(ref terra.Reference) ContentKeyToTrackMappingAttributes {
	return ContentKeyToTrackMappingAttributes{ref: ref}
}

func (ckttm ContentKeyToTrackMappingAttributes) InternalTokens() hclwrite.Tokens {
	return ckttm.ref.InternalTokens()
}

func (ckttm ContentKeyToTrackMappingAttributes) Label() terra.StringValue {
	return terra.ReferenceString(ckttm.ref.Append("label"))
}

func (ckttm ContentKeyToTrackMappingAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceString(ckttm.ref.Append("policy_name"))
}

func (ckttm ContentKeyToTrackMappingAttributes) Track() terra.SetValue[TrackAttributes] {
	return terra.ReferenceSet[TrackAttributes](ckttm.ref.Append("track"))
}

type TrackAttributes struct {
	ref terra.Reference
}

func (t TrackAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TrackAttributes) InternalWithRef(ref terra.Reference) TrackAttributes {
	return TrackAttributes{ref: ref}
}

func (t TrackAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TrackAttributes) Condition() terra.SetValue[TrackConditionAttributes] {
	return terra.ReferenceSet[TrackConditionAttributes](t.ref.Append("condition"))
}

type TrackConditionAttributes struct {
	ref terra.Reference
}

func (c TrackConditionAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c TrackConditionAttributes) InternalWithRef(ref terra.Reference) TrackConditionAttributes {
	return TrackConditionAttributes{ref: ref}
}

func (c TrackConditionAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c TrackConditionAttributes) Operation() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("operation"))
}

func (c TrackConditionAttributes) Property() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("property"))
}

func (c TrackConditionAttributes) Value() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("value"))
}

type CommonEncryptionCencDefaultContentKeyAttributes struct {
	ref terra.Reference
}

func (dck CommonEncryptionCencDefaultContentKeyAttributes) InternalRef() terra.Reference {
	return dck.ref
}

func (dck CommonEncryptionCencDefaultContentKeyAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCencDefaultContentKeyAttributes {
	return CommonEncryptionCencDefaultContentKeyAttributes{ref: ref}
}

func (dck CommonEncryptionCencDefaultContentKeyAttributes) InternalTokens() hclwrite.Tokens {
	return dck.ref.InternalTokens()
}

func (dck CommonEncryptionCencDefaultContentKeyAttributes) Label() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("label"))
}

func (dck CommonEncryptionCencDefaultContentKeyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("policy_name"))
}

type DrmPlayreadyAttributes struct {
	ref terra.Reference
}

func (dp DrmPlayreadyAttributes) InternalRef() terra.Reference {
	return dp.ref
}

func (dp DrmPlayreadyAttributes) InternalWithRef(ref terra.Reference) DrmPlayreadyAttributes {
	return DrmPlayreadyAttributes{ref: ref}
}

func (dp DrmPlayreadyAttributes) InternalTokens() hclwrite.Tokens {
	return dp.ref.InternalTokens()
}

func (dp DrmPlayreadyAttributes) CustomAttributes() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("custom_attributes"))
}

func (dp DrmPlayreadyAttributes) CustomLicenseAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("custom_license_acquisition_url_template"))
}

type CommonEncryptionCencEnabledProtocolsAttributes struct {
	ref terra.Reference
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) InternalRef() terra.Reference {
	return ep.ref
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) InternalWithRef(ref terra.Reference) CommonEncryptionCencEnabledProtocolsAttributes {
	return CommonEncryptionCencEnabledProtocolsAttributes{ref: ref}
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) InternalTokens() hclwrite.Tokens {
	return ep.ref.InternalTokens()
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) Dash() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("dash"))
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) Download() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("download"))
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) Hls() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("hls"))
}

func (ep CommonEncryptionCencEnabledProtocolsAttributes) SmoothStreaming() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("smooth_streaming"))
}

type EnvelopeEncryptionAttributes struct {
	ref terra.Reference
}

func (ee EnvelopeEncryptionAttributes) InternalRef() terra.Reference {
	return ee.ref
}

func (ee EnvelopeEncryptionAttributes) InternalWithRef(ref terra.Reference) EnvelopeEncryptionAttributes {
	return EnvelopeEncryptionAttributes{ref: ref}
}

func (ee EnvelopeEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return ee.ref.InternalTokens()
}

func (ee EnvelopeEncryptionAttributes) CustomKeysAcquisitionUrlTemplate() terra.StringValue {
	return terra.ReferenceString(ee.ref.Append("custom_keys_acquisition_url_template"))
}

func (ee EnvelopeEncryptionAttributes) DefaultContentKey() terra.ListValue[EnvelopeEncryptionDefaultContentKeyAttributes] {
	return terra.ReferenceList[EnvelopeEncryptionDefaultContentKeyAttributes](ee.ref.Append("default_content_key"))
}

func (ee EnvelopeEncryptionAttributes) EnabledProtocols() terra.ListValue[EnvelopeEncryptionEnabledProtocolsAttributes] {
	return terra.ReferenceList[EnvelopeEncryptionEnabledProtocolsAttributes](ee.ref.Append("enabled_protocols"))
}

type EnvelopeEncryptionDefaultContentKeyAttributes struct {
	ref terra.Reference
}

func (dck EnvelopeEncryptionDefaultContentKeyAttributes) InternalRef() terra.Reference {
	return dck.ref
}

func (dck EnvelopeEncryptionDefaultContentKeyAttributes) InternalWithRef(ref terra.Reference) EnvelopeEncryptionDefaultContentKeyAttributes {
	return EnvelopeEncryptionDefaultContentKeyAttributes{ref: ref}
}

func (dck EnvelopeEncryptionDefaultContentKeyAttributes) InternalTokens() hclwrite.Tokens {
	return dck.ref.InternalTokens()
}

func (dck EnvelopeEncryptionDefaultContentKeyAttributes) Label() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("label"))
}

func (dck EnvelopeEncryptionDefaultContentKeyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceString(dck.ref.Append("policy_name"))
}

type EnvelopeEncryptionEnabledProtocolsAttributes struct {
	ref terra.Reference
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) InternalRef() terra.Reference {
	return ep.ref
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) InternalWithRef(ref terra.Reference) EnvelopeEncryptionEnabledProtocolsAttributes {
	return EnvelopeEncryptionEnabledProtocolsAttributes{ref: ref}
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) InternalTokens() hclwrite.Tokens {
	return ep.ref.InternalTokens()
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) Dash() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("dash"))
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) Download() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("download"))
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) Hls() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("hls"))
}

func (ep EnvelopeEncryptionEnabledProtocolsAttributes) SmoothStreaming() terra.BoolValue {
	return terra.ReferenceBool(ep.ref.Append("smooth_streaming"))
}

type NoEncryptionEnabledProtocolsAttributes struct {
	ref terra.Reference
}

func (neep NoEncryptionEnabledProtocolsAttributes) InternalRef() terra.Reference {
	return neep.ref
}

func (neep NoEncryptionEnabledProtocolsAttributes) InternalWithRef(ref terra.Reference) NoEncryptionEnabledProtocolsAttributes {
	return NoEncryptionEnabledProtocolsAttributes{ref: ref}
}

func (neep NoEncryptionEnabledProtocolsAttributes) InternalTokens() hclwrite.Tokens {
	return neep.ref.InternalTokens()
}

func (neep NoEncryptionEnabledProtocolsAttributes) Dash() terra.BoolValue {
	return terra.ReferenceBool(neep.ref.Append("dash"))
}

func (neep NoEncryptionEnabledProtocolsAttributes) Download() terra.BoolValue {
	return terra.ReferenceBool(neep.ref.Append("download"))
}

func (neep NoEncryptionEnabledProtocolsAttributes) Hls() terra.BoolValue {
	return terra.ReferenceBool(neep.ref.Append("hls"))
}

func (neep NoEncryptionEnabledProtocolsAttributes) SmoothStreaming() terra.BoolValue {
	return terra.ReferenceBool(neep.ref.Append("smooth_streaming"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type CommonEncryptionCbcsState struct {
	ClearKeyEncryption []CommonEncryptionCbcsClearKeyEncryptionState `json:"clear_key_encryption"`
	DefaultContentKey  []CommonEncryptionCbcsDefaultContentKeyState  `json:"default_content_key"`
	DrmFairplay        []DrmFairplayState                            `json:"drm_fairplay"`
	EnabledProtocols   []CommonEncryptionCbcsEnabledProtocolsState   `json:"enabled_protocols"`
}

type CommonEncryptionCbcsClearKeyEncryptionState struct {
	CustomKeysAcquisitionUrlTemplate string `json:"custom_keys_acquisition_url_template"`
}

type CommonEncryptionCbcsDefaultContentKeyState struct {
	Label      string `json:"label"`
	PolicyName string `json:"policy_name"`
}

type DrmFairplayState struct {
	AllowPersistentLicense              bool   `json:"allow_persistent_license"`
	CustomLicenseAcquisitionUrlTemplate string `json:"custom_license_acquisition_url_template"`
}

type CommonEncryptionCbcsEnabledProtocolsState struct {
	Dash            bool `json:"dash"`
	Download        bool `json:"download"`
	Hls             bool `json:"hls"`
	SmoothStreaming bool `json:"smooth_streaming"`
}

type CommonEncryptionCencState struct {
	DrmWidevineCustomLicenseAcquisitionUrlTemplate string                                        `json:"drm_widevine_custom_license_acquisition_url_template"`
	ClearKeyEncryption                             []CommonEncryptionCencClearKeyEncryptionState `json:"clear_key_encryption"`
	ClearTrack                                     []ClearTrackState                             `json:"clear_track"`
	ContentKeyToTrackMapping                       []ContentKeyToTrackMappingState               `json:"content_key_to_track_mapping"`
	DefaultContentKey                              []CommonEncryptionCencDefaultContentKeyState  `json:"default_content_key"`
	DrmPlayready                                   []DrmPlayreadyState                           `json:"drm_playready"`
	EnabledProtocols                               []CommonEncryptionCencEnabledProtocolsState   `json:"enabled_protocols"`
}

type CommonEncryptionCencClearKeyEncryptionState struct {
	CustomKeysAcquisitionUrlTemplate string `json:"custom_keys_acquisition_url_template"`
}

type ClearTrackState struct {
	Condition []ClearTrackConditionState `json:"condition"`
}

type ClearTrackConditionState struct {
	Operation string `json:"operation"`
	Property  string `json:"property"`
	Value     string `json:"value"`
}

type ContentKeyToTrackMappingState struct {
	Label      string       `json:"label"`
	PolicyName string       `json:"policy_name"`
	Track      []TrackState `json:"track"`
}

type TrackState struct {
	Condition []TrackConditionState `json:"condition"`
}

type TrackConditionState struct {
	Operation string `json:"operation"`
	Property  string `json:"property"`
	Value     string `json:"value"`
}

type CommonEncryptionCencDefaultContentKeyState struct {
	Label      string `json:"label"`
	PolicyName string `json:"policy_name"`
}

type DrmPlayreadyState struct {
	CustomAttributes                    string `json:"custom_attributes"`
	CustomLicenseAcquisitionUrlTemplate string `json:"custom_license_acquisition_url_template"`
}

type CommonEncryptionCencEnabledProtocolsState struct {
	Dash            bool `json:"dash"`
	Download        bool `json:"download"`
	Hls             bool `json:"hls"`
	SmoothStreaming bool `json:"smooth_streaming"`
}

type EnvelopeEncryptionState struct {
	CustomKeysAcquisitionUrlTemplate string                                     `json:"custom_keys_acquisition_url_template"`
	DefaultContentKey                []EnvelopeEncryptionDefaultContentKeyState `json:"default_content_key"`
	EnabledProtocols                 []EnvelopeEncryptionEnabledProtocolsState  `json:"enabled_protocols"`
}

type EnvelopeEncryptionDefaultContentKeyState struct {
	Label      string `json:"label"`
	PolicyName string `json:"policy_name"`
}

type EnvelopeEncryptionEnabledProtocolsState struct {
	Dash            bool `json:"dash"`
	Download        bool `json:"download"`
	Hls             bool `json:"hls"`
	SmoothStreaming bool `json:"smooth_streaming"`
}

type NoEncryptionEnabledProtocolsState struct {
	Dash            bool `json:"dash"`
	Download        bool `json:"download"`
	Hls             bool `json:"hls"`
	SmoothStreaming bool `json:"smooth_streaming"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
