// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package databatchpool

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoScale struct{}

type Certificate struct{}

type ContainerConfiguration struct {
	// ContainerRegistries: min=0
	ContainerRegistries []ContainerRegistries `hcl:"container_registries,block" validate:"min=0"`
}

type ContainerRegistries struct{}

type DataDisks struct{}

type DiskEncryption struct{}

type Extensions struct{}

type FixedScale struct{}

type Mount struct {
	// AzureBlobFileSystem: min=0
	AzureBlobFileSystem []AzureBlobFileSystem `hcl:"azure_blob_file_system,block" validate:"min=0"`
	// AzureFileShare: min=0
	AzureFileShare []AzureFileShare `hcl:"azure_file_share,block" validate:"min=0"`
	// CifsMount: min=0
	CifsMount []CifsMount `hcl:"cifs_mount,block" validate:"min=0"`
	// NfsMount: min=0
	NfsMount []NfsMount `hcl:"nfs_mount,block" validate:"min=0"`
}

type AzureBlobFileSystem struct{}

type AzureFileShare struct{}

type CifsMount struct{}

type NfsMount struct{}

type NetworkConfiguration struct {
	// EndpointConfiguration: min=0
	EndpointConfiguration []EndpointConfiguration `hcl:"endpoint_configuration,block" validate:"min=0"`
}

type EndpointConfiguration struct {
	// NetworkSecurityGroupRules: min=0
	NetworkSecurityGroupRules []NetworkSecurityGroupRules `hcl:"network_security_group_rules,block" validate:"min=0"`
}

type NetworkSecurityGroupRules struct{}

type NodePlacement struct{}

type StartTask struct {
	// Container: min=0
	Container []Container `hcl:"container,block" validate:"min=0"`
	// ResourceFile: min=0
	ResourceFile []ResourceFile `hcl:"resource_file,block" validate:"min=0"`
	// UserIdentity: min=0
	UserIdentity []UserIdentity `hcl:"user_identity,block" validate:"min=0"`
}

type Container struct {
	// Registry: min=0
	Registry []Registry `hcl:"registry,block" validate:"min=0"`
}

type Registry struct{}

type ResourceFile struct{}

type UserIdentity struct {
	// AutoUser: min=0
	AutoUser []AutoUser `hcl:"auto_user,block" validate:"min=0"`
}

type AutoUser struct{}

type StorageImageReference struct{}

type TaskSchedulingPolicy struct{}

type UserAccounts struct {
	// LinuxUserConfiguration: min=0
	LinuxUserConfiguration []LinuxUserConfiguration `hcl:"linux_user_configuration,block" validate:"min=0"`
	// WindowsUserConfiguration: min=0
	WindowsUserConfiguration []WindowsUserConfiguration `hcl:"windows_user_configuration,block" validate:"min=0"`
}

type LinuxUserConfiguration struct{}

type WindowsUserConfiguration struct{}

type Windows struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AutoScaleAttributes struct {
	ref terra.Reference
}

func (as AutoScaleAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AutoScaleAttributes) InternalWithRef(ref terra.Reference) AutoScaleAttributes {
	return AutoScaleAttributes{ref: ref}
}

func (as AutoScaleAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AutoScaleAttributes) EvaluationInterval() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("evaluation_interval"))
}

func (as AutoScaleAttributes) Formula() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("formula"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("id"))
}

func (c CertificateAttributes) StoreLocation() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("store_location"))
}

func (c CertificateAttributes) StoreName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("store_name"))
}

func (c CertificateAttributes) Visibility() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](c.ref.Append("visibility"))
}

type ContainerConfigurationAttributes struct {
	ref terra.Reference
}

func (cc ContainerConfigurationAttributes) InternalRef() terra.Reference {
	return cc.ref
}

func (cc ContainerConfigurationAttributes) InternalWithRef(ref terra.Reference) ContainerConfigurationAttributes {
	return ContainerConfigurationAttributes{ref: ref}
}

func (cc ContainerConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return cc.ref.InternalTokens()
}

func (cc ContainerConfigurationAttributes) ContainerImageNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cc.ref.Append("container_image_names"))
}

func (cc ContainerConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("type"))
}

func (cc ContainerConfigurationAttributes) ContainerRegistries() terra.ListValue[ContainerRegistriesAttributes] {
	return terra.ReferenceList[ContainerRegistriesAttributes](cc.ref.Append("container_registries"))
}

type ContainerRegistriesAttributes struct {
	ref terra.Reference
}

func (cr ContainerRegistriesAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr ContainerRegistriesAttributes) InternalWithRef(ref terra.Reference) ContainerRegistriesAttributes {
	return ContainerRegistriesAttributes{ref: ref}
}

func (cr ContainerRegistriesAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr ContainerRegistriesAttributes) Password() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("password"))
}

func (cr ContainerRegistriesAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("registry_server"))
}

func (cr ContainerRegistriesAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("user_assigned_identity_id"))
}

func (cr ContainerRegistriesAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("user_name"))
}

type DataDisksAttributes struct {
	ref terra.Reference
}

func (dd DataDisksAttributes) InternalRef() terra.Reference {
	return dd.ref
}

func (dd DataDisksAttributes) InternalWithRef(ref terra.Reference) DataDisksAttributes {
	return DataDisksAttributes{ref: ref}
}

func (dd DataDisksAttributes) InternalTokens() hclwrite.Tokens {
	return dd.ref.InternalTokens()
}

func (dd DataDisksAttributes) Caching() terra.StringValue {
	return terra.ReferenceString(dd.ref.Append("caching"))
}

func (dd DataDisksAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceNumber(dd.ref.Append("disk_size_gb"))
}

func (dd DataDisksAttributes) Lun() terra.NumberValue {
	return terra.ReferenceNumber(dd.ref.Append("lun"))
}

func (dd DataDisksAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceString(dd.ref.Append("storage_account_type"))
}

type DiskEncryptionAttributes struct {
	ref terra.Reference
}

func (de DiskEncryptionAttributes) InternalRef() terra.Reference {
	return de.ref
}

func (de DiskEncryptionAttributes) InternalWithRef(ref terra.Reference) DiskEncryptionAttributes {
	return DiskEncryptionAttributes{ref: ref}
}

func (de DiskEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return de.ref.InternalTokens()
}

func (de DiskEncryptionAttributes) DiskEncryptionTarget() terra.StringValue {
	return terra.ReferenceString(de.ref.Append("disk_encryption_target"))
}

type ExtensionsAttributes struct {
	ref terra.Reference
}

func (e ExtensionsAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e ExtensionsAttributes) InternalWithRef(ref terra.Reference) ExtensionsAttributes {
	return ExtensionsAttributes{ref: ref}
}

func (e ExtensionsAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ExtensionsAttributes) AutoUpgradeMinorVersion() terra.BoolValue {
	return terra.ReferenceBool(e.ref.Append("auto_upgrade_minor_version"))
}

func (e ExtensionsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("name"))
}

func (e ExtensionsAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("protected_settings"))
}

func (e ExtensionsAttributes) ProvisionAfterExtensions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](e.ref.Append("provision_after_extensions"))
}

func (e ExtensionsAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("publisher"))
}

func (e ExtensionsAttributes) SettingsJson() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("settings_json"))
}

func (e ExtensionsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("type"))
}

func (e ExtensionsAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("type_handler_version"))
}

type FixedScaleAttributes struct {
	ref terra.Reference
}

func (fs FixedScaleAttributes) InternalRef() terra.Reference {
	return fs.ref
}

func (fs FixedScaleAttributes) InternalWithRef(ref terra.Reference) FixedScaleAttributes {
	return FixedScaleAttributes{ref: ref}
}

func (fs FixedScaleAttributes) InternalTokens() hclwrite.Tokens {
	return fs.ref.InternalTokens()
}

func (fs FixedScaleAttributes) ResizeTimeout() terra.StringValue {
	return terra.ReferenceString(fs.ref.Append("resize_timeout"))
}

func (fs FixedScaleAttributes) TargetDedicatedNodes() terra.NumberValue {
	return terra.ReferenceNumber(fs.ref.Append("target_dedicated_nodes"))
}

func (fs FixedScaleAttributes) TargetLowPriorityNodes() terra.NumberValue {
	return terra.ReferenceNumber(fs.ref.Append("target_low_priority_nodes"))
}

type MountAttributes struct {
	ref terra.Reference
}

func (m MountAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MountAttributes) InternalWithRef(ref terra.Reference) MountAttributes {
	return MountAttributes{ref: ref}
}

func (m MountAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MountAttributes) AzureBlobFileSystem() terra.ListValue[AzureBlobFileSystemAttributes] {
	return terra.ReferenceList[AzureBlobFileSystemAttributes](m.ref.Append("azure_blob_file_system"))
}

func (m MountAttributes) AzureFileShare() terra.ListValue[AzureFileShareAttributes] {
	return terra.ReferenceList[AzureFileShareAttributes](m.ref.Append("azure_file_share"))
}

func (m MountAttributes) CifsMount() terra.ListValue[CifsMountAttributes] {
	return terra.ReferenceList[CifsMountAttributes](m.ref.Append("cifs_mount"))
}

func (m MountAttributes) NfsMount() terra.ListValue[NfsMountAttributes] {
	return terra.ReferenceList[NfsMountAttributes](m.ref.Append("nfs_mount"))
}

type AzureBlobFileSystemAttributes struct {
	ref terra.Reference
}

func (abfs AzureBlobFileSystemAttributes) InternalRef() terra.Reference {
	return abfs.ref
}

func (abfs AzureBlobFileSystemAttributes) InternalWithRef(ref terra.Reference) AzureBlobFileSystemAttributes {
	return AzureBlobFileSystemAttributes{ref: ref}
}

func (abfs AzureBlobFileSystemAttributes) InternalTokens() hclwrite.Tokens {
	return abfs.ref.InternalTokens()
}

func (abfs AzureBlobFileSystemAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("account_key"))
}

func (abfs AzureBlobFileSystemAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("account_name"))
}

func (abfs AzureBlobFileSystemAttributes) BlobfuseOptions() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("blobfuse_options"))
}

func (abfs AzureBlobFileSystemAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("container_name"))
}

func (abfs AzureBlobFileSystemAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("identity_id"))
}

func (abfs AzureBlobFileSystemAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("relative_mount_path"))
}

func (abfs AzureBlobFileSystemAttributes) SasKey() terra.StringValue {
	return terra.ReferenceString(abfs.ref.Append("sas_key"))
}

type AzureFileShareAttributes struct {
	ref terra.Reference
}

func (afs AzureFileShareAttributes) InternalRef() terra.Reference {
	return afs.ref
}

func (afs AzureFileShareAttributes) InternalWithRef(ref terra.Reference) AzureFileShareAttributes {
	return AzureFileShareAttributes{ref: ref}
}

func (afs AzureFileShareAttributes) InternalTokens() hclwrite.Tokens {
	return afs.ref.InternalTokens()
}

func (afs AzureFileShareAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("account_key"))
}

func (afs AzureFileShareAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("account_name"))
}

func (afs AzureFileShareAttributes) AzureFileUrl() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("azure_file_url"))
}

func (afs AzureFileShareAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("mount_options"))
}

func (afs AzureFileShareAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("relative_mount_path"))
}

type CifsMountAttributes struct {
	ref terra.Reference
}

func (cm CifsMountAttributes) InternalRef() terra.Reference {
	return cm.ref
}

func (cm CifsMountAttributes) InternalWithRef(ref terra.Reference) CifsMountAttributes {
	return CifsMountAttributes{ref: ref}
}

func (cm CifsMountAttributes) InternalTokens() hclwrite.Tokens {
	return cm.ref.InternalTokens()
}

func (cm CifsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("mount_options"))
}

func (cm CifsMountAttributes) Password() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("password"))
}

func (cm CifsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("relative_mount_path"))
}

func (cm CifsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("source"))
}

func (cm CifsMountAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(cm.ref.Append("user_name"))
}

type NfsMountAttributes struct {
	ref terra.Reference
}

func (nm NfsMountAttributes) InternalRef() terra.Reference {
	return nm.ref
}

func (nm NfsMountAttributes) InternalWithRef(ref terra.Reference) NfsMountAttributes {
	return NfsMountAttributes{ref: ref}
}

func (nm NfsMountAttributes) InternalTokens() hclwrite.Tokens {
	return nm.ref.InternalTokens()
}

func (nm NfsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceString(nm.ref.Append("mount_options"))
}

func (nm NfsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceString(nm.ref.Append("relative_mount_path"))
}

func (nm NfsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceString(nm.ref.Append("source"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) DynamicVnetAssignmentScope() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("dynamic_vnet_assignment_scope"))
}

func (nc NetworkConfigurationAttributes) PublicAddressProvisioningType() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("public_address_provisioning_type"))
}

func (nc NetworkConfigurationAttributes) PublicIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("public_ips"))
}

func (nc NetworkConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("subnet_id"))
}

func (nc NetworkConfigurationAttributes) EndpointConfiguration() terra.ListValue[EndpointConfigurationAttributes] {
	return terra.ReferenceList[EndpointConfigurationAttributes](nc.ref.Append("endpoint_configuration"))
}

type EndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EndpointConfigurationAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec EndpointConfigurationAttributes) InternalWithRef(ref terra.Reference) EndpointConfigurationAttributes {
	return EndpointConfigurationAttributes{ref: ref}
}

func (ec EndpointConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec EndpointConfigurationAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("backend_port"))
}

func (ec EndpointConfigurationAttributes) FrontendPortRange() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("frontend_port_range"))
}

func (ec EndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("name"))
}

func (ec EndpointConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("protocol"))
}

func (ec EndpointConfigurationAttributes) NetworkSecurityGroupRules() terra.ListValue[NetworkSecurityGroupRulesAttributes] {
	return terra.ReferenceList[NetworkSecurityGroupRulesAttributes](ec.ref.Append("network_security_group_rules"))
}

type NetworkSecurityGroupRulesAttributes struct {
	ref terra.Reference
}

func (nsgr NetworkSecurityGroupRulesAttributes) InternalRef() terra.Reference {
	return nsgr.ref
}

func (nsgr NetworkSecurityGroupRulesAttributes) InternalWithRef(ref terra.Reference) NetworkSecurityGroupRulesAttributes {
	return NetworkSecurityGroupRulesAttributes{ref: ref}
}

func (nsgr NetworkSecurityGroupRulesAttributes) InternalTokens() hclwrite.Tokens {
	return nsgr.ref.InternalTokens()
}

func (nsgr NetworkSecurityGroupRulesAttributes) Access() terra.StringValue {
	return terra.ReferenceString(nsgr.ref.Append("access"))
}

func (nsgr NetworkSecurityGroupRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(nsgr.ref.Append("priority"))
}

func (nsgr NetworkSecurityGroupRulesAttributes) SourceAddressPrefix() terra.StringValue {
	return terra.ReferenceString(nsgr.ref.Append("source_address_prefix"))
}

func (nsgr NetworkSecurityGroupRulesAttributes) SourcePortRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nsgr.ref.Append("source_port_ranges"))
}

type NodePlacementAttributes struct {
	ref terra.Reference
}

func (np NodePlacementAttributes) InternalRef() terra.Reference {
	return np.ref
}

func (np NodePlacementAttributes) InternalWithRef(ref terra.Reference) NodePlacementAttributes {
	return NodePlacementAttributes{ref: ref}
}

func (np NodePlacementAttributes) InternalTokens() hclwrite.Tokens {
	return np.ref.InternalTokens()
}

func (np NodePlacementAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(np.ref.Append("policy"))
}

type StartTaskAttributes struct {
	ref terra.Reference
}

func (st StartTaskAttributes) InternalRef() terra.Reference {
	return st.ref
}

func (st StartTaskAttributes) InternalWithRef(ref terra.Reference) StartTaskAttributes {
	return StartTaskAttributes{ref: ref}
}

func (st StartTaskAttributes) InternalTokens() hclwrite.Tokens {
	return st.ref.InternalTokens()
}

func (st StartTaskAttributes) CommandLine() terra.StringValue {
	return terra.ReferenceString(st.ref.Append("command_line"))
}

func (st StartTaskAttributes) CommonEnvironmentProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](st.ref.Append("common_environment_properties"))
}

func (st StartTaskAttributes) TaskRetryMaximum() terra.NumberValue {
	return terra.ReferenceNumber(st.ref.Append("task_retry_maximum"))
}

func (st StartTaskAttributes) WaitForSuccess() terra.BoolValue {
	return terra.ReferenceBool(st.ref.Append("wait_for_success"))
}

func (st StartTaskAttributes) Container() terra.ListValue[ContainerAttributes] {
	return terra.ReferenceList[ContainerAttributes](st.ref.Append("container"))
}

func (st StartTaskAttributes) ResourceFile() terra.ListValue[ResourceFileAttributes] {
	return terra.ReferenceList[ResourceFileAttributes](st.ref.Append("resource_file"))
}

func (st StartTaskAttributes) UserIdentity() terra.ListValue[UserIdentityAttributes] {
	return terra.ReferenceList[UserIdentityAttributes](st.ref.Append("user_identity"))
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) ImageName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("image_name"))
}

func (c ContainerAttributes) RunOptions() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("run_options"))
}

func (c ContainerAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("working_directory"))
}

func (c ContainerAttributes) Registry() terra.ListValue[RegistryAttributes] {
	return terra.ReferenceList[RegistryAttributes](c.ref.Append("registry"))
}

type RegistryAttributes struct {
	ref terra.Reference
}

func (r RegistryAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RegistryAttributes) InternalWithRef(ref terra.Reference) RegistryAttributes {
	return RegistryAttributes{ref: ref}
}

func (r RegistryAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RegistryAttributes) Password() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("password"))
}

func (r RegistryAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("registry_server"))
}

func (r RegistryAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("user_assigned_identity_id"))
}

func (r RegistryAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("user_name"))
}

type ResourceFileAttributes struct {
	ref terra.Reference
}

func (rf ResourceFileAttributes) InternalRef() terra.Reference {
	return rf.ref
}

func (rf ResourceFileAttributes) InternalWithRef(ref terra.Reference) ResourceFileAttributes {
	return ResourceFileAttributes{ref: ref}
}

func (rf ResourceFileAttributes) InternalTokens() hclwrite.Tokens {
	return rf.ref.InternalTokens()
}

func (rf ResourceFileAttributes) AutoStorageContainerName() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("auto_storage_container_name"))
}

func (rf ResourceFileAttributes) BlobPrefix() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("blob_prefix"))
}

func (rf ResourceFileAttributes) FileMode() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("file_mode"))
}

func (rf ResourceFileAttributes) FilePath() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("file_path"))
}

func (rf ResourceFileAttributes) HttpUrl() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("http_url"))
}

func (rf ResourceFileAttributes) StorageContainerUrl() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("storage_container_url"))
}

func (rf ResourceFileAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceString(rf.ref.Append("user_assigned_identity_id"))
}

type UserIdentityAttributes struct {
	ref terra.Reference
}

func (ui UserIdentityAttributes) InternalRef() terra.Reference {
	return ui.ref
}

func (ui UserIdentityAttributes) InternalWithRef(ref terra.Reference) UserIdentityAttributes {
	return UserIdentityAttributes{ref: ref}
}

func (ui UserIdentityAttributes) InternalTokens() hclwrite.Tokens {
	return ui.ref.InternalTokens()
}

func (ui UserIdentityAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(ui.ref.Append("user_name"))
}

func (ui UserIdentityAttributes) AutoUser() terra.ListValue[AutoUserAttributes] {
	return terra.ReferenceList[AutoUserAttributes](ui.ref.Append("auto_user"))
}

type AutoUserAttributes struct {
	ref terra.Reference
}

func (au AutoUserAttributes) InternalRef() terra.Reference {
	return au.ref
}

func (au AutoUserAttributes) InternalWithRef(ref terra.Reference) AutoUserAttributes {
	return AutoUserAttributes{ref: ref}
}

func (au AutoUserAttributes) InternalTokens() hclwrite.Tokens {
	return au.ref.InternalTokens()
}

func (au AutoUserAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceString(au.ref.Append("elevation_level"))
}

func (au AutoUserAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(au.ref.Append("scope"))
}

type StorageImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir StorageImageReferenceAttributes) InternalRef() terra.Reference {
	return sir.ref
}

func (sir StorageImageReferenceAttributes) InternalWithRef(ref terra.Reference) StorageImageReferenceAttributes {
	return StorageImageReferenceAttributes{ref: ref}
}

func (sir StorageImageReferenceAttributes) InternalTokens() hclwrite.Tokens {
	return sir.ref.InternalTokens()
}

func (sir StorageImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("id"))
}

func (sir StorageImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("offer"))
}

func (sir StorageImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("publisher"))
}

func (sir StorageImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("sku"))
}

func (sir StorageImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceString(sir.ref.Append("version"))
}

type TaskSchedulingPolicyAttributes struct {
	ref terra.Reference
}

func (tsp TaskSchedulingPolicyAttributes) InternalRef() terra.Reference {
	return tsp.ref
}

func (tsp TaskSchedulingPolicyAttributes) InternalWithRef(ref terra.Reference) TaskSchedulingPolicyAttributes {
	return TaskSchedulingPolicyAttributes{ref: ref}
}

func (tsp TaskSchedulingPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return tsp.ref.InternalTokens()
}

func (tsp TaskSchedulingPolicyAttributes) NodeFillType() terra.StringValue {
	return terra.ReferenceString(tsp.ref.Append("node_fill_type"))
}

type UserAccountsAttributes struct {
	ref terra.Reference
}

func (ua UserAccountsAttributes) InternalRef() terra.Reference {
	return ua.ref
}

func (ua UserAccountsAttributes) InternalWithRef(ref terra.Reference) UserAccountsAttributes {
	return UserAccountsAttributes{ref: ref}
}

func (ua UserAccountsAttributes) InternalTokens() hclwrite.Tokens {
	return ua.ref.InternalTokens()
}

func (ua UserAccountsAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceString(ua.ref.Append("elevation_level"))
}

func (ua UserAccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ua.ref.Append("name"))
}

func (ua UserAccountsAttributes) Password() terra.StringValue {
	return terra.ReferenceString(ua.ref.Append("password"))
}

func (ua UserAccountsAttributes) LinuxUserConfiguration() terra.ListValue[LinuxUserConfigurationAttributes] {
	return terra.ReferenceList[LinuxUserConfigurationAttributes](ua.ref.Append("linux_user_configuration"))
}

func (ua UserAccountsAttributes) WindowsUserConfiguration() terra.ListValue[WindowsUserConfigurationAttributes] {
	return terra.ReferenceList[WindowsUserConfigurationAttributes](ua.ref.Append("windows_user_configuration"))
}

type LinuxUserConfigurationAttributes struct {
	ref terra.Reference
}

func (luc LinuxUserConfigurationAttributes) InternalRef() terra.Reference {
	return luc.ref
}

func (luc LinuxUserConfigurationAttributes) InternalWithRef(ref terra.Reference) LinuxUserConfigurationAttributes {
	return LinuxUserConfigurationAttributes{ref: ref}
}

func (luc LinuxUserConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return luc.ref.InternalTokens()
}

func (luc LinuxUserConfigurationAttributes) Gid() terra.NumberValue {
	return terra.ReferenceNumber(luc.ref.Append("gid"))
}

func (luc LinuxUserConfigurationAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceString(luc.ref.Append("ssh_private_key"))
}

func (luc LinuxUserConfigurationAttributes) Uid() terra.NumberValue {
	return terra.ReferenceNumber(luc.ref.Append("uid"))
}

type WindowsUserConfigurationAttributes struct {
	ref terra.Reference
}

func (wuc WindowsUserConfigurationAttributes) InternalRef() terra.Reference {
	return wuc.ref
}

func (wuc WindowsUserConfigurationAttributes) InternalWithRef(ref terra.Reference) WindowsUserConfigurationAttributes {
	return WindowsUserConfigurationAttributes{ref: ref}
}

func (wuc WindowsUserConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return wuc.ref.InternalTokens()
}

func (wuc WindowsUserConfigurationAttributes) LoginMode() terra.StringValue {
	return terra.ReferenceString(wuc.ref.Append("login_mode"))
}

type WindowsAttributes struct {
	ref terra.Reference
}

func (w WindowsAttributes) InternalRef() terra.Reference {
	return w.ref
}

func (w WindowsAttributes) InternalWithRef(ref terra.Reference) WindowsAttributes {
	return WindowsAttributes{ref: ref}
}

func (w WindowsAttributes) InternalTokens() hclwrite.Tokens {
	return w.ref.InternalTokens()
}

func (w WindowsAttributes) EnableAutomaticUpdates() terra.BoolValue {
	return terra.ReferenceBool(w.ref.Append("enable_automatic_updates"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type AutoScaleState struct {
	EvaluationInterval string `json:"evaluation_interval"`
	Formula            string `json:"formula"`
}

type CertificateState struct {
	Id            string   `json:"id"`
	StoreLocation string   `json:"store_location"`
	StoreName     string   `json:"store_name"`
	Visibility    []string `json:"visibility"`
}

type ContainerConfigurationState struct {
	ContainerImageNames []string                   `json:"container_image_names"`
	Type                string                     `json:"type"`
	ContainerRegistries []ContainerRegistriesState `json:"container_registries"`
}

type ContainerRegistriesState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type DataDisksState struct {
	Caching            string  `json:"caching"`
	DiskSizeGb         float64 `json:"disk_size_gb"`
	Lun                float64 `json:"lun"`
	StorageAccountType string  `json:"storage_account_type"`
}

type DiskEncryptionState struct {
	DiskEncryptionTarget string `json:"disk_encryption_target"`
}

type ExtensionsState struct {
	AutoUpgradeMinorVersion  bool     `json:"auto_upgrade_minor_version"`
	Name                     string   `json:"name"`
	ProtectedSettings        string   `json:"protected_settings"`
	ProvisionAfterExtensions []string `json:"provision_after_extensions"`
	Publisher                string   `json:"publisher"`
	SettingsJson             string   `json:"settings_json"`
	Type                     string   `json:"type"`
	TypeHandlerVersion       string   `json:"type_handler_version"`
}

type FixedScaleState struct {
	ResizeTimeout          string  `json:"resize_timeout"`
	TargetDedicatedNodes   float64 `json:"target_dedicated_nodes"`
	TargetLowPriorityNodes float64 `json:"target_low_priority_nodes"`
}

type MountState struct {
	AzureBlobFileSystem []AzureBlobFileSystemState `json:"azure_blob_file_system"`
	AzureFileShare      []AzureFileShareState      `json:"azure_file_share"`
	CifsMount           []CifsMountState           `json:"cifs_mount"`
	NfsMount            []NfsMountState            `json:"nfs_mount"`
}

type AzureBlobFileSystemState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	BlobfuseOptions   string `json:"blobfuse_options"`
	ContainerName     string `json:"container_name"`
	IdentityId        string `json:"identity_id"`
	RelativeMountPath string `json:"relative_mount_path"`
	SasKey            string `json:"sas_key"`
}

type AzureFileShareState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	AzureFileUrl      string `json:"azure_file_url"`
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
}

type CifsMountState struct {
	MountOptions      string `json:"mount_options"`
	Password          string `json:"password"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
	UserName          string `json:"user_name"`
}

type NfsMountState struct {
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
}

type NetworkConfigurationState struct {
	DynamicVnetAssignmentScope    string                       `json:"dynamic_vnet_assignment_scope"`
	PublicAddressProvisioningType string                       `json:"public_address_provisioning_type"`
	PublicIps                     []string                     `json:"public_ips"`
	SubnetId                      string                       `json:"subnet_id"`
	EndpointConfiguration         []EndpointConfigurationState `json:"endpoint_configuration"`
}

type EndpointConfigurationState struct {
	BackendPort               float64                          `json:"backend_port"`
	FrontendPortRange         string                           `json:"frontend_port_range"`
	Name                      string                           `json:"name"`
	Protocol                  string                           `json:"protocol"`
	NetworkSecurityGroupRules []NetworkSecurityGroupRulesState `json:"network_security_group_rules"`
}

type NetworkSecurityGroupRulesState struct {
	Access              string   `json:"access"`
	Priority            float64  `json:"priority"`
	SourceAddressPrefix string   `json:"source_address_prefix"`
	SourcePortRanges    []string `json:"source_port_ranges"`
}

type NodePlacementState struct {
	Policy string `json:"policy"`
}

type StartTaskState struct {
	CommandLine                 string              `json:"command_line"`
	CommonEnvironmentProperties map[string]string   `json:"common_environment_properties"`
	TaskRetryMaximum            float64             `json:"task_retry_maximum"`
	WaitForSuccess              bool                `json:"wait_for_success"`
	Container                   []ContainerState    `json:"container"`
	ResourceFile                []ResourceFileState `json:"resource_file"`
	UserIdentity                []UserIdentityState `json:"user_identity"`
}

type ContainerState struct {
	ImageName        string          `json:"image_name"`
	RunOptions       string          `json:"run_options"`
	WorkingDirectory string          `json:"working_directory"`
	Registry         []RegistryState `json:"registry"`
}

type RegistryState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type ResourceFileState struct {
	AutoStorageContainerName string `json:"auto_storage_container_name"`
	BlobPrefix               string `json:"blob_prefix"`
	FileMode                 string `json:"file_mode"`
	FilePath                 string `json:"file_path"`
	HttpUrl                  string `json:"http_url"`
	StorageContainerUrl      string `json:"storage_container_url"`
	UserAssignedIdentityId   string `json:"user_assigned_identity_id"`
}

type UserIdentityState struct {
	UserName string          `json:"user_name"`
	AutoUser []AutoUserState `json:"auto_user"`
}

type AutoUserState struct {
	ElevationLevel string `json:"elevation_level"`
	Scope          string `json:"scope"`
}

type StorageImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type TaskSchedulingPolicyState struct {
	NodeFillType string `json:"node_fill_type"`
}

type UserAccountsState struct {
	ElevationLevel           string                          `json:"elevation_level"`
	Name                     string                          `json:"name"`
	Password                 string                          `json:"password"`
	LinuxUserConfiguration   []LinuxUserConfigurationState   `json:"linux_user_configuration"`
	WindowsUserConfiguration []WindowsUserConfigurationState `json:"windows_user_configuration"`
}

type LinuxUserConfigurationState struct {
	Gid           float64 `json:"gid"`
	SshPrivateKey string  `json:"ssh_private_key"`
	Uid           float64 `json:"uid"`
}

type WindowsUserConfigurationState struct {
	LoginMode string `json:"login_mode"`
}

type WindowsState struct {
	EnableAutomaticUpdates bool `json:"enable_automatic_updates"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
