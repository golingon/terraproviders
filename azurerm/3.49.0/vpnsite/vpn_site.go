// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vpnsite

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Link struct {
	// Fqdn: string, optional
	Fqdn terra.StringValue `hcl:"fqdn,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderName: string, optional
	ProviderName terra.StringValue `hcl:"provider_name,attr"`
	// SpeedInMbps: number, optional
	SpeedInMbps terra.NumberValue `hcl:"speed_in_mbps,attr"`
	// Bgp: optional
	Bgp *Bgp `hcl:"bgp,block"`
}

type Bgp struct {
	// Asn: number, required
	Asn terra.NumberValue `hcl:"asn,attr" validate:"required"`
	// PeeringAddress: string, required
	PeeringAddress terra.StringValue `hcl:"peering_address,attr" validate:"required"`
}

type O365Policy struct {
	// TrafficCategory: optional
	TrafficCategory *TrafficCategory `hcl:"traffic_category,block"`
}

type TrafficCategory struct {
	// AllowEndpointEnabled: bool, optional
	AllowEndpointEnabled terra.BoolValue `hcl:"allow_endpoint_enabled,attr"`
	// DefaultEndpointEnabled: bool, optional
	DefaultEndpointEnabled terra.BoolValue `hcl:"default_endpoint_enabled,attr"`
	// OptimizeEndpointEnabled: bool, optional
	OptimizeEndpointEnabled terra.BoolValue `hcl:"optimize_endpoint_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LinkAttributes struct {
	ref terra.Reference
}

func (l LinkAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LinkAttributes) InternalWithRef(ref terra.Reference) LinkAttributes {
	return LinkAttributes{ref: ref}
}

func (l LinkAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LinkAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("fqdn"))
}

func (l LinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("id"))
}

func (l LinkAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("ip_address"))
}

func (l LinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("name"))
}

func (l LinkAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("provider_name"))
}

func (l LinkAttributes) SpeedInMbps() terra.NumberValue {
	return terra.ReferenceNumber(l.ref.Append("speed_in_mbps"))
}

func (l LinkAttributes) Bgp() terra.ListValue[BgpAttributes] {
	return terra.ReferenceList[BgpAttributes](l.ref.Append("bgp"))
}

type BgpAttributes struct {
	ref terra.Reference
}

func (b BgpAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b BgpAttributes) InternalWithRef(ref terra.Reference) BgpAttributes {
	return BgpAttributes{ref: ref}
}

func (b BgpAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b BgpAttributes) Asn() terra.NumberValue {
	return terra.ReferenceNumber(b.ref.Append("asn"))
}

func (b BgpAttributes) PeeringAddress() terra.StringValue {
	return terra.ReferenceString(b.ref.Append("peering_address"))
}

type O365PolicyAttributes struct {
	ref terra.Reference
}

func (op O365PolicyAttributes) InternalRef() terra.Reference {
	return op.ref
}

func (op O365PolicyAttributes) InternalWithRef(ref terra.Reference) O365PolicyAttributes {
	return O365PolicyAttributes{ref: ref}
}

func (op O365PolicyAttributes) InternalTokens() hclwrite.Tokens {
	return op.ref.InternalTokens()
}

func (op O365PolicyAttributes) TrafficCategory() terra.ListValue[TrafficCategoryAttributes] {
	return terra.ReferenceList[TrafficCategoryAttributes](op.ref.Append("traffic_category"))
}

type TrafficCategoryAttributes struct {
	ref terra.Reference
}

func (tc TrafficCategoryAttributes) InternalRef() terra.Reference {
	return tc.ref
}

func (tc TrafficCategoryAttributes) InternalWithRef(ref terra.Reference) TrafficCategoryAttributes {
	return TrafficCategoryAttributes{ref: ref}
}

func (tc TrafficCategoryAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc TrafficCategoryAttributes) AllowEndpointEnabled() terra.BoolValue {
	return terra.ReferenceBool(tc.ref.Append("allow_endpoint_enabled"))
}

func (tc TrafficCategoryAttributes) DefaultEndpointEnabled() terra.BoolValue {
	return terra.ReferenceBool(tc.ref.Append("default_endpoint_enabled"))
}

func (tc TrafficCategoryAttributes) OptimizeEndpointEnabled() terra.BoolValue {
	return terra.ReferenceBool(tc.ref.Append("optimize_endpoint_enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type LinkState struct {
	Fqdn         string     `json:"fqdn"`
	Id           string     `json:"id"`
	IpAddress    string     `json:"ip_address"`
	Name         string     `json:"name"`
	ProviderName string     `json:"provider_name"`
	SpeedInMbps  float64    `json:"speed_in_mbps"`
	Bgp          []BgpState `json:"bgp"`
}

type BgpState struct {
	Asn            float64 `json:"asn"`
	PeeringAddress string  `json:"peering_address"`
}

type O365PolicyState struct {
	TrafficCategory []TrafficCategoryState `json:"traffic_category"`
}

type TrafficCategoryState struct {
	AllowEndpointEnabled    bool `json:"allow_endpoint_enabled"`
	DefaultEndpointEnabled  bool `json:"default_endpoint_enabled"`
	OptimizeEndpointEnabled bool `json:"optimize_endpoint_enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
