// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	automationdscconfiguration "github.com/golingon/terraproviders/azurerm/3.49.0/automationdscconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutomationDscConfiguration(name string, args AutomationDscConfigurationArgs) *AutomationDscConfiguration {
	return &AutomationDscConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutomationDscConfiguration)(nil)

type AutomationDscConfiguration struct {
	Name  string
	Args  AutomationDscConfigurationArgs
	state *automationDscConfigurationState
}

func (adc *AutomationDscConfiguration) Type() string {
	return "azurerm_automation_dsc_configuration"
}

func (adc *AutomationDscConfiguration) LocalName() string {
	return adc.Name
}

func (adc *AutomationDscConfiguration) Configuration() interface{} {
	return adc.Args
}

func (adc *AutomationDscConfiguration) Attributes() automationDscConfigurationAttributes {
	return automationDscConfigurationAttributes{ref: terra.ReferenceResource(adc)}
}

func (adc *AutomationDscConfiguration) ImportState(av io.Reader) error {
	adc.state = &automationDscConfigurationState{}
	if err := json.NewDecoder(av).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

func (adc *AutomationDscConfiguration) State() (*automationDscConfigurationState, bool) {
	return adc.state, adc.state != nil
}

func (adc *AutomationDscConfiguration) StateMust() *automationDscConfigurationState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

func (adc *AutomationDscConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

type AutomationDscConfigurationArgs struct {
	// AutomationAccountName: string, required
	AutomationAccountName terra.StringValue `hcl:"automation_account_name,attr" validate:"required"`
	// ContentEmbedded: string, required
	ContentEmbedded terra.StringValue `hcl:"content_embedded,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LogVerbose: bool, optional
	LogVerbose terra.BoolValue `hcl:"log_verbose,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *automationdscconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AutomationDscConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type automationDscConfigurationAttributes struct {
	ref terra.Reference
}

func (adc automationDscConfigurationAttributes) AutomationAccountName() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("automation_account_name"))
}

func (adc automationDscConfigurationAttributes) ContentEmbedded() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("content_embedded"))
}

func (adc automationDscConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("description"))
}

func (adc automationDscConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("id"))
}

func (adc automationDscConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("location"))
}

func (adc automationDscConfigurationAttributes) LogVerbose() terra.BoolValue {
	return terra.ReferenceBool(adc.ref.Append("log_verbose"))
}

func (adc automationDscConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("name"))
}

func (adc automationDscConfigurationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("resource_group_name"))
}

func (adc automationDscConfigurationAttributes) State() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("state"))
}

func (adc automationDscConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adc.ref.Append("tags"))
}

func (adc automationDscConfigurationAttributes) Timeouts() automationdscconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[automationdscconfiguration.TimeoutsAttributes](adc.ref.Append("timeouts"))
}

type automationDscConfigurationState struct {
	AutomationAccountName string                                    `json:"automation_account_name"`
	ContentEmbedded       string                                    `json:"content_embedded"`
	Description           string                                    `json:"description"`
	Id                    string                                    `json:"id"`
	Location              string                                    `json:"location"`
	LogVerbose            bool                                      `json:"log_verbose"`
	Name                  string                                    `json:"name"`
	ResourceGroupName     string                                    `json:"resource_group_name"`
	State                 string                                    `json:"state"`
	Tags                  map[string]string                         `json:"tags"`
	Timeouts              *automationdscconfiguration.TimeoutsState `json:"timeouts"`
}
