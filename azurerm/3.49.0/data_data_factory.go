// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datadatafactory "github.com/golingon/terraproviders/azurerm/3.49.0/datadatafactory"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataDataFactory(name string, args DataDataFactoryArgs) *DataDataFactory {
	return &DataDataFactory{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataDataFactory)(nil)

type DataDataFactory struct {
	Name string
	Args DataDataFactoryArgs
}

func (df *DataDataFactory) DataSource() string {
	return "azurerm_data_factory"
}

func (df *DataDataFactory) LocalName() string {
	return df.Name
}

func (df *DataDataFactory) Configuration() interface{} {
	return df.Args
}

func (df *DataDataFactory) Attributes() dataDataFactoryAttributes {
	return dataDataFactoryAttributes{ref: terra.ReferenceDataResource(df)}
}

type DataDataFactoryArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// GithubConfiguration: min=0
	GithubConfiguration []datadatafactory.GithubConfiguration `hcl:"github_configuration,block" validate:"min=0"`
	// Identity: min=0
	Identity []datadatafactory.Identity `hcl:"identity,block" validate:"min=0"`
	// VstsConfiguration: min=0
	VstsConfiguration []datadatafactory.VstsConfiguration `hcl:"vsts_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datadatafactory.Timeouts `hcl:"timeouts,block"`
}
type dataDataFactoryAttributes struct {
	ref terra.Reference
}

func (df dataDataFactoryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(df.ref.Append("id"))
}

func (df dataDataFactoryAttributes) Location() terra.StringValue {
	return terra.ReferenceString(df.ref.Append("location"))
}

func (df dataDataFactoryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(df.ref.Append("name"))
}

func (df dataDataFactoryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(df.ref.Append("resource_group_name"))
}

func (df dataDataFactoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](df.ref.Append("tags"))
}

func (df dataDataFactoryAttributes) GithubConfiguration() terra.ListValue[datadatafactory.GithubConfigurationAttributes] {
	return terra.ReferenceList[datadatafactory.GithubConfigurationAttributes](df.ref.Append("github_configuration"))
}

func (df dataDataFactoryAttributes) Identity() terra.ListValue[datadatafactory.IdentityAttributes] {
	return terra.ReferenceList[datadatafactory.IdentityAttributes](df.ref.Append("identity"))
}

func (df dataDataFactoryAttributes) VstsConfiguration() terra.ListValue[datadatafactory.VstsConfigurationAttributes] {
	return terra.ReferenceList[datadatafactory.VstsConfigurationAttributes](df.ref.Append("vsts_configuration"))
}

func (df dataDataFactoryAttributes) Timeouts() datadatafactory.TimeoutsAttributes {
	return terra.ReferenceSingle[datadatafactory.TimeoutsAttributes](df.ref.Append("timeouts"))
}
