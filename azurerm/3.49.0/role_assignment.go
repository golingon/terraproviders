// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	roleassignment "github.com/golingon/terraproviders/azurerm/3.49.0/roleassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoleAssignment(name string, args RoleAssignmentArgs) *RoleAssignment {
	return &RoleAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RoleAssignment)(nil)

type RoleAssignment struct {
	Name  string
	Args  RoleAssignmentArgs
	state *roleAssignmentState
}

func (ra *RoleAssignment) Type() string {
	return "azurerm_role_assignment"
}

func (ra *RoleAssignment) LocalName() string {
	return ra.Name
}

func (ra *RoleAssignment) Configuration() interface{} {
	return ra.Args
}

func (ra *RoleAssignment) Attributes() roleAssignmentAttributes {
	return roleAssignmentAttributes{ref: terra.ReferenceResource(ra)}
}

func (ra *RoleAssignment) ImportState(av io.Reader) error {
	ra.state = &roleAssignmentState{}
	if err := json.NewDecoder(av).Decode(ra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ra.Type(), ra.LocalName(), err)
	}
	return nil
}

func (ra *RoleAssignment) State() (*roleAssignmentState, bool) {
	return ra.state, ra.state != nil
}

func (ra *RoleAssignment) StateMust() *roleAssignmentState {
	if ra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ra.Type(), ra.LocalName()))
	}
	return ra.state
}

func (ra *RoleAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(ra)
}

type RoleAssignmentArgs struct {
	// Condition: string, optional
	Condition terra.StringValue `hcl:"condition,attr"`
	// ConditionVersion: string, optional
	ConditionVersion terra.StringValue `hcl:"condition_version,attr"`
	// DelegatedManagedIdentityResourceId: string, optional
	DelegatedManagedIdentityResourceId terra.StringValue `hcl:"delegated_managed_identity_resource_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleDefinitionId: string, optional
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr"`
	// RoleDefinitionName: string, optional
	RoleDefinitionName terra.StringValue `hcl:"role_definition_name,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// SkipServicePrincipalAadCheck: bool, optional
	SkipServicePrincipalAadCheck terra.BoolValue `hcl:"skip_service_principal_aad_check,attr"`
	// Timeouts: optional
	Timeouts *roleassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RoleAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type roleAssignmentAttributes struct {
	ref terra.Reference
}

func (ra roleAssignmentAttributes) Condition() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("condition"))
}

func (ra roleAssignmentAttributes) ConditionVersion() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("condition_version"))
}

func (ra roleAssignmentAttributes) DelegatedManagedIdentityResourceId() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("delegated_managed_identity_resource_id"))
}

func (ra roleAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("description"))
}

func (ra roleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("id"))
}

func (ra roleAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("name"))
}

func (ra roleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("principal_id"))
}

func (ra roleAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("principal_type"))
}

func (ra roleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("role_definition_id"))
}

func (ra roleAssignmentAttributes) RoleDefinitionName() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("role_definition_name"))
}

func (ra roleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(ra.ref.Append("scope"))
}

func (ra roleAssignmentAttributes) SkipServicePrincipalAadCheck() terra.BoolValue {
	return terra.ReferenceBool(ra.ref.Append("skip_service_principal_aad_check"))
}

func (ra roleAssignmentAttributes) Timeouts() roleassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[roleassignment.TimeoutsAttributes](ra.ref.Append("timeouts"))
}

type roleAssignmentState struct {
	Condition                          string                        `json:"condition"`
	ConditionVersion                   string                        `json:"condition_version"`
	DelegatedManagedIdentityResourceId string                        `json:"delegated_managed_identity_resource_id"`
	Description                        string                        `json:"description"`
	Id                                 string                        `json:"id"`
	Name                               string                        `json:"name"`
	PrincipalId                        string                        `json:"principal_id"`
	PrincipalType                      string                        `json:"principal_type"`
	RoleDefinitionId                   string                        `json:"role_definition_id"`
	RoleDefinitionName                 string                        `json:"role_definition_name"`
	Scope                              string                        `json:"scope"`
	SkipServicePrincipalAadCheck       bool                          `json:"skip_service_principal_aad_check"`
	Timeouts                           *roleassignment.TimeoutsState `json:"timeouts"`
}
