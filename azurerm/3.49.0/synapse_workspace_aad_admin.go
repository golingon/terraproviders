// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapseworkspaceaadadmin "github.com/golingon/terraproviders/azurerm/3.49.0/synapseworkspaceaadadmin"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseWorkspaceAadAdmin(name string, args SynapseWorkspaceAadAdminArgs) *SynapseWorkspaceAadAdmin {
	return &SynapseWorkspaceAadAdmin{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseWorkspaceAadAdmin)(nil)

type SynapseWorkspaceAadAdmin struct {
	Name  string
	Args  SynapseWorkspaceAadAdminArgs
	state *synapseWorkspaceAadAdminState
}

func (swaa *SynapseWorkspaceAadAdmin) Type() string {
	return "azurerm_synapse_workspace_aad_admin"
}

func (swaa *SynapseWorkspaceAadAdmin) LocalName() string {
	return swaa.Name
}

func (swaa *SynapseWorkspaceAadAdmin) Configuration() interface{} {
	return swaa.Args
}

func (swaa *SynapseWorkspaceAadAdmin) Attributes() synapseWorkspaceAadAdminAttributes {
	return synapseWorkspaceAadAdminAttributes{ref: terra.ReferenceResource(swaa)}
}

func (swaa *SynapseWorkspaceAadAdmin) ImportState(av io.Reader) error {
	swaa.state = &synapseWorkspaceAadAdminState{}
	if err := json.NewDecoder(av).Decode(swaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", swaa.Type(), swaa.LocalName(), err)
	}
	return nil
}

func (swaa *SynapseWorkspaceAadAdmin) State() (*synapseWorkspaceAadAdminState, bool) {
	return swaa.state, swaa.state != nil
}

func (swaa *SynapseWorkspaceAadAdmin) StateMust() *synapseWorkspaceAadAdminState {
	if swaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", swaa.Type(), swaa.LocalName()))
	}
	return swaa.state
}

func (swaa *SynapseWorkspaceAadAdmin) DependOn() terra.Reference {
	return terra.ReferenceResource(swaa)
}

type SynapseWorkspaceAadAdminArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Login: string, required
	Login terra.StringValue `hcl:"login,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *synapseworkspaceaadadmin.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseWorkspaceAadAdmin depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseWorkspaceAadAdminAttributes struct {
	ref terra.Reference
}

func (swaa synapseWorkspaceAadAdminAttributes) Id() terra.StringValue {
	return terra.ReferenceString(swaa.ref.Append("id"))
}

func (swaa synapseWorkspaceAadAdminAttributes) Login() terra.StringValue {
	return terra.ReferenceString(swaa.ref.Append("login"))
}

func (swaa synapseWorkspaceAadAdminAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceString(swaa.ref.Append("object_id"))
}

func (swaa synapseWorkspaceAadAdminAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(swaa.ref.Append("synapse_workspace_id"))
}

func (swaa synapseWorkspaceAadAdminAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(swaa.ref.Append("tenant_id"))
}

func (swaa synapseWorkspaceAadAdminAttributes) Timeouts() synapseworkspaceaadadmin.TimeoutsAttributes {
	return terra.ReferenceSingle[synapseworkspaceaadadmin.TimeoutsAttributes](swaa.ref.Append("timeouts"))
}

type synapseWorkspaceAadAdminState struct {
	Id                 string                                  `json:"id"`
	Login              string                                  `json:"login"`
	ObjectId           string                                  `json:"object_id"`
	SynapseWorkspaceId string                                  `json:"synapse_workspace_id"`
	TenantId           string                                  `json:"tenant_id"`
	Timeouts           *synapseworkspaceaadadmin.TimeoutsState `json:"timeouts"`
}
