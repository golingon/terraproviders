// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	synapsesparkpool "github.com/golingon/terraproviders/azurerm/3.49.0/synapsesparkpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSynapseSparkPool(name string, args SynapseSparkPoolArgs) *SynapseSparkPool {
	return &SynapseSparkPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SynapseSparkPool)(nil)

type SynapseSparkPool struct {
	Name  string
	Args  SynapseSparkPoolArgs
	state *synapseSparkPoolState
}

func (ssp *SynapseSparkPool) Type() string {
	return "azurerm_synapse_spark_pool"
}

func (ssp *SynapseSparkPool) LocalName() string {
	return ssp.Name
}

func (ssp *SynapseSparkPool) Configuration() interface{} {
	return ssp.Args
}

func (ssp *SynapseSparkPool) Attributes() synapseSparkPoolAttributes {
	return synapseSparkPoolAttributes{ref: terra.ReferenceResource(ssp)}
}

func (ssp *SynapseSparkPool) ImportState(av io.Reader) error {
	ssp.state = &synapseSparkPoolState{}
	if err := json.NewDecoder(av).Decode(ssp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssp.Type(), ssp.LocalName(), err)
	}
	return nil
}

func (ssp *SynapseSparkPool) State() (*synapseSparkPoolState, bool) {
	return ssp.state, ssp.state != nil
}

func (ssp *SynapseSparkPool) StateMust() *synapseSparkPoolState {
	if ssp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssp.Type(), ssp.LocalName()))
	}
	return ssp.state
}

func (ssp *SynapseSparkPool) DependOn() terra.Reference {
	return terra.ReferenceResource(ssp)
}

type SynapseSparkPoolArgs struct {
	// CacheSize: number, optional
	CacheSize terra.NumberValue `hcl:"cache_size,attr"`
	// ComputeIsolationEnabled: bool, optional
	ComputeIsolationEnabled terra.BoolValue `hcl:"compute_isolation_enabled,attr"`
	// DynamicExecutorAllocationEnabled: bool, optional
	DynamicExecutorAllocationEnabled terra.BoolValue `hcl:"dynamic_executor_allocation_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxExecutors: number, optional
	MaxExecutors terra.NumberValue `hcl:"max_executors,attr"`
	// MinExecutors: number, optional
	MinExecutors terra.NumberValue `hcl:"min_executors,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeSize: string, required
	NodeSize terra.StringValue `hcl:"node_size,attr" validate:"required"`
	// NodeSizeFamily: string, required
	NodeSizeFamily terra.StringValue `hcl:"node_size_family,attr" validate:"required"`
	// SessionLevelPackagesEnabled: bool, optional
	SessionLevelPackagesEnabled terra.BoolValue `hcl:"session_level_packages_enabled,attr"`
	// SparkEventsFolder: string, optional
	SparkEventsFolder terra.StringValue `hcl:"spark_events_folder,attr"`
	// SparkLogFolder: string, optional
	SparkLogFolder terra.StringValue `hcl:"spark_log_folder,attr"`
	// SparkVersion: string, optional
	SparkVersion terra.StringValue `hcl:"spark_version,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AutoPause: optional
	AutoPause *synapsesparkpool.AutoPause `hcl:"auto_pause,block"`
	// AutoScale: optional
	AutoScale *synapsesparkpool.AutoScale `hcl:"auto_scale,block"`
	// LibraryRequirement: optional
	LibraryRequirement *synapsesparkpool.LibraryRequirement `hcl:"library_requirement,block"`
	// SparkConfig: optional
	SparkConfig *synapsesparkpool.SparkConfig `hcl:"spark_config,block"`
	// Timeouts: optional
	Timeouts *synapsesparkpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SynapseSparkPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type synapseSparkPoolAttributes struct {
	ref terra.Reference
}

func (ssp synapseSparkPoolAttributes) CacheSize() terra.NumberValue {
	return terra.ReferenceNumber(ssp.ref.Append("cache_size"))
}

func (ssp synapseSparkPoolAttributes) ComputeIsolationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ssp.ref.Append("compute_isolation_enabled"))
}

func (ssp synapseSparkPoolAttributes) DynamicExecutorAllocationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ssp.ref.Append("dynamic_executor_allocation_enabled"))
}

func (ssp synapseSparkPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("id"))
}

func (ssp synapseSparkPoolAttributes) MaxExecutors() terra.NumberValue {
	return terra.ReferenceNumber(ssp.ref.Append("max_executors"))
}

func (ssp synapseSparkPoolAttributes) MinExecutors() terra.NumberValue {
	return terra.ReferenceNumber(ssp.ref.Append("min_executors"))
}

func (ssp synapseSparkPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("name"))
}

func (ssp synapseSparkPoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceNumber(ssp.ref.Append("node_count"))
}

func (ssp synapseSparkPoolAttributes) NodeSize() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("node_size"))
}

func (ssp synapseSparkPoolAttributes) NodeSizeFamily() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("node_size_family"))
}

func (ssp synapseSparkPoolAttributes) SessionLevelPackagesEnabled() terra.BoolValue {
	return terra.ReferenceBool(ssp.ref.Append("session_level_packages_enabled"))
}

func (ssp synapseSparkPoolAttributes) SparkEventsFolder() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("spark_events_folder"))
}

func (ssp synapseSparkPoolAttributes) SparkLogFolder() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("spark_log_folder"))
}

func (ssp synapseSparkPoolAttributes) SparkVersion() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("spark_version"))
}

func (ssp synapseSparkPoolAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("synapse_workspace_id"))
}

func (ssp synapseSparkPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssp.ref.Append("tags"))
}

func (ssp synapseSparkPoolAttributes) AutoPause() terra.ListValue[synapsesparkpool.AutoPauseAttributes] {
	return terra.ReferenceList[synapsesparkpool.AutoPauseAttributes](ssp.ref.Append("auto_pause"))
}

func (ssp synapseSparkPoolAttributes) AutoScale() terra.ListValue[synapsesparkpool.AutoScaleAttributes] {
	return terra.ReferenceList[synapsesparkpool.AutoScaleAttributes](ssp.ref.Append("auto_scale"))
}

func (ssp synapseSparkPoolAttributes) LibraryRequirement() terra.ListValue[synapsesparkpool.LibraryRequirementAttributes] {
	return terra.ReferenceList[synapsesparkpool.LibraryRequirementAttributes](ssp.ref.Append("library_requirement"))
}

func (ssp synapseSparkPoolAttributes) SparkConfig() terra.ListValue[synapsesparkpool.SparkConfigAttributes] {
	return terra.ReferenceList[synapsesparkpool.SparkConfigAttributes](ssp.ref.Append("spark_config"))
}

func (ssp synapseSparkPoolAttributes) Timeouts() synapsesparkpool.TimeoutsAttributes {
	return terra.ReferenceSingle[synapsesparkpool.TimeoutsAttributes](ssp.ref.Append("timeouts"))
}

type synapseSparkPoolState struct {
	CacheSize                        float64                                    `json:"cache_size"`
	ComputeIsolationEnabled          bool                                       `json:"compute_isolation_enabled"`
	DynamicExecutorAllocationEnabled bool                                       `json:"dynamic_executor_allocation_enabled"`
	Id                               string                                     `json:"id"`
	MaxExecutors                     float64                                    `json:"max_executors"`
	MinExecutors                     float64                                    `json:"min_executors"`
	Name                             string                                     `json:"name"`
	NodeCount                        float64                                    `json:"node_count"`
	NodeSize                         string                                     `json:"node_size"`
	NodeSizeFamily                   string                                     `json:"node_size_family"`
	SessionLevelPackagesEnabled      bool                                       `json:"session_level_packages_enabled"`
	SparkEventsFolder                string                                     `json:"spark_events_folder"`
	SparkLogFolder                   string                                     `json:"spark_log_folder"`
	SparkVersion                     string                                     `json:"spark_version"`
	SynapseWorkspaceId               string                                     `json:"synapse_workspace_id"`
	Tags                             map[string]string                          `json:"tags"`
	AutoPause                        []synapsesparkpool.AutoPauseState          `json:"auto_pause"`
	AutoScale                        []synapsesparkpool.AutoScaleState          `json:"auto_scale"`
	LibraryRequirement               []synapsesparkpool.LibraryRequirementState `json:"library_requirement"`
	SparkConfig                      []synapsesparkpool.SparkConfigState        `json:"spark_config"`
	Timeouts                         *synapsesparkpool.TimeoutsState            `json:"timeouts"`
}
