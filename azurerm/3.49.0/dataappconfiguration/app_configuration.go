// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataappconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Encryption struct{}

type Identity struct{}

type PrimaryReadKey struct{}

type PrimaryWriteKey struct{}

type SecondaryReadKey struct{}

type SecondaryWriteKey struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) IdentityClientId() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("identity_client_id"))
}

func (e EncryptionAttributes) KeyVaultKeyIdentifier() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("key_vault_key_identifier"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("type"))
}

type PrimaryReadKeyAttributes struct {
	ref terra.Reference
}

func (prk PrimaryReadKeyAttributes) InternalRef() terra.Reference {
	return prk.ref
}

func (prk PrimaryReadKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryReadKeyAttributes {
	return PrimaryReadKeyAttributes{ref: ref}
}

func (prk PrimaryReadKeyAttributes) InternalTokens() hclwrite.Tokens {
	return prk.ref.InternalTokens()
}

func (prk PrimaryReadKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(prk.ref.Append("connection_string"))
}

func (prk PrimaryReadKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(prk.ref.Append("id"))
}

func (prk PrimaryReadKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(prk.ref.Append("secret"))
}

type PrimaryWriteKeyAttributes struct {
	ref terra.Reference
}

func (pwk PrimaryWriteKeyAttributes) InternalRef() terra.Reference {
	return pwk.ref
}

func (pwk PrimaryWriteKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryWriteKeyAttributes {
	return PrimaryWriteKeyAttributes{ref: ref}
}

func (pwk PrimaryWriteKeyAttributes) InternalTokens() hclwrite.Tokens {
	return pwk.ref.InternalTokens()
}

func (pwk PrimaryWriteKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(pwk.ref.Append("connection_string"))
}

func (pwk PrimaryWriteKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pwk.ref.Append("id"))
}

func (pwk PrimaryWriteKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(pwk.ref.Append("secret"))
}

type SecondaryReadKeyAttributes struct {
	ref terra.Reference
}

func (srk SecondaryReadKeyAttributes) InternalRef() terra.Reference {
	return srk.ref
}

func (srk SecondaryReadKeyAttributes) InternalWithRef(ref terra.Reference) SecondaryReadKeyAttributes {
	return SecondaryReadKeyAttributes{ref: ref}
}

func (srk SecondaryReadKeyAttributes) InternalTokens() hclwrite.Tokens {
	return srk.ref.InternalTokens()
}

func (srk SecondaryReadKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(srk.ref.Append("connection_string"))
}

func (srk SecondaryReadKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srk.ref.Append("id"))
}

func (srk SecondaryReadKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(srk.ref.Append("secret"))
}

type SecondaryWriteKeyAttributes struct {
	ref terra.Reference
}

func (swk SecondaryWriteKeyAttributes) InternalRef() terra.Reference {
	return swk.ref
}

func (swk SecondaryWriteKeyAttributes) InternalWithRef(ref terra.Reference) SecondaryWriteKeyAttributes {
	return SecondaryWriteKeyAttributes{ref: ref}
}

func (swk SecondaryWriteKeyAttributes) InternalTokens() hclwrite.Tokens {
	return swk.ref.InternalTokens()
}

func (swk SecondaryWriteKeyAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("connection_string"))
}

func (swk SecondaryWriteKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("id"))
}

func (swk SecondaryWriteKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(swk.ref.Append("secret"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type EncryptionState struct {
	IdentityClientId      string `json:"identity_client_id"`
	KeyVaultKeyIdentifier string `json:"key_vault_key_identifier"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type PrimaryReadKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type PrimaryWriteKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type SecondaryReadKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type SecondaryWriteKeyState struct {
	ConnectionString string `json:"connection_string"`
	Id               string `json:"id"`
	Secret           string `json:"secret"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
