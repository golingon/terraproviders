// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cdnendpoint "github.com/golingon/terraproviders/azurerm/3.49.0/cdnendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCdnEndpoint(name string, args CdnEndpointArgs) *CdnEndpoint {
	return &CdnEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CdnEndpoint)(nil)

type CdnEndpoint struct {
	Name  string
	Args  CdnEndpointArgs
	state *cdnEndpointState
}

func (ce *CdnEndpoint) Type() string {
	return "azurerm_cdn_endpoint"
}

func (ce *CdnEndpoint) LocalName() string {
	return ce.Name
}

func (ce *CdnEndpoint) Configuration() interface{} {
	return ce.Args
}

func (ce *CdnEndpoint) Attributes() cdnEndpointAttributes {
	return cdnEndpointAttributes{ref: terra.ReferenceResource(ce)}
}

func (ce *CdnEndpoint) ImportState(av io.Reader) error {
	ce.state = &cdnEndpointState{}
	if err := json.NewDecoder(av).Decode(ce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ce.Type(), ce.LocalName(), err)
	}
	return nil
}

func (ce *CdnEndpoint) State() (*cdnEndpointState, bool) {
	return ce.state, ce.state != nil
}

func (ce *CdnEndpoint) StateMust() *cdnEndpointState {
	if ce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ce.Type(), ce.LocalName()))
	}
	return ce.state
}

func (ce *CdnEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(ce)
}

type CdnEndpointArgs struct {
	// ContentTypesToCompress: set of string, optional
	ContentTypesToCompress terra.SetValue[terra.StringValue] `hcl:"content_types_to_compress,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsCompressionEnabled: bool, optional
	IsCompressionEnabled terra.BoolValue `hcl:"is_compression_enabled,attr"`
	// IsHttpAllowed: bool, optional
	IsHttpAllowed terra.BoolValue `hcl:"is_http_allowed,attr"`
	// IsHttpsAllowed: bool, optional
	IsHttpsAllowed terra.BoolValue `hcl:"is_https_allowed,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptimizationType: string, optional
	OptimizationType terra.StringValue `hcl:"optimization_type,attr"`
	// OriginHostHeader: string, optional
	OriginHostHeader terra.StringValue `hcl:"origin_host_header,attr"`
	// OriginPath: string, optional
	OriginPath terra.StringValue `hcl:"origin_path,attr"`
	// ProbePath: string, optional
	ProbePath terra.StringValue `hcl:"probe_path,attr"`
	// ProfileName: string, required
	ProfileName terra.StringValue `hcl:"profile_name,attr" validate:"required"`
	// QuerystringCachingBehaviour: string, optional
	QuerystringCachingBehaviour terra.StringValue `hcl:"querystring_caching_behaviour,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DeliveryRule: min=0
	DeliveryRule []cdnendpoint.DeliveryRule `hcl:"delivery_rule,block" validate:"min=0"`
	// GeoFilter: min=0
	GeoFilter []cdnendpoint.GeoFilter `hcl:"geo_filter,block" validate:"min=0"`
	// GlobalDeliveryRule: optional
	GlobalDeliveryRule *cdnendpoint.GlobalDeliveryRule `hcl:"global_delivery_rule,block"`
	// Origin: min=1
	Origin []cdnendpoint.Origin `hcl:"origin,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *cdnendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CdnEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cdnEndpointAttributes struct {
	ref terra.Reference
}

func (ce cdnEndpointAttributes) ContentTypesToCompress() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ce.ref.Append("content_types_to_compress"))
}

func (ce cdnEndpointAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("fqdn"))
}

func (ce cdnEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("id"))
}

func (ce cdnEndpointAttributes) IsCompressionEnabled() terra.BoolValue {
	return terra.ReferenceBool(ce.ref.Append("is_compression_enabled"))
}

func (ce cdnEndpointAttributes) IsHttpAllowed() terra.BoolValue {
	return terra.ReferenceBool(ce.ref.Append("is_http_allowed"))
}

func (ce cdnEndpointAttributes) IsHttpsAllowed() terra.BoolValue {
	return terra.ReferenceBool(ce.ref.Append("is_https_allowed"))
}

func (ce cdnEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("location"))
}

func (ce cdnEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("name"))
}

func (ce cdnEndpointAttributes) OptimizationType() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("optimization_type"))
}

func (ce cdnEndpointAttributes) OriginHostHeader() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("origin_host_header"))
}

func (ce cdnEndpointAttributes) OriginPath() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("origin_path"))
}

func (ce cdnEndpointAttributes) ProbePath() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("probe_path"))
}

func (ce cdnEndpointAttributes) ProfileName() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("profile_name"))
}

func (ce cdnEndpointAttributes) QuerystringCachingBehaviour() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("querystring_caching_behaviour"))
}

func (ce cdnEndpointAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(ce.ref.Append("resource_group_name"))
}

func (ce cdnEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ce.ref.Append("tags"))
}

func (ce cdnEndpointAttributes) DeliveryRule() terra.ListValue[cdnendpoint.DeliveryRuleAttributes] {
	return terra.ReferenceList[cdnendpoint.DeliveryRuleAttributes](ce.ref.Append("delivery_rule"))
}

func (ce cdnEndpointAttributes) GeoFilter() terra.ListValue[cdnendpoint.GeoFilterAttributes] {
	return terra.ReferenceList[cdnendpoint.GeoFilterAttributes](ce.ref.Append("geo_filter"))
}

func (ce cdnEndpointAttributes) GlobalDeliveryRule() terra.ListValue[cdnendpoint.GlobalDeliveryRuleAttributes] {
	return terra.ReferenceList[cdnendpoint.GlobalDeliveryRuleAttributes](ce.ref.Append("global_delivery_rule"))
}

func (ce cdnEndpointAttributes) Origin() terra.SetValue[cdnendpoint.OriginAttributes] {
	return terra.ReferenceSet[cdnendpoint.OriginAttributes](ce.ref.Append("origin"))
}

func (ce cdnEndpointAttributes) Timeouts() cdnendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[cdnendpoint.TimeoutsAttributes](ce.ref.Append("timeouts"))
}

type cdnEndpointState struct {
	ContentTypesToCompress      []string                              `json:"content_types_to_compress"`
	Fqdn                        string                                `json:"fqdn"`
	Id                          string                                `json:"id"`
	IsCompressionEnabled        bool                                  `json:"is_compression_enabled"`
	IsHttpAllowed               bool                                  `json:"is_http_allowed"`
	IsHttpsAllowed              bool                                  `json:"is_https_allowed"`
	Location                    string                                `json:"location"`
	Name                        string                                `json:"name"`
	OptimizationType            string                                `json:"optimization_type"`
	OriginHostHeader            string                                `json:"origin_host_header"`
	OriginPath                  string                                `json:"origin_path"`
	ProbePath                   string                                `json:"probe_path"`
	ProfileName                 string                                `json:"profile_name"`
	QuerystringCachingBehaviour string                                `json:"querystring_caching_behaviour"`
	ResourceGroupName           string                                `json:"resource_group_name"`
	Tags                        map[string]string                     `json:"tags"`
	DeliveryRule                []cdnendpoint.DeliveryRuleState       `json:"delivery_rule"`
	GeoFilter                   []cdnendpoint.GeoFilterState          `json:"geo_filter"`
	GlobalDeliveryRule          []cdnendpoint.GlobalDeliveryRuleState `json:"global_delivery_rule"`
	Origin                      []cdnendpoint.OriginState             `json:"origin"`
	Timeouts                    *cdnendpoint.TimeoutsState            `json:"timeouts"`
}
