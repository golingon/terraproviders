// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	apimanagementapirelease "github.com/golingon/terraproviders/azurerm/3.49.0/apimanagementapirelease"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiManagementApiRelease(name string, args ApiManagementApiReleaseArgs) *ApiManagementApiRelease {
	return &ApiManagementApiRelease{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiManagementApiRelease)(nil)

type ApiManagementApiRelease struct {
	Name  string
	Args  ApiManagementApiReleaseArgs
	state *apiManagementApiReleaseState
}

func (amar *ApiManagementApiRelease) Type() string {
	return "azurerm_api_management_api_release"
}

func (amar *ApiManagementApiRelease) LocalName() string {
	return amar.Name
}

func (amar *ApiManagementApiRelease) Configuration() interface{} {
	return amar.Args
}

func (amar *ApiManagementApiRelease) Attributes() apiManagementApiReleaseAttributes {
	return apiManagementApiReleaseAttributes{ref: terra.ReferenceResource(amar)}
}

func (amar *ApiManagementApiRelease) ImportState(av io.Reader) error {
	amar.state = &apiManagementApiReleaseState{}
	if err := json.NewDecoder(av).Decode(amar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amar.Type(), amar.LocalName(), err)
	}
	return nil
}

func (amar *ApiManagementApiRelease) State() (*apiManagementApiReleaseState, bool) {
	return amar.state, amar.state != nil
}

func (amar *ApiManagementApiRelease) StateMust() *apiManagementApiReleaseState {
	if amar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amar.Type(), amar.LocalName()))
	}
	return amar.state
}

func (amar *ApiManagementApiRelease) DependOn() terra.Reference {
	return terra.ReferenceResource(amar)
}

type ApiManagementApiReleaseArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Timeouts: optional
	Timeouts *apimanagementapirelease.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ApiManagementApiRelease depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiManagementApiReleaseAttributes struct {
	ref terra.Reference
}

func (amar apiManagementApiReleaseAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(amar.ref.Append("api_id"))
}

func (amar apiManagementApiReleaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(amar.ref.Append("id"))
}

func (amar apiManagementApiReleaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(amar.ref.Append("name"))
}

func (amar apiManagementApiReleaseAttributes) Notes() terra.StringValue {
	return terra.ReferenceString(amar.ref.Append("notes"))
}

func (amar apiManagementApiReleaseAttributes) Timeouts() apimanagementapirelease.TimeoutsAttributes {
	return terra.ReferenceSingle[apimanagementapirelease.TimeoutsAttributes](amar.ref.Append("timeouts"))
}

type apiManagementApiReleaseState struct {
	ApiId    string                                 `json:"api_id"`
	Id       string                                 `json:"id"`
	Name     string                                 `json:"name"`
	Notes    string                                 `json:"notes"`
	Timeouts *apimanagementapirelease.TimeoutsState `json:"timeouts"`
}
