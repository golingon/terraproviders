// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	dataactivedirectorydomainservice "github.com/golingon/terraproviders/azurerm/3.49.0/dataactivedirectorydomainservice"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataActiveDirectoryDomainService(name string, args DataActiveDirectoryDomainServiceArgs) *DataActiveDirectoryDomainService {
	return &DataActiveDirectoryDomainService{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataActiveDirectoryDomainService)(nil)

type DataActiveDirectoryDomainService struct {
	Name string
	Args DataActiveDirectoryDomainServiceArgs
}

func (adds *DataActiveDirectoryDomainService) DataSource() string {
	return "azurerm_active_directory_domain_service"
}

func (adds *DataActiveDirectoryDomainService) LocalName() string {
	return adds.Name
}

func (adds *DataActiveDirectoryDomainService) Configuration() interface{} {
	return adds.Args
}

func (adds *DataActiveDirectoryDomainService) Attributes() dataActiveDirectoryDomainServiceAttributes {
	return dataActiveDirectoryDomainServiceAttributes{ref: terra.ReferenceDataResource(adds)}
}

type DataActiveDirectoryDomainServiceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Notifications: min=0
	Notifications []dataactivedirectorydomainservice.Notifications `hcl:"notifications,block" validate:"min=0"`
	// ReplicaSets: min=0
	ReplicaSets []dataactivedirectorydomainservice.ReplicaSets `hcl:"replica_sets,block" validate:"min=0"`
	// SecureLdap: min=0
	SecureLdap []dataactivedirectorydomainservice.SecureLdap `hcl:"secure_ldap,block" validate:"min=0"`
	// Security: min=0
	Security []dataactivedirectorydomainservice.Security `hcl:"security,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataactivedirectorydomainservice.Timeouts `hcl:"timeouts,block"`
}
type dataActiveDirectoryDomainServiceAttributes struct {
	ref terra.Reference
}

func (adds dataActiveDirectoryDomainServiceAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("deployment_id"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) DomainConfigurationType() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("domain_configuration_type"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("domain_name"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) FilteredSyncEnabled() terra.BoolValue {
	return terra.ReferenceBool(adds.ref.Append("filtered_sync_enabled"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("id"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("location"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("name"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("resource_group_name"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("resource_id"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("sku"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) SyncOwner() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("sync_owner"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adds.ref.Append("tags"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(adds.ref.Append("tenant_id"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(adds.ref.Append("version"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Notifications() terra.ListValue[dataactivedirectorydomainservice.NotificationsAttributes] {
	return terra.ReferenceList[dataactivedirectorydomainservice.NotificationsAttributes](adds.ref.Append("notifications"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) ReplicaSets() terra.ListValue[dataactivedirectorydomainservice.ReplicaSetsAttributes] {
	return terra.ReferenceList[dataactivedirectorydomainservice.ReplicaSetsAttributes](adds.ref.Append("replica_sets"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) SecureLdap() terra.ListValue[dataactivedirectorydomainservice.SecureLdapAttributes] {
	return terra.ReferenceList[dataactivedirectorydomainservice.SecureLdapAttributes](adds.ref.Append("secure_ldap"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Security() terra.ListValue[dataactivedirectorydomainservice.SecurityAttributes] {
	return terra.ReferenceList[dataactivedirectorydomainservice.SecurityAttributes](adds.ref.Append("security"))
}

func (adds dataActiveDirectoryDomainServiceAttributes) Timeouts() dataactivedirectorydomainservice.TimeoutsAttributes {
	return terra.ReferenceSingle[dataactivedirectorydomainservice.TimeoutsAttributes](adds.ref.Append("timeouts"))
}
