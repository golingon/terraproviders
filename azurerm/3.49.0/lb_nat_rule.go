// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lbnatrule "github.com/golingon/terraproviders/azurerm/3.49.0/lbnatrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbNatRule(name string, args LbNatRuleArgs) *LbNatRule {
	return &LbNatRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbNatRule)(nil)

type LbNatRule struct {
	Name  string
	Args  LbNatRuleArgs
	state *lbNatRuleState
}

func (lnr *LbNatRule) Type() string {
	return "azurerm_lb_nat_rule"
}

func (lnr *LbNatRule) LocalName() string {
	return lnr.Name
}

func (lnr *LbNatRule) Configuration() interface{} {
	return lnr.Args
}

func (lnr *LbNatRule) Attributes() lbNatRuleAttributes {
	return lbNatRuleAttributes{ref: terra.ReferenceResource(lnr)}
}

func (lnr *LbNatRule) ImportState(av io.Reader) error {
	lnr.state = &lbNatRuleState{}
	if err := json.NewDecoder(av).Decode(lnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lnr.Type(), lnr.LocalName(), err)
	}
	return nil
}

func (lnr *LbNatRule) State() (*lbNatRuleState, bool) {
	return lnr.state, lnr.state != nil
}

func (lnr *LbNatRule) StateMust() *lbNatRuleState {
	if lnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lnr.Type(), lnr.LocalName()))
	}
	return lnr.state
}

func (lnr *LbNatRule) DependOn() terra.Reference {
	return terra.ReferenceResource(lnr)
}

type LbNatRuleArgs struct {
	// BackendAddressPoolId: string, optional
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr"`
	// BackendPort: number, required
	BackendPort terra.NumberValue `hcl:"backend_port,attr" validate:"required"`
	// EnableFloatingIp: bool, optional
	EnableFloatingIp terra.BoolValue `hcl:"enable_floating_ip,attr"`
	// EnableTcpReset: bool, optional
	EnableTcpReset terra.BoolValue `hcl:"enable_tcp_reset,attr"`
	// FrontendIpConfigurationName: string, required
	FrontendIpConfigurationName terra.StringValue `hcl:"frontend_ip_configuration_name,attr" validate:"required"`
	// FrontendPort: number, optional
	FrontendPort terra.NumberValue `hcl:"frontend_port,attr"`
	// FrontendPortEnd: number, optional
	FrontendPortEnd terra.NumberValue `hcl:"frontend_port_end,attr"`
	// FrontendPortStart: number, optional
	FrontendPortStart terra.NumberValue `hcl:"frontend_port_start,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *lbnatrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LbNatRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbNatRuleAttributes struct {
	ref terra.Reference
}

func (lnr lbNatRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("backend_address_pool_id"))
}

func (lnr lbNatRuleAttributes) BackendIpConfigurationId() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("backend_ip_configuration_id"))
}

func (lnr lbNatRuleAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceNumber(lnr.ref.Append("backend_port"))
}

func (lnr lbNatRuleAttributes) EnableFloatingIp() terra.BoolValue {
	return terra.ReferenceBool(lnr.ref.Append("enable_floating_ip"))
}

func (lnr lbNatRuleAttributes) EnableTcpReset() terra.BoolValue {
	return terra.ReferenceBool(lnr.ref.Append("enable_tcp_reset"))
}

func (lnr lbNatRuleAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("frontend_ip_configuration_id"))
}

func (lnr lbNatRuleAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("frontend_ip_configuration_name"))
}

func (lnr lbNatRuleAttributes) FrontendPort() terra.NumberValue {
	return terra.ReferenceNumber(lnr.ref.Append("frontend_port"))
}

func (lnr lbNatRuleAttributes) FrontendPortEnd() terra.NumberValue {
	return terra.ReferenceNumber(lnr.ref.Append("frontend_port_end"))
}

func (lnr lbNatRuleAttributes) FrontendPortStart() terra.NumberValue {
	return terra.ReferenceNumber(lnr.ref.Append("frontend_port_start"))
}

func (lnr lbNatRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("id"))
}

func (lnr lbNatRuleAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(lnr.ref.Append("idle_timeout_in_minutes"))
}

func (lnr lbNatRuleAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("loadbalancer_id"))
}

func (lnr lbNatRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("name"))
}

func (lnr lbNatRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("protocol"))
}

func (lnr lbNatRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(lnr.ref.Append("resource_group_name"))
}

func (lnr lbNatRuleAttributes) Timeouts() lbnatrule.TimeoutsAttributes {
	return terra.ReferenceSingle[lbnatrule.TimeoutsAttributes](lnr.ref.Append("timeouts"))
}

type lbNatRuleState struct {
	BackendAddressPoolId        string                   `json:"backend_address_pool_id"`
	BackendIpConfigurationId    string                   `json:"backend_ip_configuration_id"`
	BackendPort                 float64                  `json:"backend_port"`
	EnableFloatingIp            bool                     `json:"enable_floating_ip"`
	EnableTcpReset              bool                     `json:"enable_tcp_reset"`
	FrontendIpConfigurationId   string                   `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string                   `json:"frontend_ip_configuration_name"`
	FrontendPort                float64                  `json:"frontend_port"`
	FrontendPortEnd             float64                  `json:"frontend_port_end"`
	FrontendPortStart           float64                  `json:"frontend_port_start"`
	Id                          string                   `json:"id"`
	IdleTimeoutInMinutes        float64                  `json:"idle_timeout_in_minutes"`
	LoadbalancerId              string                   `json:"loadbalancer_id"`
	Name                        string                   `json:"name"`
	Protocol                    string                   `json:"protocol"`
	ResourceGroupName           string                   `json:"resource_group_name"`
	Timeouts                    *lbnatrule.TimeoutsState `json:"timeouts"`
}
