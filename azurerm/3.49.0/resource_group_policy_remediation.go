// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	resourcegrouppolicyremediation "github.com/golingon/terraproviders/azurerm/3.49.0/resourcegrouppolicyremediation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourceGroupPolicyRemediation(name string, args ResourceGroupPolicyRemediationArgs) *ResourceGroupPolicyRemediation {
	return &ResourceGroupPolicyRemediation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourceGroupPolicyRemediation)(nil)

type ResourceGroupPolicyRemediation struct {
	Name  string
	Args  ResourceGroupPolicyRemediationArgs
	state *resourceGroupPolicyRemediationState
}

func (rgpr *ResourceGroupPolicyRemediation) Type() string {
	return "azurerm_resource_group_policy_remediation"
}

func (rgpr *ResourceGroupPolicyRemediation) LocalName() string {
	return rgpr.Name
}

func (rgpr *ResourceGroupPolicyRemediation) Configuration() interface{} {
	return rgpr.Args
}

func (rgpr *ResourceGroupPolicyRemediation) Attributes() resourceGroupPolicyRemediationAttributes {
	return resourceGroupPolicyRemediationAttributes{ref: terra.ReferenceResource(rgpr)}
}

func (rgpr *ResourceGroupPolicyRemediation) ImportState(av io.Reader) error {
	rgpr.state = &resourceGroupPolicyRemediationState{}
	if err := json.NewDecoder(av).Decode(rgpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rgpr.Type(), rgpr.LocalName(), err)
	}
	return nil
}

func (rgpr *ResourceGroupPolicyRemediation) State() (*resourceGroupPolicyRemediationState, bool) {
	return rgpr.state, rgpr.state != nil
}

func (rgpr *ResourceGroupPolicyRemediation) StateMust() *resourceGroupPolicyRemediationState {
	if rgpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rgpr.Type(), rgpr.LocalName()))
	}
	return rgpr.state
}

func (rgpr *ResourceGroupPolicyRemediation) DependOn() terra.Reference {
	return terra.ReferenceResource(rgpr)
}

type ResourceGroupPolicyRemediationArgs struct {
	// FailurePercentage: number, optional
	FailurePercentage terra.NumberValue `hcl:"failure_percentage,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocationFilters: list of string, optional
	LocationFilters terra.ListValue[terra.StringValue] `hcl:"location_filters,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParallelDeployments: number, optional
	ParallelDeployments terra.NumberValue `hcl:"parallel_deployments,attr"`
	// PolicyAssignmentId: string, required
	PolicyAssignmentId terra.StringValue `hcl:"policy_assignment_id,attr" validate:"required"`
	// PolicyDefinitionId: string, optional
	PolicyDefinitionId terra.StringValue `hcl:"policy_definition_id,attr"`
	// PolicyDefinitionReferenceId: string, optional
	PolicyDefinitionReferenceId terra.StringValue `hcl:"policy_definition_reference_id,attr"`
	// ResourceCount: number, optional
	ResourceCount terra.NumberValue `hcl:"resource_count,attr"`
	// ResourceDiscoveryMode: string, optional
	ResourceDiscoveryMode terra.StringValue `hcl:"resource_discovery_mode,attr"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *resourcegrouppolicyremediation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourceGroupPolicyRemediation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourceGroupPolicyRemediationAttributes struct {
	ref terra.Reference
}

func (rgpr resourceGroupPolicyRemediationAttributes) FailurePercentage() terra.NumberValue {
	return terra.ReferenceNumber(rgpr.ref.Append("failure_percentage"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("id"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) LocationFilters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rgpr.ref.Append("location_filters"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("name"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) ParallelDeployments() terra.NumberValue {
	return terra.ReferenceNumber(rgpr.ref.Append("parallel_deployments"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) PolicyAssignmentId() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("policy_assignment_id"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("policy_definition_id"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) PolicyDefinitionReferenceId() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("policy_definition_reference_id"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) ResourceCount() terra.NumberValue {
	return terra.ReferenceNumber(rgpr.ref.Append("resource_count"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) ResourceDiscoveryMode() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("resource_discovery_mode"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceString(rgpr.ref.Append("resource_group_id"))
}

func (rgpr resourceGroupPolicyRemediationAttributes) Timeouts() resourcegrouppolicyremediation.TimeoutsAttributes {
	return terra.ReferenceSingle[resourcegrouppolicyremediation.TimeoutsAttributes](rgpr.ref.Append("timeouts"))
}

type resourceGroupPolicyRemediationState struct {
	FailurePercentage           float64                                       `json:"failure_percentage"`
	Id                          string                                        `json:"id"`
	LocationFilters             []string                                      `json:"location_filters"`
	Name                        string                                        `json:"name"`
	ParallelDeployments         float64                                       `json:"parallel_deployments"`
	PolicyAssignmentId          string                                        `json:"policy_assignment_id"`
	PolicyDefinitionId          string                                        `json:"policy_definition_id"`
	PolicyDefinitionReferenceId string                                        `json:"policy_definition_reference_id"`
	ResourceCount               float64                                       `json:"resource_count"`
	ResourceDiscoveryMode       string                                        `json:"resource_discovery_mode"`
	ResourceGroupId             string                                        `json:"resource_group_id"`
	Timeouts                    *resourcegrouppolicyremediation.TimeoutsState `json:"timeouts"`
}
