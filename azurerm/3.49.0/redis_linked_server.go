// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	redislinkedserver "github.com/golingon/terraproviders/azurerm/3.49.0/redislinkedserver"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedisLinkedServer(name string, args RedisLinkedServerArgs) *RedisLinkedServer {
	return &RedisLinkedServer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisLinkedServer)(nil)

type RedisLinkedServer struct {
	Name  string
	Args  RedisLinkedServerArgs
	state *redisLinkedServerState
}

func (rls *RedisLinkedServer) Type() string {
	return "azurerm_redis_linked_server"
}

func (rls *RedisLinkedServer) LocalName() string {
	return rls.Name
}

func (rls *RedisLinkedServer) Configuration() interface{} {
	return rls.Args
}

func (rls *RedisLinkedServer) Attributes() redisLinkedServerAttributes {
	return redisLinkedServerAttributes{ref: terra.ReferenceResource(rls)}
}

func (rls *RedisLinkedServer) ImportState(av io.Reader) error {
	rls.state = &redisLinkedServerState{}
	if err := json.NewDecoder(av).Decode(rls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rls.Type(), rls.LocalName(), err)
	}
	return nil
}

func (rls *RedisLinkedServer) State() (*redisLinkedServerState, bool) {
	return rls.state, rls.state != nil
}

func (rls *RedisLinkedServer) StateMust() *redisLinkedServerState {
	if rls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rls.Type(), rls.LocalName()))
	}
	return rls.state
}

func (rls *RedisLinkedServer) DependOn() terra.Reference {
	return terra.ReferenceResource(rls)
}

type RedisLinkedServerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedRedisCacheId: string, required
	LinkedRedisCacheId terra.StringValue `hcl:"linked_redis_cache_id,attr" validate:"required"`
	// LinkedRedisCacheLocation: string, required
	LinkedRedisCacheLocation terra.StringValue `hcl:"linked_redis_cache_location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerRole: string, required
	ServerRole terra.StringValue `hcl:"server_role,attr" validate:"required"`
	// TargetRedisCacheName: string, required
	TargetRedisCacheName terra.StringValue `hcl:"target_redis_cache_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *redislinkedserver.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedisLinkedServer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redisLinkedServerAttributes struct {
	ref terra.Reference
}

func (rls redisLinkedServerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("id"))
}

func (rls redisLinkedServerAttributes) LinkedRedisCacheId() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("linked_redis_cache_id"))
}

func (rls redisLinkedServerAttributes) LinkedRedisCacheLocation() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("linked_redis_cache_location"))
}

func (rls redisLinkedServerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("name"))
}

func (rls redisLinkedServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("resource_group_name"))
}

func (rls redisLinkedServerAttributes) ServerRole() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("server_role"))
}

func (rls redisLinkedServerAttributes) TargetRedisCacheName() terra.StringValue {
	return terra.ReferenceString(rls.ref.Append("target_redis_cache_name"))
}

func (rls redisLinkedServerAttributes) Timeouts() redislinkedserver.TimeoutsAttributes {
	return terra.ReferenceSingle[redislinkedserver.TimeoutsAttributes](rls.ref.Append("timeouts"))
}

type redisLinkedServerState struct {
	Id                       string                           `json:"id"`
	LinkedRedisCacheId       string                           `json:"linked_redis_cache_id"`
	LinkedRedisCacheLocation string                           `json:"linked_redis_cache_location"`
	Name                     string                           `json:"name"`
	ResourceGroupName        string                           `json:"resource_group_name"`
	ServerRole               string                           `json:"server_role"`
	TargetRedisCacheName     string                           `json:"target_redis_cache_name"`
	Timeouts                 *redislinkedserver.TimeoutsState `json:"timeouts"`
}
