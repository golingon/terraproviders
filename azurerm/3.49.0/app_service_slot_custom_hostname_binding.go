// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appserviceslotcustomhostnamebinding "github.com/golingon/terraproviders/azurerm/3.49.0/appserviceslotcustomhostnamebinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServiceSlotCustomHostnameBinding(name string, args AppServiceSlotCustomHostnameBindingArgs) *AppServiceSlotCustomHostnameBinding {
	return &AppServiceSlotCustomHostnameBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServiceSlotCustomHostnameBinding)(nil)

type AppServiceSlotCustomHostnameBinding struct {
	Name  string
	Args  AppServiceSlotCustomHostnameBindingArgs
	state *appServiceSlotCustomHostnameBindingState
}

func (asschb *AppServiceSlotCustomHostnameBinding) Type() string {
	return "azurerm_app_service_slot_custom_hostname_binding"
}

func (asschb *AppServiceSlotCustomHostnameBinding) LocalName() string {
	return asschb.Name
}

func (asschb *AppServiceSlotCustomHostnameBinding) Configuration() interface{} {
	return asschb.Args
}

func (asschb *AppServiceSlotCustomHostnameBinding) Attributes() appServiceSlotCustomHostnameBindingAttributes {
	return appServiceSlotCustomHostnameBindingAttributes{ref: terra.ReferenceResource(asschb)}
}

func (asschb *AppServiceSlotCustomHostnameBinding) ImportState(av io.Reader) error {
	asschb.state = &appServiceSlotCustomHostnameBindingState{}
	if err := json.NewDecoder(av).Decode(asschb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asschb.Type(), asschb.LocalName(), err)
	}
	return nil
}

func (asschb *AppServiceSlotCustomHostnameBinding) State() (*appServiceSlotCustomHostnameBindingState, bool) {
	return asschb.state, asschb.state != nil
}

func (asschb *AppServiceSlotCustomHostnameBinding) StateMust() *appServiceSlotCustomHostnameBindingState {
	if asschb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asschb.Type(), asschb.LocalName()))
	}
	return asschb.state
}

func (asschb *AppServiceSlotCustomHostnameBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(asschb)
}

type AppServiceSlotCustomHostnameBindingArgs struct {
	// AppServiceSlotId: string, required
	AppServiceSlotId terra.StringValue `hcl:"app_service_slot_id,attr" validate:"required"`
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SslState: string, optional
	SslState terra.StringValue `hcl:"ssl_state,attr"`
	// Thumbprint: string, optional
	Thumbprint terra.StringValue `hcl:"thumbprint,attr"`
	// Timeouts: optional
	Timeouts *appserviceslotcustomhostnamebinding.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServiceSlotCustomHostnameBinding depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServiceSlotCustomHostnameBindingAttributes struct {
	ref terra.Reference
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) AppServiceSlotId() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("app_service_slot_id"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) Hostname() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("hostname"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("id"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) SslState() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("ssl_state"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("thumbprint"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) VirtualIp() terra.StringValue {
	return terra.ReferenceString(asschb.ref.Append("virtual_ip"))
}

func (asschb appServiceSlotCustomHostnameBindingAttributes) Timeouts() appserviceslotcustomhostnamebinding.TimeoutsAttributes {
	return terra.ReferenceSingle[appserviceslotcustomhostnamebinding.TimeoutsAttributes](asschb.ref.Append("timeouts"))
}

type appServiceSlotCustomHostnameBindingState struct {
	AppServiceSlotId string                                             `json:"app_service_slot_id"`
	Hostname         string                                             `json:"hostname"`
	Id               string                                             `json:"id"`
	SslState         string                                             `json:"ssl_state"`
	Thumbprint       string                                             `json:"thumbprint"`
	VirtualIp        string                                             `json:"virtual_ip"`
	Timeouts         *appserviceslotcustomhostnamebinding.TimeoutsState `json:"timeouts"`
}
