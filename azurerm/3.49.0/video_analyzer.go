// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	videoanalyzer "github.com/golingon/terraproviders/azurerm/3.49.0/videoanalyzer"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVideoAnalyzer(name string, args VideoAnalyzerArgs) *VideoAnalyzer {
	return &VideoAnalyzer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VideoAnalyzer)(nil)

type VideoAnalyzer struct {
	Name  string
	Args  VideoAnalyzerArgs
	state *videoAnalyzerState
}

func (va *VideoAnalyzer) Type() string {
	return "azurerm_video_analyzer"
}

func (va *VideoAnalyzer) LocalName() string {
	return va.Name
}

func (va *VideoAnalyzer) Configuration() interface{} {
	return va.Args
}

func (va *VideoAnalyzer) Attributes() videoAnalyzerAttributes {
	return videoAnalyzerAttributes{ref: terra.ReferenceResource(va)}
}

func (va *VideoAnalyzer) ImportState(av io.Reader) error {
	va.state = &videoAnalyzerState{}
	if err := json.NewDecoder(av).Decode(va.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", va.Type(), va.LocalName(), err)
	}
	return nil
}

func (va *VideoAnalyzer) State() (*videoAnalyzerState, bool) {
	return va.state, va.state != nil
}

func (va *VideoAnalyzer) StateMust() *videoAnalyzerState {
	if va.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", va.Type(), va.LocalName()))
	}
	return va.state
}

func (va *VideoAnalyzer) DependOn() terra.Reference {
	return terra.ReferenceResource(va)
}

type VideoAnalyzerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *videoanalyzer.Identity `hcl:"identity,block" validate:"required"`
	// StorageAccount: required
	StorageAccount *videoanalyzer.StorageAccount `hcl:"storage_account,block" validate:"required"`
	// Timeouts: optional
	Timeouts *videoanalyzer.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VideoAnalyzer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type videoAnalyzerAttributes struct {
	ref terra.Reference
}

func (va videoAnalyzerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("id"))
}

func (va videoAnalyzerAttributes) Location() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("location"))
}

func (va videoAnalyzerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("name"))
}

func (va videoAnalyzerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(va.ref.Append("resource_group_name"))
}

func (va videoAnalyzerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](va.ref.Append("tags"))
}

func (va videoAnalyzerAttributes) Identity() terra.ListValue[videoanalyzer.IdentityAttributes] {
	return terra.ReferenceList[videoanalyzer.IdentityAttributes](va.ref.Append("identity"))
}

func (va videoAnalyzerAttributes) StorageAccount() terra.ListValue[videoanalyzer.StorageAccountAttributes] {
	return terra.ReferenceList[videoanalyzer.StorageAccountAttributes](va.ref.Append("storage_account"))
}

func (va videoAnalyzerAttributes) Timeouts() videoanalyzer.TimeoutsAttributes {
	return terra.ReferenceSingle[videoanalyzer.TimeoutsAttributes](va.ref.Append("timeouts"))
}

type videoAnalyzerState struct {
	Id                string                              `json:"id"`
	Location          string                              `json:"location"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Tags              map[string]string                   `json:"tags"`
	Identity          []videoanalyzer.IdentityState       `json:"identity"`
	StorageAccount    []videoanalyzer.StorageAccountState `json:"storage_account"`
	Timeouts          *videoanalyzer.TimeoutsState        `json:"timeouts"`
}
