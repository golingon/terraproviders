// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	vmwarecluster "github.com/golingon/terraproviders/azurerm/3.49.0/vmwarecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVmwareCluster(name string, args VmwareClusterArgs) *VmwareCluster {
	return &VmwareCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VmwareCluster)(nil)

type VmwareCluster struct {
	Name  string
	Args  VmwareClusterArgs
	state *vmwareClusterState
}

func (vc *VmwareCluster) Type() string {
	return "azurerm_vmware_cluster"
}

func (vc *VmwareCluster) LocalName() string {
	return vc.Name
}

func (vc *VmwareCluster) Configuration() interface{} {
	return vc.Args
}

func (vc *VmwareCluster) Attributes() vmwareClusterAttributes {
	return vmwareClusterAttributes{ref: terra.ReferenceResource(vc)}
}

func (vc *VmwareCluster) ImportState(av io.Reader) error {
	vc.state = &vmwareClusterState{}
	if err := json.NewDecoder(av).Decode(vc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vc.Type(), vc.LocalName(), err)
	}
	return nil
}

func (vc *VmwareCluster) State() (*vmwareClusterState, bool) {
	return vc.state, vc.state != nil
}

func (vc *VmwareCluster) StateMust() *vmwareClusterState {
	if vc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vc.Type(), vc.LocalName()))
	}
	return vc.state
}

func (vc *VmwareCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(vc)
}

type VmwareClusterArgs struct {
	// ClusterNodeCount: number, required
	ClusterNodeCount terra.NumberValue `hcl:"cluster_node_count,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// VmwareCloudId: string, required
	VmwareCloudId terra.StringValue `hcl:"vmware_cloud_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *vmwarecluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VmwareCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vmwareClusterAttributes struct {
	ref terra.Reference
}

func (vc vmwareClusterAttributes) ClusterNodeCount() terra.NumberValue {
	return terra.ReferenceNumber(vc.ref.Append("cluster_node_count"))
}

func (vc vmwareClusterAttributes) ClusterNumber() terra.NumberValue {
	return terra.ReferenceNumber(vc.ref.Append("cluster_number"))
}

func (vc vmwareClusterAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](vc.ref.Append("hosts"))
}

func (vc vmwareClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("id"))
}

func (vc vmwareClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("name"))
}

func (vc vmwareClusterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("sku_name"))
}

func (vc vmwareClusterAttributes) VmwareCloudId() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("vmware_cloud_id"))
}

func (vc vmwareClusterAttributes) Timeouts() vmwarecluster.TimeoutsAttributes {
	return terra.ReferenceSingle[vmwarecluster.TimeoutsAttributes](vc.ref.Append("timeouts"))
}

type vmwareClusterState struct {
	ClusterNodeCount float64                      `json:"cluster_node_count"`
	ClusterNumber    float64                      `json:"cluster_number"`
	Hosts            []string                     `json:"hosts"`
	Id               string                       `json:"id"`
	Name             string                       `json:"name"`
	SkuName          string                       `json:"sku_name"`
	VmwareCloudId    string                       `json:"vmware_cloud_id"`
	Timeouts         *vmwarecluster.TimeoutsState `json:"timeouts"`
}
