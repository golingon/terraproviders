// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	containerregistrytask "github.com/golingon/terraproviders/azurerm/3.49.0/containerregistrytask"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewContainerRegistryTask creates a new instance of [ContainerRegistryTask].
func NewContainerRegistryTask(name string, args ContainerRegistryTaskArgs) *ContainerRegistryTask {
	return &ContainerRegistryTask{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerRegistryTask)(nil)

// ContainerRegistryTask represents the Terraform resource azurerm_container_registry_task.
type ContainerRegistryTask struct {
	Name      string
	Args      ContainerRegistryTaskArgs
	state     *containerRegistryTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ContainerRegistryTask].
func (crt *ContainerRegistryTask) Type() string {
	return "azurerm_container_registry_task"
}

// LocalName returns the local name for [ContainerRegistryTask].
func (crt *ContainerRegistryTask) LocalName() string {
	return crt.Name
}

// Configuration returns the configuration (args) for [ContainerRegistryTask].
func (crt *ContainerRegistryTask) Configuration() interface{} {
	return crt.Args
}

// DependOn is used for other resources to depend on [ContainerRegistryTask].
func (crt *ContainerRegistryTask) DependOn() terra.Reference {
	return terra.ReferenceResource(crt)
}

// Dependencies returns the list of resources [ContainerRegistryTask] depends_on.
func (crt *ContainerRegistryTask) Dependencies() terra.Dependencies {
	return crt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ContainerRegistryTask].
func (crt *ContainerRegistryTask) LifecycleManagement() *terra.Lifecycle {
	return crt.Lifecycle
}

// Attributes returns the attributes for [ContainerRegistryTask].
func (crt *ContainerRegistryTask) Attributes() containerRegistryTaskAttributes {
	return containerRegistryTaskAttributes{ref: terra.ReferenceResource(crt)}
}

// ImportState imports the given attribute values into [ContainerRegistryTask]'s state.
func (crt *ContainerRegistryTask) ImportState(av io.Reader) error {
	crt.state = &containerRegistryTaskState{}
	if err := json.NewDecoder(av).Decode(crt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crt.Type(), crt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ContainerRegistryTask] has state.
func (crt *ContainerRegistryTask) State() (*containerRegistryTaskState, bool) {
	return crt.state, crt.state != nil
}

// StateMust returns the state for [ContainerRegistryTask]. Panics if the state is nil.
func (crt *ContainerRegistryTask) StateMust() *containerRegistryTaskState {
	if crt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crt.Type(), crt.LocalName()))
	}
	return crt.state
}

// ContainerRegistryTaskArgs contains the configurations for azurerm_container_registry_task.
type ContainerRegistryTaskArgs struct {
	// AgentPoolName: string, optional
	AgentPoolName terra.StringValue `hcl:"agent_pool_name,attr"`
	// ContainerRegistryId: string, required
	ContainerRegistryId terra.StringValue `hcl:"container_registry_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsSystemTask: bool, optional
	IsSystemTask terra.BoolValue `hcl:"is_system_task,attr"`
	// LogTemplate: string, optional
	LogTemplate terra.StringValue `hcl:"log_template,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
	// AgentSetting: optional
	AgentSetting *containerregistrytask.AgentSetting `hcl:"agent_setting,block"`
	// BaseImageTrigger: optional
	BaseImageTrigger *containerregistrytask.BaseImageTrigger `hcl:"base_image_trigger,block"`
	// DockerStep: optional
	DockerStep *containerregistrytask.DockerStep `hcl:"docker_step,block"`
	// EncodedStep: optional
	EncodedStep *containerregistrytask.EncodedStep `hcl:"encoded_step,block"`
	// FileStep: optional
	FileStep *containerregistrytask.FileStep `hcl:"file_step,block"`
	// Identity: optional
	Identity *containerregistrytask.Identity `hcl:"identity,block"`
	// Platform: optional
	Platform *containerregistrytask.Platform `hcl:"platform,block"`
	// RegistryCredential: optional
	RegistryCredential *containerregistrytask.RegistryCredential `hcl:"registry_credential,block"`
	// SourceTrigger: min=0
	SourceTrigger []containerregistrytask.SourceTrigger `hcl:"source_trigger,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *containerregistrytask.Timeouts `hcl:"timeouts,block"`
	// TimerTrigger: min=0
	TimerTrigger []containerregistrytask.TimerTrigger `hcl:"timer_trigger,block" validate:"min=0"`
}
type containerRegistryTaskAttributes struct {
	ref terra.Reference
}

// AgentPoolName returns a reference to field agent_pool_name of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) AgentPoolName() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("agent_pool_name"))
}

// ContainerRegistryId returns a reference to field container_registry_id of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) ContainerRegistryId() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("container_registry_id"))
}

// Enabled returns a reference to field enabled of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(crt.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("id"))
}

// IsSystemTask returns a reference to field is_system_task of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) IsSystemTask() terra.BoolValue {
	return terra.ReferenceAsBool(crt.ref.Append("is_system_task"))
}

// LogTemplate returns a reference to field log_template of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) LogTemplate() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("log_template"))
}

// Name returns a reference to field name of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("name"))
}

// Tags returns a reference to field tags of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](crt.ref.Append("tags"))
}

// TimeoutInSeconds returns a reference to field timeout_in_seconds of azurerm_container_registry_task.
func (crt containerRegistryTaskAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(crt.ref.Append("timeout_in_seconds"))
}

func (crt containerRegistryTaskAttributes) AgentSetting() terra.ListValue[containerregistrytask.AgentSettingAttributes] {
	return terra.ReferenceAsList[containerregistrytask.AgentSettingAttributes](crt.ref.Append("agent_setting"))
}

func (crt containerRegistryTaskAttributes) BaseImageTrigger() terra.ListValue[containerregistrytask.BaseImageTriggerAttributes] {
	return terra.ReferenceAsList[containerregistrytask.BaseImageTriggerAttributes](crt.ref.Append("base_image_trigger"))
}

func (crt containerRegistryTaskAttributes) DockerStep() terra.ListValue[containerregistrytask.DockerStepAttributes] {
	return terra.ReferenceAsList[containerregistrytask.DockerStepAttributes](crt.ref.Append("docker_step"))
}

func (crt containerRegistryTaskAttributes) EncodedStep() terra.ListValue[containerregistrytask.EncodedStepAttributes] {
	return terra.ReferenceAsList[containerregistrytask.EncodedStepAttributes](crt.ref.Append("encoded_step"))
}

func (crt containerRegistryTaskAttributes) FileStep() terra.ListValue[containerregistrytask.FileStepAttributes] {
	return terra.ReferenceAsList[containerregistrytask.FileStepAttributes](crt.ref.Append("file_step"))
}

func (crt containerRegistryTaskAttributes) Identity() terra.ListValue[containerregistrytask.IdentityAttributes] {
	return terra.ReferenceAsList[containerregistrytask.IdentityAttributes](crt.ref.Append("identity"))
}

func (crt containerRegistryTaskAttributes) Platform() terra.ListValue[containerregistrytask.PlatformAttributes] {
	return terra.ReferenceAsList[containerregistrytask.PlatformAttributes](crt.ref.Append("platform"))
}

func (crt containerRegistryTaskAttributes) RegistryCredential() terra.ListValue[containerregistrytask.RegistryCredentialAttributes] {
	return terra.ReferenceAsList[containerregistrytask.RegistryCredentialAttributes](crt.ref.Append("registry_credential"))
}

func (crt containerRegistryTaskAttributes) SourceTrigger() terra.ListValue[containerregistrytask.SourceTriggerAttributes] {
	return terra.ReferenceAsList[containerregistrytask.SourceTriggerAttributes](crt.ref.Append("source_trigger"))
}

func (crt containerRegistryTaskAttributes) Timeouts() containerregistrytask.TimeoutsAttributes {
	return terra.ReferenceAsSingle[containerregistrytask.TimeoutsAttributes](crt.ref.Append("timeouts"))
}

func (crt containerRegistryTaskAttributes) TimerTrigger() terra.ListValue[containerregistrytask.TimerTriggerAttributes] {
	return terra.ReferenceAsList[containerregistrytask.TimerTriggerAttributes](crt.ref.Append("timer_trigger"))
}

type containerRegistryTaskState struct {
	AgentPoolName       string                                          `json:"agent_pool_name"`
	ContainerRegistryId string                                          `json:"container_registry_id"`
	Enabled             bool                                            `json:"enabled"`
	Id                  string                                          `json:"id"`
	IsSystemTask        bool                                            `json:"is_system_task"`
	LogTemplate         string                                          `json:"log_template"`
	Name                string                                          `json:"name"`
	Tags                map[string]string                               `json:"tags"`
	TimeoutInSeconds    float64                                         `json:"timeout_in_seconds"`
	AgentSetting        []containerregistrytask.AgentSettingState       `json:"agent_setting"`
	BaseImageTrigger    []containerregistrytask.BaseImageTriggerState   `json:"base_image_trigger"`
	DockerStep          []containerregistrytask.DockerStepState         `json:"docker_step"`
	EncodedStep         []containerregistrytask.EncodedStepState        `json:"encoded_step"`
	FileStep            []containerregistrytask.FileStepState           `json:"file_step"`
	Identity            []containerregistrytask.IdentityState           `json:"identity"`
	Platform            []containerregistrytask.PlatformState           `json:"platform"`
	RegistryCredential  []containerregistrytask.RegistryCredentialState `json:"registry_credential"`
	SourceTrigger       []containerregistrytask.SourceTriggerState      `json:"source_trigger"`
	Timeouts            *containerregistrytask.TimeoutsState            `json:"timeouts"`
	TimerTrigger        []containerregistrytask.TimerTriggerState       `json:"timer_trigger"`
}
