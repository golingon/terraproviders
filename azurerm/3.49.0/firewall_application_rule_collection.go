// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	firewallapplicationrulecollection "github.com/golingon/terraproviders/azurerm/3.49.0/firewallapplicationrulecollection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFirewallApplicationRuleCollection(name string, args FirewallApplicationRuleCollectionArgs) *FirewallApplicationRuleCollection {
	return &FirewallApplicationRuleCollection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FirewallApplicationRuleCollection)(nil)

type FirewallApplicationRuleCollection struct {
	Name  string
	Args  FirewallApplicationRuleCollectionArgs
	state *firewallApplicationRuleCollectionState
}

func (farc *FirewallApplicationRuleCollection) Type() string {
	return "azurerm_firewall_application_rule_collection"
}

func (farc *FirewallApplicationRuleCollection) LocalName() string {
	return farc.Name
}

func (farc *FirewallApplicationRuleCollection) Configuration() interface{} {
	return farc.Args
}

func (farc *FirewallApplicationRuleCollection) Attributes() firewallApplicationRuleCollectionAttributes {
	return firewallApplicationRuleCollectionAttributes{ref: terra.ReferenceResource(farc)}
}

func (farc *FirewallApplicationRuleCollection) ImportState(av io.Reader) error {
	farc.state = &firewallApplicationRuleCollectionState{}
	if err := json.NewDecoder(av).Decode(farc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", farc.Type(), farc.LocalName(), err)
	}
	return nil
}

func (farc *FirewallApplicationRuleCollection) State() (*firewallApplicationRuleCollectionState, bool) {
	return farc.state, farc.state != nil
}

func (farc *FirewallApplicationRuleCollection) StateMust() *firewallApplicationRuleCollectionState {
	if farc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", farc.Type(), farc.LocalName()))
	}
	return farc.state
}

func (farc *FirewallApplicationRuleCollection) DependOn() terra.Reference {
	return terra.ReferenceResource(farc)
}

type FirewallApplicationRuleCollectionArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// AzureFirewallName: string, required
	AzureFirewallName terra.StringValue `hcl:"azure_firewall_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Rule: min=1
	Rule []firewallapplicationrulecollection.Rule `hcl:"rule,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *firewallapplicationrulecollection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FirewallApplicationRuleCollection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type firewallApplicationRuleCollectionAttributes struct {
	ref terra.Reference
}

func (farc firewallApplicationRuleCollectionAttributes) Action() terra.StringValue {
	return terra.ReferenceString(farc.ref.Append("action"))
}

func (farc firewallApplicationRuleCollectionAttributes) AzureFirewallName() terra.StringValue {
	return terra.ReferenceString(farc.ref.Append("azure_firewall_name"))
}

func (farc firewallApplicationRuleCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(farc.ref.Append("id"))
}

func (farc firewallApplicationRuleCollectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(farc.ref.Append("name"))
}

func (farc firewallApplicationRuleCollectionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(farc.ref.Append("priority"))
}

func (farc firewallApplicationRuleCollectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(farc.ref.Append("resource_group_name"))
}

func (farc firewallApplicationRuleCollectionAttributes) Rule() terra.ListValue[firewallapplicationrulecollection.RuleAttributes] {
	return terra.ReferenceList[firewallapplicationrulecollection.RuleAttributes](farc.ref.Append("rule"))
}

func (farc firewallApplicationRuleCollectionAttributes) Timeouts() firewallapplicationrulecollection.TimeoutsAttributes {
	return terra.ReferenceSingle[firewallapplicationrulecollection.TimeoutsAttributes](farc.ref.Append("timeouts"))
}

type firewallApplicationRuleCollectionState struct {
	Action            string                                           `json:"action"`
	AzureFirewallName string                                           `json:"azure_firewall_name"`
	Id                string                                           `json:"id"`
	Name              string                                           `json:"name"`
	Priority          float64                                          `json:"priority"`
	ResourceGroupName string                                           `json:"resource_group_name"`
	Rule              []firewallapplicationrulecollection.RuleState    `json:"rule"`
	Timeouts          *firewallapplicationrulecollection.TimeoutsState `json:"timeouts"`
}
