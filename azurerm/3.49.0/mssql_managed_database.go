// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	mssqlmanageddatabase "github.com/golingon/terraproviders/azurerm/3.49.0/mssqlmanageddatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMssqlManagedDatabase(name string, args MssqlManagedDatabaseArgs) *MssqlManagedDatabase {
	return &MssqlManagedDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MssqlManagedDatabase)(nil)

type MssqlManagedDatabase struct {
	Name  string
	Args  MssqlManagedDatabaseArgs
	state *mssqlManagedDatabaseState
}

func (mmd *MssqlManagedDatabase) Type() string {
	return "azurerm_mssql_managed_database"
}

func (mmd *MssqlManagedDatabase) LocalName() string {
	return mmd.Name
}

func (mmd *MssqlManagedDatabase) Configuration() interface{} {
	return mmd.Args
}

func (mmd *MssqlManagedDatabase) Attributes() mssqlManagedDatabaseAttributes {
	return mssqlManagedDatabaseAttributes{ref: terra.ReferenceResource(mmd)}
}

func (mmd *MssqlManagedDatabase) ImportState(av io.Reader) error {
	mmd.state = &mssqlManagedDatabaseState{}
	if err := json.NewDecoder(av).Decode(mmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mmd.Type(), mmd.LocalName(), err)
	}
	return nil
}

func (mmd *MssqlManagedDatabase) State() (*mssqlManagedDatabaseState, bool) {
	return mmd.state, mmd.state != nil
}

func (mmd *MssqlManagedDatabase) StateMust() *mssqlManagedDatabaseState {
	if mmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mmd.Type(), mmd.LocalName()))
	}
	return mmd.state
}

func (mmd *MssqlManagedDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(mmd)
}

type MssqlManagedDatabaseArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedInstanceId: string, required
	ManagedInstanceId terra.StringValue `hcl:"managed_instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ShortTermRetentionDays: number, optional
	ShortTermRetentionDays terra.NumberValue `hcl:"short_term_retention_days,attr"`
	// LongTermRetentionPolicy: optional
	LongTermRetentionPolicy *mssqlmanageddatabase.LongTermRetentionPolicy `hcl:"long_term_retention_policy,block"`
	// Timeouts: optional
	Timeouts *mssqlmanageddatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MssqlManagedDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mssqlManagedDatabaseAttributes struct {
	ref terra.Reference
}

func (mmd mssqlManagedDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("id"))
}

func (mmd mssqlManagedDatabaseAttributes) ManagedInstanceId() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("managed_instance_id"))
}

func (mmd mssqlManagedDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mmd.ref.Append("name"))
}

func (mmd mssqlManagedDatabaseAttributes) ShortTermRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(mmd.ref.Append("short_term_retention_days"))
}

func (mmd mssqlManagedDatabaseAttributes) LongTermRetentionPolicy() terra.ListValue[mssqlmanageddatabase.LongTermRetentionPolicyAttributes] {
	return terra.ReferenceList[mssqlmanageddatabase.LongTermRetentionPolicyAttributes](mmd.ref.Append("long_term_retention_policy"))
}

func (mmd mssqlManagedDatabaseAttributes) Timeouts() mssqlmanageddatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[mssqlmanageddatabase.TimeoutsAttributes](mmd.ref.Append("timeouts"))
}

type mssqlManagedDatabaseState struct {
	Id                      string                                              `json:"id"`
	ManagedInstanceId       string                                              `json:"managed_instance_id"`
	Name                    string                                              `json:"name"`
	ShortTermRetentionDays  float64                                             `json:"short_term_retention_days"`
	LongTermRetentionPolicy []mssqlmanageddatabase.LongTermRetentionPolicyState `json:"long_term_retention_policy"`
	Timeouts                *mssqlmanageddatabase.TimeoutsState                 `json:"timeouts"`
}
