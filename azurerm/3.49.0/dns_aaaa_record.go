// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dnsaaaarecord "github.com/golingon/terraproviders/azurerm/3.49.0/dnsaaaarecord"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDnsAaaaRecord(name string, args DnsAaaaRecordArgs) *DnsAaaaRecord {
	return &DnsAaaaRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DnsAaaaRecord)(nil)

type DnsAaaaRecord struct {
	Name  string
	Args  DnsAaaaRecordArgs
	state *dnsAaaaRecordState
}

func (dar *DnsAaaaRecord) Type() string {
	return "azurerm_dns_aaaa_record"
}

func (dar *DnsAaaaRecord) LocalName() string {
	return dar.Name
}

func (dar *DnsAaaaRecord) Configuration() interface{} {
	return dar.Args
}

func (dar *DnsAaaaRecord) Attributes() dnsAaaaRecordAttributes {
	return dnsAaaaRecordAttributes{ref: terra.ReferenceResource(dar)}
}

func (dar *DnsAaaaRecord) ImportState(av io.Reader) error {
	dar.state = &dnsAaaaRecordState{}
	if err := json.NewDecoder(av).Decode(dar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dar.Type(), dar.LocalName(), err)
	}
	return nil
}

func (dar *DnsAaaaRecord) State() (*dnsAaaaRecordState, bool) {
	return dar.state, dar.state != nil
}

func (dar *DnsAaaaRecord) StateMust() *dnsAaaaRecordState {
	if dar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dar.Type(), dar.LocalName()))
	}
	return dar.state
}

func (dar *DnsAaaaRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(dar)
}

type DnsAaaaRecordArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Records: set of string, optional
	Records terra.SetValue[terra.StringValue] `hcl:"records,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetResourceId: string, optional
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dnsaaaarecord.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DnsAaaaRecord depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dnsAaaaRecordAttributes struct {
	ref terra.Reference
}

func (dar dnsAaaaRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("fqdn"))
}

func (dar dnsAaaaRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("id"))
}

func (dar dnsAaaaRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("name"))
}

func (dar dnsAaaaRecordAttributes) Records() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dar.ref.Append("records"))
}

func (dar dnsAaaaRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("resource_group_name"))
}

func (dar dnsAaaaRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dar.ref.Append("tags"))
}

func (dar dnsAaaaRecordAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("target_resource_id"))
}

func (dar dnsAaaaRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(dar.ref.Append("ttl"))
}

func (dar dnsAaaaRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceString(dar.ref.Append("zone_name"))
}

func (dar dnsAaaaRecordAttributes) Timeouts() dnsaaaarecord.TimeoutsAttributes {
	return terra.ReferenceSingle[dnsaaaarecord.TimeoutsAttributes](dar.ref.Append("timeouts"))
}

type dnsAaaaRecordState struct {
	Fqdn              string                       `json:"fqdn"`
	Id                string                       `json:"id"`
	Name              string                       `json:"name"`
	Records           []string                     `json:"records"`
	ResourceGroupName string                       `json:"resource_group_name"`
	Tags              map[string]string            `json:"tags"`
	TargetResourceId  string                       `json:"target_resource_id"`
	Ttl               float64                      `json:"ttl"`
	ZoneName          string                       `json:"zone_name"`
	Timeouts          *dnsaaaarecord.TimeoutsState `json:"timeouts"`
}
