// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorydatasetazureblob "github.com/golingon/terraproviders/azurerm/3.49.0/datafactorydatasetazureblob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataFactoryDatasetAzureBlob(name string, args DataFactoryDatasetAzureBlobArgs) *DataFactoryDatasetAzureBlob {
	return &DataFactoryDatasetAzureBlob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryDatasetAzureBlob)(nil)

type DataFactoryDatasetAzureBlob struct {
	Name  string
	Args  DataFactoryDatasetAzureBlobArgs
	state *dataFactoryDatasetAzureBlobState
}

func (dfdab *DataFactoryDatasetAzureBlob) Type() string {
	return "azurerm_data_factory_dataset_azure_blob"
}

func (dfdab *DataFactoryDatasetAzureBlob) LocalName() string {
	return dfdab.Name
}

func (dfdab *DataFactoryDatasetAzureBlob) Configuration() interface{} {
	return dfdab.Args
}

func (dfdab *DataFactoryDatasetAzureBlob) Attributes() dataFactoryDatasetAzureBlobAttributes {
	return dataFactoryDatasetAzureBlobAttributes{ref: terra.ReferenceResource(dfdab)}
}

func (dfdab *DataFactoryDatasetAzureBlob) ImportState(av io.Reader) error {
	dfdab.state = &dataFactoryDatasetAzureBlobState{}
	if err := json.NewDecoder(av).Decode(dfdab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfdab.Type(), dfdab.LocalName(), err)
	}
	return nil
}

func (dfdab *DataFactoryDatasetAzureBlob) State() (*dataFactoryDatasetAzureBlobState, bool) {
	return dfdab.state, dfdab.state != nil
}

func (dfdab *DataFactoryDatasetAzureBlob) StateMust() *dataFactoryDatasetAzureBlobState {
	if dfdab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfdab.Type(), dfdab.LocalName()))
	}
	return dfdab.state
}

func (dfdab *DataFactoryDatasetAzureBlob) DependOn() terra.Reference {
	return terra.ReferenceResource(dfdab)
}

type DataFactoryDatasetAzureBlobArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DynamicFilenameEnabled: bool, optional
	DynamicFilenameEnabled terra.BoolValue `hcl:"dynamic_filename_enabled,attr"`
	// DynamicPathEnabled: bool, optional
	DynamicPathEnabled terra.BoolValue `hcl:"dynamic_path_enabled,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// SchemaColumn: min=0
	SchemaColumn []datafactorydatasetazureblob.SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datafactorydatasetazureblob.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataFactoryDatasetAzureBlob depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataFactoryDatasetAzureBlobAttributes struct {
	ref terra.Reference
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdab.ref.Append("additional_properties"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dfdab.ref.Append("annotations"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("data_factory_id"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("description"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) DynamicFilenameEnabled() terra.BoolValue {
	return terra.ReferenceBool(dfdab.ref.Append("dynamic_filename_enabled"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) DynamicPathEnabled() terra.BoolValue {
	return terra.ReferenceBool(dfdab.ref.Append("dynamic_path_enabled"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Filename() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("filename"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Folder() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("folder"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("id"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("linked_service_name"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("name"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dfdab.ref.Append("parameters"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Path() terra.StringValue {
	return terra.ReferenceString(dfdab.ref.Append("path"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) SchemaColumn() terra.ListValue[datafactorydatasetazureblob.SchemaColumnAttributes] {
	return terra.ReferenceList[datafactorydatasetazureblob.SchemaColumnAttributes](dfdab.ref.Append("schema_column"))
}

func (dfdab dataFactoryDatasetAzureBlobAttributes) Timeouts() datafactorydatasetazureblob.TimeoutsAttributes {
	return terra.ReferenceSingle[datafactorydatasetazureblob.TimeoutsAttributes](dfdab.ref.Append("timeouts"))
}

type dataFactoryDatasetAzureBlobState struct {
	AdditionalProperties   map[string]string                               `json:"additional_properties"`
	Annotations            []string                                        `json:"annotations"`
	DataFactoryId          string                                          `json:"data_factory_id"`
	Description            string                                          `json:"description"`
	DynamicFilenameEnabled bool                                            `json:"dynamic_filename_enabled"`
	DynamicPathEnabled     bool                                            `json:"dynamic_path_enabled"`
	Filename               string                                          `json:"filename"`
	Folder                 string                                          `json:"folder"`
	Id                     string                                          `json:"id"`
	LinkedServiceName      string                                          `json:"linked_service_name"`
	Name                   string                                          `json:"name"`
	Parameters             map[string]string                               `json:"parameters"`
	Path                   string                                          `json:"path"`
	SchemaColumn           []datafactorydatasetazureblob.SchemaColumnState `json:"schema_column"`
	Timeouts               *datafactorydatasetazureblob.TimeoutsState      `json:"timeouts"`
}
