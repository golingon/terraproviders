// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	streamanalyticsstreaminputeventhubv2 "github.com/golingon/terraproviders/azurerm/3.49.0/streamanalyticsstreaminputeventhubv2"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStreamAnalyticsStreamInputEventhubV2(name string, args StreamAnalyticsStreamInputEventhubV2Args) *StreamAnalyticsStreamInputEventhubV2 {
	return &StreamAnalyticsStreamInputEventhubV2{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StreamAnalyticsStreamInputEventhubV2)(nil)

type StreamAnalyticsStreamInputEventhubV2 struct {
	Name  string
	Args  StreamAnalyticsStreamInputEventhubV2Args
	state *streamAnalyticsStreamInputEventhubV2State
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) Type() string {
	return "azurerm_stream_analytics_stream_input_eventhub_v2"
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) LocalName() string {
	return sasiev.Name
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) Configuration() interface{} {
	return sasiev.Args
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) Attributes() streamAnalyticsStreamInputEventhubV2Attributes {
	return streamAnalyticsStreamInputEventhubV2Attributes{ref: terra.ReferenceResource(sasiev)}
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) ImportState(av io.Reader) error {
	sasiev.state = &streamAnalyticsStreamInputEventhubV2State{}
	if err := json.NewDecoder(av).Decode(sasiev.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sasiev.Type(), sasiev.LocalName(), err)
	}
	return nil
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) State() (*streamAnalyticsStreamInputEventhubV2State, bool) {
	return sasiev.state, sasiev.state != nil
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) StateMust() *streamAnalyticsStreamInputEventhubV2State {
	if sasiev.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sasiev.Type(), sasiev.LocalName()))
	}
	return sasiev.state
}

func (sasiev *StreamAnalyticsStreamInputEventhubV2) DependOn() terra.Reference {
	return terra.ReferenceResource(sasiev)
}

type StreamAnalyticsStreamInputEventhubV2Args struct {
	// AuthenticationMode: string, optional
	AuthenticationMode terra.StringValue `hcl:"authentication_mode,attr"`
	// EventhubConsumerGroupName: string, optional
	EventhubConsumerGroupName terra.StringValue `hcl:"eventhub_consumer_group_name,attr"`
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKey: string, optional
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// ServicebusNamespace: string, required
	ServicebusNamespace terra.StringValue `hcl:"servicebus_namespace,attr" validate:"required"`
	// SharedAccessPolicyKey: string, optional
	SharedAccessPolicyKey terra.StringValue `hcl:"shared_access_policy_key,attr"`
	// SharedAccessPolicyName: string, optional
	SharedAccessPolicyName terra.StringValue `hcl:"shared_access_policy_name,attr"`
	// StreamAnalyticsJobId: string, required
	StreamAnalyticsJobId terra.StringValue `hcl:"stream_analytics_job_id,attr" validate:"required"`
	// Serialization: required
	Serialization *streamanalyticsstreaminputeventhubv2.Serialization `hcl:"serialization,block" validate:"required"`
	// Timeouts: optional
	Timeouts *streamanalyticsstreaminputeventhubv2.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StreamAnalyticsStreamInputEventhubV2 depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type streamAnalyticsStreamInputEventhubV2Attributes struct {
	ref terra.Reference
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) AuthenticationMode() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("authentication_mode"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) EventhubConsumerGroupName() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("eventhub_consumer_group_name"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) EventhubName() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("eventhub_name"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) Id() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("id"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) Name() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("name"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) PartitionKey() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("partition_key"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) ServicebusNamespace() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("servicebus_namespace"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) SharedAccessPolicyKey() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("shared_access_policy_key"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) SharedAccessPolicyName() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("shared_access_policy_name"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) StreamAnalyticsJobId() terra.StringValue {
	return terra.ReferenceString(sasiev.ref.Append("stream_analytics_job_id"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) Serialization() terra.ListValue[streamanalyticsstreaminputeventhubv2.SerializationAttributes] {
	return terra.ReferenceList[streamanalyticsstreaminputeventhubv2.SerializationAttributes](sasiev.ref.Append("serialization"))
}

func (sasiev streamAnalyticsStreamInputEventhubV2Attributes) Timeouts() streamanalyticsstreaminputeventhubv2.TimeoutsAttributes {
	return terra.ReferenceSingle[streamanalyticsstreaminputeventhubv2.TimeoutsAttributes](sasiev.ref.Append("timeouts"))
}

type streamAnalyticsStreamInputEventhubV2State struct {
	AuthenticationMode        string                                                    `json:"authentication_mode"`
	EventhubConsumerGroupName string                                                    `json:"eventhub_consumer_group_name"`
	EventhubName              string                                                    `json:"eventhub_name"`
	Id                        string                                                    `json:"id"`
	Name                      string                                                    `json:"name"`
	PartitionKey              string                                                    `json:"partition_key"`
	ServicebusNamespace       string                                                    `json:"servicebus_namespace"`
	SharedAccessPolicyKey     string                                                    `json:"shared_access_policy_key"`
	SharedAccessPolicyName    string                                                    `json:"shared_access_policy_name"`
	StreamAnalyticsJobId      string                                                    `json:"stream_analytics_job_id"`
	Serialization             []streamanalyticsstreaminputeventhubv2.SerializationState `json:"serialization"`
	Timeouts                  *streamanalyticsstreaminputeventhubv2.TimeoutsState       `json:"timeouts"`
}
