// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package iotsecuritydevicegroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AllowRule struct {
	// ConnectionFromIpsNotAllowed: set of string, optional
	ConnectionFromIpsNotAllowed terra.SetValue[terra.StringValue] `hcl:"connection_from_ips_not_allowed,attr"`
	// ConnectionToIpsNotAllowed: set of string, optional
	ConnectionToIpsNotAllowed terra.SetValue[terra.StringValue] `hcl:"connection_to_ips_not_allowed,attr"`
	// LocalUsersNotAllowed: set of string, optional
	LocalUsersNotAllowed terra.SetValue[terra.StringValue] `hcl:"local_users_not_allowed,attr"`
	// ProcessesNotAllowed: set of string, optional
	ProcessesNotAllowed terra.SetValue[terra.StringValue] `hcl:"processes_not_allowed,attr"`
}

type RangeRule struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// Max: number, required
	Max terra.NumberValue `hcl:"max,attr" validate:"required"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AllowRuleAttributes struct {
	ref terra.Reference
}

func (ar AllowRuleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar AllowRuleAttributes) InternalWithRef(ref terra.Reference) AllowRuleAttributes {
	return AllowRuleAttributes{ref: ref}
}

func (ar AllowRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar AllowRuleAttributes) ConnectionFromIpsNotAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("connection_from_ips_not_allowed"))
}

func (ar AllowRuleAttributes) ConnectionToIpsNotAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("connection_to_ips_not_allowed"))
}

func (ar AllowRuleAttributes) LocalUsersNotAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("local_users_not_allowed"))
}

func (ar AllowRuleAttributes) ProcessesNotAllowed() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("processes_not_allowed"))
}

type RangeRuleAttributes struct {
	ref terra.Reference
}

func (rr RangeRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RangeRuleAttributes) InternalWithRef(ref terra.Reference) RangeRuleAttributes {
	return RangeRuleAttributes{ref: ref}
}

func (rr RangeRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RangeRuleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("duration"))
}

func (rr RangeRuleAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("max"))
}

func (rr RangeRuleAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("min"))
}

func (rr RangeRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AllowRuleState struct {
	ConnectionFromIpsNotAllowed []string `json:"connection_from_ips_not_allowed"`
	ConnectionToIpsNotAllowed   []string `json:"connection_to_ips_not_allowed"`
	LocalUsersNotAllowed        []string `json:"local_users_not_allowed"`
	ProcessesNotAllowed         []string `json:"processes_not_allowed"`
}

type RangeRuleState struct {
	Duration string  `json:"duration"`
	Max      float64 `json:"max"`
	Min      float64 `json:"min"`
	Type     string  `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
