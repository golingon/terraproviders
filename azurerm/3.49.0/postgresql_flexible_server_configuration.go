// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlflexibleserverconfiguration "github.com/golingon/terraproviders/azurerm/3.49.0/postgresqlflexibleserverconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPostgresqlFlexibleServerConfiguration(name string, args PostgresqlFlexibleServerConfigurationArgs) *PostgresqlFlexibleServerConfiguration {
	return &PostgresqlFlexibleServerConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlFlexibleServerConfiguration)(nil)

type PostgresqlFlexibleServerConfiguration struct {
	Name  string
	Args  PostgresqlFlexibleServerConfigurationArgs
	state *postgresqlFlexibleServerConfigurationState
}

func (pfsc *PostgresqlFlexibleServerConfiguration) Type() string {
	return "azurerm_postgresql_flexible_server_configuration"
}

func (pfsc *PostgresqlFlexibleServerConfiguration) LocalName() string {
	return pfsc.Name
}

func (pfsc *PostgresqlFlexibleServerConfiguration) Configuration() interface{} {
	return pfsc.Args
}

func (pfsc *PostgresqlFlexibleServerConfiguration) Attributes() postgresqlFlexibleServerConfigurationAttributes {
	return postgresqlFlexibleServerConfigurationAttributes{ref: terra.ReferenceResource(pfsc)}
}

func (pfsc *PostgresqlFlexibleServerConfiguration) ImportState(av io.Reader) error {
	pfsc.state = &postgresqlFlexibleServerConfigurationState{}
	if err := json.NewDecoder(av).Decode(pfsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pfsc.Type(), pfsc.LocalName(), err)
	}
	return nil
}

func (pfsc *PostgresqlFlexibleServerConfiguration) State() (*postgresqlFlexibleServerConfigurationState, bool) {
	return pfsc.state, pfsc.state != nil
}

func (pfsc *PostgresqlFlexibleServerConfiguration) StateMust() *postgresqlFlexibleServerConfigurationState {
	if pfsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pfsc.Type(), pfsc.LocalName()))
	}
	return pfsc.state
}

func (pfsc *PostgresqlFlexibleServerConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(pfsc)
}

type PostgresqlFlexibleServerConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *postgresqlflexibleserverconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that PostgresqlFlexibleServerConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type postgresqlFlexibleServerConfigurationAttributes struct {
	ref terra.Reference
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pfsc.ref.Append("id"))
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pfsc.ref.Append("name"))
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) ServerId() terra.StringValue {
	return terra.ReferenceString(pfsc.ref.Append("server_id"))
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) Value() terra.StringValue {
	return terra.ReferenceString(pfsc.ref.Append("value"))
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) Timeouts() postgresqlflexibleserverconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[postgresqlflexibleserverconfiguration.TimeoutsAttributes](pfsc.ref.Append("timeouts"))
}

type postgresqlFlexibleServerConfigurationState struct {
	Id       string                                               `json:"id"`
	Name     string                                               `json:"name"`
	ServerId string                                               `json:"server_id"`
	Value    string                                               `json:"value"`
	Timeouts *postgresqlflexibleserverconfiguration.TimeoutsState `json:"timeouts"`
}
