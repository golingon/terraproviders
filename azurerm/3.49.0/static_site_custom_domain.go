// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	staticsitecustomdomain "github.com/golingon/terraproviders/azurerm/3.49.0/staticsitecustomdomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStaticSiteCustomDomain(name string, args StaticSiteCustomDomainArgs) *StaticSiteCustomDomain {
	return &StaticSiteCustomDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StaticSiteCustomDomain)(nil)

type StaticSiteCustomDomain struct {
	Name  string
	Args  StaticSiteCustomDomainArgs
	state *staticSiteCustomDomainState
}

func (sscd *StaticSiteCustomDomain) Type() string {
	return "azurerm_static_site_custom_domain"
}

func (sscd *StaticSiteCustomDomain) LocalName() string {
	return sscd.Name
}

func (sscd *StaticSiteCustomDomain) Configuration() interface{} {
	return sscd.Args
}

func (sscd *StaticSiteCustomDomain) Attributes() staticSiteCustomDomainAttributes {
	return staticSiteCustomDomainAttributes{ref: terra.ReferenceResource(sscd)}
}

func (sscd *StaticSiteCustomDomain) ImportState(av io.Reader) error {
	sscd.state = &staticSiteCustomDomainState{}
	if err := json.NewDecoder(av).Decode(sscd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sscd.Type(), sscd.LocalName(), err)
	}
	return nil
}

func (sscd *StaticSiteCustomDomain) State() (*staticSiteCustomDomainState, bool) {
	return sscd.state, sscd.state != nil
}

func (sscd *StaticSiteCustomDomain) StateMust() *staticSiteCustomDomainState {
	if sscd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sscd.Type(), sscd.LocalName()))
	}
	return sscd.state
}

func (sscd *StaticSiteCustomDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(sscd)
}

type StaticSiteCustomDomainArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StaticSiteId: string, required
	StaticSiteId terra.StringValue `hcl:"static_site_id,attr" validate:"required"`
	// ValidationType: string, optional
	ValidationType terra.StringValue `hcl:"validation_type,attr"`
	// Timeouts: optional
	Timeouts *staticsitecustomdomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StaticSiteCustomDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type staticSiteCustomDomainAttributes struct {
	ref terra.Reference
}

func (sscd staticSiteCustomDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(sscd.ref.Append("domain_name"))
}

func (sscd staticSiteCustomDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sscd.ref.Append("id"))
}

func (sscd staticSiteCustomDomainAttributes) StaticSiteId() terra.StringValue {
	return terra.ReferenceString(sscd.ref.Append("static_site_id"))
}

func (sscd staticSiteCustomDomainAttributes) ValidationToken() terra.StringValue {
	return terra.ReferenceString(sscd.ref.Append("validation_token"))
}

func (sscd staticSiteCustomDomainAttributes) ValidationType() terra.StringValue {
	return terra.ReferenceString(sscd.ref.Append("validation_type"))
}

func (sscd staticSiteCustomDomainAttributes) Timeouts() staticsitecustomdomain.TimeoutsAttributes {
	return terra.ReferenceSingle[staticsitecustomdomain.TimeoutsAttributes](sscd.ref.Append("timeouts"))
}

type staticSiteCustomDomainState struct {
	DomainName      string                                `json:"domain_name"`
	Id              string                                `json:"id"`
	StaticSiteId    string                                `json:"static_site_id"`
	ValidationToken string                                `json:"validation_token"`
	ValidationType  string                                `json:"validation_type"`
	Timeouts        *staticsitecustomdomain.TimeoutsState `json:"timeouts"`
}
