// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	dataappservicecertificate "github.com/golingon/terraproviders/azurerm/3.49.0/dataappservicecertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataAppServiceCertificate(name string, args DataAppServiceCertificateArgs) *DataAppServiceCertificate {
	return &DataAppServiceCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataAppServiceCertificate)(nil)

type DataAppServiceCertificate struct {
	Name string
	Args DataAppServiceCertificateArgs
}

func (asc *DataAppServiceCertificate) DataSource() string {
	return "azurerm_app_service_certificate"
}

func (asc *DataAppServiceCertificate) LocalName() string {
	return asc.Name
}

func (asc *DataAppServiceCertificate) Configuration() interface{} {
	return asc.Args
}

func (asc *DataAppServiceCertificate) Attributes() dataAppServiceCertificateAttributes {
	return dataAppServiceCertificateAttributes{ref: terra.ReferenceDataResource(asc)}
}

type DataAppServiceCertificateArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *dataappservicecertificate.Timeouts `hcl:"timeouts,block"`
}
type dataAppServiceCertificateAttributes struct {
	ref terra.Reference
}

func (asc dataAppServiceCertificateAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("expiration_date"))
}

func (asc dataAppServiceCertificateAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("friendly_name"))
}

func (asc dataAppServiceCertificateAttributes) HostNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](asc.ref.Append("host_names"))
}

func (asc dataAppServiceCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("id"))
}

func (asc dataAppServiceCertificateAttributes) IssueDate() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("issue_date"))
}

func (asc dataAppServiceCertificateAttributes) Issuer() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("issuer"))
}

func (asc dataAppServiceCertificateAttributes) Location() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("location"))
}

func (asc dataAppServiceCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("name"))
}

func (asc dataAppServiceCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("resource_group_name"))
}

func (asc dataAppServiceCertificateAttributes) SubjectName() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("subject_name"))
}

func (asc dataAppServiceCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](asc.ref.Append("tags"))
}

func (asc dataAppServiceCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceString(asc.ref.Append("thumbprint"))
}

func (asc dataAppServiceCertificateAttributes) Timeouts() dataappservicecertificate.TimeoutsAttributes {
	return terra.ReferenceSingle[dataappservicecertificate.TimeoutsAttributes](asc.ref.Append("timeouts"))
}
