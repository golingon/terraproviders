// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package storageobjectreplication

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rules struct {
	// CopyBlobsCreatedAfter: string, optional
	CopyBlobsCreatedAfter terra.StringValue `hcl:"copy_blobs_created_after,attr"`
	// DestinationContainerName: string, required
	DestinationContainerName terra.StringValue `hcl:"destination_container_name,attr" validate:"required"`
	// FilterOutBlobsWithPrefix: set of string, optional
	FilterOutBlobsWithPrefix terra.SetValue[terra.StringValue] `hcl:"filter_out_blobs_with_prefix,attr"`
	// SourceContainerName: string, required
	SourceContainerName terra.StringValue `hcl:"source_container_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) CopyBlobsCreatedAfter() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("copy_blobs_created_after"))
}

func (r RulesAttributes) DestinationContainerName() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("destination_container_name"))
}

func (r RulesAttributes) FilterOutBlobsWithPrefix() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](r.ref.Append("filter_out_blobs_with_prefix"))
}

func (r RulesAttributes) Name() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("name"))
}

func (r RulesAttributes) SourceContainerName() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("source_container_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type RulesState struct {
	CopyBlobsCreatedAfter    string   `json:"copy_blobs_created_after"`
	DestinationContainerName string   `json:"destination_container_name"`
	FilterOutBlobsWithPrefix []string `json:"filter_out_blobs_with_prefix"`
	Name                     string   `json:"name"`
	SourceContainerName      string   `json:"source_container_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
