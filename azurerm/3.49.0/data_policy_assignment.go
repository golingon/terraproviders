// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datapolicyassignment "github.com/golingon/terraproviders/azurerm/3.49.0/datapolicyassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataPolicyAssignment(name string, args DataPolicyAssignmentArgs) *DataPolicyAssignment {
	return &DataPolicyAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataPolicyAssignment)(nil)

type DataPolicyAssignment struct {
	Name string
	Args DataPolicyAssignmentArgs
}

func (pa *DataPolicyAssignment) DataSource() string {
	return "azurerm_policy_assignment"
}

func (pa *DataPolicyAssignment) LocalName() string {
	return pa.Name
}

func (pa *DataPolicyAssignment) Configuration() interface{} {
	return pa.Args
}

func (pa *DataPolicyAssignment) Attributes() dataPolicyAssignmentAttributes {
	return dataPolicyAssignmentAttributes{ref: terra.ReferenceDataResource(pa)}
}

type DataPolicyAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// Identity: min=0
	Identity []datapolicyassignment.Identity `hcl:"identity,block" validate:"min=0"`
	// NonComplianceMessage: min=0
	NonComplianceMessage []datapolicyassignment.NonComplianceMessage `hcl:"non_compliance_message,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datapolicyassignment.Timeouts `hcl:"timeouts,block"`
}
type dataPolicyAssignmentAttributes struct {
	ref terra.Reference
}

func (pa dataPolicyAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("description"))
}

func (pa dataPolicyAssignmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("display_name"))
}

func (pa dataPolicyAssignmentAttributes) Enforce() terra.BoolValue {
	return terra.ReferenceBool(pa.ref.Append("enforce"))
}

func (pa dataPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("id"))
}

func (pa dataPolicyAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("location"))
}

func (pa dataPolicyAssignmentAttributes) Metadata() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("metadata"))
}

func (pa dataPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("name"))
}

func (pa dataPolicyAssignmentAttributes) NotScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](pa.ref.Append("not_scopes"))
}

func (pa dataPolicyAssignmentAttributes) Parameters() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("parameters"))
}

func (pa dataPolicyAssignmentAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("policy_definition_id"))
}

func (pa dataPolicyAssignmentAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceString(pa.ref.Append("scope_id"))
}

func (pa dataPolicyAssignmentAttributes) Identity() terra.ListValue[datapolicyassignment.IdentityAttributes] {
	return terra.ReferenceList[datapolicyassignment.IdentityAttributes](pa.ref.Append("identity"))
}

func (pa dataPolicyAssignmentAttributes) NonComplianceMessage() terra.ListValue[datapolicyassignment.NonComplianceMessageAttributes] {
	return terra.ReferenceList[datapolicyassignment.NonComplianceMessageAttributes](pa.ref.Append("non_compliance_message"))
}

func (pa dataPolicyAssignmentAttributes) Timeouts() datapolicyassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[datapolicyassignment.TimeoutsAttributes](pa.ref.Append("timeouts"))
}
