// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	frontdoorrulesengine "github.com/golingon/terraproviders/azurerm/3.49.0/frontdoorrulesengine"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFrontdoorRulesEngine(name string, args FrontdoorRulesEngineArgs) *FrontdoorRulesEngine {
	return &FrontdoorRulesEngine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FrontdoorRulesEngine)(nil)

type FrontdoorRulesEngine struct {
	Name  string
	Args  FrontdoorRulesEngineArgs
	state *frontdoorRulesEngineState
}

func (fre *FrontdoorRulesEngine) Type() string {
	return "azurerm_frontdoor_rules_engine"
}

func (fre *FrontdoorRulesEngine) LocalName() string {
	return fre.Name
}

func (fre *FrontdoorRulesEngine) Configuration() interface{} {
	return fre.Args
}

func (fre *FrontdoorRulesEngine) Attributes() frontdoorRulesEngineAttributes {
	return frontdoorRulesEngineAttributes{ref: terra.ReferenceResource(fre)}
}

func (fre *FrontdoorRulesEngine) ImportState(av io.Reader) error {
	fre.state = &frontdoorRulesEngineState{}
	if err := json.NewDecoder(av).Decode(fre.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fre.Type(), fre.LocalName(), err)
	}
	return nil
}

func (fre *FrontdoorRulesEngine) State() (*frontdoorRulesEngineState, bool) {
	return fre.state, fre.state != nil
}

func (fre *FrontdoorRulesEngine) StateMust() *frontdoorRulesEngineState {
	if fre.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fre.Type(), fre.LocalName()))
	}
	return fre.state
}

func (fre *FrontdoorRulesEngine) DependOn() terra.Reference {
	return terra.ReferenceResource(fre)
}

type FrontdoorRulesEngineArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FrontdoorName: string, required
	FrontdoorName terra.StringValue `hcl:"frontdoor_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Rule: min=0,max=100
	Rule []frontdoorrulesengine.Rule `hcl:"rule,block" validate:"min=0,max=100"`
	// Timeouts: optional
	Timeouts *frontdoorrulesengine.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FrontdoorRulesEngine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type frontdoorRulesEngineAttributes struct {
	ref terra.Reference
}

func (fre frontdoorRulesEngineAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(fre.ref.Append("enabled"))
}

func (fre frontdoorRulesEngineAttributes) FrontdoorName() terra.StringValue {
	return terra.ReferenceString(fre.ref.Append("frontdoor_name"))
}

func (fre frontdoorRulesEngineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fre.ref.Append("id"))
}

func (fre frontdoorRulesEngineAttributes) Location() terra.StringValue {
	return terra.ReferenceString(fre.ref.Append("location"))
}

func (fre frontdoorRulesEngineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fre.ref.Append("name"))
}

func (fre frontdoorRulesEngineAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(fre.ref.Append("resource_group_name"))
}

func (fre frontdoorRulesEngineAttributes) Rule() terra.ListValue[frontdoorrulesengine.RuleAttributes] {
	return terra.ReferenceList[frontdoorrulesengine.RuleAttributes](fre.ref.Append("rule"))
}

func (fre frontdoorRulesEngineAttributes) Timeouts() frontdoorrulesengine.TimeoutsAttributes {
	return terra.ReferenceSingle[frontdoorrulesengine.TimeoutsAttributes](fre.ref.Append("timeouts"))
}

type frontdoorRulesEngineState struct {
	Enabled           bool                                `json:"enabled"`
	FrontdoorName     string                              `json:"frontdoor_name"`
	Id                string                              `json:"id"`
	Location          string                              `json:"location"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Rule              []frontdoorrulesengine.RuleState    `json:"rule"`
	Timeouts          *frontdoorrulesengine.TimeoutsState `json:"timeouts"`
}
