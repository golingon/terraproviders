// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	eventgriddomaintopic "github.com/golingon/terraproviders/azurerm/3.49.0/eventgriddomaintopic"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEventgridDomainTopic(name string, args EventgridDomainTopicArgs) *EventgridDomainTopic {
	return &EventgridDomainTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventgridDomainTopic)(nil)

type EventgridDomainTopic struct {
	Name  string
	Args  EventgridDomainTopicArgs
	state *eventgridDomainTopicState
}

func (edt *EventgridDomainTopic) Type() string {
	return "azurerm_eventgrid_domain_topic"
}

func (edt *EventgridDomainTopic) LocalName() string {
	return edt.Name
}

func (edt *EventgridDomainTopic) Configuration() interface{} {
	return edt.Args
}

func (edt *EventgridDomainTopic) Attributes() eventgridDomainTopicAttributes {
	return eventgridDomainTopicAttributes{ref: terra.ReferenceResource(edt)}
}

func (edt *EventgridDomainTopic) ImportState(av io.Reader) error {
	edt.state = &eventgridDomainTopicState{}
	if err := json.NewDecoder(av).Decode(edt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", edt.Type(), edt.LocalName(), err)
	}
	return nil
}

func (edt *EventgridDomainTopic) State() (*eventgridDomainTopicState, bool) {
	return edt.state, edt.state != nil
}

func (edt *EventgridDomainTopic) StateMust() *eventgridDomainTopicState {
	if edt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", edt.Type(), edt.LocalName()))
	}
	return edt.state
}

func (edt *EventgridDomainTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(edt)
}

type EventgridDomainTopicArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *eventgriddomaintopic.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EventgridDomainTopic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eventgridDomainTopicAttributes struct {
	ref terra.Reference
}

func (edt eventgridDomainTopicAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(edt.ref.Append("domain_name"))
}

func (edt eventgridDomainTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceString(edt.ref.Append("id"))
}

func (edt eventgridDomainTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceString(edt.ref.Append("name"))
}

func (edt eventgridDomainTopicAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(edt.ref.Append("resource_group_name"))
}

func (edt eventgridDomainTopicAttributes) Timeouts() eventgriddomaintopic.TimeoutsAttributes {
	return terra.ReferenceSingle[eventgriddomaintopic.TimeoutsAttributes](edt.ref.Append("timeouts"))
}

type eventgridDomainTopicState struct {
	DomainName        string                              `json:"domain_name"`
	Id                string                              `json:"id"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Timeouts          *eventgriddomaintopic.TimeoutsState `json:"timeouts"`
}
