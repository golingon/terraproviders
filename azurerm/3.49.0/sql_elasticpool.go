// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	sqlelasticpool "github.com/golingon/terraproviders/azurerm/3.49.0/sqlelasticpool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqlElasticpool(name string, args SqlElasticpoolArgs) *SqlElasticpool {
	return &SqlElasticpool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqlElasticpool)(nil)

type SqlElasticpool struct {
	Name  string
	Args  SqlElasticpoolArgs
	state *sqlElasticpoolState
}

func (se *SqlElasticpool) Type() string {
	return "azurerm_sql_elasticpool"
}

func (se *SqlElasticpool) LocalName() string {
	return se.Name
}

func (se *SqlElasticpool) Configuration() interface{} {
	return se.Args
}

func (se *SqlElasticpool) Attributes() sqlElasticpoolAttributes {
	return sqlElasticpoolAttributes{ref: terra.ReferenceResource(se)}
}

func (se *SqlElasticpool) ImportState(av io.Reader) error {
	se.state = &sqlElasticpoolState{}
	if err := json.NewDecoder(av).Decode(se.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", se.Type(), se.LocalName(), err)
	}
	return nil
}

func (se *SqlElasticpool) State() (*sqlElasticpoolState, bool) {
	return se.state, se.state != nil
}

func (se *SqlElasticpool) StateMust() *sqlElasticpoolState {
	if se.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", se.Type(), se.LocalName()))
	}
	return se.state
}

func (se *SqlElasticpool) DependOn() terra.Reference {
	return terra.ReferenceResource(se)
}

type SqlElasticpoolArgs struct {
	// DbDtuMax: number, optional
	DbDtuMax terra.NumberValue `hcl:"db_dtu_max,attr"`
	// DbDtuMin: number, optional
	DbDtuMin terra.NumberValue `hcl:"db_dtu_min,attr"`
	// Dtu: number, required
	Dtu terra.NumberValue `hcl:"dtu,attr" validate:"required"`
	// Edition: string, required
	Edition terra.StringValue `hcl:"edition,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolSize: number, optional
	PoolSize terra.NumberValue `hcl:"pool_size,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *sqlelasticpool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SqlElasticpool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqlElasticpoolAttributes struct {
	ref terra.Reference
}

func (se sqlElasticpoolAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("creation_date"))
}

func (se sqlElasticpoolAttributes) DbDtuMax() terra.NumberValue {
	return terra.ReferenceNumber(se.ref.Append("db_dtu_max"))
}

func (se sqlElasticpoolAttributes) DbDtuMin() terra.NumberValue {
	return terra.ReferenceNumber(se.ref.Append("db_dtu_min"))
}

func (se sqlElasticpoolAttributes) Dtu() terra.NumberValue {
	return terra.ReferenceNumber(se.ref.Append("dtu"))
}

func (se sqlElasticpoolAttributes) Edition() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("edition"))
}

func (se sqlElasticpoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("id"))
}

func (se sqlElasticpoolAttributes) Location() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("location"))
}

func (se sqlElasticpoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("name"))
}

func (se sqlElasticpoolAttributes) PoolSize() terra.NumberValue {
	return terra.ReferenceNumber(se.ref.Append("pool_size"))
}

func (se sqlElasticpoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("resource_group_name"))
}

func (se sqlElasticpoolAttributes) ServerName() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("server_name"))
}

func (se sqlElasticpoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](se.ref.Append("tags"))
}

func (se sqlElasticpoolAttributes) Timeouts() sqlelasticpool.TimeoutsAttributes {
	return terra.ReferenceSingle[sqlelasticpool.TimeoutsAttributes](se.ref.Append("timeouts"))
}

type sqlElasticpoolState struct {
	CreationDate      string                        `json:"creation_date"`
	DbDtuMax          float64                       `json:"db_dtu_max"`
	DbDtuMin          float64                       `json:"db_dtu_min"`
	Dtu               float64                       `json:"dtu"`
	Edition           string                        `json:"edition"`
	Id                string                        `json:"id"`
	Location          string                        `json:"location"`
	Name              string                        `json:"name"`
	PoolSize          float64                       `json:"pool_size"`
	ResourceGroupName string                        `json:"resource_group_name"`
	ServerName        string                        `json:"server_name"`
	Tags              map[string]string             `json:"tags"`
	Timeouts          *sqlelasticpool.TimeoutsState `json:"timeouts"`
}
