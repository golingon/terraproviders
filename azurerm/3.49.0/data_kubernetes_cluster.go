// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	datakubernetescluster "github.com/golingon/terraproviders/azurerm/3.49.0/datakubernetescluster"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataKubernetesCluster(name string, args DataKubernetesClusterArgs) *DataKubernetesCluster {
	return &DataKubernetesCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataKubernetesCluster)(nil)

type DataKubernetesCluster struct {
	Name string
	Args DataKubernetesClusterArgs
}

func (kc *DataKubernetesCluster) DataSource() string {
	return "azurerm_kubernetes_cluster"
}

func (kc *DataKubernetesCluster) LocalName() string {
	return kc.Name
}

func (kc *DataKubernetesCluster) Configuration() interface{} {
	return kc.Args
}

func (kc *DataKubernetesCluster) Attributes() dataKubernetesClusterAttributes {
	return dataKubernetesClusterAttributes{ref: terra.ReferenceDataResource(kc)}
}

type DataKubernetesClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// AciConnectorLinux: min=0
	AciConnectorLinux []datakubernetescluster.AciConnectorLinux `hcl:"aci_connector_linux,block" validate:"min=0"`
	// AgentPoolProfile: min=0
	AgentPoolProfile []datakubernetescluster.AgentPoolProfile `hcl:"agent_pool_profile,block" validate:"min=0"`
	// AzureActiveDirectoryRoleBasedAccessControl: min=0
	AzureActiveDirectoryRoleBasedAccessControl []datakubernetescluster.AzureActiveDirectoryRoleBasedAccessControl `hcl:"azure_active_directory_role_based_access_control,block" validate:"min=0"`
	// Identity: min=0
	Identity []datakubernetescluster.Identity `hcl:"identity,block" validate:"min=0"`
	// IngressApplicationGateway: min=0
	IngressApplicationGateway []datakubernetescluster.IngressApplicationGateway `hcl:"ingress_application_gateway,block" validate:"min=0"`
	// KeyManagementService: min=0
	KeyManagementService []datakubernetescluster.KeyManagementService `hcl:"key_management_service,block" validate:"min=0"`
	// KeyVaultSecretsProvider: min=0
	KeyVaultSecretsProvider []datakubernetescluster.KeyVaultSecretsProvider `hcl:"key_vault_secrets_provider,block" validate:"min=0"`
	// KubeAdminConfig: min=0
	KubeAdminConfig []datakubernetescluster.KubeAdminConfig `hcl:"kube_admin_config,block" validate:"min=0"`
	// KubeConfig: min=0
	KubeConfig []datakubernetescluster.KubeConfig `hcl:"kube_config,block" validate:"min=0"`
	// KubeletIdentity: min=0
	KubeletIdentity []datakubernetescluster.KubeletIdentity `hcl:"kubelet_identity,block" validate:"min=0"`
	// LinuxProfile: min=0
	LinuxProfile []datakubernetescluster.LinuxProfile `hcl:"linux_profile,block" validate:"min=0"`
	// MicrosoftDefender: min=0
	MicrosoftDefender []datakubernetescluster.MicrosoftDefender `hcl:"microsoft_defender,block" validate:"min=0"`
	// NetworkProfile: min=0
	NetworkProfile []datakubernetescluster.NetworkProfile `hcl:"network_profile,block" validate:"min=0"`
	// OmsAgent: min=0
	OmsAgent []datakubernetescluster.OmsAgent `hcl:"oms_agent,block" validate:"min=0"`
	// ServicePrincipal: min=0
	ServicePrincipal []datakubernetescluster.ServicePrincipal `hcl:"service_principal,block" validate:"min=0"`
	// StorageProfile: min=0
	StorageProfile []datakubernetescluster.StorageProfile `hcl:"storage_profile,block" validate:"min=0"`
	// WindowsProfile: min=0
	WindowsProfile []datakubernetescluster.WindowsProfile `hcl:"windows_profile,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datakubernetescluster.Timeouts `hcl:"timeouts,block"`
}
type dataKubernetesClusterAttributes struct {
	ref terra.Reference
}

func (kc dataKubernetesClusterAttributes) ApiServerAuthorizedIpRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](kc.ref.Append("api_server_authorized_ip_ranges"))
}

func (kc dataKubernetesClusterAttributes) AzurePolicyEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("azure_policy_enabled"))
}

func (kc dataKubernetesClusterAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("disk_encryption_set_id"))
}

func (kc dataKubernetesClusterAttributes) DnsPrefix() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("dns_prefix"))
}

func (kc dataKubernetesClusterAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("fqdn"))
}

func (kc dataKubernetesClusterAttributes) HttpApplicationRoutingEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("http_application_routing_enabled"))
}

func (kc dataKubernetesClusterAttributes) HttpApplicationRoutingZoneName() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("http_application_routing_zone_name"))
}

func (kc dataKubernetesClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("id"))
}

func (kc dataKubernetesClusterAttributes) KubeAdminConfigRaw() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("kube_admin_config_raw"))
}

func (kc dataKubernetesClusterAttributes) KubeConfigRaw() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("kube_config_raw"))
}

func (kc dataKubernetesClusterAttributes) KubernetesVersion() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("kubernetes_version"))
}

func (kc dataKubernetesClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("location"))
}

func (kc dataKubernetesClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("name"))
}

func (kc dataKubernetesClusterAttributes) NodeResourceGroup() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("node_resource_group"))
}

func (kc dataKubernetesClusterAttributes) NodeResourceGroupId() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("node_resource_group_id"))
}

func (kc dataKubernetesClusterAttributes) OidcIssuerEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("oidc_issuer_enabled"))
}

func (kc dataKubernetesClusterAttributes) OidcIssuerUrl() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("oidc_issuer_url"))
}

func (kc dataKubernetesClusterAttributes) OpenServiceMeshEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("open_service_mesh_enabled"))
}

func (kc dataKubernetesClusterAttributes) PrivateClusterEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("private_cluster_enabled"))
}

func (kc dataKubernetesClusterAttributes) PrivateFqdn() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("private_fqdn"))
}

func (kc dataKubernetesClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("resource_group_name"))
}

func (kc dataKubernetesClusterAttributes) RoleBasedAccessControlEnabled() terra.BoolValue {
	return terra.ReferenceBool(kc.ref.Append("role_based_access_control_enabled"))
}

func (kc dataKubernetesClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kc.ref.Append("tags"))
}

func (kc dataKubernetesClusterAttributes) AciConnectorLinux() terra.ListValue[datakubernetescluster.AciConnectorLinuxAttributes] {
	return terra.ReferenceList[datakubernetescluster.AciConnectorLinuxAttributes](kc.ref.Append("aci_connector_linux"))
}

func (kc dataKubernetesClusterAttributes) AgentPoolProfile() terra.ListValue[datakubernetescluster.AgentPoolProfileAttributes] {
	return terra.ReferenceList[datakubernetescluster.AgentPoolProfileAttributes](kc.ref.Append("agent_pool_profile"))
}

func (kc dataKubernetesClusterAttributes) AzureActiveDirectoryRoleBasedAccessControl() terra.ListValue[datakubernetescluster.AzureActiveDirectoryRoleBasedAccessControlAttributes] {
	return terra.ReferenceList[datakubernetescluster.AzureActiveDirectoryRoleBasedAccessControlAttributes](kc.ref.Append("azure_active_directory_role_based_access_control"))
}

func (kc dataKubernetesClusterAttributes) Identity() terra.ListValue[datakubernetescluster.IdentityAttributes] {
	return terra.ReferenceList[datakubernetescluster.IdentityAttributes](kc.ref.Append("identity"))
}

func (kc dataKubernetesClusterAttributes) IngressApplicationGateway() terra.ListValue[datakubernetescluster.IngressApplicationGatewayAttributes] {
	return terra.ReferenceList[datakubernetescluster.IngressApplicationGatewayAttributes](kc.ref.Append("ingress_application_gateway"))
}

func (kc dataKubernetesClusterAttributes) KeyManagementService() terra.ListValue[datakubernetescluster.KeyManagementServiceAttributes] {
	return terra.ReferenceList[datakubernetescluster.KeyManagementServiceAttributes](kc.ref.Append("key_management_service"))
}

func (kc dataKubernetesClusterAttributes) KeyVaultSecretsProvider() terra.ListValue[datakubernetescluster.KeyVaultSecretsProviderAttributes] {
	return terra.ReferenceList[datakubernetescluster.KeyVaultSecretsProviderAttributes](kc.ref.Append("key_vault_secrets_provider"))
}

func (kc dataKubernetesClusterAttributes) KubeAdminConfig() terra.ListValue[datakubernetescluster.KubeAdminConfigAttributes] {
	return terra.ReferenceList[datakubernetescluster.KubeAdminConfigAttributes](kc.ref.Append("kube_admin_config"))
}

func (kc dataKubernetesClusterAttributes) KubeConfig() terra.ListValue[datakubernetescluster.KubeConfigAttributes] {
	return terra.ReferenceList[datakubernetescluster.KubeConfigAttributes](kc.ref.Append("kube_config"))
}

func (kc dataKubernetesClusterAttributes) KubeletIdentity() terra.ListValue[datakubernetescluster.KubeletIdentityAttributes] {
	return terra.ReferenceList[datakubernetescluster.KubeletIdentityAttributes](kc.ref.Append("kubelet_identity"))
}

func (kc dataKubernetesClusterAttributes) LinuxProfile() terra.ListValue[datakubernetescluster.LinuxProfileAttributes] {
	return terra.ReferenceList[datakubernetescluster.LinuxProfileAttributes](kc.ref.Append("linux_profile"))
}

func (kc dataKubernetesClusterAttributes) MicrosoftDefender() terra.ListValue[datakubernetescluster.MicrosoftDefenderAttributes] {
	return terra.ReferenceList[datakubernetescluster.MicrosoftDefenderAttributes](kc.ref.Append("microsoft_defender"))
}

func (kc dataKubernetesClusterAttributes) NetworkProfile() terra.ListValue[datakubernetescluster.NetworkProfileAttributes] {
	return terra.ReferenceList[datakubernetescluster.NetworkProfileAttributes](kc.ref.Append("network_profile"))
}

func (kc dataKubernetesClusterAttributes) OmsAgent() terra.ListValue[datakubernetescluster.OmsAgentAttributes] {
	return terra.ReferenceList[datakubernetescluster.OmsAgentAttributes](kc.ref.Append("oms_agent"))
}

func (kc dataKubernetesClusterAttributes) ServicePrincipal() terra.ListValue[datakubernetescluster.ServicePrincipalAttributes] {
	return terra.ReferenceList[datakubernetescluster.ServicePrincipalAttributes](kc.ref.Append("service_principal"))
}

func (kc dataKubernetesClusterAttributes) StorageProfile() terra.ListValue[datakubernetescluster.StorageProfileAttributes] {
	return terra.ReferenceList[datakubernetescluster.StorageProfileAttributes](kc.ref.Append("storage_profile"))
}

func (kc dataKubernetesClusterAttributes) WindowsProfile() terra.ListValue[datakubernetescluster.WindowsProfileAttributes] {
	return terra.ReferenceList[datakubernetescluster.WindowsProfileAttributes](kc.ref.Append("windows_profile"))
}

func (kc dataKubernetesClusterAttributes) Timeouts() datakubernetescluster.TimeoutsAttributes {
	return terra.ReferenceSingle[datakubernetescluster.TimeoutsAttributes](kc.ref.Append("timeouts"))
}
