// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package eventhub

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CaptureDescription struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Encoding: string, required
	Encoding terra.StringValue `hcl:"encoding,attr" validate:"required"`
	// IntervalInSeconds: number, optional
	IntervalInSeconds terra.NumberValue `hcl:"interval_in_seconds,attr"`
	// SizeLimitInBytes: number, optional
	SizeLimitInBytes terra.NumberValue `hcl:"size_limit_in_bytes,attr"`
	// SkipEmptyArchives: bool, optional
	SkipEmptyArchives terra.BoolValue `hcl:"skip_empty_archives,attr"`
	// Destination: required
	Destination *Destination `hcl:"destination,block" validate:"required"`
}

type Destination struct {
	// ArchiveNameFormat: string, required
	ArchiveNameFormat terra.StringValue `hcl:"archive_name_format,attr" validate:"required"`
	// BlobContainerName: string, required
	BlobContainerName terra.StringValue `hcl:"blob_container_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CaptureDescriptionAttributes struct {
	ref terra.Reference
}

func (cd CaptureDescriptionAttributes) InternalRef() terra.Reference {
	return cd.ref
}

func (cd CaptureDescriptionAttributes) InternalWithRef(ref terra.Reference) CaptureDescriptionAttributes {
	return CaptureDescriptionAttributes{ref: ref}
}

func (cd CaptureDescriptionAttributes) InternalTokens() hclwrite.Tokens {
	return cd.ref.InternalTokens()
}

func (cd CaptureDescriptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cd.ref.Append("enabled"))
}

func (cd CaptureDescriptionAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("encoding"))
}

func (cd CaptureDescriptionAttributes) IntervalInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(cd.ref.Append("interval_in_seconds"))
}

func (cd CaptureDescriptionAttributes) SizeLimitInBytes() terra.NumberValue {
	return terra.ReferenceNumber(cd.ref.Append("size_limit_in_bytes"))
}

func (cd CaptureDescriptionAttributes) SkipEmptyArchives() terra.BoolValue {
	return terra.ReferenceBool(cd.ref.Append("skip_empty_archives"))
}

func (cd CaptureDescriptionAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceList[DestinationAttributes](cd.ref.Append("destination"))
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) ArchiveNameFormat() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("archive_name_format"))
}

func (d DestinationAttributes) BlobContainerName() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("blob_container_name"))
}

func (d DestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("name"))
}

func (d DestinationAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("storage_account_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type CaptureDescriptionState struct {
	Enabled           bool               `json:"enabled"`
	Encoding          string             `json:"encoding"`
	IntervalInSeconds float64            `json:"interval_in_seconds"`
	SizeLimitInBytes  float64            `json:"size_limit_in_bytes"`
	SkipEmptyArchives bool               `json:"skip_empty_archives"`
	Destination       []DestinationState `json:"destination"`
}

type DestinationState struct {
	ArchiveNameFormat string `json:"archive_name_format"`
	BlobContainerName string `json:"blob_container_name"`
	Name              string `json:"name"`
	StorageAccountId  string `json:"storage_account_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
