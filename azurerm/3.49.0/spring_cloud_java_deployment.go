// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	springcloudjavadeployment "github.com/golingon/terraproviders/azurerm/3.49.0/springcloudjavadeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpringCloudJavaDeployment(name string, args SpringCloudJavaDeploymentArgs) *SpringCloudJavaDeployment {
	return &SpringCloudJavaDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudJavaDeployment)(nil)

type SpringCloudJavaDeployment struct {
	Name  string
	Args  SpringCloudJavaDeploymentArgs
	state *springCloudJavaDeploymentState
}

func (scjd *SpringCloudJavaDeployment) Type() string {
	return "azurerm_spring_cloud_java_deployment"
}

func (scjd *SpringCloudJavaDeployment) LocalName() string {
	return scjd.Name
}

func (scjd *SpringCloudJavaDeployment) Configuration() interface{} {
	return scjd.Args
}

func (scjd *SpringCloudJavaDeployment) Attributes() springCloudJavaDeploymentAttributes {
	return springCloudJavaDeploymentAttributes{ref: terra.ReferenceResource(scjd)}
}

func (scjd *SpringCloudJavaDeployment) ImportState(av io.Reader) error {
	scjd.state = &springCloudJavaDeploymentState{}
	if err := json.NewDecoder(av).Decode(scjd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scjd.Type(), scjd.LocalName(), err)
	}
	return nil
}

func (scjd *SpringCloudJavaDeployment) State() (*springCloudJavaDeploymentState, bool) {
	return scjd.state, scjd.state != nil
}

func (scjd *SpringCloudJavaDeployment) StateMust() *springCloudJavaDeploymentState {
	if scjd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scjd.Type(), scjd.LocalName()))
	}
	return scjd.state
}

func (scjd *SpringCloudJavaDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(scjd)
}

type SpringCloudJavaDeploymentArgs struct {
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// JvmOptions: string, optional
	JvmOptions terra.StringValue `hcl:"jvm_options,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuntimeVersion: string, optional
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Quota: optional
	Quota *springcloudjavadeployment.Quota `hcl:"quota,block"`
	// Timeouts: optional
	Timeouts *springcloudjavadeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpringCloudJavaDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type springCloudJavaDeploymentAttributes struct {
	ref terra.Reference
}

func (scjd springCloudJavaDeploymentAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scjd.ref.Append("environment_variables"))
}

func (scjd springCloudJavaDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scjd.ref.Append("id"))
}

func (scjd springCloudJavaDeploymentAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(scjd.ref.Append("instance_count"))
}

func (scjd springCloudJavaDeploymentAttributes) JvmOptions() terra.StringValue {
	return terra.ReferenceString(scjd.ref.Append("jvm_options"))
}

func (scjd springCloudJavaDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scjd.ref.Append("name"))
}

func (scjd springCloudJavaDeploymentAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceString(scjd.ref.Append("runtime_version"))
}

func (scjd springCloudJavaDeploymentAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceString(scjd.ref.Append("spring_cloud_app_id"))
}

func (scjd springCloudJavaDeploymentAttributes) Quota() terra.ListValue[springcloudjavadeployment.QuotaAttributes] {
	return terra.ReferenceList[springcloudjavadeployment.QuotaAttributes](scjd.ref.Append("quota"))
}

func (scjd springCloudJavaDeploymentAttributes) Timeouts() springcloudjavadeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[springcloudjavadeployment.TimeoutsAttributes](scjd.ref.Append("timeouts"))
}

type springCloudJavaDeploymentState struct {
	EnvironmentVariables map[string]string                        `json:"environment_variables"`
	Id                   string                                   `json:"id"`
	InstanceCount        float64                                  `json:"instance_count"`
	JvmOptions           string                                   `json:"jvm_options"`
	Name                 string                                   `json:"name"`
	RuntimeVersion       string                                   `json:"runtime_version"`
	SpringCloudAppId     string                                   `json:"spring_cloud_app_id"`
	Quota                []springcloudjavadeployment.QuotaState   `json:"quota"`
	Timeouts             *springcloudjavadeployment.TimeoutsState `json:"timeouts"`
}
