// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	lbrule "github.com/golingon/terraproviders/azurerm/3.49.0/lbrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbRule(name string, args LbRuleArgs) *LbRule {
	return &LbRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbRule)(nil)

type LbRule struct {
	Name  string
	Args  LbRuleArgs
	state *lbRuleState
}

func (lr *LbRule) Type() string {
	return "azurerm_lb_rule"
}

func (lr *LbRule) LocalName() string {
	return lr.Name
}

func (lr *LbRule) Configuration() interface{} {
	return lr.Args
}

func (lr *LbRule) Attributes() lbRuleAttributes {
	return lbRuleAttributes{ref: terra.ReferenceResource(lr)}
}

func (lr *LbRule) ImportState(av io.Reader) error {
	lr.state = &lbRuleState{}
	if err := json.NewDecoder(av).Decode(lr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lr.Type(), lr.LocalName(), err)
	}
	return nil
}

func (lr *LbRule) State() (*lbRuleState, bool) {
	return lr.state, lr.state != nil
}

func (lr *LbRule) StateMust() *lbRuleState {
	if lr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lr.Type(), lr.LocalName()))
	}
	return lr.state
}

func (lr *LbRule) DependOn() terra.Reference {
	return terra.ReferenceResource(lr)
}

type LbRuleArgs struct {
	// BackendAddressPoolIds: list of string, optional
	BackendAddressPoolIds terra.ListValue[terra.StringValue] `hcl:"backend_address_pool_ids,attr"`
	// BackendPort: number, required
	BackendPort terra.NumberValue `hcl:"backend_port,attr" validate:"required"`
	// DisableOutboundSnat: bool, optional
	DisableOutboundSnat terra.BoolValue `hcl:"disable_outbound_snat,attr"`
	// EnableFloatingIp: bool, optional
	EnableFloatingIp terra.BoolValue `hcl:"enable_floating_ip,attr"`
	// EnableTcpReset: bool, optional
	EnableTcpReset terra.BoolValue `hcl:"enable_tcp_reset,attr"`
	// FrontendIpConfigurationName: string, required
	FrontendIpConfigurationName terra.StringValue `hcl:"frontend_ip_configuration_name,attr" validate:"required"`
	// FrontendPort: number, required
	FrontendPort terra.NumberValue `hcl:"frontend_port,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// LoadDistribution: string, optional
	LoadDistribution terra.StringValue `hcl:"load_distribution,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProbeId: string, optional
	ProbeId terra.StringValue `hcl:"probe_id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *lbrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LbRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbRuleAttributes struct {
	ref terra.Reference
}

func (lr lbRuleAttributes) BackendAddressPoolIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](lr.ref.Append("backend_address_pool_ids"))
}

func (lr lbRuleAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceNumber(lr.ref.Append("backend_port"))
}

func (lr lbRuleAttributes) DisableOutboundSnat() terra.BoolValue {
	return terra.ReferenceBool(lr.ref.Append("disable_outbound_snat"))
}

func (lr lbRuleAttributes) EnableFloatingIp() terra.BoolValue {
	return terra.ReferenceBool(lr.ref.Append("enable_floating_ip"))
}

func (lr lbRuleAttributes) EnableTcpReset() terra.BoolValue {
	return terra.ReferenceBool(lr.ref.Append("enable_tcp_reset"))
}

func (lr lbRuleAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("frontend_ip_configuration_id"))
}

func (lr lbRuleAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("frontend_ip_configuration_name"))
}

func (lr lbRuleAttributes) FrontendPort() terra.NumberValue {
	return terra.ReferenceNumber(lr.ref.Append("frontend_port"))
}

func (lr lbRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("id"))
}

func (lr lbRuleAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(lr.ref.Append("idle_timeout_in_minutes"))
}

func (lr lbRuleAttributes) LoadDistribution() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("load_distribution"))
}

func (lr lbRuleAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("loadbalancer_id"))
}

func (lr lbRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("name"))
}

func (lr lbRuleAttributes) ProbeId() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("probe_id"))
}

func (lr lbRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("protocol"))
}

func (lr lbRuleAttributes) Timeouts() lbrule.TimeoutsAttributes {
	return terra.ReferenceSingle[lbrule.TimeoutsAttributes](lr.ref.Append("timeouts"))
}

type lbRuleState struct {
	BackendAddressPoolIds       []string              `json:"backend_address_pool_ids"`
	BackendPort                 float64               `json:"backend_port"`
	DisableOutboundSnat         bool                  `json:"disable_outbound_snat"`
	EnableFloatingIp            bool                  `json:"enable_floating_ip"`
	EnableTcpReset              bool                  `json:"enable_tcp_reset"`
	FrontendIpConfigurationId   string                `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string                `json:"frontend_ip_configuration_name"`
	FrontendPort                float64               `json:"frontend_port"`
	Id                          string                `json:"id"`
	IdleTimeoutInMinutes        float64               `json:"idle_timeout_in_minutes"`
	LoadDistribution            string                `json:"load_distribution"`
	LoadbalancerId              string                `json:"loadbalancer_id"`
	Name                        string                `json:"name"`
	ProbeId                     string                `json:"probe_id"`
	Protocol                    string                `json:"protocol"`
	Timeouts                    *lbrule.TimeoutsState `json:"timeouts"`
}
