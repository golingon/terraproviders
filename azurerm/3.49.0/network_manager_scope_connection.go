// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkmanagerscopeconnection "github.com/golingon/terraproviders/azurerm/3.49.0/networkmanagerscopeconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkManagerScopeConnection(name string, args NetworkManagerScopeConnectionArgs) *NetworkManagerScopeConnection {
	return &NetworkManagerScopeConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkManagerScopeConnection)(nil)

type NetworkManagerScopeConnection struct {
	Name  string
	Args  NetworkManagerScopeConnectionArgs
	state *networkManagerScopeConnectionState
}

func (nmsc *NetworkManagerScopeConnection) Type() string {
	return "azurerm_network_manager_scope_connection"
}

func (nmsc *NetworkManagerScopeConnection) LocalName() string {
	return nmsc.Name
}

func (nmsc *NetworkManagerScopeConnection) Configuration() interface{} {
	return nmsc.Args
}

func (nmsc *NetworkManagerScopeConnection) Attributes() networkManagerScopeConnectionAttributes {
	return networkManagerScopeConnectionAttributes{ref: terra.ReferenceResource(nmsc)}
}

func (nmsc *NetworkManagerScopeConnection) ImportState(av io.Reader) error {
	nmsc.state = &networkManagerScopeConnectionState{}
	if err := json.NewDecoder(av).Decode(nmsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nmsc.Type(), nmsc.LocalName(), err)
	}
	return nil
}

func (nmsc *NetworkManagerScopeConnection) State() (*networkManagerScopeConnectionState, bool) {
	return nmsc.state, nmsc.state != nil
}

func (nmsc *NetworkManagerScopeConnection) StateMust() *networkManagerScopeConnectionState {
	if nmsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nmsc.Type(), nmsc.LocalName()))
	}
	return nmsc.state
}

func (nmsc *NetworkManagerScopeConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(nmsc)
}

type NetworkManagerScopeConnectionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// TargetScopeId: string, required
	TargetScopeId terra.StringValue `hcl:"target_scope_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagerscopeconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkManagerScopeConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkManagerScopeConnectionAttributes struct {
	ref terra.Reference
}

func (nmsc networkManagerScopeConnectionAttributes) ConnectionState() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("connection_state"))
}

func (nmsc networkManagerScopeConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("description"))
}

func (nmsc networkManagerScopeConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("id"))
}

func (nmsc networkManagerScopeConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("name"))
}

func (nmsc networkManagerScopeConnectionAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("network_manager_id"))
}

func (nmsc networkManagerScopeConnectionAttributes) TargetScopeId() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("target_scope_id"))
}

func (nmsc networkManagerScopeConnectionAttributes) TenantId() terra.StringValue {
	return terra.ReferenceString(nmsc.ref.Append("tenant_id"))
}

func (nmsc networkManagerScopeConnectionAttributes) Timeouts() networkmanagerscopeconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerscopeconnection.TimeoutsAttributes](nmsc.ref.Append("timeouts"))
}

type networkManagerScopeConnectionState struct {
	ConnectionState  string                                       `json:"connection_state"`
	Description      string                                       `json:"description"`
	Id               string                                       `json:"id"`
	Name             string                                       `json:"name"`
	NetworkManagerId string                                       `json:"network_manager_id"`
	TargetScopeId    string                                       `json:"target_scope_id"`
	TenantId         string                                       `json:"tenant_id"`
	Timeouts         *networkmanagerscopeconnection.TimeoutsState `json:"timeouts"`
}
