// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	nginxdeployment "github.com/golingon/terraproviders/azurerm/3.49.0/nginxdeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNginxDeployment(name string, args NginxDeploymentArgs) *NginxDeployment {
	return &NginxDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NginxDeployment)(nil)

type NginxDeployment struct {
	Name  string
	Args  NginxDeploymentArgs
	state *nginxDeploymentState
}

func (nd *NginxDeployment) Type() string {
	return "azurerm_nginx_deployment"
}

func (nd *NginxDeployment) LocalName() string {
	return nd.Name
}

func (nd *NginxDeployment) Configuration() interface{} {
	return nd.Args
}

func (nd *NginxDeployment) Attributes() nginxDeploymentAttributes {
	return nginxDeploymentAttributes{ref: terra.ReferenceResource(nd)}
}

func (nd *NginxDeployment) ImportState(av io.Reader) error {
	nd.state = &nginxDeploymentState{}
	if err := json.NewDecoder(av).Decode(nd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nd.Type(), nd.LocalName(), err)
	}
	return nil
}

func (nd *NginxDeployment) State() (*nginxDeploymentState, bool) {
	return nd.state, nd.state != nil
}

func (nd *NginxDeployment) StateMust() *nginxDeploymentState {
	if nd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nd.Type(), nd.LocalName()))
	}
	return nd.state
}

func (nd *NginxDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(nd)
}

type NginxDeploymentArgs struct {
	// DiagnoseSupportEnabled: bool, optional
	DiagnoseSupportEnabled terra.BoolValue `hcl:"diagnose_support_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroup: string, optional
	ManagedResourceGroup terra.StringValue `hcl:"managed_resource_group,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// FrontendPrivate: min=0
	FrontendPrivate []nginxdeployment.FrontendPrivate `hcl:"frontend_private,block" validate:"min=0"`
	// FrontendPublic: optional
	FrontendPublic *nginxdeployment.FrontendPublic `hcl:"frontend_public,block"`
	// Identity: optional
	Identity *nginxdeployment.Identity `hcl:"identity,block"`
	// LoggingStorageAccount: min=0
	LoggingStorageAccount []nginxdeployment.LoggingStorageAccount `hcl:"logging_storage_account,block" validate:"min=0"`
	// NetworkInterface: min=0
	NetworkInterface []nginxdeployment.NetworkInterface `hcl:"network_interface,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *nginxdeployment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NginxDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type nginxDeploymentAttributes struct {
	ref terra.Reference
}

func (nd nginxDeploymentAttributes) DiagnoseSupportEnabled() terra.BoolValue {
	return terra.ReferenceBool(nd.ref.Append("diagnose_support_enabled"))
}

func (nd nginxDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("id"))
}

func (nd nginxDeploymentAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("ip_address"))
}

func (nd nginxDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("location"))
}

func (nd nginxDeploymentAttributes) ManagedResourceGroup() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("managed_resource_group"))
}

func (nd nginxDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("name"))
}

func (nd nginxDeploymentAttributes) NginxVersion() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("nginx_version"))
}

func (nd nginxDeploymentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("resource_group_name"))
}

func (nd nginxDeploymentAttributes) Sku() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("sku"))
}

func (nd nginxDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nd.ref.Append("tags"))
}

func (nd nginxDeploymentAttributes) FrontendPrivate() terra.ListValue[nginxdeployment.FrontendPrivateAttributes] {
	return terra.ReferenceList[nginxdeployment.FrontendPrivateAttributes](nd.ref.Append("frontend_private"))
}

func (nd nginxDeploymentAttributes) FrontendPublic() terra.ListValue[nginxdeployment.FrontendPublicAttributes] {
	return terra.ReferenceList[nginxdeployment.FrontendPublicAttributes](nd.ref.Append("frontend_public"))
}

func (nd nginxDeploymentAttributes) Identity() terra.ListValue[nginxdeployment.IdentityAttributes] {
	return terra.ReferenceList[nginxdeployment.IdentityAttributes](nd.ref.Append("identity"))
}

func (nd nginxDeploymentAttributes) LoggingStorageAccount() terra.ListValue[nginxdeployment.LoggingStorageAccountAttributes] {
	return terra.ReferenceList[nginxdeployment.LoggingStorageAccountAttributes](nd.ref.Append("logging_storage_account"))
}

func (nd nginxDeploymentAttributes) NetworkInterface() terra.ListValue[nginxdeployment.NetworkInterfaceAttributes] {
	return terra.ReferenceList[nginxdeployment.NetworkInterfaceAttributes](nd.ref.Append("network_interface"))
}

func (nd nginxDeploymentAttributes) Timeouts() nginxdeployment.TimeoutsAttributes {
	return terra.ReferenceSingle[nginxdeployment.TimeoutsAttributes](nd.ref.Append("timeouts"))
}

type nginxDeploymentState struct {
	DiagnoseSupportEnabled bool                                         `json:"diagnose_support_enabled"`
	Id                     string                                       `json:"id"`
	IpAddress              string                                       `json:"ip_address"`
	Location               string                                       `json:"location"`
	ManagedResourceGroup   string                                       `json:"managed_resource_group"`
	Name                   string                                       `json:"name"`
	NginxVersion           string                                       `json:"nginx_version"`
	ResourceGroupName      string                                       `json:"resource_group_name"`
	Sku                    string                                       `json:"sku"`
	Tags                   map[string]string                            `json:"tags"`
	FrontendPrivate        []nginxdeployment.FrontendPrivateState       `json:"frontend_private"`
	FrontendPublic         []nginxdeployment.FrontendPublicState        `json:"frontend_public"`
	Identity               []nginxdeployment.IdentityState              `json:"identity"`
	LoggingStorageAccount  []nginxdeployment.LoggingStorageAccountState `json:"logging_storage_account"`
	NetworkInterface       []nginxdeployment.NetworkInterfaceState      `json:"network_interface"`
	Timeouts               *nginxdeployment.TimeoutsState               `json:"timeouts"`
}
