// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqldatabase "github.com/golingon/terraproviders/azurerm/3.49.0/cosmosdbsqldatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCosmosdbSqlDatabase(name string, args CosmosdbSqlDatabaseArgs) *CosmosdbSqlDatabase {
	return &CosmosdbSqlDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlDatabase)(nil)

type CosmosdbSqlDatabase struct {
	Name  string
	Args  CosmosdbSqlDatabaseArgs
	state *cosmosdbSqlDatabaseState
}

func (csd *CosmosdbSqlDatabase) Type() string {
	return "azurerm_cosmosdb_sql_database"
}

func (csd *CosmosdbSqlDatabase) LocalName() string {
	return csd.Name
}

func (csd *CosmosdbSqlDatabase) Configuration() interface{} {
	return csd.Args
}

func (csd *CosmosdbSqlDatabase) Attributes() cosmosdbSqlDatabaseAttributes {
	return cosmosdbSqlDatabaseAttributes{ref: terra.ReferenceResource(csd)}
}

func (csd *CosmosdbSqlDatabase) ImportState(av io.Reader) error {
	csd.state = &cosmosdbSqlDatabaseState{}
	if err := json.NewDecoder(av).Decode(csd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csd.Type(), csd.LocalName(), err)
	}
	return nil
}

func (csd *CosmosdbSqlDatabase) State() (*cosmosdbSqlDatabaseState, bool) {
	return csd.state, csd.state != nil
}

func (csd *CosmosdbSqlDatabase) StateMust() *cosmosdbSqlDatabaseState {
	if csd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csd.Type(), csd.LocalName()))
	}
	return csd.state
}

func (csd *CosmosdbSqlDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(csd)
}

type CosmosdbSqlDatabaseArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbsqldatabase.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Timeouts: optional
	Timeouts *cosmosdbsqldatabase.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CosmosdbSqlDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cosmosdbSqlDatabaseAttributes struct {
	ref terra.Reference
}

func (csd cosmosdbSqlDatabaseAttributes) AccountName() terra.StringValue {
	return terra.ReferenceString(csd.ref.Append("account_name"))
}

func (csd cosmosdbSqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csd.ref.Append("id"))
}

func (csd cosmosdbSqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(csd.ref.Append("name"))
}

func (csd cosmosdbSqlDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(csd.ref.Append("resource_group_name"))
}

func (csd cosmosdbSqlDatabaseAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(csd.ref.Append("throughput"))
}

func (csd cosmosdbSqlDatabaseAttributes) AutoscaleSettings() terra.ListValue[cosmosdbsqldatabase.AutoscaleSettingsAttributes] {
	return terra.ReferenceList[cosmosdbsqldatabase.AutoscaleSettingsAttributes](csd.ref.Append("autoscale_settings"))
}

func (csd cosmosdbSqlDatabaseAttributes) Timeouts() cosmosdbsqldatabase.TimeoutsAttributes {
	return terra.ReferenceSingle[cosmosdbsqldatabase.TimeoutsAttributes](csd.ref.Append("timeouts"))
}

type cosmosdbSqlDatabaseState struct {
	AccountName       string                                       `json:"account_name"`
	Id                string                                       `json:"id"`
	Name              string                                       `json:"name"`
	ResourceGroupName string                                       `json:"resource_group_name"`
	Throughput        float64                                      `json:"throughput"`
	AutoscaleSettings []cosmosdbsqldatabase.AutoscaleSettingsState `json:"autoscale_settings"`
	Timeouts          *cosmosdbsqldatabase.TimeoutsState           `json:"timeouts"`
}
