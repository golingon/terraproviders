// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	functionappslot "github.com/golingon/terraproviders/azurerm/3.49.0/functionappslot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFunctionAppSlot(name string, args FunctionAppSlotArgs) *FunctionAppSlot {
	return &FunctionAppSlot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FunctionAppSlot)(nil)

type FunctionAppSlot struct {
	Name  string
	Args  FunctionAppSlotArgs
	state *functionAppSlotState
}

func (fas *FunctionAppSlot) Type() string {
	return "azurerm_function_app_slot"
}

func (fas *FunctionAppSlot) LocalName() string {
	return fas.Name
}

func (fas *FunctionAppSlot) Configuration() interface{} {
	return fas.Args
}

func (fas *FunctionAppSlot) Attributes() functionAppSlotAttributes {
	return functionAppSlotAttributes{ref: terra.ReferenceResource(fas)}
}

func (fas *FunctionAppSlot) ImportState(av io.Reader) error {
	fas.state = &functionAppSlotState{}
	if err := json.NewDecoder(av).Decode(fas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fas.Type(), fas.LocalName(), err)
	}
	return nil
}

func (fas *FunctionAppSlot) State() (*functionAppSlotState, bool) {
	return fas.state, fas.state != nil
}

func (fas *FunctionAppSlot) StateMust() *functionAppSlotState {
	if fas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fas.Type(), fas.LocalName()))
	}
	return fas.state
}

func (fas *FunctionAppSlot) DependOn() terra.Reference {
	return terra.ReferenceResource(fas)
}

type FunctionAppSlotArgs struct {
	// AppServicePlanId: string, required
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr" validate:"required"`
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// DailyMemoryTimeQuota: number, optional
	DailyMemoryTimeQuota terra.NumberValue `hcl:"daily_memory_time_quota,attr"`
	// EnableBuiltinLogging: bool, optional
	EnableBuiltinLogging terra.BoolValue `hcl:"enable_builtin_logging,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FunctionAppName: string, required
	FunctionAppName terra.StringValue `hcl:"function_app_name,attr" validate:"required"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountAccessKey: string, required
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// SiteCredential: min=0
	SiteCredential []functionappslot.SiteCredential `hcl:"site_credential,block" validate:"min=0"`
	// AuthSettings: optional
	AuthSettings *functionappslot.AuthSettings `hcl:"auth_settings,block"`
	// ConnectionString: min=0
	ConnectionString []functionappslot.ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *functionappslot.Identity `hcl:"identity,block"`
	// SiteConfig: optional
	SiteConfig *functionappslot.SiteConfig `hcl:"site_config,block"`
	// Timeouts: optional
	Timeouts *functionappslot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FunctionAppSlot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type functionAppSlotAttributes struct {
	ref terra.Reference
}

func (fas functionAppSlotAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("app_service_plan_id"))
}

func (fas functionAppSlotAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fas.ref.Append("app_settings"))
}

func (fas functionAppSlotAttributes) DailyMemoryTimeQuota() terra.NumberValue {
	return terra.ReferenceNumber(fas.ref.Append("daily_memory_time_quota"))
}

func (fas functionAppSlotAttributes) DefaultHostname() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("default_hostname"))
}

func (fas functionAppSlotAttributes) EnableBuiltinLogging() terra.BoolValue {
	return terra.ReferenceBool(fas.ref.Append("enable_builtin_logging"))
}

func (fas functionAppSlotAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(fas.ref.Append("enabled"))
}

func (fas functionAppSlotAttributes) FunctionAppName() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("function_app_name"))
}

func (fas functionAppSlotAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceBool(fas.ref.Append("https_only"))
}

func (fas functionAppSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("id"))
}

func (fas functionAppSlotAttributes) Kind() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("kind"))
}

func (fas functionAppSlotAttributes) Location() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("location"))
}

func (fas functionAppSlotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("name"))
}

func (fas functionAppSlotAttributes) OsType() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("os_type"))
}

func (fas functionAppSlotAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("outbound_ip_addresses"))
}

func (fas functionAppSlotAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("possible_outbound_ip_addresses"))
}

func (fas functionAppSlotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("resource_group_name"))
}

func (fas functionAppSlotAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("storage_account_access_key"))
}

func (fas functionAppSlotAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("storage_account_name"))
}

func (fas functionAppSlotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fas.ref.Append("tags"))
}

func (fas functionAppSlotAttributes) Version() terra.StringValue {
	return terra.ReferenceString(fas.ref.Append("version"))
}

func (fas functionAppSlotAttributes) SiteCredential() terra.ListValue[functionappslot.SiteCredentialAttributes] {
	return terra.ReferenceList[functionappslot.SiteCredentialAttributes](fas.ref.Append("site_credential"))
}

func (fas functionAppSlotAttributes) AuthSettings() terra.ListValue[functionappslot.AuthSettingsAttributes] {
	return terra.ReferenceList[functionappslot.AuthSettingsAttributes](fas.ref.Append("auth_settings"))
}

func (fas functionAppSlotAttributes) ConnectionString() terra.SetValue[functionappslot.ConnectionStringAttributes] {
	return terra.ReferenceSet[functionappslot.ConnectionStringAttributes](fas.ref.Append("connection_string"))
}

func (fas functionAppSlotAttributes) Identity() terra.ListValue[functionappslot.IdentityAttributes] {
	return terra.ReferenceList[functionappslot.IdentityAttributes](fas.ref.Append("identity"))
}

func (fas functionAppSlotAttributes) SiteConfig() terra.ListValue[functionappslot.SiteConfigAttributes] {
	return terra.ReferenceList[functionappslot.SiteConfigAttributes](fas.ref.Append("site_config"))
}

func (fas functionAppSlotAttributes) Timeouts() functionappslot.TimeoutsAttributes {
	return terra.ReferenceSingle[functionappslot.TimeoutsAttributes](fas.ref.Append("timeouts"))
}

type functionAppSlotState struct {
	AppServicePlanId            string                                  `json:"app_service_plan_id"`
	AppSettings                 map[string]string                       `json:"app_settings"`
	DailyMemoryTimeQuota        float64                                 `json:"daily_memory_time_quota"`
	DefaultHostname             string                                  `json:"default_hostname"`
	EnableBuiltinLogging        bool                                    `json:"enable_builtin_logging"`
	Enabled                     bool                                    `json:"enabled"`
	FunctionAppName             string                                  `json:"function_app_name"`
	HttpsOnly                   bool                                    `json:"https_only"`
	Id                          string                                  `json:"id"`
	Kind                        string                                  `json:"kind"`
	Location                    string                                  `json:"location"`
	Name                        string                                  `json:"name"`
	OsType                      string                                  `json:"os_type"`
	OutboundIpAddresses         string                                  `json:"outbound_ip_addresses"`
	PossibleOutboundIpAddresses string                                  `json:"possible_outbound_ip_addresses"`
	ResourceGroupName           string                                  `json:"resource_group_name"`
	StorageAccountAccessKey     string                                  `json:"storage_account_access_key"`
	StorageAccountName          string                                  `json:"storage_account_name"`
	Tags                        map[string]string                       `json:"tags"`
	Version                     string                                  `json:"version"`
	SiteCredential              []functionappslot.SiteCredentialState   `json:"site_credential"`
	AuthSettings                []functionappslot.AuthSettingsState     `json:"auth_settings"`
	ConnectionString            []functionappslot.ConnectionStringState `json:"connection_string"`
	Identity                    []functionappslot.IdentityState         `json:"identity"`
	SiteConfig                  []functionappslot.SiteConfigState       `json:"site_config"`
	Timeouts                    *functionappslot.TimeoutsState          `json:"timeouts"`
}
