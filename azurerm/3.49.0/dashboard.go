// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	dashboard "github.com/golingon/terraproviders/azurerm/3.49.0/dashboard"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDashboard(name string, args DashboardArgs) *Dashboard {
	return &Dashboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Dashboard)(nil)

type Dashboard struct {
	Name  string
	Args  DashboardArgs
	state *dashboardState
}

func (d *Dashboard) Type() string {
	return "azurerm_dashboard"
}

func (d *Dashboard) LocalName() string {
	return d.Name
}

func (d *Dashboard) Configuration() interface{} {
	return d.Args
}

func (d *Dashboard) Attributes() dashboardAttributes {
	return dashboardAttributes{ref: terra.ReferenceResource(d)}
}

func (d *Dashboard) ImportState(av io.Reader) error {
	d.state = &dashboardState{}
	if err := json.NewDecoder(av).Decode(d.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", d.Type(), d.LocalName(), err)
	}
	return nil
}

func (d *Dashboard) State() (*dashboardState, bool) {
	return d.state, d.state != nil
}

func (d *Dashboard) StateMust() *dashboardState {
	if d.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", d.Type(), d.LocalName()))
	}
	return d.state
}

func (d *Dashboard) DependOn() terra.Reference {
	return terra.ReferenceResource(d)
}

type DashboardArgs struct {
	// DashboardProperties: string, optional
	DashboardProperties terra.StringValue `hcl:"dashboard_properties,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *dashboard.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Dashboard depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dashboardAttributes struct {
	ref terra.Reference
}

func (d dashboardAttributes) DashboardProperties() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("dashboard_properties"))
}

func (d dashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("id"))
}

func (d dashboardAttributes) Location() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("location"))
}

func (d dashboardAttributes) Name() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("name"))
}

func (d dashboardAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceString(d.ref.Append("resource_group_name"))
}

func (d dashboardAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](d.ref.Append("tags"))
}

func (d dashboardAttributes) Timeouts() dashboard.TimeoutsAttributes {
	return terra.ReferenceSingle[dashboard.TimeoutsAttributes](d.ref.Append("timeouts"))
}

type dashboardState struct {
	DashboardProperties string                   `json:"dashboard_properties"`
	Id                  string                   `json:"id"`
	Location            string                   `json:"location"`
	Name                string                   `json:"name"`
	ResourceGroupName   string                   `json:"resource_group_name"`
	Tags                map[string]string        `json:"tags"`
	Timeouts            *dashboard.TimeoutsState `json:"timeouts"`
}
