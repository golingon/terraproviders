// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appserviceslotvirtualnetworkswiftconnection "github.com/golingon/terraproviders/azurerm/3.49.0/appserviceslotvirtualnetworkswiftconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppServiceSlotVirtualNetworkSwiftConnection(name string, args AppServiceSlotVirtualNetworkSwiftConnectionArgs) *AppServiceSlotVirtualNetworkSwiftConnection {
	return &AppServiceSlotVirtualNetworkSwiftConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppServiceSlotVirtualNetworkSwiftConnection)(nil)

type AppServiceSlotVirtualNetworkSwiftConnection struct {
	Name  string
	Args  AppServiceSlotVirtualNetworkSwiftConnectionArgs
	state *appServiceSlotVirtualNetworkSwiftConnectionState
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) Type() string {
	return "azurerm_app_service_slot_virtual_network_swift_connection"
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) LocalName() string {
	return assvnsc.Name
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) Configuration() interface{} {
	return assvnsc.Args
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) Attributes() appServiceSlotVirtualNetworkSwiftConnectionAttributes {
	return appServiceSlotVirtualNetworkSwiftConnectionAttributes{ref: terra.ReferenceResource(assvnsc)}
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) ImportState(av io.Reader) error {
	assvnsc.state = &appServiceSlotVirtualNetworkSwiftConnectionState{}
	if err := json.NewDecoder(av).Decode(assvnsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assvnsc.Type(), assvnsc.LocalName(), err)
	}
	return nil
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) State() (*appServiceSlotVirtualNetworkSwiftConnectionState, bool) {
	return assvnsc.state, assvnsc.state != nil
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) StateMust() *appServiceSlotVirtualNetworkSwiftConnectionState {
	if assvnsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assvnsc.Type(), assvnsc.LocalName()))
	}
	return assvnsc.state
}

func (assvnsc *AppServiceSlotVirtualNetworkSwiftConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(assvnsc)
}

type AppServiceSlotVirtualNetworkSwiftConnectionArgs struct {
	// AppServiceId: string, required
	AppServiceId terra.StringValue `hcl:"app_service_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SlotName: string, required
	SlotName terra.StringValue `hcl:"slot_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *appserviceslotvirtualnetworkswiftconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AppServiceSlotVirtualNetworkSwiftConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appServiceSlotVirtualNetworkSwiftConnectionAttributes struct {
	ref terra.Reference
}

func (assvnsc appServiceSlotVirtualNetworkSwiftConnectionAttributes) AppServiceId() terra.StringValue {
	return terra.ReferenceString(assvnsc.ref.Append("app_service_id"))
}

func (assvnsc appServiceSlotVirtualNetworkSwiftConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(assvnsc.ref.Append("id"))
}

func (assvnsc appServiceSlotVirtualNetworkSwiftConnectionAttributes) SlotName() terra.StringValue {
	return terra.ReferenceString(assvnsc.ref.Append("slot_name"))
}

func (assvnsc appServiceSlotVirtualNetworkSwiftConnectionAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(assvnsc.ref.Append("subnet_id"))
}

func (assvnsc appServiceSlotVirtualNetworkSwiftConnectionAttributes) Timeouts() appserviceslotvirtualnetworkswiftconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[appserviceslotvirtualnetworkswiftconnection.TimeoutsAttributes](assvnsc.ref.Append("timeouts"))
}

type appServiceSlotVirtualNetworkSwiftConnectionState struct {
	AppServiceId string                                                     `json:"app_service_id"`
	Id           string                                                     `json:"id"`
	SlotName     string                                                     `json:"slot_name"`
	SubnetId     string                                                     `json:"subnet_id"`
	Timeouts     *appserviceslotvirtualnetworkswiftconnection.TimeoutsState `json:"timeouts"`
}
