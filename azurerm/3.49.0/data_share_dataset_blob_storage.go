// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datasharedatasetblobstorage "github.com/golingon/terraproviders/azurerm/3.49.0/datasharedatasetblobstorage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataShareDatasetBlobStorage(name string, args DataShareDatasetBlobStorageArgs) *DataShareDatasetBlobStorage {
	return &DataShareDatasetBlobStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataShareDatasetBlobStorage)(nil)

type DataShareDatasetBlobStorage struct {
	Name  string
	Args  DataShareDatasetBlobStorageArgs
	state *dataShareDatasetBlobStorageState
}

func (dsdbs *DataShareDatasetBlobStorage) Type() string {
	return "azurerm_data_share_dataset_blob_storage"
}

func (dsdbs *DataShareDatasetBlobStorage) LocalName() string {
	return dsdbs.Name
}

func (dsdbs *DataShareDatasetBlobStorage) Configuration() interface{} {
	return dsdbs.Args
}

func (dsdbs *DataShareDatasetBlobStorage) Attributes() dataShareDatasetBlobStorageAttributes {
	return dataShareDatasetBlobStorageAttributes{ref: terra.ReferenceResource(dsdbs)}
}

func (dsdbs *DataShareDatasetBlobStorage) ImportState(av io.Reader) error {
	dsdbs.state = &dataShareDatasetBlobStorageState{}
	if err := json.NewDecoder(av).Decode(dsdbs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsdbs.Type(), dsdbs.LocalName(), err)
	}
	return nil
}

func (dsdbs *DataShareDatasetBlobStorage) State() (*dataShareDatasetBlobStorageState, bool) {
	return dsdbs.state, dsdbs.state != nil
}

func (dsdbs *DataShareDatasetBlobStorage) StateMust() *dataShareDatasetBlobStorageState {
	if dsdbs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsdbs.Type(), dsdbs.LocalName()))
	}
	return dsdbs.state
}

func (dsdbs *DataShareDatasetBlobStorage) DependOn() terra.Reference {
	return terra.ReferenceResource(dsdbs)
}

type DataShareDatasetBlobStorageArgs struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// DataShareId: string, required
	DataShareId terra.StringValue `hcl:"data_share_id,attr" validate:"required"`
	// FilePath: string, optional
	FilePath terra.StringValue `hcl:"file_path,attr"`
	// FolderPath: string, optional
	FolderPath terra.StringValue `hcl:"folder_path,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccount: required
	StorageAccount *datasharedatasetblobstorage.StorageAccount `hcl:"storage_account,block" validate:"required"`
	// Timeouts: optional
	Timeouts *datasharedatasetblobstorage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DataShareDatasetBlobStorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataShareDatasetBlobStorageAttributes struct {
	ref terra.Reference
}

func (dsdbs dataShareDatasetBlobStorageAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("container_name"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) DataShareId() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("data_share_id"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("display_name"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) FilePath() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("file_path"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) FolderPath() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("folder_path"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("id"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dsdbs.ref.Append("name"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) StorageAccount() terra.ListValue[datasharedatasetblobstorage.StorageAccountAttributes] {
	return terra.ReferenceList[datasharedatasetblobstorage.StorageAccountAttributes](dsdbs.ref.Append("storage_account"))
}

func (dsdbs dataShareDatasetBlobStorageAttributes) Timeouts() datasharedatasetblobstorage.TimeoutsAttributes {
	return terra.ReferenceSingle[datasharedatasetblobstorage.TimeoutsAttributes](dsdbs.ref.Append("timeouts"))
}

type dataShareDatasetBlobStorageState struct {
	ContainerName  string                                            `json:"container_name"`
	DataShareId    string                                            `json:"data_share_id"`
	DisplayName    string                                            `json:"display_name"`
	FilePath       string                                            `json:"file_path"`
	FolderPath     string                                            `json:"folder_path"`
	Id             string                                            `json:"id"`
	Name           string                                            `json:"name"`
	StorageAccount []datasharedatasetblobstorage.StorageAccountState `json:"storage_account"`
	Timeouts       *datasharedatasetblobstorage.TimeoutsState        `json:"timeouts"`
}
