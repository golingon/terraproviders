// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	maintenanceassignmentvirtualmachinescaleset "github.com/golingon/terraproviders/azurerm/3.49.0/maintenanceassignmentvirtualmachinescaleset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMaintenanceAssignmentVirtualMachineScaleSet(name string, args MaintenanceAssignmentVirtualMachineScaleSetArgs) *MaintenanceAssignmentVirtualMachineScaleSet {
	return &MaintenanceAssignmentVirtualMachineScaleSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MaintenanceAssignmentVirtualMachineScaleSet)(nil)

type MaintenanceAssignmentVirtualMachineScaleSet struct {
	Name  string
	Args  MaintenanceAssignmentVirtualMachineScaleSetArgs
	state *maintenanceAssignmentVirtualMachineScaleSetState
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) Type() string {
	return "azurerm_maintenance_assignment_virtual_machine_scale_set"
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) LocalName() string {
	return mavmss.Name
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) Configuration() interface{} {
	return mavmss.Args
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) Attributes() maintenanceAssignmentVirtualMachineScaleSetAttributes {
	return maintenanceAssignmentVirtualMachineScaleSetAttributes{ref: terra.ReferenceResource(mavmss)}
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) ImportState(av io.Reader) error {
	mavmss.state = &maintenanceAssignmentVirtualMachineScaleSetState{}
	if err := json.NewDecoder(av).Decode(mavmss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mavmss.Type(), mavmss.LocalName(), err)
	}
	return nil
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) State() (*maintenanceAssignmentVirtualMachineScaleSetState, bool) {
	return mavmss.state, mavmss.state != nil
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) StateMust() *maintenanceAssignmentVirtualMachineScaleSetState {
	if mavmss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mavmss.Type(), mavmss.LocalName()))
	}
	return mavmss.state
}

func (mavmss *MaintenanceAssignmentVirtualMachineScaleSet) DependOn() terra.Reference {
	return terra.ReferenceResource(mavmss)
}

type MaintenanceAssignmentVirtualMachineScaleSetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaintenanceConfigurationId: string, required
	MaintenanceConfigurationId terra.StringValue `hcl:"maintenance_configuration_id,attr" validate:"required"`
	// VirtualMachineScaleSetId: string, required
	VirtualMachineScaleSetId terra.StringValue `hcl:"virtual_machine_scale_set_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *maintenanceassignmentvirtualmachinescaleset.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MaintenanceAssignmentVirtualMachineScaleSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type maintenanceAssignmentVirtualMachineScaleSetAttributes struct {
	ref terra.Reference
}

func (mavmss maintenanceAssignmentVirtualMachineScaleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mavmss.ref.Append("id"))
}

func (mavmss maintenanceAssignmentVirtualMachineScaleSetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(mavmss.ref.Append("location"))
}

func (mavmss maintenanceAssignmentVirtualMachineScaleSetAttributes) MaintenanceConfigurationId() terra.StringValue {
	return terra.ReferenceString(mavmss.ref.Append("maintenance_configuration_id"))
}

func (mavmss maintenanceAssignmentVirtualMachineScaleSetAttributes) VirtualMachineScaleSetId() terra.StringValue {
	return terra.ReferenceString(mavmss.ref.Append("virtual_machine_scale_set_id"))
}

func (mavmss maintenanceAssignmentVirtualMachineScaleSetAttributes) Timeouts() maintenanceassignmentvirtualmachinescaleset.TimeoutsAttributes {
	return terra.ReferenceSingle[maintenanceassignmentvirtualmachinescaleset.TimeoutsAttributes](mavmss.ref.Append("timeouts"))
}

type maintenanceAssignmentVirtualMachineScaleSetState struct {
	Id                         string                                                     `json:"id"`
	Location                   string                                                     `json:"location"`
	MaintenanceConfigurationId string                                                     `json:"maintenance_configuration_id"`
	VirtualMachineScaleSetId   string                                                     `json:"virtual_machine_scale_set_id"`
	Timeouts                   *maintenanceassignmentvirtualmachinescaleset.TimeoutsState `json:"timeouts"`
}
