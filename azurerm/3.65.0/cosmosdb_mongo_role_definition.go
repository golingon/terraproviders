// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbmongoroledefinition "github.com/golingon/terraproviders/azurerm/3.65.0/cosmosdbmongoroledefinition"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCosmosdbMongoRoleDefinition creates a new instance of [CosmosdbMongoRoleDefinition].
func NewCosmosdbMongoRoleDefinition(name string, args CosmosdbMongoRoleDefinitionArgs) *CosmosdbMongoRoleDefinition {
	return &CosmosdbMongoRoleDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbMongoRoleDefinition)(nil)

// CosmosdbMongoRoleDefinition represents the Terraform resource azurerm_cosmosdb_mongo_role_definition.
type CosmosdbMongoRoleDefinition struct {
	Name      string
	Args      CosmosdbMongoRoleDefinitionArgs
	state     *cosmosdbMongoRoleDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) Type() string {
	return "azurerm_cosmosdb_mongo_role_definition"
}

// LocalName returns the local name for [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) LocalName() string {
	return cmrd.Name
}

// Configuration returns the configuration (args) for [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) Configuration() interface{} {
	return cmrd.Args
}

// DependOn is used for other resources to depend on [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(cmrd)
}

// Dependencies returns the list of resources [CosmosdbMongoRoleDefinition] depends_on.
func (cmrd *CosmosdbMongoRoleDefinition) Dependencies() terra.Dependencies {
	return cmrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) LifecycleManagement() *terra.Lifecycle {
	return cmrd.Lifecycle
}

// Attributes returns the attributes for [CosmosdbMongoRoleDefinition].
func (cmrd *CosmosdbMongoRoleDefinition) Attributes() cosmosdbMongoRoleDefinitionAttributes {
	return cosmosdbMongoRoleDefinitionAttributes{ref: terra.ReferenceResource(cmrd)}
}

// ImportState imports the given attribute values into [CosmosdbMongoRoleDefinition]'s state.
func (cmrd *CosmosdbMongoRoleDefinition) ImportState(av io.Reader) error {
	cmrd.state = &cosmosdbMongoRoleDefinitionState{}
	if err := json.NewDecoder(av).Decode(cmrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cmrd.Type(), cmrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CosmosdbMongoRoleDefinition] has state.
func (cmrd *CosmosdbMongoRoleDefinition) State() (*cosmosdbMongoRoleDefinitionState, bool) {
	return cmrd.state, cmrd.state != nil
}

// StateMust returns the state for [CosmosdbMongoRoleDefinition]. Panics if the state is nil.
func (cmrd *CosmosdbMongoRoleDefinition) StateMust() *cosmosdbMongoRoleDefinitionState {
	if cmrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cmrd.Type(), cmrd.LocalName()))
	}
	return cmrd.state
}

// CosmosdbMongoRoleDefinitionArgs contains the configurations for azurerm_cosmosdb_mongo_role_definition.
type CosmosdbMongoRoleDefinitionArgs struct {
	// CosmosMongoDatabaseId: string, required
	CosmosMongoDatabaseId terra.StringValue `hcl:"cosmos_mongo_database_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InheritedRoleNames: list of string, optional
	InheritedRoleNames terra.ListValue[terra.StringValue] `hcl:"inherited_role_names,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// Privilege: min=0
	Privilege []cosmosdbmongoroledefinition.Privilege `hcl:"privilege,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *cosmosdbmongoroledefinition.Timeouts `hcl:"timeouts,block"`
}
type cosmosdbMongoRoleDefinitionAttributes struct {
	ref terra.Reference
}

// CosmosMongoDatabaseId returns a reference to field cosmos_mongo_database_id of azurerm_cosmosdb_mongo_role_definition.
func (cmrd cosmosdbMongoRoleDefinitionAttributes) CosmosMongoDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(cmrd.ref.Append("cosmos_mongo_database_id"))
}

// Id returns a reference to field id of azurerm_cosmosdb_mongo_role_definition.
func (cmrd cosmosdbMongoRoleDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cmrd.ref.Append("id"))
}

// InheritedRoleNames returns a reference to field inherited_role_names of azurerm_cosmosdb_mongo_role_definition.
func (cmrd cosmosdbMongoRoleDefinitionAttributes) InheritedRoleNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cmrd.ref.Append("inherited_role_names"))
}

// RoleName returns a reference to field role_name of azurerm_cosmosdb_mongo_role_definition.
func (cmrd cosmosdbMongoRoleDefinitionAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(cmrd.ref.Append("role_name"))
}

func (cmrd cosmosdbMongoRoleDefinitionAttributes) Privilege() terra.ListValue[cosmosdbmongoroledefinition.PrivilegeAttributes] {
	return terra.ReferenceAsList[cosmosdbmongoroledefinition.PrivilegeAttributes](cmrd.ref.Append("privilege"))
}

func (cmrd cosmosdbMongoRoleDefinitionAttributes) Timeouts() cosmosdbmongoroledefinition.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cosmosdbmongoroledefinition.TimeoutsAttributes](cmrd.ref.Append("timeouts"))
}

type cosmosdbMongoRoleDefinitionState struct {
	CosmosMongoDatabaseId string                                       `json:"cosmos_mongo_database_id"`
	Id                    string                                       `json:"id"`
	InheritedRoleNames    []string                                     `json:"inherited_role_names"`
	RoleName              string                                       `json:"role_name"`
	Privilege             []cosmosdbmongoroledefinition.PrivilegeState `json:"privilege"`
	Timeouts              *cosmosdbmongoroledefinition.TimeoutsState   `json:"timeouts"`
}
