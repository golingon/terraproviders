// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package apimanagementbackend

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Credentials struct {
	// Certificate: list of string, optional
	Certificate terra.ListValue[terra.StringValue] `hcl:"certificate,attr"`
	// Header: map of string, optional
	Header terra.MapValue[terra.StringValue] `hcl:"header,attr"`
	// Query: map of string, optional
	Query terra.MapValue[terra.StringValue] `hcl:"query,attr"`
	// Authorization: optional
	Authorization *Authorization `hcl:"authorization,block"`
}

type Authorization struct {
	// Parameter: string, optional
	Parameter terra.StringValue `hcl:"parameter,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
}

type Proxy struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type ServiceFabricCluster struct {
	// ClientCertificateId: string, optional
	ClientCertificateId terra.StringValue `hcl:"client_certificate_id,attr"`
	// ClientCertificateThumbprint: string, optional
	ClientCertificateThumbprint terra.StringValue `hcl:"client_certificate_thumbprint,attr"`
	// ManagementEndpoints: set of string, required
	ManagementEndpoints terra.SetValue[terra.StringValue] `hcl:"management_endpoints,attr" validate:"required"`
	// MaxPartitionResolutionRetries: number, required
	MaxPartitionResolutionRetries terra.NumberValue `hcl:"max_partition_resolution_retries,attr" validate:"required"`
	// ServerCertificateThumbprints: set of string, optional
	ServerCertificateThumbprints terra.SetValue[terra.StringValue] `hcl:"server_certificate_thumbprints,attr"`
	// ServerX509Name: min=0
	ServerX509Name []ServerX509Name `hcl:"server_x509_name,block" validate:"min=0"`
}

type ServerX509Name struct {
	// IssuerCertificateThumbprint: string, required
	IssuerCertificateThumbprint terra.StringValue `hcl:"issuer_certificate_thumbprint,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Tls struct {
	// ValidateCertificateChain: bool, optional
	ValidateCertificateChain terra.BoolValue `hcl:"validate_certificate_chain,attr"`
	// ValidateCertificateName: bool, optional
	ValidateCertificateName terra.BoolValue `hcl:"validate_certificate_name,attr"`
}

type CredentialsAttributes struct {
	ref terra.Reference
}

func (c CredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CredentialsAttributes) InternalWithRef(ref terra.Reference) CredentialsAttributes {
	return CredentialsAttributes{ref: ref}
}

func (c CredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CredentialsAttributes) Certificate() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("certificate"))
}

func (c CredentialsAttributes) Header() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("header"))
}

func (c CredentialsAttributes) Query() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("query"))
}

func (c CredentialsAttributes) Authorization() terra.ListValue[AuthorizationAttributes] {
	return terra.ReferenceAsList[AuthorizationAttributes](c.ref.Append("authorization"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) Parameter() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("parameter"))
}

func (a AuthorizationAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("scheme"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("password"))
}

func (p ProxyAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("url"))
}

func (p ProxyAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("username"))
}

type ServiceFabricClusterAttributes struct {
	ref terra.Reference
}

func (sfc ServiceFabricClusterAttributes) InternalRef() (terra.Reference, error) {
	return sfc.ref, nil
}

func (sfc ServiceFabricClusterAttributes) InternalWithRef(ref terra.Reference) ServiceFabricClusterAttributes {
	return ServiceFabricClusterAttributes{ref: ref}
}

func (sfc ServiceFabricClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sfc.ref.InternalTokens()
}

func (sfc ServiceFabricClusterAttributes) ClientCertificateId() terra.StringValue {
	return terra.ReferenceAsString(sfc.ref.Append("client_certificate_id"))
}

func (sfc ServiceFabricClusterAttributes) ClientCertificateThumbprint() terra.StringValue {
	return terra.ReferenceAsString(sfc.ref.Append("client_certificate_thumbprint"))
}

func (sfc ServiceFabricClusterAttributes) ManagementEndpoints() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sfc.ref.Append("management_endpoints"))
}

func (sfc ServiceFabricClusterAttributes) MaxPartitionResolutionRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(sfc.ref.Append("max_partition_resolution_retries"))
}

func (sfc ServiceFabricClusterAttributes) ServerCertificateThumbprints() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sfc.ref.Append("server_certificate_thumbprints"))
}

func (sfc ServiceFabricClusterAttributes) ServerX509Name() terra.SetValue[ServerX509NameAttributes] {
	return terra.ReferenceAsSet[ServerX509NameAttributes](sfc.ref.Append("server_x509_name"))
}

type ServerX509NameAttributes struct {
	ref terra.Reference
}

func (sxn ServerX509NameAttributes) InternalRef() (terra.Reference, error) {
	return sxn.ref, nil
}

func (sxn ServerX509NameAttributes) InternalWithRef(ref terra.Reference) ServerX509NameAttributes {
	return ServerX509NameAttributes{ref: ref}
}

func (sxn ServerX509NameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sxn.ref.InternalTokens()
}

func (sxn ServerX509NameAttributes) IssuerCertificateThumbprint() terra.StringValue {
	return terra.ReferenceAsString(sxn.ref.Append("issuer_certificate_thumbprint"))
}

func (sxn ServerX509NameAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sxn.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TlsAttributes struct {
	ref terra.Reference
}

func (t TlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TlsAttributes) InternalWithRef(ref terra.Reference) TlsAttributes {
	return TlsAttributes{ref: ref}
}

func (t TlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TlsAttributes) ValidateCertificateChain() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("validate_certificate_chain"))
}

func (t TlsAttributes) ValidateCertificateName() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("validate_certificate_name"))
}

type CredentialsState struct {
	Certificate   []string             `json:"certificate"`
	Header        map[string]string    `json:"header"`
	Query         map[string]string    `json:"query"`
	Authorization []AuthorizationState `json:"authorization"`
}

type AuthorizationState struct {
	Parameter string `json:"parameter"`
	Scheme    string `json:"scheme"`
}

type ProxyState struct {
	Password string `json:"password"`
	Url      string `json:"url"`
	Username string `json:"username"`
}

type ServiceFabricClusterState struct {
	ClientCertificateId           string                `json:"client_certificate_id"`
	ClientCertificateThumbprint   string                `json:"client_certificate_thumbprint"`
	ManagementEndpoints           []string              `json:"management_endpoints"`
	MaxPartitionResolutionRetries float64               `json:"max_partition_resolution_retries"`
	ServerCertificateThumbprints  []string              `json:"server_certificate_thumbprints"`
	ServerX509Name                []ServerX509NameState `json:"server_x509_name"`
}

type ServerX509NameState struct {
	IssuerCertificateThumbprint string `json:"issuer_certificate_thumbprint"`
	Name                        string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TlsState struct {
	ValidateCertificateChain bool `json:"validate_certificate_chain"`
	ValidateCertificateName  bool `json:"validate_certificate_name"`
}
