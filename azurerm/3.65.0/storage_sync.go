// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	storagesync "github.com/golingon/terraproviders/azurerm/3.65.0/storagesync"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewStorageSync creates a new instance of [StorageSync].
func NewStorageSync(name string, args StorageSyncArgs) *StorageSync {
	return &StorageSync{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageSync)(nil)

// StorageSync represents the Terraform resource azurerm_storage_sync.
type StorageSync struct {
	Name      string
	Args      StorageSyncArgs
	state     *storageSyncState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [StorageSync].
func (ss *StorageSync) Type() string {
	return "azurerm_storage_sync"
}

// LocalName returns the local name for [StorageSync].
func (ss *StorageSync) LocalName() string {
	return ss.Name
}

// Configuration returns the configuration (args) for [StorageSync].
func (ss *StorageSync) Configuration() interface{} {
	return ss.Args
}

// DependOn is used for other resources to depend on [StorageSync].
func (ss *StorageSync) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

// Dependencies returns the list of resources [StorageSync] depends_on.
func (ss *StorageSync) Dependencies() terra.Dependencies {
	return ss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [StorageSync].
func (ss *StorageSync) LifecycleManagement() *terra.Lifecycle {
	return ss.Lifecycle
}

// Attributes returns the attributes for [StorageSync].
func (ss *StorageSync) Attributes() storageSyncAttributes {
	return storageSyncAttributes{ref: terra.ReferenceResource(ss)}
}

// ImportState imports the given attribute values into [StorageSync]'s state.
func (ss *StorageSync) ImportState(av io.Reader) error {
	ss.state = &storageSyncState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [StorageSync] has state.
func (ss *StorageSync) State() (*storageSyncState, bool) {
	return ss.state, ss.state != nil
}

// StateMust returns the state for [StorageSync]. Panics if the state is nil.
func (ss *StorageSync) StateMust() *storageSyncState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

// StorageSyncArgs contains the configurations for azurerm_storage_sync.
type StorageSyncArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncomingTrafficPolicy: string, optional
	IncomingTrafficPolicy terra.StringValue `hcl:"incoming_traffic_policy,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *storagesync.Timeouts `hcl:"timeouts,block"`
}
type storageSyncAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_storage_sync.
func (ss storageSyncAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("id"))
}

// IncomingTrafficPolicy returns a reference to field incoming_traffic_policy of azurerm_storage_sync.
func (ss storageSyncAttributes) IncomingTrafficPolicy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("incoming_traffic_policy"))
}

// Location returns a reference to field location of azurerm_storage_sync.
func (ss storageSyncAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_storage_sync.
func (ss storageSyncAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_storage_sync.
func (ss storageSyncAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_storage_sync.
func (ss storageSyncAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ss.ref.Append("tags"))
}

func (ss storageSyncAttributes) Timeouts() storagesync.TimeoutsAttributes {
	return terra.ReferenceAsSingle[storagesync.TimeoutsAttributes](ss.ref.Append("timeouts"))
}

type storageSyncState struct {
	Id                    string                     `json:"id"`
	IncomingTrafficPolicy string                     `json:"incoming_traffic_policy"`
	Location              string                     `json:"location"`
	Name                  string                     `json:"name"`
	ResourceGroupName     string                     `json:"resource_group_name"`
	Tags                  map[string]string          `json:"tags"`
	Timeouts              *storagesync.TimeoutsState `json:"timeouts"`
}
