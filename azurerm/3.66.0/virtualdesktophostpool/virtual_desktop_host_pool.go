// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package virtualdesktophostpool

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ScheduledAgentUpdates struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// UseSessionHostTimezone: bool, optional
	UseSessionHostTimezone terra.BoolValue `hcl:"use_session_host_timezone,attr"`
	// Schedule: min=0,max=2
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0,max=2"`
}

type Schedule struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ScheduledAgentUpdatesAttributes struct {
	ref terra.Reference
}

func (sau ScheduledAgentUpdatesAttributes) InternalRef() (terra.Reference, error) {
	return sau.ref, nil
}

func (sau ScheduledAgentUpdatesAttributes) InternalWithRef(ref terra.Reference) ScheduledAgentUpdatesAttributes {
	return ScheduledAgentUpdatesAttributes{ref: ref}
}

func (sau ScheduledAgentUpdatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sau.ref.InternalTokens()
}

func (sau ScheduledAgentUpdatesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sau.ref.Append("enabled"))
}

func (sau ScheduledAgentUpdatesAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(sau.ref.Append("timezone"))
}

func (sau ScheduledAgentUpdatesAttributes) UseSessionHostTimezone() terra.BoolValue {
	return terra.ReferenceAsBool(sau.ref.Append("use_session_host_timezone"))
}

func (sau ScheduledAgentUpdatesAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](sau.ref.Append("schedule"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("day_of_week"))
}

func (s ScheduleAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("hour_of_day"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ScheduledAgentUpdatesState struct {
	Enabled                bool            `json:"enabled"`
	Timezone               string          `json:"timezone"`
	UseSessionHostTimezone bool            `json:"use_session_host_timezone"`
	Schedule               []ScheduleState `json:"schedule"`
}

type ScheduleState struct {
	DayOfWeek string  `json:"day_of_week"`
	HourOfDay float64 `json:"hour_of_day"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
