// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datamobilenetworkattacheddatanetwork

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type NetworkAddressPortTranslation struct {
	// PortRange: min=0
	PortRange []PortRange `hcl:"port_range,block" validate:"min=0"`
}

type PortRange struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type NetworkAddressPortTranslationAttributes struct {
	ref terra.Reference
}

func (napt NetworkAddressPortTranslationAttributes) InternalRef() (terra.Reference, error) {
	return napt.ref, nil
}

func (napt NetworkAddressPortTranslationAttributes) InternalWithRef(ref terra.Reference) NetworkAddressPortTranslationAttributes {
	return NetworkAddressPortTranslationAttributes{ref: ref}
}

func (napt NetworkAddressPortTranslationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return napt.ref.InternalTokens()
}

func (napt NetworkAddressPortTranslationAttributes) IcmpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("icmp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) PinholeMaximumNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("pinhole_maximum_number"))
}

func (napt NetworkAddressPortTranslationAttributes) TcpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("tcp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) TcpPortReuseMinimumHoldTimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("tcp_port_reuse_minimum_hold_time_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) UdpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("udp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) UdpPortReuseMinimumHoldTimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("udp_port_reuse_minimum_hold_time_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) PortRange() terra.ListValue[PortRangeAttributes] {
	return terra.ReferenceAsList[PortRangeAttributes](napt.ref.Append("port_range"))
}

type PortRangeAttributes struct {
	ref terra.Reference
}

func (pr PortRangeAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PortRangeAttributes) InternalWithRef(ref terra.Reference) PortRangeAttributes {
	return PortRangeAttributes{ref: ref}
}

func (pr PortRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PortRangeAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("maximum"))
}

func (pr PortRangeAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("minimum"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type NetworkAddressPortTranslationState struct {
	IcmpPinholeTimeoutInSeconds          float64          `json:"icmp_pinhole_timeout_in_seconds"`
	PinholeMaximumNumber                 float64          `json:"pinhole_maximum_number"`
	TcpPinholeTimeoutInSeconds           float64          `json:"tcp_pinhole_timeout_in_seconds"`
	TcpPortReuseMinimumHoldTimeInSeconds float64          `json:"tcp_port_reuse_minimum_hold_time_in_seconds"`
	UdpPinholeTimeoutInSeconds           float64          `json:"udp_pinhole_timeout_in_seconds"`
	UdpPortReuseMinimumHoldTimeInSeconds float64          `json:"udp_port_reuse_minimum_hold_time_in_seconds"`
	PortRange                            []PortRangeState `json:"port_range"`
}

type PortRangeState struct {
	Maximum float64 `json:"maximum"`
	Minimum float64 `json:"minimum"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
