// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	networkmanagerconnectivityconfiguration "github.com/golingon/terraproviders/azurerm/3.66.0/networkmanagerconnectivityconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNetworkManagerConnectivityConfiguration creates a new instance of [NetworkManagerConnectivityConfiguration].
func NewNetworkManagerConnectivityConfiguration(name string, args NetworkManagerConnectivityConfigurationArgs) *NetworkManagerConnectivityConfiguration {
	return &NetworkManagerConnectivityConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkManagerConnectivityConfiguration)(nil)

// NetworkManagerConnectivityConfiguration represents the Terraform resource azurerm_network_manager_connectivity_configuration.
type NetworkManagerConnectivityConfiguration struct {
	Name      string
	Args      NetworkManagerConnectivityConfigurationArgs
	state     *networkManagerConnectivityConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) Type() string {
	return "azurerm_network_manager_connectivity_configuration"
}

// LocalName returns the local name for [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) LocalName() string {
	return nmcc.Name
}

// Configuration returns the configuration (args) for [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) Configuration() interface{} {
	return nmcc.Args
}

// DependOn is used for other resources to depend on [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(nmcc)
}

// Dependencies returns the list of resources [NetworkManagerConnectivityConfiguration] depends_on.
func (nmcc *NetworkManagerConnectivityConfiguration) Dependencies() terra.Dependencies {
	return nmcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) LifecycleManagement() *terra.Lifecycle {
	return nmcc.Lifecycle
}

// Attributes returns the attributes for [NetworkManagerConnectivityConfiguration].
func (nmcc *NetworkManagerConnectivityConfiguration) Attributes() networkManagerConnectivityConfigurationAttributes {
	return networkManagerConnectivityConfigurationAttributes{ref: terra.ReferenceResource(nmcc)}
}

// ImportState imports the given attribute values into [NetworkManagerConnectivityConfiguration]'s state.
func (nmcc *NetworkManagerConnectivityConfiguration) ImportState(av io.Reader) error {
	nmcc.state = &networkManagerConnectivityConfigurationState{}
	if err := json.NewDecoder(av).Decode(nmcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nmcc.Type(), nmcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkManagerConnectivityConfiguration] has state.
func (nmcc *NetworkManagerConnectivityConfiguration) State() (*networkManagerConnectivityConfigurationState, bool) {
	return nmcc.state, nmcc.state != nil
}

// StateMust returns the state for [NetworkManagerConnectivityConfiguration]. Panics if the state is nil.
func (nmcc *NetworkManagerConnectivityConfiguration) StateMust() *networkManagerConnectivityConfigurationState {
	if nmcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nmcc.Type(), nmcc.LocalName()))
	}
	return nmcc.state
}

// NetworkManagerConnectivityConfigurationArgs contains the configurations for azurerm_network_manager_connectivity_configuration.
type NetworkManagerConnectivityConfigurationArgs struct {
	// ConnectivityTopology: string, required
	ConnectivityTopology terra.StringValue `hcl:"connectivity_topology,attr" validate:"required"`
	// DeleteExistingPeeringEnabled: bool, optional
	DeleteExistingPeeringEnabled terra.BoolValue `hcl:"delete_existing_peering_enabled,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalMeshEnabled: bool, optional
	GlobalMeshEnabled terra.BoolValue `hcl:"global_mesh_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// AppliesToGroup: min=1
	AppliesToGroup []networkmanagerconnectivityconfiguration.AppliesToGroup `hcl:"applies_to_group,block" validate:"min=1"`
	// Hub: optional
	Hub *networkmanagerconnectivityconfiguration.Hub `hcl:"hub,block"`
	// Timeouts: optional
	Timeouts *networkmanagerconnectivityconfiguration.Timeouts `hcl:"timeouts,block"`
}
type networkManagerConnectivityConfigurationAttributes struct {
	ref terra.Reference
}

// ConnectivityTopology returns a reference to field connectivity_topology of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) ConnectivityTopology() terra.StringValue {
	return terra.ReferenceAsString(nmcc.ref.Append("connectivity_topology"))
}

// DeleteExistingPeeringEnabled returns a reference to field delete_existing_peering_enabled of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) DeleteExistingPeeringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nmcc.ref.Append("delete_existing_peering_enabled"))
}

// Description returns a reference to field description of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nmcc.ref.Append("description"))
}

// GlobalMeshEnabled returns a reference to field global_mesh_enabled of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) GlobalMeshEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nmcc.ref.Append("global_mesh_enabled"))
}

// Id returns a reference to field id of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nmcc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nmcc.ref.Append("name"))
}

// NetworkManagerId returns a reference to field network_manager_id of azurerm_network_manager_connectivity_configuration.
func (nmcc networkManagerConnectivityConfigurationAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceAsString(nmcc.ref.Append("network_manager_id"))
}

func (nmcc networkManagerConnectivityConfigurationAttributes) AppliesToGroup() terra.ListValue[networkmanagerconnectivityconfiguration.AppliesToGroupAttributes] {
	return terra.ReferenceAsList[networkmanagerconnectivityconfiguration.AppliesToGroupAttributes](nmcc.ref.Append("applies_to_group"))
}

func (nmcc networkManagerConnectivityConfigurationAttributes) Hub() terra.ListValue[networkmanagerconnectivityconfiguration.HubAttributes] {
	return terra.ReferenceAsList[networkmanagerconnectivityconfiguration.HubAttributes](nmcc.ref.Append("hub"))
}

func (nmcc networkManagerConnectivityConfigurationAttributes) Timeouts() networkmanagerconnectivityconfiguration.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkmanagerconnectivityconfiguration.TimeoutsAttributes](nmcc.ref.Append("timeouts"))
}

type networkManagerConnectivityConfigurationState struct {
	ConnectivityTopology         string                                                        `json:"connectivity_topology"`
	DeleteExistingPeeringEnabled bool                                                          `json:"delete_existing_peering_enabled"`
	Description                  string                                                        `json:"description"`
	GlobalMeshEnabled            bool                                                          `json:"global_mesh_enabled"`
	Id                           string                                                        `json:"id"`
	Name                         string                                                        `json:"name"`
	NetworkManagerId             string                                                        `json:"network_manager_id"`
	AppliesToGroup               []networkmanagerconnectivityconfiguration.AppliesToGroupState `json:"applies_to_group"`
	Hub                          []networkmanagerconnectivityconfiguration.HubState            `json:"hub"`
	Timeouts                     *networkmanagerconnectivityconfiguration.TimeoutsState        `json:"timeouts"`
}
