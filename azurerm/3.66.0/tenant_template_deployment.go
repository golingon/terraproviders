// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	tenanttemplatedeployment "github.com/golingon/terraproviders/azurerm/3.66.0/tenanttemplatedeployment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewTenantTemplateDeployment creates a new instance of [TenantTemplateDeployment].
func NewTenantTemplateDeployment(name string, args TenantTemplateDeploymentArgs) *TenantTemplateDeployment {
	return &TenantTemplateDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TenantTemplateDeployment)(nil)

// TenantTemplateDeployment represents the Terraform resource azurerm_tenant_template_deployment.
type TenantTemplateDeployment struct {
	Name      string
	Args      TenantTemplateDeploymentArgs
	state     *tenantTemplateDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) Type() string {
	return "azurerm_tenant_template_deployment"
}

// LocalName returns the local name for [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) LocalName() string {
	return ttd.Name
}

// Configuration returns the configuration (args) for [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) Configuration() interface{} {
	return ttd.Args
}

// DependOn is used for other resources to depend on [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(ttd)
}

// Dependencies returns the list of resources [TenantTemplateDeployment] depends_on.
func (ttd *TenantTemplateDeployment) Dependencies() terra.Dependencies {
	return ttd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) LifecycleManagement() *terra.Lifecycle {
	return ttd.Lifecycle
}

// Attributes returns the attributes for [TenantTemplateDeployment].
func (ttd *TenantTemplateDeployment) Attributes() tenantTemplateDeploymentAttributes {
	return tenantTemplateDeploymentAttributes{ref: terra.ReferenceResource(ttd)}
}

// ImportState imports the given attribute values into [TenantTemplateDeployment]'s state.
func (ttd *TenantTemplateDeployment) ImportState(av io.Reader) error {
	ttd.state = &tenantTemplateDeploymentState{}
	if err := json.NewDecoder(av).Decode(ttd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ttd.Type(), ttd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TenantTemplateDeployment] has state.
func (ttd *TenantTemplateDeployment) State() (*tenantTemplateDeploymentState, bool) {
	return ttd.state, ttd.state != nil
}

// StateMust returns the state for [TenantTemplateDeployment]. Panics if the state is nil.
func (ttd *TenantTemplateDeployment) StateMust() *tenantTemplateDeploymentState {
	if ttd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ttd.Type(), ttd.LocalName()))
	}
	return ttd.state
}

// TenantTemplateDeploymentArgs contains the configurations for azurerm_tenant_template_deployment.
type TenantTemplateDeploymentArgs struct {
	// DebugLevel: string, optional
	DebugLevel terra.StringValue `hcl:"debug_level,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersContent: string, optional
	ParametersContent terra.StringValue `hcl:"parameters_content,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TemplateContent: string, optional
	TemplateContent terra.StringValue `hcl:"template_content,attr"`
	// TemplateSpecVersionId: string, optional
	TemplateSpecVersionId terra.StringValue `hcl:"template_spec_version_id,attr"`
	// Timeouts: optional
	Timeouts *tenanttemplatedeployment.Timeouts `hcl:"timeouts,block"`
}
type tenantTemplateDeploymentAttributes struct {
	ref terra.Reference
}

// DebugLevel returns a reference to field debug_level of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) DebugLevel() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("debug_level"))
}

// Id returns a reference to field id of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("name"))
}

// OutputContent returns a reference to field output_content of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) OutputContent() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("output_content"))
}

// ParametersContent returns a reference to field parameters_content of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) ParametersContent() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("parameters_content"))
}

// Tags returns a reference to field tags of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ttd.ref.Append("tags"))
}

// TemplateContent returns a reference to field template_content of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) TemplateContent() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("template_content"))
}

// TemplateSpecVersionId returns a reference to field template_spec_version_id of azurerm_tenant_template_deployment.
func (ttd tenantTemplateDeploymentAttributes) TemplateSpecVersionId() terra.StringValue {
	return terra.ReferenceAsString(ttd.ref.Append("template_spec_version_id"))
}

func (ttd tenantTemplateDeploymentAttributes) Timeouts() tenanttemplatedeployment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[tenanttemplatedeployment.TimeoutsAttributes](ttd.ref.Append("timeouts"))
}

type tenantTemplateDeploymentState struct {
	DebugLevel            string                                  `json:"debug_level"`
	Id                    string                                  `json:"id"`
	Location              string                                  `json:"location"`
	Name                  string                                  `json:"name"`
	OutputContent         string                                  `json:"output_content"`
	ParametersContent     string                                  `json:"parameters_content"`
	Tags                  map[string]string                       `json:"tags"`
	TemplateContent       string                                  `json:"template_content"`
	TemplateSpecVersionId string                                  `json:"template_spec_version_id"`
	Timeouts              *tenanttemplatedeployment.TimeoutsState `json:"timeouts"`
}
