// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataautomationvariables

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Bool struct{}

type Datetime struct{}

type Encrypted struct{}

type Int struct{}

type Null struct{}

type String struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type BoolAttributes struct {
	ref terra.Reference
}

func (b BoolAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BoolAttributes) InternalWithRef(ref terra.Reference) BoolAttributes {
	return BoolAttributes{ref: ref}
}

func (b BoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("description"))
}

func (b BoolAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("encrypted"))
}

func (b BoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("id"))
}

func (b BoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b BoolAttributes) Value() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("value"))
}

type DatetimeAttributes struct {
	ref terra.Reference
}

func (d DatetimeAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatetimeAttributes) InternalWithRef(ref terra.Reference) DatetimeAttributes {
	return DatetimeAttributes{ref: ref}
}

func (d DatetimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatetimeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("description"))
}

func (d DatetimeAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("encrypted"))
}

func (d DatetimeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("id"))
}

func (d DatetimeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DatetimeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type EncryptedAttributes struct {
	ref terra.Reference
}

func (e EncryptedAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptedAttributes) InternalWithRef(ref terra.Reference) EncryptedAttributes {
	return EncryptedAttributes{ref: ref}
}

func (e EncryptedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptedAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("description"))
}

func (e EncryptedAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("encrypted"))
}

func (e EncryptedAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e EncryptedAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EncryptedAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type IntAttributes struct {
	ref terra.Reference
}

func (i IntAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IntAttributes) InternalWithRef(ref terra.Reference) IntAttributes {
	return IntAttributes{ref: ref}
}

func (i IntAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IntAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("description"))
}

func (i IntAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("encrypted"))
}

func (i IntAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("id"))
}

func (i IntAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

func (i IntAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type NullAttributes struct {
	ref terra.Reference
}

func (n NullAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NullAttributes) InternalWithRef(ref terra.Reference) NullAttributes {
	return NullAttributes{ref: ref}
}

func (n NullAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NullAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("description"))
}

func (n NullAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("encrypted"))
}

func (n NullAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("id"))
}

func (n NullAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("name"))
}

func (n NullAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("value"))
}

type StringAttributes struct {
	ref terra.Reference
}

func (s StringAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StringAttributes) InternalWithRef(ref terra.Reference) StringAttributes {
	return StringAttributes{ref: ref}
}

func (s StringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StringAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s StringAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("encrypted"))
}

func (s StringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

func (s StringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type BoolState struct {
	Description string `json:"description"`
	Encrypted   bool   `json:"encrypted"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Value       bool   `json:"value"`
}

type DatetimeState struct {
	Description string `json:"description"`
	Encrypted   bool   `json:"encrypted"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

type EncryptedState struct {
	Description string `json:"description"`
	Encrypted   bool   `json:"encrypted"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

type IntState struct {
	Description string  `json:"description"`
	Encrypted   bool    `json:"encrypted"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Value       float64 `json:"value"`
}

type NullState struct {
	Description string `json:"description"`
	Encrypted   bool   `json:"encrypted"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

type StringState struct {
	Description string `json:"description"`
	Encrypted   bool   `json:"encrypted"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
