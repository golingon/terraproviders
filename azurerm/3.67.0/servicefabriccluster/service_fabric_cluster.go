// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package servicefabriccluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AzureActiveDirectory struct {
	// ClientApplicationId: string, required
	ClientApplicationId terra.StringValue `hcl:"client_application_id,attr" validate:"required"`
	// ClusterApplicationId: string, required
	ClusterApplicationId terra.StringValue `hcl:"cluster_application_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type Certificate struct {
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
	// ThumbprintSecondary: string, optional
	ThumbprintSecondary terra.StringValue `hcl:"thumbprint_secondary,attr"`
	// X509StoreName: string, required
	X509StoreName terra.StringValue `hcl:"x509_store_name,attr" validate:"required"`
}

type CertificateCommonNames struct {
	// X509StoreName: string, required
	X509StoreName terra.StringValue `hcl:"x509_store_name,attr" validate:"required"`
	// CertificateCommonNamesCommonNames: min=1
	CommonNames []CertificateCommonNamesCommonNames `hcl:"common_names,block" validate:"min=1"`
}

type CertificateCommonNamesCommonNames struct {
	// CertificateCommonName: string, required
	CertificateCommonName terra.StringValue `hcl:"certificate_common_name,attr" validate:"required"`
	// CertificateIssuerThumbprint: string, optional
	CertificateIssuerThumbprint terra.StringValue `hcl:"certificate_issuer_thumbprint,attr"`
}

type ClientCertificateCommonName struct {
	// CommonName: string, required
	CommonName terra.StringValue `hcl:"common_name,attr" validate:"required"`
	// IsAdmin: bool, required
	IsAdmin terra.BoolValue `hcl:"is_admin,attr" validate:"required"`
	// IssuerThumbprint: string, optional
	IssuerThumbprint terra.StringValue `hcl:"issuer_thumbprint,attr"`
}

type ClientCertificateThumbprint struct {
	// IsAdmin: bool, required
	IsAdmin terra.BoolValue `hcl:"is_admin,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
}

type DiagnosticsConfig struct {
	// BlobEndpoint: string, required
	BlobEndpoint terra.StringValue `hcl:"blob_endpoint,attr" validate:"required"`
	// ProtectedAccountKeyName: string, required
	ProtectedAccountKeyName terra.StringValue `hcl:"protected_account_key_name,attr" validate:"required"`
	// QueueEndpoint: string, required
	QueueEndpoint terra.StringValue `hcl:"queue_endpoint,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// TableEndpoint: string, required
	TableEndpoint terra.StringValue `hcl:"table_endpoint,attr" validate:"required"`
}

type FabricSettings struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
}

type NodeType struct {
	// Capacities: map of string, optional
	Capacities terra.MapValue[terra.StringValue] `hcl:"capacities,attr"`
	// ClientEndpointPort: number, required
	ClientEndpointPort terra.NumberValue `hcl:"client_endpoint_port,attr" validate:"required"`
	// DurabilityLevel: string, optional
	DurabilityLevel terra.StringValue `hcl:"durability_level,attr"`
	// HttpEndpointPort: number, required
	HttpEndpointPort terra.NumberValue `hcl:"http_endpoint_port,attr" validate:"required"`
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// IsPrimary: bool, required
	IsPrimary terra.BoolValue `hcl:"is_primary,attr" validate:"required"`
	// IsStateless: bool, optional
	IsStateless terra.BoolValue `hcl:"is_stateless,attr"`
	// MultipleAvailabilityZones: bool, optional
	MultipleAvailabilityZones terra.BoolValue `hcl:"multiple_availability_zones,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlacementProperties: map of string, optional
	PlacementProperties terra.MapValue[terra.StringValue] `hcl:"placement_properties,attr"`
	// ReverseProxyEndpointPort: number, optional
	ReverseProxyEndpointPort terra.NumberValue `hcl:"reverse_proxy_endpoint_port,attr"`
	// ApplicationPorts: optional
	ApplicationPorts *ApplicationPorts `hcl:"application_ports,block"`
	// EphemeralPorts: optional
	EphemeralPorts *EphemeralPorts `hcl:"ephemeral_ports,block"`
}

type ApplicationPorts struct {
	// EndPort: number, required
	EndPort terra.NumberValue `hcl:"end_port,attr" validate:"required"`
	// StartPort: number, required
	StartPort terra.NumberValue `hcl:"start_port,attr" validate:"required"`
}

type EphemeralPorts struct {
	// EndPort: number, required
	EndPort terra.NumberValue `hcl:"end_port,attr" validate:"required"`
	// StartPort: number, required
	StartPort terra.NumberValue `hcl:"start_port,attr" validate:"required"`
}

type ReverseProxyCertificate struct {
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
	// ThumbprintSecondary: string, optional
	ThumbprintSecondary terra.StringValue `hcl:"thumbprint_secondary,attr"`
	// X509StoreName: string, required
	X509StoreName terra.StringValue `hcl:"x509_store_name,attr" validate:"required"`
}

type ReverseProxyCertificateCommonNames struct {
	// X509StoreName: string, required
	X509StoreName terra.StringValue `hcl:"x509_store_name,attr" validate:"required"`
	// ReverseProxyCertificateCommonNamesCommonNames: min=1
	CommonNames []ReverseProxyCertificateCommonNamesCommonNames `hcl:"common_names,block" validate:"min=1"`
}

type ReverseProxyCertificateCommonNamesCommonNames struct {
	// CertificateCommonName: string, required
	CertificateCommonName terra.StringValue `hcl:"certificate_common_name,attr" validate:"required"`
	// CertificateIssuerThumbprint: string, optional
	CertificateIssuerThumbprint terra.StringValue `hcl:"certificate_issuer_thumbprint,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UpgradePolicy struct {
	// ForceRestartEnabled: bool, optional
	ForceRestartEnabled terra.BoolValue `hcl:"force_restart_enabled,attr"`
	// HealthCheckRetryTimeout: string, optional
	HealthCheckRetryTimeout terra.StringValue `hcl:"health_check_retry_timeout,attr"`
	// HealthCheckStableDuration: string, optional
	HealthCheckStableDuration terra.StringValue `hcl:"health_check_stable_duration,attr"`
	// HealthCheckWaitDuration: string, optional
	HealthCheckWaitDuration terra.StringValue `hcl:"health_check_wait_duration,attr"`
	// UpgradeDomainTimeout: string, optional
	UpgradeDomainTimeout terra.StringValue `hcl:"upgrade_domain_timeout,attr"`
	// UpgradeReplicaSetCheckTimeout: string, optional
	UpgradeReplicaSetCheckTimeout terra.StringValue `hcl:"upgrade_replica_set_check_timeout,attr"`
	// UpgradeTimeout: string, optional
	UpgradeTimeout terra.StringValue `hcl:"upgrade_timeout,attr"`
	// DeltaHealthPolicy: optional
	DeltaHealthPolicy *DeltaHealthPolicy `hcl:"delta_health_policy,block"`
	// HealthPolicy: optional
	HealthPolicy *HealthPolicy `hcl:"health_policy,block"`
}

type DeltaHealthPolicy struct {
	// MaxDeltaUnhealthyApplicationsPercent: number, optional
	MaxDeltaUnhealthyApplicationsPercent terra.NumberValue `hcl:"max_delta_unhealthy_applications_percent,attr"`
	// MaxDeltaUnhealthyNodesPercent: number, optional
	MaxDeltaUnhealthyNodesPercent terra.NumberValue `hcl:"max_delta_unhealthy_nodes_percent,attr"`
	// MaxUpgradeDomainDeltaUnhealthyNodesPercent: number, optional
	MaxUpgradeDomainDeltaUnhealthyNodesPercent terra.NumberValue `hcl:"max_upgrade_domain_delta_unhealthy_nodes_percent,attr"`
}

type HealthPolicy struct {
	// MaxUnhealthyApplicationsPercent: number, optional
	MaxUnhealthyApplicationsPercent terra.NumberValue `hcl:"max_unhealthy_applications_percent,attr"`
	// MaxUnhealthyNodesPercent: number, optional
	MaxUnhealthyNodesPercent terra.NumberValue `hcl:"max_unhealthy_nodes_percent,attr"`
}

type AzureActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (aad AzureActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return aad.ref, nil
}

func (aad AzureActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) AzureActiveDirectoryAttributes {
	return AzureActiveDirectoryAttributes{ref: ref}
}

func (aad AzureActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aad.ref.InternalTokens()
}

func (aad AzureActiveDirectoryAttributes) ClientApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("client_application_id"))
}

func (aad AzureActiveDirectoryAttributes) ClusterApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("cluster_application_id"))
}

func (aad AzureActiveDirectoryAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("tenant_id"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("thumbprint"))
}

func (c CertificateAttributes) ThumbprintSecondary() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("thumbprint_secondary"))
}

func (c CertificateAttributes) X509StoreName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("x509_store_name"))
}

type CertificateCommonNamesAttributes struct {
	ref terra.Reference
}

func (ccn CertificateCommonNamesAttributes) InternalRef() (terra.Reference, error) {
	return ccn.ref, nil
}

func (ccn CertificateCommonNamesAttributes) InternalWithRef(ref terra.Reference) CertificateCommonNamesAttributes {
	return CertificateCommonNamesAttributes{ref: ref}
}

func (ccn CertificateCommonNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccn.ref.InternalTokens()
}

func (ccn CertificateCommonNamesAttributes) X509StoreName() terra.StringValue {
	return terra.ReferenceAsString(ccn.ref.Append("x509_store_name"))
}

func (ccn CertificateCommonNamesAttributes) CommonNames() terra.SetValue[CertificateCommonNamesCommonNamesAttributes] {
	return terra.ReferenceAsSet[CertificateCommonNamesCommonNamesAttributes](ccn.ref.Append("common_names"))
}

type CertificateCommonNamesCommonNamesAttributes struct {
	ref terra.Reference
}

func (cn CertificateCommonNamesCommonNamesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn CertificateCommonNamesCommonNamesAttributes) InternalWithRef(ref terra.Reference) CertificateCommonNamesCommonNamesAttributes {
	return CertificateCommonNamesCommonNamesAttributes{ref: ref}
}

func (cn CertificateCommonNamesCommonNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn CertificateCommonNamesCommonNamesAttributes) CertificateCommonName() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("certificate_common_name"))
}

func (cn CertificateCommonNamesCommonNamesAttributes) CertificateIssuerThumbprint() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("certificate_issuer_thumbprint"))
}

type ClientCertificateCommonNameAttributes struct {
	ref terra.Reference
}

func (cccn ClientCertificateCommonNameAttributes) InternalRef() (terra.Reference, error) {
	return cccn.ref, nil
}

func (cccn ClientCertificateCommonNameAttributes) InternalWithRef(ref terra.Reference) ClientCertificateCommonNameAttributes {
	return ClientCertificateCommonNameAttributes{ref: ref}
}

func (cccn ClientCertificateCommonNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cccn.ref.InternalTokens()
}

func (cccn ClientCertificateCommonNameAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(cccn.ref.Append("common_name"))
}

func (cccn ClientCertificateCommonNameAttributes) IsAdmin() terra.BoolValue {
	return terra.ReferenceAsBool(cccn.ref.Append("is_admin"))
}

func (cccn ClientCertificateCommonNameAttributes) IssuerThumbprint() terra.StringValue {
	return terra.ReferenceAsString(cccn.ref.Append("issuer_thumbprint"))
}

type ClientCertificateThumbprintAttributes struct {
	ref terra.Reference
}

func (cct ClientCertificateThumbprintAttributes) InternalRef() (terra.Reference, error) {
	return cct.ref, nil
}

func (cct ClientCertificateThumbprintAttributes) InternalWithRef(ref terra.Reference) ClientCertificateThumbprintAttributes {
	return ClientCertificateThumbprintAttributes{ref: ref}
}

func (cct ClientCertificateThumbprintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cct.ref.InternalTokens()
}

func (cct ClientCertificateThumbprintAttributes) IsAdmin() terra.BoolValue {
	return terra.ReferenceAsBool(cct.ref.Append("is_admin"))
}

func (cct ClientCertificateThumbprintAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("thumbprint"))
}

type DiagnosticsConfigAttributes struct {
	ref terra.Reference
}

func (dc DiagnosticsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DiagnosticsConfigAttributes) InternalWithRef(ref terra.Reference) DiagnosticsConfigAttributes {
	return DiagnosticsConfigAttributes{ref: ref}
}

func (dc DiagnosticsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DiagnosticsConfigAttributes) BlobEndpoint() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("blob_endpoint"))
}

func (dc DiagnosticsConfigAttributes) ProtectedAccountKeyName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("protected_account_key_name"))
}

func (dc DiagnosticsConfigAttributes) QueueEndpoint() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("queue_endpoint"))
}

func (dc DiagnosticsConfigAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("storage_account_name"))
}

func (dc DiagnosticsConfigAttributes) TableEndpoint() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("table_endpoint"))
}

type FabricSettingsAttributes struct {
	ref terra.Reference
}

func (fs FabricSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FabricSettingsAttributes) InternalWithRef(ref terra.Reference) FabricSettingsAttributes {
	return FabricSettingsAttributes{ref: ref}
}

func (fs FabricSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FabricSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("name"))
}

func (fs FabricSettingsAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fs.ref.Append("parameters"))
}

type NodeTypeAttributes struct {
	ref terra.Reference
}

func (nt NodeTypeAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt NodeTypeAttributes) InternalWithRef(ref terra.Reference) NodeTypeAttributes {
	return NodeTypeAttributes{ref: ref}
}

func (nt NodeTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt NodeTypeAttributes) Capacities() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nt.ref.Append("capacities"))
}

func (nt NodeTypeAttributes) ClientEndpointPort() terra.NumberValue {
	return terra.ReferenceAsNumber(nt.ref.Append("client_endpoint_port"))
}

func (nt NodeTypeAttributes) DurabilityLevel() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("durability_level"))
}

func (nt NodeTypeAttributes) HttpEndpointPort() terra.NumberValue {
	return terra.ReferenceAsNumber(nt.ref.Append("http_endpoint_port"))
}

func (nt NodeTypeAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(nt.ref.Append("instance_count"))
}

func (nt NodeTypeAttributes) IsPrimary() terra.BoolValue {
	return terra.ReferenceAsBool(nt.ref.Append("is_primary"))
}

func (nt NodeTypeAttributes) IsStateless() terra.BoolValue {
	return terra.ReferenceAsBool(nt.ref.Append("is_stateless"))
}

func (nt NodeTypeAttributes) MultipleAvailabilityZones() terra.BoolValue {
	return terra.ReferenceAsBool(nt.ref.Append("multiple_availability_zones"))
}

func (nt NodeTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("name"))
}

func (nt NodeTypeAttributes) PlacementProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nt.ref.Append("placement_properties"))
}

func (nt NodeTypeAttributes) ReverseProxyEndpointPort() terra.NumberValue {
	return terra.ReferenceAsNumber(nt.ref.Append("reverse_proxy_endpoint_port"))
}

func (nt NodeTypeAttributes) ApplicationPorts() terra.ListValue[ApplicationPortsAttributes] {
	return terra.ReferenceAsList[ApplicationPortsAttributes](nt.ref.Append("application_ports"))
}

func (nt NodeTypeAttributes) EphemeralPorts() terra.ListValue[EphemeralPortsAttributes] {
	return terra.ReferenceAsList[EphemeralPortsAttributes](nt.ref.Append("ephemeral_ports"))
}

type ApplicationPortsAttributes struct {
	ref terra.Reference
}

func (ap ApplicationPortsAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap ApplicationPortsAttributes) InternalWithRef(ref terra.Reference) ApplicationPortsAttributes {
	return ApplicationPortsAttributes{ref: ref}
}

func (ap ApplicationPortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap ApplicationPortsAttributes) EndPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("end_port"))
}

func (ap ApplicationPortsAttributes) StartPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("start_port"))
}

type EphemeralPortsAttributes struct {
	ref terra.Reference
}

func (ep EphemeralPortsAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EphemeralPortsAttributes) InternalWithRef(ref terra.Reference) EphemeralPortsAttributes {
	return EphemeralPortsAttributes{ref: ref}
}

func (ep EphemeralPortsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EphemeralPortsAttributes) EndPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("end_port"))
}

func (ep EphemeralPortsAttributes) StartPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("start_port"))
}

type ReverseProxyCertificateAttributes struct {
	ref terra.Reference
}

func (rpc ReverseProxyCertificateAttributes) InternalRef() (terra.Reference, error) {
	return rpc.ref, nil
}

func (rpc ReverseProxyCertificateAttributes) InternalWithRef(ref terra.Reference) ReverseProxyCertificateAttributes {
	return ReverseProxyCertificateAttributes{ref: ref}
}

func (rpc ReverseProxyCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rpc.ref.InternalTokens()
}

func (rpc ReverseProxyCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(rpc.ref.Append("thumbprint"))
}

func (rpc ReverseProxyCertificateAttributes) ThumbprintSecondary() terra.StringValue {
	return terra.ReferenceAsString(rpc.ref.Append("thumbprint_secondary"))
}

func (rpc ReverseProxyCertificateAttributes) X509StoreName() terra.StringValue {
	return terra.ReferenceAsString(rpc.ref.Append("x509_store_name"))
}

type ReverseProxyCertificateCommonNamesAttributes struct {
	ref terra.Reference
}

func (rpccn ReverseProxyCertificateCommonNamesAttributes) InternalRef() (terra.Reference, error) {
	return rpccn.ref, nil
}

func (rpccn ReverseProxyCertificateCommonNamesAttributes) InternalWithRef(ref terra.Reference) ReverseProxyCertificateCommonNamesAttributes {
	return ReverseProxyCertificateCommonNamesAttributes{ref: ref}
}

func (rpccn ReverseProxyCertificateCommonNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rpccn.ref.InternalTokens()
}

func (rpccn ReverseProxyCertificateCommonNamesAttributes) X509StoreName() terra.StringValue {
	return terra.ReferenceAsString(rpccn.ref.Append("x509_store_name"))
}

func (rpccn ReverseProxyCertificateCommonNamesAttributes) CommonNames() terra.SetValue[ReverseProxyCertificateCommonNamesCommonNamesAttributes] {
	return terra.ReferenceAsSet[ReverseProxyCertificateCommonNamesCommonNamesAttributes](rpccn.ref.Append("common_names"))
}

type ReverseProxyCertificateCommonNamesCommonNamesAttributes struct {
	ref terra.Reference
}

func (cn ReverseProxyCertificateCommonNamesCommonNamesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn ReverseProxyCertificateCommonNamesCommonNamesAttributes) InternalWithRef(ref terra.Reference) ReverseProxyCertificateCommonNamesCommonNamesAttributes {
	return ReverseProxyCertificateCommonNamesCommonNamesAttributes{ref: ref}
}

func (cn ReverseProxyCertificateCommonNamesCommonNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn ReverseProxyCertificateCommonNamesCommonNamesAttributes) CertificateCommonName() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("certificate_common_name"))
}

func (cn ReverseProxyCertificateCommonNamesCommonNamesAttributes) CertificateIssuerThumbprint() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("certificate_issuer_thumbprint"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UpgradePolicyAttributes struct {
	ref terra.Reference
}

func (up UpgradePolicyAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UpgradePolicyAttributes) InternalWithRef(ref terra.Reference) UpgradePolicyAttributes {
	return UpgradePolicyAttributes{ref: ref}
}

func (up UpgradePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

func (up UpgradePolicyAttributes) ForceRestartEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(up.ref.Append("force_restart_enabled"))
}

func (up UpgradePolicyAttributes) HealthCheckRetryTimeout() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("health_check_retry_timeout"))
}

func (up UpgradePolicyAttributes) HealthCheckStableDuration() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("health_check_stable_duration"))
}

func (up UpgradePolicyAttributes) HealthCheckWaitDuration() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("health_check_wait_duration"))
}

func (up UpgradePolicyAttributes) UpgradeDomainTimeout() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("upgrade_domain_timeout"))
}

func (up UpgradePolicyAttributes) UpgradeReplicaSetCheckTimeout() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("upgrade_replica_set_check_timeout"))
}

func (up UpgradePolicyAttributes) UpgradeTimeout() terra.StringValue {
	return terra.ReferenceAsString(up.ref.Append("upgrade_timeout"))
}

func (up UpgradePolicyAttributes) DeltaHealthPolicy() terra.ListValue[DeltaHealthPolicyAttributes] {
	return terra.ReferenceAsList[DeltaHealthPolicyAttributes](up.ref.Append("delta_health_policy"))
}

func (up UpgradePolicyAttributes) HealthPolicy() terra.ListValue[HealthPolicyAttributes] {
	return terra.ReferenceAsList[HealthPolicyAttributes](up.ref.Append("health_policy"))
}

type DeltaHealthPolicyAttributes struct {
	ref terra.Reference
}

func (dhp DeltaHealthPolicyAttributes) InternalRef() (terra.Reference, error) {
	return dhp.ref, nil
}

func (dhp DeltaHealthPolicyAttributes) InternalWithRef(ref terra.Reference) DeltaHealthPolicyAttributes {
	return DeltaHealthPolicyAttributes{ref: ref}
}

func (dhp DeltaHealthPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dhp.ref.InternalTokens()
}

func (dhp DeltaHealthPolicyAttributes) MaxDeltaUnhealthyApplicationsPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dhp.ref.Append("max_delta_unhealthy_applications_percent"))
}

func (dhp DeltaHealthPolicyAttributes) MaxDeltaUnhealthyNodesPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dhp.ref.Append("max_delta_unhealthy_nodes_percent"))
}

func (dhp DeltaHealthPolicyAttributes) MaxUpgradeDomainDeltaUnhealthyNodesPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(dhp.ref.Append("max_upgrade_domain_delta_unhealthy_nodes_percent"))
}

type HealthPolicyAttributes struct {
	ref terra.Reference
}

func (hp HealthPolicyAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp HealthPolicyAttributes) InternalWithRef(ref terra.Reference) HealthPolicyAttributes {
	return HealthPolicyAttributes{ref: ref}
}

func (hp HealthPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp HealthPolicyAttributes) MaxUnhealthyApplicationsPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(hp.ref.Append("max_unhealthy_applications_percent"))
}

func (hp HealthPolicyAttributes) MaxUnhealthyNodesPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(hp.ref.Append("max_unhealthy_nodes_percent"))
}

type AzureActiveDirectoryState struct {
	ClientApplicationId  string `json:"client_application_id"`
	ClusterApplicationId string `json:"cluster_application_id"`
	TenantId             string `json:"tenant_id"`
}

type CertificateState struct {
	Thumbprint          string `json:"thumbprint"`
	ThumbprintSecondary string `json:"thumbprint_secondary"`
	X509StoreName       string `json:"x509_store_name"`
}

type CertificateCommonNamesState struct {
	X509StoreName string                                   `json:"x509_store_name"`
	CommonNames   []CertificateCommonNamesCommonNamesState `json:"common_names"`
}

type CertificateCommonNamesCommonNamesState struct {
	CertificateCommonName       string `json:"certificate_common_name"`
	CertificateIssuerThumbprint string `json:"certificate_issuer_thumbprint"`
}

type ClientCertificateCommonNameState struct {
	CommonName       string `json:"common_name"`
	IsAdmin          bool   `json:"is_admin"`
	IssuerThumbprint string `json:"issuer_thumbprint"`
}

type ClientCertificateThumbprintState struct {
	IsAdmin    bool   `json:"is_admin"`
	Thumbprint string `json:"thumbprint"`
}

type DiagnosticsConfigState struct {
	BlobEndpoint            string `json:"blob_endpoint"`
	ProtectedAccountKeyName string `json:"protected_account_key_name"`
	QueueEndpoint           string `json:"queue_endpoint"`
	StorageAccountName      string `json:"storage_account_name"`
	TableEndpoint           string `json:"table_endpoint"`
}

type FabricSettingsState struct {
	Name       string            `json:"name"`
	Parameters map[string]string `json:"parameters"`
}

type NodeTypeState struct {
	Capacities                map[string]string       `json:"capacities"`
	ClientEndpointPort        float64                 `json:"client_endpoint_port"`
	DurabilityLevel           string                  `json:"durability_level"`
	HttpEndpointPort          float64                 `json:"http_endpoint_port"`
	InstanceCount             float64                 `json:"instance_count"`
	IsPrimary                 bool                    `json:"is_primary"`
	IsStateless               bool                    `json:"is_stateless"`
	MultipleAvailabilityZones bool                    `json:"multiple_availability_zones"`
	Name                      string                  `json:"name"`
	PlacementProperties       map[string]string       `json:"placement_properties"`
	ReverseProxyEndpointPort  float64                 `json:"reverse_proxy_endpoint_port"`
	ApplicationPorts          []ApplicationPortsState `json:"application_ports"`
	EphemeralPorts            []EphemeralPortsState   `json:"ephemeral_ports"`
}

type ApplicationPortsState struct {
	EndPort   float64 `json:"end_port"`
	StartPort float64 `json:"start_port"`
}

type EphemeralPortsState struct {
	EndPort   float64 `json:"end_port"`
	StartPort float64 `json:"start_port"`
}

type ReverseProxyCertificateState struct {
	Thumbprint          string `json:"thumbprint"`
	ThumbprintSecondary string `json:"thumbprint_secondary"`
	X509StoreName       string `json:"x509_store_name"`
}

type ReverseProxyCertificateCommonNamesState struct {
	X509StoreName string                                               `json:"x509_store_name"`
	CommonNames   []ReverseProxyCertificateCommonNamesCommonNamesState `json:"common_names"`
}

type ReverseProxyCertificateCommonNamesCommonNamesState struct {
	CertificateCommonName       string `json:"certificate_common_name"`
	CertificateIssuerThumbprint string `json:"certificate_issuer_thumbprint"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UpgradePolicyState struct {
	ForceRestartEnabled           bool                     `json:"force_restart_enabled"`
	HealthCheckRetryTimeout       string                   `json:"health_check_retry_timeout"`
	HealthCheckStableDuration     string                   `json:"health_check_stable_duration"`
	HealthCheckWaitDuration       string                   `json:"health_check_wait_duration"`
	UpgradeDomainTimeout          string                   `json:"upgrade_domain_timeout"`
	UpgradeReplicaSetCheckTimeout string                   `json:"upgrade_replica_set_check_timeout"`
	UpgradeTimeout                string                   `json:"upgrade_timeout"`
	DeltaHealthPolicy             []DeltaHealthPolicyState `json:"delta_health_policy"`
	HealthPolicy                  []HealthPolicyState      `json:"health_policy"`
}

type DeltaHealthPolicyState struct {
	MaxDeltaUnhealthyApplicationsPercent       float64 `json:"max_delta_unhealthy_applications_percent"`
	MaxDeltaUnhealthyNodesPercent              float64 `json:"max_delta_unhealthy_nodes_percent"`
	MaxUpgradeDomainDeltaUnhealthyNodesPercent float64 `json:"max_upgrade_domain_delta_unhealthy_nodes_percent"`
}

type HealthPolicyState struct {
	MaxUnhealthyApplicationsPercent float64 `json:"max_unhealthy_applications_percent"`
	MaxUnhealthyNodesPercent        float64 `json:"max_unhealthy_nodes_percent"`
}
