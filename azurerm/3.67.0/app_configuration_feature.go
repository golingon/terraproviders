// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	appconfigurationfeature "github.com/golingon/terraproviders/azurerm/3.67.0/appconfigurationfeature"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAppConfigurationFeature creates a new instance of [AppConfigurationFeature].
func NewAppConfigurationFeature(name string, args AppConfigurationFeatureArgs) *AppConfigurationFeature {
	return &AppConfigurationFeature{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppConfigurationFeature)(nil)

// AppConfigurationFeature represents the Terraform resource azurerm_app_configuration_feature.
type AppConfigurationFeature struct {
	Name      string
	Args      AppConfigurationFeatureArgs
	state     *appConfigurationFeatureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AppConfigurationFeature].
func (acf *AppConfigurationFeature) Type() string {
	return "azurerm_app_configuration_feature"
}

// LocalName returns the local name for [AppConfigurationFeature].
func (acf *AppConfigurationFeature) LocalName() string {
	return acf.Name
}

// Configuration returns the configuration (args) for [AppConfigurationFeature].
func (acf *AppConfigurationFeature) Configuration() interface{} {
	return acf.Args
}

// DependOn is used for other resources to depend on [AppConfigurationFeature].
func (acf *AppConfigurationFeature) DependOn() terra.Reference {
	return terra.ReferenceResource(acf)
}

// Dependencies returns the list of resources [AppConfigurationFeature] depends_on.
func (acf *AppConfigurationFeature) Dependencies() terra.Dependencies {
	return acf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AppConfigurationFeature].
func (acf *AppConfigurationFeature) LifecycleManagement() *terra.Lifecycle {
	return acf.Lifecycle
}

// Attributes returns the attributes for [AppConfigurationFeature].
func (acf *AppConfigurationFeature) Attributes() appConfigurationFeatureAttributes {
	return appConfigurationFeatureAttributes{ref: terra.ReferenceResource(acf)}
}

// ImportState imports the given attribute values into [AppConfigurationFeature]'s state.
func (acf *AppConfigurationFeature) ImportState(av io.Reader) error {
	acf.state = &appConfigurationFeatureState{}
	if err := json.NewDecoder(av).Decode(acf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acf.Type(), acf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AppConfigurationFeature] has state.
func (acf *AppConfigurationFeature) State() (*appConfigurationFeatureState, bool) {
	return acf.state, acf.state != nil
}

// StateMust returns the state for [AppConfigurationFeature]. Panics if the state is nil.
func (acf *AppConfigurationFeature) StateMust() *appConfigurationFeatureState {
	if acf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acf.Type(), acf.LocalName()))
	}
	return acf.state
}

// AppConfigurationFeatureArgs contains the configurations for azurerm_app_configuration_feature.
type AppConfigurationFeatureArgs struct {
	// ConfigurationStoreId: string, required
	ConfigurationStoreId terra.StringValue `hcl:"configuration_store_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Locked: bool, optional
	Locked terra.BoolValue `hcl:"locked,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PercentageFilterValue: number, optional
	PercentageFilterValue terra.NumberValue `hcl:"percentage_filter_value,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetingFilter: min=0
	TargetingFilter []appconfigurationfeature.TargetingFilter `hcl:"targeting_filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *appconfigurationfeature.Timeouts `hcl:"timeouts,block"`
	// TimewindowFilter: min=0
	TimewindowFilter []appconfigurationfeature.TimewindowFilter `hcl:"timewindow_filter,block" validate:"min=0"`
}
type appConfigurationFeatureAttributes struct {
	ref terra.Reference
}

// ConfigurationStoreId returns a reference to field configuration_store_id of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) ConfigurationStoreId() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("configuration_store_id"))
}

// Description returns a reference to field description of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("description"))
}

// Enabled returns a reference to field enabled of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(acf.ref.Append("enabled"))
}

// Etag returns a reference to field etag of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("etag"))
}

// Id returns a reference to field id of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("id"))
}

// Key returns a reference to field key of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("key"))
}

// Label returns a reference to field label of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("label"))
}

// Locked returns a reference to field locked of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Locked() terra.BoolValue {
	return terra.ReferenceAsBool(acf.ref.Append("locked"))
}

// Name returns a reference to field name of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("name"))
}

// PercentageFilterValue returns a reference to field percentage_filter_value of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) PercentageFilterValue() terra.NumberValue {
	return terra.ReferenceAsNumber(acf.ref.Append("percentage_filter_value"))
}

// Tags returns a reference to field tags of azurerm_app_configuration_feature.
func (acf appConfigurationFeatureAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acf.ref.Append("tags"))
}

func (acf appConfigurationFeatureAttributes) TargetingFilter() terra.ListValue[appconfigurationfeature.TargetingFilterAttributes] {
	return terra.ReferenceAsList[appconfigurationfeature.TargetingFilterAttributes](acf.ref.Append("targeting_filter"))
}

func (acf appConfigurationFeatureAttributes) Timeouts() appconfigurationfeature.TimeoutsAttributes {
	return terra.ReferenceAsSingle[appconfigurationfeature.TimeoutsAttributes](acf.ref.Append("timeouts"))
}

func (acf appConfigurationFeatureAttributes) TimewindowFilter() terra.ListValue[appconfigurationfeature.TimewindowFilterAttributes] {
	return terra.ReferenceAsList[appconfigurationfeature.TimewindowFilterAttributes](acf.ref.Append("timewindow_filter"))
}

type appConfigurationFeatureState struct {
	ConfigurationStoreId  string                                          `json:"configuration_store_id"`
	Description           string                                          `json:"description"`
	Enabled               bool                                            `json:"enabled"`
	Etag                  string                                          `json:"etag"`
	Id                    string                                          `json:"id"`
	Key                   string                                          `json:"key"`
	Label                 string                                          `json:"label"`
	Locked                bool                                            `json:"locked"`
	Name                  string                                          `json:"name"`
	PercentageFilterValue float64                                         `json:"percentage_filter_value"`
	Tags                  map[string]string                               `json:"tags"`
	TargetingFilter       []appconfigurationfeature.TargetingFilterState  `json:"targeting_filter"`
	Timeouts              *appconfigurationfeature.TimeoutsState          `json:"timeouts"`
	TimewindowFilter      []appconfigurationfeature.TimewindowFilterState `json:"timewindow_filter"`
}
