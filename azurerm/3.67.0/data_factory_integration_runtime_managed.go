// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactoryintegrationruntimemanaged "github.com/golingon/terraproviders/azurerm/3.67.0/datafactoryintegrationruntimemanaged"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactoryIntegrationRuntimeManaged creates a new instance of [DataFactoryIntegrationRuntimeManaged].
func NewDataFactoryIntegrationRuntimeManaged(name string, args DataFactoryIntegrationRuntimeManagedArgs) *DataFactoryIntegrationRuntimeManaged {
	return &DataFactoryIntegrationRuntimeManaged{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryIntegrationRuntimeManaged)(nil)

// DataFactoryIntegrationRuntimeManaged represents the Terraform resource azurerm_data_factory_integration_runtime_managed.
type DataFactoryIntegrationRuntimeManaged struct {
	Name      string
	Args      DataFactoryIntegrationRuntimeManagedArgs
	state     *dataFactoryIntegrationRuntimeManagedState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) Type() string {
	return "azurerm_data_factory_integration_runtime_managed"
}

// LocalName returns the local name for [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) LocalName() string {
	return dfirm.Name
}

// Configuration returns the configuration (args) for [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) Configuration() interface{} {
	return dfirm.Args
}

// DependOn is used for other resources to depend on [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) DependOn() terra.Reference {
	return terra.ReferenceResource(dfirm)
}

// Dependencies returns the list of resources [DataFactoryIntegrationRuntimeManaged] depends_on.
func (dfirm *DataFactoryIntegrationRuntimeManaged) Dependencies() terra.Dependencies {
	return dfirm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) LifecycleManagement() *terra.Lifecycle {
	return dfirm.Lifecycle
}

// Attributes returns the attributes for [DataFactoryIntegrationRuntimeManaged].
func (dfirm *DataFactoryIntegrationRuntimeManaged) Attributes() dataFactoryIntegrationRuntimeManagedAttributes {
	return dataFactoryIntegrationRuntimeManagedAttributes{ref: terra.ReferenceResource(dfirm)}
}

// ImportState imports the given attribute values into [DataFactoryIntegrationRuntimeManaged]'s state.
func (dfirm *DataFactoryIntegrationRuntimeManaged) ImportState(av io.Reader) error {
	dfirm.state = &dataFactoryIntegrationRuntimeManagedState{}
	if err := json.NewDecoder(av).Decode(dfirm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfirm.Type(), dfirm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactoryIntegrationRuntimeManaged] has state.
func (dfirm *DataFactoryIntegrationRuntimeManaged) State() (*dataFactoryIntegrationRuntimeManagedState, bool) {
	return dfirm.state, dfirm.state != nil
}

// StateMust returns the state for [DataFactoryIntegrationRuntimeManaged]. Panics if the state is nil.
func (dfirm *DataFactoryIntegrationRuntimeManaged) StateMust() *dataFactoryIntegrationRuntimeManagedState {
	if dfirm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfirm.Type(), dfirm.LocalName()))
	}
	return dfirm.state
}

// DataFactoryIntegrationRuntimeManagedArgs contains the configurations for azurerm_data_factory_integration_runtime_managed.
type DataFactoryIntegrationRuntimeManagedArgs struct {
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxParallelExecutionsPerNode: number, optional
	MaxParallelExecutionsPerNode terra.NumberValue `hcl:"max_parallel_executions_per_node,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeSize: string, required
	NodeSize terra.StringValue `hcl:"node_size,attr" validate:"required"`
	// NumberOfNodes: number, optional
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
	// CatalogInfo: optional
	CatalogInfo *datafactoryintegrationruntimemanaged.CatalogInfo `hcl:"catalog_info,block"`
	// CustomSetupScript: optional
	CustomSetupScript *datafactoryintegrationruntimemanaged.CustomSetupScript `hcl:"custom_setup_script,block"`
	// Timeouts: optional
	Timeouts *datafactoryintegrationruntimemanaged.Timeouts `hcl:"timeouts,block"`
	// VnetIntegration: optional
	VnetIntegration *datafactoryintegrationruntimemanaged.VnetIntegration `hcl:"vnet_integration,block"`
}
type dataFactoryIntegrationRuntimeManagedAttributes struct {
	ref terra.Reference
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("description"))
}

// Edition returns a reference to field edition of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("edition"))
}

// Id returns a reference to field id of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("location"))
}

// MaxParallelExecutionsPerNode returns a reference to field max_parallel_executions_per_node of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) MaxParallelExecutionsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(dfirm.ref.Append("max_parallel_executions_per_node"))
}

// Name returns a reference to field name of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("name"))
}

// NodeSize returns a reference to field node_size of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) NodeSize() terra.StringValue {
	return terra.ReferenceAsString(dfirm.ref.Append("node_size"))
}

// NumberOfNodes returns a reference to field number_of_nodes of azurerm_data_factory_integration_runtime_managed.
func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(dfirm.ref.Append("number_of_nodes"))
}

func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) CatalogInfo() terra.ListValue[datafactoryintegrationruntimemanaged.CatalogInfoAttributes] {
	return terra.ReferenceAsList[datafactoryintegrationruntimemanaged.CatalogInfoAttributes](dfirm.ref.Append("catalog_info"))
}

func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) CustomSetupScript() terra.ListValue[datafactoryintegrationruntimemanaged.CustomSetupScriptAttributes] {
	return terra.ReferenceAsList[datafactoryintegrationruntimemanaged.CustomSetupScriptAttributes](dfirm.ref.Append("custom_setup_script"))
}

func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) Timeouts() datafactoryintegrationruntimemanaged.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactoryintegrationruntimemanaged.TimeoutsAttributes](dfirm.ref.Append("timeouts"))
}

func (dfirm dataFactoryIntegrationRuntimeManagedAttributes) VnetIntegration() terra.ListValue[datafactoryintegrationruntimemanaged.VnetIntegrationAttributes] {
	return terra.ReferenceAsList[datafactoryintegrationruntimemanaged.VnetIntegrationAttributes](dfirm.ref.Append("vnet_integration"))
}

type dataFactoryIntegrationRuntimeManagedState struct {
	DataFactoryId                string                                                        `json:"data_factory_id"`
	Description                  string                                                        `json:"description"`
	Edition                      string                                                        `json:"edition"`
	Id                           string                                                        `json:"id"`
	LicenseType                  string                                                        `json:"license_type"`
	Location                     string                                                        `json:"location"`
	MaxParallelExecutionsPerNode float64                                                       `json:"max_parallel_executions_per_node"`
	Name                         string                                                        `json:"name"`
	NodeSize                     string                                                        `json:"node_size"`
	NumberOfNodes                float64                                                       `json:"number_of_nodes"`
	CatalogInfo                  []datafactoryintegrationruntimemanaged.CatalogInfoState       `json:"catalog_info"`
	CustomSetupScript            []datafactoryintegrationruntimemanaged.CustomSetupScriptState `json:"custom_setup_script"`
	Timeouts                     *datafactoryintegrationruntimemanaged.TimeoutsState           `json:"timeouts"`
	VnetIntegration              []datafactoryintegrationruntimemanaged.VnetIntegrationState   `json:"vnet_integration"`
}
