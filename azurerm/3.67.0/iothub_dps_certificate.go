// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	iothubdpscertificate "github.com/golingon/terraproviders/azurerm/3.67.0/iothubdpscertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIothubDpsCertificate creates a new instance of [IothubDpsCertificate].
func NewIothubDpsCertificate(name string, args IothubDpsCertificateArgs) *IothubDpsCertificate {
	return &IothubDpsCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IothubDpsCertificate)(nil)

// IothubDpsCertificate represents the Terraform resource azurerm_iothub_dps_certificate.
type IothubDpsCertificate struct {
	Name      string
	Args      IothubDpsCertificateArgs
	state     *iothubDpsCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IothubDpsCertificate].
func (idc *IothubDpsCertificate) Type() string {
	return "azurerm_iothub_dps_certificate"
}

// LocalName returns the local name for [IothubDpsCertificate].
func (idc *IothubDpsCertificate) LocalName() string {
	return idc.Name
}

// Configuration returns the configuration (args) for [IothubDpsCertificate].
func (idc *IothubDpsCertificate) Configuration() interface{} {
	return idc.Args
}

// DependOn is used for other resources to depend on [IothubDpsCertificate].
func (idc *IothubDpsCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(idc)
}

// Dependencies returns the list of resources [IothubDpsCertificate] depends_on.
func (idc *IothubDpsCertificate) Dependencies() terra.Dependencies {
	return idc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IothubDpsCertificate].
func (idc *IothubDpsCertificate) LifecycleManagement() *terra.Lifecycle {
	return idc.Lifecycle
}

// Attributes returns the attributes for [IothubDpsCertificate].
func (idc *IothubDpsCertificate) Attributes() iothubDpsCertificateAttributes {
	return iothubDpsCertificateAttributes{ref: terra.ReferenceResource(idc)}
}

// ImportState imports the given attribute values into [IothubDpsCertificate]'s state.
func (idc *IothubDpsCertificate) ImportState(av io.Reader) error {
	idc.state = &iothubDpsCertificateState{}
	if err := json.NewDecoder(av).Decode(idc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", idc.Type(), idc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IothubDpsCertificate] has state.
func (idc *IothubDpsCertificate) State() (*iothubDpsCertificateState, bool) {
	return idc.state, idc.state != nil
}

// StateMust returns the state for [IothubDpsCertificate]. Panics if the state is nil.
func (idc *IothubDpsCertificate) StateMust() *iothubDpsCertificateState {
	if idc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", idc.Type(), idc.LocalName()))
	}
	return idc.state
}

// IothubDpsCertificateArgs contains the configurations for azurerm_iothub_dps_certificate.
type IothubDpsCertificateArgs struct {
	// CertificateContent: string, required
	CertificateContent terra.StringValue `hcl:"certificate_content,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IotDpsName: string, required
	IotDpsName terra.StringValue `hcl:"iot_dps_name,attr" validate:"required"`
	// IsVerified: bool, optional
	IsVerified terra.BoolValue `hcl:"is_verified,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *iothubdpscertificate.Timeouts `hcl:"timeouts,block"`
}
type iothubDpsCertificateAttributes struct {
	ref terra.Reference
}

// CertificateContent returns a reference to field certificate_content of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) CertificateContent() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("certificate_content"))
}

// Id returns a reference to field id of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("id"))
}

// IotDpsName returns a reference to field iot_dps_name of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) IotDpsName() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("iot_dps_name"))
}

// IsVerified returns a reference to field is_verified of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) IsVerified() terra.BoolValue {
	return terra.ReferenceAsBool(idc.ref.Append("is_verified"))
}

// Name returns a reference to field name of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_iothub_dps_certificate.
func (idc iothubDpsCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("resource_group_name"))
}

func (idc iothubDpsCertificateAttributes) Timeouts() iothubdpscertificate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[iothubdpscertificate.TimeoutsAttributes](idc.ref.Append("timeouts"))
}

type iothubDpsCertificateState struct {
	CertificateContent string                              `json:"certificate_content"`
	Id                 string                              `json:"id"`
	IotDpsName         string                              `json:"iot_dps_name"`
	IsVerified         bool                                `json:"is_verified"`
	Name               string                              `json:"name"`
	ResourceGroupName  string                              `json:"resource_group_name"`
	Timeouts           *iothubdpscertificate.TimeoutsState `json:"timeouts"`
}
