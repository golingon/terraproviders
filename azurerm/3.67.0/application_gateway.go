// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	applicationgateway "github.com/golingon/terraproviders/azurerm/3.67.0/applicationgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApplicationGateway creates a new instance of [ApplicationGateway].
func NewApplicationGateway(name string, args ApplicationGatewayArgs) *ApplicationGateway {
	return &ApplicationGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationGateway)(nil)

// ApplicationGateway represents the Terraform resource azurerm_application_gateway.
type ApplicationGateway struct {
	Name      string
	Args      ApplicationGatewayArgs
	state     *applicationGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationGateway].
func (ag *ApplicationGateway) Type() string {
	return "azurerm_application_gateway"
}

// LocalName returns the local name for [ApplicationGateway].
func (ag *ApplicationGateway) LocalName() string {
	return ag.Name
}

// Configuration returns the configuration (args) for [ApplicationGateway].
func (ag *ApplicationGateway) Configuration() interface{} {
	return ag.Args
}

// DependOn is used for other resources to depend on [ApplicationGateway].
func (ag *ApplicationGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(ag)
}

// Dependencies returns the list of resources [ApplicationGateway] depends_on.
func (ag *ApplicationGateway) Dependencies() terra.Dependencies {
	return ag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationGateway].
func (ag *ApplicationGateway) LifecycleManagement() *terra.Lifecycle {
	return ag.Lifecycle
}

// Attributes returns the attributes for [ApplicationGateway].
func (ag *ApplicationGateway) Attributes() applicationGatewayAttributes {
	return applicationGatewayAttributes{ref: terra.ReferenceResource(ag)}
}

// ImportState imports the given attribute values into [ApplicationGateway]'s state.
func (ag *ApplicationGateway) ImportState(av io.Reader) error {
	ag.state = &applicationGatewayState{}
	if err := json.NewDecoder(av).Decode(ag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ag.Type(), ag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationGateway] has state.
func (ag *ApplicationGateway) State() (*applicationGatewayState, bool) {
	return ag.state, ag.state != nil
}

// StateMust returns the state for [ApplicationGateway]. Panics if the state is nil.
func (ag *ApplicationGateway) StateMust() *applicationGatewayState {
	if ag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ag.Type(), ag.LocalName()))
	}
	return ag.state
}

// ApplicationGatewayArgs contains the configurations for azurerm_application_gateway.
type ApplicationGatewayArgs struct {
	// EnableHttp2: bool, optional
	EnableHttp2 terra.BoolValue `hcl:"enable_http2,attr"`
	// FipsEnabled: bool, optional
	FipsEnabled terra.BoolValue `hcl:"fips_enabled,attr"`
	// FirewallPolicyId: string, optional
	FirewallPolicyId terra.StringValue `hcl:"firewall_policy_id,attr"`
	// ForceFirewallPolicyAssociation: bool, optional
	ForceFirewallPolicyAssociation terra.BoolValue `hcl:"force_firewall_policy_association,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// PrivateEndpointConnection: min=0
	PrivateEndpointConnection []applicationgateway.PrivateEndpointConnection `hcl:"private_endpoint_connection,block" validate:"min=0"`
	// AuthenticationCertificate: min=0
	AuthenticationCertificate []applicationgateway.AuthenticationCertificate `hcl:"authentication_certificate,block" validate:"min=0"`
	// AutoscaleConfiguration: optional
	AutoscaleConfiguration *applicationgateway.AutoscaleConfiguration `hcl:"autoscale_configuration,block"`
	// BackendAddressPool: min=1
	BackendAddressPool []applicationgateway.BackendAddressPool `hcl:"backend_address_pool,block" validate:"min=1"`
	// BackendHttpSettings: min=1
	BackendHttpSettings []applicationgateway.BackendHttpSettings `hcl:"backend_http_settings,block" validate:"min=1"`
	// CustomErrorConfiguration: min=0
	CustomErrorConfiguration []applicationgateway.CustomErrorConfiguration `hcl:"custom_error_configuration,block" validate:"min=0"`
	// FrontendIpConfiguration: min=1
	FrontendIpConfiguration []applicationgateway.FrontendIpConfiguration `hcl:"frontend_ip_configuration,block" validate:"min=1"`
	// FrontendPort: min=1
	FrontendPort []applicationgateway.FrontendPort `hcl:"frontend_port,block" validate:"min=1"`
	// GatewayIpConfiguration: min=1,max=2
	GatewayIpConfiguration []applicationgateway.GatewayIpConfiguration `hcl:"gateway_ip_configuration,block" validate:"min=1,max=2"`
	// Global: optional
	Global *applicationgateway.Global `hcl:"global,block"`
	// HttpListener: min=1
	HttpListener []applicationgateway.HttpListener `hcl:"http_listener,block" validate:"min=1"`
	// Identity: optional
	Identity *applicationgateway.Identity `hcl:"identity,block"`
	// PrivateLinkConfiguration: min=0
	PrivateLinkConfiguration []applicationgateway.PrivateLinkConfiguration `hcl:"private_link_configuration,block" validate:"min=0"`
	// Probe: min=0
	Probe []applicationgateway.Probe `hcl:"probe,block" validate:"min=0"`
	// RedirectConfiguration: min=0
	RedirectConfiguration []applicationgateway.RedirectConfiguration `hcl:"redirect_configuration,block" validate:"min=0"`
	// RequestRoutingRule: min=1
	RequestRoutingRule []applicationgateway.RequestRoutingRule `hcl:"request_routing_rule,block" validate:"min=1"`
	// RewriteRuleSet: min=0
	RewriteRuleSet []applicationgateway.RewriteRuleSet `hcl:"rewrite_rule_set,block" validate:"min=0"`
	// Sku: required
	Sku *applicationgateway.Sku `hcl:"sku,block" validate:"required"`
	// SslCertificate: min=0
	SslCertificate []applicationgateway.SslCertificate `hcl:"ssl_certificate,block" validate:"min=0"`
	// SslPolicy: optional
	SslPolicy *applicationgateway.SslPolicy `hcl:"ssl_policy,block"`
	// SslProfile: min=0
	SslProfile []applicationgateway.SslProfile `hcl:"ssl_profile,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *applicationgateway.Timeouts `hcl:"timeouts,block"`
	// TrustedClientCertificate: min=0
	TrustedClientCertificate []applicationgateway.TrustedClientCertificate `hcl:"trusted_client_certificate,block" validate:"min=0"`
	// TrustedRootCertificate: min=0
	TrustedRootCertificate []applicationgateway.TrustedRootCertificate `hcl:"trusted_root_certificate,block" validate:"min=0"`
	// UrlPathMap: min=0
	UrlPathMap []applicationgateway.UrlPathMap `hcl:"url_path_map,block" validate:"min=0"`
	// WafConfiguration: optional
	WafConfiguration *applicationgateway.WafConfiguration `hcl:"waf_configuration,block"`
}
type applicationGatewayAttributes struct {
	ref terra.Reference
}

// EnableHttp2 returns a reference to field enable_http2 of azurerm_application_gateway.
func (ag applicationGatewayAttributes) EnableHttp2() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("enable_http2"))
}

// FipsEnabled returns a reference to field fips_enabled of azurerm_application_gateway.
func (ag applicationGatewayAttributes) FipsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("fips_enabled"))
}

// FirewallPolicyId returns a reference to field firewall_policy_id of azurerm_application_gateway.
func (ag applicationGatewayAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("firewall_policy_id"))
}

// ForceFirewallPolicyAssociation returns a reference to field force_firewall_policy_association of azurerm_application_gateway.
func (ag applicationGatewayAttributes) ForceFirewallPolicyAssociation() terra.BoolValue {
	return terra.ReferenceAsBool(ag.ref.Append("force_firewall_policy_association"))
}

// Id returns a reference to field id of azurerm_application_gateway.
func (ag applicationGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_application_gateway.
func (ag applicationGatewayAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_application_gateway.
func (ag applicationGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_application_gateway.
func (ag applicationGatewayAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ag.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_application_gateway.
func (ag applicationGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ag.ref.Append("tags"))
}

// Zones returns a reference to field zones of azurerm_application_gateway.
func (ag applicationGatewayAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ag.ref.Append("zones"))
}

func (ag applicationGatewayAttributes) PrivateEndpointConnection() terra.SetValue[applicationgateway.PrivateEndpointConnectionAttributes] {
	return terra.ReferenceAsSet[applicationgateway.PrivateEndpointConnectionAttributes](ag.ref.Append("private_endpoint_connection"))
}

func (ag applicationGatewayAttributes) AuthenticationCertificate() terra.ListValue[applicationgateway.AuthenticationCertificateAttributes] {
	return terra.ReferenceAsList[applicationgateway.AuthenticationCertificateAttributes](ag.ref.Append("authentication_certificate"))
}

func (ag applicationGatewayAttributes) AutoscaleConfiguration() terra.ListValue[applicationgateway.AutoscaleConfigurationAttributes] {
	return terra.ReferenceAsList[applicationgateway.AutoscaleConfigurationAttributes](ag.ref.Append("autoscale_configuration"))
}

func (ag applicationGatewayAttributes) BackendAddressPool() terra.SetValue[applicationgateway.BackendAddressPoolAttributes] {
	return terra.ReferenceAsSet[applicationgateway.BackendAddressPoolAttributes](ag.ref.Append("backend_address_pool"))
}

func (ag applicationGatewayAttributes) BackendHttpSettings() terra.SetValue[applicationgateway.BackendHttpSettingsAttributes] {
	return terra.ReferenceAsSet[applicationgateway.BackendHttpSettingsAttributes](ag.ref.Append("backend_http_settings"))
}

func (ag applicationGatewayAttributes) CustomErrorConfiguration() terra.ListValue[applicationgateway.CustomErrorConfigurationAttributes] {
	return terra.ReferenceAsList[applicationgateway.CustomErrorConfigurationAttributes](ag.ref.Append("custom_error_configuration"))
}

func (ag applicationGatewayAttributes) FrontendIpConfiguration() terra.ListValue[applicationgateway.FrontendIpConfigurationAttributes] {
	return terra.ReferenceAsList[applicationgateway.FrontendIpConfigurationAttributes](ag.ref.Append("frontend_ip_configuration"))
}

func (ag applicationGatewayAttributes) FrontendPort() terra.SetValue[applicationgateway.FrontendPortAttributes] {
	return terra.ReferenceAsSet[applicationgateway.FrontendPortAttributes](ag.ref.Append("frontend_port"))
}

func (ag applicationGatewayAttributes) GatewayIpConfiguration() terra.ListValue[applicationgateway.GatewayIpConfigurationAttributes] {
	return terra.ReferenceAsList[applicationgateway.GatewayIpConfigurationAttributes](ag.ref.Append("gateway_ip_configuration"))
}

func (ag applicationGatewayAttributes) Global() terra.ListValue[applicationgateway.GlobalAttributes] {
	return terra.ReferenceAsList[applicationgateway.GlobalAttributes](ag.ref.Append("global"))
}

func (ag applicationGatewayAttributes) HttpListener() terra.SetValue[applicationgateway.HttpListenerAttributes] {
	return terra.ReferenceAsSet[applicationgateway.HttpListenerAttributes](ag.ref.Append("http_listener"))
}

func (ag applicationGatewayAttributes) Identity() terra.ListValue[applicationgateway.IdentityAttributes] {
	return terra.ReferenceAsList[applicationgateway.IdentityAttributes](ag.ref.Append("identity"))
}

func (ag applicationGatewayAttributes) PrivateLinkConfiguration() terra.SetValue[applicationgateway.PrivateLinkConfigurationAttributes] {
	return terra.ReferenceAsSet[applicationgateway.PrivateLinkConfigurationAttributes](ag.ref.Append("private_link_configuration"))
}

func (ag applicationGatewayAttributes) Probe() terra.SetValue[applicationgateway.ProbeAttributes] {
	return terra.ReferenceAsSet[applicationgateway.ProbeAttributes](ag.ref.Append("probe"))
}

func (ag applicationGatewayAttributes) RedirectConfiguration() terra.SetValue[applicationgateway.RedirectConfigurationAttributes] {
	return terra.ReferenceAsSet[applicationgateway.RedirectConfigurationAttributes](ag.ref.Append("redirect_configuration"))
}

func (ag applicationGatewayAttributes) RequestRoutingRule() terra.SetValue[applicationgateway.RequestRoutingRuleAttributes] {
	return terra.ReferenceAsSet[applicationgateway.RequestRoutingRuleAttributes](ag.ref.Append("request_routing_rule"))
}

func (ag applicationGatewayAttributes) RewriteRuleSet() terra.ListValue[applicationgateway.RewriteRuleSetAttributes] {
	return terra.ReferenceAsList[applicationgateway.RewriteRuleSetAttributes](ag.ref.Append("rewrite_rule_set"))
}

func (ag applicationGatewayAttributes) Sku() terra.ListValue[applicationgateway.SkuAttributes] {
	return terra.ReferenceAsList[applicationgateway.SkuAttributes](ag.ref.Append("sku"))
}

func (ag applicationGatewayAttributes) SslCertificate() terra.SetValue[applicationgateway.SslCertificateAttributes] {
	return terra.ReferenceAsSet[applicationgateway.SslCertificateAttributes](ag.ref.Append("ssl_certificate"))
}

func (ag applicationGatewayAttributes) SslPolicy() terra.ListValue[applicationgateway.SslPolicyAttributes] {
	return terra.ReferenceAsList[applicationgateway.SslPolicyAttributes](ag.ref.Append("ssl_policy"))
}

func (ag applicationGatewayAttributes) SslProfile() terra.ListValue[applicationgateway.SslProfileAttributes] {
	return terra.ReferenceAsList[applicationgateway.SslProfileAttributes](ag.ref.Append("ssl_profile"))
}

func (ag applicationGatewayAttributes) Timeouts() applicationgateway.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationgateway.TimeoutsAttributes](ag.ref.Append("timeouts"))
}

func (ag applicationGatewayAttributes) TrustedClientCertificate() terra.ListValue[applicationgateway.TrustedClientCertificateAttributes] {
	return terra.ReferenceAsList[applicationgateway.TrustedClientCertificateAttributes](ag.ref.Append("trusted_client_certificate"))
}

func (ag applicationGatewayAttributes) TrustedRootCertificate() terra.ListValue[applicationgateway.TrustedRootCertificateAttributes] {
	return terra.ReferenceAsList[applicationgateway.TrustedRootCertificateAttributes](ag.ref.Append("trusted_root_certificate"))
}

func (ag applicationGatewayAttributes) UrlPathMap() terra.ListValue[applicationgateway.UrlPathMapAttributes] {
	return terra.ReferenceAsList[applicationgateway.UrlPathMapAttributes](ag.ref.Append("url_path_map"))
}

func (ag applicationGatewayAttributes) WafConfiguration() terra.ListValue[applicationgateway.WafConfigurationAttributes] {
	return terra.ReferenceAsList[applicationgateway.WafConfigurationAttributes](ag.ref.Append("waf_configuration"))
}

type applicationGatewayState struct {
	EnableHttp2                    bool                                                `json:"enable_http2"`
	FipsEnabled                    bool                                                `json:"fips_enabled"`
	FirewallPolicyId               string                                              `json:"firewall_policy_id"`
	ForceFirewallPolicyAssociation bool                                                `json:"force_firewall_policy_association"`
	Id                             string                                              `json:"id"`
	Location                       string                                              `json:"location"`
	Name                           string                                              `json:"name"`
	ResourceGroupName              string                                              `json:"resource_group_name"`
	Tags                           map[string]string                                   `json:"tags"`
	Zones                          []string                                            `json:"zones"`
	PrivateEndpointConnection      []applicationgateway.PrivateEndpointConnectionState `json:"private_endpoint_connection"`
	AuthenticationCertificate      []applicationgateway.AuthenticationCertificateState `json:"authentication_certificate"`
	AutoscaleConfiguration         []applicationgateway.AutoscaleConfigurationState    `json:"autoscale_configuration"`
	BackendAddressPool             []applicationgateway.BackendAddressPoolState        `json:"backend_address_pool"`
	BackendHttpSettings            []applicationgateway.BackendHttpSettingsState       `json:"backend_http_settings"`
	CustomErrorConfiguration       []applicationgateway.CustomErrorConfigurationState  `json:"custom_error_configuration"`
	FrontendIpConfiguration        []applicationgateway.FrontendIpConfigurationState   `json:"frontend_ip_configuration"`
	FrontendPort                   []applicationgateway.FrontendPortState              `json:"frontend_port"`
	GatewayIpConfiguration         []applicationgateway.GatewayIpConfigurationState    `json:"gateway_ip_configuration"`
	Global                         []applicationgateway.GlobalState                    `json:"global"`
	HttpListener                   []applicationgateway.HttpListenerState              `json:"http_listener"`
	Identity                       []applicationgateway.IdentityState                  `json:"identity"`
	PrivateLinkConfiguration       []applicationgateway.PrivateLinkConfigurationState  `json:"private_link_configuration"`
	Probe                          []applicationgateway.ProbeState                     `json:"probe"`
	RedirectConfiguration          []applicationgateway.RedirectConfigurationState     `json:"redirect_configuration"`
	RequestRoutingRule             []applicationgateway.RequestRoutingRuleState        `json:"request_routing_rule"`
	RewriteRuleSet                 []applicationgateway.RewriteRuleSetState            `json:"rewrite_rule_set"`
	Sku                            []applicationgateway.SkuState                       `json:"sku"`
	SslCertificate                 []applicationgateway.SslCertificateState            `json:"ssl_certificate"`
	SslPolicy                      []applicationgateway.SslPolicyState                 `json:"ssl_policy"`
	SslProfile                     []applicationgateway.SslProfileState                `json:"ssl_profile"`
	Timeouts                       *applicationgateway.TimeoutsState                   `json:"timeouts"`
	TrustedClientCertificate       []applicationgateway.TrustedClientCertificateState  `json:"trusted_client_certificate"`
	TrustedRootCertificate         []applicationgateway.TrustedRootCertificateState    `json:"trusted_root_certificate"`
	UrlPathMap                     []applicationgateway.UrlPathMapState                `json:"url_path_map"`
	WafConfiguration               []applicationgateway.WafConfigurationState          `json:"waf_configuration"`
}
