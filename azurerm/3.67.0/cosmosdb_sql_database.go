// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbsqldatabase "github.com/golingon/terraproviders/azurerm/3.67.0/cosmosdbsqldatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCosmosdbSqlDatabase creates a new instance of [CosmosdbSqlDatabase].
func NewCosmosdbSqlDatabase(name string, args CosmosdbSqlDatabaseArgs) *CosmosdbSqlDatabase {
	return &CosmosdbSqlDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbSqlDatabase)(nil)

// CosmosdbSqlDatabase represents the Terraform resource azurerm_cosmosdb_sql_database.
type CosmosdbSqlDatabase struct {
	Name      string
	Args      CosmosdbSqlDatabaseArgs
	state     *cosmosdbSqlDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) Type() string {
	return "azurerm_cosmosdb_sql_database"
}

// LocalName returns the local name for [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) LocalName() string {
	return csd.Name
}

// Configuration returns the configuration (args) for [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) Configuration() interface{} {
	return csd.Args
}

// DependOn is used for other resources to depend on [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(csd)
}

// Dependencies returns the list of resources [CosmosdbSqlDatabase] depends_on.
func (csd *CosmosdbSqlDatabase) Dependencies() terra.Dependencies {
	return csd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) LifecycleManagement() *terra.Lifecycle {
	return csd.Lifecycle
}

// Attributes returns the attributes for [CosmosdbSqlDatabase].
func (csd *CosmosdbSqlDatabase) Attributes() cosmosdbSqlDatabaseAttributes {
	return cosmosdbSqlDatabaseAttributes{ref: terra.ReferenceResource(csd)}
}

// ImportState imports the given attribute values into [CosmosdbSqlDatabase]'s state.
func (csd *CosmosdbSqlDatabase) ImportState(av io.Reader) error {
	csd.state = &cosmosdbSqlDatabaseState{}
	if err := json.NewDecoder(av).Decode(csd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csd.Type(), csd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CosmosdbSqlDatabase] has state.
func (csd *CosmosdbSqlDatabase) State() (*cosmosdbSqlDatabaseState, bool) {
	return csd.state, csd.state != nil
}

// StateMust returns the state for [CosmosdbSqlDatabase]. Panics if the state is nil.
func (csd *CosmosdbSqlDatabase) StateMust() *cosmosdbSqlDatabaseState {
	if csd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csd.Type(), csd.LocalName()))
	}
	return csd.state
}

// CosmosdbSqlDatabaseArgs contains the configurations for azurerm_cosmosdb_sql_database.
type CosmosdbSqlDatabaseArgs struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *cosmosdbsqldatabase.AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Timeouts: optional
	Timeouts *cosmosdbsqldatabase.Timeouts `hcl:"timeouts,block"`
}
type cosmosdbSqlDatabaseAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_cosmosdb_sql_database.
func (csd cosmosdbSqlDatabaseAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(csd.ref.Append("account_name"))
}

// Id returns a reference to field id of azurerm_cosmosdb_sql_database.
func (csd cosmosdbSqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(csd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_sql_database.
func (csd cosmosdbSqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(csd.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cosmosdb_sql_database.
func (csd cosmosdbSqlDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(csd.ref.Append("resource_group_name"))
}

// Throughput returns a reference to field throughput of azurerm_cosmosdb_sql_database.
func (csd cosmosdbSqlDatabaseAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(csd.ref.Append("throughput"))
}

func (csd cosmosdbSqlDatabaseAttributes) AutoscaleSettings() terra.ListValue[cosmosdbsqldatabase.AutoscaleSettingsAttributes] {
	return terra.ReferenceAsList[cosmosdbsqldatabase.AutoscaleSettingsAttributes](csd.ref.Append("autoscale_settings"))
}

func (csd cosmosdbSqlDatabaseAttributes) Timeouts() cosmosdbsqldatabase.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cosmosdbsqldatabase.TimeoutsAttributes](csd.ref.Append("timeouts"))
}

type cosmosdbSqlDatabaseState struct {
	AccountName       string                                       `json:"account_name"`
	Id                string                                       `json:"id"`
	Name              string                                       `json:"name"`
	ResourceGroupName string                                       `json:"resource_group_name"`
	Throughput        float64                                      `json:"throughput"`
	AutoscaleSettings []cosmosdbsqldatabase.AutoscaleSettingsState `json:"autoscale_settings"`
	Timeouts          *cosmosdbsqldatabase.TimeoutsState           `json:"timeouts"`
}
