// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package batchaccount

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Encryption struct {
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type KeyVaultReference struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type NetworkProfile struct {
	// AccountAccess: optional
	AccountAccess *AccountAccess `hcl:"account_access,block"`
	// NodeManagementAccess: optional
	NodeManagementAccess *NodeManagementAccess `hcl:"node_management_access,block"`
}

type AccountAccess struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// AccountAccessIpRule: min=0
	IpRule []AccountAccessIpRule `hcl:"ip_rule,block" validate:"min=0"`
}

type AccountAccessIpRule struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpRange: string, required
	IpRange terra.StringValue `hcl:"ip_range,attr" validate:"required"`
}

type NodeManagementAccess struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// NodeManagementAccessIpRule: min=0
	IpRule []NodeManagementAccessIpRule `hcl:"ip_rule,block" validate:"min=0"`
}

type NodeManagementAccessIpRule struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpRange: string, required
	IpRange terra.StringValue `hcl:"ip_range,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key_vault_key_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type KeyVaultReferenceAttributes struct {
	ref terra.Reference
}

func (kvr KeyVaultReferenceAttributes) InternalRef() (terra.Reference, error) {
	return kvr.ref, nil
}

func (kvr KeyVaultReferenceAttributes) InternalWithRef(ref terra.Reference) KeyVaultReferenceAttributes {
	return KeyVaultReferenceAttributes{ref: ref}
}

func (kvr KeyVaultReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvr.ref.InternalTokens()
}

func (kvr KeyVaultReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("id"))
}

func (kvr KeyVaultReferenceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("url"))
}

type NetworkProfileAttributes struct {
	ref terra.Reference
}

func (np NetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkProfileAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAttributes {
	return NetworkProfileAttributes{ref: ref}
}

func (np NetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkProfileAttributes) AccountAccess() terra.ListValue[AccountAccessAttributes] {
	return terra.ReferenceAsList[AccountAccessAttributes](np.ref.Append("account_access"))
}

func (np NetworkProfileAttributes) NodeManagementAccess() terra.ListValue[NodeManagementAccessAttributes] {
	return terra.ReferenceAsList[NodeManagementAccessAttributes](np.ref.Append("node_management_access"))
}

type AccountAccessAttributes struct {
	ref terra.Reference
}

func (aa AccountAccessAttributes) InternalRef() (terra.Reference, error) {
	return aa.ref, nil
}

func (aa AccountAccessAttributes) InternalWithRef(ref terra.Reference) AccountAccessAttributes {
	return AccountAccessAttributes{ref: ref}
}

func (aa AccountAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aa.ref.InternalTokens()
}

func (aa AccountAccessAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("default_action"))
}

func (aa AccountAccessAttributes) IpRule() terra.ListValue[AccountAccessIpRuleAttributes] {
	return terra.ReferenceAsList[AccountAccessIpRuleAttributes](aa.ref.Append("ip_rule"))
}

type AccountAccessIpRuleAttributes struct {
	ref terra.Reference
}

func (ir AccountAccessIpRuleAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir AccountAccessIpRuleAttributes) InternalWithRef(ref terra.Reference) AccountAccessIpRuleAttributes {
	return AccountAccessIpRuleAttributes{ref: ref}
}

func (ir AccountAccessIpRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir AccountAccessIpRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir AccountAccessIpRuleAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_range"))
}

type NodeManagementAccessAttributes struct {
	ref terra.Reference
}

func (nma NodeManagementAccessAttributes) InternalRef() (terra.Reference, error) {
	return nma.ref, nil
}

func (nma NodeManagementAccessAttributes) InternalWithRef(ref terra.Reference) NodeManagementAccessAttributes {
	return NodeManagementAccessAttributes{ref: ref}
}

func (nma NodeManagementAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nma.ref.InternalTokens()
}

func (nma NodeManagementAccessAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("default_action"))
}

func (nma NodeManagementAccessAttributes) IpRule() terra.ListValue[NodeManagementAccessIpRuleAttributes] {
	return terra.ReferenceAsList[NodeManagementAccessIpRuleAttributes](nma.ref.Append("ip_rule"))
}

type NodeManagementAccessIpRuleAttributes struct {
	ref terra.Reference
}

func (ir NodeManagementAccessIpRuleAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir NodeManagementAccessIpRuleAttributes) InternalWithRef(ref terra.Reference) NodeManagementAccessIpRuleAttributes {
	return NodeManagementAccessIpRuleAttributes{ref: ref}
}

func (ir NodeManagementAccessIpRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir NodeManagementAccessIpRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir NodeManagementAccessIpRuleAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_range"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EncryptionState struct {
	KeyVaultKeyId string `json:"key_vault_key_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type KeyVaultReferenceState struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

type NetworkProfileState struct {
	AccountAccess        []AccountAccessState        `json:"account_access"`
	NodeManagementAccess []NodeManagementAccessState `json:"node_management_access"`
}

type AccountAccessState struct {
	DefaultAction string                     `json:"default_action"`
	IpRule        []AccountAccessIpRuleState `json:"ip_rule"`
}

type AccountAccessIpRuleState struct {
	Action  string `json:"action"`
	IpRange string `json:"ip_range"`
}

type NodeManagementAccessState struct {
	DefaultAction string                            `json:"default_action"`
	IpRule        []NodeManagementAccessIpRuleState `json:"ip_rule"`
}

type NodeManagementAccessIpRuleState struct {
	Action  string `json:"action"`
	IpRange string `json:"ip_range"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
