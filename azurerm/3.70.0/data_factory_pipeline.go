// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorypipeline "github.com/golingon/terraproviders/azurerm/3.70.0/datafactorypipeline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactoryPipeline creates a new instance of [DataFactoryPipeline].
func NewDataFactoryPipeline(name string, args DataFactoryPipelineArgs) *DataFactoryPipeline {
	return &DataFactoryPipeline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryPipeline)(nil)

// DataFactoryPipeline represents the Terraform resource azurerm_data_factory_pipeline.
type DataFactoryPipeline struct {
	Name      string
	Args      DataFactoryPipelineArgs
	state     *dataFactoryPipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) Type() string {
	return "azurerm_data_factory_pipeline"
}

// LocalName returns the local name for [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) LocalName() string {
	return dfp.Name
}

// Configuration returns the configuration (args) for [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) Configuration() interface{} {
	return dfp.Args
}

// DependOn is used for other resources to depend on [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) DependOn() terra.Reference {
	return terra.ReferenceResource(dfp)
}

// Dependencies returns the list of resources [DataFactoryPipeline] depends_on.
func (dfp *DataFactoryPipeline) Dependencies() terra.Dependencies {
	return dfp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) LifecycleManagement() *terra.Lifecycle {
	return dfp.Lifecycle
}

// Attributes returns the attributes for [DataFactoryPipeline].
func (dfp *DataFactoryPipeline) Attributes() dataFactoryPipelineAttributes {
	return dataFactoryPipelineAttributes{ref: terra.ReferenceResource(dfp)}
}

// ImportState imports the given attribute values into [DataFactoryPipeline]'s state.
func (dfp *DataFactoryPipeline) ImportState(av io.Reader) error {
	dfp.state = &dataFactoryPipelineState{}
	if err := json.NewDecoder(av).Decode(dfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfp.Type(), dfp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactoryPipeline] has state.
func (dfp *DataFactoryPipeline) State() (*dataFactoryPipelineState, bool) {
	return dfp.state, dfp.state != nil
}

// StateMust returns the state for [DataFactoryPipeline]. Panics if the state is nil.
func (dfp *DataFactoryPipeline) StateMust() *dataFactoryPipelineState {
	if dfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfp.Type(), dfp.LocalName()))
	}
	return dfp.state
}

// DataFactoryPipelineArgs contains the configurations for azurerm_data_factory_pipeline.
type DataFactoryPipelineArgs struct {
	// ActivitiesJson: string, optional
	ActivitiesJson terra.StringValue `hcl:"activities_json,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// Concurrency: number, optional
	Concurrency terra.NumberValue `hcl:"concurrency,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MoniterMetricsAfterDuration: string, optional
	MoniterMetricsAfterDuration terra.StringValue `hcl:"moniter_metrics_after_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
	// Timeouts: optional
	Timeouts *datafactorypipeline.Timeouts `hcl:"timeouts,block"`
}
type dataFactoryPipelineAttributes struct {
	ref terra.Reference
}

// ActivitiesJson returns a reference to field activities_json of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) ActivitiesJson() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("activities_json"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dfp.ref.Append("annotations"))
}

// Concurrency returns a reference to field concurrency of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(dfp.ref.Append("concurrency"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("id"))
}

// MoniterMetricsAfterDuration returns a reference to field moniter_metrics_after_duration of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) MoniterMetricsAfterDuration() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("moniter_metrics_after_duration"))
}

// Name returns a reference to field name of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dfp.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfp.ref.Append("parameters"))
}

// Variables returns a reference to field variables of azurerm_data_factory_pipeline.
func (dfp dataFactoryPipelineAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfp.ref.Append("variables"))
}

func (dfp dataFactoryPipelineAttributes) Timeouts() datafactorypipeline.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactorypipeline.TimeoutsAttributes](dfp.ref.Append("timeouts"))
}

type dataFactoryPipelineState struct {
	ActivitiesJson              string                             `json:"activities_json"`
	Annotations                 []string                           `json:"annotations"`
	Concurrency                 float64                            `json:"concurrency"`
	DataFactoryId               string                             `json:"data_factory_id"`
	Description                 string                             `json:"description"`
	Folder                      string                             `json:"folder"`
	Id                          string                             `json:"id"`
	MoniterMetricsAfterDuration string                             `json:"moniter_metrics_after_duration"`
	Name                        string                             `json:"name"`
	Parameters                  map[string]string                  `json:"parameters"`
	Variables                   map[string]string                  `json:"variables"`
	Timeouts                    *datafactorypipeline.TimeoutsState `json:"timeouts"`
}
