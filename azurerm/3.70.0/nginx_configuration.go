// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	nginxconfiguration "github.com/golingon/terraproviders/azurerm/3.70.0/nginxconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNginxConfiguration creates a new instance of [NginxConfiguration].
func NewNginxConfiguration(name string, args NginxConfigurationArgs) *NginxConfiguration {
	return &NginxConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NginxConfiguration)(nil)

// NginxConfiguration represents the Terraform resource azurerm_nginx_configuration.
type NginxConfiguration struct {
	Name      string
	Args      NginxConfigurationArgs
	state     *nginxConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NginxConfiguration].
func (nc *NginxConfiguration) Type() string {
	return "azurerm_nginx_configuration"
}

// LocalName returns the local name for [NginxConfiguration].
func (nc *NginxConfiguration) LocalName() string {
	return nc.Name
}

// Configuration returns the configuration (args) for [NginxConfiguration].
func (nc *NginxConfiguration) Configuration() interface{} {
	return nc.Args
}

// DependOn is used for other resources to depend on [NginxConfiguration].
func (nc *NginxConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(nc)
}

// Dependencies returns the list of resources [NginxConfiguration] depends_on.
func (nc *NginxConfiguration) Dependencies() terra.Dependencies {
	return nc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NginxConfiguration].
func (nc *NginxConfiguration) LifecycleManagement() *terra.Lifecycle {
	return nc.Lifecycle
}

// Attributes returns the attributes for [NginxConfiguration].
func (nc *NginxConfiguration) Attributes() nginxConfigurationAttributes {
	return nginxConfigurationAttributes{ref: terra.ReferenceResource(nc)}
}

// ImportState imports the given attribute values into [NginxConfiguration]'s state.
func (nc *NginxConfiguration) ImportState(av io.Reader) error {
	nc.state = &nginxConfigurationState{}
	if err := json.NewDecoder(av).Decode(nc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nc.Type(), nc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NginxConfiguration] has state.
func (nc *NginxConfiguration) State() (*nginxConfigurationState, bool) {
	return nc.state, nc.state != nil
}

// StateMust returns the state for [NginxConfiguration]. Panics if the state is nil.
func (nc *NginxConfiguration) StateMust() *nginxConfigurationState {
	if nc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nc.Type(), nc.LocalName()))
	}
	return nc.state
}

// NginxConfigurationArgs contains the configurations for azurerm_nginx_configuration.
type NginxConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NginxDeploymentId: string, required
	NginxDeploymentId terra.StringValue `hcl:"nginx_deployment_id,attr" validate:"required"`
	// PackageData: string, optional
	PackageData terra.StringValue `hcl:"package_data,attr"`
	// RootFile: string, required
	RootFile terra.StringValue `hcl:"root_file,attr" validate:"required"`
	// ConfigFile: min=0
	ConfigFile []nginxconfiguration.ConfigFile `hcl:"config_file,block" validate:"min=0"`
	// ProtectedFile: min=0
	ProtectedFile []nginxconfiguration.ProtectedFile `hcl:"protected_file,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *nginxconfiguration.Timeouts `hcl:"timeouts,block"`
}
type nginxConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_nginx_configuration.
func (nc nginxConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("id"))
}

// NginxDeploymentId returns a reference to field nginx_deployment_id of azurerm_nginx_configuration.
func (nc nginxConfigurationAttributes) NginxDeploymentId() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("nginx_deployment_id"))
}

// PackageData returns a reference to field package_data of azurerm_nginx_configuration.
func (nc nginxConfigurationAttributes) PackageData() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("package_data"))
}

// RootFile returns a reference to field root_file of azurerm_nginx_configuration.
func (nc nginxConfigurationAttributes) RootFile() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("root_file"))
}

func (nc nginxConfigurationAttributes) ConfigFile() terra.SetValue[nginxconfiguration.ConfigFileAttributes] {
	return terra.ReferenceAsSet[nginxconfiguration.ConfigFileAttributes](nc.ref.Append("config_file"))
}

func (nc nginxConfigurationAttributes) ProtectedFile() terra.SetValue[nginxconfiguration.ProtectedFileAttributes] {
	return terra.ReferenceAsSet[nginxconfiguration.ProtectedFileAttributes](nc.ref.Append("protected_file"))
}

func (nc nginxConfigurationAttributes) Timeouts() nginxconfiguration.TimeoutsAttributes {
	return terra.ReferenceAsSingle[nginxconfiguration.TimeoutsAttributes](nc.ref.Append("timeouts"))
}

type nginxConfigurationState struct {
	Id                string                                  `json:"id"`
	NginxDeploymentId string                                  `json:"nginx_deployment_id"`
	PackageData       string                                  `json:"package_data"`
	RootFile          string                                  `json:"root_file"`
	ConfigFile        []nginxconfiguration.ConfigFileState    `json:"config_file"`
	ProtectedFile     []nginxconfiguration.ProtectedFileState `json:"protected_file"`
	Timeouts          *nginxconfiguration.TimeoutsState       `json:"timeouts"`
}
