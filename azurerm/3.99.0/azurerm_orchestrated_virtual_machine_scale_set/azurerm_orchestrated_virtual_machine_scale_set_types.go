// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_orchestrated_virtual_machine_scale_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdditionalCapabilities struct {
	// UltraSsdEnabled: bool, optional
	UltraSsdEnabled terra.BoolValue `hcl:"ultra_ssd_enabled,attr"`
}

type AutomaticInstanceRepair struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// GracePeriod: string, optional
	GracePeriod terra.StringValue `hcl:"grace_period,attr"`
}

type BootDiagnostics struct {
	// StorageAccountUri: string, optional
	StorageAccountUri terra.StringValue `hcl:"storage_account_uri,attr"`
}

type DataDisk struct {
	// Caching: string, required
	Caching terra.StringValue `hcl:"caching,attr" validate:"required"`
	// CreateOption: string, optional
	CreateOption terra.StringValue `hcl:"create_option,attr"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Lun: number, optional
	Lun terra.NumberValue `hcl:"lun,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// UltraSsdDiskIopsReadWrite: number, optional
	UltraSsdDiskIopsReadWrite terra.NumberValue `hcl:"ultra_ssd_disk_iops_read_write,attr"`
	// UltraSsdDiskMbpsReadWrite: number, optional
	UltraSsdDiskMbpsReadWrite terra.NumberValue `hcl:"ultra_ssd_disk_mbps_read_write,attr"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
}

type Extension struct {
	// AutoUpgradeMinorVersionEnabled: bool, optional
	AutoUpgradeMinorVersionEnabled terra.BoolValue `hcl:"auto_upgrade_minor_version_enabled,attr"`
	// ExtensionsToProvisionAfterVmCreation: list of string, optional
	ExtensionsToProvisionAfterVmCreation terra.ListValue[terra.StringValue] `hcl:"extensions_to_provision_after_vm_creation,attr"`
	// FailureSuppressionEnabled: bool, optional
	FailureSuppressionEnabled terra.BoolValue `hcl:"failure_suppression_enabled,attr"`
	// ForceExtensionExecutionOnChange: string, optional
	ForceExtensionExecutionOnChange terra.StringValue `hcl:"force_extension_execution_on_change,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Settings: string, optional
	Settings terra.StringValue `hcl:"settings,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, required
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr" validate:"required"`
	// ExtensionProtectedSettingsFromKeyVault: optional
	ProtectedSettingsFromKeyVault *ExtensionProtectedSettingsFromKeyVault `hcl:"protected_settings_from_key_vault,block"`
}

type ExtensionProtectedSettingsFromKeyVault struct {
	// SecretUrl: string, required
	SecretUrl terra.StringValue `hcl:"secret_url,attr" validate:"required"`
	// SourceVaultId: string, required
	SourceVaultId terra.StringValue `hcl:"source_vault_id,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type NetworkInterface struct {
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// EnableAcceleratedNetworking: bool, optional
	EnableAcceleratedNetworking terra.BoolValue `hcl:"enable_accelerated_networking,attr"`
	// EnableIpForwarding: bool, optional
	EnableIpForwarding terra.BoolValue `hcl:"enable_ip_forwarding,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkSecurityGroupId: string, optional
	NetworkSecurityGroupId terra.StringValue `hcl:"network_security_group_id,attr"`
	// Primary: bool, optional
	Primary terra.BoolValue `hcl:"primary,attr"`
	// NetworkInterfaceIpConfiguration: min=1
	IpConfiguration []NetworkInterfaceIpConfiguration `hcl:"ip_configuration,block" validate:"min=1"`
}

type NetworkInterfaceIpConfiguration struct {
	// ApplicationGatewayBackendAddressPoolIds: set of string, optional
	ApplicationGatewayBackendAddressPoolIds terra.SetValue[terra.StringValue] `hcl:"application_gateway_backend_address_pool_ids,attr"`
	// ApplicationSecurityGroupIds: set of string, optional
	ApplicationSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"application_security_group_ids,attr"`
	// LoadBalancerBackendAddressPoolIds: set of string, optional
	LoadBalancerBackendAddressPoolIds terra.SetValue[terra.StringValue] `hcl:"load_balancer_backend_address_pool_ids,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Primary: bool, optional
	Primary terra.BoolValue `hcl:"primary,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// NetworkInterfaceIpConfigurationPublicIpAddress: min=0
	PublicIpAddress []NetworkInterfaceIpConfigurationPublicIpAddress `hcl:"public_ip_address,block" validate:"min=0"`
}

type NetworkInterfaceIpConfigurationPublicIpAddress struct {
	// DomainNameLabel: string, optional
	DomainNameLabel terra.StringValue `hcl:"domain_name_label,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicIpPrefixId: string, optional
	PublicIpPrefixId terra.StringValue `hcl:"public_ip_prefix_id,attr"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// NetworkInterfaceIpConfigurationPublicIpAddressIpTag: min=0
	IpTag []NetworkInterfaceIpConfigurationPublicIpAddressIpTag `hcl:"ip_tag,block" validate:"min=0"`
}

type NetworkInterfaceIpConfigurationPublicIpAddressIpTag struct {
	// Tag: string, required
	Tag terra.StringValue `hcl:"tag,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type OsDisk struct {
	// Caching: string, required
	Caching terra.StringValue `hcl:"caching,attr" validate:"required"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// WriteAcceleratorEnabled: bool, optional
	WriteAcceleratorEnabled terra.BoolValue `hcl:"write_accelerator_enabled,attr"`
	// OsDiskDiffDiskSettings: optional
	DiffDiskSettings *OsDiskDiffDiskSettings `hcl:"diff_disk_settings,block"`
}

type OsDiskDiffDiskSettings struct {
	// Option: string, required
	Option terra.StringValue `hcl:"option,attr" validate:"required"`
	// Placement: string, optional
	Placement terra.StringValue `hcl:"placement,attr"`
}

type OsProfile struct {
	// CustomData: string, optional
	CustomData terra.StringValue `hcl:"custom_data,attr"`
	// OsProfileLinuxConfiguration: optional
	LinuxConfiguration *OsProfileLinuxConfiguration `hcl:"linux_configuration,block"`
	// OsProfileWindowsConfiguration: optional
	WindowsConfiguration *OsProfileWindowsConfiguration `hcl:"windows_configuration,block"`
}

type OsProfileLinuxConfiguration struct {
	// AdminPassword: string, optional
	AdminPassword terra.StringValue `hcl:"admin_password,attr"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// ComputerNamePrefix: string, optional
	ComputerNamePrefix terra.StringValue `hcl:"computer_name_prefix,attr"`
	// DisablePasswordAuthentication: bool, optional
	DisablePasswordAuthentication terra.BoolValue `hcl:"disable_password_authentication,attr"`
	// PatchAssessmentMode: string, optional
	PatchAssessmentMode terra.StringValue `hcl:"patch_assessment_mode,attr"`
	// PatchMode: string, optional
	PatchMode terra.StringValue `hcl:"patch_mode,attr"`
	// ProvisionVmAgent: bool, optional
	ProvisionVmAgent terra.BoolValue `hcl:"provision_vm_agent,attr"`
	// OsProfileLinuxConfigurationAdminSshKey: min=0
	AdminSshKey []OsProfileLinuxConfigurationAdminSshKey `hcl:"admin_ssh_key,block" validate:"min=0"`
	// OsProfileLinuxConfigurationSecret: min=0
	Secret []OsProfileLinuxConfigurationSecret `hcl:"secret,block" validate:"min=0"`
}

type OsProfileLinuxConfigurationAdminSshKey struct {
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type OsProfileLinuxConfigurationSecret struct {
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// OsProfileLinuxConfigurationSecretCertificate: min=1
	Certificate []OsProfileLinuxConfigurationSecretCertificate `hcl:"certificate,block" validate:"min=1"`
}

type OsProfileLinuxConfigurationSecretCertificate struct {
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type OsProfileWindowsConfiguration struct {
	// AdminPassword: string, required
	AdminPassword terra.StringValue `hcl:"admin_password,attr" validate:"required"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// ComputerNamePrefix: string, optional
	ComputerNamePrefix terra.StringValue `hcl:"computer_name_prefix,attr"`
	// EnableAutomaticUpdates: bool, optional
	EnableAutomaticUpdates terra.BoolValue `hcl:"enable_automatic_updates,attr"`
	// HotpatchingEnabled: bool, optional
	HotpatchingEnabled terra.BoolValue `hcl:"hotpatching_enabled,attr"`
	// PatchAssessmentMode: string, optional
	PatchAssessmentMode terra.StringValue `hcl:"patch_assessment_mode,attr"`
	// PatchMode: string, optional
	PatchMode terra.StringValue `hcl:"patch_mode,attr"`
	// ProvisionVmAgent: bool, optional
	ProvisionVmAgent terra.BoolValue `hcl:"provision_vm_agent,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// OsProfileWindowsConfigurationAdditionalUnattendContent: min=0
	AdditionalUnattendContent []OsProfileWindowsConfigurationAdditionalUnattendContent `hcl:"additional_unattend_content,block" validate:"min=0"`
	// OsProfileWindowsConfigurationSecret: min=0
	Secret []OsProfileWindowsConfigurationSecret `hcl:"secret,block" validate:"min=0"`
	// OsProfileWindowsConfigurationWinrmListener: min=0
	WinrmListener []OsProfileWindowsConfigurationWinrmListener `hcl:"winrm_listener,block" validate:"min=0"`
}

type OsProfileWindowsConfigurationAdditionalUnattendContent struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Setting: string, required
	Setting terra.StringValue `hcl:"setting,attr" validate:"required"`
}

type OsProfileWindowsConfigurationSecret struct {
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// OsProfileWindowsConfigurationSecretCertificate: min=1
	Certificate []OsProfileWindowsConfigurationSecretCertificate `hcl:"certificate,block" validate:"min=1"`
}

type OsProfileWindowsConfigurationSecretCertificate struct {
	// Store: string, required
	Store terra.StringValue `hcl:"store,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type OsProfileWindowsConfigurationWinrmListener struct {
	// CertificateUrl: string, optional
	CertificateUrl terra.StringValue `hcl:"certificate_url,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Plan struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Product: string, required
	Product terra.StringValue `hcl:"product,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
}

type PriorityMix struct {
	// BaseRegularCount: number, optional
	BaseRegularCount terra.NumberValue `hcl:"base_regular_count,attr"`
	// RegularPercentageAboveBase: number, optional
	RegularPercentageAboveBase terra.NumberValue `hcl:"regular_percentage_above_base,attr"`
}

type SourceImageReference struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type TerminationNotification struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Timeout: string, optional
	Timeout terra.StringValue `hcl:"timeout,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AdditionalCapabilitiesAttributes struct {
	ref terra.Reference
}

func (ac AdditionalCapabilitiesAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AdditionalCapabilitiesAttributes) InternalWithRef(ref terra.Reference) AdditionalCapabilitiesAttributes {
	return AdditionalCapabilitiesAttributes{ref: ref}
}

func (ac AdditionalCapabilitiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AdditionalCapabilitiesAttributes) UltraSsdEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("ultra_ssd_enabled"))
}

type AutomaticInstanceRepairAttributes struct {
	ref terra.Reference
}

func (air AutomaticInstanceRepairAttributes) InternalRef() (terra.Reference, error) {
	return air.ref, nil
}

func (air AutomaticInstanceRepairAttributes) InternalWithRef(ref terra.Reference) AutomaticInstanceRepairAttributes {
	return AutomaticInstanceRepairAttributes{ref: ref}
}

func (air AutomaticInstanceRepairAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return air.ref.InternalTokens()
}

func (air AutomaticInstanceRepairAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(air.ref.Append("enabled"))
}

func (air AutomaticInstanceRepairAttributes) GracePeriod() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("grace_period"))
}

type BootDiagnosticsAttributes struct {
	ref terra.Reference
}

func (bd BootDiagnosticsAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd BootDiagnosticsAttributes) InternalWithRef(ref terra.Reference) BootDiagnosticsAttributes {
	return BootDiagnosticsAttributes{ref: ref}
}

func (bd BootDiagnosticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd BootDiagnosticsAttributes) StorageAccountUri() terra.StringValue {
	return terra.ReferenceAsString(bd.ref.Append("storage_account_uri"))
}

type DataDiskAttributes struct {
	ref terra.Reference
}

func (dd DataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDiskAttributes) InternalWithRef(ref terra.Reference) DataDiskAttributes {
	return DataDiskAttributes{ref: ref}
}

func (dd DataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("caching"))
}

func (dd DataDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("create_option"))
}

func (dd DataDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("disk_encryption_set_id"))
}

func (dd DataDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("disk_size_gb"))
}

func (dd DataDiskAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("lun"))
}

func (dd DataDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("storage_account_type"))
}

func (dd DataDiskAttributes) UltraSsdDiskIopsReadWrite() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("ultra_ssd_disk_iops_read_write"))
}

func (dd DataDiskAttributes) UltraSsdDiskMbpsReadWrite() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("ultra_ssd_disk_mbps_read_write"))
}

func (dd DataDiskAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dd.ref.Append("write_accelerator_enabled"))
}

type ExtensionAttributes struct {
	ref terra.Reference
}

func (e ExtensionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtensionAttributes) InternalWithRef(ref terra.Reference) ExtensionAttributes {
	return ExtensionAttributes{ref: ref}
}

func (e ExtensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtensionAttributes) AutoUpgradeMinorVersionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("auto_upgrade_minor_version_enabled"))
}

func (e ExtensionAttributes) ExtensionsToProvisionAfterVmCreation() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("extensions_to_provision_after_vm_creation"))
}

func (e ExtensionAttributes) FailureSuppressionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("failure_suppression_enabled"))
}

func (e ExtensionAttributes) ForceExtensionExecutionOnChange() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("force_extension_execution_on_change"))
}

func (e ExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ExtensionAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protected_settings"))
}

func (e ExtensionAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("publisher"))
}

func (e ExtensionAttributes) Settings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("settings"))
}

func (e ExtensionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e ExtensionAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type_handler_version"))
}

func (e ExtensionAttributes) ProtectedSettingsFromKeyVault() terra.ListValue[ExtensionProtectedSettingsFromKeyVaultAttributes] {
	return terra.ReferenceAsList[ExtensionProtectedSettingsFromKeyVaultAttributes](e.ref.Append("protected_settings_from_key_vault"))
}

type ExtensionProtectedSettingsFromKeyVaultAttributes struct {
	ref terra.Reference
}

func (psfkv ExtensionProtectedSettingsFromKeyVaultAttributes) InternalRef() (terra.Reference, error) {
	return psfkv.ref, nil
}

func (psfkv ExtensionProtectedSettingsFromKeyVaultAttributes) InternalWithRef(ref terra.Reference) ExtensionProtectedSettingsFromKeyVaultAttributes {
	return ExtensionProtectedSettingsFromKeyVaultAttributes{ref: ref}
}

func (psfkv ExtensionProtectedSettingsFromKeyVaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psfkv.ref.InternalTokens()
}

func (psfkv ExtensionProtectedSettingsFromKeyVaultAttributes) SecretUrl() terra.StringValue {
	return terra.ReferenceAsString(psfkv.ref.Append("secret_url"))
}

func (psfkv ExtensionProtectedSettingsFromKeyVaultAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceAsString(psfkv.ref.Append("source_vault_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type NetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceAttributes {
	return NetworkInterfaceAttributes{ref: ref}
}

func (ni NetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfaceAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ni.ref.Append("dns_servers"))
}

func (ni NetworkInterfaceAttributes) EnableAcceleratedNetworking() terra.BoolValue {
	return terra.ReferenceAsBool(ni.ref.Append("enable_accelerated_networking"))
}

func (ni NetworkInterfaceAttributes) EnableIpForwarding() terra.BoolValue {
	return terra.ReferenceAsBool(ni.ref.Append("enable_ip_forwarding"))
}

func (ni NetworkInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("name"))
}

func (ni NetworkInterfaceAttributes) NetworkSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_security_group_id"))
}

func (ni NetworkInterfaceAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ni.ref.Append("primary"))
}

func (ni NetworkInterfaceAttributes) IpConfiguration() terra.ListValue[NetworkInterfaceIpConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceIpConfigurationAttributes](ni.ref.Append("ip_configuration"))
}

type NetworkInterfaceIpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic NetworkInterfaceIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic NetworkInterfaceIpConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceIpConfigurationAttributes {
	return NetworkInterfaceIpConfigurationAttributes{ref: ref}
}

func (ic NetworkInterfaceIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic NetworkInterfaceIpConfigurationAttributes) ApplicationGatewayBackendAddressPoolIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("application_gateway_backend_address_pool_ids"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) ApplicationSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("application_security_group_ids"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) LoadBalancerBackendAddressPoolIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ic.ref.Append("load_balancer_backend_address_pool_ids"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("primary"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("version"))
}

func (ic NetworkInterfaceIpConfigurationAttributes) PublicIpAddress() terra.ListValue[NetworkInterfaceIpConfigurationPublicIpAddressAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceIpConfigurationPublicIpAddressAttributes](ic.ref.Append("public_ip_address"))
}

type NetworkInterfaceIpConfigurationPublicIpAddressAttributes struct {
	ref terra.Reference
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) InternalRef() (terra.Reference, error) {
	return pia.ref, nil
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceIpConfigurationPublicIpAddressAttributes {
	return NetworkInterfaceIpConfigurationPublicIpAddressAttributes{ref: ref}
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pia.ref.InternalTokens()
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) DomainNameLabel() terra.StringValue {
	return terra.ReferenceAsString(pia.ref.Append("domain_name_label"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(pia.ref.Append("idle_timeout_in_minutes"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pia.ref.Append("name"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) PublicIpPrefixId() terra.StringValue {
	return terra.ReferenceAsString(pia.ref.Append("public_ip_prefix_id"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(pia.ref.Append("sku_name"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(pia.ref.Append("version"))
}

func (pia NetworkInterfaceIpConfigurationPublicIpAddressAttributes) IpTag() terra.ListValue[NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes](pia.ref.Append("ip_tag"))
}

type NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes struct {
	ref terra.Reference
}

func (it NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes {
	return NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes{ref: ref}
}

func (it NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("tag"))
}

func (it NetworkInterfaceIpConfigurationPublicIpAddressIpTagAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("type"))
}

type OsDiskAttributes struct {
	ref terra.Reference
}

func (od OsDiskAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OsDiskAttributes) InternalWithRef(ref terra.Reference) OsDiskAttributes {
	return OsDiskAttributes{ref: ref}
}

func (od OsDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("caching"))
}

func (od OsDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("disk_encryption_set_id"))
}

func (od OsDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("disk_size_gb"))
}

func (od OsDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("storage_account_type"))
}

func (od OsDiskAttributes) WriteAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(od.ref.Append("write_accelerator_enabled"))
}

func (od OsDiskAttributes) DiffDiskSettings() terra.ListValue[OsDiskDiffDiskSettingsAttributes] {
	return terra.ReferenceAsList[OsDiskDiffDiskSettingsAttributes](od.ref.Append("diff_disk_settings"))
}

type OsDiskDiffDiskSettingsAttributes struct {
	ref terra.Reference
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dds.ref, nil
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalWithRef(ref terra.Reference) OsDiskDiffDiskSettingsAttributes {
	return OsDiskDiffDiskSettingsAttributes{ref: ref}
}

func (dds OsDiskDiffDiskSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dds.ref.InternalTokens()
}

func (dds OsDiskDiffDiskSettingsAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(dds.ref.Append("option"))
}

func (dds OsDiskDiffDiskSettingsAttributes) Placement() terra.StringValue {
	return terra.ReferenceAsString(dds.ref.Append("placement"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) CustomData() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("custom_data"))
}

func (op OsProfileAttributes) LinuxConfiguration() terra.ListValue[OsProfileLinuxConfigurationAttributes] {
	return terra.ReferenceAsList[OsProfileLinuxConfigurationAttributes](op.ref.Append("linux_configuration"))
}

func (op OsProfileAttributes) WindowsConfiguration() terra.ListValue[OsProfileWindowsConfigurationAttributes] {
	return terra.ReferenceAsList[OsProfileWindowsConfigurationAttributes](op.ref.Append("windows_configuration"))
}

type OsProfileLinuxConfigurationAttributes struct {
	ref terra.Reference
}

func (lc OsProfileLinuxConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc OsProfileLinuxConfigurationAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigurationAttributes {
	return OsProfileLinuxConfigurationAttributes{ref: ref}
}

func (lc OsProfileLinuxConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc OsProfileLinuxConfigurationAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("admin_password"))
}

func (lc OsProfileLinuxConfigurationAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("admin_username"))
}

func (lc OsProfileLinuxConfigurationAttributes) ComputerNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("computer_name_prefix"))
}

func (lc OsProfileLinuxConfigurationAttributes) DisablePasswordAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("disable_password_authentication"))
}

func (lc OsProfileLinuxConfigurationAttributes) PatchAssessmentMode() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("patch_assessment_mode"))
}

func (lc OsProfileLinuxConfigurationAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("patch_mode"))
}

func (lc OsProfileLinuxConfigurationAttributes) ProvisionVmAgent() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("provision_vm_agent"))
}

func (lc OsProfileLinuxConfigurationAttributes) AdminSshKey() terra.SetValue[OsProfileLinuxConfigurationAdminSshKeyAttributes] {
	return terra.ReferenceAsSet[OsProfileLinuxConfigurationAdminSshKeyAttributes](lc.ref.Append("admin_ssh_key"))
}

func (lc OsProfileLinuxConfigurationAttributes) Secret() terra.ListValue[OsProfileLinuxConfigurationSecretAttributes] {
	return terra.ReferenceAsList[OsProfileLinuxConfigurationSecretAttributes](lc.ref.Append("secret"))
}

type OsProfileLinuxConfigurationAdminSshKeyAttributes struct {
	ref terra.Reference
}

func (ask OsProfileLinuxConfigurationAdminSshKeyAttributes) InternalRef() (terra.Reference, error) {
	return ask.ref, nil
}

func (ask OsProfileLinuxConfigurationAdminSshKeyAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigurationAdminSshKeyAttributes {
	return OsProfileLinuxConfigurationAdminSshKeyAttributes{ref: ref}
}

func (ask OsProfileLinuxConfigurationAdminSshKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ask.ref.InternalTokens()
}

func (ask OsProfileLinuxConfigurationAdminSshKeyAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(ask.ref.Append("public_key"))
}

func (ask OsProfileLinuxConfigurationAdminSshKeyAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ask.ref.Append("username"))
}

type OsProfileLinuxConfigurationSecretAttributes struct {
	ref terra.Reference
}

func (s OsProfileLinuxConfigurationSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s OsProfileLinuxConfigurationSecretAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigurationSecretAttributes {
	return OsProfileLinuxConfigurationSecretAttributes{ref: ref}
}

func (s OsProfileLinuxConfigurationSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s OsProfileLinuxConfigurationSecretAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key_vault_id"))
}

func (s OsProfileLinuxConfigurationSecretAttributes) Certificate() terra.SetValue[OsProfileLinuxConfigurationSecretCertificateAttributes] {
	return terra.ReferenceAsSet[OsProfileLinuxConfigurationSecretCertificateAttributes](s.ref.Append("certificate"))
}

type OsProfileLinuxConfigurationSecretCertificateAttributes struct {
	ref terra.Reference
}

func (c OsProfileLinuxConfigurationSecretCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c OsProfileLinuxConfigurationSecretCertificateAttributes) InternalWithRef(ref terra.Reference) OsProfileLinuxConfigurationSecretCertificateAttributes {
	return OsProfileLinuxConfigurationSecretCertificateAttributes{ref: ref}
}

func (c OsProfileLinuxConfigurationSecretCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c OsProfileLinuxConfigurationSecretCertificateAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("url"))
}

type OsProfileWindowsConfigurationAttributes struct {
	ref terra.Reference
}

func (wc OsProfileWindowsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc OsProfileWindowsConfigurationAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigurationAttributes {
	return OsProfileWindowsConfigurationAttributes{ref: ref}
}

func (wc OsProfileWindowsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc OsProfileWindowsConfigurationAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("admin_password"))
}

func (wc OsProfileWindowsConfigurationAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("admin_username"))
}

func (wc OsProfileWindowsConfigurationAttributes) ComputerNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("computer_name_prefix"))
}

func (wc OsProfileWindowsConfigurationAttributes) EnableAutomaticUpdates() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("enable_automatic_updates"))
}

func (wc OsProfileWindowsConfigurationAttributes) HotpatchingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("hotpatching_enabled"))
}

func (wc OsProfileWindowsConfigurationAttributes) PatchAssessmentMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("patch_assessment_mode"))
}

func (wc OsProfileWindowsConfigurationAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("patch_mode"))
}

func (wc OsProfileWindowsConfigurationAttributes) ProvisionVmAgent() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("provision_vm_agent"))
}

func (wc OsProfileWindowsConfigurationAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("timezone"))
}

func (wc OsProfileWindowsConfigurationAttributes) AdditionalUnattendContent() terra.ListValue[OsProfileWindowsConfigurationAdditionalUnattendContentAttributes] {
	return terra.ReferenceAsList[OsProfileWindowsConfigurationAdditionalUnattendContentAttributes](wc.ref.Append("additional_unattend_content"))
}

func (wc OsProfileWindowsConfigurationAttributes) Secret() terra.ListValue[OsProfileWindowsConfigurationSecretAttributes] {
	return terra.ReferenceAsList[OsProfileWindowsConfigurationSecretAttributes](wc.ref.Append("secret"))
}

func (wc OsProfileWindowsConfigurationAttributes) WinrmListener() terra.SetValue[OsProfileWindowsConfigurationWinrmListenerAttributes] {
	return terra.ReferenceAsSet[OsProfileWindowsConfigurationWinrmListenerAttributes](wc.ref.Append("winrm_listener"))
}

type OsProfileWindowsConfigurationAdditionalUnattendContentAttributes struct {
	ref terra.Reference
}

func (auc OsProfileWindowsConfigurationAdditionalUnattendContentAttributes) InternalRef() (terra.Reference, error) {
	return auc.ref, nil
}

func (auc OsProfileWindowsConfigurationAdditionalUnattendContentAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigurationAdditionalUnattendContentAttributes {
	return OsProfileWindowsConfigurationAdditionalUnattendContentAttributes{ref: ref}
}

func (auc OsProfileWindowsConfigurationAdditionalUnattendContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return auc.ref.InternalTokens()
}

func (auc OsProfileWindowsConfigurationAdditionalUnattendContentAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("content"))
}

func (auc OsProfileWindowsConfigurationAdditionalUnattendContentAttributes) Setting() terra.StringValue {
	return terra.ReferenceAsString(auc.ref.Append("setting"))
}

type OsProfileWindowsConfigurationSecretAttributes struct {
	ref terra.Reference
}

func (s OsProfileWindowsConfigurationSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s OsProfileWindowsConfigurationSecretAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigurationSecretAttributes {
	return OsProfileWindowsConfigurationSecretAttributes{ref: ref}
}

func (s OsProfileWindowsConfigurationSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s OsProfileWindowsConfigurationSecretAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key_vault_id"))
}

func (s OsProfileWindowsConfigurationSecretAttributes) Certificate() terra.SetValue[OsProfileWindowsConfigurationSecretCertificateAttributes] {
	return terra.ReferenceAsSet[OsProfileWindowsConfigurationSecretCertificateAttributes](s.ref.Append("certificate"))
}

type OsProfileWindowsConfigurationSecretCertificateAttributes struct {
	ref terra.Reference
}

func (c OsProfileWindowsConfigurationSecretCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c OsProfileWindowsConfigurationSecretCertificateAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigurationSecretCertificateAttributes {
	return OsProfileWindowsConfigurationSecretCertificateAttributes{ref: ref}
}

func (c OsProfileWindowsConfigurationSecretCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c OsProfileWindowsConfigurationSecretCertificateAttributes) Store() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store"))
}

func (c OsProfileWindowsConfigurationSecretCertificateAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("url"))
}

type OsProfileWindowsConfigurationWinrmListenerAttributes struct {
	ref terra.Reference
}

func (wl OsProfileWindowsConfigurationWinrmListenerAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl OsProfileWindowsConfigurationWinrmListenerAttributes) InternalWithRef(ref terra.Reference) OsProfileWindowsConfigurationWinrmListenerAttributes {
	return OsProfileWindowsConfigurationWinrmListenerAttributes{ref: ref}
}

func (wl OsProfileWindowsConfigurationWinrmListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl OsProfileWindowsConfigurationWinrmListenerAttributes) CertificateUrl() terra.StringValue {
	return terra.ReferenceAsString(wl.ref.Append("certificate_url"))
}

func (wl OsProfileWindowsConfigurationWinrmListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(wl.ref.Append("protocol"))
}

type PlanAttributes struct {
	ref terra.Reference
}

func (p PlanAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlanAttributes) InternalWithRef(ref terra.Reference) PlanAttributes {
	return PlanAttributes{ref: ref}
}

func (p PlanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PlanAttributes) Product() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("product"))
}

func (p PlanAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("publisher"))
}

type PriorityMixAttributes struct {
	ref terra.Reference
}

func (pm PriorityMixAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm PriorityMixAttributes) InternalWithRef(ref terra.Reference) PriorityMixAttributes {
	return PriorityMixAttributes{ref: ref}
}

func (pm PriorityMixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm PriorityMixAttributes) BaseRegularCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pm.ref.Append("base_regular_count"))
}

func (pm PriorityMixAttributes) RegularPercentageAboveBase() terra.NumberValue {
	return terra.ReferenceAsNumber(pm.ref.Append("regular_percentage_above_base"))
}

type SourceImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir SourceImageReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir SourceImageReferenceAttributes) InternalWithRef(ref terra.Reference) SourceImageReferenceAttributes {
	return SourceImageReferenceAttributes{ref: ref}
}

func (sir SourceImageReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir SourceImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("offer"))
}

func (sir SourceImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("publisher"))
}

func (sir SourceImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("sku"))
}

func (sir SourceImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("version"))
}

type TerminationNotificationAttributes struct {
	ref terra.Reference
}

func (tn TerminationNotificationAttributes) InternalRef() (terra.Reference, error) {
	return tn.ref, nil
}

func (tn TerminationNotificationAttributes) InternalWithRef(ref terra.Reference) TerminationNotificationAttributes {
	return TerminationNotificationAttributes{ref: ref}
}

func (tn TerminationNotificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tn.ref.InternalTokens()
}

func (tn TerminationNotificationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(tn.ref.Append("enabled"))
}

func (tn TerminationNotificationAttributes) Timeout() terra.StringValue {
	return terra.ReferenceAsString(tn.ref.Append("timeout"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AdditionalCapabilitiesState struct {
	UltraSsdEnabled bool `json:"ultra_ssd_enabled"`
}

type AutomaticInstanceRepairState struct {
	Enabled     bool   `json:"enabled"`
	GracePeriod string `json:"grace_period"`
}

type BootDiagnosticsState struct {
	StorageAccountUri string `json:"storage_account_uri"`
}

type DataDiskState struct {
	Caching                   string  `json:"caching"`
	CreateOption              string  `json:"create_option"`
	DiskEncryptionSetId       string  `json:"disk_encryption_set_id"`
	DiskSizeGb                float64 `json:"disk_size_gb"`
	Lun                       float64 `json:"lun"`
	StorageAccountType        string  `json:"storage_account_type"`
	UltraSsdDiskIopsReadWrite float64 `json:"ultra_ssd_disk_iops_read_write"`
	UltraSsdDiskMbpsReadWrite float64 `json:"ultra_ssd_disk_mbps_read_write"`
	WriteAcceleratorEnabled   bool    `json:"write_accelerator_enabled"`
}

type ExtensionState struct {
	AutoUpgradeMinorVersionEnabled       bool                                          `json:"auto_upgrade_minor_version_enabled"`
	ExtensionsToProvisionAfterVmCreation []string                                      `json:"extensions_to_provision_after_vm_creation"`
	FailureSuppressionEnabled            bool                                          `json:"failure_suppression_enabled"`
	ForceExtensionExecutionOnChange      string                                        `json:"force_extension_execution_on_change"`
	Name                                 string                                        `json:"name"`
	ProtectedSettings                    string                                        `json:"protected_settings"`
	Publisher                            string                                        `json:"publisher"`
	Settings                             string                                        `json:"settings"`
	Type                                 string                                        `json:"type"`
	TypeHandlerVersion                   string                                        `json:"type_handler_version"`
	ProtectedSettingsFromKeyVault        []ExtensionProtectedSettingsFromKeyVaultState `json:"protected_settings_from_key_vault"`
}

type ExtensionProtectedSettingsFromKeyVaultState struct {
	SecretUrl     string `json:"secret_url"`
	SourceVaultId string `json:"source_vault_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type NetworkInterfaceState struct {
	DnsServers                  []string                               `json:"dns_servers"`
	EnableAcceleratedNetworking bool                                   `json:"enable_accelerated_networking"`
	EnableIpForwarding          bool                                   `json:"enable_ip_forwarding"`
	Name                        string                                 `json:"name"`
	NetworkSecurityGroupId      string                                 `json:"network_security_group_id"`
	Primary                     bool                                   `json:"primary"`
	IpConfiguration             []NetworkInterfaceIpConfigurationState `json:"ip_configuration"`
}

type NetworkInterfaceIpConfigurationState struct {
	ApplicationGatewayBackendAddressPoolIds []string                                              `json:"application_gateway_backend_address_pool_ids"`
	ApplicationSecurityGroupIds             []string                                              `json:"application_security_group_ids"`
	LoadBalancerBackendAddressPoolIds       []string                                              `json:"load_balancer_backend_address_pool_ids"`
	Name                                    string                                                `json:"name"`
	Primary                                 bool                                                  `json:"primary"`
	SubnetId                                string                                                `json:"subnet_id"`
	Version                                 string                                                `json:"version"`
	PublicIpAddress                         []NetworkInterfaceIpConfigurationPublicIpAddressState `json:"public_ip_address"`
}

type NetworkInterfaceIpConfigurationPublicIpAddressState struct {
	DomainNameLabel      string                                                     `json:"domain_name_label"`
	IdleTimeoutInMinutes float64                                                    `json:"idle_timeout_in_minutes"`
	Name                 string                                                     `json:"name"`
	PublicIpPrefixId     string                                                     `json:"public_ip_prefix_id"`
	SkuName              string                                                     `json:"sku_name"`
	Version              string                                                     `json:"version"`
	IpTag                []NetworkInterfaceIpConfigurationPublicIpAddressIpTagState `json:"ip_tag"`
}

type NetworkInterfaceIpConfigurationPublicIpAddressIpTagState struct {
	Tag  string `json:"tag"`
	Type string `json:"type"`
}

type OsDiskState struct {
	Caching                 string                        `json:"caching"`
	DiskEncryptionSetId     string                        `json:"disk_encryption_set_id"`
	DiskSizeGb              float64                       `json:"disk_size_gb"`
	StorageAccountType      string                        `json:"storage_account_type"`
	WriteAcceleratorEnabled bool                          `json:"write_accelerator_enabled"`
	DiffDiskSettings        []OsDiskDiffDiskSettingsState `json:"diff_disk_settings"`
}

type OsDiskDiffDiskSettingsState struct {
	Option    string `json:"option"`
	Placement string `json:"placement"`
}

type OsProfileState struct {
	CustomData           string                               `json:"custom_data"`
	LinuxConfiguration   []OsProfileLinuxConfigurationState   `json:"linux_configuration"`
	WindowsConfiguration []OsProfileWindowsConfigurationState `json:"windows_configuration"`
}

type OsProfileLinuxConfigurationState struct {
	AdminPassword                 string                                        `json:"admin_password"`
	AdminUsername                 string                                        `json:"admin_username"`
	ComputerNamePrefix            string                                        `json:"computer_name_prefix"`
	DisablePasswordAuthentication bool                                          `json:"disable_password_authentication"`
	PatchAssessmentMode           string                                        `json:"patch_assessment_mode"`
	PatchMode                     string                                        `json:"patch_mode"`
	ProvisionVmAgent              bool                                          `json:"provision_vm_agent"`
	AdminSshKey                   []OsProfileLinuxConfigurationAdminSshKeyState `json:"admin_ssh_key"`
	Secret                        []OsProfileLinuxConfigurationSecretState      `json:"secret"`
}

type OsProfileLinuxConfigurationAdminSshKeyState struct {
	PublicKey string `json:"public_key"`
	Username  string `json:"username"`
}

type OsProfileLinuxConfigurationSecretState struct {
	KeyVaultId  string                                              `json:"key_vault_id"`
	Certificate []OsProfileLinuxConfigurationSecretCertificateState `json:"certificate"`
}

type OsProfileLinuxConfigurationSecretCertificateState struct {
	Url string `json:"url"`
}

type OsProfileWindowsConfigurationState struct {
	AdminPassword             string                                                        `json:"admin_password"`
	AdminUsername             string                                                        `json:"admin_username"`
	ComputerNamePrefix        string                                                        `json:"computer_name_prefix"`
	EnableAutomaticUpdates    bool                                                          `json:"enable_automatic_updates"`
	HotpatchingEnabled        bool                                                          `json:"hotpatching_enabled"`
	PatchAssessmentMode       string                                                        `json:"patch_assessment_mode"`
	PatchMode                 string                                                        `json:"patch_mode"`
	ProvisionVmAgent          bool                                                          `json:"provision_vm_agent"`
	Timezone                  string                                                        `json:"timezone"`
	AdditionalUnattendContent []OsProfileWindowsConfigurationAdditionalUnattendContentState `json:"additional_unattend_content"`
	Secret                    []OsProfileWindowsConfigurationSecretState                    `json:"secret"`
	WinrmListener             []OsProfileWindowsConfigurationWinrmListenerState             `json:"winrm_listener"`
}

type OsProfileWindowsConfigurationAdditionalUnattendContentState struct {
	Content string `json:"content"`
	Setting string `json:"setting"`
}

type OsProfileWindowsConfigurationSecretState struct {
	KeyVaultId  string                                                `json:"key_vault_id"`
	Certificate []OsProfileWindowsConfigurationSecretCertificateState `json:"certificate"`
}

type OsProfileWindowsConfigurationSecretCertificateState struct {
	Store string `json:"store"`
	Url   string `json:"url"`
}

type OsProfileWindowsConfigurationWinrmListenerState struct {
	CertificateUrl string `json:"certificate_url"`
	Protocol       string `json:"protocol"`
}

type PlanState struct {
	Name      string `json:"name"`
	Product   string `json:"product"`
	Publisher string `json:"publisher"`
}

type PriorityMixState struct {
	BaseRegularCount           float64 `json:"base_regular_count"`
	RegularPercentageAboveBase float64 `json:"regular_percentage_above_base"`
}

type SourceImageReferenceState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type TerminationNotificationState struct {
	Enabled bool   `json:"enabled"`
	Timeout string `json:"timeout"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
