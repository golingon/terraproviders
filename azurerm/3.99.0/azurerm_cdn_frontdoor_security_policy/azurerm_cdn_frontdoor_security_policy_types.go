// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_frontdoor_security_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SecurityPolicies struct {
	// SecurityPoliciesFirewall: required
	Firewall *SecurityPoliciesFirewall `hcl:"firewall,block" validate:"required"`
}

type SecurityPoliciesFirewall struct {
	// CdnFrontdoorFirewallPolicyId: string, required
	CdnFrontdoorFirewallPolicyId terra.StringValue `hcl:"cdn_frontdoor_firewall_policy_id,attr" validate:"required"`
	// SecurityPoliciesFirewallAssociation: required
	Association *SecurityPoliciesFirewallAssociation `hcl:"association,block" validate:"required"`
}

type SecurityPoliciesFirewallAssociation struct {
	// PatternsToMatch: list of string, required
	PatternsToMatch terra.ListValue[terra.StringValue] `hcl:"patterns_to_match,attr" validate:"required"`
	// SecurityPoliciesFirewallAssociationDomain: min=1,max=500
	Domain []SecurityPoliciesFirewallAssociationDomain `hcl:"domain,block" validate:"min=1,max=500"`
}

type SecurityPoliciesFirewallAssociationDomain struct {
	// CdnFrontdoorDomainId: string, required
	CdnFrontdoorDomainId terra.StringValue `hcl:"cdn_frontdoor_domain_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type SecurityPoliciesAttributes struct {
	ref terra.Reference
}

func (sp SecurityPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SecurityPoliciesAttributes) InternalWithRef(ref terra.Reference) SecurityPoliciesAttributes {
	return SecurityPoliciesAttributes{ref: ref}
}

func (sp SecurityPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SecurityPoliciesAttributes) Firewall() terra.ListValue[SecurityPoliciesFirewallAttributes] {
	return terra.ReferenceAsList[SecurityPoliciesFirewallAttributes](sp.ref.Append("firewall"))
}

type SecurityPoliciesFirewallAttributes struct {
	ref terra.Reference
}

func (f SecurityPoliciesFirewallAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f SecurityPoliciesFirewallAttributes) InternalWithRef(ref terra.Reference) SecurityPoliciesFirewallAttributes {
	return SecurityPoliciesFirewallAttributes{ref: ref}
}

func (f SecurityPoliciesFirewallAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f SecurityPoliciesFirewallAttributes) CdnFrontdoorFirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("cdn_frontdoor_firewall_policy_id"))
}

func (f SecurityPoliciesFirewallAttributes) Association() terra.ListValue[SecurityPoliciesFirewallAssociationAttributes] {
	return terra.ReferenceAsList[SecurityPoliciesFirewallAssociationAttributes](f.ref.Append("association"))
}

type SecurityPoliciesFirewallAssociationAttributes struct {
	ref terra.Reference
}

func (a SecurityPoliciesFirewallAssociationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SecurityPoliciesFirewallAssociationAttributes) InternalWithRef(ref terra.Reference) SecurityPoliciesFirewallAssociationAttributes {
	return SecurityPoliciesFirewallAssociationAttributes{ref: ref}
}

func (a SecurityPoliciesFirewallAssociationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SecurityPoliciesFirewallAssociationAttributes) PatternsToMatch() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("patterns_to_match"))
}

func (a SecurityPoliciesFirewallAssociationAttributes) Domain() terra.ListValue[SecurityPoliciesFirewallAssociationDomainAttributes] {
	return terra.ReferenceAsList[SecurityPoliciesFirewallAssociationDomainAttributes](a.ref.Append("domain"))
}

type SecurityPoliciesFirewallAssociationDomainAttributes struct {
	ref terra.Reference
}

func (d SecurityPoliciesFirewallAssociationDomainAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d SecurityPoliciesFirewallAssociationDomainAttributes) InternalWithRef(ref terra.Reference) SecurityPoliciesFirewallAssociationDomainAttributes {
	return SecurityPoliciesFirewallAssociationDomainAttributes{ref: ref}
}

func (d SecurityPoliciesFirewallAssociationDomainAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d SecurityPoliciesFirewallAssociationDomainAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(d.ref.Append("active"))
}

func (d SecurityPoliciesFirewallAssociationDomainAttributes) CdnFrontdoorDomainId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("cdn_frontdoor_domain_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type SecurityPoliciesState struct {
	Firewall []SecurityPoliciesFirewallState `json:"firewall"`
}

type SecurityPoliciesFirewallState struct {
	CdnFrontdoorFirewallPolicyId string                                     `json:"cdn_frontdoor_firewall_policy_id"`
	Association                  []SecurityPoliciesFirewallAssociationState `json:"association"`
}

type SecurityPoliciesFirewallAssociationState struct {
	PatternsToMatch []string                                         `json:"patterns_to_match"`
	Domain          []SecurityPoliciesFirewallAssociationDomainState `json:"domain"`
}

type SecurityPoliciesFirewallAssociationDomainState struct {
	Active               bool   `json:"active"`
	CdnFrontdoorDomainId string `json:"cdn_frontdoor_domain_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
