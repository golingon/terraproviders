// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoScale struct {
	// EvaluationInterval: string, optional
	EvaluationInterval terra.StringValue `hcl:"evaluation_interval,attr"`
	// Formula: string, required
	Formula terra.StringValue `hcl:"formula,attr" validate:"required"`
}

type Certificate struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// StoreLocation: string, required
	StoreLocation terra.StringValue `hcl:"store_location,attr" validate:"required"`
	// StoreName: string, optional
	StoreName terra.StringValue `hcl:"store_name,attr"`
	// Visibility: set of string, optional
	Visibility terra.SetValue[terra.StringValue] `hcl:"visibility,attr"`
}

type ContainerConfiguration struct {
	// ContainerImageNames: set of string, optional
	ContainerImageNames terra.SetValue[terra.StringValue] `hcl:"container_image_names,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// ContainerConfigurationContainerRegistries: min=0
	ContainerRegistries []ContainerConfigurationContainerRegistries `hcl:"container_registries,block" validate:"min=0"`
}

type ContainerConfigurationContainerRegistries struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// RegistryServer: string, optional
	RegistryServer terra.StringValue `hcl:"registry_server,attr"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
}

type DataDisks struct {
	// Caching: string, optional
	Caching terra.StringValue `hcl:"caching,attr"`
	// DiskSizeGb: number, required
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr" validate:"required"`
	// Lun: number, required
	Lun terra.NumberValue `hcl:"lun,attr" validate:"required"`
	// StorageAccountType: string, optional
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr"`
}

type DiskEncryption struct {
	// DiskEncryptionTarget: string, required
	DiskEncryptionTarget terra.StringValue `hcl:"disk_encryption_target,attr" validate:"required"`
}

type Extensions struct {
	// AutoUpgradeMinorVersion: bool, optional
	AutoUpgradeMinorVersion terra.BoolValue `hcl:"auto_upgrade_minor_version,attr"`
	// AutomaticUpgradeEnabled: bool, optional
	AutomaticUpgradeEnabled terra.BoolValue `hcl:"automatic_upgrade_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// ProvisionAfterExtensions: set of string, optional
	ProvisionAfterExtensions terra.SetValue[terra.StringValue] `hcl:"provision_after_extensions,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// SettingsJson: string, optional
	SettingsJson terra.StringValue `hcl:"settings_json,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, optional
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr"`
}

type FixedScale struct {
	// NodeDeallocationMethod: string, optional
	NodeDeallocationMethod terra.StringValue `hcl:"node_deallocation_method,attr"`
	// ResizeTimeout: string, optional
	ResizeTimeout terra.StringValue `hcl:"resize_timeout,attr"`
	// TargetDedicatedNodes: number, optional
	TargetDedicatedNodes terra.NumberValue `hcl:"target_dedicated_nodes,attr"`
	// TargetLowPriorityNodes: number, optional
	TargetLowPriorityNodes terra.NumberValue `hcl:"target_low_priority_nodes,attr"`
}

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Mount struct {
	// MountAzureBlobFileSystem: optional
	AzureBlobFileSystem *MountAzureBlobFileSystem `hcl:"azure_blob_file_system,block"`
	// MountAzureFileShare: min=0
	AzureFileShare []MountAzureFileShare `hcl:"azure_file_share,block" validate:"min=0"`
	// MountCifsMount: min=0
	CifsMount []MountCifsMount `hcl:"cifs_mount,block" validate:"min=0"`
	// MountNfsMount: min=0
	NfsMount []MountNfsMount `hcl:"nfs_mount,block" validate:"min=0"`
}

type MountAzureBlobFileSystem struct {
	// AccountKey: string, optional
	AccountKey terra.StringValue `hcl:"account_key,attr"`
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// BlobfuseOptions: string, optional
	BlobfuseOptions terra.StringValue `hcl:"blobfuse_options,attr"`
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// IdentityId: string, optional
	IdentityId terra.StringValue `hcl:"identity_id,attr"`
	// RelativeMountPath: string, required
	RelativeMountPath terra.StringValue `hcl:"relative_mount_path,attr" validate:"required"`
	// SasKey: string, optional
	SasKey terra.StringValue `hcl:"sas_key,attr"`
}

type MountAzureFileShare struct {
	// AccountKey: string, required
	AccountKey terra.StringValue `hcl:"account_key,attr" validate:"required"`
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// AzureFileUrl: string, required
	AzureFileUrl terra.StringValue `hcl:"azure_file_url,attr" validate:"required"`
	// MountOptions: string, optional
	MountOptions terra.StringValue `hcl:"mount_options,attr"`
	// RelativeMountPath: string, required
	RelativeMountPath terra.StringValue `hcl:"relative_mount_path,attr" validate:"required"`
}

type MountCifsMount struct {
	// MountOptions: string, optional
	MountOptions terra.StringValue `hcl:"mount_options,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// RelativeMountPath: string, required
	RelativeMountPath terra.StringValue `hcl:"relative_mount_path,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}

type MountNfsMount struct {
	// MountOptions: string, optional
	MountOptions terra.StringValue `hcl:"mount_options,attr"`
	// RelativeMountPath: string, required
	RelativeMountPath terra.StringValue `hcl:"relative_mount_path,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type NetworkConfiguration struct {
	// AcceleratedNetworkingEnabled: bool, optional
	AcceleratedNetworkingEnabled terra.BoolValue `hcl:"accelerated_networking_enabled,attr"`
	// DynamicVnetAssignmentScope: string, optional
	DynamicVnetAssignmentScope terra.StringValue `hcl:"dynamic_vnet_assignment_scope,attr"`
	// PublicAddressProvisioningType: string, optional
	PublicAddressProvisioningType terra.StringValue `hcl:"public_address_provisioning_type,attr"`
	// PublicIps: set of string, optional
	PublicIps terra.SetValue[terra.StringValue] `hcl:"public_ips,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// NetworkConfigurationEndpointConfiguration: min=0
	EndpointConfiguration []NetworkConfigurationEndpointConfiguration `hcl:"endpoint_configuration,block" validate:"min=0"`
}

type NetworkConfigurationEndpointConfiguration struct {
	// BackendPort: number, required
	BackendPort terra.NumberValue `hcl:"backend_port,attr" validate:"required"`
	// FrontendPortRange: string, required
	FrontendPortRange terra.StringValue `hcl:"frontend_port_range,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRules: min=0
	NetworkSecurityGroupRules []NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRules `hcl:"network_security_group_rules,block" validate:"min=0"`
}

type NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRules struct {
	// Access: string, required
	Access terra.StringValue `hcl:"access,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// SourceAddressPrefix: string, required
	SourceAddressPrefix terra.StringValue `hcl:"source_address_prefix,attr" validate:"required"`
	// SourcePortRanges: list of string, optional
	SourcePortRanges terra.ListValue[terra.StringValue] `hcl:"source_port_ranges,attr"`
}

type NodePlacement struct {
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
}

type StartTask struct {
	// CommandLine: string, required
	CommandLine terra.StringValue `hcl:"command_line,attr" validate:"required"`
	// CommonEnvironmentProperties: map of string, optional
	CommonEnvironmentProperties terra.MapValue[terra.StringValue] `hcl:"common_environment_properties,attr"`
	// TaskRetryMaximum: number, optional
	TaskRetryMaximum terra.NumberValue `hcl:"task_retry_maximum,attr"`
	// WaitForSuccess: bool, optional
	WaitForSuccess terra.BoolValue `hcl:"wait_for_success,attr"`
	// StartTaskContainer: min=0
	Container []StartTaskContainer `hcl:"container,block" validate:"min=0"`
	// StartTaskResourceFile: min=0
	ResourceFile []StartTaskResourceFile `hcl:"resource_file,block" validate:"min=0"`
	// StartTaskUserIdentity: required
	UserIdentity *StartTaskUserIdentity `hcl:"user_identity,block" validate:"required"`
}

type StartTaskContainer struct {
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// RunOptions: string, optional
	RunOptions terra.StringValue `hcl:"run_options,attr"`
	// WorkingDirectory: string, optional
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
	// StartTaskContainerRegistry: min=0
	Registry []StartTaskContainerRegistry `hcl:"registry,block" validate:"min=0"`
}

type StartTaskContainerRegistry struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// RegistryServer: string, required
	RegistryServer terra.StringValue `hcl:"registry_server,attr" validate:"required"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
}

type StartTaskResourceFile struct {
	// AutoStorageContainerName: string, optional
	AutoStorageContainerName terra.StringValue `hcl:"auto_storage_container_name,attr"`
	// BlobPrefix: string, optional
	BlobPrefix terra.StringValue `hcl:"blob_prefix,attr"`
	// FileMode: string, optional
	FileMode terra.StringValue `hcl:"file_mode,attr"`
	// FilePath: string, optional
	FilePath terra.StringValue `hcl:"file_path,attr"`
	// HttpUrl: string, optional
	HttpUrl terra.StringValue `hcl:"http_url,attr"`
	// StorageContainerUrl: string, optional
	StorageContainerUrl terra.StringValue `hcl:"storage_container_url,attr"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
}

type StartTaskUserIdentity struct {
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// StartTaskUserIdentityAutoUser: optional
	AutoUser *StartTaskUserIdentityAutoUser `hcl:"auto_user,block"`
}

type StartTaskUserIdentityAutoUser struct {
	// ElevationLevel: string, optional
	ElevationLevel terra.StringValue `hcl:"elevation_level,attr"`
	// Scope: string, optional
	Scope terra.StringValue `hcl:"scope,attr"`
}

type StorageImageReference struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Offer: string, optional
	Offer terra.StringValue `hcl:"offer,attr"`
	// Publisher: string, optional
	Publisher terra.StringValue `hcl:"publisher,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type TaskSchedulingPolicy struct {
	// NodeFillType: string, optional
	NodeFillType terra.StringValue `hcl:"node_fill_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UserAccounts struct {
	// ElevationLevel: string, required
	ElevationLevel terra.StringValue `hcl:"elevation_level,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// UserAccountsLinuxUserConfiguration: min=0
	LinuxUserConfiguration []UserAccountsLinuxUserConfiguration `hcl:"linux_user_configuration,block" validate:"min=0"`
	// UserAccountsWindowsUserConfiguration: min=0
	WindowsUserConfiguration []UserAccountsWindowsUserConfiguration `hcl:"windows_user_configuration,block" validate:"min=0"`
}

type UserAccountsLinuxUserConfiguration struct {
	// Gid: number, optional
	Gid terra.NumberValue `hcl:"gid,attr"`
	// SshPrivateKey: string, optional
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr"`
	// Uid: number, optional
	Uid terra.NumberValue `hcl:"uid,attr"`
}

type UserAccountsWindowsUserConfiguration struct {
	// LoginMode: string, required
	LoginMode terra.StringValue `hcl:"login_mode,attr" validate:"required"`
}

type Windows struct {
	// EnableAutomaticUpdates: bool, optional
	EnableAutomaticUpdates terra.BoolValue `hcl:"enable_automatic_updates,attr"`
}

type AutoScaleAttributes struct {
	ref terra.Reference
}

func (as AutoScaleAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutoScaleAttributes) InternalWithRef(ref terra.Reference) AutoScaleAttributes {
	return AutoScaleAttributes{ref: ref}
}

func (as AutoScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutoScaleAttributes) EvaluationInterval() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("evaluation_interval"))
}

func (as AutoScaleAttributes) Formula() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("formula"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("id"))
}

func (c CertificateAttributes) StoreLocation() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store_location"))
}

func (c CertificateAttributes) StoreName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store_name"))
}

func (c CertificateAttributes) Visibility() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("visibility"))
}

type ContainerConfigurationAttributes struct {
	ref terra.Reference
}

func (cc ContainerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ContainerConfigurationAttributes) InternalWithRef(ref terra.Reference) ContainerConfigurationAttributes {
	return ContainerConfigurationAttributes{ref: ref}
}

func (cc ContainerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ContainerConfigurationAttributes) ContainerImageNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("container_image_names"))
}

func (cc ContainerConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("type"))
}

func (cc ContainerConfigurationAttributes) ContainerRegistries() terra.ListValue[ContainerConfigurationContainerRegistriesAttributes] {
	return terra.ReferenceAsList[ContainerConfigurationContainerRegistriesAttributes](cc.ref.Append("container_registries"))
}

type ContainerConfigurationContainerRegistriesAttributes struct {
	ref terra.Reference
}

func (cr ContainerConfigurationContainerRegistriesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr ContainerConfigurationContainerRegistriesAttributes) InternalWithRef(ref terra.Reference) ContainerConfigurationContainerRegistriesAttributes {
	return ContainerConfigurationContainerRegistriesAttributes{ref: ref}
}

func (cr ContainerConfigurationContainerRegistriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr ContainerConfigurationContainerRegistriesAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("password"))
}

func (cr ContainerConfigurationContainerRegistriesAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("registry_server"))
}

func (cr ContainerConfigurationContainerRegistriesAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("user_assigned_identity_id"))
}

func (cr ContainerConfigurationContainerRegistriesAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("user_name"))
}

type DataDisksAttributes struct {
	ref terra.Reference
}

func (dd DataDisksAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDisksAttributes) InternalWithRef(ref terra.Reference) DataDisksAttributes {
	return DataDisksAttributes{ref: ref}
}

func (dd DataDisksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDisksAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("caching"))
}

func (dd DataDisksAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("disk_size_gb"))
}

func (dd DataDisksAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("lun"))
}

func (dd DataDisksAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("storage_account_type"))
}

type DiskEncryptionAttributes struct {
	ref terra.Reference
}

func (de DiskEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DiskEncryptionAttributes) InternalWithRef(ref terra.Reference) DiskEncryptionAttributes {
	return DiskEncryptionAttributes{ref: ref}
}

func (de DiskEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DiskEncryptionAttributes) DiskEncryptionTarget() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("disk_encryption_target"))
}

type ExtensionsAttributes struct {
	ref terra.Reference
}

func (e ExtensionsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtensionsAttributes) InternalWithRef(ref terra.Reference) ExtensionsAttributes {
	return ExtensionsAttributes{ref: ref}
}

func (e ExtensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtensionsAttributes) AutoUpgradeMinorVersion() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("auto_upgrade_minor_version"))
}

func (e ExtensionsAttributes) AutomaticUpgradeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("automatic_upgrade_enabled"))
}

func (e ExtensionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ExtensionsAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protected_settings"))
}

func (e ExtensionsAttributes) ProvisionAfterExtensions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("provision_after_extensions"))
}

func (e ExtensionsAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("publisher"))
}

func (e ExtensionsAttributes) SettingsJson() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("settings_json"))
}

func (e ExtensionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e ExtensionsAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type_handler_version"))
}

type FixedScaleAttributes struct {
	ref terra.Reference
}

func (fs FixedScaleAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FixedScaleAttributes) InternalWithRef(ref terra.Reference) FixedScaleAttributes {
	return FixedScaleAttributes{ref: ref}
}

func (fs FixedScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FixedScaleAttributes) NodeDeallocationMethod() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("node_deallocation_method"))
}

func (fs FixedScaleAttributes) ResizeTimeout() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("resize_timeout"))
}

func (fs FixedScaleAttributes) TargetDedicatedNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("target_dedicated_nodes"))
}

func (fs FixedScaleAttributes) TargetLowPriorityNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("target_low_priority_nodes"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type MountAttributes struct {
	ref terra.Reference
}

func (m MountAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MountAttributes) InternalWithRef(ref terra.Reference) MountAttributes {
	return MountAttributes{ref: ref}
}

func (m MountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MountAttributes) AzureBlobFileSystem() terra.ListValue[MountAzureBlobFileSystemAttributes] {
	return terra.ReferenceAsList[MountAzureBlobFileSystemAttributes](m.ref.Append("azure_blob_file_system"))
}

func (m MountAttributes) AzureFileShare() terra.ListValue[MountAzureFileShareAttributes] {
	return terra.ReferenceAsList[MountAzureFileShareAttributes](m.ref.Append("azure_file_share"))
}

func (m MountAttributes) CifsMount() terra.ListValue[MountCifsMountAttributes] {
	return terra.ReferenceAsList[MountCifsMountAttributes](m.ref.Append("cifs_mount"))
}

func (m MountAttributes) NfsMount() terra.ListValue[MountNfsMountAttributes] {
	return terra.ReferenceAsList[MountNfsMountAttributes](m.ref.Append("nfs_mount"))
}

type MountAzureBlobFileSystemAttributes struct {
	ref terra.Reference
}

func (abfs MountAzureBlobFileSystemAttributes) InternalRef() (terra.Reference, error) {
	return abfs.ref, nil
}

func (abfs MountAzureBlobFileSystemAttributes) InternalWithRef(ref terra.Reference) MountAzureBlobFileSystemAttributes {
	return MountAzureBlobFileSystemAttributes{ref: ref}
}

func (abfs MountAzureBlobFileSystemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abfs.ref.InternalTokens()
}

func (abfs MountAzureBlobFileSystemAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("account_key"))
}

func (abfs MountAzureBlobFileSystemAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("account_name"))
}

func (abfs MountAzureBlobFileSystemAttributes) BlobfuseOptions() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("blobfuse_options"))
}

func (abfs MountAzureBlobFileSystemAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("container_name"))
}

func (abfs MountAzureBlobFileSystemAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("identity_id"))
}

func (abfs MountAzureBlobFileSystemAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("relative_mount_path"))
}

func (abfs MountAzureBlobFileSystemAttributes) SasKey() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("sas_key"))
}

type MountAzureFileShareAttributes struct {
	ref terra.Reference
}

func (afs MountAzureFileShareAttributes) InternalRef() (terra.Reference, error) {
	return afs.ref, nil
}

func (afs MountAzureFileShareAttributes) InternalWithRef(ref terra.Reference) MountAzureFileShareAttributes {
	return MountAzureFileShareAttributes{ref: ref}
}

func (afs MountAzureFileShareAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return afs.ref.InternalTokens()
}

func (afs MountAzureFileShareAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("account_key"))
}

func (afs MountAzureFileShareAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("account_name"))
}

func (afs MountAzureFileShareAttributes) AzureFileUrl() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("azure_file_url"))
}

func (afs MountAzureFileShareAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("mount_options"))
}

func (afs MountAzureFileShareAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("relative_mount_path"))
}

type MountCifsMountAttributes struct {
	ref terra.Reference
}

func (cm MountCifsMountAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm MountCifsMountAttributes) InternalWithRef(ref terra.Reference) MountCifsMountAttributes {
	return MountCifsMountAttributes{ref: ref}
}

func (cm MountCifsMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm MountCifsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("mount_options"))
}

func (cm MountCifsMountAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("password"))
}

func (cm MountCifsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("relative_mount_path"))
}

func (cm MountCifsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("source"))
}

func (cm MountCifsMountAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("user_name"))
}

type MountNfsMountAttributes struct {
	ref terra.Reference
}

func (nm MountNfsMountAttributes) InternalRef() (terra.Reference, error) {
	return nm.ref, nil
}

func (nm MountNfsMountAttributes) InternalWithRef(ref terra.Reference) MountNfsMountAttributes {
	return MountNfsMountAttributes{ref: ref}
}

func (nm MountNfsMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nm.ref.InternalTokens()
}

func (nm MountNfsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("mount_options"))
}

func (nm MountNfsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("relative_mount_path"))
}

func (nm MountNfsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("source"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) AcceleratedNetworkingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("accelerated_networking_enabled"))
}

func (nc NetworkConfigurationAttributes) DynamicVnetAssignmentScope() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("dynamic_vnet_assignment_scope"))
}

func (nc NetworkConfigurationAttributes) PublicAddressProvisioningType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("public_address_provisioning_type"))
}

func (nc NetworkConfigurationAttributes) PublicIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("public_ips"))
}

func (nc NetworkConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("subnet_id"))
}

func (nc NetworkConfigurationAttributes) EndpointConfiguration() terra.ListValue[NetworkConfigurationEndpointConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationEndpointConfigurationAttributes](nc.ref.Append("endpoint_configuration"))
}

type NetworkConfigurationEndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationEndpointConfigurationAttributes {
	return NetworkConfigurationEndpointConfigurationAttributes{ref: ref}
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("backend_port"))
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) FrontendPortRange() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("frontend_port_range"))
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("name"))
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("protocol"))
}

func (ec NetworkConfigurationEndpointConfigurationAttributes) NetworkSecurityGroupRules() terra.ListValue[NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes](ec.ref.Append("network_security_group_rules"))
}

type NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes struct {
	ref terra.Reference
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalRef() (terra.Reference, error) {
	return nsgr.ref, nil
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes {
	return NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes{ref: ref}
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nsgr.ref.InternalTokens()
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) Access() terra.StringValue {
	return terra.ReferenceAsString(nsgr.ref.Append("access"))
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(nsgr.ref.Append("priority"))
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) SourceAddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(nsgr.ref.Append("source_address_prefix"))
}

func (nsgr NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) SourcePortRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nsgr.ref.Append("source_port_ranges"))
}

type NodePlacementAttributes struct {
	ref terra.Reference
}

func (np NodePlacementAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NodePlacementAttributes) InternalWithRef(ref terra.Reference) NodePlacementAttributes {
	return NodePlacementAttributes{ref: ref}
}

func (np NodePlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NodePlacementAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("policy"))
}

type StartTaskAttributes struct {
	ref terra.Reference
}

func (st StartTaskAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st StartTaskAttributes) InternalWithRef(ref terra.Reference) StartTaskAttributes {
	return StartTaskAttributes{ref: ref}
}

func (st StartTaskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st StartTaskAttributes) CommandLine() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("command_line"))
}

func (st StartTaskAttributes) CommonEnvironmentProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](st.ref.Append("common_environment_properties"))
}

func (st StartTaskAttributes) TaskRetryMaximum() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("task_retry_maximum"))
}

func (st StartTaskAttributes) WaitForSuccess() terra.BoolValue {
	return terra.ReferenceAsBool(st.ref.Append("wait_for_success"))
}

func (st StartTaskAttributes) Container() terra.ListValue[StartTaskContainerAttributes] {
	return terra.ReferenceAsList[StartTaskContainerAttributes](st.ref.Append("container"))
}

func (st StartTaskAttributes) ResourceFile() terra.ListValue[StartTaskResourceFileAttributes] {
	return terra.ReferenceAsList[StartTaskResourceFileAttributes](st.ref.Append("resource_file"))
}

func (st StartTaskAttributes) UserIdentity() terra.ListValue[StartTaskUserIdentityAttributes] {
	return terra.ReferenceAsList[StartTaskUserIdentityAttributes](st.ref.Append("user_identity"))
}

type StartTaskContainerAttributes struct {
	ref terra.Reference
}

func (c StartTaskContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StartTaskContainerAttributes) InternalWithRef(ref terra.Reference) StartTaskContainerAttributes {
	return StartTaskContainerAttributes{ref: ref}
}

func (c StartTaskContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StartTaskContainerAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_name"))
}

func (c StartTaskContainerAttributes) RunOptions() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("run_options"))
}

func (c StartTaskContainerAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_directory"))
}

func (c StartTaskContainerAttributes) Registry() terra.ListValue[StartTaskContainerRegistryAttributes] {
	return terra.ReferenceAsList[StartTaskContainerRegistryAttributes](c.ref.Append("registry"))
}

type StartTaskContainerRegistryAttributes struct {
	ref terra.Reference
}

func (r StartTaskContainerRegistryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r StartTaskContainerRegistryAttributes) InternalWithRef(ref terra.Reference) StartTaskContainerRegistryAttributes {
	return StartTaskContainerRegistryAttributes{ref: ref}
}

func (r StartTaskContainerRegistryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r StartTaskContainerRegistryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("password"))
}

func (r StartTaskContainerRegistryAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("registry_server"))
}

func (r StartTaskContainerRegistryAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("user_assigned_identity_id"))
}

func (r StartTaskContainerRegistryAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("user_name"))
}

type StartTaskResourceFileAttributes struct {
	ref terra.Reference
}

func (rf StartTaskResourceFileAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf StartTaskResourceFileAttributes) InternalWithRef(ref terra.Reference) StartTaskResourceFileAttributes {
	return StartTaskResourceFileAttributes{ref: ref}
}

func (rf StartTaskResourceFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf StartTaskResourceFileAttributes) AutoStorageContainerName() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("auto_storage_container_name"))
}

func (rf StartTaskResourceFileAttributes) BlobPrefix() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("blob_prefix"))
}

func (rf StartTaskResourceFileAttributes) FileMode() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("file_mode"))
}

func (rf StartTaskResourceFileAttributes) FilePath() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("file_path"))
}

func (rf StartTaskResourceFileAttributes) HttpUrl() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("http_url"))
}

func (rf StartTaskResourceFileAttributes) StorageContainerUrl() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("storage_container_url"))
}

func (rf StartTaskResourceFileAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("user_assigned_identity_id"))
}

type StartTaskUserIdentityAttributes struct {
	ref terra.Reference
}

func (ui StartTaskUserIdentityAttributes) InternalRef() (terra.Reference, error) {
	return ui.ref, nil
}

func (ui StartTaskUserIdentityAttributes) InternalWithRef(ref terra.Reference) StartTaskUserIdentityAttributes {
	return StartTaskUserIdentityAttributes{ref: ref}
}

func (ui StartTaskUserIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ui.ref.InternalTokens()
}

func (ui StartTaskUserIdentityAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(ui.ref.Append("user_name"))
}

func (ui StartTaskUserIdentityAttributes) AutoUser() terra.ListValue[StartTaskUserIdentityAutoUserAttributes] {
	return terra.ReferenceAsList[StartTaskUserIdentityAutoUserAttributes](ui.ref.Append("auto_user"))
}

type StartTaskUserIdentityAutoUserAttributes struct {
	ref terra.Reference
}

func (au StartTaskUserIdentityAutoUserAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au StartTaskUserIdentityAutoUserAttributes) InternalWithRef(ref terra.Reference) StartTaskUserIdentityAutoUserAttributes {
	return StartTaskUserIdentityAutoUserAttributes{ref: ref}
}

func (au StartTaskUserIdentityAutoUserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au StartTaskUserIdentityAutoUserAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("elevation_level"))
}

func (au StartTaskUserIdentityAutoUserAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("scope"))
}

type StorageImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir StorageImageReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir StorageImageReferenceAttributes) InternalWithRef(ref terra.Reference) StorageImageReferenceAttributes {
	return StorageImageReferenceAttributes{ref: ref}
}

func (sir StorageImageReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir StorageImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("id"))
}

func (sir StorageImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("offer"))
}

func (sir StorageImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("publisher"))
}

func (sir StorageImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("sku"))
}

func (sir StorageImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("version"))
}

type TaskSchedulingPolicyAttributes struct {
	ref terra.Reference
}

func (tsp TaskSchedulingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return tsp.ref, nil
}

func (tsp TaskSchedulingPolicyAttributes) InternalWithRef(ref terra.Reference) TaskSchedulingPolicyAttributes {
	return TaskSchedulingPolicyAttributes{ref: ref}
}

func (tsp TaskSchedulingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tsp.ref.InternalTokens()
}

func (tsp TaskSchedulingPolicyAttributes) NodeFillType() terra.StringValue {
	return terra.ReferenceAsString(tsp.ref.Append("node_fill_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UserAccountsAttributes struct {
	ref terra.Reference
}

func (ua UserAccountsAttributes) InternalRef() (terra.Reference, error) {
	return ua.ref, nil
}

func (ua UserAccountsAttributes) InternalWithRef(ref terra.Reference) UserAccountsAttributes {
	return UserAccountsAttributes{ref: ref}
}

func (ua UserAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ua.ref.InternalTokens()
}

func (ua UserAccountsAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("elevation_level"))
}

func (ua UserAccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("name"))
}

func (ua UserAccountsAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("password"))
}

func (ua UserAccountsAttributes) LinuxUserConfiguration() terra.ListValue[UserAccountsLinuxUserConfigurationAttributes] {
	return terra.ReferenceAsList[UserAccountsLinuxUserConfigurationAttributes](ua.ref.Append("linux_user_configuration"))
}

func (ua UserAccountsAttributes) WindowsUserConfiguration() terra.ListValue[UserAccountsWindowsUserConfigurationAttributes] {
	return terra.ReferenceAsList[UserAccountsWindowsUserConfigurationAttributes](ua.ref.Append("windows_user_configuration"))
}

type UserAccountsLinuxUserConfigurationAttributes struct {
	ref terra.Reference
}

func (luc UserAccountsLinuxUserConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return luc.ref, nil
}

func (luc UserAccountsLinuxUserConfigurationAttributes) InternalWithRef(ref terra.Reference) UserAccountsLinuxUserConfigurationAttributes {
	return UserAccountsLinuxUserConfigurationAttributes{ref: ref}
}

func (luc UserAccountsLinuxUserConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return luc.ref.InternalTokens()
}

func (luc UserAccountsLinuxUserConfigurationAttributes) Gid() terra.NumberValue {
	return terra.ReferenceAsNumber(luc.ref.Append("gid"))
}

func (luc UserAccountsLinuxUserConfigurationAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(luc.ref.Append("ssh_private_key"))
}

func (luc UserAccountsLinuxUserConfigurationAttributes) Uid() terra.NumberValue {
	return terra.ReferenceAsNumber(luc.ref.Append("uid"))
}

type UserAccountsWindowsUserConfigurationAttributes struct {
	ref terra.Reference
}

func (wuc UserAccountsWindowsUserConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wuc.ref, nil
}

func (wuc UserAccountsWindowsUserConfigurationAttributes) InternalWithRef(ref terra.Reference) UserAccountsWindowsUserConfigurationAttributes {
	return UserAccountsWindowsUserConfigurationAttributes{ref: ref}
}

func (wuc UserAccountsWindowsUserConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wuc.ref.InternalTokens()
}

func (wuc UserAccountsWindowsUserConfigurationAttributes) LoginMode() terra.StringValue {
	return terra.ReferenceAsString(wuc.ref.Append("login_mode"))
}

type WindowsAttributes struct {
	ref terra.Reference
}

func (w WindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WindowsAttributes) InternalWithRef(ref terra.Reference) WindowsAttributes {
	return WindowsAttributes{ref: ref}
}

func (w WindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WindowsAttributes) EnableAutomaticUpdates() terra.BoolValue {
	return terra.ReferenceAsBool(w.ref.Append("enable_automatic_updates"))
}

type AutoScaleState struct {
	EvaluationInterval string `json:"evaluation_interval"`
	Formula            string `json:"formula"`
}

type CertificateState struct {
	Id            string   `json:"id"`
	StoreLocation string   `json:"store_location"`
	StoreName     string   `json:"store_name"`
	Visibility    []string `json:"visibility"`
}

type ContainerConfigurationState struct {
	ContainerImageNames []string                                         `json:"container_image_names"`
	Type                string                                           `json:"type"`
	ContainerRegistries []ContainerConfigurationContainerRegistriesState `json:"container_registries"`
}

type ContainerConfigurationContainerRegistriesState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type DataDisksState struct {
	Caching            string  `json:"caching"`
	DiskSizeGb         float64 `json:"disk_size_gb"`
	Lun                float64 `json:"lun"`
	StorageAccountType string  `json:"storage_account_type"`
}

type DiskEncryptionState struct {
	DiskEncryptionTarget string `json:"disk_encryption_target"`
}

type ExtensionsState struct {
	AutoUpgradeMinorVersion  bool     `json:"auto_upgrade_minor_version"`
	AutomaticUpgradeEnabled  bool     `json:"automatic_upgrade_enabled"`
	Name                     string   `json:"name"`
	ProtectedSettings        string   `json:"protected_settings"`
	ProvisionAfterExtensions []string `json:"provision_after_extensions"`
	Publisher                string   `json:"publisher"`
	SettingsJson             string   `json:"settings_json"`
	Type                     string   `json:"type"`
	TypeHandlerVersion       string   `json:"type_handler_version"`
}

type FixedScaleState struct {
	NodeDeallocationMethod string  `json:"node_deallocation_method"`
	ResizeTimeout          string  `json:"resize_timeout"`
	TargetDedicatedNodes   float64 `json:"target_dedicated_nodes"`
	TargetLowPriorityNodes float64 `json:"target_low_priority_nodes"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type MountState struct {
	AzureBlobFileSystem []MountAzureBlobFileSystemState `json:"azure_blob_file_system"`
	AzureFileShare      []MountAzureFileShareState      `json:"azure_file_share"`
	CifsMount           []MountCifsMountState           `json:"cifs_mount"`
	NfsMount            []MountNfsMountState            `json:"nfs_mount"`
}

type MountAzureBlobFileSystemState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	BlobfuseOptions   string `json:"blobfuse_options"`
	ContainerName     string `json:"container_name"`
	IdentityId        string `json:"identity_id"`
	RelativeMountPath string `json:"relative_mount_path"`
	SasKey            string `json:"sas_key"`
}

type MountAzureFileShareState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	AzureFileUrl      string `json:"azure_file_url"`
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
}

type MountCifsMountState struct {
	MountOptions      string `json:"mount_options"`
	Password          string `json:"password"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
	UserName          string `json:"user_name"`
}

type MountNfsMountState struct {
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
}

type NetworkConfigurationState struct {
	AcceleratedNetworkingEnabled  bool                                             `json:"accelerated_networking_enabled"`
	DynamicVnetAssignmentScope    string                                           `json:"dynamic_vnet_assignment_scope"`
	PublicAddressProvisioningType string                                           `json:"public_address_provisioning_type"`
	PublicIps                     []string                                         `json:"public_ips"`
	SubnetId                      string                                           `json:"subnet_id"`
	EndpointConfiguration         []NetworkConfigurationEndpointConfigurationState `json:"endpoint_configuration"`
}

type NetworkConfigurationEndpointConfigurationState struct {
	BackendPort               float64                                                                   `json:"backend_port"`
	FrontendPortRange         string                                                                    `json:"frontend_port_range"`
	Name                      string                                                                    `json:"name"`
	Protocol                  string                                                                    `json:"protocol"`
	NetworkSecurityGroupRules []NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesState `json:"network_security_group_rules"`
}

type NetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesState struct {
	Access              string   `json:"access"`
	Priority            float64  `json:"priority"`
	SourceAddressPrefix string   `json:"source_address_prefix"`
	SourcePortRanges    []string `json:"source_port_ranges"`
}

type NodePlacementState struct {
	Policy string `json:"policy"`
}

type StartTaskState struct {
	CommandLine                 string                       `json:"command_line"`
	CommonEnvironmentProperties map[string]string            `json:"common_environment_properties"`
	TaskRetryMaximum            float64                      `json:"task_retry_maximum"`
	WaitForSuccess              bool                         `json:"wait_for_success"`
	Container                   []StartTaskContainerState    `json:"container"`
	ResourceFile                []StartTaskResourceFileState `json:"resource_file"`
	UserIdentity                []StartTaskUserIdentityState `json:"user_identity"`
}

type StartTaskContainerState struct {
	ImageName        string                            `json:"image_name"`
	RunOptions       string                            `json:"run_options"`
	WorkingDirectory string                            `json:"working_directory"`
	Registry         []StartTaskContainerRegistryState `json:"registry"`
}

type StartTaskContainerRegistryState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type StartTaskResourceFileState struct {
	AutoStorageContainerName string `json:"auto_storage_container_name"`
	BlobPrefix               string `json:"blob_prefix"`
	FileMode                 string `json:"file_mode"`
	FilePath                 string `json:"file_path"`
	HttpUrl                  string `json:"http_url"`
	StorageContainerUrl      string `json:"storage_container_url"`
	UserAssignedIdentityId   string `json:"user_assigned_identity_id"`
}

type StartTaskUserIdentityState struct {
	UserName string                               `json:"user_name"`
	AutoUser []StartTaskUserIdentityAutoUserState `json:"auto_user"`
}

type StartTaskUserIdentityAutoUserState struct {
	ElevationLevel string `json:"elevation_level"`
	Scope          string `json:"scope"`
}

type StorageImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type TaskSchedulingPolicyState struct {
	NodeFillType string `json:"node_fill_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UserAccountsState struct {
	ElevationLevel           string                                      `json:"elevation_level"`
	Name                     string                                      `json:"name"`
	Password                 string                                      `json:"password"`
	LinuxUserConfiguration   []UserAccountsLinuxUserConfigurationState   `json:"linux_user_configuration"`
	WindowsUserConfiguration []UserAccountsWindowsUserConfigurationState `json:"windows_user_configuration"`
}

type UserAccountsLinuxUserConfigurationState struct {
	Gid           float64 `json:"gid"`
	SshPrivateKey string  `json:"ssh_private_key"`
	Uid           float64 `json:"uid"`
}

type UserAccountsWindowsUserConfigurationState struct {
	LoginMode string `json:"login_mode"`
}

type WindowsState struct {
	EnableAutomaticUpdates bool `json:"enable_automatic_updates"`
}
