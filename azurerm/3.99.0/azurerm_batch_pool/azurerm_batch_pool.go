// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_batch_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBatchPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abp *Resource) Type() string {
	return "azurerm_batch_pool"
}

// LocalName returns the local name for [Resource].
func (abp *Resource) LocalName() string {
	return abp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abp *Resource) Configuration() interface{} {
	return abp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abp *Resource) Dependencies() terra.Dependencies {
	return abp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abp *Resource) LifecycleManagement() *terra.Lifecycle {
	return abp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abp *Resource) Attributes() azurermBatchPoolAttributes {
	return azurermBatchPoolAttributes{ref: terra.ReferenceResource(abp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abp *Resource) ImportState(state io.Reader) error {
	abp.state = &azurermBatchPoolState{}
	if err := json.NewDecoder(state).Decode(abp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abp.Type(), abp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abp *Resource) State() (*azurermBatchPoolState, bool) {
	return abp.state, abp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abp *Resource) StateMust() *azurermBatchPoolState {
	if abp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abp.Type(), abp.LocalName()))
	}
	return abp.state
}

// Args contains the configurations for azurerm_batch_pool.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InterNodeCommunication: string, optional
	InterNodeCommunication terra.StringValue `hcl:"inter_node_communication,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// MaxTasksPerNode: number, optional
	MaxTasksPerNode terra.NumberValue `hcl:"max_tasks_per_node,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeAgentSkuId: string, required
	NodeAgentSkuId terra.StringValue `hcl:"node_agent_sku_id,attr" validate:"required"`
	// OsDiskPlacement: string, optional
	OsDiskPlacement terra.StringValue `hcl:"os_disk_placement,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StopPendingResizeOperation: bool, optional
	StopPendingResizeOperation terra.BoolValue `hcl:"stop_pending_resize_operation,attr"`
	// TargetNodeCommunicationMode: string, optional
	TargetNodeCommunicationMode terra.StringValue `hcl:"target_node_communication_mode,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// AutoScale: optional
	AutoScale *AutoScale `hcl:"auto_scale,block"`
	// Certificate: min=0
	Certificate []Certificate `hcl:"certificate,block" validate:"min=0"`
	// ContainerConfiguration: optional
	ContainerConfiguration *ContainerConfiguration `hcl:"container_configuration,block"`
	// DataDisks: min=0
	DataDisks []DataDisks `hcl:"data_disks,block" validate:"min=0"`
	// DiskEncryption: min=0
	DiskEncryption []DiskEncryption `hcl:"disk_encryption,block" validate:"min=0"`
	// Extensions: min=0
	Extensions []Extensions `hcl:"extensions,block" validate:"min=0"`
	// FixedScale: optional
	FixedScale *FixedScale `hcl:"fixed_scale,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Mount: min=0
	Mount []Mount `hcl:"mount,block" validate:"min=0"`
	// NetworkConfiguration: optional
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
	// NodePlacement: min=0
	NodePlacement []NodePlacement `hcl:"node_placement,block" validate:"min=0"`
	// StartTask: optional
	StartTask *StartTask `hcl:"start_task,block"`
	// StorageImageReference: required
	StorageImageReference *StorageImageReference `hcl:"storage_image_reference,block" validate:"required"`
	// TaskSchedulingPolicy: min=0
	TaskSchedulingPolicy []TaskSchedulingPolicy `hcl:"task_scheduling_policy,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UserAccounts: min=0
	UserAccounts []UserAccounts `hcl:"user_accounts,block" validate:"min=0"`
	// Windows: min=0
	Windows []Windows `hcl:"windows,block" validate:"min=0"`
}

type azurermBatchPoolAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("account_name"))
}

// DisplayName returns a reference to field display_name of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("id"))
}

// InterNodeCommunication returns a reference to field inter_node_communication of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) InterNodeCommunication() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("inter_node_communication"))
}

// LicenseType returns a reference to field license_type of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("license_type"))
}

// MaxTasksPerNode returns a reference to field max_tasks_per_node of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) MaxTasksPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(abp.ref.Append("max_tasks_per_node"))
}

// Metadata returns a reference to field metadata of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abp.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("name"))
}

// NodeAgentSkuId returns a reference to field node_agent_sku_id of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) NodeAgentSkuId() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("node_agent_sku_id"))
}

// OsDiskPlacement returns a reference to field os_disk_placement of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) OsDiskPlacement() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("os_disk_placement"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("resource_group_name"))
}

// StopPendingResizeOperation returns a reference to field stop_pending_resize_operation of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) StopPendingResizeOperation() terra.BoolValue {
	return terra.ReferenceAsBool(abp.ref.Append("stop_pending_resize_operation"))
}

// TargetNodeCommunicationMode returns a reference to field target_node_communication_mode of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) TargetNodeCommunicationMode() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("target_node_communication_mode"))
}

// VmSize returns a reference to field vm_size of azurerm_batch_pool.
func (abp azurermBatchPoolAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("vm_size"))
}

func (abp azurermBatchPoolAttributes) AutoScale() terra.ListValue[AutoScaleAttributes] {
	return terra.ReferenceAsList[AutoScaleAttributes](abp.ref.Append("auto_scale"))
}

func (abp azurermBatchPoolAttributes) Certificate() terra.ListValue[CertificateAttributes] {
	return terra.ReferenceAsList[CertificateAttributes](abp.ref.Append("certificate"))
}

func (abp azurermBatchPoolAttributes) ContainerConfiguration() terra.ListValue[ContainerConfigurationAttributes] {
	return terra.ReferenceAsList[ContainerConfigurationAttributes](abp.ref.Append("container_configuration"))
}

func (abp azurermBatchPoolAttributes) DataDisks() terra.ListValue[DataDisksAttributes] {
	return terra.ReferenceAsList[DataDisksAttributes](abp.ref.Append("data_disks"))
}

func (abp azurermBatchPoolAttributes) DiskEncryption() terra.ListValue[DiskEncryptionAttributes] {
	return terra.ReferenceAsList[DiskEncryptionAttributes](abp.ref.Append("disk_encryption"))
}

func (abp azurermBatchPoolAttributes) Extensions() terra.ListValue[ExtensionsAttributes] {
	return terra.ReferenceAsList[ExtensionsAttributes](abp.ref.Append("extensions"))
}

func (abp azurermBatchPoolAttributes) FixedScale() terra.ListValue[FixedScaleAttributes] {
	return terra.ReferenceAsList[FixedScaleAttributes](abp.ref.Append("fixed_scale"))
}

func (abp azurermBatchPoolAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](abp.ref.Append("identity"))
}

func (abp azurermBatchPoolAttributes) Mount() terra.ListValue[MountAttributes] {
	return terra.ReferenceAsList[MountAttributes](abp.ref.Append("mount"))
}

func (abp azurermBatchPoolAttributes) NetworkConfiguration() terra.ListValue[NetworkConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationAttributes](abp.ref.Append("network_configuration"))
}

func (abp azurermBatchPoolAttributes) NodePlacement() terra.ListValue[NodePlacementAttributes] {
	return terra.ReferenceAsList[NodePlacementAttributes](abp.ref.Append("node_placement"))
}

func (abp azurermBatchPoolAttributes) StartTask() terra.ListValue[StartTaskAttributes] {
	return terra.ReferenceAsList[StartTaskAttributes](abp.ref.Append("start_task"))
}

func (abp azurermBatchPoolAttributes) StorageImageReference() terra.ListValue[StorageImageReferenceAttributes] {
	return terra.ReferenceAsList[StorageImageReferenceAttributes](abp.ref.Append("storage_image_reference"))
}

func (abp azurermBatchPoolAttributes) TaskSchedulingPolicy() terra.ListValue[TaskSchedulingPolicyAttributes] {
	return terra.ReferenceAsList[TaskSchedulingPolicyAttributes](abp.ref.Append("task_scheduling_policy"))
}

func (abp azurermBatchPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abp.ref.Append("timeouts"))
}

func (abp azurermBatchPoolAttributes) UserAccounts() terra.ListValue[UserAccountsAttributes] {
	return terra.ReferenceAsList[UserAccountsAttributes](abp.ref.Append("user_accounts"))
}

func (abp azurermBatchPoolAttributes) Windows() terra.ListValue[WindowsAttributes] {
	return terra.ReferenceAsList[WindowsAttributes](abp.ref.Append("windows"))
}

type azurermBatchPoolState struct {
	AccountName                 string                        `json:"account_name"`
	DisplayName                 string                        `json:"display_name"`
	Id                          string                        `json:"id"`
	InterNodeCommunication      string                        `json:"inter_node_communication"`
	LicenseType                 string                        `json:"license_type"`
	MaxTasksPerNode             float64                       `json:"max_tasks_per_node"`
	Metadata                    map[string]string             `json:"metadata"`
	Name                        string                        `json:"name"`
	NodeAgentSkuId              string                        `json:"node_agent_sku_id"`
	OsDiskPlacement             string                        `json:"os_disk_placement"`
	ResourceGroupName           string                        `json:"resource_group_name"`
	StopPendingResizeOperation  bool                          `json:"stop_pending_resize_operation"`
	TargetNodeCommunicationMode string                        `json:"target_node_communication_mode"`
	VmSize                      string                        `json:"vm_size"`
	AutoScale                   []AutoScaleState              `json:"auto_scale"`
	Certificate                 []CertificateState            `json:"certificate"`
	ContainerConfiguration      []ContainerConfigurationState `json:"container_configuration"`
	DataDisks                   []DataDisksState              `json:"data_disks"`
	DiskEncryption              []DiskEncryptionState         `json:"disk_encryption"`
	Extensions                  []ExtensionsState             `json:"extensions"`
	FixedScale                  []FixedScaleState             `json:"fixed_scale"`
	Identity                    []IdentityState               `json:"identity"`
	Mount                       []MountState                  `json:"mount"`
	NetworkConfiguration        []NetworkConfigurationState   `json:"network_configuration"`
	NodePlacement               []NodePlacementState          `json:"node_placement"`
	StartTask                   []StartTaskState              `json:"start_task"`
	StorageImageReference       []StorageImageReferenceState  `json:"storage_image_reference"`
	TaskSchedulingPolicy        []TaskSchedulingPolicyState   `json:"task_scheduling_policy"`
	Timeouts                    *TimeoutsState                `json:"timeouts"`
	UserAccounts                []UserAccountsState           `json:"user_accounts"`
	Windows                     []WindowsState                `json:"windows"`
}
