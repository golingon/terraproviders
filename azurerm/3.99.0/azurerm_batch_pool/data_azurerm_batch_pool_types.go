// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataAutoScaleAttributes struct {
	ref terra.Reference
}

func (as DataAutoScaleAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as DataAutoScaleAttributes) InternalWithRef(ref terra.Reference) DataAutoScaleAttributes {
	return DataAutoScaleAttributes{ref: ref}
}

func (as DataAutoScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as DataAutoScaleAttributes) EvaluationInterval() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("evaluation_interval"))
}

func (as DataAutoScaleAttributes) Formula() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("formula"))
}

type DataCertificateAttributes struct {
	ref terra.Reference
}

func (c DataCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataCertificateAttributes) InternalWithRef(ref terra.Reference) DataCertificateAttributes {
	return DataCertificateAttributes{ref: ref}
}

func (c DataCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("id"))
}

func (c DataCertificateAttributes) StoreLocation() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store_location"))
}

func (c DataCertificateAttributes) StoreName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("store_name"))
}

func (c DataCertificateAttributes) Visibility() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("visibility"))
}

type DataContainerConfigurationAttributes struct {
	ref terra.Reference
}

func (cc DataContainerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DataContainerConfigurationAttributes) InternalWithRef(ref terra.Reference) DataContainerConfigurationAttributes {
	return DataContainerConfigurationAttributes{ref: ref}
}

func (cc DataContainerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DataContainerConfigurationAttributes) ContainerImageNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("container_image_names"))
}

func (cc DataContainerConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("type"))
}

func (cc DataContainerConfigurationAttributes) ContainerRegistries() terra.ListValue[DataContainerConfigurationContainerRegistriesAttributes] {
	return terra.ReferenceAsList[DataContainerConfigurationContainerRegistriesAttributes](cc.ref.Append("container_registries"))
}

type DataContainerConfigurationContainerRegistriesAttributes struct {
	ref terra.Reference
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) InternalWithRef(ref terra.Reference) DataContainerConfigurationContainerRegistriesAttributes {
	return DataContainerConfigurationContainerRegistriesAttributes{ref: ref}
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("password"))
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("registry_server"))
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("user_assigned_identity_id"))
}

func (cr DataContainerConfigurationContainerRegistriesAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("user_name"))
}

type DataDataDisksAttributes struct {
	ref terra.Reference
}

func (dd DataDataDisksAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDataDisksAttributes) InternalWithRef(ref terra.Reference) DataDataDisksAttributes {
	return DataDataDisksAttributes{ref: ref}
}

func (dd DataDataDisksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDataDisksAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("caching"))
}

func (dd DataDataDisksAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("disk_size_gb"))
}

func (dd DataDataDisksAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("lun"))
}

func (dd DataDataDisksAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("storage_account_type"))
}

type DataDiskEncryptionAttributes struct {
	ref terra.Reference
}

func (de DataDiskEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DataDiskEncryptionAttributes) InternalWithRef(ref terra.Reference) DataDiskEncryptionAttributes {
	return DataDiskEncryptionAttributes{ref: ref}
}

func (de DataDiskEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DataDiskEncryptionAttributes) DiskEncryptionTarget() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("disk_encryption_target"))
}

type DataExtensionsAttributes struct {
	ref terra.Reference
}

func (e DataExtensionsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataExtensionsAttributes) InternalWithRef(ref terra.Reference) DataExtensionsAttributes {
	return DataExtensionsAttributes{ref: ref}
}

func (e DataExtensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataExtensionsAttributes) AutoUpgradeMinorVersion() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("auto_upgrade_minor_version"))
}

func (e DataExtensionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e DataExtensionsAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protected_settings"))
}

func (e DataExtensionsAttributes) ProvisionAfterExtensions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("provision_after_extensions"))
}

func (e DataExtensionsAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("publisher"))
}

func (e DataExtensionsAttributes) SettingsJson() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("settings_json"))
}

func (e DataExtensionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e DataExtensionsAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type_handler_version"))
}

type DataFixedScaleAttributes struct {
	ref terra.Reference
}

func (fs DataFixedScaleAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs DataFixedScaleAttributes) InternalWithRef(ref terra.Reference) DataFixedScaleAttributes {
	return DataFixedScaleAttributes{ref: ref}
}

func (fs DataFixedScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs DataFixedScaleAttributes) ResizeTimeout() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("resize_timeout"))
}

func (fs DataFixedScaleAttributes) TargetDedicatedNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("target_dedicated_nodes"))
}

func (fs DataFixedScaleAttributes) TargetLowPriorityNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("target_low_priority_nodes"))
}

type DataMountAttributes struct {
	ref terra.Reference
}

func (m DataMountAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DataMountAttributes) InternalWithRef(ref terra.Reference) DataMountAttributes {
	return DataMountAttributes{ref: ref}
}

func (m DataMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DataMountAttributes) AzureBlobFileSystem() terra.ListValue[DataMountAzureBlobFileSystemAttributes] {
	return terra.ReferenceAsList[DataMountAzureBlobFileSystemAttributes](m.ref.Append("azure_blob_file_system"))
}

func (m DataMountAttributes) AzureFileShare() terra.ListValue[DataMountAzureFileShareAttributes] {
	return terra.ReferenceAsList[DataMountAzureFileShareAttributes](m.ref.Append("azure_file_share"))
}

func (m DataMountAttributes) CifsMount() terra.ListValue[DataMountCifsMountAttributes] {
	return terra.ReferenceAsList[DataMountCifsMountAttributes](m.ref.Append("cifs_mount"))
}

func (m DataMountAttributes) NfsMount() terra.ListValue[DataMountNfsMountAttributes] {
	return terra.ReferenceAsList[DataMountNfsMountAttributes](m.ref.Append("nfs_mount"))
}

type DataMountAzureBlobFileSystemAttributes struct {
	ref terra.Reference
}

func (abfs DataMountAzureBlobFileSystemAttributes) InternalRef() (terra.Reference, error) {
	return abfs.ref, nil
}

func (abfs DataMountAzureBlobFileSystemAttributes) InternalWithRef(ref terra.Reference) DataMountAzureBlobFileSystemAttributes {
	return DataMountAzureBlobFileSystemAttributes{ref: ref}
}

func (abfs DataMountAzureBlobFileSystemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abfs.ref.InternalTokens()
}

func (abfs DataMountAzureBlobFileSystemAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("account_key"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("account_name"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) BlobfuseOptions() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("blobfuse_options"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("container_name"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("identity_id"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("relative_mount_path"))
}

func (abfs DataMountAzureBlobFileSystemAttributes) SasKey() terra.StringValue {
	return terra.ReferenceAsString(abfs.ref.Append("sas_key"))
}

type DataMountAzureFileShareAttributes struct {
	ref terra.Reference
}

func (afs DataMountAzureFileShareAttributes) InternalRef() (terra.Reference, error) {
	return afs.ref, nil
}

func (afs DataMountAzureFileShareAttributes) InternalWithRef(ref terra.Reference) DataMountAzureFileShareAttributes {
	return DataMountAzureFileShareAttributes{ref: ref}
}

func (afs DataMountAzureFileShareAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return afs.ref.InternalTokens()
}

func (afs DataMountAzureFileShareAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("account_key"))
}

func (afs DataMountAzureFileShareAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("account_name"))
}

func (afs DataMountAzureFileShareAttributes) AzureFileUrl() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("azure_file_url"))
}

func (afs DataMountAzureFileShareAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("mount_options"))
}

func (afs DataMountAzureFileShareAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(afs.ref.Append("relative_mount_path"))
}

type DataMountCifsMountAttributes struct {
	ref terra.Reference
}

func (cm DataMountCifsMountAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm DataMountCifsMountAttributes) InternalWithRef(ref terra.Reference) DataMountCifsMountAttributes {
	return DataMountCifsMountAttributes{ref: ref}
}

func (cm DataMountCifsMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm DataMountCifsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("mount_options"))
}

func (cm DataMountCifsMountAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("password"))
}

func (cm DataMountCifsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("relative_mount_path"))
}

func (cm DataMountCifsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("source"))
}

func (cm DataMountCifsMountAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("user_name"))
}

type DataMountNfsMountAttributes struct {
	ref terra.Reference
}

func (nm DataMountNfsMountAttributes) InternalRef() (terra.Reference, error) {
	return nm.ref, nil
}

func (nm DataMountNfsMountAttributes) InternalWithRef(ref terra.Reference) DataMountNfsMountAttributes {
	return DataMountNfsMountAttributes{ref: ref}
}

func (nm DataMountNfsMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nm.ref.InternalTokens()
}

func (nm DataMountNfsMountAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("mount_options"))
}

func (nm DataMountNfsMountAttributes) RelativeMountPath() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("relative_mount_path"))
}

func (nm DataMountNfsMountAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("source"))
}

type DataNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc DataNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc DataNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) DataNetworkConfigurationAttributes {
	return DataNetworkConfigurationAttributes{ref: ref}
}

func (nc DataNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc DataNetworkConfigurationAttributes) AcceleratedNetworkingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("accelerated_networking_enabled"))
}

func (nc DataNetworkConfigurationAttributes) DynamicVnetAssignmentScope() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("dynamic_vnet_assignment_scope"))
}

func (nc DataNetworkConfigurationAttributes) PublicAddressProvisioningType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("public_address_provisioning_type"))
}

func (nc DataNetworkConfigurationAttributes) PublicIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("public_ips"))
}

func (nc DataNetworkConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("subnet_id"))
}

func (nc DataNetworkConfigurationAttributes) EndpointConfiguration() terra.ListValue[DataNetworkConfigurationEndpointConfigurationAttributes] {
	return terra.ReferenceAsList[DataNetworkConfigurationEndpointConfigurationAttributes](nc.ref.Append("endpoint_configuration"))
}

type DataNetworkConfigurationEndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) InternalWithRef(ref terra.Reference) DataNetworkConfigurationEndpointConfigurationAttributes {
	return DataNetworkConfigurationEndpointConfigurationAttributes{ref: ref}
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) BackendPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("backend_port"))
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) FrontendPortRange() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("frontend_port_range"))
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("name"))
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("protocol"))
}

func (ec DataNetworkConfigurationEndpointConfigurationAttributes) NetworkSecurityGroupRules() terra.ListValue[DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes] {
	return terra.ReferenceAsList[DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes](ec.ref.Append("network_security_group_rules"))
}

type DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes struct {
	ref terra.Reference
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalRef() (terra.Reference, error) {
	return nsgr.ref, nil
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalWithRef(ref terra.Reference) DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes {
	return DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes{ref: ref}
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nsgr.ref.InternalTokens()
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) Access() terra.StringValue {
	return terra.ReferenceAsString(nsgr.ref.Append("access"))
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(nsgr.ref.Append("priority"))
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) SourceAddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(nsgr.ref.Append("source_address_prefix"))
}

func (nsgr DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesAttributes) SourcePortRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nsgr.ref.Append("source_port_ranges"))
}

type DataNodePlacementAttributes struct {
	ref terra.Reference
}

func (np DataNodePlacementAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np DataNodePlacementAttributes) InternalWithRef(ref terra.Reference) DataNodePlacementAttributes {
	return DataNodePlacementAttributes{ref: ref}
}

func (np DataNodePlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np DataNodePlacementAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("policy"))
}

type DataStartTaskAttributes struct {
	ref terra.Reference
}

func (st DataStartTaskAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st DataStartTaskAttributes) InternalWithRef(ref terra.Reference) DataStartTaskAttributes {
	return DataStartTaskAttributes{ref: ref}
}

func (st DataStartTaskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st DataStartTaskAttributes) CommandLine() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("command_line"))
}

func (st DataStartTaskAttributes) CommonEnvironmentProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](st.ref.Append("common_environment_properties"))
}

func (st DataStartTaskAttributes) TaskRetryMaximum() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("task_retry_maximum"))
}

func (st DataStartTaskAttributes) WaitForSuccess() terra.BoolValue {
	return terra.ReferenceAsBool(st.ref.Append("wait_for_success"))
}

func (st DataStartTaskAttributes) Container() terra.ListValue[DataStartTaskContainerAttributes] {
	return terra.ReferenceAsList[DataStartTaskContainerAttributes](st.ref.Append("container"))
}

func (st DataStartTaskAttributes) ResourceFile() terra.ListValue[DataStartTaskResourceFileAttributes] {
	return terra.ReferenceAsList[DataStartTaskResourceFileAttributes](st.ref.Append("resource_file"))
}

func (st DataStartTaskAttributes) UserIdentity() terra.ListValue[DataStartTaskUserIdentityAttributes] {
	return terra.ReferenceAsList[DataStartTaskUserIdentityAttributes](st.ref.Append("user_identity"))
}

type DataStartTaskContainerAttributes struct {
	ref terra.Reference
}

func (c DataStartTaskContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataStartTaskContainerAttributes) InternalWithRef(ref terra.Reference) DataStartTaskContainerAttributes {
	return DataStartTaskContainerAttributes{ref: ref}
}

func (c DataStartTaskContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataStartTaskContainerAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_name"))
}

func (c DataStartTaskContainerAttributes) RunOptions() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("run_options"))
}

func (c DataStartTaskContainerAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("working_directory"))
}

func (c DataStartTaskContainerAttributes) Registry() terra.ListValue[DataStartTaskContainerRegistryAttributes] {
	return terra.ReferenceAsList[DataStartTaskContainerRegistryAttributes](c.ref.Append("registry"))
}

type DataStartTaskContainerRegistryAttributes struct {
	ref terra.Reference
}

func (r DataStartTaskContainerRegistryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataStartTaskContainerRegistryAttributes) InternalWithRef(ref terra.Reference) DataStartTaskContainerRegistryAttributes {
	return DataStartTaskContainerRegistryAttributes{ref: ref}
}

func (r DataStartTaskContainerRegistryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataStartTaskContainerRegistryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("password"))
}

func (r DataStartTaskContainerRegistryAttributes) RegistryServer() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("registry_server"))
}

func (r DataStartTaskContainerRegistryAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("user_assigned_identity_id"))
}

func (r DataStartTaskContainerRegistryAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("user_name"))
}

type DataStartTaskResourceFileAttributes struct {
	ref terra.Reference
}

func (rf DataStartTaskResourceFileAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf DataStartTaskResourceFileAttributes) InternalWithRef(ref terra.Reference) DataStartTaskResourceFileAttributes {
	return DataStartTaskResourceFileAttributes{ref: ref}
}

func (rf DataStartTaskResourceFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf DataStartTaskResourceFileAttributes) AutoStorageContainerName() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("auto_storage_container_name"))
}

func (rf DataStartTaskResourceFileAttributes) BlobPrefix() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("blob_prefix"))
}

func (rf DataStartTaskResourceFileAttributes) FileMode() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("file_mode"))
}

func (rf DataStartTaskResourceFileAttributes) FilePath() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("file_path"))
}

func (rf DataStartTaskResourceFileAttributes) HttpUrl() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("http_url"))
}

func (rf DataStartTaskResourceFileAttributes) StorageContainerUrl() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("storage_container_url"))
}

func (rf DataStartTaskResourceFileAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("user_assigned_identity_id"))
}

type DataStartTaskUserIdentityAttributes struct {
	ref terra.Reference
}

func (ui DataStartTaskUserIdentityAttributes) InternalRef() (terra.Reference, error) {
	return ui.ref, nil
}

func (ui DataStartTaskUserIdentityAttributes) InternalWithRef(ref terra.Reference) DataStartTaskUserIdentityAttributes {
	return DataStartTaskUserIdentityAttributes{ref: ref}
}

func (ui DataStartTaskUserIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ui.ref.InternalTokens()
}

func (ui DataStartTaskUserIdentityAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(ui.ref.Append("user_name"))
}

func (ui DataStartTaskUserIdentityAttributes) AutoUser() terra.ListValue[DataStartTaskUserIdentityAutoUserAttributes] {
	return terra.ReferenceAsList[DataStartTaskUserIdentityAutoUserAttributes](ui.ref.Append("auto_user"))
}

type DataStartTaskUserIdentityAutoUserAttributes struct {
	ref terra.Reference
}

func (au DataStartTaskUserIdentityAutoUserAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au DataStartTaskUserIdentityAutoUserAttributes) InternalWithRef(ref terra.Reference) DataStartTaskUserIdentityAutoUserAttributes {
	return DataStartTaskUserIdentityAutoUserAttributes{ref: ref}
}

func (au DataStartTaskUserIdentityAutoUserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au DataStartTaskUserIdentityAutoUserAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("elevation_level"))
}

func (au DataStartTaskUserIdentityAutoUserAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("scope"))
}

type DataStorageImageReferenceAttributes struct {
	ref terra.Reference
}

func (sir DataStorageImageReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir DataStorageImageReferenceAttributes) InternalWithRef(ref terra.Reference) DataStorageImageReferenceAttributes {
	return DataStorageImageReferenceAttributes{ref: ref}
}

func (sir DataStorageImageReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir DataStorageImageReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("id"))
}

func (sir DataStorageImageReferenceAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("offer"))
}

func (sir DataStorageImageReferenceAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("publisher"))
}

func (sir DataStorageImageReferenceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("sku"))
}

func (sir DataStorageImageReferenceAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("version"))
}

type DataTaskSchedulingPolicyAttributes struct {
	ref terra.Reference
}

func (tsp DataTaskSchedulingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return tsp.ref, nil
}

func (tsp DataTaskSchedulingPolicyAttributes) InternalWithRef(ref terra.Reference) DataTaskSchedulingPolicyAttributes {
	return DataTaskSchedulingPolicyAttributes{ref: ref}
}

func (tsp DataTaskSchedulingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tsp.ref.InternalTokens()
}

func (tsp DataTaskSchedulingPolicyAttributes) NodeFillType() terra.StringValue {
	return terra.ReferenceAsString(tsp.ref.Append("node_fill_type"))
}

type DataUserAccountsAttributes struct {
	ref terra.Reference
}

func (ua DataUserAccountsAttributes) InternalRef() (terra.Reference, error) {
	return ua.ref, nil
}

func (ua DataUserAccountsAttributes) InternalWithRef(ref terra.Reference) DataUserAccountsAttributes {
	return DataUserAccountsAttributes{ref: ref}
}

func (ua DataUserAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ua.ref.InternalTokens()
}

func (ua DataUserAccountsAttributes) ElevationLevel() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("elevation_level"))
}

func (ua DataUserAccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("name"))
}

func (ua DataUserAccountsAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("password"))
}

func (ua DataUserAccountsAttributes) LinuxUserConfiguration() terra.ListValue[DataUserAccountsLinuxUserConfigurationAttributes] {
	return terra.ReferenceAsList[DataUserAccountsLinuxUserConfigurationAttributes](ua.ref.Append("linux_user_configuration"))
}

func (ua DataUserAccountsAttributes) WindowsUserConfiguration() terra.ListValue[DataUserAccountsWindowsUserConfigurationAttributes] {
	return terra.ReferenceAsList[DataUserAccountsWindowsUserConfigurationAttributes](ua.ref.Append("windows_user_configuration"))
}

type DataUserAccountsLinuxUserConfigurationAttributes struct {
	ref terra.Reference
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return luc.ref, nil
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) InternalWithRef(ref terra.Reference) DataUserAccountsLinuxUserConfigurationAttributes {
	return DataUserAccountsLinuxUserConfigurationAttributes{ref: ref}
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return luc.ref.InternalTokens()
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) Gid() terra.NumberValue {
	return terra.ReferenceAsNumber(luc.ref.Append("gid"))
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(luc.ref.Append("ssh_private_key"))
}

func (luc DataUserAccountsLinuxUserConfigurationAttributes) Uid() terra.NumberValue {
	return terra.ReferenceAsNumber(luc.ref.Append("uid"))
}

type DataUserAccountsWindowsUserConfigurationAttributes struct {
	ref terra.Reference
}

func (wuc DataUserAccountsWindowsUserConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wuc.ref, nil
}

func (wuc DataUserAccountsWindowsUserConfigurationAttributes) InternalWithRef(ref terra.Reference) DataUserAccountsWindowsUserConfigurationAttributes {
	return DataUserAccountsWindowsUserConfigurationAttributes{ref: ref}
}

func (wuc DataUserAccountsWindowsUserConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wuc.ref.InternalTokens()
}

func (wuc DataUserAccountsWindowsUserConfigurationAttributes) LoginMode() terra.StringValue {
	return terra.ReferenceAsString(wuc.ref.Append("login_mode"))
}

type DataWindowsAttributes struct {
	ref terra.Reference
}

func (w DataWindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w DataWindowsAttributes) InternalWithRef(ref terra.Reference) DataWindowsAttributes {
	return DataWindowsAttributes{ref: ref}
}

func (w DataWindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w DataWindowsAttributes) EnableAutomaticUpdates() terra.BoolValue {
	return terra.ReferenceAsBool(w.ref.Append("enable_automatic_updates"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAutoScaleState struct {
	EvaluationInterval string `json:"evaluation_interval"`
	Formula            string `json:"formula"`
}

type DataCertificateState struct {
	Id            string   `json:"id"`
	StoreLocation string   `json:"store_location"`
	StoreName     string   `json:"store_name"`
	Visibility    []string `json:"visibility"`
}

type DataContainerConfigurationState struct {
	ContainerImageNames []string                                             `json:"container_image_names"`
	Type                string                                               `json:"type"`
	ContainerRegistries []DataContainerConfigurationContainerRegistriesState `json:"container_registries"`
}

type DataContainerConfigurationContainerRegistriesState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type DataDataDisksState struct {
	Caching            string  `json:"caching"`
	DiskSizeGb         float64 `json:"disk_size_gb"`
	Lun                float64 `json:"lun"`
	StorageAccountType string  `json:"storage_account_type"`
}

type DataDiskEncryptionState struct {
	DiskEncryptionTarget string `json:"disk_encryption_target"`
}

type DataExtensionsState struct {
	AutoUpgradeMinorVersion  bool     `json:"auto_upgrade_minor_version"`
	Name                     string   `json:"name"`
	ProtectedSettings        string   `json:"protected_settings"`
	ProvisionAfterExtensions []string `json:"provision_after_extensions"`
	Publisher                string   `json:"publisher"`
	SettingsJson             string   `json:"settings_json"`
	Type                     string   `json:"type"`
	TypeHandlerVersion       string   `json:"type_handler_version"`
}

type DataFixedScaleState struct {
	ResizeTimeout          string  `json:"resize_timeout"`
	TargetDedicatedNodes   float64 `json:"target_dedicated_nodes"`
	TargetLowPriorityNodes float64 `json:"target_low_priority_nodes"`
}

type DataMountState struct {
	AzureBlobFileSystem []DataMountAzureBlobFileSystemState `json:"azure_blob_file_system"`
	AzureFileShare      []DataMountAzureFileShareState      `json:"azure_file_share"`
	CifsMount           []DataMountCifsMountState           `json:"cifs_mount"`
	NfsMount            []DataMountNfsMountState            `json:"nfs_mount"`
}

type DataMountAzureBlobFileSystemState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	BlobfuseOptions   string `json:"blobfuse_options"`
	ContainerName     string `json:"container_name"`
	IdentityId        string `json:"identity_id"`
	RelativeMountPath string `json:"relative_mount_path"`
	SasKey            string `json:"sas_key"`
}

type DataMountAzureFileShareState struct {
	AccountKey        string `json:"account_key"`
	AccountName       string `json:"account_name"`
	AzureFileUrl      string `json:"azure_file_url"`
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
}

type DataMountCifsMountState struct {
	MountOptions      string `json:"mount_options"`
	Password          string `json:"password"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
	UserName          string `json:"user_name"`
}

type DataMountNfsMountState struct {
	MountOptions      string `json:"mount_options"`
	RelativeMountPath string `json:"relative_mount_path"`
	Source            string `json:"source"`
}

type DataNetworkConfigurationState struct {
	AcceleratedNetworkingEnabled  bool                                                 `json:"accelerated_networking_enabled"`
	DynamicVnetAssignmentScope    string                                               `json:"dynamic_vnet_assignment_scope"`
	PublicAddressProvisioningType string                                               `json:"public_address_provisioning_type"`
	PublicIps                     []string                                             `json:"public_ips"`
	SubnetId                      string                                               `json:"subnet_id"`
	EndpointConfiguration         []DataNetworkConfigurationEndpointConfigurationState `json:"endpoint_configuration"`
}

type DataNetworkConfigurationEndpointConfigurationState struct {
	BackendPort               float64                                                                       `json:"backend_port"`
	FrontendPortRange         string                                                                        `json:"frontend_port_range"`
	Name                      string                                                                        `json:"name"`
	Protocol                  string                                                                        `json:"protocol"`
	NetworkSecurityGroupRules []DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesState `json:"network_security_group_rules"`
}

type DataNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRulesState struct {
	Access              string   `json:"access"`
	Priority            float64  `json:"priority"`
	SourceAddressPrefix string   `json:"source_address_prefix"`
	SourcePortRanges    []string `json:"source_port_ranges"`
}

type DataNodePlacementState struct {
	Policy string `json:"policy"`
}

type DataStartTaskState struct {
	CommandLine                 string                           `json:"command_line"`
	CommonEnvironmentProperties map[string]string                `json:"common_environment_properties"`
	TaskRetryMaximum            float64                          `json:"task_retry_maximum"`
	WaitForSuccess              bool                             `json:"wait_for_success"`
	Container                   []DataStartTaskContainerState    `json:"container"`
	ResourceFile                []DataStartTaskResourceFileState `json:"resource_file"`
	UserIdentity                []DataStartTaskUserIdentityState `json:"user_identity"`
}

type DataStartTaskContainerState struct {
	ImageName        string                                `json:"image_name"`
	RunOptions       string                                `json:"run_options"`
	WorkingDirectory string                                `json:"working_directory"`
	Registry         []DataStartTaskContainerRegistryState `json:"registry"`
}

type DataStartTaskContainerRegistryState struct {
	Password               string `json:"password"`
	RegistryServer         string `json:"registry_server"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
	UserName               string `json:"user_name"`
}

type DataStartTaskResourceFileState struct {
	AutoStorageContainerName string `json:"auto_storage_container_name"`
	BlobPrefix               string `json:"blob_prefix"`
	FileMode                 string `json:"file_mode"`
	FilePath                 string `json:"file_path"`
	HttpUrl                  string `json:"http_url"`
	StorageContainerUrl      string `json:"storage_container_url"`
	UserAssignedIdentityId   string `json:"user_assigned_identity_id"`
}

type DataStartTaskUserIdentityState struct {
	UserName string                                   `json:"user_name"`
	AutoUser []DataStartTaskUserIdentityAutoUserState `json:"auto_user"`
}

type DataStartTaskUserIdentityAutoUserState struct {
	ElevationLevel string `json:"elevation_level"`
	Scope          string `json:"scope"`
}

type DataStorageImageReferenceState struct {
	Id        string `json:"id"`
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type DataTaskSchedulingPolicyState struct {
	NodeFillType string `json:"node_fill_type"`
}

type DataUserAccountsState struct {
	ElevationLevel           string                                          `json:"elevation_level"`
	Name                     string                                          `json:"name"`
	Password                 string                                          `json:"password"`
	LinuxUserConfiguration   []DataUserAccountsLinuxUserConfigurationState   `json:"linux_user_configuration"`
	WindowsUserConfiguration []DataUserAccountsWindowsUserConfigurationState `json:"windows_user_configuration"`
}

type DataUserAccountsLinuxUserConfigurationState struct {
	Gid           float64 `json:"gid"`
	SshPrivateKey string  `json:"ssh_private_key"`
	Uid           float64 `json:"uid"`
}

type DataUserAccountsWindowsUserConfigurationState struct {
	LoginMode string `json:"login_mode"`
}

type DataWindowsState struct {
	EnableAutomaticUpdates bool `json:"enable_automatic_updates"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
