// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service_environment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_service_environment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppServiceEnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aase *Resource) Type() string {
	return "azurerm_app_service_environment"
}

// LocalName returns the local name for [Resource].
func (aase *Resource) LocalName() string {
	return aase.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aase *Resource) Configuration() interface{} {
	return aase.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aase *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aase)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aase *Resource) Dependencies() terra.Dependencies {
	return aase.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aase *Resource) LifecycleManagement() *terra.Lifecycle {
	return aase.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aase *Resource) Attributes() azurermAppServiceEnvironmentAttributes {
	return azurermAppServiceEnvironmentAttributes{ref: terra.ReferenceResource(aase)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aase *Resource) ImportState(state io.Reader) error {
	aase.state = &azurermAppServiceEnvironmentState{}
	if err := json.NewDecoder(state).Decode(aase.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aase.Type(), aase.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aase *Resource) State() (*azurermAppServiceEnvironmentState, bool) {
	return aase.state, aase.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aase *Resource) StateMust() *azurermAppServiceEnvironmentState {
	if aase.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aase.Type(), aase.LocalName()))
	}
	return aase.state
}

// Args contains the configurations for azurerm_app_service_environment.
type Args struct {
	// AllowedUserIpCidrs: set of string, optional
	AllowedUserIpCidrs terra.SetValue[terra.StringValue] `hcl:"allowed_user_ip_cidrs,attr"`
	// FrontEndScaleFactor: number, optional
	FrontEndScaleFactor terra.NumberValue `hcl:"front_end_scale_factor,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternalLoadBalancingMode: string, optional
	InternalLoadBalancingMode terra.StringValue `hcl:"internal_load_balancing_mode,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PricingTier: string, optional
	PricingTier terra.StringValue `hcl:"pricing_tier,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ClusterSetting: min=0
	ClusterSetting []ClusterSetting `hcl:"cluster_setting,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppServiceEnvironmentAttributes struct {
	ref terra.Reference
}

// AllowedUserIpCidrs returns a reference to field allowed_user_ip_cidrs of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) AllowedUserIpCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aase.ref.Append("allowed_user_ip_cidrs"))
}

// FrontEndScaleFactor returns a reference to field front_end_scale_factor of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) FrontEndScaleFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(aase.ref.Append("front_end_scale_factor"))
}

// Id returns a reference to field id of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("id"))
}

// InternalIpAddress returns a reference to field internal_ip_address of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) InternalIpAddress() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("internal_ip_address"))
}

// InternalLoadBalancingMode returns a reference to field internal_load_balancing_mode of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) InternalLoadBalancingMode() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("internal_load_balancing_mode"))
}

// Location returns a reference to field location of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("name"))
}

// OutboundIpAddresses returns a reference to field outbound_ip_addresses of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) OutboundIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aase.ref.Append("outbound_ip_addresses"))
}

// PricingTier returns a reference to field pricing_tier of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) PricingTier() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("pricing_tier"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("resource_group_name"))
}

// ServiceIpAddress returns a reference to field service_ip_address of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) ServiceIpAddress() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("service_ip_address"))
}

// SubnetId returns a reference to field subnet_id of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aase.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_app_service_environment.
func (aase azurermAppServiceEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aase.ref.Append("tags"))
}

func (aase azurermAppServiceEnvironmentAttributes) ClusterSetting() terra.ListValue[ClusterSettingAttributes] {
	return terra.ReferenceAsList[ClusterSettingAttributes](aase.ref.Append("cluster_setting"))
}

func (aase azurermAppServiceEnvironmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aase.ref.Append("timeouts"))
}

type azurermAppServiceEnvironmentState struct {
	AllowedUserIpCidrs        []string              `json:"allowed_user_ip_cidrs"`
	FrontEndScaleFactor       float64               `json:"front_end_scale_factor"`
	Id                        string                `json:"id"`
	InternalIpAddress         string                `json:"internal_ip_address"`
	InternalLoadBalancingMode string                `json:"internal_load_balancing_mode"`
	Location                  string                `json:"location"`
	Name                      string                `json:"name"`
	OutboundIpAddresses       []string              `json:"outbound_ip_addresses"`
	PricingTier               string                `json:"pricing_tier"`
	ResourceGroupName         string                `json:"resource_group_name"`
	ServiceIpAddress          string                `json:"service_ip_address"`
	SubnetId                  string                `json:"subnet_id"`
	Tags                      map[string]string     `json:"tags"`
	ClusterSetting            []ClusterSettingState `json:"cluster_setting"`
	Timeouts                  *TimeoutsState        `json:"timeouts"`
}
