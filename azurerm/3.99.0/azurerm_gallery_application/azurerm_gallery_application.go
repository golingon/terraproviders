// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_gallery_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_gallery_application.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermGalleryApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aga *Resource) Type() string {
	return "azurerm_gallery_application"
}

// LocalName returns the local name for [Resource].
func (aga *Resource) LocalName() string {
	return aga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aga *Resource) Configuration() interface{} {
	return aga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aga *Resource) Dependencies() terra.Dependencies {
	return aga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aga *Resource) LifecycleManagement() *terra.Lifecycle {
	return aga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aga *Resource) Attributes() azurermGalleryApplicationAttributes {
	return azurermGalleryApplicationAttributes{ref: terra.ReferenceResource(aga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aga *Resource) ImportState(state io.Reader) error {
	aga.state = &azurermGalleryApplicationState{}
	if err := json.NewDecoder(state).Decode(aga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aga.Type(), aga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aga *Resource) State() (*azurermGalleryApplicationState, bool) {
	return aga.state, aga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aga *Resource) StateMust() *azurermGalleryApplicationState {
	if aga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aga.Type(), aga.LocalName()))
	}
	return aga.state
}

// Args contains the configurations for azurerm_gallery_application.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// Eula: string, optional
	Eula terra.StringValue `hcl:"eula,attr"`
	// GalleryId: string, required
	GalleryId terra.StringValue `hcl:"gallery_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivacyStatementUri: string, optional
	PrivacyStatementUri terra.StringValue `hcl:"privacy_statement_uri,attr"`
	// ReleaseNoteUri: string, optional
	ReleaseNoteUri terra.StringValue `hcl:"release_note_uri,attr"`
	// SupportedOsType: string, required
	SupportedOsType terra.StringValue `hcl:"supported_os_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermGalleryApplicationAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("description"))
}

// EndOfLifeDate returns a reference to field end_of_life_date of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("end_of_life_date"))
}

// Eula returns a reference to field eula of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Eula() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("eula"))
}

// GalleryId returns a reference to field gallery_id of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) GalleryId() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("gallery_id"))
}

// Id returns a reference to field id of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("name"))
}

// PrivacyStatementUri returns a reference to field privacy_statement_uri of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) PrivacyStatementUri() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("privacy_statement_uri"))
}

// ReleaseNoteUri returns a reference to field release_note_uri of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) ReleaseNoteUri() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("release_note_uri"))
}

// SupportedOsType returns a reference to field supported_os_type of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) SupportedOsType() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("supported_os_type"))
}

// Tags returns a reference to field tags of azurerm_gallery_application.
func (aga azurermGalleryApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aga.ref.Append("tags"))
}

func (aga azurermGalleryApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aga.ref.Append("timeouts"))
}

type azurermGalleryApplicationState struct {
	Description         string            `json:"description"`
	EndOfLifeDate       string            `json:"end_of_life_date"`
	Eula                string            `json:"eula"`
	GalleryId           string            `json:"gallery_id"`
	Id                  string            `json:"id"`
	Location            string            `json:"location"`
	Name                string            `json:"name"`
	PrivacyStatementUri string            `json:"privacy_statement_uri"`
	ReleaseNoteUri      string            `json:"release_note_uri"`
	SupportedOsType     string            `json:"supported_os_type"`
	Tags                map[string]string `json:"tags"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
