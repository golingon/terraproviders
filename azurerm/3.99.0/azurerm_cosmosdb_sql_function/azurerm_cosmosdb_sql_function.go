// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_sql_function

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_sql_function.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbSqlFunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acsf *Resource) Type() string {
	return "azurerm_cosmosdb_sql_function"
}

// LocalName returns the local name for [Resource].
func (acsf *Resource) LocalName() string {
	return acsf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acsf *Resource) Configuration() interface{} {
	return acsf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acsf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acsf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acsf *Resource) Dependencies() terra.Dependencies {
	return acsf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acsf *Resource) LifecycleManagement() *terra.Lifecycle {
	return acsf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acsf *Resource) Attributes() azurermCosmosdbSqlFunctionAttributes {
	return azurermCosmosdbSqlFunctionAttributes{ref: terra.ReferenceResource(acsf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acsf *Resource) ImportState(state io.Reader) error {
	acsf.state = &azurermCosmosdbSqlFunctionState{}
	if err := json.NewDecoder(state).Decode(acsf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsf.Type(), acsf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acsf *Resource) State() (*azurermCosmosdbSqlFunctionState, bool) {
	return acsf.state, acsf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acsf *Resource) StateMust() *azurermCosmosdbSqlFunctionState {
	if acsf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsf.Type(), acsf.LocalName()))
	}
	return acsf.state
}

// Args contains the configurations for azurerm_cosmosdb_sql_function.
type Args struct {
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// ContainerId: string, required
	ContainerId terra.StringValue `hcl:"container_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbSqlFunctionAttributes struct {
	ref terra.Reference
}

// Body returns a reference to field body of azurerm_cosmosdb_sql_function.
func (acsf azurermCosmosdbSqlFunctionAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(acsf.ref.Append("body"))
}

// ContainerId returns a reference to field container_id of azurerm_cosmosdb_sql_function.
func (acsf azurermCosmosdbSqlFunctionAttributes) ContainerId() terra.StringValue {
	return terra.ReferenceAsString(acsf.ref.Append("container_id"))
}

// Id returns a reference to field id of azurerm_cosmosdb_sql_function.
func (acsf azurermCosmosdbSqlFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acsf.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_sql_function.
func (acsf azurermCosmosdbSqlFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acsf.ref.Append("name"))
}

func (acsf azurermCosmosdbSqlFunctionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acsf.ref.Append("timeouts"))
}

type azurermCosmosdbSqlFunctionState struct {
	Body        string         `json:"body"`
	ContainerId string         `json:"container_id"`
	Id          string         `json:"id"`
	Name        string         `json:"name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
