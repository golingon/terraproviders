// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_alert_processing_rule_action_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Condition struct {
	// ConditionAlertContext: optional
	AlertContext *ConditionAlertContext `hcl:"alert_context,block"`
	// ConditionAlertRuleId: optional
	AlertRuleId *ConditionAlertRuleId `hcl:"alert_rule_id,block"`
	// ConditionAlertRuleName: optional
	AlertRuleName *ConditionAlertRuleName `hcl:"alert_rule_name,block"`
	// ConditionDescription: optional
	Description *ConditionDescription `hcl:"description,block"`
	// ConditionMonitorCondition: optional
	MonitorCondition *ConditionMonitorCondition `hcl:"monitor_condition,block"`
	// ConditionMonitorService: optional
	MonitorService *ConditionMonitorService `hcl:"monitor_service,block"`
	// ConditionSeverity: optional
	Severity *ConditionSeverity `hcl:"severity,block"`
	// ConditionSignalType: optional
	SignalType *ConditionSignalType `hcl:"signal_type,block"`
	// ConditionTargetResource: optional
	TargetResource *ConditionTargetResource `hcl:"target_resource,block"`
	// ConditionTargetResourceGroup: optional
	TargetResourceGroup *ConditionTargetResourceGroup `hcl:"target_resource_group,block"`
	// ConditionTargetResourceType: optional
	TargetResourceType *ConditionTargetResourceType `hcl:"target_resource_type,block"`
}

type ConditionAlertContext struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionAlertRuleId struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionAlertRuleName struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionDescription struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionMonitorCondition struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionMonitorService struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionSeverity struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionSignalType struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionTargetResource struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionTargetResourceGroup struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionTargetResourceType struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Schedule struct {
	// EffectiveFrom: string, optional
	EffectiveFrom terra.StringValue `hcl:"effective_from,attr"`
	// EffectiveUntil: string, optional
	EffectiveUntil terra.StringValue `hcl:"effective_until,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// ScheduleRecurrence: optional
	Recurrence *ScheduleRecurrence `hcl:"recurrence,block"`
}

type ScheduleRecurrence struct {
	// ScheduleRecurrenceDaily: min=0
	Daily []ScheduleRecurrenceDaily `hcl:"daily,block" validate:"min=0"`
	// ScheduleRecurrenceMonthly: min=0
	Monthly []ScheduleRecurrenceMonthly `hcl:"monthly,block" validate:"min=0"`
	// ScheduleRecurrenceWeekly: min=0
	Weekly []ScheduleRecurrenceWeekly `hcl:"weekly,block" validate:"min=0"`
}

type ScheduleRecurrenceDaily struct {
	// EndTime: string, required
	EndTime terra.StringValue `hcl:"end_time,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
}

type ScheduleRecurrenceMonthly struct {
	// DaysOfMonth: list of number, required
	DaysOfMonth terra.ListValue[terra.NumberValue] `hcl:"days_of_month,attr" validate:"required"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type ScheduleRecurrenceWeekly struct {
	// DaysOfWeek: list of string, required
	DaysOfWeek terra.ListValue[terra.StringValue] `hcl:"days_of_week,attr" validate:"required"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) AlertContext() terra.ListValue[ConditionAlertContextAttributes] {
	return terra.ReferenceAsList[ConditionAlertContextAttributes](c.ref.Append("alert_context"))
}

func (c ConditionAttributes) AlertRuleId() terra.ListValue[ConditionAlertRuleIdAttributes] {
	return terra.ReferenceAsList[ConditionAlertRuleIdAttributes](c.ref.Append("alert_rule_id"))
}

func (c ConditionAttributes) AlertRuleName() terra.ListValue[ConditionAlertRuleNameAttributes] {
	return terra.ReferenceAsList[ConditionAlertRuleNameAttributes](c.ref.Append("alert_rule_name"))
}

func (c ConditionAttributes) Description() terra.ListValue[ConditionDescriptionAttributes] {
	return terra.ReferenceAsList[ConditionDescriptionAttributes](c.ref.Append("description"))
}

func (c ConditionAttributes) MonitorCondition() terra.ListValue[ConditionMonitorConditionAttributes] {
	return terra.ReferenceAsList[ConditionMonitorConditionAttributes](c.ref.Append("monitor_condition"))
}

func (c ConditionAttributes) MonitorService() terra.ListValue[ConditionMonitorServiceAttributes] {
	return terra.ReferenceAsList[ConditionMonitorServiceAttributes](c.ref.Append("monitor_service"))
}

func (c ConditionAttributes) Severity() terra.ListValue[ConditionSeverityAttributes] {
	return terra.ReferenceAsList[ConditionSeverityAttributes](c.ref.Append("severity"))
}

func (c ConditionAttributes) SignalType() terra.ListValue[ConditionSignalTypeAttributes] {
	return terra.ReferenceAsList[ConditionSignalTypeAttributes](c.ref.Append("signal_type"))
}

func (c ConditionAttributes) TargetResource() terra.ListValue[ConditionTargetResourceAttributes] {
	return terra.ReferenceAsList[ConditionTargetResourceAttributes](c.ref.Append("target_resource"))
}

func (c ConditionAttributes) TargetResourceGroup() terra.ListValue[ConditionTargetResourceGroupAttributes] {
	return terra.ReferenceAsList[ConditionTargetResourceGroupAttributes](c.ref.Append("target_resource_group"))
}

func (c ConditionAttributes) TargetResourceType() terra.ListValue[ConditionTargetResourceTypeAttributes] {
	return terra.ReferenceAsList[ConditionTargetResourceTypeAttributes](c.ref.Append("target_resource_type"))
}

type ConditionAlertContextAttributes struct {
	ref terra.Reference
}

func (ac ConditionAlertContextAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ConditionAlertContextAttributes) InternalWithRef(ref terra.Reference) ConditionAlertContextAttributes {
	return ConditionAlertContextAttributes{ref: ref}
}

func (ac ConditionAlertContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ConditionAlertContextAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("operator"))
}

func (ac ConditionAlertContextAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ac.ref.Append("values"))
}

type ConditionAlertRuleIdAttributes struct {
	ref terra.Reference
}

func (ari ConditionAlertRuleIdAttributes) InternalRef() (terra.Reference, error) {
	return ari.ref, nil
}

func (ari ConditionAlertRuleIdAttributes) InternalWithRef(ref terra.Reference) ConditionAlertRuleIdAttributes {
	return ConditionAlertRuleIdAttributes{ref: ref}
}

func (ari ConditionAlertRuleIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ari.ref.InternalTokens()
}

func (ari ConditionAlertRuleIdAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ari.ref.Append("operator"))
}

func (ari ConditionAlertRuleIdAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ari.ref.Append("values"))
}

type ConditionAlertRuleNameAttributes struct {
	ref terra.Reference
}

func (arn ConditionAlertRuleNameAttributes) InternalRef() (terra.Reference, error) {
	return arn.ref, nil
}

func (arn ConditionAlertRuleNameAttributes) InternalWithRef(ref terra.Reference) ConditionAlertRuleNameAttributes {
	return ConditionAlertRuleNameAttributes{ref: ref}
}

func (arn ConditionAlertRuleNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arn.ref.InternalTokens()
}

func (arn ConditionAlertRuleNameAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("operator"))
}

func (arn ConditionAlertRuleNameAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arn.ref.Append("values"))
}

type ConditionDescriptionAttributes struct {
	ref terra.Reference
}

func (d ConditionDescriptionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ConditionDescriptionAttributes) InternalWithRef(ref terra.Reference) ConditionDescriptionAttributes {
	return ConditionDescriptionAttributes{ref: ref}
}

func (d ConditionDescriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ConditionDescriptionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d ConditionDescriptionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("values"))
}

type ConditionMonitorConditionAttributes struct {
	ref terra.Reference
}

func (mc ConditionMonitorConditionAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc ConditionMonitorConditionAttributes) InternalWithRef(ref terra.Reference) ConditionMonitorConditionAttributes {
	return ConditionMonitorConditionAttributes{ref: ref}
}

func (mc ConditionMonitorConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc ConditionMonitorConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("operator"))
}

func (mc ConditionMonitorConditionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("values"))
}

type ConditionMonitorServiceAttributes struct {
	ref terra.Reference
}

func (ms ConditionMonitorServiceAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ConditionMonitorServiceAttributes) InternalWithRef(ref terra.Reference) ConditionMonitorServiceAttributes {
	return ConditionMonitorServiceAttributes{ref: ref}
}

func (ms ConditionMonitorServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ConditionMonitorServiceAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("operator"))
}

func (ms ConditionMonitorServiceAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ms.ref.Append("values"))
}

type ConditionSeverityAttributes struct {
	ref terra.Reference
}

func (s ConditionSeverityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ConditionSeverityAttributes) InternalWithRef(ref terra.Reference) ConditionSeverityAttributes {
	return ConditionSeverityAttributes{ref: ref}
}

func (s ConditionSeverityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ConditionSeverityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("operator"))
}

func (s ConditionSeverityAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("values"))
}

type ConditionSignalTypeAttributes struct {
	ref terra.Reference
}

func (st ConditionSignalTypeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st ConditionSignalTypeAttributes) InternalWithRef(ref terra.Reference) ConditionSignalTypeAttributes {
	return ConditionSignalTypeAttributes{ref: ref}
}

func (st ConditionSignalTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st ConditionSignalTypeAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("operator"))
}

func (st ConditionSignalTypeAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](st.ref.Append("values"))
}

type ConditionTargetResourceAttributes struct {
	ref terra.Reference
}

func (tr ConditionTargetResourceAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr ConditionTargetResourceAttributes) InternalWithRef(ref terra.Reference) ConditionTargetResourceAttributes {
	return ConditionTargetResourceAttributes{ref: ref}
}

func (tr ConditionTargetResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr ConditionTargetResourceAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("operator"))
}

func (tr ConditionTargetResourceAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tr.ref.Append("values"))
}

type ConditionTargetResourceGroupAttributes struct {
	ref terra.Reference
}

func (trg ConditionTargetResourceGroupAttributes) InternalRef() (terra.Reference, error) {
	return trg.ref, nil
}

func (trg ConditionTargetResourceGroupAttributes) InternalWithRef(ref terra.Reference) ConditionTargetResourceGroupAttributes {
	return ConditionTargetResourceGroupAttributes{ref: ref}
}

func (trg ConditionTargetResourceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trg.ref.InternalTokens()
}

func (trg ConditionTargetResourceGroupAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(trg.ref.Append("operator"))
}

func (trg ConditionTargetResourceGroupAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](trg.ref.Append("values"))
}

type ConditionTargetResourceTypeAttributes struct {
	ref terra.Reference
}

func (trt ConditionTargetResourceTypeAttributes) InternalRef() (terra.Reference, error) {
	return trt.ref, nil
}

func (trt ConditionTargetResourceTypeAttributes) InternalWithRef(ref terra.Reference) ConditionTargetResourceTypeAttributes {
	return ConditionTargetResourceTypeAttributes{ref: ref}
}

func (trt ConditionTargetResourceTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trt.ref.InternalTokens()
}

func (trt ConditionTargetResourceTypeAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(trt.ref.Append("operator"))
}

func (trt ConditionTargetResourceTypeAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](trt.ref.Append("values"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) EffectiveFrom() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("effective_from"))
}

func (s ScheduleAttributes) EffectiveUntil() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("effective_until"))
}

func (s ScheduleAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("time_zone"))
}

func (s ScheduleAttributes) Recurrence() terra.ListValue[ScheduleRecurrenceAttributes] {
	return terra.ReferenceAsList[ScheduleRecurrenceAttributes](s.ref.Append("recurrence"))
}

type ScheduleRecurrenceAttributes struct {
	ref terra.Reference
}

func (r ScheduleRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ScheduleRecurrenceAttributes) InternalWithRef(ref terra.Reference) ScheduleRecurrenceAttributes {
	return ScheduleRecurrenceAttributes{ref: ref}
}

func (r ScheduleRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ScheduleRecurrenceAttributes) Daily() terra.ListValue[ScheduleRecurrenceDailyAttributes] {
	return terra.ReferenceAsList[ScheduleRecurrenceDailyAttributes](r.ref.Append("daily"))
}

func (r ScheduleRecurrenceAttributes) Monthly() terra.ListValue[ScheduleRecurrenceMonthlyAttributes] {
	return terra.ReferenceAsList[ScheduleRecurrenceMonthlyAttributes](r.ref.Append("monthly"))
}

func (r ScheduleRecurrenceAttributes) Weekly() terra.ListValue[ScheduleRecurrenceWeeklyAttributes] {
	return terra.ReferenceAsList[ScheduleRecurrenceWeeklyAttributes](r.ref.Append("weekly"))
}

type ScheduleRecurrenceDailyAttributes struct {
	ref terra.Reference
}

func (d ScheduleRecurrenceDailyAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ScheduleRecurrenceDailyAttributes) InternalWithRef(ref terra.Reference) ScheduleRecurrenceDailyAttributes {
	return ScheduleRecurrenceDailyAttributes{ref: ref}
}

func (d ScheduleRecurrenceDailyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ScheduleRecurrenceDailyAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("end_time"))
}

func (d ScheduleRecurrenceDailyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("start_time"))
}

type ScheduleRecurrenceMonthlyAttributes struct {
	ref terra.Reference
}

func (m ScheduleRecurrenceMonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ScheduleRecurrenceMonthlyAttributes) InternalWithRef(ref terra.Reference) ScheduleRecurrenceMonthlyAttributes {
	return ScheduleRecurrenceMonthlyAttributes{ref: ref}
}

func (m ScheduleRecurrenceMonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ScheduleRecurrenceMonthlyAttributes) DaysOfMonth() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](m.ref.Append("days_of_month"))
}

func (m ScheduleRecurrenceMonthlyAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("end_time"))
}

func (m ScheduleRecurrenceMonthlyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("start_time"))
}

type ScheduleRecurrenceWeeklyAttributes struct {
	ref terra.Reference
}

func (w ScheduleRecurrenceWeeklyAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w ScheduleRecurrenceWeeklyAttributes) InternalWithRef(ref terra.Reference) ScheduleRecurrenceWeeklyAttributes {
	return ScheduleRecurrenceWeeklyAttributes{ref: ref}
}

func (w ScheduleRecurrenceWeeklyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w ScheduleRecurrenceWeeklyAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("days_of_week"))
}

func (w ScheduleRecurrenceWeeklyAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("end_time"))
}

func (w ScheduleRecurrenceWeeklyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("start_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionState struct {
	AlertContext        []ConditionAlertContextState        `json:"alert_context"`
	AlertRuleId         []ConditionAlertRuleIdState         `json:"alert_rule_id"`
	AlertRuleName       []ConditionAlertRuleNameState       `json:"alert_rule_name"`
	Description         []ConditionDescriptionState         `json:"description"`
	MonitorCondition    []ConditionMonitorConditionState    `json:"monitor_condition"`
	MonitorService      []ConditionMonitorServiceState      `json:"monitor_service"`
	Severity            []ConditionSeverityState            `json:"severity"`
	SignalType          []ConditionSignalTypeState          `json:"signal_type"`
	TargetResource      []ConditionTargetResourceState      `json:"target_resource"`
	TargetResourceGroup []ConditionTargetResourceGroupState `json:"target_resource_group"`
	TargetResourceType  []ConditionTargetResourceTypeState  `json:"target_resource_type"`
}

type ConditionAlertContextState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionAlertRuleIdState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionAlertRuleNameState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionDescriptionState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionMonitorConditionState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionMonitorServiceState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionSeverityState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionSignalTypeState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionTargetResourceState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionTargetResourceGroupState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionTargetResourceTypeState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ScheduleState struct {
	EffectiveFrom  string                    `json:"effective_from"`
	EffectiveUntil string                    `json:"effective_until"`
	TimeZone       string                    `json:"time_zone"`
	Recurrence     []ScheduleRecurrenceState `json:"recurrence"`
}

type ScheduleRecurrenceState struct {
	Daily   []ScheduleRecurrenceDailyState   `json:"daily"`
	Monthly []ScheduleRecurrenceMonthlyState `json:"monthly"`
	Weekly  []ScheduleRecurrenceWeeklyState  `json:"weekly"`
}

type ScheduleRecurrenceDailyState struct {
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
}

type ScheduleRecurrenceMonthlyState struct {
	DaysOfMonth []float64 `json:"days_of_month"`
	EndTime     string    `json:"end_time"`
	StartTime   string    `json:"start_time"`
}

type ScheduleRecurrenceWeeklyState struct {
	DaysOfWeek []string `json:"days_of_week"`
	EndTime    string   `json:"end_time"`
	StartTime  string   `json:"start_time"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
