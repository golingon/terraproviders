// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_app_redis_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_app_redis_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudAppRedisAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascara *Resource) Type() string {
	return "azurerm_spring_cloud_app_redis_association"
}

// LocalName returns the local name for [Resource].
func (ascara *Resource) LocalName() string {
	return ascara.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascara *Resource) Configuration() interface{} {
	return ascara.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascara *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascara)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascara *Resource) Dependencies() terra.Dependencies {
	return ascara.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascara *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascara.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascara *Resource) Attributes() azurermSpringCloudAppRedisAssociationAttributes {
	return azurermSpringCloudAppRedisAssociationAttributes{ref: terra.ReferenceResource(ascara)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascara *Resource) ImportState(state io.Reader) error {
	ascara.state = &azurermSpringCloudAppRedisAssociationState{}
	if err := json.NewDecoder(state).Decode(ascara.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascara.Type(), ascara.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascara *Resource) State() (*azurermSpringCloudAppRedisAssociationState, bool) {
	return ascara.state, ascara.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascara *Resource) StateMust() *azurermSpringCloudAppRedisAssociationState {
	if ascara.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascara.Type(), ascara.LocalName()))
	}
	return ascara.state
}

// Args contains the configurations for azurerm_spring_cloud_app_redis_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedisAccessKey: string, required
	RedisAccessKey terra.StringValue `hcl:"redis_access_key,attr" validate:"required"`
	// RedisCacheId: string, required
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// SslEnabled: bool, optional
	SslEnabled terra.BoolValue `hcl:"ssl_enabled,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudAppRedisAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascara.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascara.ref.Append("name"))
}

// RedisAccessKey returns a reference to field redis_access_key of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) RedisAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ascara.ref.Append("redis_access_key"))
}

// RedisCacheId returns a reference to field redis_cache_id of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(ascara.ref.Append("redis_cache_id"))
}

// SpringCloudAppId returns a reference to field spring_cloud_app_id of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceAsString(ascara.ref.Append("spring_cloud_app_id"))
}

// SslEnabled returns a reference to field ssl_enabled of azurerm_spring_cloud_app_redis_association.
func (ascara azurermSpringCloudAppRedisAssociationAttributes) SslEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascara.ref.Append("ssl_enabled"))
}

func (ascara azurermSpringCloudAppRedisAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascara.ref.Append("timeouts"))
}

type azurermSpringCloudAppRedisAssociationState struct {
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	RedisAccessKey   string         `json:"redis_access_key"`
	RedisCacheId     string         `json:"redis_cache_id"`
	SpringCloudAppId string         `json:"spring_cloud_app_id"`
	SslEnabled       bool           `json:"ssl_enabled"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
