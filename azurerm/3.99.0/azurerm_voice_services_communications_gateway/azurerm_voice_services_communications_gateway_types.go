// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_voice_services_communications_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ServiceLocation struct {
	// AllowedMediaSourceAddressPrefixes: set of string, optional
	AllowedMediaSourceAddressPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_media_source_address_prefixes,attr"`
	// AllowedSignalingSourceAddressPrefixes: set of string, optional
	AllowedSignalingSourceAddressPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_signaling_source_address_prefixes,attr"`
	// EsrpAddresses: set of string, optional
	EsrpAddresses terra.SetValue[terra.StringValue] `hcl:"esrp_addresses,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// OperatorAddresses: set of string, required
	OperatorAddresses terra.SetValue[terra.StringValue] `hcl:"operator_addresses,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ServiceLocationAttributes struct {
	ref terra.Reference
}

func (sl ServiceLocationAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl ServiceLocationAttributes) InternalWithRef(ref terra.Reference) ServiceLocationAttributes {
	return ServiceLocationAttributes{ref: ref}
}

func (sl ServiceLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl ServiceLocationAttributes) AllowedMediaSourceAddressPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sl.ref.Append("allowed_media_source_address_prefixes"))
}

func (sl ServiceLocationAttributes) AllowedSignalingSourceAddressPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sl.ref.Append("allowed_signaling_source_address_prefixes"))
}

func (sl ServiceLocationAttributes) EsrpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sl.ref.Append("esrp_addresses"))
}

func (sl ServiceLocationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("location"))
}

func (sl ServiceLocationAttributes) OperatorAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sl.ref.Append("operator_addresses"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ServiceLocationState struct {
	AllowedMediaSourceAddressPrefixes     []string `json:"allowed_media_source_address_prefixes"`
	AllowedSignalingSourceAddressPrefixes []string `json:"allowed_signaling_source_address_prefixes"`
	EsrpAddresses                         []string `json:"esrp_addresses"`
	Location                              string   `json:"location"`
	OperatorAddresses                     []string `json:"operator_addresses"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
