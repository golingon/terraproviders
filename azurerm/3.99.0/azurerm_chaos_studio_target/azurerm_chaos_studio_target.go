// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_chaos_studio_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_chaos_studio_target.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermChaosStudioTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acst *Resource) Type() string {
	return "azurerm_chaos_studio_target"
}

// LocalName returns the local name for [Resource].
func (acst *Resource) LocalName() string {
	return acst.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acst *Resource) Configuration() interface{} {
	return acst.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acst *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acst)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acst *Resource) Dependencies() terra.Dependencies {
	return acst.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acst *Resource) LifecycleManagement() *terra.Lifecycle {
	return acst.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acst *Resource) Attributes() azurermChaosStudioTargetAttributes {
	return azurermChaosStudioTargetAttributes{ref: terra.ReferenceResource(acst)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acst *Resource) ImportState(state io.Reader) error {
	acst.state = &azurermChaosStudioTargetState{}
	if err := json.NewDecoder(state).Decode(acst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acst.Type(), acst.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acst *Resource) State() (*azurermChaosStudioTargetState, bool) {
	return acst.state, acst.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acst *Resource) StateMust() *azurermChaosStudioTargetState {
	if acst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acst.Type(), acst.LocalName()))
	}
	return acst.state
}

// Args contains the configurations for azurerm_chaos_studio_target.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// TargetType: string, required
	TargetType terra.StringValue `hcl:"target_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermChaosStudioTargetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_chaos_studio_target.
func (acst azurermChaosStudioTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acst.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_chaos_studio_target.
func (acst azurermChaosStudioTargetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(acst.ref.Append("location"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_chaos_studio_target.
func (acst azurermChaosStudioTargetAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(acst.ref.Append("target_resource_id"))
}

// TargetType returns a reference to field target_type of azurerm_chaos_studio_target.
func (acst azurermChaosStudioTargetAttributes) TargetType() terra.StringValue {
	return terra.ReferenceAsString(acst.ref.Append("target_type"))
}

func (acst azurermChaosStudioTargetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acst.ref.Append("timeouts"))
}

type azurermChaosStudioTargetState struct {
	Id               string         `json:"id"`
	Location         string         `json:"location"`
	TargetResourceId string         `json:"target_resource_id"`
	TargetType       string         `json:"target_type"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
