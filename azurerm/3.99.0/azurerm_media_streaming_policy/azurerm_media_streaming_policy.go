// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_streaming_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_streaming_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaStreamingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsp *Resource) Type() string {
	return "azurerm_media_streaming_policy"
}

// LocalName returns the local name for [Resource].
func (amsp *Resource) LocalName() string {
	return amsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsp *Resource) Configuration() interface{} {
	return amsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsp *Resource) Dependencies() terra.Dependencies {
	return amsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsp *Resource) Attributes() azurermMediaStreamingPolicyAttributes {
	return azurermMediaStreamingPolicyAttributes{ref: terra.ReferenceResource(amsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsp *Resource) ImportState(state io.Reader) error {
	amsp.state = &azurermMediaStreamingPolicyState{}
	if err := json.NewDecoder(state).Decode(amsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsp.Type(), amsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsp *Resource) State() (*azurermMediaStreamingPolicyState, bool) {
	return amsp.state, amsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsp *Resource) StateMust() *azurermMediaStreamingPolicyState {
	if amsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsp.Type(), amsp.LocalName()))
	}
	return amsp.state
}

// Args contains the configurations for azurerm_media_streaming_policy.
type Args struct {
	// DefaultContentKeyPolicyName: string, optional
	DefaultContentKeyPolicyName terra.StringValue `hcl:"default_content_key_policy_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// CommonEncryptionCbcs: optional
	CommonEncryptionCbcs *CommonEncryptionCbcs `hcl:"common_encryption_cbcs,block"`
	// CommonEncryptionCenc: optional
	CommonEncryptionCenc *CommonEncryptionCenc `hcl:"common_encryption_cenc,block"`
	// EnvelopeEncryption: optional
	EnvelopeEncryption *EnvelopeEncryption `hcl:"envelope_encryption,block"`
	// NoEncryptionEnabledProtocols: optional
	NoEncryptionEnabledProtocols *NoEncryptionEnabledProtocols `hcl:"no_encryption_enabled_protocols,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaStreamingPolicyAttributes struct {
	ref terra.Reference
}

// DefaultContentKeyPolicyName returns a reference to field default_content_key_policy_name of azurerm_media_streaming_policy.
func (amsp azurermMediaStreamingPolicyAttributes) DefaultContentKeyPolicyName() terra.StringValue {
	return terra.ReferenceAsString(amsp.ref.Append("default_content_key_policy_name"))
}

// Id returns a reference to field id of azurerm_media_streaming_policy.
func (amsp azurermMediaStreamingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsp.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_streaming_policy.
func (amsp azurermMediaStreamingPolicyAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amsp.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_streaming_policy.
func (amsp azurermMediaStreamingPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amsp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_streaming_policy.
func (amsp azurermMediaStreamingPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amsp.ref.Append("resource_group_name"))
}

func (amsp azurermMediaStreamingPolicyAttributes) CommonEncryptionCbcs() terra.ListValue[CommonEncryptionCbcsAttributes] {
	return terra.ReferenceAsList[CommonEncryptionCbcsAttributes](amsp.ref.Append("common_encryption_cbcs"))
}

func (amsp azurermMediaStreamingPolicyAttributes) CommonEncryptionCenc() terra.ListValue[CommonEncryptionCencAttributes] {
	return terra.ReferenceAsList[CommonEncryptionCencAttributes](amsp.ref.Append("common_encryption_cenc"))
}

func (amsp azurermMediaStreamingPolicyAttributes) EnvelopeEncryption() terra.ListValue[EnvelopeEncryptionAttributes] {
	return terra.ReferenceAsList[EnvelopeEncryptionAttributes](amsp.ref.Append("envelope_encryption"))
}

func (amsp azurermMediaStreamingPolicyAttributes) NoEncryptionEnabledProtocols() terra.ListValue[NoEncryptionEnabledProtocolsAttributes] {
	return terra.ReferenceAsList[NoEncryptionEnabledProtocolsAttributes](amsp.ref.Append("no_encryption_enabled_protocols"))
}

func (amsp azurermMediaStreamingPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsp.ref.Append("timeouts"))
}

type azurermMediaStreamingPolicyState struct {
	DefaultContentKeyPolicyName  string                              `json:"default_content_key_policy_name"`
	Id                           string                              `json:"id"`
	MediaServicesAccountName     string                              `json:"media_services_account_name"`
	Name                         string                              `json:"name"`
	ResourceGroupName            string                              `json:"resource_group_name"`
	CommonEncryptionCbcs         []CommonEncryptionCbcsState         `json:"common_encryption_cbcs"`
	CommonEncryptionCenc         []CommonEncryptionCencState         `json:"common_encryption_cenc"`
	EnvelopeEncryption           []EnvelopeEncryptionState           `json:"envelope_encryption"`
	NoEncryptionEnabledProtocols []NoEncryptionEnabledProtocolsState `json:"no_encryption_enabled_protocols"`
	Timeouts                     *TimeoutsState                      `json:"timeouts"`
}
