// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_integration_runtime_managed

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogInfo struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorPassword: string, optional
	AdministratorPassword terra.StringValue `hcl:"administrator_password,attr"`
	// PricingTier: string, optional
	PricingTier terra.StringValue `hcl:"pricing_tier,attr"`
	// ServerEndpoint: string, required
	ServerEndpoint terra.StringValue `hcl:"server_endpoint,attr" validate:"required"`
}

type CustomSetupScript struct {
	// BlobContainerUri: string, required
	BlobContainerUri terra.StringValue `hcl:"blob_container_uri,attr" validate:"required"`
	// SasToken: string, required
	SasToken terra.StringValue `hcl:"sas_token,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VnetIntegration struct {
	// SubnetName: string, required
	SubnetName terra.StringValue `hcl:"subnet_name,attr" validate:"required"`
	// VnetId: string, required
	VnetId terra.StringValue `hcl:"vnet_id,attr" validate:"required"`
}

type CatalogInfoAttributes struct {
	ref terra.Reference
}

func (ci CatalogInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CatalogInfoAttributes) InternalWithRef(ref terra.Reference) CatalogInfoAttributes {
	return CatalogInfoAttributes{ref: ref}
}

func (ci CatalogInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CatalogInfoAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("administrator_login"))
}

func (ci CatalogInfoAttributes) AdministratorPassword() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("administrator_password"))
}

func (ci CatalogInfoAttributes) PricingTier() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("pricing_tier"))
}

func (ci CatalogInfoAttributes) ServerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("server_endpoint"))
}

type CustomSetupScriptAttributes struct {
	ref terra.Reference
}

func (css CustomSetupScriptAttributes) InternalRef() (terra.Reference, error) {
	return css.ref, nil
}

func (css CustomSetupScriptAttributes) InternalWithRef(ref terra.Reference) CustomSetupScriptAttributes {
	return CustomSetupScriptAttributes{ref: ref}
}

func (css CustomSetupScriptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return css.ref.InternalTokens()
}

func (css CustomSetupScriptAttributes) BlobContainerUri() terra.StringValue {
	return terra.ReferenceAsString(css.ref.Append("blob_container_uri"))
}

func (css CustomSetupScriptAttributes) SasToken() terra.StringValue {
	return terra.ReferenceAsString(css.ref.Append("sas_token"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VnetIntegrationAttributes struct {
	ref terra.Reference
}

func (vi VnetIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return vi.ref, nil
}

func (vi VnetIntegrationAttributes) InternalWithRef(ref terra.Reference) VnetIntegrationAttributes {
	return VnetIntegrationAttributes{ref: ref}
}

func (vi VnetIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vi.ref.InternalTokens()
}

func (vi VnetIntegrationAttributes) SubnetName() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("subnet_name"))
}

func (vi VnetIntegrationAttributes) VnetId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("vnet_id"))
}

type CatalogInfoState struct {
	AdministratorLogin    string `json:"administrator_login"`
	AdministratorPassword string `json:"administrator_password"`
	PricingTier           string `json:"pricing_tier"`
	ServerEndpoint        string `json:"server_endpoint"`
}

type CustomSetupScriptState struct {
	BlobContainerUri string `json:"blob_container_uri"`
	SasToken         string `json:"sas_token"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VnetIntegrationState struct {
	SubnetName string `json:"subnet_name"`
	VnetId     string `json:"vnet_id"`
}
