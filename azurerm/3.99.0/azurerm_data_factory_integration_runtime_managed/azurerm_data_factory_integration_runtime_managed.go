// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_integration_runtime_managed

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_integration_runtime_managed.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryIntegrationRuntimeManagedState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfirm *Resource) Type() string {
	return "azurerm_data_factory_integration_runtime_managed"
}

// LocalName returns the local name for [Resource].
func (adfirm *Resource) LocalName() string {
	return adfirm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfirm *Resource) Configuration() interface{} {
	return adfirm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfirm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfirm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfirm *Resource) Dependencies() terra.Dependencies {
	return adfirm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfirm *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfirm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfirm *Resource) Attributes() azurermDataFactoryIntegrationRuntimeManagedAttributes {
	return azurermDataFactoryIntegrationRuntimeManagedAttributes{ref: terra.ReferenceResource(adfirm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfirm *Resource) ImportState(state io.Reader) error {
	adfirm.state = &azurermDataFactoryIntegrationRuntimeManagedState{}
	if err := json.NewDecoder(state).Decode(adfirm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfirm.Type(), adfirm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfirm *Resource) State() (*azurermDataFactoryIntegrationRuntimeManagedState, bool) {
	return adfirm.state, adfirm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfirm *Resource) StateMust() *azurermDataFactoryIntegrationRuntimeManagedState {
	if adfirm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfirm.Type(), adfirm.LocalName()))
	}
	return adfirm.state
}

// Args contains the configurations for azurerm_data_factory_integration_runtime_managed.
type Args struct {
	// CredentialName: string, optional
	CredentialName terra.StringValue `hcl:"credential_name,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxParallelExecutionsPerNode: number, optional
	MaxParallelExecutionsPerNode terra.NumberValue `hcl:"max_parallel_executions_per_node,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeSize: string, required
	NodeSize terra.StringValue `hcl:"node_size,attr" validate:"required"`
	// NumberOfNodes: number, optional
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
	// CatalogInfo: optional
	CatalogInfo *CatalogInfo `hcl:"catalog_info,block"`
	// CustomSetupScript: optional
	CustomSetupScript *CustomSetupScript `hcl:"custom_setup_script,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VnetIntegration: optional
	VnetIntegration *VnetIntegration `hcl:"vnet_integration,block"`
}

type azurermDataFactoryIntegrationRuntimeManagedAttributes struct {
	ref terra.Reference
}

// CredentialName returns a reference to field credential_name of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) CredentialName() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("credential_name"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("description"))
}

// Edition returns a reference to field edition of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("edition"))
}

// Id returns a reference to field id of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("location"))
}

// MaxParallelExecutionsPerNode returns a reference to field max_parallel_executions_per_node of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) MaxParallelExecutionsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(adfirm.ref.Append("max_parallel_executions_per_node"))
}

// Name returns a reference to field name of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("name"))
}

// NodeSize returns a reference to field node_size of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) NodeSize() terra.StringValue {
	return terra.ReferenceAsString(adfirm.ref.Append("node_size"))
}

// NumberOfNodes returns a reference to field number_of_nodes of azurerm_data_factory_integration_runtime_managed.
func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(adfirm.ref.Append("number_of_nodes"))
}

func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) CatalogInfo() terra.ListValue[CatalogInfoAttributes] {
	return terra.ReferenceAsList[CatalogInfoAttributes](adfirm.ref.Append("catalog_info"))
}

func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) CustomSetupScript() terra.ListValue[CustomSetupScriptAttributes] {
	return terra.ReferenceAsList[CustomSetupScriptAttributes](adfirm.ref.Append("custom_setup_script"))
}

func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfirm.ref.Append("timeouts"))
}

func (adfirm azurermDataFactoryIntegrationRuntimeManagedAttributes) VnetIntegration() terra.ListValue[VnetIntegrationAttributes] {
	return terra.ReferenceAsList[VnetIntegrationAttributes](adfirm.ref.Append("vnet_integration"))
}

type azurermDataFactoryIntegrationRuntimeManagedState struct {
	CredentialName               string                   `json:"credential_name"`
	DataFactoryId                string                   `json:"data_factory_id"`
	Description                  string                   `json:"description"`
	Edition                      string                   `json:"edition"`
	Id                           string                   `json:"id"`
	LicenseType                  string                   `json:"license_type"`
	Location                     string                   `json:"location"`
	MaxParallelExecutionsPerNode float64                  `json:"max_parallel_executions_per_node"`
	Name                         string                   `json:"name"`
	NodeSize                     string                   `json:"node_size"`
	NumberOfNodes                float64                  `json:"number_of_nodes"`
	CatalogInfo                  []CatalogInfoState       `json:"catalog_info"`
	CustomSetupScript            []CustomSetupScriptState `json:"custom_setup_script"`
	Timeouts                     *TimeoutsState           `json:"timeouts"`
	VnetIntegration              []VnetIntegrationState   `json:"vnet_integration"`
}
