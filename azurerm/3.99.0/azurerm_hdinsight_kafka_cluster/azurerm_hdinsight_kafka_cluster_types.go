// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hdinsight_kafka_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ComponentVersion struct {
	// Kafka: string, required
	Kafka terra.StringValue `hcl:"kafka,attr" validate:"required"`
}

type ComputeIsolation struct {
	// ComputeIsolationEnabled: bool, optional
	ComputeIsolationEnabled terra.BoolValue `hcl:"compute_isolation_enabled,attr"`
	// HostSku: string, optional
	HostSku terra.StringValue `hcl:"host_sku,attr"`
}

type DiskEncryption struct {
	// EncryptionAlgorithm: string, optional
	EncryptionAlgorithm terra.StringValue `hcl:"encryption_algorithm,attr"`
	// EncryptionAtHostEnabled: bool, optional
	EncryptionAtHostEnabled terra.BoolValue `hcl:"encryption_at_host_enabled,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// KeyVaultManagedIdentityId: string, optional
	KeyVaultManagedIdentityId terra.StringValue `hcl:"key_vault_managed_identity_id,attr"`
}

type Extension struct {
	// LogAnalyticsWorkspaceId: string, required
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr" validate:"required"`
	// PrimaryKey: string, required
	PrimaryKey terra.StringValue `hcl:"primary_key,attr" validate:"required"`
}

type Gateway struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Metastores struct {
	// MetastoresAmbari: optional
	Ambari *MetastoresAmbari `hcl:"ambari,block"`
	// MetastoresHive: optional
	Hive *MetastoresHive `hcl:"hive,block"`
	// MetastoresOozie: optional
	Oozie *MetastoresOozie `hcl:"oozie,block"`
}

type MetastoresAmbari struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type MetastoresHive struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type MetastoresOozie struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Monitor struct {
	// LogAnalyticsWorkspaceId: string, required
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr" validate:"required"`
	// PrimaryKey: string, required
	PrimaryKey terra.StringValue `hcl:"primary_key,attr" validate:"required"`
}

type Network struct {
	// ConnectionDirection: string, optional
	ConnectionDirection terra.StringValue `hcl:"connection_direction,attr"`
	// PrivateLinkEnabled: bool, optional
	PrivateLinkEnabled terra.BoolValue `hcl:"private_link_enabled,attr"`
}

type RestProxy struct {
	// SecurityGroupId: string, required
	SecurityGroupId terra.StringValue `hcl:"security_group_id,attr" validate:"required"`
	// SecurityGroupName: string, required
	SecurityGroupName terra.StringValue `hcl:"security_group_name,attr" validate:"required"`
}

type Roles struct {
	// RolesHeadNode: required
	HeadNode *RolesHeadNode `hcl:"head_node,block" validate:"required"`
	// RolesKafkaManagementNode: optional
	KafkaManagementNode *RolesKafkaManagementNode `hcl:"kafka_management_node,block"`
	// RolesWorkerNode: required
	WorkerNode *RolesWorkerNode `hcl:"worker_node,block" validate:"required"`
	// RolesZookeeperNode: required
	ZookeeperNode *RolesZookeeperNode `hcl:"zookeeper_node,block" validate:"required"`
}

type RolesHeadNode struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// SshKeys: set of string, optional
	SshKeys terra.SetValue[terra.StringValue] `hcl:"ssh_keys,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// RolesHeadNodeScriptActions: min=0
	ScriptActions []RolesHeadNodeScriptActions `hcl:"script_actions,block" validate:"min=0"`
}

type RolesHeadNodeScriptActions struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type RolesKafkaManagementNode struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// SshKeys: set of string, optional
	SshKeys terra.SetValue[terra.StringValue] `hcl:"ssh_keys,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// RolesKafkaManagementNodeScriptActions: min=0
	ScriptActions []RolesKafkaManagementNodeScriptActions `hcl:"script_actions,block" validate:"min=0"`
}

type RolesKafkaManagementNodeScriptActions struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type RolesWorkerNode struct {
	// NumberOfDisksPerNode: number, required
	NumberOfDisksPerNode terra.NumberValue `hcl:"number_of_disks_per_node,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// SshKeys: set of string, optional
	SshKeys terra.SetValue[terra.StringValue] `hcl:"ssh_keys,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// TargetInstanceCount: number, required
	TargetInstanceCount terra.NumberValue `hcl:"target_instance_count,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// RolesWorkerNodeScriptActions: min=0
	ScriptActions []RolesWorkerNodeScriptActions `hcl:"script_actions,block" validate:"min=0"`
}

type RolesWorkerNodeScriptActions struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type RolesZookeeperNode struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// SshKeys: set of string, optional
	SshKeys terra.SetValue[terra.StringValue] `hcl:"ssh_keys,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// RolesZookeeperNodeScriptActions: min=0
	ScriptActions []RolesZookeeperNodeScriptActions `hcl:"script_actions,block" validate:"min=0"`
}

type RolesZookeeperNodeScriptActions struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type SecurityProfile struct {
	// AaddsResourceId: string, required
	AaddsResourceId terra.StringValue `hcl:"aadds_resource_id,attr" validate:"required"`
	// ClusterUsersGroupDns: set of string, optional
	ClusterUsersGroupDns terra.SetValue[terra.StringValue] `hcl:"cluster_users_group_dns,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// DomainUserPassword: string, required
	DomainUserPassword terra.StringValue `hcl:"domain_user_password,attr" validate:"required"`
	// DomainUsername: string, required
	DomainUsername terra.StringValue `hcl:"domain_username,attr" validate:"required"`
	// LdapsUrls: set of string, required
	LdapsUrls terra.SetValue[terra.StringValue] `hcl:"ldaps_urls,attr" validate:"required"`
	// MsiResourceId: string, required
	MsiResourceId terra.StringValue `hcl:"msi_resource_id,attr" validate:"required"`
}

type StorageAccount struct {
	// IsDefault: bool, required
	IsDefault terra.BoolValue `hcl:"is_default,attr" validate:"required"`
	// StorageAccountKey: string, required
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr" validate:"required"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// StorageResourceId: string, optional
	StorageResourceId terra.StringValue `hcl:"storage_resource_id,attr"`
}

type StorageAccountGen2 struct {
	// FilesystemId: string, required
	FilesystemId terra.StringValue `hcl:"filesystem_id,attr" validate:"required"`
	// IsDefault: bool, required
	IsDefault terra.BoolValue `hcl:"is_default,attr" validate:"required"`
	// ManagedIdentityResourceId: string, required
	ManagedIdentityResourceId terra.StringValue `hcl:"managed_identity_resource_id,attr" validate:"required"`
	// StorageResourceId: string, required
	StorageResourceId terra.StringValue `hcl:"storage_resource_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ComponentVersionAttributes struct {
	ref terra.Reference
}

func (cv ComponentVersionAttributes) InternalRef() (terra.Reference, error) {
	return cv.ref, nil
}

func (cv ComponentVersionAttributes) InternalWithRef(ref terra.Reference) ComponentVersionAttributes {
	return ComponentVersionAttributes{ref: ref}
}

func (cv ComponentVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cv.ref.InternalTokens()
}

func (cv ComponentVersionAttributes) Kafka() terra.StringValue {
	return terra.ReferenceAsString(cv.ref.Append("kafka"))
}

type ComputeIsolationAttributes struct {
	ref terra.Reference
}

func (ci ComputeIsolationAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci ComputeIsolationAttributes) InternalWithRef(ref terra.Reference) ComputeIsolationAttributes {
	return ComputeIsolationAttributes{ref: ref}
}

func (ci ComputeIsolationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci ComputeIsolationAttributes) ComputeIsolationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ci.ref.Append("compute_isolation_enabled"))
}

func (ci ComputeIsolationAttributes) HostSku() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("host_sku"))
}

type DiskEncryptionAttributes struct {
	ref terra.Reference
}

func (de DiskEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DiskEncryptionAttributes) InternalWithRef(ref terra.Reference) DiskEncryptionAttributes {
	return DiskEncryptionAttributes{ref: ref}
}

func (de DiskEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DiskEncryptionAttributes) EncryptionAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("encryption_algorithm"))
}

func (de DiskEncryptionAttributes) EncryptionAtHostEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(de.ref.Append("encryption_at_host_enabled"))
}

func (de DiskEncryptionAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_vault_key_id"))
}

func (de DiskEncryptionAttributes) KeyVaultManagedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("key_vault_managed_identity_id"))
}

type ExtensionAttributes struct {
	ref terra.Reference
}

func (e ExtensionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtensionAttributes) InternalWithRef(ref terra.Reference) ExtensionAttributes {
	return ExtensionAttributes{ref: ref}
}

func (e ExtensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtensionAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("log_analytics_workspace_id"))
}

func (e ExtensionAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("primary_key"))
}

type GatewayAttributes struct {
	ref terra.Reference
}

func (g GatewayAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GatewayAttributes) InternalWithRef(ref terra.Reference) GatewayAttributes {
	return GatewayAttributes{ref: ref}
}

func (g GatewayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GatewayAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("password"))
}

func (g GatewayAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("username"))
}

type MetastoresAttributes struct {
	ref terra.Reference
}

func (m MetastoresAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetastoresAttributes) InternalWithRef(ref terra.Reference) MetastoresAttributes {
	return MetastoresAttributes{ref: ref}
}

func (m MetastoresAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetastoresAttributes) Ambari() terra.ListValue[MetastoresAmbariAttributes] {
	return terra.ReferenceAsList[MetastoresAmbariAttributes](m.ref.Append("ambari"))
}

func (m MetastoresAttributes) Hive() terra.ListValue[MetastoresHiveAttributes] {
	return terra.ReferenceAsList[MetastoresHiveAttributes](m.ref.Append("hive"))
}

func (m MetastoresAttributes) Oozie() terra.ListValue[MetastoresOozieAttributes] {
	return terra.ReferenceAsList[MetastoresOozieAttributes](m.ref.Append("oozie"))
}

type MetastoresAmbariAttributes struct {
	ref terra.Reference
}

func (a MetastoresAmbariAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a MetastoresAmbariAttributes) InternalWithRef(ref terra.Reference) MetastoresAmbariAttributes {
	return MetastoresAmbariAttributes{ref: ref}
}

func (a MetastoresAmbariAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a MetastoresAmbariAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database_name"))
}

func (a MetastoresAmbariAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("password"))
}

func (a MetastoresAmbariAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("server"))
}

func (a MetastoresAmbariAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("username"))
}

type MetastoresHiveAttributes struct {
	ref terra.Reference
}

func (h MetastoresHiveAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h MetastoresHiveAttributes) InternalWithRef(ref terra.Reference) MetastoresHiveAttributes {
	return MetastoresHiveAttributes{ref: ref}
}

func (h MetastoresHiveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h MetastoresHiveAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("database_name"))
}

func (h MetastoresHiveAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("password"))
}

func (h MetastoresHiveAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("server"))
}

func (h MetastoresHiveAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("username"))
}

type MetastoresOozieAttributes struct {
	ref terra.Reference
}

func (o MetastoresOozieAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o MetastoresOozieAttributes) InternalWithRef(ref terra.Reference) MetastoresOozieAttributes {
	return MetastoresOozieAttributes{ref: ref}
}

func (o MetastoresOozieAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o MetastoresOozieAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("database_name"))
}

func (o MetastoresOozieAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("password"))
}

func (o MetastoresOozieAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("server"))
}

func (o MetastoresOozieAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username"))
}

type MonitorAttributes struct {
	ref terra.Reference
}

func (m MonitorAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitorAttributes) InternalWithRef(ref terra.Reference) MonitorAttributes {
	return MonitorAttributes{ref: ref}
}

func (m MonitorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitorAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("log_analytics_workspace_id"))
}

func (m MonitorAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("primary_key"))
}

type NetworkAttributes struct {
	ref terra.Reference
}

func (n NetworkAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NetworkAttributes) InternalWithRef(ref terra.Reference) NetworkAttributes {
	return NetworkAttributes{ref: ref}
}

func (n NetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NetworkAttributes) ConnectionDirection() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("connection_direction"))
}

func (n NetworkAttributes) PrivateLinkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(n.ref.Append("private_link_enabled"))
}

type RestProxyAttributes struct {
	ref terra.Reference
}

func (rp RestProxyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RestProxyAttributes) InternalWithRef(ref terra.Reference) RestProxyAttributes {
	return RestProxyAttributes{ref: ref}
}

func (rp RestProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RestProxyAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("security_group_id"))
}

func (rp RestProxyAttributes) SecurityGroupName() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("security_group_name"))
}

type RolesAttributes struct {
	ref terra.Reference
}

func (r RolesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RolesAttributes) InternalWithRef(ref terra.Reference) RolesAttributes {
	return RolesAttributes{ref: ref}
}

func (r RolesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RolesAttributes) HeadNode() terra.ListValue[RolesHeadNodeAttributes] {
	return terra.ReferenceAsList[RolesHeadNodeAttributes](r.ref.Append("head_node"))
}

func (r RolesAttributes) KafkaManagementNode() terra.ListValue[RolesKafkaManagementNodeAttributes] {
	return terra.ReferenceAsList[RolesKafkaManagementNodeAttributes](r.ref.Append("kafka_management_node"))
}

func (r RolesAttributes) WorkerNode() terra.ListValue[RolesWorkerNodeAttributes] {
	return terra.ReferenceAsList[RolesWorkerNodeAttributes](r.ref.Append("worker_node"))
}

func (r RolesAttributes) ZookeeperNode() terra.ListValue[RolesZookeeperNodeAttributes] {
	return terra.ReferenceAsList[RolesZookeeperNodeAttributes](r.ref.Append("zookeeper_node"))
}

type RolesHeadNodeAttributes struct {
	ref terra.Reference
}

func (hn RolesHeadNodeAttributes) InternalRef() (terra.Reference, error) {
	return hn.ref, nil
}

func (hn RolesHeadNodeAttributes) InternalWithRef(ref terra.Reference) RolesHeadNodeAttributes {
	return RolesHeadNodeAttributes{ref: ref}
}

func (hn RolesHeadNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hn.ref.InternalTokens()
}

func (hn RolesHeadNodeAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(hn.ref.Append("password"))
}

func (hn RolesHeadNodeAttributes) SshKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hn.ref.Append("ssh_keys"))
}

func (hn RolesHeadNodeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(hn.ref.Append("subnet_id"))
}

func (hn RolesHeadNodeAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(hn.ref.Append("username"))
}

func (hn RolesHeadNodeAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(hn.ref.Append("virtual_network_id"))
}

func (hn RolesHeadNodeAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(hn.ref.Append("vm_size"))
}

func (hn RolesHeadNodeAttributes) ScriptActions() terra.ListValue[RolesHeadNodeScriptActionsAttributes] {
	return terra.ReferenceAsList[RolesHeadNodeScriptActionsAttributes](hn.ref.Append("script_actions"))
}

type RolesHeadNodeScriptActionsAttributes struct {
	ref terra.Reference
}

func (sa RolesHeadNodeScriptActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa RolesHeadNodeScriptActionsAttributes) InternalWithRef(ref terra.Reference) RolesHeadNodeScriptActionsAttributes {
	return RolesHeadNodeScriptActionsAttributes{ref: ref}
}

func (sa RolesHeadNodeScriptActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa RolesHeadNodeScriptActionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa RolesHeadNodeScriptActionsAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("parameters"))
}

func (sa RolesHeadNodeScriptActionsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("uri"))
}

type RolesKafkaManagementNodeAttributes struct {
	ref terra.Reference
}

func (kmn RolesKafkaManagementNodeAttributes) InternalRef() (terra.Reference, error) {
	return kmn.ref, nil
}

func (kmn RolesKafkaManagementNodeAttributes) InternalWithRef(ref terra.Reference) RolesKafkaManagementNodeAttributes {
	return RolesKafkaManagementNodeAttributes{ref: ref}
}

func (kmn RolesKafkaManagementNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kmn.ref.InternalTokens()
}

func (kmn RolesKafkaManagementNodeAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(kmn.ref.Append("password"))
}

func (kmn RolesKafkaManagementNodeAttributes) SshKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](kmn.ref.Append("ssh_keys"))
}

func (kmn RolesKafkaManagementNodeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(kmn.ref.Append("subnet_id"))
}

func (kmn RolesKafkaManagementNodeAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(kmn.ref.Append("username"))
}

func (kmn RolesKafkaManagementNodeAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(kmn.ref.Append("virtual_network_id"))
}

func (kmn RolesKafkaManagementNodeAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(kmn.ref.Append("vm_size"))
}

func (kmn RolesKafkaManagementNodeAttributes) ScriptActions() terra.ListValue[RolesKafkaManagementNodeScriptActionsAttributes] {
	return terra.ReferenceAsList[RolesKafkaManagementNodeScriptActionsAttributes](kmn.ref.Append("script_actions"))
}

type RolesKafkaManagementNodeScriptActionsAttributes struct {
	ref terra.Reference
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) InternalWithRef(ref terra.Reference) RolesKafkaManagementNodeScriptActionsAttributes {
	return RolesKafkaManagementNodeScriptActionsAttributes{ref: ref}
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("parameters"))
}

func (sa RolesKafkaManagementNodeScriptActionsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("uri"))
}

type RolesWorkerNodeAttributes struct {
	ref terra.Reference
}

func (wn RolesWorkerNodeAttributes) InternalRef() (terra.Reference, error) {
	return wn.ref, nil
}

func (wn RolesWorkerNodeAttributes) InternalWithRef(ref terra.Reference) RolesWorkerNodeAttributes {
	return RolesWorkerNodeAttributes{ref: ref}
}

func (wn RolesWorkerNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wn.ref.InternalTokens()
}

func (wn RolesWorkerNodeAttributes) NumberOfDisksPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(wn.ref.Append("number_of_disks_per_node"))
}

func (wn RolesWorkerNodeAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(wn.ref.Append("password"))
}

func (wn RolesWorkerNodeAttributes) SshKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](wn.ref.Append("ssh_keys"))
}

func (wn RolesWorkerNodeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(wn.ref.Append("subnet_id"))
}

func (wn RolesWorkerNodeAttributes) TargetInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(wn.ref.Append("target_instance_count"))
}

func (wn RolesWorkerNodeAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(wn.ref.Append("username"))
}

func (wn RolesWorkerNodeAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(wn.ref.Append("virtual_network_id"))
}

func (wn RolesWorkerNodeAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(wn.ref.Append("vm_size"))
}

func (wn RolesWorkerNodeAttributes) ScriptActions() terra.ListValue[RolesWorkerNodeScriptActionsAttributes] {
	return terra.ReferenceAsList[RolesWorkerNodeScriptActionsAttributes](wn.ref.Append("script_actions"))
}

type RolesWorkerNodeScriptActionsAttributes struct {
	ref terra.Reference
}

func (sa RolesWorkerNodeScriptActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa RolesWorkerNodeScriptActionsAttributes) InternalWithRef(ref terra.Reference) RolesWorkerNodeScriptActionsAttributes {
	return RolesWorkerNodeScriptActionsAttributes{ref: ref}
}

func (sa RolesWorkerNodeScriptActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa RolesWorkerNodeScriptActionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa RolesWorkerNodeScriptActionsAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("parameters"))
}

func (sa RolesWorkerNodeScriptActionsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("uri"))
}

type RolesZookeeperNodeAttributes struct {
	ref terra.Reference
}

func (zn RolesZookeeperNodeAttributes) InternalRef() (terra.Reference, error) {
	return zn.ref, nil
}

func (zn RolesZookeeperNodeAttributes) InternalWithRef(ref terra.Reference) RolesZookeeperNodeAttributes {
	return RolesZookeeperNodeAttributes{ref: ref}
}

func (zn RolesZookeeperNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return zn.ref.InternalTokens()
}

func (zn RolesZookeeperNodeAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(zn.ref.Append("password"))
}

func (zn RolesZookeeperNodeAttributes) SshKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](zn.ref.Append("ssh_keys"))
}

func (zn RolesZookeeperNodeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(zn.ref.Append("subnet_id"))
}

func (zn RolesZookeeperNodeAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(zn.ref.Append("username"))
}

func (zn RolesZookeeperNodeAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(zn.ref.Append("virtual_network_id"))
}

func (zn RolesZookeeperNodeAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(zn.ref.Append("vm_size"))
}

func (zn RolesZookeeperNodeAttributes) ScriptActions() terra.ListValue[RolesZookeeperNodeScriptActionsAttributes] {
	return terra.ReferenceAsList[RolesZookeeperNodeScriptActionsAttributes](zn.ref.Append("script_actions"))
}

type RolesZookeeperNodeScriptActionsAttributes struct {
	ref terra.Reference
}

func (sa RolesZookeeperNodeScriptActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa RolesZookeeperNodeScriptActionsAttributes) InternalWithRef(ref terra.Reference) RolesZookeeperNodeScriptActionsAttributes {
	return RolesZookeeperNodeScriptActionsAttributes{ref: ref}
}

func (sa RolesZookeeperNodeScriptActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa RolesZookeeperNodeScriptActionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa RolesZookeeperNodeScriptActionsAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("parameters"))
}

func (sa RolesZookeeperNodeScriptActionsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("uri"))
}

type SecurityProfileAttributes struct {
	ref terra.Reference
}

func (sp SecurityProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SecurityProfileAttributes) InternalWithRef(ref terra.Reference) SecurityProfileAttributes {
	return SecurityProfileAttributes{ref: ref}
}

func (sp SecurityProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SecurityProfileAttributes) AaddsResourceId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("aadds_resource_id"))
}

func (sp SecurityProfileAttributes) ClusterUsersGroupDns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sp.ref.Append("cluster_users_group_dns"))
}

func (sp SecurityProfileAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("domain_name"))
}

func (sp SecurityProfileAttributes) DomainUserPassword() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("domain_user_password"))
}

func (sp SecurityProfileAttributes) DomainUsername() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("domain_username"))
}

func (sp SecurityProfileAttributes) LdapsUrls() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sp.ref.Append("ldaps_urls"))
}

func (sp SecurityProfileAttributes) MsiResourceId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("msi_resource_id"))
}

type StorageAccountAttributes struct {
	ref terra.Reference
}

func (sa StorageAccountAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa StorageAccountAttributes) InternalWithRef(ref terra.Reference) StorageAccountAttributes {
	return StorageAccountAttributes{ref: ref}
}

func (sa StorageAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa StorageAccountAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("is_default"))
}

func (sa StorageAccountAttributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("storage_account_key"))
}

func (sa StorageAccountAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("storage_container_id"))
}

func (sa StorageAccountAttributes) StorageResourceId() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("storage_resource_id"))
}

type StorageAccountGen2Attributes struct {
	ref terra.Reference
}

func (sag StorageAccountGen2Attributes) InternalRef() (terra.Reference, error) {
	return sag.ref, nil
}

func (sag StorageAccountGen2Attributes) InternalWithRef(ref terra.Reference) StorageAccountGen2Attributes {
	return StorageAccountGen2Attributes{ref: ref}
}

func (sag StorageAccountGen2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return sag.ref.InternalTokens()
}

func (sag StorageAccountGen2Attributes) FilesystemId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("filesystem_id"))
}

func (sag StorageAccountGen2Attributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(sag.ref.Append("is_default"))
}

func (sag StorageAccountGen2Attributes) ManagedIdentityResourceId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("managed_identity_resource_id"))
}

func (sag StorageAccountGen2Attributes) StorageResourceId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("storage_resource_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ComponentVersionState struct {
	Kafka string `json:"kafka"`
}

type ComputeIsolationState struct {
	ComputeIsolationEnabled bool   `json:"compute_isolation_enabled"`
	HostSku                 string `json:"host_sku"`
}

type DiskEncryptionState struct {
	EncryptionAlgorithm       string `json:"encryption_algorithm"`
	EncryptionAtHostEnabled   bool   `json:"encryption_at_host_enabled"`
	KeyVaultKeyId             string `json:"key_vault_key_id"`
	KeyVaultManagedIdentityId string `json:"key_vault_managed_identity_id"`
}

type ExtensionState struct {
	LogAnalyticsWorkspaceId string `json:"log_analytics_workspace_id"`
	PrimaryKey              string `json:"primary_key"`
}

type GatewayState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type MetastoresState struct {
	Ambari []MetastoresAmbariState `json:"ambari"`
	Hive   []MetastoresHiveState   `json:"hive"`
	Oozie  []MetastoresOozieState  `json:"oozie"`
}

type MetastoresAmbariState struct {
	DatabaseName string `json:"database_name"`
	Password     string `json:"password"`
	Server       string `json:"server"`
	Username     string `json:"username"`
}

type MetastoresHiveState struct {
	DatabaseName string `json:"database_name"`
	Password     string `json:"password"`
	Server       string `json:"server"`
	Username     string `json:"username"`
}

type MetastoresOozieState struct {
	DatabaseName string `json:"database_name"`
	Password     string `json:"password"`
	Server       string `json:"server"`
	Username     string `json:"username"`
}

type MonitorState struct {
	LogAnalyticsWorkspaceId string `json:"log_analytics_workspace_id"`
	PrimaryKey              string `json:"primary_key"`
}

type NetworkState struct {
	ConnectionDirection string `json:"connection_direction"`
	PrivateLinkEnabled  bool   `json:"private_link_enabled"`
}

type RestProxyState struct {
	SecurityGroupId   string `json:"security_group_id"`
	SecurityGroupName string `json:"security_group_name"`
}

type RolesState struct {
	HeadNode            []RolesHeadNodeState            `json:"head_node"`
	KafkaManagementNode []RolesKafkaManagementNodeState `json:"kafka_management_node"`
	WorkerNode          []RolesWorkerNodeState          `json:"worker_node"`
	ZookeeperNode       []RolesZookeeperNodeState       `json:"zookeeper_node"`
}

type RolesHeadNodeState struct {
	Password         string                            `json:"password"`
	SshKeys          []string                          `json:"ssh_keys"`
	SubnetId         string                            `json:"subnet_id"`
	Username         string                            `json:"username"`
	VirtualNetworkId string                            `json:"virtual_network_id"`
	VmSize           string                            `json:"vm_size"`
	ScriptActions    []RolesHeadNodeScriptActionsState `json:"script_actions"`
}

type RolesHeadNodeScriptActionsState struct {
	Name       string `json:"name"`
	Parameters string `json:"parameters"`
	Uri        string `json:"uri"`
}

type RolesKafkaManagementNodeState struct {
	Password         string                                       `json:"password"`
	SshKeys          []string                                     `json:"ssh_keys"`
	SubnetId         string                                       `json:"subnet_id"`
	Username         string                                       `json:"username"`
	VirtualNetworkId string                                       `json:"virtual_network_id"`
	VmSize           string                                       `json:"vm_size"`
	ScriptActions    []RolesKafkaManagementNodeScriptActionsState `json:"script_actions"`
}

type RolesKafkaManagementNodeScriptActionsState struct {
	Name       string `json:"name"`
	Parameters string `json:"parameters"`
	Uri        string `json:"uri"`
}

type RolesWorkerNodeState struct {
	NumberOfDisksPerNode float64                             `json:"number_of_disks_per_node"`
	Password             string                              `json:"password"`
	SshKeys              []string                            `json:"ssh_keys"`
	SubnetId             string                              `json:"subnet_id"`
	TargetInstanceCount  float64                             `json:"target_instance_count"`
	Username             string                              `json:"username"`
	VirtualNetworkId     string                              `json:"virtual_network_id"`
	VmSize               string                              `json:"vm_size"`
	ScriptActions        []RolesWorkerNodeScriptActionsState `json:"script_actions"`
}

type RolesWorkerNodeScriptActionsState struct {
	Name       string `json:"name"`
	Parameters string `json:"parameters"`
	Uri        string `json:"uri"`
}

type RolesZookeeperNodeState struct {
	Password         string                                 `json:"password"`
	SshKeys          []string                               `json:"ssh_keys"`
	SubnetId         string                                 `json:"subnet_id"`
	Username         string                                 `json:"username"`
	VirtualNetworkId string                                 `json:"virtual_network_id"`
	VmSize           string                                 `json:"vm_size"`
	ScriptActions    []RolesZookeeperNodeScriptActionsState `json:"script_actions"`
}

type RolesZookeeperNodeScriptActionsState struct {
	Name       string `json:"name"`
	Parameters string `json:"parameters"`
	Uri        string `json:"uri"`
}

type SecurityProfileState struct {
	AaddsResourceId      string   `json:"aadds_resource_id"`
	ClusterUsersGroupDns []string `json:"cluster_users_group_dns"`
	DomainName           string   `json:"domain_name"`
	DomainUserPassword   string   `json:"domain_user_password"`
	DomainUsername       string   `json:"domain_username"`
	LdapsUrls            []string `json:"ldaps_urls"`
	MsiResourceId        string   `json:"msi_resource_id"`
}

type StorageAccountState struct {
	IsDefault          bool   `json:"is_default"`
	StorageAccountKey  string `json:"storage_account_key"`
	StorageContainerId string `json:"storage_container_id"`
	StorageResourceId  string `json:"storage_resource_id"`
}

type StorageAccountGen2State struct {
	FilesystemId              string `json:"filesystem_id"`
	IsDefault                 bool   `json:"is_default"`
	ManagedIdentityResourceId string `json:"managed_identity_resource_id"`
	StorageResourceId         string `json:"storage_resource_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
