// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_application_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_managed_application_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagedApplicationDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amad *Resource) Type() string {
	return "azurerm_managed_application_definition"
}

// LocalName returns the local name for [Resource].
func (amad *Resource) LocalName() string {
	return amad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amad *Resource) Configuration() interface{} {
	return amad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amad *Resource) Dependencies() terra.Dependencies {
	return amad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amad *Resource) LifecycleManagement() *terra.Lifecycle {
	return amad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amad *Resource) Attributes() azurermManagedApplicationDefinitionAttributes {
	return azurermManagedApplicationDefinitionAttributes{ref: terra.ReferenceResource(amad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amad *Resource) ImportState(state io.Reader) error {
	amad.state = &azurermManagedApplicationDefinitionState{}
	if err := json.NewDecoder(state).Decode(amad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amad.Type(), amad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amad *Resource) State() (*azurermManagedApplicationDefinitionState, bool) {
	return amad.state, amad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amad *Resource) StateMust() *azurermManagedApplicationDefinitionState {
	if amad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amad.Type(), amad.LocalName()))
	}
	return amad.state
}

// Args contains the configurations for azurerm_managed_application_definition.
type Args struct {
	// CreateUiDefinition: string, optional
	CreateUiDefinition terra.StringValue `hcl:"create_ui_definition,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LockLevel: string, required
	LockLevel terra.StringValue `hcl:"lock_level,attr" validate:"required"`
	// MainTemplate: string, optional
	MainTemplate terra.StringValue `hcl:"main_template,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PackageEnabled: bool, optional
	PackageEnabled terra.BoolValue `hcl:"package_enabled,attr"`
	// PackageFileUri: string, optional
	PackageFileUri terra.StringValue `hcl:"package_file_uri,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Authorization: min=0
	Authorization []Authorization `hcl:"authorization,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagedApplicationDefinitionAttributes struct {
	ref terra.Reference
}

// CreateUiDefinition returns a reference to field create_ui_definition of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) CreateUiDefinition() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("create_ui_definition"))
}

// Description returns a reference to field description of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("location"))
}

// LockLevel returns a reference to field lock_level of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) LockLevel() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("lock_level"))
}

// MainTemplate returns a reference to field main_template of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) MainTemplate() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("main_template"))
}

// Name returns a reference to field name of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("name"))
}

// PackageEnabled returns a reference to field package_enabled of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) PackageEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amad.ref.Append("package_enabled"))
}

// PackageFileUri returns a reference to field package_file_uri of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) PackageFileUri() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("package_file_uri"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amad.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_managed_application_definition.
func (amad azurermManagedApplicationDefinitionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amad.ref.Append("tags"))
}

func (amad azurermManagedApplicationDefinitionAttributes) Authorization() terra.SetValue[AuthorizationAttributes] {
	return terra.ReferenceAsSet[AuthorizationAttributes](amad.ref.Append("authorization"))
}

func (amad azurermManagedApplicationDefinitionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amad.ref.Append("timeouts"))
}

type azurermManagedApplicationDefinitionState struct {
	CreateUiDefinition string               `json:"create_ui_definition"`
	Description        string               `json:"description"`
	DisplayName        string               `json:"display_name"`
	Id                 string               `json:"id"`
	Location           string               `json:"location"`
	LockLevel          string               `json:"lock_level"`
	MainTemplate       string               `json:"main_template"`
	Name               string               `json:"name"`
	PackageEnabled     bool                 `json:"package_enabled"`
	PackageFileUri     string               `json:"package_file_uri"`
	ResourceGroupName  string               `json:"resource_group_name"`
	Tags               map[string]string    `json:"tags"`
	Authorization      []AuthorizationState `json:"authorization"`
	Timeouts           *TimeoutsState       `json:"timeouts"`
}
