// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_service_fabric_managed_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_service_fabric_managed_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermServiceFabricManagedClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asfmc *Resource) Type() string {
	return "azurerm_service_fabric_managed_cluster"
}

// LocalName returns the local name for [Resource].
func (asfmc *Resource) LocalName() string {
	return asfmc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asfmc *Resource) Configuration() interface{} {
	return asfmc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asfmc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asfmc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asfmc *Resource) Dependencies() terra.Dependencies {
	return asfmc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asfmc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asfmc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asfmc *Resource) Attributes() azurermServiceFabricManagedClusterAttributes {
	return azurermServiceFabricManagedClusterAttributes{ref: terra.ReferenceResource(asfmc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asfmc *Resource) ImportState(state io.Reader) error {
	asfmc.state = &azurermServiceFabricManagedClusterState{}
	if err := json.NewDecoder(state).Decode(asfmc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asfmc.Type(), asfmc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asfmc *Resource) State() (*azurermServiceFabricManagedClusterState, bool) {
	return asfmc.state, asfmc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asfmc *Resource) StateMust() *azurermServiceFabricManagedClusterState {
	if asfmc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asfmc.Type(), asfmc.LocalName()))
	}
	return asfmc.state
}

// Args contains the configurations for azurerm_service_fabric_managed_cluster.
type Args struct {
	// BackupServiceEnabled: bool, optional
	BackupServiceEnabled terra.BoolValue `hcl:"backup_service_enabled,attr"`
	// ClientConnectionPort: number, required
	ClientConnectionPort terra.NumberValue `hcl:"client_connection_port,attr" validate:"required"`
	// DnsName: string, optional
	DnsName terra.StringValue `hcl:"dns_name,attr"`
	// DnsServiceEnabled: bool, optional
	DnsServiceEnabled terra.BoolValue `hcl:"dns_service_enabled,attr"`
	// HttpGatewayPort: number, required
	HttpGatewayPort terra.NumberValue `hcl:"http_gateway_port,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UpgradeWave: string, optional
	UpgradeWave terra.StringValue `hcl:"upgrade_wave,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
	// Authentication: optional
	Authentication *Authentication `hcl:"authentication,block"`
	// CustomFabricSetting: min=0
	CustomFabricSetting []CustomFabricSetting `hcl:"custom_fabric_setting,block" validate:"min=0"`
	// LbRule: min=1
	LbRule []LbRule `hcl:"lb_rule,block" validate:"min=1"`
	// NodeType: min=0
	NodeType []NodeType `hcl:"node_type,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermServiceFabricManagedClusterAttributes struct {
	ref terra.Reference
}

// BackupServiceEnabled returns a reference to field backup_service_enabled of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) BackupServiceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asfmc.ref.Append("backup_service_enabled"))
}

// ClientConnectionPort returns a reference to field client_connection_port of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) ClientConnectionPort() terra.NumberValue {
	return terra.ReferenceAsNumber(asfmc.ref.Append("client_connection_port"))
}

// DnsName returns a reference to field dns_name of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("dns_name"))
}

// DnsServiceEnabled returns a reference to field dns_service_enabled of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) DnsServiceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asfmc.ref.Append("dns_service_enabled"))
}

// HttpGatewayPort returns a reference to field http_gateway_port of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) HttpGatewayPort() terra.NumberValue {
	return terra.ReferenceAsNumber(asfmc.ref.Append("http_gateway_port"))
}

// Id returns a reference to field id of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("password"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfmc.ref.Append("tags"))
}

// UpgradeWave returns a reference to field upgrade_wave of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) UpgradeWave() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("upgrade_wave"))
}

// Username returns a reference to field username of azurerm_service_fabric_managed_cluster.
func (asfmc azurermServiceFabricManagedClusterAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(asfmc.ref.Append("username"))
}

func (asfmc azurermServiceFabricManagedClusterAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](asfmc.ref.Append("authentication"))
}

func (asfmc azurermServiceFabricManagedClusterAttributes) CustomFabricSetting() terra.ListValue[CustomFabricSettingAttributes] {
	return terra.ReferenceAsList[CustomFabricSettingAttributes](asfmc.ref.Append("custom_fabric_setting"))
}

func (asfmc azurermServiceFabricManagedClusterAttributes) LbRule() terra.ListValue[LbRuleAttributes] {
	return terra.ReferenceAsList[LbRuleAttributes](asfmc.ref.Append("lb_rule"))
}

func (asfmc azurermServiceFabricManagedClusterAttributes) NodeType() terra.ListValue[NodeTypeAttributes] {
	return terra.ReferenceAsList[NodeTypeAttributes](asfmc.ref.Append("node_type"))
}

func (asfmc azurermServiceFabricManagedClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asfmc.ref.Append("timeouts"))
}

type azurermServiceFabricManagedClusterState struct {
	BackupServiceEnabled bool                       `json:"backup_service_enabled"`
	ClientConnectionPort float64                    `json:"client_connection_port"`
	DnsName              string                     `json:"dns_name"`
	DnsServiceEnabled    bool                       `json:"dns_service_enabled"`
	HttpGatewayPort      float64                    `json:"http_gateway_port"`
	Id                   string                     `json:"id"`
	Location             string                     `json:"location"`
	Name                 string                     `json:"name"`
	Password             string                     `json:"password"`
	ResourceGroupName    string                     `json:"resource_group_name"`
	Sku                  string                     `json:"sku"`
	Tags                 map[string]string          `json:"tags"`
	UpgradeWave          string                     `json:"upgrade_wave"`
	Username             string                     `json:"username"`
	Authentication       []AuthenticationState      `json:"authentication"`
	CustomFabricSetting  []CustomFabricSettingState `json:"custom_fabric_setting"`
	LbRule               []LbRuleState              `json:"lb_rule"`
	NodeType             []NodeTypeState            `json:"node_type"`
	Timeouts             *TimeoutsState             `json:"timeouts"`
}
