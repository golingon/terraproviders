// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kubernetes_cluster_trusted_access_role_binding

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kubernetes_cluster_trusted_access_role_binding.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKubernetesClusterTrustedAccessRoleBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akctarb *Resource) Type() string {
	return "azurerm_kubernetes_cluster_trusted_access_role_binding"
}

// LocalName returns the local name for [Resource].
func (akctarb *Resource) LocalName() string {
	return akctarb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akctarb *Resource) Configuration() interface{} {
	return akctarb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akctarb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akctarb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akctarb *Resource) Dependencies() terra.Dependencies {
	return akctarb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akctarb *Resource) LifecycleManagement() *terra.Lifecycle {
	return akctarb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akctarb *Resource) Attributes() azurermKubernetesClusterTrustedAccessRoleBindingAttributes {
	return azurermKubernetesClusterTrustedAccessRoleBindingAttributes{ref: terra.ReferenceResource(akctarb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akctarb *Resource) ImportState(state io.Reader) error {
	akctarb.state = &azurermKubernetesClusterTrustedAccessRoleBindingState{}
	if err := json.NewDecoder(state).Decode(akctarb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akctarb.Type(), akctarb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akctarb *Resource) State() (*azurermKubernetesClusterTrustedAccessRoleBindingState, bool) {
	return akctarb.state, akctarb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akctarb *Resource) StateMust() *azurermKubernetesClusterTrustedAccessRoleBindingState {
	if akctarb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akctarb.Type(), akctarb.LocalName()))
	}
	return akctarb.state
}

// Args contains the configurations for azurerm_kubernetes_cluster_trusted_access_role_binding.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KubernetesClusterId: string, required
	KubernetesClusterId terra.StringValue `hcl:"kubernetes_cluster_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Roles: list of string, required
	Roles terra.ListValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// SourceResourceId: string, required
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKubernetesClusterTrustedAccessRoleBindingAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_kubernetes_cluster_trusted_access_role_binding.
func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akctarb.ref.Append("id"))
}

// KubernetesClusterId returns a reference to field kubernetes_cluster_id of azurerm_kubernetes_cluster_trusted_access_role_binding.
func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) KubernetesClusterId() terra.StringValue {
	return terra.ReferenceAsString(akctarb.ref.Append("kubernetes_cluster_id"))
}

// Name returns a reference to field name of azurerm_kubernetes_cluster_trusted_access_role_binding.
func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akctarb.ref.Append("name"))
}

// Roles returns a reference to field roles of azurerm_kubernetes_cluster_trusted_access_role_binding.
func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) Roles() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akctarb.ref.Append("roles"))
}

// SourceResourceId returns a reference to field source_resource_id of azurerm_kubernetes_cluster_trusted_access_role_binding.
func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceAsString(akctarb.ref.Append("source_resource_id"))
}

func (akctarb azurermKubernetesClusterTrustedAccessRoleBindingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akctarb.ref.Append("timeouts"))
}

type azurermKubernetesClusterTrustedAccessRoleBindingState struct {
	Id                  string         `json:"id"`
	KubernetesClusterId string         `json:"kubernetes_cluster_id"`
	Name                string         `json:"name"`
	Roles               []string       `json:"roles"`
	SourceResourceId    string         `json:"source_resource_id"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
