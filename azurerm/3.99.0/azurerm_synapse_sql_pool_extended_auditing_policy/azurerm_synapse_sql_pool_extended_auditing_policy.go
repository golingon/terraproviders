// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_sql_pool_extended_auditing_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_sql_pool_extended_auditing_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseSqlPoolExtendedAuditingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asspeap *Resource) Type() string {
	return "azurerm_synapse_sql_pool_extended_auditing_policy"
}

// LocalName returns the local name for [Resource].
func (asspeap *Resource) LocalName() string {
	return asspeap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asspeap *Resource) Configuration() interface{} {
	return asspeap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asspeap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asspeap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asspeap *Resource) Dependencies() terra.Dependencies {
	return asspeap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asspeap *Resource) LifecycleManagement() *terra.Lifecycle {
	return asspeap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asspeap *Resource) Attributes() azurermSynapseSqlPoolExtendedAuditingPolicyAttributes {
	return azurermSynapseSqlPoolExtendedAuditingPolicyAttributes{ref: terra.ReferenceResource(asspeap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asspeap *Resource) ImportState(state io.Reader) error {
	asspeap.state = &azurermSynapseSqlPoolExtendedAuditingPolicyState{}
	if err := json.NewDecoder(state).Decode(asspeap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asspeap.Type(), asspeap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asspeap *Resource) State() (*azurermSynapseSqlPoolExtendedAuditingPolicyState, bool) {
	return asspeap.state, asspeap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asspeap *Resource) StateMust() *azurermSynapseSqlPoolExtendedAuditingPolicyState {
	if asspeap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asspeap.Type(), asspeap.LocalName()))
	}
	return asspeap.state
}

// Args contains the configurations for azurerm_synapse_sql_pool_extended_auditing_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogMonitoringEnabled: bool, optional
	LogMonitoringEnabled terra.BoolValue `hcl:"log_monitoring_enabled,attr"`
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// SqlPoolId: string, required
	SqlPoolId terra.StringValue `hcl:"sql_pool_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageAccountAccessKeyIsSecondary: bool, optional
	StorageAccountAccessKeyIsSecondary terra.BoolValue `hcl:"storage_account_access_key_is_secondary,attr"`
	// StorageEndpoint: string, optional
	StorageEndpoint terra.StringValue `hcl:"storage_endpoint,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseSqlPoolExtendedAuditingPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asspeap.ref.Append("id"))
}

// LogMonitoringEnabled returns a reference to field log_monitoring_enabled of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) LogMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asspeap.ref.Append("log_monitoring_enabled"))
}

// RetentionInDays returns a reference to field retention_in_days of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(asspeap.ref.Append("retention_in_days"))
}

// SqlPoolId returns a reference to field sql_pool_id of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) SqlPoolId() terra.StringValue {
	return terra.ReferenceAsString(asspeap.ref.Append("sql_pool_id"))
}

// StorageAccountAccessKey returns a reference to field storage_account_access_key of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceAsString(asspeap.ref.Append("storage_account_access_key"))
}

// StorageAccountAccessKeyIsSecondary returns a reference to field storage_account_access_key_is_secondary of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) StorageAccountAccessKeyIsSecondary() terra.BoolValue {
	return terra.ReferenceAsBool(asspeap.ref.Append("storage_account_access_key_is_secondary"))
}

// StorageEndpoint returns a reference to field storage_endpoint of azurerm_synapse_sql_pool_extended_auditing_policy.
func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) StorageEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asspeap.ref.Append("storage_endpoint"))
}

func (asspeap azurermSynapseSqlPoolExtendedAuditingPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asspeap.ref.Append("timeouts"))
}

type azurermSynapseSqlPoolExtendedAuditingPolicyState struct {
	Id                                 string         `json:"id"`
	LogMonitoringEnabled               bool           `json:"log_monitoring_enabled"`
	RetentionInDays                    float64        `json:"retention_in_days"`
	SqlPoolId                          string         `json:"sql_pool_id"`
	StorageAccountAccessKey            string         `json:"storage_account_access_key"`
	StorageAccountAccessKeyIsSecondary bool           `json:"storage_account_access_key_is_secondary"`
	StorageEndpoint                    string         `json:"storage_endpoint"`
	Timeouts                           *TimeoutsState `json:"timeouts"`
}
