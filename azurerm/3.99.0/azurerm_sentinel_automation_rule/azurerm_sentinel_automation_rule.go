// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_sentinel_automation_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_sentinel_automation_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSentinelAutomationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asar *Resource) Type() string {
	return "azurerm_sentinel_automation_rule"
}

// LocalName returns the local name for [Resource].
func (asar *Resource) LocalName() string {
	return asar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asar *Resource) Configuration() interface{} {
	return asar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asar *Resource) Dependencies() terra.Dependencies {
	return asar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asar *Resource) LifecycleManagement() *terra.Lifecycle {
	return asar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asar *Resource) Attributes() azurermSentinelAutomationRuleAttributes {
	return azurermSentinelAutomationRuleAttributes{ref: terra.ReferenceResource(asar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asar *Resource) ImportState(state io.Reader) error {
	asar.state = &azurermSentinelAutomationRuleState{}
	if err := json.NewDecoder(state).Decode(asar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asar.Type(), asar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asar *Resource) State() (*azurermSentinelAutomationRuleState, bool) {
	return asar.state, asar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asar *Resource) StateMust() *azurermSentinelAutomationRuleState {
	if asar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asar.Type(), asar.LocalName()))
	}
	return asar.state
}

// Args contains the configurations for azurerm_sentinel_automation_rule.
type Args struct {
	// ConditionJson: string, optional
	ConditionJson terra.StringValue `hcl:"condition_json,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Expiration: string, optional
	Expiration terra.StringValue `hcl:"expiration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogAnalyticsWorkspaceId: string, required
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Order: number, required
	Order terra.NumberValue `hcl:"order,attr" validate:"required"`
	// TriggersOn: string, optional
	TriggersOn terra.StringValue `hcl:"triggers_on,attr"`
	// TriggersWhen: string, optional
	TriggersWhen terra.StringValue `hcl:"triggers_when,attr"`
	// ActionIncident: min=0
	ActionIncident []ActionIncident `hcl:"action_incident,block" validate:"min=0"`
	// ActionPlaybook: min=0
	ActionPlaybook []ActionPlaybook `hcl:"action_playbook,block" validate:"min=0"`
	// Condition: min=0
	Condition []Condition `hcl:"condition,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSentinelAutomationRuleAttributes struct {
	ref terra.Reference
}

// ConditionJson returns a reference to field condition_json of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) ConditionJson() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("condition_json"))
}

// DisplayName returns a reference to field display_name of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("display_name"))
}

// Enabled returns a reference to field enabled of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asar.ref.Append("enabled"))
}

// Expiration returns a reference to field expiration of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) Expiration() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("expiration"))
}

// Id returns a reference to field id of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("id"))
}

// LogAnalyticsWorkspaceId returns a reference to field log_analytics_workspace_id of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("log_analytics_workspace_id"))
}

// Name returns a reference to field name of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("name"))
}

// Order returns a reference to field order of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) Order() terra.NumberValue {
	return terra.ReferenceAsNumber(asar.ref.Append("order"))
}

// TriggersOn returns a reference to field triggers_on of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) TriggersOn() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("triggers_on"))
}

// TriggersWhen returns a reference to field triggers_when of azurerm_sentinel_automation_rule.
func (asar azurermSentinelAutomationRuleAttributes) TriggersWhen() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("triggers_when"))
}

func (asar azurermSentinelAutomationRuleAttributes) ActionIncident() terra.ListValue[ActionIncidentAttributes] {
	return terra.ReferenceAsList[ActionIncidentAttributes](asar.ref.Append("action_incident"))
}

func (asar azurermSentinelAutomationRuleAttributes) ActionPlaybook() terra.ListValue[ActionPlaybookAttributes] {
	return terra.ReferenceAsList[ActionPlaybookAttributes](asar.ref.Append("action_playbook"))
}

func (asar azurermSentinelAutomationRuleAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](asar.ref.Append("condition"))
}

func (asar azurermSentinelAutomationRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asar.ref.Append("timeouts"))
}

type azurermSentinelAutomationRuleState struct {
	ConditionJson           string                `json:"condition_json"`
	DisplayName             string                `json:"display_name"`
	Enabled                 bool                  `json:"enabled"`
	Expiration              string                `json:"expiration"`
	Id                      string                `json:"id"`
	LogAnalyticsWorkspaceId string                `json:"log_analytics_workspace_id"`
	Name                    string                `json:"name"`
	Order                   float64               `json:"order"`
	TriggersOn              string                `json:"triggers_on"`
	TriggersWhen            string                `json:"triggers_when"`
	ActionIncident          []ActionIncidentState `json:"action_incident"`
	ActionPlaybook          []ActionPlaybookState `json:"action_playbook"`
	Condition               []ConditionState      `json:"condition"`
	Timeouts                *TimeoutsState        `json:"timeouts"`
}
