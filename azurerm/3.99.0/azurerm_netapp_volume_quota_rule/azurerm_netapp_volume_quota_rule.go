// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_volume_quota_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_netapp_volume_quota_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetappVolumeQuotaRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anvqr *Resource) Type() string {
	return "azurerm_netapp_volume_quota_rule"
}

// LocalName returns the local name for [Resource].
func (anvqr *Resource) LocalName() string {
	return anvqr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anvqr *Resource) Configuration() interface{} {
	return anvqr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anvqr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anvqr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anvqr *Resource) Dependencies() terra.Dependencies {
	return anvqr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anvqr *Resource) LifecycleManagement() *terra.Lifecycle {
	return anvqr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anvqr *Resource) Attributes() azurermNetappVolumeQuotaRuleAttributes {
	return azurermNetappVolumeQuotaRuleAttributes{ref: terra.ReferenceResource(anvqr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anvqr *Resource) ImportState(state io.Reader) error {
	anvqr.state = &azurermNetappVolumeQuotaRuleState{}
	if err := json.NewDecoder(state).Decode(anvqr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anvqr.Type(), anvqr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anvqr *Resource) State() (*azurermNetappVolumeQuotaRuleState, bool) {
	return anvqr.state, anvqr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anvqr *Resource) StateMust() *azurermNetappVolumeQuotaRuleState {
	if anvqr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anvqr.Type(), anvqr.LocalName()))
	}
	return anvqr.state
}

// Args contains the configurations for azurerm_netapp_volume_quota_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QuotaSizeInKib: number, required
	QuotaSizeInKib terra.NumberValue `hcl:"quota_size_in_kib,attr" validate:"required"`
	// QuotaTarget: string, optional
	QuotaTarget terra.StringValue `hcl:"quota_target,attr"`
	// QuotaType: string, required
	QuotaType terra.StringValue `hcl:"quota_type,attr" validate:"required"`
	// VolumeId: string, required
	VolumeId terra.StringValue `hcl:"volume_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetappVolumeQuotaRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("name"))
}

// QuotaSizeInKib returns a reference to field quota_size_in_kib of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) QuotaSizeInKib() terra.NumberValue {
	return terra.ReferenceAsNumber(anvqr.ref.Append("quota_size_in_kib"))
}

// QuotaTarget returns a reference to field quota_target of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) QuotaTarget() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("quota_target"))
}

// QuotaType returns a reference to field quota_type of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) QuotaType() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("quota_type"))
}

// VolumeId returns a reference to field volume_id of azurerm_netapp_volume_quota_rule.
func (anvqr azurermNetappVolumeQuotaRuleAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(anvqr.ref.Append("volume_id"))
}

func (anvqr azurermNetappVolumeQuotaRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anvqr.ref.Append("timeouts"))
}

type azurermNetappVolumeQuotaRuleState struct {
	Id             string         `json:"id"`
	Location       string         `json:"location"`
	Name           string         `json:"name"`
	QuotaSizeInKib float64        `json:"quota_size_in_kib"`
	QuotaTarget    string         `json:"quota_target"`
	QuotaType      string         `json:"quota_type"`
	VolumeId       string         `json:"volume_id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
