// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_mongo_collection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_mongo_collection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbMongoCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acmc *Resource) Type() string {
	return "azurerm_cosmosdb_mongo_collection"
}

// LocalName returns the local name for [Resource].
func (acmc *Resource) LocalName() string {
	return acmc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acmc *Resource) Configuration() interface{} {
	return acmc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acmc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acmc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acmc *Resource) Dependencies() terra.Dependencies {
	return acmc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acmc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acmc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acmc *Resource) Attributes() azurermCosmosdbMongoCollectionAttributes {
	return azurermCosmosdbMongoCollectionAttributes{ref: terra.ReferenceResource(acmc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acmc *Resource) ImportState(state io.Reader) error {
	acmc.state = &azurermCosmosdbMongoCollectionState{}
	if err := json.NewDecoder(state).Decode(acmc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmc.Type(), acmc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acmc *Resource) State() (*azurermCosmosdbMongoCollectionState, bool) {
	return acmc.state, acmc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acmc *Resource) StateMust() *azurermCosmosdbMongoCollectionState {
	if acmc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmc.Type(), acmc.LocalName()))
	}
	return acmc.state
}

// Args contains the configurations for azurerm_cosmosdb_mongo_collection.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// AnalyticalStorageTtl: number, optional
	AnalyticalStorageTtl terra.NumberValue `hcl:"analytical_storage_ttl,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DefaultTtlSeconds: number, optional
	DefaultTtlSeconds terra.NumberValue `hcl:"default_ttl_seconds,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ShardKey: string, optional
	ShardKey terra.StringValue `hcl:"shard_key,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Index: min=0
	Index []Index `hcl:"index,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbMongoCollectionAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("account_name"))
}

// AnalyticalStorageTtl returns a reference to field analytical_storage_ttl of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) AnalyticalStorageTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(acmc.ref.Append("analytical_storage_ttl"))
}

// DatabaseName returns a reference to field database_name of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("database_name"))
}

// DefaultTtlSeconds returns a reference to field default_ttl_seconds of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) DefaultTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(acmc.ref.Append("default_ttl_seconds"))
}

// Id returns a reference to field id of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("resource_group_name"))
}

// ShardKey returns a reference to field shard_key of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) ShardKey() terra.StringValue {
	return terra.ReferenceAsString(acmc.ref.Append("shard_key"))
}

// Throughput returns a reference to field throughput of azurerm_cosmosdb_mongo_collection.
func (acmc azurermCosmosdbMongoCollectionAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(acmc.ref.Append("throughput"))
}

func (acmc azurermCosmosdbMongoCollectionAttributes) SystemIndexes() terra.ListValue[SystemIndexesAttributes] {
	return terra.ReferenceAsList[SystemIndexesAttributes](acmc.ref.Append("system_indexes"))
}

func (acmc azurermCosmosdbMongoCollectionAttributes) AutoscaleSettings() terra.ListValue[AutoscaleSettingsAttributes] {
	return terra.ReferenceAsList[AutoscaleSettingsAttributes](acmc.ref.Append("autoscale_settings"))
}

func (acmc azurermCosmosdbMongoCollectionAttributes) Index() terra.SetValue[IndexAttributes] {
	return terra.ReferenceAsSet[IndexAttributes](acmc.ref.Append("index"))
}

func (acmc azurermCosmosdbMongoCollectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acmc.ref.Append("timeouts"))
}

type azurermCosmosdbMongoCollectionState struct {
	AccountName          string                   `json:"account_name"`
	AnalyticalStorageTtl float64                  `json:"analytical_storage_ttl"`
	DatabaseName         string                   `json:"database_name"`
	DefaultTtlSeconds    float64                  `json:"default_ttl_seconds"`
	Id                   string                   `json:"id"`
	Name                 string                   `json:"name"`
	ResourceGroupName    string                   `json:"resource_group_name"`
	ShardKey             string                   `json:"shard_key"`
	Throughput           float64                  `json:"throughput"`
	SystemIndexes        []SystemIndexesState     `json:"system_indexes"`
	AutoscaleSettings    []AutoscaleSettingsState `json:"autoscale_settings"`
	Index                []IndexState             `json:"index"`
	Timeouts             *TimeoutsState           `json:"timeouts"`
}
