// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_sql_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_sql_server.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSqlServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "azurerm_sql_server"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() azurermSqlServerAttributes {
	return azurermSqlServerAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &azurermSqlServerState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*azurermSqlServerState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *azurermSqlServerState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for azurerm_sql_server.
type Args struct {
	// AdministratorLogin: string, required
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr" validate:"required"`
	// AdministratorLoginPassword: string, required
	AdministratorLoginPassword terra.StringValue `hcl:"administrator_login_password,attr" validate:"required"`
	// ConnectionPolicy: string, optional
	ConnectionPolicy terra.StringValue `hcl:"connection_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// ThreatDetectionPolicy: optional
	ThreatDetectionPolicy *ThreatDetectionPolicy `hcl:"threat_detection_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSqlServerAttributes struct {
	ref terra.Reference
}

// AdministratorLogin returns a reference to field administrator_login of azurerm_sql_server.
func (ass azurermSqlServerAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("administrator_login"))
}

// AdministratorLoginPassword returns a reference to field administrator_login_password of azurerm_sql_server.
func (ass azurermSqlServerAttributes) AdministratorLoginPassword() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("administrator_login_password"))
}

// ConnectionPolicy returns a reference to field connection_policy of azurerm_sql_server.
func (ass azurermSqlServerAttributes) ConnectionPolicy() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("connection_policy"))
}

// FullyQualifiedDomainName returns a reference to field fully_qualified_domain_name of azurerm_sql_server.
func (ass azurermSqlServerAttributes) FullyQualifiedDomainName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("fully_qualified_domain_name"))
}

// Id returns a reference to field id of azurerm_sql_server.
func (ass azurermSqlServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_sql_server.
func (ass azurermSqlServerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_sql_server.
func (ass azurermSqlServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_sql_server.
func (ass azurermSqlServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_sql_server.
func (ass azurermSqlServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

// Version returns a reference to field version of azurerm_sql_server.
func (ass azurermSqlServerAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("version"))
}

func (ass azurermSqlServerAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ass.ref.Append("identity"))
}

func (ass azurermSqlServerAttributes) ThreatDetectionPolicy() terra.ListValue[ThreatDetectionPolicyAttributes] {
	return terra.ReferenceAsList[ThreatDetectionPolicyAttributes](ass.ref.Append("threat_detection_policy"))
}

func (ass azurermSqlServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ass.ref.Append("timeouts"))
}

type azurermSqlServerState struct {
	AdministratorLogin         string                       `json:"administrator_login"`
	AdministratorLoginPassword string                       `json:"administrator_login_password"`
	ConnectionPolicy           string                       `json:"connection_policy"`
	FullyQualifiedDomainName   string                       `json:"fully_qualified_domain_name"`
	Id                         string                       `json:"id"`
	Location                   string                       `json:"location"`
	Name                       string                       `json:"name"`
	ResourceGroupName          string                       `json:"resource_group_name"`
	Tags                       map[string]string            `json:"tags"`
	Version                    string                       `json:"version"`
	Identity                   []IdentityState              `json:"identity"`
	ThreatDetectionPolicy      []ThreatDetectionPolicyState `json:"threat_detection_policy"`
	Timeouts                   *TimeoutsState               `json:"timeouts"`
}
