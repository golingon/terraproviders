// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_consumption_budget_resource_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_consumption_budget_resource_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermConsumptionBudgetResourceGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acbrg *Resource) Type() string {
	return "azurerm_consumption_budget_resource_group"
}

// LocalName returns the local name for [Resource].
func (acbrg *Resource) LocalName() string {
	return acbrg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acbrg *Resource) Configuration() interface{} {
	return acbrg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acbrg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acbrg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acbrg *Resource) Dependencies() terra.Dependencies {
	return acbrg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acbrg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acbrg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acbrg *Resource) Attributes() azurermConsumptionBudgetResourceGroupAttributes {
	return azurermConsumptionBudgetResourceGroupAttributes{ref: terra.ReferenceResource(acbrg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acbrg *Resource) ImportState(state io.Reader) error {
	acbrg.state = &azurermConsumptionBudgetResourceGroupState{}
	if err := json.NewDecoder(state).Decode(acbrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acbrg.Type(), acbrg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acbrg *Resource) State() (*azurermConsumptionBudgetResourceGroupState, bool) {
	return acbrg.state, acbrg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acbrg *Resource) StateMust() *azurermConsumptionBudgetResourceGroupState {
	if acbrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acbrg.Type(), acbrg.LocalName()))
	}
	return acbrg.state
}

// Args contains the configurations for azurerm_consumption_budget_resource_group.
type Args struct {
	// Amount: number, required
	Amount terra.NumberValue `hcl:"amount,attr" validate:"required"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupId: string, required
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr" validate:"required"`
	// TimeGrain: string, optional
	TimeGrain terra.StringValue `hcl:"time_grain,attr"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// Notification: min=1,max=5
	Notification []Notification `hcl:"notification,block" validate:"min=1,max=5"`
	// TimePeriod: required
	TimePeriod *TimePeriod `hcl:"time_period,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermConsumptionBudgetResourceGroupAttributes struct {
	ref terra.Reference
}

// Amount returns a reference to field amount of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Amount() terra.NumberValue {
	return terra.ReferenceAsNumber(acbrg.ref.Append("amount"))
}

// Etag returns a reference to field etag of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(acbrg.ref.Append("etag"))
}

// Id returns a reference to field id of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acbrg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acbrg.ref.Append("name"))
}

// ResourceGroupId returns a reference to field resource_group_id of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(acbrg.ref.Append("resource_group_id"))
}

// TimeGrain returns a reference to field time_grain of azurerm_consumption_budget_resource_group.
func (acbrg azurermConsumptionBudgetResourceGroupAttributes) TimeGrain() terra.StringValue {
	return terra.ReferenceAsString(acbrg.ref.Append("time_grain"))
}

func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](acbrg.ref.Append("filter"))
}

func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Notification() terra.SetValue[NotificationAttributes] {
	return terra.ReferenceAsSet[NotificationAttributes](acbrg.ref.Append("notification"))
}

func (acbrg azurermConsumptionBudgetResourceGroupAttributes) TimePeriod() terra.ListValue[TimePeriodAttributes] {
	return terra.ReferenceAsList[TimePeriodAttributes](acbrg.ref.Append("time_period"))
}

func (acbrg azurermConsumptionBudgetResourceGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acbrg.ref.Append("timeouts"))
}

type azurermConsumptionBudgetResourceGroupState struct {
	Amount          float64             `json:"amount"`
	Etag            string              `json:"etag"`
	Id              string              `json:"id"`
	Name            string              `json:"name"`
	ResourceGroupId string              `json:"resource_group_id"`
	TimeGrain       string              `json:"time_grain"`
	Filter          []FilterState       `json:"filter"`
	Notification    []NotificationState `json:"notification"`
	TimePeriod      []TimePeriodState   `json:"time_period"`
	Timeouts        *TimeoutsState      `json:"timeouts"`
}
