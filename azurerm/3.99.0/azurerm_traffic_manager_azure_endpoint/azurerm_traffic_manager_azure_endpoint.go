// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_traffic_manager_azure_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_traffic_manager_azure_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermTrafficManagerAzureEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atmae *Resource) Type() string {
	return "azurerm_traffic_manager_azure_endpoint"
}

// LocalName returns the local name for [Resource].
func (atmae *Resource) LocalName() string {
	return atmae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atmae *Resource) Configuration() interface{} {
	return atmae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atmae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atmae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atmae *Resource) Dependencies() terra.Dependencies {
	return atmae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atmae *Resource) LifecycleManagement() *terra.Lifecycle {
	return atmae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atmae *Resource) Attributes() azurermTrafficManagerAzureEndpointAttributes {
	return azurermTrafficManagerAzureEndpointAttributes{ref: terra.ReferenceResource(atmae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atmae *Resource) ImportState(state io.Reader) error {
	atmae.state = &azurermTrafficManagerAzureEndpointState{}
	if err := json.NewDecoder(state).Decode(atmae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atmae.Type(), atmae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atmae *Resource) State() (*azurermTrafficManagerAzureEndpointState, bool) {
	return atmae.state, atmae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atmae *Resource) StateMust() *azurermTrafficManagerAzureEndpointState {
	if atmae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atmae.Type(), atmae.LocalName()))
	}
	return atmae.state
}

// Args contains the configurations for azurerm_traffic_manager_azure_endpoint.
type Args struct {
	// AlwaysServeEnabled: bool, optional
	AlwaysServeEnabled terra.BoolValue `hcl:"always_serve_enabled,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// GeoMappings: list of string, optional
	GeoMappings terra.ListValue[terra.StringValue] `hcl:"geo_mappings,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ProfileId: string, required
	ProfileId terra.StringValue `hcl:"profile_id,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// CustomHeader: min=0
	CustomHeader []CustomHeader `hcl:"custom_header,block" validate:"min=0"`
	// Subnet: min=0
	Subnet []Subnet `hcl:"subnet,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermTrafficManagerAzureEndpointAttributes struct {
	ref terra.Reference
}

// AlwaysServeEnabled returns a reference to field always_serve_enabled of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) AlwaysServeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(atmae.ref.Append("always_serve_enabled"))
}

// Enabled returns a reference to field enabled of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(atmae.ref.Append("enabled"))
}

// GeoMappings returns a reference to field geo_mappings of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) GeoMappings() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](atmae.ref.Append("geo_mappings"))
}

// Id returns a reference to field id of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atmae.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(atmae.ref.Append("name"))
}

// Priority returns a reference to field priority of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(atmae.ref.Append("priority"))
}

// ProfileId returns a reference to field profile_id of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) ProfileId() terra.StringValue {
	return terra.ReferenceAsString(atmae.ref.Append("profile_id"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(atmae.ref.Append("target_resource_id"))
}

// Weight returns a reference to field weight of azurerm_traffic_manager_azure_endpoint.
func (atmae azurermTrafficManagerAzureEndpointAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(atmae.ref.Append("weight"))
}

func (atmae azurermTrafficManagerAzureEndpointAttributes) CustomHeader() terra.ListValue[CustomHeaderAttributes] {
	return terra.ReferenceAsList[CustomHeaderAttributes](atmae.ref.Append("custom_header"))
}

func (atmae azurermTrafficManagerAzureEndpointAttributes) Subnet() terra.ListValue[SubnetAttributes] {
	return terra.ReferenceAsList[SubnetAttributes](atmae.ref.Append("subnet"))
}

func (atmae azurermTrafficManagerAzureEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](atmae.ref.Append("timeouts"))
}

type azurermTrafficManagerAzureEndpointState struct {
	AlwaysServeEnabled bool                `json:"always_serve_enabled"`
	Enabled            bool                `json:"enabled"`
	GeoMappings        []string            `json:"geo_mappings"`
	Id                 string              `json:"id"`
	Name               string              `json:"name"`
	Priority           float64             `json:"priority"`
	ProfileId          string              `json:"profile_id"`
	TargetResourceId   string              `json:"target_resource_id"`
	Weight             float64             `json:"weight"`
	CustomHeader       []CustomHeaderState `json:"custom_header"`
	Subnet             []SubnetState       `json:"subnet"`
	Timeouts           *TimeoutsState      `json:"timeouts"`
}
