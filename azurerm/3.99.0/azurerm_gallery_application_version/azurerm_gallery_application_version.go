// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_gallery_application_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_gallery_application_version.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermGalleryApplicationVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agav *Resource) Type() string {
	return "azurerm_gallery_application_version"
}

// LocalName returns the local name for [Resource].
func (agav *Resource) LocalName() string {
	return agav.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agav *Resource) Configuration() interface{} {
	return agav.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agav *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agav)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agav *Resource) Dependencies() terra.Dependencies {
	return agav.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agav *Resource) LifecycleManagement() *terra.Lifecycle {
	return agav.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agav *Resource) Attributes() azurermGalleryApplicationVersionAttributes {
	return azurermGalleryApplicationVersionAttributes{ref: terra.ReferenceResource(agav)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agav *Resource) ImportState(state io.Reader) error {
	agav.state = &azurermGalleryApplicationVersionState{}
	if err := json.NewDecoder(state).Decode(agav.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agav.Type(), agav.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agav *Resource) State() (*azurermGalleryApplicationVersionState, bool) {
	return agav.state, agav.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agav *Resource) StateMust() *azurermGalleryApplicationVersionState {
	if agav.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agav.Type(), agav.LocalName()))
	}
	return agav.state
}

// Args contains the configurations for azurerm_gallery_application_version.
type Args struct {
	// ConfigFile: string, optional
	ConfigFile terra.StringValue `hcl:"config_file,attr"`
	// EnableHealthCheck: bool, optional
	EnableHealthCheck terra.BoolValue `hcl:"enable_health_check,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// ExcludeFromLatest: bool, optional
	ExcludeFromLatest terra.BoolValue `hcl:"exclude_from_latest,attr"`
	// GalleryApplicationId: string, required
	GalleryApplicationId terra.StringValue `hcl:"gallery_application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PackageFile: string, optional
	PackageFile terra.StringValue `hcl:"package_file,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ManageAction: required
	ManageAction *ManageAction `hcl:"manage_action,block" validate:"required"`
	// Source: required
	Source *Source `hcl:"source,block" validate:"required"`
	// TargetRegion: min=1
	TargetRegion []TargetRegion `hcl:"target_region,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermGalleryApplicationVersionAttributes struct {
	ref terra.Reference
}

// ConfigFile returns a reference to field config_file of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) ConfigFile() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("config_file"))
}

// EnableHealthCheck returns a reference to field enable_health_check of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) EnableHealthCheck() terra.BoolValue {
	return terra.ReferenceAsBool(agav.ref.Append("enable_health_check"))
}

// EndOfLifeDate returns a reference to field end_of_life_date of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("end_of_life_date"))
}

// ExcludeFromLatest returns a reference to field exclude_from_latest of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceAsBool(agav.ref.Append("exclude_from_latest"))
}

// GalleryApplicationId returns a reference to field gallery_application_id of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) GalleryApplicationId() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("gallery_application_id"))
}

// Id returns a reference to field id of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("name"))
}

// PackageFile returns a reference to field package_file of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) PackageFile() terra.StringValue {
	return terra.ReferenceAsString(agav.ref.Append("package_file"))
}

// Tags returns a reference to field tags of azurerm_gallery_application_version.
func (agav azurermGalleryApplicationVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agav.ref.Append("tags"))
}

func (agav azurermGalleryApplicationVersionAttributes) ManageAction() terra.ListValue[ManageActionAttributes] {
	return terra.ReferenceAsList[ManageActionAttributes](agav.ref.Append("manage_action"))
}

func (agav azurermGalleryApplicationVersionAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](agav.ref.Append("source"))
}

func (agav azurermGalleryApplicationVersionAttributes) TargetRegion() terra.ListValue[TargetRegionAttributes] {
	return terra.ReferenceAsList[TargetRegionAttributes](agav.ref.Append("target_region"))
}

func (agav azurermGalleryApplicationVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agav.ref.Append("timeouts"))
}

type azurermGalleryApplicationVersionState struct {
	ConfigFile           string              `json:"config_file"`
	EnableHealthCheck    bool                `json:"enable_health_check"`
	EndOfLifeDate        string              `json:"end_of_life_date"`
	ExcludeFromLatest    bool                `json:"exclude_from_latest"`
	GalleryApplicationId string              `json:"gallery_application_id"`
	Id                   string              `json:"id"`
	Location             string              `json:"location"`
	Name                 string              `json:"name"`
	PackageFile          string              `json:"package_file"`
	Tags                 map[string]string   `json:"tags"`
	ManageAction         []ManageActionState `json:"manage_action"`
	Source               []SourceState       `json:"source"`
	TargetRegion         []TargetRegionState `json:"target_region"`
	Timeouts             *TimeoutsState      `json:"timeouts"`
}
