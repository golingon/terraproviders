// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_batch_account.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBatchAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aba *Resource) Type() string {
	return "azurerm_batch_account"
}

// LocalName returns the local name for [Resource].
func (aba *Resource) LocalName() string {
	return aba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aba *Resource) Configuration() interface{} {
	return aba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aba *Resource) Dependencies() terra.Dependencies {
	return aba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aba *Resource) LifecycleManagement() *terra.Lifecycle {
	return aba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aba *Resource) Attributes() azurermBatchAccountAttributes {
	return azurermBatchAccountAttributes{ref: terra.ReferenceResource(aba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aba *Resource) ImportState(state io.Reader) error {
	aba.state = &azurermBatchAccountState{}
	if err := json.NewDecoder(state).Decode(aba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aba.Type(), aba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aba *Resource) State() (*azurermBatchAccountState, bool) {
	return aba.state, aba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aba *Resource) StateMust() *azurermBatchAccountState {
	if aba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aba.Type(), aba.LocalName()))
	}
	return aba.state
}

// Args contains the configurations for azurerm_batch_account.
type Args struct {
	// AllowedAuthenticationModes: set of string, optional
	AllowedAuthenticationModes terra.SetValue[terra.StringValue] `hcl:"allowed_authentication_modes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolAllocationMode: string, optional
	PoolAllocationMode terra.StringValue `hcl:"pool_allocation_mode,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountAuthenticationMode: string, optional
	StorageAccountAuthenticationMode terra.StringValue `hcl:"storage_account_authentication_mode,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// StorageAccountNodeIdentity: string, optional
	StorageAccountNodeIdentity terra.StringValue `hcl:"storage_account_node_identity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: min=0
	Encryption []Encryption `hcl:"encryption,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// KeyVaultReference: optional
	KeyVaultReference *KeyVaultReference `hcl:"key_vault_reference,block"`
	// NetworkProfile: optional
	NetworkProfile *NetworkProfile `hcl:"network_profile,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBatchAccountAttributes struct {
	ref terra.Reference
}

// AccountEndpoint returns a reference to field account_endpoint of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) AccountEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("account_endpoint"))
}

// AllowedAuthenticationModes returns a reference to field allowed_authentication_modes of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) AllowedAuthenticationModes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aba.ref.Append("allowed_authentication_modes"))
}

// Id returns a reference to field id of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("name"))
}

// PoolAllocationMode returns a reference to field pool_allocation_mode of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) PoolAllocationMode() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("pool_allocation_mode"))
}

// PrimaryAccessKey returns a reference to field primary_access_key of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("primary_access_key"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aba.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("resource_group_name"))
}

// SecondaryAccessKey returns a reference to field secondary_access_key of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("secondary_access_key"))
}

// StorageAccountAuthenticationMode returns a reference to field storage_account_authentication_mode of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) StorageAccountAuthenticationMode() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("storage_account_authentication_mode"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("storage_account_id"))
}

// StorageAccountNodeIdentity returns a reference to field storage_account_node_identity of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) StorageAccountNodeIdentity() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("storage_account_node_identity"))
}

// Tags returns a reference to field tags of azurerm_batch_account.
func (aba azurermBatchAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aba.ref.Append("tags"))
}

func (aba azurermBatchAccountAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](aba.ref.Append("encryption"))
}

func (aba azurermBatchAccountAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aba.ref.Append("identity"))
}

func (aba azurermBatchAccountAttributes) KeyVaultReference() terra.ListValue[KeyVaultReferenceAttributes] {
	return terra.ReferenceAsList[KeyVaultReferenceAttributes](aba.ref.Append("key_vault_reference"))
}

func (aba azurermBatchAccountAttributes) NetworkProfile() terra.ListValue[NetworkProfileAttributes] {
	return terra.ReferenceAsList[NetworkProfileAttributes](aba.ref.Append("network_profile"))
}

func (aba azurermBatchAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aba.ref.Append("timeouts"))
}

type azurermBatchAccountState struct {
	AccountEndpoint                  string                   `json:"account_endpoint"`
	AllowedAuthenticationModes       []string                 `json:"allowed_authentication_modes"`
	Id                               string                   `json:"id"`
	Location                         string                   `json:"location"`
	Name                             string                   `json:"name"`
	PoolAllocationMode               string                   `json:"pool_allocation_mode"`
	PrimaryAccessKey                 string                   `json:"primary_access_key"`
	PublicNetworkAccessEnabled       bool                     `json:"public_network_access_enabled"`
	ResourceGroupName                string                   `json:"resource_group_name"`
	SecondaryAccessKey               string                   `json:"secondary_access_key"`
	StorageAccountAuthenticationMode string                   `json:"storage_account_authentication_mode"`
	StorageAccountId                 string                   `json:"storage_account_id"`
	StorageAccountNodeIdentity       string                   `json:"storage_account_node_identity"`
	Tags                             map[string]string        `json:"tags"`
	Encryption                       []EncryptionState        `json:"encryption"`
	Identity                         []IdentityState          `json:"identity"`
	KeyVaultReference                []KeyVaultReferenceState `json:"key_vault_reference"`
	NetworkProfile                   []NetworkProfileState    `json:"network_profile"`
	Timeouts                         *TimeoutsState           `json:"timeouts"`
}
