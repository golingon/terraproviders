// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_account

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Encryption struct {
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type KeyVaultReference struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type NetworkProfile struct {
	// NetworkProfileAccountAccess: optional
	AccountAccess *NetworkProfileAccountAccess `hcl:"account_access,block"`
	// NetworkProfileNodeManagementAccess: optional
	NodeManagementAccess *NetworkProfileNodeManagementAccess `hcl:"node_management_access,block"`
}

type NetworkProfileAccountAccess struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// NetworkProfileAccountAccessIpRule: min=0
	IpRule []NetworkProfileAccountAccessIpRule `hcl:"ip_rule,block" validate:"min=0"`
}

type NetworkProfileAccountAccessIpRule struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpRange: string, required
	IpRange terra.StringValue `hcl:"ip_range,attr" validate:"required"`
}

type NetworkProfileNodeManagementAccess struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// NetworkProfileNodeManagementAccessIpRule: min=0
	IpRule []NetworkProfileNodeManagementAccessIpRule `hcl:"ip_rule,block" validate:"min=0"`
}

type NetworkProfileNodeManagementAccessIpRule struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpRange: string, required
	IpRange terra.StringValue `hcl:"ip_range,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key_vault_key_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type KeyVaultReferenceAttributes struct {
	ref terra.Reference
}

func (kvr KeyVaultReferenceAttributes) InternalRef() (terra.Reference, error) {
	return kvr.ref, nil
}

func (kvr KeyVaultReferenceAttributes) InternalWithRef(ref terra.Reference) KeyVaultReferenceAttributes {
	return KeyVaultReferenceAttributes{ref: ref}
}

func (kvr KeyVaultReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvr.ref.InternalTokens()
}

func (kvr KeyVaultReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("id"))
}

func (kvr KeyVaultReferenceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("url"))
}

type NetworkProfileAttributes struct {
	ref terra.Reference
}

func (np NetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkProfileAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAttributes {
	return NetworkProfileAttributes{ref: ref}
}

func (np NetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkProfileAttributes) AccountAccess() terra.ListValue[NetworkProfileAccountAccessAttributes] {
	return terra.ReferenceAsList[NetworkProfileAccountAccessAttributes](np.ref.Append("account_access"))
}

func (np NetworkProfileAttributes) NodeManagementAccess() terra.ListValue[NetworkProfileNodeManagementAccessAttributes] {
	return terra.ReferenceAsList[NetworkProfileNodeManagementAccessAttributes](np.ref.Append("node_management_access"))
}

type NetworkProfileAccountAccessAttributes struct {
	ref terra.Reference
}

func (aa NetworkProfileAccountAccessAttributes) InternalRef() (terra.Reference, error) {
	return aa.ref, nil
}

func (aa NetworkProfileAccountAccessAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAccountAccessAttributes {
	return NetworkProfileAccountAccessAttributes{ref: ref}
}

func (aa NetworkProfileAccountAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aa.ref.InternalTokens()
}

func (aa NetworkProfileAccountAccessAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("default_action"))
}

func (aa NetworkProfileAccountAccessAttributes) IpRule() terra.ListValue[NetworkProfileAccountAccessIpRuleAttributes] {
	return terra.ReferenceAsList[NetworkProfileAccountAccessIpRuleAttributes](aa.ref.Append("ip_rule"))
}

type NetworkProfileAccountAccessIpRuleAttributes struct {
	ref terra.Reference
}

func (ir NetworkProfileAccountAccessIpRuleAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir NetworkProfileAccountAccessIpRuleAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAccountAccessIpRuleAttributes {
	return NetworkProfileAccountAccessIpRuleAttributes{ref: ref}
}

func (ir NetworkProfileAccountAccessIpRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir NetworkProfileAccountAccessIpRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir NetworkProfileAccountAccessIpRuleAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_range"))
}

type NetworkProfileNodeManagementAccessAttributes struct {
	ref terra.Reference
}

func (nma NetworkProfileNodeManagementAccessAttributes) InternalRef() (terra.Reference, error) {
	return nma.ref, nil
}

func (nma NetworkProfileNodeManagementAccessAttributes) InternalWithRef(ref terra.Reference) NetworkProfileNodeManagementAccessAttributes {
	return NetworkProfileNodeManagementAccessAttributes{ref: ref}
}

func (nma NetworkProfileNodeManagementAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nma.ref.InternalTokens()
}

func (nma NetworkProfileNodeManagementAccessAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("default_action"))
}

func (nma NetworkProfileNodeManagementAccessAttributes) IpRule() terra.ListValue[NetworkProfileNodeManagementAccessIpRuleAttributes] {
	return terra.ReferenceAsList[NetworkProfileNodeManagementAccessIpRuleAttributes](nma.ref.Append("ip_rule"))
}

type NetworkProfileNodeManagementAccessIpRuleAttributes struct {
	ref terra.Reference
}

func (ir NetworkProfileNodeManagementAccessIpRuleAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir NetworkProfileNodeManagementAccessIpRuleAttributes) InternalWithRef(ref terra.Reference) NetworkProfileNodeManagementAccessIpRuleAttributes {
	return NetworkProfileNodeManagementAccessIpRuleAttributes{ref: ref}
}

func (ir NetworkProfileNodeManagementAccessIpRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir NetworkProfileNodeManagementAccessIpRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir NetworkProfileNodeManagementAccessIpRuleAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_range"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EncryptionState struct {
	KeyVaultKeyId string `json:"key_vault_key_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type KeyVaultReferenceState struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

type NetworkProfileState struct {
	AccountAccess        []NetworkProfileAccountAccessState        `json:"account_access"`
	NodeManagementAccess []NetworkProfileNodeManagementAccessState `json:"node_management_access"`
}

type NetworkProfileAccountAccessState struct {
	DefaultAction string                                   `json:"default_action"`
	IpRule        []NetworkProfileAccountAccessIpRuleState `json:"ip_rule"`
}

type NetworkProfileAccountAccessIpRuleState struct {
	Action  string `json:"action"`
	IpRange string `json:"ip_range"`
}

type NetworkProfileNodeManagementAccessState struct {
	DefaultAction string                                          `json:"default_action"`
	IpRule        []NetworkProfileNodeManagementAccessIpRuleState `json:"ip_rule"`
}

type NetworkProfileNodeManagementAccessIpRuleState struct {
	Action  string `json:"action"`
	IpRange string `json:"ip_range"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
