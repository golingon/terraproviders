// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_account

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEncryption struct {
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
}

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataEncryptionAttributes struct {
	ref terra.Reference
}

func (e DataEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataEncryptionAttributes) InternalWithRef(ref terra.Reference) DataEncryptionAttributes {
	return DataEncryptionAttributes{ref: ref}
}

func (e DataEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataEncryptionAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key_vault_key_id"))
}

type DataKeyVaultReferenceAttributes struct {
	ref terra.Reference
}

func (kvr DataKeyVaultReferenceAttributes) InternalRef() (terra.Reference, error) {
	return kvr.ref, nil
}

func (kvr DataKeyVaultReferenceAttributes) InternalWithRef(ref terra.Reference) DataKeyVaultReferenceAttributes {
	return DataKeyVaultReferenceAttributes{ref: ref}
}

func (kvr DataKeyVaultReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvr.ref.InternalTokens()
}

func (kvr DataKeyVaultReferenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("id"))
}

func (kvr DataKeyVaultReferenceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(kvr.ref.Append("url"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataEncryptionState struct {
	KeyVaultKeyId string `json:"key_vault_key_id"`
}

type DataKeyVaultReferenceState struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
