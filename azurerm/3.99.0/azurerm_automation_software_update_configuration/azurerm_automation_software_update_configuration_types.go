// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_automation_software_update_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Linux struct {
	// ClassificationIncluded: string, optional
	ClassificationIncluded terra.StringValue `hcl:"classification_included,attr"`
	// ClassificationsIncluded: list of string, optional
	ClassificationsIncluded terra.ListValue[terra.StringValue] `hcl:"classifications_included,attr"`
	// ExcludedPackages: list of string, optional
	ExcludedPackages terra.ListValue[terra.StringValue] `hcl:"excluded_packages,attr"`
	// IncludedPackages: list of string, optional
	IncludedPackages terra.ListValue[terra.StringValue] `hcl:"included_packages,attr"`
	// Reboot: string, optional
	Reboot terra.StringValue `hcl:"reboot,attr"`
}

type PostTask struct {
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type PreTask struct {
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
}

type Schedule struct {
	// AdvancedMonthDays: list of number, optional
	AdvancedMonthDays terra.ListValue[terra.NumberValue] `hcl:"advanced_month_days,attr"`
	// AdvancedWeekDays: list of string, optional
	AdvancedWeekDays terra.ListValue[terra.StringValue] `hcl:"advanced_week_days,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExpiryTime: string, optional
	ExpiryTime terra.StringValue `hcl:"expiry_time,attr"`
	// ExpiryTimeOffsetMinutes: number, optional
	ExpiryTimeOffsetMinutes terra.NumberValue `hcl:"expiry_time_offset_minutes,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IsEnabled: bool, optional
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr"`
	// NextRun: string, optional
	NextRun terra.StringValue `hcl:"next_run,attr"`
	// NextRunOffsetMinutes: number, optional
	NextRunOffsetMinutes terra.NumberValue `hcl:"next_run_offset_minutes,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// StartTimeOffsetMinutes: number, optional
	StartTimeOffsetMinutes terra.NumberValue `hcl:"start_time_offset_minutes,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// ScheduleMonthlyOccurrence: optional
	MonthlyOccurrence *ScheduleMonthlyOccurrence `hcl:"monthly_occurrence,block"`
}

type ScheduleMonthlyOccurrence struct {
	// Day: string, required
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// Occurrence: number, required
	Occurrence terra.NumberValue `hcl:"occurrence,attr" validate:"required"`
}

type Target struct {
	// TargetAzureQuery: min=0
	AzureQuery []TargetAzureQuery `hcl:"azure_query,block" validate:"min=0"`
	// TargetNonAzureQuery: min=0
	NonAzureQuery []TargetNonAzureQuery `hcl:"non_azure_query,block" validate:"min=0"`
}

type TargetAzureQuery struct {
	// Locations: list of string, optional
	Locations terra.ListValue[terra.StringValue] `hcl:"locations,attr"`
	// Scope: list of string, optional
	Scope terra.ListValue[terra.StringValue] `hcl:"scope,attr"`
	// TagFilter: string, optional
	TagFilter terra.StringValue `hcl:"tag_filter,attr"`
	// TargetAzureQueryTags: min=0
	Tags []TargetAzureQueryTags `hcl:"tags,block" validate:"min=0"`
}

type TargetAzureQueryTags struct {
	// Tag: string, required
	Tag terra.StringValue `hcl:"tag,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TargetNonAzureQuery struct {
	// FunctionAlias: string, optional
	FunctionAlias terra.StringValue `hcl:"function_alias,attr"`
	// WorkspaceId: string, optional
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Windows struct {
	// ClassificationIncluded: string, optional
	ClassificationIncluded terra.StringValue `hcl:"classification_included,attr"`
	// ClassificationsIncluded: list of string, optional
	ClassificationsIncluded terra.ListValue[terra.StringValue] `hcl:"classifications_included,attr"`
	// ExcludedKnowledgeBaseNumbers: list of string, optional
	ExcludedKnowledgeBaseNumbers terra.ListValue[terra.StringValue] `hcl:"excluded_knowledge_base_numbers,attr"`
	// IncludedKnowledgeBaseNumbers: list of string, optional
	IncludedKnowledgeBaseNumbers terra.ListValue[terra.StringValue] `hcl:"included_knowledge_base_numbers,attr"`
	// Reboot: string, optional
	Reboot terra.StringValue `hcl:"reboot,attr"`
}

type LinuxAttributes struct {
	ref terra.Reference
}

func (l LinuxAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LinuxAttributes) InternalWithRef(ref terra.Reference) LinuxAttributes {
	return LinuxAttributes{ref: ref}
}

func (l LinuxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LinuxAttributes) ClassificationIncluded() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("classification_included"))
}

func (l LinuxAttributes) ClassificationsIncluded() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("classifications_included"))
}

func (l LinuxAttributes) ExcludedPackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("excluded_packages"))
}

func (l LinuxAttributes) IncludedPackages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("included_packages"))
}

func (l LinuxAttributes) Reboot() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("reboot"))
}

type PostTaskAttributes struct {
	ref terra.Reference
}

func (pt PostTaskAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt PostTaskAttributes) InternalWithRef(ref terra.Reference) PostTaskAttributes {
	return PostTaskAttributes{ref: ref}
}

func (pt PostTaskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt PostTaskAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pt.ref.Append("parameters"))
}

func (pt PostTaskAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("source"))
}

type PreTaskAttributes struct {
	ref terra.Reference
}

func (pt PreTaskAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt PreTaskAttributes) InternalWithRef(ref terra.Reference) PreTaskAttributes {
	return PreTaskAttributes{ref: ref}
}

func (pt PreTaskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt PreTaskAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pt.ref.Append("parameters"))
}

func (pt PreTaskAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("source"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) AdvancedMonthDays() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("advanced_month_days"))
}

func (s ScheduleAttributes) AdvancedWeekDays() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("advanced_week_days"))
}

func (s ScheduleAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("creation_time"))
}

func (s ScheduleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s ScheduleAttributes) ExpiryTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("expiry_time"))
}

func (s ScheduleAttributes) ExpiryTimeOffsetMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("expiry_time_offset_minutes"))
}

func (s ScheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency"))
}

func (s ScheduleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("interval"))
}

func (s ScheduleAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("is_enabled"))
}

func (s ScheduleAttributes) LastModifiedTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("last_modified_time"))
}

func (s ScheduleAttributes) NextRun() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("next_run"))
}

func (s ScheduleAttributes) NextRunOffsetMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("next_run_offset_minutes"))
}

func (s ScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

func (s ScheduleAttributes) StartTimeOffsetMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("start_time_offset_minutes"))
}

func (s ScheduleAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("time_zone"))
}

func (s ScheduleAttributes) MonthlyOccurrence() terra.ListValue[ScheduleMonthlyOccurrenceAttributes] {
	return terra.ReferenceAsList[ScheduleMonthlyOccurrenceAttributes](s.ref.Append("monthly_occurrence"))
}

type ScheduleMonthlyOccurrenceAttributes struct {
	ref terra.Reference
}

func (mo ScheduleMonthlyOccurrenceAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo ScheduleMonthlyOccurrenceAttributes) InternalWithRef(ref terra.Reference) ScheduleMonthlyOccurrenceAttributes {
	return ScheduleMonthlyOccurrenceAttributes{ref: ref}
}

func (mo ScheduleMonthlyOccurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo ScheduleMonthlyOccurrenceAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("day"))
}

func (mo ScheduleMonthlyOccurrenceAttributes) Occurrence() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("occurrence"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) AzureQuery() terra.ListValue[TargetAzureQueryAttributes] {
	return terra.ReferenceAsList[TargetAzureQueryAttributes](t.ref.Append("azure_query"))
}

func (t TargetAttributes) NonAzureQuery() terra.ListValue[TargetNonAzureQueryAttributes] {
	return terra.ReferenceAsList[TargetNonAzureQueryAttributes](t.ref.Append("non_azure_query"))
}

type TargetAzureQueryAttributes struct {
	ref terra.Reference
}

func (aq TargetAzureQueryAttributes) InternalRef() (terra.Reference, error) {
	return aq.ref, nil
}

func (aq TargetAzureQueryAttributes) InternalWithRef(ref terra.Reference) TargetAzureQueryAttributes {
	return TargetAzureQueryAttributes{ref: ref}
}

func (aq TargetAzureQueryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aq.ref.InternalTokens()
}

func (aq TargetAzureQueryAttributes) Locations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aq.ref.Append("locations"))
}

func (aq TargetAzureQueryAttributes) Scope() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aq.ref.Append("scope"))
}

func (aq TargetAzureQueryAttributes) TagFilter() terra.StringValue {
	return terra.ReferenceAsString(aq.ref.Append("tag_filter"))
}

func (aq TargetAzureQueryAttributes) Tags() terra.ListValue[TargetAzureQueryTagsAttributes] {
	return terra.ReferenceAsList[TargetAzureQueryTagsAttributes](aq.ref.Append("tags"))
}

type TargetAzureQueryTagsAttributes struct {
	ref terra.Reference
}

func (t TargetAzureQueryTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAzureQueryTagsAttributes) InternalWithRef(ref terra.Reference) TargetAzureQueryTagsAttributes {
	return TargetAzureQueryTagsAttributes{ref: ref}
}

func (t TargetAzureQueryTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAzureQueryTagsAttributes) Tag() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("tag"))
}

func (t TargetAzureQueryTagsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("values"))
}

type TargetNonAzureQueryAttributes struct {
	ref terra.Reference
}

func (naq TargetNonAzureQueryAttributes) InternalRef() (terra.Reference, error) {
	return naq.ref, nil
}

func (naq TargetNonAzureQueryAttributes) InternalWithRef(ref terra.Reference) TargetNonAzureQueryAttributes {
	return TargetNonAzureQueryAttributes{ref: ref}
}

func (naq TargetNonAzureQueryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return naq.ref.InternalTokens()
}

func (naq TargetNonAzureQueryAttributes) FunctionAlias() terra.StringValue {
	return terra.ReferenceAsString(naq.ref.Append("function_alias"))
}

func (naq TargetNonAzureQueryAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(naq.ref.Append("workspace_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WindowsAttributes struct {
	ref terra.Reference
}

func (w WindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WindowsAttributes) InternalWithRef(ref terra.Reference) WindowsAttributes {
	return WindowsAttributes{ref: ref}
}

func (w WindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WindowsAttributes) ClassificationIncluded() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("classification_included"))
}

func (w WindowsAttributes) ClassificationsIncluded() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("classifications_included"))
}

func (w WindowsAttributes) ExcludedKnowledgeBaseNumbers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("excluded_knowledge_base_numbers"))
}

func (w WindowsAttributes) IncludedKnowledgeBaseNumbers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("included_knowledge_base_numbers"))
}

func (w WindowsAttributes) Reboot() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("reboot"))
}

type LinuxState struct {
	ClassificationIncluded  string   `json:"classification_included"`
	ClassificationsIncluded []string `json:"classifications_included"`
	ExcludedPackages        []string `json:"excluded_packages"`
	IncludedPackages        []string `json:"included_packages"`
	Reboot                  string   `json:"reboot"`
}

type PostTaskState struct {
	Parameters map[string]string `json:"parameters"`
	Source     string            `json:"source"`
}

type PreTaskState struct {
	Parameters map[string]string `json:"parameters"`
	Source     string            `json:"source"`
}

type ScheduleState struct {
	AdvancedMonthDays       []float64                        `json:"advanced_month_days"`
	AdvancedWeekDays        []string                         `json:"advanced_week_days"`
	CreationTime            string                           `json:"creation_time"`
	Description             string                           `json:"description"`
	ExpiryTime              string                           `json:"expiry_time"`
	ExpiryTimeOffsetMinutes float64                          `json:"expiry_time_offset_minutes"`
	Frequency               string                           `json:"frequency"`
	Interval                float64                          `json:"interval"`
	IsEnabled               bool                             `json:"is_enabled"`
	LastModifiedTime        string                           `json:"last_modified_time"`
	NextRun                 string                           `json:"next_run"`
	NextRunOffsetMinutes    float64                          `json:"next_run_offset_minutes"`
	StartTime               string                           `json:"start_time"`
	StartTimeOffsetMinutes  float64                          `json:"start_time_offset_minutes"`
	TimeZone                string                           `json:"time_zone"`
	MonthlyOccurrence       []ScheduleMonthlyOccurrenceState `json:"monthly_occurrence"`
}

type ScheduleMonthlyOccurrenceState struct {
	Day        string  `json:"day"`
	Occurrence float64 `json:"occurrence"`
}

type TargetState struct {
	AzureQuery    []TargetAzureQueryState    `json:"azure_query"`
	NonAzureQuery []TargetNonAzureQueryState `json:"non_azure_query"`
}

type TargetAzureQueryState struct {
	Locations []string                    `json:"locations"`
	Scope     []string                    `json:"scope"`
	TagFilter string                      `json:"tag_filter"`
	Tags      []TargetAzureQueryTagsState `json:"tags"`
}

type TargetAzureQueryTagsState struct {
	Tag    string   `json:"tag"`
	Values []string `json:"values"`
}

type TargetNonAzureQueryState struct {
	FunctionAlias string `json:"function_alias"`
	WorkspaceId   string `json:"workspace_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WindowsState struct {
	ClassificationIncluded       string   `json:"classification_included"`
	ClassificationsIncluded      []string `json:"classifications_included"`
	ExcludedKnowledgeBaseNumbers []string `json:"excluded_knowledge_base_numbers"`
	IncludedKnowledgeBaseNumbers []string `json:"included_knowledge_base_numbers"`
	Reboot                       string   `json:"reboot"`
}
