// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_frontdoor_rules_engine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RuleAction: optional
	Action *RuleAction `hcl:"action,block"`
	// RuleMatchCondition: min=0,max=100
	MatchCondition []RuleMatchCondition `hcl:"match_condition,block" validate:"min=0,max=100"`
}

type RuleAction struct {
	// RuleActionRequestHeader: min=0,max=100
	RequestHeader []RuleActionRequestHeader `hcl:"request_header,block" validate:"min=0,max=100"`
	// RuleActionResponseHeader: min=0,max=100
	ResponseHeader []RuleActionResponseHeader `hcl:"response_header,block" validate:"min=0,max=100"`
}

type RuleActionRequestHeader struct {
	// HeaderActionType: string, optional
	HeaderActionType terra.StringValue `hcl:"header_action_type,attr"`
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type RuleActionResponseHeader struct {
	// HeaderActionType: string, optional
	HeaderActionType terra.StringValue `hcl:"header_action_type,attr"`
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type RuleMatchCondition struct {
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// Transform: list of string, optional
	Transform terra.ListValue[terra.StringValue] `hcl:"transform,attr"`
	// Value: list of string, optional
	Value terra.ListValue[terra.StringValue] `hcl:"value,attr"`
	// Variable: string, optional
	Variable terra.StringValue `hcl:"variable,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r RuleAttributes) Action() terra.ListValue[RuleActionAttributes] {
	return terra.ReferenceAsList[RuleActionAttributes](r.ref.Append("action"))
}

func (r RuleAttributes) MatchCondition() terra.ListValue[RuleMatchConditionAttributes] {
	return terra.ReferenceAsList[RuleMatchConditionAttributes](r.ref.Append("match_condition"))
}

type RuleActionAttributes struct {
	ref terra.Reference
}

func (a RuleActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RuleActionAttributes) InternalWithRef(ref terra.Reference) RuleActionAttributes {
	return RuleActionAttributes{ref: ref}
}

func (a RuleActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RuleActionAttributes) RequestHeader() terra.ListValue[RuleActionRequestHeaderAttributes] {
	return terra.ReferenceAsList[RuleActionRequestHeaderAttributes](a.ref.Append("request_header"))
}

func (a RuleActionAttributes) ResponseHeader() terra.ListValue[RuleActionResponseHeaderAttributes] {
	return terra.ReferenceAsList[RuleActionResponseHeaderAttributes](a.ref.Append("response_header"))
}

type RuleActionRequestHeaderAttributes struct {
	ref terra.Reference
}

func (rh RuleActionRequestHeaderAttributes) InternalRef() (terra.Reference, error) {
	return rh.ref, nil
}

func (rh RuleActionRequestHeaderAttributes) InternalWithRef(ref terra.Reference) RuleActionRequestHeaderAttributes {
	return RuleActionRequestHeaderAttributes{ref: ref}
}

func (rh RuleActionRequestHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rh.ref.InternalTokens()
}

func (rh RuleActionRequestHeaderAttributes) HeaderActionType() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("header_action_type"))
}

func (rh RuleActionRequestHeaderAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("header_name"))
}

func (rh RuleActionRequestHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("value"))
}

type RuleActionResponseHeaderAttributes struct {
	ref terra.Reference
}

func (rh RuleActionResponseHeaderAttributes) InternalRef() (terra.Reference, error) {
	return rh.ref, nil
}

func (rh RuleActionResponseHeaderAttributes) InternalWithRef(ref terra.Reference) RuleActionResponseHeaderAttributes {
	return RuleActionResponseHeaderAttributes{ref: ref}
}

func (rh RuleActionResponseHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rh.ref.InternalTokens()
}

func (rh RuleActionResponseHeaderAttributes) HeaderActionType() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("header_action_type"))
}

func (rh RuleActionResponseHeaderAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("header_name"))
}

func (rh RuleActionResponseHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rh.ref.Append("value"))
}

type RuleMatchConditionAttributes struct {
	ref terra.Reference
}

func (mc RuleMatchConditionAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc RuleMatchConditionAttributes) InternalWithRef(ref terra.Reference) RuleMatchConditionAttributes {
	return RuleMatchConditionAttributes{ref: ref}
}

func (mc RuleMatchConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc RuleMatchConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("negate_condition"))
}

func (mc RuleMatchConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("operator"))
}

func (mc RuleMatchConditionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("selector"))
}

func (mc RuleMatchConditionAttributes) Transform() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("transform"))
}

func (mc RuleMatchConditionAttributes) Value() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("value"))
}

func (mc RuleMatchConditionAttributes) Variable() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("variable"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RuleState struct {
	Name           string                    `json:"name"`
	Priority       float64                   `json:"priority"`
	Action         []RuleActionState         `json:"action"`
	MatchCondition []RuleMatchConditionState `json:"match_condition"`
}

type RuleActionState struct {
	RequestHeader  []RuleActionRequestHeaderState  `json:"request_header"`
	ResponseHeader []RuleActionResponseHeaderState `json:"response_header"`
}

type RuleActionRequestHeaderState struct {
	HeaderActionType string `json:"header_action_type"`
	HeaderName       string `json:"header_name"`
	Value            string `json:"value"`
}

type RuleActionResponseHeaderState struct {
	HeaderActionType string `json:"header_action_type"`
	HeaderName       string `json:"header_name"`
	Value            string `json:"value"`
}

type RuleMatchConditionState struct {
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Selector        string   `json:"selector"`
	Transform       []string `json:"transform"`
	Value           []string `json:"value"`
	Variable        string   `json:"variable"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
