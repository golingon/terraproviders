// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_sentinel_metadata

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_sentinel_metadata.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSentinelMetadataState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asm *Resource) Type() string {
	return "azurerm_sentinel_metadata"
}

// LocalName returns the local name for [Resource].
func (asm *Resource) LocalName() string {
	return asm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asm *Resource) Configuration() interface{} {
	return asm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asm *Resource) Dependencies() terra.Dependencies {
	return asm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asm *Resource) LifecycleManagement() *terra.Lifecycle {
	return asm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asm *Resource) Attributes() azurermSentinelMetadataAttributes {
	return azurermSentinelMetadataAttributes{ref: terra.ReferenceResource(asm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asm *Resource) ImportState(state io.Reader) error {
	asm.state = &azurermSentinelMetadataState{}
	if err := json.NewDecoder(state).Decode(asm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asm.Type(), asm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asm *Resource) State() (*azurermSentinelMetadataState, bool) {
	return asm.state, asm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asm *Resource) StateMust() *azurermSentinelMetadataState {
	if asm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asm.Type(), asm.LocalName()))
	}
	return asm.state
}

// Args contains the configurations for azurerm_sentinel_metadata.
type Args struct {
	// ContentId: string, required
	ContentId terra.StringValue `hcl:"content_id,attr" validate:"required"`
	// ContentSchemaVersion: string, optional
	ContentSchemaVersion terra.StringValue `hcl:"content_schema_version,attr"`
	// CustomVersion: string, optional
	CustomVersion terra.StringValue `hcl:"custom_version,attr"`
	// Dependency: string, optional
	Dependency terra.StringValue `hcl:"dependency,attr"`
	// FirstPublishDate: string, optional
	FirstPublishDate terra.StringValue `hcl:"first_publish_date,attr"`
	// IconId: string, optional
	IconId terra.StringValue `hcl:"icon_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// LastPublishDate: string, optional
	LastPublishDate terra.StringValue `hcl:"last_publish_date,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentId: string, required
	ParentId terra.StringValue `hcl:"parent_id,attr" validate:"required"`
	// PreviewImages: list of string, optional
	PreviewImages terra.ListValue[terra.StringValue] `hcl:"preview_images,attr"`
	// PreviewImagesDark: list of string, optional
	PreviewImagesDark terra.ListValue[terra.StringValue] `hcl:"preview_images_dark,attr"`
	// Providers: list of string, optional
	Providers terra.ListValue[terra.StringValue] `hcl:"providers,attr"`
	// ThreatAnalysisTactics: list of string, optional
	ThreatAnalysisTactics terra.ListValue[terra.StringValue] `hcl:"threat_analysis_tactics,attr"`
	// ThreatAnalysisTechniques: list of string, optional
	ThreatAnalysisTechniques terra.ListValue[terra.StringValue] `hcl:"threat_analysis_techniques,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Author: optional
	Author *Author `hcl:"author,block"`
	// Category: optional
	Category *Category `hcl:"category,block"`
	// Source: optional
	Source *Source `hcl:"source,block"`
	// Support: optional
	Support *Support `hcl:"support,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSentinelMetadataAttributes struct {
	ref terra.Reference
}

// ContentId returns a reference to field content_id of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) ContentId() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("content_id"))
}

// ContentSchemaVersion returns a reference to field content_schema_version of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) ContentSchemaVersion() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("content_schema_version"))
}

// CustomVersion returns a reference to field custom_version of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) CustomVersion() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("custom_version"))
}

// Dependency returns a reference to field dependency of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Dependency() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("dependency"))
}

// FirstPublishDate returns a reference to field first_publish_date of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) FirstPublishDate() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("first_publish_date"))
}

// IconId returns a reference to field icon_id of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) IconId() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("icon_id"))
}

// Id returns a reference to field id of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("id"))
}

// Kind returns a reference to field kind of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("kind"))
}

// LastPublishDate returns a reference to field last_publish_date of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) LastPublishDate() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("last_publish_date"))
}

// Name returns a reference to field name of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("name"))
}

// ParentId returns a reference to field parent_id of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) ParentId() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("parent_id"))
}

// PreviewImages returns a reference to field preview_images of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) PreviewImages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asm.ref.Append("preview_images"))
}

// PreviewImagesDark returns a reference to field preview_images_dark of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) PreviewImagesDark() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asm.ref.Append("preview_images_dark"))
}

// Providers returns a reference to field providers of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Providers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asm.ref.Append("providers"))
}

// ThreatAnalysisTactics returns a reference to field threat_analysis_tactics of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) ThreatAnalysisTactics() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asm.ref.Append("threat_analysis_tactics"))
}

// ThreatAnalysisTechniques returns a reference to field threat_analysis_techniques of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) ThreatAnalysisTechniques() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asm.ref.Append("threat_analysis_techniques"))
}

// Version returns a reference to field version of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("version"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_sentinel_metadata.
func (asm azurermSentinelMetadataAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(asm.ref.Append("workspace_id"))
}

func (asm azurermSentinelMetadataAttributes) Author() terra.ListValue[AuthorAttributes] {
	return terra.ReferenceAsList[AuthorAttributes](asm.ref.Append("author"))
}

func (asm azurermSentinelMetadataAttributes) Category() terra.ListValue[CategoryAttributes] {
	return terra.ReferenceAsList[CategoryAttributes](asm.ref.Append("category"))
}

func (asm azurermSentinelMetadataAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](asm.ref.Append("source"))
}

func (asm azurermSentinelMetadataAttributes) Support() terra.ListValue[SupportAttributes] {
	return terra.ReferenceAsList[SupportAttributes](asm.ref.Append("support"))
}

func (asm azurermSentinelMetadataAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asm.ref.Append("timeouts"))
}

type azurermSentinelMetadataState struct {
	ContentId                string          `json:"content_id"`
	ContentSchemaVersion     string          `json:"content_schema_version"`
	CustomVersion            string          `json:"custom_version"`
	Dependency               string          `json:"dependency"`
	FirstPublishDate         string          `json:"first_publish_date"`
	IconId                   string          `json:"icon_id"`
	Id                       string          `json:"id"`
	Kind                     string          `json:"kind"`
	LastPublishDate          string          `json:"last_publish_date"`
	Name                     string          `json:"name"`
	ParentId                 string          `json:"parent_id"`
	PreviewImages            []string        `json:"preview_images"`
	PreviewImagesDark        []string        `json:"preview_images_dark"`
	Providers                []string        `json:"providers"`
	ThreatAnalysisTactics    []string        `json:"threat_analysis_tactics"`
	ThreatAnalysisTechniques []string        `json:"threat_analysis_techniques"`
	Version                  string          `json:"version"`
	WorkspaceId              string          `json:"workspace_id"`
	Author                   []AuthorState   `json:"author"`
	Category                 []CategoryState `json:"category"`
	Source                   []SourceState   `json:"source"`
	Support                  []SupportState  `json:"support"`
	Timeouts                 *TimeoutsState  `json:"timeouts"`
}
