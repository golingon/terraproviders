// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_encryption_scope

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_encryption_scope.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageEncryptionScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ases *Resource) Type() string {
	return "azurerm_storage_encryption_scope"
}

// LocalName returns the local name for [Resource].
func (ases *Resource) LocalName() string {
	return ases.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ases *Resource) Configuration() interface{} {
	return ases.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ases *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ases)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ases *Resource) Dependencies() terra.Dependencies {
	return ases.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ases *Resource) LifecycleManagement() *terra.Lifecycle {
	return ases.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ases *Resource) Attributes() azurermStorageEncryptionScopeAttributes {
	return azurermStorageEncryptionScopeAttributes{ref: terra.ReferenceResource(ases)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ases *Resource) ImportState(state io.Reader) error {
	ases.state = &azurermStorageEncryptionScopeState{}
	if err := json.NewDecoder(state).Decode(ases.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ases.Type(), ases.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ases *Resource) State() (*azurermStorageEncryptionScopeState, bool) {
	return ases.state, ases.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ases *Resource) StateMust() *azurermStorageEncryptionScopeState {
	if ases.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ases.Type(), ases.LocalName()))
	}
	return ases.state
}

// Args contains the configurations for azurerm_storage_encryption_scope.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureEncryptionRequired: bool, optional
	InfrastructureEncryptionRequired terra.BoolValue `hcl:"infrastructure_encryption_required,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageEncryptionScopeAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ases.ref.Append("id"))
}

// InfrastructureEncryptionRequired returns a reference to field infrastructure_encryption_required of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) InfrastructureEncryptionRequired() terra.BoolValue {
	return terra.ReferenceAsBool(ases.ref.Append("infrastructure_encryption_required"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(ases.ref.Append("key_vault_key_id"))
}

// Name returns a reference to field name of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ases.ref.Append("name"))
}

// Source returns a reference to field source of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(ases.ref.Append("source"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_storage_encryption_scope.
func (ases azurermStorageEncryptionScopeAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(ases.ref.Append("storage_account_id"))
}

func (ases azurermStorageEncryptionScopeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ases.ref.Append("timeouts"))
}

type azurermStorageEncryptionScopeState struct {
	Id                               string         `json:"id"`
	InfrastructureEncryptionRequired bool           `json:"infrastructure_encryption_required"`
	KeyVaultKeyId                    string         `json:"key_vault_key_id"`
	Name                             string         `json:"name"`
	Source                           string         `json:"source"`
	StorageAccountId                 string         `json:"storage_account_id"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
