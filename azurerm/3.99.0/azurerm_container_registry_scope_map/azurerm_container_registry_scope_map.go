// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_registry_scope_map

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_registry_scope_map.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerRegistryScopeMapState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrsm *Resource) Type() string {
	return "azurerm_container_registry_scope_map"
}

// LocalName returns the local name for [Resource].
func (acrsm *Resource) LocalName() string {
	return acrsm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrsm *Resource) Configuration() interface{} {
	return acrsm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrsm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrsm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrsm *Resource) Dependencies() terra.Dependencies {
	return acrsm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrsm *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrsm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrsm *Resource) Attributes() azurermContainerRegistryScopeMapAttributes {
	return azurermContainerRegistryScopeMapAttributes{ref: terra.ReferenceResource(acrsm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrsm *Resource) ImportState(state io.Reader) error {
	acrsm.state = &azurermContainerRegistryScopeMapState{}
	if err := json.NewDecoder(state).Decode(acrsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrsm.Type(), acrsm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrsm *Resource) State() (*azurermContainerRegistryScopeMapState, bool) {
	return acrsm.state, acrsm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrsm *Resource) StateMust() *azurermContainerRegistryScopeMapState {
	if acrsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrsm.Type(), acrsm.LocalName()))
	}
	return acrsm.state
}

// Args contains the configurations for azurerm_container_registry_scope_map.
type Args struct {
	// Actions: list of string, required
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// ContainerRegistryName: string, required
	ContainerRegistryName terra.StringValue `hcl:"container_registry_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermContainerRegistryScopeMapAttributes struct {
	ref terra.Reference
}

// Actions returns a reference to field actions of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](acrsm.ref.Append("actions"))
}

// ContainerRegistryName returns a reference to field container_registry_name of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) ContainerRegistryName() terra.StringValue {
	return terra.ReferenceAsString(acrsm.ref.Append("container_registry_name"))
}

// Description returns a reference to field description of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acrsm.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrsm.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrsm.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_container_registry_scope_map.
func (acrsm azurermContainerRegistryScopeMapAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acrsm.ref.Append("resource_group_name"))
}

func (acrsm azurermContainerRegistryScopeMapAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acrsm.ref.Append("timeouts"))
}

type azurermContainerRegistryScopeMapState struct {
	Actions               []string       `json:"actions"`
	ContainerRegistryName string         `json:"container_registry_name"`
	Description           string         `json:"description"`
	Id                    string         `json:"id"`
	Name                  string         `json:"name"`
	ResourceGroupName     string         `json:"resource_group_name"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
