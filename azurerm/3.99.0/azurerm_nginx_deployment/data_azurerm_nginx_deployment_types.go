// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_nginx_deployment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataAutoScaleProfileAttributes struct {
	ref terra.Reference
}

func (asp DataAutoScaleProfileAttributes) InternalRef() (terra.Reference, error) {
	return asp.ref, nil
}

func (asp DataAutoScaleProfileAttributes) InternalWithRef(ref terra.Reference) DataAutoScaleProfileAttributes {
	return DataAutoScaleProfileAttributes{ref: ref}
}

func (asp DataAutoScaleProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asp.ref.InternalTokens()
}

func (asp DataAutoScaleProfileAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("max_capacity"))
}

func (asp DataAutoScaleProfileAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("min_capacity"))
}

func (asp DataAutoScaleProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("name"))
}

type DataFrontendPrivateAttributes struct {
	ref terra.Reference
}

func (fp DataFrontendPrivateAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp DataFrontendPrivateAttributes) InternalWithRef(ref terra.Reference) DataFrontendPrivateAttributes {
	return DataFrontendPrivateAttributes{ref: ref}
}

func (fp DataFrontendPrivateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp DataFrontendPrivateAttributes) AllocationMethod() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("allocation_method"))
}

func (fp DataFrontendPrivateAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("ip_address"))
}

func (fp DataFrontendPrivateAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("subnet_id"))
}

type DataFrontendPublicAttributes struct {
	ref terra.Reference
}

func (fp DataFrontendPublicAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp DataFrontendPublicAttributes) InternalWithRef(ref terra.Reference) DataFrontendPublicAttributes {
	return DataFrontendPublicAttributes{ref: ref}
}

func (fp DataFrontendPublicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp DataFrontendPublicAttributes) IpAddress() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("ip_address"))
}

type DataIdentityAttributes struct {
	ref terra.Reference
}

func (i DataIdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdentityAttributes) InternalWithRef(ref terra.Reference) DataIdentityAttributes {
	return DataIdentityAttributes{ref: ref}
}

func (i DataIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i DataIdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i DataIdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i DataIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type DataLoggingStorageAccountAttributes struct {
	ref terra.Reference
}

func (lsa DataLoggingStorageAccountAttributes) InternalRef() (terra.Reference, error) {
	return lsa.ref, nil
}

func (lsa DataLoggingStorageAccountAttributes) InternalWithRef(ref terra.Reference) DataLoggingStorageAccountAttributes {
	return DataLoggingStorageAccountAttributes{ref: ref}
}

func (lsa DataLoggingStorageAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsa.ref.InternalTokens()
}

func (lsa DataLoggingStorageAccountAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(lsa.ref.Append("container_name"))
}

func (lsa DataLoggingStorageAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lsa.ref.Append("name"))
}

type DataNetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni DataNetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni DataNetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) DataNetworkInterfaceAttributes {
	return DataNetworkInterfaceAttributes{ref: ref}
}

func (ni DataNetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni DataNetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAutoScaleProfileState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
	Name        string  `json:"name"`
}

type DataFrontendPrivateState struct {
	AllocationMethod string `json:"allocation_method"`
	IpAddress        string `json:"ip_address"`
	SubnetId         string `json:"subnet_id"`
}

type DataFrontendPublicState struct {
	IpAddress []string `json:"ip_address"`
}

type DataIdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type DataLoggingStorageAccountState struct {
	ContainerName string `json:"container_name"`
	Name          string `json:"name"`
}

type DataNetworkInterfaceState struct {
	SubnetId string `json:"subnet_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
