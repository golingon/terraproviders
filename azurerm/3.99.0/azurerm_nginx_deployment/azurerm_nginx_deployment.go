// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_nginx_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_nginx_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNginxDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (and *Resource) Type() string {
	return "azurerm_nginx_deployment"
}

// LocalName returns the local name for [Resource].
func (and *Resource) LocalName() string {
	return and.Name
}

// Configuration returns the configuration (args) for [Resource].
func (and *Resource) Configuration() interface{} {
	return and.Args
}

// DependOn is used for other resources to depend on [Resource].
func (and *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(and)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (and *Resource) Dependencies() terra.Dependencies {
	return and.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (and *Resource) LifecycleManagement() *terra.Lifecycle {
	return and.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (and *Resource) Attributes() azurermNginxDeploymentAttributes {
	return azurermNginxDeploymentAttributes{ref: terra.ReferenceResource(and)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (and *Resource) ImportState(state io.Reader) error {
	and.state = &azurermNginxDeploymentState{}
	if err := json.NewDecoder(state).Decode(and.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", and.Type(), and.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (and *Resource) State() (*azurermNginxDeploymentState, bool) {
	return and.state, and.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (and *Resource) StateMust() *azurermNginxDeploymentState {
	if and.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", and.Type(), and.LocalName()))
	}
	return and.state
}

// Args contains the configurations for azurerm_nginx_deployment.
type Args struct {
	// AutomaticUpgradeChannel: string, optional
	AutomaticUpgradeChannel terra.StringValue `hcl:"automatic_upgrade_channel,attr"`
	// Capacity: number, optional
	Capacity terra.NumberValue `hcl:"capacity,attr"`
	// DiagnoseSupportEnabled: bool, optional
	DiagnoseSupportEnabled terra.BoolValue `hcl:"diagnose_support_enabled,attr"`
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroup: string, optional
	ManagedResourceGroup terra.StringValue `hcl:"managed_resource_group,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AutoScaleProfile: min=0
	AutoScaleProfile []AutoScaleProfile `hcl:"auto_scale_profile,block" validate:"min=0"`
	// Configuration: optional
	Configuration *Configuration `hcl:"configuration,block"`
	// FrontendPrivate: min=0
	FrontendPrivate []FrontendPrivate `hcl:"frontend_private,block" validate:"min=0"`
	// FrontendPublic: optional
	FrontendPublic *FrontendPublic `hcl:"frontend_public,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// LoggingStorageAccount: min=0
	LoggingStorageAccount []LoggingStorageAccount `hcl:"logging_storage_account,block" validate:"min=0"`
	// NetworkInterface: min=0
	NetworkInterface []NetworkInterface `hcl:"network_interface,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNginxDeploymentAttributes struct {
	ref terra.Reference
}

// AutomaticUpgradeChannel returns a reference to field automatic_upgrade_channel of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) AutomaticUpgradeChannel() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("automatic_upgrade_channel"))
}

// Capacity returns a reference to field capacity of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(and.ref.Append("capacity"))
}

// DiagnoseSupportEnabled returns a reference to field diagnose_support_enabled of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) DiagnoseSupportEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(and.ref.Append("diagnose_support_enabled"))
}

// Email returns a reference to field email of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("email"))
}

// Id returns a reference to field id of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("ip_address"))
}

// Location returns a reference to field location of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("location"))
}

// ManagedResourceGroup returns a reference to field managed_resource_group of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) ManagedResourceGroup() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("managed_resource_group"))
}

// Name returns a reference to field name of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("name"))
}

// NginxVersion returns a reference to field nginx_version of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) NginxVersion() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("nginx_version"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(and.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_nginx_deployment.
func (and azurermNginxDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](and.ref.Append("tags"))
}

func (and azurermNginxDeploymentAttributes) AutoScaleProfile() terra.ListValue[AutoScaleProfileAttributes] {
	return terra.ReferenceAsList[AutoScaleProfileAttributes](and.ref.Append("auto_scale_profile"))
}

func (and azurermNginxDeploymentAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](and.ref.Append("configuration"))
}

func (and azurermNginxDeploymentAttributes) FrontendPrivate() terra.ListValue[FrontendPrivateAttributes] {
	return terra.ReferenceAsList[FrontendPrivateAttributes](and.ref.Append("frontend_private"))
}

func (and azurermNginxDeploymentAttributes) FrontendPublic() terra.ListValue[FrontendPublicAttributes] {
	return terra.ReferenceAsList[FrontendPublicAttributes](and.ref.Append("frontend_public"))
}

func (and azurermNginxDeploymentAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](and.ref.Append("identity"))
}

func (and azurermNginxDeploymentAttributes) LoggingStorageAccount() terra.ListValue[LoggingStorageAccountAttributes] {
	return terra.ReferenceAsList[LoggingStorageAccountAttributes](and.ref.Append("logging_storage_account"))
}

func (and azurermNginxDeploymentAttributes) NetworkInterface() terra.ListValue[NetworkInterfaceAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceAttributes](and.ref.Append("network_interface"))
}

func (and azurermNginxDeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](and.ref.Append("timeouts"))
}

type azurermNginxDeploymentState struct {
	AutomaticUpgradeChannel string                       `json:"automatic_upgrade_channel"`
	Capacity                float64                      `json:"capacity"`
	DiagnoseSupportEnabled  bool                         `json:"diagnose_support_enabled"`
	Email                   string                       `json:"email"`
	Id                      string                       `json:"id"`
	IpAddress               string                       `json:"ip_address"`
	Location                string                       `json:"location"`
	ManagedResourceGroup    string                       `json:"managed_resource_group"`
	Name                    string                       `json:"name"`
	NginxVersion            string                       `json:"nginx_version"`
	ResourceGroupName       string                       `json:"resource_group_name"`
	Sku                     string                       `json:"sku"`
	Tags                    map[string]string            `json:"tags"`
	AutoScaleProfile        []AutoScaleProfileState      `json:"auto_scale_profile"`
	Configuration           []ConfigurationState         `json:"configuration"`
	FrontendPrivate         []FrontendPrivateState       `json:"frontend_private"`
	FrontendPublic          []FrontendPublicState        `json:"frontend_public"`
	Identity                []IdentityState              `json:"identity"`
	LoggingStorageAccount   []LoggingStorageAccountState `json:"logging_storage_account"`
	NetworkInterface        []NetworkInterfaceState      `json:"network_interface"`
	Timeouts                *TimeoutsState               `json:"timeouts"`
}
