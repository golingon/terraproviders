// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_portal_tenant_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_portal_tenant_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPortalTenantConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aptc *Resource) Type() string {
	return "azurerm_portal_tenant_configuration"
}

// LocalName returns the local name for [Resource].
func (aptc *Resource) LocalName() string {
	return aptc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aptc *Resource) Configuration() interface{} {
	return aptc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aptc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aptc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aptc *Resource) Dependencies() terra.Dependencies {
	return aptc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aptc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aptc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aptc *Resource) Attributes() azurermPortalTenantConfigurationAttributes {
	return azurermPortalTenantConfigurationAttributes{ref: terra.ReferenceResource(aptc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aptc *Resource) ImportState(state io.Reader) error {
	aptc.state = &azurermPortalTenantConfigurationState{}
	if err := json.NewDecoder(state).Decode(aptc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aptc.Type(), aptc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aptc *Resource) State() (*azurermPortalTenantConfigurationState, bool) {
	return aptc.state, aptc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aptc *Resource) StateMust() *azurermPortalTenantConfigurationState {
	if aptc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aptc.Type(), aptc.LocalName()))
	}
	return aptc.state
}

// Args contains the configurations for azurerm_portal_tenant_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrivateMarkdownStorageEnforced: bool, required
	PrivateMarkdownStorageEnforced terra.BoolValue `hcl:"private_markdown_storage_enforced,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPortalTenantConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_portal_tenant_configuration.
func (aptc azurermPortalTenantConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aptc.ref.Append("id"))
}

// PrivateMarkdownStorageEnforced returns a reference to field private_markdown_storage_enforced of azurerm_portal_tenant_configuration.
func (aptc azurermPortalTenantConfigurationAttributes) PrivateMarkdownStorageEnforced() terra.BoolValue {
	return terra.ReferenceAsBool(aptc.ref.Append("private_markdown_storage_enforced"))
}

func (aptc azurermPortalTenantConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aptc.ref.Append("timeouts"))
}

type azurermPortalTenantConfigurationState struct {
	Id                             string         `json:"id"`
	PrivateMarkdownStorageEnforced bool           `json:"private_markdown_storage_enforced"`
	Timeouts                       *TimeoutsState `json:"timeouts"`
}
