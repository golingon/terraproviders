// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_sql_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_sql_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseSqlPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assp *Resource) Type() string {
	return "azurerm_synapse_sql_pool"
}

// LocalName returns the local name for [Resource].
func (assp *Resource) LocalName() string {
	return assp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assp *Resource) Configuration() interface{} {
	return assp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assp *Resource) Dependencies() terra.Dependencies {
	return assp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assp *Resource) LifecycleManagement() *terra.Lifecycle {
	return assp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assp *Resource) Attributes() azurermSynapseSqlPoolAttributes {
	return azurermSynapseSqlPoolAttributes{ref: terra.ReferenceResource(assp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assp *Resource) ImportState(state io.Reader) error {
	assp.state = &azurermSynapseSqlPoolState{}
	if err := json.NewDecoder(state).Decode(assp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assp.Type(), assp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assp *Resource) State() (*azurermSynapseSqlPoolState, bool) {
	return assp.state, assp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assp *Resource) StateMust() *azurermSynapseSqlPoolState {
	if assp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assp.Type(), assp.LocalName()))
	}
	return assp.state
}

// Args contains the configurations for azurerm_synapse_sql_pool.
type Args struct {
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// DataEncrypted: bool, optional
	DataEncrypted terra.BoolValue `hcl:"data_encrypted,attr"`
	// GeoBackupPolicyEnabled: bool, optional
	GeoBackupPolicyEnabled terra.BoolValue `hcl:"geo_backup_policy_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryDatabaseId: string, optional
	RecoveryDatabaseId terra.StringValue `hcl:"recovery_database_id,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// StorageAccountType: string, optional
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Restore: optional
	Restore *Restore `hcl:"restore,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseSqlPoolAttributes struct {
	ref terra.Reference
}

// Collation returns a reference to field collation of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("collation"))
}

// CreateMode returns a reference to field create_mode of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("create_mode"))
}

// DataEncrypted returns a reference to field data_encrypted of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) DataEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("data_encrypted"))
}

// GeoBackupPolicyEnabled returns a reference to field geo_backup_policy_enabled of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) GeoBackupPolicyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("geo_backup_policy_enabled"))
}

// Id returns a reference to field id of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("name"))
}

// RecoveryDatabaseId returns a reference to field recovery_database_id of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) RecoveryDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("recovery_database_id"))
}

// SkuName returns a reference to field sku_name of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("sku_name"))
}

// StorageAccountType returns a reference to field storage_account_type of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("storage_account_type"))
}

// SynapseWorkspaceId returns a reference to field synapse_workspace_id of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("synapse_workspace_id"))
}

// Tags returns a reference to field tags of azurerm_synapse_sql_pool.
func (assp azurermSynapseSqlPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assp.ref.Append("tags"))
}

func (assp azurermSynapseSqlPoolAttributes) Restore() terra.ListValue[RestoreAttributes] {
	return terra.ReferenceAsList[RestoreAttributes](assp.ref.Append("restore"))
}

func (assp azurermSynapseSqlPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assp.ref.Append("timeouts"))
}

type azurermSynapseSqlPoolState struct {
	Collation              string            `json:"collation"`
	CreateMode             string            `json:"create_mode"`
	DataEncrypted          bool              `json:"data_encrypted"`
	GeoBackupPolicyEnabled bool              `json:"geo_backup_policy_enabled"`
	Id                     string            `json:"id"`
	Name                   string            `json:"name"`
	RecoveryDatabaseId     string            `json:"recovery_database_id"`
	SkuName                string            `json:"sku_name"`
	StorageAccountType     string            `json:"storage_account_type"`
	SynapseWorkspaceId     string            `json:"synapse_workspace_id"`
	Tags                   map[string]string `json:"tags"`
	Restore                []RestoreState    `json:"restore"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
