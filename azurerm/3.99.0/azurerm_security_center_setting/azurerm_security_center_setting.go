// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_security_center_setting

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_security_center_setting.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSecurityCenterSettingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascs *Resource) Type() string {
	return "azurerm_security_center_setting"
}

// LocalName returns the local name for [Resource].
func (ascs *Resource) LocalName() string {
	return ascs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascs *Resource) Configuration() interface{} {
	return ascs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascs *Resource) Dependencies() terra.Dependencies {
	return ascs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascs *Resource) Attributes() azurermSecurityCenterSettingAttributes {
	return azurermSecurityCenterSettingAttributes{ref: terra.ReferenceResource(ascs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascs *Resource) ImportState(state io.Reader) error {
	ascs.state = &azurermSecurityCenterSettingState{}
	if err := json.NewDecoder(state).Decode(ascs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascs.Type(), ascs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascs *Resource) State() (*azurermSecurityCenterSettingState, bool) {
	return ascs.state, ascs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascs *Resource) StateMust() *azurermSecurityCenterSettingState {
	if ascs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascs.Type(), ascs.LocalName()))
	}
	return ascs.state
}

// Args contains the configurations for azurerm_security_center_setting.
type Args struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SettingName: string, required
	SettingName terra.StringValue `hcl:"setting_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSecurityCenterSettingAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of azurerm_security_center_setting.
func (ascs azurermSecurityCenterSettingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascs.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_security_center_setting.
func (ascs azurermSecurityCenterSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("id"))
}

// SettingName returns a reference to field setting_name of azurerm_security_center_setting.
func (ascs azurermSecurityCenterSettingAttributes) SettingName() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("setting_name"))
}

func (ascs azurermSecurityCenterSettingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascs.ref.Append("timeouts"))
}

type azurermSecurityCenterSettingState struct {
	Enabled     bool           `json:"enabled"`
	Id          string         `json:"id"`
	SettingName string         `json:"setting_name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
