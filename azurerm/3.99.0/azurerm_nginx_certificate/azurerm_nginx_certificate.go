// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_nginx_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_nginx_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNginxCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anc *Resource) Type() string {
	return "azurerm_nginx_certificate"
}

// LocalName returns the local name for [Resource].
func (anc *Resource) LocalName() string {
	return anc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anc *Resource) Configuration() interface{} {
	return anc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anc *Resource) Dependencies() terra.Dependencies {
	return anc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anc *Resource) Attributes() azurermNginxCertificateAttributes {
	return azurermNginxCertificateAttributes{ref: terra.ReferenceResource(anc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anc *Resource) ImportState(state io.Reader) error {
	anc.state = &azurermNginxCertificateState{}
	if err := json.NewDecoder(state).Decode(anc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anc.Type(), anc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anc *Resource) State() (*azurermNginxCertificateState, bool) {
	return anc.state, anc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anc *Resource) StateMust() *azurermNginxCertificateState {
	if anc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anc.Type(), anc.LocalName()))
	}
	return anc.state
}

// Args contains the configurations for azurerm_nginx_certificate.
type Args struct {
	// CertificateVirtualPath: string, required
	CertificateVirtualPath terra.StringValue `hcl:"certificate_virtual_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultSecretId: string, required
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr" validate:"required"`
	// KeyVirtualPath: string, required
	KeyVirtualPath terra.StringValue `hcl:"key_virtual_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NginxDeploymentId: string, required
	NginxDeploymentId terra.StringValue `hcl:"nginx_deployment_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNginxCertificateAttributes struct {
	ref terra.Reference
}

// CertificateVirtualPath returns a reference to field certificate_virtual_path of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) CertificateVirtualPath() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("certificate_virtual_path"))
}

// Id returns a reference to field id of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("id"))
}

// KeyVaultSecretId returns a reference to field key_vault_secret_id of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("key_vault_secret_id"))
}

// KeyVirtualPath returns a reference to field key_virtual_path of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) KeyVirtualPath() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("key_virtual_path"))
}

// Name returns a reference to field name of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("name"))
}

// NginxDeploymentId returns a reference to field nginx_deployment_id of azurerm_nginx_certificate.
func (anc azurermNginxCertificateAttributes) NginxDeploymentId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("nginx_deployment_id"))
}

func (anc azurermNginxCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anc.ref.Append("timeouts"))
}

type azurermNginxCertificateState struct {
	CertificateVirtualPath string         `json:"certificate_virtual_path"`
	Id                     string         `json:"id"`
	KeyVaultSecretId       string         `json:"key_vault_secret_id"`
	KeyVirtualPath         string         `json:"key_virtual_path"`
	Name                   string         `json:"name"`
	NginxDeploymentId      string         `json:"nginx_deployment_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
