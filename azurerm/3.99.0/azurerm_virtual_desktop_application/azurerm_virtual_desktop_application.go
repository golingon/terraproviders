// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_desktop_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_desktop_application.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualDesktopApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avda *Resource) Type() string {
	return "azurerm_virtual_desktop_application"
}

// LocalName returns the local name for [Resource].
func (avda *Resource) LocalName() string {
	return avda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avda *Resource) Configuration() interface{} {
	return avda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avda *Resource) Dependencies() terra.Dependencies {
	return avda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avda *Resource) LifecycleManagement() *terra.Lifecycle {
	return avda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avda *Resource) Attributes() azurermVirtualDesktopApplicationAttributes {
	return azurermVirtualDesktopApplicationAttributes{ref: terra.ReferenceResource(avda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avda *Resource) ImportState(state io.Reader) error {
	avda.state = &azurermVirtualDesktopApplicationState{}
	if err := json.NewDecoder(state).Decode(avda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avda.Type(), avda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avda *Resource) State() (*azurermVirtualDesktopApplicationState, bool) {
	return avda.state, avda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avda *Resource) StateMust() *azurermVirtualDesktopApplicationState {
	if avda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avda.Type(), avda.LocalName()))
	}
	return avda.state
}

// Args contains the configurations for azurerm_virtual_desktop_application.
type Args struct {
	// ApplicationGroupId: string, required
	ApplicationGroupId terra.StringValue `hcl:"application_group_id,attr" validate:"required"`
	// CommandLineArgumentPolicy: string, required
	CommandLineArgumentPolicy terra.StringValue `hcl:"command_line_argument_policy,attr" validate:"required"`
	// CommandLineArguments: string, optional
	CommandLineArguments terra.StringValue `hcl:"command_line_arguments,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// IconIndex: number, optional
	IconIndex terra.NumberValue `hcl:"icon_index,attr"`
	// IconPath: string, optional
	IconPath terra.StringValue `hcl:"icon_path,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ShowInPortal: bool, optional
	ShowInPortal terra.BoolValue `hcl:"show_in_portal,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualDesktopApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationGroupId returns a reference to field application_group_id of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) ApplicationGroupId() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("application_group_id"))
}

// CommandLineArgumentPolicy returns a reference to field command_line_argument_policy of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) CommandLineArgumentPolicy() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("command_line_argument_policy"))
}

// CommandLineArguments returns a reference to field command_line_arguments of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) CommandLineArguments() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("command_line_arguments"))
}

// Description returns a reference to field description of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("description"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("friendly_name"))
}

// IconIndex returns a reference to field icon_index of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) IconIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(avda.ref.Append("icon_index"))
}

// IconPath returns a reference to field icon_path of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) IconPath() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("icon_path"))
}

// Id returns a reference to field id of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("name"))
}

// Path returns a reference to field path of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(avda.ref.Append("path"))
}

// ShowInPortal returns a reference to field show_in_portal of azurerm_virtual_desktop_application.
func (avda azurermVirtualDesktopApplicationAttributes) ShowInPortal() terra.BoolValue {
	return terra.ReferenceAsBool(avda.ref.Append("show_in_portal"))
}

func (avda azurermVirtualDesktopApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avda.ref.Append("timeouts"))
}

type azurermVirtualDesktopApplicationState struct {
	ApplicationGroupId        string         `json:"application_group_id"`
	CommandLineArgumentPolicy string         `json:"command_line_argument_policy"`
	CommandLineArguments      string         `json:"command_line_arguments"`
	Description               string         `json:"description"`
	FriendlyName              string         `json:"friendly_name"`
	IconIndex                 float64        `json:"icon_index"`
	IconPath                  string         `json:"icon_path"`
	Id                        string         `json:"id"`
	Name                      string         `json:"name"`
	Path                      string         `json:"path"`
	ShowInPortal              bool           `json:"show_in_portal"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
