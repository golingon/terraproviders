// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_registry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_registry.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerRegistryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acr *Resource) Type() string {
	return "azurerm_container_registry"
}

// LocalName returns the local name for [Resource].
func (acr *Resource) LocalName() string {
	return acr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acr *Resource) Configuration() interface{} {
	return acr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acr *Resource) Dependencies() terra.Dependencies {
	return acr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acr *Resource) Attributes() azurermContainerRegistryAttributes {
	return azurermContainerRegistryAttributes{ref: terra.ReferenceResource(acr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acr *Resource) ImportState(state io.Reader) error {
	acr.state = &azurermContainerRegistryState{}
	if err := json.NewDecoder(state).Decode(acr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acr.Type(), acr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acr *Resource) State() (*azurermContainerRegistryState, bool) {
	return acr.state, acr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acr *Resource) StateMust() *azurermContainerRegistryState {
	if acr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acr.Type(), acr.LocalName()))
	}
	return acr.state
}

// Args contains the configurations for azurerm_container_registry.
type Args struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// AnonymousPullEnabled: bool, optional
	AnonymousPullEnabled terra.BoolValue `hcl:"anonymous_pull_enabled,attr"`
	// DataEndpointEnabled: bool, optional
	DataEndpointEnabled terra.BoolValue `hcl:"data_endpoint_enabled,attr"`
	// ExportPolicyEnabled: bool, optional
	ExportPolicyEnabled terra.BoolValue `hcl:"export_policy_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkRuleBypassOption: string, optional
	NetworkRuleBypassOption terra.StringValue `hcl:"network_rule_bypass_option,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// QuarantinePolicyEnabled: bool, optional
	QuarantinePolicyEnabled terra.BoolValue `hcl:"quarantine_policy_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundancyEnabled: bool, optional
	ZoneRedundancyEnabled terra.BoolValue `hcl:"zone_redundancy_enabled,attr"`
	// Encryption: min=0
	Encryption []Encryption `hcl:"encryption,block" validate:"min=0"`
	// NetworkRuleSet: min=0
	NetworkRuleSet []NetworkRuleSet `hcl:"network_rule_set,block" validate:"min=0"`
	// RetentionPolicy: min=0
	RetentionPolicy []RetentionPolicy `hcl:"retention_policy,block" validate:"min=0"`
	// TrustPolicy: min=0
	TrustPolicy []TrustPolicy `hcl:"trust_policy,block" validate:"min=0"`
	// Georeplications: min=0
	Georeplications []Georeplications `hcl:"georeplications,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermContainerRegistryAttributes struct {
	ref terra.Reference
}

// AdminEnabled returns a reference to field admin_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("admin_enabled"))
}

// AdminPassword returns a reference to field admin_password of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("admin_password"))
}

// AdminUsername returns a reference to field admin_username of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("admin_username"))
}

// AnonymousPullEnabled returns a reference to field anonymous_pull_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) AnonymousPullEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("anonymous_pull_enabled"))
}

// DataEndpointEnabled returns a reference to field data_endpoint_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) DataEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("data_endpoint_enabled"))
}

// ExportPolicyEnabled returns a reference to field export_policy_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) ExportPolicyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("export_policy_enabled"))
}

// Id returns a reference to field id of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("location"))
}

// LoginServer returns a reference to field login_server of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) LoginServer() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("login_server"))
}

// Name returns a reference to field name of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("name"))
}

// NetworkRuleBypassOption returns a reference to field network_rule_bypass_option of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) NetworkRuleBypassOption() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("network_rule_bypass_option"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("public_network_access_enabled"))
}

// QuarantinePolicyEnabled returns a reference to field quarantine_policy_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) QuarantinePolicyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("quarantine_policy_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(acr.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acr.ref.Append("tags"))
}

// ZoneRedundancyEnabled returns a reference to field zone_redundancy_enabled of azurerm_container_registry.
func (acr azurermContainerRegistryAttributes) ZoneRedundancyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acr.ref.Append("zone_redundancy_enabled"))
}

func (acr azurermContainerRegistryAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](acr.ref.Append("encryption"))
}

func (acr azurermContainerRegistryAttributes) NetworkRuleSet() terra.ListValue[NetworkRuleSetAttributes] {
	return terra.ReferenceAsList[NetworkRuleSetAttributes](acr.ref.Append("network_rule_set"))
}

func (acr azurermContainerRegistryAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceAsList[RetentionPolicyAttributes](acr.ref.Append("retention_policy"))
}

func (acr azurermContainerRegistryAttributes) TrustPolicy() terra.ListValue[TrustPolicyAttributes] {
	return terra.ReferenceAsList[TrustPolicyAttributes](acr.ref.Append("trust_policy"))
}

func (acr azurermContainerRegistryAttributes) Georeplications() terra.ListValue[GeoreplicationsAttributes] {
	return terra.ReferenceAsList[GeoreplicationsAttributes](acr.ref.Append("georeplications"))
}

func (acr azurermContainerRegistryAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](acr.ref.Append("identity"))
}

func (acr azurermContainerRegistryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acr.ref.Append("timeouts"))
}

type azurermContainerRegistryState struct {
	AdminEnabled               bool                   `json:"admin_enabled"`
	AdminPassword              string                 `json:"admin_password"`
	AdminUsername              string                 `json:"admin_username"`
	AnonymousPullEnabled       bool                   `json:"anonymous_pull_enabled"`
	DataEndpointEnabled        bool                   `json:"data_endpoint_enabled"`
	ExportPolicyEnabled        bool                   `json:"export_policy_enabled"`
	Id                         string                 `json:"id"`
	Location                   string                 `json:"location"`
	LoginServer                string                 `json:"login_server"`
	Name                       string                 `json:"name"`
	NetworkRuleBypassOption    string                 `json:"network_rule_bypass_option"`
	PublicNetworkAccessEnabled bool                   `json:"public_network_access_enabled"`
	QuarantinePolicyEnabled    bool                   `json:"quarantine_policy_enabled"`
	ResourceGroupName          string                 `json:"resource_group_name"`
	Sku                        string                 `json:"sku"`
	Tags                       map[string]string      `json:"tags"`
	ZoneRedundancyEnabled      bool                   `json:"zone_redundancy_enabled"`
	Encryption                 []EncryptionState      `json:"encryption"`
	NetworkRuleSet             []NetworkRuleSetState  `json:"network_rule_set"`
	RetentionPolicy            []RetentionPolicyState `json:"retention_policy"`
	TrustPolicy                []TrustPolicyState     `json:"trust_policy"`
	Georeplications            []GeoreplicationsState `json:"georeplications"`
	Identity                   []IdentityState        `json:"identity"`
	Timeouts                   *TimeoutsState         `json:"timeouts"`
}
