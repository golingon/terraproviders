// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_eventhub_namespace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_eventhub_namespace.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermEventhubNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aen *Resource) Type() string {
	return "azurerm_eventhub_namespace"
}

// LocalName returns the local name for [Resource].
func (aen *Resource) LocalName() string {
	return aen.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aen *Resource) Configuration() interface{} {
	return aen.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aen *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aen)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aen *Resource) Dependencies() terra.Dependencies {
	return aen.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aen *Resource) LifecycleManagement() *terra.Lifecycle {
	return aen.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aen *Resource) Attributes() azurermEventhubNamespaceAttributes {
	return azurermEventhubNamespaceAttributes{ref: terra.ReferenceResource(aen)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aen *Resource) ImportState(state io.Reader) error {
	aen.state = &azurermEventhubNamespaceState{}
	if err := json.NewDecoder(state).Decode(aen.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aen.Type(), aen.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aen *Resource) State() (*azurermEventhubNamespaceState, bool) {
	return aen.state, aen.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aen *Resource) StateMust() *azurermEventhubNamespaceState {
	if aen.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aen.Type(), aen.LocalName()))
	}
	return aen.state
}

// Args contains the configurations for azurerm_eventhub_namespace.
type Args struct {
	// AutoInflateEnabled: bool, optional
	AutoInflateEnabled terra.BoolValue `hcl:"auto_inflate_enabled,attr"`
	// Capacity: number, optional
	Capacity terra.NumberValue `hcl:"capacity,attr"`
	// DedicatedClusterId: string, optional
	DedicatedClusterId terra.StringValue `hcl:"dedicated_cluster_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthenticationEnabled: bool, optional
	LocalAuthenticationEnabled terra.BoolValue `hcl:"local_authentication_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumThroughputUnits: number, optional
	MaximumThroughputUnits terra.NumberValue `hcl:"maximum_throughput_units,attr"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// NetworkRulesets: min=0
	NetworkRulesets []NetworkRulesets `hcl:"network_rulesets,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermEventhubNamespaceAttributes struct {
	ref terra.Reference
}

// AutoInflateEnabled returns a reference to field auto_inflate_enabled of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) AutoInflateEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aen.ref.Append("auto_inflate_enabled"))
}

// Capacity returns a reference to field capacity of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aen.ref.Append("capacity"))
}

// DedicatedClusterId returns a reference to field dedicated_cluster_id of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DedicatedClusterId() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("dedicated_cluster_id"))
}

// DefaultPrimaryConnectionString returns a reference to field default_primary_connection_string of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultPrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_primary_connection_string"))
}

// DefaultPrimaryConnectionStringAlias returns a reference to field default_primary_connection_string_alias of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultPrimaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_primary_connection_string_alias"))
}

// DefaultPrimaryKey returns a reference to field default_primary_key of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultPrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_primary_key"))
}

// DefaultSecondaryConnectionString returns a reference to field default_secondary_connection_string of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultSecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_secondary_connection_string"))
}

// DefaultSecondaryConnectionStringAlias returns a reference to field default_secondary_connection_string_alias of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultSecondaryConnectionStringAlias() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_secondary_connection_string_alias"))
}

// DefaultSecondaryKey returns a reference to field default_secondary_key of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) DefaultSecondaryKey() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("default_secondary_key"))
}

// Id returns a reference to field id of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("id"))
}

// LocalAuthenticationEnabled returns a reference to field local_authentication_enabled of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) LocalAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aen.ref.Append("local_authentication_enabled"))
}

// Location returns a reference to field location of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("location"))
}

// MaximumThroughputUnits returns a reference to field maximum_throughput_units of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) MaximumThroughputUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(aen.ref.Append("maximum_throughput_units"))
}

// MinimumTlsVersion returns a reference to field minimum_tls_version of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("minimum_tls_version"))
}

// Name returns a reference to field name of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aen.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(aen.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aen.ref.Append("tags"))
}

// ZoneRedundant returns a reference to field zone_redundant of azurerm_eventhub_namespace.
func (aen azurermEventhubNamespaceAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceAsBool(aen.ref.Append("zone_redundant"))
}

func (aen azurermEventhubNamespaceAttributes) NetworkRulesets() terra.ListValue[NetworkRulesetsAttributes] {
	return terra.ReferenceAsList[NetworkRulesetsAttributes](aen.ref.Append("network_rulesets"))
}

func (aen azurermEventhubNamespaceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aen.ref.Append("identity"))
}

func (aen azurermEventhubNamespaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aen.ref.Append("timeouts"))
}

type azurermEventhubNamespaceState struct {
	AutoInflateEnabled                    bool                   `json:"auto_inflate_enabled"`
	Capacity                              float64                `json:"capacity"`
	DedicatedClusterId                    string                 `json:"dedicated_cluster_id"`
	DefaultPrimaryConnectionString        string                 `json:"default_primary_connection_string"`
	DefaultPrimaryConnectionStringAlias   string                 `json:"default_primary_connection_string_alias"`
	DefaultPrimaryKey                     string                 `json:"default_primary_key"`
	DefaultSecondaryConnectionString      string                 `json:"default_secondary_connection_string"`
	DefaultSecondaryConnectionStringAlias string                 `json:"default_secondary_connection_string_alias"`
	DefaultSecondaryKey                   string                 `json:"default_secondary_key"`
	Id                                    string                 `json:"id"`
	LocalAuthenticationEnabled            bool                   `json:"local_authentication_enabled"`
	Location                              string                 `json:"location"`
	MaximumThroughputUnits                float64                `json:"maximum_throughput_units"`
	MinimumTlsVersion                     string                 `json:"minimum_tls_version"`
	Name                                  string                 `json:"name"`
	PublicNetworkAccessEnabled            bool                   `json:"public_network_access_enabled"`
	ResourceGroupName                     string                 `json:"resource_group_name"`
	Sku                                   string                 `json:"sku"`
	Tags                                  map[string]string      `json:"tags"`
	ZoneRedundant                         bool                   `json:"zone_redundant"`
	NetworkRulesets                       []NetworkRulesetsState `json:"network_rulesets"`
	Identity                              []IdentityState        `json:"identity"`
	Timeouts                              *TimeoutsState         `json:"timeouts"`
}
