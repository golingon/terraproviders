// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_datadog_monitor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_datadog_monitor.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDatadogMonitorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adm *Resource) Type() string {
	return "azurerm_datadog_monitor"
}

// LocalName returns the local name for [Resource].
func (adm *Resource) LocalName() string {
	return adm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adm *Resource) Configuration() interface{} {
	return adm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adm *Resource) Dependencies() terra.Dependencies {
	return adm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adm *Resource) LifecycleManagement() *terra.Lifecycle {
	return adm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adm *Resource) Attributes() azurermDatadogMonitorAttributes {
	return azurermDatadogMonitorAttributes{ref: terra.ReferenceResource(adm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adm *Resource) ImportState(state io.Reader) error {
	adm.state = &azurermDatadogMonitorState{}
	if err := json.NewDecoder(state).Decode(adm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adm.Type(), adm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adm *Resource) State() (*azurermDatadogMonitorState, bool) {
	return adm.state, adm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adm *Resource) StateMust() *azurermDatadogMonitorState {
	if adm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adm.Type(), adm.LocalName()))
	}
	return adm.state
}

// Args contains the configurations for azurerm_datadog_monitor.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MonitoringEnabled: bool, optional
	MonitoringEnabled terra.BoolValue `hcl:"monitoring_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DatadogOrganization: required
	DatadogOrganization *DatadogOrganization `hcl:"datadog_organization,block" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// User: required
	User *User `hcl:"user,block" validate:"required"`
}

type azurermDatadogMonitorAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("location"))
}

// MarketplaceSubscriptionStatus returns a reference to field marketplace_subscription_status of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) MarketplaceSubscriptionStatus() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("marketplace_subscription_status"))
}

// MonitoringEnabled returns a reference to field monitoring_enabled of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) MonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adm.ref.Append("monitoring_enabled"))
}

// Name returns a reference to field name of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("sku_name"))
}

// Tags returns a reference to field tags of azurerm_datadog_monitor.
func (adm azurermDatadogMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adm.ref.Append("tags"))
}

func (adm azurermDatadogMonitorAttributes) DatadogOrganization() terra.ListValue[DatadogOrganizationAttributes] {
	return terra.ReferenceAsList[DatadogOrganizationAttributes](adm.ref.Append("datadog_organization"))
}

func (adm azurermDatadogMonitorAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](adm.ref.Append("identity"))
}

func (adm azurermDatadogMonitorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adm.ref.Append("timeouts"))
}

func (adm azurermDatadogMonitorAttributes) User() terra.ListValue[UserAttributes] {
	return terra.ReferenceAsList[UserAttributes](adm.ref.Append("user"))
}

type azurermDatadogMonitorState struct {
	Id                            string                     `json:"id"`
	Location                      string                     `json:"location"`
	MarketplaceSubscriptionStatus string                     `json:"marketplace_subscription_status"`
	MonitoringEnabled             bool                       `json:"monitoring_enabled"`
	Name                          string                     `json:"name"`
	ResourceGroupName             string                     `json:"resource_group_name"`
	SkuName                       string                     `json:"sku_name"`
	Tags                          map[string]string          `json:"tags"`
	DatadogOrganization           []DatadogOrganizationState `json:"datadog_organization"`
	Identity                      []IdentityState            `json:"identity"`
	Timeouts                      *TimeoutsState             `json:"timeouts"`
	User                          []UserState                `json:"user"`
}
