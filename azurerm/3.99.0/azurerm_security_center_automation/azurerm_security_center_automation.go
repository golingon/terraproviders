// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_security_center_automation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_security_center_automation.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSecurityCenterAutomationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asca *Resource) Type() string {
	return "azurerm_security_center_automation"
}

// LocalName returns the local name for [Resource].
func (asca *Resource) LocalName() string {
	return asca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asca *Resource) Configuration() interface{} {
	return asca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asca *Resource) Dependencies() terra.Dependencies {
	return asca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asca *Resource) LifecycleManagement() *terra.Lifecycle {
	return asca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asca *Resource) Attributes() azurermSecurityCenterAutomationAttributes {
	return azurermSecurityCenterAutomationAttributes{ref: terra.ReferenceResource(asca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asca *Resource) ImportState(state io.Reader) error {
	asca.state = &azurermSecurityCenterAutomationState{}
	if err := json.NewDecoder(state).Decode(asca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asca.Type(), asca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asca *Resource) State() (*azurermSecurityCenterAutomationState, bool) {
	return asca.state, asca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asca *Resource) StateMust() *azurermSecurityCenterAutomationState {
	if asca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asca.Type(), asca.LocalName()))
	}
	return asca.state
}

// Args contains the configurations for azurerm_security_center_automation.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: list of string, required
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=1
	Action []Action `hcl:"action,block" validate:"min=1"`
	// Source: min=1
	Source []Source `hcl:"source,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSecurityCenterAutomationAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("description"))
}

// Enabled returns a reference to field enabled of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asca.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("resource_group_name"))
}

// Scopes returns a reference to field scopes of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asca.ref.Append("scopes"))
}

// Tags returns a reference to field tags of azurerm_security_center_automation.
func (asca azurermSecurityCenterAutomationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asca.ref.Append("tags"))
}

func (asca azurermSecurityCenterAutomationAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](asca.ref.Append("action"))
}

func (asca azurermSecurityCenterAutomationAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](asca.ref.Append("source"))
}

func (asca azurermSecurityCenterAutomationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asca.ref.Append("timeouts"))
}

type azurermSecurityCenterAutomationState struct {
	Description       string            `json:"description"`
	Enabled           bool              `json:"enabled"`
	Id                string            `json:"id"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	Scopes            []string          `json:"scopes"`
	Tags              map[string]string `json:"tags"`
	Action            []ActionState     `json:"action"`
	Source            []SourceState     `json:"source"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
