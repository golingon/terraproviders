// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_recovery_services_vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_recovery_services_vault.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRecoveryServicesVaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arsv *Resource) Type() string {
	return "azurerm_recovery_services_vault"
}

// LocalName returns the local name for [Resource].
func (arsv *Resource) LocalName() string {
	return arsv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arsv *Resource) Configuration() interface{} {
	return arsv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arsv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arsv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arsv *Resource) Dependencies() terra.Dependencies {
	return arsv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arsv *Resource) LifecycleManagement() *terra.Lifecycle {
	return arsv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arsv *Resource) Attributes() azurermRecoveryServicesVaultAttributes {
	return azurermRecoveryServicesVaultAttributes{ref: terra.ReferenceResource(arsv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arsv *Resource) ImportState(state io.Reader) error {
	arsv.state = &azurermRecoveryServicesVaultState{}
	if err := json.NewDecoder(state).Decode(arsv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arsv.Type(), arsv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arsv *Resource) State() (*azurermRecoveryServicesVaultState, bool) {
	return arsv.state, arsv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arsv *Resource) StateMust() *azurermRecoveryServicesVaultState {
	if arsv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arsv.Type(), arsv.LocalName()))
	}
	return arsv.state
}

// Args contains the configurations for azurerm_recovery_services_vault.
type Args struct {
	// ClassicVmwareReplicationEnabled: bool, optional
	ClassicVmwareReplicationEnabled terra.BoolValue `hcl:"classic_vmware_replication_enabled,attr"`
	// CrossRegionRestoreEnabled: bool, optional
	CrossRegionRestoreEnabled terra.BoolValue `hcl:"cross_region_restore_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Immutability: string, optional
	Immutability terra.StringValue `hcl:"immutability,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// SoftDeleteEnabled: bool, optional
	SoftDeleteEnabled terra.BoolValue `hcl:"soft_delete_enabled,attr"`
	// StorageModeType: string, optional
	StorageModeType terra.StringValue `hcl:"storage_mode_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Monitoring: optional
	Monitoring *Monitoring `hcl:"monitoring,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRecoveryServicesVaultAttributes struct {
	ref terra.Reference
}

// ClassicVmwareReplicationEnabled returns a reference to field classic_vmware_replication_enabled of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) ClassicVmwareReplicationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arsv.ref.Append("classic_vmware_replication_enabled"))
}

// CrossRegionRestoreEnabled returns a reference to field cross_region_restore_enabled of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) CrossRegionRestoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arsv.ref.Append("cross_region_restore_enabled"))
}

// Id returns a reference to field id of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("id"))
}

// Immutability returns a reference to field immutability of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Immutability() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("immutability"))
}

// Location returns a reference to field location of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arsv.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("sku"))
}

// SoftDeleteEnabled returns a reference to field soft_delete_enabled of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) SoftDeleteEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arsv.ref.Append("soft_delete_enabled"))
}

// StorageModeType returns a reference to field storage_mode_type of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) StorageModeType() terra.StringValue {
	return terra.ReferenceAsString(arsv.ref.Append("storage_mode_type"))
}

// Tags returns a reference to field tags of azurerm_recovery_services_vault.
func (arsv azurermRecoveryServicesVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arsv.ref.Append("tags"))
}

func (arsv azurermRecoveryServicesVaultAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](arsv.ref.Append("encryption"))
}

func (arsv azurermRecoveryServicesVaultAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](arsv.ref.Append("identity"))
}

func (arsv azurermRecoveryServicesVaultAttributes) Monitoring() terra.ListValue[MonitoringAttributes] {
	return terra.ReferenceAsList[MonitoringAttributes](arsv.ref.Append("monitoring"))
}

func (arsv azurermRecoveryServicesVaultAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arsv.ref.Append("timeouts"))
}

type azurermRecoveryServicesVaultState struct {
	ClassicVmwareReplicationEnabled bool              `json:"classic_vmware_replication_enabled"`
	CrossRegionRestoreEnabled       bool              `json:"cross_region_restore_enabled"`
	Id                              string            `json:"id"`
	Immutability                    string            `json:"immutability"`
	Location                        string            `json:"location"`
	Name                            string            `json:"name"`
	PublicNetworkAccessEnabled      bool              `json:"public_network_access_enabled"`
	ResourceGroupName               string            `json:"resource_group_name"`
	Sku                             string            `json:"sku"`
	SoftDeleteEnabled               bool              `json:"soft_delete_enabled"`
	StorageModeType                 string            `json:"storage_mode_type"`
	Tags                            map[string]string `json:"tags"`
	Encryption                      []EncryptionState `json:"encryption"`
	Identity                        []IdentityState   `json:"identity"`
	Monitoring                      []MonitoringState `json:"monitoring"`
	Timeouts                        *TimeoutsState    `json:"timeouts"`
}
