// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_frontdoor_firewall_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomRule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// RateLimitDurationInMinutes: number, optional
	RateLimitDurationInMinutes terra.NumberValue `hcl:"rate_limit_duration_in_minutes,attr"`
	// RateLimitThreshold: number, optional
	RateLimitThreshold terra.NumberValue `hcl:"rate_limit_threshold,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// CustomRuleMatchCondition: min=0,max=10
	MatchCondition []CustomRuleMatchCondition `hcl:"match_condition,block" validate:"min=0,max=10"`
}

type CustomRuleMatchCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// NegationCondition: bool, optional
	NegationCondition terra.BoolValue `hcl:"negation_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// Transforms: list of string, optional
	Transforms terra.ListValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ManagedRule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// ManagedRuleExclusion: min=0,max=100
	Exclusion []ManagedRuleExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
	// ManagedRuleOverride: min=0,max=100
	Override []ManagedRuleOverride `hcl:"override,block" validate:"min=0,max=100"`
}

type ManagedRuleExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type ManagedRuleOverride struct {
	// RuleGroupName: string, required
	RuleGroupName terra.StringValue `hcl:"rule_group_name,attr" validate:"required"`
	// ManagedRuleOverrideExclusion: min=0,max=100
	Exclusion []ManagedRuleOverrideExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
	// ManagedRuleOverrideRule: min=0,max=1000
	Rule []ManagedRuleOverrideRule `hcl:"rule,block" validate:"min=0,max=1000"`
}

type ManagedRuleOverrideExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type ManagedRuleOverrideRule struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RuleId: string, required
	RuleId terra.StringValue `hcl:"rule_id,attr" validate:"required"`
	// ManagedRuleOverrideRuleExclusion: min=0,max=100
	Exclusion []ManagedRuleOverrideRuleExclusion `hcl:"exclusion,block" validate:"min=0,max=100"`
}

type ManagedRuleOverrideRuleExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomRuleAttributes struct {
	ref terra.Reference
}

func (cr CustomRuleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CustomRuleAttributes) InternalWithRef(ref terra.Reference) CustomRuleAttributes {
	return CustomRuleAttributes{ref: ref}
}

func (cr CustomRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CustomRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("action"))
}

func (cr CustomRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cr.ref.Append("enabled"))
}

func (cr CustomRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("name"))
}

func (cr CustomRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("priority"))
}

func (cr CustomRuleAttributes) RateLimitDurationInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("rate_limit_duration_in_minutes"))
}

func (cr CustomRuleAttributes) RateLimitThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("rate_limit_threshold"))
}

func (cr CustomRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("type"))
}

func (cr CustomRuleAttributes) MatchCondition() terra.ListValue[CustomRuleMatchConditionAttributes] {
	return terra.ReferenceAsList[CustomRuleMatchConditionAttributes](cr.ref.Append("match_condition"))
}

type CustomRuleMatchConditionAttributes struct {
	ref terra.Reference
}

func (mc CustomRuleMatchConditionAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc CustomRuleMatchConditionAttributes) InternalWithRef(ref terra.Reference) CustomRuleMatchConditionAttributes {
	return CustomRuleMatchConditionAttributes{ref: ref}
}

func (mc CustomRuleMatchConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc CustomRuleMatchConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("match_values"))
}

func (mc CustomRuleMatchConditionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("match_variable"))
}

func (mc CustomRuleMatchConditionAttributes) NegationCondition() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("negation_condition"))
}

func (mc CustomRuleMatchConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("operator"))
}

func (mc CustomRuleMatchConditionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("selector"))
}

func (mc CustomRuleMatchConditionAttributes) Transforms() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("transforms"))
}

type ManagedRuleAttributes struct {
	ref terra.Reference
}

func (mr ManagedRuleAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr ManagedRuleAttributes) InternalWithRef(ref terra.Reference) ManagedRuleAttributes {
	return ManagedRuleAttributes{ref: ref}
}

func (mr ManagedRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr ManagedRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("action"))
}

func (mr ManagedRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

func (mr ManagedRuleAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("version"))
}

func (mr ManagedRuleAttributes) Exclusion() terra.ListValue[ManagedRuleExclusionAttributes] {
	return terra.ReferenceAsList[ManagedRuleExclusionAttributes](mr.ref.Append("exclusion"))
}

func (mr ManagedRuleAttributes) Override() terra.ListValue[ManagedRuleOverrideAttributes] {
	return terra.ReferenceAsList[ManagedRuleOverrideAttributes](mr.ref.Append("override"))
}

type ManagedRuleExclusionAttributes struct {
	ref terra.Reference
}

func (e ManagedRuleExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ManagedRuleExclusionAttributes) InternalWithRef(ref terra.Reference) ManagedRuleExclusionAttributes {
	return ManagedRuleExclusionAttributes{ref: ref}
}

func (e ManagedRuleExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ManagedRuleExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e ManagedRuleExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("operator"))
}

func (e ManagedRuleExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

type ManagedRuleOverrideAttributes struct {
	ref terra.Reference
}

func (o ManagedRuleOverrideAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o ManagedRuleOverrideAttributes) InternalWithRef(ref terra.Reference) ManagedRuleOverrideAttributes {
	return ManagedRuleOverrideAttributes{ref: ref}
}

func (o ManagedRuleOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o ManagedRuleOverrideAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("rule_group_name"))
}

func (o ManagedRuleOverrideAttributes) Exclusion() terra.ListValue[ManagedRuleOverrideExclusionAttributes] {
	return terra.ReferenceAsList[ManagedRuleOverrideExclusionAttributes](o.ref.Append("exclusion"))
}

func (o ManagedRuleOverrideAttributes) Rule() terra.ListValue[ManagedRuleOverrideRuleAttributes] {
	return terra.ReferenceAsList[ManagedRuleOverrideRuleAttributes](o.ref.Append("rule"))
}

type ManagedRuleOverrideExclusionAttributes struct {
	ref terra.Reference
}

func (e ManagedRuleOverrideExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ManagedRuleOverrideExclusionAttributes) InternalWithRef(ref terra.Reference) ManagedRuleOverrideExclusionAttributes {
	return ManagedRuleOverrideExclusionAttributes{ref: ref}
}

func (e ManagedRuleOverrideExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ManagedRuleOverrideExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e ManagedRuleOverrideExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("operator"))
}

func (e ManagedRuleOverrideExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

type ManagedRuleOverrideRuleAttributes struct {
	ref terra.Reference
}

func (r ManagedRuleOverrideRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ManagedRuleOverrideRuleAttributes) InternalWithRef(ref terra.Reference) ManagedRuleOverrideRuleAttributes {
	return ManagedRuleOverrideRuleAttributes{ref: ref}
}

func (r ManagedRuleOverrideRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ManagedRuleOverrideRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("action"))
}

func (r ManagedRuleOverrideRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("enabled"))
}

func (r ManagedRuleOverrideRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rule_id"))
}

func (r ManagedRuleOverrideRuleAttributes) Exclusion() terra.ListValue[ManagedRuleOverrideRuleExclusionAttributes] {
	return terra.ReferenceAsList[ManagedRuleOverrideRuleExclusionAttributes](r.ref.Append("exclusion"))
}

type ManagedRuleOverrideRuleExclusionAttributes struct {
	ref terra.Reference
}

func (e ManagedRuleOverrideRuleExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ManagedRuleOverrideRuleExclusionAttributes) InternalWithRef(ref terra.Reference) ManagedRuleOverrideRuleExclusionAttributes {
	return ManagedRuleOverrideRuleExclusionAttributes{ref: ref}
}

func (e ManagedRuleOverrideRuleExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ManagedRuleOverrideRuleExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e ManagedRuleOverrideRuleExclusionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("operator"))
}

func (e ManagedRuleOverrideRuleExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomRuleState struct {
	Action                     string                          `json:"action"`
	Enabled                    bool                            `json:"enabled"`
	Name                       string                          `json:"name"`
	Priority                   float64                         `json:"priority"`
	RateLimitDurationInMinutes float64                         `json:"rate_limit_duration_in_minutes"`
	RateLimitThreshold         float64                         `json:"rate_limit_threshold"`
	Type                       string                          `json:"type"`
	MatchCondition             []CustomRuleMatchConditionState `json:"match_condition"`
}

type CustomRuleMatchConditionState struct {
	MatchValues       []string `json:"match_values"`
	MatchVariable     string   `json:"match_variable"`
	NegationCondition bool     `json:"negation_condition"`
	Operator          string   `json:"operator"`
	Selector          string   `json:"selector"`
	Transforms        []string `json:"transforms"`
}

type ManagedRuleState struct {
	Action    string                      `json:"action"`
	Type      string                      `json:"type"`
	Version   string                      `json:"version"`
	Exclusion []ManagedRuleExclusionState `json:"exclusion"`
	Override  []ManagedRuleOverrideState  `json:"override"`
}

type ManagedRuleExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type ManagedRuleOverrideState struct {
	RuleGroupName string                              `json:"rule_group_name"`
	Exclusion     []ManagedRuleOverrideExclusionState `json:"exclusion"`
	Rule          []ManagedRuleOverrideRuleState      `json:"rule"`
}

type ManagedRuleOverrideExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type ManagedRuleOverrideRuleState struct {
	Action    string                                  `json:"action"`
	Enabled   bool                                    `json:"enabled"`
	RuleId    string                                  `json:"rule_id"`
	Exclusion []ManagedRuleOverrideRuleExclusionState `json:"exclusion"`
}

type ManagedRuleOverrideRuleExclusionState struct {
	MatchVariable string `json:"match_variable"`
	Operator      string `json:"operator"`
	Selector      string `json:"selector"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
