// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_eventhub_namespace_customer_managed_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_eventhub_namespace_customer_managed_key.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermEventhubNamespaceCustomerManagedKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aencmk *Resource) Type() string {
	return "azurerm_eventhub_namespace_customer_managed_key"
}

// LocalName returns the local name for [Resource].
func (aencmk *Resource) LocalName() string {
	return aencmk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aencmk *Resource) Configuration() interface{} {
	return aencmk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aencmk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aencmk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aencmk *Resource) Dependencies() terra.Dependencies {
	return aencmk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aencmk *Resource) LifecycleManagement() *terra.Lifecycle {
	return aencmk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aencmk *Resource) Attributes() azurermEventhubNamespaceCustomerManagedKeyAttributes {
	return azurermEventhubNamespaceCustomerManagedKeyAttributes{ref: terra.ReferenceResource(aencmk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aencmk *Resource) ImportState(state io.Reader) error {
	aencmk.state = &azurermEventhubNamespaceCustomerManagedKeyState{}
	if err := json.NewDecoder(state).Decode(aencmk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aencmk.Type(), aencmk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aencmk *Resource) State() (*azurermEventhubNamespaceCustomerManagedKeyState, bool) {
	return aencmk.state, aencmk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aencmk *Resource) StateMust() *azurermEventhubNamespaceCustomerManagedKeyState {
	if aencmk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aencmk.Type(), aencmk.LocalName()))
	}
	return aencmk.state
}

// Args contains the configurations for azurerm_eventhub_namespace_customer_managed_key.
type Args struct {
	// EventhubNamespaceId: string, required
	EventhubNamespaceId terra.StringValue `hcl:"eventhub_namespace_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureEncryptionEnabled: bool, optional
	InfrastructureEncryptionEnabled terra.BoolValue `hcl:"infrastructure_encryption_enabled,attr"`
	// KeyVaultKeyIds: set of string, required
	KeyVaultKeyIds terra.SetValue[terra.StringValue] `hcl:"key_vault_key_ids,attr" validate:"required"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermEventhubNamespaceCustomerManagedKeyAttributes struct {
	ref terra.Reference
}

// EventhubNamespaceId returns a reference to field eventhub_namespace_id of azurerm_eventhub_namespace_customer_managed_key.
func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) EventhubNamespaceId() terra.StringValue {
	return terra.ReferenceAsString(aencmk.ref.Append("eventhub_namespace_id"))
}

// Id returns a reference to field id of azurerm_eventhub_namespace_customer_managed_key.
func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aencmk.ref.Append("id"))
}

// InfrastructureEncryptionEnabled returns a reference to field infrastructure_encryption_enabled of azurerm_eventhub_namespace_customer_managed_key.
func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) InfrastructureEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aencmk.ref.Append("infrastructure_encryption_enabled"))
}

// KeyVaultKeyIds returns a reference to field key_vault_key_ids of azurerm_eventhub_namespace_customer_managed_key.
func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) KeyVaultKeyIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aencmk.ref.Append("key_vault_key_ids"))
}

// UserAssignedIdentityId returns a reference to field user_assigned_identity_id of azurerm_eventhub_namespace_customer_managed_key.
func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(aencmk.ref.Append("user_assigned_identity_id"))
}

func (aencmk azurermEventhubNamespaceCustomerManagedKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aencmk.ref.Append("timeouts"))
}

type azurermEventhubNamespaceCustomerManagedKeyState struct {
	EventhubNamespaceId             string         `json:"eventhub_namespace_id"`
	Id                              string         `json:"id"`
	InfrastructureEncryptionEnabled bool           `json:"infrastructure_encryption_enabled"`
	KeyVaultKeyIds                  []string       `json:"key_vault_key_ids"`
	UserAssignedIdentityId          string         `json:"user_assigned_identity_id"`
	Timeouts                        *TimeoutsState `json:"timeouts"`
}
