// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_content_key_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_content_key_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaContentKeyPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amckp *Resource) Type() string {
	return "azurerm_media_content_key_policy"
}

// LocalName returns the local name for [Resource].
func (amckp *Resource) LocalName() string {
	return amckp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amckp *Resource) Configuration() interface{} {
	return amckp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amckp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amckp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amckp *Resource) Dependencies() terra.Dependencies {
	return amckp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amckp *Resource) LifecycleManagement() *terra.Lifecycle {
	return amckp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amckp *Resource) Attributes() azurermMediaContentKeyPolicyAttributes {
	return azurermMediaContentKeyPolicyAttributes{ref: terra.ReferenceResource(amckp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amckp *Resource) ImportState(state io.Reader) error {
	amckp.state = &azurermMediaContentKeyPolicyState{}
	if err := json.NewDecoder(state).Decode(amckp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amckp.Type(), amckp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amckp *Resource) State() (*azurermMediaContentKeyPolicyState, bool) {
	return amckp.state, amckp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amckp *Resource) StateMust() *azurermMediaContentKeyPolicyState {
	if amckp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amckp.Type(), amckp.LocalName()))
	}
	return amckp.state
}

// Args contains the configurations for azurerm_media_content_key_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// PolicyOption: min=1
	PolicyOption []PolicyOption `hcl:"policy_option,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaContentKeyPolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_media_content_key_policy.
func (amckp azurermMediaContentKeyPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amckp.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_media_content_key_policy.
func (amckp azurermMediaContentKeyPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amckp.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_content_key_policy.
func (amckp azurermMediaContentKeyPolicyAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amckp.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_content_key_policy.
func (amckp azurermMediaContentKeyPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amckp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_content_key_policy.
func (amckp azurermMediaContentKeyPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amckp.ref.Append("resource_group_name"))
}

func (amckp azurermMediaContentKeyPolicyAttributes) PolicyOption() terra.SetValue[PolicyOptionAttributes] {
	return terra.ReferenceAsSet[PolicyOptionAttributes](amckp.ref.Append("policy_option"))
}

func (amckp azurermMediaContentKeyPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amckp.ref.Append("timeouts"))
}

type azurermMediaContentKeyPolicyState struct {
	Description              string              `json:"description"`
	Id                       string              `json:"id"`
	MediaServicesAccountName string              `json:"media_services_account_name"`
	Name                     string              `json:"name"`
	ResourceGroupName        string              `json:"resource_group_name"`
	PolicyOption             []PolicyOptionState `json:"policy_option"`
	Timeouts                 *TimeoutsState      `json:"timeouts"`
}
