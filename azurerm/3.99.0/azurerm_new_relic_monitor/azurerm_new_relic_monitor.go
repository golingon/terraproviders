// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_new_relic_monitor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_new_relic_monitor.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNewRelicMonitorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anrm *Resource) Type() string {
	return "azurerm_new_relic_monitor"
}

// LocalName returns the local name for [Resource].
func (anrm *Resource) LocalName() string {
	return anrm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anrm *Resource) Configuration() interface{} {
	return anrm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anrm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anrm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anrm *Resource) Dependencies() terra.Dependencies {
	return anrm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anrm *Resource) LifecycleManagement() *terra.Lifecycle {
	return anrm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anrm *Resource) Attributes() azurermNewRelicMonitorAttributes {
	return azurermNewRelicMonitorAttributes{ref: terra.ReferenceResource(anrm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anrm *Resource) ImportState(state io.Reader) error {
	anrm.state = &azurermNewRelicMonitorState{}
	if err := json.NewDecoder(state).Decode(anrm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anrm.Type(), anrm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anrm *Resource) State() (*azurermNewRelicMonitorState, bool) {
	return anrm.state, anrm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anrm *Resource) StateMust() *azurermNewRelicMonitorState {
	if anrm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anrm.Type(), anrm.LocalName()))
	}
	return anrm.state
}

// Args contains the configurations for azurerm_new_relic_monitor.
type Args struct {
	// AccountCreationSource: string, optional
	AccountCreationSource terra.StringValue `hcl:"account_creation_source,attr"`
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IngestionKey: string, optional
	IngestionKey terra.StringValue `hcl:"ingestion_key,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgCreationSource: string, optional
	OrgCreationSource terra.StringValue `hcl:"org_creation_source,attr"`
	// OrganizationId: string, optional
	OrganizationId terra.StringValue `hcl:"organization_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// UserId: string, optional
	UserId terra.StringValue `hcl:"user_id,attr"`
	// Plan: required
	Plan *Plan `hcl:"plan,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// User: required
	User *User `hcl:"user,block" validate:"required"`
}

type azurermNewRelicMonitorAttributes struct {
	ref terra.Reference
}

// AccountCreationSource returns a reference to field account_creation_source of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) AccountCreationSource() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("account_creation_source"))
}

// AccountId returns a reference to field account_id of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("account_id"))
}

// Id returns a reference to field id of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("id"))
}

// IngestionKey returns a reference to field ingestion_key of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) IngestionKey() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("ingestion_key"))
}

// Location returns a reference to field location of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("name"))
}

// OrgCreationSource returns a reference to field org_creation_source of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) OrgCreationSource() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("org_creation_source"))
}

// OrganizationId returns a reference to field organization_id of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("organization_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("resource_group_name"))
}

// UserId returns a reference to field user_id of azurerm_new_relic_monitor.
func (anrm azurermNewRelicMonitorAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(anrm.ref.Append("user_id"))
}

func (anrm azurermNewRelicMonitorAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](anrm.ref.Append("plan"))
}

func (anrm azurermNewRelicMonitorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anrm.ref.Append("timeouts"))
}

func (anrm azurermNewRelicMonitorAttributes) User() terra.ListValue[UserAttributes] {
	return terra.ReferenceAsList[UserAttributes](anrm.ref.Append("user"))
}

type azurermNewRelicMonitorState struct {
	AccountCreationSource string         `json:"account_creation_source"`
	AccountId             string         `json:"account_id"`
	Id                    string         `json:"id"`
	IngestionKey          string         `json:"ingestion_key"`
	Location              string         `json:"location"`
	Name                  string         `json:"name"`
	OrgCreationSource     string         `json:"org_creation_source"`
	OrganizationId        string         `json:"organization_id"`
	ResourceGroupName     string         `json:"resource_group_name"`
	UserId                string         `json:"user_id"`
	Plan                  []PlanState    `json:"plan"`
	Timeouts              *TimeoutsState `json:"timeouts"`
	User                  []UserState    `json:"user"`
}
