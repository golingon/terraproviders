// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_subscription_cost_management_view

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_subscription_cost_management_view.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSubscriptionCostManagementViewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascmv *Resource) Type() string {
	return "azurerm_subscription_cost_management_view"
}

// LocalName returns the local name for [Resource].
func (ascmv *Resource) LocalName() string {
	return ascmv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascmv *Resource) Configuration() interface{} {
	return ascmv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascmv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascmv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascmv *Resource) Dependencies() terra.Dependencies {
	return ascmv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascmv *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascmv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascmv *Resource) Attributes() azurermSubscriptionCostManagementViewAttributes {
	return azurermSubscriptionCostManagementViewAttributes{ref: terra.ReferenceResource(ascmv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascmv *Resource) ImportState(state io.Reader) error {
	ascmv.state = &azurermSubscriptionCostManagementViewState{}
	if err := json.NewDecoder(state).Decode(ascmv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascmv.Type(), ascmv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascmv *Resource) State() (*azurermSubscriptionCostManagementViewState, bool) {
	return ascmv.state, ascmv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascmv *Resource) StateMust() *azurermSubscriptionCostManagementViewState {
	if ascmv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascmv.Type(), ascmv.LocalName()))
	}
	return ascmv.state
}

// Args contains the configurations for azurerm_subscription_cost_management_view.
type Args struct {
	// Accumulated: bool, required
	Accumulated terra.BoolValue `hcl:"accumulated,attr" validate:"required"`
	// ChartType: string, required
	ChartType terra.StringValue `hcl:"chart_type,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReportType: string, required
	ReportType terra.StringValue `hcl:"report_type,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeframe: string, required
	Timeframe terra.StringValue `hcl:"timeframe,attr" validate:"required"`
	// Dataset: required
	Dataset *Dataset `hcl:"dataset,block" validate:"required"`
	// Kpi: min=0
	Kpi []Kpi `hcl:"kpi,block" validate:"min=0"`
	// Pivot: min=0
	Pivot []Pivot `hcl:"pivot,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSubscriptionCostManagementViewAttributes struct {
	ref terra.Reference
}

// Accumulated returns a reference to field accumulated of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) Accumulated() terra.BoolValue {
	return terra.ReferenceAsBool(ascmv.ref.Append("accumulated"))
}

// ChartType returns a reference to field chart_type of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) ChartType() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("chart_type"))
}

// DisplayName returns a reference to field display_name of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("name"))
}

// ReportType returns a reference to field report_type of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) ReportType() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("report_type"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("subscription_id"))
}

// Timeframe returns a reference to field timeframe of azurerm_subscription_cost_management_view.
func (ascmv azurermSubscriptionCostManagementViewAttributes) Timeframe() terra.StringValue {
	return terra.ReferenceAsString(ascmv.ref.Append("timeframe"))
}

func (ascmv azurermSubscriptionCostManagementViewAttributes) Dataset() terra.ListValue[DatasetAttributes] {
	return terra.ReferenceAsList[DatasetAttributes](ascmv.ref.Append("dataset"))
}

func (ascmv azurermSubscriptionCostManagementViewAttributes) Kpi() terra.ListValue[KpiAttributes] {
	return terra.ReferenceAsList[KpiAttributes](ascmv.ref.Append("kpi"))
}

func (ascmv azurermSubscriptionCostManagementViewAttributes) Pivot() terra.ListValue[PivotAttributes] {
	return terra.ReferenceAsList[PivotAttributes](ascmv.ref.Append("pivot"))
}

func (ascmv azurermSubscriptionCostManagementViewAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascmv.ref.Append("timeouts"))
}

type azurermSubscriptionCostManagementViewState struct {
	Accumulated    bool           `json:"accumulated"`
	ChartType      string         `json:"chart_type"`
	DisplayName    string         `json:"display_name"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	ReportType     string         `json:"report_type"`
	SubscriptionId string         `json:"subscription_id"`
	Timeframe      string         `json:"timeframe"`
	Dataset        []DatasetState `json:"dataset"`
	Kpi            []KpiState     `json:"kpi"`
	Pivot          []PivotState   `json:"pivot"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
