// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kubernetes_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kubernetes_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKubernetesClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akc *Resource) Type() string {
	return "azurerm_kubernetes_cluster"
}

// LocalName returns the local name for [Resource].
func (akc *Resource) LocalName() string {
	return akc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akc *Resource) Configuration() interface{} {
	return akc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akc *Resource) Dependencies() terra.Dependencies {
	return akc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akc *Resource) Attributes() azurermKubernetesClusterAttributes {
	return azurermKubernetesClusterAttributes{ref: terra.ReferenceResource(akc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akc *Resource) ImportState(state io.Reader) error {
	akc.state = &azurermKubernetesClusterState{}
	if err := json.NewDecoder(state).Decode(akc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akc.Type(), akc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akc *Resource) State() (*azurermKubernetesClusterState, bool) {
	return akc.state, akc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akc *Resource) StateMust() *azurermKubernetesClusterState {
	if akc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akc.Type(), akc.LocalName()))
	}
	return akc.state
}

// Args contains the configurations for azurerm_kubernetes_cluster.
type Args struct {
	// ApiServerAuthorizedIpRanges: set of string, optional
	ApiServerAuthorizedIpRanges terra.SetValue[terra.StringValue] `hcl:"api_server_authorized_ip_ranges,attr"`
	// AutomaticChannelUpgrade: string, optional
	AutomaticChannelUpgrade terra.StringValue `hcl:"automatic_channel_upgrade,attr"`
	// AzurePolicyEnabled: bool, optional
	AzurePolicyEnabled terra.BoolValue `hcl:"azure_policy_enabled,attr"`
	// CustomCaTrustCertificatesBase64: list of string, optional
	CustomCaTrustCertificatesBase64 terra.ListValue[terra.StringValue] `hcl:"custom_ca_trust_certificates_base64,attr"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DnsPrefix: string, optional
	DnsPrefix terra.StringValue `hcl:"dns_prefix,attr"`
	// DnsPrefixPrivateCluster: string, optional
	DnsPrefixPrivateCluster terra.StringValue `hcl:"dns_prefix_private_cluster,attr"`
	// EdgeZone: string, optional
	EdgeZone terra.StringValue `hcl:"edge_zone,attr"`
	// EnablePodSecurityPolicy: bool, optional
	EnablePodSecurityPolicy terra.BoolValue `hcl:"enable_pod_security_policy,attr"`
	// HttpApplicationRoutingEnabled: bool, optional
	HttpApplicationRoutingEnabled terra.BoolValue `hcl:"http_application_routing_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageCleanerEnabled: bool, optional
	ImageCleanerEnabled terra.BoolValue `hcl:"image_cleaner_enabled,attr"`
	// ImageCleanerIntervalHours: number, optional
	ImageCleanerIntervalHours terra.NumberValue `hcl:"image_cleaner_interval_hours,attr"`
	// KubernetesVersion: string, optional
	KubernetesVersion terra.StringValue `hcl:"kubernetes_version,attr"`
	// LocalAccountDisabled: bool, optional
	LocalAccountDisabled terra.BoolValue `hcl:"local_account_disabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeOsChannelUpgrade: string, optional
	NodeOsChannelUpgrade terra.StringValue `hcl:"node_os_channel_upgrade,attr"`
	// NodeResourceGroup: string, optional
	NodeResourceGroup terra.StringValue `hcl:"node_resource_group,attr"`
	// OidcIssuerEnabled: bool, optional
	OidcIssuerEnabled terra.BoolValue `hcl:"oidc_issuer_enabled,attr"`
	// OpenServiceMeshEnabled: bool, optional
	OpenServiceMeshEnabled terra.BoolValue `hcl:"open_service_mesh_enabled,attr"`
	// PrivateClusterEnabled: bool, optional
	PrivateClusterEnabled terra.BoolValue `hcl:"private_cluster_enabled,attr"`
	// PrivateClusterPublicFqdnEnabled: bool, optional
	PrivateClusterPublicFqdnEnabled terra.BoolValue `hcl:"private_cluster_public_fqdn_enabled,attr"`
	// PrivateDnsZoneId: string, optional
	PrivateDnsZoneId terra.StringValue `hcl:"private_dns_zone_id,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RoleBasedAccessControlEnabled: bool, optional
	RoleBasedAccessControlEnabled terra.BoolValue `hcl:"role_based_access_control_enabled,attr"`
	// RunCommandEnabled: bool, optional
	RunCommandEnabled terra.BoolValue `hcl:"run_command_enabled,attr"`
	// SkuTier: string, optional
	SkuTier terra.StringValue `hcl:"sku_tier,attr"`
	// SupportPlan: string, optional
	SupportPlan terra.StringValue `hcl:"support_plan,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkloadIdentityEnabled: bool, optional
	WorkloadIdentityEnabled terra.BoolValue `hcl:"workload_identity_enabled,attr"`
	// AciConnectorLinux: optional
	AciConnectorLinux *AciConnectorLinux `hcl:"aci_connector_linux,block"`
	// ApiServerAccessProfile: optional
	ApiServerAccessProfile *ApiServerAccessProfile `hcl:"api_server_access_profile,block"`
	// AutoScalerProfile: optional
	AutoScalerProfile *AutoScalerProfile `hcl:"auto_scaler_profile,block"`
	// AzureActiveDirectoryRoleBasedAccessControl: optional
	AzureActiveDirectoryRoleBasedAccessControl *AzureActiveDirectoryRoleBasedAccessControl `hcl:"azure_active_directory_role_based_access_control,block"`
	// ConfidentialComputing: optional
	ConfidentialComputing *ConfidentialComputing `hcl:"confidential_computing,block"`
	// DefaultNodePool: required
	DefaultNodePool *DefaultNodePool `hcl:"default_node_pool,block" validate:"required"`
	// HttpProxyConfig: optional
	HttpProxyConfig *HttpProxyConfig `hcl:"http_proxy_config,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// IngressApplicationGateway: optional
	IngressApplicationGateway *IngressApplicationGateway `hcl:"ingress_application_gateway,block"`
	// KeyManagementService: optional
	KeyManagementService *KeyManagementService `hcl:"key_management_service,block"`
	// KeyVaultSecretsProvider: optional
	KeyVaultSecretsProvider *KeyVaultSecretsProvider `hcl:"key_vault_secrets_provider,block"`
	// KubeletIdentity: optional
	KubeletIdentity *KubeletIdentity `hcl:"kubelet_identity,block"`
	// LinuxProfile: optional
	LinuxProfile *LinuxProfile `hcl:"linux_profile,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block"`
	// MaintenanceWindowAutoUpgrade: optional
	MaintenanceWindowAutoUpgrade *MaintenanceWindowAutoUpgrade `hcl:"maintenance_window_auto_upgrade,block"`
	// MaintenanceWindowNodeOs: optional
	MaintenanceWindowNodeOs *MaintenanceWindowNodeOs `hcl:"maintenance_window_node_os,block"`
	// MicrosoftDefender: optional
	MicrosoftDefender *MicrosoftDefender `hcl:"microsoft_defender,block"`
	// MonitorMetrics: optional
	MonitorMetrics *MonitorMetrics `hcl:"monitor_metrics,block"`
	// NetworkProfile: optional
	NetworkProfile *NetworkProfile `hcl:"network_profile,block"`
	// OmsAgent: optional
	OmsAgent *OmsAgent `hcl:"oms_agent,block"`
	// ServiceMeshProfile: optional
	ServiceMeshProfile *ServiceMeshProfile `hcl:"service_mesh_profile,block"`
	// ServicePrincipal: optional
	ServicePrincipal *ServicePrincipal `hcl:"service_principal,block"`
	// StorageProfile: optional
	StorageProfile *StorageProfile `hcl:"storage_profile,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WebAppRouting: optional
	WebAppRouting *WebAppRouting `hcl:"web_app_routing,block"`
	// WindowsProfile: optional
	WindowsProfile *WindowsProfile `hcl:"windows_profile,block"`
	// WorkloadAutoscalerProfile: optional
	WorkloadAutoscalerProfile *WorkloadAutoscalerProfile `hcl:"workload_autoscaler_profile,block"`
}

type azurermKubernetesClusterAttributes struct {
	ref terra.Reference
}

// ApiServerAuthorizedIpRanges returns a reference to field api_server_authorized_ip_ranges of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) ApiServerAuthorizedIpRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](akc.ref.Append("api_server_authorized_ip_ranges"))
}

// AutomaticChannelUpgrade returns a reference to field automatic_channel_upgrade of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) AutomaticChannelUpgrade() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("automatic_channel_upgrade"))
}

// AzurePolicyEnabled returns a reference to field azure_policy_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) AzurePolicyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("azure_policy_enabled"))
}

// CurrentKubernetesVersion returns a reference to field current_kubernetes_version of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) CurrentKubernetesVersion() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("current_kubernetes_version"))
}

// CustomCaTrustCertificatesBase64 returns a reference to field custom_ca_trust_certificates_base64 of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) CustomCaTrustCertificatesBase64() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akc.ref.Append("custom_ca_trust_certificates_base64"))
}

// DiskEncryptionSetId returns a reference to field disk_encryption_set_id of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("disk_encryption_set_id"))
}

// DnsPrefix returns a reference to field dns_prefix of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) DnsPrefix() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("dns_prefix"))
}

// DnsPrefixPrivateCluster returns a reference to field dns_prefix_private_cluster of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) DnsPrefixPrivateCluster() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("dns_prefix_private_cluster"))
}

// EdgeZone returns a reference to field edge_zone of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) EdgeZone() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("edge_zone"))
}

// EnablePodSecurityPolicy returns a reference to field enable_pod_security_policy of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) EnablePodSecurityPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("enable_pod_security_policy"))
}

// Fqdn returns a reference to field fqdn of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("fqdn"))
}

// HttpApplicationRoutingEnabled returns a reference to field http_application_routing_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) HttpApplicationRoutingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("http_application_routing_enabled"))
}

// HttpApplicationRoutingZoneName returns a reference to field http_application_routing_zone_name of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) HttpApplicationRoutingZoneName() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("http_application_routing_zone_name"))
}

// Id returns a reference to field id of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("id"))
}

// ImageCleanerEnabled returns a reference to field image_cleaner_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) ImageCleanerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("image_cleaner_enabled"))
}

// ImageCleanerIntervalHours returns a reference to field image_cleaner_interval_hours of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) ImageCleanerIntervalHours() terra.NumberValue {
	return terra.ReferenceAsNumber(akc.ref.Append("image_cleaner_interval_hours"))
}

// KubeAdminConfigRaw returns a reference to field kube_admin_config_raw of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) KubeAdminConfigRaw() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("kube_admin_config_raw"))
}

// KubeConfigRaw returns a reference to field kube_config_raw of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) KubeConfigRaw() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("kube_config_raw"))
}

// KubernetesVersion returns a reference to field kubernetes_version of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) KubernetesVersion() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("kubernetes_version"))
}

// LocalAccountDisabled returns a reference to field local_account_disabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) LocalAccountDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("local_account_disabled"))
}

// Location returns a reference to field location of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("name"))
}

// NodeOsChannelUpgrade returns a reference to field node_os_channel_upgrade of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) NodeOsChannelUpgrade() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("node_os_channel_upgrade"))
}

// NodeResourceGroup returns a reference to field node_resource_group of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) NodeResourceGroup() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("node_resource_group"))
}

// NodeResourceGroupId returns a reference to field node_resource_group_id of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) NodeResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("node_resource_group_id"))
}

// OidcIssuerEnabled returns a reference to field oidc_issuer_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) OidcIssuerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("oidc_issuer_enabled"))
}

// OidcIssuerUrl returns a reference to field oidc_issuer_url of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) OidcIssuerUrl() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("oidc_issuer_url"))
}

// OpenServiceMeshEnabled returns a reference to field open_service_mesh_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) OpenServiceMeshEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("open_service_mesh_enabled"))
}

// PortalFqdn returns a reference to field portal_fqdn of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PortalFqdn() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("portal_fqdn"))
}

// PrivateClusterEnabled returns a reference to field private_cluster_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PrivateClusterEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("private_cluster_enabled"))
}

// PrivateClusterPublicFqdnEnabled returns a reference to field private_cluster_public_fqdn_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PrivateClusterPublicFqdnEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("private_cluster_public_fqdn_enabled"))
}

// PrivateDnsZoneId returns a reference to field private_dns_zone_id of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PrivateDnsZoneId() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("private_dns_zone_id"))
}

// PrivateFqdn returns a reference to field private_fqdn of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PrivateFqdn() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("private_fqdn"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("resource_group_name"))
}

// RoleBasedAccessControlEnabled returns a reference to field role_based_access_control_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) RoleBasedAccessControlEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("role_based_access_control_enabled"))
}

// RunCommandEnabled returns a reference to field run_command_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) RunCommandEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("run_command_enabled"))
}

// SkuTier returns a reference to field sku_tier of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) SkuTier() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("sku_tier"))
}

// SupportPlan returns a reference to field support_plan of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) SupportPlan() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("support_plan"))
}

// Tags returns a reference to field tags of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akc.ref.Append("tags"))
}

// WorkloadIdentityEnabled returns a reference to field workload_identity_enabled of azurerm_kubernetes_cluster.
func (akc azurermKubernetesClusterAttributes) WorkloadIdentityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akc.ref.Append("workload_identity_enabled"))
}

func (akc azurermKubernetesClusterAttributes) KubeAdminConfig() terra.ListValue[KubeAdminConfigAttributes] {
	return terra.ReferenceAsList[KubeAdminConfigAttributes](akc.ref.Append("kube_admin_config"))
}

func (akc azurermKubernetesClusterAttributes) KubeConfig() terra.ListValue[KubeConfigAttributes] {
	return terra.ReferenceAsList[KubeConfigAttributes](akc.ref.Append("kube_config"))
}

func (akc azurermKubernetesClusterAttributes) AciConnectorLinux() terra.ListValue[AciConnectorLinuxAttributes] {
	return terra.ReferenceAsList[AciConnectorLinuxAttributes](akc.ref.Append("aci_connector_linux"))
}

func (akc azurermKubernetesClusterAttributes) ApiServerAccessProfile() terra.ListValue[ApiServerAccessProfileAttributes] {
	return terra.ReferenceAsList[ApiServerAccessProfileAttributes](akc.ref.Append("api_server_access_profile"))
}

func (akc azurermKubernetesClusterAttributes) AutoScalerProfile() terra.ListValue[AutoScalerProfileAttributes] {
	return terra.ReferenceAsList[AutoScalerProfileAttributes](akc.ref.Append("auto_scaler_profile"))
}

func (akc azurermKubernetesClusterAttributes) AzureActiveDirectoryRoleBasedAccessControl() terra.ListValue[AzureActiveDirectoryRoleBasedAccessControlAttributes] {
	return terra.ReferenceAsList[AzureActiveDirectoryRoleBasedAccessControlAttributes](akc.ref.Append("azure_active_directory_role_based_access_control"))
}

func (akc azurermKubernetesClusterAttributes) ConfidentialComputing() terra.ListValue[ConfidentialComputingAttributes] {
	return terra.ReferenceAsList[ConfidentialComputingAttributes](akc.ref.Append("confidential_computing"))
}

func (akc azurermKubernetesClusterAttributes) DefaultNodePool() terra.ListValue[DefaultNodePoolAttributes] {
	return terra.ReferenceAsList[DefaultNodePoolAttributes](akc.ref.Append("default_node_pool"))
}

func (akc azurermKubernetesClusterAttributes) HttpProxyConfig() terra.ListValue[HttpProxyConfigAttributes] {
	return terra.ReferenceAsList[HttpProxyConfigAttributes](akc.ref.Append("http_proxy_config"))
}

func (akc azurermKubernetesClusterAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](akc.ref.Append("identity"))
}

func (akc azurermKubernetesClusterAttributes) IngressApplicationGateway() terra.ListValue[IngressApplicationGatewayAttributes] {
	return terra.ReferenceAsList[IngressApplicationGatewayAttributes](akc.ref.Append("ingress_application_gateway"))
}

func (akc azurermKubernetesClusterAttributes) KeyManagementService() terra.ListValue[KeyManagementServiceAttributes] {
	return terra.ReferenceAsList[KeyManagementServiceAttributes](akc.ref.Append("key_management_service"))
}

func (akc azurermKubernetesClusterAttributes) KeyVaultSecretsProvider() terra.ListValue[KeyVaultSecretsProviderAttributes] {
	return terra.ReferenceAsList[KeyVaultSecretsProviderAttributes](akc.ref.Append("key_vault_secrets_provider"))
}

func (akc azurermKubernetesClusterAttributes) KubeletIdentity() terra.ListValue[KubeletIdentityAttributes] {
	return terra.ReferenceAsList[KubeletIdentityAttributes](akc.ref.Append("kubelet_identity"))
}

func (akc azurermKubernetesClusterAttributes) LinuxProfile() terra.ListValue[LinuxProfileAttributes] {
	return terra.ReferenceAsList[LinuxProfileAttributes](akc.ref.Append("linux_profile"))
}

func (akc azurermKubernetesClusterAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](akc.ref.Append("maintenance_window"))
}

func (akc azurermKubernetesClusterAttributes) MaintenanceWindowAutoUpgrade() terra.ListValue[MaintenanceWindowAutoUpgradeAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAutoUpgradeAttributes](akc.ref.Append("maintenance_window_auto_upgrade"))
}

func (akc azurermKubernetesClusterAttributes) MaintenanceWindowNodeOs() terra.ListValue[MaintenanceWindowNodeOsAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowNodeOsAttributes](akc.ref.Append("maintenance_window_node_os"))
}

func (akc azurermKubernetesClusterAttributes) MicrosoftDefender() terra.ListValue[MicrosoftDefenderAttributes] {
	return terra.ReferenceAsList[MicrosoftDefenderAttributes](akc.ref.Append("microsoft_defender"))
}

func (akc azurermKubernetesClusterAttributes) MonitorMetrics() terra.ListValue[MonitorMetricsAttributes] {
	return terra.ReferenceAsList[MonitorMetricsAttributes](akc.ref.Append("monitor_metrics"))
}

func (akc azurermKubernetesClusterAttributes) NetworkProfile() terra.ListValue[NetworkProfileAttributes] {
	return terra.ReferenceAsList[NetworkProfileAttributes](akc.ref.Append("network_profile"))
}

func (akc azurermKubernetesClusterAttributes) OmsAgent() terra.ListValue[OmsAgentAttributes] {
	return terra.ReferenceAsList[OmsAgentAttributes](akc.ref.Append("oms_agent"))
}

func (akc azurermKubernetesClusterAttributes) ServiceMeshProfile() terra.ListValue[ServiceMeshProfileAttributes] {
	return terra.ReferenceAsList[ServiceMeshProfileAttributes](akc.ref.Append("service_mesh_profile"))
}

func (akc azurermKubernetesClusterAttributes) ServicePrincipal() terra.ListValue[ServicePrincipalAttributes] {
	return terra.ReferenceAsList[ServicePrincipalAttributes](akc.ref.Append("service_principal"))
}

func (akc azurermKubernetesClusterAttributes) StorageProfile() terra.ListValue[StorageProfileAttributes] {
	return terra.ReferenceAsList[StorageProfileAttributes](akc.ref.Append("storage_profile"))
}

func (akc azurermKubernetesClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akc.ref.Append("timeouts"))
}

func (akc azurermKubernetesClusterAttributes) WebAppRouting() terra.ListValue[WebAppRoutingAttributes] {
	return terra.ReferenceAsList[WebAppRoutingAttributes](akc.ref.Append("web_app_routing"))
}

func (akc azurermKubernetesClusterAttributes) WindowsProfile() terra.ListValue[WindowsProfileAttributes] {
	return terra.ReferenceAsList[WindowsProfileAttributes](akc.ref.Append("windows_profile"))
}

func (akc azurermKubernetesClusterAttributes) WorkloadAutoscalerProfile() terra.ListValue[WorkloadAutoscalerProfileAttributes] {
	return terra.ReferenceAsList[WorkloadAutoscalerProfileAttributes](akc.ref.Append("workload_autoscaler_profile"))
}

type azurermKubernetesClusterState struct {
	ApiServerAuthorizedIpRanges                []string                                          `json:"api_server_authorized_ip_ranges"`
	AutomaticChannelUpgrade                    string                                            `json:"automatic_channel_upgrade"`
	AzurePolicyEnabled                         bool                                              `json:"azure_policy_enabled"`
	CurrentKubernetesVersion                   string                                            `json:"current_kubernetes_version"`
	CustomCaTrustCertificatesBase64            []string                                          `json:"custom_ca_trust_certificates_base64"`
	DiskEncryptionSetId                        string                                            `json:"disk_encryption_set_id"`
	DnsPrefix                                  string                                            `json:"dns_prefix"`
	DnsPrefixPrivateCluster                    string                                            `json:"dns_prefix_private_cluster"`
	EdgeZone                                   string                                            `json:"edge_zone"`
	EnablePodSecurityPolicy                    bool                                              `json:"enable_pod_security_policy"`
	Fqdn                                       string                                            `json:"fqdn"`
	HttpApplicationRoutingEnabled              bool                                              `json:"http_application_routing_enabled"`
	HttpApplicationRoutingZoneName             string                                            `json:"http_application_routing_zone_name"`
	Id                                         string                                            `json:"id"`
	ImageCleanerEnabled                        bool                                              `json:"image_cleaner_enabled"`
	ImageCleanerIntervalHours                  float64                                           `json:"image_cleaner_interval_hours"`
	KubeAdminConfigRaw                         string                                            `json:"kube_admin_config_raw"`
	KubeConfigRaw                              string                                            `json:"kube_config_raw"`
	KubernetesVersion                          string                                            `json:"kubernetes_version"`
	LocalAccountDisabled                       bool                                              `json:"local_account_disabled"`
	Location                                   string                                            `json:"location"`
	Name                                       string                                            `json:"name"`
	NodeOsChannelUpgrade                       string                                            `json:"node_os_channel_upgrade"`
	NodeResourceGroup                          string                                            `json:"node_resource_group"`
	NodeResourceGroupId                        string                                            `json:"node_resource_group_id"`
	OidcIssuerEnabled                          bool                                              `json:"oidc_issuer_enabled"`
	OidcIssuerUrl                              string                                            `json:"oidc_issuer_url"`
	OpenServiceMeshEnabled                     bool                                              `json:"open_service_mesh_enabled"`
	PortalFqdn                                 string                                            `json:"portal_fqdn"`
	PrivateClusterEnabled                      bool                                              `json:"private_cluster_enabled"`
	PrivateClusterPublicFqdnEnabled            bool                                              `json:"private_cluster_public_fqdn_enabled"`
	PrivateDnsZoneId                           string                                            `json:"private_dns_zone_id"`
	PrivateFqdn                                string                                            `json:"private_fqdn"`
	PublicNetworkAccessEnabled                 bool                                              `json:"public_network_access_enabled"`
	ResourceGroupName                          string                                            `json:"resource_group_name"`
	RoleBasedAccessControlEnabled              bool                                              `json:"role_based_access_control_enabled"`
	RunCommandEnabled                          bool                                              `json:"run_command_enabled"`
	SkuTier                                    string                                            `json:"sku_tier"`
	SupportPlan                                string                                            `json:"support_plan"`
	Tags                                       map[string]string                                 `json:"tags"`
	WorkloadIdentityEnabled                    bool                                              `json:"workload_identity_enabled"`
	KubeAdminConfig                            []KubeAdminConfigState                            `json:"kube_admin_config"`
	KubeConfig                                 []KubeConfigState                                 `json:"kube_config"`
	AciConnectorLinux                          []AciConnectorLinuxState                          `json:"aci_connector_linux"`
	ApiServerAccessProfile                     []ApiServerAccessProfileState                     `json:"api_server_access_profile"`
	AutoScalerProfile                          []AutoScalerProfileState                          `json:"auto_scaler_profile"`
	AzureActiveDirectoryRoleBasedAccessControl []AzureActiveDirectoryRoleBasedAccessControlState `json:"azure_active_directory_role_based_access_control"`
	ConfidentialComputing                      []ConfidentialComputingState                      `json:"confidential_computing"`
	DefaultNodePool                            []DefaultNodePoolState                            `json:"default_node_pool"`
	HttpProxyConfig                            []HttpProxyConfigState                            `json:"http_proxy_config"`
	Identity                                   []IdentityState                                   `json:"identity"`
	IngressApplicationGateway                  []IngressApplicationGatewayState                  `json:"ingress_application_gateway"`
	KeyManagementService                       []KeyManagementServiceState                       `json:"key_management_service"`
	KeyVaultSecretsProvider                    []KeyVaultSecretsProviderState                    `json:"key_vault_secrets_provider"`
	KubeletIdentity                            []KubeletIdentityState                            `json:"kubelet_identity"`
	LinuxProfile                               []LinuxProfileState                               `json:"linux_profile"`
	MaintenanceWindow                          []MaintenanceWindowState                          `json:"maintenance_window"`
	MaintenanceWindowAutoUpgrade               []MaintenanceWindowAutoUpgradeState               `json:"maintenance_window_auto_upgrade"`
	MaintenanceWindowNodeOs                    []MaintenanceWindowNodeOsState                    `json:"maintenance_window_node_os"`
	MicrosoftDefender                          []MicrosoftDefenderState                          `json:"microsoft_defender"`
	MonitorMetrics                             []MonitorMetricsState                             `json:"monitor_metrics"`
	NetworkProfile                             []NetworkProfileState                             `json:"network_profile"`
	OmsAgent                                   []OmsAgentState                                   `json:"oms_agent"`
	ServiceMeshProfile                         []ServiceMeshProfileState                         `json:"service_mesh_profile"`
	ServicePrincipal                           []ServicePrincipalState                           `json:"service_principal"`
	StorageProfile                             []StorageProfileState                             `json:"storage_profile"`
	Timeouts                                   *TimeoutsState                                    `json:"timeouts"`
	WebAppRouting                              []WebAppRoutingState                              `json:"web_app_routing"`
	WindowsProfile                             []WindowsProfileState                             `json:"windows_profile"`
	WorkloadAutoscalerProfile                  []WorkloadAutoscalerProfileState                  `json:"workload_autoscaler_profile"`
}
