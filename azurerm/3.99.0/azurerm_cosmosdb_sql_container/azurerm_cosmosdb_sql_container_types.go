// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_sql_container

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoscaleSettings struct {
	// MaxThroughput: number, optional
	MaxThroughput terra.NumberValue `hcl:"max_throughput,attr"`
}

type ConflictResolutionPolicy struct {
	// ConflictResolutionPath: string, optional
	ConflictResolutionPath terra.StringValue `hcl:"conflict_resolution_path,attr"`
	// ConflictResolutionProcedure: string, optional
	ConflictResolutionProcedure terra.StringValue `hcl:"conflict_resolution_procedure,attr"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type IndexingPolicy struct {
	// IndexingMode: string, optional
	IndexingMode terra.StringValue `hcl:"indexing_mode,attr"`
	// IndexingPolicyCompositeIndex: min=0
	CompositeIndex []IndexingPolicyCompositeIndex `hcl:"composite_index,block" validate:"min=0"`
	// IndexingPolicyExcludedPath: min=0
	ExcludedPath []IndexingPolicyExcludedPath `hcl:"excluded_path,block" validate:"min=0"`
	// IndexingPolicyIncludedPath: min=0
	IncludedPath []IndexingPolicyIncludedPath `hcl:"included_path,block" validate:"min=0"`
	// IndexingPolicySpatialIndex: min=0
	SpatialIndex []IndexingPolicySpatialIndex `hcl:"spatial_index,block" validate:"min=0"`
}

type IndexingPolicyCompositeIndex struct {
	// IndexingPolicyCompositeIndexIndex: min=1
	Index []IndexingPolicyCompositeIndexIndex `hcl:"index,block" validate:"min=1"`
}

type IndexingPolicyCompositeIndexIndex struct {
	// Order: string, required
	Order terra.StringValue `hcl:"order,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type IndexingPolicyExcludedPath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type IndexingPolicyIncludedPath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type IndexingPolicySpatialIndex struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UniqueKey struct {
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
}

type AutoscaleSettingsAttributes struct {
	ref terra.Reference
}

func (as AutoscaleSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutoscaleSettingsAttributes) InternalWithRef(ref terra.Reference) AutoscaleSettingsAttributes {
	return AutoscaleSettingsAttributes{ref: ref}
}

func (as AutoscaleSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutoscaleSettingsAttributes) MaxThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_throughput"))
}

type ConflictResolutionPolicyAttributes struct {
	ref terra.Reference
}

func (crp ConflictResolutionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return crp.ref, nil
}

func (crp ConflictResolutionPolicyAttributes) InternalWithRef(ref terra.Reference) ConflictResolutionPolicyAttributes {
	return ConflictResolutionPolicyAttributes{ref: ref}
}

func (crp ConflictResolutionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crp.ref.InternalTokens()
}

func (crp ConflictResolutionPolicyAttributes) ConflictResolutionPath() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("conflict_resolution_path"))
}

func (crp ConflictResolutionPolicyAttributes) ConflictResolutionProcedure() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("conflict_resolution_procedure"))
}

func (crp ConflictResolutionPolicyAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("mode"))
}

type IndexingPolicyAttributes struct {
	ref terra.Reference
}

func (ip IndexingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IndexingPolicyAttributes) InternalWithRef(ref terra.Reference) IndexingPolicyAttributes {
	return IndexingPolicyAttributes{ref: ref}
}

func (ip IndexingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IndexingPolicyAttributes) IndexingMode() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("indexing_mode"))
}

func (ip IndexingPolicyAttributes) CompositeIndex() terra.ListValue[IndexingPolicyCompositeIndexAttributes] {
	return terra.ReferenceAsList[IndexingPolicyCompositeIndexAttributes](ip.ref.Append("composite_index"))
}

func (ip IndexingPolicyAttributes) ExcludedPath() terra.ListValue[IndexingPolicyExcludedPathAttributes] {
	return terra.ReferenceAsList[IndexingPolicyExcludedPathAttributes](ip.ref.Append("excluded_path"))
}

func (ip IndexingPolicyAttributes) IncludedPath() terra.ListValue[IndexingPolicyIncludedPathAttributes] {
	return terra.ReferenceAsList[IndexingPolicyIncludedPathAttributes](ip.ref.Append("included_path"))
}

func (ip IndexingPolicyAttributes) SpatialIndex() terra.ListValue[IndexingPolicySpatialIndexAttributes] {
	return terra.ReferenceAsList[IndexingPolicySpatialIndexAttributes](ip.ref.Append("spatial_index"))
}

type IndexingPolicyCompositeIndexAttributes struct {
	ref terra.Reference
}

func (ci IndexingPolicyCompositeIndexAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci IndexingPolicyCompositeIndexAttributes) InternalWithRef(ref terra.Reference) IndexingPolicyCompositeIndexAttributes {
	return IndexingPolicyCompositeIndexAttributes{ref: ref}
}

func (ci IndexingPolicyCompositeIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci IndexingPolicyCompositeIndexAttributes) Index() terra.ListValue[IndexingPolicyCompositeIndexIndexAttributes] {
	return terra.ReferenceAsList[IndexingPolicyCompositeIndexIndexAttributes](ci.ref.Append("index"))
}

type IndexingPolicyCompositeIndexIndexAttributes struct {
	ref terra.Reference
}

func (i IndexingPolicyCompositeIndexIndexAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IndexingPolicyCompositeIndexIndexAttributes) InternalWithRef(ref terra.Reference) IndexingPolicyCompositeIndexIndexAttributes {
	return IndexingPolicyCompositeIndexIndexAttributes{ref: ref}
}

func (i IndexingPolicyCompositeIndexIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IndexingPolicyCompositeIndexIndexAttributes) Order() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("order"))
}

func (i IndexingPolicyCompositeIndexIndexAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

type IndexingPolicyExcludedPathAttributes struct {
	ref terra.Reference
}

func (ep IndexingPolicyExcludedPathAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep IndexingPolicyExcludedPathAttributes) InternalWithRef(ref terra.Reference) IndexingPolicyExcludedPathAttributes {
	return IndexingPolicyExcludedPathAttributes{ref: ref}
}

func (ep IndexingPolicyExcludedPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep IndexingPolicyExcludedPathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("path"))
}

type IndexingPolicyIncludedPathAttributes struct {
	ref terra.Reference
}

func (ip IndexingPolicyIncludedPathAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IndexingPolicyIncludedPathAttributes) InternalWithRef(ref terra.Reference) IndexingPolicyIncludedPathAttributes {
	return IndexingPolicyIncludedPathAttributes{ref: ref}
}

func (ip IndexingPolicyIncludedPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IndexingPolicyIncludedPathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("path"))
}

type IndexingPolicySpatialIndexAttributes struct {
	ref terra.Reference
}

func (si IndexingPolicySpatialIndexAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si IndexingPolicySpatialIndexAttributes) InternalWithRef(ref terra.Reference) IndexingPolicySpatialIndexAttributes {
	return IndexingPolicySpatialIndexAttributes{ref: ref}
}

func (si IndexingPolicySpatialIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si IndexingPolicySpatialIndexAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("path"))
}

func (si IndexingPolicySpatialIndexAttributes) Types() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](si.ref.Append("types"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UniqueKeyAttributes struct {
	ref terra.Reference
}

func (uk UniqueKeyAttributes) InternalRef() (terra.Reference, error) {
	return uk.ref, nil
}

func (uk UniqueKeyAttributes) InternalWithRef(ref terra.Reference) UniqueKeyAttributes {
	return UniqueKeyAttributes{ref: ref}
}

func (uk UniqueKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uk.ref.InternalTokens()
}

func (uk UniqueKeyAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](uk.ref.Append("paths"))
}

type AutoscaleSettingsState struct {
	MaxThroughput float64 `json:"max_throughput"`
}

type ConflictResolutionPolicyState struct {
	ConflictResolutionPath      string `json:"conflict_resolution_path"`
	ConflictResolutionProcedure string `json:"conflict_resolution_procedure"`
	Mode                        string `json:"mode"`
}

type IndexingPolicyState struct {
	IndexingMode   string                              `json:"indexing_mode"`
	CompositeIndex []IndexingPolicyCompositeIndexState `json:"composite_index"`
	ExcludedPath   []IndexingPolicyExcludedPathState   `json:"excluded_path"`
	IncludedPath   []IndexingPolicyIncludedPathState   `json:"included_path"`
	SpatialIndex   []IndexingPolicySpatialIndexState   `json:"spatial_index"`
}

type IndexingPolicyCompositeIndexState struct {
	Index []IndexingPolicyCompositeIndexIndexState `json:"index"`
}

type IndexingPolicyCompositeIndexIndexState struct {
	Order string `json:"order"`
	Path  string `json:"path"`
}

type IndexingPolicyExcludedPathState struct {
	Path string `json:"path"`
}

type IndexingPolicyIncludedPathState struct {
	Path string `json:"path"`
}

type IndexingPolicySpatialIndexState struct {
	Path  string   `json:"path"`
	Types []string `json:"types"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UniqueKeyState struct {
	Paths []string `json:"paths"`
}
