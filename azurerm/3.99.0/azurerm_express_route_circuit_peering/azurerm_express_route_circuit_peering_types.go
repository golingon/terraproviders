// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_express_route_circuit_peering

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Ipv6 struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// PrimaryPeerAddressPrefix: string, required
	PrimaryPeerAddressPrefix terra.StringValue `hcl:"primary_peer_address_prefix,attr" validate:"required"`
	// RouteFilterId: string, optional
	RouteFilterId terra.StringValue `hcl:"route_filter_id,attr"`
	// SecondaryPeerAddressPrefix: string, required
	SecondaryPeerAddressPrefix terra.StringValue `hcl:"secondary_peer_address_prefix,attr" validate:"required"`
	// Ipv6MicrosoftPeering: optional
	MicrosoftPeering *Ipv6MicrosoftPeering `hcl:"microsoft_peering,block"`
}

type Ipv6MicrosoftPeering struct {
	// AdvertisedCommunities: list of string, optional
	AdvertisedCommunities terra.ListValue[terra.StringValue] `hcl:"advertised_communities,attr"`
	// AdvertisedPublicPrefixes: list of string, optional
	AdvertisedPublicPrefixes terra.ListValue[terra.StringValue] `hcl:"advertised_public_prefixes,attr"`
	// CustomerAsn: number, optional
	CustomerAsn terra.NumberValue `hcl:"customer_asn,attr"`
	// RoutingRegistryName: string, optional
	RoutingRegistryName terra.StringValue `hcl:"routing_registry_name,attr"`
}

type MicrosoftPeeringConfig struct {
	// AdvertisedCommunities: list of string, optional
	AdvertisedCommunities terra.ListValue[terra.StringValue] `hcl:"advertised_communities,attr"`
	// AdvertisedPublicPrefixes: list of string, required
	AdvertisedPublicPrefixes terra.ListValue[terra.StringValue] `hcl:"advertised_public_prefixes,attr" validate:"required"`
	// CustomerAsn: number, optional
	CustomerAsn terra.NumberValue `hcl:"customer_asn,attr"`
	// RoutingRegistryName: string, optional
	RoutingRegistryName terra.StringValue `hcl:"routing_registry_name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Ipv6Attributes struct {
	ref terra.Reference
}

func (i Ipv6Attributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i Ipv6Attributes) InternalWithRef(ref terra.Reference) Ipv6Attributes {
	return Ipv6Attributes{ref: ref}
}

func (i Ipv6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i Ipv6Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("enabled"))
}

func (i Ipv6Attributes) PrimaryPeerAddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("primary_peer_address_prefix"))
}

func (i Ipv6Attributes) RouteFilterId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("route_filter_id"))
}

func (i Ipv6Attributes) SecondaryPeerAddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("secondary_peer_address_prefix"))
}

func (i Ipv6Attributes) MicrosoftPeering() terra.ListValue[Ipv6MicrosoftPeeringAttributes] {
	return terra.ReferenceAsList[Ipv6MicrosoftPeeringAttributes](i.ref.Append("microsoft_peering"))
}

type Ipv6MicrosoftPeeringAttributes struct {
	ref terra.Reference
}

func (mp Ipv6MicrosoftPeeringAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp Ipv6MicrosoftPeeringAttributes) InternalWithRef(ref terra.Reference) Ipv6MicrosoftPeeringAttributes {
	return Ipv6MicrosoftPeeringAttributes{ref: ref}
}

func (mp Ipv6MicrosoftPeeringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp Ipv6MicrosoftPeeringAttributes) AdvertisedCommunities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mp.ref.Append("advertised_communities"))
}

func (mp Ipv6MicrosoftPeeringAttributes) AdvertisedPublicPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mp.ref.Append("advertised_public_prefixes"))
}

func (mp Ipv6MicrosoftPeeringAttributes) CustomerAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(mp.ref.Append("customer_asn"))
}

func (mp Ipv6MicrosoftPeeringAttributes) RoutingRegistryName() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("routing_registry_name"))
}

type MicrosoftPeeringConfigAttributes struct {
	ref terra.Reference
}

func (mpc MicrosoftPeeringConfigAttributes) InternalRef() (terra.Reference, error) {
	return mpc.ref, nil
}

func (mpc MicrosoftPeeringConfigAttributes) InternalWithRef(ref terra.Reference) MicrosoftPeeringConfigAttributes {
	return MicrosoftPeeringConfigAttributes{ref: ref}
}

func (mpc MicrosoftPeeringConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mpc.ref.InternalTokens()
}

func (mpc MicrosoftPeeringConfigAttributes) AdvertisedCommunities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mpc.ref.Append("advertised_communities"))
}

func (mpc MicrosoftPeeringConfigAttributes) AdvertisedPublicPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mpc.ref.Append("advertised_public_prefixes"))
}

func (mpc MicrosoftPeeringConfigAttributes) CustomerAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(mpc.ref.Append("customer_asn"))
}

func (mpc MicrosoftPeeringConfigAttributes) RoutingRegistryName() terra.StringValue {
	return terra.ReferenceAsString(mpc.ref.Append("routing_registry_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type Ipv6State struct {
	Enabled                    bool                        `json:"enabled"`
	PrimaryPeerAddressPrefix   string                      `json:"primary_peer_address_prefix"`
	RouteFilterId              string                      `json:"route_filter_id"`
	SecondaryPeerAddressPrefix string                      `json:"secondary_peer_address_prefix"`
	MicrosoftPeering           []Ipv6MicrosoftPeeringState `json:"microsoft_peering"`
}

type Ipv6MicrosoftPeeringState struct {
	AdvertisedCommunities    []string `json:"advertised_communities"`
	AdvertisedPublicPrefixes []string `json:"advertised_public_prefixes"`
	CustomerAsn              float64  `json:"customer_asn"`
	RoutingRegistryName      string   `json:"routing_registry_name"`
}

type MicrosoftPeeringConfigState struct {
	AdvertisedCommunities    []string `json:"advertised_communities"`
	AdvertisedPublicPrefixes []string `json:"advertised_public_prefixes"`
	CustomerAsn              float64  `json:"customer_asn"`
	RoutingRegistryName      string   `json:"routing_registry_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
