// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_redis_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_redis_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementRedisCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamrc *Resource) Type() string {
	return "azurerm_api_management_redis_cache"
}

// LocalName returns the local name for [Resource].
func (aamrc *Resource) LocalName() string {
	return aamrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamrc *Resource) Configuration() interface{} {
	return aamrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamrc *Resource) Dependencies() terra.Dependencies {
	return aamrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamrc *Resource) Attributes() azurermApiManagementRedisCacheAttributes {
	return azurermApiManagementRedisCacheAttributes{ref: terra.ReferenceResource(aamrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamrc *Resource) ImportState(state io.Reader) error {
	aamrc.state = &azurermApiManagementRedisCacheState{}
	if err := json.NewDecoder(state).Decode(aamrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamrc.Type(), aamrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamrc *Resource) State() (*azurermApiManagementRedisCacheState, bool) {
	return aamrc.state, aamrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamrc *Resource) StateMust() *azurermApiManagementRedisCacheState {
	if aamrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamrc.Type(), aamrc.LocalName()))
	}
	return aamrc.state
}

// Args contains the configurations for azurerm_api_management_redis_cache.
type Args struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// CacheLocation: string, optional
	CacheLocation terra.StringValue `hcl:"cache_location,attr"`
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedisCacheId: string, optional
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementRedisCacheAttributes struct {
	ref terra.Reference
}

// ApiManagementId returns a reference to field api_management_id of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("api_management_id"))
}

// CacheLocation returns a reference to field cache_location of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) CacheLocation() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("cache_location"))
}

// ConnectionString returns a reference to field connection_string of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("connection_string"))
}

// Description returns a reference to field description of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("name"))
}

// RedisCacheId returns a reference to field redis_cache_id of azurerm_api_management_redis_cache.
func (aamrc azurermApiManagementRedisCacheAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(aamrc.ref.Append("redis_cache_id"))
}

func (aamrc azurermApiManagementRedisCacheAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamrc.ref.Append("timeouts"))
}

type azurermApiManagementRedisCacheState struct {
	ApiManagementId  string         `json:"api_management_id"`
	CacheLocation    string         `json:"cache_location"`
	ConnectionString string         `json:"connection_string"`
	Description      string         `json:"description"`
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	RedisCacheId     string         `json:"redis_cache_id"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
