// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_management_group_subscription_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_management_group_subscription_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagementGroupSubscriptionAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amgsa *Resource) Type() string {
	return "azurerm_management_group_subscription_association"
}

// LocalName returns the local name for [Resource].
func (amgsa *Resource) LocalName() string {
	return amgsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amgsa *Resource) Configuration() interface{} {
	return amgsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amgsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amgsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amgsa *Resource) Dependencies() terra.Dependencies {
	return amgsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amgsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return amgsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amgsa *Resource) Attributes() azurermManagementGroupSubscriptionAssociationAttributes {
	return azurermManagementGroupSubscriptionAssociationAttributes{ref: terra.ReferenceResource(amgsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amgsa *Resource) ImportState(state io.Reader) error {
	amgsa.state = &azurermManagementGroupSubscriptionAssociationState{}
	if err := json.NewDecoder(state).Decode(amgsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amgsa.Type(), amgsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amgsa *Resource) State() (*azurermManagementGroupSubscriptionAssociationState, bool) {
	return amgsa.state, amgsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amgsa *Resource) StateMust() *azurermManagementGroupSubscriptionAssociationState {
	if amgsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amgsa.Type(), amgsa.LocalName()))
	}
	return amgsa.state
}

// Args contains the configurations for azurerm_management_group_subscription_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagementGroupId: string, required
	ManagementGroupId terra.StringValue `hcl:"management_group_id,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagementGroupSubscriptionAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_management_group_subscription_association.
func (amgsa azurermManagementGroupSubscriptionAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amgsa.ref.Append("id"))
}

// ManagementGroupId returns a reference to field management_group_id of azurerm_management_group_subscription_association.
func (amgsa azurermManagementGroupSubscriptionAssociationAttributes) ManagementGroupId() terra.StringValue {
	return terra.ReferenceAsString(amgsa.ref.Append("management_group_id"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_management_group_subscription_association.
func (amgsa azurermManagementGroupSubscriptionAssociationAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(amgsa.ref.Append("subscription_id"))
}

func (amgsa azurermManagementGroupSubscriptionAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amgsa.ref.Append("timeouts"))
}

type azurermManagementGroupSubscriptionAssociationState struct {
	Id                string         `json:"id"`
	ManagementGroupId string         `json:"management_group_id"`
	SubscriptionId    string         `json:"subscription_id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
