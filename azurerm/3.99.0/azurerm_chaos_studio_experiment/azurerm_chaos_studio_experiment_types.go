// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_chaos_studio_experiment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Selectors struct {
	// ChaosStudioTargetIds: list of string, required
	ChaosStudioTargetIds terra.ListValue[terra.StringValue] `hcl:"chaos_studio_target_ids,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Steps struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StepsBranch: min=1
	Branch []StepsBranch `hcl:"branch,block" validate:"min=1"`
}

type StepsBranch struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StepsBranchActions: min=1
	Actions []StepsBranchActions `hcl:"actions,block" validate:"min=1"`
}

type StepsBranchActions struct {
	// ActionType: string, required
	ActionType terra.StringValue `hcl:"action_type,attr" validate:"required"`
	// Duration: string, optional
	Duration terra.StringValue `hcl:"duration,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SelectorName: string, optional
	SelectorName terra.StringValue `hcl:"selector_name,attr"`
	// Urn: string, optional
	Urn terra.StringValue `hcl:"urn,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type SelectorsAttributes struct {
	ref terra.Reference
}

func (s SelectorsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SelectorsAttributes) InternalWithRef(ref terra.Reference) SelectorsAttributes {
	return SelectorsAttributes{ref: ref}
}

func (s SelectorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SelectorsAttributes) ChaosStudioTargetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("chaos_studio_target_ids"))
}

func (s SelectorsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

type StepsAttributes struct {
	ref terra.Reference
}

func (s StepsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StepsAttributes) InternalWithRef(ref terra.Reference) StepsAttributes {
	return StepsAttributes{ref: ref}
}

func (s StepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StepsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StepsAttributes) Branch() terra.ListValue[StepsBranchAttributes] {
	return terra.ReferenceAsList[StepsBranchAttributes](s.ref.Append("branch"))
}

type StepsBranchAttributes struct {
	ref terra.Reference
}

func (b StepsBranchAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b StepsBranchAttributes) InternalWithRef(ref terra.Reference) StepsBranchAttributes {
	return StepsBranchAttributes{ref: ref}
}

func (b StepsBranchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b StepsBranchAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b StepsBranchAttributes) Actions() terra.ListValue[StepsBranchActionsAttributes] {
	return terra.ReferenceAsList[StepsBranchActionsAttributes](b.ref.Append("actions"))
}

type StepsBranchActionsAttributes struct {
	ref terra.Reference
}

func (a StepsBranchActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a StepsBranchActionsAttributes) InternalWithRef(ref terra.Reference) StepsBranchActionsAttributes {
	return StepsBranchActionsAttributes{ref: ref}
}

func (a StepsBranchActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a StepsBranchActionsAttributes) ActionType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_type"))
}

func (a StepsBranchActionsAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("duration"))
}

func (a StepsBranchActionsAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("parameters"))
}

func (a StepsBranchActionsAttributes) SelectorName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("selector_name"))
}

func (a StepsBranchActionsAttributes) Urn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("urn"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type SelectorsState struct {
	ChaosStudioTargetIds []string `json:"chaos_studio_target_ids"`
	Name                 string   `json:"name"`
}

type StepsState struct {
	Name   string             `json:"name"`
	Branch []StepsBranchState `json:"branch"`
}

type StepsBranchState struct {
	Name    string                    `json:"name"`
	Actions []StepsBranchActionsState `json:"actions"`
}

type StepsBranchActionsState struct {
	ActionType   string            `json:"action_type"`
	Duration     string            `json:"duration"`
	Parameters   map[string]string `json:"parameters"`
	SelectorName string            `json:"selector_name"`
	Urn          string            `json:"urn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
