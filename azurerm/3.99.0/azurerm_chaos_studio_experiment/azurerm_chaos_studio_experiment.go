// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_chaos_studio_experiment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_chaos_studio_experiment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermChaosStudioExperimentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acse *Resource) Type() string {
	return "azurerm_chaos_studio_experiment"
}

// LocalName returns the local name for [Resource].
func (acse *Resource) LocalName() string {
	return acse.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acse *Resource) Configuration() interface{} {
	return acse.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acse *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acse)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acse *Resource) Dependencies() terra.Dependencies {
	return acse.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acse *Resource) LifecycleManagement() *terra.Lifecycle {
	return acse.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acse *Resource) Attributes() azurermChaosStudioExperimentAttributes {
	return azurermChaosStudioExperimentAttributes{ref: terra.ReferenceResource(acse)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acse *Resource) ImportState(state io.Reader) error {
	acse.state = &azurermChaosStudioExperimentState{}
	if err := json.NewDecoder(state).Decode(acse.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acse.Type(), acse.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acse *Resource) State() (*azurermChaosStudioExperimentState, bool) {
	return acse.state, acse.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acse *Resource) StateMust() *azurermChaosStudioExperimentState {
	if acse.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acse.Type(), acse.LocalName()))
	}
	return acse.state
}

// Args contains the configurations for azurerm_chaos_studio_experiment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Selectors: min=1
	Selectors []Selectors `hcl:"selectors,block" validate:"min=1"`
	// Steps: min=1
	Steps []Steps `hcl:"steps,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermChaosStudioExperimentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_chaos_studio_experiment.
func (acse azurermChaosStudioExperimentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acse.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_chaos_studio_experiment.
func (acse azurermChaosStudioExperimentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(acse.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_chaos_studio_experiment.
func (acse azurermChaosStudioExperimentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acse.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_chaos_studio_experiment.
func (acse azurermChaosStudioExperimentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acse.ref.Append("resource_group_name"))
}

func (acse azurermChaosStudioExperimentAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](acse.ref.Append("identity"))
}

func (acse azurermChaosStudioExperimentAttributes) Selectors() terra.ListValue[SelectorsAttributes] {
	return terra.ReferenceAsList[SelectorsAttributes](acse.ref.Append("selectors"))
}

func (acse azurermChaosStudioExperimentAttributes) Steps() terra.ListValue[StepsAttributes] {
	return terra.ReferenceAsList[StepsAttributes](acse.ref.Append("steps"))
}

func (acse azurermChaosStudioExperimentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acse.ref.Append("timeouts"))
}

type azurermChaosStudioExperimentState struct {
	Id                string           `json:"id"`
	Location          string           `json:"location"`
	Name              string           `json:"name"`
	ResourceGroupName string           `json:"resource_group_name"`
	Identity          []IdentityState  `json:"identity"`
	Selectors         []SelectorsState `json:"selectors"`
	Steps             []StepsState     `json:"steps"`
	Timeouts          *TimeoutsState   `json:"timeouts"`
}
