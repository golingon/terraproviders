// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_service_fabric_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_service_fabric_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermServiceFabricClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asfc *Resource) Type() string {
	return "azurerm_service_fabric_cluster"
}

// LocalName returns the local name for [Resource].
func (asfc *Resource) LocalName() string {
	return asfc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asfc *Resource) Configuration() interface{} {
	return asfc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asfc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asfc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asfc *Resource) Dependencies() terra.Dependencies {
	return asfc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asfc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asfc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asfc *Resource) Attributes() azurermServiceFabricClusterAttributes {
	return azurermServiceFabricClusterAttributes{ref: terra.ReferenceResource(asfc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asfc *Resource) ImportState(state io.Reader) error {
	asfc.state = &azurermServiceFabricClusterState{}
	if err := json.NewDecoder(state).Decode(asfc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asfc.Type(), asfc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asfc *Resource) State() (*azurermServiceFabricClusterState, bool) {
	return asfc.state, asfc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asfc *Resource) StateMust() *azurermServiceFabricClusterState {
	if asfc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asfc.Type(), asfc.LocalName()))
	}
	return asfc.state
}

// Args contains the configurations for azurerm_service_fabric_cluster.
type Args struct {
	// AddOnFeatures: set of string, optional
	AddOnFeatures terra.SetValue[terra.StringValue] `hcl:"add_on_features,attr"`
	// ClusterCodeVersion: string, optional
	ClusterCodeVersion terra.StringValue `hcl:"cluster_code_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagementEndpoint: string, required
	ManagementEndpoint terra.StringValue `hcl:"management_endpoint,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReliabilityLevel: string, required
	ReliabilityLevel terra.StringValue `hcl:"reliability_level,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceFabricZonalUpgradeMode: string, optional
	ServiceFabricZonalUpgradeMode terra.StringValue `hcl:"service_fabric_zonal_upgrade_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UpgradeMode: string, required
	UpgradeMode terra.StringValue `hcl:"upgrade_mode,attr" validate:"required"`
	// VmImage: string, required
	VmImage terra.StringValue `hcl:"vm_image,attr" validate:"required"`
	// VmssZonalUpgradeMode: string, optional
	VmssZonalUpgradeMode terra.StringValue `hcl:"vmss_zonal_upgrade_mode,attr"`
	// AzureActiveDirectory: optional
	AzureActiveDirectory *AzureActiveDirectory `hcl:"azure_active_directory,block"`
	// Certificate: optional
	Certificate *Certificate `hcl:"certificate,block"`
	// CertificateCommonNames: optional
	CertificateCommonNames *CertificateCommonNames `hcl:"certificate_common_names,block"`
	// ClientCertificateCommonName: min=0
	ClientCertificateCommonName []ClientCertificateCommonName `hcl:"client_certificate_common_name,block" validate:"min=0"`
	// ClientCertificateThumbprint: min=0
	ClientCertificateThumbprint []ClientCertificateThumbprint `hcl:"client_certificate_thumbprint,block" validate:"min=0"`
	// DiagnosticsConfig: optional
	DiagnosticsConfig *DiagnosticsConfig `hcl:"diagnostics_config,block"`
	// FabricSettings: min=0
	FabricSettings []FabricSettings `hcl:"fabric_settings,block" validate:"min=0"`
	// NodeType: min=1
	NodeType []NodeType `hcl:"node_type,block" validate:"min=1"`
	// ReverseProxyCertificate: optional
	ReverseProxyCertificate *ReverseProxyCertificate `hcl:"reverse_proxy_certificate,block"`
	// ReverseProxyCertificateCommonNames: optional
	ReverseProxyCertificateCommonNames *ReverseProxyCertificateCommonNames `hcl:"reverse_proxy_certificate_common_names,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UpgradePolicy: optional
	UpgradePolicy *UpgradePolicy `hcl:"upgrade_policy,block"`
}

type azurermServiceFabricClusterAttributes struct {
	ref terra.Reference
}

// AddOnFeatures returns a reference to field add_on_features of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) AddOnFeatures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asfc.ref.Append("add_on_features"))
}

// ClusterCodeVersion returns a reference to field cluster_code_version of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ClusterCodeVersion() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("cluster_code_version"))
}

// ClusterEndpoint returns a reference to field cluster_endpoint of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ClusterEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("cluster_endpoint"))
}

// Id returns a reference to field id of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("location"))
}

// ManagementEndpoint returns a reference to field management_endpoint of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ManagementEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("management_endpoint"))
}

// Name returns a reference to field name of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("name"))
}

// ReliabilityLevel returns a reference to field reliability_level of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ReliabilityLevel() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("reliability_level"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("resource_group_name"))
}

// ServiceFabricZonalUpgradeMode returns a reference to field service_fabric_zonal_upgrade_mode of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) ServiceFabricZonalUpgradeMode() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("service_fabric_zonal_upgrade_mode"))
}

// Tags returns a reference to field tags of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfc.ref.Append("tags"))
}

// UpgradeMode returns a reference to field upgrade_mode of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) UpgradeMode() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("upgrade_mode"))
}

// VmImage returns a reference to field vm_image of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) VmImage() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("vm_image"))
}

// VmssZonalUpgradeMode returns a reference to field vmss_zonal_upgrade_mode of azurerm_service_fabric_cluster.
func (asfc azurermServiceFabricClusterAttributes) VmssZonalUpgradeMode() terra.StringValue {
	return terra.ReferenceAsString(asfc.ref.Append("vmss_zonal_upgrade_mode"))
}

func (asfc azurermServiceFabricClusterAttributes) AzureActiveDirectory() terra.ListValue[AzureActiveDirectoryAttributes] {
	return terra.ReferenceAsList[AzureActiveDirectoryAttributes](asfc.ref.Append("azure_active_directory"))
}

func (asfc azurermServiceFabricClusterAttributes) Certificate() terra.ListValue[CertificateAttributes] {
	return terra.ReferenceAsList[CertificateAttributes](asfc.ref.Append("certificate"))
}

func (asfc azurermServiceFabricClusterAttributes) CertificateCommonNames() terra.ListValue[CertificateCommonNamesAttributes] {
	return terra.ReferenceAsList[CertificateCommonNamesAttributes](asfc.ref.Append("certificate_common_names"))
}

func (asfc azurermServiceFabricClusterAttributes) ClientCertificateCommonName() terra.ListValue[ClientCertificateCommonNameAttributes] {
	return terra.ReferenceAsList[ClientCertificateCommonNameAttributes](asfc.ref.Append("client_certificate_common_name"))
}

func (asfc azurermServiceFabricClusterAttributes) ClientCertificateThumbprint() terra.ListValue[ClientCertificateThumbprintAttributes] {
	return terra.ReferenceAsList[ClientCertificateThumbprintAttributes](asfc.ref.Append("client_certificate_thumbprint"))
}

func (asfc azurermServiceFabricClusterAttributes) DiagnosticsConfig() terra.ListValue[DiagnosticsConfigAttributes] {
	return terra.ReferenceAsList[DiagnosticsConfigAttributes](asfc.ref.Append("diagnostics_config"))
}

func (asfc azurermServiceFabricClusterAttributes) FabricSettings() terra.ListValue[FabricSettingsAttributes] {
	return terra.ReferenceAsList[FabricSettingsAttributes](asfc.ref.Append("fabric_settings"))
}

func (asfc azurermServiceFabricClusterAttributes) NodeType() terra.ListValue[NodeTypeAttributes] {
	return terra.ReferenceAsList[NodeTypeAttributes](asfc.ref.Append("node_type"))
}

func (asfc azurermServiceFabricClusterAttributes) ReverseProxyCertificate() terra.ListValue[ReverseProxyCertificateAttributes] {
	return terra.ReferenceAsList[ReverseProxyCertificateAttributes](asfc.ref.Append("reverse_proxy_certificate"))
}

func (asfc azurermServiceFabricClusterAttributes) ReverseProxyCertificateCommonNames() terra.ListValue[ReverseProxyCertificateCommonNamesAttributes] {
	return terra.ReferenceAsList[ReverseProxyCertificateCommonNamesAttributes](asfc.ref.Append("reverse_proxy_certificate_common_names"))
}

func (asfc azurermServiceFabricClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asfc.ref.Append("timeouts"))
}

func (asfc azurermServiceFabricClusterAttributes) UpgradePolicy() terra.ListValue[UpgradePolicyAttributes] {
	return terra.ReferenceAsList[UpgradePolicyAttributes](asfc.ref.Append("upgrade_policy"))
}

type azurermServiceFabricClusterState struct {
	AddOnFeatures                      []string                                  `json:"add_on_features"`
	ClusterCodeVersion                 string                                    `json:"cluster_code_version"`
	ClusterEndpoint                    string                                    `json:"cluster_endpoint"`
	Id                                 string                                    `json:"id"`
	Location                           string                                    `json:"location"`
	ManagementEndpoint                 string                                    `json:"management_endpoint"`
	Name                               string                                    `json:"name"`
	ReliabilityLevel                   string                                    `json:"reliability_level"`
	ResourceGroupName                  string                                    `json:"resource_group_name"`
	ServiceFabricZonalUpgradeMode      string                                    `json:"service_fabric_zonal_upgrade_mode"`
	Tags                               map[string]string                         `json:"tags"`
	UpgradeMode                        string                                    `json:"upgrade_mode"`
	VmImage                            string                                    `json:"vm_image"`
	VmssZonalUpgradeMode               string                                    `json:"vmss_zonal_upgrade_mode"`
	AzureActiveDirectory               []AzureActiveDirectoryState               `json:"azure_active_directory"`
	Certificate                        []CertificateState                        `json:"certificate"`
	CertificateCommonNames             []CertificateCommonNamesState             `json:"certificate_common_names"`
	ClientCertificateCommonName        []ClientCertificateCommonNameState        `json:"client_certificate_common_name"`
	ClientCertificateThumbprint        []ClientCertificateThumbprintState        `json:"client_certificate_thumbprint"`
	DiagnosticsConfig                  []DiagnosticsConfigState                  `json:"diagnostics_config"`
	FabricSettings                     []FabricSettingsState                     `json:"fabric_settings"`
	NodeType                           []NodeTypeState                           `json:"node_type"`
	ReverseProxyCertificate            []ReverseProxyCertificateState            `json:"reverse_proxy_certificate"`
	ReverseProxyCertificateCommonNames []ReverseProxyCertificateCommonNamesState `json:"reverse_proxy_certificate_common_names"`
	Timeouts                           *TimeoutsState                            `json:"timeouts"`
	UpgradePolicy                      []UpgradePolicyState                      `json:"upgrade_policy"`
}
