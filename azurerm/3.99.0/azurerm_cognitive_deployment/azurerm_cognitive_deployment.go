// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cognitive_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cognitive_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCognitiveDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acd *Resource) Type() string {
	return "azurerm_cognitive_deployment"
}

// LocalName returns the local name for [Resource].
func (acd *Resource) LocalName() string {
	return acd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acd *Resource) Configuration() interface{} {
	return acd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acd *Resource) Dependencies() terra.Dependencies {
	return acd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acd *Resource) LifecycleManagement() *terra.Lifecycle {
	return acd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acd *Resource) Attributes() azurermCognitiveDeploymentAttributes {
	return azurermCognitiveDeploymentAttributes{ref: terra.ReferenceResource(acd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acd *Resource) ImportState(state io.Reader) error {
	acd.state = &azurermCognitiveDeploymentState{}
	if err := json.NewDecoder(state).Decode(acd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acd.Type(), acd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acd *Resource) State() (*azurermCognitiveDeploymentState, bool) {
	return acd.state, acd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acd *Resource) StateMust() *azurermCognitiveDeploymentState {
	if acd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acd.Type(), acd.LocalName()))
	}
	return acd.state
}

// Args contains the configurations for azurerm_cognitive_deployment.
type Args struct {
	// CognitiveAccountId: string, required
	CognitiveAccountId terra.StringValue `hcl:"cognitive_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RaiPolicyName: string, optional
	RaiPolicyName terra.StringValue `hcl:"rai_policy_name,attr"`
	// VersionUpgradeOption: string, optional
	VersionUpgradeOption terra.StringValue `hcl:"version_upgrade_option,attr"`
	// Model: required
	Model *Model `hcl:"model,block" validate:"required"`
	// Scale: required
	Scale *Scale `hcl:"scale,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCognitiveDeploymentAttributes struct {
	ref terra.Reference
}

// CognitiveAccountId returns a reference to field cognitive_account_id of azurerm_cognitive_deployment.
func (acd azurermCognitiveDeploymentAttributes) CognitiveAccountId() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("cognitive_account_id"))
}

// Id returns a reference to field id of azurerm_cognitive_deployment.
func (acd azurermCognitiveDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cognitive_deployment.
func (acd azurermCognitiveDeploymentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("name"))
}

// RaiPolicyName returns a reference to field rai_policy_name of azurerm_cognitive_deployment.
func (acd azurermCognitiveDeploymentAttributes) RaiPolicyName() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("rai_policy_name"))
}

// VersionUpgradeOption returns a reference to field version_upgrade_option of azurerm_cognitive_deployment.
func (acd azurermCognitiveDeploymentAttributes) VersionUpgradeOption() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("version_upgrade_option"))
}

func (acd azurermCognitiveDeploymentAttributes) Model() terra.ListValue[ModelAttributes] {
	return terra.ReferenceAsList[ModelAttributes](acd.ref.Append("model"))
}

func (acd azurermCognitiveDeploymentAttributes) Scale() terra.ListValue[ScaleAttributes] {
	return terra.ReferenceAsList[ScaleAttributes](acd.ref.Append("scale"))
}

func (acd azurermCognitiveDeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acd.ref.Append("timeouts"))
}

type azurermCognitiveDeploymentState struct {
	CognitiveAccountId   string         `json:"cognitive_account_id"`
	Id                   string         `json:"id"`
	Name                 string         `json:"name"`
	RaiPolicyName        string         `json:"rai_policy_name"`
	VersionUpgradeOption string         `json:"version_upgrade_option"`
	Model                []ModelState   `json:"model"`
	Scale                []ScaleState   `json:"scale"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
