// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_maintenance_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataInstallPatchesAttributes struct {
	ref terra.Reference
}

func (ip DataInstallPatchesAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip DataInstallPatchesAttributes) InternalWithRef(ref terra.Reference) DataInstallPatchesAttributes {
	return DataInstallPatchesAttributes{ref: ref}
}

func (ip DataInstallPatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip DataInstallPatchesAttributes) Reboot() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("reboot"))
}

func (ip DataInstallPatchesAttributes) Linux() terra.ListValue[DataInstallPatchesLinuxAttributes] {
	return terra.ReferenceAsList[DataInstallPatchesLinuxAttributes](ip.ref.Append("linux"))
}

func (ip DataInstallPatchesAttributes) Windows() terra.ListValue[DataInstallPatchesWindowsAttributes] {
	return terra.ReferenceAsList[DataInstallPatchesWindowsAttributes](ip.ref.Append("windows"))
}

type DataInstallPatchesLinuxAttributes struct {
	ref terra.Reference
}

func (l DataInstallPatchesLinuxAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DataInstallPatchesLinuxAttributes) InternalWithRef(ref terra.Reference) DataInstallPatchesLinuxAttributes {
	return DataInstallPatchesLinuxAttributes{ref: ref}
}

func (l DataInstallPatchesLinuxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DataInstallPatchesLinuxAttributes) ClassificationsToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("classifications_to_include"))
}

func (l DataInstallPatchesLinuxAttributes) PackageNamesMaskToExclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("package_names_mask_to_exclude"))
}

func (l DataInstallPatchesLinuxAttributes) PackageNamesMaskToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("package_names_mask_to_include"))
}

type DataInstallPatchesWindowsAttributes struct {
	ref terra.Reference
}

func (w DataInstallPatchesWindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w DataInstallPatchesWindowsAttributes) InternalWithRef(ref terra.Reference) DataInstallPatchesWindowsAttributes {
	return DataInstallPatchesWindowsAttributes{ref: ref}
}

func (w DataInstallPatchesWindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w DataInstallPatchesWindowsAttributes) ClassificationsToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("classifications_to_include"))
}

func (w DataInstallPatchesWindowsAttributes) KbNumbersToExclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("kb_numbers_to_exclude"))
}

func (w DataInstallPatchesWindowsAttributes) KbNumbersToInclude() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](w.ref.Append("kb_numbers_to_include"))
}

type DataWindowAttributes struct {
	ref terra.Reference
}

func (w DataWindowAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w DataWindowAttributes) InternalWithRef(ref terra.Reference) DataWindowAttributes {
	return DataWindowAttributes{ref: ref}
}

func (w DataWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w DataWindowAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("duration"))
}

func (w DataWindowAttributes) ExpirationDateTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("expiration_date_time"))
}

func (w DataWindowAttributes) RecurEvery() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("recur_every"))
}

func (w DataWindowAttributes) StartDateTime() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("start_date_time"))
}

func (w DataWindowAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("time_zone"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataInstallPatchesState struct {
	Reboot  string                           `json:"reboot"`
	Linux   []DataInstallPatchesLinuxState   `json:"linux"`
	Windows []DataInstallPatchesWindowsState `json:"windows"`
}

type DataInstallPatchesLinuxState struct {
	ClassificationsToInclude  []string `json:"classifications_to_include"`
	PackageNamesMaskToExclude []string `json:"package_names_mask_to_exclude"`
	PackageNamesMaskToInclude []string `json:"package_names_mask_to_include"`
}

type DataInstallPatchesWindowsState struct {
	ClassificationsToInclude []string `json:"classifications_to_include"`
	KbNumbersToExclude       []string `json:"kb_numbers_to_exclude"`
	KbNumbersToInclude       []string `json:"kb_numbers_to_include"`
}

type DataWindowState struct {
	Duration           string `json:"duration"`
	ExpirationDateTime string `json:"expiration_date_time"`
	RecurEvery         string `json:"recur_every"`
	StartDateTime      string `json:"start_date_time"`
	TimeZone           string `json:"time_zone"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
