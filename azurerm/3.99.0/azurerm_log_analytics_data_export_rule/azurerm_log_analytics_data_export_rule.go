// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_log_analytics_data_export_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_log_analytics_data_export_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogAnalyticsDataExportRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alader *Resource) Type() string {
	return "azurerm_log_analytics_data_export_rule"
}

// LocalName returns the local name for [Resource].
func (alader *Resource) LocalName() string {
	return alader.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alader *Resource) Configuration() interface{} {
	return alader.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alader *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alader)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alader *Resource) Dependencies() terra.Dependencies {
	return alader.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alader *Resource) LifecycleManagement() *terra.Lifecycle {
	return alader.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alader *Resource) Attributes() azurermLogAnalyticsDataExportRuleAttributes {
	return azurermLogAnalyticsDataExportRuleAttributes{ref: terra.ReferenceResource(alader)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alader *Resource) ImportState(state io.Reader) error {
	alader.state = &azurermLogAnalyticsDataExportRuleState{}
	if err := json.NewDecoder(state).Decode(alader.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alader.Type(), alader.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alader *Resource) State() (*azurermLogAnalyticsDataExportRuleState, bool) {
	return alader.state, alader.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alader *Resource) StateMust() *azurermLogAnalyticsDataExportRuleState {
	if alader.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alader.Type(), alader.LocalName()))
	}
	return alader.state
}

// Args contains the configurations for azurerm_log_analytics_data_export_rule.
type Args struct {
	// DestinationResourceId: string, required
	DestinationResourceId terra.StringValue `hcl:"destination_resource_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TableNames: set of string, required
	TableNames terra.SetValue[terra.StringValue] `hcl:"table_names,attr" validate:"required"`
	// WorkspaceResourceId: string, required
	WorkspaceResourceId terra.StringValue `hcl:"workspace_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogAnalyticsDataExportRuleAttributes struct {
	ref terra.Reference
}

// DestinationResourceId returns a reference to field destination_resource_id of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) DestinationResourceId() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("destination_resource_id"))
}

// Enabled returns a reference to field enabled of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(alader.ref.Append("enabled"))
}

// ExportRuleId returns a reference to field export_rule_id of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) ExportRuleId() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("export_rule_id"))
}

// Id returns a reference to field id of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("resource_group_name"))
}

// TableNames returns a reference to field table_names of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) TableNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alader.ref.Append("table_names"))
}

// WorkspaceResourceId returns a reference to field workspace_resource_id of azurerm_log_analytics_data_export_rule.
func (alader azurermLogAnalyticsDataExportRuleAttributes) WorkspaceResourceId() terra.StringValue {
	return terra.ReferenceAsString(alader.ref.Append("workspace_resource_id"))
}

func (alader azurermLogAnalyticsDataExportRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alader.ref.Append("timeouts"))
}

type azurermLogAnalyticsDataExportRuleState struct {
	DestinationResourceId string         `json:"destination_resource_id"`
	Enabled               bool           `json:"enabled"`
	ExportRuleId          string         `json:"export_rule_id"`
	Id                    string         `json:"id"`
	Name                  string         `json:"name"`
	ResourceGroupName     string         `json:"resource_group_name"`
	TableNames            []string       `json:"table_names"`
	WorkspaceResourceId   string         `json:"workspace_resource_id"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
