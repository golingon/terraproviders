// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acg *Resource) Type() string {
	return "azurerm_container_group"
}

// LocalName returns the local name for [Resource].
func (acg *Resource) LocalName() string {
	return acg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acg *Resource) Configuration() interface{} {
	return acg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acg *Resource) Dependencies() terra.Dependencies {
	return acg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acg *Resource) Attributes() azurermContainerGroupAttributes {
	return azurermContainerGroupAttributes{ref: terra.ReferenceResource(acg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acg *Resource) ImportState(state io.Reader) error {
	acg.state = &azurermContainerGroupState{}
	if err := json.NewDecoder(state).Decode(acg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acg.Type(), acg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acg *Resource) State() (*azurermContainerGroupState, bool) {
	return acg.state, acg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acg *Resource) StateMust() *azurermContainerGroupState {
	if acg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acg.Type(), acg.LocalName()))
	}
	return acg.state
}

// Args contains the configurations for azurerm_container_group.
type Args struct {
	// DnsNameLabel: string, optional
	DnsNameLabel terra.StringValue `hcl:"dns_name_label,attr"`
	// DnsNameLabelReusePolicy: string, optional
	DnsNameLabelReusePolicy terra.StringValue `hcl:"dns_name_label_reuse_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// KeyVaultUserAssignedIdentityId: string, optional
	KeyVaultUserAssignedIdentityId terra.StringValue `hcl:"key_vault_user_assigned_identity_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkProfileId: string, optional
	NetworkProfileId terra.StringValue `hcl:"network_profile_id,attr"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RestartPolicy: string, optional
	RestartPolicy terra.StringValue `hcl:"restart_policy,attr"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// ExposedPort: min=0
	ExposedPort []ExposedPort `hcl:"exposed_port,block" validate:"min=0"`
	// Container: min=1
	Container []Container `hcl:"container,block" validate:"min=1"`
	// Diagnostics: optional
	Diagnostics *Diagnostics `hcl:"diagnostics,block"`
	// DnsConfig: optional
	DnsConfig *DnsConfig `hcl:"dns_config,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// ImageRegistryCredential: min=0
	ImageRegistryCredential []ImageRegistryCredential `hcl:"image_registry_credential,block" validate:"min=0"`
	// InitContainer: min=0
	InitContainer []InitContainer `hcl:"init_container,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermContainerGroupAttributes struct {
	ref terra.Reference
}

// DnsNameLabel returns a reference to field dns_name_label of azurerm_container_group.
func (acg azurermContainerGroupAttributes) DnsNameLabel() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("dns_name_label"))
}

// DnsNameLabelReusePolicy returns a reference to field dns_name_label_reuse_policy of azurerm_container_group.
func (acg azurermContainerGroupAttributes) DnsNameLabelReusePolicy() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("dns_name_label_reuse_policy"))
}

// Fqdn returns a reference to field fqdn of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("fqdn"))
}

// Id returns a reference to field id of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of azurerm_container_group.
func (acg azurermContainerGroupAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("ip_address"))
}

// IpAddressType returns a reference to field ip_address_type of azurerm_container_group.
func (acg azurermContainerGroupAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("ip_address_type"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_container_group.
func (acg azurermContainerGroupAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("key_vault_key_id"))
}

// KeyVaultUserAssignedIdentityId returns a reference to field key_vault_user_assigned_identity_id of azurerm_container_group.
func (acg azurermContainerGroupAttributes) KeyVaultUserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("key_vault_user_assigned_identity_id"))
}

// Location returns a reference to field location of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("name"))
}

// NetworkProfileId returns a reference to field network_profile_id of azurerm_container_group.
func (acg azurermContainerGroupAttributes) NetworkProfileId() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("network_profile_id"))
}

// OsType returns a reference to field os_type of azurerm_container_group.
func (acg azurermContainerGroupAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("os_type"))
}

// Priority returns a reference to field priority of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("priority"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_container_group.
func (acg azurermContainerGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("resource_group_name"))
}

// RestartPolicy returns a reference to field restart_policy of azurerm_container_group.
func (acg azurermContainerGroupAttributes) RestartPolicy() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("restart_policy"))
}

// Sku returns a reference to field sku of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("sku"))
}

// SubnetIds returns a reference to field subnet_ids of azurerm_container_group.
func (acg azurermContainerGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acg.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acg.ref.Append("tags"))
}

// Zones returns a reference to field zones of azurerm_container_group.
func (acg azurermContainerGroupAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acg.ref.Append("zones"))
}

func (acg azurermContainerGroupAttributes) ExposedPort() terra.SetValue[ExposedPortAttributes] {
	return terra.ReferenceAsSet[ExposedPortAttributes](acg.ref.Append("exposed_port"))
}

func (acg azurermContainerGroupAttributes) Container() terra.ListValue[ContainerAttributes] {
	return terra.ReferenceAsList[ContainerAttributes](acg.ref.Append("container"))
}

func (acg azurermContainerGroupAttributes) Diagnostics() terra.ListValue[DiagnosticsAttributes] {
	return terra.ReferenceAsList[DiagnosticsAttributes](acg.ref.Append("diagnostics"))
}

func (acg azurermContainerGroupAttributes) DnsConfig() terra.ListValue[DnsConfigAttributes] {
	return terra.ReferenceAsList[DnsConfigAttributes](acg.ref.Append("dns_config"))
}

func (acg azurermContainerGroupAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](acg.ref.Append("identity"))
}

func (acg azurermContainerGroupAttributes) ImageRegistryCredential() terra.ListValue[ImageRegistryCredentialAttributes] {
	return terra.ReferenceAsList[ImageRegistryCredentialAttributes](acg.ref.Append("image_registry_credential"))
}

func (acg azurermContainerGroupAttributes) InitContainer() terra.ListValue[InitContainerAttributes] {
	return terra.ReferenceAsList[InitContainerAttributes](acg.ref.Append("init_container"))
}

func (acg azurermContainerGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acg.ref.Append("timeouts"))
}

type azurermContainerGroupState struct {
	DnsNameLabel                   string                         `json:"dns_name_label"`
	DnsNameLabelReusePolicy        string                         `json:"dns_name_label_reuse_policy"`
	Fqdn                           string                         `json:"fqdn"`
	Id                             string                         `json:"id"`
	IpAddress                      string                         `json:"ip_address"`
	IpAddressType                  string                         `json:"ip_address_type"`
	KeyVaultKeyId                  string                         `json:"key_vault_key_id"`
	KeyVaultUserAssignedIdentityId string                         `json:"key_vault_user_assigned_identity_id"`
	Location                       string                         `json:"location"`
	Name                           string                         `json:"name"`
	NetworkProfileId               string                         `json:"network_profile_id"`
	OsType                         string                         `json:"os_type"`
	Priority                       string                         `json:"priority"`
	ResourceGroupName              string                         `json:"resource_group_name"`
	RestartPolicy                  string                         `json:"restart_policy"`
	Sku                            string                         `json:"sku"`
	SubnetIds                      []string                       `json:"subnet_ids"`
	Tags                           map[string]string              `json:"tags"`
	Zones                          []string                       `json:"zones"`
	ExposedPort                    []ExposedPortState             `json:"exposed_port"`
	Container                      []ContainerState               `json:"container"`
	Diagnostics                    []DiagnosticsState             `json:"diagnostics"`
	DnsConfig                      []DnsConfigState               `json:"dns_config"`
	Identity                       []IdentityState                `json:"identity"`
	ImageRegistryCredential        []ImageRegistryCredentialState `json:"image_registry_credential"`
	InitContainer                  []InitContainerState           `json:"init_container"`
	Timeouts                       *TimeoutsState                 `json:"timeouts"`
}
