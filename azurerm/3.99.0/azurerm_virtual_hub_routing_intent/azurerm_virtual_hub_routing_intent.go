// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_hub_routing_intent

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_hub_routing_intent.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualHubRoutingIntentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avhri *Resource) Type() string {
	return "azurerm_virtual_hub_routing_intent"
}

// LocalName returns the local name for [Resource].
func (avhri *Resource) LocalName() string {
	return avhri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avhri *Resource) Configuration() interface{} {
	return avhri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avhri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avhri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avhri *Resource) Dependencies() terra.Dependencies {
	return avhri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avhri *Resource) LifecycleManagement() *terra.Lifecycle {
	return avhri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avhri *Resource) Attributes() azurermVirtualHubRoutingIntentAttributes {
	return azurermVirtualHubRoutingIntentAttributes{ref: terra.ReferenceResource(avhri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avhri *Resource) ImportState(state io.Reader) error {
	avhri.state = &azurermVirtualHubRoutingIntentState{}
	if err := json.NewDecoder(state).Decode(avhri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avhri.Type(), avhri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avhri *Resource) State() (*azurermVirtualHubRoutingIntentState, bool) {
	return avhri.state, avhri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avhri *Resource) StateMust() *azurermVirtualHubRoutingIntentState {
	if avhri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avhri.Type(), avhri.LocalName()))
	}
	return avhri.state
}

// Args contains the configurations for azurerm_virtual_hub_routing_intent.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// RoutingPolicy: min=1
	RoutingPolicy []RoutingPolicy `hcl:"routing_policy,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualHubRoutingIntentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_virtual_hub_routing_intent.
func (avhri azurermVirtualHubRoutingIntentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avhri.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_virtual_hub_routing_intent.
func (avhri azurermVirtualHubRoutingIntentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avhri.ref.Append("name"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_virtual_hub_routing_intent.
func (avhri azurermVirtualHubRoutingIntentAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(avhri.ref.Append("virtual_hub_id"))
}

func (avhri azurermVirtualHubRoutingIntentAttributes) RoutingPolicy() terra.ListValue[RoutingPolicyAttributes] {
	return terra.ReferenceAsList[RoutingPolicyAttributes](avhri.ref.Append("routing_policy"))
}

func (avhri azurermVirtualHubRoutingIntentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avhri.ref.Append("timeouts"))
}

type azurermVirtualHubRoutingIntentState struct {
	Id            string               `json:"id"`
	Name          string               `json:"name"`
	VirtualHubId  string               `json:"virtual_hub_id"`
	RoutingPolicy []RoutingPolicyState `json:"routing_policy"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
