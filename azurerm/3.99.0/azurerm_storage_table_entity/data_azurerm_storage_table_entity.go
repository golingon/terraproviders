// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_table_entity

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource azurerm_storage_table_entity.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aste *DataSource) DataSource() string {
	return "azurerm_storage_table_entity"
}

// LocalName returns the local name for [DataSource].
func (aste *DataSource) LocalName() string {
	return aste.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aste *DataSource) Configuration() interface{} {
	return aste.Args
}

// Attributes returns the attributes for [DataSource].
func (aste *DataSource) Attributes() dataAzurermStorageTableEntityAttributes {
	return dataAzurermStorageTableEntityAttributes{ref: terra.ReferenceDataSource(aste)}
}

// DataArgs contains the configurations for azurerm_storage_table_entity.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
	// RowKey: string, required
	RowKey terra.StringValue `hcl:"row_key,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAzurermStorageTableEntityAttributes struct {
	ref terra.Reference
}

// Entity returns a reference to field entity of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) Entity() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aste.ref.Append("entity"))
}

// Id returns a reference to field id of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("id"))
}

// PartitionKey returns a reference to field partition_key of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("partition_key"))
}

// RowKey returns a reference to field row_key of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) RowKey() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("row_key"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("storage_account_name"))
}

// TableName returns a reference to field table_name of azurerm_storage_table_entity.
func (aste dataAzurermStorageTableEntityAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("table_name"))
}

func (aste dataAzurermStorageTableEntityAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](aste.ref.Append("timeouts"))
}
