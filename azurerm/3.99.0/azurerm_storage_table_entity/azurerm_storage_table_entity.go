// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_table_entity

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_table_entity.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageTableEntityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aste *Resource) Type() string {
	return "azurerm_storage_table_entity"
}

// LocalName returns the local name for [Resource].
func (aste *Resource) LocalName() string {
	return aste.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aste *Resource) Configuration() interface{} {
	return aste.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aste *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aste)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aste *Resource) Dependencies() terra.Dependencies {
	return aste.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aste *Resource) LifecycleManagement() *terra.Lifecycle {
	return aste.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aste *Resource) Attributes() azurermStorageTableEntityAttributes {
	return azurermStorageTableEntityAttributes{ref: terra.ReferenceResource(aste)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aste *Resource) ImportState(state io.Reader) error {
	aste.state = &azurermStorageTableEntityState{}
	if err := json.NewDecoder(state).Decode(aste.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aste.Type(), aste.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aste *Resource) State() (*azurermStorageTableEntityState, bool) {
	return aste.state, aste.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aste *Resource) StateMust() *azurermStorageTableEntityState {
	if aste.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aste.Type(), aste.LocalName()))
	}
	return aste.state
}

// Args contains the configurations for azurerm_storage_table_entity.
type Args struct {
	// Entity: map of string, required
	Entity terra.MapValue[terra.StringValue] `hcl:"entity,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
	// RowKey: string, required
	RowKey terra.StringValue `hcl:"row_key,attr" validate:"required"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// StorageTableId: string, optional
	StorageTableId terra.StringValue `hcl:"storage_table_id,attr"`
	// TableName: string, optional
	TableName terra.StringValue `hcl:"table_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageTableEntityAttributes struct {
	ref terra.Reference
}

// Entity returns a reference to field entity of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) Entity() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aste.ref.Append("entity"))
}

// Id returns a reference to field id of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("id"))
}

// PartitionKey returns a reference to field partition_key of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("partition_key"))
}

// RowKey returns a reference to field row_key of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) RowKey() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("row_key"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("storage_account_name"))
}

// StorageTableId returns a reference to field storage_table_id of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) StorageTableId() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("storage_table_id"))
}

// TableName returns a reference to field table_name of azurerm_storage_table_entity.
func (aste azurermStorageTableEntityAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(aste.ref.Append("table_name"))
}

func (aste azurermStorageTableEntityAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aste.ref.Append("timeouts"))
}

type azurermStorageTableEntityState struct {
	Entity             map[string]string `json:"entity"`
	Id                 string            `json:"id"`
	PartitionKey       string            `json:"partition_key"`
	RowKey             string            `json:"row_key"`
	StorageAccountName string            `json:"storage_account_name"`
	StorageTableId     string            `json:"storage_table_id"`
	TableName          string            `json:"table_name"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
