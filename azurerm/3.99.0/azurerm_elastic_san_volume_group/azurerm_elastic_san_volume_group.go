// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_elastic_san_volume_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_elastic_san_volume_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermElasticSanVolumeGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aesvg *Resource) Type() string {
	return "azurerm_elastic_san_volume_group"
}

// LocalName returns the local name for [Resource].
func (aesvg *Resource) LocalName() string {
	return aesvg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aesvg *Resource) Configuration() interface{} {
	return aesvg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aesvg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aesvg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aesvg *Resource) Dependencies() terra.Dependencies {
	return aesvg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aesvg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aesvg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aesvg *Resource) Attributes() azurermElasticSanVolumeGroupAttributes {
	return azurermElasticSanVolumeGroupAttributes{ref: terra.ReferenceResource(aesvg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aesvg *Resource) ImportState(state io.Reader) error {
	aesvg.state = &azurermElasticSanVolumeGroupState{}
	if err := json.NewDecoder(state).Decode(aesvg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesvg.Type(), aesvg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aesvg *Resource) State() (*azurermElasticSanVolumeGroupState, bool) {
	return aesvg.state, aesvg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aesvg *Resource) StateMust() *azurermElasticSanVolumeGroupState {
	if aesvg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesvg.Type(), aesvg.LocalName()))
	}
	return aesvg.state
}

// Args contains the configurations for azurerm_elastic_san_volume_group.
type Args struct {
	// ElasticSanId: string, required
	ElasticSanId terra.StringValue `hcl:"elastic_san_id,attr" validate:"required"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtocolType: string, optional
	ProtocolType terra.StringValue `hcl:"protocol_type,attr"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// NetworkRule: min=0
	NetworkRule []NetworkRule `hcl:"network_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermElasticSanVolumeGroupAttributes struct {
	ref terra.Reference
}

// ElasticSanId returns a reference to field elastic_san_id of azurerm_elastic_san_volume_group.
func (aesvg azurermElasticSanVolumeGroupAttributes) ElasticSanId() terra.StringValue {
	return terra.ReferenceAsString(aesvg.ref.Append("elastic_san_id"))
}

// EncryptionType returns a reference to field encryption_type of azurerm_elastic_san_volume_group.
func (aesvg azurermElasticSanVolumeGroupAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(aesvg.ref.Append("encryption_type"))
}

// Id returns a reference to field id of azurerm_elastic_san_volume_group.
func (aesvg azurermElasticSanVolumeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aesvg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_elastic_san_volume_group.
func (aesvg azurermElasticSanVolumeGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aesvg.ref.Append("name"))
}

// ProtocolType returns a reference to field protocol_type of azurerm_elastic_san_volume_group.
func (aesvg azurermElasticSanVolumeGroupAttributes) ProtocolType() terra.StringValue {
	return terra.ReferenceAsString(aesvg.ref.Append("protocol_type"))
}

func (aesvg azurermElasticSanVolumeGroupAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](aesvg.ref.Append("encryption"))
}

func (aesvg azurermElasticSanVolumeGroupAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aesvg.ref.Append("identity"))
}

func (aesvg azurermElasticSanVolumeGroupAttributes) NetworkRule() terra.ListValue[NetworkRuleAttributes] {
	return terra.ReferenceAsList[NetworkRuleAttributes](aesvg.ref.Append("network_rule"))
}

func (aesvg azurermElasticSanVolumeGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aesvg.ref.Append("timeouts"))
}

type azurermElasticSanVolumeGroupState struct {
	ElasticSanId   string             `json:"elastic_san_id"`
	EncryptionType string             `json:"encryption_type"`
	Id             string             `json:"id"`
	Name           string             `json:"name"`
	ProtocolType   string             `json:"protocol_type"`
	Encryption     []EncryptionState  `json:"encryption"`
	Identity       []IdentityState    `json:"identity"`
	NetworkRule    []NetworkRuleState `json:"network_rule"`
	Timeouts       *TimeoutsState     `json:"timeouts"`
}
