// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_machine_learning_datastore_blobstorage

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_machine_learning_datastore_blobstorage.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMachineLearningDatastoreBlobstorageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amldb *Resource) Type() string {
	return "azurerm_machine_learning_datastore_blobstorage"
}

// LocalName returns the local name for [Resource].
func (amldb *Resource) LocalName() string {
	return amldb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amldb *Resource) Configuration() interface{} {
	return amldb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amldb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amldb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amldb *Resource) Dependencies() terra.Dependencies {
	return amldb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amldb *Resource) LifecycleManagement() *terra.Lifecycle {
	return amldb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amldb *Resource) Attributes() azurermMachineLearningDatastoreBlobstorageAttributes {
	return azurermMachineLearningDatastoreBlobstorageAttributes{ref: terra.ReferenceResource(amldb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amldb *Resource) ImportState(state io.Reader) error {
	amldb.state = &azurermMachineLearningDatastoreBlobstorageState{}
	if err := json.NewDecoder(state).Decode(amldb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amldb.Type(), amldb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amldb *Resource) State() (*azurermMachineLearningDatastoreBlobstorageState, bool) {
	return amldb.state, amldb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amldb *Resource) StateMust() *azurermMachineLearningDatastoreBlobstorageState {
	if amldb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amldb.Type(), amldb.LocalName()))
	}
	return amldb.state
}

// Args contains the configurations for azurerm_machine_learning_datastore_blobstorage.
type Args struct {
	// AccountKey: string, optional
	AccountKey terra.StringValue `hcl:"account_key,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceDataAuthIdentity: string, optional
	ServiceDataAuthIdentity terra.StringValue `hcl:"service_data_auth_identity,attr"`
	// SharedAccessSignature: string, optional
	SharedAccessSignature terra.StringValue `hcl:"shared_access_signature,attr"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMachineLearningDatastoreBlobstorageAttributes struct {
	ref terra.Reference
}

// AccountKey returns a reference to field account_key of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) AccountKey() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("account_key"))
}

// Description returns a reference to field description of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("id"))
}

// IsDefault returns a reference to field is_default of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(amldb.ref.Append("is_default"))
}

// Name returns a reference to field name of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("name"))
}

// ServiceDataAuthIdentity returns a reference to field service_data_auth_identity of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) ServiceDataAuthIdentity() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("service_data_auth_identity"))
}

// SharedAccessSignature returns a reference to field shared_access_signature of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) SharedAccessSignature() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("shared_access_signature"))
}

// StorageContainerId returns a reference to field storage_container_id of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("storage_container_id"))
}

// Tags returns a reference to field tags of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amldb.ref.Append("tags"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_machine_learning_datastore_blobstorage.
func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(amldb.ref.Append("workspace_id"))
}

func (amldb azurermMachineLearningDatastoreBlobstorageAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amldb.ref.Append("timeouts"))
}

type azurermMachineLearningDatastoreBlobstorageState struct {
	AccountKey              string            `json:"account_key"`
	Description             string            `json:"description"`
	Id                      string            `json:"id"`
	IsDefault               bool              `json:"is_default"`
	Name                    string            `json:"name"`
	ServiceDataAuthIdentity string            `json:"service_data_auth_identity"`
	SharedAccessSignature   string            `json:"shared_access_signature"`
	StorageContainerId      string            `json:"storage_container_id"`
	Tags                    map[string]string `json:"tags"`
	WorkspaceId             string            `json:"workspace_id"`
	Timeouts                *TimeoutsState    `json:"timeouts"`
}
