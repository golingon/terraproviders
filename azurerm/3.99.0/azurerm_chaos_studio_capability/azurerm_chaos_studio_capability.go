// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_chaos_studio_capability

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_chaos_studio_capability.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermChaosStudioCapabilityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acsc *Resource) Type() string {
	return "azurerm_chaos_studio_capability"
}

// LocalName returns the local name for [Resource].
func (acsc *Resource) LocalName() string {
	return acsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acsc *Resource) Configuration() interface{} {
	return acsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acsc *Resource) Dependencies() terra.Dependencies {
	return acsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acsc *Resource) Attributes() azurermChaosStudioCapabilityAttributes {
	return azurermChaosStudioCapabilityAttributes{ref: terra.ReferenceResource(acsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acsc *Resource) ImportState(state io.Reader) error {
	acsc.state = &azurermChaosStudioCapabilityState{}
	if err := json.NewDecoder(state).Decode(acsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsc.Type(), acsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acsc *Resource) State() (*azurermChaosStudioCapabilityState, bool) {
	return acsc.state, acsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acsc *Resource) StateMust() *azurermChaosStudioCapabilityState {
	if acsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsc.Type(), acsc.LocalName()))
	}
	return acsc.state
}

// Args contains the configurations for azurerm_chaos_studio_capability.
type Args struct {
	// CapabilityType: string, required
	CapabilityType terra.StringValue `hcl:"capability_type,attr" validate:"required"`
	// ChaosStudioTargetId: string, required
	ChaosStudioTargetId terra.StringValue `hcl:"chaos_studio_target_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermChaosStudioCapabilityAttributes struct {
	ref terra.Reference
}

// CapabilityType returns a reference to field capability_type of azurerm_chaos_studio_capability.
func (acsc azurermChaosStudioCapabilityAttributes) CapabilityType() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("capability_type"))
}

// ChaosStudioTargetId returns a reference to field chaos_studio_target_id of azurerm_chaos_studio_capability.
func (acsc azurermChaosStudioCapabilityAttributes) ChaosStudioTargetId() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("chaos_studio_target_id"))
}

// Id returns a reference to field id of azurerm_chaos_studio_capability.
func (acsc azurermChaosStudioCapabilityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("id"))
}

// Urn returns a reference to field urn of azurerm_chaos_studio_capability.
func (acsc azurermChaosStudioCapabilityAttributes) Urn() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("urn"))
}

func (acsc azurermChaosStudioCapabilityAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acsc.ref.Append("timeouts"))
}

type azurermChaosStudioCapabilityState struct {
	CapabilityType      string         `json:"capability_type"`
	ChaosStudioTargetId string         `json:"chaos_studio_target_id"`
	Id                  string         `json:"id"`
	Urn                 string         `json:"urn"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
