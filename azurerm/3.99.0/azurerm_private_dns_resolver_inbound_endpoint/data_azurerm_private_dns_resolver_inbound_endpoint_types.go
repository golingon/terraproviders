// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_private_dns_resolver_inbound_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataIpConfigurationsAttributes struct {
	ref terra.Reference
}

func (ic DataIpConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataIpConfigurationsAttributes) InternalWithRef(ref terra.Reference) DataIpConfigurationsAttributes {
	return DataIpConfigurationsAttributes{ref: ref}
}

func (ic DataIpConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataIpConfigurationsAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address"))
}

func (ic DataIpConfigurationsAttributes) PrivateIpAllocationMethod() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_allocation_method"))
}

func (ic DataIpConfigurationsAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataIpConfigurationsState struct {
	PrivateIpAddress          string `json:"private_ip_address"`
	PrivateIpAllocationMethod string `json:"private_ip_allocation_method"`
	SubnetId                  string `json:"subnet_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
