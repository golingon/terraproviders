// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_shared_image_version

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetRegion struct {
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// ExcludeFromLatestEnabled: bool, optional
	ExcludeFromLatestEnabled terra.BoolValue `hcl:"exclude_from_latest_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegionalReplicaCount: number, required
	RegionalReplicaCount terra.NumberValue `hcl:"regional_replica_count,attr" validate:"required"`
	// StorageAccountType: string, optional
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TargetRegionAttributes struct {
	ref terra.Reference
}

func (tr TargetRegionAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TargetRegionAttributes) InternalWithRef(ref terra.Reference) TargetRegionAttributes {
	return TargetRegionAttributes{ref: ref}
}

func (tr TargetRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TargetRegionAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("disk_encryption_set_id"))
}

func (tr TargetRegionAttributes) ExcludeFromLatestEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(tr.ref.Append("exclude_from_latest_enabled"))
}

func (tr TargetRegionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("name"))
}

func (tr TargetRegionAttributes) RegionalReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(tr.ref.Append("regional_replica_count"))
}

func (tr TargetRegionAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("storage_account_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TargetRegionState struct {
	DiskEncryptionSetId      string  `json:"disk_encryption_set_id"`
	ExcludeFromLatestEnabled bool    `json:"exclude_from_latest_enabled"`
	Name                     string  `json:"name"`
	RegionalReplicaCount     float64 `json:"regional_replica_count"`
	StorageAccountType       string  `json:"storage_account_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
