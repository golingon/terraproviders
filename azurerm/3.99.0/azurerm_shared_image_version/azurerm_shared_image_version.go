// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_shared_image_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_shared_image_version.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSharedImageVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asiv *Resource) Type() string {
	return "azurerm_shared_image_version"
}

// LocalName returns the local name for [Resource].
func (asiv *Resource) LocalName() string {
	return asiv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asiv *Resource) Configuration() interface{} {
	return asiv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asiv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asiv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asiv *Resource) Dependencies() terra.Dependencies {
	return asiv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asiv *Resource) LifecycleManagement() *terra.Lifecycle {
	return asiv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asiv *Resource) Attributes() azurermSharedImageVersionAttributes {
	return azurermSharedImageVersionAttributes{ref: terra.ReferenceResource(asiv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asiv *Resource) ImportState(state io.Reader) error {
	asiv.state = &azurermSharedImageVersionState{}
	if err := json.NewDecoder(state).Decode(asiv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asiv.Type(), asiv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asiv *Resource) State() (*azurermSharedImageVersionState, bool) {
	return asiv.state, asiv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asiv *Resource) StateMust() *azurermSharedImageVersionState {
	if asiv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asiv.Type(), asiv.LocalName()))
	}
	return asiv.state
}

// Args contains the configurations for azurerm_shared_image_version.
type Args struct {
	// BlobUri: string, optional
	BlobUri terra.StringValue `hcl:"blob_uri,attr"`
	// DeletionOfReplicatedLocationsEnabled: bool, optional
	DeletionOfReplicatedLocationsEnabled terra.BoolValue `hcl:"deletion_of_replicated_locations_enabled,attr"`
	// EndOfLifeDate: string, optional
	EndOfLifeDate terra.StringValue `hcl:"end_of_life_date,attr"`
	// ExcludeFromLatest: bool, optional
	ExcludeFromLatest terra.BoolValue `hcl:"exclude_from_latest,attr"`
	// GalleryName: string, required
	GalleryName terra.StringValue `hcl:"gallery_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedImageId: string, optional
	ManagedImageId terra.StringValue `hcl:"managed_image_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OsDiskSnapshotId: string, optional
	OsDiskSnapshotId terra.StringValue `hcl:"os_disk_snapshot_id,attr"`
	// ReplicationMode: string, optional
	ReplicationMode terra.StringValue `hcl:"replication_mode,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetRegion: min=1
	TargetRegion []TargetRegion `hcl:"target_region,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSharedImageVersionAttributes struct {
	ref terra.Reference
}

// BlobUri returns a reference to field blob_uri of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("blob_uri"))
}

// DeletionOfReplicatedLocationsEnabled returns a reference to field deletion_of_replicated_locations_enabled of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) DeletionOfReplicatedLocationsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asiv.ref.Append("deletion_of_replicated_locations_enabled"))
}

// EndOfLifeDate returns a reference to field end_of_life_date of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) EndOfLifeDate() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("end_of_life_date"))
}

// ExcludeFromLatest returns a reference to field exclude_from_latest of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceAsBool(asiv.ref.Append("exclude_from_latest"))
}

// GalleryName returns a reference to field gallery_name of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) GalleryName() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("gallery_name"))
}

// Id returns a reference to field id of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("id"))
}

// ImageName returns a reference to field image_name of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("image_name"))
}

// Location returns a reference to field location of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("location"))
}

// ManagedImageId returns a reference to field managed_image_id of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) ManagedImageId() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("managed_image_id"))
}

// Name returns a reference to field name of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("name"))
}

// OsDiskSnapshotId returns a reference to field os_disk_snapshot_id of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) OsDiskSnapshotId() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("os_disk_snapshot_id"))
}

// ReplicationMode returns a reference to field replication_mode of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) ReplicationMode() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("replication_mode"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("resource_group_name"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("storage_account_id"))
}

// Tags returns a reference to field tags of azurerm_shared_image_version.
func (asiv azurermSharedImageVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asiv.ref.Append("tags"))
}

func (asiv azurermSharedImageVersionAttributes) TargetRegion() terra.ListValue[TargetRegionAttributes] {
	return terra.ReferenceAsList[TargetRegionAttributes](asiv.ref.Append("target_region"))
}

func (asiv azurermSharedImageVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asiv.ref.Append("timeouts"))
}

type azurermSharedImageVersionState struct {
	BlobUri                              string              `json:"blob_uri"`
	DeletionOfReplicatedLocationsEnabled bool                `json:"deletion_of_replicated_locations_enabled"`
	EndOfLifeDate                        string              `json:"end_of_life_date"`
	ExcludeFromLatest                    bool                `json:"exclude_from_latest"`
	GalleryName                          string              `json:"gallery_name"`
	Id                                   string              `json:"id"`
	ImageName                            string              `json:"image_name"`
	Location                             string              `json:"location"`
	ManagedImageId                       string              `json:"managed_image_id"`
	Name                                 string              `json:"name"`
	OsDiskSnapshotId                     string              `json:"os_disk_snapshot_id"`
	ReplicationMode                      string              `json:"replication_mode"`
	ResourceGroupName                    string              `json:"resource_group_name"`
	StorageAccountId                     string              `json:"storage_account_id"`
	Tags                                 map[string]string   `json:"tags"`
	TargetRegion                         []TargetRegionState `json:"target_region"`
	Timeouts                             *TimeoutsState      `json:"timeouts"`
}
