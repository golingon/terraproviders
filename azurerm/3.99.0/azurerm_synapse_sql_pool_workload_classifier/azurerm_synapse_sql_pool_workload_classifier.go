// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_sql_pool_workload_classifier

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_sql_pool_workload_classifier.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseSqlPoolWorkloadClassifierState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asspwc *Resource) Type() string {
	return "azurerm_synapse_sql_pool_workload_classifier"
}

// LocalName returns the local name for [Resource].
func (asspwc *Resource) LocalName() string {
	return asspwc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asspwc *Resource) Configuration() interface{} {
	return asspwc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asspwc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asspwc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asspwc *Resource) Dependencies() terra.Dependencies {
	return asspwc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asspwc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asspwc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asspwc *Resource) Attributes() azurermSynapseSqlPoolWorkloadClassifierAttributes {
	return azurermSynapseSqlPoolWorkloadClassifierAttributes{ref: terra.ReferenceResource(asspwc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asspwc *Resource) ImportState(state io.Reader) error {
	asspwc.state = &azurermSynapseSqlPoolWorkloadClassifierState{}
	if err := json.NewDecoder(state).Decode(asspwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asspwc.Type(), asspwc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asspwc *Resource) State() (*azurermSynapseSqlPoolWorkloadClassifierState, bool) {
	return asspwc.state, asspwc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asspwc *Resource) StateMust() *azurermSynapseSqlPoolWorkloadClassifierState {
	if asspwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asspwc.Type(), asspwc.LocalName()))
	}
	return asspwc.state
}

// Args contains the configurations for azurerm_synapse_sql_pool_workload_classifier.
type Args struct {
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Importance: string, optional
	Importance terra.StringValue `hcl:"importance,attr"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// MemberName: string, required
	MemberName terra.StringValue `hcl:"member_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// WorkloadGroupId: string, required
	WorkloadGroupId terra.StringValue `hcl:"workload_group_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseSqlPoolWorkloadClassifierAttributes struct {
	ref terra.Reference
}

// Context returns a reference to field context of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("context"))
}

// EndTime returns a reference to field end_time of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("end_time"))
}

// Id returns a reference to field id of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("id"))
}

// Importance returns a reference to field importance of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Importance() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("importance"))
}

// Label returns a reference to field label of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("label"))
}

// MemberName returns a reference to field member_name of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) MemberName() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("member_name"))
}

// Name returns a reference to field name of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("name"))
}

// StartTime returns a reference to field start_time of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("start_time"))
}

// WorkloadGroupId returns a reference to field workload_group_id of azurerm_synapse_sql_pool_workload_classifier.
func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) WorkloadGroupId() terra.StringValue {
	return terra.ReferenceAsString(asspwc.ref.Append("workload_group_id"))
}

func (asspwc azurermSynapseSqlPoolWorkloadClassifierAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asspwc.ref.Append("timeouts"))
}

type azurermSynapseSqlPoolWorkloadClassifierState struct {
	Context         string         `json:"context"`
	EndTime         string         `json:"end_time"`
	Id              string         `json:"id"`
	Importance      string         `json:"importance"`
	Label           string         `json:"label"`
	MemberName      string         `json:"member_name"`
	Name            string         `json:"name"`
	StartTime       string         `json:"start_time"`
	WorkloadGroupId string         `json:"workload_group_id"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
