// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_accelerator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_accelerator.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudAcceleratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asca *Resource) Type() string {
	return "azurerm_spring_cloud_accelerator"
}

// LocalName returns the local name for [Resource].
func (asca *Resource) LocalName() string {
	return asca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asca *Resource) Configuration() interface{} {
	return asca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asca *Resource) Dependencies() terra.Dependencies {
	return asca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asca *Resource) LifecycleManagement() *terra.Lifecycle {
	return asca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asca *Resource) Attributes() azurermSpringCloudAcceleratorAttributes {
	return azurermSpringCloudAcceleratorAttributes{ref: terra.ReferenceResource(asca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asca *Resource) ImportState(state io.Reader) error {
	asca.state = &azurermSpringCloudAcceleratorState{}
	if err := json.NewDecoder(state).Decode(asca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asca.Type(), asca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asca *Resource) State() (*azurermSpringCloudAcceleratorState, bool) {
	return asca.state, asca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asca *Resource) StateMust() *azurermSpringCloudAcceleratorState {
	if asca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asca.Type(), asca.LocalName()))
	}
	return asca.state
}

// Args contains the configurations for azurerm_spring_cloud_accelerator.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudAcceleratorAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_spring_cloud_accelerator.
func (asca azurermSpringCloudAcceleratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_accelerator.
func (asca azurermSpringCloudAcceleratorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("name"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_accelerator.
func (asca azurermSpringCloudAcceleratorAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("spring_cloud_service_id"))
}

func (asca azurermSpringCloudAcceleratorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asca.ref.Append("timeouts"))
}

type azurermSpringCloudAcceleratorState struct {
	Id                   string         `json:"id"`
	Name                 string         `json:"name"`
	SpringCloudServiceId string         `json:"spring_cloud_service_id"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
