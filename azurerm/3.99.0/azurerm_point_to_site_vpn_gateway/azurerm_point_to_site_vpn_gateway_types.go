// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_point_to_site_vpn_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConnectionConfiguration struct {
	// InternetSecurityEnabled: bool, optional
	InternetSecurityEnabled terra.BoolValue `hcl:"internet_security_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConnectionConfigurationRoute: optional
	Route *ConnectionConfigurationRoute `hcl:"route,block"`
	// ConnectionConfigurationVpnClientAddressPool: required
	VpnClientAddressPool *ConnectionConfigurationVpnClientAddressPool `hcl:"vpn_client_address_pool,block" validate:"required"`
}

type ConnectionConfigurationRoute struct {
	// AssociatedRouteTableId: string, required
	AssociatedRouteTableId terra.StringValue `hcl:"associated_route_table_id,attr" validate:"required"`
	// InboundRouteMapId: string, optional
	InboundRouteMapId terra.StringValue `hcl:"inbound_route_map_id,attr"`
	// OutboundRouteMapId: string, optional
	OutboundRouteMapId terra.StringValue `hcl:"outbound_route_map_id,attr"`
	// ConnectionConfigurationRoutePropagatedRouteTable: optional
	PropagatedRouteTable *ConnectionConfigurationRoutePropagatedRouteTable `hcl:"propagated_route_table,block"`
}

type ConnectionConfigurationRoutePropagatedRouteTable struct {
	// Ids: list of string, required
	Ids terra.ListValue[terra.StringValue] `hcl:"ids,attr" validate:"required"`
	// Labels: set of string, optional
	Labels terra.SetValue[terra.StringValue] `hcl:"labels,attr"`
}

type ConnectionConfigurationVpnClientAddressPool struct {
	// AddressPrefixes: set of string, required
	AddressPrefixes terra.SetValue[terra.StringValue] `hcl:"address_prefixes,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConnectionConfigurationAttributes struct {
	ref terra.Reference
}

func (cc ConnectionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ConnectionConfigurationAttributes) InternalWithRef(ref terra.Reference) ConnectionConfigurationAttributes {
	return ConnectionConfigurationAttributes{ref: ref}
}

func (cc ConnectionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ConnectionConfigurationAttributes) InternetSecurityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("internet_security_enabled"))
}

func (cc ConnectionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("name"))
}

func (cc ConnectionConfigurationAttributes) Route() terra.ListValue[ConnectionConfigurationRouteAttributes] {
	return terra.ReferenceAsList[ConnectionConfigurationRouteAttributes](cc.ref.Append("route"))
}

func (cc ConnectionConfigurationAttributes) VpnClientAddressPool() terra.ListValue[ConnectionConfigurationVpnClientAddressPoolAttributes] {
	return terra.ReferenceAsList[ConnectionConfigurationVpnClientAddressPoolAttributes](cc.ref.Append("vpn_client_address_pool"))
}

type ConnectionConfigurationRouteAttributes struct {
	ref terra.Reference
}

func (r ConnectionConfigurationRouteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ConnectionConfigurationRouteAttributes) InternalWithRef(ref terra.Reference) ConnectionConfigurationRouteAttributes {
	return ConnectionConfigurationRouteAttributes{ref: ref}
}

func (r ConnectionConfigurationRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ConnectionConfigurationRouteAttributes) AssociatedRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("associated_route_table_id"))
}

func (r ConnectionConfigurationRouteAttributes) InboundRouteMapId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("inbound_route_map_id"))
}

func (r ConnectionConfigurationRouteAttributes) OutboundRouteMapId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("outbound_route_map_id"))
}

func (r ConnectionConfigurationRouteAttributes) PropagatedRouteTable() terra.ListValue[ConnectionConfigurationRoutePropagatedRouteTableAttributes] {
	return terra.ReferenceAsList[ConnectionConfigurationRoutePropagatedRouteTableAttributes](r.ref.Append("propagated_route_table"))
}

type ConnectionConfigurationRoutePropagatedRouteTableAttributes struct {
	ref terra.Reference
}

func (prt ConnectionConfigurationRoutePropagatedRouteTableAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt ConnectionConfigurationRoutePropagatedRouteTableAttributes) InternalWithRef(ref terra.Reference) ConnectionConfigurationRoutePropagatedRouteTableAttributes {
	return ConnectionConfigurationRoutePropagatedRouteTableAttributes{ref: ref}
}

func (prt ConnectionConfigurationRoutePropagatedRouteTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt ConnectionConfigurationRoutePropagatedRouteTableAttributes) Ids() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](prt.ref.Append("ids"))
}

func (prt ConnectionConfigurationRoutePropagatedRouteTableAttributes) Labels() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](prt.ref.Append("labels"))
}

type ConnectionConfigurationVpnClientAddressPoolAttributes struct {
	ref terra.Reference
}

func (vcap ConnectionConfigurationVpnClientAddressPoolAttributes) InternalRef() (terra.Reference, error) {
	return vcap.ref, nil
}

func (vcap ConnectionConfigurationVpnClientAddressPoolAttributes) InternalWithRef(ref terra.Reference) ConnectionConfigurationVpnClientAddressPoolAttributes {
	return ConnectionConfigurationVpnClientAddressPoolAttributes{ref: ref}
}

func (vcap ConnectionConfigurationVpnClientAddressPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcap.ref.InternalTokens()
}

func (vcap ConnectionConfigurationVpnClientAddressPoolAttributes) AddressPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vcap.ref.Append("address_prefixes"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConnectionConfigurationState struct {
	InternetSecurityEnabled bool                                               `json:"internet_security_enabled"`
	Name                    string                                             `json:"name"`
	Route                   []ConnectionConfigurationRouteState                `json:"route"`
	VpnClientAddressPool    []ConnectionConfigurationVpnClientAddressPoolState `json:"vpn_client_address_pool"`
}

type ConnectionConfigurationRouteState struct {
	AssociatedRouteTableId string                                                  `json:"associated_route_table_id"`
	InboundRouteMapId      string                                                  `json:"inbound_route_map_id"`
	OutboundRouteMapId     string                                                  `json:"outbound_route_map_id"`
	PropagatedRouteTable   []ConnectionConfigurationRoutePropagatedRouteTableState `json:"propagated_route_table"`
}

type ConnectionConfigurationRoutePropagatedRouteTableState struct {
	Ids    []string `json:"ids"`
	Labels []string `json:"labels"`
}

type ConnectionConfigurationVpnClientAddressPoolState struct {
	AddressPrefixes []string `json:"address_prefixes"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
