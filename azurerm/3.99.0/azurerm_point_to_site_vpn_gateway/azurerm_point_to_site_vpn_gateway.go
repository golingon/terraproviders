// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_point_to_site_vpn_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_point_to_site_vpn_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPointToSiteVpnGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aptsvg *Resource) Type() string {
	return "azurerm_point_to_site_vpn_gateway"
}

// LocalName returns the local name for [Resource].
func (aptsvg *Resource) LocalName() string {
	return aptsvg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aptsvg *Resource) Configuration() interface{} {
	return aptsvg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aptsvg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aptsvg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aptsvg *Resource) Dependencies() terra.Dependencies {
	return aptsvg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aptsvg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aptsvg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aptsvg *Resource) Attributes() azurermPointToSiteVpnGatewayAttributes {
	return azurermPointToSiteVpnGatewayAttributes{ref: terra.ReferenceResource(aptsvg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aptsvg *Resource) ImportState(state io.Reader) error {
	aptsvg.state = &azurermPointToSiteVpnGatewayState{}
	if err := json.NewDecoder(state).Decode(aptsvg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aptsvg.Type(), aptsvg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aptsvg *Resource) State() (*azurermPointToSiteVpnGatewayState, bool) {
	return aptsvg.state, aptsvg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aptsvg *Resource) StateMust() *azurermPointToSiteVpnGatewayState {
	if aptsvg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aptsvg.Type(), aptsvg.LocalName()))
	}
	return aptsvg.state
}

// Args contains the configurations for azurerm_point_to_site_vpn_gateway.
type Args struct {
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RoutingPreferenceInternetEnabled: bool, optional
	RoutingPreferenceInternetEnabled terra.BoolValue `hcl:"routing_preference_internet_enabled,attr"`
	// ScaleUnit: number, required
	ScaleUnit terra.NumberValue `hcl:"scale_unit,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// VpnServerConfigurationId: string, required
	VpnServerConfigurationId terra.StringValue `hcl:"vpn_server_configuration_id,attr" validate:"required"`
	// ConnectionConfiguration: min=1
	ConnectionConfiguration []ConnectionConfiguration `hcl:"connection_configuration,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPointToSiteVpnGatewayAttributes struct {
	ref terra.Reference
}

// DnsServers returns a reference to field dns_servers of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aptsvg.ref.Append("dns_servers"))
}

// Id returns a reference to field id of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("resource_group_name"))
}

// RoutingPreferenceInternetEnabled returns a reference to field routing_preference_internet_enabled of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) RoutingPreferenceInternetEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aptsvg.ref.Append("routing_preference_internet_enabled"))
}

// ScaleUnit returns a reference to field scale_unit of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) ScaleUnit() terra.NumberValue {
	return terra.ReferenceAsNumber(aptsvg.ref.Append("scale_unit"))
}

// Tags returns a reference to field tags of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aptsvg.ref.Append("tags"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("virtual_hub_id"))
}

// VpnServerConfigurationId returns a reference to field vpn_server_configuration_id of azurerm_point_to_site_vpn_gateway.
func (aptsvg azurermPointToSiteVpnGatewayAttributes) VpnServerConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(aptsvg.ref.Append("vpn_server_configuration_id"))
}

func (aptsvg azurermPointToSiteVpnGatewayAttributes) ConnectionConfiguration() terra.ListValue[ConnectionConfigurationAttributes] {
	return terra.ReferenceAsList[ConnectionConfigurationAttributes](aptsvg.ref.Append("connection_configuration"))
}

func (aptsvg azurermPointToSiteVpnGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aptsvg.ref.Append("timeouts"))
}

type azurermPointToSiteVpnGatewayState struct {
	DnsServers                       []string                       `json:"dns_servers"`
	Id                               string                         `json:"id"`
	Location                         string                         `json:"location"`
	Name                             string                         `json:"name"`
	ResourceGroupName                string                         `json:"resource_group_name"`
	RoutingPreferenceInternetEnabled bool                           `json:"routing_preference_internet_enabled"`
	ScaleUnit                        float64                        `json:"scale_unit"`
	Tags                             map[string]string              `json:"tags"`
	VirtualHubId                     string                         `json:"virtual_hub_id"`
	VpnServerConfigurationId         string                         `json:"vpn_server_configuration_id"`
	ConnectionConfiguration          []ConnectionConfigurationState `json:"connection_configuration"`
	Timeouts                         *TimeoutsState                 `json:"timeouts"`
}
