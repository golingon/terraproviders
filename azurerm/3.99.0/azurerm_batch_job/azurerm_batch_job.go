// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_batch_job.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBatchJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abj *Resource) Type() string {
	return "azurerm_batch_job"
}

// LocalName returns the local name for [Resource].
func (abj *Resource) LocalName() string {
	return abj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abj *Resource) Configuration() interface{} {
	return abj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abj *Resource) Dependencies() terra.Dependencies {
	return abj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abj *Resource) LifecycleManagement() *terra.Lifecycle {
	return abj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abj *Resource) Attributes() azurermBatchJobAttributes {
	return azurermBatchJobAttributes{ref: terra.ReferenceResource(abj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abj *Resource) ImportState(state io.Reader) error {
	abj.state = &azurermBatchJobState{}
	if err := json.NewDecoder(state).Decode(abj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abj.Type(), abj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abj *Resource) State() (*azurermBatchJobState, bool) {
	return abj.state, abj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abj *Resource) StateMust() *azurermBatchJobState {
	if abj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abj.Type(), abj.LocalName()))
	}
	return abj.state
}

// Args contains the configurations for azurerm_batch_job.
type Args struct {
	// BatchPoolId: string, required
	BatchPoolId terra.StringValue `hcl:"batch_pool_id,attr" validate:"required"`
	// CommonEnvironmentProperties: map of string, optional
	CommonEnvironmentProperties terra.MapValue[terra.StringValue] `hcl:"common_environment_properties,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// TaskRetryMaximum: number, optional
	TaskRetryMaximum terra.NumberValue `hcl:"task_retry_maximum,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBatchJobAttributes struct {
	ref terra.Reference
}

// BatchPoolId returns a reference to field batch_pool_id of azurerm_batch_job.
func (abj azurermBatchJobAttributes) BatchPoolId() terra.StringValue {
	return terra.ReferenceAsString(abj.ref.Append("batch_pool_id"))
}

// CommonEnvironmentProperties returns a reference to field common_environment_properties of azurerm_batch_job.
func (abj azurermBatchJobAttributes) CommonEnvironmentProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abj.ref.Append("common_environment_properties"))
}

// DisplayName returns a reference to field display_name of azurerm_batch_job.
func (abj azurermBatchJobAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(abj.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_batch_job.
func (abj azurermBatchJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abj.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_batch_job.
func (abj azurermBatchJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abj.ref.Append("name"))
}

// Priority returns a reference to field priority of azurerm_batch_job.
func (abj azurermBatchJobAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(abj.ref.Append("priority"))
}

// TaskRetryMaximum returns a reference to field task_retry_maximum of azurerm_batch_job.
func (abj azurermBatchJobAttributes) TaskRetryMaximum() terra.NumberValue {
	return terra.ReferenceAsNumber(abj.ref.Append("task_retry_maximum"))
}

func (abj azurermBatchJobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abj.ref.Append("timeouts"))
}

type azurermBatchJobState struct {
	BatchPoolId                 string            `json:"batch_pool_id"`
	CommonEnvironmentProperties map[string]string `json:"common_environment_properties"`
	DisplayName                 string            `json:"display_name"`
	Id                          string            `json:"id"`
	Name                        string            `json:"name"`
	Priority                    float64           `json:"priority"`
	TaskRetryMaximum            float64           `json:"task_retry_maximum"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
