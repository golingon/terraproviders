// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_metric_alert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_metric_alert.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorMetricAlertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amma *Resource) Type() string {
	return "azurerm_monitor_metric_alert"
}

// LocalName returns the local name for [Resource].
func (amma *Resource) LocalName() string {
	return amma.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amma *Resource) Configuration() interface{} {
	return amma.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amma *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amma)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amma *Resource) Dependencies() terra.Dependencies {
	return amma.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amma *Resource) LifecycleManagement() *terra.Lifecycle {
	return amma.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amma *Resource) Attributes() azurermMonitorMetricAlertAttributes {
	return azurermMonitorMetricAlertAttributes{ref: terra.ReferenceResource(amma)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amma *Resource) ImportState(state io.Reader) error {
	amma.state = &azurermMonitorMetricAlertState{}
	if err := json.NewDecoder(state).Decode(amma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amma.Type(), amma.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amma *Resource) State() (*azurermMonitorMetricAlertState, bool) {
	return amma.state, amma.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amma *Resource) StateMust() *azurermMonitorMetricAlertState {
	if amma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amma.Type(), amma.LocalName()))
	}
	return amma.state
}

// Args contains the configurations for azurerm_monitor_metric_alert.
type Args struct {
	// AutoMitigate: bool, optional
	AutoMitigate terra.BoolValue `hcl:"auto_mitigate,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: string, optional
	Frequency terra.StringValue `hcl:"frequency,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: set of string, required
	Scopes terra.SetValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Severity: number, optional
	Severity terra.NumberValue `hcl:"severity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetResourceLocation: string, optional
	TargetResourceLocation terra.StringValue `hcl:"target_resource_location,attr"`
	// TargetResourceType: string, optional
	TargetResourceType terra.StringValue `hcl:"target_resource_type,attr"`
	// WindowSize: string, optional
	WindowSize terra.StringValue `hcl:"window_size,attr"`
	// Action: min=0
	Action []Action `hcl:"action,block" validate:"min=0"`
	// ApplicationInsightsWebTestLocationAvailabilityCriteria: optional
	ApplicationInsightsWebTestLocationAvailabilityCriteria *ApplicationInsightsWebTestLocationAvailabilityCriteria `hcl:"application_insights_web_test_location_availability_criteria,block"`
	// Criteria: min=0
	Criteria []Criteria `hcl:"criteria,block" validate:"min=0"`
	// DynamicCriteria: optional
	DynamicCriteria *DynamicCriteria `hcl:"dynamic_criteria,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorMetricAlertAttributes struct {
	ref terra.Reference
}

// AutoMitigate returns a reference to field auto_mitigate of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) AutoMitigate() terra.BoolValue {
	return terra.ReferenceAsBool(amma.ref.Append("auto_mitigate"))
}

// Description returns a reference to field description of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("description"))
}

// Enabled returns a reference to field enabled of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amma.ref.Append("enabled"))
}

// Frequency returns a reference to field frequency of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("frequency"))
}

// Id returns a reference to field id of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("resource_group_name"))
}

// Scopes returns a reference to field scopes of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Scopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amma.ref.Append("scopes"))
}

// Severity returns a reference to field severity of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Severity() terra.NumberValue {
	return terra.ReferenceAsNumber(amma.ref.Append("severity"))
}

// Tags returns a reference to field tags of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amma.ref.Append("tags"))
}

// TargetResourceLocation returns a reference to field target_resource_location of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) TargetResourceLocation() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("target_resource_location"))
}

// TargetResourceType returns a reference to field target_resource_type of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) TargetResourceType() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("target_resource_type"))
}

// WindowSize returns a reference to field window_size of azurerm_monitor_metric_alert.
func (amma azurermMonitorMetricAlertAttributes) WindowSize() terra.StringValue {
	return terra.ReferenceAsString(amma.ref.Append("window_size"))
}

func (amma azurermMonitorMetricAlertAttributes) Action() terra.SetValue[ActionAttributes] {
	return terra.ReferenceAsSet[ActionAttributes](amma.ref.Append("action"))
}

func (amma azurermMonitorMetricAlertAttributes) ApplicationInsightsWebTestLocationAvailabilityCriteria() terra.ListValue[ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes] {
	return terra.ReferenceAsList[ApplicationInsightsWebTestLocationAvailabilityCriteriaAttributes](amma.ref.Append("application_insights_web_test_location_availability_criteria"))
}

func (amma azurermMonitorMetricAlertAttributes) Criteria() terra.ListValue[CriteriaAttributes] {
	return terra.ReferenceAsList[CriteriaAttributes](amma.ref.Append("criteria"))
}

func (amma azurermMonitorMetricAlertAttributes) DynamicCriteria() terra.ListValue[DynamicCriteriaAttributes] {
	return terra.ReferenceAsList[DynamicCriteriaAttributes](amma.ref.Append("dynamic_criteria"))
}

func (amma azurermMonitorMetricAlertAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amma.ref.Append("timeouts"))
}

type azurermMonitorMetricAlertState struct {
	AutoMitigate                                           bool                                                          `json:"auto_mitigate"`
	Description                                            string                                                        `json:"description"`
	Enabled                                                bool                                                          `json:"enabled"`
	Frequency                                              string                                                        `json:"frequency"`
	Id                                                     string                                                        `json:"id"`
	Name                                                   string                                                        `json:"name"`
	ResourceGroupName                                      string                                                        `json:"resource_group_name"`
	Scopes                                                 []string                                                      `json:"scopes"`
	Severity                                               float64                                                       `json:"severity"`
	Tags                                                   map[string]string                                             `json:"tags"`
	TargetResourceLocation                                 string                                                        `json:"target_resource_location"`
	TargetResourceType                                     string                                                        `json:"target_resource_type"`
	WindowSize                                             string                                                        `json:"window_size"`
	Action                                                 []ActionState                                                 `json:"action"`
	ApplicationInsightsWebTestLocationAvailabilityCriteria []ApplicationInsightsWebTestLocationAvailabilityCriteriaState `json:"application_insights_web_test_location_availability_criteria"`
	Criteria                                               []CriteriaState                                               `json:"criteria"`
	DynamicCriteria                                        []DynamicCriteriaState                                        `json:"dynamic_criteria"`
	Timeouts                                               *TimeoutsState                                                `json:"timeouts"`
}
