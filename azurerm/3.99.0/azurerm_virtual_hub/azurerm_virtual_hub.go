// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_hub

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_hub.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualHubState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avh *Resource) Type() string {
	return "azurerm_virtual_hub"
}

// LocalName returns the local name for [Resource].
func (avh *Resource) LocalName() string {
	return avh.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avh *Resource) Configuration() interface{} {
	return avh.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avh *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avh)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avh *Resource) Dependencies() terra.Dependencies {
	return avh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avh *Resource) LifecycleManagement() *terra.Lifecycle {
	return avh.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avh *Resource) Attributes() azurermVirtualHubAttributes {
	return azurermVirtualHubAttributes{ref: terra.ReferenceResource(avh)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avh *Resource) ImportState(state io.Reader) error {
	avh.state = &azurermVirtualHubState{}
	if err := json.NewDecoder(state).Decode(avh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avh.Type(), avh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avh *Resource) State() (*azurermVirtualHubState, bool) {
	return avh.state, avh.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avh *Resource) StateMust() *azurermVirtualHubState {
	if avh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avh.Type(), avh.LocalName()))
	}
	return avh.state
}

// Args contains the configurations for azurerm_virtual_hub.
type Args struct {
	// AddressPrefix: string, optional
	AddressPrefix terra.StringValue `hcl:"address_prefix,attr"`
	// HubRoutingPreference: string, optional
	HubRoutingPreference terra.StringValue `hcl:"hub_routing_preference,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualRouterAutoScaleMinCapacity: number, optional
	VirtualRouterAutoScaleMinCapacity terra.NumberValue `hcl:"virtual_router_auto_scale_min_capacity,attr"`
	// VirtualWanId: string, optional
	VirtualWanId terra.StringValue `hcl:"virtual_wan_id,attr"`
	// Route: min=0
	Route []Route `hcl:"route,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualHubAttributes struct {
	ref terra.Reference
}

// AddressPrefix returns a reference to field address_prefix of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) AddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("address_prefix"))
}

// DefaultRouteTableId returns a reference to field default_route_table_id of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) DefaultRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("default_route_table_id"))
}

// HubRoutingPreference returns a reference to field hub_routing_preference of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) HubRoutingPreference() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("hub_routing_preference"))
}

// Id returns a reference to field id of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avh.ref.Append("tags"))
}

// VirtualRouterAsn returns a reference to field virtual_router_asn of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) VirtualRouterAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(avh.ref.Append("virtual_router_asn"))
}

// VirtualRouterAutoScaleMinCapacity returns a reference to field virtual_router_auto_scale_min_capacity of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) VirtualRouterAutoScaleMinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(avh.ref.Append("virtual_router_auto_scale_min_capacity"))
}

// VirtualRouterIps returns a reference to field virtual_router_ips of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) VirtualRouterIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avh.ref.Append("virtual_router_ips"))
}

// VirtualWanId returns a reference to field virtual_wan_id of azurerm_virtual_hub.
func (avh azurermVirtualHubAttributes) VirtualWanId() terra.StringValue {
	return terra.ReferenceAsString(avh.ref.Append("virtual_wan_id"))
}

func (avh azurermVirtualHubAttributes) Route() terra.SetValue[RouteAttributes] {
	return terra.ReferenceAsSet[RouteAttributes](avh.ref.Append("route"))
}

func (avh azurermVirtualHubAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avh.ref.Append("timeouts"))
}

type azurermVirtualHubState struct {
	AddressPrefix                     string            `json:"address_prefix"`
	DefaultRouteTableId               string            `json:"default_route_table_id"`
	HubRoutingPreference              string            `json:"hub_routing_preference"`
	Id                                string            `json:"id"`
	Location                          string            `json:"location"`
	Name                              string            `json:"name"`
	ResourceGroupName                 string            `json:"resource_group_name"`
	Sku                               string            `json:"sku"`
	Tags                              map[string]string `json:"tags"`
	VirtualRouterAsn                  float64           `json:"virtual_router_asn"`
	VirtualRouterAutoScaleMinCapacity float64           `json:"virtual_router_auto_scale_min_capacity"`
	VirtualRouterIps                  []string          `json:"virtual_router_ips"`
	VirtualWanId                      string            `json:"virtual_wan_id"`
	Route                             []RouteState      `json:"route"`
	Timeouts                          *TimeoutsState    `json:"timeouts"`
}
