// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_application_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataAuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac DataAuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac DataAuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) DataAuthenticationCertificateAttributes {
	return DataAuthenticationCertificateAttributes{ref: ref}
}

func (ac DataAuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac DataAuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac DataAuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type DataAutoscaleConfigurationAttributes struct {
	ref terra.Reference
}

func (ac DataAutoscaleConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac DataAutoscaleConfigurationAttributes) InternalWithRef(ref terra.Reference) DataAutoscaleConfigurationAttributes {
	return DataAutoscaleConfigurationAttributes{ref: ref}
}

func (ac DataAutoscaleConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac DataAutoscaleConfigurationAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max_capacity"))
}

func (ac DataAutoscaleConfigurationAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min_capacity"))
}

type DataBackendAddressPoolAttributes struct {
	ref terra.Reference
}

func (bap DataBackendAddressPoolAttributes) InternalRef() (terra.Reference, error) {
	return bap.ref, nil
}

func (bap DataBackendAddressPoolAttributes) InternalWithRef(ref terra.Reference) DataBackendAddressPoolAttributes {
	return DataBackendAddressPoolAttributes{ref: ref}
}

func (bap DataBackendAddressPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bap.ref.InternalTokens()
}

func (bap DataBackendAddressPoolAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bap.ref.Append("fqdns"))
}

func (bap DataBackendAddressPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("id"))
}

func (bap DataBackendAddressPoolAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bap.ref.Append("ip_addresses"))
}

func (bap DataBackendAddressPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("name"))
}

type DataBackendHttpSettingsAttributes struct {
	ref terra.Reference
}

func (bhs DataBackendHttpSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bhs.ref, nil
}

func (bhs DataBackendHttpSettingsAttributes) InternalWithRef(ref terra.Reference) DataBackendHttpSettingsAttributes {
	return DataBackendHttpSettingsAttributes{ref: ref}
}

func (bhs DataBackendHttpSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bhs.ref.InternalTokens()
}

func (bhs DataBackendHttpSettingsAttributes) AffinityCookieName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("affinity_cookie_name"))
}

func (bhs DataBackendHttpSettingsAttributes) CookieBasedAffinity() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("cookie_based_affinity"))
}

func (bhs DataBackendHttpSettingsAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("host_name"))
}

func (bhs DataBackendHttpSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("id"))
}

func (bhs DataBackendHttpSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("name"))
}

func (bhs DataBackendHttpSettingsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("path"))
}

func (bhs DataBackendHttpSettingsAttributes) PickHostNameFromBackendAddress() terra.BoolValue {
	return terra.ReferenceAsBool(bhs.ref.Append("pick_host_name_from_backend_address"))
}

func (bhs DataBackendHttpSettingsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("port"))
}

func (bhs DataBackendHttpSettingsAttributes) ProbeId() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_id"))
}

func (bhs DataBackendHttpSettingsAttributes) ProbeName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_name"))
}

func (bhs DataBackendHttpSettingsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("protocol"))
}

func (bhs DataBackendHttpSettingsAttributes) RequestTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("request_timeout"))
}

func (bhs DataBackendHttpSettingsAttributes) TrustedRootCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bhs.ref.Append("trusted_root_certificate_names"))
}

func (bhs DataBackendHttpSettingsAttributes) AuthenticationCertificate() terra.ListValue[DataBackendHttpSettingsAuthenticationCertificateAttributes] {
	return terra.ReferenceAsList[DataBackendHttpSettingsAuthenticationCertificateAttributes](bhs.ref.Append("authentication_certificate"))
}

func (bhs DataBackendHttpSettingsAttributes) ConnectionDraining() terra.ListValue[DataBackendHttpSettingsConnectionDrainingAttributes] {
	return terra.ReferenceAsList[DataBackendHttpSettingsConnectionDrainingAttributes](bhs.ref.Append("connection_draining"))
}

type DataBackendHttpSettingsAuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac DataBackendHttpSettingsAuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac DataBackendHttpSettingsAuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) DataBackendHttpSettingsAuthenticationCertificateAttributes {
	return DataBackendHttpSettingsAuthenticationCertificateAttributes{ref: ref}
}

func (ac DataBackendHttpSettingsAuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac DataBackendHttpSettingsAuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac DataBackendHttpSettingsAuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type DataBackendHttpSettingsConnectionDrainingAttributes struct {
	ref terra.Reference
}

func (cd DataBackendHttpSettingsConnectionDrainingAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd DataBackendHttpSettingsConnectionDrainingAttributes) InternalWithRef(ref terra.Reference) DataBackendHttpSettingsConnectionDrainingAttributes {
	return DataBackendHttpSettingsConnectionDrainingAttributes{ref: ref}
}

func (cd DataBackendHttpSettingsConnectionDrainingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd DataBackendHttpSettingsConnectionDrainingAttributes) DrainTimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("drain_timeout_sec"))
}

func (cd DataBackendHttpSettingsConnectionDrainingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cd.ref.Append("enabled"))
}

type DataCustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec DataCustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec DataCustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) DataCustomErrorConfigurationAttributes {
	return DataCustomErrorConfigurationAttributes{ref: ref}
}

func (cec DataCustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec DataCustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec DataCustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec DataCustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type DataFrontendIpConfigurationAttributes struct {
	ref terra.Reference
}

func (fic DataFrontendIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fic.ref, nil
}

func (fic DataFrontendIpConfigurationAttributes) InternalWithRef(ref terra.Reference) DataFrontendIpConfigurationAttributes {
	return DataFrontendIpConfigurationAttributes{ref: ref}
}

func (fic DataFrontendIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fic.ref.InternalTokens()
}

func (fic DataFrontendIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("id"))
}

func (fic DataFrontendIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("name"))
}

func (fic DataFrontendIpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address"))
}

func (fic DataFrontendIpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address_allocation"))
}

func (fic DataFrontendIpConfigurationAttributes) PrivateLinkConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_id"))
}

func (fic DataFrontendIpConfigurationAttributes) PrivateLinkConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_name"))
}

func (fic DataFrontendIpConfigurationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("public_ip_address_id"))
}

func (fic DataFrontendIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("subnet_id"))
}

type DataFrontendPortAttributes struct {
	ref terra.Reference
}

func (fp DataFrontendPortAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp DataFrontendPortAttributes) InternalWithRef(ref terra.Reference) DataFrontendPortAttributes {
	return DataFrontendPortAttributes{ref: ref}
}

func (fp DataFrontendPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp DataFrontendPortAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("id"))
}

func (fp DataFrontendPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("name"))
}

func (fp DataFrontendPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fp.ref.Append("port"))
}

type DataGatewayIpConfigurationAttributes struct {
	ref terra.Reference
}

func (gic DataGatewayIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gic.ref, nil
}

func (gic DataGatewayIpConfigurationAttributes) InternalWithRef(ref terra.Reference) DataGatewayIpConfigurationAttributes {
	return DataGatewayIpConfigurationAttributes{ref: ref}
}

func (gic DataGatewayIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gic.ref.InternalTokens()
}

func (gic DataGatewayIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("id"))
}

func (gic DataGatewayIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("name"))
}

func (gic DataGatewayIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("subnet_id"))
}

type DataGlobalAttributes struct {
	ref terra.Reference
}

func (g DataGlobalAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataGlobalAttributes) InternalWithRef(ref terra.Reference) DataGlobalAttributes {
	return DataGlobalAttributes{ref: ref}
}

func (g DataGlobalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataGlobalAttributes) RequestBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("request_buffering_enabled"))
}

func (g DataGlobalAttributes) ResponseBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("response_buffering_enabled"))
}

type DataHttpListenerAttributes struct {
	ref terra.Reference
}

func (hl DataHttpListenerAttributes) InternalRef() (terra.Reference, error) {
	return hl.ref, nil
}

func (hl DataHttpListenerAttributes) InternalWithRef(ref terra.Reference) DataHttpListenerAttributes {
	return DataHttpListenerAttributes{ref: ref}
}

func (hl DataHttpListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hl.ref.InternalTokens()
}

func (hl DataHttpListenerAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("firewall_policy_id"))
}

func (hl DataHttpListenerAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_id"))
}

func (hl DataHttpListenerAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_name"))
}

func (hl DataHttpListenerAttributes) FrontendPortId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_id"))
}

func (hl DataHttpListenerAttributes) FrontendPortName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_name"))
}

func (hl DataHttpListenerAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("host_name"))
}

func (hl DataHttpListenerAttributes) HostNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hl.ref.Append("host_names"))
}

func (hl DataHttpListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("id"))
}

func (hl DataHttpListenerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("name"))
}

func (hl DataHttpListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("protocol"))
}

func (hl DataHttpListenerAttributes) RequireSni() terra.BoolValue {
	return terra.ReferenceAsBool(hl.ref.Append("require_sni"))
}

func (hl DataHttpListenerAttributes) SslCertificateId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_id"))
}

func (hl DataHttpListenerAttributes) SslCertificateName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_name"))
}

func (hl DataHttpListenerAttributes) SslProfileId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_id"))
}

func (hl DataHttpListenerAttributes) SslProfileName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_name"))
}

func (hl DataHttpListenerAttributes) CustomErrorConfiguration() terra.ListValue[DataHttpListenerCustomErrorConfigurationAttributes] {
	return terra.ReferenceAsList[DataHttpListenerCustomErrorConfigurationAttributes](hl.ref.Append("custom_error_configuration"))
}

type DataHttpListenerCustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) DataHttpListenerCustomErrorConfigurationAttributes {
	return DataHttpListenerCustomErrorConfigurationAttributes{ref: ref}
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec DataHttpListenerCustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type DataIdentityAttributes struct {
	ref terra.Reference
}

func (i DataIdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdentityAttributes) InternalWithRef(ref terra.Reference) DataIdentityAttributes {
	return DataIdentityAttributes{ref: ref}
}

func (i DataIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i DataIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type DataPrivateEndpointConnectionAttributes struct {
	ref terra.Reference
}

func (pec DataPrivateEndpointConnectionAttributes) InternalRef() (terra.Reference, error) {
	return pec.ref, nil
}

func (pec DataPrivateEndpointConnectionAttributes) InternalWithRef(ref terra.Reference) DataPrivateEndpointConnectionAttributes {
	return DataPrivateEndpointConnectionAttributes{ref: ref}
}

func (pec DataPrivateEndpointConnectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pec.ref.InternalTokens()
}

func (pec DataPrivateEndpointConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("id"))
}

func (pec DataPrivateEndpointConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("name"))
}

type DataPrivateLinkConfigurationAttributes struct {
	ref terra.Reference
}

func (plc DataPrivateLinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return plc.ref, nil
}

func (plc DataPrivateLinkConfigurationAttributes) InternalWithRef(ref terra.Reference) DataPrivateLinkConfigurationAttributes {
	return DataPrivateLinkConfigurationAttributes{ref: ref}
}

func (plc DataPrivateLinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return plc.ref.InternalTokens()
}

func (plc DataPrivateLinkConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("id"))
}

func (plc DataPrivateLinkConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("name"))
}

func (plc DataPrivateLinkConfigurationAttributes) IpConfiguration() terra.ListValue[DataPrivateLinkConfigurationIpConfigurationAttributes] {
	return terra.ReferenceAsList[DataPrivateLinkConfigurationIpConfigurationAttributes](plc.ref.Append("ip_configuration"))
}

type DataPrivateLinkConfigurationIpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) InternalWithRef(ref terra.Reference) DataPrivateLinkConfigurationIpConfigurationAttributes {
	return DataPrivateLinkConfigurationIpConfigurationAttributes{ref: ref}
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("primary"))
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address"))
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address_allocation"))
}

func (ic DataPrivateLinkConfigurationIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type DataProbeAttributes struct {
	ref terra.Reference
}

func (p DataProbeAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataProbeAttributes) InternalWithRef(ref terra.Reference) DataProbeAttributes {
	return DataProbeAttributes{ref: ref}
}

func (p DataProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataProbeAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p DataProbeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("id"))
}

func (p DataProbeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("interval"))
}

func (p DataProbeAttributes) MinimumServers() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("minimum_servers"))
}

func (p DataProbeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p DataProbeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("path"))
}

func (p DataProbeAttributes) PickHostNameFromBackendHttpSettings() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("pick_host_name_from_backend_http_settings"))
}

func (p DataProbeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

func (p DataProbeAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

func (p DataProbeAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("timeout"))
}

func (p DataProbeAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("unhealthy_threshold"))
}

func (p DataProbeAttributes) Match() terra.ListValue[DataProbeMatchAttributes] {
	return terra.ReferenceAsList[DataProbeMatchAttributes](p.ref.Append("match"))
}

type DataProbeMatchAttributes struct {
	ref terra.Reference
}

func (m DataProbeMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DataProbeMatchAttributes) InternalWithRef(ref terra.Reference) DataProbeMatchAttributes {
	return DataProbeMatchAttributes{ref: ref}
}

func (m DataProbeMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DataProbeMatchAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("body"))
}

func (m DataProbeMatchAttributes) StatusCode() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("status_code"))
}

type DataRedirectConfigurationAttributes struct {
	ref terra.Reference
}

func (rc DataRedirectConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc DataRedirectConfigurationAttributes) InternalWithRef(ref terra.Reference) DataRedirectConfigurationAttributes {
	return DataRedirectConfigurationAttributes{ref: ref}
}

func (rc DataRedirectConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc DataRedirectConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("id"))
}

func (rc DataRedirectConfigurationAttributes) IncludePath() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_path"))
}

func (rc DataRedirectConfigurationAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_query_string"))
}

func (rc DataRedirectConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc DataRedirectConfigurationAttributes) RedirectType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("redirect_type"))
}

func (rc DataRedirectConfigurationAttributes) TargetListenerId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_id"))
}

func (rc DataRedirectConfigurationAttributes) TargetListenerName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_name"))
}

func (rc DataRedirectConfigurationAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_url"))
}

type DataRequestRoutingRuleAttributes struct {
	ref terra.Reference
}

func (rrr DataRequestRoutingRuleAttributes) InternalRef() (terra.Reference, error) {
	return rrr.ref, nil
}

func (rrr DataRequestRoutingRuleAttributes) InternalWithRef(ref terra.Reference) DataRequestRoutingRuleAttributes {
	return DataRequestRoutingRuleAttributes{ref: ref}
}

func (rrr DataRequestRoutingRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrr.ref.InternalTokens()
}

func (rrr DataRequestRoutingRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_id"))
}

func (rrr DataRequestRoutingRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_name"))
}

func (rrr DataRequestRoutingRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_id"))
}

func (rrr DataRequestRoutingRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_name"))
}

func (rrr DataRequestRoutingRuleAttributes) HttpListenerId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_id"))
}

func (rrr DataRequestRoutingRuleAttributes) HttpListenerName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_name"))
}

func (rrr DataRequestRoutingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("id"))
}

func (rrr DataRequestRoutingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("name"))
}

func (rrr DataRequestRoutingRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rrr.ref.Append("priority"))
}

func (rrr DataRequestRoutingRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_id"))
}

func (rrr DataRequestRoutingRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_name"))
}

func (rrr DataRequestRoutingRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_id"))
}

func (rrr DataRequestRoutingRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_name"))
}

func (rrr DataRequestRoutingRuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rule_type"))
}

func (rrr DataRequestRoutingRuleAttributes) UrlPathMapId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_id"))
}

func (rrr DataRequestRoutingRuleAttributes) UrlPathMapName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_name"))
}

type DataRewriteRuleSetAttributes struct {
	ref terra.Reference
}

func (rrs DataRewriteRuleSetAttributes) InternalRef() (terra.Reference, error) {
	return rrs.ref, nil
}

func (rrs DataRewriteRuleSetAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetAttributes {
	return DataRewriteRuleSetAttributes{ref: ref}
}

func (rrs DataRewriteRuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrs.ref.InternalTokens()
}

func (rrs DataRewriteRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("id"))
}

func (rrs DataRewriteRuleSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("name"))
}

func (rrs DataRewriteRuleSetAttributes) RewriteRule() terra.ListValue[DataRewriteRuleSetRewriteRuleAttributes] {
	return terra.ReferenceAsList[DataRewriteRuleSetRewriteRuleAttributes](rrs.ref.Append("rewrite_rule"))
}

type DataRewriteRuleSetRewriteRuleAttributes struct {
	ref terra.Reference
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetRewriteRuleAttributes {
	return DataRewriteRuleSetRewriteRuleAttributes{ref: ref}
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) RuleSequence() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("rule_sequence"))
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) Condition() terra.ListValue[DataRewriteRuleSetRewriteRuleConditionAttributes] {
	return terra.ReferenceAsList[DataRewriteRuleSetRewriteRuleConditionAttributes](rr.ref.Append("condition"))
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) RequestHeaderConfiguration() terra.ListValue[DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes](rr.ref.Append("request_header_configuration"))
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) ResponseHeaderConfiguration() terra.ListValue[DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes](rr.ref.Append("response_header_configuration"))
}

func (rr DataRewriteRuleSetRewriteRuleAttributes) Url() terra.ListValue[DataRewriteRuleSetRewriteRuleUrlAttributes] {
	return terra.ReferenceAsList[DataRewriteRuleSetRewriteRuleUrlAttributes](rr.ref.Append("url"))
}

type DataRewriteRuleSetRewriteRuleConditionAttributes struct {
	ref terra.Reference
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetRewriteRuleConditionAttributes {
	return DataRewriteRuleSetRewriteRuleConditionAttributes{ref: ref}
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("ignore_case"))
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("negate"))
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("pattern"))
}

func (c DataRewriteRuleSetRewriteRuleConditionAttributes) Variable() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("variable"))
}

type DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes {
	return DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes{ref: ref}
}

func (rhc DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes {
	return DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes{ref: ref}
}

func (rhc DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type DataRewriteRuleSetRewriteRuleUrlAttributes struct {
	ref terra.Reference
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) InternalWithRef(ref terra.Reference) DataRewriteRuleSetRewriteRuleUrlAttributes {
	return DataRewriteRuleSetRewriteRuleUrlAttributes{ref: ref}
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) Components() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("components"))
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("path"))
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) QueryString() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("query_string"))
}

func (u DataRewriteRuleSetRewriteRuleUrlAttributes) Reroute() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("reroute"))
}

type DataSkuAttributes struct {
	ref terra.Reference
}

func (s DataSkuAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSkuAttributes) InternalWithRef(ref terra.Reference) DataSkuAttributes {
	return DataSkuAttributes{ref: ref}
}

func (s DataSkuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("capacity"))
}

func (s DataSkuAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataSkuAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

type DataSslCertificateAttributes struct {
	ref terra.Reference
}

func (sc DataSslCertificateAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSslCertificateAttributes) InternalWithRef(ref terra.Reference) DataSslCertificateAttributes {
	return DataSslCertificateAttributes{ref: ref}
}

func (sc DataSslCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

func (sc DataSslCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key_vault_secret_id"))
}

func (sc DataSslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc DataSslCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("public_cert_data"))
}

type DataSslPolicyAttributes struct {
	ref terra.Reference
}

func (sp DataSslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp DataSslPolicyAttributes) InternalWithRef(ref terra.Reference) DataSslPolicyAttributes {
	return DataSslPolicyAttributes{ref: ref}
}

func (sp DataSslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp DataSslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp DataSslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp DataSslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp DataSslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp DataSslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type DataSslProfileAttributes struct {
	ref terra.Reference
}

func (sp DataSslProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp DataSslProfileAttributes) InternalWithRef(ref terra.Reference) DataSslProfileAttributes {
	return DataSslProfileAttributes{ref: ref}
}

func (sp DataSslProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp DataSslProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("id"))
}

func (sp DataSslProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("name"))
}

func (sp DataSslProfileAttributes) TrustedClientCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("trusted_client_certificate_names"))
}

func (sp DataSslProfileAttributes) VerifyClientCertificateIssuerDn() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("verify_client_certificate_issuer_dn"))
}

func (sp DataSslProfileAttributes) VerifyClientCertificateRevocation() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("verify_client_certificate_revocation"))
}

func (sp DataSslProfileAttributes) SslPolicy() terra.ListValue[DataSslProfileSslPolicyAttributes] {
	return terra.ReferenceAsList[DataSslProfileSslPolicyAttributes](sp.ref.Append("ssl_policy"))
}

type DataSslProfileSslPolicyAttributes struct {
	ref terra.Reference
}

func (sp DataSslProfileSslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp DataSslProfileSslPolicyAttributes) InternalWithRef(ref terra.Reference) DataSslProfileSslPolicyAttributes {
	return DataSslProfileSslPolicyAttributes{ref: ref}
}

func (sp DataSslProfileSslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp DataSslProfileSslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp DataSslProfileSslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp DataSslProfileSslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp DataSslProfileSslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp DataSslProfileSslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type DataTrustedClientCertificateAttributes struct {
	ref terra.Reference
}

func (tcc DataTrustedClientCertificateAttributes) InternalRef() (terra.Reference, error) {
	return tcc.ref, nil
}

func (tcc DataTrustedClientCertificateAttributes) InternalWithRef(ref terra.Reference) DataTrustedClientCertificateAttributes {
	return DataTrustedClientCertificateAttributes{ref: ref}
}

func (tcc DataTrustedClientCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tcc.ref.InternalTokens()
}

func (tcc DataTrustedClientCertificateAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("data"))
}

func (tcc DataTrustedClientCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("id"))
}

func (tcc DataTrustedClientCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("name"))
}

type DataTrustedRootCertificateAttributes struct {
	ref terra.Reference
}

func (trc DataTrustedRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return trc.ref, nil
}

func (trc DataTrustedRootCertificateAttributes) InternalWithRef(ref terra.Reference) DataTrustedRootCertificateAttributes {
	return DataTrustedRootCertificateAttributes{ref: ref}
}

func (trc DataTrustedRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trc.ref.InternalTokens()
}

func (trc DataTrustedRootCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("id"))
}

func (trc DataTrustedRootCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("key_vault_secret_id"))
}

func (trc DataTrustedRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("name"))
}

type DataUrlPathMapAttributes struct {
	ref terra.Reference
}

func (upm DataUrlPathMapAttributes) InternalRef() (terra.Reference, error) {
	return upm.ref, nil
}

func (upm DataUrlPathMapAttributes) InternalWithRef(ref terra.Reference) DataUrlPathMapAttributes {
	return DataUrlPathMapAttributes{ref: ref}
}

func (upm DataUrlPathMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upm.ref.InternalTokens()
}

func (upm DataUrlPathMapAttributes) DefaultBackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_id"))
}

func (upm DataUrlPathMapAttributes) DefaultBackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_name"))
}

func (upm DataUrlPathMapAttributes) DefaultBackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_id"))
}

func (upm DataUrlPathMapAttributes) DefaultBackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_name"))
}

func (upm DataUrlPathMapAttributes) DefaultRedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_id"))
}

func (upm DataUrlPathMapAttributes) DefaultRedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_name"))
}

func (upm DataUrlPathMapAttributes) DefaultRewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_id"))
}

func (upm DataUrlPathMapAttributes) DefaultRewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_name"))
}

func (upm DataUrlPathMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("id"))
}

func (upm DataUrlPathMapAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("name"))
}

func (upm DataUrlPathMapAttributes) PathRule() terra.ListValue[DataUrlPathMapPathRuleAttributes] {
	return terra.ReferenceAsList[DataUrlPathMapPathRuleAttributes](upm.ref.Append("path_rule"))
}

type DataUrlPathMapPathRuleAttributes struct {
	ref terra.Reference
}

func (pr DataUrlPathMapPathRuleAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr DataUrlPathMapPathRuleAttributes) InternalWithRef(ref terra.Reference) DataUrlPathMapPathRuleAttributes {
	return DataUrlPathMapPathRuleAttributes{ref: ref}
}

func (pr DataUrlPathMapPathRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr DataUrlPathMapPathRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_id"))
}

func (pr DataUrlPathMapPathRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_name"))
}

func (pr DataUrlPathMapPathRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_id"))
}

func (pr DataUrlPathMapPathRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_name"))
}

func (pr DataUrlPathMapPathRuleAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("firewall_policy_id"))
}

func (pr DataUrlPathMapPathRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("id"))
}

func (pr DataUrlPathMapPathRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("name"))
}

func (pr DataUrlPathMapPathRuleAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pr.ref.Append("paths"))
}

func (pr DataUrlPathMapPathRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_id"))
}

func (pr DataUrlPathMapPathRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_name"))
}

func (pr DataUrlPathMapPathRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_id"))
}

func (pr DataUrlPathMapPathRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_name"))
}

type DataWafConfigurationAttributes struct {
	ref terra.Reference
}

func (wc DataWafConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc DataWafConfigurationAttributes) InternalWithRef(ref terra.Reference) DataWafConfigurationAttributes {
	return DataWafConfigurationAttributes{ref: ref}
}

func (wc DataWafConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc DataWafConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("enabled"))
}

func (wc DataWafConfigurationAttributes) FileUploadLimitMb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("file_upload_limit_mb"))
}

func (wc DataWafConfigurationAttributes) FirewallMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("firewall_mode"))
}

func (wc DataWafConfigurationAttributes) MaxRequestBodySizeKb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("max_request_body_size_kb"))
}

func (wc DataWafConfigurationAttributes) RequestBodyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("request_body_check"))
}

func (wc DataWafConfigurationAttributes) RuleSetType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_type"))
}

func (wc DataWafConfigurationAttributes) RuleSetVersion() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_version"))
}

func (wc DataWafConfigurationAttributes) DisabledRuleGroup() terra.ListValue[DataWafConfigurationDisabledRuleGroupAttributes] {
	return terra.ReferenceAsList[DataWafConfigurationDisabledRuleGroupAttributes](wc.ref.Append("disabled_rule_group"))
}

func (wc DataWafConfigurationAttributes) Exclusion() terra.ListValue[DataWafConfigurationExclusionAttributes] {
	return terra.ReferenceAsList[DataWafConfigurationExclusionAttributes](wc.ref.Append("exclusion"))
}

type DataWafConfigurationDisabledRuleGroupAttributes struct {
	ref terra.Reference
}

func (drg DataWafConfigurationDisabledRuleGroupAttributes) InternalRef() (terra.Reference, error) {
	return drg.ref, nil
}

func (drg DataWafConfigurationDisabledRuleGroupAttributes) InternalWithRef(ref terra.Reference) DataWafConfigurationDisabledRuleGroupAttributes {
	return DataWafConfigurationDisabledRuleGroupAttributes{ref: ref}
}

func (drg DataWafConfigurationDisabledRuleGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drg.ref.InternalTokens()
}

func (drg DataWafConfigurationDisabledRuleGroupAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(drg.ref.Append("rule_group_name"))
}

func (drg DataWafConfigurationDisabledRuleGroupAttributes) Rules() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](drg.ref.Append("rules"))
}

type DataWafConfigurationExclusionAttributes struct {
	ref terra.Reference
}

func (e DataWafConfigurationExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataWafConfigurationExclusionAttributes) InternalWithRef(ref terra.Reference) DataWafConfigurationExclusionAttributes {
	return DataWafConfigurationExclusionAttributes{ref: ref}
}

func (e DataWafConfigurationExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataWafConfigurationExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e DataWafConfigurationExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

func (e DataWafConfigurationExclusionAttributes) SelectorMatchOperator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector_match_operator"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAuthenticationCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type DataAutoscaleConfigurationState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
}

type DataBackendAddressPoolState struct {
	Fqdns       []string `json:"fqdns"`
	Id          string   `json:"id"`
	IpAddresses []string `json:"ip_addresses"`
	Name        string   `json:"name"`
}

type DataBackendHttpSettingsState struct {
	AffinityCookieName             string                                                  `json:"affinity_cookie_name"`
	CookieBasedAffinity            string                                                  `json:"cookie_based_affinity"`
	HostName                       string                                                  `json:"host_name"`
	Id                             string                                                  `json:"id"`
	Name                           string                                                  `json:"name"`
	Path                           string                                                  `json:"path"`
	PickHostNameFromBackendAddress bool                                                    `json:"pick_host_name_from_backend_address"`
	Port                           float64                                                 `json:"port"`
	ProbeId                        string                                                  `json:"probe_id"`
	ProbeName                      string                                                  `json:"probe_name"`
	Protocol                       string                                                  `json:"protocol"`
	RequestTimeout                 float64                                                 `json:"request_timeout"`
	TrustedRootCertificateNames    []string                                                `json:"trusted_root_certificate_names"`
	AuthenticationCertificate      []DataBackendHttpSettingsAuthenticationCertificateState `json:"authentication_certificate"`
	ConnectionDraining             []DataBackendHttpSettingsConnectionDrainingState        `json:"connection_draining"`
}

type DataBackendHttpSettingsAuthenticationCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type DataBackendHttpSettingsConnectionDrainingState struct {
	DrainTimeoutSec float64 `json:"drain_timeout_sec"`
	Enabled         bool    `json:"enabled"`
}

type DataCustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type DataFrontendIpConfigurationState struct {
	Id                           string `json:"id"`
	Name                         string `json:"name"`
	PrivateIpAddress             string `json:"private_ip_address"`
	PrivateIpAddressAllocation   string `json:"private_ip_address_allocation"`
	PrivateLinkConfigurationId   string `json:"private_link_configuration_id"`
	PrivateLinkConfigurationName string `json:"private_link_configuration_name"`
	PublicIpAddressId            string `json:"public_ip_address_id"`
	SubnetId                     string `json:"subnet_id"`
}

type DataFrontendPortState struct {
	Id   string  `json:"id"`
	Name string  `json:"name"`
	Port float64 `json:"port"`
}

type DataGatewayIpConfigurationState struct {
	Id       string `json:"id"`
	Name     string `json:"name"`
	SubnetId string `json:"subnet_id"`
}

type DataGlobalState struct {
	RequestBufferingEnabled  bool `json:"request_buffering_enabled"`
	ResponseBufferingEnabled bool `json:"response_buffering_enabled"`
}

type DataHttpListenerState struct {
	FirewallPolicyId            string                                          `json:"firewall_policy_id"`
	FrontendIpConfigurationId   string                                          `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string                                          `json:"frontend_ip_configuration_name"`
	FrontendPortId              string                                          `json:"frontend_port_id"`
	FrontendPortName            string                                          `json:"frontend_port_name"`
	HostName                    string                                          `json:"host_name"`
	HostNames                   []string                                        `json:"host_names"`
	Id                          string                                          `json:"id"`
	Name                        string                                          `json:"name"`
	Protocol                    string                                          `json:"protocol"`
	RequireSni                  bool                                            `json:"require_sni"`
	SslCertificateId            string                                          `json:"ssl_certificate_id"`
	SslCertificateName          string                                          `json:"ssl_certificate_name"`
	SslProfileId                string                                          `json:"ssl_profile_id"`
	SslProfileName              string                                          `json:"ssl_profile_name"`
	CustomErrorConfiguration    []DataHttpListenerCustomErrorConfigurationState `json:"custom_error_configuration"`
}

type DataHttpListenerCustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type DataIdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type DataPrivateEndpointConnectionState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type DataPrivateLinkConfigurationState struct {
	Id              string                                             `json:"id"`
	Name            string                                             `json:"name"`
	IpConfiguration []DataPrivateLinkConfigurationIpConfigurationState `json:"ip_configuration"`
}

type DataPrivateLinkConfigurationIpConfigurationState struct {
	Name                       string `json:"name"`
	Primary                    bool   `json:"primary"`
	PrivateIpAddress           string `json:"private_ip_address"`
	PrivateIpAddressAllocation string `json:"private_ip_address_allocation"`
	SubnetId                   string `json:"subnet_id"`
}

type DataProbeState struct {
	Host                                string                `json:"host"`
	Id                                  string                `json:"id"`
	Interval                            float64               `json:"interval"`
	MinimumServers                      float64               `json:"minimum_servers"`
	Name                                string                `json:"name"`
	Path                                string                `json:"path"`
	PickHostNameFromBackendHttpSettings bool                  `json:"pick_host_name_from_backend_http_settings"`
	Port                                float64               `json:"port"`
	Protocol                            string                `json:"protocol"`
	Timeout                             float64               `json:"timeout"`
	UnhealthyThreshold                  float64               `json:"unhealthy_threshold"`
	Match                               []DataProbeMatchState `json:"match"`
}

type DataProbeMatchState struct {
	Body       string   `json:"body"`
	StatusCode []string `json:"status_code"`
}

type DataRedirectConfigurationState struct {
	Id                 string `json:"id"`
	IncludePath        bool   `json:"include_path"`
	IncludeQueryString bool   `json:"include_query_string"`
	Name               string `json:"name"`
	RedirectType       string `json:"redirect_type"`
	TargetListenerId   string `json:"target_listener_id"`
	TargetListenerName string `json:"target_listener_name"`
	TargetUrl          string `json:"target_url"`
}

type DataRequestRoutingRuleState struct {
	BackendAddressPoolId      string  `json:"backend_address_pool_id"`
	BackendAddressPoolName    string  `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string  `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string  `json:"backend_http_settings_name"`
	HttpListenerId            string  `json:"http_listener_id"`
	HttpListenerName          string  `json:"http_listener_name"`
	Id                        string  `json:"id"`
	Name                      string  `json:"name"`
	Priority                  float64 `json:"priority"`
	RedirectConfigurationId   string  `json:"redirect_configuration_id"`
	RedirectConfigurationName string  `json:"redirect_configuration_name"`
	RewriteRuleSetId          string  `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string  `json:"rewrite_rule_set_name"`
	RuleType                  string  `json:"rule_type"`
	UrlPathMapId              string  `json:"url_path_map_id"`
	UrlPathMapName            string  `json:"url_path_map_name"`
}

type DataRewriteRuleSetState struct {
	Id          string                               `json:"id"`
	Name        string                               `json:"name"`
	RewriteRule []DataRewriteRuleSetRewriteRuleState `json:"rewrite_rule"`
}

type DataRewriteRuleSetRewriteRuleState struct {
	Name                        string                                                          `json:"name"`
	RuleSequence                float64                                                         `json:"rule_sequence"`
	Condition                   []DataRewriteRuleSetRewriteRuleConditionState                   `json:"condition"`
	RequestHeaderConfiguration  []DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationState  `json:"request_header_configuration"`
	ResponseHeaderConfiguration []DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationState `json:"response_header_configuration"`
	Url                         []DataRewriteRuleSetRewriteRuleUrlState                         `json:"url"`
}

type DataRewriteRuleSetRewriteRuleConditionState struct {
	IgnoreCase bool   `json:"ignore_case"`
	Negate     bool   `json:"negate"`
	Pattern    string `json:"pattern"`
	Variable   string `json:"variable"`
}

type DataRewriteRuleSetRewriteRuleRequestHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type DataRewriteRuleSetRewriteRuleResponseHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type DataRewriteRuleSetRewriteRuleUrlState struct {
	Components  string `json:"components"`
	Path        string `json:"path"`
	QueryString string `json:"query_string"`
	Reroute     bool   `json:"reroute"`
}

type DataSkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
	Tier     string  `json:"tier"`
}

type DataSslCertificateState struct {
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
	PublicCertData   string `json:"public_cert_data"`
}

type DataSslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type DataSslProfileState struct {
	Id                                string                         `json:"id"`
	Name                              string                         `json:"name"`
	TrustedClientCertificateNames     []string                       `json:"trusted_client_certificate_names"`
	VerifyClientCertificateIssuerDn   bool                           `json:"verify_client_certificate_issuer_dn"`
	VerifyClientCertificateRevocation string                         `json:"verify_client_certificate_revocation"`
	SslPolicy                         []DataSslProfileSslPolicyState `json:"ssl_policy"`
}

type DataSslProfileSslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type DataTrustedClientCertificateState struct {
	Data string `json:"data"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type DataTrustedRootCertificateState struct {
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
}

type DataUrlPathMapState struct {
	DefaultBackendAddressPoolId      string                        `json:"default_backend_address_pool_id"`
	DefaultBackendAddressPoolName    string                        `json:"default_backend_address_pool_name"`
	DefaultBackendHttpSettingsId     string                        `json:"default_backend_http_settings_id"`
	DefaultBackendHttpSettingsName   string                        `json:"default_backend_http_settings_name"`
	DefaultRedirectConfigurationId   string                        `json:"default_redirect_configuration_id"`
	DefaultRedirectConfigurationName string                        `json:"default_redirect_configuration_name"`
	DefaultRewriteRuleSetId          string                        `json:"default_rewrite_rule_set_id"`
	DefaultRewriteRuleSetName        string                        `json:"default_rewrite_rule_set_name"`
	Id                               string                        `json:"id"`
	Name                             string                        `json:"name"`
	PathRule                         []DataUrlPathMapPathRuleState `json:"path_rule"`
}

type DataUrlPathMapPathRuleState struct {
	BackendAddressPoolId      string   `json:"backend_address_pool_id"`
	BackendAddressPoolName    string   `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string   `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string   `json:"backend_http_settings_name"`
	FirewallPolicyId          string   `json:"firewall_policy_id"`
	Id                        string   `json:"id"`
	Name                      string   `json:"name"`
	Paths                     []string `json:"paths"`
	RedirectConfigurationId   string   `json:"redirect_configuration_id"`
	RedirectConfigurationName string   `json:"redirect_configuration_name"`
	RewriteRuleSetId          string   `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string   `json:"rewrite_rule_set_name"`
}

type DataWafConfigurationState struct {
	Enabled              bool                                         `json:"enabled"`
	FileUploadLimitMb    float64                                      `json:"file_upload_limit_mb"`
	FirewallMode         string                                       `json:"firewall_mode"`
	MaxRequestBodySizeKb float64                                      `json:"max_request_body_size_kb"`
	RequestBodyCheck     bool                                         `json:"request_body_check"`
	RuleSetType          string                                       `json:"rule_set_type"`
	RuleSetVersion       string                                       `json:"rule_set_version"`
	DisabledRuleGroup    []DataWafConfigurationDisabledRuleGroupState `json:"disabled_rule_group"`
	Exclusion            []DataWafConfigurationExclusionState         `json:"exclusion"`
}

type DataWafConfigurationDisabledRuleGroupState struct {
	RuleGroupName string    `json:"rule_group_name"`
	Rules         []float64 `json:"rules"`
}

type DataWafConfigurationExclusionState struct {
	MatchVariable         string `json:"match_variable"`
	Selector              string `json:"selector"`
	SelectorMatchOperator string `json:"selector_match_operator"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
