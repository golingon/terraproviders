// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_application_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthenticationCertificate struct {
	// Data: string, required
	Data terra.StringValue `hcl:"data,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type AutoscaleConfiguration struct {
	// MaxCapacity: number, optional
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// MinCapacity: number, required
	MinCapacity terra.NumberValue `hcl:"min_capacity,attr" validate:"required"`
}

type BackendAddressPool struct {
	// Fqdns: set of string, optional
	Fqdns terra.SetValue[terra.StringValue] `hcl:"fqdns,attr"`
	// IpAddresses: set of string, optional
	IpAddresses terra.SetValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type BackendHttpSettings struct {
	// AffinityCookieName: string, optional
	AffinityCookieName terra.StringValue `hcl:"affinity_cookie_name,attr"`
	// CookieBasedAffinity: string, required
	CookieBasedAffinity terra.StringValue `hcl:"cookie_based_affinity,attr" validate:"required"`
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PickHostNameFromBackendAddress: bool, optional
	PickHostNameFromBackendAddress terra.BoolValue `hcl:"pick_host_name_from_backend_address,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// ProbeName: string, optional
	ProbeName terra.StringValue `hcl:"probe_name,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RequestTimeout: number, optional
	RequestTimeout terra.NumberValue `hcl:"request_timeout,attr"`
	// TrustedRootCertificateNames: list of string, optional
	TrustedRootCertificateNames terra.ListValue[terra.StringValue] `hcl:"trusted_root_certificate_names,attr"`
	// BackendHttpSettingsAuthenticationCertificate: min=0
	AuthenticationCertificate []BackendHttpSettingsAuthenticationCertificate `hcl:"authentication_certificate,block" validate:"min=0"`
	// BackendHttpSettingsConnectionDraining: optional
	ConnectionDraining *BackendHttpSettingsConnectionDraining `hcl:"connection_draining,block"`
}

type BackendHttpSettingsAuthenticationCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type BackendHttpSettingsConnectionDraining struct {
	// DrainTimeoutSec: number, required
	DrainTimeoutSec terra.NumberValue `hcl:"drain_timeout_sec,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type CustomErrorConfiguration struct {
	// CustomErrorPageUrl: string, required
	CustomErrorPageUrl terra.StringValue `hcl:"custom_error_page_url,attr" validate:"required"`
	// StatusCode: string, required
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
}

type FrontendIpConfiguration struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// PrivateIpAddressAllocation: string, optional
	PrivateIpAddressAllocation terra.StringValue `hcl:"private_ip_address_allocation,attr"`
	// PrivateLinkConfigurationName: string, optional
	PrivateLinkConfigurationName terra.StringValue `hcl:"private_link_configuration_name,attr"`
	// PublicIpAddressId: string, optional
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
}

type FrontendPort struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type GatewayIpConfiguration struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Global struct {
	// RequestBufferingEnabled: bool, required
	RequestBufferingEnabled terra.BoolValue `hcl:"request_buffering_enabled,attr" validate:"required"`
	// ResponseBufferingEnabled: bool, required
	ResponseBufferingEnabled terra.BoolValue `hcl:"response_buffering_enabled,attr" validate:"required"`
}

type HttpListener struct {
	// FirewallPolicyId: string, optional
	FirewallPolicyId terra.StringValue `hcl:"firewall_policy_id,attr"`
	// FrontendIpConfigurationName: string, required
	FrontendIpConfigurationName terra.StringValue `hcl:"frontend_ip_configuration_name,attr" validate:"required"`
	// FrontendPortName: string, required
	FrontendPortName terra.StringValue `hcl:"frontend_port_name,attr" validate:"required"`
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// HostNames: set of string, optional
	HostNames terra.SetValue[terra.StringValue] `hcl:"host_names,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RequireSni: bool, optional
	RequireSni terra.BoolValue `hcl:"require_sni,attr"`
	// SslCertificateName: string, optional
	SslCertificateName terra.StringValue `hcl:"ssl_certificate_name,attr"`
	// SslProfileName: string, optional
	SslProfileName terra.StringValue `hcl:"ssl_profile_name,attr"`
	// HttpListenerCustomErrorConfiguration: min=0
	CustomErrorConfiguration []HttpListenerCustomErrorConfiguration `hcl:"custom_error_configuration,block" validate:"min=0"`
}

type HttpListenerCustomErrorConfiguration struct {
	// CustomErrorPageUrl: string, required
	CustomErrorPageUrl terra.StringValue `hcl:"custom_error_page_url,attr" validate:"required"`
	// StatusCode: string, required
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PrivateLinkConfiguration struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateLinkConfigurationIpConfiguration: min=1
	IpConfiguration []PrivateLinkConfigurationIpConfiguration `hcl:"ip_configuration,block" validate:"min=1"`
}

type PrivateLinkConfigurationIpConfiguration struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Primary: bool, required
	Primary terra.BoolValue `hcl:"primary,attr" validate:"required"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// PrivateIpAddressAllocation: string, required
	PrivateIpAddressAllocation terra.StringValue `hcl:"private_ip_address_allocation,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Probe struct {
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// MinimumServers: number, optional
	MinimumServers terra.NumberValue `hcl:"minimum_servers,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// PickHostNameFromBackendHttpSettings: bool, optional
	PickHostNameFromBackendHttpSettings terra.BoolValue `hcl:"pick_host_name_from_backend_http_settings,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// Timeout: number, required
	Timeout terra.NumberValue `hcl:"timeout,attr" validate:"required"`
	// UnhealthyThreshold: number, required
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr" validate:"required"`
	// ProbeMatch: optional
	Match *ProbeMatch `hcl:"match,block"`
}

type ProbeMatch struct {
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// StatusCode: list of string, required
	StatusCode terra.ListValue[terra.StringValue] `hcl:"status_code,attr" validate:"required"`
}

type RedirectConfiguration struct {
	// IncludePath: bool, optional
	IncludePath terra.BoolValue `hcl:"include_path,attr"`
	// IncludeQueryString: bool, optional
	IncludeQueryString terra.BoolValue `hcl:"include_query_string,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RedirectType: string, required
	RedirectType terra.StringValue `hcl:"redirect_type,attr" validate:"required"`
	// TargetListenerName: string, optional
	TargetListenerName terra.StringValue `hcl:"target_listener_name,attr"`
	// TargetUrl: string, optional
	TargetUrl terra.StringValue `hcl:"target_url,attr"`
}

type RequestRoutingRule struct {
	// BackendAddressPoolName: string, optional
	BackendAddressPoolName terra.StringValue `hcl:"backend_address_pool_name,attr"`
	// BackendHttpSettingsName: string, optional
	BackendHttpSettingsName terra.StringValue `hcl:"backend_http_settings_name,attr"`
	// HttpListenerName: string, required
	HttpListenerName terra.StringValue `hcl:"http_listener_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// RedirectConfigurationName: string, optional
	RedirectConfigurationName terra.StringValue `hcl:"redirect_configuration_name,attr"`
	// RewriteRuleSetName: string, optional
	RewriteRuleSetName terra.StringValue `hcl:"rewrite_rule_set_name,attr"`
	// RuleType: string, required
	RuleType terra.StringValue `hcl:"rule_type,attr" validate:"required"`
	// UrlPathMapName: string, optional
	UrlPathMapName terra.StringValue `hcl:"url_path_map_name,attr"`
}

type RewriteRuleSet struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RewriteRuleSetRewriteRule: min=0
	RewriteRule []RewriteRuleSetRewriteRule `hcl:"rewrite_rule,block" validate:"min=0"`
}

type RewriteRuleSetRewriteRule struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuleSequence: number, required
	RuleSequence terra.NumberValue `hcl:"rule_sequence,attr" validate:"required"`
	// RewriteRuleSetRewriteRuleCondition: min=0
	Condition []RewriteRuleSetRewriteRuleCondition `hcl:"condition,block" validate:"min=0"`
	// RewriteRuleSetRewriteRuleRequestHeaderConfiguration: min=0
	RequestHeaderConfiguration []RewriteRuleSetRewriteRuleRequestHeaderConfiguration `hcl:"request_header_configuration,block" validate:"min=0"`
	// RewriteRuleSetRewriteRuleResponseHeaderConfiguration: min=0
	ResponseHeaderConfiguration []RewriteRuleSetRewriteRuleResponseHeaderConfiguration `hcl:"response_header_configuration,block" validate:"min=0"`
	// RewriteRuleSetRewriteRuleUrl: optional
	Url *RewriteRuleSetRewriteRuleUrl `hcl:"url,block"`
}

type RewriteRuleSetRewriteRuleCondition struct {
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// Negate: bool, optional
	Negate terra.BoolValue `hcl:"negate,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
	// Variable: string, required
	Variable terra.StringValue `hcl:"variable,attr" validate:"required"`
}

type RewriteRuleSetRewriteRuleRequestHeaderConfiguration struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
}

type RewriteRuleSetRewriteRuleResponseHeaderConfiguration struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
}

type RewriteRuleSetRewriteRuleUrl struct {
	// Components: string, optional
	Components terra.StringValue `hcl:"components,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// QueryString: string, optional
	QueryString terra.StringValue `hcl:"query_string,attr"`
	// Reroute: bool, optional
	Reroute terra.BoolValue `hcl:"reroute,attr"`
}

type Sku struct {
	// Capacity: number, optional
	Capacity terra.NumberValue `hcl:"capacity,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
}

type SslCertificate struct {
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// KeyVaultSecretId: string, optional
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
}

type SslPolicy struct {
	// CipherSuites: list of string, optional
	CipherSuites terra.ListValue[terra.StringValue] `hcl:"cipher_suites,attr"`
	// DisabledProtocols: list of string, optional
	DisabledProtocols terra.ListValue[terra.StringValue] `hcl:"disabled_protocols,attr"`
	// MinProtocolVersion: string, optional
	MinProtocolVersion terra.StringValue `hcl:"min_protocol_version,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
}

type SslProfile struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TrustedClientCertificateNames: list of string, optional
	TrustedClientCertificateNames terra.ListValue[terra.StringValue] `hcl:"trusted_client_certificate_names,attr"`
	// VerifyClientCertIssuerDn: bool, optional
	VerifyClientCertIssuerDn terra.BoolValue `hcl:"verify_client_cert_issuer_dn,attr"`
	// VerifyClientCertificateRevocation: string, optional
	VerifyClientCertificateRevocation terra.StringValue `hcl:"verify_client_certificate_revocation,attr"`
	// SslProfileSslPolicy: optional
	SslPolicy *SslProfileSslPolicy `hcl:"ssl_policy,block"`
}

type SslProfileSslPolicy struct {
	// CipherSuites: list of string, optional
	CipherSuites terra.ListValue[terra.StringValue] `hcl:"cipher_suites,attr"`
	// DisabledProtocols: list of string, optional
	DisabledProtocols terra.ListValue[terra.StringValue] `hcl:"disabled_protocols,attr"`
	// MinProtocolVersion: string, optional
	MinProtocolVersion terra.StringValue `hcl:"min_protocol_version,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TrustedClientCertificate struct {
	// Data: string, required
	Data terra.StringValue `hcl:"data,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TrustedRootCertificate struct {
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// KeyVaultSecretId: string, optional
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type UrlPathMap struct {
	// DefaultBackendAddressPoolName: string, optional
	DefaultBackendAddressPoolName terra.StringValue `hcl:"default_backend_address_pool_name,attr"`
	// DefaultBackendHttpSettingsName: string, optional
	DefaultBackendHttpSettingsName terra.StringValue `hcl:"default_backend_http_settings_name,attr"`
	// DefaultRedirectConfigurationName: string, optional
	DefaultRedirectConfigurationName terra.StringValue `hcl:"default_redirect_configuration_name,attr"`
	// DefaultRewriteRuleSetName: string, optional
	DefaultRewriteRuleSetName terra.StringValue `hcl:"default_rewrite_rule_set_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UrlPathMapPathRule: min=1
	PathRule []UrlPathMapPathRule `hcl:"path_rule,block" validate:"min=1"`
}

type UrlPathMapPathRule struct {
	// BackendAddressPoolName: string, optional
	BackendAddressPoolName terra.StringValue `hcl:"backend_address_pool_name,attr"`
	// BackendHttpSettingsName: string, optional
	BackendHttpSettingsName terra.StringValue `hcl:"backend_http_settings_name,attr"`
	// FirewallPolicyId: string, optional
	FirewallPolicyId terra.StringValue `hcl:"firewall_policy_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Paths: list of string, required
	Paths terra.ListValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
	// RedirectConfigurationName: string, optional
	RedirectConfigurationName terra.StringValue `hcl:"redirect_configuration_name,attr"`
	// RewriteRuleSetName: string, optional
	RewriteRuleSetName terra.StringValue `hcl:"rewrite_rule_set_name,attr"`
}

type WafConfiguration struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// FileUploadLimitMb: number, optional
	FileUploadLimitMb terra.NumberValue `hcl:"file_upload_limit_mb,attr"`
	// FirewallMode: string, required
	FirewallMode terra.StringValue `hcl:"firewall_mode,attr" validate:"required"`
	// MaxRequestBodySizeKb: number, optional
	MaxRequestBodySizeKb terra.NumberValue `hcl:"max_request_body_size_kb,attr"`
	// RequestBodyCheck: bool, optional
	RequestBodyCheck terra.BoolValue `hcl:"request_body_check,attr"`
	// RuleSetType: string, optional
	RuleSetType terra.StringValue `hcl:"rule_set_type,attr"`
	// RuleSetVersion: string, required
	RuleSetVersion terra.StringValue `hcl:"rule_set_version,attr" validate:"required"`
	// WafConfigurationDisabledRuleGroup: min=0
	DisabledRuleGroup []WafConfigurationDisabledRuleGroup `hcl:"disabled_rule_group,block" validate:"min=0"`
	// WafConfigurationExclusion: min=0
	Exclusion []WafConfigurationExclusion `hcl:"exclusion,block" validate:"min=0"`
}

type WafConfigurationDisabledRuleGroup struct {
	// RuleGroupName: string, required
	RuleGroupName terra.StringValue `hcl:"rule_group_name,attr" validate:"required"`
	// Rules: list of number, optional
	Rules terra.ListValue[terra.NumberValue] `hcl:"rules,attr"`
}

type WafConfigurationExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// SelectorMatchOperator: string, optional
	SelectorMatchOperator terra.StringValue `hcl:"selector_match_operator,attr"`
}

type PrivateEndpointConnectionAttributes struct {
	ref terra.Reference
}

func (pec PrivateEndpointConnectionAttributes) InternalRef() (terra.Reference, error) {
	return pec.ref, nil
}

func (pec PrivateEndpointConnectionAttributes) InternalWithRef(ref terra.Reference) PrivateEndpointConnectionAttributes {
	return PrivateEndpointConnectionAttributes{ref: ref}
}

func (pec PrivateEndpointConnectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pec.ref.InternalTokens()
}

func (pec PrivateEndpointConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("id"))
}

func (pec PrivateEndpointConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("name"))
}

type AuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac AuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) AuthenticationCertificateAttributes {
	return AuthenticationCertificateAttributes{ref: ref}
}

func (ac AuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuthenticationCertificateAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("data"))
}

func (ac AuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac AuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type AutoscaleConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AutoscaleConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AutoscaleConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoscaleConfigurationAttributes {
	return AutoscaleConfigurationAttributes{ref: ref}
}

func (ac AutoscaleConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AutoscaleConfigurationAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max_capacity"))
}

func (ac AutoscaleConfigurationAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min_capacity"))
}

type BackendAddressPoolAttributes struct {
	ref terra.Reference
}

func (bap BackendAddressPoolAttributes) InternalRef() (terra.Reference, error) {
	return bap.ref, nil
}

func (bap BackendAddressPoolAttributes) InternalWithRef(ref terra.Reference) BackendAddressPoolAttributes {
	return BackendAddressPoolAttributes{ref: ref}
}

func (bap BackendAddressPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bap.ref.InternalTokens()
}

func (bap BackendAddressPoolAttributes) Fqdns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bap.ref.Append("fqdns"))
}

func (bap BackendAddressPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("id"))
}

func (bap BackendAddressPoolAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bap.ref.Append("ip_addresses"))
}

func (bap BackendAddressPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bap.ref.Append("name"))
}

type BackendHttpSettingsAttributes struct {
	ref terra.Reference
}

func (bhs BackendHttpSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bhs.ref, nil
}

func (bhs BackendHttpSettingsAttributes) InternalWithRef(ref terra.Reference) BackendHttpSettingsAttributes {
	return BackendHttpSettingsAttributes{ref: ref}
}

func (bhs BackendHttpSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bhs.ref.InternalTokens()
}

func (bhs BackendHttpSettingsAttributes) AffinityCookieName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("affinity_cookie_name"))
}

func (bhs BackendHttpSettingsAttributes) CookieBasedAffinity() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("cookie_based_affinity"))
}

func (bhs BackendHttpSettingsAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("host_name"))
}

func (bhs BackendHttpSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("id"))
}

func (bhs BackendHttpSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("name"))
}

func (bhs BackendHttpSettingsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("path"))
}

func (bhs BackendHttpSettingsAttributes) PickHostNameFromBackendAddress() terra.BoolValue {
	return terra.ReferenceAsBool(bhs.ref.Append("pick_host_name_from_backend_address"))
}

func (bhs BackendHttpSettingsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("port"))
}

func (bhs BackendHttpSettingsAttributes) ProbeId() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_id"))
}

func (bhs BackendHttpSettingsAttributes) ProbeName() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("probe_name"))
}

func (bhs BackendHttpSettingsAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(bhs.ref.Append("protocol"))
}

func (bhs BackendHttpSettingsAttributes) RequestTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(bhs.ref.Append("request_timeout"))
}

func (bhs BackendHttpSettingsAttributes) TrustedRootCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bhs.ref.Append("trusted_root_certificate_names"))
}

func (bhs BackendHttpSettingsAttributes) AuthenticationCertificate() terra.ListValue[BackendHttpSettingsAuthenticationCertificateAttributes] {
	return terra.ReferenceAsList[BackendHttpSettingsAuthenticationCertificateAttributes](bhs.ref.Append("authentication_certificate"))
}

func (bhs BackendHttpSettingsAttributes) ConnectionDraining() terra.ListValue[BackendHttpSettingsConnectionDrainingAttributes] {
	return terra.ReferenceAsList[BackendHttpSettingsConnectionDrainingAttributes](bhs.ref.Append("connection_draining"))
}

type BackendHttpSettingsAuthenticationCertificateAttributes struct {
	ref terra.Reference
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalWithRef(ref terra.Reference) BackendHttpSettingsAuthenticationCertificateAttributes {
	return BackendHttpSettingsAuthenticationCertificateAttributes{ref: ref}
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

func (ac BackendHttpSettingsAuthenticationCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

type BackendHttpSettingsConnectionDrainingAttributes struct {
	ref terra.Reference
}

func (cd BackendHttpSettingsConnectionDrainingAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd BackendHttpSettingsConnectionDrainingAttributes) InternalWithRef(ref terra.Reference) BackendHttpSettingsConnectionDrainingAttributes {
	return BackendHttpSettingsConnectionDrainingAttributes{ref: ref}
}

func (cd BackendHttpSettingsConnectionDrainingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd BackendHttpSettingsConnectionDrainingAttributes) DrainTimeoutSec() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("drain_timeout_sec"))
}

func (cd BackendHttpSettingsConnectionDrainingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cd.ref.Append("enabled"))
}

type CustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec CustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec CustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) CustomErrorConfigurationAttributes {
	return CustomErrorConfigurationAttributes{ref: ref}
}

func (cec CustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec CustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec CustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec CustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type FrontendIpConfigurationAttributes struct {
	ref terra.Reference
}

func (fic FrontendIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fic.ref, nil
}

func (fic FrontendIpConfigurationAttributes) InternalWithRef(ref terra.Reference) FrontendIpConfigurationAttributes {
	return FrontendIpConfigurationAttributes{ref: ref}
}

func (fic FrontendIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fic.ref.InternalTokens()
}

func (fic FrontendIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("id"))
}

func (fic FrontendIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("name"))
}

func (fic FrontendIpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address"))
}

func (fic FrontendIpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_ip_address_allocation"))
}

func (fic FrontendIpConfigurationAttributes) PrivateLinkConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_id"))
}

func (fic FrontendIpConfigurationAttributes) PrivateLinkConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("private_link_configuration_name"))
}

func (fic FrontendIpConfigurationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("public_ip_address_id"))
}

func (fic FrontendIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(fic.ref.Append("subnet_id"))
}

type FrontendPortAttributes struct {
	ref terra.Reference
}

func (fp FrontendPortAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp FrontendPortAttributes) InternalWithRef(ref terra.Reference) FrontendPortAttributes {
	return FrontendPortAttributes{ref: ref}
}

func (fp FrontendPortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp FrontendPortAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("id"))
}

func (fp FrontendPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("name"))
}

func (fp FrontendPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fp.ref.Append("port"))
}

type GatewayIpConfigurationAttributes struct {
	ref terra.Reference
}

func (gic GatewayIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gic.ref, nil
}

func (gic GatewayIpConfigurationAttributes) InternalWithRef(ref terra.Reference) GatewayIpConfigurationAttributes {
	return GatewayIpConfigurationAttributes{ref: ref}
}

func (gic GatewayIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gic.ref.InternalTokens()
}

func (gic GatewayIpConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("id"))
}

func (gic GatewayIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("name"))
}

func (gic GatewayIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(gic.ref.Append("subnet_id"))
}

type GlobalAttributes struct {
	ref terra.Reference
}

func (g GlobalAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GlobalAttributes) InternalWithRef(ref terra.Reference) GlobalAttributes {
	return GlobalAttributes{ref: ref}
}

func (g GlobalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GlobalAttributes) RequestBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("request_buffering_enabled"))
}

func (g GlobalAttributes) ResponseBufferingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("response_buffering_enabled"))
}

type HttpListenerAttributes struct {
	ref terra.Reference
}

func (hl HttpListenerAttributes) InternalRef() (terra.Reference, error) {
	return hl.ref, nil
}

func (hl HttpListenerAttributes) InternalWithRef(ref terra.Reference) HttpListenerAttributes {
	return HttpListenerAttributes{ref: ref}
}

func (hl HttpListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hl.ref.InternalTokens()
}

func (hl HttpListenerAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("firewall_policy_id"))
}

func (hl HttpListenerAttributes) FrontendIpConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_id"))
}

func (hl HttpListenerAttributes) FrontendIpConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_ip_configuration_name"))
}

func (hl HttpListenerAttributes) FrontendPortId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_id"))
}

func (hl HttpListenerAttributes) FrontendPortName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("frontend_port_name"))
}

func (hl HttpListenerAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("host_name"))
}

func (hl HttpListenerAttributes) HostNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hl.ref.Append("host_names"))
}

func (hl HttpListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("id"))
}

func (hl HttpListenerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("name"))
}

func (hl HttpListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("protocol"))
}

func (hl HttpListenerAttributes) RequireSni() terra.BoolValue {
	return terra.ReferenceAsBool(hl.ref.Append("require_sni"))
}

func (hl HttpListenerAttributes) SslCertificateId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_id"))
}

func (hl HttpListenerAttributes) SslCertificateName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_certificate_name"))
}

func (hl HttpListenerAttributes) SslProfileId() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_id"))
}

func (hl HttpListenerAttributes) SslProfileName() terra.StringValue {
	return terra.ReferenceAsString(hl.ref.Append("ssl_profile_name"))
}

func (hl HttpListenerAttributes) CustomErrorConfiguration() terra.ListValue[HttpListenerCustomErrorConfigurationAttributes] {
	return terra.ReferenceAsList[HttpListenerCustomErrorConfigurationAttributes](hl.ref.Append("custom_error_configuration"))
}

type HttpListenerCustomErrorConfigurationAttributes struct {
	ref terra.Reference
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cec.ref, nil
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpListenerCustomErrorConfigurationAttributes {
	return HttpListenerCustomErrorConfigurationAttributes{ref: ref}
}

func (cec HttpListenerCustomErrorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cec.ref.InternalTokens()
}

func (cec HttpListenerCustomErrorConfigurationAttributes) CustomErrorPageUrl() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("custom_error_page_url"))
}

func (cec HttpListenerCustomErrorConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("id"))
}

func (cec HttpListenerCustomErrorConfigurationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(cec.ref.Append("status_code"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type PrivateLinkConfigurationAttributes struct {
	ref terra.Reference
}

func (plc PrivateLinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return plc.ref, nil
}

func (plc PrivateLinkConfigurationAttributes) InternalWithRef(ref terra.Reference) PrivateLinkConfigurationAttributes {
	return PrivateLinkConfigurationAttributes{ref: ref}
}

func (plc PrivateLinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return plc.ref.InternalTokens()
}

func (plc PrivateLinkConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("id"))
}

func (plc PrivateLinkConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(plc.ref.Append("name"))
}

func (plc PrivateLinkConfigurationAttributes) IpConfiguration() terra.ListValue[PrivateLinkConfigurationIpConfigurationAttributes] {
	return terra.ReferenceAsList[PrivateLinkConfigurationIpConfigurationAttributes](plc.ref.Append("ip_configuration"))
}

type PrivateLinkConfigurationIpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) InternalWithRef(ref terra.Reference) PrivateLinkConfigurationIpConfigurationAttributes {
	return PrivateLinkConfigurationIpConfigurationAttributes{ref: ref}
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("primary"))
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address"))
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address_allocation"))
}

func (ic PrivateLinkConfigurationIpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type ProbeAttributes struct {
	ref terra.Reference
}

func (p ProbeAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProbeAttributes) InternalWithRef(ref terra.Reference) ProbeAttributes {
	return ProbeAttributes{ref: ref}
}

func (p ProbeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProbeAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p ProbeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("id"))
}

func (p ProbeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("interval"))
}

func (p ProbeAttributes) MinimumServers() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("minimum_servers"))
}

func (p ProbeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ProbeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("path"))
}

func (p ProbeAttributes) PickHostNameFromBackendHttpSettings() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("pick_host_name_from_backend_http_settings"))
}

func (p ProbeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

func (p ProbeAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("protocol"))
}

func (p ProbeAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("timeout"))
}

func (p ProbeAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("unhealthy_threshold"))
}

func (p ProbeAttributes) Match() terra.ListValue[ProbeMatchAttributes] {
	return terra.ReferenceAsList[ProbeMatchAttributes](p.ref.Append("match"))
}

type ProbeMatchAttributes struct {
	ref terra.Reference
}

func (m ProbeMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ProbeMatchAttributes) InternalWithRef(ref terra.Reference) ProbeMatchAttributes {
	return ProbeMatchAttributes{ref: ref}
}

func (m ProbeMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ProbeMatchAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("body"))
}

func (m ProbeMatchAttributes) StatusCode() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("status_code"))
}

type RedirectConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RedirectConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RedirectConfigurationAttributes) InternalWithRef(ref terra.Reference) RedirectConfigurationAttributes {
	return RedirectConfigurationAttributes{ref: ref}
}

func (rc RedirectConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RedirectConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("id"))
}

func (rc RedirectConfigurationAttributes) IncludePath() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_path"))
}

func (rc RedirectConfigurationAttributes) IncludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("include_query_string"))
}

func (rc RedirectConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc RedirectConfigurationAttributes) RedirectType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("redirect_type"))
}

func (rc RedirectConfigurationAttributes) TargetListenerId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_id"))
}

func (rc RedirectConfigurationAttributes) TargetListenerName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_listener_name"))
}

func (rc RedirectConfigurationAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("target_url"))
}

type RequestRoutingRuleAttributes struct {
	ref terra.Reference
}

func (rrr RequestRoutingRuleAttributes) InternalRef() (terra.Reference, error) {
	return rrr.ref, nil
}

func (rrr RequestRoutingRuleAttributes) InternalWithRef(ref terra.Reference) RequestRoutingRuleAttributes {
	return RequestRoutingRuleAttributes{ref: ref}
}

func (rrr RequestRoutingRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrr.ref.InternalTokens()
}

func (rrr RequestRoutingRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_id"))
}

func (rrr RequestRoutingRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_address_pool_name"))
}

func (rrr RequestRoutingRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_id"))
}

func (rrr RequestRoutingRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("backend_http_settings_name"))
}

func (rrr RequestRoutingRuleAttributes) HttpListenerId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_id"))
}

func (rrr RequestRoutingRuleAttributes) HttpListenerName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("http_listener_name"))
}

func (rrr RequestRoutingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("id"))
}

func (rrr RequestRoutingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("name"))
}

func (rrr RequestRoutingRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rrr.ref.Append("priority"))
}

func (rrr RequestRoutingRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_id"))
}

func (rrr RequestRoutingRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("redirect_configuration_name"))
}

func (rrr RequestRoutingRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_id"))
}

func (rrr RequestRoutingRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rewrite_rule_set_name"))
}

func (rrr RequestRoutingRuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("rule_type"))
}

func (rrr RequestRoutingRuleAttributes) UrlPathMapId() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_id"))
}

func (rrr RequestRoutingRuleAttributes) UrlPathMapName() terra.StringValue {
	return terra.ReferenceAsString(rrr.ref.Append("url_path_map_name"))
}

type RewriteRuleSetAttributes struct {
	ref terra.Reference
}

func (rrs RewriteRuleSetAttributes) InternalRef() (terra.Reference, error) {
	return rrs.ref, nil
}

func (rrs RewriteRuleSetAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetAttributes {
	return RewriteRuleSetAttributes{ref: ref}
}

func (rrs RewriteRuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rrs.ref.InternalTokens()
}

func (rrs RewriteRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("id"))
}

func (rrs RewriteRuleSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrs.ref.Append("name"))
}

func (rrs RewriteRuleSetAttributes) RewriteRule() terra.ListValue[RewriteRuleSetRewriteRuleAttributes] {
	return terra.ReferenceAsList[RewriteRuleSetRewriteRuleAttributes](rrs.ref.Append("rewrite_rule"))
}

type RewriteRuleSetRewriteRuleAttributes struct {
	ref terra.Reference
}

func (rr RewriteRuleSetRewriteRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RewriteRuleSetRewriteRuleAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetRewriteRuleAttributes {
	return RewriteRuleSetRewriteRuleAttributes{ref: ref}
}

func (rr RewriteRuleSetRewriteRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RewriteRuleSetRewriteRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr RewriteRuleSetRewriteRuleAttributes) RuleSequence() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("rule_sequence"))
}

func (rr RewriteRuleSetRewriteRuleAttributes) Condition() terra.ListValue[RewriteRuleSetRewriteRuleConditionAttributes] {
	return terra.ReferenceAsList[RewriteRuleSetRewriteRuleConditionAttributes](rr.ref.Append("condition"))
}

func (rr RewriteRuleSetRewriteRuleAttributes) RequestHeaderConfiguration() terra.ListValue[RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes](rr.ref.Append("request_header_configuration"))
}

func (rr RewriteRuleSetRewriteRuleAttributes) ResponseHeaderConfiguration() terra.ListValue[RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes] {
	return terra.ReferenceAsList[RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes](rr.ref.Append("response_header_configuration"))
}

func (rr RewriteRuleSetRewriteRuleAttributes) Url() terra.ListValue[RewriteRuleSetRewriteRuleUrlAttributes] {
	return terra.ReferenceAsList[RewriteRuleSetRewriteRuleUrlAttributes](rr.ref.Append("url"))
}

type RewriteRuleSetRewriteRuleConditionAttributes struct {
	ref terra.Reference
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetRewriteRuleConditionAttributes {
	return RewriteRuleSetRewriteRuleConditionAttributes{ref: ref}
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("ignore_case"))
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("negate"))
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("pattern"))
}

func (c RewriteRuleSetRewriteRuleConditionAttributes) Variable() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("variable"))
}

type RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes {
	return RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes{ref: ref}
}

func (rhc RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc RewriteRuleSetRewriteRuleRequestHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes {
	return RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes{ref: ref}
}

func (rhc RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc RewriteRuleSetRewriteRuleResponseHeaderConfigurationAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_value"))
}

type RewriteRuleSetRewriteRuleUrlAttributes struct {
	ref terra.Reference
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) InternalWithRef(ref terra.Reference) RewriteRuleSetRewriteRuleUrlAttributes {
	return RewriteRuleSetRewriteRuleUrlAttributes{ref: ref}
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) Components() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("components"))
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("path"))
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) QueryString() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("query_string"))
}

func (u RewriteRuleSetRewriteRuleUrlAttributes) Reroute() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("reroute"))
}

type SkuAttributes struct {
	ref terra.Reference
}

func (s SkuAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SkuAttributes) InternalWithRef(ref terra.Reference) SkuAttributes {
	return SkuAttributes{ref: ref}
}

func (s SkuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SkuAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("capacity"))
}

func (s SkuAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SkuAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tier"))
}

type SslCertificateAttributes struct {
	ref terra.Reference
}

func (sc SslCertificateAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SslCertificateAttributes) InternalWithRef(ref terra.Reference) SslCertificateAttributes {
	return SslCertificateAttributes{ref: ref}
}

func (sc SslCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SslCertificateAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("data"))
}

func (sc SslCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

func (sc SslCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key_vault_secret_id"))
}

func (sc SslCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc SslCertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

func (sc SslCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("public_cert_data"))
}

type SslPolicyAttributes struct {
	ref terra.Reference
}

func (sp SslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslPolicyAttributes) InternalWithRef(ref terra.Reference) SslPolicyAttributes {
	return SslPolicyAttributes{ref: ref}
}

func (sp SslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp SslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp SslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp SslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp SslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type SslProfileAttributes struct {
	ref terra.Reference
}

func (sp SslProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslProfileAttributes) InternalWithRef(ref terra.Reference) SslProfileAttributes {
	return SslProfileAttributes{ref: ref}
}

func (sp SslProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("id"))
}

func (sp SslProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("name"))
}

func (sp SslProfileAttributes) TrustedClientCertificateNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("trusted_client_certificate_names"))
}

func (sp SslProfileAttributes) VerifyClientCertIssuerDn() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("verify_client_cert_issuer_dn"))
}

func (sp SslProfileAttributes) VerifyClientCertificateRevocation() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("verify_client_certificate_revocation"))
}

func (sp SslProfileAttributes) SslPolicy() terra.ListValue[SslProfileSslPolicyAttributes] {
	return terra.ReferenceAsList[SslProfileSslPolicyAttributes](sp.ref.Append("ssl_policy"))
}

type SslProfileSslPolicyAttributes struct {
	ref terra.Reference
}

func (sp SslProfileSslPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslProfileSslPolicyAttributes) InternalWithRef(ref terra.Reference) SslProfileSslPolicyAttributes {
	return SslProfileSslPolicyAttributes{ref: ref}
}

func (sp SslProfileSslPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslProfileSslPolicyAttributes) CipherSuites() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("cipher_suites"))
}

func (sp SslProfileSslPolicyAttributes) DisabledProtocols() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("disabled_protocols"))
}

func (sp SslProfileSslPolicyAttributes) MinProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("min_protocol_version"))
}

func (sp SslProfileSslPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_name"))
}

func (sp SslProfileSslPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("policy_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrustedClientCertificateAttributes struct {
	ref terra.Reference
}

func (tcc TrustedClientCertificateAttributes) InternalRef() (terra.Reference, error) {
	return tcc.ref, nil
}

func (tcc TrustedClientCertificateAttributes) InternalWithRef(ref terra.Reference) TrustedClientCertificateAttributes {
	return TrustedClientCertificateAttributes{ref: ref}
}

func (tcc TrustedClientCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tcc.ref.InternalTokens()
}

func (tcc TrustedClientCertificateAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("data"))
}

func (tcc TrustedClientCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("id"))
}

func (tcc TrustedClientCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tcc.ref.Append("name"))
}

type TrustedRootCertificateAttributes struct {
	ref terra.Reference
}

func (trc TrustedRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return trc.ref, nil
}

func (trc TrustedRootCertificateAttributes) InternalWithRef(ref terra.Reference) TrustedRootCertificateAttributes {
	return TrustedRootCertificateAttributes{ref: ref}
}

func (trc TrustedRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trc.ref.InternalTokens()
}

func (trc TrustedRootCertificateAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("data"))
}

func (trc TrustedRootCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("id"))
}

func (trc TrustedRootCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("key_vault_secret_id"))
}

func (trc TrustedRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("name"))
}

type UrlPathMapAttributes struct {
	ref terra.Reference
}

func (upm UrlPathMapAttributes) InternalRef() (terra.Reference, error) {
	return upm.ref, nil
}

func (upm UrlPathMapAttributes) InternalWithRef(ref terra.Reference) UrlPathMapAttributes {
	return UrlPathMapAttributes{ref: ref}
}

func (upm UrlPathMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upm.ref.InternalTokens()
}

func (upm UrlPathMapAttributes) DefaultBackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_id"))
}

func (upm UrlPathMapAttributes) DefaultBackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_address_pool_name"))
}

func (upm UrlPathMapAttributes) DefaultBackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_id"))
}

func (upm UrlPathMapAttributes) DefaultBackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_backend_http_settings_name"))
}

func (upm UrlPathMapAttributes) DefaultRedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_id"))
}

func (upm UrlPathMapAttributes) DefaultRedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_redirect_configuration_name"))
}

func (upm UrlPathMapAttributes) DefaultRewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_id"))
}

func (upm UrlPathMapAttributes) DefaultRewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("default_rewrite_rule_set_name"))
}

func (upm UrlPathMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("id"))
}

func (upm UrlPathMapAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(upm.ref.Append("name"))
}

func (upm UrlPathMapAttributes) PathRule() terra.ListValue[UrlPathMapPathRuleAttributes] {
	return terra.ReferenceAsList[UrlPathMapPathRuleAttributes](upm.ref.Append("path_rule"))
}

type UrlPathMapPathRuleAttributes struct {
	ref terra.Reference
}

func (pr UrlPathMapPathRuleAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr UrlPathMapPathRuleAttributes) InternalWithRef(ref terra.Reference) UrlPathMapPathRuleAttributes {
	return UrlPathMapPathRuleAttributes{ref: ref}
}

func (pr UrlPathMapPathRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr UrlPathMapPathRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_id"))
}

func (pr UrlPathMapPathRuleAttributes) BackendAddressPoolName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_address_pool_name"))
}

func (pr UrlPathMapPathRuleAttributes) BackendHttpSettingsId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_id"))
}

func (pr UrlPathMapPathRuleAttributes) BackendHttpSettingsName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("backend_http_settings_name"))
}

func (pr UrlPathMapPathRuleAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("firewall_policy_id"))
}

func (pr UrlPathMapPathRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("id"))
}

func (pr UrlPathMapPathRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("name"))
}

func (pr UrlPathMapPathRuleAttributes) Paths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pr.ref.Append("paths"))
}

func (pr UrlPathMapPathRuleAttributes) RedirectConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_id"))
}

func (pr UrlPathMapPathRuleAttributes) RedirectConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("redirect_configuration_name"))
}

func (pr UrlPathMapPathRuleAttributes) RewriteRuleSetId() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_id"))
}

func (pr UrlPathMapPathRuleAttributes) RewriteRuleSetName() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("rewrite_rule_set_name"))
}

type WafConfigurationAttributes struct {
	ref terra.Reference
}

func (wc WafConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WafConfigurationAttributes) InternalWithRef(ref terra.Reference) WafConfigurationAttributes {
	return WafConfigurationAttributes{ref: ref}
}

func (wc WafConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WafConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("enabled"))
}

func (wc WafConfigurationAttributes) FileUploadLimitMb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("file_upload_limit_mb"))
}

func (wc WafConfigurationAttributes) FirewallMode() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("firewall_mode"))
}

func (wc WafConfigurationAttributes) MaxRequestBodySizeKb() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("max_request_body_size_kb"))
}

func (wc WafConfigurationAttributes) RequestBodyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(wc.ref.Append("request_body_check"))
}

func (wc WafConfigurationAttributes) RuleSetType() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_type"))
}

func (wc WafConfigurationAttributes) RuleSetVersion() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("rule_set_version"))
}

func (wc WafConfigurationAttributes) DisabledRuleGroup() terra.ListValue[WafConfigurationDisabledRuleGroupAttributes] {
	return terra.ReferenceAsList[WafConfigurationDisabledRuleGroupAttributes](wc.ref.Append("disabled_rule_group"))
}

func (wc WafConfigurationAttributes) Exclusion() terra.ListValue[WafConfigurationExclusionAttributes] {
	return terra.ReferenceAsList[WafConfigurationExclusionAttributes](wc.ref.Append("exclusion"))
}

type WafConfigurationDisabledRuleGroupAttributes struct {
	ref terra.Reference
}

func (drg WafConfigurationDisabledRuleGroupAttributes) InternalRef() (terra.Reference, error) {
	return drg.ref, nil
}

func (drg WafConfigurationDisabledRuleGroupAttributes) InternalWithRef(ref terra.Reference) WafConfigurationDisabledRuleGroupAttributes {
	return WafConfigurationDisabledRuleGroupAttributes{ref: ref}
}

func (drg WafConfigurationDisabledRuleGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drg.ref.InternalTokens()
}

func (drg WafConfigurationDisabledRuleGroupAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(drg.ref.Append("rule_group_name"))
}

func (drg WafConfigurationDisabledRuleGroupAttributes) Rules() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](drg.ref.Append("rules"))
}

type WafConfigurationExclusionAttributes struct {
	ref terra.Reference
}

func (e WafConfigurationExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e WafConfigurationExclusionAttributes) InternalWithRef(ref terra.Reference) WafConfigurationExclusionAttributes {
	return WafConfigurationExclusionAttributes{ref: ref}
}

func (e WafConfigurationExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e WafConfigurationExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e WafConfigurationExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

func (e WafConfigurationExclusionAttributes) SelectorMatchOperator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector_match_operator"))
}

type PrivateEndpointConnectionState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type AuthenticationCertificateState struct {
	Data string `json:"data"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type AutoscaleConfigurationState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
}

type BackendAddressPoolState struct {
	Fqdns       []string `json:"fqdns"`
	Id          string   `json:"id"`
	IpAddresses []string `json:"ip_addresses"`
	Name        string   `json:"name"`
}

type BackendHttpSettingsState struct {
	AffinityCookieName             string                                              `json:"affinity_cookie_name"`
	CookieBasedAffinity            string                                              `json:"cookie_based_affinity"`
	HostName                       string                                              `json:"host_name"`
	Id                             string                                              `json:"id"`
	Name                           string                                              `json:"name"`
	Path                           string                                              `json:"path"`
	PickHostNameFromBackendAddress bool                                                `json:"pick_host_name_from_backend_address"`
	Port                           float64                                             `json:"port"`
	ProbeId                        string                                              `json:"probe_id"`
	ProbeName                      string                                              `json:"probe_name"`
	Protocol                       string                                              `json:"protocol"`
	RequestTimeout                 float64                                             `json:"request_timeout"`
	TrustedRootCertificateNames    []string                                            `json:"trusted_root_certificate_names"`
	AuthenticationCertificate      []BackendHttpSettingsAuthenticationCertificateState `json:"authentication_certificate"`
	ConnectionDraining             []BackendHttpSettingsConnectionDrainingState        `json:"connection_draining"`
}

type BackendHttpSettingsAuthenticationCertificateState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type BackendHttpSettingsConnectionDrainingState struct {
	DrainTimeoutSec float64 `json:"drain_timeout_sec"`
	Enabled         bool    `json:"enabled"`
}

type CustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type FrontendIpConfigurationState struct {
	Id                           string `json:"id"`
	Name                         string `json:"name"`
	PrivateIpAddress             string `json:"private_ip_address"`
	PrivateIpAddressAllocation   string `json:"private_ip_address_allocation"`
	PrivateLinkConfigurationId   string `json:"private_link_configuration_id"`
	PrivateLinkConfigurationName string `json:"private_link_configuration_name"`
	PublicIpAddressId            string `json:"public_ip_address_id"`
	SubnetId                     string `json:"subnet_id"`
}

type FrontendPortState struct {
	Id   string  `json:"id"`
	Name string  `json:"name"`
	Port float64 `json:"port"`
}

type GatewayIpConfigurationState struct {
	Id       string `json:"id"`
	Name     string `json:"name"`
	SubnetId string `json:"subnet_id"`
}

type GlobalState struct {
	RequestBufferingEnabled  bool `json:"request_buffering_enabled"`
	ResponseBufferingEnabled bool `json:"response_buffering_enabled"`
}

type HttpListenerState struct {
	FirewallPolicyId            string                                      `json:"firewall_policy_id"`
	FrontendIpConfigurationId   string                                      `json:"frontend_ip_configuration_id"`
	FrontendIpConfigurationName string                                      `json:"frontend_ip_configuration_name"`
	FrontendPortId              string                                      `json:"frontend_port_id"`
	FrontendPortName            string                                      `json:"frontend_port_name"`
	HostName                    string                                      `json:"host_name"`
	HostNames                   []string                                    `json:"host_names"`
	Id                          string                                      `json:"id"`
	Name                        string                                      `json:"name"`
	Protocol                    string                                      `json:"protocol"`
	RequireSni                  bool                                        `json:"require_sni"`
	SslCertificateId            string                                      `json:"ssl_certificate_id"`
	SslCertificateName          string                                      `json:"ssl_certificate_name"`
	SslProfileId                string                                      `json:"ssl_profile_id"`
	SslProfileName              string                                      `json:"ssl_profile_name"`
	CustomErrorConfiguration    []HttpListenerCustomErrorConfigurationState `json:"custom_error_configuration"`
}

type HttpListenerCustomErrorConfigurationState struct {
	CustomErrorPageUrl string `json:"custom_error_page_url"`
	Id                 string `json:"id"`
	StatusCode         string `json:"status_code"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type PrivateLinkConfigurationState struct {
	Id              string                                         `json:"id"`
	Name            string                                         `json:"name"`
	IpConfiguration []PrivateLinkConfigurationIpConfigurationState `json:"ip_configuration"`
}

type PrivateLinkConfigurationIpConfigurationState struct {
	Name                       string `json:"name"`
	Primary                    bool   `json:"primary"`
	PrivateIpAddress           string `json:"private_ip_address"`
	PrivateIpAddressAllocation string `json:"private_ip_address_allocation"`
	SubnetId                   string `json:"subnet_id"`
}

type ProbeState struct {
	Host                                string            `json:"host"`
	Id                                  string            `json:"id"`
	Interval                            float64           `json:"interval"`
	MinimumServers                      float64           `json:"minimum_servers"`
	Name                                string            `json:"name"`
	Path                                string            `json:"path"`
	PickHostNameFromBackendHttpSettings bool              `json:"pick_host_name_from_backend_http_settings"`
	Port                                float64           `json:"port"`
	Protocol                            string            `json:"protocol"`
	Timeout                             float64           `json:"timeout"`
	UnhealthyThreshold                  float64           `json:"unhealthy_threshold"`
	Match                               []ProbeMatchState `json:"match"`
}

type ProbeMatchState struct {
	Body       string   `json:"body"`
	StatusCode []string `json:"status_code"`
}

type RedirectConfigurationState struct {
	Id                 string `json:"id"`
	IncludePath        bool   `json:"include_path"`
	IncludeQueryString bool   `json:"include_query_string"`
	Name               string `json:"name"`
	RedirectType       string `json:"redirect_type"`
	TargetListenerId   string `json:"target_listener_id"`
	TargetListenerName string `json:"target_listener_name"`
	TargetUrl          string `json:"target_url"`
}

type RequestRoutingRuleState struct {
	BackendAddressPoolId      string  `json:"backend_address_pool_id"`
	BackendAddressPoolName    string  `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string  `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string  `json:"backend_http_settings_name"`
	HttpListenerId            string  `json:"http_listener_id"`
	HttpListenerName          string  `json:"http_listener_name"`
	Id                        string  `json:"id"`
	Name                      string  `json:"name"`
	Priority                  float64 `json:"priority"`
	RedirectConfigurationId   string  `json:"redirect_configuration_id"`
	RedirectConfigurationName string  `json:"redirect_configuration_name"`
	RewriteRuleSetId          string  `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string  `json:"rewrite_rule_set_name"`
	RuleType                  string  `json:"rule_type"`
	UrlPathMapId              string  `json:"url_path_map_id"`
	UrlPathMapName            string  `json:"url_path_map_name"`
}

type RewriteRuleSetState struct {
	Id          string                           `json:"id"`
	Name        string                           `json:"name"`
	RewriteRule []RewriteRuleSetRewriteRuleState `json:"rewrite_rule"`
}

type RewriteRuleSetRewriteRuleState struct {
	Name                        string                                                      `json:"name"`
	RuleSequence                float64                                                     `json:"rule_sequence"`
	Condition                   []RewriteRuleSetRewriteRuleConditionState                   `json:"condition"`
	RequestHeaderConfiguration  []RewriteRuleSetRewriteRuleRequestHeaderConfigurationState  `json:"request_header_configuration"`
	ResponseHeaderConfiguration []RewriteRuleSetRewriteRuleResponseHeaderConfigurationState `json:"response_header_configuration"`
	Url                         []RewriteRuleSetRewriteRuleUrlState                         `json:"url"`
}

type RewriteRuleSetRewriteRuleConditionState struct {
	IgnoreCase bool   `json:"ignore_case"`
	Negate     bool   `json:"negate"`
	Pattern    string `json:"pattern"`
	Variable   string `json:"variable"`
}

type RewriteRuleSetRewriteRuleRequestHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type RewriteRuleSetRewriteRuleResponseHeaderConfigurationState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
}

type RewriteRuleSetRewriteRuleUrlState struct {
	Components  string `json:"components"`
	Path        string `json:"path"`
	QueryString string `json:"query_string"`
	Reroute     bool   `json:"reroute"`
}

type SkuState struct {
	Capacity float64 `json:"capacity"`
	Name     string  `json:"name"`
	Tier     string  `json:"tier"`
}

type SslCertificateState struct {
	Data             string `json:"data"`
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
	Password         string `json:"password"`
	PublicCertData   string `json:"public_cert_data"`
}

type SslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type SslProfileState struct {
	Id                                string                     `json:"id"`
	Name                              string                     `json:"name"`
	TrustedClientCertificateNames     []string                   `json:"trusted_client_certificate_names"`
	VerifyClientCertIssuerDn          bool                       `json:"verify_client_cert_issuer_dn"`
	VerifyClientCertificateRevocation string                     `json:"verify_client_certificate_revocation"`
	SslPolicy                         []SslProfileSslPolicyState `json:"ssl_policy"`
}

type SslProfileSslPolicyState struct {
	CipherSuites       []string `json:"cipher_suites"`
	DisabledProtocols  []string `json:"disabled_protocols"`
	MinProtocolVersion string   `json:"min_protocol_version"`
	PolicyName         string   `json:"policy_name"`
	PolicyType         string   `json:"policy_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TrustedClientCertificateState struct {
	Data string `json:"data"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type TrustedRootCertificateState struct {
	Data             string `json:"data"`
	Id               string `json:"id"`
	KeyVaultSecretId string `json:"key_vault_secret_id"`
	Name             string `json:"name"`
}

type UrlPathMapState struct {
	DefaultBackendAddressPoolId      string                    `json:"default_backend_address_pool_id"`
	DefaultBackendAddressPoolName    string                    `json:"default_backend_address_pool_name"`
	DefaultBackendHttpSettingsId     string                    `json:"default_backend_http_settings_id"`
	DefaultBackendHttpSettingsName   string                    `json:"default_backend_http_settings_name"`
	DefaultRedirectConfigurationId   string                    `json:"default_redirect_configuration_id"`
	DefaultRedirectConfigurationName string                    `json:"default_redirect_configuration_name"`
	DefaultRewriteRuleSetId          string                    `json:"default_rewrite_rule_set_id"`
	DefaultRewriteRuleSetName        string                    `json:"default_rewrite_rule_set_name"`
	Id                               string                    `json:"id"`
	Name                             string                    `json:"name"`
	PathRule                         []UrlPathMapPathRuleState `json:"path_rule"`
}

type UrlPathMapPathRuleState struct {
	BackendAddressPoolId      string   `json:"backend_address_pool_id"`
	BackendAddressPoolName    string   `json:"backend_address_pool_name"`
	BackendHttpSettingsId     string   `json:"backend_http_settings_id"`
	BackendHttpSettingsName   string   `json:"backend_http_settings_name"`
	FirewallPolicyId          string   `json:"firewall_policy_id"`
	Id                        string   `json:"id"`
	Name                      string   `json:"name"`
	Paths                     []string `json:"paths"`
	RedirectConfigurationId   string   `json:"redirect_configuration_id"`
	RedirectConfigurationName string   `json:"redirect_configuration_name"`
	RewriteRuleSetId          string   `json:"rewrite_rule_set_id"`
	RewriteRuleSetName        string   `json:"rewrite_rule_set_name"`
}

type WafConfigurationState struct {
	Enabled              bool                                     `json:"enabled"`
	FileUploadLimitMb    float64                                  `json:"file_upload_limit_mb"`
	FirewallMode         string                                   `json:"firewall_mode"`
	MaxRequestBodySizeKb float64                                  `json:"max_request_body_size_kb"`
	RequestBodyCheck     bool                                     `json:"request_body_check"`
	RuleSetType          string                                   `json:"rule_set_type"`
	RuleSetVersion       string                                   `json:"rule_set_version"`
	DisabledRuleGroup    []WafConfigurationDisabledRuleGroupState `json:"disabled_rule_group"`
	Exclusion            []WafConfigurationExclusionState         `json:"exclusion"`
}

type WafConfigurationDisabledRuleGroupState struct {
	RuleGroupName string    `json:"rule_group_name"`
	Rules         []float64 `json:"rules"`
}

type WafConfigurationExclusionState struct {
	MatchVariable         string `json:"match_variable"`
	Selector              string `json:"selector"`
	SelectorMatchOperator string `json:"selector_match_operator"`
}
