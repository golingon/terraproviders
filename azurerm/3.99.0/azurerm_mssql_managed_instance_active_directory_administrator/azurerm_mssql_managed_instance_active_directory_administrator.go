// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_managed_instance_active_directory_administrator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_managed_instance_active_directory_administrator.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlManagedInstanceActiveDirectoryAdministratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ammiada *Resource) Type() string {
	return "azurerm_mssql_managed_instance_active_directory_administrator"
}

// LocalName returns the local name for [Resource].
func (ammiada *Resource) LocalName() string {
	return ammiada.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ammiada *Resource) Configuration() interface{} {
	return ammiada.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ammiada *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ammiada)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ammiada *Resource) Dependencies() terra.Dependencies {
	return ammiada.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ammiada *Resource) LifecycleManagement() *terra.Lifecycle {
	return ammiada.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ammiada *Resource) Attributes() azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes {
	return azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes{ref: terra.ReferenceResource(ammiada)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ammiada *Resource) ImportState(state io.Reader) error {
	ammiada.state = &azurermMssqlManagedInstanceActiveDirectoryAdministratorState{}
	if err := json.NewDecoder(state).Decode(ammiada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ammiada.Type(), ammiada.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ammiada *Resource) State() (*azurermMssqlManagedInstanceActiveDirectoryAdministratorState, bool) {
	return ammiada.state, ammiada.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ammiada *Resource) StateMust() *azurermMssqlManagedInstanceActiveDirectoryAdministratorState {
	if ammiada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ammiada.Type(), ammiada.LocalName()))
	}
	return ammiada.state
}

// Args contains the configurations for azurerm_mssql_managed_instance_active_directory_administrator.
type Args struct {
	// AzureadAuthenticationOnly: bool, optional
	AzureadAuthenticationOnly terra.BoolValue `hcl:"azuread_authentication_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoginUsername: string, required
	LoginUsername terra.StringValue `hcl:"login_username,attr" validate:"required"`
	// ManagedInstanceId: string, required
	ManagedInstanceId terra.StringValue `hcl:"managed_instance_id,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes struct {
	ref terra.Reference
}

// AzureadAuthenticationOnly returns a reference to field azuread_authentication_only of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) AzureadAuthenticationOnly() terra.BoolValue {
	return terra.ReferenceAsBool(ammiada.ref.Append("azuread_authentication_only"))
}

// Id returns a reference to field id of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ammiada.ref.Append("id"))
}

// LoginUsername returns a reference to field login_username of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) LoginUsername() terra.StringValue {
	return terra.ReferenceAsString(ammiada.ref.Append("login_username"))
}

// ManagedInstanceId returns a reference to field managed_instance_id of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) ManagedInstanceId() terra.StringValue {
	return terra.ReferenceAsString(ammiada.ref.Append("managed_instance_id"))
}

// ObjectId returns a reference to field object_id of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(ammiada.ref.Append("object_id"))
}

// TenantId returns a reference to field tenant_id of azurerm_mssql_managed_instance_active_directory_administrator.
func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(ammiada.ref.Append("tenant_id"))
}

func (ammiada azurermMssqlManagedInstanceActiveDirectoryAdministratorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ammiada.ref.Append("timeouts"))
}

type azurermMssqlManagedInstanceActiveDirectoryAdministratorState struct {
	AzureadAuthenticationOnly bool           `json:"azuread_authentication_only"`
	Id                        string         `json:"id"`
	LoginUsername             string         `json:"login_username"`
	ManagedInstanceId         string         `json:"managed_instance_id"`
	ObjectId                  string         `json:"object_id"`
	TenantId                  string         `json:"tenant_id"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
