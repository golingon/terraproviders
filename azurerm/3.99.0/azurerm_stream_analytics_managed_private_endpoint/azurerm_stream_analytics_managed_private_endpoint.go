// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_stream_analytics_managed_private_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_stream_analytics_managed_private_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStreamAnalyticsManagedPrivateEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asampe *Resource) Type() string {
	return "azurerm_stream_analytics_managed_private_endpoint"
}

// LocalName returns the local name for [Resource].
func (asampe *Resource) LocalName() string {
	return asampe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asampe *Resource) Configuration() interface{} {
	return asampe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asampe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asampe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asampe *Resource) Dependencies() terra.Dependencies {
	return asampe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asampe *Resource) LifecycleManagement() *terra.Lifecycle {
	return asampe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asampe *Resource) Attributes() azurermStreamAnalyticsManagedPrivateEndpointAttributes {
	return azurermStreamAnalyticsManagedPrivateEndpointAttributes{ref: terra.ReferenceResource(asampe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asampe *Resource) ImportState(state io.Reader) error {
	asampe.state = &azurermStreamAnalyticsManagedPrivateEndpointState{}
	if err := json.NewDecoder(state).Decode(asampe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asampe.Type(), asampe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asampe *Resource) State() (*azurermStreamAnalyticsManagedPrivateEndpointState, bool) {
	return asampe.state, asampe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asampe *Resource) StateMust() *azurermStreamAnalyticsManagedPrivateEndpointState {
	if asampe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asampe.Type(), asampe.LocalName()))
	}
	return asampe.state
}

// Args contains the configurations for azurerm_stream_analytics_managed_private_endpoint.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StreamAnalyticsClusterName: string, required
	StreamAnalyticsClusterName terra.StringValue `hcl:"stream_analytics_cluster_name,attr" validate:"required"`
	// SubresourceName: string, required
	SubresourceName terra.StringValue `hcl:"subresource_name,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStreamAnalyticsManagedPrivateEndpointAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("resource_group_name"))
}

// StreamAnalyticsClusterName returns a reference to field stream_analytics_cluster_name of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) StreamAnalyticsClusterName() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("stream_analytics_cluster_name"))
}

// SubresourceName returns a reference to field subresource_name of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) SubresourceName() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("subresource_name"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_stream_analytics_managed_private_endpoint.
func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(asampe.ref.Append("target_resource_id"))
}

func (asampe azurermStreamAnalyticsManagedPrivateEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asampe.ref.Append("timeouts"))
}

type azurermStreamAnalyticsManagedPrivateEndpointState struct {
	Id                         string         `json:"id"`
	Name                       string         `json:"name"`
	ResourceGroupName          string         `json:"resource_group_name"`
	StreamAnalyticsClusterName string         `json:"stream_analytics_cluster_name"`
	SubresourceName            string         `json:"subresource_name"`
	TargetResourceId           string         `json:"target_resource_id"`
	Timeouts                   *TimeoutsState `json:"timeouts"`
}
