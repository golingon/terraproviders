// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_elastic_cloud_elasticsearch

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_elastic_cloud_elasticsearch.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermElasticCloudElasticsearchState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aece *Resource) Type() string {
	return "azurerm_elastic_cloud_elasticsearch"
}

// LocalName returns the local name for [Resource].
func (aece *Resource) LocalName() string {
	return aece.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aece *Resource) Configuration() interface{} {
	return aece.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aece *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aece)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aece *Resource) Dependencies() terra.Dependencies {
	return aece.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aece *Resource) LifecycleManagement() *terra.Lifecycle {
	return aece.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aece *Resource) Attributes() azurermElasticCloudElasticsearchAttributes {
	return azurermElasticCloudElasticsearchAttributes{ref: terra.ReferenceResource(aece)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aece *Resource) ImportState(state io.Reader) error {
	aece.state = &azurermElasticCloudElasticsearchState{}
	if err := json.NewDecoder(state).Decode(aece.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aece.Type(), aece.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aece *Resource) State() (*azurermElasticCloudElasticsearchState, bool) {
	return aece.state, aece.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aece *Resource) StateMust() *azurermElasticCloudElasticsearchState {
	if aece.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aece.Type(), aece.LocalName()))
	}
	return aece.state
}

// Args contains the configurations for azurerm_elastic_cloud_elasticsearch.
type Args struct {
	// ElasticCloudEmailAddress: string, required
	ElasticCloudEmailAddress terra.StringValue `hcl:"elastic_cloud_email_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MonitoringEnabled: bool, optional
	MonitoringEnabled terra.BoolValue `hcl:"monitoring_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Logs: optional
	Logs *Logs `hcl:"logs,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermElasticCloudElasticsearchAttributes struct {
	ref terra.Reference
}

// ElasticCloudDeploymentId returns a reference to field elastic_cloud_deployment_id of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ElasticCloudDeploymentId() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("elastic_cloud_deployment_id"))
}

// ElasticCloudEmailAddress returns a reference to field elastic_cloud_email_address of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ElasticCloudEmailAddress() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("elastic_cloud_email_address"))
}

// ElasticCloudSsoDefaultUrl returns a reference to field elastic_cloud_sso_default_url of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ElasticCloudSsoDefaultUrl() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("elastic_cloud_sso_default_url"))
}

// ElasticCloudUserId returns a reference to field elastic_cloud_user_id of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ElasticCloudUserId() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("elastic_cloud_user_id"))
}

// ElasticsearchServiceUrl returns a reference to field elasticsearch_service_url of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ElasticsearchServiceUrl() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("elasticsearch_service_url"))
}

// Id returns a reference to field id of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("id"))
}

// KibanaServiceUrl returns a reference to field kibana_service_url of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) KibanaServiceUrl() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("kibana_service_url"))
}

// KibanaSsoUri returns a reference to field kibana_sso_uri of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) KibanaSsoUri() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("kibana_sso_uri"))
}

// Location returns a reference to field location of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("location"))
}

// MonitoringEnabled returns a reference to field monitoring_enabled of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) MonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aece.ref.Append("monitoring_enabled"))
}

// Name returns a reference to field name of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(aece.ref.Append("sku_name"))
}

// Tags returns a reference to field tags of azurerm_elastic_cloud_elasticsearch.
func (aece azurermElasticCloudElasticsearchAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aece.ref.Append("tags"))
}

func (aece azurermElasticCloudElasticsearchAttributes) Logs() terra.ListValue[LogsAttributes] {
	return terra.ReferenceAsList[LogsAttributes](aece.ref.Append("logs"))
}

func (aece azurermElasticCloudElasticsearchAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aece.ref.Append("timeouts"))
}

type azurermElasticCloudElasticsearchState struct {
	ElasticCloudDeploymentId  string            `json:"elastic_cloud_deployment_id"`
	ElasticCloudEmailAddress  string            `json:"elastic_cloud_email_address"`
	ElasticCloudSsoDefaultUrl string            `json:"elastic_cloud_sso_default_url"`
	ElasticCloudUserId        string            `json:"elastic_cloud_user_id"`
	ElasticsearchServiceUrl   string            `json:"elasticsearch_service_url"`
	Id                        string            `json:"id"`
	KibanaServiceUrl          string            `json:"kibana_service_url"`
	KibanaSsoUri              string            `json:"kibana_sso_uri"`
	Location                  string            `json:"location"`
	MonitoringEnabled         bool              `json:"monitoring_enabled"`
	Name                      string            `json:"name"`
	ResourceGroupName         string            `json:"resource_group_name"`
	SkuName                   string            `json:"sku_name"`
	Tags                      map[string]string `json:"tags"`
	Logs                      []LogsState       `json:"logs"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
