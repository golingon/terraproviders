// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_cassandra_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_cassandra_table.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbCassandraTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acct *Resource) Type() string {
	return "azurerm_cosmosdb_cassandra_table"
}

// LocalName returns the local name for [Resource].
func (acct *Resource) LocalName() string {
	return acct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acct *Resource) Configuration() interface{} {
	return acct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acct *Resource) Dependencies() terra.Dependencies {
	return acct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acct *Resource) LifecycleManagement() *terra.Lifecycle {
	return acct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acct *Resource) Attributes() azurermCosmosdbCassandraTableAttributes {
	return azurermCosmosdbCassandraTableAttributes{ref: terra.ReferenceResource(acct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acct *Resource) ImportState(state io.Reader) error {
	acct.state = &azurermCosmosdbCassandraTableState{}
	if err := json.NewDecoder(state).Decode(acct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acct.Type(), acct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acct *Resource) State() (*azurermCosmosdbCassandraTableState, bool) {
	return acct.state, acct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acct *Resource) StateMust() *azurermCosmosdbCassandraTableState {
	if acct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acct.Type(), acct.LocalName()))
	}
	return acct.state
}

// Args contains the configurations for azurerm_cosmosdb_cassandra_table.
type Args struct {
	// AnalyticalStorageTtl: number, optional
	AnalyticalStorageTtl terra.NumberValue `hcl:"analytical_storage_ttl,attr"`
	// CassandraKeyspaceId: string, required
	CassandraKeyspaceId terra.StringValue `hcl:"cassandra_keyspace_id,attr" validate:"required"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *AutoscaleSettings `hcl:"autoscale_settings,block"`
	// Schema: required
	Schema *Schema `hcl:"schema,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbCassandraTableAttributes struct {
	ref terra.Reference
}

// AnalyticalStorageTtl returns a reference to field analytical_storage_ttl of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) AnalyticalStorageTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(acct.ref.Append("analytical_storage_ttl"))
}

// CassandraKeyspaceId returns a reference to field cassandra_keyspace_id of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) CassandraKeyspaceId() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("cassandra_keyspace_id"))
}

// DefaultTtl returns a reference to field default_ttl of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(acct.ref.Append("default_ttl"))
}

// Id returns a reference to field id of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("name"))
}

// Throughput returns a reference to field throughput of azurerm_cosmosdb_cassandra_table.
func (acct azurermCosmosdbCassandraTableAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(acct.ref.Append("throughput"))
}

func (acct azurermCosmosdbCassandraTableAttributes) AutoscaleSettings() terra.ListValue[AutoscaleSettingsAttributes] {
	return terra.ReferenceAsList[AutoscaleSettingsAttributes](acct.ref.Append("autoscale_settings"))
}

func (acct azurermCosmosdbCassandraTableAttributes) Schema() terra.ListValue[SchemaAttributes] {
	return terra.ReferenceAsList[SchemaAttributes](acct.ref.Append("schema"))
}

func (acct azurermCosmosdbCassandraTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acct.ref.Append("timeouts"))
}

type azurermCosmosdbCassandraTableState struct {
	AnalyticalStorageTtl float64                  `json:"analytical_storage_ttl"`
	CassandraKeyspaceId  string                   `json:"cassandra_keyspace_id"`
	DefaultTtl           float64                  `json:"default_ttl"`
	Id                   string                   `json:"id"`
	Name                 string                   `json:"name"`
	Throughput           float64                  `json:"throughput"`
	AutoscaleSettings    []AutoscaleSettingsState `json:"autoscale_settings"`
	Schema               []SchemaState            `json:"schema"`
	Timeouts             *TimeoutsState           `json:"timeouts"`
}
