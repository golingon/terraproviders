// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_elasticpool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_elasticpool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlElasticpoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ame *Resource) Type() string {
	return "azurerm_mssql_elasticpool"
}

// LocalName returns the local name for [Resource].
func (ame *Resource) LocalName() string {
	return ame.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ame *Resource) Configuration() interface{} {
	return ame.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ame *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ame)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ame *Resource) Dependencies() terra.Dependencies {
	return ame.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ame *Resource) LifecycleManagement() *terra.Lifecycle {
	return ame.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ame *Resource) Attributes() azurermMssqlElasticpoolAttributes {
	return azurermMssqlElasticpoolAttributes{ref: terra.ReferenceResource(ame)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ame *Resource) ImportState(state io.Reader) error {
	ame.state = &azurermMssqlElasticpoolState{}
	if err := json.NewDecoder(state).Decode(ame.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ame.Type(), ame.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ame *Resource) State() (*azurermMssqlElasticpoolState, bool) {
	return ame.state, ame.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ame *Resource) StateMust() *azurermMssqlElasticpoolState {
	if ame.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ame.Type(), ame.LocalName()))
	}
	return ame.state
}

// Args contains the configurations for azurerm_mssql_elasticpool.
type Args struct {
	// EnclaveType: string, optional
	EnclaveType terra.StringValue `hcl:"enclave_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaintenanceConfigurationName: string, optional
	MaintenanceConfigurationName terra.StringValue `hcl:"maintenance_configuration_name,attr"`
	// MaxSizeBytes: number, optional
	MaxSizeBytes terra.NumberValue `hcl:"max_size_bytes,attr"`
	// MaxSizeGb: number, optional
	MaxSizeGb terra.NumberValue `hcl:"max_size_gb,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// PerDatabaseSettings: required
	PerDatabaseSettings *PerDatabaseSettings `hcl:"per_database_settings,block" validate:"required"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMssqlElasticpoolAttributes struct {
	ref terra.Reference
}

// EnclaveType returns a reference to field enclave_type of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) EnclaveType() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("enclave_type"))
}

// Id returns a reference to field id of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("location"))
}

// MaintenanceConfigurationName returns a reference to field maintenance_configuration_name of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) MaintenanceConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("maintenance_configuration_name"))
}

// MaxSizeBytes returns a reference to field max_size_bytes of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) MaxSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(ame.ref.Append("max_size_bytes"))
}

// MaxSizeGb returns a reference to field max_size_gb of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) MaxSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ame.ref.Append("max_size_gb"))
}

// Name returns a reference to field name of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("resource_group_name"))
}

// ServerName returns a reference to field server_name of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("server_name"))
}

// Tags returns a reference to field tags of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ame.ref.Append("tags"))
}

// ZoneRedundant returns a reference to field zone_redundant of azurerm_mssql_elasticpool.
func (ame azurermMssqlElasticpoolAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceAsBool(ame.ref.Append("zone_redundant"))
}

func (ame azurermMssqlElasticpoolAttributes) PerDatabaseSettings() terra.ListValue[PerDatabaseSettingsAttributes] {
	return terra.ReferenceAsList[PerDatabaseSettingsAttributes](ame.ref.Append("per_database_settings"))
}

func (ame azurermMssqlElasticpoolAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](ame.ref.Append("sku"))
}

func (ame azurermMssqlElasticpoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ame.ref.Append("timeouts"))
}

type azurermMssqlElasticpoolState struct {
	EnclaveType                  string                     `json:"enclave_type"`
	Id                           string                     `json:"id"`
	LicenseType                  string                     `json:"license_type"`
	Location                     string                     `json:"location"`
	MaintenanceConfigurationName string                     `json:"maintenance_configuration_name"`
	MaxSizeBytes                 float64                    `json:"max_size_bytes"`
	MaxSizeGb                    float64                    `json:"max_size_gb"`
	Name                         string                     `json:"name"`
	ResourceGroupName            string                     `json:"resource_group_name"`
	ServerName                   string                     `json:"server_name"`
	Tags                         map[string]string          `json:"tags"`
	ZoneRedundant                bool                       `json:"zone_redundant"`
	PerDatabaseSettings          []PerDatabaseSettingsState `json:"per_database_settings"`
	Sku                          []SkuState                 `json:"sku"`
	Timeouts                     *TimeoutsState             `json:"timeouts"`
}
