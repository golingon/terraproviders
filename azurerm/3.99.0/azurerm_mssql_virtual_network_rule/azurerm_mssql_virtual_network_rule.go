// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_virtual_network_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_virtual_network_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlVirtualNetworkRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amvnr *Resource) Type() string {
	return "azurerm_mssql_virtual_network_rule"
}

// LocalName returns the local name for [Resource].
func (amvnr *Resource) LocalName() string {
	return amvnr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amvnr *Resource) Configuration() interface{} {
	return amvnr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amvnr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amvnr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amvnr *Resource) Dependencies() terra.Dependencies {
	return amvnr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amvnr *Resource) LifecycleManagement() *terra.Lifecycle {
	return amvnr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amvnr *Resource) Attributes() azurermMssqlVirtualNetworkRuleAttributes {
	return azurermMssqlVirtualNetworkRuleAttributes{ref: terra.ReferenceResource(amvnr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amvnr *Resource) ImportState(state io.Reader) error {
	amvnr.state = &azurermMssqlVirtualNetworkRuleState{}
	if err := json.NewDecoder(state).Decode(amvnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amvnr.Type(), amvnr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amvnr *Resource) State() (*azurermMssqlVirtualNetworkRuleState, bool) {
	return amvnr.state, amvnr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amvnr *Resource) StateMust() *azurermMssqlVirtualNetworkRuleState {
	if amvnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amvnr.Type(), amvnr.LocalName()))
	}
	return amvnr.state
}

// Args contains the configurations for azurerm_mssql_virtual_network_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreMissingVnetServiceEndpoint: bool, optional
	IgnoreMissingVnetServiceEndpoint terra.BoolValue `hcl:"ignore_missing_vnet_service_endpoint,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMssqlVirtualNetworkRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_mssql_virtual_network_rule.
func (amvnr azurermMssqlVirtualNetworkRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amvnr.ref.Append("id"))
}

// IgnoreMissingVnetServiceEndpoint returns a reference to field ignore_missing_vnet_service_endpoint of azurerm_mssql_virtual_network_rule.
func (amvnr azurermMssqlVirtualNetworkRuleAttributes) IgnoreMissingVnetServiceEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(amvnr.ref.Append("ignore_missing_vnet_service_endpoint"))
}

// Name returns a reference to field name of azurerm_mssql_virtual_network_rule.
func (amvnr azurermMssqlVirtualNetworkRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amvnr.ref.Append("name"))
}

// ServerId returns a reference to field server_id of azurerm_mssql_virtual_network_rule.
func (amvnr azurermMssqlVirtualNetworkRuleAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(amvnr.ref.Append("server_id"))
}

// SubnetId returns a reference to field subnet_id of azurerm_mssql_virtual_network_rule.
func (amvnr azurermMssqlVirtualNetworkRuleAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(amvnr.ref.Append("subnet_id"))
}

func (amvnr azurermMssqlVirtualNetworkRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amvnr.ref.Append("timeouts"))
}

type azurermMssqlVirtualNetworkRuleState struct {
	Id                               string         `json:"id"`
	IgnoreMissingVnetServiceEndpoint bool           `json:"ignore_missing_vnet_service_endpoint"`
	Name                             string         `json:"name"`
	ServerId                         string         `json:"server_id"`
	SubnetId                         string         `json:"subnet_id"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
