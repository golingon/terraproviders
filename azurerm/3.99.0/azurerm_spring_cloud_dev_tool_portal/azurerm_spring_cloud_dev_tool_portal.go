// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_dev_tool_portal

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_dev_tool_portal.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudDevToolPortalState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascdtp *Resource) Type() string {
	return "azurerm_spring_cloud_dev_tool_portal"
}

// LocalName returns the local name for [Resource].
func (ascdtp *Resource) LocalName() string {
	return ascdtp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascdtp *Resource) Configuration() interface{} {
	return ascdtp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascdtp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascdtp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascdtp *Resource) Dependencies() terra.Dependencies {
	return ascdtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascdtp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascdtp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascdtp *Resource) Attributes() azurermSpringCloudDevToolPortalAttributes {
	return azurermSpringCloudDevToolPortalAttributes{ref: terra.ReferenceResource(ascdtp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascdtp *Resource) ImportState(state io.Reader) error {
	ascdtp.state = &azurermSpringCloudDevToolPortalState{}
	if err := json.NewDecoder(state).Decode(ascdtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascdtp.Type(), ascdtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascdtp *Resource) State() (*azurermSpringCloudDevToolPortalState, bool) {
	return ascdtp.state, ascdtp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascdtp *Resource) StateMust() *azurermSpringCloudDevToolPortalState {
	if ascdtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascdtp.Type(), ascdtp.LocalName()))
	}
	return ascdtp.state
}

// Args contains the configurations for azurerm_spring_cloud_dev_tool_portal.
type Args struct {
	// ApplicationAcceleratorEnabled: bool, optional
	ApplicationAcceleratorEnabled terra.BoolValue `hcl:"application_accelerator_enabled,attr"`
	// ApplicationLiveViewEnabled: bool, optional
	ApplicationLiveViewEnabled terra.BoolValue `hcl:"application_live_view_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Sso: optional
	Sso *Sso `hcl:"sso,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudDevToolPortalAttributes struct {
	ref terra.Reference
}

// ApplicationAcceleratorEnabled returns a reference to field application_accelerator_enabled of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) ApplicationAcceleratorEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascdtp.ref.Append("application_accelerator_enabled"))
}

// ApplicationLiveViewEnabled returns a reference to field application_live_view_enabled of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) ApplicationLiveViewEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascdtp.ref.Append("application_live_view_enabled"))
}

// Id returns a reference to field id of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascdtp.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascdtp.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascdtp.ref.Append("public_network_access_enabled"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_dev_tool_portal.
func (ascdtp azurermSpringCloudDevToolPortalAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(ascdtp.ref.Append("spring_cloud_service_id"))
}

func (ascdtp azurermSpringCloudDevToolPortalAttributes) Sso() terra.ListValue[SsoAttributes] {
	return terra.ReferenceAsList[SsoAttributes](ascdtp.ref.Append("sso"))
}

func (ascdtp azurermSpringCloudDevToolPortalAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascdtp.ref.Append("timeouts"))
}

type azurermSpringCloudDevToolPortalState struct {
	ApplicationAcceleratorEnabled bool           `json:"application_accelerator_enabled"`
	ApplicationLiveViewEnabled    bool           `json:"application_live_view_enabled"`
	Id                            string         `json:"id"`
	Name                          string         `json:"name"`
	PublicNetworkAccessEnabled    bool           `json:"public_network_access_enabled"`
	SpringCloudServiceId          string         `json:"spring_cloud_service_id"`
	Sso                           []SsoState     `json:"sso"`
	Timeouts                      *TimeoutsState `json:"timeouts"`
}
