// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_new_relic_application_performance_monitoring

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_new_relic_application_performance_monitoring.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudNewRelicApplicationPerformanceMonitoringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascnrapm *Resource) Type() string {
	return "azurerm_spring_cloud_new_relic_application_performance_monitoring"
}

// LocalName returns the local name for [Resource].
func (ascnrapm *Resource) LocalName() string {
	return ascnrapm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascnrapm *Resource) Configuration() interface{} {
	return ascnrapm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascnrapm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascnrapm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascnrapm *Resource) Dependencies() terra.Dependencies {
	return ascnrapm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascnrapm *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascnrapm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascnrapm *Resource) Attributes() azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes {
	return azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes{ref: terra.ReferenceResource(ascnrapm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascnrapm *Resource) ImportState(state io.Reader) error {
	ascnrapm.state = &azurermSpringCloudNewRelicApplicationPerformanceMonitoringState{}
	if err := json.NewDecoder(state).Decode(ascnrapm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascnrapm.Type(), ascnrapm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascnrapm *Resource) State() (*azurermSpringCloudNewRelicApplicationPerformanceMonitoringState, bool) {
	return ascnrapm.state, ascnrapm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascnrapm *Resource) StateMust() *azurermSpringCloudNewRelicApplicationPerformanceMonitoringState {
	if ascnrapm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascnrapm.Type(), ascnrapm.LocalName()))
	}
	return ascnrapm.state
}

// Args contains the configurations for azurerm_spring_cloud_new_relic_application_performance_monitoring.
type Args struct {
	// AgentEnabled: bool, optional
	AgentEnabled terra.BoolValue `hcl:"agent_enabled,attr"`
	// AppName: string, required
	AppName terra.StringValue `hcl:"app_name,attr" validate:"required"`
	// AppServerPort: number, optional
	AppServerPort terra.NumberValue `hcl:"app_server_port,attr"`
	// AuditModeEnabled: bool, optional
	AuditModeEnabled terra.BoolValue `hcl:"audit_mode_enabled,attr"`
	// AutoAppNamingEnabled: bool, optional
	AutoAppNamingEnabled terra.BoolValue `hcl:"auto_app_naming_enabled,attr"`
	// AutoTransactionNamingEnabled: bool, optional
	AutoTransactionNamingEnabled terra.BoolValue `hcl:"auto_transaction_naming_enabled,attr"`
	// CustomTracingEnabled: bool, optional
	CustomTracingEnabled terra.BoolValue `hcl:"custom_tracing_enabled,attr"`
	// GloballyEnabled: bool, optional
	GloballyEnabled terra.BoolValue `hcl:"globally_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LicenseKey: string, required
	LicenseKey terra.StringValue `hcl:"license_key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes struct {
	ref terra.Reference
}

// AgentEnabled returns a reference to field agent_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AgentEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("agent_enabled"))
}

// AppName returns a reference to field app_name of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AppName() terra.StringValue {
	return terra.ReferenceAsString(ascnrapm.ref.Append("app_name"))
}

// AppServerPort returns a reference to field app_server_port of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AppServerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ascnrapm.ref.Append("app_server_port"))
}

// AuditModeEnabled returns a reference to field audit_mode_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AuditModeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("audit_mode_enabled"))
}

// AutoAppNamingEnabled returns a reference to field auto_app_naming_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AutoAppNamingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("auto_app_naming_enabled"))
}

// AutoTransactionNamingEnabled returns a reference to field auto_transaction_naming_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) AutoTransactionNamingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("auto_transaction_naming_enabled"))
}

// CustomTracingEnabled returns a reference to field custom_tracing_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) CustomTracingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("custom_tracing_enabled"))
}

// GloballyEnabled returns a reference to field globally_enabled of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) GloballyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascnrapm.ref.Append("globally_enabled"))
}

// Id returns a reference to field id of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascnrapm.ref.Append("id"))
}

// Labels returns a reference to field labels of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascnrapm.ref.Append("labels"))
}

// LicenseKey returns a reference to field license_key of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) LicenseKey() terra.StringValue {
	return terra.ReferenceAsString(ascnrapm.ref.Append("license_key"))
}

// Name returns a reference to field name of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascnrapm.ref.Append("name"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_new_relic_application_performance_monitoring.
func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(ascnrapm.ref.Append("spring_cloud_service_id"))
}

func (ascnrapm azurermSpringCloudNewRelicApplicationPerformanceMonitoringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascnrapm.ref.Append("timeouts"))
}

type azurermSpringCloudNewRelicApplicationPerformanceMonitoringState struct {
	AgentEnabled                 bool              `json:"agent_enabled"`
	AppName                      string            `json:"app_name"`
	AppServerPort                float64           `json:"app_server_port"`
	AuditModeEnabled             bool              `json:"audit_mode_enabled"`
	AutoAppNamingEnabled         bool              `json:"auto_app_naming_enabled"`
	AutoTransactionNamingEnabled bool              `json:"auto_transaction_naming_enabled"`
	CustomTracingEnabled         bool              `json:"custom_tracing_enabled"`
	GloballyEnabled              bool              `json:"globally_enabled"`
	Id                           string            `json:"id"`
	Labels                       map[string]string `json:"labels"`
	LicenseKey                   string            `json:"license_key"`
	Name                         string            `json:"name"`
	SpringCloudServiceId         string            `json:"spring_cloud_service_id"`
	Timeouts                     *TimeoutsState    `json:"timeouts"`
}
