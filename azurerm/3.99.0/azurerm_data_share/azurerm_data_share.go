// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_share

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_share.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataShareState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ads *Resource) Type() string {
	return "azurerm_data_share"
}

// LocalName returns the local name for [Resource].
func (ads *Resource) LocalName() string {
	return ads.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ads *Resource) Configuration() interface{} {
	return ads.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ads *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ads)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ads *Resource) Dependencies() terra.Dependencies {
	return ads.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ads *Resource) LifecycleManagement() *terra.Lifecycle {
	return ads.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ads *Resource) Attributes() azurermDataShareAttributes {
	return azurermDataShareAttributes{ref: terra.ReferenceResource(ads)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ads *Resource) ImportState(state io.Reader) error {
	ads.state = &azurermDataShareState{}
	if err := json.NewDecoder(state).Decode(ads.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ads.Type(), ads.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ads *Resource) State() (*azurermDataShareState, bool) {
	return ads.state, ads.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ads *Resource) StateMust() *azurermDataShareState {
	if ads.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ads.Type(), ads.LocalName()))
	}
	return ads.state
}

// Args contains the configurations for azurerm_data_share.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Terms: string, optional
	Terms terra.StringValue `hcl:"terms,attr"`
	// SnapshotSchedule: optional
	SnapshotSchedule *SnapshotSchedule `hcl:"snapshot_schedule,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataShareAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of azurerm_data_share.
func (ads azurermDataShareAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("account_id"))
}

// Description returns a reference to field description of azurerm_data_share.
func (ads azurermDataShareAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_data_share.
func (ads azurermDataShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("id"))
}

// Kind returns a reference to field kind of azurerm_data_share.
func (ads azurermDataShareAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("kind"))
}

// Name returns a reference to field name of azurerm_data_share.
func (ads azurermDataShareAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("name"))
}

// Terms returns a reference to field terms of azurerm_data_share.
func (ads azurermDataShareAttributes) Terms() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("terms"))
}

func (ads azurermDataShareAttributes) SnapshotSchedule() terra.ListValue[SnapshotScheduleAttributes] {
	return terra.ReferenceAsList[SnapshotScheduleAttributes](ads.ref.Append("snapshot_schedule"))
}

func (ads azurermDataShareAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ads.ref.Append("timeouts"))
}

type azurermDataShareState struct {
	AccountId        string                  `json:"account_id"`
	Description      string                  `json:"description"`
	Id               string                  `json:"id"`
	Kind             string                  `json:"kind"`
	Name             string                  `json:"name"`
	Terms            string                  `json:"terms"`
	SnapshotSchedule []SnapshotScheduleState `json:"snapshot_schedule"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
