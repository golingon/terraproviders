// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_bot_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_bot_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBotConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abc *Resource) Type() string {
	return "azurerm_bot_connection"
}

// LocalName returns the local name for [Resource].
func (abc *Resource) LocalName() string {
	return abc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abc *Resource) Configuration() interface{} {
	return abc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abc *Resource) Dependencies() terra.Dependencies {
	return abc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abc *Resource) LifecycleManagement() *terra.Lifecycle {
	return abc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abc *Resource) Attributes() azurermBotConnectionAttributes {
	return azurermBotConnectionAttributes{ref: terra.ReferenceResource(abc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abc *Resource) ImportState(state io.Reader) error {
	abc.state = &azurermBotConnectionState{}
	if err := json.NewDecoder(state).Decode(abc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abc.Type(), abc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abc *Resource) State() (*azurermBotConnectionState, bool) {
	return abc.state, abc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abc *Resource) StateMust() *azurermBotConnectionState {
	if abc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abc.Type(), abc.LocalName()))
	}
	return abc.state
}

// Args contains the configurations for azurerm_bot_connection.
type Args struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: string, optional
	Scopes terra.StringValue `hcl:"scopes,attr"`
	// ServiceProviderName: string, required
	ServiceProviderName terra.StringValue `hcl:"service_provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBotConnectionAttributes struct {
	ref terra.Reference
}

// BotName returns a reference to field bot_name of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) BotName() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("bot_name"))
}

// ClientId returns a reference to field client_id of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("client_secret"))
}

// Id returns a reference to field id of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abc.ref.Append("parameters"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("resource_group_name"))
}

// Scopes returns a reference to field scopes of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Scopes() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("scopes"))
}

// ServiceProviderName returns a reference to field service_provider_name of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) ServiceProviderName() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("service_provider_name"))
}

// Tags returns a reference to field tags of azurerm_bot_connection.
func (abc azurermBotConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abc.ref.Append("tags"))
}

func (abc azurermBotConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abc.ref.Append("timeouts"))
}

type azurermBotConnectionState struct {
	BotName             string            `json:"bot_name"`
	ClientId            string            `json:"client_id"`
	ClientSecret        string            `json:"client_secret"`
	Id                  string            `json:"id"`
	Location            string            `json:"location"`
	Name                string            `json:"name"`
	Parameters          map[string]string `json:"parameters"`
	ResourceGroupName   string            `json:"resource_group_name"`
	Scopes              string            `json:"scopes"`
	ServiceProviderName string            `json:"service_provider_name"`
	Tags                map[string]string `json:"tags"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
