// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_mongo_user_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_mongo_user_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbMongoUserDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acmud *Resource) Type() string {
	return "azurerm_cosmosdb_mongo_user_definition"
}

// LocalName returns the local name for [Resource].
func (acmud *Resource) LocalName() string {
	return acmud.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acmud *Resource) Configuration() interface{} {
	return acmud.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acmud *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acmud)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acmud *Resource) Dependencies() terra.Dependencies {
	return acmud.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acmud *Resource) LifecycleManagement() *terra.Lifecycle {
	return acmud.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acmud *Resource) Attributes() azurermCosmosdbMongoUserDefinitionAttributes {
	return azurermCosmosdbMongoUserDefinitionAttributes{ref: terra.ReferenceResource(acmud)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acmud *Resource) ImportState(state io.Reader) error {
	acmud.state = &azurermCosmosdbMongoUserDefinitionState{}
	if err := json.NewDecoder(state).Decode(acmud.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmud.Type(), acmud.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acmud *Resource) State() (*azurermCosmosdbMongoUserDefinitionState, bool) {
	return acmud.state, acmud.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acmud *Resource) StateMust() *azurermCosmosdbMongoUserDefinitionState {
	if acmud.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmud.Type(), acmud.LocalName()))
	}
	return acmud.state
}

// Args contains the configurations for azurerm_cosmosdb_mongo_user_definition.
type Args struct {
	// CosmosMongoDatabaseId: string, required
	CosmosMongoDatabaseId terra.StringValue `hcl:"cosmos_mongo_database_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InheritedRoleNames: list of string, optional
	InheritedRoleNames terra.ListValue[terra.StringValue] `hcl:"inherited_role_names,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbMongoUserDefinitionAttributes struct {
	ref terra.Reference
}

// CosmosMongoDatabaseId returns a reference to field cosmos_mongo_database_id of azurerm_cosmosdb_mongo_user_definition.
func (acmud azurermCosmosdbMongoUserDefinitionAttributes) CosmosMongoDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(acmud.ref.Append("cosmos_mongo_database_id"))
}

// Id returns a reference to field id of azurerm_cosmosdb_mongo_user_definition.
func (acmud azurermCosmosdbMongoUserDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acmud.ref.Append("id"))
}

// InheritedRoleNames returns a reference to field inherited_role_names of azurerm_cosmosdb_mongo_user_definition.
func (acmud azurermCosmosdbMongoUserDefinitionAttributes) InheritedRoleNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](acmud.ref.Append("inherited_role_names"))
}

// Password returns a reference to field password of azurerm_cosmosdb_mongo_user_definition.
func (acmud azurermCosmosdbMongoUserDefinitionAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(acmud.ref.Append("password"))
}

// Username returns a reference to field username of azurerm_cosmosdb_mongo_user_definition.
func (acmud azurermCosmosdbMongoUserDefinitionAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(acmud.ref.Append("username"))
}

func (acmud azurermCosmosdbMongoUserDefinitionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acmud.ref.Append("timeouts"))
}

type azurermCosmosdbMongoUserDefinitionState struct {
	CosmosMongoDatabaseId string         `json:"cosmos_mongo_database_id"`
	Id                    string         `json:"id"`
	InheritedRoleNames    []string       `json:"inherited_role_names"`
	Password              string         `json:"password"`
	Username              string         `json:"username"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
