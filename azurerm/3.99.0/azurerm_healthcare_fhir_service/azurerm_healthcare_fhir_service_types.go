// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_healthcare_fhir_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Authentication struct {
	// Audience: string, required
	Audience terra.StringValue `hcl:"audience,attr" validate:"required"`
	// Authority: string, required
	Authority terra.StringValue `hcl:"authority,attr" validate:"required"`
	// SmartProxyEnabled: bool, optional
	SmartProxyEnabled terra.BoolValue `hcl:"smart_proxy_enabled,attr"`
}

type Cors struct {
	// AllowedHeaders: set of string, required
	AllowedHeaders terra.SetValue[terra.StringValue] `hcl:"allowed_headers,attr" validate:"required"`
	// AllowedMethods: set of string, required
	AllowedMethods terra.SetValue[terra.StringValue] `hcl:"allowed_methods,attr" validate:"required"`
	// AllowedOrigins: set of string, required
	AllowedOrigins terra.SetValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// CredentialsAllowed: bool, optional
	CredentialsAllowed terra.BoolValue `hcl:"credentials_allowed,attr"`
	// MaxAgeInSeconds: number, optional
	MaxAgeInSeconds terra.NumberValue `hcl:"max_age_in_seconds,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type OciArtifact struct {
	// Digest: string, optional
	Digest terra.StringValue `hcl:"digest,attr"`
	// ImageName: string, optional
	ImageName terra.StringValue `hcl:"image_name,attr"`
	// LoginServer: string, required
	LoginServer terra.StringValue `hcl:"login_server,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) Audience() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("audience"))
}

func (a AuthenticationAttributes) Authority() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("authority"))
}

func (a AuthenticationAttributes) SmartProxyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("smart_proxy_enabled"))
}

type CorsAttributes struct {
	ref terra.Reference
}

func (c CorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CorsAttributes) InternalWithRef(ref terra.Reference) CorsAttributes {
	return CorsAttributes{ref: ref}
}

func (c CorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CorsAttributes) AllowedHeaders() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_headers"))
}

func (c CorsAttributes) AllowedMethods() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_methods"))
}

func (c CorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c CorsAttributes) CredentialsAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("credentials_allowed"))
}

func (c CorsAttributes) MaxAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("max_age_in_seconds"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type OciArtifactAttributes struct {
	ref terra.Reference
}

func (oa OciArtifactAttributes) InternalRef() (terra.Reference, error) {
	return oa.ref, nil
}

func (oa OciArtifactAttributes) InternalWithRef(ref terra.Reference) OciArtifactAttributes {
	return OciArtifactAttributes{ref: ref}
}

func (oa OciArtifactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oa.ref.InternalTokens()
}

func (oa OciArtifactAttributes) Digest() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("digest"))
}

func (oa OciArtifactAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("image_name"))
}

func (oa OciArtifactAttributes) LoginServer() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("login_server"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuthenticationState struct {
	Audience          string `json:"audience"`
	Authority         string `json:"authority"`
	SmartProxyEnabled bool   `json:"smart_proxy_enabled"`
}

type CorsState struct {
	AllowedHeaders     []string `json:"allowed_headers"`
	AllowedMethods     []string `json:"allowed_methods"`
	AllowedOrigins     []string `json:"allowed_origins"`
	CredentialsAllowed bool     `json:"credentials_allowed"`
	MaxAgeInSeconds    float64  `json:"max_age_in_seconds"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type OciArtifactState struct {
	Digest      string `json:"digest"`
	ImageName   string `json:"image_name"`
	LoginServer string `json:"login_server"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
