// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_healthcare_fhir_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_healthcare_fhir_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHealthcareFhirServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahfs *Resource) Type() string {
	return "azurerm_healthcare_fhir_service"
}

// LocalName returns the local name for [Resource].
func (ahfs *Resource) LocalName() string {
	return ahfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahfs *Resource) Configuration() interface{} {
	return ahfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahfs *Resource) Dependencies() terra.Dependencies {
	return ahfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahfs *Resource) Attributes() azurermHealthcareFhirServiceAttributes {
	return azurermHealthcareFhirServiceAttributes{ref: terra.ReferenceResource(ahfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahfs *Resource) ImportState(state io.Reader) error {
	ahfs.state = &azurermHealthcareFhirServiceState{}
	if err := json.NewDecoder(state).Decode(ahfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahfs.Type(), ahfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahfs *Resource) State() (*azurermHealthcareFhirServiceState, bool) {
	return ahfs.state, ahfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahfs *Resource) StateMust() *azurermHealthcareFhirServiceState {
	if ahfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahfs.Type(), ahfs.LocalName()))
	}
	return ahfs.state
}

// Args contains the configurations for azurerm_healthcare_fhir_service.
type Args struct {
	// AccessPolicyObjectIds: set of string, optional
	AccessPolicyObjectIds terra.SetValue[terra.StringValue] `hcl:"access_policy_object_ids,attr"`
	// ConfigurationExportStorageAccountName: string, optional
	ConfigurationExportStorageAccountName terra.StringValue `hcl:"configuration_export_storage_account_name,attr"`
	// ContainerRegistryLoginServerUrl: set of string, optional
	ContainerRegistryLoginServerUrl terra.SetValue[terra.StringValue] `hcl:"container_registry_login_server_url,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Authentication: required
	Authentication *Authentication `hcl:"authentication,block" validate:"required"`
	// Cors: optional
	Cors *Cors `hcl:"cors,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// OciArtifact: min=0
	OciArtifact []OciArtifact `hcl:"oci_artifact,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHealthcareFhirServiceAttributes struct {
	ref terra.Reference
}

// AccessPolicyObjectIds returns a reference to field access_policy_object_ids of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) AccessPolicyObjectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ahfs.ref.Append("access_policy_object_ids"))
}

// ConfigurationExportStorageAccountName returns a reference to field configuration_export_storage_account_name of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) ConfigurationExportStorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("configuration_export_storage_account_name"))
}

// ContainerRegistryLoginServerUrl returns a reference to field container_registry_login_server_url of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) ContainerRegistryLoginServerUrl() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ahfs.ref.Append("container_registry_login_server_url"))
}

// Id returns a reference to field id of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("id"))
}

// Kind returns a reference to field kind of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ahfs.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ahfs.ref.Append("tags"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_healthcare_fhir_service.
func (ahfs azurermHealthcareFhirServiceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(ahfs.ref.Append("workspace_id"))
}

func (ahfs azurermHealthcareFhirServiceAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](ahfs.ref.Append("authentication"))
}

func (ahfs azurermHealthcareFhirServiceAttributes) Cors() terra.ListValue[CorsAttributes] {
	return terra.ReferenceAsList[CorsAttributes](ahfs.ref.Append("cors"))
}

func (ahfs azurermHealthcareFhirServiceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ahfs.ref.Append("identity"))
}

func (ahfs azurermHealthcareFhirServiceAttributes) OciArtifact() terra.ListValue[OciArtifactAttributes] {
	return terra.ReferenceAsList[OciArtifactAttributes](ahfs.ref.Append("oci_artifact"))
}

func (ahfs azurermHealthcareFhirServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahfs.ref.Append("timeouts"))
}

type azurermHealthcareFhirServiceState struct {
	AccessPolicyObjectIds                 []string              `json:"access_policy_object_ids"`
	ConfigurationExportStorageAccountName string                `json:"configuration_export_storage_account_name"`
	ContainerRegistryLoginServerUrl       []string              `json:"container_registry_login_server_url"`
	Id                                    string                `json:"id"`
	Kind                                  string                `json:"kind"`
	Location                              string                `json:"location"`
	Name                                  string                `json:"name"`
	PublicNetworkAccessEnabled            bool                  `json:"public_network_access_enabled"`
	ResourceGroupName                     string                `json:"resource_group_name"`
	Tags                                  map[string]string     `json:"tags"`
	WorkspaceId                           string                `json:"workspace_id"`
	Authentication                        []AuthenticationState `json:"authentication"`
	Cors                                  []CorsState           `json:"cors"`
	Identity                              []IdentityState       `json:"identity"`
	OciArtifact                           []OciArtifactState    `json:"oci_artifact"`
	Timeouts                              *TimeoutsState        `json:"timeouts"`
}
