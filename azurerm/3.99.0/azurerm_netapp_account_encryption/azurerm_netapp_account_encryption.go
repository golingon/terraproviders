// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_account_encryption

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_netapp_account_encryption.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetappAccountEncryptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anae *Resource) Type() string {
	return "azurerm_netapp_account_encryption"
}

// LocalName returns the local name for [Resource].
func (anae *Resource) LocalName() string {
	return anae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anae *Resource) Configuration() interface{} {
	return anae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anae *Resource) Dependencies() terra.Dependencies {
	return anae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anae *Resource) LifecycleManagement() *terra.Lifecycle {
	return anae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anae *Resource) Attributes() azurermNetappAccountEncryptionAttributes {
	return azurermNetappAccountEncryptionAttributes{ref: terra.ReferenceResource(anae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anae *Resource) ImportState(state io.Reader) error {
	anae.state = &azurermNetappAccountEncryptionState{}
	if err := json.NewDecoder(state).Decode(anae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anae.Type(), anae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anae *Resource) State() (*azurermNetappAccountEncryptionState, bool) {
	return anae.state, anae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anae *Resource) StateMust() *azurermNetappAccountEncryptionState {
	if anae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anae.Type(), anae.LocalName()))
	}
	return anae.state
}

// Args contains the configurations for azurerm_netapp_account_encryption.
type Args struct {
	// EncryptionKey: string, required
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetappAccountId: string, required
	NetappAccountId terra.StringValue `hcl:"netapp_account_id,attr" validate:"required"`
	// SystemAssignedIdentityPrincipalId: string, optional
	SystemAssignedIdentityPrincipalId terra.StringValue `hcl:"system_assigned_identity_principal_id,attr"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetappAccountEncryptionAttributes struct {
	ref terra.Reference
}

// EncryptionKey returns a reference to field encryption_key of azurerm_netapp_account_encryption.
func (anae azurermNetappAccountEncryptionAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(anae.ref.Append("encryption_key"))
}

// Id returns a reference to field id of azurerm_netapp_account_encryption.
func (anae azurermNetappAccountEncryptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anae.ref.Append("id"))
}

// NetappAccountId returns a reference to field netapp_account_id of azurerm_netapp_account_encryption.
func (anae azurermNetappAccountEncryptionAttributes) NetappAccountId() terra.StringValue {
	return terra.ReferenceAsString(anae.ref.Append("netapp_account_id"))
}

// SystemAssignedIdentityPrincipalId returns a reference to field system_assigned_identity_principal_id of azurerm_netapp_account_encryption.
func (anae azurermNetappAccountEncryptionAttributes) SystemAssignedIdentityPrincipalId() terra.StringValue {
	return terra.ReferenceAsString(anae.ref.Append("system_assigned_identity_principal_id"))
}

// UserAssignedIdentityId returns a reference to field user_assigned_identity_id of azurerm_netapp_account_encryption.
func (anae azurermNetappAccountEncryptionAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(anae.ref.Append("user_assigned_identity_id"))
}

func (anae azurermNetappAccountEncryptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anae.ref.Append("timeouts"))
}

type azurermNetappAccountEncryptionState struct {
	EncryptionKey                     string         `json:"encryption_key"`
	Id                                string         `json:"id"`
	NetappAccountId                   string         `json:"netapp_account_id"`
	SystemAssignedIdentityPrincipalId string         `json:"system_assigned_identity_principal_id"`
	UserAssignedIdentityId            string         `json:"user_assigned_identity_id"`
	Timeouts                          *TimeoutsState `json:"timeouts"`
}
