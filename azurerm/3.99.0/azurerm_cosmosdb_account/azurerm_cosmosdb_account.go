// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_account.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aca *Resource) Type() string {
	return "azurerm_cosmosdb_account"
}

// LocalName returns the local name for [Resource].
func (aca *Resource) LocalName() string {
	return aca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aca *Resource) Configuration() interface{} {
	return aca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aca *Resource) Dependencies() terra.Dependencies {
	return aca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aca *Resource) Attributes() azurermCosmosdbAccountAttributes {
	return azurermCosmosdbAccountAttributes{ref: terra.ReferenceResource(aca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aca *Resource) ImportState(state io.Reader) error {
	aca.state = &azurermCosmosdbAccountState{}
	if err := json.NewDecoder(state).Decode(aca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aca.Type(), aca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aca *Resource) State() (*azurermCosmosdbAccountState, bool) {
	return aca.state, aca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aca *Resource) StateMust() *azurermCosmosdbAccountState {
	if aca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aca.Type(), aca.LocalName()))
	}
	return aca.state
}

// Args contains the configurations for azurerm_cosmosdb_account.
type Args struct {
	// AccessKeyMetadataWritesEnabled: bool, optional
	AccessKeyMetadataWritesEnabled terra.BoolValue `hcl:"access_key_metadata_writes_enabled,attr"`
	// AnalyticalStorageEnabled: bool, optional
	AnalyticalStorageEnabled terra.BoolValue `hcl:"analytical_storage_enabled,attr"`
	// AutomaticFailoverEnabled: bool, optional
	AutomaticFailoverEnabled terra.BoolValue `hcl:"automatic_failover_enabled,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// DefaultIdentityType: string, optional
	DefaultIdentityType terra.StringValue `hcl:"default_identity_type,attr"`
	// EnableAutomaticFailover: bool, optional
	EnableAutomaticFailover terra.BoolValue `hcl:"enable_automatic_failover,attr"`
	// EnableFreeTier: bool, optional
	EnableFreeTier terra.BoolValue `hcl:"enable_free_tier,attr"`
	// EnableMultipleWriteLocations: bool, optional
	EnableMultipleWriteLocations terra.BoolValue `hcl:"enable_multiple_write_locations,attr"`
	// FreeTierEnabled: bool, optional
	FreeTierEnabled terra.BoolValue `hcl:"free_tier_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRangeFilter: string, optional
	IpRangeFilter terra.StringValue `hcl:"ip_range_filter,attr"`
	// IsVirtualNetworkFilterEnabled: bool, optional
	IsVirtualNetworkFilterEnabled terra.BoolValue `hcl:"is_virtual_network_filter_enabled,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// LocalAuthenticationDisabled: bool, optional
	LocalAuthenticationDisabled terra.BoolValue `hcl:"local_authentication_disabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinimalTlsVersion: string, optional
	MinimalTlsVersion terra.StringValue `hcl:"minimal_tls_version,attr"`
	// MongoServerVersion: string, optional
	MongoServerVersion terra.StringValue `hcl:"mongo_server_version,attr"`
	// MultipleWriteLocationsEnabled: bool, optional
	MultipleWriteLocationsEnabled terra.BoolValue `hcl:"multiple_write_locations_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkAclBypassForAzureServices: bool, optional
	NetworkAclBypassForAzureServices terra.BoolValue `hcl:"network_acl_bypass_for_azure_services,attr"`
	// NetworkAclBypassIds: list of string, optional
	NetworkAclBypassIds terra.ListValue[terra.StringValue] `hcl:"network_acl_bypass_ids,attr"`
	// OfferType: string, required
	OfferType terra.StringValue `hcl:"offer_type,attr" validate:"required"`
	// PartitionMergeEnabled: bool, optional
	PartitionMergeEnabled terra.BoolValue `hcl:"partition_merge_enabled,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AnalyticalStorage: optional
	AnalyticalStorage *AnalyticalStorage `hcl:"analytical_storage,block"`
	// Backup: optional
	Backup *Backup `hcl:"backup,block"`
	// Capabilities: min=0
	Capabilities []Capabilities `hcl:"capabilities,block" validate:"min=0"`
	// Capacity: optional
	Capacity *Capacity `hcl:"capacity,block"`
	// ConsistencyPolicy: required
	ConsistencyPolicy *ConsistencyPolicy `hcl:"consistency_policy,block" validate:"required"`
	// CorsRule: optional
	CorsRule *CorsRule `hcl:"cors_rule,block"`
	// GeoLocation: min=1
	GeoLocation []GeoLocation `hcl:"geo_location,block" validate:"min=1"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Restore: optional
	Restore *Restore `hcl:"restore,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualNetworkRule: min=0
	VirtualNetworkRule []VirtualNetworkRule `hcl:"virtual_network_rule,block" validate:"min=0"`
}

type azurermCosmosdbAccountAttributes struct {
	ref terra.Reference
}

// AccessKeyMetadataWritesEnabled returns a reference to field access_key_metadata_writes_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) AccessKeyMetadataWritesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("access_key_metadata_writes_enabled"))
}

// AnalyticalStorageEnabled returns a reference to field analytical_storage_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) AnalyticalStorageEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("analytical_storage_enabled"))
}

// AutomaticFailoverEnabled returns a reference to field automatic_failover_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) AutomaticFailoverEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("automatic_failover_enabled"))
}

// ConnectionStrings returns a reference to field connection_strings of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) ConnectionStrings() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aca.ref.Append("connection_strings"))
}

// CreateMode returns a reference to field create_mode of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("create_mode"))
}

// DefaultIdentityType returns a reference to field default_identity_type of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) DefaultIdentityType() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("default_identity_type"))
}

// EnableAutomaticFailover returns a reference to field enable_automatic_failover of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) EnableAutomaticFailover() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("enable_automatic_failover"))
}

// EnableFreeTier returns a reference to field enable_free_tier of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) EnableFreeTier() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("enable_free_tier"))
}

// EnableMultipleWriteLocations returns a reference to field enable_multiple_write_locations of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) EnableMultipleWriteLocations() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("enable_multiple_write_locations"))
}

// Endpoint returns a reference to field endpoint of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("endpoint"))
}

// FreeTierEnabled returns a reference to field free_tier_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) FreeTierEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("free_tier_enabled"))
}

// Id returns a reference to field id of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("id"))
}

// IpRangeFilter returns a reference to field ip_range_filter of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) IpRangeFilter() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("ip_range_filter"))
}

// IsVirtualNetworkFilterEnabled returns a reference to field is_virtual_network_filter_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) IsVirtualNetworkFilterEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("is_virtual_network_filter_enabled"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("key_vault_key_id"))
}

// Kind returns a reference to field kind of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("kind"))
}

// LocalAuthenticationDisabled returns a reference to field local_authentication_disabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) LocalAuthenticationDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("local_authentication_disabled"))
}

// Location returns a reference to field location of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("location"))
}

// MinimalTlsVersion returns a reference to field minimal_tls_version of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) MinimalTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("minimal_tls_version"))
}

// MongoServerVersion returns a reference to field mongo_server_version of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) MongoServerVersion() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("mongo_server_version"))
}

// MultipleWriteLocationsEnabled returns a reference to field multiple_write_locations_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) MultipleWriteLocationsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("multiple_write_locations_enabled"))
}

// Name returns a reference to field name of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("name"))
}

// NetworkAclBypassForAzureServices returns a reference to field network_acl_bypass_for_azure_services of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) NetworkAclBypassForAzureServices() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("network_acl_bypass_for_azure_services"))
}

// NetworkAclBypassIds returns a reference to field network_acl_bypass_ids of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) NetworkAclBypassIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aca.ref.Append("network_acl_bypass_ids"))
}

// OfferType returns a reference to field offer_type of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) OfferType() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("offer_type"))
}

// PartitionMergeEnabled returns a reference to field partition_merge_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PartitionMergeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("partition_merge_enabled"))
}

// PrimaryKey returns a reference to field primary_key of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_key"))
}

// PrimaryMongodbConnectionString returns a reference to field primary_mongodb_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimaryMongodbConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_mongodb_connection_string"))
}

// PrimaryReadonlyKey returns a reference to field primary_readonly_key of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimaryReadonlyKey() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_readonly_key"))
}

// PrimaryReadonlyMongodbConnectionString returns a reference to field primary_readonly_mongodb_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimaryReadonlyMongodbConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_readonly_mongodb_connection_string"))
}

// PrimaryReadonlySqlConnectionString returns a reference to field primary_readonly_sql_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimaryReadonlySqlConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_readonly_sql_connection_string"))
}

// PrimarySqlConnectionString returns a reference to field primary_sql_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PrimarySqlConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("primary_sql_connection_string"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("public_network_access_enabled"))
}

// ReadEndpoints returns a reference to field read_endpoints of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) ReadEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aca.ref.Append("read_endpoints"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("resource_group_name"))
}

// SecondaryKey returns a reference to field secondary_key of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_key"))
}

// SecondaryMongodbConnectionString returns a reference to field secondary_mongodb_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondaryMongodbConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_mongodb_connection_string"))
}

// SecondaryReadonlyKey returns a reference to field secondary_readonly_key of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondaryReadonlyKey() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_readonly_key"))
}

// SecondaryReadonlyMongodbConnectionString returns a reference to field secondary_readonly_mongodb_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondaryReadonlyMongodbConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_readonly_mongodb_connection_string"))
}

// SecondaryReadonlySqlConnectionString returns a reference to field secondary_readonly_sql_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondaryReadonlySqlConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_readonly_sql_connection_string"))
}

// SecondarySqlConnectionString returns a reference to field secondary_sql_connection_string of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) SecondarySqlConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("secondary_sql_connection_string"))
}

// Tags returns a reference to field tags of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aca.ref.Append("tags"))
}

// WriteEndpoints returns a reference to field write_endpoints of azurerm_cosmosdb_account.
func (aca azurermCosmosdbAccountAttributes) WriteEndpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aca.ref.Append("write_endpoints"))
}

func (aca azurermCosmosdbAccountAttributes) AnalyticalStorage() terra.ListValue[AnalyticalStorageAttributes] {
	return terra.ReferenceAsList[AnalyticalStorageAttributes](aca.ref.Append("analytical_storage"))
}

func (aca azurermCosmosdbAccountAttributes) Backup() terra.ListValue[BackupAttributes] {
	return terra.ReferenceAsList[BackupAttributes](aca.ref.Append("backup"))
}

func (aca azurermCosmosdbAccountAttributes) Capabilities() terra.SetValue[CapabilitiesAttributes] {
	return terra.ReferenceAsSet[CapabilitiesAttributes](aca.ref.Append("capabilities"))
}

func (aca azurermCosmosdbAccountAttributes) Capacity() terra.ListValue[CapacityAttributes] {
	return terra.ReferenceAsList[CapacityAttributes](aca.ref.Append("capacity"))
}

func (aca azurermCosmosdbAccountAttributes) ConsistencyPolicy() terra.ListValue[ConsistencyPolicyAttributes] {
	return terra.ReferenceAsList[ConsistencyPolicyAttributes](aca.ref.Append("consistency_policy"))
}

func (aca azurermCosmosdbAccountAttributes) CorsRule() terra.ListValue[CorsRuleAttributes] {
	return terra.ReferenceAsList[CorsRuleAttributes](aca.ref.Append("cors_rule"))
}

func (aca azurermCosmosdbAccountAttributes) GeoLocation() terra.SetValue[GeoLocationAttributes] {
	return terra.ReferenceAsSet[GeoLocationAttributes](aca.ref.Append("geo_location"))
}

func (aca azurermCosmosdbAccountAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aca.ref.Append("identity"))
}

func (aca azurermCosmosdbAccountAttributes) Restore() terra.ListValue[RestoreAttributes] {
	return terra.ReferenceAsList[RestoreAttributes](aca.ref.Append("restore"))
}

func (aca azurermCosmosdbAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aca.ref.Append("timeouts"))
}

func (aca azurermCosmosdbAccountAttributes) VirtualNetworkRule() terra.SetValue[VirtualNetworkRuleAttributes] {
	return terra.ReferenceAsSet[VirtualNetworkRuleAttributes](aca.ref.Append("virtual_network_rule"))
}

type azurermCosmosdbAccountState struct {
	AccessKeyMetadataWritesEnabled           bool                      `json:"access_key_metadata_writes_enabled"`
	AnalyticalStorageEnabled                 bool                      `json:"analytical_storage_enabled"`
	AutomaticFailoverEnabled                 bool                      `json:"automatic_failover_enabled"`
	ConnectionStrings                        []string                  `json:"connection_strings"`
	CreateMode                               string                    `json:"create_mode"`
	DefaultIdentityType                      string                    `json:"default_identity_type"`
	EnableAutomaticFailover                  bool                      `json:"enable_automatic_failover"`
	EnableFreeTier                           bool                      `json:"enable_free_tier"`
	EnableMultipleWriteLocations             bool                      `json:"enable_multiple_write_locations"`
	Endpoint                                 string                    `json:"endpoint"`
	FreeTierEnabled                          bool                      `json:"free_tier_enabled"`
	Id                                       string                    `json:"id"`
	IpRangeFilter                            string                    `json:"ip_range_filter"`
	IsVirtualNetworkFilterEnabled            bool                      `json:"is_virtual_network_filter_enabled"`
	KeyVaultKeyId                            string                    `json:"key_vault_key_id"`
	Kind                                     string                    `json:"kind"`
	LocalAuthenticationDisabled              bool                      `json:"local_authentication_disabled"`
	Location                                 string                    `json:"location"`
	MinimalTlsVersion                        string                    `json:"minimal_tls_version"`
	MongoServerVersion                       string                    `json:"mongo_server_version"`
	MultipleWriteLocationsEnabled            bool                      `json:"multiple_write_locations_enabled"`
	Name                                     string                    `json:"name"`
	NetworkAclBypassForAzureServices         bool                      `json:"network_acl_bypass_for_azure_services"`
	NetworkAclBypassIds                      []string                  `json:"network_acl_bypass_ids"`
	OfferType                                string                    `json:"offer_type"`
	PartitionMergeEnabled                    bool                      `json:"partition_merge_enabled"`
	PrimaryKey                               string                    `json:"primary_key"`
	PrimaryMongodbConnectionString           string                    `json:"primary_mongodb_connection_string"`
	PrimaryReadonlyKey                       string                    `json:"primary_readonly_key"`
	PrimaryReadonlyMongodbConnectionString   string                    `json:"primary_readonly_mongodb_connection_string"`
	PrimaryReadonlySqlConnectionString       string                    `json:"primary_readonly_sql_connection_string"`
	PrimarySqlConnectionString               string                    `json:"primary_sql_connection_string"`
	PublicNetworkAccessEnabled               bool                      `json:"public_network_access_enabled"`
	ReadEndpoints                            []string                  `json:"read_endpoints"`
	ResourceGroupName                        string                    `json:"resource_group_name"`
	SecondaryKey                             string                    `json:"secondary_key"`
	SecondaryMongodbConnectionString         string                    `json:"secondary_mongodb_connection_string"`
	SecondaryReadonlyKey                     string                    `json:"secondary_readonly_key"`
	SecondaryReadonlyMongodbConnectionString string                    `json:"secondary_readonly_mongodb_connection_string"`
	SecondaryReadonlySqlConnectionString     string                    `json:"secondary_readonly_sql_connection_string"`
	SecondarySqlConnectionString             string                    `json:"secondary_sql_connection_string"`
	Tags                                     map[string]string         `json:"tags"`
	WriteEndpoints                           []string                  `json:"write_endpoints"`
	AnalyticalStorage                        []AnalyticalStorageState  `json:"analytical_storage"`
	Backup                                   []BackupState             `json:"backup"`
	Capabilities                             []CapabilitiesState       `json:"capabilities"`
	Capacity                                 []CapacityState           `json:"capacity"`
	ConsistencyPolicy                        []ConsistencyPolicyState  `json:"consistency_policy"`
	CorsRule                                 []CorsRuleState           `json:"cors_rule"`
	GeoLocation                              []GeoLocationState        `json:"geo_location"`
	Identity                                 []IdentityState           `json:"identity"`
	Restore                                  []RestoreState            `json:"restore"`
	Timeouts                                 *TimeoutsState            `json:"timeouts"`
	VirtualNetworkRule                       []VirtualNetworkRuleState `json:"virtual_network_rule"`
}
