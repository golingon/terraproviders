// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_active_directory_domain_service_replica_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_active_directory_domain_service_replica_set.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermActiveDirectoryDomainServiceReplicaSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaddsrs *Resource) Type() string {
	return "azurerm_active_directory_domain_service_replica_set"
}

// LocalName returns the local name for [Resource].
func (aaddsrs *Resource) LocalName() string {
	return aaddsrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaddsrs *Resource) Configuration() interface{} {
	return aaddsrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaddsrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaddsrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaddsrs *Resource) Dependencies() terra.Dependencies {
	return aaddsrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaddsrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaddsrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaddsrs *Resource) Attributes() azurermActiveDirectoryDomainServiceReplicaSetAttributes {
	return azurermActiveDirectoryDomainServiceReplicaSetAttributes{ref: terra.ReferenceResource(aaddsrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaddsrs *Resource) ImportState(state io.Reader) error {
	aaddsrs.state = &azurermActiveDirectoryDomainServiceReplicaSetState{}
	if err := json.NewDecoder(state).Decode(aaddsrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaddsrs.Type(), aaddsrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaddsrs *Resource) State() (*azurermActiveDirectoryDomainServiceReplicaSetState, bool) {
	return aaddsrs.state, aaddsrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaddsrs *Resource) StateMust() *azurermActiveDirectoryDomainServiceReplicaSetState {
	if aaddsrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaddsrs.Type(), aaddsrs.LocalName()))
	}
	return aaddsrs.state
}

// Args contains the configurations for azurerm_active_directory_domain_service_replica_set.
type Args struct {
	// DomainServiceId: string, required
	DomainServiceId terra.StringValue `hcl:"domain_service_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermActiveDirectoryDomainServiceReplicaSetAttributes struct {
	ref terra.Reference
}

// DomainControllerIpAddresses returns a reference to field domain_controller_ip_addresses of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) DomainControllerIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aaddsrs.ref.Append("domain_controller_ip_addresses"))
}

// DomainServiceId returns a reference to field domain_service_id of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) DomainServiceId() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("domain_service_id"))
}

// ExternalAccessIpAddress returns a reference to field external_access_ip_address of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) ExternalAccessIpAddress() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("external_access_ip_address"))
}

// Id returns a reference to field id of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("location"))
}

// ServiceStatus returns a reference to field service_status of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) ServiceStatus() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("service_status"))
}

// SubnetId returns a reference to field subnet_id of azurerm_active_directory_domain_service_replica_set.
func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aaddsrs.ref.Append("subnet_id"))
}

func (aaddsrs azurermActiveDirectoryDomainServiceReplicaSetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaddsrs.ref.Append("timeouts"))
}

type azurermActiveDirectoryDomainServiceReplicaSetState struct {
	DomainControllerIpAddresses []string       `json:"domain_controller_ip_addresses"`
	DomainServiceId             string         `json:"domain_service_id"`
	ExternalAccessIpAddress     string         `json:"external_access_ip_address"`
	Id                          string         `json:"id"`
	Location                    string         `json:"location"`
	ServiceStatus               string         `json:"service_status"`
	SubnetId                    string         `json:"subnet_id"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
