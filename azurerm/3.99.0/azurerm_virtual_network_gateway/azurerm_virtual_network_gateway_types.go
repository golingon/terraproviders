// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_network_gateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BgpSettings struct {
	// Asn: number, optional
	Asn terra.NumberValue `hcl:"asn,attr"`
	// PeerWeight: number, optional
	PeerWeight terra.NumberValue `hcl:"peer_weight,attr"`
	// BgpSettingsPeeringAddresses: min=0,max=2
	PeeringAddresses []BgpSettingsPeeringAddresses `hcl:"peering_addresses,block" validate:"min=0,max=2"`
}

type BgpSettingsPeeringAddresses struct {
	// ApipaAddresses: list of string, optional
	ApipaAddresses terra.ListValue[terra.StringValue] `hcl:"apipa_addresses,attr"`
	// IpConfigurationName: string, optional
	IpConfigurationName terra.StringValue `hcl:"ip_configuration_name,attr"`
}

type CustomRoute struct {
	// AddressPrefixes: set of string, optional
	AddressPrefixes terra.SetValue[terra.StringValue] `hcl:"address_prefixes,attr"`
}

type IpConfiguration struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrivateIpAddressAllocation: string, optional
	PrivateIpAddressAllocation terra.StringValue `hcl:"private_ip_address_allocation,attr"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type PolicyGroup struct {
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// PolicyGroupPolicyMember: min=1
	PolicyMember []PolicyGroupPolicyMember `hcl:"policy_member,block" validate:"min=1"`
}

type PolicyGroupPolicyMember struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpnClientConfiguration struct {
	// AadAudience: string, optional
	AadAudience terra.StringValue `hcl:"aad_audience,attr"`
	// AadIssuer: string, optional
	AadIssuer terra.StringValue `hcl:"aad_issuer,attr"`
	// AadTenant: string, optional
	AadTenant terra.StringValue `hcl:"aad_tenant,attr"`
	// AddressSpace: list of string, required
	AddressSpace terra.ListValue[terra.StringValue] `hcl:"address_space,attr" validate:"required"`
	// RadiusServerAddress: string, optional
	RadiusServerAddress terra.StringValue `hcl:"radius_server_address,attr"`
	// RadiusServerSecret: string, optional
	RadiusServerSecret terra.StringValue `hcl:"radius_server_secret,attr"`
	// VpnAuthTypes: set of string, optional
	VpnAuthTypes terra.SetValue[terra.StringValue] `hcl:"vpn_auth_types,attr"`
	// VpnClientProtocols: set of string, optional
	VpnClientProtocols terra.SetValue[terra.StringValue] `hcl:"vpn_client_protocols,attr"`
	// VpnClientConfigurationIpsecPolicy: optional
	IpsecPolicy *VpnClientConfigurationIpsecPolicy `hcl:"ipsec_policy,block"`
	// VpnClientConfigurationRadiusServer: min=0
	RadiusServer []VpnClientConfigurationRadiusServer `hcl:"radius_server,block" validate:"min=0"`
	// VpnClientConfigurationRevokedCertificate: min=0
	RevokedCertificate []VpnClientConfigurationRevokedCertificate `hcl:"revoked_certificate,block" validate:"min=0"`
	// VpnClientConfigurationRootCertificate: min=0
	RootCertificate []VpnClientConfigurationRootCertificate `hcl:"root_certificate,block" validate:"min=0"`
	// VpnClientConfigurationVirtualNetworkGatewayClientConnection: min=0
	VirtualNetworkGatewayClientConnection []VpnClientConfigurationVirtualNetworkGatewayClientConnection `hcl:"virtual_network_gateway_client_connection,block" validate:"min=0"`
}

type VpnClientConfigurationIpsecPolicy struct {
	// DhGroup: string, required
	DhGroup terra.StringValue `hcl:"dh_group,attr" validate:"required"`
	// IkeEncryption: string, required
	IkeEncryption terra.StringValue `hcl:"ike_encryption,attr" validate:"required"`
	// IkeIntegrity: string, required
	IkeIntegrity terra.StringValue `hcl:"ike_integrity,attr" validate:"required"`
	// IpsecEncryption: string, required
	IpsecEncryption terra.StringValue `hcl:"ipsec_encryption,attr" validate:"required"`
	// IpsecIntegrity: string, required
	IpsecIntegrity terra.StringValue `hcl:"ipsec_integrity,attr" validate:"required"`
	// PfsGroup: string, required
	PfsGroup terra.StringValue `hcl:"pfs_group,attr" validate:"required"`
	// SaDataSizeInKilobytes: number, required
	SaDataSizeInKilobytes terra.NumberValue `hcl:"sa_data_size_in_kilobytes,attr" validate:"required"`
	// SaLifetimeInSeconds: number, required
	SaLifetimeInSeconds terra.NumberValue `hcl:"sa_lifetime_in_seconds,attr" validate:"required"`
}

type VpnClientConfigurationRadiusServer struct {
	// Address: string, required
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// Score: number, required
	Score terra.NumberValue `hcl:"score,attr" validate:"required"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
}

type VpnClientConfigurationRevokedCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
}

type VpnClientConfigurationRootCertificate struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicCertData: string, required
	PublicCertData terra.StringValue `hcl:"public_cert_data,attr" validate:"required"`
}

type VpnClientConfigurationVirtualNetworkGatewayClientConnection struct {
	// AddressPrefixes: list of string, required
	AddressPrefixes terra.ListValue[terra.StringValue] `hcl:"address_prefixes,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyGroupNames: list of string, required
	PolicyGroupNames terra.ListValue[terra.StringValue] `hcl:"policy_group_names,attr" validate:"required"`
}

type BgpSettingsAttributes struct {
	ref terra.Reference
}

func (bs BgpSettingsAttributes) InternalRef() (terra.Reference, error) {
	return bs.ref, nil
}

func (bs BgpSettingsAttributes) InternalWithRef(ref terra.Reference) BgpSettingsAttributes {
	return BgpSettingsAttributes{ref: ref}
}

func (bs BgpSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bs.ref.InternalTokens()
}

func (bs BgpSettingsAttributes) Asn() terra.NumberValue {
	return terra.ReferenceAsNumber(bs.ref.Append("asn"))
}

func (bs BgpSettingsAttributes) PeerWeight() terra.NumberValue {
	return terra.ReferenceAsNumber(bs.ref.Append("peer_weight"))
}

func (bs BgpSettingsAttributes) PeeringAddresses() terra.ListValue[BgpSettingsPeeringAddressesAttributes] {
	return terra.ReferenceAsList[BgpSettingsPeeringAddressesAttributes](bs.ref.Append("peering_addresses"))
}

type BgpSettingsPeeringAddressesAttributes struct {
	ref terra.Reference
}

func (pa BgpSettingsPeeringAddressesAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa BgpSettingsPeeringAddressesAttributes) InternalWithRef(ref terra.Reference) BgpSettingsPeeringAddressesAttributes {
	return BgpSettingsPeeringAddressesAttributes{ref: ref}
}

func (pa BgpSettingsPeeringAddressesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa BgpSettingsPeeringAddressesAttributes) ApipaAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("apipa_addresses"))
}

func (pa BgpSettingsPeeringAddressesAttributes) DefaultAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("default_addresses"))
}

func (pa BgpSettingsPeeringAddressesAttributes) IpConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("ip_configuration_name"))
}

func (pa BgpSettingsPeeringAddressesAttributes) TunnelIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pa.ref.Append("tunnel_ip_addresses"))
}

type CustomRouteAttributes struct {
	ref terra.Reference
}

func (cr CustomRouteAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CustomRouteAttributes) InternalWithRef(ref terra.Reference) CustomRouteAttributes {
	return CustomRouteAttributes{ref: ref}
}

func (cr CustomRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CustomRouteAttributes) AddressPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("address_prefixes"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) PrivateIpAddressAllocation() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address_allocation"))
}

func (ic IpConfigurationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("public_ip_address_id"))
}

func (ic IpConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subnet_id"))
}

type PolicyGroupAttributes struct {
	ref terra.Reference
}

func (pg PolicyGroupAttributes) InternalRef() (terra.Reference, error) {
	return pg.ref, nil
}

func (pg PolicyGroupAttributes) InternalWithRef(ref terra.Reference) PolicyGroupAttributes {
	return PolicyGroupAttributes{ref: ref}
}

func (pg PolicyGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pg.ref.InternalTokens()
}

func (pg PolicyGroupAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(pg.ref.Append("is_default"))
}

func (pg PolicyGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pg.ref.Append("name"))
}

func (pg PolicyGroupAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(pg.ref.Append("priority"))
}

func (pg PolicyGroupAttributes) PolicyMember() terra.ListValue[PolicyGroupPolicyMemberAttributes] {
	return terra.ReferenceAsList[PolicyGroupPolicyMemberAttributes](pg.ref.Append("policy_member"))
}

type PolicyGroupPolicyMemberAttributes struct {
	ref terra.Reference
}

func (pm PolicyGroupPolicyMemberAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm PolicyGroupPolicyMemberAttributes) InternalWithRef(ref terra.Reference) PolicyGroupPolicyMemberAttributes {
	return PolicyGroupPolicyMemberAttributes{ref: ref}
}

func (pm PolicyGroupPolicyMemberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm PolicyGroupPolicyMemberAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("name"))
}

func (pm PolicyGroupPolicyMemberAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("type"))
}

func (pm PolicyGroupPolicyMemberAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpnClientConfigurationAttributes struct {
	ref terra.Reference
}

func (vcc VpnClientConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vcc.ref, nil
}

func (vcc VpnClientConfigurationAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationAttributes {
	return VpnClientConfigurationAttributes{ref: ref}
}

func (vcc VpnClientConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcc.ref.InternalTokens()
}

func (vcc VpnClientConfigurationAttributes) AadAudience() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("aad_audience"))
}

func (vcc VpnClientConfigurationAttributes) AadIssuer() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("aad_issuer"))
}

func (vcc VpnClientConfigurationAttributes) AadTenant() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("aad_tenant"))
}

func (vcc VpnClientConfigurationAttributes) AddressSpace() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vcc.ref.Append("address_space"))
}

func (vcc VpnClientConfigurationAttributes) RadiusServerAddress() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("radius_server_address"))
}

func (vcc VpnClientConfigurationAttributes) RadiusServerSecret() terra.StringValue {
	return terra.ReferenceAsString(vcc.ref.Append("radius_server_secret"))
}

func (vcc VpnClientConfigurationAttributes) VpnAuthTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vcc.ref.Append("vpn_auth_types"))
}

func (vcc VpnClientConfigurationAttributes) VpnClientProtocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vcc.ref.Append("vpn_client_protocols"))
}

func (vcc VpnClientConfigurationAttributes) IpsecPolicy() terra.ListValue[VpnClientConfigurationIpsecPolicyAttributes] {
	return terra.ReferenceAsList[VpnClientConfigurationIpsecPolicyAttributes](vcc.ref.Append("ipsec_policy"))
}

func (vcc VpnClientConfigurationAttributes) RadiusServer() terra.ListValue[VpnClientConfigurationRadiusServerAttributes] {
	return terra.ReferenceAsList[VpnClientConfigurationRadiusServerAttributes](vcc.ref.Append("radius_server"))
}

func (vcc VpnClientConfigurationAttributes) RevokedCertificate() terra.SetValue[VpnClientConfigurationRevokedCertificateAttributes] {
	return terra.ReferenceAsSet[VpnClientConfigurationRevokedCertificateAttributes](vcc.ref.Append("revoked_certificate"))
}

func (vcc VpnClientConfigurationAttributes) RootCertificate() terra.SetValue[VpnClientConfigurationRootCertificateAttributes] {
	return terra.ReferenceAsSet[VpnClientConfigurationRootCertificateAttributes](vcc.ref.Append("root_certificate"))
}

func (vcc VpnClientConfigurationAttributes) VirtualNetworkGatewayClientConnection() terra.ListValue[VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes] {
	return terra.ReferenceAsList[VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes](vcc.ref.Append("virtual_network_gateway_client_connection"))
}

type VpnClientConfigurationIpsecPolicyAttributes struct {
	ref terra.Reference
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationIpsecPolicyAttributes {
	return VpnClientConfigurationIpsecPolicyAttributes{ref: ref}
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) DhGroup() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("dh_group"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) IkeEncryption() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ike_encryption"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) IkeIntegrity() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ike_integrity"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) IpsecEncryption() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ipsec_encryption"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) IpsecIntegrity() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("ipsec_integrity"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) PfsGroup() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("pfs_group"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) SaDataSizeInKilobytes() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("sa_data_size_in_kilobytes"))
}

func (ip VpnClientConfigurationIpsecPolicyAttributes) SaLifetimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("sa_lifetime_in_seconds"))
}

type VpnClientConfigurationRadiusServerAttributes struct {
	ref terra.Reference
}

func (rs VpnClientConfigurationRadiusServerAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs VpnClientConfigurationRadiusServerAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationRadiusServerAttributes {
	return VpnClientConfigurationRadiusServerAttributes{ref: ref}
}

func (rs VpnClientConfigurationRadiusServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs VpnClientConfigurationRadiusServerAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("address"))
}

func (rs VpnClientConfigurationRadiusServerAttributes) Score() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("score"))
}

func (rs VpnClientConfigurationRadiusServerAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("secret"))
}

type VpnClientConfigurationRevokedCertificateAttributes struct {
	ref terra.Reference
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationRevokedCertificateAttributes {
	return VpnClientConfigurationRevokedCertificateAttributes{ref: ref}
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc VpnClientConfigurationRevokedCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("thumbprint"))
}

type VpnClientConfigurationRootCertificateAttributes struct {
	ref terra.Reference
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationRootCertificateAttributes {
	return VpnClientConfigurationRootCertificateAttributes{ref: ref}
}

func (rc VpnClientConfigurationRootCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc VpnClientConfigurationRootCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc VpnClientConfigurationRootCertificateAttributes) PublicCertData() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("public_cert_data"))
}

type VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes struct {
	ref terra.Reference
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) InternalRef() (terra.Reference, error) {
	return vngcc.ref, nil
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) InternalWithRef(ref terra.Reference) VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes {
	return VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes{ref: ref}
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vngcc.ref.InternalTokens()
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) AddressPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vngcc.ref.Append("address_prefixes"))
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vngcc.ref.Append("name"))
}

func (vngcc VpnClientConfigurationVirtualNetworkGatewayClientConnectionAttributes) PolicyGroupNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vngcc.ref.Append("policy_group_names"))
}

type BgpSettingsState struct {
	Asn              float64                            `json:"asn"`
	PeerWeight       float64                            `json:"peer_weight"`
	PeeringAddresses []BgpSettingsPeeringAddressesState `json:"peering_addresses"`
}

type BgpSettingsPeeringAddressesState struct {
	ApipaAddresses      []string `json:"apipa_addresses"`
	DefaultAddresses    []string `json:"default_addresses"`
	IpConfigurationName string   `json:"ip_configuration_name"`
	TunnelIpAddresses   []string `json:"tunnel_ip_addresses"`
}

type CustomRouteState struct {
	AddressPrefixes []string `json:"address_prefixes"`
}

type IpConfigurationState struct {
	Name                       string `json:"name"`
	PrivateIpAddressAllocation string `json:"private_ip_address_allocation"`
	PublicIpAddressId          string `json:"public_ip_address_id"`
	SubnetId                   string `json:"subnet_id"`
}

type PolicyGroupState struct {
	IsDefault    bool                           `json:"is_default"`
	Name         string                         `json:"name"`
	Priority     float64                        `json:"priority"`
	PolicyMember []PolicyGroupPolicyMemberState `json:"policy_member"`
}

type PolicyGroupPolicyMemberState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VpnClientConfigurationState struct {
	AadAudience                           string                                                             `json:"aad_audience"`
	AadIssuer                             string                                                             `json:"aad_issuer"`
	AadTenant                             string                                                             `json:"aad_tenant"`
	AddressSpace                          []string                                                           `json:"address_space"`
	RadiusServerAddress                   string                                                             `json:"radius_server_address"`
	RadiusServerSecret                    string                                                             `json:"radius_server_secret"`
	VpnAuthTypes                          []string                                                           `json:"vpn_auth_types"`
	VpnClientProtocols                    []string                                                           `json:"vpn_client_protocols"`
	IpsecPolicy                           []VpnClientConfigurationIpsecPolicyState                           `json:"ipsec_policy"`
	RadiusServer                          []VpnClientConfigurationRadiusServerState                          `json:"radius_server"`
	RevokedCertificate                    []VpnClientConfigurationRevokedCertificateState                    `json:"revoked_certificate"`
	RootCertificate                       []VpnClientConfigurationRootCertificateState                       `json:"root_certificate"`
	VirtualNetworkGatewayClientConnection []VpnClientConfigurationVirtualNetworkGatewayClientConnectionState `json:"virtual_network_gateway_client_connection"`
}

type VpnClientConfigurationIpsecPolicyState struct {
	DhGroup               string  `json:"dh_group"`
	IkeEncryption         string  `json:"ike_encryption"`
	IkeIntegrity          string  `json:"ike_integrity"`
	IpsecEncryption       string  `json:"ipsec_encryption"`
	IpsecIntegrity        string  `json:"ipsec_integrity"`
	PfsGroup              string  `json:"pfs_group"`
	SaDataSizeInKilobytes float64 `json:"sa_data_size_in_kilobytes"`
	SaLifetimeInSeconds   float64 `json:"sa_lifetime_in_seconds"`
}

type VpnClientConfigurationRadiusServerState struct {
	Address string  `json:"address"`
	Score   float64 `json:"score"`
	Secret  string  `json:"secret"`
}

type VpnClientConfigurationRevokedCertificateState struct {
	Name       string `json:"name"`
	Thumbprint string `json:"thumbprint"`
}

type VpnClientConfigurationRootCertificateState struct {
	Name           string `json:"name"`
	PublicCertData string `json:"public_cert_data"`
}

type VpnClientConfigurationVirtualNetworkGatewayClientConnectionState struct {
	AddressPrefixes  []string `json:"address_prefixes"`
	Name             string   `json:"name"`
	PolicyGroupNames []string `json:"policy_group_names"`
}
