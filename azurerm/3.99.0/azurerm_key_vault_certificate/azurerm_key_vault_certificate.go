// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvc *Resource) Type() string {
	return "azurerm_key_vault_certificate"
}

// LocalName returns the local name for [Resource].
func (akvc *Resource) LocalName() string {
	return akvc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvc *Resource) Configuration() interface{} {
	return akvc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvc *Resource) Dependencies() terra.Dependencies {
	return akvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvc *Resource) Attributes() azurermKeyVaultCertificateAttributes {
	return azurermKeyVaultCertificateAttributes{ref: terra.ReferenceResource(akvc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvc *Resource) ImportState(state io.Reader) error {
	akvc.state = &azurermKeyVaultCertificateState{}
	if err := json.NewDecoder(state).Decode(akvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvc.Type(), akvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvc *Resource) State() (*azurermKeyVaultCertificateState, bool) {
	return akvc.state, akvc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvc *Resource) StateMust() *azurermKeyVaultCertificateState {
	if akvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvc.Type(), akvc.LocalName()))
	}
	return akvc.state
}

// Args contains the configurations for azurerm_key_vault_certificate.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Certificate: optional
	Certificate *Certificate `hcl:"certificate,block"`
	// CertificatePolicy: optional
	CertificatePolicy *CertificatePolicy `hcl:"certificate_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultCertificateAttributes struct {
	ref terra.Reference
}

// CertificateData returns a reference to field certificate_data of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) CertificateData() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("certificate_data"))
}

// CertificateDataBase64 returns a reference to field certificate_data_base64 of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) CertificateDataBase64() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("certificate_data_base64"))
}

// Id returns a reference to field id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("key_vault_id"))
}

// Name returns a reference to field name of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("resource_manager_id"))
}

// ResourceManagerVersionlessId returns a reference to field resource_manager_versionless_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) ResourceManagerVersionlessId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("resource_manager_versionless_id"))
}

// SecretId returns a reference to field secret_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("secret_id"))
}

// Tags returns a reference to field tags of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akvc.ref.Append("tags"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("thumbprint"))
}

// Version returns a reference to field version of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("version"))
}

// VersionlessId returns a reference to field versionless_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) VersionlessId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("versionless_id"))
}

// VersionlessSecretId returns a reference to field versionless_secret_id of azurerm_key_vault_certificate.
func (akvc azurermKeyVaultCertificateAttributes) VersionlessSecretId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("versionless_secret_id"))
}

func (akvc azurermKeyVaultCertificateAttributes) CertificateAttribute() terra.ListValue[CertificateAttributeAttributes] {
	return terra.ReferenceAsList[CertificateAttributeAttributes](akvc.ref.Append("certificate_attribute"))
}

func (akvc azurermKeyVaultCertificateAttributes) Certificate() terra.ListValue[CertificateAttributes] {
	return terra.ReferenceAsList[CertificateAttributes](akvc.ref.Append("certificate"))
}

func (akvc azurermKeyVaultCertificateAttributes) CertificatePolicy() terra.ListValue[CertificatePolicyAttributes] {
	return terra.ReferenceAsList[CertificatePolicyAttributes](akvc.ref.Append("certificate_policy"))
}

func (akvc azurermKeyVaultCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvc.ref.Append("timeouts"))
}

type azurermKeyVaultCertificateState struct {
	CertificateData              string                      `json:"certificate_data"`
	CertificateDataBase64        string                      `json:"certificate_data_base64"`
	Id                           string                      `json:"id"`
	KeyVaultId                   string                      `json:"key_vault_id"`
	Name                         string                      `json:"name"`
	ResourceManagerId            string                      `json:"resource_manager_id"`
	ResourceManagerVersionlessId string                      `json:"resource_manager_versionless_id"`
	SecretId                     string                      `json:"secret_id"`
	Tags                         map[string]string           `json:"tags"`
	Thumbprint                   string                      `json:"thumbprint"`
	Version                      string                      `json:"version"`
	VersionlessId                string                      `json:"versionless_id"`
	VersionlessSecretId          string                      `json:"versionless_secret_id"`
	CertificateAttribute         []CertificateAttributeState `json:"certificate_attribute"`
	Certificate                  []CertificateState          `json:"certificate"`
	CertificatePolicy            []CertificatePolicyState    `json:"certificate_policy"`
	Timeouts                     *TimeoutsState              `json:"timeouts"`
}
