// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_certificate

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Certificate struct {
	// Contents: string, required
	Contents terra.StringValue `hcl:"contents,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
}

type CertificatePolicy struct {
	// CertificatePolicyIssuerParameters: required
	IssuerParameters *CertificatePolicyIssuerParameters `hcl:"issuer_parameters,block" validate:"required"`
	// CertificatePolicyKeyProperties: required
	KeyProperties *CertificatePolicyKeyProperties `hcl:"key_properties,block" validate:"required"`
	// CertificatePolicyLifetimeAction: min=0
	LifetimeAction []CertificatePolicyLifetimeAction `hcl:"lifetime_action,block" validate:"min=0"`
	// CertificatePolicySecretProperties: required
	SecretProperties *CertificatePolicySecretProperties `hcl:"secret_properties,block" validate:"required"`
	// CertificatePolicyX509CertificateProperties: optional
	X509CertificateProperties *CertificatePolicyX509CertificateProperties `hcl:"x509_certificate_properties,block"`
}

type CertificatePolicyIssuerParameters struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type CertificatePolicyKeyProperties struct {
	// Curve: string, optional
	Curve terra.StringValue `hcl:"curve,attr"`
	// Exportable: bool, required
	Exportable terra.BoolValue `hcl:"exportable,attr" validate:"required"`
	// KeySize: number, optional
	KeySize terra.NumberValue `hcl:"key_size,attr"`
	// KeyType: string, required
	KeyType terra.StringValue `hcl:"key_type,attr" validate:"required"`
	// ReuseKey: bool, required
	ReuseKey terra.BoolValue `hcl:"reuse_key,attr" validate:"required"`
}

type CertificatePolicyLifetimeAction struct {
	// CertificatePolicyLifetimeActionAction: required
	Action *CertificatePolicyLifetimeActionAction `hcl:"action,block" validate:"required"`
	// CertificatePolicyLifetimeActionTrigger: required
	Trigger *CertificatePolicyLifetimeActionTrigger `hcl:"trigger,block" validate:"required"`
}

type CertificatePolicyLifetimeActionAction struct {
	// ActionType: string, required
	ActionType terra.StringValue `hcl:"action_type,attr" validate:"required"`
}

type CertificatePolicyLifetimeActionTrigger struct {
	// DaysBeforeExpiry: number, optional
	DaysBeforeExpiry terra.NumberValue `hcl:"days_before_expiry,attr"`
	// LifetimePercentage: number, optional
	LifetimePercentage terra.NumberValue `hcl:"lifetime_percentage,attr"`
}

type CertificatePolicySecretProperties struct {
	// ContentType: string, required
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
}

type CertificatePolicyX509CertificateProperties struct {
	// ExtendedKeyUsage: list of string, optional
	ExtendedKeyUsage terra.ListValue[terra.StringValue] `hcl:"extended_key_usage,attr"`
	// KeyUsage: set of string, required
	KeyUsage terra.SetValue[terra.StringValue] `hcl:"key_usage,attr" validate:"required"`
	// Subject: string, required
	Subject terra.StringValue `hcl:"subject,attr" validate:"required"`
	// ValidityInMonths: number, required
	ValidityInMonths terra.NumberValue `hcl:"validity_in_months,attr" validate:"required"`
	// CertificatePolicyX509CertificatePropertiesSubjectAlternativeNames: optional
	SubjectAlternativeNames *CertificatePolicyX509CertificatePropertiesSubjectAlternativeNames `hcl:"subject_alternative_names,block"`
}

type CertificatePolicyX509CertificatePropertiesSubjectAlternativeNames struct {
	// DnsNames: set of string, optional
	DnsNames terra.SetValue[terra.StringValue] `hcl:"dns_names,attr"`
	// Emails: set of string, optional
	Emails terra.SetValue[terra.StringValue] `hcl:"emails,attr"`
	// Upns: set of string, optional
	Upns terra.SetValue[terra.StringValue] `hcl:"upns,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CertificateAttributeAttributes struct {
	ref terra.Reference
}

func (ca CertificateAttributeAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CertificateAttributeAttributes) InternalWithRef(ref terra.Reference) CertificateAttributeAttributes {
	return CertificateAttributeAttributes{ref: ref}
}

func (ca CertificateAttributeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CertificateAttributeAttributes) Created() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("created"))
}

func (ca CertificateAttributeAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("enabled"))
}

func (ca CertificateAttributeAttributes) Expires() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("expires"))
}

func (ca CertificateAttributeAttributes) NotBefore() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("not_before"))
}

func (ca CertificateAttributeAttributes) RecoveryLevel() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("recovery_level"))
}

func (ca CertificateAttributeAttributes) Updated() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("updated"))
}

type CertificateAttributes struct {
	ref terra.Reference
}

func (c CertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CertificateAttributes) InternalWithRef(ref terra.Reference) CertificateAttributes {
	return CertificateAttributes{ref: ref}
}

func (c CertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CertificateAttributes) Contents() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("contents"))
}

func (c CertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("password"))
}

type CertificatePolicyAttributes struct {
	ref terra.Reference
}

func (cp CertificatePolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CertificatePolicyAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyAttributes {
	return CertificatePolicyAttributes{ref: ref}
}

func (cp CertificatePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CertificatePolicyAttributes) IssuerParameters() terra.ListValue[CertificatePolicyIssuerParametersAttributes] {
	return terra.ReferenceAsList[CertificatePolicyIssuerParametersAttributes](cp.ref.Append("issuer_parameters"))
}

func (cp CertificatePolicyAttributes) KeyProperties() terra.ListValue[CertificatePolicyKeyPropertiesAttributes] {
	return terra.ReferenceAsList[CertificatePolicyKeyPropertiesAttributes](cp.ref.Append("key_properties"))
}

func (cp CertificatePolicyAttributes) LifetimeAction() terra.ListValue[CertificatePolicyLifetimeActionAttributes] {
	return terra.ReferenceAsList[CertificatePolicyLifetimeActionAttributes](cp.ref.Append("lifetime_action"))
}

func (cp CertificatePolicyAttributes) SecretProperties() terra.ListValue[CertificatePolicySecretPropertiesAttributes] {
	return terra.ReferenceAsList[CertificatePolicySecretPropertiesAttributes](cp.ref.Append("secret_properties"))
}

func (cp CertificatePolicyAttributes) X509CertificateProperties() terra.ListValue[CertificatePolicyX509CertificatePropertiesAttributes] {
	return terra.ReferenceAsList[CertificatePolicyX509CertificatePropertiesAttributes](cp.ref.Append("x509_certificate_properties"))
}

type CertificatePolicyIssuerParametersAttributes struct {
	ref terra.Reference
}

func (ip CertificatePolicyIssuerParametersAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip CertificatePolicyIssuerParametersAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyIssuerParametersAttributes {
	return CertificatePolicyIssuerParametersAttributes{ref: ref}
}

func (ip CertificatePolicyIssuerParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip CertificatePolicyIssuerParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("name"))
}

type CertificatePolicyKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (kp CertificatePolicyKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return kp.ref, nil
}

func (kp CertificatePolicyKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyKeyPropertiesAttributes {
	return CertificatePolicyKeyPropertiesAttributes{ref: ref}
}

func (kp CertificatePolicyKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kp.ref.InternalTokens()
}

func (kp CertificatePolicyKeyPropertiesAttributes) Curve() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("curve"))
}

func (kp CertificatePolicyKeyPropertiesAttributes) Exportable() terra.BoolValue {
	return terra.ReferenceAsBool(kp.ref.Append("exportable"))
}

func (kp CertificatePolicyKeyPropertiesAttributes) KeySize() terra.NumberValue {
	return terra.ReferenceAsNumber(kp.ref.Append("key_size"))
}

func (kp CertificatePolicyKeyPropertiesAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("key_type"))
}

func (kp CertificatePolicyKeyPropertiesAttributes) ReuseKey() terra.BoolValue {
	return terra.ReferenceAsBool(kp.ref.Append("reuse_key"))
}

type CertificatePolicyLifetimeActionAttributes struct {
	ref terra.Reference
}

func (la CertificatePolicyLifetimeActionAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la CertificatePolicyLifetimeActionAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyLifetimeActionAttributes {
	return CertificatePolicyLifetimeActionAttributes{ref: ref}
}

func (la CertificatePolicyLifetimeActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la CertificatePolicyLifetimeActionAttributes) Action() terra.ListValue[CertificatePolicyLifetimeActionActionAttributes] {
	return terra.ReferenceAsList[CertificatePolicyLifetimeActionActionAttributes](la.ref.Append("action"))
}

func (la CertificatePolicyLifetimeActionAttributes) Trigger() terra.ListValue[CertificatePolicyLifetimeActionTriggerAttributes] {
	return terra.ReferenceAsList[CertificatePolicyLifetimeActionTriggerAttributes](la.ref.Append("trigger"))
}

type CertificatePolicyLifetimeActionActionAttributes struct {
	ref terra.Reference
}

func (a CertificatePolicyLifetimeActionActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a CertificatePolicyLifetimeActionActionAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyLifetimeActionActionAttributes {
	return CertificatePolicyLifetimeActionActionAttributes{ref: ref}
}

func (a CertificatePolicyLifetimeActionActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a CertificatePolicyLifetimeActionActionAttributes) ActionType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_type"))
}

type CertificatePolicyLifetimeActionTriggerAttributes struct {
	ref terra.Reference
}

func (t CertificatePolicyLifetimeActionTriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t CertificatePolicyLifetimeActionTriggerAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyLifetimeActionTriggerAttributes {
	return CertificatePolicyLifetimeActionTriggerAttributes{ref: ref}
}

func (t CertificatePolicyLifetimeActionTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t CertificatePolicyLifetimeActionTriggerAttributes) DaysBeforeExpiry() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days_before_expiry"))
}

func (t CertificatePolicyLifetimeActionTriggerAttributes) LifetimePercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("lifetime_percentage"))
}

type CertificatePolicySecretPropertiesAttributes struct {
	ref terra.Reference
}

func (sp CertificatePolicySecretPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp CertificatePolicySecretPropertiesAttributes) InternalWithRef(ref terra.Reference) CertificatePolicySecretPropertiesAttributes {
	return CertificatePolicySecretPropertiesAttributes{ref: ref}
}

func (sp CertificatePolicySecretPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp CertificatePolicySecretPropertiesAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("content_type"))
}

type CertificatePolicyX509CertificatePropertiesAttributes struct {
	ref terra.Reference
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) InternalRef() (terra.Reference, error) {
	return xcp.ref, nil
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyX509CertificatePropertiesAttributes {
	return CertificatePolicyX509CertificatePropertiesAttributes{ref: ref}
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return xcp.ref.InternalTokens()
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) ExtendedKeyUsage() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](xcp.ref.Append("extended_key_usage"))
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) KeyUsage() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](xcp.ref.Append("key_usage"))
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(xcp.ref.Append("subject"))
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) ValidityInMonths() terra.NumberValue {
	return terra.ReferenceAsNumber(xcp.ref.Append("validity_in_months"))
}

func (xcp CertificatePolicyX509CertificatePropertiesAttributes) SubjectAlternativeNames() terra.ListValue[CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes] {
	return terra.ReferenceAsList[CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes](xcp.ref.Append("subject_alternative_names"))
}

type CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes struct {
	ref terra.Reference
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) InternalRef() (terra.Reference, error) {
	return san.ref, nil
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) InternalWithRef(ref terra.Reference) CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes {
	return CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes{ref: ref}
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return san.ref.InternalTokens()
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) DnsNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](san.ref.Append("dns_names"))
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) Emails() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](san.ref.Append("emails"))
}

func (san CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesAttributes) Upns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](san.ref.Append("upns"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CertificateAttributeState struct {
	Created       string `json:"created"`
	Enabled       bool   `json:"enabled"`
	Expires       string `json:"expires"`
	NotBefore     string `json:"not_before"`
	RecoveryLevel string `json:"recovery_level"`
	Updated       string `json:"updated"`
}

type CertificateState struct {
	Contents string `json:"contents"`
	Password string `json:"password"`
}

type CertificatePolicyState struct {
	IssuerParameters          []CertificatePolicyIssuerParametersState          `json:"issuer_parameters"`
	KeyProperties             []CertificatePolicyKeyPropertiesState             `json:"key_properties"`
	LifetimeAction            []CertificatePolicyLifetimeActionState            `json:"lifetime_action"`
	SecretProperties          []CertificatePolicySecretPropertiesState          `json:"secret_properties"`
	X509CertificateProperties []CertificatePolicyX509CertificatePropertiesState `json:"x509_certificate_properties"`
}

type CertificatePolicyIssuerParametersState struct {
	Name string `json:"name"`
}

type CertificatePolicyKeyPropertiesState struct {
	Curve      string  `json:"curve"`
	Exportable bool    `json:"exportable"`
	KeySize    float64 `json:"key_size"`
	KeyType    string  `json:"key_type"`
	ReuseKey   bool    `json:"reuse_key"`
}

type CertificatePolicyLifetimeActionState struct {
	Action  []CertificatePolicyLifetimeActionActionState  `json:"action"`
	Trigger []CertificatePolicyLifetimeActionTriggerState `json:"trigger"`
}

type CertificatePolicyLifetimeActionActionState struct {
	ActionType string `json:"action_type"`
}

type CertificatePolicyLifetimeActionTriggerState struct {
	DaysBeforeExpiry   float64 `json:"days_before_expiry"`
	LifetimePercentage float64 `json:"lifetime_percentage"`
}

type CertificatePolicySecretPropertiesState struct {
	ContentType string `json:"content_type"`
}

type CertificatePolicyX509CertificatePropertiesState struct {
	ExtendedKeyUsage        []string                                                                 `json:"extended_key_usage"`
	KeyUsage                []string                                                                 `json:"key_usage"`
	Subject                 string                                                                   `json:"subject"`
	ValidityInMonths        float64                                                                  `json:"validity_in_months"`
	SubjectAlternativeNames []CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesState `json:"subject_alternative_names"`
}

type CertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesState struct {
	DnsNames []string `json:"dns_names"`
	Emails   []string `json:"emails"`
	Upns     []string `json:"upns"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
