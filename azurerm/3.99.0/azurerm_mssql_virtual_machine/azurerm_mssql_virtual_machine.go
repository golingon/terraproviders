// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_virtual_machine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_virtual_machine.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlVirtualMachineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amvm *Resource) Type() string {
	return "azurerm_mssql_virtual_machine"
}

// LocalName returns the local name for [Resource].
func (amvm *Resource) LocalName() string {
	return amvm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amvm *Resource) Configuration() interface{} {
	return amvm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amvm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amvm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amvm *Resource) Dependencies() terra.Dependencies {
	return amvm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amvm *Resource) LifecycleManagement() *terra.Lifecycle {
	return amvm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amvm *Resource) Attributes() azurermMssqlVirtualMachineAttributes {
	return azurermMssqlVirtualMachineAttributes{ref: terra.ReferenceResource(amvm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amvm *Resource) ImportState(state io.Reader) error {
	amvm.state = &azurermMssqlVirtualMachineState{}
	if err := json.NewDecoder(state).Decode(amvm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amvm.Type(), amvm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amvm *Resource) State() (*azurermMssqlVirtualMachineState, bool) {
	return amvm.state, amvm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amvm *Resource) StateMust() *azurermMssqlVirtualMachineState {
	if amvm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amvm.Type(), amvm.LocalName()))
	}
	return amvm.state
}

// Args contains the configurations for azurerm_mssql_virtual_machine.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RServicesEnabled: bool, optional
	RServicesEnabled terra.BoolValue `hcl:"r_services_enabled,attr"`
	// SqlConnectivityPort: number, optional
	SqlConnectivityPort terra.NumberValue `hcl:"sql_connectivity_port,attr"`
	// SqlConnectivityType: string, optional
	SqlConnectivityType terra.StringValue `hcl:"sql_connectivity_type,attr"`
	// SqlConnectivityUpdatePassword: string, optional
	SqlConnectivityUpdatePassword terra.StringValue `hcl:"sql_connectivity_update_password,attr"`
	// SqlConnectivityUpdateUsername: string, optional
	SqlConnectivityUpdateUsername terra.StringValue `hcl:"sql_connectivity_update_username,attr"`
	// SqlLicenseType: string, optional
	SqlLicenseType terra.StringValue `hcl:"sql_license_type,attr"`
	// SqlVirtualMachineGroupId: string, optional
	SqlVirtualMachineGroupId terra.StringValue `hcl:"sql_virtual_machine_group_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// Assessment: optional
	Assessment *Assessment `hcl:"assessment,block"`
	// AutoBackup: optional
	AutoBackup *AutoBackup `hcl:"auto_backup,block"`
	// AutoPatching: optional
	AutoPatching *AutoPatching `hcl:"auto_patching,block"`
	// KeyVaultCredential: optional
	KeyVaultCredential *KeyVaultCredential `hcl:"key_vault_credential,block"`
	// SqlInstance: optional
	SqlInstance *SqlInstance `hcl:"sql_instance,block"`
	// StorageConfiguration: optional
	StorageConfiguration *StorageConfiguration `hcl:"storage_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WsfcDomainCredential: optional
	WsfcDomainCredential *WsfcDomainCredential `hcl:"wsfc_domain_credential,block"`
}

type azurermMssqlVirtualMachineAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("id"))
}

// RServicesEnabled returns a reference to field r_services_enabled of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) RServicesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amvm.ref.Append("r_services_enabled"))
}

// SqlConnectivityPort returns a reference to field sql_connectivity_port of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlConnectivityPort() terra.NumberValue {
	return terra.ReferenceAsNumber(amvm.ref.Append("sql_connectivity_port"))
}

// SqlConnectivityType returns a reference to field sql_connectivity_type of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlConnectivityType() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("sql_connectivity_type"))
}

// SqlConnectivityUpdatePassword returns a reference to field sql_connectivity_update_password of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlConnectivityUpdatePassword() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("sql_connectivity_update_password"))
}

// SqlConnectivityUpdateUsername returns a reference to field sql_connectivity_update_username of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlConnectivityUpdateUsername() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("sql_connectivity_update_username"))
}

// SqlLicenseType returns a reference to field sql_license_type of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlLicenseType() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("sql_license_type"))
}

// SqlVirtualMachineGroupId returns a reference to field sql_virtual_machine_group_id of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) SqlVirtualMachineGroupId() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("sql_virtual_machine_group_id"))
}

// Tags returns a reference to field tags of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amvm.ref.Append("tags"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurerm_mssql_virtual_machine.
func (amvm azurermMssqlVirtualMachineAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(amvm.ref.Append("virtual_machine_id"))
}

func (amvm azurermMssqlVirtualMachineAttributes) Assessment() terra.ListValue[AssessmentAttributes] {
	return terra.ReferenceAsList[AssessmentAttributes](amvm.ref.Append("assessment"))
}

func (amvm azurermMssqlVirtualMachineAttributes) AutoBackup() terra.ListValue[AutoBackupAttributes] {
	return terra.ReferenceAsList[AutoBackupAttributes](amvm.ref.Append("auto_backup"))
}

func (amvm azurermMssqlVirtualMachineAttributes) AutoPatching() terra.ListValue[AutoPatchingAttributes] {
	return terra.ReferenceAsList[AutoPatchingAttributes](amvm.ref.Append("auto_patching"))
}

func (amvm azurermMssqlVirtualMachineAttributes) KeyVaultCredential() terra.ListValue[KeyVaultCredentialAttributes] {
	return terra.ReferenceAsList[KeyVaultCredentialAttributes](amvm.ref.Append("key_vault_credential"))
}

func (amvm azurermMssqlVirtualMachineAttributes) SqlInstance() terra.ListValue[SqlInstanceAttributes] {
	return terra.ReferenceAsList[SqlInstanceAttributes](amvm.ref.Append("sql_instance"))
}

func (amvm azurermMssqlVirtualMachineAttributes) StorageConfiguration() terra.ListValue[StorageConfigurationAttributes] {
	return terra.ReferenceAsList[StorageConfigurationAttributes](amvm.ref.Append("storage_configuration"))
}

func (amvm azurermMssqlVirtualMachineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amvm.ref.Append("timeouts"))
}

func (amvm azurermMssqlVirtualMachineAttributes) WsfcDomainCredential() terra.ListValue[WsfcDomainCredentialAttributes] {
	return terra.ReferenceAsList[WsfcDomainCredentialAttributes](amvm.ref.Append("wsfc_domain_credential"))
}

type azurermMssqlVirtualMachineState struct {
	Id                            string                      `json:"id"`
	RServicesEnabled              bool                        `json:"r_services_enabled"`
	SqlConnectivityPort           float64                     `json:"sql_connectivity_port"`
	SqlConnectivityType           string                      `json:"sql_connectivity_type"`
	SqlConnectivityUpdatePassword string                      `json:"sql_connectivity_update_password"`
	SqlConnectivityUpdateUsername string                      `json:"sql_connectivity_update_username"`
	SqlLicenseType                string                      `json:"sql_license_type"`
	SqlVirtualMachineGroupId      string                      `json:"sql_virtual_machine_group_id"`
	Tags                          map[string]string           `json:"tags"`
	VirtualMachineId              string                      `json:"virtual_machine_id"`
	Assessment                    []AssessmentState           `json:"assessment"`
	AutoBackup                    []AutoBackupState           `json:"auto_backup"`
	AutoPatching                  []AutoPatchingState         `json:"auto_patching"`
	KeyVaultCredential            []KeyVaultCredentialState   `json:"key_vault_credential"`
	SqlInstance                   []SqlInstanceState          `json:"sql_instance"`
	StorageConfiguration          []StorageConfigurationState `json:"storage_configuration"`
	Timeouts                      *TimeoutsState              `json:"timeouts"`
	WsfcDomainCredential          []WsfcDomainCredentialState `json:"wsfc_domain_credential"`
}
