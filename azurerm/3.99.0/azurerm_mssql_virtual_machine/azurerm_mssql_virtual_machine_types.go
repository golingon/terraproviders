// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_virtual_machine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Assessment struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RunImmediately: bool, optional
	RunImmediately terra.BoolValue `hcl:"run_immediately,attr"`
	// AssessmentSchedule: optional
	Schedule *AssessmentSchedule `hcl:"schedule,block"`
}

type AssessmentSchedule struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// MonthlyOccurrence: number, optional
	MonthlyOccurrence terra.NumberValue `hcl:"monthly_occurrence,attr"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// WeeklyInterval: number, optional
	WeeklyInterval terra.NumberValue `hcl:"weekly_interval,attr"`
}

type AutoBackup struct {
	// EncryptionEnabled: bool, optional
	EncryptionEnabled terra.BoolValue `hcl:"encryption_enabled,attr"`
	// EncryptionPassword: string, optional
	EncryptionPassword terra.StringValue `hcl:"encryption_password,attr"`
	// RetentionPeriodInDays: number, required
	RetentionPeriodInDays terra.NumberValue `hcl:"retention_period_in_days,attr" validate:"required"`
	// StorageAccountAccessKey: string, required
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr" validate:"required"`
	// StorageBlobEndpoint: string, required
	StorageBlobEndpoint terra.StringValue `hcl:"storage_blob_endpoint,attr" validate:"required"`
	// SystemDatabasesBackupEnabled: bool, optional
	SystemDatabasesBackupEnabled terra.BoolValue `hcl:"system_databases_backup_enabled,attr"`
	// AutoBackupManualSchedule: optional
	ManualSchedule *AutoBackupManualSchedule `hcl:"manual_schedule,block"`
}

type AutoBackupManualSchedule struct {
	// DaysOfWeek: set of string, optional
	DaysOfWeek terra.SetValue[terra.StringValue] `hcl:"days_of_week,attr"`
	// FullBackupFrequency: string, required
	FullBackupFrequency terra.StringValue `hcl:"full_backup_frequency,attr" validate:"required"`
	// FullBackupStartHour: number, required
	FullBackupStartHour terra.NumberValue `hcl:"full_backup_start_hour,attr" validate:"required"`
	// FullBackupWindowInHours: number, required
	FullBackupWindowInHours terra.NumberValue `hcl:"full_backup_window_in_hours,attr" validate:"required"`
	// LogBackupFrequencyInMinutes: number, required
	LogBackupFrequencyInMinutes terra.NumberValue `hcl:"log_backup_frequency_in_minutes,attr" validate:"required"`
}

type AutoPatching struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// MaintenanceWindowDurationInMinutes: number, required
	MaintenanceWindowDurationInMinutes terra.NumberValue `hcl:"maintenance_window_duration_in_minutes,attr" validate:"required"`
	// MaintenanceWindowStartingHour: number, required
	MaintenanceWindowStartingHour terra.NumberValue `hcl:"maintenance_window_starting_hour,attr" validate:"required"`
}

type KeyVaultCredential struct {
	// KeyVaultUrl: string, required
	KeyVaultUrl terra.StringValue `hcl:"key_vault_url,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServicePrincipalName: string, required
	ServicePrincipalName terra.StringValue `hcl:"service_principal_name,attr" validate:"required"`
	// ServicePrincipalSecret: string, required
	ServicePrincipalSecret terra.StringValue `hcl:"service_principal_secret,attr" validate:"required"`
}

type SqlInstance struct {
	// AdhocWorkloadsOptimizationEnabled: bool, optional
	AdhocWorkloadsOptimizationEnabled terra.BoolValue `hcl:"adhoc_workloads_optimization_enabled,attr"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// InstantFileInitializationEnabled: bool, optional
	InstantFileInitializationEnabled terra.BoolValue `hcl:"instant_file_initialization_enabled,attr"`
	// LockPagesInMemoryEnabled: bool, optional
	LockPagesInMemoryEnabled terra.BoolValue `hcl:"lock_pages_in_memory_enabled,attr"`
	// MaxDop: number, optional
	MaxDop terra.NumberValue `hcl:"max_dop,attr"`
	// MaxServerMemoryMb: number, optional
	MaxServerMemoryMb terra.NumberValue `hcl:"max_server_memory_mb,attr"`
	// MinServerMemoryMb: number, optional
	MinServerMemoryMb terra.NumberValue `hcl:"min_server_memory_mb,attr"`
}

type StorageConfiguration struct {
	// DiskType: string, required
	DiskType terra.StringValue `hcl:"disk_type,attr" validate:"required"`
	// StorageWorkloadType: string, required
	StorageWorkloadType terra.StringValue `hcl:"storage_workload_type,attr" validate:"required"`
	// SystemDbOnDataDiskEnabled: bool, optional
	SystemDbOnDataDiskEnabled terra.BoolValue `hcl:"system_db_on_data_disk_enabled,attr"`
	// StorageConfigurationDataSettings: optional
	DataSettings *StorageConfigurationDataSettings `hcl:"data_settings,block"`
	// StorageConfigurationLogSettings: optional
	LogSettings *StorageConfigurationLogSettings `hcl:"log_settings,block"`
	// StorageConfigurationTempDbSettings: optional
	TempDbSettings *StorageConfigurationTempDbSettings `hcl:"temp_db_settings,block"`
}

type StorageConfigurationDataSettings struct {
	// DefaultFilePath: string, required
	DefaultFilePath terra.StringValue `hcl:"default_file_path,attr" validate:"required"`
	// Luns: list of number, required
	Luns terra.ListValue[terra.NumberValue] `hcl:"luns,attr" validate:"required"`
}

type StorageConfigurationLogSettings struct {
	// DefaultFilePath: string, required
	DefaultFilePath terra.StringValue `hcl:"default_file_path,attr" validate:"required"`
	// Luns: list of number, required
	Luns terra.ListValue[terra.NumberValue] `hcl:"luns,attr" validate:"required"`
}

type StorageConfigurationTempDbSettings struct {
	// DataFileCount: number, optional
	DataFileCount terra.NumberValue `hcl:"data_file_count,attr"`
	// DataFileGrowthInMb: number, optional
	DataFileGrowthInMb terra.NumberValue `hcl:"data_file_growth_in_mb,attr"`
	// DataFileSizeMb: number, optional
	DataFileSizeMb terra.NumberValue `hcl:"data_file_size_mb,attr"`
	// DefaultFilePath: string, required
	DefaultFilePath terra.StringValue `hcl:"default_file_path,attr" validate:"required"`
	// LogFileGrowthMb: number, optional
	LogFileGrowthMb terra.NumberValue `hcl:"log_file_growth_mb,attr"`
	// LogFileSizeMb: number, optional
	LogFileSizeMb terra.NumberValue `hcl:"log_file_size_mb,attr"`
	// Luns: list of number, required
	Luns terra.ListValue[terra.NumberValue] `hcl:"luns,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WsfcDomainCredential struct {
	// ClusterBootstrapAccountPassword: string, required
	ClusterBootstrapAccountPassword terra.StringValue `hcl:"cluster_bootstrap_account_password,attr" validate:"required"`
	// ClusterOperatorAccountPassword: string, required
	ClusterOperatorAccountPassword terra.StringValue `hcl:"cluster_operator_account_password,attr" validate:"required"`
	// SqlServiceAccountPassword: string, required
	SqlServiceAccountPassword terra.StringValue `hcl:"sql_service_account_password,attr" validate:"required"`
}

type AssessmentAttributes struct {
	ref terra.Reference
}

func (a AssessmentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AssessmentAttributes) InternalWithRef(ref terra.Reference) AssessmentAttributes {
	return AssessmentAttributes{ref: ref}
}

func (a AssessmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AssessmentAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("enabled"))
}

func (a AssessmentAttributes) RunImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("run_immediately"))
}

func (a AssessmentAttributes) Schedule() terra.ListValue[AssessmentScheduleAttributes] {
	return terra.ReferenceAsList[AssessmentScheduleAttributes](a.ref.Append("schedule"))
}

type AssessmentScheduleAttributes struct {
	ref terra.Reference
}

func (s AssessmentScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s AssessmentScheduleAttributes) InternalWithRef(ref terra.Reference) AssessmentScheduleAttributes {
	return AssessmentScheduleAttributes{ref: ref}
}

func (s AssessmentScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s AssessmentScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("day_of_week"))
}

func (s AssessmentScheduleAttributes) MonthlyOccurrence() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("monthly_occurrence"))
}

func (s AssessmentScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

func (s AssessmentScheduleAttributes) WeeklyInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("weekly_interval"))
}

type AutoBackupAttributes struct {
	ref terra.Reference
}

func (ab AutoBackupAttributes) InternalRef() (terra.Reference, error) {
	return ab.ref, nil
}

func (ab AutoBackupAttributes) InternalWithRef(ref terra.Reference) AutoBackupAttributes {
	return AutoBackupAttributes{ref: ref}
}

func (ab AutoBackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ab.ref.InternalTokens()
}

func (ab AutoBackupAttributes) EncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ab.ref.Append("encryption_enabled"))
}

func (ab AutoBackupAttributes) EncryptionPassword() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("encryption_password"))
}

func (ab AutoBackupAttributes) RetentionPeriodInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(ab.ref.Append("retention_period_in_days"))
}

func (ab AutoBackupAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("storage_account_access_key"))
}

func (ab AutoBackupAttributes) StorageBlobEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("storage_blob_endpoint"))
}

func (ab AutoBackupAttributes) SystemDatabasesBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ab.ref.Append("system_databases_backup_enabled"))
}

func (ab AutoBackupAttributes) ManualSchedule() terra.ListValue[AutoBackupManualScheduleAttributes] {
	return terra.ReferenceAsList[AutoBackupManualScheduleAttributes](ab.ref.Append("manual_schedule"))
}

type AutoBackupManualScheduleAttributes struct {
	ref terra.Reference
}

func (ms AutoBackupManualScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms AutoBackupManualScheduleAttributes) InternalWithRef(ref terra.Reference) AutoBackupManualScheduleAttributes {
	return AutoBackupManualScheduleAttributes{ref: ref}
}

func (ms AutoBackupManualScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms AutoBackupManualScheduleAttributes) DaysOfWeek() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ms.ref.Append("days_of_week"))
}

func (ms AutoBackupManualScheduleAttributes) FullBackupFrequency() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("full_backup_frequency"))
}

func (ms AutoBackupManualScheduleAttributes) FullBackupStartHour() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("full_backup_start_hour"))
}

func (ms AutoBackupManualScheduleAttributes) FullBackupWindowInHours() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("full_backup_window_in_hours"))
}

func (ms AutoBackupManualScheduleAttributes) LogBackupFrequencyInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("log_backup_frequency_in_minutes"))
}

type AutoPatchingAttributes struct {
	ref terra.Reference
}

func (ap AutoPatchingAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap AutoPatchingAttributes) InternalWithRef(ref terra.Reference) AutoPatchingAttributes {
	return AutoPatchingAttributes{ref: ref}
}

func (ap AutoPatchingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap AutoPatchingAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("day_of_week"))
}

func (ap AutoPatchingAttributes) MaintenanceWindowDurationInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("maintenance_window_duration_in_minutes"))
}

func (ap AutoPatchingAttributes) MaintenanceWindowStartingHour() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("maintenance_window_starting_hour"))
}

type KeyVaultCredentialAttributes struct {
	ref terra.Reference
}

func (kvc KeyVaultCredentialAttributes) InternalRef() (terra.Reference, error) {
	return kvc.ref, nil
}

func (kvc KeyVaultCredentialAttributes) InternalWithRef(ref terra.Reference) KeyVaultCredentialAttributes {
	return KeyVaultCredentialAttributes{ref: ref}
}

func (kvc KeyVaultCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvc.ref.InternalTokens()
}

func (kvc KeyVaultCredentialAttributes) KeyVaultUrl() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("key_vault_url"))
}

func (kvc KeyVaultCredentialAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("name"))
}

func (kvc KeyVaultCredentialAttributes) ServicePrincipalName() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("service_principal_name"))
}

func (kvc KeyVaultCredentialAttributes) ServicePrincipalSecret() terra.StringValue {
	return terra.ReferenceAsString(kvc.ref.Append("service_principal_secret"))
}

type SqlInstanceAttributes struct {
	ref terra.Reference
}

func (si SqlInstanceAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SqlInstanceAttributes) InternalWithRef(ref terra.Reference) SqlInstanceAttributes {
	return SqlInstanceAttributes{ref: ref}
}

func (si SqlInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SqlInstanceAttributes) AdhocWorkloadsOptimizationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(si.ref.Append("adhoc_workloads_optimization_enabled"))
}

func (si SqlInstanceAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("collation"))
}

func (si SqlInstanceAttributes) InstantFileInitializationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(si.ref.Append("instant_file_initialization_enabled"))
}

func (si SqlInstanceAttributes) LockPagesInMemoryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(si.ref.Append("lock_pages_in_memory_enabled"))
}

func (si SqlInstanceAttributes) MaxDop() terra.NumberValue {
	return terra.ReferenceAsNumber(si.ref.Append("max_dop"))
}

func (si SqlInstanceAttributes) MaxServerMemoryMb() terra.NumberValue {
	return terra.ReferenceAsNumber(si.ref.Append("max_server_memory_mb"))
}

func (si SqlInstanceAttributes) MinServerMemoryMb() terra.NumberValue {
	return terra.ReferenceAsNumber(si.ref.Append("min_server_memory_mb"))
}

type StorageConfigurationAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigurationAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationAttributes {
	return StorageConfigurationAttributes{ref: ref}
}

func (sc StorageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigurationAttributes) DiskType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("disk_type"))
}

func (sc StorageConfigurationAttributes) StorageWorkloadType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("storage_workload_type"))
}

func (sc StorageConfigurationAttributes) SystemDbOnDataDiskEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("system_db_on_data_disk_enabled"))
}

func (sc StorageConfigurationAttributes) DataSettings() terra.ListValue[StorageConfigurationDataSettingsAttributes] {
	return terra.ReferenceAsList[StorageConfigurationDataSettingsAttributes](sc.ref.Append("data_settings"))
}

func (sc StorageConfigurationAttributes) LogSettings() terra.ListValue[StorageConfigurationLogSettingsAttributes] {
	return terra.ReferenceAsList[StorageConfigurationLogSettingsAttributes](sc.ref.Append("log_settings"))
}

func (sc StorageConfigurationAttributes) TempDbSettings() terra.ListValue[StorageConfigurationTempDbSettingsAttributes] {
	return terra.ReferenceAsList[StorageConfigurationTempDbSettingsAttributes](sc.ref.Append("temp_db_settings"))
}

type StorageConfigurationDataSettingsAttributes struct {
	ref terra.Reference
}

func (ds StorageConfigurationDataSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds StorageConfigurationDataSettingsAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationDataSettingsAttributes {
	return StorageConfigurationDataSettingsAttributes{ref: ref}
}

func (ds StorageConfigurationDataSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds StorageConfigurationDataSettingsAttributes) DefaultFilePath() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("default_file_path"))
}

func (ds StorageConfigurationDataSettingsAttributes) Luns() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ds.ref.Append("luns"))
}

type StorageConfigurationLogSettingsAttributes struct {
	ref terra.Reference
}

func (ls StorageConfigurationLogSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls StorageConfigurationLogSettingsAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationLogSettingsAttributes {
	return StorageConfigurationLogSettingsAttributes{ref: ref}
}

func (ls StorageConfigurationLogSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls StorageConfigurationLogSettingsAttributes) DefaultFilePath() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("default_file_path"))
}

func (ls StorageConfigurationLogSettingsAttributes) Luns() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](ls.ref.Append("luns"))
}

type StorageConfigurationTempDbSettingsAttributes struct {
	ref terra.Reference
}

func (tds StorageConfigurationTempDbSettingsAttributes) InternalRef() (terra.Reference, error) {
	return tds.ref, nil
}

func (tds StorageConfigurationTempDbSettingsAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationTempDbSettingsAttributes {
	return StorageConfigurationTempDbSettingsAttributes{ref: ref}
}

func (tds StorageConfigurationTempDbSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tds.ref.InternalTokens()
}

func (tds StorageConfigurationTempDbSettingsAttributes) DataFileCount() terra.NumberValue {
	return terra.ReferenceAsNumber(tds.ref.Append("data_file_count"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) DataFileGrowthInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(tds.ref.Append("data_file_growth_in_mb"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) DataFileSizeMb() terra.NumberValue {
	return terra.ReferenceAsNumber(tds.ref.Append("data_file_size_mb"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) DefaultFilePath() terra.StringValue {
	return terra.ReferenceAsString(tds.ref.Append("default_file_path"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) LogFileGrowthMb() terra.NumberValue {
	return terra.ReferenceAsNumber(tds.ref.Append("log_file_growth_mb"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) LogFileSizeMb() terra.NumberValue {
	return terra.ReferenceAsNumber(tds.ref.Append("log_file_size_mb"))
}

func (tds StorageConfigurationTempDbSettingsAttributes) Luns() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](tds.ref.Append("luns"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WsfcDomainCredentialAttributes struct {
	ref terra.Reference
}

func (wdc WsfcDomainCredentialAttributes) InternalRef() (terra.Reference, error) {
	return wdc.ref, nil
}

func (wdc WsfcDomainCredentialAttributes) InternalWithRef(ref terra.Reference) WsfcDomainCredentialAttributes {
	return WsfcDomainCredentialAttributes{ref: ref}
}

func (wdc WsfcDomainCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wdc.ref.InternalTokens()
}

func (wdc WsfcDomainCredentialAttributes) ClusterBootstrapAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(wdc.ref.Append("cluster_bootstrap_account_password"))
}

func (wdc WsfcDomainCredentialAttributes) ClusterOperatorAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(wdc.ref.Append("cluster_operator_account_password"))
}

func (wdc WsfcDomainCredentialAttributes) SqlServiceAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(wdc.ref.Append("sql_service_account_password"))
}

type AssessmentState struct {
	Enabled        bool                      `json:"enabled"`
	RunImmediately bool                      `json:"run_immediately"`
	Schedule       []AssessmentScheduleState `json:"schedule"`
}

type AssessmentScheduleState struct {
	DayOfWeek         string  `json:"day_of_week"`
	MonthlyOccurrence float64 `json:"monthly_occurrence"`
	StartTime         string  `json:"start_time"`
	WeeklyInterval    float64 `json:"weekly_interval"`
}

type AutoBackupState struct {
	EncryptionEnabled            bool                            `json:"encryption_enabled"`
	EncryptionPassword           string                          `json:"encryption_password"`
	RetentionPeriodInDays        float64                         `json:"retention_period_in_days"`
	StorageAccountAccessKey      string                          `json:"storage_account_access_key"`
	StorageBlobEndpoint          string                          `json:"storage_blob_endpoint"`
	SystemDatabasesBackupEnabled bool                            `json:"system_databases_backup_enabled"`
	ManualSchedule               []AutoBackupManualScheduleState `json:"manual_schedule"`
}

type AutoBackupManualScheduleState struct {
	DaysOfWeek                  []string `json:"days_of_week"`
	FullBackupFrequency         string   `json:"full_backup_frequency"`
	FullBackupStartHour         float64  `json:"full_backup_start_hour"`
	FullBackupWindowInHours     float64  `json:"full_backup_window_in_hours"`
	LogBackupFrequencyInMinutes float64  `json:"log_backup_frequency_in_minutes"`
}

type AutoPatchingState struct {
	DayOfWeek                          string  `json:"day_of_week"`
	MaintenanceWindowDurationInMinutes float64 `json:"maintenance_window_duration_in_minutes"`
	MaintenanceWindowStartingHour      float64 `json:"maintenance_window_starting_hour"`
}

type KeyVaultCredentialState struct {
	KeyVaultUrl            string `json:"key_vault_url"`
	Name                   string `json:"name"`
	ServicePrincipalName   string `json:"service_principal_name"`
	ServicePrincipalSecret string `json:"service_principal_secret"`
}

type SqlInstanceState struct {
	AdhocWorkloadsOptimizationEnabled bool    `json:"adhoc_workloads_optimization_enabled"`
	Collation                         string  `json:"collation"`
	InstantFileInitializationEnabled  bool    `json:"instant_file_initialization_enabled"`
	LockPagesInMemoryEnabled          bool    `json:"lock_pages_in_memory_enabled"`
	MaxDop                            float64 `json:"max_dop"`
	MaxServerMemoryMb                 float64 `json:"max_server_memory_mb"`
	MinServerMemoryMb                 float64 `json:"min_server_memory_mb"`
}

type StorageConfigurationState struct {
	DiskType                  string                                    `json:"disk_type"`
	StorageWorkloadType       string                                    `json:"storage_workload_type"`
	SystemDbOnDataDiskEnabled bool                                      `json:"system_db_on_data_disk_enabled"`
	DataSettings              []StorageConfigurationDataSettingsState   `json:"data_settings"`
	LogSettings               []StorageConfigurationLogSettingsState    `json:"log_settings"`
	TempDbSettings            []StorageConfigurationTempDbSettingsState `json:"temp_db_settings"`
}

type StorageConfigurationDataSettingsState struct {
	DefaultFilePath string    `json:"default_file_path"`
	Luns            []float64 `json:"luns"`
}

type StorageConfigurationLogSettingsState struct {
	DefaultFilePath string    `json:"default_file_path"`
	Luns            []float64 `json:"luns"`
}

type StorageConfigurationTempDbSettingsState struct {
	DataFileCount      float64   `json:"data_file_count"`
	DataFileGrowthInMb float64   `json:"data_file_growth_in_mb"`
	DataFileSizeMb     float64   `json:"data_file_size_mb"`
	DefaultFilePath    string    `json:"default_file_path"`
	LogFileGrowthMb    float64   `json:"log_file_growth_mb"`
	LogFileSizeMb      float64   `json:"log_file_size_mb"`
	Luns               []float64 `json:"luns"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WsfcDomainCredentialState struct {
	ClusterBootstrapAccountPassword string `json:"cluster_bootstrap_account_password"`
	ClusterOperatorAccountPassword  string `json:"cluster_operator_account_password"`
	SqlServiceAccountPassword       string `json:"sql_service_account_password"`
}
