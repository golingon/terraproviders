// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_disk_pool_iscsi_target_lun

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_disk_pool_iscsi_target_lun.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDiskPoolIscsiTargetLunState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpitl *Resource) Type() string {
	return "azurerm_disk_pool_iscsi_target_lun"
}

// LocalName returns the local name for [Resource].
func (adpitl *Resource) LocalName() string {
	return adpitl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpitl *Resource) Configuration() interface{} {
	return adpitl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpitl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpitl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpitl *Resource) Dependencies() terra.Dependencies {
	return adpitl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpitl *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpitl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpitl *Resource) Attributes() azurermDiskPoolIscsiTargetLunAttributes {
	return azurermDiskPoolIscsiTargetLunAttributes{ref: terra.ReferenceResource(adpitl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpitl *Resource) ImportState(state io.Reader) error {
	adpitl.state = &azurermDiskPoolIscsiTargetLunState{}
	if err := json.NewDecoder(state).Decode(adpitl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpitl.Type(), adpitl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpitl *Resource) State() (*azurermDiskPoolIscsiTargetLunState, bool) {
	return adpitl.state, adpitl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpitl *Resource) StateMust() *azurermDiskPoolIscsiTargetLunState {
	if adpitl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpitl.Type(), adpitl.LocalName()))
	}
	return adpitl.state
}

// Args contains the configurations for azurerm_disk_pool_iscsi_target_lun.
type Args struct {
	// DiskPoolManagedDiskAttachmentId: string, required
	DiskPoolManagedDiskAttachmentId terra.StringValue `hcl:"disk_pool_managed_disk_attachment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IscsiTargetId: string, required
	IscsiTargetId terra.StringValue `hcl:"iscsi_target_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDiskPoolIscsiTargetLunAttributes struct {
	ref terra.Reference
}

// DiskPoolManagedDiskAttachmentId returns a reference to field disk_pool_managed_disk_attachment_id of azurerm_disk_pool_iscsi_target_lun.
func (adpitl azurermDiskPoolIscsiTargetLunAttributes) DiskPoolManagedDiskAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(adpitl.ref.Append("disk_pool_managed_disk_attachment_id"))
}

// Id returns a reference to field id of azurerm_disk_pool_iscsi_target_lun.
func (adpitl azurermDiskPoolIscsiTargetLunAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpitl.ref.Append("id"))
}

// IscsiTargetId returns a reference to field iscsi_target_id of azurerm_disk_pool_iscsi_target_lun.
func (adpitl azurermDiskPoolIscsiTargetLunAttributes) IscsiTargetId() terra.StringValue {
	return terra.ReferenceAsString(adpitl.ref.Append("iscsi_target_id"))
}

// Lun returns a reference to field lun of azurerm_disk_pool_iscsi_target_lun.
func (adpitl azurermDiskPoolIscsiTargetLunAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(adpitl.ref.Append("lun"))
}

// Name returns a reference to field name of azurerm_disk_pool_iscsi_target_lun.
func (adpitl azurermDiskPoolIscsiTargetLunAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpitl.ref.Append("name"))
}

func (adpitl azurermDiskPoolIscsiTargetLunAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpitl.ref.Append("timeouts"))
}

type azurermDiskPoolIscsiTargetLunState struct {
	DiskPoolManagedDiskAttachmentId string         `json:"disk_pool_managed_disk_attachment_id"`
	Id                              string         `json:"id"`
	IscsiTargetId                   string         `json:"iscsi_target_id"`
	Lun                             float64        `json:"lun"`
	Name                            string         `json:"name"`
	Timeouts                        *TimeoutsState `json:"timeouts"`
}
