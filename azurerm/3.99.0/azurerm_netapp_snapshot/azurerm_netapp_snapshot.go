// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_netapp_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetappSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ans *Resource) Type() string {
	return "azurerm_netapp_snapshot"
}

// LocalName returns the local name for [Resource].
func (ans *Resource) LocalName() string {
	return ans.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ans *Resource) Configuration() interface{} {
	return ans.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ans *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ans)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ans *Resource) Dependencies() terra.Dependencies {
	return ans.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ans *Resource) LifecycleManagement() *terra.Lifecycle {
	return ans.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ans *Resource) Attributes() azurermNetappSnapshotAttributes {
	return azurermNetappSnapshotAttributes{ref: terra.ReferenceResource(ans)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ans *Resource) ImportState(state io.Reader) error {
	ans.state = &azurermNetappSnapshotState{}
	if err := json.NewDecoder(state).Decode(ans.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ans.Type(), ans.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ans *Resource) State() (*azurermNetappSnapshotState, bool) {
	return ans.state, ans.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ans *Resource) StateMust() *azurermNetappSnapshotState {
	if ans.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ans.Type(), ans.LocalName()))
	}
	return ans.state
}

// Args contains the configurations for azurerm_netapp_snapshot.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetappSnapshotAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("account_name"))
}

// Id returns a reference to field id of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("name"))
}

// PoolName returns a reference to field pool_name of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) PoolName() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("pool_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("resource_group_name"))
}

// VolumeName returns a reference to field volume_name of azurerm_netapp_snapshot.
func (ans azurermNetappSnapshotAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("volume_name"))
}

func (ans azurermNetappSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ans.ref.Append("timeouts"))
}

type azurermNetappSnapshotState struct {
	AccountName       string         `json:"account_name"`
	Id                string         `json:"id"`
	Location          string         `json:"location"`
	Name              string         `json:"name"`
	PoolName          string         `json:"pool_name"`
	ResourceGroupName string         `json:"resource_group_name"`
	VolumeName        string         `json:"volume_name"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
