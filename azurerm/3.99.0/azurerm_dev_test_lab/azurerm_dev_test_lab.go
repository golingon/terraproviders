// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_test_lab

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dev_test_lab.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDevTestLabState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adtl *Resource) Type() string {
	return "azurerm_dev_test_lab"
}

// LocalName returns the local name for [Resource].
func (adtl *Resource) LocalName() string {
	return adtl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adtl *Resource) Configuration() interface{} {
	return adtl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adtl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adtl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adtl *Resource) Dependencies() terra.Dependencies {
	return adtl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adtl *Resource) LifecycleManagement() *terra.Lifecycle {
	return adtl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adtl *Resource) Attributes() azurermDevTestLabAttributes {
	return azurermDevTestLabAttributes{ref: terra.ReferenceResource(adtl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adtl *Resource) ImportState(state io.Reader) error {
	adtl.state = &azurermDevTestLabState{}
	if err := json.NewDecoder(state).Decode(adtl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adtl.Type(), adtl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adtl *Resource) State() (*azurermDevTestLabState, bool) {
	return adtl.state, adtl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adtl *Resource) StateMust() *azurermDevTestLabState {
	if adtl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adtl.Type(), adtl.LocalName()))
	}
	return adtl.state
}

// Args contains the configurations for azurerm_dev_test_lab.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageType: string, optional
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDevTestLabAttributes struct {
	ref terra.Reference
}

// ArtifactsStorageAccountId returns a reference to field artifacts_storage_account_id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) ArtifactsStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("artifacts_storage_account_id"))
}

// DefaultPremiumStorageAccountId returns a reference to field default_premium_storage_account_id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) DefaultPremiumStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("default_premium_storage_account_id"))
}

// DefaultStorageAccountId returns a reference to field default_storage_account_id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) DefaultStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("default_storage_account_id"))
}

// Id returns a reference to field id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("key_vault_id"))
}

// Location returns a reference to field location of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("name"))
}

// PremiumDataDiskStorageAccountId returns a reference to field premium_data_disk_storage_account_id of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) PremiumDataDiskStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("premium_data_disk_storage_account_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("resource_group_name"))
}

// StorageType returns a reference to field storage_type of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("storage_type"))
}

// Tags returns a reference to field tags of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adtl.ref.Append("tags"))
}

// UniqueIdentifier returns a reference to field unique_identifier of azurerm_dev_test_lab.
func (adtl azurermDevTestLabAttributes) UniqueIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adtl.ref.Append("unique_identifier"))
}

func (adtl azurermDevTestLabAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adtl.ref.Append("timeouts"))
}

type azurermDevTestLabState struct {
	ArtifactsStorageAccountId       string            `json:"artifacts_storage_account_id"`
	DefaultPremiumStorageAccountId  string            `json:"default_premium_storage_account_id"`
	DefaultStorageAccountId         string            `json:"default_storage_account_id"`
	Id                              string            `json:"id"`
	KeyVaultId                      string            `json:"key_vault_id"`
	Location                        string            `json:"location"`
	Name                            string            `json:"name"`
	PremiumDataDiskStorageAccountId string            `json:"premium_data_disk_storage_account_id"`
	ResourceGroupName               string            `json:"resource_group_name"`
	StorageType                     string            `json:"storage_type"`
	Tags                            map[string]string `json:"tags"`
	UniqueIdentifier                string            `json:"unique_identifier"`
	Timeouts                        *TimeoutsState    `json:"timeouts"`
}
