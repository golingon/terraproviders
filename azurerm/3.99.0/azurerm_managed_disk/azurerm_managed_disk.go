// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_disk

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_managed_disk.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagedDiskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amd *Resource) Type() string {
	return "azurerm_managed_disk"
}

// LocalName returns the local name for [Resource].
func (amd *Resource) LocalName() string {
	return amd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amd *Resource) Configuration() interface{} {
	return amd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amd *Resource) Dependencies() terra.Dependencies {
	return amd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amd *Resource) LifecycleManagement() *terra.Lifecycle {
	return amd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amd *Resource) Attributes() azurermManagedDiskAttributes {
	return azurermManagedDiskAttributes{ref: terra.ReferenceResource(amd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amd *Resource) ImportState(state io.Reader) error {
	amd.state = &azurermManagedDiskState{}
	if err := json.NewDecoder(state).Decode(amd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amd.Type(), amd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amd *Resource) State() (*azurermManagedDiskState, bool) {
	return amd.state, amd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amd *Resource) StateMust() *azurermManagedDiskState {
	if amd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amd.Type(), amd.LocalName()))
	}
	return amd.state
}

// Args contains the configurations for azurerm_managed_disk.
type Args struct {
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskAccessId: string, optional
	DiskAccessId terra.StringValue `hcl:"disk_access_id,attr"`
	// DiskEncryptionSetId: string, optional
	DiskEncryptionSetId terra.StringValue `hcl:"disk_encryption_set_id,attr"`
	// DiskIopsReadOnly: number, optional
	DiskIopsReadOnly terra.NumberValue `hcl:"disk_iops_read_only,attr"`
	// DiskIopsReadWrite: number, optional
	DiskIopsReadWrite terra.NumberValue `hcl:"disk_iops_read_write,attr"`
	// DiskMbpsReadOnly: number, optional
	DiskMbpsReadOnly terra.NumberValue `hcl:"disk_mbps_read_only,attr"`
	// DiskMbpsReadWrite: number, optional
	DiskMbpsReadWrite terra.NumberValue `hcl:"disk_mbps_read_write,attr"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// EdgeZone: string, optional
	EdgeZone terra.StringValue `hcl:"edge_zone,attr"`
	// GalleryImageReferenceId: string, optional
	GalleryImageReferenceId terra.StringValue `hcl:"gallery_image_reference_id,attr"`
	// HyperVGeneration: string, optional
	HyperVGeneration terra.StringValue `hcl:"hyper_v_generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageReferenceId: string, optional
	ImageReferenceId terra.StringValue `hcl:"image_reference_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LogicalSectorSize: number, optional
	LogicalSectorSize terra.NumberValue `hcl:"logical_sector_size,attr"`
	// MaxShares: number, optional
	MaxShares terra.NumberValue `hcl:"max_shares,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkAccessPolicy: string, optional
	NetworkAccessPolicy terra.StringValue `hcl:"network_access_policy,attr"`
	// OnDemandBurstingEnabled: bool, optional
	OnDemandBurstingEnabled terra.BoolValue `hcl:"on_demand_bursting_enabled,attr"`
	// OptimizedFrequentAttachEnabled: bool, optional
	OptimizedFrequentAttachEnabled terra.BoolValue `hcl:"optimized_frequent_attach_enabled,attr"`
	// OsType: string, optional
	OsType terra.StringValue `hcl:"os_type,attr"`
	// PerformancePlusEnabled: bool, optional
	PerformancePlusEnabled terra.BoolValue `hcl:"performance_plus_enabled,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecureVmDiskEncryptionSetId: string, optional
	SecureVmDiskEncryptionSetId terra.StringValue `hcl:"secure_vm_disk_encryption_set_id,attr"`
	// SecurityType: string, optional
	SecurityType terra.StringValue `hcl:"security_type,attr"`
	// SourceResourceId: string, optional
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// StorageAccountType: string, required
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// TrustedLaunchEnabled: bool, optional
	TrustedLaunchEnabled terra.BoolValue `hcl:"trusted_launch_enabled,attr"`
	// UploadSizeBytes: number, optional
	UploadSizeBytes terra.NumberValue `hcl:"upload_size_bytes,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// EncryptionSettings: optional
	EncryptionSettings *EncryptionSettings `hcl:"encryption_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagedDiskAttributes struct {
	ref terra.Reference
}

// CreateOption returns a reference to field create_option of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("create_option"))
}

// DiskAccessId returns a reference to field disk_access_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskAccessId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("disk_access_id"))
}

// DiskEncryptionSetId returns a reference to field disk_encryption_set_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("disk_encryption_set_id"))
}

// DiskIopsReadOnly returns a reference to field disk_iops_read_only of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskIopsReadOnly() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_iops_read_only"))
}

// DiskIopsReadWrite returns a reference to field disk_iops_read_write of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskIopsReadWrite() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_iops_read_write"))
}

// DiskMbpsReadOnly returns a reference to field disk_mbps_read_only of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskMbpsReadOnly() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_mbps_read_only"))
}

// DiskMbpsReadWrite returns a reference to field disk_mbps_read_write of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskMbpsReadWrite() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_mbps_read_write"))
}

// DiskSizeGb returns a reference to field disk_size_gb of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("disk_size_gb"))
}

// EdgeZone returns a reference to field edge_zone of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) EdgeZone() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("edge_zone"))
}

// GalleryImageReferenceId returns a reference to field gallery_image_reference_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) GalleryImageReferenceId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("gallery_image_reference_id"))
}

// HyperVGeneration returns a reference to field hyper_v_generation of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) HyperVGeneration() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("hyper_v_generation"))
}

// Id returns a reference to field id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("id"))
}

// ImageReferenceId returns a reference to field image_reference_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) ImageReferenceId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("image_reference_id"))
}

// Location returns a reference to field location of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("location"))
}

// LogicalSectorSize returns a reference to field logical_sector_size of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) LogicalSectorSize() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("logical_sector_size"))
}

// MaxShares returns a reference to field max_shares of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) MaxShares() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("max_shares"))
}

// Name returns a reference to field name of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("name"))
}

// NetworkAccessPolicy returns a reference to field network_access_policy of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) NetworkAccessPolicy() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("network_access_policy"))
}

// OnDemandBurstingEnabled returns a reference to field on_demand_bursting_enabled of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) OnDemandBurstingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("on_demand_bursting_enabled"))
}

// OptimizedFrequentAttachEnabled returns a reference to field optimized_frequent_attach_enabled of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) OptimizedFrequentAttachEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("optimized_frequent_attach_enabled"))
}

// OsType returns a reference to field os_type of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("os_type"))
}

// PerformancePlusEnabled returns a reference to field performance_plus_enabled of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) PerformancePlusEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("performance_plus_enabled"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("resource_group_name"))
}

// SecureVmDiskEncryptionSetId returns a reference to field secure_vm_disk_encryption_set_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) SecureVmDiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("secure_vm_disk_encryption_set_id"))
}

// SecurityType returns a reference to field security_type of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) SecurityType() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("security_type"))
}

// SourceResourceId returns a reference to field source_resource_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("source_resource_id"))
}

// SourceUri returns a reference to field source_uri of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("source_uri"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("storage_account_id"))
}

// StorageAccountType returns a reference to field storage_account_type of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("storage_account_type"))
}

// Tags returns a reference to field tags of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amd.ref.Append("tags"))
}

// Tier returns a reference to field tier of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("tier"))
}

// TrustedLaunchEnabled returns a reference to field trusted_launch_enabled of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) TrustedLaunchEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("trusted_launch_enabled"))
}

// UploadSizeBytes returns a reference to field upload_size_bytes of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) UploadSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("upload_size_bytes"))
}

// Zone returns a reference to field zone of azurerm_managed_disk.
func (amd azurermManagedDiskAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("zone"))
}

func (amd azurermManagedDiskAttributes) EncryptionSettings() terra.ListValue[EncryptionSettingsAttributes] {
	return terra.ReferenceAsList[EncryptionSettingsAttributes](amd.ref.Append("encryption_settings"))
}

func (amd azurermManagedDiskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amd.ref.Append("timeouts"))
}

type azurermManagedDiskState struct {
	CreateOption                   string                    `json:"create_option"`
	DiskAccessId                   string                    `json:"disk_access_id"`
	DiskEncryptionSetId            string                    `json:"disk_encryption_set_id"`
	DiskIopsReadOnly               float64                   `json:"disk_iops_read_only"`
	DiskIopsReadWrite              float64                   `json:"disk_iops_read_write"`
	DiskMbpsReadOnly               float64                   `json:"disk_mbps_read_only"`
	DiskMbpsReadWrite              float64                   `json:"disk_mbps_read_write"`
	DiskSizeGb                     float64                   `json:"disk_size_gb"`
	EdgeZone                       string                    `json:"edge_zone"`
	GalleryImageReferenceId        string                    `json:"gallery_image_reference_id"`
	HyperVGeneration               string                    `json:"hyper_v_generation"`
	Id                             string                    `json:"id"`
	ImageReferenceId               string                    `json:"image_reference_id"`
	Location                       string                    `json:"location"`
	LogicalSectorSize              float64                   `json:"logical_sector_size"`
	MaxShares                      float64                   `json:"max_shares"`
	Name                           string                    `json:"name"`
	NetworkAccessPolicy            string                    `json:"network_access_policy"`
	OnDemandBurstingEnabled        bool                      `json:"on_demand_bursting_enabled"`
	OptimizedFrequentAttachEnabled bool                      `json:"optimized_frequent_attach_enabled"`
	OsType                         string                    `json:"os_type"`
	PerformancePlusEnabled         bool                      `json:"performance_plus_enabled"`
	PublicNetworkAccessEnabled     bool                      `json:"public_network_access_enabled"`
	ResourceGroupName              string                    `json:"resource_group_name"`
	SecureVmDiskEncryptionSetId    string                    `json:"secure_vm_disk_encryption_set_id"`
	SecurityType                   string                    `json:"security_type"`
	SourceResourceId               string                    `json:"source_resource_id"`
	SourceUri                      string                    `json:"source_uri"`
	StorageAccountId               string                    `json:"storage_account_id"`
	StorageAccountType             string                    `json:"storage_account_type"`
	Tags                           map[string]string         `json:"tags"`
	Tier                           string                    `json:"tier"`
	TrustedLaunchEnabled           bool                      `json:"trusted_launch_enabled"`
	UploadSizeBytes                float64                   `json:"upload_size_bytes"`
	Zone                           string                    `json:"zone"`
	EncryptionSettings             []EncryptionSettingsState `json:"encryption_settings"`
	Timeouts                       *TimeoutsState            `json:"timeouts"`
}
