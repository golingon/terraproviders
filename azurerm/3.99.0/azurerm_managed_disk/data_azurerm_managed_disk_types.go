// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_disk

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataEncryptionSettingsAttributes struct {
	ref terra.Reference
}

func (es DataEncryptionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es DataEncryptionSettingsAttributes) InternalWithRef(ref terra.Reference) DataEncryptionSettingsAttributes {
	return DataEncryptionSettingsAttributes{ref: ref}
}

func (es DataEncryptionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es DataEncryptionSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(es.ref.Append("enabled"))
}

func (es DataEncryptionSettingsAttributes) DiskEncryptionKey() terra.ListValue[DataEncryptionSettingsDiskEncryptionKeyAttributes] {
	return terra.ReferenceAsList[DataEncryptionSettingsDiskEncryptionKeyAttributes](es.ref.Append("disk_encryption_key"))
}

func (es DataEncryptionSettingsAttributes) KeyEncryptionKey() terra.ListValue[DataEncryptionSettingsKeyEncryptionKeyAttributes] {
	return terra.ReferenceAsList[DataEncryptionSettingsKeyEncryptionKeyAttributes](es.ref.Append("key_encryption_key"))
}

type DataEncryptionSettingsDiskEncryptionKeyAttributes struct {
	ref terra.Reference
}

func (dek DataEncryptionSettingsDiskEncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return dek.ref, nil
}

func (dek DataEncryptionSettingsDiskEncryptionKeyAttributes) InternalWithRef(ref terra.Reference) DataEncryptionSettingsDiskEncryptionKeyAttributes {
	return DataEncryptionSettingsDiskEncryptionKeyAttributes{ref: ref}
}

func (dek DataEncryptionSettingsDiskEncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dek.ref.InternalTokens()
}

func (dek DataEncryptionSettingsDiskEncryptionKeyAttributes) SecretUrl() terra.StringValue {
	return terra.ReferenceAsString(dek.ref.Append("secret_url"))
}

func (dek DataEncryptionSettingsDiskEncryptionKeyAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceAsString(dek.ref.Append("source_vault_id"))
}

type DataEncryptionSettingsKeyEncryptionKeyAttributes struct {
	ref terra.Reference
}

func (kek DataEncryptionSettingsKeyEncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return kek.ref, nil
}

func (kek DataEncryptionSettingsKeyEncryptionKeyAttributes) InternalWithRef(ref terra.Reference) DataEncryptionSettingsKeyEncryptionKeyAttributes {
	return DataEncryptionSettingsKeyEncryptionKeyAttributes{ref: ref}
}

func (kek DataEncryptionSettingsKeyEncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kek.ref.InternalTokens()
}

func (kek DataEncryptionSettingsKeyEncryptionKeyAttributes) KeyUrl() terra.StringValue {
	return terra.ReferenceAsString(kek.ref.Append("key_url"))
}

func (kek DataEncryptionSettingsKeyEncryptionKeyAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceAsString(kek.ref.Append("source_vault_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataEncryptionSettingsState struct {
	Enabled           bool                                           `json:"enabled"`
	DiskEncryptionKey []DataEncryptionSettingsDiskEncryptionKeyState `json:"disk_encryption_key"`
	KeyEncryptionKey  []DataEncryptionSettingsKeyEncryptionKeyState  `json:"key_encryption_key"`
}

type DataEncryptionSettingsDiskEncryptionKeyState struct {
	SecretUrl     string `json:"secret_url"`
	SourceVaultId string `json:"source_vault_id"`
}

type DataEncryptionSettingsKeyEncryptionKeyState struct {
	KeyUrl        string `json:"key_url"`
	SourceVaultId string `json:"source_vault_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
