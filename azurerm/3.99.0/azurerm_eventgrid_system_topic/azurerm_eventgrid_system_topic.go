// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_eventgrid_system_topic

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_eventgrid_system_topic.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermEventgridSystemTopicState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aest *Resource) Type() string {
	return "azurerm_eventgrid_system_topic"
}

// LocalName returns the local name for [Resource].
func (aest *Resource) LocalName() string {
	return aest.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aest *Resource) Configuration() interface{} {
	return aest.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aest *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aest)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aest *Resource) Dependencies() terra.Dependencies {
	return aest.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aest *Resource) LifecycleManagement() *terra.Lifecycle {
	return aest.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aest *Resource) Attributes() azurermEventgridSystemTopicAttributes {
	return azurermEventgridSystemTopicAttributes{ref: terra.ReferenceResource(aest)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aest *Resource) ImportState(state io.Reader) error {
	aest.state = &azurermEventgridSystemTopicState{}
	if err := json.NewDecoder(state).Decode(aest.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aest.Type(), aest.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aest *Resource) State() (*azurermEventgridSystemTopicState, bool) {
	return aest.state, aest.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aest *Resource) StateMust() *azurermEventgridSystemTopicState {
	if aest.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aest.Type(), aest.LocalName()))
	}
	return aest.state
}

// Args contains the configurations for azurerm_eventgrid_system_topic.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceArmResourceId: string, required
	SourceArmResourceId terra.StringValue `hcl:"source_arm_resource_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TopicType: string, required
	TopicType terra.StringValue `hcl:"topic_type,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermEventgridSystemTopicAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("location"))
}

// MetricArmResourceId returns a reference to field metric_arm_resource_id of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) MetricArmResourceId() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("metric_arm_resource_id"))
}

// Name returns a reference to field name of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("resource_group_name"))
}

// SourceArmResourceId returns a reference to field source_arm_resource_id of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) SourceArmResourceId() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("source_arm_resource_id"))
}

// Tags returns a reference to field tags of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aest.ref.Append("tags"))
}

// TopicType returns a reference to field topic_type of azurerm_eventgrid_system_topic.
func (aest azurermEventgridSystemTopicAttributes) TopicType() terra.StringValue {
	return terra.ReferenceAsString(aest.ref.Append("topic_type"))
}

func (aest azurermEventgridSystemTopicAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aest.ref.Append("identity"))
}

func (aest azurermEventgridSystemTopicAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aest.ref.Append("timeouts"))
}

type azurermEventgridSystemTopicState struct {
	Id                  string            `json:"id"`
	Location            string            `json:"location"`
	MetricArmResourceId string            `json:"metric_arm_resource_id"`
	Name                string            `json:"name"`
	ResourceGroupName   string            `json:"resource_group_name"`
	SourceArmResourceId string            `json:"source_arm_resource_id"`
	Tags                map[string]string `json:"tags"`
	TopicType           string            `json:"topic_type"`
	Identity            []IdentityState   `json:"identity"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
