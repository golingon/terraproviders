// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_express_route_circuit_authorization

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_express_route_circuit_authorization.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermExpressRouteCircuitAuthorizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aerca *Resource) Type() string {
	return "azurerm_express_route_circuit_authorization"
}

// LocalName returns the local name for [Resource].
func (aerca *Resource) LocalName() string {
	return aerca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aerca *Resource) Configuration() interface{} {
	return aerca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aerca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aerca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aerca *Resource) Dependencies() terra.Dependencies {
	return aerca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aerca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aerca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aerca *Resource) Attributes() azurermExpressRouteCircuitAuthorizationAttributes {
	return azurermExpressRouteCircuitAuthorizationAttributes{ref: terra.ReferenceResource(aerca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aerca *Resource) ImportState(state io.Reader) error {
	aerca.state = &azurermExpressRouteCircuitAuthorizationState{}
	if err := json.NewDecoder(state).Decode(aerca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aerca.Type(), aerca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aerca *Resource) State() (*azurermExpressRouteCircuitAuthorizationState, bool) {
	return aerca.state, aerca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aerca *Resource) StateMust() *azurermExpressRouteCircuitAuthorizationState {
	if aerca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aerca.Type(), aerca.LocalName()))
	}
	return aerca.state
}

// Args contains the configurations for azurerm_express_route_circuit_authorization.
type Args struct {
	// ExpressRouteCircuitName: string, required
	ExpressRouteCircuitName terra.StringValue `hcl:"express_route_circuit_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermExpressRouteCircuitAuthorizationAttributes struct {
	ref terra.Reference
}

// AuthorizationKey returns a reference to field authorization_key of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("authorization_key"))
}

// AuthorizationUseStatus returns a reference to field authorization_use_status of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) AuthorizationUseStatus() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("authorization_use_status"))
}

// ExpressRouteCircuitName returns a reference to field express_route_circuit_name of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) ExpressRouteCircuitName() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("express_route_circuit_name"))
}

// Id returns a reference to field id of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_express_route_circuit_authorization.
func (aerca azurermExpressRouteCircuitAuthorizationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aerca.ref.Append("resource_group_name"))
}

func (aerca azurermExpressRouteCircuitAuthorizationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aerca.ref.Append("timeouts"))
}

type azurermExpressRouteCircuitAuthorizationState struct {
	AuthorizationKey        string         `json:"authorization_key"`
	AuthorizationUseStatus  string         `json:"authorization_use_status"`
	ExpressRouteCircuitName string         `json:"express_route_circuit_name"`
	Id                      string         `json:"id"`
	Name                    string         `json:"name"`
	ResourceGroupName       string         `json:"resource_group_name"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
