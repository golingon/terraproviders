// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_streaming_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_streaming_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaStreamingEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amse *Resource) Type() string {
	return "azurerm_media_streaming_endpoint"
}

// LocalName returns the local name for [Resource].
func (amse *Resource) LocalName() string {
	return amse.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amse *Resource) Configuration() interface{} {
	return amse.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amse *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amse)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amse *Resource) Dependencies() terra.Dependencies {
	return amse.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amse *Resource) LifecycleManagement() *terra.Lifecycle {
	return amse.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amse *Resource) Attributes() azurermMediaStreamingEndpointAttributes {
	return azurermMediaStreamingEndpointAttributes{ref: terra.ReferenceResource(amse)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amse *Resource) ImportState(state io.Reader) error {
	amse.state = &azurermMediaStreamingEndpointState{}
	if err := json.NewDecoder(state).Decode(amse.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amse.Type(), amse.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amse *Resource) State() (*azurermMediaStreamingEndpointState, bool) {
	return amse.state, amse.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amse *Resource) StateMust() *azurermMediaStreamingEndpointState {
	if amse.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amse.Type(), amse.LocalName()))
	}
	return amse.state
}

// Args contains the configurations for azurerm_media_streaming_endpoint.
type Args struct {
	// AutoStartEnabled: bool, optional
	AutoStartEnabled terra.BoolValue `hcl:"auto_start_enabled,attr"`
	// CdnEnabled: bool, optional
	CdnEnabled terra.BoolValue `hcl:"cdn_enabled,attr"`
	// CdnProfile: string, optional
	CdnProfile terra.StringValue `hcl:"cdn_profile,attr"`
	// CdnProvider: string, optional
	CdnProvider terra.StringValue `hcl:"cdn_provider,attr"`
	// CustomHostNames: set of string, optional
	CustomHostNames terra.SetValue[terra.StringValue] `hcl:"custom_host_names,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxCacheAgeSeconds: number, optional
	MaxCacheAgeSeconds terra.NumberValue `hcl:"max_cache_age_seconds,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScaleUnits: number, required
	ScaleUnits terra.NumberValue `hcl:"scale_units,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AccessControl: optional
	AccessControl *AccessControl `hcl:"access_control,block"`
	// CrossSiteAccessPolicy: optional
	CrossSiteAccessPolicy *CrossSiteAccessPolicy `hcl:"cross_site_access_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaStreamingEndpointAttributes struct {
	ref terra.Reference
}

// AutoStartEnabled returns a reference to field auto_start_enabled of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) AutoStartEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amse.ref.Append("auto_start_enabled"))
}

// CdnEnabled returns a reference to field cdn_enabled of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) CdnEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amse.ref.Append("cdn_enabled"))
}

// CdnProfile returns a reference to field cdn_profile of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) CdnProfile() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("cdn_profile"))
}

// CdnProvider returns a reference to field cdn_provider of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) CdnProvider() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("cdn_provider"))
}

// CustomHostNames returns a reference to field custom_host_names of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) CustomHostNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amse.ref.Append("custom_host_names"))
}

// Description returns a reference to field description of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("description"))
}

// HostName returns a reference to field host_name of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("host_name"))
}

// Id returns a reference to field id of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("location"))
}

// MaxCacheAgeSeconds returns a reference to field max_cache_age_seconds of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) MaxCacheAgeSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(amse.ref.Append("max_cache_age_seconds"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amse.ref.Append("resource_group_name"))
}

// ScaleUnits returns a reference to field scale_units of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) ScaleUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(amse.ref.Append("scale_units"))
}

// Tags returns a reference to field tags of azurerm_media_streaming_endpoint.
func (amse azurermMediaStreamingEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amse.ref.Append("tags"))
}

func (amse azurermMediaStreamingEndpointAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](amse.ref.Append("sku"))
}

func (amse azurermMediaStreamingEndpointAttributes) AccessControl() terra.ListValue[AccessControlAttributes] {
	return terra.ReferenceAsList[AccessControlAttributes](amse.ref.Append("access_control"))
}

func (amse azurermMediaStreamingEndpointAttributes) CrossSiteAccessPolicy() terra.ListValue[CrossSiteAccessPolicyAttributes] {
	return terra.ReferenceAsList[CrossSiteAccessPolicyAttributes](amse.ref.Append("cross_site_access_policy"))
}

func (amse azurermMediaStreamingEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amse.ref.Append("timeouts"))
}

type azurermMediaStreamingEndpointState struct {
	AutoStartEnabled         bool                         `json:"auto_start_enabled"`
	CdnEnabled               bool                         `json:"cdn_enabled"`
	CdnProfile               string                       `json:"cdn_profile"`
	CdnProvider              string                       `json:"cdn_provider"`
	CustomHostNames          []string                     `json:"custom_host_names"`
	Description              string                       `json:"description"`
	HostName                 string                       `json:"host_name"`
	Id                       string                       `json:"id"`
	Location                 string                       `json:"location"`
	MaxCacheAgeSeconds       float64                      `json:"max_cache_age_seconds"`
	MediaServicesAccountName string                       `json:"media_services_account_name"`
	Name                     string                       `json:"name"`
	ResourceGroupName        string                       `json:"resource_group_name"`
	ScaleUnits               float64                      `json:"scale_units"`
	Tags                     map[string]string            `json:"tags"`
	Sku                      []SkuState                   `json:"sku"`
	AccessControl            []AccessControlState         `json:"access_control"`
	CrossSiteAccessPolicy    []CrossSiteAccessPolicyState `json:"cross_site_access_policy"`
	Timeouts                 *TimeoutsState               `json:"timeouts"`
}
