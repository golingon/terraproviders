// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (as *Resource) Type() string {
	return "azurerm_snapshot"
}

// LocalName returns the local name for [Resource].
func (as *Resource) LocalName() string {
	return as.Name
}

// Configuration returns the configuration (args) for [Resource].
func (as *Resource) Configuration() interface{} {
	return as.Args
}

// DependOn is used for other resources to depend on [Resource].
func (as *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (as *Resource) Dependencies() terra.Dependencies {
	return as.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (as *Resource) LifecycleManagement() *terra.Lifecycle {
	return as.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (as *Resource) Attributes() azurermSnapshotAttributes {
	return azurermSnapshotAttributes{ref: terra.ReferenceResource(as)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (as *Resource) ImportState(state io.Reader) error {
	as.state = &azurermSnapshotState{}
	if err := json.NewDecoder(state).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (as *Resource) State() (*azurermSnapshotState, bool) {
	return as.state, as.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (as *Resource) StateMust() *azurermSnapshotState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

// Args contains the configurations for azurerm_snapshot.
type Args struct {
	// CreateOption: string, required
	CreateOption terra.StringValue `hcl:"create_option,attr" validate:"required"`
	// DiskSizeGb: number, optional
	DiskSizeGb terra.NumberValue `hcl:"disk_size_gb,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncrementalEnabled: bool, optional
	IncrementalEnabled terra.BoolValue `hcl:"incremental_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkAccessPolicy: string, optional
	NetworkAccessPolicy terra.StringValue `hcl:"network_access_policy,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceResourceId: string, optional
	SourceResourceId terra.StringValue `hcl:"source_resource_id,attr"`
	// SourceUri: string, optional
	SourceUri terra.StringValue `hcl:"source_uri,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// EncryptionSettings: optional
	EncryptionSettings *EncryptionSettings `hcl:"encryption_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSnapshotAttributes struct {
	ref terra.Reference
}

// CreateOption returns a reference to field create_option of azurerm_snapshot.
func (as azurermSnapshotAttributes) CreateOption() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("create_option"))
}

// DiskSizeGb returns a reference to field disk_size_gb of azurerm_snapshot.
func (as azurermSnapshotAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("disk_size_gb"))
}

// Id returns a reference to field id of azurerm_snapshot.
func (as azurermSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("id"))
}

// IncrementalEnabled returns a reference to field incremental_enabled of azurerm_snapshot.
func (as azurermSnapshotAttributes) IncrementalEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("incremental_enabled"))
}

// Location returns a reference to field location of azurerm_snapshot.
func (as azurermSnapshotAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_snapshot.
func (as azurermSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

// NetworkAccessPolicy returns a reference to field network_access_policy of azurerm_snapshot.
func (as azurermSnapshotAttributes) NetworkAccessPolicy() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("network_access_policy"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_snapshot.
func (as azurermSnapshotAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_snapshot.
func (as azurermSnapshotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("resource_group_name"))
}

// SourceResourceId returns a reference to field source_resource_id of azurerm_snapshot.
func (as azurermSnapshotAttributes) SourceResourceId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("source_resource_id"))
}

// SourceUri returns a reference to field source_uri of azurerm_snapshot.
func (as azurermSnapshotAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("source_uri"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_snapshot.
func (as azurermSnapshotAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("storage_account_id"))
}

// Tags returns a reference to field tags of azurerm_snapshot.
func (as azurermSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("tags"))
}

// TrustedLaunchEnabled returns a reference to field trusted_launch_enabled of azurerm_snapshot.
func (as azurermSnapshotAttributes) TrustedLaunchEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("trusted_launch_enabled"))
}

func (as azurermSnapshotAttributes) EncryptionSettings() terra.ListValue[EncryptionSettingsAttributes] {
	return terra.ReferenceAsList[EncryptionSettingsAttributes](as.ref.Append("encryption_settings"))
}

func (as azurermSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](as.ref.Append("timeouts"))
}

type azurermSnapshotState struct {
	CreateOption               string                    `json:"create_option"`
	DiskSizeGb                 float64                   `json:"disk_size_gb"`
	Id                         string                    `json:"id"`
	IncrementalEnabled         bool                      `json:"incremental_enabled"`
	Location                   string                    `json:"location"`
	Name                       string                    `json:"name"`
	NetworkAccessPolicy        string                    `json:"network_access_policy"`
	PublicNetworkAccessEnabled bool                      `json:"public_network_access_enabled"`
	ResourceGroupName          string                    `json:"resource_group_name"`
	SourceResourceId           string                    `json:"source_resource_id"`
	SourceUri                  string                    `json:"source_uri"`
	StorageAccountId           string                    `json:"storage_account_id"`
	Tags                       map[string]string         `json:"tags"`
	TrustedLaunchEnabled       bool                      `json:"trusted_launch_enabled"`
	EncryptionSettings         []EncryptionSettingsState `json:"encryption_settings"`
	Timeouts                   *TimeoutsState            `json:"timeouts"`
}
