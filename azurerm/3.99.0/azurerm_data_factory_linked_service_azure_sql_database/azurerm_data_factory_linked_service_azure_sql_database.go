// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_linked_service_azure_sql_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_linked_service_azure_sql_database.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryLinkedServiceAzureSqlDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adflsasd *Resource) Type() string {
	return "azurerm_data_factory_linked_service_azure_sql_database"
}

// LocalName returns the local name for [Resource].
func (adflsasd *Resource) LocalName() string {
	return adflsasd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adflsasd *Resource) Configuration() interface{} {
	return adflsasd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adflsasd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adflsasd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adflsasd *Resource) Dependencies() terra.Dependencies {
	return adflsasd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adflsasd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adflsasd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adflsasd *Resource) Attributes() azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes {
	return azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes{ref: terra.ReferenceResource(adflsasd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adflsasd *Resource) ImportState(state io.Reader) error {
	adflsasd.state = &azurermDataFactoryLinkedServiceAzureSqlDatabaseState{}
	if err := json.NewDecoder(state).Decode(adflsasd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adflsasd.Type(), adflsasd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adflsasd *Resource) State() (*azurermDataFactoryLinkedServiceAzureSqlDatabaseState, bool) {
	return adflsasd.state, adflsasd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adflsasd *Resource) StateMust() *azurermDataFactoryLinkedServiceAzureSqlDatabaseState {
	if adflsasd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adflsasd.Type(), adflsasd.LocalName()))
	}
	return adflsasd.state
}

// Args contains the configurations for azurerm_data_factory_linked_service_azure_sql_database.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationRuntimeName: string, optional
	IntegrationRuntimeName terra.StringValue `hcl:"integration_runtime_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ServicePrincipalId: string, optional
	ServicePrincipalId terra.StringValue `hcl:"service_principal_id,attr"`
	// ServicePrincipalKey: string, optional
	ServicePrincipalKey terra.StringValue `hcl:"service_principal_key,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// UseManagedIdentity: bool, optional
	UseManagedIdentity terra.BoolValue `hcl:"use_managed_identity,attr"`
	// KeyVaultConnectionString: optional
	KeyVaultConnectionString *KeyVaultConnectionString `hcl:"key_vault_connection_string,block"`
	// KeyVaultPassword: optional
	KeyVaultPassword *KeyVaultPassword `hcl:"key_vault_password,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adflsasd.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adflsasd.ref.Append("annotations"))
}

// ConnectionString returns a reference to field connection_string of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("connection_string"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("id"))
}

// IntegrationRuntimeName returns a reference to field integration_runtime_name of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) IntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("integration_runtime_name"))
}

// Name returns a reference to field name of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adflsasd.ref.Append("parameters"))
}

// ServicePrincipalId returns a reference to field service_principal_id of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) ServicePrincipalId() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("service_principal_id"))
}

// ServicePrincipalKey returns a reference to field service_principal_key of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) ServicePrincipalKey() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("service_principal_key"))
}

// TenantId returns a reference to field tenant_id of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(adflsasd.ref.Append("tenant_id"))
}

// UseManagedIdentity returns a reference to field use_managed_identity of azurerm_data_factory_linked_service_azure_sql_database.
func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) UseManagedIdentity() terra.BoolValue {
	return terra.ReferenceAsBool(adflsasd.ref.Append("use_managed_identity"))
}

func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) KeyVaultConnectionString() terra.ListValue[KeyVaultConnectionStringAttributes] {
	return terra.ReferenceAsList[KeyVaultConnectionStringAttributes](adflsasd.ref.Append("key_vault_connection_string"))
}

func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) KeyVaultPassword() terra.ListValue[KeyVaultPasswordAttributes] {
	return terra.ReferenceAsList[KeyVaultPasswordAttributes](adflsasd.ref.Append("key_vault_password"))
}

func (adflsasd azurermDataFactoryLinkedServiceAzureSqlDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adflsasd.ref.Append("timeouts"))
}

type azurermDataFactoryLinkedServiceAzureSqlDatabaseState struct {
	AdditionalProperties     map[string]string               `json:"additional_properties"`
	Annotations              []string                        `json:"annotations"`
	ConnectionString         string                          `json:"connection_string"`
	DataFactoryId            string                          `json:"data_factory_id"`
	Description              string                          `json:"description"`
	Id                       string                          `json:"id"`
	IntegrationRuntimeName   string                          `json:"integration_runtime_name"`
	Name                     string                          `json:"name"`
	Parameters               map[string]string               `json:"parameters"`
	ServicePrincipalId       string                          `json:"service_principal_id"`
	ServicePrincipalKey      string                          `json:"service_principal_key"`
	TenantId                 string                          `json:"tenant_id"`
	UseManagedIdentity       bool                            `json:"use_managed_identity"`
	KeyVaultConnectionString []KeyVaultConnectionStringState `json:"key_vault_connection_string"`
	KeyVaultPassword         []KeyVaultPasswordState         `json:"key_vault_password"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
