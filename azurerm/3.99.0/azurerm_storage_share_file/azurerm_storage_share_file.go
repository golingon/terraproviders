// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_share_file

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_share_file.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageShareFileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assf *Resource) Type() string {
	return "azurerm_storage_share_file"
}

// LocalName returns the local name for [Resource].
func (assf *Resource) LocalName() string {
	return assf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assf *Resource) Configuration() interface{} {
	return assf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assf *Resource) Dependencies() terra.Dependencies {
	return assf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assf *Resource) LifecycleManagement() *terra.Lifecycle {
	return assf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assf *Resource) Attributes() azurermStorageShareFileAttributes {
	return azurermStorageShareFileAttributes{ref: terra.ReferenceResource(assf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assf *Resource) ImportState(state io.Reader) error {
	assf.state = &azurermStorageShareFileState{}
	if err := json.NewDecoder(state).Decode(assf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assf.Type(), assf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assf *Resource) State() (*azurermStorageShareFileState, bool) {
	return assf.state, assf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assf *Resource) StateMust() *azurermStorageShareFileState {
	if assf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assf.Type(), assf.LocalName()))
	}
	return assf.state
}

// Args contains the configurations for azurerm_storage_share_file.
type Args struct {
	// ContentDisposition: string, optional
	ContentDisposition terra.StringValue `hcl:"content_disposition,attr"`
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// ContentMd5: string, optional
	ContentMd5 terra.StringValue `hcl:"content_md5,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// StorageShareId: string, required
	StorageShareId terra.StringValue `hcl:"storage_share_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageShareFileAttributes struct {
	ref terra.Reference
}

// ContentDisposition returns a reference to field content_disposition of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) ContentDisposition() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("content_disposition"))
}

// ContentEncoding returns a reference to field content_encoding of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("content_encoding"))
}

// ContentLength returns a reference to field content_length of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) ContentLength() terra.NumberValue {
	return terra.ReferenceAsNumber(assf.ref.Append("content_length"))
}

// ContentMd5 returns a reference to field content_md5 of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) ContentMd5() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("content_md5"))
}

// ContentType returns a reference to field content_type of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("content_type"))
}

// Id returns a reference to field id of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assf.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("name"))
}

// Path returns a reference to field path of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("path"))
}

// Source returns a reference to field source of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("source"))
}

// StorageShareId returns a reference to field storage_share_id of azurerm_storage_share_file.
func (assf azurermStorageShareFileAttributes) StorageShareId() terra.StringValue {
	return terra.ReferenceAsString(assf.ref.Append("storage_share_id"))
}

func (assf azurermStorageShareFileAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assf.ref.Append("timeouts"))
}

type azurermStorageShareFileState struct {
	ContentDisposition string            `json:"content_disposition"`
	ContentEncoding    string            `json:"content_encoding"`
	ContentLength      float64           `json:"content_length"`
	ContentMd5         string            `json:"content_md5"`
	ContentType        string            `json:"content_type"`
	Id                 string            `json:"id"`
	Metadata           map[string]string `json:"metadata"`
	Name               string            `json:"name"`
	Path               string            `json:"path"`
	Source             string            `json:"source"`
	StorageShareId     string            `json:"storage_share_id"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
