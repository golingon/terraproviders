// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_nat_gateway_public_ip_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_nat_gateway_public_ip_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNatGatewayPublicIpAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (angpia *Resource) Type() string {
	return "azurerm_nat_gateway_public_ip_association"
}

// LocalName returns the local name for [Resource].
func (angpia *Resource) LocalName() string {
	return angpia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (angpia *Resource) Configuration() interface{} {
	return angpia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (angpia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(angpia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (angpia *Resource) Dependencies() terra.Dependencies {
	return angpia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (angpia *Resource) LifecycleManagement() *terra.Lifecycle {
	return angpia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (angpia *Resource) Attributes() azurermNatGatewayPublicIpAssociationAttributes {
	return azurermNatGatewayPublicIpAssociationAttributes{ref: terra.ReferenceResource(angpia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (angpia *Resource) ImportState(state io.Reader) error {
	angpia.state = &azurermNatGatewayPublicIpAssociationState{}
	if err := json.NewDecoder(state).Decode(angpia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", angpia.Type(), angpia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (angpia *Resource) State() (*azurermNatGatewayPublicIpAssociationState, bool) {
	return angpia.state, angpia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (angpia *Resource) StateMust() *azurermNatGatewayPublicIpAssociationState {
	if angpia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", angpia.Type(), angpia.LocalName()))
	}
	return angpia.state
}

// Args contains the configurations for azurerm_nat_gateway_public_ip_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NatGatewayId: string, required
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr" validate:"required"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNatGatewayPublicIpAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_nat_gateway_public_ip_association.
func (angpia azurermNatGatewayPublicIpAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(angpia.ref.Append("id"))
}

// NatGatewayId returns a reference to field nat_gateway_id of azurerm_nat_gateway_public_ip_association.
func (angpia azurermNatGatewayPublicIpAssociationAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceAsString(angpia.ref.Append("nat_gateway_id"))
}

// PublicIpAddressId returns a reference to field public_ip_address_id of azurerm_nat_gateway_public_ip_association.
func (angpia azurermNatGatewayPublicIpAssociationAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(angpia.ref.Append("public_ip_address_id"))
}

func (angpia azurermNatGatewayPublicIpAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](angpia.ref.Append("timeouts"))
}

type azurermNatGatewayPublicIpAssociationState struct {
	Id                string         `json:"id"`
	NatGatewayId      string         `json:"nat_gateway_id"`
	PublicIpAddressId string         `json:"public_ip_address_id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
