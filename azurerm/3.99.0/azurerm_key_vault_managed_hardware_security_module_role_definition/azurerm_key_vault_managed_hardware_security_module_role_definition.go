// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_managed_hardware_security_module_role_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_managed_hardware_security_module_role_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvmhsmrd *Resource) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module_role_definition"
}

// LocalName returns the local name for [Resource].
func (akvmhsmrd *Resource) LocalName() string {
	return akvmhsmrd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvmhsmrd *Resource) Configuration() interface{} {
	return akvmhsmrd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvmhsmrd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvmhsmrd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvmhsmrd *Resource) Dependencies() terra.Dependencies {
	return akvmhsmrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvmhsmrd *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvmhsmrd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvmhsmrd *Resource) Attributes() azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes {
	return azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes{ref: terra.ReferenceResource(akvmhsmrd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvmhsmrd *Resource) ImportState(state io.Reader) error {
	akvmhsmrd.state = &azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionState{}
	if err := json.NewDecoder(state).Decode(akvmhsmrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvmhsmrd.Type(), akvmhsmrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvmhsmrd *Resource) State() (*azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionState, bool) {
	return akvmhsmrd.state, akvmhsmrd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvmhsmrd *Resource) StateMust() *azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionState {
	if akvmhsmrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvmhsmrd.Type(), akvmhsmrd.LocalName()))
	}
	return akvmhsmrd.state
}

// Args contains the configurations for azurerm_key_vault_managed_hardware_security_module_role_definition.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleName: string, optional
	RoleName terra.StringValue `hcl:"role_name,attr"`
	// VaultBaseUrl: string, required
	VaultBaseUrl terra.StringValue `hcl:"vault_base_url,attr" validate:"required"`
	// Permission: min=0
	Permission []Permission `hcl:"permission,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("resource_manager_id"))
}

// RoleName returns a reference to field role_name of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("role_name"))
}

// RoleType returns a reference to field role_type of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("role_type"))
}

// VaultBaseUrl returns a reference to field vault_base_url of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) VaultBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmrd.ref.Append("vault_base_url"))
}

func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Permission() terra.ListValue[PermissionAttributes] {
	return terra.ReferenceAsList[PermissionAttributes](akvmhsmrd.ref.Append("permission"))
}

func (akvmhsmrd azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvmhsmrd.ref.Append("timeouts"))
}

type azurermKeyVaultManagedHardwareSecurityModuleRoleDefinitionState struct {
	Description       string            `json:"description"`
	Id                string            `json:"id"`
	Name              string            `json:"name"`
	ResourceManagerId string            `json:"resource_manager_id"`
	RoleName          string            `json:"role_name"`
	RoleType          string            `json:"role_type"`
	VaultBaseUrl      string            `json:"vault_base_url"`
	Permission        []PermissionState `json:"permission"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
