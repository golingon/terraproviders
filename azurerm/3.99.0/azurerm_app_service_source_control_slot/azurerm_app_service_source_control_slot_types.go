// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service_source_control_slot

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GithubActionConfiguration struct {
	// GenerateWorkflowFile: bool, optional
	GenerateWorkflowFile terra.BoolValue `hcl:"generate_workflow_file,attr"`
	// GithubActionConfigurationCodeConfiguration: optional
	CodeConfiguration *GithubActionConfigurationCodeConfiguration `hcl:"code_configuration,block"`
	// GithubActionConfigurationContainerConfiguration: optional
	ContainerConfiguration *GithubActionConfigurationContainerConfiguration `hcl:"container_configuration,block"`
}

type GithubActionConfigurationCodeConfiguration struct {
	// RuntimeStack: string, required
	RuntimeStack terra.StringValue `hcl:"runtime_stack,attr" validate:"required"`
	// RuntimeVersion: string, required
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
}

type GithubActionConfigurationContainerConfiguration struct {
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// RegistryPassword: string, optional
	RegistryPassword terra.StringValue `hcl:"registry_password,attr"`
	// RegistryUrl: string, required
	RegistryUrl terra.StringValue `hcl:"registry_url,attr" validate:"required"`
	// RegistryUsername: string, optional
	RegistryUsername terra.StringValue `hcl:"registry_username,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type GithubActionConfigurationAttributes struct {
	ref terra.Reference
}

func (gac GithubActionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gac.ref, nil
}

func (gac GithubActionConfigurationAttributes) InternalWithRef(ref terra.Reference) GithubActionConfigurationAttributes {
	return GithubActionConfigurationAttributes{ref: ref}
}

func (gac GithubActionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gac.ref.InternalTokens()
}

func (gac GithubActionConfigurationAttributes) GenerateWorkflowFile() terra.BoolValue {
	return terra.ReferenceAsBool(gac.ref.Append("generate_workflow_file"))
}

func (gac GithubActionConfigurationAttributes) LinuxAction() terra.BoolValue {
	return terra.ReferenceAsBool(gac.ref.Append("linux_action"))
}

func (gac GithubActionConfigurationAttributes) CodeConfiguration() terra.ListValue[GithubActionConfigurationCodeConfigurationAttributes] {
	return terra.ReferenceAsList[GithubActionConfigurationCodeConfigurationAttributes](gac.ref.Append("code_configuration"))
}

func (gac GithubActionConfigurationAttributes) ContainerConfiguration() terra.ListValue[GithubActionConfigurationContainerConfigurationAttributes] {
	return terra.ReferenceAsList[GithubActionConfigurationContainerConfigurationAttributes](gac.ref.Append("container_configuration"))
}

type GithubActionConfigurationCodeConfigurationAttributes struct {
	ref terra.Reference
}

func (cc GithubActionConfigurationCodeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc GithubActionConfigurationCodeConfigurationAttributes) InternalWithRef(ref terra.Reference) GithubActionConfigurationCodeConfigurationAttributes {
	return GithubActionConfigurationCodeConfigurationAttributes{ref: ref}
}

func (cc GithubActionConfigurationCodeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc GithubActionConfigurationCodeConfigurationAttributes) RuntimeStack() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("runtime_stack"))
}

func (cc GithubActionConfigurationCodeConfigurationAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("runtime_version"))
}

type GithubActionConfigurationContainerConfigurationAttributes struct {
	ref terra.Reference
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) InternalWithRef(ref terra.Reference) GithubActionConfigurationContainerConfigurationAttributes {
	return GithubActionConfigurationContainerConfigurationAttributes{ref: ref}
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("image_name"))
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) RegistryPassword() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("registry_password"))
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) RegistryUrl() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("registry_url"))
}

func (cc GithubActionConfigurationContainerConfigurationAttributes) RegistryUsername() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("registry_username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type GithubActionConfigurationState struct {
	GenerateWorkflowFile   bool                                                   `json:"generate_workflow_file"`
	LinuxAction            bool                                                   `json:"linux_action"`
	CodeConfiguration      []GithubActionConfigurationCodeConfigurationState      `json:"code_configuration"`
	ContainerConfiguration []GithubActionConfigurationContainerConfigurationState `json:"container_configuration"`
}

type GithubActionConfigurationCodeConfigurationState struct {
	RuntimeStack   string `json:"runtime_stack"`
	RuntimeVersion string `json:"runtime_version"`
}

type GithubActionConfigurationContainerConfigurationState struct {
	ImageName        string `json:"image_name"`
	RegistryPassword string `json:"registry_password"`
	RegistryUrl      string `json:"registry_url"`
	RegistryUsername string `json:"registry_username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
