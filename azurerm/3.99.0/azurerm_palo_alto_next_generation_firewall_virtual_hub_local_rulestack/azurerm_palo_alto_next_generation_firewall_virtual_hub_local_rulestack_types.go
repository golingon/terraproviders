// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_palo_alto_next_generation_firewall_virtual_hub_local_rulestack

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DestinationNat struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// DestinationNatBackendConfig: optional
	BackendConfig *DestinationNatBackendConfig `hcl:"backend_config,block"`
	// DestinationNatFrontendConfig: optional
	FrontendConfig *DestinationNatFrontendConfig `hcl:"frontend_config,block"`
}

type DestinationNatBackendConfig struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// PublicIpAddress: string, required
	PublicIpAddress terra.StringValue `hcl:"public_ip_address,attr" validate:"required"`
}

type DestinationNatFrontendConfig struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
}

type DnsSettings struct {
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// UseAzureDns: bool, optional
	UseAzureDns terra.BoolValue `hcl:"use_azure_dns,attr"`
}

type NetworkProfile struct {
	// EgressNatIpAddressIds: list of string, optional
	EgressNatIpAddressIds terra.ListValue[terra.StringValue] `hcl:"egress_nat_ip_address_ids,attr"`
	// NetworkVirtualApplianceId: string, required
	NetworkVirtualApplianceId terra.StringValue `hcl:"network_virtual_appliance_id,attr" validate:"required"`
	// PublicIpAddressIds: list of string, required
	PublicIpAddressIds terra.ListValue[terra.StringValue] `hcl:"public_ip_address_ids,attr" validate:"required"`
	// TrustedAddressRanges: list of string, optional
	TrustedAddressRanges terra.ListValue[terra.StringValue] `hcl:"trusted_address_ranges,attr"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DestinationNatAttributes struct {
	ref terra.Reference
}

func (dn DestinationNatAttributes) InternalRef() (terra.Reference, error) {
	return dn.ref, nil
}

func (dn DestinationNatAttributes) InternalWithRef(ref terra.Reference) DestinationNatAttributes {
	return DestinationNatAttributes{ref: ref}
}

func (dn DestinationNatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dn.ref.InternalTokens()
}

func (dn DestinationNatAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("name"))
}

func (dn DestinationNatAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("protocol"))
}

func (dn DestinationNatAttributes) BackendConfig() terra.ListValue[DestinationNatBackendConfigAttributes] {
	return terra.ReferenceAsList[DestinationNatBackendConfigAttributes](dn.ref.Append("backend_config"))
}

func (dn DestinationNatAttributes) FrontendConfig() terra.ListValue[DestinationNatFrontendConfigAttributes] {
	return terra.ReferenceAsList[DestinationNatFrontendConfigAttributes](dn.ref.Append("frontend_config"))
}

type DestinationNatBackendConfigAttributes struct {
	ref terra.Reference
}

func (bc DestinationNatBackendConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc DestinationNatBackendConfigAttributes) InternalWithRef(ref terra.Reference) DestinationNatBackendConfigAttributes {
	return DestinationNatBackendConfigAttributes{ref: ref}
}

func (bc DestinationNatBackendConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc DestinationNatBackendConfigAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(bc.ref.Append("port"))
}

func (bc DestinationNatBackendConfigAttributes) PublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("public_ip_address"))
}

type DestinationNatFrontendConfigAttributes struct {
	ref terra.Reference
}

func (fc DestinationNatFrontendConfigAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc DestinationNatFrontendConfigAttributes) InternalWithRef(ref terra.Reference) DestinationNatFrontendConfigAttributes {
	return DestinationNatFrontendConfigAttributes{ref: ref}
}

func (fc DestinationNatFrontendConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc DestinationNatFrontendConfigAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(fc.ref.Append("port"))
}

func (fc DestinationNatFrontendConfigAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("public_ip_address_id"))
}

type DnsSettingsAttributes struct {
	ref terra.Reference
}

func (ds DnsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DnsSettingsAttributes) InternalWithRef(ref terra.Reference) DnsSettingsAttributes {
	return DnsSettingsAttributes{ref: ref}
}

func (ds DnsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DnsSettingsAttributes) AzureDnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("azure_dns_servers"))
}

func (ds DnsSettingsAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("dns_servers"))
}

func (ds DnsSettingsAttributes) UseAzureDns() terra.BoolValue {
	return terra.ReferenceAsBool(ds.ref.Append("use_azure_dns"))
}

type NetworkProfileAttributes struct {
	ref terra.Reference
}

func (np NetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkProfileAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAttributes {
	return NetworkProfileAttributes{ref: ref}
}

func (np NetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkProfileAttributes) EgressNatIpAddressIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("egress_nat_ip_address_ids"))
}

func (np NetworkProfileAttributes) EgressNatIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("egress_nat_ip_addresses"))
}

func (np NetworkProfileAttributes) IpOfTrustForUserDefinedRoutes() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("ip_of_trust_for_user_defined_routes"))
}

func (np NetworkProfileAttributes) NetworkVirtualApplianceId() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_virtual_appliance_id"))
}

func (np NetworkProfileAttributes) PublicIpAddressIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("public_ip_address_ids"))
}

func (np NetworkProfileAttributes) PublicIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("public_ip_addresses"))
}

func (np NetworkProfileAttributes) TrustedAddressRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("trusted_address_ranges"))
}

func (np NetworkProfileAttributes) TrustedSubnetId() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("trusted_subnet_id"))
}

func (np NetworkProfileAttributes) UntrustedSubnetId() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("untrusted_subnet_id"))
}

func (np NetworkProfileAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("virtual_hub_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DestinationNatState struct {
	Name           string                              `json:"name"`
	Protocol       string                              `json:"protocol"`
	BackendConfig  []DestinationNatBackendConfigState  `json:"backend_config"`
	FrontendConfig []DestinationNatFrontendConfigState `json:"frontend_config"`
}

type DestinationNatBackendConfigState struct {
	Port            float64 `json:"port"`
	PublicIpAddress string  `json:"public_ip_address"`
}

type DestinationNatFrontendConfigState struct {
	Port              float64 `json:"port"`
	PublicIpAddressId string  `json:"public_ip_address_id"`
}

type DnsSettingsState struct {
	AzureDnsServers []string `json:"azure_dns_servers"`
	DnsServers      []string `json:"dns_servers"`
	UseAzureDns     bool     `json:"use_azure_dns"`
}

type NetworkProfileState struct {
	EgressNatIpAddressIds         []string `json:"egress_nat_ip_address_ids"`
	EgressNatIpAddresses          []string `json:"egress_nat_ip_addresses"`
	IpOfTrustForUserDefinedRoutes string   `json:"ip_of_trust_for_user_defined_routes"`
	NetworkVirtualApplianceId     string   `json:"network_virtual_appliance_id"`
	PublicIpAddressIds            []string `json:"public_ip_address_ids"`
	PublicIpAddresses             []string `json:"public_ip_addresses"`
	TrustedAddressRanges          []string `json:"trusted_address_ranges"`
	TrustedSubnetId               string   `json:"trusted_subnet_id"`
	UntrustedSubnetId             string   `json:"untrusted_subnet_id"`
	VirtualHubId                  string   `json:"virtual_hub_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
