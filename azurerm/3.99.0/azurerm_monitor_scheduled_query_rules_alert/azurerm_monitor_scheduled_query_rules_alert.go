// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_scheduled_query_rules_alert

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_scheduled_query_rules_alert.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorScheduledQueryRulesAlertState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsqra *Resource) Type() string {
	return "azurerm_monitor_scheduled_query_rules_alert"
}

// LocalName returns the local name for [Resource].
func (amsqra *Resource) LocalName() string {
	return amsqra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsqra *Resource) Configuration() interface{} {
	return amsqra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsqra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsqra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsqra *Resource) Dependencies() terra.Dependencies {
	return amsqra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsqra *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsqra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsqra *Resource) Attributes() azurermMonitorScheduledQueryRulesAlertAttributes {
	return azurermMonitorScheduledQueryRulesAlertAttributes{ref: terra.ReferenceResource(amsqra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsqra *Resource) ImportState(state io.Reader) error {
	amsqra.state = &azurermMonitorScheduledQueryRulesAlertState{}
	if err := json.NewDecoder(state).Decode(amsqra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsqra.Type(), amsqra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsqra *Resource) State() (*azurermMonitorScheduledQueryRulesAlertState, bool) {
	return amsqra.state, amsqra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsqra *Resource) StateMust() *azurermMonitorScheduledQueryRulesAlertState {
	if amsqra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsqra.Type(), amsqra.LocalName()))
	}
	return amsqra.state
}

// Args contains the configurations for azurerm_monitor_scheduled_query_rules_alert.
type Args struct {
	// AuthorizedResourceIds: set of string, optional
	AuthorizedResourceIds terra.SetValue[terra.StringValue] `hcl:"authorized_resource_ids,attr"`
	// AutoMitigationEnabled: bool, optional
	AutoMitigationEnabled terra.BoolValue `hcl:"auto_mitigation_enabled,attr"`
	// DataSourceId: string, required
	DataSourceId terra.StringValue `hcl:"data_source_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: number, required
	Frequency terra.NumberValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// QueryType: string, optional
	QueryType terra.StringValue `hcl:"query_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Severity: number, optional
	Severity terra.NumberValue `hcl:"severity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Throttling: number, optional
	Throttling terra.NumberValue `hcl:"throttling,attr"`
	// TimeWindow: number, required
	TimeWindow terra.NumberValue `hcl:"time_window,attr" validate:"required"`
	// Action: required
	Action *Action `hcl:"action,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Trigger: required
	Trigger *Trigger `hcl:"trigger,block" validate:"required"`
}

type azurermMonitorScheduledQueryRulesAlertAttributes struct {
	ref terra.Reference
}

// AuthorizedResourceIds returns a reference to field authorized_resource_ids of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) AuthorizedResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amsqra.ref.Append("authorized_resource_ids"))
}

// AutoMitigationEnabled returns a reference to field auto_mitigation_enabled of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) AutoMitigationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amsqra.ref.Append("auto_mitigation_enabled"))
}

// DataSourceId returns a reference to field data_source_id of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) DataSourceId() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("data_source_id"))
}

// Description returns a reference to field description of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("description"))
}

// Enabled returns a reference to field enabled of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amsqra.ref.Append("enabled"))
}

// Frequency returns a reference to field frequency of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Frequency() terra.NumberValue {
	return terra.ReferenceAsNumber(amsqra.ref.Append("frequency"))
}

// Id returns a reference to field id of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("name"))
}

// Query returns a reference to field query of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("query"))
}

// QueryType returns a reference to field query_type of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) QueryType() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("query_type"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amsqra.ref.Append("resource_group_name"))
}

// Severity returns a reference to field severity of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Severity() terra.NumberValue {
	return terra.ReferenceAsNumber(amsqra.ref.Append("severity"))
}

// Tags returns a reference to field tags of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amsqra.ref.Append("tags"))
}

// Throttling returns a reference to field throttling of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Throttling() terra.NumberValue {
	return terra.ReferenceAsNumber(amsqra.ref.Append("throttling"))
}

// TimeWindow returns a reference to field time_window of azurerm_monitor_scheduled_query_rules_alert.
func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) TimeWindow() terra.NumberValue {
	return terra.ReferenceAsNumber(amsqra.ref.Append("time_window"))
}

func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](amsqra.ref.Append("action"))
}

func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsqra.ref.Append("timeouts"))
}

func (amsqra azurermMonitorScheduledQueryRulesAlertAttributes) Trigger() terra.ListValue[TriggerAttributes] {
	return terra.ReferenceAsList[TriggerAttributes](amsqra.ref.Append("trigger"))
}

type azurermMonitorScheduledQueryRulesAlertState struct {
	AuthorizedResourceIds []string          `json:"authorized_resource_ids"`
	AutoMitigationEnabled bool              `json:"auto_mitigation_enabled"`
	DataSourceId          string            `json:"data_source_id"`
	Description           string            `json:"description"`
	Enabled               bool              `json:"enabled"`
	Frequency             float64           `json:"frequency"`
	Id                    string            `json:"id"`
	Location              string            `json:"location"`
	Name                  string            `json:"name"`
	Query                 string            `json:"query"`
	QueryType             string            `json:"query_type"`
	ResourceGroupName     string            `json:"resource_group_name"`
	Severity              float64           `json:"severity"`
	Tags                  map[string]string `json:"tags"`
	Throttling            float64           `json:"throttling"`
	TimeWindow            float64           `json:"time_window"`
	Action                []ActionState     `json:"action"`
	Timeouts              *TimeoutsState    `json:"timeouts"`
	Trigger               []TriggerState    `json:"trigger"`
}
