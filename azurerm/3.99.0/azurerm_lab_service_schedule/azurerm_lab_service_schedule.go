// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lab_service_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lab_service_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLabServiceScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alss *Resource) Type() string {
	return "azurerm_lab_service_schedule"
}

// LocalName returns the local name for [Resource].
func (alss *Resource) LocalName() string {
	return alss.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alss *Resource) Configuration() interface{} {
	return alss.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alss *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alss)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alss *Resource) Dependencies() terra.Dependencies {
	return alss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alss *Resource) LifecycleManagement() *terra.Lifecycle {
	return alss.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alss *Resource) Attributes() azurermLabServiceScheduleAttributes {
	return azurermLabServiceScheduleAttributes{ref: terra.ReferenceResource(alss)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alss *Resource) ImportState(state io.Reader) error {
	alss.state = &azurermLabServiceScheduleState{}
	if err := json.NewDecoder(state).Decode(alss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alss.Type(), alss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alss *Resource) State() (*azurermLabServiceScheduleState, bool) {
	return alss.state, alss.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alss *Resource) StateMust() *azurermLabServiceScheduleState {
	if alss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alss.Type(), alss.LocalName()))
	}
	return alss.state
}

// Args contains the configurations for azurerm_lab_service_schedule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabId: string, required
	LabId terra.StringValue `hcl:"lab_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// StopTime: string, required
	StopTime terra.StringValue `hcl:"stop_time,attr" validate:"required"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// Recurrence: optional
	Recurrence *Recurrence `hcl:"recurrence,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLabServiceScheduleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("id"))
}

// LabId returns a reference to field lab_id of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) LabId() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("lab_id"))
}

// Name returns a reference to field name of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("name"))
}

// Notes returns a reference to field notes of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("notes"))
}

// StartTime returns a reference to field start_time of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("start_time"))
}

// StopTime returns a reference to field stop_time of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) StopTime() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("stop_time"))
}

// TimeZone returns a reference to field time_zone of azurerm_lab_service_schedule.
func (alss azurermLabServiceScheduleAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(alss.ref.Append("time_zone"))
}

func (alss azurermLabServiceScheduleAttributes) Recurrence() terra.ListValue[RecurrenceAttributes] {
	return terra.ReferenceAsList[RecurrenceAttributes](alss.ref.Append("recurrence"))
}

func (alss azurermLabServiceScheduleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alss.ref.Append("timeouts"))
}

type azurermLabServiceScheduleState struct {
	Id         string            `json:"id"`
	LabId      string            `json:"lab_id"`
	Name       string            `json:"name"`
	Notes      string            `json:"notes"`
	StartTime  string            `json:"start_time"`
	StopTime   string            `json:"stop_time"`
	TimeZone   string            `json:"time_zone"`
	Recurrence []RecurrenceState `json:"recurrence"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
