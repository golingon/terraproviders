// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_postgresql_virtual_network_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_postgresql_virtual_network_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPostgresqlVirtualNetworkRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apvnr *Resource) Type() string {
	return "azurerm_postgresql_virtual_network_rule"
}

// LocalName returns the local name for [Resource].
func (apvnr *Resource) LocalName() string {
	return apvnr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apvnr *Resource) Configuration() interface{} {
	return apvnr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apvnr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apvnr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apvnr *Resource) Dependencies() terra.Dependencies {
	return apvnr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apvnr *Resource) LifecycleManagement() *terra.Lifecycle {
	return apvnr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apvnr *Resource) Attributes() azurermPostgresqlVirtualNetworkRuleAttributes {
	return azurermPostgresqlVirtualNetworkRuleAttributes{ref: terra.ReferenceResource(apvnr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apvnr *Resource) ImportState(state io.Reader) error {
	apvnr.state = &azurermPostgresqlVirtualNetworkRuleState{}
	if err := json.NewDecoder(state).Decode(apvnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apvnr.Type(), apvnr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apvnr *Resource) State() (*azurermPostgresqlVirtualNetworkRuleState, bool) {
	return apvnr.state, apvnr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apvnr *Resource) StateMust() *azurermPostgresqlVirtualNetworkRuleState {
	if apvnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apvnr.Type(), apvnr.LocalName()))
	}
	return apvnr.state
}

// Args contains the configurations for azurerm_postgresql_virtual_network_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreMissingVnetServiceEndpoint: bool, optional
	IgnoreMissingVnetServiceEndpoint terra.BoolValue `hcl:"ignore_missing_vnet_service_endpoint,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPostgresqlVirtualNetworkRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apvnr.ref.Append("id"))
}

// IgnoreMissingVnetServiceEndpoint returns a reference to field ignore_missing_vnet_service_endpoint of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) IgnoreMissingVnetServiceEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(apvnr.ref.Append("ignore_missing_vnet_service_endpoint"))
}

// Name returns a reference to field name of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apvnr.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(apvnr.ref.Append("resource_group_name"))
}

// ServerName returns a reference to field server_name of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(apvnr.ref.Append("server_name"))
}

// SubnetId returns a reference to field subnet_id of azurerm_postgresql_virtual_network_rule.
func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(apvnr.ref.Append("subnet_id"))
}

func (apvnr azurermPostgresqlVirtualNetworkRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apvnr.ref.Append("timeouts"))
}

type azurermPostgresqlVirtualNetworkRuleState struct {
	Id                               string         `json:"id"`
	IgnoreMissingVnetServiceEndpoint bool           `json:"ignore_missing_vnet_service_endpoint"`
	Name                             string         `json:"name"`
	ResourceGroupName                string         `json:"resource_group_name"`
	ServerName                       string         `json:"server_name"`
	SubnetId                         string         `json:"subnet_id"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
