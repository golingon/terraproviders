// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_private_link_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_private_link_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPrivateLinkServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apls *Resource) Type() string {
	return "azurerm_private_link_service"
}

// LocalName returns the local name for [Resource].
func (apls *Resource) LocalName() string {
	return apls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apls *Resource) Configuration() interface{} {
	return apls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apls *Resource) Dependencies() terra.Dependencies {
	return apls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apls *Resource) LifecycleManagement() *terra.Lifecycle {
	return apls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apls *Resource) Attributes() azurermPrivateLinkServiceAttributes {
	return azurermPrivateLinkServiceAttributes{ref: terra.ReferenceResource(apls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apls *Resource) ImportState(state io.Reader) error {
	apls.state = &azurermPrivateLinkServiceState{}
	if err := json.NewDecoder(state).Decode(apls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apls.Type(), apls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apls *Resource) State() (*azurermPrivateLinkServiceState, bool) {
	return apls.state, apls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apls *Resource) StateMust() *azurermPrivateLinkServiceState {
	if apls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apls.Type(), apls.LocalName()))
	}
	return apls.state
}

// Args contains the configurations for azurerm_private_link_service.
type Args struct {
	// AutoApprovalSubscriptionIds: set of string, optional
	AutoApprovalSubscriptionIds terra.SetValue[terra.StringValue] `hcl:"auto_approval_subscription_ids,attr"`
	// EnableProxyProtocol: bool, optional
	EnableProxyProtocol terra.BoolValue `hcl:"enable_proxy_protocol,attr"`
	// Fqdns: list of string, optional
	Fqdns terra.ListValue[terra.StringValue] `hcl:"fqdns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerFrontendIpConfigurationIds: set of string, required
	LoadBalancerFrontendIpConfigurationIds terra.SetValue[terra.StringValue] `hcl:"load_balancer_frontend_ip_configuration_ids,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VisibilitySubscriptionIds: set of string, optional
	VisibilitySubscriptionIds terra.SetValue[terra.StringValue] `hcl:"visibility_subscription_ids,attr"`
	// NatIpConfiguration: min=1,max=8
	NatIpConfiguration []NatIpConfiguration `hcl:"nat_ip_configuration,block" validate:"min=1,max=8"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPrivateLinkServiceAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(apls.ref.Append("alias"))
}

// AutoApprovalSubscriptionIds returns a reference to field auto_approval_subscription_ids of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) AutoApprovalSubscriptionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](apls.ref.Append("auto_approval_subscription_ids"))
}

// EnableProxyProtocol returns a reference to field enable_proxy_protocol of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) EnableProxyProtocol() terra.BoolValue {
	return terra.ReferenceAsBool(apls.ref.Append("enable_proxy_protocol"))
}

// Fqdns returns a reference to field fqdns of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](apls.ref.Append("fqdns"))
}

// Id returns a reference to field id of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apls.ref.Append("id"))
}

// LoadBalancerFrontendIpConfigurationIds returns a reference to field load_balancer_frontend_ip_configuration_ids of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) LoadBalancerFrontendIpConfigurationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](apls.ref.Append("load_balancer_frontend_ip_configuration_ids"))
}

// Location returns a reference to field location of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(apls.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apls.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(apls.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apls.ref.Append("tags"))
}

// VisibilitySubscriptionIds returns a reference to field visibility_subscription_ids of azurerm_private_link_service.
func (apls azurermPrivateLinkServiceAttributes) VisibilitySubscriptionIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](apls.ref.Append("visibility_subscription_ids"))
}

func (apls azurermPrivateLinkServiceAttributes) NatIpConfiguration() terra.ListValue[NatIpConfigurationAttributes] {
	return terra.ReferenceAsList[NatIpConfigurationAttributes](apls.ref.Append("nat_ip_configuration"))
}

func (apls azurermPrivateLinkServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apls.ref.Append("timeouts"))
}

type azurermPrivateLinkServiceState struct {
	Alias                                  string                    `json:"alias"`
	AutoApprovalSubscriptionIds            []string                  `json:"auto_approval_subscription_ids"`
	EnableProxyProtocol                    bool                      `json:"enable_proxy_protocol"`
	Fqdns                                  []string                  `json:"fqdns"`
	Id                                     string                    `json:"id"`
	LoadBalancerFrontendIpConfigurationIds []string                  `json:"load_balancer_frontend_ip_configuration_ids"`
	Location                               string                    `json:"location"`
	Name                                   string                    `json:"name"`
	ResourceGroupName                      string                    `json:"resource_group_name"`
	Tags                                   map[string]string         `json:"tags"`
	VisibilitySubscriptionIds              []string                  `json:"visibility_subscription_ids"`
	NatIpConfiguration                     []NatIpConfigurationState `json:"nat_ip_configuration"`
	Timeouts                               *TimeoutsState            `json:"timeouts"`
}
