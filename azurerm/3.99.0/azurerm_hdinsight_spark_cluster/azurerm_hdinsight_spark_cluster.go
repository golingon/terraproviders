// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hdinsight_spark_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_hdinsight_spark_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHdinsightSparkClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahsc *Resource) Type() string {
	return "azurerm_hdinsight_spark_cluster"
}

// LocalName returns the local name for [Resource].
func (ahsc *Resource) LocalName() string {
	return ahsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahsc *Resource) Configuration() interface{} {
	return ahsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahsc *Resource) Dependencies() terra.Dependencies {
	return ahsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahsc *Resource) Attributes() azurermHdinsightSparkClusterAttributes {
	return azurermHdinsightSparkClusterAttributes{ref: terra.ReferenceResource(ahsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahsc *Resource) ImportState(state io.Reader) error {
	ahsc.state = &azurermHdinsightSparkClusterState{}
	if err := json.NewDecoder(state).Decode(ahsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahsc.Type(), ahsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahsc *Resource) State() (*azurermHdinsightSparkClusterState, bool) {
	return ahsc.state, ahsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahsc *Resource) StateMust() *azurermHdinsightSparkClusterState {
	if ahsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahsc.Type(), ahsc.LocalName()))
	}
	return ahsc.state
}

// Args contains the configurations for azurerm_hdinsight_spark_cluster.
type Args struct {
	// ClusterVersion: string, required
	ClusterVersion terra.StringValue `hcl:"cluster_version,attr" validate:"required"`
	// EncryptionInTransitEnabled: bool, optional
	EncryptionInTransitEnabled terra.BoolValue `hcl:"encryption_in_transit_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Tier: string, required
	Tier terra.StringValue `hcl:"tier,attr" validate:"required"`
	// TlsMinVersion: string, optional
	TlsMinVersion terra.StringValue `hcl:"tls_min_version,attr"`
	// ComponentVersion: required
	ComponentVersion *ComponentVersion `hcl:"component_version,block" validate:"required"`
	// ComputeIsolation: optional
	ComputeIsolation *ComputeIsolation `hcl:"compute_isolation,block"`
	// DiskEncryption: min=0
	DiskEncryption []DiskEncryption `hcl:"disk_encryption,block" validate:"min=0"`
	// Extension: optional
	Extension *Extension `hcl:"extension,block"`
	// Gateway: required
	Gateway *Gateway `hcl:"gateway,block" validate:"required"`
	// Metastores: optional
	Metastores *Metastores `hcl:"metastores,block"`
	// Monitor: optional
	Monitor *Monitor `hcl:"monitor,block"`
	// Network: optional
	Network *Network `hcl:"network,block"`
	// Roles: required
	Roles *Roles `hcl:"roles,block" validate:"required"`
	// SecurityProfile: optional
	SecurityProfile *SecurityProfile `hcl:"security_profile,block"`
	// StorageAccount: min=0
	StorageAccount []StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// StorageAccountGen2: optional
	StorageAccountGen2 *StorageAccountGen2 `hcl:"storage_account_gen2,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHdinsightSparkClusterAttributes struct {
	ref terra.Reference
}

// ClusterVersion returns a reference to field cluster_version of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) ClusterVersion() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("cluster_version"))
}

// EncryptionInTransitEnabled returns a reference to field encryption_in_transit_enabled of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) EncryptionInTransitEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ahsc.ref.Append("encryption_in_transit_enabled"))
}

// HttpsEndpoint returns a reference to field https_endpoint of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) HttpsEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("https_endpoint"))
}

// Id returns a reference to field id of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("resource_group_name"))
}

// SshEndpoint returns a reference to field ssh_endpoint of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) SshEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("ssh_endpoint"))
}

// Tags returns a reference to field tags of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ahsc.ref.Append("tags"))
}

// Tier returns a reference to field tier of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("tier"))
}

// TlsMinVersion returns a reference to field tls_min_version of azurerm_hdinsight_spark_cluster.
func (ahsc azurermHdinsightSparkClusterAttributes) TlsMinVersion() terra.StringValue {
	return terra.ReferenceAsString(ahsc.ref.Append("tls_min_version"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) ComponentVersion() terra.ListValue[ComponentVersionAttributes] {
	return terra.ReferenceAsList[ComponentVersionAttributes](ahsc.ref.Append("component_version"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) ComputeIsolation() terra.ListValue[ComputeIsolationAttributes] {
	return terra.ReferenceAsList[ComputeIsolationAttributes](ahsc.ref.Append("compute_isolation"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) DiskEncryption() terra.ListValue[DiskEncryptionAttributes] {
	return terra.ReferenceAsList[DiskEncryptionAttributes](ahsc.ref.Append("disk_encryption"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Extension() terra.ListValue[ExtensionAttributes] {
	return terra.ReferenceAsList[ExtensionAttributes](ahsc.ref.Append("extension"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Gateway() terra.ListValue[GatewayAttributes] {
	return terra.ReferenceAsList[GatewayAttributes](ahsc.ref.Append("gateway"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Metastores() terra.ListValue[MetastoresAttributes] {
	return terra.ReferenceAsList[MetastoresAttributes](ahsc.ref.Append("metastores"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Monitor() terra.ListValue[MonitorAttributes] {
	return terra.ReferenceAsList[MonitorAttributes](ahsc.ref.Append("monitor"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Network() terra.ListValue[NetworkAttributes] {
	return terra.ReferenceAsList[NetworkAttributes](ahsc.ref.Append("network"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Roles() terra.ListValue[RolesAttributes] {
	return terra.ReferenceAsList[RolesAttributes](ahsc.ref.Append("roles"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) SecurityProfile() terra.ListValue[SecurityProfileAttributes] {
	return terra.ReferenceAsList[SecurityProfileAttributes](ahsc.ref.Append("security_profile"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) StorageAccount() terra.ListValue[StorageAccountAttributes] {
	return terra.ReferenceAsList[StorageAccountAttributes](ahsc.ref.Append("storage_account"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) StorageAccountGen2() terra.ListValue[StorageAccountGen2Attributes] {
	return terra.ReferenceAsList[StorageAccountGen2Attributes](ahsc.ref.Append("storage_account_gen2"))
}

func (ahsc azurermHdinsightSparkClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahsc.ref.Append("timeouts"))
}

type azurermHdinsightSparkClusterState struct {
	ClusterVersion             string                    `json:"cluster_version"`
	EncryptionInTransitEnabled bool                      `json:"encryption_in_transit_enabled"`
	HttpsEndpoint              string                    `json:"https_endpoint"`
	Id                         string                    `json:"id"`
	Location                   string                    `json:"location"`
	Name                       string                    `json:"name"`
	ResourceGroupName          string                    `json:"resource_group_name"`
	SshEndpoint                string                    `json:"ssh_endpoint"`
	Tags                       map[string]string         `json:"tags"`
	Tier                       string                    `json:"tier"`
	TlsMinVersion              string                    `json:"tls_min_version"`
	ComponentVersion           []ComponentVersionState   `json:"component_version"`
	ComputeIsolation           []ComputeIsolationState   `json:"compute_isolation"`
	DiskEncryption             []DiskEncryptionState     `json:"disk_encryption"`
	Extension                  []ExtensionState          `json:"extension"`
	Gateway                    []GatewayState            `json:"gateway"`
	Metastores                 []MetastoresState         `json:"metastores"`
	Monitor                    []MonitorState            `json:"monitor"`
	Network                    []NetworkState            `json:"network"`
	Roles                      []RolesState              `json:"roles"`
	SecurityProfile            []SecurityProfileState    `json:"security_profile"`
	StorageAccount             []StorageAccountState     `json:"storage_account"`
	StorageAccountGen2         []StorageAccountGen2State `json:"storage_account_gen2"`
	Timeouts                   *TimeoutsState            `json:"timeouts"`
}
