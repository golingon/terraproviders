// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logz_tag_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_logz_tag_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogzTagRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (altr *Resource) Type() string {
	return "azurerm_logz_tag_rule"
}

// LocalName returns the local name for [Resource].
func (altr *Resource) LocalName() string {
	return altr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (altr *Resource) Configuration() interface{} {
	return altr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (altr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(altr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (altr *Resource) Dependencies() terra.Dependencies {
	return altr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (altr *Resource) LifecycleManagement() *terra.Lifecycle {
	return altr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (altr *Resource) Attributes() azurermLogzTagRuleAttributes {
	return azurermLogzTagRuleAttributes{ref: terra.ReferenceResource(altr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (altr *Resource) ImportState(state io.Reader) error {
	altr.state = &azurermLogzTagRuleState{}
	if err := json.NewDecoder(state).Decode(altr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", altr.Type(), altr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (altr *Resource) State() (*azurermLogzTagRuleState, bool) {
	return altr.state, altr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (altr *Resource) StateMust() *azurermLogzTagRuleState {
	if altr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", altr.Type(), altr.LocalName()))
	}
	return altr.state
}

// Args contains the configurations for azurerm_logz_tag_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogzMonitorId: string, required
	LogzMonitorId terra.StringValue `hcl:"logz_monitor_id,attr" validate:"required"`
	// SendAadLogs: bool, optional
	SendAadLogs terra.BoolValue `hcl:"send_aad_logs,attr"`
	// SendActivityLogs: bool, optional
	SendActivityLogs terra.BoolValue `hcl:"send_activity_logs,attr"`
	// SendSubscriptionLogs: bool, optional
	SendSubscriptionLogs terra.BoolValue `hcl:"send_subscription_logs,attr"`
	// TagFilter: min=0,max=10
	TagFilter []TagFilter `hcl:"tag_filter,block" validate:"min=0,max=10"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogzTagRuleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_logz_tag_rule.
func (altr azurermLogzTagRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(altr.ref.Append("id"))
}

// LogzMonitorId returns a reference to field logz_monitor_id of azurerm_logz_tag_rule.
func (altr azurermLogzTagRuleAttributes) LogzMonitorId() terra.StringValue {
	return terra.ReferenceAsString(altr.ref.Append("logz_monitor_id"))
}

// SendAadLogs returns a reference to field send_aad_logs of azurerm_logz_tag_rule.
func (altr azurermLogzTagRuleAttributes) SendAadLogs() terra.BoolValue {
	return terra.ReferenceAsBool(altr.ref.Append("send_aad_logs"))
}

// SendActivityLogs returns a reference to field send_activity_logs of azurerm_logz_tag_rule.
func (altr azurermLogzTagRuleAttributes) SendActivityLogs() terra.BoolValue {
	return terra.ReferenceAsBool(altr.ref.Append("send_activity_logs"))
}

// SendSubscriptionLogs returns a reference to field send_subscription_logs of azurerm_logz_tag_rule.
func (altr azurermLogzTagRuleAttributes) SendSubscriptionLogs() terra.BoolValue {
	return terra.ReferenceAsBool(altr.ref.Append("send_subscription_logs"))
}

func (altr azurermLogzTagRuleAttributes) TagFilter() terra.ListValue[TagFilterAttributes] {
	return terra.ReferenceAsList[TagFilterAttributes](altr.ref.Append("tag_filter"))
}

func (altr azurermLogzTagRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](altr.ref.Append("timeouts"))
}

type azurermLogzTagRuleState struct {
	Id                   string           `json:"id"`
	LogzMonitorId        string           `json:"logz_monitor_id"`
	SendAadLogs          bool             `json:"send_aad_logs"`
	SendActivityLogs     bool             `json:"send_activity_logs"`
	SendSubscriptionLogs bool             `json:"send_subscription_logs"`
	TagFilter            []TagFilterState `json:"tag_filter"`
	Timeouts             *TimeoutsState   `json:"timeouts"`
}
