// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_policy_vm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_backup_policy_vm.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBackupPolicyVmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abpv *Resource) Type() string {
	return "azurerm_backup_policy_vm"
}

// LocalName returns the local name for [Resource].
func (abpv *Resource) LocalName() string {
	return abpv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abpv *Resource) Configuration() interface{} {
	return abpv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abpv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abpv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abpv *Resource) Dependencies() terra.Dependencies {
	return abpv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abpv *Resource) LifecycleManagement() *terra.Lifecycle {
	return abpv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abpv *Resource) Attributes() azurermBackupPolicyVmAttributes {
	return azurermBackupPolicyVmAttributes{ref: terra.ReferenceResource(abpv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abpv *Resource) ImportState(state io.Reader) error {
	abpv.state = &azurermBackupPolicyVmState{}
	if err := json.NewDecoder(state).Decode(abpv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abpv.Type(), abpv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abpv *Resource) State() (*azurermBackupPolicyVmState, bool) {
	return abpv.state, abpv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abpv *Resource) StateMust() *azurermBackupPolicyVmState {
	if abpv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abpv.Type(), abpv.LocalName()))
	}
	return abpv.state
}

// Args contains the configurations for azurerm_backup_policy_vm.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstantRestoreRetentionDays: number, optional
	InstantRestoreRetentionDays terra.NumberValue `hcl:"instant_restore_retention_days,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// Backup: required
	Backup *Backup `hcl:"backup,block" validate:"required"`
	// InstantRestoreResourceGroup: optional
	InstantRestoreResourceGroup *InstantRestoreResourceGroup `hcl:"instant_restore_resource_group,block"`
	// RetentionDaily: optional
	RetentionDaily *RetentionDaily `hcl:"retention_daily,block"`
	// RetentionMonthly: optional
	RetentionMonthly *RetentionMonthly `hcl:"retention_monthly,block"`
	// RetentionWeekly: optional
	RetentionWeekly *RetentionWeekly `hcl:"retention_weekly,block"`
	// RetentionYearly: optional
	RetentionYearly *RetentionYearly `hcl:"retention_yearly,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBackupPolicyVmAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("id"))
}

// InstantRestoreRetentionDays returns a reference to field instant_restore_retention_days of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) InstantRestoreRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(abpv.ref.Append("instant_restore_retention_days"))
}

// Name returns a reference to field name of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("name"))
}

// PolicyType returns a reference to field policy_type of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("policy_type"))
}

// RecoveryVaultName returns a reference to field recovery_vault_name of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("recovery_vault_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("resource_group_name"))
}

// Timezone returns a reference to field timezone of azurerm_backup_policy_vm.
func (abpv azurermBackupPolicyVmAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("timezone"))
}

func (abpv azurermBackupPolicyVmAttributes) Backup() terra.ListValue[BackupAttributes] {
	return terra.ReferenceAsList[BackupAttributes](abpv.ref.Append("backup"))
}

func (abpv azurermBackupPolicyVmAttributes) InstantRestoreResourceGroup() terra.ListValue[InstantRestoreResourceGroupAttributes] {
	return terra.ReferenceAsList[InstantRestoreResourceGroupAttributes](abpv.ref.Append("instant_restore_resource_group"))
}

func (abpv azurermBackupPolicyVmAttributes) RetentionDaily() terra.ListValue[RetentionDailyAttributes] {
	return terra.ReferenceAsList[RetentionDailyAttributes](abpv.ref.Append("retention_daily"))
}

func (abpv azurermBackupPolicyVmAttributes) RetentionMonthly() terra.ListValue[RetentionMonthlyAttributes] {
	return terra.ReferenceAsList[RetentionMonthlyAttributes](abpv.ref.Append("retention_monthly"))
}

func (abpv azurermBackupPolicyVmAttributes) RetentionWeekly() terra.ListValue[RetentionWeeklyAttributes] {
	return terra.ReferenceAsList[RetentionWeeklyAttributes](abpv.ref.Append("retention_weekly"))
}

func (abpv azurermBackupPolicyVmAttributes) RetentionYearly() terra.ListValue[RetentionYearlyAttributes] {
	return terra.ReferenceAsList[RetentionYearlyAttributes](abpv.ref.Append("retention_yearly"))
}

func (abpv azurermBackupPolicyVmAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abpv.ref.Append("timeouts"))
}

type azurermBackupPolicyVmState struct {
	Id                          string                             `json:"id"`
	InstantRestoreRetentionDays float64                            `json:"instant_restore_retention_days"`
	Name                        string                             `json:"name"`
	PolicyType                  string                             `json:"policy_type"`
	RecoveryVaultName           string                             `json:"recovery_vault_name"`
	ResourceGroupName           string                             `json:"resource_group_name"`
	Timezone                    string                             `json:"timezone"`
	Backup                      []BackupState                      `json:"backup"`
	InstantRestoreResourceGroup []InstantRestoreResourceGroupState `json:"instant_restore_resource_group"`
	RetentionDaily              []RetentionDailyState              `json:"retention_daily"`
	RetentionMonthly            []RetentionMonthlyState            `json:"retention_monthly"`
	RetentionWeekly             []RetentionWeeklyState             `json:"retention_weekly"`
	RetentionYearly             []RetentionYearlyState             `json:"retention_yearly"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
