// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_private_dns_resolver_forwarding_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_private_dns_resolver_forwarding_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPrivateDnsResolverForwardingRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apdrfr *Resource) Type() string {
	return "azurerm_private_dns_resolver_forwarding_rule"
}

// LocalName returns the local name for [Resource].
func (apdrfr *Resource) LocalName() string {
	return apdrfr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apdrfr *Resource) Configuration() interface{} {
	return apdrfr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apdrfr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apdrfr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apdrfr *Resource) Dependencies() terra.Dependencies {
	return apdrfr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apdrfr *Resource) LifecycleManagement() *terra.Lifecycle {
	return apdrfr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apdrfr *Resource) Attributes() azurermPrivateDnsResolverForwardingRuleAttributes {
	return azurermPrivateDnsResolverForwardingRuleAttributes{ref: terra.ReferenceResource(apdrfr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apdrfr *Resource) ImportState(state io.Reader) error {
	apdrfr.state = &azurermPrivateDnsResolverForwardingRuleState{}
	if err := json.NewDecoder(state).Decode(apdrfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apdrfr.Type(), apdrfr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apdrfr *Resource) State() (*azurermPrivateDnsResolverForwardingRuleState, bool) {
	return apdrfr.state, apdrfr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apdrfr *Resource) StateMust() *azurermPrivateDnsResolverForwardingRuleState {
	if apdrfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apdrfr.Type(), apdrfr.LocalName()))
	}
	return apdrfr.state
}

// Args contains the configurations for azurerm_private_dns_resolver_forwarding_rule.
type Args struct {
	// DnsForwardingRulesetId: string, required
	DnsForwardingRulesetId terra.StringValue `hcl:"dns_forwarding_ruleset_id,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetDnsServers: min=1
	TargetDnsServers []TargetDnsServers `hcl:"target_dns_servers,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPrivateDnsResolverForwardingRuleAttributes struct {
	ref terra.Reference
}

// DnsForwardingRulesetId returns a reference to field dns_forwarding_ruleset_id of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) DnsForwardingRulesetId() terra.StringValue {
	return terra.ReferenceAsString(apdrfr.ref.Append("dns_forwarding_ruleset_id"))
}

// DomainName returns a reference to field domain_name of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(apdrfr.ref.Append("domain_name"))
}

// Enabled returns a reference to field enabled of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(apdrfr.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apdrfr.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apdrfr.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_private_dns_resolver_forwarding_rule.
func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apdrfr.ref.Append("name"))
}

func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) TargetDnsServers() terra.ListValue[TargetDnsServersAttributes] {
	return terra.ReferenceAsList[TargetDnsServersAttributes](apdrfr.ref.Append("target_dns_servers"))
}

func (apdrfr azurermPrivateDnsResolverForwardingRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apdrfr.ref.Append("timeouts"))
}

type azurermPrivateDnsResolverForwardingRuleState struct {
	DnsForwardingRulesetId string                  `json:"dns_forwarding_ruleset_id"`
	DomainName             string                  `json:"domain_name"`
	Enabled                bool                    `json:"enabled"`
	Id                     string                  `json:"id"`
	Metadata               map[string]string       `json:"metadata"`
	Name                   string                  `json:"name"`
	TargetDnsServers       []TargetDnsServersState `json:"target_dns_servers"`
	Timeouts               *TimeoutsState          `json:"timeouts"`
}
