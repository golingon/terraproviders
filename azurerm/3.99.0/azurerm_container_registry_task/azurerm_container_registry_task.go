// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_registry_task

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_registry_task.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerRegistryTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrt *Resource) Type() string {
	return "azurerm_container_registry_task"
}

// LocalName returns the local name for [Resource].
func (acrt *Resource) LocalName() string {
	return acrt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrt *Resource) Configuration() interface{} {
	return acrt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrt *Resource) Dependencies() terra.Dependencies {
	return acrt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrt *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrt *Resource) Attributes() azurermContainerRegistryTaskAttributes {
	return azurermContainerRegistryTaskAttributes{ref: terra.ReferenceResource(acrt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrt *Resource) ImportState(state io.Reader) error {
	acrt.state = &azurermContainerRegistryTaskState{}
	if err := json.NewDecoder(state).Decode(acrt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrt.Type(), acrt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrt *Resource) State() (*azurermContainerRegistryTaskState, bool) {
	return acrt.state, acrt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrt *Resource) StateMust() *azurermContainerRegistryTaskState {
	if acrt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrt.Type(), acrt.LocalName()))
	}
	return acrt.state
}

// Args contains the configurations for azurerm_container_registry_task.
type Args struct {
	// AgentPoolName: string, optional
	AgentPoolName terra.StringValue `hcl:"agent_pool_name,attr"`
	// ContainerRegistryId: string, required
	ContainerRegistryId terra.StringValue `hcl:"container_registry_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsSystemTask: bool, optional
	IsSystemTask terra.BoolValue `hcl:"is_system_task,attr"`
	// LogTemplate: string, optional
	LogTemplate terra.StringValue `hcl:"log_template,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
	// AgentSetting: optional
	AgentSetting *AgentSetting `hcl:"agent_setting,block"`
	// BaseImageTrigger: optional
	BaseImageTrigger *BaseImageTrigger `hcl:"base_image_trigger,block"`
	// DockerStep: optional
	DockerStep *DockerStep `hcl:"docker_step,block"`
	// EncodedStep: optional
	EncodedStep *EncodedStep `hcl:"encoded_step,block"`
	// FileStep: optional
	FileStep *FileStep `hcl:"file_step,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Platform: optional
	Platform *Platform `hcl:"platform,block"`
	// RegistryCredential: optional
	RegistryCredential *RegistryCredential `hcl:"registry_credential,block"`
	// SourceTrigger: min=0
	SourceTrigger []SourceTrigger `hcl:"source_trigger,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TimerTrigger: min=0
	TimerTrigger []TimerTrigger `hcl:"timer_trigger,block" validate:"min=0"`
}

type azurermContainerRegistryTaskAttributes struct {
	ref terra.Reference
}

// AgentPoolName returns a reference to field agent_pool_name of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) AgentPoolName() terra.StringValue {
	return terra.ReferenceAsString(acrt.ref.Append("agent_pool_name"))
}

// ContainerRegistryId returns a reference to field container_registry_id of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) ContainerRegistryId() terra.StringValue {
	return terra.ReferenceAsString(acrt.ref.Append("container_registry_id"))
}

// Enabled returns a reference to field enabled of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(acrt.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrt.ref.Append("id"))
}

// IsSystemTask returns a reference to field is_system_task of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) IsSystemTask() terra.BoolValue {
	return terra.ReferenceAsBool(acrt.ref.Append("is_system_task"))
}

// LogTemplate returns a reference to field log_template of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) LogTemplate() terra.StringValue {
	return terra.ReferenceAsString(acrt.ref.Append("log_template"))
}

// Name returns a reference to field name of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrt.ref.Append("name"))
}

// Tags returns a reference to field tags of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acrt.ref.Append("tags"))
}

// TimeoutInSeconds returns a reference to field timeout_in_seconds of azurerm_container_registry_task.
func (acrt azurermContainerRegistryTaskAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(acrt.ref.Append("timeout_in_seconds"))
}

func (acrt azurermContainerRegistryTaskAttributes) AgentSetting() terra.ListValue[AgentSettingAttributes] {
	return terra.ReferenceAsList[AgentSettingAttributes](acrt.ref.Append("agent_setting"))
}

func (acrt azurermContainerRegistryTaskAttributes) BaseImageTrigger() terra.ListValue[BaseImageTriggerAttributes] {
	return terra.ReferenceAsList[BaseImageTriggerAttributes](acrt.ref.Append("base_image_trigger"))
}

func (acrt azurermContainerRegistryTaskAttributes) DockerStep() terra.ListValue[DockerStepAttributes] {
	return terra.ReferenceAsList[DockerStepAttributes](acrt.ref.Append("docker_step"))
}

func (acrt azurermContainerRegistryTaskAttributes) EncodedStep() terra.ListValue[EncodedStepAttributes] {
	return terra.ReferenceAsList[EncodedStepAttributes](acrt.ref.Append("encoded_step"))
}

func (acrt azurermContainerRegistryTaskAttributes) FileStep() terra.ListValue[FileStepAttributes] {
	return terra.ReferenceAsList[FileStepAttributes](acrt.ref.Append("file_step"))
}

func (acrt azurermContainerRegistryTaskAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](acrt.ref.Append("identity"))
}

func (acrt azurermContainerRegistryTaskAttributes) Platform() terra.ListValue[PlatformAttributes] {
	return terra.ReferenceAsList[PlatformAttributes](acrt.ref.Append("platform"))
}

func (acrt azurermContainerRegistryTaskAttributes) RegistryCredential() terra.ListValue[RegistryCredentialAttributes] {
	return terra.ReferenceAsList[RegistryCredentialAttributes](acrt.ref.Append("registry_credential"))
}

func (acrt azurermContainerRegistryTaskAttributes) SourceTrigger() terra.ListValue[SourceTriggerAttributes] {
	return terra.ReferenceAsList[SourceTriggerAttributes](acrt.ref.Append("source_trigger"))
}

func (acrt azurermContainerRegistryTaskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acrt.ref.Append("timeouts"))
}

func (acrt azurermContainerRegistryTaskAttributes) TimerTrigger() terra.ListValue[TimerTriggerAttributes] {
	return terra.ReferenceAsList[TimerTriggerAttributes](acrt.ref.Append("timer_trigger"))
}

type azurermContainerRegistryTaskState struct {
	AgentPoolName       string                    `json:"agent_pool_name"`
	ContainerRegistryId string                    `json:"container_registry_id"`
	Enabled             bool                      `json:"enabled"`
	Id                  string                    `json:"id"`
	IsSystemTask        bool                      `json:"is_system_task"`
	LogTemplate         string                    `json:"log_template"`
	Name                string                    `json:"name"`
	Tags                map[string]string         `json:"tags"`
	TimeoutInSeconds    float64                   `json:"timeout_in_seconds"`
	AgentSetting        []AgentSettingState       `json:"agent_setting"`
	BaseImageTrigger    []BaseImageTriggerState   `json:"base_image_trigger"`
	DockerStep          []DockerStepState         `json:"docker_step"`
	EncodedStep         []EncodedStepState        `json:"encoded_step"`
	FileStep            []FileStepState           `json:"file_step"`
	Identity            []IdentityState           `json:"identity"`
	Platform            []PlatformState           `json:"platform"`
	RegistryCredential  []RegistryCredentialState `json:"registry_credential"`
	SourceTrigger       []SourceTriggerState      `json:"source_trigger"`
	Timeouts            *TimeoutsState            `json:"timeouts"`
	TimerTrigger        []TimerTriggerState       `json:"timer_trigger"`
}
