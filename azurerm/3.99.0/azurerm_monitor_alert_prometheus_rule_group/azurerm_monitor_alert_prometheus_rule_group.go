// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_alert_prometheus_rule_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_alert_prometheus_rule_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorAlertPrometheusRuleGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amaprg *Resource) Type() string {
	return "azurerm_monitor_alert_prometheus_rule_group"
}

// LocalName returns the local name for [Resource].
func (amaprg *Resource) LocalName() string {
	return amaprg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amaprg *Resource) Configuration() interface{} {
	return amaprg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amaprg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amaprg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amaprg *Resource) Dependencies() terra.Dependencies {
	return amaprg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amaprg *Resource) LifecycleManagement() *terra.Lifecycle {
	return amaprg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amaprg *Resource) Attributes() azurermMonitorAlertPrometheusRuleGroupAttributes {
	return azurermMonitorAlertPrometheusRuleGroupAttributes{ref: terra.ReferenceResource(amaprg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amaprg *Resource) ImportState(state io.Reader) error {
	amaprg.state = &azurermMonitorAlertPrometheusRuleGroupState{}
	if err := json.NewDecoder(state).Decode(amaprg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amaprg.Type(), amaprg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amaprg *Resource) State() (*azurermMonitorAlertPrometheusRuleGroupState, bool) {
	return amaprg.state, amaprg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amaprg *Resource) StateMust() *azurermMonitorAlertPrometheusRuleGroupState {
	if amaprg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amaprg.Type(), amaprg.LocalName()))
	}
	return amaprg.state
}

// Args contains the configurations for azurerm_monitor_alert_prometheus_rule_group.
type Args struct {
	// ClusterName: string, optional
	ClusterName terra.StringValue `hcl:"cluster_name,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interval: string, optional
	Interval terra.StringValue `hcl:"interval,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RuleGroupEnabled: bool, optional
	RuleGroupEnabled terra.BoolValue `hcl:"rule_group_enabled,attr"`
	// Scopes: list of string, required
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Rule: min=1
	Rule []Rule `hcl:"rule,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorAlertPrometheusRuleGroupAttributes struct {
	ref terra.Reference
}

// ClusterName returns a reference to field cluster_name of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("cluster_name"))
}

// Description returns a reference to field description of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("id"))
}

// Interval returns a reference to field interval of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("interval"))
}

// Location returns a reference to field location of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amaprg.ref.Append("resource_group_name"))
}

// RuleGroupEnabled returns a reference to field rule_group_enabled of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) RuleGroupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amaprg.ref.Append("rule_group_enabled"))
}

// Scopes returns a reference to field scopes of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amaprg.ref.Append("scopes"))
}

// Tags returns a reference to field tags of azurerm_monitor_alert_prometheus_rule_group.
func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amaprg.ref.Append("tags"))
}

func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Rule() terra.ListValue[RuleAttributes] {
	return terra.ReferenceAsList[RuleAttributes](amaprg.ref.Append("rule"))
}

func (amaprg azurermMonitorAlertPrometheusRuleGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amaprg.ref.Append("timeouts"))
}

type azurermMonitorAlertPrometheusRuleGroupState struct {
	ClusterName       string            `json:"cluster_name"`
	Description       string            `json:"description"`
	Id                string            `json:"id"`
	Interval          string            `json:"interval"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	RuleGroupEnabled  bool              `json:"rule_group_enabled"`
	Scopes            []string          `json:"scopes"`
	Tags              map[string]string `json:"tags"`
	Rule              []RuleState       `json:"rule"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
