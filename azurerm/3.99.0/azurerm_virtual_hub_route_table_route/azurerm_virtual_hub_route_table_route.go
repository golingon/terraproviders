// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_hub_route_table_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_hub_route_table_route.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualHubRouteTableRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avhrtr *Resource) Type() string {
	return "azurerm_virtual_hub_route_table_route"
}

// LocalName returns the local name for [Resource].
func (avhrtr *Resource) LocalName() string {
	return avhrtr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avhrtr *Resource) Configuration() interface{} {
	return avhrtr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avhrtr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avhrtr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avhrtr *Resource) Dependencies() terra.Dependencies {
	return avhrtr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avhrtr *Resource) LifecycleManagement() *terra.Lifecycle {
	return avhrtr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avhrtr *Resource) Attributes() azurermVirtualHubRouteTableRouteAttributes {
	return azurermVirtualHubRouteTableRouteAttributes{ref: terra.ReferenceResource(avhrtr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avhrtr *Resource) ImportState(state io.Reader) error {
	avhrtr.state = &azurermVirtualHubRouteTableRouteState{}
	if err := json.NewDecoder(state).Decode(avhrtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avhrtr.Type(), avhrtr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avhrtr *Resource) State() (*azurermVirtualHubRouteTableRouteState, bool) {
	return avhrtr.state, avhrtr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avhrtr *Resource) StateMust() *azurermVirtualHubRouteTableRouteState {
	if avhrtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avhrtr.Type(), avhrtr.LocalName()))
	}
	return avhrtr.state
}

// Args contains the configurations for azurerm_virtual_hub_route_table_route.
type Args struct {
	// Destinations: set of string, required
	Destinations terra.SetValue[terra.StringValue] `hcl:"destinations,attr" validate:"required"`
	// DestinationsType: string, required
	DestinationsType terra.StringValue `hcl:"destinations_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NextHop: string, required
	NextHop terra.StringValue `hcl:"next_hop,attr" validate:"required"`
	// NextHopType: string, optional
	NextHopType terra.StringValue `hcl:"next_hop_type,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualHubRouteTableRouteAttributes struct {
	ref terra.Reference
}

// Destinations returns a reference to field destinations of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) Destinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avhrtr.ref.Append("destinations"))
}

// DestinationsType returns a reference to field destinations_type of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) DestinationsType() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("destinations_type"))
}

// Id returns a reference to field id of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("name"))
}

// NextHop returns a reference to field next_hop of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) NextHop() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("next_hop"))
}

// NextHopType returns a reference to field next_hop_type of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) NextHopType() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("next_hop_type"))
}

// RouteTableId returns a reference to field route_table_id of azurerm_virtual_hub_route_table_route.
func (avhrtr azurermVirtualHubRouteTableRouteAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(avhrtr.ref.Append("route_table_id"))
}

func (avhrtr azurermVirtualHubRouteTableRouteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avhrtr.ref.Append("timeouts"))
}

type azurermVirtualHubRouteTableRouteState struct {
	Destinations     []string       `json:"destinations"`
	DestinationsType string         `json:"destinations_type"`
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	NextHop          string         `json:"next_hop"`
	NextHopType      string         `json:"next_hop_type"`
	RouteTableId     string         `json:"route_table_id"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
