// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_vpn_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_vpn_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVpnGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avg *Resource) Type() string {
	return "azurerm_vpn_gateway"
}

// LocalName returns the local name for [Resource].
func (avg *Resource) LocalName() string {
	return avg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avg *Resource) Configuration() interface{} {
	return avg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avg *Resource) Dependencies() terra.Dependencies {
	return avg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avg *Resource) LifecycleManagement() *terra.Lifecycle {
	return avg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avg *Resource) Attributes() azurermVpnGatewayAttributes {
	return azurermVpnGatewayAttributes{ref: terra.ReferenceResource(avg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avg *Resource) ImportState(state io.Reader) error {
	avg.state = &azurermVpnGatewayState{}
	if err := json.NewDecoder(state).Decode(avg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avg.Type(), avg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avg *Resource) State() (*azurermVpnGatewayState, bool) {
	return avg.state, avg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avg *Resource) StateMust() *azurermVpnGatewayState {
	if avg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avg.Type(), avg.LocalName()))
	}
	return avg.state
}

// Args contains the configurations for azurerm_vpn_gateway.
type Args struct {
	// BgpRouteTranslationForNatEnabled: bool, optional
	BgpRouteTranslationForNatEnabled terra.BoolValue `hcl:"bgp_route_translation_for_nat_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// RoutingPreference: string, optional
	RoutingPreference terra.StringValue `hcl:"routing_preference,attr"`
	// ScaleUnit: number, optional
	ScaleUnit terra.NumberValue `hcl:"scale_unit,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// BgpSettings: optional
	BgpSettings *BgpSettings `hcl:"bgp_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVpnGatewayAttributes struct {
	ref terra.Reference
}

// BgpRouteTranslationForNatEnabled returns a reference to field bgp_route_translation_for_nat_enabled of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) BgpRouteTranslationForNatEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(avg.ref.Append("bgp_route_translation_for_nat_enabled"))
}

// Id returns a reference to field id of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("resource_group_name"))
}

// RoutingPreference returns a reference to field routing_preference of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) RoutingPreference() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("routing_preference"))
}

// ScaleUnit returns a reference to field scale_unit of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) ScaleUnit() terra.NumberValue {
	return terra.ReferenceAsNumber(avg.ref.Append("scale_unit"))
}

// Tags returns a reference to field tags of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_vpn_gateway.
func (avg azurermVpnGatewayAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("virtual_hub_id"))
}

func (avg azurermVpnGatewayAttributes) BgpSettings() terra.ListValue[BgpSettingsAttributes] {
	return terra.ReferenceAsList[BgpSettingsAttributes](avg.ref.Append("bgp_settings"))
}

func (avg azurermVpnGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avg.ref.Append("timeouts"))
}

type azurermVpnGatewayState struct {
	BgpRouteTranslationForNatEnabled bool               `json:"bgp_route_translation_for_nat_enabled"`
	Id                               string             `json:"id"`
	Location                         string             `json:"location"`
	Name                             string             `json:"name"`
	ResourceGroupName                string             `json:"resource_group_name"`
	RoutingPreference                string             `json:"routing_preference"`
	ScaleUnit                        float64            `json:"scale_unit"`
	Tags                             map[string]string  `json:"tags"`
	VirtualHubId                     string             `json:"virtual_hub_id"`
	BgpSettings                      []BgpSettingsState `json:"bgp_settings"`
	Timeouts                         *TimeoutsState     `json:"timeouts"`
}
