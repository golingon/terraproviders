// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hpc_cache_blob_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_hpc_cache_blob_target.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHpcCacheBlobTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahcbt *Resource) Type() string {
	return "azurerm_hpc_cache_blob_target"
}

// LocalName returns the local name for [Resource].
func (ahcbt *Resource) LocalName() string {
	return ahcbt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahcbt *Resource) Configuration() interface{} {
	return ahcbt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahcbt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahcbt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahcbt *Resource) Dependencies() terra.Dependencies {
	return ahcbt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahcbt *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahcbt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahcbt *Resource) Attributes() azurermHpcCacheBlobTargetAttributes {
	return azurermHpcCacheBlobTargetAttributes{ref: terra.ReferenceResource(ahcbt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahcbt *Resource) ImportState(state io.Reader) error {
	ahcbt.state = &azurermHpcCacheBlobTargetState{}
	if err := json.NewDecoder(state).Decode(ahcbt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahcbt.Type(), ahcbt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahcbt *Resource) State() (*azurermHpcCacheBlobTargetState, bool) {
	return ahcbt.state, ahcbt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahcbt *Resource) StateMust() *azurermHpcCacheBlobTargetState {
	if ahcbt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahcbt.Type(), ahcbt.LocalName()))
	}
	return ahcbt.state
}

// Args contains the configurations for azurerm_hpc_cache_blob_target.
type Args struct {
	// AccessPolicyName: string, optional
	AccessPolicyName terra.StringValue `hcl:"access_policy_name,attr"`
	// CacheName: string, required
	CacheName terra.StringValue `hcl:"cache_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespacePath: string, required
	NamespacePath terra.StringValue `hcl:"namespace_path,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHpcCacheBlobTargetAttributes struct {
	ref terra.Reference
}

// AccessPolicyName returns a reference to field access_policy_name of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) AccessPolicyName() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("access_policy_name"))
}

// CacheName returns a reference to field cache_name of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) CacheName() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("cache_name"))
}

// Id returns a reference to field id of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("name"))
}

// NamespacePath returns a reference to field namespace_path of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("namespace_path"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("resource_group_name"))
}

// StorageContainerId returns a reference to field storage_container_id of azurerm_hpc_cache_blob_target.
func (ahcbt azurermHpcCacheBlobTargetAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(ahcbt.ref.Append("storage_container_id"))
}

func (ahcbt azurermHpcCacheBlobTargetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahcbt.ref.Append("timeouts"))
}

type azurermHpcCacheBlobTargetState struct {
	AccessPolicyName   string         `json:"access_policy_name"`
	CacheName          string         `json:"cache_name"`
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	NamespacePath      string         `json:"namespace_path"`
	ResourceGroupName  string         `json:"resource_group_name"`
	StorageContainerId string         `json:"storage_container_id"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
