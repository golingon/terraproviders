// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logic_app_integration_account_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_logic_app_integration_account_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogicAppIntegrationAccountCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alaiac *Resource) Type() string {
	return "azurerm_logic_app_integration_account_certificate"
}

// LocalName returns the local name for [Resource].
func (alaiac *Resource) LocalName() string {
	return alaiac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alaiac *Resource) Configuration() interface{} {
	return alaiac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alaiac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alaiac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alaiac *Resource) Dependencies() terra.Dependencies {
	return alaiac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alaiac *Resource) LifecycleManagement() *terra.Lifecycle {
	return alaiac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alaiac *Resource) Attributes() azurermLogicAppIntegrationAccountCertificateAttributes {
	return azurermLogicAppIntegrationAccountCertificateAttributes{ref: terra.ReferenceResource(alaiac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alaiac *Resource) ImportState(state io.Reader) error {
	alaiac.state = &azurermLogicAppIntegrationAccountCertificateState{}
	if err := json.NewDecoder(state).Decode(alaiac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alaiac.Type(), alaiac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alaiac *Resource) State() (*azurermLogicAppIntegrationAccountCertificateState, bool) {
	return alaiac.state, alaiac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alaiac *Resource) StateMust() *azurermLogicAppIntegrationAccountCertificateState {
	if alaiac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alaiac.Type(), alaiac.LocalName()))
	}
	return alaiac.state
}

// Args contains the configurations for azurerm_logic_app_integration_account_certificate.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationAccountName: string, required
	IntegrationAccountName terra.StringValue `hcl:"integration_account_name,attr" validate:"required"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicCertificate: string, optional
	PublicCertificate terra.StringValue `hcl:"public_certificate,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// KeyVaultKey: optional
	KeyVaultKey *KeyVaultKey `hcl:"key_vault_key,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogicAppIntegrationAccountCertificateAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("id"))
}

// IntegrationAccountName returns a reference to field integration_account_name of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) IntegrationAccountName() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("integration_account_name"))
}

// Metadata returns a reference to field metadata of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) Metadata() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("name"))
}

// PublicCertificate returns a reference to field public_certificate of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) PublicCertificate() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("public_certificate"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_logic_app_integration_account_certificate.
func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alaiac.ref.Append("resource_group_name"))
}

func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) KeyVaultKey() terra.ListValue[KeyVaultKeyAttributes] {
	return terra.ReferenceAsList[KeyVaultKeyAttributes](alaiac.ref.Append("key_vault_key"))
}

func (alaiac azurermLogicAppIntegrationAccountCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alaiac.ref.Append("timeouts"))
}

type azurermLogicAppIntegrationAccountCertificateState struct {
	Id                     string             `json:"id"`
	IntegrationAccountName string             `json:"integration_account_name"`
	Metadata               string             `json:"metadata"`
	Name                   string             `json:"name"`
	PublicCertificate      string             `json:"public_certificate"`
	ResourceGroupName      string             `json:"resource_group_name"`
	KeyVaultKey            []KeyVaultKeyState `json:"key_vault_key"`
	Timeouts               *TimeoutsState     `json:"timeouts"`
}
