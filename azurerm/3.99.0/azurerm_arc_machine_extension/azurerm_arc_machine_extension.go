// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_arc_machine_extension

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_arc_machine_extension.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermArcMachineExtensionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aame *Resource) Type() string {
	return "azurerm_arc_machine_extension"
}

// LocalName returns the local name for [Resource].
func (aame *Resource) LocalName() string {
	return aame.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aame *Resource) Configuration() interface{} {
	return aame.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aame *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aame)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aame *Resource) Dependencies() terra.Dependencies {
	return aame.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aame *Resource) LifecycleManagement() *terra.Lifecycle {
	return aame.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aame *Resource) Attributes() azurermArcMachineExtensionAttributes {
	return azurermArcMachineExtensionAttributes{ref: terra.ReferenceResource(aame)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aame *Resource) ImportState(state io.Reader) error {
	aame.state = &azurermArcMachineExtensionState{}
	if err := json.NewDecoder(state).Decode(aame.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aame.Type(), aame.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aame *Resource) State() (*azurermArcMachineExtensionState, bool) {
	return aame.state, aame.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aame *Resource) StateMust() *azurermArcMachineExtensionState {
	if aame.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aame.Type(), aame.LocalName()))
	}
	return aame.state
}

// Args contains the configurations for azurerm_arc_machine_extension.
type Args struct {
	// ArcMachineId: string, required
	ArcMachineId terra.StringValue `hcl:"arc_machine_id,attr" validate:"required"`
	// AutomaticUpgradeEnabled: bool, optional
	AutomaticUpgradeEnabled terra.BoolValue `hcl:"automatic_upgrade_enabled,attr"`
	// ForceUpdateTag: string, optional
	ForceUpdateTag terra.StringValue `hcl:"force_update_tag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtectedSettings: string, optional
	ProtectedSettings terra.StringValue `hcl:"protected_settings,attr"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Settings: string, optional
	Settings terra.StringValue `hcl:"settings,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypeHandlerVersion: string, optional
	TypeHandlerVersion terra.StringValue `hcl:"type_handler_version,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermArcMachineExtensionAttributes struct {
	ref terra.Reference
}

// ArcMachineId returns a reference to field arc_machine_id of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) ArcMachineId() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("arc_machine_id"))
}

// AutomaticUpgradeEnabled returns a reference to field automatic_upgrade_enabled of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) AutomaticUpgradeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aame.ref.Append("automatic_upgrade_enabled"))
}

// ForceUpdateTag returns a reference to field force_update_tag of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) ForceUpdateTag() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("force_update_tag"))
}

// Id returns a reference to field id of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("name"))
}

// ProtectedSettings returns a reference to field protected_settings of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) ProtectedSettings() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("protected_settings"))
}

// Publisher returns a reference to field publisher of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("publisher"))
}

// Settings returns a reference to field settings of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Settings() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("settings"))
}

// Tags returns a reference to field tags of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aame.ref.Append("tags"))
}

// Type returns a reference to field type of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("type"))
}

// TypeHandlerVersion returns a reference to field type_handler_version of azurerm_arc_machine_extension.
func (aame azurermArcMachineExtensionAttributes) TypeHandlerVersion() terra.StringValue {
	return terra.ReferenceAsString(aame.ref.Append("type_handler_version"))
}

func (aame azurermArcMachineExtensionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aame.ref.Append("timeouts"))
}

type azurermArcMachineExtensionState struct {
	ArcMachineId            string            `json:"arc_machine_id"`
	AutomaticUpgradeEnabled bool              `json:"automatic_upgrade_enabled"`
	ForceUpdateTag          string            `json:"force_update_tag"`
	Id                      string            `json:"id"`
	Location                string            `json:"location"`
	Name                    string            `json:"name"`
	ProtectedSettings       string            `json:"protected_settings"`
	Publisher               string            `json:"publisher"`
	Settings                string            `json:"settings"`
	Tags                    map[string]string `json:"tags"`
	Type                    string            `json:"type"`
	TypeHandlerVersion      string            `json:"type_handler_version"`
	Timeouts                *TimeoutsState    `json:"timeouts"`
}
