// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_iot_time_series_insights_event_source_eventhub

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_iot_time_series_insights_event_source_eventhub.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermIotTimeSeriesInsightsEventSourceEventhubState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aitsiese *Resource) Type() string {
	return "azurerm_iot_time_series_insights_event_source_eventhub"
}

// LocalName returns the local name for [Resource].
func (aitsiese *Resource) LocalName() string {
	return aitsiese.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aitsiese *Resource) Configuration() interface{} {
	return aitsiese.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aitsiese *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aitsiese)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aitsiese *Resource) Dependencies() terra.Dependencies {
	return aitsiese.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aitsiese *Resource) LifecycleManagement() *terra.Lifecycle {
	return aitsiese.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aitsiese *Resource) Attributes() azurermIotTimeSeriesInsightsEventSourceEventhubAttributes {
	return azurermIotTimeSeriesInsightsEventSourceEventhubAttributes{ref: terra.ReferenceResource(aitsiese)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aitsiese *Resource) ImportState(state io.Reader) error {
	aitsiese.state = &azurermIotTimeSeriesInsightsEventSourceEventhubState{}
	if err := json.NewDecoder(state).Decode(aitsiese.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aitsiese.Type(), aitsiese.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aitsiese *Resource) State() (*azurermIotTimeSeriesInsightsEventSourceEventhubState, bool) {
	return aitsiese.state, aitsiese.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aitsiese *Resource) StateMust() *azurermIotTimeSeriesInsightsEventSourceEventhubState {
	if aitsiese.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aitsiese.Type(), aitsiese.LocalName()))
	}
	return aitsiese.state
}

// Args contains the configurations for azurerm_iot_time_series_insights_event_source_eventhub.
type Args struct {
	// ConsumerGroupName: string, required
	ConsumerGroupName terra.StringValue `hcl:"consumer_group_name,attr" validate:"required"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// EventSourceResourceId: string, required
	EventSourceResourceId terra.StringValue `hcl:"event_source_resource_id,attr" validate:"required"`
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// SharedAccessKey: string, required
	SharedAccessKey terra.StringValue `hcl:"shared_access_key,attr" validate:"required"`
	// SharedAccessKeyName: string, required
	SharedAccessKeyName terra.StringValue `hcl:"shared_access_key_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimestampPropertyName: string, optional
	TimestampPropertyName terra.StringValue `hcl:"timestamp_property_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermIotTimeSeriesInsightsEventSourceEventhubAttributes struct {
	ref terra.Reference
}

// ConsumerGroupName returns a reference to field consumer_group_name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) ConsumerGroupName() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("consumer_group_name"))
}

// EnvironmentId returns a reference to field environment_id of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("environment_id"))
}

// EventSourceResourceId returns a reference to field event_source_resource_id of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) EventSourceResourceId() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("event_source_resource_id"))
}

// EventhubName returns a reference to field eventhub_name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("eventhub_name"))
}

// Id returns a reference to field id of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("name"))
}

// NamespaceName returns a reference to field namespace_name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("namespace_name"))
}

// SharedAccessKey returns a reference to field shared_access_key of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) SharedAccessKey() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("shared_access_key"))
}

// SharedAccessKeyName returns a reference to field shared_access_key_name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) SharedAccessKeyName() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("shared_access_key_name"))
}

// Tags returns a reference to field tags of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aitsiese.ref.Append("tags"))
}

// TimestampPropertyName returns a reference to field timestamp_property_name of azurerm_iot_time_series_insights_event_source_eventhub.
func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) TimestampPropertyName() terra.StringValue {
	return terra.ReferenceAsString(aitsiese.ref.Append("timestamp_property_name"))
}

func (aitsiese azurermIotTimeSeriesInsightsEventSourceEventhubAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aitsiese.ref.Append("timeouts"))
}

type azurermIotTimeSeriesInsightsEventSourceEventhubState struct {
	ConsumerGroupName     string            `json:"consumer_group_name"`
	EnvironmentId         string            `json:"environment_id"`
	EventSourceResourceId string            `json:"event_source_resource_id"`
	EventhubName          string            `json:"eventhub_name"`
	Id                    string            `json:"id"`
	Location              string            `json:"location"`
	Name                  string            `json:"name"`
	NamespaceName         string            `json:"namespace_name"`
	SharedAccessKey       string            `json:"shared_access_key"`
	SharedAccessKeyName   string            `json:"shared_access_key_name"`
	Tags                  map[string]string `json:"tags"`
	TimestampPropertyName string            `json:"timestamp_property_name"`
	Timeouts              *TimeoutsState    `json:"timeouts"`
}
