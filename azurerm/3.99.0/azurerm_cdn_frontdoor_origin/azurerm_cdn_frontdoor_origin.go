// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_frontdoor_origin

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cdn_frontdoor_origin.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCdnFrontdoorOriginState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acfo *Resource) Type() string {
	return "azurerm_cdn_frontdoor_origin"
}

// LocalName returns the local name for [Resource].
func (acfo *Resource) LocalName() string {
	return acfo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acfo *Resource) Configuration() interface{} {
	return acfo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acfo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acfo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acfo *Resource) Dependencies() terra.Dependencies {
	return acfo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acfo *Resource) LifecycleManagement() *terra.Lifecycle {
	return acfo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acfo *Resource) Attributes() azurermCdnFrontdoorOriginAttributes {
	return azurermCdnFrontdoorOriginAttributes{ref: terra.ReferenceResource(acfo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acfo *Resource) ImportState(state io.Reader) error {
	acfo.state = &azurermCdnFrontdoorOriginState{}
	if err := json.NewDecoder(state).Decode(acfo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acfo.Type(), acfo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acfo *Resource) State() (*azurermCdnFrontdoorOriginState, bool) {
	return acfo.state, acfo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acfo *Resource) StateMust() *azurermCdnFrontdoorOriginState {
	if acfo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acfo.Type(), acfo.LocalName()))
	}
	return acfo.state
}

// Args contains the configurations for azurerm_cdn_frontdoor_origin.
type Args struct {
	// CdnFrontdoorOriginGroupId: string, required
	CdnFrontdoorOriginGroupId terra.StringValue `hcl:"cdn_frontdoor_origin_group_id,attr" validate:"required"`
	// CertificateNameCheckEnabled: bool, required
	CertificateNameCheckEnabled terra.BoolValue `hcl:"certificate_name_check_enabled,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HealthProbesEnabled: bool, optional
	HealthProbesEnabled terra.BoolValue `hcl:"health_probes_enabled,attr"`
	// HostName: string, required
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// HttpPort: number, optional
	HttpPort terra.NumberValue `hcl:"http_port,attr"`
	// HttpsPort: number, optional
	HttpsPort terra.NumberValue `hcl:"https_port,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OriginHostHeader: string, optional
	OriginHostHeader terra.StringValue `hcl:"origin_host_header,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// PrivateLink: optional
	PrivateLink *PrivateLink `hcl:"private_link,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCdnFrontdoorOriginAttributes struct {
	ref terra.Reference
}

// CdnFrontdoorOriginGroupId returns a reference to field cdn_frontdoor_origin_group_id of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) CdnFrontdoorOriginGroupId() terra.StringValue {
	return terra.ReferenceAsString(acfo.ref.Append("cdn_frontdoor_origin_group_id"))
}

// CertificateNameCheckEnabled returns a reference to field certificate_name_check_enabled of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) CertificateNameCheckEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acfo.ref.Append("certificate_name_check_enabled"))
}

// Enabled returns a reference to field enabled of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(acfo.ref.Append("enabled"))
}

// HealthProbesEnabled returns a reference to field health_probes_enabled of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) HealthProbesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acfo.ref.Append("health_probes_enabled"))
}

// HostName returns a reference to field host_name of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(acfo.ref.Append("host_name"))
}

// HttpPort returns a reference to field http_port of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) HttpPort() terra.NumberValue {
	return terra.ReferenceAsNumber(acfo.ref.Append("http_port"))
}

// HttpsPort returns a reference to field https_port of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) HttpsPort() terra.NumberValue {
	return terra.ReferenceAsNumber(acfo.ref.Append("https_port"))
}

// Id returns a reference to field id of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acfo.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acfo.ref.Append("name"))
}

// OriginHostHeader returns a reference to field origin_host_header of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) OriginHostHeader() terra.StringValue {
	return terra.ReferenceAsString(acfo.ref.Append("origin_host_header"))
}

// Priority returns a reference to field priority of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(acfo.ref.Append("priority"))
}

// Weight returns a reference to field weight of azurerm_cdn_frontdoor_origin.
func (acfo azurermCdnFrontdoorOriginAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(acfo.ref.Append("weight"))
}

func (acfo azurermCdnFrontdoorOriginAttributes) PrivateLink() terra.ListValue[PrivateLinkAttributes] {
	return terra.ReferenceAsList[PrivateLinkAttributes](acfo.ref.Append("private_link"))
}

func (acfo azurermCdnFrontdoorOriginAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acfo.ref.Append("timeouts"))
}

type azurermCdnFrontdoorOriginState struct {
	CdnFrontdoorOriginGroupId   string             `json:"cdn_frontdoor_origin_group_id"`
	CertificateNameCheckEnabled bool               `json:"certificate_name_check_enabled"`
	Enabled                     bool               `json:"enabled"`
	HealthProbesEnabled         bool               `json:"health_probes_enabled"`
	HostName                    string             `json:"host_name"`
	HttpPort                    float64            `json:"http_port"`
	HttpsPort                   float64            `json:"https_port"`
	Id                          string             `json:"id"`
	Name                        string             `json:"name"`
	OriginHostHeader            string             `json:"origin_host_header"`
	Priority                    float64            `json:"priority"`
	Weight                      float64            `json:"weight"`
	PrivateLink                 []PrivateLinkState `json:"private_link"`
	Timeouts                    *TimeoutsState     `json:"timeouts"`
}
