// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logic_app_standard

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataSiteConfig struct {
	// AlwaysOn: bool, optional
	AlwaysOn terra.BoolValue `hcl:"always_on,attr"`
	// AppScaleLimit: number, optional
	AppScaleLimit terra.NumberValue `hcl:"app_scale_limit,attr"`
	// DotnetFrameworkVersion: string, optional
	DotnetFrameworkVersion terra.StringValue `hcl:"dotnet_framework_version,attr"`
	// ElasticInstanceMinimum: number, optional
	ElasticInstanceMinimum terra.NumberValue `hcl:"elastic_instance_minimum,attr"`
	// FtpsState: string, optional
	FtpsState terra.StringValue `hcl:"ftps_state,attr"`
	// HealthCheckPath: string, optional
	HealthCheckPath terra.StringValue `hcl:"health_check_path,attr"`
	// Http2Enabled: bool, optional
	Http2Enabled terra.BoolValue `hcl:"http2_enabled,attr"`
	// LinuxFxVersion: string, optional
	LinuxFxVersion terra.StringValue `hcl:"linux_fx_version,attr"`
	// MinTlsVersion: string, optional
	MinTlsVersion terra.StringValue `hcl:"min_tls_version,attr"`
	// PreWarmedInstanceCount: number, optional
	PreWarmedInstanceCount terra.NumberValue `hcl:"pre_warmed_instance_count,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// RuntimeScaleMonitoringEnabled: bool, optional
	RuntimeScaleMonitoringEnabled terra.BoolValue `hcl:"runtime_scale_monitoring_enabled,attr"`
	// ScmMinTlsVersion: string, optional
	ScmMinTlsVersion terra.StringValue `hcl:"scm_min_tls_version,attr"`
	// ScmType: string, optional
	ScmType terra.StringValue `hcl:"scm_type,attr"`
	// ScmUseMainIpRestriction: bool, optional
	ScmUseMainIpRestriction terra.BoolValue `hcl:"scm_use_main_ip_restriction,attr"`
	// Use32BitWorkerProcess: bool, optional
	Use32BitWorkerProcess terra.BoolValue `hcl:"use_32_bit_worker_process,attr"`
	// VnetRouteAllEnabled: bool, optional
	VnetRouteAllEnabled terra.BoolValue `hcl:"vnet_route_all_enabled,attr"`
	// WebsocketsEnabled: bool, optional
	WebsocketsEnabled terra.BoolValue `hcl:"websockets_enabled,attr"`
	// SiteConfigIpRestriction: min=0
	IpRestriction []DataSiteConfigIpRestriction `hcl:"ip_restriction,block" validate:"min=0"`
	// SiteConfigScmIpRestriction: min=0
	ScmIpRestriction []DataSiteConfigScmIpRestriction `hcl:"scm_ip_restriction,block" validate:"min=0"`
	// SiteConfigCors: optional
	Cors *DataSiteConfigCors `hcl:"cors,block"`
}

type DataSiteConfigIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigIpRestrictionHeaders: min=0
	Headers []DataSiteConfigIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type DataSiteConfigIpRestrictionHeaders struct {
	// XAzureFdid: set of string, optional
	XAzureFdid terra.SetValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: set of string, optional
	XFdHealthProbe terra.SetValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: set of string, optional
	XForwardedFor terra.SetValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: set of string, optional
	XForwardedHost terra.SetValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type DataSiteConfigScmIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigScmIpRestrictionHeaders: min=0
	Headers []DataSiteConfigScmIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type DataSiteConfigScmIpRestrictionHeaders struct {
	// XAzureFdid: set of string, optional
	XAzureFdid terra.SetValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: set of string, optional
	XFdHealthProbe terra.SetValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: set of string, optional
	XForwardedFor terra.SetValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: set of string, optional
	XForwardedHost terra.SetValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type DataSiteConfigCors struct {
	// AllowedOrigins: set of string, required
	AllowedOrigins terra.SetValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// SupportCredentials: bool, optional
	SupportCredentials terra.BoolValue `hcl:"support_credentials,attr"`
}

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataConnectionStringAttributes struct {
	ref terra.Reference
}

func (cs DataConnectionStringAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataConnectionStringAttributes) InternalWithRef(ref terra.Reference) DataConnectionStringAttributes {
	return DataConnectionStringAttributes{ref: ref}
}

func (cs DataConnectionStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataConnectionStringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs DataConnectionStringAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

func (cs DataConnectionStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type DataIdentityAttributes struct {
	ref terra.Reference
}

func (i DataIdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdentityAttributes) InternalWithRef(ref terra.Reference) DataIdentityAttributes {
	return DataIdentityAttributes{ref: ref}
}

func (i DataIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i DataIdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i DataIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type DataSiteCredentialAttributes struct {
	ref terra.Reference
}

func (sc DataSiteCredentialAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSiteCredentialAttributes) InternalWithRef(ref terra.Reference) DataSiteCredentialAttributes {
	return DataSiteCredentialAttributes{ref: ref}
}

func (sc DataSiteCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSiteCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

func (sc DataSiteCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("username"))
}

type DataSiteConfigAttributes struct {
	ref terra.Reference
}

func (sc DataSiteConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSiteConfigAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigAttributes {
	return DataSiteConfigAttributes{ref: ref}
}

func (sc DataSiteConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSiteConfigAttributes) AlwaysOn() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("always_on"))
}

func (sc DataSiteConfigAttributes) AppScaleLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("app_scale_limit"))
}

func (sc DataSiteConfigAttributes) AutoSwapSlotName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("auto_swap_slot_name"))
}

func (sc DataSiteConfigAttributes) DotnetFrameworkVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("dotnet_framework_version"))
}

func (sc DataSiteConfigAttributes) ElasticInstanceMinimum() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("elastic_instance_minimum"))
}

func (sc DataSiteConfigAttributes) FtpsState() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ftps_state"))
}

func (sc DataSiteConfigAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("health_check_path"))
}

func (sc DataSiteConfigAttributes) Http2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("http2_enabled"))
}

func (sc DataSiteConfigAttributes) LinuxFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("linux_fx_version"))
}

func (sc DataSiteConfigAttributes) MinTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("min_tls_version"))
}

func (sc DataSiteConfigAttributes) PreWarmedInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("pre_warmed_instance_count"))
}

func (sc DataSiteConfigAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("public_network_access_enabled"))
}

func (sc DataSiteConfigAttributes) RuntimeScaleMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("runtime_scale_monitoring_enabled"))
}

func (sc DataSiteConfigAttributes) ScmMinTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_min_tls_version"))
}

func (sc DataSiteConfigAttributes) ScmType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_type"))
}

func (sc DataSiteConfigAttributes) ScmUseMainIpRestriction() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("scm_use_main_ip_restriction"))
}

func (sc DataSiteConfigAttributes) Use32BitWorkerProcess() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_32_bit_worker_process"))
}

func (sc DataSiteConfigAttributes) VnetRouteAllEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("vnet_route_all_enabled"))
}

func (sc DataSiteConfigAttributes) WebsocketsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("websockets_enabled"))
}

func (sc DataSiteConfigAttributes) IpRestriction() terra.ListValue[DataSiteConfigIpRestrictionAttributes] {
	return terra.ReferenceAsList[DataSiteConfigIpRestrictionAttributes](sc.ref.Append("ip_restriction"))
}

func (sc DataSiteConfigAttributes) ScmIpRestriction() terra.ListValue[DataSiteConfigScmIpRestrictionAttributes] {
	return terra.ReferenceAsList[DataSiteConfigScmIpRestrictionAttributes](sc.ref.Append("scm_ip_restriction"))
}

func (sc DataSiteConfigAttributes) Cors() terra.ListValue[DataSiteConfigCorsAttributes] {
	return terra.ReferenceAsList[DataSiteConfigCorsAttributes](sc.ref.Append("cors"))
}

type DataSiteConfigIpRestrictionAttributes struct {
	ref terra.Reference
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigIpRestrictionAttributes {
	return DataSiteConfigIpRestrictionAttributes{ref: ref}
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir DataSiteConfigIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir DataSiteConfigIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_address"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("name"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("priority"))
}

func (ir DataSiteConfigIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("service_tag"))
}

func (ir DataSiteConfigIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("virtual_network_subnet_id"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Headers() terra.ListValue[DataSiteConfigIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[DataSiteConfigIpRestrictionHeadersAttributes](ir.ref.Append("headers"))
}

type DataSiteConfigIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigIpRestrictionHeadersAttributes {
	return DataSiteConfigIpRestrictionHeadersAttributes{ref: ref}
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type DataSiteConfigScmIpRestrictionAttributes struct {
	ref terra.Reference
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigScmIpRestrictionAttributes {
	return DataSiteConfigScmIpRestrictionAttributes{ref: ref}
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("action"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("ip_address"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("name"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(sir.ref.Append("priority"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("service_tag"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("virtual_network_subnet_id"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Headers() terra.ListValue[DataSiteConfigScmIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[DataSiteConfigScmIpRestrictionHeadersAttributes](sir.ref.Append("headers"))
}

type DataSiteConfigScmIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigScmIpRestrictionHeadersAttributes {
	return DataSiteConfigScmIpRestrictionHeadersAttributes{ref: ref}
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type DataSiteConfigCorsAttributes struct {
	ref terra.Reference
}

func (c DataSiteConfigCorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataSiteConfigCorsAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigCorsAttributes {
	return DataSiteConfigCorsAttributes{ref: ref}
}

func (c DataSiteConfigCorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataSiteConfigCorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c DataSiteConfigCorsAttributes) SupportCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("support_credentials"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataConnectionStringState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type DataIdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type DataSiteCredentialState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type DataSiteConfigState struct {
	AlwaysOn                      bool                                  `json:"always_on"`
	AppScaleLimit                 float64                               `json:"app_scale_limit"`
	AutoSwapSlotName              string                                `json:"auto_swap_slot_name"`
	DotnetFrameworkVersion        string                                `json:"dotnet_framework_version"`
	ElasticInstanceMinimum        float64                               `json:"elastic_instance_minimum"`
	FtpsState                     string                                `json:"ftps_state"`
	HealthCheckPath               string                                `json:"health_check_path"`
	Http2Enabled                  bool                                  `json:"http2_enabled"`
	LinuxFxVersion                string                                `json:"linux_fx_version"`
	MinTlsVersion                 string                                `json:"min_tls_version"`
	PreWarmedInstanceCount        float64                               `json:"pre_warmed_instance_count"`
	PublicNetworkAccessEnabled    bool                                  `json:"public_network_access_enabled"`
	RuntimeScaleMonitoringEnabled bool                                  `json:"runtime_scale_monitoring_enabled"`
	ScmMinTlsVersion              string                                `json:"scm_min_tls_version"`
	ScmType                       string                                `json:"scm_type"`
	ScmUseMainIpRestriction       bool                                  `json:"scm_use_main_ip_restriction"`
	Use32BitWorkerProcess         bool                                  `json:"use_32_bit_worker_process"`
	VnetRouteAllEnabled           bool                                  `json:"vnet_route_all_enabled"`
	WebsocketsEnabled             bool                                  `json:"websockets_enabled"`
	IpRestriction                 []DataSiteConfigIpRestrictionState    `json:"ip_restriction"`
	ScmIpRestriction              []DataSiteConfigScmIpRestrictionState `json:"scm_ip_restriction"`
	Cors                          []DataSiteConfigCorsState             `json:"cors"`
}

type DataSiteConfigIpRestrictionState struct {
	Action                 string                                    `json:"action"`
	IpAddress              string                                    `json:"ip_address"`
	Name                   string                                    `json:"name"`
	Priority               float64                                   `json:"priority"`
	ServiceTag             string                                    `json:"service_tag"`
	VirtualNetworkSubnetId string                                    `json:"virtual_network_subnet_id"`
	Headers                []DataSiteConfigIpRestrictionHeadersState `json:"headers"`
}

type DataSiteConfigIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type DataSiteConfigScmIpRestrictionState struct {
	Action                 string                                       `json:"action"`
	IpAddress              string                                       `json:"ip_address"`
	Name                   string                                       `json:"name"`
	Priority               float64                                      `json:"priority"`
	ServiceTag             string                                       `json:"service_tag"`
	VirtualNetworkSubnetId string                                       `json:"virtual_network_subnet_id"`
	Headers                []DataSiteConfigScmIpRestrictionHeadersState `json:"headers"`
}

type DataSiteConfigScmIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type DataSiteConfigCorsState struct {
	AllowedOrigins     []string `json:"allowed_origins"`
	SupportCredentials bool     `json:"support_credentials"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
