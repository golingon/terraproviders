// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_app.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asca *Resource) Type() string {
	return "azurerm_spring_cloud_app"
}

// LocalName returns the local name for [Resource].
func (asca *Resource) LocalName() string {
	return asca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asca *Resource) Configuration() interface{} {
	return asca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asca *Resource) Dependencies() terra.Dependencies {
	return asca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asca *Resource) LifecycleManagement() *terra.Lifecycle {
	return asca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asca *Resource) Attributes() azurermSpringCloudAppAttributes {
	return azurermSpringCloudAppAttributes{ref: terra.ReferenceResource(asca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asca *Resource) ImportState(state io.Reader) error {
	asca.state = &azurermSpringCloudAppState{}
	if err := json.NewDecoder(state).Decode(asca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asca.Type(), asca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asca *Resource) State() (*azurermSpringCloudAppState, bool) {
	return asca.state, asca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asca *Resource) StateMust() *azurermSpringCloudAppState {
	if asca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asca.Type(), asca.LocalName()))
	}
	return asca.state
}

// Args contains the configurations for azurerm_spring_cloud_app.
type Args struct {
	// AddonJson: string, optional
	AddonJson terra.StringValue `hcl:"addon_json,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsPublic: bool, optional
	IsPublic terra.BoolValue `hcl:"is_public,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicEndpointEnabled: bool, optional
	PublicEndpointEnabled terra.BoolValue `hcl:"public_endpoint_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// TlsEnabled: bool, optional
	TlsEnabled terra.BoolValue `hcl:"tls_enabled,attr"`
	// CustomPersistentDisk: min=0
	CustomPersistentDisk []CustomPersistentDisk `hcl:"custom_persistent_disk,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// IngressSettings: optional
	IngressSettings *IngressSettings `hcl:"ingress_settings,block"`
	// PersistentDisk: optional
	PersistentDisk *PersistentDisk `hcl:"persistent_disk,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudAppAttributes struct {
	ref terra.Reference
}

// AddonJson returns a reference to field addon_json of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) AddonJson() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("addon_json"))
}

// Fqdn returns a reference to field fqdn of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("fqdn"))
}

// HttpsOnly returns a reference to field https_only of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(asca.ref.Append("https_only"))
}

// Id returns a reference to field id of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("id"))
}

// IsPublic returns a reference to field is_public of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) IsPublic() terra.BoolValue {
	return terra.ReferenceAsBool(asca.ref.Append("is_public"))
}

// Name returns a reference to field name of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("name"))
}

// PublicEndpointEnabled returns a reference to field public_endpoint_enabled of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) PublicEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asca.ref.Append("public_endpoint_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("resource_group_name"))
}

// ServiceName returns a reference to field service_name of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("service_name"))
}

// TlsEnabled returns a reference to field tls_enabled of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) TlsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asca.ref.Append("tls_enabled"))
}

// Url returns a reference to field url of azurerm_spring_cloud_app.
func (asca azurermSpringCloudAppAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(asca.ref.Append("url"))
}

func (asca azurermSpringCloudAppAttributes) CustomPersistentDisk() terra.ListValue[CustomPersistentDiskAttributes] {
	return terra.ReferenceAsList[CustomPersistentDiskAttributes](asca.ref.Append("custom_persistent_disk"))
}

func (asca azurermSpringCloudAppAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](asca.ref.Append("identity"))
}

func (asca azurermSpringCloudAppAttributes) IngressSettings() terra.ListValue[IngressSettingsAttributes] {
	return terra.ReferenceAsList[IngressSettingsAttributes](asca.ref.Append("ingress_settings"))
}

func (asca azurermSpringCloudAppAttributes) PersistentDisk() terra.ListValue[PersistentDiskAttributes] {
	return terra.ReferenceAsList[PersistentDiskAttributes](asca.ref.Append("persistent_disk"))
}

func (asca azurermSpringCloudAppAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asca.ref.Append("timeouts"))
}

type azurermSpringCloudAppState struct {
	AddonJson             string                      `json:"addon_json"`
	Fqdn                  string                      `json:"fqdn"`
	HttpsOnly             bool                        `json:"https_only"`
	Id                    string                      `json:"id"`
	IsPublic              bool                        `json:"is_public"`
	Name                  string                      `json:"name"`
	PublicEndpointEnabled bool                        `json:"public_endpoint_enabled"`
	ResourceGroupName     string                      `json:"resource_group_name"`
	ServiceName           string                      `json:"service_name"`
	TlsEnabled            bool                        `json:"tls_enabled"`
	Url                   string                      `json:"url"`
	CustomPersistentDisk  []CustomPersistentDiskState `json:"custom_persistent_disk"`
	Identity              []IdentityState             `json:"identity"`
	IngressSettings       []IngressSettingsState      `json:"ingress_settings"`
	PersistentDisk        []PersistentDiskState       `json:"persistent_disk"`
	Timeouts              *TimeoutsState              `json:"timeouts"`
}
