// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_disk_pool_managed_disk_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_disk_pool_managed_disk_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDiskPoolManagedDiskAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpmda *Resource) Type() string {
	return "azurerm_disk_pool_managed_disk_attachment"
}

// LocalName returns the local name for [Resource].
func (adpmda *Resource) LocalName() string {
	return adpmda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpmda *Resource) Configuration() interface{} {
	return adpmda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpmda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpmda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpmda *Resource) Dependencies() terra.Dependencies {
	return adpmda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpmda *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpmda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpmda *Resource) Attributes() azurermDiskPoolManagedDiskAttachmentAttributes {
	return azurermDiskPoolManagedDiskAttachmentAttributes{ref: terra.ReferenceResource(adpmda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpmda *Resource) ImportState(state io.Reader) error {
	adpmda.state = &azurermDiskPoolManagedDiskAttachmentState{}
	if err := json.NewDecoder(state).Decode(adpmda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpmda.Type(), adpmda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpmda *Resource) State() (*azurermDiskPoolManagedDiskAttachmentState, bool) {
	return adpmda.state, adpmda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpmda *Resource) StateMust() *azurermDiskPoolManagedDiskAttachmentState {
	if adpmda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpmda.Type(), adpmda.LocalName()))
	}
	return adpmda.state
}

// Args contains the configurations for azurerm_disk_pool_managed_disk_attachment.
type Args struct {
	// DiskPoolId: string, required
	DiskPoolId terra.StringValue `hcl:"disk_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedDiskId: string, required
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDiskPoolManagedDiskAttachmentAttributes struct {
	ref terra.Reference
}

// DiskPoolId returns a reference to field disk_pool_id of azurerm_disk_pool_managed_disk_attachment.
func (adpmda azurermDiskPoolManagedDiskAttachmentAttributes) DiskPoolId() terra.StringValue {
	return terra.ReferenceAsString(adpmda.ref.Append("disk_pool_id"))
}

// Id returns a reference to field id of azurerm_disk_pool_managed_disk_attachment.
func (adpmda azurermDiskPoolManagedDiskAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpmda.ref.Append("id"))
}

// ManagedDiskId returns a reference to field managed_disk_id of azurerm_disk_pool_managed_disk_attachment.
func (adpmda azurermDiskPoolManagedDiskAttachmentAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(adpmda.ref.Append("managed_disk_id"))
}

func (adpmda azurermDiskPoolManagedDiskAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpmda.ref.Append("timeouts"))
}

type azurermDiskPoolManagedDiskAttachmentState struct {
	DiskPoolId    string         `json:"disk_pool_id"`
	Id            string         `json:"id"`
	ManagedDiskId string         `json:"managed_disk_id"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
