// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_connected_registry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_connected_registry.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerConnectedRegistryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accr *Resource) Type() string {
	return "azurerm_container_connected_registry"
}

// LocalName returns the local name for [Resource].
func (accr *Resource) LocalName() string {
	return accr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accr *Resource) Configuration() interface{} {
	return accr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accr *Resource) Dependencies() terra.Dependencies {
	return accr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accr *Resource) LifecycleManagement() *terra.Lifecycle {
	return accr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accr *Resource) Attributes() azurermContainerConnectedRegistryAttributes {
	return azurermContainerConnectedRegistryAttributes{ref: terra.ReferenceResource(accr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accr *Resource) ImportState(state io.Reader) error {
	accr.state = &azurermContainerConnectedRegistryState{}
	if err := json.NewDecoder(state).Decode(accr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accr.Type(), accr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accr *Resource) State() (*azurermContainerConnectedRegistryState, bool) {
	return accr.state, accr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accr *Resource) StateMust() *azurermContainerConnectedRegistryState {
	if accr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accr.Type(), accr.LocalName()))
	}
	return accr.state
}

// Args contains the configurations for azurerm_container_connected_registry.
type Args struct {
	// AuditLogEnabled: bool, optional
	AuditLogEnabled terra.BoolValue `hcl:"audit_log_enabled,attr"`
	// ClientTokenIds: list of string, optional
	ClientTokenIds terra.ListValue[terra.StringValue] `hcl:"client_token_ids,attr"`
	// ContainerRegistryId: string, required
	ContainerRegistryId terra.StringValue `hcl:"container_registry_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentRegistryId: string, optional
	ParentRegistryId terra.StringValue `hcl:"parent_registry_id,attr"`
	// SyncMessageTtl: string, optional
	SyncMessageTtl terra.StringValue `hcl:"sync_message_ttl,attr"`
	// SyncSchedule: string, optional
	SyncSchedule terra.StringValue `hcl:"sync_schedule,attr"`
	// SyncTokenId: string, required
	SyncTokenId terra.StringValue `hcl:"sync_token_id,attr" validate:"required"`
	// SyncWindow: string, optional
	SyncWindow terra.StringValue `hcl:"sync_window,attr"`
	// Notification: min=0
	Notification []Notification `hcl:"notification,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermContainerConnectedRegistryAttributes struct {
	ref terra.Reference
}

// AuditLogEnabled returns a reference to field audit_log_enabled of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) AuditLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(accr.ref.Append("audit_log_enabled"))
}

// ClientTokenIds returns a reference to field client_token_ids of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) ClientTokenIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](accr.ref.Append("client_token_ids"))
}

// ContainerRegistryId returns a reference to field container_registry_id of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) ContainerRegistryId() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("container_registry_id"))
}

// Id returns a reference to field id of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("id"))
}

// LogLevel returns a reference to field log_level of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("log_level"))
}

// Mode returns a reference to field mode of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("mode"))
}

// Name returns a reference to field name of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("name"))
}

// ParentRegistryId returns a reference to field parent_registry_id of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) ParentRegistryId() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("parent_registry_id"))
}

// SyncMessageTtl returns a reference to field sync_message_ttl of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) SyncMessageTtl() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("sync_message_ttl"))
}

// SyncSchedule returns a reference to field sync_schedule of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) SyncSchedule() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("sync_schedule"))
}

// SyncTokenId returns a reference to field sync_token_id of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) SyncTokenId() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("sync_token_id"))
}

// SyncWindow returns a reference to field sync_window of azurerm_container_connected_registry.
func (accr azurermContainerConnectedRegistryAttributes) SyncWindow() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("sync_window"))
}

func (accr azurermContainerConnectedRegistryAttributes) Notification() terra.ListValue[NotificationAttributes] {
	return terra.ReferenceAsList[NotificationAttributes](accr.ref.Append("notification"))
}

func (accr azurermContainerConnectedRegistryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](accr.ref.Append("timeouts"))
}

type azurermContainerConnectedRegistryState struct {
	AuditLogEnabled     bool                `json:"audit_log_enabled"`
	ClientTokenIds      []string            `json:"client_token_ids"`
	ContainerRegistryId string              `json:"container_registry_id"`
	Id                  string              `json:"id"`
	LogLevel            string              `json:"log_level"`
	Mode                string              `json:"mode"`
	Name                string              `json:"name"`
	ParentRegistryId    string              `json:"parent_registry_id"`
	SyncMessageTtl      string              `json:"sync_message_ttl"`
	SyncSchedule        string              `json:"sync_schedule"`
	SyncTokenId         string              `json:"sync_token_id"`
	SyncWindow          string              `json:"sync_window"`
	Notification        []NotificationState `json:"notification"`
	Timeouts            *TimeoutsState      `json:"timeouts"`
}
