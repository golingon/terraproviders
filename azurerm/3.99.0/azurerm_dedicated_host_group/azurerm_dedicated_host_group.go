// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dedicated_host_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dedicated_host_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDedicatedHostGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adhg *Resource) Type() string {
	return "azurerm_dedicated_host_group"
}

// LocalName returns the local name for [Resource].
func (adhg *Resource) LocalName() string {
	return adhg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adhg *Resource) Configuration() interface{} {
	return adhg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adhg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adhg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adhg *Resource) Dependencies() terra.Dependencies {
	return adhg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adhg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adhg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adhg *Resource) Attributes() azurermDedicatedHostGroupAttributes {
	return azurermDedicatedHostGroupAttributes{ref: terra.ReferenceResource(adhg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adhg *Resource) ImportState(state io.Reader) error {
	adhg.state = &azurermDedicatedHostGroupState{}
	if err := json.NewDecoder(state).Decode(adhg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adhg.Type(), adhg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adhg *Resource) State() (*azurermDedicatedHostGroupState, bool) {
	return adhg.state, adhg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adhg *Resource) StateMust() *azurermDedicatedHostGroupState {
	if adhg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adhg.Type(), adhg.LocalName()))
	}
	return adhg.state
}

// Args contains the configurations for azurerm_dedicated_host_group.
type Args struct {
	// AutomaticPlacementEnabled: bool, optional
	AutomaticPlacementEnabled terra.BoolValue `hcl:"automatic_placement_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformFaultDomainCount: number, required
	PlatformFaultDomainCount terra.NumberValue `hcl:"platform_fault_domain_count,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDedicatedHostGroupAttributes struct {
	ref terra.Reference
}

// AutomaticPlacementEnabled returns a reference to field automatic_placement_enabled of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) AutomaticPlacementEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adhg.ref.Append("automatic_placement_enabled"))
}

// Id returns a reference to field id of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adhg.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adhg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adhg.ref.Append("name"))
}

// PlatformFaultDomainCount returns a reference to field platform_fault_domain_count of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) PlatformFaultDomainCount() terra.NumberValue {
	return terra.ReferenceAsNumber(adhg.ref.Append("platform_fault_domain_count"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adhg.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adhg.ref.Append("tags"))
}

// Zone returns a reference to field zone of azurerm_dedicated_host_group.
func (adhg azurermDedicatedHostGroupAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(adhg.ref.Append("zone"))
}

func (adhg azurermDedicatedHostGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adhg.ref.Append("timeouts"))
}

type azurermDedicatedHostGroupState struct {
	AutomaticPlacementEnabled bool              `json:"automatic_placement_enabled"`
	Id                        string            `json:"id"`
	Location                  string            `json:"location"`
	Name                      string            `json:"name"`
	PlatformFaultDomainCount  float64           `json:"platform_fault_domain_count"`
	ResourceGroupName         string            `json:"resource_group_name"`
	Tags                      map[string]string `json:"tags"`
	Zone                      string            `json:"zone"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
