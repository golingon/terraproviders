// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_pipeline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_pipeline.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryPipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfp *Resource) Type() string {
	return "azurerm_data_factory_pipeline"
}

// LocalName returns the local name for [Resource].
func (adfp *Resource) LocalName() string {
	return adfp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfp *Resource) Configuration() interface{} {
	return adfp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfp *Resource) Dependencies() terra.Dependencies {
	return adfp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfp *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfp *Resource) Attributes() azurermDataFactoryPipelineAttributes {
	return azurermDataFactoryPipelineAttributes{ref: terra.ReferenceResource(adfp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfp *Resource) ImportState(state io.Reader) error {
	adfp.state = &azurermDataFactoryPipelineState{}
	if err := json.NewDecoder(state).Decode(adfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfp.Type(), adfp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfp *Resource) State() (*azurermDataFactoryPipelineState, bool) {
	return adfp.state, adfp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfp *Resource) StateMust() *azurermDataFactoryPipelineState {
	if adfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfp.Type(), adfp.LocalName()))
	}
	return adfp.state
}

// Args contains the configurations for azurerm_data_factory_pipeline.
type Args struct {
	// ActivitiesJson: string, optional
	ActivitiesJson terra.StringValue `hcl:"activities_json,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// Concurrency: number, optional
	Concurrency terra.NumberValue `hcl:"concurrency,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MoniterMetricsAfterDuration: string, optional
	MoniterMetricsAfterDuration terra.StringValue `hcl:"moniter_metrics_after_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryPipelineAttributes struct {
	ref terra.Reference
}

// ActivitiesJson returns a reference to field activities_json of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) ActivitiesJson() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("activities_json"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfp.ref.Append("annotations"))
}

// Concurrency returns a reference to field concurrency of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(adfp.ref.Append("concurrency"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("id"))
}

// MoniterMetricsAfterDuration returns a reference to field moniter_metrics_after_duration of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) MoniterMetricsAfterDuration() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("moniter_metrics_after_duration"))
}

// Name returns a reference to field name of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfp.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfp.ref.Append("parameters"))
}

// Variables returns a reference to field variables of azurerm_data_factory_pipeline.
func (adfp azurermDataFactoryPipelineAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfp.ref.Append("variables"))
}

func (adfp azurermDataFactoryPipelineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfp.ref.Append("timeouts"))
}

type azurermDataFactoryPipelineState struct {
	ActivitiesJson              string            `json:"activities_json"`
	Annotations                 []string          `json:"annotations"`
	Concurrency                 float64           `json:"concurrency"`
	DataFactoryId               string            `json:"data_factory_id"`
	Description                 string            `json:"description"`
	Folder                      string            `json:"folder"`
	Id                          string            `json:"id"`
	MoniterMetricsAfterDuration string            `json:"moniter_metrics_after_duration"`
	Name                        string            `json:"name"`
	Parameters                  map[string]string `json:"parameters"`
	Variables                   map[string]string `json:"variables"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
