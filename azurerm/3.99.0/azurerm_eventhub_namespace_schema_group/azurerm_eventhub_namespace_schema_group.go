// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_eventhub_namespace_schema_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_eventhub_namespace_schema_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermEventhubNamespaceSchemaGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aensg *Resource) Type() string {
	return "azurerm_eventhub_namespace_schema_group"
}

// LocalName returns the local name for [Resource].
func (aensg *Resource) LocalName() string {
	return aensg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aensg *Resource) Configuration() interface{} {
	return aensg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aensg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aensg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aensg *Resource) Dependencies() terra.Dependencies {
	return aensg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aensg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aensg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aensg *Resource) Attributes() azurermEventhubNamespaceSchemaGroupAttributes {
	return azurermEventhubNamespaceSchemaGroupAttributes{ref: terra.ReferenceResource(aensg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aensg *Resource) ImportState(state io.Reader) error {
	aensg.state = &azurermEventhubNamespaceSchemaGroupState{}
	if err := json.NewDecoder(state).Decode(aensg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aensg.Type(), aensg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aensg *Resource) State() (*azurermEventhubNamespaceSchemaGroupState, bool) {
	return aensg.state, aensg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aensg *Resource) StateMust() *azurermEventhubNamespaceSchemaGroupState {
	if aensg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aensg.Type(), aensg.LocalName()))
	}
	return aensg.state
}

// Args contains the configurations for azurerm_eventhub_namespace_schema_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceId: string, required
	NamespaceId terra.StringValue `hcl:"namespace_id,attr" validate:"required"`
	// SchemaCompatibility: string, required
	SchemaCompatibility terra.StringValue `hcl:"schema_compatibility,attr" validate:"required"`
	// SchemaType: string, required
	SchemaType terra.StringValue `hcl:"schema_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermEventhubNamespaceSchemaGroupAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_eventhub_namespace_schema_group.
func (aensg azurermEventhubNamespaceSchemaGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aensg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_eventhub_namespace_schema_group.
func (aensg azurermEventhubNamespaceSchemaGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aensg.ref.Append("name"))
}

// NamespaceId returns a reference to field namespace_id of azurerm_eventhub_namespace_schema_group.
func (aensg azurermEventhubNamespaceSchemaGroupAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(aensg.ref.Append("namespace_id"))
}

// SchemaCompatibility returns a reference to field schema_compatibility of azurerm_eventhub_namespace_schema_group.
func (aensg azurermEventhubNamespaceSchemaGroupAttributes) SchemaCompatibility() terra.StringValue {
	return terra.ReferenceAsString(aensg.ref.Append("schema_compatibility"))
}

// SchemaType returns a reference to field schema_type of azurerm_eventhub_namespace_schema_group.
func (aensg azurermEventhubNamespaceSchemaGroupAttributes) SchemaType() terra.StringValue {
	return terra.ReferenceAsString(aensg.ref.Append("schema_type"))
}

func (aensg azurermEventhubNamespaceSchemaGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aensg.ref.Append("timeouts"))
}

type azurermEventhubNamespaceSchemaGroupState struct {
	Id                  string         `json:"id"`
	Name                string         `json:"name"`
	NamespaceId         string         `json:"namespace_id"`
	SchemaCompatibility string         `json:"schema_compatibility"`
	SchemaType          string         `json:"schema_type"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
