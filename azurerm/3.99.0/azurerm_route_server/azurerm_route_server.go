// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_route_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_route_server.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRouteServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ars *Resource) Type() string {
	return "azurerm_route_server"
}

// LocalName returns the local name for [Resource].
func (ars *Resource) LocalName() string {
	return ars.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ars *Resource) Configuration() interface{} {
	return ars.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ars *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ars)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ars *Resource) Dependencies() terra.Dependencies {
	return ars.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ars *Resource) LifecycleManagement() *terra.Lifecycle {
	return ars.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ars *Resource) Attributes() azurermRouteServerAttributes {
	return azurermRouteServerAttributes{ref: terra.ReferenceResource(ars)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ars *Resource) ImportState(state io.Reader) error {
	ars.state = &azurermRouteServerState{}
	if err := json.NewDecoder(state).Decode(ars.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ars.Type(), ars.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ars *Resource) State() (*azurermRouteServerState, bool) {
	return ars.state, ars.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ars *Resource) StateMust() *azurermRouteServerState {
	if ars.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ars.Type(), ars.LocalName()))
	}
	return ars.state
}

// Args contains the configurations for azurerm_route_server.
type Args struct {
	// BranchToBranchTrafficEnabled: bool, optional
	BranchToBranchTrafficEnabled terra.BoolValue `hcl:"branch_to_branch_traffic_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicIpAddressId: string, required
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRouteServerAttributes struct {
	ref terra.Reference
}

// BranchToBranchTrafficEnabled returns a reference to field branch_to_branch_traffic_enabled of azurerm_route_server.
func (ars azurermRouteServerAttributes) BranchToBranchTrafficEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ars.ref.Append("branch_to_branch_traffic_enabled"))
}

// Id returns a reference to field id of azurerm_route_server.
func (ars azurermRouteServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_route_server.
func (ars azurermRouteServerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_route_server.
func (ars azurermRouteServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("name"))
}

// PublicIpAddressId returns a reference to field public_ip_address_id of azurerm_route_server.
func (ars azurermRouteServerAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("public_ip_address_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_route_server.
func (ars azurermRouteServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("resource_group_name"))
}

// RoutingState returns a reference to field routing_state of azurerm_route_server.
func (ars azurermRouteServerAttributes) RoutingState() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("routing_state"))
}

// Sku returns a reference to field sku of azurerm_route_server.
func (ars azurermRouteServerAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("sku"))
}

// SubnetId returns a reference to field subnet_id of azurerm_route_server.
func (ars azurermRouteServerAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_route_server.
func (ars azurermRouteServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ars.ref.Append("tags"))
}

// VirtualRouterAsn returns a reference to field virtual_router_asn of azurerm_route_server.
func (ars azurermRouteServerAttributes) VirtualRouterAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(ars.ref.Append("virtual_router_asn"))
}

// VirtualRouterIps returns a reference to field virtual_router_ips of azurerm_route_server.
func (ars azurermRouteServerAttributes) VirtualRouterIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ars.ref.Append("virtual_router_ips"))
}

func (ars azurermRouteServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ars.ref.Append("timeouts"))
}

type azurermRouteServerState struct {
	BranchToBranchTrafficEnabled bool              `json:"branch_to_branch_traffic_enabled"`
	Id                           string            `json:"id"`
	Location                     string            `json:"location"`
	Name                         string            `json:"name"`
	PublicIpAddressId            string            `json:"public_ip_address_id"`
	ResourceGroupName            string            `json:"resource_group_name"`
	RoutingState                 string            `json:"routing_state"`
	Sku                          string            `json:"sku"`
	SubnetId                     string            `json:"subnet_id"`
	Tags                         map[string]string `json:"tags"`
	VirtualRouterAsn             float64           `json:"virtual_router_asn"`
	VirtualRouterIps             []string          `json:"virtual_router_ips"`
	Timeouts                     *TimeoutsState    `json:"timeouts"`
}
