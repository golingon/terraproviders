// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_elastic_san_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_elastic_san_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermElasticSanVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aesv *Resource) Type() string {
	return "azurerm_elastic_san_volume"
}

// LocalName returns the local name for [Resource].
func (aesv *Resource) LocalName() string {
	return aesv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aesv *Resource) Configuration() interface{} {
	return aesv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aesv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aesv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aesv *Resource) Dependencies() terra.Dependencies {
	return aesv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aesv *Resource) LifecycleManagement() *terra.Lifecycle {
	return aesv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aesv *Resource) Attributes() azurermElasticSanVolumeAttributes {
	return azurermElasticSanVolumeAttributes{ref: terra.ReferenceResource(aesv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aesv *Resource) ImportState(state io.Reader) error {
	aesv.state = &azurermElasticSanVolumeState{}
	if err := json.NewDecoder(state).Decode(aesv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesv.Type(), aesv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aesv *Resource) State() (*azurermElasticSanVolumeState, bool) {
	return aesv.state, aesv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aesv *Resource) StateMust() *azurermElasticSanVolumeState {
	if aesv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesv.Type(), aesv.LocalName()))
	}
	return aesv.state
}

// Args contains the configurations for azurerm_elastic_san_volume.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SizeInGib: number, required
	SizeInGib terra.NumberValue `hcl:"size_in_gib,attr" validate:"required"`
	// VolumeGroupId: string, required
	VolumeGroupId terra.StringValue `hcl:"volume_group_id,attr" validate:"required"`
	// CreateSource: optional
	CreateSource *CreateSource `hcl:"create_source,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermElasticSanVolumeAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("name"))
}

// SizeInGib returns a reference to field size_in_gib of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(aesv.ref.Append("size_in_gib"))
}

// TargetIqn returns a reference to field target_iqn of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) TargetIqn() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("target_iqn"))
}

// TargetPortalHostname returns a reference to field target_portal_hostname of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) TargetPortalHostname() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("target_portal_hostname"))
}

// TargetPortalPort returns a reference to field target_portal_port of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) TargetPortalPort() terra.NumberValue {
	return terra.ReferenceAsNumber(aesv.ref.Append("target_portal_port"))
}

// VolumeGroupId returns a reference to field volume_group_id of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) VolumeGroupId() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("volume_group_id"))
}

// VolumeId returns a reference to field volume_id of azurerm_elastic_san_volume.
func (aesv azurermElasticSanVolumeAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(aesv.ref.Append("volume_id"))
}

func (aesv azurermElasticSanVolumeAttributes) CreateSource() terra.ListValue[CreateSourceAttributes] {
	return terra.ReferenceAsList[CreateSourceAttributes](aesv.ref.Append("create_source"))
}

func (aesv azurermElasticSanVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aesv.ref.Append("timeouts"))
}

type azurermElasticSanVolumeState struct {
	Id                   string              `json:"id"`
	Name                 string              `json:"name"`
	SizeInGib            float64             `json:"size_in_gib"`
	TargetIqn            string              `json:"target_iqn"`
	TargetPortalHostname string              `json:"target_portal_hostname"`
	TargetPortalPort     float64             `json:"target_portal_port"`
	VolumeGroupId        string              `json:"volume_group_id"`
	VolumeId             string              `json:"volume_id"`
	CreateSource         []CreateSourceState `json:"create_source"`
	Timeouts             *TimeoutsState      `json:"timeouts"`
}
