// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_integration_runtime_azure_ssis

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogInfo struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorPassword: string, optional
	AdministratorPassword terra.StringValue `hcl:"administrator_password,attr"`
	// DualStandbyPairName: string, optional
	DualStandbyPairName terra.StringValue `hcl:"dual_standby_pair_name,attr"`
	// ElasticPoolName: string, optional
	ElasticPoolName terra.StringValue `hcl:"elastic_pool_name,attr"`
	// PricingTier: string, optional
	PricingTier terra.StringValue `hcl:"pricing_tier,attr"`
	// ServerEndpoint: string, required
	ServerEndpoint terra.StringValue `hcl:"server_endpoint,attr" validate:"required"`
}

type CopyComputeScale struct {
	// DataIntegrationUnit: number, optional
	DataIntegrationUnit terra.NumberValue `hcl:"data_integration_unit,attr"`
	// TimeToLive: number, optional
	TimeToLive terra.NumberValue `hcl:"time_to_live,attr"`
}

type CustomSetupScript struct {
	// BlobContainerUri: string, required
	BlobContainerUri terra.StringValue `hcl:"blob_container_uri,attr" validate:"required"`
	// SasToken: string, required
	SasToken terra.StringValue `hcl:"sas_token,attr" validate:"required"`
}

type ExpressCustomSetup struct {
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// PowershellVersion: string, optional
	PowershellVersion terra.StringValue `hcl:"powershell_version,attr"`
	// ExpressCustomSetupCommandKey: min=0
	CommandKey []ExpressCustomSetupCommandKey `hcl:"command_key,block" validate:"min=0"`
	// ExpressCustomSetupComponent: min=0
	Component []ExpressCustomSetupComponent `hcl:"component,block" validate:"min=0"`
}

type ExpressCustomSetupCommandKey struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// TargetName: string, required
	TargetName terra.StringValue `hcl:"target_name,attr" validate:"required"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// ExpressCustomSetupCommandKeyKeyVaultPassword: optional
	KeyVaultPassword *ExpressCustomSetupCommandKeyKeyVaultPassword `hcl:"key_vault_password,block"`
}

type ExpressCustomSetupCommandKeyKeyVaultPassword struct {
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
	// SecretVersion: string, optional
	SecretVersion terra.StringValue `hcl:"secret_version,attr"`
}

type ExpressCustomSetupComponent struct {
	// License: string, optional
	License terra.StringValue `hcl:"license,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ExpressCustomSetupComponentKeyVaultLicense: optional
	KeyVaultLicense *ExpressCustomSetupComponentKeyVaultLicense `hcl:"key_vault_license,block"`
}

type ExpressCustomSetupComponentKeyVaultLicense struct {
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
	// SecretVersion: string, optional
	SecretVersion terra.StringValue `hcl:"secret_version,attr"`
}

type ExpressVnetIntegration struct {
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type PackageStore struct {
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type PipelineExternalComputeScale struct {
	// NumberOfExternalNodes: number, optional
	NumberOfExternalNodes terra.NumberValue `hcl:"number_of_external_nodes,attr"`
	// NumberOfPipelineNodes: number, optional
	NumberOfPipelineNodes terra.NumberValue `hcl:"number_of_pipeline_nodes,attr"`
	// TimeToLive: number, optional
	TimeToLive terra.NumberValue `hcl:"time_to_live,attr"`
}

type Proxy struct {
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// SelfHostedIntegrationRuntimeName: string, required
	SelfHostedIntegrationRuntimeName terra.StringValue `hcl:"self_hosted_integration_runtime_name,attr" validate:"required"`
	// StagingStorageLinkedServiceName: string, required
	StagingStorageLinkedServiceName terra.StringValue `hcl:"staging_storage_linked_service_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VnetIntegration struct {
	// PublicIps: list of string, optional
	PublicIps terra.ListValue[terra.StringValue] `hcl:"public_ips,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// SubnetName: string, optional
	SubnetName terra.StringValue `hcl:"subnet_name,attr"`
	// VnetId: string, optional
	VnetId terra.StringValue `hcl:"vnet_id,attr"`
}

type CatalogInfoAttributes struct {
	ref terra.Reference
}

func (ci CatalogInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CatalogInfoAttributes) InternalWithRef(ref terra.Reference) CatalogInfoAttributes {
	return CatalogInfoAttributes{ref: ref}
}

func (ci CatalogInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CatalogInfoAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("administrator_login"))
}

func (ci CatalogInfoAttributes) AdministratorPassword() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("administrator_password"))
}

func (ci CatalogInfoAttributes) DualStandbyPairName() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("dual_standby_pair_name"))
}

func (ci CatalogInfoAttributes) ElasticPoolName() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("elastic_pool_name"))
}

func (ci CatalogInfoAttributes) PricingTier() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("pricing_tier"))
}

func (ci CatalogInfoAttributes) ServerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("server_endpoint"))
}

type CopyComputeScaleAttributes struct {
	ref terra.Reference
}

func (ccs CopyComputeScaleAttributes) InternalRef() (terra.Reference, error) {
	return ccs.ref, nil
}

func (ccs CopyComputeScaleAttributes) InternalWithRef(ref terra.Reference) CopyComputeScaleAttributes {
	return CopyComputeScaleAttributes{ref: ref}
}

func (ccs CopyComputeScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccs.ref.InternalTokens()
}

func (ccs CopyComputeScaleAttributes) DataIntegrationUnit() terra.NumberValue {
	return terra.ReferenceAsNumber(ccs.ref.Append("data_integration_unit"))
}

func (ccs CopyComputeScaleAttributes) TimeToLive() terra.NumberValue {
	return terra.ReferenceAsNumber(ccs.ref.Append("time_to_live"))
}

type CustomSetupScriptAttributes struct {
	ref terra.Reference
}

func (css CustomSetupScriptAttributes) InternalRef() (terra.Reference, error) {
	return css.ref, nil
}

func (css CustomSetupScriptAttributes) InternalWithRef(ref terra.Reference) CustomSetupScriptAttributes {
	return CustomSetupScriptAttributes{ref: ref}
}

func (css CustomSetupScriptAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return css.ref.InternalTokens()
}

func (css CustomSetupScriptAttributes) BlobContainerUri() terra.StringValue {
	return terra.ReferenceAsString(css.ref.Append("blob_container_uri"))
}

func (css CustomSetupScriptAttributes) SasToken() terra.StringValue {
	return terra.ReferenceAsString(css.ref.Append("sas_token"))
}

type ExpressCustomSetupAttributes struct {
	ref terra.Reference
}

func (ecs ExpressCustomSetupAttributes) InternalRef() (terra.Reference, error) {
	return ecs.ref, nil
}

func (ecs ExpressCustomSetupAttributes) InternalWithRef(ref terra.Reference) ExpressCustomSetupAttributes {
	return ExpressCustomSetupAttributes{ref: ref}
}

func (ecs ExpressCustomSetupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ecs.ref.InternalTokens()
}

func (ecs ExpressCustomSetupAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ecs.ref.Append("environment"))
}

func (ecs ExpressCustomSetupAttributes) PowershellVersion() terra.StringValue {
	return terra.ReferenceAsString(ecs.ref.Append("powershell_version"))
}

func (ecs ExpressCustomSetupAttributes) CommandKey() terra.ListValue[ExpressCustomSetupCommandKeyAttributes] {
	return terra.ReferenceAsList[ExpressCustomSetupCommandKeyAttributes](ecs.ref.Append("command_key"))
}

func (ecs ExpressCustomSetupAttributes) Component() terra.ListValue[ExpressCustomSetupComponentAttributes] {
	return terra.ReferenceAsList[ExpressCustomSetupComponentAttributes](ecs.ref.Append("component"))
}

type ExpressCustomSetupCommandKeyAttributes struct {
	ref terra.Reference
}

func (ck ExpressCustomSetupCommandKeyAttributes) InternalRef() (terra.Reference, error) {
	return ck.ref, nil
}

func (ck ExpressCustomSetupCommandKeyAttributes) InternalWithRef(ref terra.Reference) ExpressCustomSetupCommandKeyAttributes {
	return ExpressCustomSetupCommandKeyAttributes{ref: ref}
}

func (ck ExpressCustomSetupCommandKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ck.ref.InternalTokens()
}

func (ck ExpressCustomSetupCommandKeyAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("password"))
}

func (ck ExpressCustomSetupCommandKeyAttributes) TargetName() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("target_name"))
}

func (ck ExpressCustomSetupCommandKeyAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("user_name"))
}

func (ck ExpressCustomSetupCommandKeyAttributes) KeyVaultPassword() terra.ListValue[ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes] {
	return terra.ReferenceAsList[ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes](ck.ref.Append("key_vault_password"))
}

type ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes struct {
	ref terra.Reference
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) InternalRef() (terra.Reference, error) {
	return kvp.ref, nil
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) InternalWithRef(ref terra.Reference) ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes {
	return ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes{ref: ref}
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvp.ref.InternalTokens()
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(kvp.ref.Append("linked_service_name"))
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kvp.ref.Append("parameters"))
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(kvp.ref.Append("secret_name"))
}

func (kvp ExpressCustomSetupCommandKeyKeyVaultPasswordAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(kvp.ref.Append("secret_version"))
}

type ExpressCustomSetupComponentAttributes struct {
	ref terra.Reference
}

func (c ExpressCustomSetupComponentAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ExpressCustomSetupComponentAttributes) InternalWithRef(ref terra.Reference) ExpressCustomSetupComponentAttributes {
	return ExpressCustomSetupComponentAttributes{ref: ref}
}

func (c ExpressCustomSetupComponentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ExpressCustomSetupComponentAttributes) License() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("license"))
}

func (c ExpressCustomSetupComponentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ExpressCustomSetupComponentAttributes) KeyVaultLicense() terra.ListValue[ExpressCustomSetupComponentKeyVaultLicenseAttributes] {
	return terra.ReferenceAsList[ExpressCustomSetupComponentKeyVaultLicenseAttributes](c.ref.Append("key_vault_license"))
}

type ExpressCustomSetupComponentKeyVaultLicenseAttributes struct {
	ref terra.Reference
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) InternalRef() (terra.Reference, error) {
	return kvl.ref, nil
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) InternalWithRef(ref terra.Reference) ExpressCustomSetupComponentKeyVaultLicenseAttributes {
	return ExpressCustomSetupComponentKeyVaultLicenseAttributes{ref: ref}
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvl.ref.InternalTokens()
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(kvl.ref.Append("linked_service_name"))
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kvl.ref.Append("parameters"))
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(kvl.ref.Append("secret_name"))
}

func (kvl ExpressCustomSetupComponentKeyVaultLicenseAttributes) SecretVersion() terra.StringValue {
	return terra.ReferenceAsString(kvl.ref.Append("secret_version"))
}

type ExpressVnetIntegrationAttributes struct {
	ref terra.Reference
}

func (evi ExpressVnetIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return evi.ref, nil
}

func (evi ExpressVnetIntegrationAttributes) InternalWithRef(ref terra.Reference) ExpressVnetIntegrationAttributes {
	return ExpressVnetIntegrationAttributes{ref: ref}
}

func (evi ExpressVnetIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return evi.ref.InternalTokens()
}

func (evi ExpressVnetIntegrationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(evi.ref.Append("subnet_id"))
}

type PackageStoreAttributes struct {
	ref terra.Reference
}

func (ps PackageStoreAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PackageStoreAttributes) InternalWithRef(ref terra.Reference) PackageStoreAttributes {
	return PackageStoreAttributes{ref: ref}
}

func (ps PackageStoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PackageStoreAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("linked_service_name"))
}

func (ps PackageStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("name"))
}

type PipelineExternalComputeScaleAttributes struct {
	ref terra.Reference
}

func (pecs PipelineExternalComputeScaleAttributes) InternalRef() (terra.Reference, error) {
	return pecs.ref, nil
}

func (pecs PipelineExternalComputeScaleAttributes) InternalWithRef(ref terra.Reference) PipelineExternalComputeScaleAttributes {
	return PipelineExternalComputeScaleAttributes{ref: ref}
}

func (pecs PipelineExternalComputeScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pecs.ref.InternalTokens()
}

func (pecs PipelineExternalComputeScaleAttributes) NumberOfExternalNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(pecs.ref.Append("number_of_external_nodes"))
}

func (pecs PipelineExternalComputeScaleAttributes) NumberOfPipelineNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(pecs.ref.Append("number_of_pipeline_nodes"))
}

func (pecs PipelineExternalComputeScaleAttributes) TimeToLive() terra.NumberValue {
	return terra.ReferenceAsNumber(pecs.ref.Append("time_to_live"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("path"))
}

func (p ProxyAttributes) SelfHostedIntegrationRuntimeName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("self_hosted_integration_runtime_name"))
}

func (p ProxyAttributes) StagingStorageLinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("staging_storage_linked_service_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VnetIntegrationAttributes struct {
	ref terra.Reference
}

func (vi VnetIntegrationAttributes) InternalRef() (terra.Reference, error) {
	return vi.ref, nil
}

func (vi VnetIntegrationAttributes) InternalWithRef(ref terra.Reference) VnetIntegrationAttributes {
	return VnetIntegrationAttributes{ref: ref}
}

func (vi VnetIntegrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vi.ref.InternalTokens()
}

func (vi VnetIntegrationAttributes) PublicIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vi.ref.Append("public_ips"))
}

func (vi VnetIntegrationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("subnet_id"))
}

func (vi VnetIntegrationAttributes) SubnetName() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("subnet_name"))
}

func (vi VnetIntegrationAttributes) VnetId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("vnet_id"))
}

type CatalogInfoState struct {
	AdministratorLogin    string `json:"administrator_login"`
	AdministratorPassword string `json:"administrator_password"`
	DualStandbyPairName   string `json:"dual_standby_pair_name"`
	ElasticPoolName       string `json:"elastic_pool_name"`
	PricingTier           string `json:"pricing_tier"`
	ServerEndpoint        string `json:"server_endpoint"`
}

type CopyComputeScaleState struct {
	DataIntegrationUnit float64 `json:"data_integration_unit"`
	TimeToLive          float64 `json:"time_to_live"`
}

type CustomSetupScriptState struct {
	BlobContainerUri string `json:"blob_container_uri"`
	SasToken         string `json:"sas_token"`
}

type ExpressCustomSetupState struct {
	Environment       map[string]string                   `json:"environment"`
	PowershellVersion string                              `json:"powershell_version"`
	CommandKey        []ExpressCustomSetupCommandKeyState `json:"command_key"`
	Component         []ExpressCustomSetupComponentState  `json:"component"`
}

type ExpressCustomSetupCommandKeyState struct {
	Password         string                                              `json:"password"`
	TargetName       string                                              `json:"target_name"`
	UserName         string                                              `json:"user_name"`
	KeyVaultPassword []ExpressCustomSetupCommandKeyKeyVaultPasswordState `json:"key_vault_password"`
}

type ExpressCustomSetupCommandKeyKeyVaultPasswordState struct {
	LinkedServiceName string            `json:"linked_service_name"`
	Parameters        map[string]string `json:"parameters"`
	SecretName        string            `json:"secret_name"`
	SecretVersion     string            `json:"secret_version"`
}

type ExpressCustomSetupComponentState struct {
	License         string                                            `json:"license"`
	Name            string                                            `json:"name"`
	KeyVaultLicense []ExpressCustomSetupComponentKeyVaultLicenseState `json:"key_vault_license"`
}

type ExpressCustomSetupComponentKeyVaultLicenseState struct {
	LinkedServiceName string            `json:"linked_service_name"`
	Parameters        map[string]string `json:"parameters"`
	SecretName        string            `json:"secret_name"`
	SecretVersion     string            `json:"secret_version"`
}

type ExpressVnetIntegrationState struct {
	SubnetId string `json:"subnet_id"`
}

type PackageStoreState struct {
	LinkedServiceName string `json:"linked_service_name"`
	Name              string `json:"name"`
}

type PipelineExternalComputeScaleState struct {
	NumberOfExternalNodes float64 `json:"number_of_external_nodes"`
	NumberOfPipelineNodes float64 `json:"number_of_pipeline_nodes"`
	TimeToLive            float64 `json:"time_to_live"`
}

type ProxyState struct {
	Path                             string `json:"path"`
	SelfHostedIntegrationRuntimeName string `json:"self_hosted_integration_runtime_name"`
	StagingStorageLinkedServiceName  string `json:"staging_storage_linked_service_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VnetIntegrationState struct {
	PublicIps  []string `json:"public_ips"`
	SubnetId   string   `json:"subnet_id"`
	SubnetName string   `json:"subnet_name"`
	VnetId     string   `json:"vnet_id"`
}
