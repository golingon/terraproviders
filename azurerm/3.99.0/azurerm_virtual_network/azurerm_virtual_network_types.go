// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_network

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Subnet struct {
	// AddressPrefix: string, optional
	AddressPrefix terra.StringValue `hcl:"address_prefix,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// SecurityGroup: string, optional
	SecurityGroup terra.StringValue `hcl:"security_group,attr"`
}

type DdosProtectionPlan struct {
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type Encryption struct {
	// Enforcement: string, required
	Enforcement terra.StringValue `hcl:"enforcement,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SubnetAttributes struct {
	ref terra.Reference
}

func (s SubnetAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubnetAttributes) InternalWithRef(ref terra.Reference) SubnetAttributes {
	return SubnetAttributes{ref: ref}
}

func (s SubnetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubnetAttributes) AddressPrefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("address_prefix"))
}

func (s SubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

func (s SubnetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SubnetAttributes) SecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("security_group"))
}

type DdosProtectionPlanAttributes struct {
	ref terra.Reference
}

func (dpp DdosProtectionPlanAttributes) InternalRef() (terra.Reference, error) {
	return dpp.ref, nil
}

func (dpp DdosProtectionPlanAttributes) InternalWithRef(ref terra.Reference) DdosProtectionPlanAttributes {
	return DdosProtectionPlanAttributes{ref: ref}
}

func (dpp DdosProtectionPlanAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpp.ref.InternalTokens()
}

func (dpp DdosProtectionPlanAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(dpp.ref.Append("enable"))
}

func (dpp DdosProtectionPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dpp.ref.Append("id"))
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) Enforcement() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("enforcement"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SubnetState struct {
	AddressPrefix string `json:"address_prefix"`
	Id            string `json:"id"`
	Name          string `json:"name"`
	SecurityGroup string `json:"security_group"`
}

type DdosProtectionPlanState struct {
	Enable bool   `json:"enable"`
	Id     string `json:"id"`
}

type EncryptionState struct {
	Enforcement string `json:"enforcement"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
