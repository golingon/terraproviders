// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_gateway_certificate_authority

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_gateway_certificate_authority.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementGatewayCertificateAuthorityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamgca *Resource) Type() string {
	return "azurerm_api_management_gateway_certificate_authority"
}

// LocalName returns the local name for [Resource].
func (aamgca *Resource) LocalName() string {
	return aamgca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamgca *Resource) Configuration() interface{} {
	return aamgca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamgca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamgca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamgca *Resource) Dependencies() terra.Dependencies {
	return aamgca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamgca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamgca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamgca *Resource) Attributes() azurermApiManagementGatewayCertificateAuthorityAttributes {
	return azurermApiManagementGatewayCertificateAuthorityAttributes{ref: terra.ReferenceResource(aamgca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamgca *Resource) ImportState(state io.Reader) error {
	aamgca.state = &azurermApiManagementGatewayCertificateAuthorityState{}
	if err := json.NewDecoder(state).Decode(aamgca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamgca.Type(), aamgca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamgca *Resource) State() (*azurermApiManagementGatewayCertificateAuthorityState, bool) {
	return aamgca.state, aamgca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamgca *Resource) StateMust() *azurermApiManagementGatewayCertificateAuthorityState {
	if aamgca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamgca.Type(), aamgca.LocalName()))
	}
	return aamgca.state
}

// Args contains the configurations for azurerm_api_management_gateway_certificate_authority.
type Args struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// CertificateName: string, required
	CertificateName terra.StringValue `hcl:"certificate_name,attr" validate:"required"`
	// GatewayName: string, required
	GatewayName terra.StringValue `hcl:"gateway_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsTrusted: bool, optional
	IsTrusted terra.BoolValue `hcl:"is_trusted,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementGatewayCertificateAuthorityAttributes struct {
	ref terra.Reference
}

// ApiManagementId returns a reference to field api_management_id of azurerm_api_management_gateway_certificate_authority.
func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceAsString(aamgca.ref.Append("api_management_id"))
}

// CertificateName returns a reference to field certificate_name of azurerm_api_management_gateway_certificate_authority.
func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceAsString(aamgca.ref.Append("certificate_name"))
}

// GatewayName returns a reference to field gateway_name of azurerm_api_management_gateway_certificate_authority.
func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) GatewayName() terra.StringValue {
	return terra.ReferenceAsString(aamgca.ref.Append("gateway_name"))
}

// Id returns a reference to field id of azurerm_api_management_gateway_certificate_authority.
func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamgca.ref.Append("id"))
}

// IsTrusted returns a reference to field is_trusted of azurerm_api_management_gateway_certificate_authority.
func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) IsTrusted() terra.BoolValue {
	return terra.ReferenceAsBool(aamgca.ref.Append("is_trusted"))
}

func (aamgca azurermApiManagementGatewayCertificateAuthorityAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamgca.ref.Append("timeouts"))
}

type azurermApiManagementGatewayCertificateAuthorityState struct {
	ApiManagementId string         `json:"api_management_id"`
	CertificateName string         `json:"certificate_name"`
	GatewayName     string         `json:"gateway_name"`
	Id              string         `json:"id"`
	IsTrusted       bool           `json:"is_trusted"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
