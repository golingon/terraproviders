// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_vpn_site

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_vpn_site.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVpnSiteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avs *Resource) Type() string {
	return "azurerm_vpn_site"
}

// LocalName returns the local name for [Resource].
func (avs *Resource) LocalName() string {
	return avs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avs *Resource) Configuration() interface{} {
	return avs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avs *Resource) Dependencies() terra.Dependencies {
	return avs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avs *Resource) LifecycleManagement() *terra.Lifecycle {
	return avs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avs *Resource) Attributes() azurermVpnSiteAttributes {
	return azurermVpnSiteAttributes{ref: terra.ReferenceResource(avs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avs *Resource) ImportState(state io.Reader) error {
	avs.state = &azurermVpnSiteState{}
	if err := json.NewDecoder(state).Decode(avs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avs.Type(), avs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avs *Resource) State() (*azurermVpnSiteState, bool) {
	return avs.state, avs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avs *Resource) StateMust() *azurermVpnSiteState {
	if avs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avs.Type(), avs.LocalName()))
	}
	return avs.state
}

// Args contains the configurations for azurerm_vpn_site.
type Args struct {
	// AddressCidrs: set of string, optional
	AddressCidrs terra.SetValue[terra.StringValue] `hcl:"address_cidrs,attr"`
	// DeviceModel: string, optional
	DeviceModel terra.StringValue `hcl:"device_model,attr"`
	// DeviceVendor: string, optional
	DeviceVendor terra.StringValue `hcl:"device_vendor,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualWanId: string, required
	VirtualWanId terra.StringValue `hcl:"virtual_wan_id,attr" validate:"required"`
	// Link: min=0
	Link []Link `hcl:"link,block" validate:"min=0"`
	// O365Policy: optional
	O365Policy *O365Policy `hcl:"o365_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVpnSiteAttributes struct {
	ref terra.Reference
}

// AddressCidrs returns a reference to field address_cidrs of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) AddressCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avs.ref.Append("address_cidrs"))
}

// DeviceModel returns a reference to field device_model of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) DeviceModel() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("device_model"))
}

// DeviceVendor returns a reference to field device_vendor of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) DeviceVendor() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("device_vendor"))
}

// Id returns a reference to field id of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avs.ref.Append("tags"))
}

// VirtualWanId returns a reference to field virtual_wan_id of azurerm_vpn_site.
func (avs azurermVpnSiteAttributes) VirtualWanId() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("virtual_wan_id"))
}

func (avs azurermVpnSiteAttributes) Link() terra.ListValue[LinkAttributes] {
	return terra.ReferenceAsList[LinkAttributes](avs.ref.Append("link"))
}

func (avs azurermVpnSiteAttributes) O365Policy() terra.ListValue[O365PolicyAttributes] {
	return terra.ReferenceAsList[O365PolicyAttributes](avs.ref.Append("o365_policy"))
}

func (avs azurermVpnSiteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avs.ref.Append("timeouts"))
}

type azurermVpnSiteState struct {
	AddressCidrs      []string          `json:"address_cidrs"`
	DeviceModel       string            `json:"device_model"`
	DeviceVendor      string            `json:"device_vendor"`
	Id                string            `json:"id"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	Tags              map[string]string `json:"tags"`
	VirtualWanId      string            `json:"virtual_wan_id"`
	Link              []LinkState       `json:"link"`
	O365Policy        []O365PolicyState `json:"o365_policy"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
