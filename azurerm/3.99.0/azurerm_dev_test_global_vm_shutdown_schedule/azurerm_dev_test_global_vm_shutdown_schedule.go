// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_test_global_vm_shutdown_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dev_test_global_vm_shutdown_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDevTestGlobalVmShutdownScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adtgvss *Resource) Type() string {
	return "azurerm_dev_test_global_vm_shutdown_schedule"
}

// LocalName returns the local name for [Resource].
func (adtgvss *Resource) LocalName() string {
	return adtgvss.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adtgvss *Resource) Configuration() interface{} {
	return adtgvss.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adtgvss *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adtgvss)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adtgvss *Resource) Dependencies() terra.Dependencies {
	return adtgvss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adtgvss *Resource) LifecycleManagement() *terra.Lifecycle {
	return adtgvss.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adtgvss *Resource) Attributes() azurermDevTestGlobalVmShutdownScheduleAttributes {
	return azurermDevTestGlobalVmShutdownScheduleAttributes{ref: terra.ReferenceResource(adtgvss)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adtgvss *Resource) ImportState(state io.Reader) error {
	adtgvss.state = &azurermDevTestGlobalVmShutdownScheduleState{}
	if err := json.NewDecoder(state).Decode(adtgvss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adtgvss.Type(), adtgvss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adtgvss *Resource) State() (*azurermDevTestGlobalVmShutdownScheduleState, bool) {
	return adtgvss.state, adtgvss.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adtgvss *Resource) StateMust() *azurermDevTestGlobalVmShutdownScheduleState {
	if adtgvss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adtgvss.Type(), adtgvss.LocalName()))
	}
	return adtgvss.state
}

// Args contains the configurations for azurerm_dev_test_global_vm_shutdown_schedule.
type Args struct {
	// DailyRecurrenceTime: string, required
	DailyRecurrenceTime terra.StringValue `hcl:"daily_recurrence_time,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timezone: string, required
	Timezone terra.StringValue `hcl:"timezone,attr" validate:"required"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// NotificationSettings: required
	NotificationSettings *NotificationSettings `hcl:"notification_settings,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDevTestGlobalVmShutdownScheduleAttributes struct {
	ref terra.Reference
}

// DailyRecurrenceTime returns a reference to field daily_recurrence_time of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) DailyRecurrenceTime() terra.StringValue {
	return terra.ReferenceAsString(adtgvss.ref.Append("daily_recurrence_time"))
}

// Enabled returns a reference to field enabled of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(adtgvss.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adtgvss.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adtgvss.ref.Append("location"))
}

// Tags returns a reference to field tags of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adtgvss.ref.Append("tags"))
}

// Timezone returns a reference to field timezone of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(adtgvss.ref.Append("timezone"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurerm_dev_test_global_vm_shutdown_schedule.
func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(adtgvss.ref.Append("virtual_machine_id"))
}

func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) NotificationSettings() terra.ListValue[NotificationSettingsAttributes] {
	return terra.ReferenceAsList[NotificationSettingsAttributes](adtgvss.ref.Append("notification_settings"))
}

func (adtgvss azurermDevTestGlobalVmShutdownScheduleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adtgvss.ref.Append("timeouts"))
}

type azurermDevTestGlobalVmShutdownScheduleState struct {
	DailyRecurrenceTime  string                      `json:"daily_recurrence_time"`
	Enabled              bool                        `json:"enabled"`
	Id                   string                      `json:"id"`
	Location             string                      `json:"location"`
	Tags                 map[string]string           `json:"tags"`
	Timezone             string                      `json:"timezone"`
	VirtualMachineId     string                      `json:"virtual_machine_id"`
	NotificationSettings []NotificationSettingsState `json:"notification_settings"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
