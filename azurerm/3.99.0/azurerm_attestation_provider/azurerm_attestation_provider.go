// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_attestation_provider

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_attestation_provider.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAttestationProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aap *Resource) Type() string {
	return "azurerm_attestation_provider"
}

// LocalName returns the local name for [Resource].
func (aap *Resource) LocalName() string {
	return aap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aap *Resource) Configuration() interface{} {
	return aap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aap *Resource) Dependencies() terra.Dependencies {
	return aap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aap *Resource) Attributes() azurermAttestationProviderAttributes {
	return azurermAttestationProviderAttributes{ref: terra.ReferenceResource(aap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aap *Resource) ImportState(state io.Reader) error {
	aap.state = &azurermAttestationProviderState{}
	if err := json.NewDecoder(state).Decode(aap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aap.Type(), aap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aap *Resource) State() (*azurermAttestationProviderState, bool) {
	return aap.state, aap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aap *Resource) StateMust() *azurermAttestationProviderState {
	if aap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aap.Type(), aap.LocalName()))
	}
	return aap.state
}

// Args contains the configurations for azurerm_attestation_provider.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OpenEnclavePolicyBase64: string, optional
	OpenEnclavePolicyBase64 terra.StringValue `hcl:"open_enclave_policy_base64,attr"`
	// PolicySigningCertificateData: string, optional
	PolicySigningCertificateData terra.StringValue `hcl:"policy_signing_certificate_data,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SevSnpPolicyBase64: string, optional
	SevSnpPolicyBase64 terra.StringValue `hcl:"sev_snp_policy_base64,attr"`
	// SgxEnclavePolicyBase64: string, optional
	SgxEnclavePolicyBase64 terra.StringValue `hcl:"sgx_enclave_policy_base64,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TpmPolicyBase64: string, optional
	TpmPolicyBase64 terra.StringValue `hcl:"tpm_policy_base64,attr"`
	// Policy: min=0
	Policy []Policy `hcl:"policy,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAttestationProviderAttributes struct {
	ref terra.Reference
}

// AttestationUri returns a reference to field attestation_uri of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) AttestationUri() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("attestation_uri"))
}

// Id returns a reference to field id of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("name"))
}

// OpenEnclavePolicyBase64 returns a reference to field open_enclave_policy_base64 of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) OpenEnclavePolicyBase64() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("open_enclave_policy_base64"))
}

// PolicySigningCertificateData returns a reference to field policy_signing_certificate_data of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) PolicySigningCertificateData() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("policy_signing_certificate_data"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("resource_group_name"))
}

// SevSnpPolicyBase64 returns a reference to field sev_snp_policy_base64 of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) SevSnpPolicyBase64() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("sev_snp_policy_base64"))
}

// SgxEnclavePolicyBase64 returns a reference to field sgx_enclave_policy_base64 of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) SgxEnclavePolicyBase64() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("sgx_enclave_policy_base64"))
}

// Tags returns a reference to field tags of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aap.ref.Append("tags"))
}

// TpmPolicyBase64 returns a reference to field tpm_policy_base64 of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) TpmPolicyBase64() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("tpm_policy_base64"))
}

// TrustModel returns a reference to field trust_model of azurerm_attestation_provider.
func (aap azurermAttestationProviderAttributes) TrustModel() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("trust_model"))
}

func (aap azurermAttestationProviderAttributes) Policy() terra.ListValue[PolicyAttributes] {
	return terra.ReferenceAsList[PolicyAttributes](aap.ref.Append("policy"))
}

func (aap azurermAttestationProviderAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aap.ref.Append("timeouts"))
}

type azurermAttestationProviderState struct {
	AttestationUri               string            `json:"attestation_uri"`
	Id                           string            `json:"id"`
	Location                     string            `json:"location"`
	Name                         string            `json:"name"`
	OpenEnclavePolicyBase64      string            `json:"open_enclave_policy_base64"`
	PolicySigningCertificateData string            `json:"policy_signing_certificate_data"`
	ResourceGroupName            string            `json:"resource_group_name"`
	SevSnpPolicyBase64           string            `json:"sev_snp_policy_base64"`
	SgxEnclavePolicyBase64       string            `json:"sgx_enclave_policy_base64"`
	Tags                         map[string]string `json:"tags"`
	TpmPolicyBase64              string            `json:"tpm_policy_base64"`
	TrustModel                   string            `json:"trust_model"`
	Policy                       []PolicyState     `json:"policy"`
	Timeouts                     *TimeoutsState    `json:"timeouts"`
}
