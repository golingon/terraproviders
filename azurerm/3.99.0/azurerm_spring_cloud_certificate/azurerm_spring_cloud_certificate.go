// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascc *Resource) Type() string {
	return "azurerm_spring_cloud_certificate"
}

// LocalName returns the local name for [Resource].
func (ascc *Resource) LocalName() string {
	return ascc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascc *Resource) Configuration() interface{} {
	return ascc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascc *Resource) Dependencies() terra.Dependencies {
	return ascc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascc *Resource) Attributes() azurermSpringCloudCertificateAttributes {
	return azurermSpringCloudCertificateAttributes{ref: terra.ReferenceResource(ascc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascc *Resource) ImportState(state io.Reader) error {
	ascc.state = &azurermSpringCloudCertificateState{}
	if err := json.NewDecoder(state).Decode(ascc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascc.Type(), ascc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascc *Resource) State() (*azurermSpringCloudCertificateState, bool) {
	return ascc.state, ascc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascc *Resource) StateMust() *azurermSpringCloudCertificateState {
	if ascc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascc.Type(), ascc.LocalName()))
	}
	return ascc.state
}

// Args contains the configurations for azurerm_spring_cloud_certificate.
type Args struct {
	// CertificateContent: string, optional
	CertificateContent terra.StringValue `hcl:"certificate_content,attr"`
	// ExcludePrivateKey: bool, optional
	ExcludePrivateKey terra.BoolValue `hcl:"exclude_private_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultCertificateId: string, optional
	KeyVaultCertificateId terra.StringValue `hcl:"key_vault_certificate_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudCertificateAttributes struct {
	ref terra.Reference
}

// CertificateContent returns a reference to field certificate_content of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) CertificateContent() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("certificate_content"))
}

// ExcludePrivateKey returns a reference to field exclude_private_key of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) ExcludePrivateKey() terra.BoolValue {
	return terra.ReferenceAsBool(ascc.ref.Append("exclude_private_key"))
}

// Id returns a reference to field id of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("id"))
}

// KeyVaultCertificateId returns a reference to field key_vault_certificate_id of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) KeyVaultCertificateId() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("key_vault_certificate_id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("resource_group_name"))
}

// ServiceName returns a reference to field service_name of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("service_name"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_spring_cloud_certificate.
func (ascc azurermSpringCloudCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(ascc.ref.Append("thumbprint"))
}

func (ascc azurermSpringCloudCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascc.ref.Append("timeouts"))
}

type azurermSpringCloudCertificateState struct {
	CertificateContent    string         `json:"certificate_content"`
	ExcludePrivateKey     bool           `json:"exclude_private_key"`
	Id                    string         `json:"id"`
	KeyVaultCertificateId string         `json:"key_vault_certificate_id"`
	Name                  string         `json:"name"`
	ResourceGroupName     string         `json:"resource_group_name"`
	ServiceName           string         `json:"service_name"`
	Thumbprint            string         `json:"thumbprint"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
