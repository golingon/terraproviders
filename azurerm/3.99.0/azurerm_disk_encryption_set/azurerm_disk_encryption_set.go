// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_disk_encryption_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_disk_encryption_set.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDiskEncryptionSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ades *Resource) Type() string {
	return "azurerm_disk_encryption_set"
}

// LocalName returns the local name for [Resource].
func (ades *Resource) LocalName() string {
	return ades.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ades *Resource) Configuration() interface{} {
	return ades.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ades *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ades)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ades *Resource) Dependencies() terra.Dependencies {
	return ades.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ades *Resource) LifecycleManagement() *terra.Lifecycle {
	return ades.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ades *Resource) Attributes() azurermDiskEncryptionSetAttributes {
	return azurermDiskEncryptionSetAttributes{ref: terra.ReferenceResource(ades)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ades *Resource) ImportState(state io.Reader) error {
	ades.state = &azurermDiskEncryptionSetState{}
	if err := json.NewDecoder(state).Decode(ades.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ades.Type(), ades.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ades *Resource) State() (*azurermDiskEncryptionSetState, bool) {
	return ades.state, ades.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ades *Resource) StateMust() *azurermDiskEncryptionSetState {
	if ades.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ades.Type(), ades.LocalName()))
	}
	return ades.state
}

// Args contains the configurations for azurerm_disk_encryption_set.
type Args struct {
	// AutoKeyRotationEnabled: bool, optional
	AutoKeyRotationEnabled terra.BoolValue `hcl:"auto_key_rotation_enabled,attr"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// FederatedClientId: string, optional
	FederatedClientId terra.StringValue `hcl:"federated_client_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultKeyId: string, required
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDiskEncryptionSetAttributes struct {
	ref terra.Reference
}

// AutoKeyRotationEnabled returns a reference to field auto_key_rotation_enabled of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) AutoKeyRotationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ades.ref.Append("auto_key_rotation_enabled"))
}

// EncryptionType returns a reference to field encryption_type of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("encryption_type"))
}

// FederatedClientId returns a reference to field federated_client_id of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) FederatedClientId() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("federated_client_id"))
}

// Id returns a reference to field id of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("id"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("key_vault_key_id"))
}

// KeyVaultKeyUrl returns a reference to field key_vault_key_url of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) KeyVaultKeyUrl() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("key_vault_key_url"))
}

// Location returns a reference to field location of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ades.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_disk_encryption_set.
func (ades azurermDiskEncryptionSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ades.ref.Append("tags"))
}

func (ades azurermDiskEncryptionSetAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ades.ref.Append("identity"))
}

func (ades azurermDiskEncryptionSetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ades.ref.Append("timeouts"))
}

type azurermDiskEncryptionSetState struct {
	AutoKeyRotationEnabled bool              `json:"auto_key_rotation_enabled"`
	EncryptionType         string            `json:"encryption_type"`
	FederatedClientId      string            `json:"federated_client_id"`
	Id                     string            `json:"id"`
	KeyVaultKeyId          string            `json:"key_vault_key_id"`
	KeyVaultKeyUrl         string            `json:"key_vault_key_url"`
	Location               string            `json:"location"`
	Name                   string            `json:"name"`
	ResourceGroupName      string            `json:"resource_group_name"`
	Tags                   map[string]string `json:"tags"`
	Identity               []IdentityState   `json:"identity"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
