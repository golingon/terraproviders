// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_relay_hybrid_connection_authorization_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_relay_hybrid_connection_authorization_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRelayHybridConnectionAuthorizationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arhcar *Resource) Type() string {
	return "azurerm_relay_hybrid_connection_authorization_rule"
}

// LocalName returns the local name for [Resource].
func (arhcar *Resource) LocalName() string {
	return arhcar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arhcar *Resource) Configuration() interface{} {
	return arhcar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arhcar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arhcar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arhcar *Resource) Dependencies() terra.Dependencies {
	return arhcar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arhcar *Resource) LifecycleManagement() *terra.Lifecycle {
	return arhcar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arhcar *Resource) Attributes() azurermRelayHybridConnectionAuthorizationRuleAttributes {
	return azurermRelayHybridConnectionAuthorizationRuleAttributes{ref: terra.ReferenceResource(arhcar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arhcar *Resource) ImportState(state io.Reader) error {
	arhcar.state = &azurermRelayHybridConnectionAuthorizationRuleState{}
	if err := json.NewDecoder(state).Decode(arhcar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arhcar.Type(), arhcar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arhcar *Resource) State() (*azurermRelayHybridConnectionAuthorizationRuleState, bool) {
	return arhcar.state, arhcar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arhcar *Resource) StateMust() *azurermRelayHybridConnectionAuthorizationRuleState {
	if arhcar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arhcar.Type(), arhcar.LocalName()))
	}
	return arhcar.state
}

// Args contains the configurations for azurerm_relay_hybrid_connection_authorization_rule.
type Args struct {
	// HybridConnectionName: string, required
	HybridConnectionName terra.StringValue `hcl:"hybrid_connection_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Listen: bool, optional
	Listen terra.BoolValue `hcl:"listen,attr"`
	// Manage: bool, optional
	Manage terra.BoolValue `hcl:"manage,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Send: bool, optional
	Send terra.BoolValue `hcl:"send,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRelayHybridConnectionAuthorizationRuleAttributes struct {
	ref terra.Reference
}

// HybridConnectionName returns a reference to field hybrid_connection_name of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) HybridConnectionName() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("hybrid_connection_name"))
}

// Id returns a reference to field id of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("id"))
}

// Listen returns a reference to field listen of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Listen() terra.BoolValue {
	return terra.ReferenceAsBool(arhcar.ref.Append("listen"))
}

// Manage returns a reference to field manage of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Manage() terra.BoolValue {
	return terra.ReferenceAsBool(arhcar.ref.Append("manage"))
}

// Name returns a reference to field name of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("name"))
}

// NamespaceName returns a reference to field namespace_name of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("namespace_name"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("primary_connection_string"))
}

// PrimaryKey returns a reference to field primary_key of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("primary_key"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("resource_group_name"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("secondary_connection_string"))
}

// SecondaryKey returns a reference to field secondary_key of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceAsString(arhcar.ref.Append("secondary_key"))
}

// Send returns a reference to field send of azurerm_relay_hybrid_connection_authorization_rule.
func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Send() terra.BoolValue {
	return terra.ReferenceAsBool(arhcar.ref.Append("send"))
}

func (arhcar azurermRelayHybridConnectionAuthorizationRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arhcar.ref.Append("timeouts"))
}

type azurermRelayHybridConnectionAuthorizationRuleState struct {
	HybridConnectionName      string         `json:"hybrid_connection_name"`
	Id                        string         `json:"id"`
	Listen                    bool           `json:"listen"`
	Manage                    bool           `json:"manage"`
	Name                      string         `json:"name"`
	NamespaceName             string         `json:"namespace_name"`
	PrimaryConnectionString   string         `json:"primary_connection_string"`
	PrimaryKey                string         `json:"primary_key"`
	ResourceGroupName         string         `json:"resource_group_name"`
	SecondaryConnectionString string         `json:"secondary_connection_string"`
	SecondaryKey              string         `json:"secondary_key"`
	Send                      bool           `json:"send"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
