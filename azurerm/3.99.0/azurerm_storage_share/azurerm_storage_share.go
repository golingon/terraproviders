// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_share

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_share.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageShareState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "azurerm_storage_share"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() azurermStorageShareAttributes {
	return azurermStorageShareAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &azurermStorageShareState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*azurermStorageShareState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *azurermStorageShareState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for azurerm_storage_share.
type Args struct {
	// AccessTier: string, optional
	AccessTier terra.StringValue `hcl:"access_tier,attr"`
	// EnabledProtocol: string, optional
	EnabledProtocol terra.StringValue `hcl:"enabled_protocol,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Quota: number, required
	Quota terra.NumberValue `hcl:"quota,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Acl: min=0
	Acl []Acl `hcl:"acl,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageShareAttributes struct {
	ref terra.Reference
}

// AccessTier returns a reference to field access_tier of azurerm_storage_share.
func (ass azurermStorageShareAttributes) AccessTier() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("access_tier"))
}

// EnabledProtocol returns a reference to field enabled_protocol of azurerm_storage_share.
func (ass azurermStorageShareAttributes) EnabledProtocol() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("enabled_protocol"))
}

// Id returns a reference to field id of azurerm_storage_share.
func (ass azurermStorageShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_storage_share.
func (ass azurermStorageShareAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_storage_share.
func (ass azurermStorageShareAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name"))
}

// Quota returns a reference to field quota of azurerm_storage_share.
func (ass azurermStorageShareAttributes) Quota() terra.NumberValue {
	return terra.ReferenceAsNumber(ass.ref.Append("quota"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_storage_share.
func (ass azurermStorageShareAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_manager_id"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_share.
func (ass azurermStorageShareAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("storage_account_name"))
}

// Url returns a reference to field url of azurerm_storage_share.
func (ass azurermStorageShareAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("url"))
}

func (ass azurermStorageShareAttributes) Acl() terra.SetValue[AclAttributes] {
	return terra.ReferenceAsSet[AclAttributes](ass.ref.Append("acl"))
}

func (ass azurermStorageShareAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ass.ref.Append("timeouts"))
}

type azurermStorageShareState struct {
	AccessTier         string            `json:"access_tier"`
	EnabledProtocol    string            `json:"enabled_protocol"`
	Id                 string            `json:"id"`
	Metadata           map[string]string `json:"metadata"`
	Name               string            `json:"name"`
	Quota              float64           `json:"quota"`
	ResourceManagerId  string            `json:"resource_manager_id"`
	StorageAccountName string            `json:"storage_account_name"`
	Url                string            `json:"url"`
	Acl                []AclState        `json:"acl"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
