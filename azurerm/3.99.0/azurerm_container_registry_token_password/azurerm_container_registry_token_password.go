// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_registry_token_password

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_container_registry_token_password.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermContainerRegistryTokenPasswordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrtp *Resource) Type() string {
	return "azurerm_container_registry_token_password"
}

// LocalName returns the local name for [Resource].
func (acrtp *Resource) LocalName() string {
	return acrtp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrtp *Resource) Configuration() interface{} {
	return acrtp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrtp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrtp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrtp *Resource) Dependencies() terra.Dependencies {
	return acrtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrtp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrtp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrtp *Resource) Attributes() azurermContainerRegistryTokenPasswordAttributes {
	return azurermContainerRegistryTokenPasswordAttributes{ref: terra.ReferenceResource(acrtp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrtp *Resource) ImportState(state io.Reader) error {
	acrtp.state = &azurermContainerRegistryTokenPasswordState{}
	if err := json.NewDecoder(state).Decode(acrtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrtp.Type(), acrtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrtp *Resource) State() (*azurermContainerRegistryTokenPasswordState, bool) {
	return acrtp.state, acrtp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrtp *Resource) StateMust() *azurermContainerRegistryTokenPasswordState {
	if acrtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrtp.Type(), acrtp.LocalName()))
	}
	return acrtp.state
}

// Args contains the configurations for azurerm_container_registry_token_password.
type Args struct {
	// ContainerRegistryTokenId: string, required
	ContainerRegistryTokenId terra.StringValue `hcl:"container_registry_token_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password1: required
	Password1 *Password1 `hcl:"password1,block" validate:"required"`
	// Password2: optional
	Password2 *Password2 `hcl:"password2,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermContainerRegistryTokenPasswordAttributes struct {
	ref terra.Reference
}

// ContainerRegistryTokenId returns a reference to field container_registry_token_id of azurerm_container_registry_token_password.
func (acrtp azurermContainerRegistryTokenPasswordAttributes) ContainerRegistryTokenId() terra.StringValue {
	return terra.ReferenceAsString(acrtp.ref.Append("container_registry_token_id"))
}

// Id returns a reference to field id of azurerm_container_registry_token_password.
func (acrtp azurermContainerRegistryTokenPasswordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrtp.ref.Append("id"))
}

func (acrtp azurermContainerRegistryTokenPasswordAttributes) Password1() terra.ListValue[Password1Attributes] {
	return terra.ReferenceAsList[Password1Attributes](acrtp.ref.Append("password1"))
}

func (acrtp azurermContainerRegistryTokenPasswordAttributes) Password2() terra.ListValue[Password2Attributes] {
	return terra.ReferenceAsList[Password2Attributes](acrtp.ref.Append("password2"))
}

func (acrtp azurermContainerRegistryTokenPasswordAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acrtp.ref.Append("timeouts"))
}

type azurermContainerRegistryTokenPasswordState struct {
	ContainerRegistryTokenId string           `json:"container_registry_token_id"`
	Id                       string           `json:"id"`
	Password1                []Password1State `json:"password1"`
	Password2                []Password2State `json:"password2"`
	Timeouts                 *TimeoutsState   `json:"timeouts"`
}
