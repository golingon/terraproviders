// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_container_registry_token_password

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Password1 struct {
	// Expiry: string, optional
	Expiry terra.StringValue `hcl:"expiry,attr"`
}

type Password2 struct {
	// Expiry: string, optional
	Expiry terra.StringValue `hcl:"expiry,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Password1Attributes struct {
	ref terra.Reference
}

func (p Password1Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Password1Attributes) InternalWithRef(ref terra.Reference) Password1Attributes {
	return Password1Attributes{ref: ref}
}

func (p Password1Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Password1Attributes) Expiry() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("expiry"))
}

func (p Password1Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type Password2Attributes struct {
	ref terra.Reference
}

func (p Password2Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Password2Attributes) InternalWithRef(ref terra.Reference) Password2Attributes {
	return Password2Attributes{ref: ref}
}

func (p Password2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Password2Attributes) Expiry() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("expiry"))
}

func (p Password2Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type Password1State struct {
	Expiry string `json:"expiry"`
	Value  string `json:"value"`
}

type Password2State struct {
	Expiry string `json:"expiry"`
	Value  string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
