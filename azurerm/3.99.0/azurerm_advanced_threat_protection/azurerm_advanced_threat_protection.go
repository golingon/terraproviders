// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_advanced_threat_protection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_advanced_threat_protection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAdvancedThreatProtectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aatp *Resource) Type() string {
	return "azurerm_advanced_threat_protection"
}

// LocalName returns the local name for [Resource].
func (aatp *Resource) LocalName() string {
	return aatp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aatp *Resource) Configuration() interface{} {
	return aatp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aatp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aatp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aatp *Resource) Dependencies() terra.Dependencies {
	return aatp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aatp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aatp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aatp *Resource) Attributes() azurermAdvancedThreatProtectionAttributes {
	return azurermAdvancedThreatProtectionAttributes{ref: terra.ReferenceResource(aatp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aatp *Resource) ImportState(state io.Reader) error {
	aatp.state = &azurermAdvancedThreatProtectionState{}
	if err := json.NewDecoder(state).Decode(aatp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aatp.Type(), aatp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aatp *Resource) State() (*azurermAdvancedThreatProtectionState, bool) {
	return aatp.state, aatp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aatp *Resource) StateMust() *azurermAdvancedThreatProtectionState {
	if aatp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aatp.Type(), aatp.LocalName()))
	}
	return aatp.state
}

// Args contains the configurations for azurerm_advanced_threat_protection.
type Args struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAdvancedThreatProtectionAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of azurerm_advanced_threat_protection.
func (aatp azurermAdvancedThreatProtectionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aatp.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_advanced_threat_protection.
func (aatp azurermAdvancedThreatProtectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aatp.ref.Append("id"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_advanced_threat_protection.
func (aatp azurermAdvancedThreatProtectionAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(aatp.ref.Append("target_resource_id"))
}

func (aatp azurermAdvancedThreatProtectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aatp.ref.Append("timeouts"))
}

type azurermAdvancedThreatProtectionState struct {
	Enabled          bool           `json:"enabled"`
	Id               string         `json:"id"`
	TargetResourceId string         `json:"target_resource_id"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
