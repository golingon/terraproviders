// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kubernetes_cluster_extension

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kubernetes_cluster_extension.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKubernetesClusterExtensionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akce *Resource) Type() string {
	return "azurerm_kubernetes_cluster_extension"
}

// LocalName returns the local name for [Resource].
func (akce *Resource) LocalName() string {
	return akce.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akce *Resource) Configuration() interface{} {
	return akce.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akce *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akce)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akce *Resource) Dependencies() terra.Dependencies {
	return akce.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akce *Resource) LifecycleManagement() *terra.Lifecycle {
	return akce.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akce *Resource) Attributes() azurermKubernetesClusterExtensionAttributes {
	return azurermKubernetesClusterExtensionAttributes{ref: terra.ReferenceResource(akce)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akce *Resource) ImportState(state io.Reader) error {
	akce.state = &azurermKubernetesClusterExtensionState{}
	if err := json.NewDecoder(state).Decode(akce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akce.Type(), akce.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akce *Resource) State() (*azurermKubernetesClusterExtensionState, bool) {
	return akce.state, akce.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akce *Resource) StateMust() *azurermKubernetesClusterExtensionState {
	if akce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akce.Type(), akce.LocalName()))
	}
	return akce.state
}

// Args contains the configurations for azurerm_kubernetes_cluster_extension.
type Args struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ConfigurationProtectedSettings: map of string, optional
	ConfigurationProtectedSettings terra.MapValue[terra.StringValue] `hcl:"configuration_protected_settings,attr"`
	// ConfigurationSettings: map of string, optional
	ConfigurationSettings terra.MapValue[terra.StringValue] `hcl:"configuration_settings,attr"`
	// ExtensionType: string, required
	ExtensionType terra.StringValue `hcl:"extension_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseNamespace: string, optional
	ReleaseNamespace terra.StringValue `hcl:"release_namespace,attr"`
	// ReleaseTrain: string, optional
	ReleaseTrain terra.StringValue `hcl:"release_train,attr"`
	// TargetNamespace: string, optional
	TargetNamespace terra.StringValue `hcl:"target_namespace,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKubernetesClusterExtensionAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("cluster_id"))
}

// ConfigurationProtectedSettings returns a reference to field configuration_protected_settings of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ConfigurationProtectedSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akce.ref.Append("configuration_protected_settings"))
}

// ConfigurationSettings returns a reference to field configuration_settings of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ConfigurationSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akce.ref.Append("configuration_settings"))
}

// CurrentVersion returns a reference to field current_version of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("current_version"))
}

// ExtensionType returns a reference to field extension_type of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ExtensionType() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("extension_type"))
}

// Id returns a reference to field id of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("name"))
}

// ReleaseNamespace returns a reference to field release_namespace of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ReleaseNamespace() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("release_namespace"))
}

// ReleaseTrain returns a reference to field release_train of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) ReleaseTrain() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("release_train"))
}

// TargetNamespace returns a reference to field target_namespace of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) TargetNamespace() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("target_namespace"))
}

// Version returns a reference to field version of azurerm_kubernetes_cluster_extension.
func (akce azurermKubernetesClusterExtensionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(akce.ref.Append("version"))
}

func (akce azurermKubernetesClusterExtensionAttributes) AksAssignedIdentity() terra.ListValue[AksAssignedIdentityAttributes] {
	return terra.ReferenceAsList[AksAssignedIdentityAttributes](akce.ref.Append("aks_assigned_identity"))
}

func (akce azurermKubernetesClusterExtensionAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](akce.ref.Append("plan"))
}

func (akce azurermKubernetesClusterExtensionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akce.ref.Append("timeouts"))
}

type azurermKubernetesClusterExtensionState struct {
	ClusterId                      string                     `json:"cluster_id"`
	ConfigurationProtectedSettings map[string]string          `json:"configuration_protected_settings"`
	ConfigurationSettings          map[string]string          `json:"configuration_settings"`
	CurrentVersion                 string                     `json:"current_version"`
	ExtensionType                  string                     `json:"extension_type"`
	Id                             string                     `json:"id"`
	Name                           string                     `json:"name"`
	ReleaseNamespace               string                     `json:"release_namespace"`
	ReleaseTrain                   string                     `json:"release_train"`
	TargetNamespace                string                     `json:"target_namespace"`
	Version                        string                     `json:"version"`
	AksAssignedIdentity            []AksAssignedIdentityState `json:"aks_assigned_identity"`
	Plan                           []PlanState                `json:"plan"`
	Timeouts                       *TimeoutsState             `json:"timeouts"`
}
