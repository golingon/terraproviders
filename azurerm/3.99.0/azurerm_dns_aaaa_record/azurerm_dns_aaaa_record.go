// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dns_aaaa_record

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dns_aaaa_record.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDnsAaaaRecordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adar *Resource) Type() string {
	return "azurerm_dns_aaaa_record"
}

// LocalName returns the local name for [Resource].
func (adar *Resource) LocalName() string {
	return adar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adar *Resource) Configuration() interface{} {
	return adar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adar *Resource) Dependencies() terra.Dependencies {
	return adar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adar *Resource) LifecycleManagement() *terra.Lifecycle {
	return adar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adar *Resource) Attributes() azurermDnsAaaaRecordAttributes {
	return azurermDnsAaaaRecordAttributes{ref: terra.ReferenceResource(adar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adar *Resource) ImportState(state io.Reader) error {
	adar.state = &azurermDnsAaaaRecordState{}
	if err := json.NewDecoder(state).Decode(adar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adar.Type(), adar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adar *Resource) State() (*azurermDnsAaaaRecordState, bool) {
	return adar.state, adar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adar *Resource) StateMust() *azurermDnsAaaaRecordState {
	if adar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adar.Type(), adar.LocalName()))
	}
	return adar.state
}

// Args contains the configurations for azurerm_dns_aaaa_record.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Records: set of string, optional
	Records terra.SetValue[terra.StringValue] `hcl:"records,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetResourceId: string, optional
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// ZoneName: string, required
	ZoneName terra.StringValue `hcl:"zone_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDnsAaaaRecordAttributes struct {
	ref terra.Reference
}

// Fqdn returns a reference to field fqdn of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("fqdn"))
}

// Id returns a reference to field id of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("name"))
}

// Records returns a reference to field records of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Records() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adar.ref.Append("records"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adar.ref.Append("tags"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("target_resource_id"))
}

// Ttl returns a reference to field ttl of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(adar.ref.Append("ttl"))
}

// ZoneName returns a reference to field zone_name of azurerm_dns_aaaa_record.
func (adar azurermDnsAaaaRecordAttributes) ZoneName() terra.StringValue {
	return terra.ReferenceAsString(adar.ref.Append("zone_name"))
}

func (adar azurermDnsAaaaRecordAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adar.ref.Append("timeouts"))
}

type azurermDnsAaaaRecordState struct {
	Fqdn              string            `json:"fqdn"`
	Id                string            `json:"id"`
	Name              string            `json:"name"`
	Records           []string          `json:"records"`
	ResourceGroupName string            `json:"resource_group_name"`
	Tags              map[string]string `json:"tags"`
	TargetResourceId  string            `json:"target_resource_id"`
	Ttl               float64           `json:"ttl"`
	ZoneName          string            `json:"zone_name"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
