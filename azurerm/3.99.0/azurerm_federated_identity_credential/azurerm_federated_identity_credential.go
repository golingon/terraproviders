// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_federated_identity_credential

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_federated_identity_credential.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermFederatedIdentityCredentialState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afic *Resource) Type() string {
	return "azurerm_federated_identity_credential"
}

// LocalName returns the local name for [Resource].
func (afic *Resource) LocalName() string {
	return afic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afic *Resource) Configuration() interface{} {
	return afic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afic *Resource) Dependencies() terra.Dependencies {
	return afic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afic *Resource) LifecycleManagement() *terra.Lifecycle {
	return afic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afic *Resource) Attributes() azurermFederatedIdentityCredentialAttributes {
	return azurermFederatedIdentityCredentialAttributes{ref: terra.ReferenceResource(afic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afic *Resource) ImportState(state io.Reader) error {
	afic.state = &azurermFederatedIdentityCredentialState{}
	if err := json.NewDecoder(state).Decode(afic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afic.Type(), afic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afic *Resource) State() (*azurermFederatedIdentityCredentialState, bool) {
	return afic.state, afic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afic *Resource) StateMust() *azurermFederatedIdentityCredentialState {
	if afic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afic.Type(), afic.LocalName()))
	}
	return afic.state
}

// Args contains the configurations for azurerm_federated_identity_credential.
type Args struct {
	// Audience: list of string, required
	Audience terra.ListValue[terra.StringValue] `hcl:"audience,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Issuer: string, required
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentId: string, required
	ParentId terra.StringValue `hcl:"parent_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Subject: string, required
	Subject terra.StringValue `hcl:"subject,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermFederatedIdentityCredentialAttributes struct {
	ref terra.Reference
}

// Audience returns a reference to field audience of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) Audience() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afic.ref.Append("audience"))
}

// Id returns a reference to field id of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("id"))
}

// Issuer returns a reference to field issuer of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("issuer"))
}

// Name returns a reference to field name of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("name"))
}

// ParentId returns a reference to field parent_id of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) ParentId() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("parent_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("resource_group_name"))
}

// Subject returns a reference to field subject of azurerm_federated_identity_credential.
func (afic azurermFederatedIdentityCredentialAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(afic.ref.Append("subject"))
}

func (afic azurermFederatedIdentityCredentialAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afic.ref.Append("timeouts"))
}

type azurermFederatedIdentityCredentialState struct {
	Audience          []string       `json:"audience"`
	Id                string         `json:"id"`
	Issuer            string         `json:"issuer"`
	Name              string         `json:"name"`
	ParentId          string         `json:"parent_id"`
	ResourceGroupName string         `json:"resource_group_name"`
	Subject           string         `json:"subject"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
