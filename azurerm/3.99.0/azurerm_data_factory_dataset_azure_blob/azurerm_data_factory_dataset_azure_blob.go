// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_dataset_azure_blob

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_dataset_azure_blob.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryDatasetAzureBlobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfdab *Resource) Type() string {
	return "azurerm_data_factory_dataset_azure_blob"
}

// LocalName returns the local name for [Resource].
func (adfdab *Resource) LocalName() string {
	return adfdab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfdab *Resource) Configuration() interface{} {
	return adfdab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfdab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfdab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfdab *Resource) Dependencies() terra.Dependencies {
	return adfdab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfdab *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfdab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfdab *Resource) Attributes() azurermDataFactoryDatasetAzureBlobAttributes {
	return azurermDataFactoryDatasetAzureBlobAttributes{ref: terra.ReferenceResource(adfdab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfdab *Resource) ImportState(state io.Reader) error {
	adfdab.state = &azurermDataFactoryDatasetAzureBlobState{}
	if err := json.NewDecoder(state).Decode(adfdab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfdab.Type(), adfdab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfdab *Resource) State() (*azurermDataFactoryDatasetAzureBlobState, bool) {
	return adfdab.state, adfdab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfdab *Resource) StateMust() *azurermDataFactoryDatasetAzureBlobState {
	if adfdab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfdab.Type(), adfdab.LocalName()))
	}
	return adfdab.state
}

// Args contains the configurations for azurerm_data_factory_dataset_azure_blob.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DynamicFilenameEnabled: bool, optional
	DynamicFilenameEnabled terra.BoolValue `hcl:"dynamic_filename_enabled,attr"`
	// DynamicPathEnabled: bool, optional
	DynamicPathEnabled terra.BoolValue `hcl:"dynamic_path_enabled,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// SchemaColumn: min=0
	SchemaColumn []SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryDatasetAzureBlobAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdab.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfdab.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("description"))
}

// DynamicFilenameEnabled returns a reference to field dynamic_filename_enabled of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) DynamicFilenameEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adfdab.ref.Append("dynamic_filename_enabled"))
}

// DynamicPathEnabled returns a reference to field dynamic_path_enabled of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) DynamicPathEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adfdab.ref.Append("dynamic_path_enabled"))
}

// Filename returns a reference to field filename of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("filename"))
}

// Folder returns a reference to field folder of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("id"))
}

// LinkedServiceName returns a reference to field linked_service_name of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("linked_service_name"))
}

// Name returns a reference to field name of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdab.ref.Append("parameters"))
}

// Path returns a reference to field path of azurerm_data_factory_dataset_azure_blob.
func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(adfdab.ref.Append("path"))
}

func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) SchemaColumn() terra.ListValue[SchemaColumnAttributes] {
	return terra.ReferenceAsList[SchemaColumnAttributes](adfdab.ref.Append("schema_column"))
}

func (adfdab azurermDataFactoryDatasetAzureBlobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfdab.ref.Append("timeouts"))
}

type azurermDataFactoryDatasetAzureBlobState struct {
	AdditionalProperties   map[string]string   `json:"additional_properties"`
	Annotations            []string            `json:"annotations"`
	DataFactoryId          string              `json:"data_factory_id"`
	Description            string              `json:"description"`
	DynamicFilenameEnabled bool                `json:"dynamic_filename_enabled"`
	DynamicPathEnabled     bool                `json:"dynamic_path_enabled"`
	Filename               string              `json:"filename"`
	Folder                 string              `json:"folder"`
	Id                     string              `json:"id"`
	LinkedServiceName      string              `json:"linked_service_name"`
	Name                   string              `json:"name"`
	Parameters             map[string]string   `json:"parameters"`
	Path                   string              `json:"path"`
	SchemaColumn           []SchemaColumnState `json:"schema_column"`
	Timeouts               *TimeoutsState      `json:"timeouts"`
}
