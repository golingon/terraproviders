// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_linked_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_linked_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseLinkedServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asls *Resource) Type() string {
	return "azurerm_synapse_linked_service"
}

// LocalName returns the local name for [Resource].
func (asls *Resource) LocalName() string {
	return asls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asls *Resource) Configuration() interface{} {
	return asls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asls *Resource) Dependencies() terra.Dependencies {
	return asls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asls *Resource) LifecycleManagement() *terra.Lifecycle {
	return asls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asls *Resource) Attributes() azurermSynapseLinkedServiceAttributes {
	return azurermSynapseLinkedServiceAttributes{ref: terra.ReferenceResource(asls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asls *Resource) ImportState(state io.Reader) error {
	asls.state = &azurermSynapseLinkedServiceState{}
	if err := json.NewDecoder(state).Decode(asls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asls.Type(), asls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asls *Resource) State() (*azurermSynapseLinkedServiceState, bool) {
	return asls.state, asls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asls *Resource) StateMust() *azurermSynapseLinkedServiceState {
	if asls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asls.Type(), asls.LocalName()))
	}
	return asls.state
}

// Args contains the configurations for azurerm_synapse_linked_service.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypePropertiesJson: string, required
	TypePropertiesJson terra.StringValue `hcl:"type_properties_json,attr" validate:"required"`
	// IntegrationRuntime: optional
	IntegrationRuntime *IntegrationRuntime `hcl:"integration_runtime,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseLinkedServiceAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asls.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asls.ref.Append("annotations"))
}

// Description returns a reference to field description of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asls.ref.Append("parameters"))
}

// SynapseWorkspaceId returns a reference to field synapse_workspace_id of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("synapse_workspace_id"))
}

// Type returns a reference to field type of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("type"))
}

// TypePropertiesJson returns a reference to field type_properties_json of azurerm_synapse_linked_service.
func (asls azurermSynapseLinkedServiceAttributes) TypePropertiesJson() terra.StringValue {
	return terra.ReferenceAsString(asls.ref.Append("type_properties_json"))
}

func (asls azurermSynapseLinkedServiceAttributes) IntegrationRuntime() terra.ListValue[IntegrationRuntimeAttributes] {
	return terra.ReferenceAsList[IntegrationRuntimeAttributes](asls.ref.Append("integration_runtime"))
}

func (asls azurermSynapseLinkedServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asls.ref.Append("timeouts"))
}

type azurermSynapseLinkedServiceState struct {
	AdditionalProperties map[string]string         `json:"additional_properties"`
	Annotations          []string                  `json:"annotations"`
	Description          string                    `json:"description"`
	Id                   string                    `json:"id"`
	Name                 string                    `json:"name"`
	Parameters           map[string]string         `json:"parameters"`
	SynapseWorkspaceId   string                    `json:"synapse_workspace_id"`
	Type                 string                    `json:"type"`
	TypePropertiesJson   string                    `json:"type_properties_json"`
	IntegrationRuntime   []IntegrationRuntimeState `json:"integration_runtime"`
	Timeouts             *TimeoutsState            `json:"timeouts"`
}
