// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_configuration_feature

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetingFilter struct {
	// DefaultRolloutPercentage: number, required
	DefaultRolloutPercentage terra.NumberValue `hcl:"default_rollout_percentage,attr" validate:"required"`
	// Users: list of string, optional
	Users terra.ListValue[terra.StringValue] `hcl:"users,attr"`
	// TargetingFilterGroups: min=0
	Groups []TargetingFilterGroups `hcl:"groups,block" validate:"min=0"`
}

type TargetingFilterGroups struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RolloutPercentage: number, required
	RolloutPercentage terra.NumberValue `hcl:"rollout_percentage,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TimewindowFilter struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
}

type TargetingFilterAttributes struct {
	ref terra.Reference
}

func (tf TargetingFilterAttributes) InternalRef() (terra.Reference, error) {
	return tf.ref, nil
}

func (tf TargetingFilterAttributes) InternalWithRef(ref terra.Reference) TargetingFilterAttributes {
	return TargetingFilterAttributes{ref: ref}
}

func (tf TargetingFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tf.ref.InternalTokens()
}

func (tf TargetingFilterAttributes) DefaultRolloutPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(tf.ref.Append("default_rollout_percentage"))
}

func (tf TargetingFilterAttributes) Users() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](tf.ref.Append("users"))
}

func (tf TargetingFilterAttributes) Groups() terra.ListValue[TargetingFilterGroupsAttributes] {
	return terra.ReferenceAsList[TargetingFilterGroupsAttributes](tf.ref.Append("groups"))
}

type TargetingFilterGroupsAttributes struct {
	ref terra.Reference
}

func (g TargetingFilterGroupsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TargetingFilterGroupsAttributes) InternalWithRef(ref terra.Reference) TargetingFilterGroupsAttributes {
	return TargetingFilterGroupsAttributes{ref: ref}
}

func (g TargetingFilterGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TargetingFilterGroupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g TargetingFilterGroupsAttributes) RolloutPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("rollout_percentage"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TimewindowFilterAttributes struct {
	ref terra.Reference
}

func (tf TimewindowFilterAttributes) InternalRef() (terra.Reference, error) {
	return tf.ref, nil
}

func (tf TimewindowFilterAttributes) InternalWithRef(ref terra.Reference) TimewindowFilterAttributes {
	return TimewindowFilterAttributes{ref: ref}
}

func (tf TimewindowFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tf.ref.InternalTokens()
}

func (tf TimewindowFilterAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("end"))
}

func (tf TimewindowFilterAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("start"))
}

type TargetingFilterState struct {
	DefaultRolloutPercentage float64                      `json:"default_rollout_percentage"`
	Users                    []string                     `json:"users"`
	Groups                   []TargetingFilterGroupsState `json:"groups"`
}

type TargetingFilterGroupsState struct {
	Name              string  `json:"name"`
	RolloutPercentage float64 `json:"rollout_percentage"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TimewindowFilterState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}
