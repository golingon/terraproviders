// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_account_sas

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataPermissions struct {
	// Add: bool, required
	Add terra.BoolValue `hcl:"add,attr" validate:"required"`
	// Create: bool, required
	Create terra.BoolValue `hcl:"create,attr" validate:"required"`
	// Delete: bool, required
	Delete terra.BoolValue `hcl:"delete,attr" validate:"required"`
	// Filter: bool, required
	Filter terra.BoolValue `hcl:"filter,attr" validate:"required"`
	// List: bool, required
	List terra.BoolValue `hcl:"list,attr" validate:"required"`
	// Process: bool, required
	Process terra.BoolValue `hcl:"process,attr" validate:"required"`
	// Read: bool, required
	Read terra.BoolValue `hcl:"read,attr" validate:"required"`
	// Tag: bool, required
	Tag terra.BoolValue `hcl:"tag,attr" validate:"required"`
	// Update: bool, required
	Update terra.BoolValue `hcl:"update,attr" validate:"required"`
	// Write: bool, required
	Write terra.BoolValue `hcl:"write,attr" validate:"required"`
}

type DataResourceTypes struct {
	// Container: bool, required
	Container terra.BoolValue `hcl:"container,attr" validate:"required"`
	// Object: bool, required
	Object terra.BoolValue `hcl:"object,attr" validate:"required"`
	// Service: bool, required
	Service terra.BoolValue `hcl:"service,attr" validate:"required"`
}

type DataServices struct {
	// Blob: bool, required
	Blob terra.BoolValue `hcl:"blob,attr" validate:"required"`
	// File: bool, required
	File terra.BoolValue `hcl:"file,attr" validate:"required"`
	// Queue: bool, required
	Queue terra.BoolValue `hcl:"queue,attr" validate:"required"`
	// Table: bool, required
	Table terra.BoolValue `hcl:"table,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataPermissionsAttributes struct {
	ref terra.Reference
}

func (p DataPermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataPermissionsAttributes) InternalWithRef(ref terra.Reference) DataPermissionsAttributes {
	return DataPermissionsAttributes{ref: ref}
}

func (p DataPermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataPermissionsAttributes) Add() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("add"))
}

func (p DataPermissionsAttributes) Create() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("create"))
}

func (p DataPermissionsAttributes) Delete() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("delete"))
}

func (p DataPermissionsAttributes) Filter() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("filter"))
}

func (p DataPermissionsAttributes) List() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("list"))
}

func (p DataPermissionsAttributes) Process() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("process"))
}

func (p DataPermissionsAttributes) Read() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("read"))
}

func (p DataPermissionsAttributes) Tag() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("tag"))
}

func (p DataPermissionsAttributes) Update() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("update"))
}

func (p DataPermissionsAttributes) Write() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("write"))
}

type DataResourceTypesAttributes struct {
	ref terra.Reference
}

func (rt DataResourceTypesAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt DataResourceTypesAttributes) InternalWithRef(ref terra.Reference) DataResourceTypesAttributes {
	return DataResourceTypesAttributes{ref: ref}
}

func (rt DataResourceTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt DataResourceTypesAttributes) Container() terra.BoolValue {
	return terra.ReferenceAsBool(rt.ref.Append("container"))
}

func (rt DataResourceTypesAttributes) Object() terra.BoolValue {
	return terra.ReferenceAsBool(rt.ref.Append("object"))
}

func (rt DataResourceTypesAttributes) Service() terra.BoolValue {
	return terra.ReferenceAsBool(rt.ref.Append("service"))
}

type DataServicesAttributes struct {
	ref terra.Reference
}

func (s DataServicesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataServicesAttributes) InternalWithRef(ref terra.Reference) DataServicesAttributes {
	return DataServicesAttributes{ref: ref}
}

func (s DataServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataServicesAttributes) Blob() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("blob"))
}

func (s DataServicesAttributes) File() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("file"))
}

func (s DataServicesAttributes) Queue() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("queue"))
}

func (s DataServicesAttributes) Table() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("table"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataPermissionsState struct {
	Add     bool `json:"add"`
	Create  bool `json:"create"`
	Delete  bool `json:"delete"`
	Filter  bool `json:"filter"`
	List    bool `json:"list"`
	Process bool `json:"process"`
	Read    bool `json:"read"`
	Tag     bool `json:"tag"`
	Update  bool `json:"update"`
	Write   bool `json:"write"`
}

type DataResourceTypesState struct {
	Container bool `json:"container"`
	Object    bool `json:"object"`
	Service   bool `json:"service"`
}

type DataServicesState struct {
	Blob  bool `json:"blob"`
	File  bool `json:"file"`
	Queue bool `json:"queue"`
	Table bool `json:"table"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
