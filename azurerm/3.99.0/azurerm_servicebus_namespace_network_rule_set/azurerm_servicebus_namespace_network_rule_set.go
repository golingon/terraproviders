// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_servicebus_namespace_network_rule_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_servicebus_namespace_network_rule_set.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermServicebusNamespaceNetworkRuleSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asnnrs *Resource) Type() string {
	return "azurerm_servicebus_namespace_network_rule_set"
}

// LocalName returns the local name for [Resource].
func (asnnrs *Resource) LocalName() string {
	return asnnrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asnnrs *Resource) Configuration() interface{} {
	return asnnrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asnnrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asnnrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asnnrs *Resource) Dependencies() terra.Dependencies {
	return asnnrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asnnrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return asnnrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asnnrs *Resource) Attributes() azurermServicebusNamespaceNetworkRuleSetAttributes {
	return azurermServicebusNamespaceNetworkRuleSetAttributes{ref: terra.ReferenceResource(asnnrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asnnrs *Resource) ImportState(state io.Reader) error {
	asnnrs.state = &azurermServicebusNamespaceNetworkRuleSetState{}
	if err := json.NewDecoder(state).Decode(asnnrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asnnrs.Type(), asnnrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asnnrs *Resource) State() (*azurermServicebusNamespaceNetworkRuleSetState, bool) {
	return asnnrs.state, asnnrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asnnrs *Resource) StateMust() *azurermServicebusNamespaceNetworkRuleSetState {
	if asnnrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asnnrs.Type(), asnnrs.LocalName()))
	}
	return asnnrs.state
}

// Args contains the configurations for azurerm_servicebus_namespace_network_rule_set.
type Args struct {
	// DefaultAction: string, optional
	DefaultAction terra.StringValue `hcl:"default_action,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRules: set of string, optional
	IpRules terra.SetValue[terra.StringValue] `hcl:"ip_rules,attr"`
	// NamespaceId: string, required
	NamespaceId terra.StringValue `hcl:"namespace_id,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// TrustedServicesAllowed: bool, optional
	TrustedServicesAllowed terra.BoolValue `hcl:"trusted_services_allowed,attr"`
	// NetworkRules: min=0
	NetworkRules []NetworkRules `hcl:"network_rules,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermServicebusNamespaceNetworkRuleSetAttributes struct {
	ref terra.Reference
}

// DefaultAction returns a reference to field default_action of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(asnnrs.ref.Append("default_action"))
}

// Id returns a reference to field id of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asnnrs.ref.Append("id"))
}

// IpRules returns a reference to field ip_rules of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) IpRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asnnrs.ref.Append("ip_rules"))
}

// NamespaceId returns a reference to field namespace_id of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(asnnrs.ref.Append("namespace_id"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asnnrs.ref.Append("public_network_access_enabled"))
}

// TrustedServicesAllowed returns a reference to field trusted_services_allowed of azurerm_servicebus_namespace_network_rule_set.
func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) TrustedServicesAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(asnnrs.ref.Append("trusted_services_allowed"))
}

func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) NetworkRules() terra.SetValue[NetworkRulesAttributes] {
	return terra.ReferenceAsSet[NetworkRulesAttributes](asnnrs.ref.Append("network_rules"))
}

func (asnnrs azurermServicebusNamespaceNetworkRuleSetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asnnrs.ref.Append("timeouts"))
}

type azurermServicebusNamespaceNetworkRuleSetState struct {
	DefaultAction              string              `json:"default_action"`
	Id                         string              `json:"id"`
	IpRules                    []string            `json:"ip_rules"`
	NamespaceId                string              `json:"namespace_id"`
	PublicNetworkAccessEnabled bool                `json:"public_network_access_enabled"`
	TrustedServicesAllowed     bool                `json:"trusted_services_allowed"`
	NetworkRules               []NetworkRulesState `json:"network_rules"`
	Timeouts                   *TimeoutsState      `json:"timeouts"`
}
