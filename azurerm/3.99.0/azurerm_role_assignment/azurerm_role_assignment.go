// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ara *Resource) Type() string {
	return "azurerm_role_assignment"
}

// LocalName returns the local name for [Resource].
func (ara *Resource) LocalName() string {
	return ara.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ara *Resource) Configuration() interface{} {
	return ara.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ara *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ara)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ara *Resource) Dependencies() terra.Dependencies {
	return ara.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ara *Resource) LifecycleManagement() *terra.Lifecycle {
	return ara.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ara *Resource) Attributes() azurermRoleAssignmentAttributes {
	return azurermRoleAssignmentAttributes{ref: terra.ReferenceResource(ara)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ara *Resource) ImportState(state io.Reader) error {
	ara.state = &azurermRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(ara.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ara.Type(), ara.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ara *Resource) State() (*azurermRoleAssignmentState, bool) {
	return ara.state, ara.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ara *Resource) StateMust() *azurermRoleAssignmentState {
	if ara.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ara.Type(), ara.LocalName()))
	}
	return ara.state
}

// Args contains the configurations for azurerm_role_assignment.
type Args struct {
	// Condition: string, optional
	Condition terra.StringValue `hcl:"condition,attr"`
	// ConditionVersion: string, optional
	ConditionVersion terra.StringValue `hcl:"condition_version,attr"`
	// DelegatedManagedIdentityResourceId: string, optional
	DelegatedManagedIdentityResourceId terra.StringValue `hcl:"delegated_managed_identity_resource_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// PrincipalType: string, optional
	PrincipalType terra.StringValue `hcl:"principal_type,attr"`
	// RoleDefinitionId: string, optional
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr"`
	// RoleDefinitionName: string, optional
	RoleDefinitionName terra.StringValue `hcl:"role_definition_name,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// SkipServicePrincipalAadCheck: bool, optional
	SkipServicePrincipalAadCheck terra.BoolValue `hcl:"skip_service_principal_aad_check,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRoleAssignmentAttributes struct {
	ref terra.Reference
}

// Condition returns a reference to field condition of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) Condition() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("condition"))
}

// ConditionVersion returns a reference to field condition_version of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) ConditionVersion() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("condition_version"))
}

// DelegatedManagedIdentityResourceId returns a reference to field delegated_managed_identity_resource_id of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) DelegatedManagedIdentityResourceId() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("delegated_managed_identity_resource_id"))
}

// Description returns a reference to field description of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("name"))
}

// PrincipalId returns a reference to field principal_id of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("principal_id"))
}

// PrincipalType returns a reference to field principal_type of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("principal_type"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("role_definition_id"))
}

// RoleDefinitionName returns a reference to field role_definition_name of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) RoleDefinitionName() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("role_definition_name"))
}

// Scope returns a reference to field scope of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ara.ref.Append("scope"))
}

// SkipServicePrincipalAadCheck returns a reference to field skip_service_principal_aad_check of azurerm_role_assignment.
func (ara azurermRoleAssignmentAttributes) SkipServicePrincipalAadCheck() terra.BoolValue {
	return terra.ReferenceAsBool(ara.ref.Append("skip_service_principal_aad_check"))
}

func (ara azurermRoleAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ara.ref.Append("timeouts"))
}

type azurermRoleAssignmentState struct {
	Condition                          string         `json:"condition"`
	ConditionVersion                   string         `json:"condition_version"`
	DelegatedManagedIdentityResourceId string         `json:"delegated_managed_identity_resource_id"`
	Description                        string         `json:"description"`
	Id                                 string         `json:"id"`
	Name                               string         `json:"name"`
	PrincipalId                        string         `json:"principal_id"`
	PrincipalType                      string         `json:"principal_type"`
	RoleDefinitionId                   string         `json:"role_definition_id"`
	RoleDefinitionName                 string         `json:"role_definition_name"`
	Scope                              string         `json:"scope"`
	SkipServicePrincipalAadCheck       bool           `json:"skip_service_principal_aad_check"`
	Timeouts                           *TimeoutsState `json:"timeouts"`
}
