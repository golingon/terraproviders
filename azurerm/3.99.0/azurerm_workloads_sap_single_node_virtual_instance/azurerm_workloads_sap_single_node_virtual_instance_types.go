// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_workloads_sap_single_node_virtual_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SingleServerConfiguration struct {
	// AppResourceGroupName: string, required
	AppResourceGroupName terra.StringValue `hcl:"app_resource_group_name,attr" validate:"required"`
	// DatabaseType: string, optional
	DatabaseType terra.StringValue `hcl:"database_type,attr"`
	// SecondaryIpEnabled: bool, optional
	SecondaryIpEnabled terra.BoolValue `hcl:"secondary_ip_enabled,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// SingleServerConfigurationDiskVolumeConfiguration: min=0
	DiskVolumeConfiguration []SingleServerConfigurationDiskVolumeConfiguration `hcl:"disk_volume_configuration,block" validate:"min=0"`
	// SingleServerConfigurationVirtualMachineConfiguration: required
	VirtualMachineConfiguration *SingleServerConfigurationVirtualMachineConfiguration `hcl:"virtual_machine_configuration,block" validate:"required"`
	// SingleServerConfigurationVirtualMachineResourceNames: optional
	VirtualMachineResourceNames *SingleServerConfigurationVirtualMachineResourceNames `hcl:"virtual_machine_resource_names,block"`
}

type SingleServerConfigurationDiskVolumeConfiguration struct {
	// NumberOfDisks: number, required
	NumberOfDisks terra.NumberValue `hcl:"number_of_disks,attr" validate:"required"`
	// SizeInGb: number, required
	SizeInGb terra.NumberValue `hcl:"size_in_gb,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type SingleServerConfigurationVirtualMachineConfiguration struct {
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// SingleServerConfigurationVirtualMachineConfigurationImage: required
	Image *SingleServerConfigurationVirtualMachineConfigurationImage `hcl:"image,block" validate:"required"`
	// SingleServerConfigurationVirtualMachineConfigurationOsProfile: required
	OsProfile *SingleServerConfigurationVirtualMachineConfigurationOsProfile `hcl:"os_profile,block" validate:"required"`
}

type SingleServerConfigurationVirtualMachineConfigurationImage struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type SingleServerConfigurationVirtualMachineConfigurationOsProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshPrivateKey: string, required
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr" validate:"required"`
	// SshPublicKey: string, required
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr" validate:"required"`
}

type SingleServerConfigurationVirtualMachineResourceNames struct {
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// NetworkInterfaceNames: list of string, optional
	NetworkInterfaceNames terra.ListValue[terra.StringValue] `hcl:"network_interface_names,attr"`
	// OsDiskName: string, optional
	OsDiskName terra.StringValue `hcl:"os_disk_name,attr"`
	// VirtualMachineName: string, optional
	VirtualMachineName terra.StringValue `hcl:"virtual_machine_name,attr"`
	// SingleServerConfigurationVirtualMachineResourceNamesDataDisk: min=0
	DataDisk []SingleServerConfigurationVirtualMachineResourceNamesDataDisk `hcl:"data_disk,block" validate:"min=0"`
}

type SingleServerConfigurationVirtualMachineResourceNamesDataDisk struct {
	// Names: list of string, required
	Names terra.ListValue[terra.StringValue] `hcl:"names,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type SingleServerConfigurationAttributes struct {
	ref terra.Reference
}

func (ssc SingleServerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc SingleServerConfigurationAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationAttributes {
	return SingleServerConfigurationAttributes{ref: ref}
}

func (ssc SingleServerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc SingleServerConfigurationAttributes) AppResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("app_resource_group_name"))
}

func (ssc SingleServerConfigurationAttributes) DatabaseType() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("database_type"))
}

func (ssc SingleServerConfigurationAttributes) SecondaryIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssc.ref.Append("secondary_ip_enabled"))
}

func (ssc SingleServerConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("subnet_id"))
}

func (ssc SingleServerConfigurationAttributes) DiskVolumeConfiguration() terra.SetValue[SingleServerConfigurationDiskVolumeConfigurationAttributes] {
	return terra.ReferenceAsSet[SingleServerConfigurationDiskVolumeConfigurationAttributes](ssc.ref.Append("disk_volume_configuration"))
}

func (ssc SingleServerConfigurationAttributes) VirtualMachineConfiguration() terra.ListValue[SingleServerConfigurationVirtualMachineConfigurationAttributes] {
	return terra.ReferenceAsList[SingleServerConfigurationVirtualMachineConfigurationAttributes](ssc.ref.Append("virtual_machine_configuration"))
}

func (ssc SingleServerConfigurationAttributes) VirtualMachineResourceNames() terra.ListValue[SingleServerConfigurationVirtualMachineResourceNamesAttributes] {
	return terra.ReferenceAsList[SingleServerConfigurationVirtualMachineResourceNamesAttributes](ssc.ref.Append("virtual_machine_resource_names"))
}

type SingleServerConfigurationDiskVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dvc.ref, nil
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationDiskVolumeConfigurationAttributes {
	return SingleServerConfigurationDiskVolumeConfigurationAttributes{ref: ref}
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dvc.ref.InternalTokens()
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) NumberOfDisks() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("number_of_disks"))
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) SizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("size_in_gb"))
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("sku_name"))
}

func (dvc SingleServerConfigurationDiskVolumeConfigurationAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("volume_name"))
}

type SingleServerConfigurationVirtualMachineConfigurationAttributes struct {
	ref terra.Reference
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationVirtualMachineConfigurationAttributes {
	return SingleServerConfigurationVirtualMachineConfigurationAttributes{ref: ref}
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("virtual_machine_size"))
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) Image() terra.ListValue[SingleServerConfigurationVirtualMachineConfigurationImageAttributes] {
	return terra.ReferenceAsList[SingleServerConfigurationVirtualMachineConfigurationImageAttributes](vmc.ref.Append("image"))
}

func (vmc SingleServerConfigurationVirtualMachineConfigurationAttributes) OsProfile() terra.ListValue[SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes] {
	return terra.ReferenceAsList[SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes](vmc.ref.Append("os_profile"))
}

type SingleServerConfigurationVirtualMachineConfigurationImageAttributes struct {
	ref terra.Reference
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationVirtualMachineConfigurationImageAttributes {
	return SingleServerConfigurationVirtualMachineConfigurationImageAttributes{ref: ref}
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("offer"))
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("publisher"))
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sku"))
}

func (i SingleServerConfigurationVirtualMachineConfigurationImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes struct {
	ref terra.Reference
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes {
	return SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes{ref: ref}
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_private_key"))
}

func (op SingleServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_public_key"))
}

type SingleServerConfigurationVirtualMachineResourceNamesAttributes struct {
	ref terra.Reference
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) InternalRef() (terra.Reference, error) {
	return vmrn.ref, nil
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationVirtualMachineResourceNamesAttributes {
	return SingleServerConfigurationVirtualMachineResourceNamesAttributes{ref: ref}
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmrn.ref.InternalTokens()
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("host_name"))
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) NetworkInterfaceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmrn.ref.Append("network_interface_names"))
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) OsDiskName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("os_disk_name"))
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) VirtualMachineName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("virtual_machine_name"))
}

func (vmrn SingleServerConfigurationVirtualMachineResourceNamesAttributes) DataDisk() terra.SetValue[SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes] {
	return terra.ReferenceAsSet[SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes](vmrn.ref.Append("data_disk"))
}

type SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes struct {
	ref terra.Reference
}

func (dd SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes {
	return SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes{ref: ref}
}

func (dd SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("names"))
}

func (dd SingleServerConfigurationVirtualMachineResourceNamesDataDiskAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("volume_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type SingleServerConfigurationState struct {
	AppResourceGroupName        string                                                      `json:"app_resource_group_name"`
	DatabaseType                string                                                      `json:"database_type"`
	SecondaryIpEnabled          bool                                                        `json:"secondary_ip_enabled"`
	SubnetId                    string                                                      `json:"subnet_id"`
	DiskVolumeConfiguration     []SingleServerConfigurationDiskVolumeConfigurationState     `json:"disk_volume_configuration"`
	VirtualMachineConfiguration []SingleServerConfigurationVirtualMachineConfigurationState `json:"virtual_machine_configuration"`
	VirtualMachineResourceNames []SingleServerConfigurationVirtualMachineResourceNamesState `json:"virtual_machine_resource_names"`
}

type SingleServerConfigurationDiskVolumeConfigurationState struct {
	NumberOfDisks float64 `json:"number_of_disks"`
	SizeInGb      float64 `json:"size_in_gb"`
	SkuName       string  `json:"sku_name"`
	VolumeName    string  `json:"volume_name"`
}

type SingleServerConfigurationVirtualMachineConfigurationState struct {
	VirtualMachineSize string                                                               `json:"virtual_machine_size"`
	Image              []SingleServerConfigurationVirtualMachineConfigurationImageState     `json:"image"`
	OsProfile          []SingleServerConfigurationVirtualMachineConfigurationOsProfileState `json:"os_profile"`
}

type SingleServerConfigurationVirtualMachineConfigurationImageState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type SingleServerConfigurationVirtualMachineConfigurationOsProfileState struct {
	AdminUsername string `json:"admin_username"`
	SshPrivateKey string `json:"ssh_private_key"`
	SshPublicKey  string `json:"ssh_public_key"`
}

type SingleServerConfigurationVirtualMachineResourceNamesState struct {
	HostName              string                                                              `json:"host_name"`
	NetworkInterfaceNames []string                                                            `json:"network_interface_names"`
	OsDiskName            string                                                              `json:"os_disk_name"`
	VirtualMachineName    string                                                              `json:"virtual_machine_name"`
	DataDisk              []SingleServerConfigurationVirtualMachineResourceNamesDataDiskState `json:"data_disk"`
}

type SingleServerConfigurationVirtualMachineResourceNamesDataDiskState struct {
	Names      []string `json:"names"`
	VolumeName string   `json:"volume_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
