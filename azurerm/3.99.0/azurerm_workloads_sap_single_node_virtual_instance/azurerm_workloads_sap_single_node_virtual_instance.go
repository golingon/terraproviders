// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_workloads_sap_single_node_virtual_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_workloads_sap_single_node_virtual_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermWorkloadsSapSingleNodeVirtualInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awssnvi *Resource) Type() string {
	return "azurerm_workloads_sap_single_node_virtual_instance"
}

// LocalName returns the local name for [Resource].
func (awssnvi *Resource) LocalName() string {
	return awssnvi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awssnvi *Resource) Configuration() interface{} {
	return awssnvi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awssnvi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awssnvi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awssnvi *Resource) Dependencies() terra.Dependencies {
	return awssnvi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awssnvi *Resource) LifecycleManagement() *terra.Lifecycle {
	return awssnvi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awssnvi *Resource) Attributes() azurermWorkloadsSapSingleNodeVirtualInstanceAttributes {
	return azurermWorkloadsSapSingleNodeVirtualInstanceAttributes{ref: terra.ReferenceResource(awssnvi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awssnvi *Resource) ImportState(state io.Reader) error {
	awssnvi.state = &azurermWorkloadsSapSingleNodeVirtualInstanceState{}
	if err := json.NewDecoder(state).Decode(awssnvi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awssnvi.Type(), awssnvi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awssnvi *Resource) State() (*azurermWorkloadsSapSingleNodeVirtualInstanceState, bool) {
	return awssnvi.state, awssnvi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awssnvi *Resource) StateMust() *azurermWorkloadsSapSingleNodeVirtualInstanceState {
	if awssnvi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awssnvi.Type(), awssnvi.LocalName()))
	}
	return awssnvi.state
}

// Args contains the configurations for azurerm_workloads_sap_single_node_virtual_instance.
type Args struct {
	// AppLocation: string, required
	AppLocation terra.StringValue `hcl:"app_location,attr" validate:"required"`
	// Environment: string, required
	Environment terra.StringValue `hcl:"environment,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroupName: string, optional
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SapFqdn: string, required
	SapFqdn terra.StringValue `hcl:"sap_fqdn,attr" validate:"required"`
	// SapProduct: string, required
	SapProduct terra.StringValue `hcl:"sap_product,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// SingleServerConfiguration: required
	SingleServerConfiguration *SingleServerConfiguration `hcl:"single_server_configuration,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermWorkloadsSapSingleNodeVirtualInstanceAttributes struct {
	ref terra.Reference
}

// AppLocation returns a reference to field app_location of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) AppLocation() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("app_location"))
}

// Environment returns a reference to field environment of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("environment"))
}

// Id returns a reference to field id of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("location"))
}

// ManagedResourceGroupName returns a reference to field managed_resource_group_name of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("managed_resource_group_name"))
}

// Name returns a reference to field name of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("resource_group_name"))
}

// SapFqdn returns a reference to field sap_fqdn of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) SapFqdn() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("sap_fqdn"))
}

// SapProduct returns a reference to field sap_product of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) SapProduct() terra.StringValue {
	return terra.ReferenceAsString(awssnvi.ref.Append("sap_product"))
}

// Tags returns a reference to field tags of azurerm_workloads_sap_single_node_virtual_instance.
func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awssnvi.ref.Append("tags"))
}

func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](awssnvi.ref.Append("identity"))
}

func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) SingleServerConfiguration() terra.ListValue[SingleServerConfigurationAttributes] {
	return terra.ReferenceAsList[SingleServerConfigurationAttributes](awssnvi.ref.Append("single_server_configuration"))
}

func (awssnvi azurermWorkloadsSapSingleNodeVirtualInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](awssnvi.ref.Append("timeouts"))
}

type azurermWorkloadsSapSingleNodeVirtualInstanceState struct {
	AppLocation               string                           `json:"app_location"`
	Environment               string                           `json:"environment"`
	Id                        string                           `json:"id"`
	Location                  string                           `json:"location"`
	ManagedResourceGroupName  string                           `json:"managed_resource_group_name"`
	Name                      string                           `json:"name"`
	ResourceGroupName         string                           `json:"resource_group_name"`
	SapFqdn                   string                           `json:"sap_fqdn"`
	SapProduct                string                           `json:"sap_product"`
	Tags                      map[string]string                `json:"tags"`
	Identity                  []IdentityState                  `json:"identity"`
	SingleServerConfiguration []SingleServerConfigurationState `json:"single_server_configuration"`
	Timeouts                  *TimeoutsState                   `json:"timeouts"`
}
