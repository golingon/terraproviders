// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_redis_linked_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_redis_linked_server.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRedisLinkedServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arls *Resource) Type() string {
	return "azurerm_redis_linked_server"
}

// LocalName returns the local name for [Resource].
func (arls *Resource) LocalName() string {
	return arls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arls *Resource) Configuration() interface{} {
	return arls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arls *Resource) Dependencies() terra.Dependencies {
	return arls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arls *Resource) LifecycleManagement() *terra.Lifecycle {
	return arls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arls *Resource) Attributes() azurermRedisLinkedServerAttributes {
	return azurermRedisLinkedServerAttributes{ref: terra.ReferenceResource(arls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arls *Resource) ImportState(state io.Reader) error {
	arls.state = &azurermRedisLinkedServerState{}
	if err := json.NewDecoder(state).Decode(arls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arls.Type(), arls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arls *Resource) State() (*azurermRedisLinkedServerState, bool) {
	return arls.state, arls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arls *Resource) StateMust() *azurermRedisLinkedServerState {
	if arls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arls.Type(), arls.LocalName()))
	}
	return arls.state
}

// Args contains the configurations for azurerm_redis_linked_server.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedRedisCacheId: string, required
	LinkedRedisCacheId terra.StringValue `hcl:"linked_redis_cache_id,attr" validate:"required"`
	// LinkedRedisCacheLocation: string, required
	LinkedRedisCacheLocation terra.StringValue `hcl:"linked_redis_cache_location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerRole: string, required
	ServerRole terra.StringValue `hcl:"server_role,attr" validate:"required"`
	// TargetRedisCacheName: string, required
	TargetRedisCacheName terra.StringValue `hcl:"target_redis_cache_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRedisLinkedServerAttributes struct {
	ref terra.Reference
}

// GeoReplicatedPrimaryHostName returns a reference to field geo_replicated_primary_host_name of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) GeoReplicatedPrimaryHostName() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("geo_replicated_primary_host_name"))
}

// Id returns a reference to field id of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("id"))
}

// LinkedRedisCacheId returns a reference to field linked_redis_cache_id of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) LinkedRedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("linked_redis_cache_id"))
}

// LinkedRedisCacheLocation returns a reference to field linked_redis_cache_location of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) LinkedRedisCacheLocation() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("linked_redis_cache_location"))
}

// Name returns a reference to field name of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("resource_group_name"))
}

// ServerRole returns a reference to field server_role of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) ServerRole() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("server_role"))
}

// TargetRedisCacheName returns a reference to field target_redis_cache_name of azurerm_redis_linked_server.
func (arls azurermRedisLinkedServerAttributes) TargetRedisCacheName() terra.StringValue {
	return terra.ReferenceAsString(arls.ref.Append("target_redis_cache_name"))
}

func (arls azurermRedisLinkedServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arls.ref.Append("timeouts"))
}

type azurermRedisLinkedServerState struct {
	GeoReplicatedPrimaryHostName string         `json:"geo_replicated_primary_host_name"`
	Id                           string         `json:"id"`
	LinkedRedisCacheId           string         `json:"linked_redis_cache_id"`
	LinkedRedisCacheLocation     string         `json:"linked_redis_cache_location"`
	Name                         string         `json:"name"`
	ResourceGroupName            string         `json:"resource_group_name"`
	ServerRole                   string         `json:"server_role"`
	TargetRedisCacheName         string         `json:"target_redis_cache_name"`
	Timeouts                     *TimeoutsState `json:"timeouts"`
}
