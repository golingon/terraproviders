// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hpc_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_hpc_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHpcCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahc *Resource) Type() string {
	return "azurerm_hpc_cache"
}

// LocalName returns the local name for [Resource].
func (ahc *Resource) LocalName() string {
	return ahc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahc *Resource) Configuration() interface{} {
	return ahc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahc *Resource) Dependencies() terra.Dependencies {
	return ahc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahc *Resource) Attributes() azurermHpcCacheAttributes {
	return azurermHpcCacheAttributes{ref: terra.ReferenceResource(ahc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahc *Resource) ImportState(state io.Reader) error {
	ahc.state = &azurermHpcCacheState{}
	if err := json.NewDecoder(state).Decode(ahc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahc.Type(), ahc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahc *Resource) State() (*azurermHpcCacheState, bool) {
	return ahc.state, ahc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahc *Resource) StateMust() *azurermHpcCacheState {
	if ahc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahc.Type(), ahc.LocalName()))
	}
	return ahc.state
}

// Args contains the configurations for azurerm_hpc_cache.
type Args struct {
	// AutomaticallyRotateKeyToLatestEnabled: bool, optional
	AutomaticallyRotateKeyToLatestEnabled terra.BoolValue `hcl:"automatically_rotate_key_to_latest_enabled,attr"`
	// CacheSizeInGb: number, required
	CacheSizeInGb terra.NumberValue `hcl:"cache_size_in_gb,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultKeyId: string, optional
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Mtu: number, optional
	Mtu terra.NumberValue `hcl:"mtu,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NtpServer: string, optional
	NtpServer terra.StringValue `hcl:"ntp_server,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DefaultAccessPolicy: optional
	DefaultAccessPolicy *DefaultAccessPolicy `hcl:"default_access_policy,block"`
	// DirectoryActiveDirectory: optional
	DirectoryActiveDirectory *DirectoryActiveDirectory `hcl:"directory_active_directory,block"`
	// DirectoryFlatFile: optional
	DirectoryFlatFile *DirectoryFlatFile `hcl:"directory_flat_file,block"`
	// DirectoryLdap: optional
	DirectoryLdap *DirectoryLdap `hcl:"directory_ldap,block"`
	// Dns: optional
	Dns *Dns `hcl:"dns,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHpcCacheAttributes struct {
	ref terra.Reference
}

// AutomaticallyRotateKeyToLatestEnabled returns a reference to field automatically_rotate_key_to_latest_enabled of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) AutomaticallyRotateKeyToLatestEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ahc.ref.Append("automatically_rotate_key_to_latest_enabled"))
}

// CacheSizeInGb returns a reference to field cache_size_in_gb of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) CacheSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ahc.ref.Append("cache_size_in_gb"))
}

// Id returns a reference to field id of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("id"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("key_vault_key_id"))
}

// Location returns a reference to field location of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("location"))
}

// MountAddresses returns a reference to field mount_addresses of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) MountAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ahc.ref.Append("mount_addresses"))
}

// Mtu returns a reference to field mtu of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) Mtu() terra.NumberValue {
	return terra.ReferenceAsNumber(ahc.ref.Append("mtu"))
}

// Name returns a reference to field name of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("name"))
}

// NtpServer returns a reference to field ntp_server of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) NtpServer() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("ntp_server"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("sku_name"))
}

// SubnetId returns a reference to field subnet_id of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ahc.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_hpc_cache.
func (ahc azurermHpcCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ahc.ref.Append("tags"))
}

func (ahc azurermHpcCacheAttributes) DefaultAccessPolicy() terra.ListValue[DefaultAccessPolicyAttributes] {
	return terra.ReferenceAsList[DefaultAccessPolicyAttributes](ahc.ref.Append("default_access_policy"))
}

func (ahc azurermHpcCacheAttributes) DirectoryActiveDirectory() terra.ListValue[DirectoryActiveDirectoryAttributes] {
	return terra.ReferenceAsList[DirectoryActiveDirectoryAttributes](ahc.ref.Append("directory_active_directory"))
}

func (ahc azurermHpcCacheAttributes) DirectoryFlatFile() terra.ListValue[DirectoryFlatFileAttributes] {
	return terra.ReferenceAsList[DirectoryFlatFileAttributes](ahc.ref.Append("directory_flat_file"))
}

func (ahc azurermHpcCacheAttributes) DirectoryLdap() terra.ListValue[DirectoryLdapAttributes] {
	return terra.ReferenceAsList[DirectoryLdapAttributes](ahc.ref.Append("directory_ldap"))
}

func (ahc azurermHpcCacheAttributes) Dns() terra.ListValue[DnsAttributes] {
	return terra.ReferenceAsList[DnsAttributes](ahc.ref.Append("dns"))
}

func (ahc azurermHpcCacheAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ahc.ref.Append("identity"))
}

func (ahc azurermHpcCacheAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahc.ref.Append("timeouts"))
}

type azurermHpcCacheState struct {
	AutomaticallyRotateKeyToLatestEnabled bool                            `json:"automatically_rotate_key_to_latest_enabled"`
	CacheSizeInGb                         float64                         `json:"cache_size_in_gb"`
	Id                                    string                          `json:"id"`
	KeyVaultKeyId                         string                          `json:"key_vault_key_id"`
	Location                              string                          `json:"location"`
	MountAddresses                        []string                        `json:"mount_addresses"`
	Mtu                                   float64                         `json:"mtu"`
	Name                                  string                          `json:"name"`
	NtpServer                             string                          `json:"ntp_server"`
	ResourceGroupName                     string                          `json:"resource_group_name"`
	SkuName                               string                          `json:"sku_name"`
	SubnetId                              string                          `json:"subnet_id"`
	Tags                                  map[string]string               `json:"tags"`
	DefaultAccessPolicy                   []DefaultAccessPolicyState      `json:"default_access_policy"`
	DirectoryActiveDirectory              []DirectoryActiveDirectoryState `json:"directory_active_directory"`
	DirectoryFlatFile                     []DirectoryFlatFileState        `json:"directory_flat_file"`
	DirectoryLdap                         []DirectoryLdapState            `json:"directory_ldap"`
	Dns                                   []DnsState                      `json:"dns"`
	Identity                              []IdentityState                 `json:"identity"`
	Timeouts                              *TimeoutsState                  `json:"timeouts"`
}
