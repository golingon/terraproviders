// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hpc_cache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DefaultAccessPolicy struct {
	// DefaultAccessPolicyAccessRule: min=1,max=3
	AccessRule []DefaultAccessPolicyAccessRule `hcl:"access_rule,block" validate:"min=1,max=3"`
}

type DefaultAccessPolicyAccessRule struct {
	// Access: string, required
	Access terra.StringValue `hcl:"access,attr" validate:"required"`
	// AnonymousGid: number, optional
	AnonymousGid terra.NumberValue `hcl:"anonymous_gid,attr"`
	// AnonymousUid: number, optional
	AnonymousUid terra.NumberValue `hcl:"anonymous_uid,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// RootSquashEnabled: bool, optional
	RootSquashEnabled terra.BoolValue `hcl:"root_squash_enabled,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// SubmountAccessEnabled: bool, optional
	SubmountAccessEnabled terra.BoolValue `hcl:"submount_access_enabled,attr"`
	// SuidEnabled: bool, optional
	SuidEnabled terra.BoolValue `hcl:"suid_enabled,attr"`
}

type DirectoryActiveDirectory struct {
	// CacheNetbiosName: string, required
	CacheNetbiosName terra.StringValue `hcl:"cache_netbios_name,attr" validate:"required"`
	// DnsPrimaryIp: string, required
	DnsPrimaryIp terra.StringValue `hcl:"dns_primary_ip,attr" validate:"required"`
	// DnsSecondaryIp: string, optional
	DnsSecondaryIp terra.StringValue `hcl:"dns_secondary_ip,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// DomainNetbiosName: string, required
	DomainNetbiosName terra.StringValue `hcl:"domain_netbios_name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type DirectoryFlatFile struct {
	// GroupFileUri: string, required
	GroupFileUri terra.StringValue `hcl:"group_file_uri,attr" validate:"required"`
	// PasswordFileUri: string, required
	PasswordFileUri terra.StringValue `hcl:"password_file_uri,attr" validate:"required"`
}

type DirectoryLdap struct {
	// BaseDn: string, required
	BaseDn terra.StringValue `hcl:"base_dn,attr" validate:"required"`
	// CertificateValidationUri: string, optional
	CertificateValidationUri terra.StringValue `hcl:"certificate_validation_uri,attr"`
	// DownloadCertificateAutomatically: bool, optional
	DownloadCertificateAutomatically terra.BoolValue `hcl:"download_certificate_automatically,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// DirectoryLdapBind: optional
	Bind *DirectoryLdapBind `hcl:"bind,block"`
}

type DirectoryLdapBind struct {
	// Dn: string, required
	Dn terra.StringValue `hcl:"dn,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
}

type Dns struct {
	// SearchDomain: string, optional
	SearchDomain terra.StringValue `hcl:"search_domain,attr"`
	// Servers: list of string, required
	Servers terra.ListValue[terra.StringValue] `hcl:"servers,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DefaultAccessPolicyAttributes struct {
	ref terra.Reference
}

func (dap DefaultAccessPolicyAttributes) InternalRef() (terra.Reference, error) {
	return dap.ref, nil
}

func (dap DefaultAccessPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultAccessPolicyAttributes {
	return DefaultAccessPolicyAttributes{ref: ref}
}

func (dap DefaultAccessPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dap.ref.InternalTokens()
}

func (dap DefaultAccessPolicyAttributes) AccessRule() terra.SetValue[DefaultAccessPolicyAccessRuleAttributes] {
	return terra.ReferenceAsSet[DefaultAccessPolicyAccessRuleAttributes](dap.ref.Append("access_rule"))
}

type DefaultAccessPolicyAccessRuleAttributes struct {
	ref terra.Reference
}

func (ar DefaultAccessPolicyAccessRuleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar DefaultAccessPolicyAccessRuleAttributes) InternalWithRef(ref terra.Reference) DefaultAccessPolicyAccessRuleAttributes {
	return DefaultAccessPolicyAccessRuleAttributes{ref: ref}
}

func (ar DefaultAccessPolicyAccessRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar DefaultAccessPolicyAccessRuleAttributes) Access() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("access"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) AnonymousGid() terra.NumberValue {
	return terra.ReferenceAsNumber(ar.ref.Append("anonymous_gid"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) AnonymousUid() terra.NumberValue {
	return terra.ReferenceAsNumber(ar.ref.Append("anonymous_uid"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("filter"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) RootSquashEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("root_squash_enabled"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("scope"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) SubmountAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("submount_access_enabled"))
}

func (ar DefaultAccessPolicyAccessRuleAttributes) SuidEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("suid_enabled"))
}

type DirectoryActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (dad DirectoryActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return dad.ref, nil
}

func (dad DirectoryActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) DirectoryActiveDirectoryAttributes {
	return DirectoryActiveDirectoryAttributes{ref: ref}
}

func (dad DirectoryActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dad.ref.InternalTokens()
}

func (dad DirectoryActiveDirectoryAttributes) CacheNetbiosName() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("cache_netbios_name"))
}

func (dad DirectoryActiveDirectoryAttributes) DnsPrimaryIp() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("dns_primary_ip"))
}

func (dad DirectoryActiveDirectoryAttributes) DnsSecondaryIp() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("dns_secondary_ip"))
}

func (dad DirectoryActiveDirectoryAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("domain_name"))
}

func (dad DirectoryActiveDirectoryAttributes) DomainNetbiosName() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("domain_netbios_name"))
}

func (dad DirectoryActiveDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("password"))
}

func (dad DirectoryActiveDirectoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(dad.ref.Append("username"))
}

type DirectoryFlatFileAttributes struct {
	ref terra.Reference
}

func (dff DirectoryFlatFileAttributes) InternalRef() (terra.Reference, error) {
	return dff.ref, nil
}

func (dff DirectoryFlatFileAttributes) InternalWithRef(ref terra.Reference) DirectoryFlatFileAttributes {
	return DirectoryFlatFileAttributes{ref: ref}
}

func (dff DirectoryFlatFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dff.ref.InternalTokens()
}

func (dff DirectoryFlatFileAttributes) GroupFileUri() terra.StringValue {
	return terra.ReferenceAsString(dff.ref.Append("group_file_uri"))
}

func (dff DirectoryFlatFileAttributes) PasswordFileUri() terra.StringValue {
	return terra.ReferenceAsString(dff.ref.Append("password_file_uri"))
}

type DirectoryLdapAttributes struct {
	ref terra.Reference
}

func (dl DirectoryLdapAttributes) InternalRef() (terra.Reference, error) {
	return dl.ref, nil
}

func (dl DirectoryLdapAttributes) InternalWithRef(ref terra.Reference) DirectoryLdapAttributes {
	return DirectoryLdapAttributes{ref: ref}
}

func (dl DirectoryLdapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dl.ref.InternalTokens()
}

func (dl DirectoryLdapAttributes) BaseDn() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("base_dn"))
}

func (dl DirectoryLdapAttributes) CertificateValidationUri() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("certificate_validation_uri"))
}

func (dl DirectoryLdapAttributes) DownloadCertificateAutomatically() terra.BoolValue {
	return terra.ReferenceAsBool(dl.ref.Append("download_certificate_automatically"))
}

func (dl DirectoryLdapAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(dl.ref.Append("encrypted"))
}

func (dl DirectoryLdapAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("server"))
}

func (dl DirectoryLdapAttributes) Bind() terra.ListValue[DirectoryLdapBindAttributes] {
	return terra.ReferenceAsList[DirectoryLdapBindAttributes](dl.ref.Append("bind"))
}

type DirectoryLdapBindAttributes struct {
	ref terra.Reference
}

func (b DirectoryLdapBindAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DirectoryLdapBindAttributes) InternalWithRef(ref terra.Reference) DirectoryLdapBindAttributes {
	return DirectoryLdapBindAttributes{ref: ref}
}

func (b DirectoryLdapBindAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DirectoryLdapBindAttributes) Dn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("dn"))
}

func (b DirectoryLdapBindAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("password"))
}

type DnsAttributes struct {
	ref terra.Reference
}

func (d DnsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DnsAttributes) InternalWithRef(ref terra.Reference) DnsAttributes {
	return DnsAttributes{ref: ref}
}

func (d DnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DnsAttributes) SearchDomain() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("search_domain"))
}

func (d DnsAttributes) Servers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("servers"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DefaultAccessPolicyState struct {
	AccessRule []DefaultAccessPolicyAccessRuleState `json:"access_rule"`
}

type DefaultAccessPolicyAccessRuleState struct {
	Access                string  `json:"access"`
	AnonymousGid          float64 `json:"anonymous_gid"`
	AnonymousUid          float64 `json:"anonymous_uid"`
	Filter                string  `json:"filter"`
	RootSquashEnabled     bool    `json:"root_squash_enabled"`
	Scope                 string  `json:"scope"`
	SubmountAccessEnabled bool    `json:"submount_access_enabled"`
	SuidEnabled           bool    `json:"suid_enabled"`
}

type DirectoryActiveDirectoryState struct {
	CacheNetbiosName  string `json:"cache_netbios_name"`
	DnsPrimaryIp      string `json:"dns_primary_ip"`
	DnsSecondaryIp    string `json:"dns_secondary_ip"`
	DomainName        string `json:"domain_name"`
	DomainNetbiosName string `json:"domain_netbios_name"`
	Password          string `json:"password"`
	Username          string `json:"username"`
}

type DirectoryFlatFileState struct {
	GroupFileUri    string `json:"group_file_uri"`
	PasswordFileUri string `json:"password_file_uri"`
}

type DirectoryLdapState struct {
	BaseDn                           string                   `json:"base_dn"`
	CertificateValidationUri         string                   `json:"certificate_validation_uri"`
	DownloadCertificateAutomatically bool                     `json:"download_certificate_automatically"`
	Encrypted                        bool                     `json:"encrypted"`
	Server                           string                   `json:"server"`
	Bind                             []DirectoryLdapBindState `json:"bind"`
}

type DirectoryLdapBindState struct {
	Dn       string `json:"dn"`
	Password string `json:"password"`
}

type DnsState struct {
	SearchDomain string   `json:"search_domain"`
	Servers      []string `json:"servers"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
