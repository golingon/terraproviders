// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_static_site

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_static_site.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStaticSiteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "azurerm_static_site"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() azurermStaticSiteAttributes {
	return azurermStaticSiteAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &azurermStaticSiteState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*azurermStaticSiteState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *azurermStaticSiteState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for azurerm_static_site.
type Args struct {
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuSize: string, optional
	SkuSize terra.StringValue `hcl:"sku_size,attr"`
	// SkuTier: string, optional
	SkuTier terra.StringValue `hcl:"sku_tier,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStaticSiteAttributes struct {
	ref terra.Reference
}

// ApiKey returns a reference to field api_key of azurerm_static_site.
func (ass azurermStaticSiteAttributes) ApiKey() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("api_key"))
}

// AppSettings returns a reference to field app_settings of azurerm_static_site.
func (ass azurermStaticSiteAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("app_settings"))
}

// DefaultHostName returns a reference to field default_host_name of azurerm_static_site.
func (ass azurermStaticSiteAttributes) DefaultHostName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("default_host_name"))
}

// Id returns a reference to field id of azurerm_static_site.
func (ass azurermStaticSiteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_static_site.
func (ass azurermStaticSiteAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_static_site.
func (ass azurermStaticSiteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_static_site.
func (ass azurermStaticSiteAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_group_name"))
}

// SkuSize returns a reference to field sku_size of azurerm_static_site.
func (ass azurermStaticSiteAttributes) SkuSize() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("sku_size"))
}

// SkuTier returns a reference to field sku_tier of azurerm_static_site.
func (ass azurermStaticSiteAttributes) SkuTier() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("sku_tier"))
}

// Tags returns a reference to field tags of azurerm_static_site.
func (ass azurermStaticSiteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

func (ass azurermStaticSiteAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ass.ref.Append("identity"))
}

func (ass azurermStaticSiteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ass.ref.Append("timeouts"))
}

type azurermStaticSiteState struct {
	ApiKey            string            `json:"api_key"`
	AppSettings       map[string]string `json:"app_settings"`
	DefaultHostName   string            `json:"default_host_name"`
	Id                string            `json:"id"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	SkuSize           string            `json:"sku_size"`
	SkuTier           string            `json:"sku_tier"`
	Tags              map[string]string `json:"tags"`
	Identity          []IdentityState   `json:"identity"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
