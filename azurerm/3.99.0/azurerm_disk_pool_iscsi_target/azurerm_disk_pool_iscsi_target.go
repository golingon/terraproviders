// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_disk_pool_iscsi_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_disk_pool_iscsi_target.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDiskPoolIscsiTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpit *Resource) Type() string {
	return "azurerm_disk_pool_iscsi_target"
}

// LocalName returns the local name for [Resource].
func (adpit *Resource) LocalName() string {
	return adpit.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpit *Resource) Configuration() interface{} {
	return adpit.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpit *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpit)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpit *Resource) Dependencies() terra.Dependencies {
	return adpit.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpit *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpit.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpit *Resource) Attributes() azurermDiskPoolIscsiTargetAttributes {
	return azurermDiskPoolIscsiTargetAttributes{ref: terra.ReferenceResource(adpit)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpit *Resource) ImportState(state io.Reader) error {
	adpit.state = &azurermDiskPoolIscsiTargetState{}
	if err := json.NewDecoder(state).Decode(adpit.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpit.Type(), adpit.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpit *Resource) State() (*azurermDiskPoolIscsiTargetState, bool) {
	return adpit.state, adpit.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpit *Resource) StateMust() *azurermDiskPoolIscsiTargetState {
	if adpit.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpit.Type(), adpit.LocalName()))
	}
	return adpit.state
}

// Args contains the configurations for azurerm_disk_pool_iscsi_target.
type Args struct {
	// AclMode: string, required
	AclMode terra.StringValue `hcl:"acl_mode,attr" validate:"required"`
	// DisksPoolId: string, required
	DisksPoolId terra.StringValue `hcl:"disks_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetIqn: string, optional
	TargetIqn terra.StringValue `hcl:"target_iqn,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDiskPoolIscsiTargetAttributes struct {
	ref terra.Reference
}

// AclMode returns a reference to field acl_mode of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) AclMode() terra.StringValue {
	return terra.ReferenceAsString(adpit.ref.Append("acl_mode"))
}

// DisksPoolId returns a reference to field disks_pool_id of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) DisksPoolId() terra.StringValue {
	return terra.ReferenceAsString(adpit.ref.Append("disks_pool_id"))
}

// Endpoints returns a reference to field endpoints of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) Endpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adpit.ref.Append("endpoints"))
}

// Id returns a reference to field id of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpit.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpit.ref.Append("name"))
}

// Port returns a reference to field port of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(adpit.ref.Append("port"))
}

// TargetIqn returns a reference to field target_iqn of azurerm_disk_pool_iscsi_target.
func (adpit azurermDiskPoolIscsiTargetAttributes) TargetIqn() terra.StringValue {
	return terra.ReferenceAsString(adpit.ref.Append("target_iqn"))
}

func (adpit azurermDiskPoolIscsiTargetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpit.ref.Append("timeouts"))
}

type azurermDiskPoolIscsiTargetState struct {
	AclMode     string         `json:"acl_mode"`
	DisksPoolId string         `json:"disks_pool_id"`
	Endpoints   []string       `json:"endpoints"`
	Id          string         `json:"id"`
	Name        string         `json:"name"`
	Port        float64        `json:"port"`
	TargetIqn   string         `json:"target_iqn"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
