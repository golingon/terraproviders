// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_configuration_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_configuration_key.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppConfigurationKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aack *Resource) Type() string {
	return "azurerm_app_configuration_key"
}

// LocalName returns the local name for [Resource].
func (aack *Resource) LocalName() string {
	return aack.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aack *Resource) Configuration() interface{} {
	return aack.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aack *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aack)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aack *Resource) Dependencies() terra.Dependencies {
	return aack.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aack *Resource) LifecycleManagement() *terra.Lifecycle {
	return aack.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aack *Resource) Attributes() azurermAppConfigurationKeyAttributes {
	return azurermAppConfigurationKeyAttributes{ref: terra.ReferenceResource(aack)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aack *Resource) ImportState(state io.Reader) error {
	aack.state = &azurermAppConfigurationKeyState{}
	if err := json.NewDecoder(state).Decode(aack.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aack.Type(), aack.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aack *Resource) State() (*azurermAppConfigurationKeyState, bool) {
	return aack.state, aack.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aack *Resource) StateMust() *azurermAppConfigurationKeyState {
	if aack.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aack.Type(), aack.LocalName()))
	}
	return aack.state
}

// Args contains the configurations for azurerm_app_configuration_key.
type Args struct {
	// ConfigurationStoreId: string, required
	ConfigurationStoreId terra.StringValue `hcl:"configuration_store_id,attr" validate:"required"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Locked: bool, optional
	Locked terra.BoolValue `hcl:"locked,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// VaultKeyReference: string, optional
	VaultKeyReference terra.StringValue `hcl:"vault_key_reference,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppConfigurationKeyAttributes struct {
	ref terra.Reference
}

// ConfigurationStoreId returns a reference to field configuration_store_id of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) ConfigurationStoreId() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("configuration_store_id"))
}

// ContentType returns a reference to field content_type of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("content_type"))
}

// Etag returns a reference to field etag of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("etag"))
}

// Id returns a reference to field id of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("id"))
}

// Key returns a reference to field key of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("key"))
}

// Label returns a reference to field label of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("label"))
}

// Locked returns a reference to field locked of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Locked() terra.BoolValue {
	return terra.ReferenceAsBool(aack.ref.Append("locked"))
}

// Tags returns a reference to field tags of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aack.ref.Append("tags"))
}

// Type returns a reference to field type of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("type"))
}

// Value returns a reference to field value of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("value"))
}

// VaultKeyReference returns a reference to field vault_key_reference of azurerm_app_configuration_key.
func (aack azurermAppConfigurationKeyAttributes) VaultKeyReference() terra.StringValue {
	return terra.ReferenceAsString(aack.ref.Append("vault_key_reference"))
}

func (aack azurermAppConfigurationKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aack.ref.Append("timeouts"))
}

type azurermAppConfigurationKeyState struct {
	ConfigurationStoreId string            `json:"configuration_store_id"`
	ContentType          string            `json:"content_type"`
	Etag                 string            `json:"etag"`
	Id                   string            `json:"id"`
	Key                  string            `json:"key"`
	Label                string            `json:"label"`
	Locked               bool              `json:"locked"`
	Tags                 map[string]string `json:"tags"`
	Type                 string            `json:"type"`
	Value                string            `json:"value"`
	VaultKeyReference    string            `json:"vault_key_reference"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
