// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_connection_monitor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_network_connection_monitor.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetworkConnectionMonitorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ancm *Resource) Type() string {
	return "azurerm_network_connection_monitor"
}

// LocalName returns the local name for [Resource].
func (ancm *Resource) LocalName() string {
	return ancm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ancm *Resource) Configuration() interface{} {
	return ancm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ancm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ancm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ancm *Resource) Dependencies() terra.Dependencies {
	return ancm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ancm *Resource) LifecycleManagement() *terra.Lifecycle {
	return ancm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ancm *Resource) Attributes() azurermNetworkConnectionMonitorAttributes {
	return azurermNetworkConnectionMonitorAttributes{ref: terra.ReferenceResource(ancm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ancm *Resource) ImportState(state io.Reader) error {
	ancm.state = &azurermNetworkConnectionMonitorState{}
	if err := json.NewDecoder(state).Decode(ancm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ancm.Type(), ancm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ancm *Resource) State() (*azurermNetworkConnectionMonitorState, bool) {
	return ancm.state, ancm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ancm *Resource) StateMust() *azurermNetworkConnectionMonitorState {
	if ancm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ancm.Type(), ancm.LocalName()))
	}
	return ancm.state
}

// Args contains the configurations for azurerm_network_connection_monitor.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkWatcherId: string, required
	NetworkWatcherId terra.StringValue `hcl:"network_watcher_id,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// OutputWorkspaceResourceIds: set of string, optional
	OutputWorkspaceResourceIds terra.SetValue[terra.StringValue] `hcl:"output_workspace_resource_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Endpoint: min=1
	Endpoint []Endpoint `hcl:"endpoint,block" validate:"min=1"`
	// TestConfiguration: min=1
	TestConfiguration []TestConfiguration `hcl:"test_configuration,block" validate:"min=1"`
	// TestGroup: min=1
	TestGroup []TestGroup `hcl:"test_group,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetworkConnectionMonitorAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ancm.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ancm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ancm.ref.Append("name"))
}

// NetworkWatcherId returns a reference to field network_watcher_id of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) NetworkWatcherId() terra.StringValue {
	return terra.ReferenceAsString(ancm.ref.Append("network_watcher_id"))
}

// Notes returns a reference to field notes of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(ancm.ref.Append("notes"))
}

// OutputWorkspaceResourceIds returns a reference to field output_workspace_resource_ids of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) OutputWorkspaceResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ancm.ref.Append("output_workspace_resource_ids"))
}

// Tags returns a reference to field tags of azurerm_network_connection_monitor.
func (ancm azurermNetworkConnectionMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ancm.ref.Append("tags"))
}

func (ancm azurermNetworkConnectionMonitorAttributes) Endpoint() terra.SetValue[EndpointAttributes] {
	return terra.ReferenceAsSet[EndpointAttributes](ancm.ref.Append("endpoint"))
}

func (ancm azurermNetworkConnectionMonitorAttributes) TestConfiguration() terra.SetValue[TestConfigurationAttributes] {
	return terra.ReferenceAsSet[TestConfigurationAttributes](ancm.ref.Append("test_configuration"))
}

func (ancm azurermNetworkConnectionMonitorAttributes) TestGroup() terra.SetValue[TestGroupAttributes] {
	return terra.ReferenceAsSet[TestGroupAttributes](ancm.ref.Append("test_group"))
}

func (ancm azurermNetworkConnectionMonitorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ancm.ref.Append("timeouts"))
}

type azurermNetworkConnectionMonitorState struct {
	Id                         string                   `json:"id"`
	Location                   string                   `json:"location"`
	Name                       string                   `json:"name"`
	NetworkWatcherId           string                   `json:"network_watcher_id"`
	Notes                      string                   `json:"notes"`
	OutputWorkspaceResourceIds []string                 `json:"output_workspace_resource_ids"`
	Tags                       map[string]string        `json:"tags"`
	Endpoint                   []EndpointState          `json:"endpoint"`
	TestConfiguration          []TestConfigurationState `json:"test_configuration"`
	TestGroup                  []TestGroupState         `json:"test_group"`
	Timeouts                   *TimeoutsState           `json:"timeouts"`
}
