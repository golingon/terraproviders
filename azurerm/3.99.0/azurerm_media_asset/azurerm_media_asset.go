// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_asset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_asset.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaAssetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ama *Resource) Type() string {
	return "azurerm_media_asset"
}

// LocalName returns the local name for [Resource].
func (ama *Resource) LocalName() string {
	return ama.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ama *Resource) Configuration() interface{} {
	return ama.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ama *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ama)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ama *Resource) Dependencies() terra.Dependencies {
	return ama.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ama *Resource) LifecycleManagement() *terra.Lifecycle {
	return ama.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ama *Resource) Attributes() azurermMediaAssetAttributes {
	return azurermMediaAssetAttributes{ref: terra.ReferenceResource(ama)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ama *Resource) ImportState(state io.Reader) error {
	ama.state = &azurermMediaAssetState{}
	if err := json.NewDecoder(state).Decode(ama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ama.Type(), ama.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ama *Resource) State() (*azurermMediaAssetState, bool) {
	return ama.state, ama.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ama *Resource) StateMust() *azurermMediaAssetState {
	if ama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ama.Type(), ama.LocalName()))
	}
	return ama.state
}

// Args contains the configurations for azurerm_media_asset.
type Args struct {
	// AlternateId: string, optional
	AlternateId terra.StringValue `hcl:"alternate_id,attr"`
	// Container: string, optional
	Container terra.StringValue `hcl:"container,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaAssetAttributes struct {
	ref terra.Reference
}

// AlternateId returns a reference to field alternate_id of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) AlternateId() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("alternate_id"))
}

// Container returns a reference to field container of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) Container() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("container"))
}

// Description returns a reference to field description of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("resource_group_name"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_media_asset.
func (ama azurermMediaAssetAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("storage_account_name"))
}

func (ama azurermMediaAssetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ama.ref.Append("timeouts"))
}

type azurermMediaAssetState struct {
	AlternateId              string         `json:"alternate_id"`
	Container                string         `json:"container"`
	Description              string         `json:"description"`
	Id                       string         `json:"id"`
	MediaServicesAccountName string         `json:"media_services_account_name"`
	Name                     string         `json:"name"`
	ResourceGroupName        string         `json:"resource_group_name"`
	StorageAccountName       string         `json:"storage_account_name"`
	Timeouts                 *TimeoutsState `json:"timeouts"`
}
