// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_policy_file_share

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Backup struct {
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Time: string, optional
	Time terra.StringValue `hcl:"time,attr"`
	// BackupHourly: optional
	Hourly *BackupHourly `hcl:"hourly,block"`
}

type BackupHourly struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// WindowDuration: number, required
	WindowDuration terra.NumberValue `hcl:"window_duration,attr" validate:"required"`
}

type RetentionDaily struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
}

type RetentionMonthly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Days: set of number, optional
	Days terra.SetValue[terra.NumberValue] `hcl:"days,attr"`
	// IncludeLastDays: bool, optional
	IncludeLastDays terra.BoolValue `hcl:"include_last_days,attr"`
	// Weekdays: set of string, optional
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr"`
	// Weeks: set of string, optional
	Weeks terra.SetValue[terra.StringValue] `hcl:"weeks,attr"`
}

type RetentionWeekly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Weekdays: set of string, required
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr" validate:"required"`
}

type RetentionYearly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Days: set of number, optional
	Days terra.SetValue[terra.NumberValue] `hcl:"days,attr"`
	// IncludeLastDays: bool, optional
	IncludeLastDays terra.BoolValue `hcl:"include_last_days,attr"`
	// Months: set of string, required
	Months terra.SetValue[terra.StringValue] `hcl:"months,attr" validate:"required"`
	// Weekdays: set of string, optional
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr"`
	// Weeks: set of string, optional
	Weeks terra.SetValue[terra.StringValue] `hcl:"weeks,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BackupAttributes struct {
	ref terra.Reference
}

func (b BackupAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackupAttributes) InternalWithRef(ref terra.Reference) BackupAttributes {
	return BackupAttributes{ref: ref}
}

func (b BackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackupAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("frequency"))
}

func (b BackupAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("time"))
}

func (b BackupAttributes) Hourly() terra.ListValue[BackupHourlyAttributes] {
	return terra.ReferenceAsList[BackupHourlyAttributes](b.ref.Append("hourly"))
}

type BackupHourlyAttributes struct {
	ref terra.Reference
}

func (h BackupHourlyAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h BackupHourlyAttributes) InternalWithRef(ref terra.Reference) BackupHourlyAttributes {
	return BackupHourlyAttributes{ref: ref}
}

func (h BackupHourlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h BackupHourlyAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("interval"))
}

func (h BackupHourlyAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("start_time"))
}

func (h BackupHourlyAttributes) WindowDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("window_duration"))
}

type RetentionDailyAttributes struct {
	ref terra.Reference
}

func (rd RetentionDailyAttributes) InternalRef() (terra.Reference, error) {
	return rd.ref, nil
}

func (rd RetentionDailyAttributes) InternalWithRef(ref terra.Reference) RetentionDailyAttributes {
	return RetentionDailyAttributes{ref: ref}
}

func (rd RetentionDailyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rd.ref.InternalTokens()
}

func (rd RetentionDailyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rd.ref.Append("count"))
}

type RetentionMonthlyAttributes struct {
	ref terra.Reference
}

func (rm RetentionMonthlyAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RetentionMonthlyAttributes) InternalWithRef(ref terra.Reference) RetentionMonthlyAttributes {
	return RetentionMonthlyAttributes{ref: ref}
}

func (rm RetentionMonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RetentionMonthlyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("count"))
}

func (rm RetentionMonthlyAttributes) Days() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](rm.ref.Append("days"))
}

func (rm RetentionMonthlyAttributes) IncludeLastDays() terra.BoolValue {
	return terra.ReferenceAsBool(rm.ref.Append("include_last_days"))
}

func (rm RetentionMonthlyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rm.ref.Append("weekdays"))
}

func (rm RetentionMonthlyAttributes) Weeks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rm.ref.Append("weeks"))
}

type RetentionWeeklyAttributes struct {
	ref terra.Reference
}

func (rw RetentionWeeklyAttributes) InternalRef() (terra.Reference, error) {
	return rw.ref, nil
}

func (rw RetentionWeeklyAttributes) InternalWithRef(ref terra.Reference) RetentionWeeklyAttributes {
	return RetentionWeeklyAttributes{ref: ref}
}

func (rw RetentionWeeklyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rw.ref.InternalTokens()
}

func (rw RetentionWeeklyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rw.ref.Append("count"))
}

func (rw RetentionWeeklyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rw.ref.Append("weekdays"))
}

type RetentionYearlyAttributes struct {
	ref terra.Reference
}

func (ry RetentionYearlyAttributes) InternalRef() (terra.Reference, error) {
	return ry.ref, nil
}

func (ry RetentionYearlyAttributes) InternalWithRef(ref terra.Reference) RetentionYearlyAttributes {
	return RetentionYearlyAttributes{ref: ref}
}

func (ry RetentionYearlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ry.ref.InternalTokens()
}

func (ry RetentionYearlyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ry.ref.Append("count"))
}

func (ry RetentionYearlyAttributes) Days() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](ry.ref.Append("days"))
}

func (ry RetentionYearlyAttributes) IncludeLastDays() terra.BoolValue {
	return terra.ReferenceAsBool(ry.ref.Append("include_last_days"))
}

func (ry RetentionYearlyAttributes) Months() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("months"))
}

func (ry RetentionYearlyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("weekdays"))
}

func (ry RetentionYearlyAttributes) Weeks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("weeks"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BackupState struct {
	Frequency string              `json:"frequency"`
	Time      string              `json:"time"`
	Hourly    []BackupHourlyState `json:"hourly"`
}

type BackupHourlyState struct {
	Interval       float64 `json:"interval"`
	StartTime      string  `json:"start_time"`
	WindowDuration float64 `json:"window_duration"`
}

type RetentionDailyState struct {
	Count float64 `json:"count"`
}

type RetentionMonthlyState struct {
	Count           float64   `json:"count"`
	Days            []float64 `json:"days"`
	IncludeLastDays bool      `json:"include_last_days"`
	Weekdays        []string  `json:"weekdays"`
	Weeks           []string  `json:"weeks"`
}

type RetentionWeeklyState struct {
	Count    float64  `json:"count"`
	Weekdays []string `json:"weekdays"`
}

type RetentionYearlyState struct {
	Count           float64   `json:"count"`
	Days            []float64 `json:"days"`
	IncludeLastDays bool      `json:"include_last_days"`
	Months          []string  `json:"months"`
	Weekdays        []string  `json:"weekdays"`
	Weeks           []string  `json:"weeks"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
