// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_policy_file_share

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_backup_policy_file_share.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBackupPolicyFileShareState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abpfs *Resource) Type() string {
	return "azurerm_backup_policy_file_share"
}

// LocalName returns the local name for [Resource].
func (abpfs *Resource) LocalName() string {
	return abpfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abpfs *Resource) Configuration() interface{} {
	return abpfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abpfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abpfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abpfs *Resource) Dependencies() terra.Dependencies {
	return abpfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abpfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return abpfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abpfs *Resource) Attributes() azurermBackupPolicyFileShareAttributes {
	return azurermBackupPolicyFileShareAttributes{ref: terra.ReferenceResource(abpfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abpfs *Resource) ImportState(state io.Reader) error {
	abpfs.state = &azurermBackupPolicyFileShareState{}
	if err := json.NewDecoder(state).Decode(abpfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abpfs.Type(), abpfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abpfs *Resource) State() (*azurermBackupPolicyFileShareState, bool) {
	return abpfs.state, abpfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abpfs *Resource) StateMust() *azurermBackupPolicyFileShareState {
	if abpfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abpfs.Type(), abpfs.LocalName()))
	}
	return abpfs.state
}

// Args contains the configurations for azurerm_backup_policy_file_share.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// Backup: required
	Backup *Backup `hcl:"backup,block" validate:"required"`
	// RetentionDaily: required
	RetentionDaily *RetentionDaily `hcl:"retention_daily,block" validate:"required"`
	// RetentionMonthly: optional
	RetentionMonthly *RetentionMonthly `hcl:"retention_monthly,block"`
	// RetentionWeekly: optional
	RetentionWeekly *RetentionWeekly `hcl:"retention_weekly,block"`
	// RetentionYearly: optional
	RetentionYearly *RetentionYearly `hcl:"retention_yearly,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBackupPolicyFileShareAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_backup_policy_file_share.
func (abpfs azurermBackupPolicyFileShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_backup_policy_file_share.
func (abpfs azurermBackupPolicyFileShareAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("name"))
}

// RecoveryVaultName returns a reference to field recovery_vault_name of azurerm_backup_policy_file_share.
func (abpfs azurermBackupPolicyFileShareAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("recovery_vault_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_backup_policy_file_share.
func (abpfs azurermBackupPolicyFileShareAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("resource_group_name"))
}

// Timezone returns a reference to field timezone of azurerm_backup_policy_file_share.
func (abpfs azurermBackupPolicyFileShareAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("timezone"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) Backup() terra.ListValue[BackupAttributes] {
	return terra.ReferenceAsList[BackupAttributes](abpfs.ref.Append("backup"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) RetentionDaily() terra.ListValue[RetentionDailyAttributes] {
	return terra.ReferenceAsList[RetentionDailyAttributes](abpfs.ref.Append("retention_daily"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) RetentionMonthly() terra.ListValue[RetentionMonthlyAttributes] {
	return terra.ReferenceAsList[RetentionMonthlyAttributes](abpfs.ref.Append("retention_monthly"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) RetentionWeekly() terra.ListValue[RetentionWeeklyAttributes] {
	return terra.ReferenceAsList[RetentionWeeklyAttributes](abpfs.ref.Append("retention_weekly"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) RetentionYearly() terra.ListValue[RetentionYearlyAttributes] {
	return terra.ReferenceAsList[RetentionYearlyAttributes](abpfs.ref.Append("retention_yearly"))
}

func (abpfs azurermBackupPolicyFileShareAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abpfs.ref.Append("timeouts"))
}

type azurermBackupPolicyFileShareState struct {
	Id                string                  `json:"id"`
	Name              string                  `json:"name"`
	RecoveryVaultName string                  `json:"recovery_vault_name"`
	ResourceGroupName string                  `json:"resource_group_name"`
	Timezone          string                  `json:"timezone"`
	Backup            []BackupState           `json:"backup"`
	RetentionDaily    []RetentionDailyState   `json:"retention_daily"`
	RetentionMonthly  []RetentionMonthlyState `json:"retention_monthly"`
	RetentionWeekly   []RetentionWeeklyState  `json:"retention_weekly"`
	RetentionYearly   []RetentionYearlyState  `json:"retention_yearly"`
	Timeouts          *TimeoutsState          `json:"timeouts"`
}
