// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_communication_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_communication_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCommunicationServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acs *Resource) Type() string {
	return "azurerm_communication_service"
}

// LocalName returns the local name for [Resource].
func (acs *Resource) LocalName() string {
	return acs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acs *Resource) Configuration() interface{} {
	return acs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acs *Resource) Dependencies() terra.Dependencies {
	return acs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acs *Resource) LifecycleManagement() *terra.Lifecycle {
	return acs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acs *Resource) Attributes() azurermCommunicationServiceAttributes {
	return azurermCommunicationServiceAttributes{ref: terra.ReferenceResource(acs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acs *Resource) ImportState(state io.Reader) error {
	acs.state = &azurermCommunicationServiceState{}
	if err := json.NewDecoder(state).Decode(acs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acs.Type(), acs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acs *Resource) State() (*azurermCommunicationServiceState, bool) {
	return acs.state, acs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acs *Resource) StateMust() *azurermCommunicationServiceState {
	if acs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acs.Type(), acs.LocalName()))
	}
	return acs.state
}

// Args contains the configurations for azurerm_communication_service.
type Args struct {
	// DataLocation: string, optional
	DataLocation terra.StringValue `hcl:"data_location,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCommunicationServiceAttributes struct {
	ref terra.Reference
}

// DataLocation returns a reference to field data_location of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) DataLocation() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("data_location"))
}

// Id returns a reference to field id of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("name"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("primary_connection_string"))
}

// PrimaryKey returns a reference to field primary_key of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) PrimaryKey() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("primary_key"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("resource_group_name"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("secondary_connection_string"))
}

// SecondaryKey returns a reference to field secondary_key of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) SecondaryKey() terra.StringValue {
	return terra.ReferenceAsString(acs.ref.Append("secondary_key"))
}

// Tags returns a reference to field tags of azurerm_communication_service.
func (acs azurermCommunicationServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acs.ref.Append("tags"))
}

func (acs azurermCommunicationServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acs.ref.Append("timeouts"))
}

type azurermCommunicationServiceState struct {
	DataLocation              string            `json:"data_location"`
	Id                        string            `json:"id"`
	Name                      string            `json:"name"`
	PrimaryConnectionString   string            `json:"primary_connection_string"`
	PrimaryKey                string            `json:"primary_key"`
	ResourceGroupName         string            `json:"resource_group_name"`
	SecondaryConnectionString string            `json:"secondary_connection_string"`
	SecondaryKey              string            `json:"secondary_key"`
	Tags                      map[string]string `json:"tags"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
