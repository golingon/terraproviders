// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_role_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_role_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRoleDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ard *Resource) Type() string {
	return "azurerm_role_definition"
}

// LocalName returns the local name for [Resource].
func (ard *Resource) LocalName() string {
	return ard.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ard *Resource) Configuration() interface{} {
	return ard.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ard *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ard)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ard *Resource) Dependencies() terra.Dependencies {
	return ard.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ard *Resource) LifecycleManagement() *terra.Lifecycle {
	return ard.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ard *Resource) Attributes() azurermRoleDefinitionAttributes {
	return azurermRoleDefinitionAttributes{ref: terra.ReferenceResource(ard)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ard *Resource) ImportState(state io.Reader) error {
	ard.state = &azurermRoleDefinitionState{}
	if err := json.NewDecoder(state).Decode(ard.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ard.Type(), ard.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ard *Resource) State() (*azurermRoleDefinitionState, bool) {
	return ard.state, ard.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ard *Resource) StateMust() *azurermRoleDefinitionState {
	if ard.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ard.Type(), ard.LocalName()))
	}
	return ard.state
}

// Args contains the configurations for azurerm_role_definition.
type Args struct {
	// AssignableScopes: list of string, optional
	AssignableScopes terra.ListValue[terra.StringValue] `hcl:"assignable_scopes,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleDefinitionId: string, optional
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Permissions: min=0
	Permissions []Permissions `hcl:"permissions,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRoleDefinitionAttributes struct {
	ref terra.Reference
}

// AssignableScopes returns a reference to field assignable_scopes of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) AssignableScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ard.ref.Append("assignable_scopes"))
}

// Description returns a reference to field description of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("name"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("role_definition_id"))
}

// RoleDefinitionResourceId returns a reference to field role_definition_resource_id of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) RoleDefinitionResourceId() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("role_definition_resource_id"))
}

// Scope returns a reference to field scope of azurerm_role_definition.
func (ard azurermRoleDefinitionAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("scope"))
}

func (ard azurermRoleDefinitionAttributes) Permissions() terra.ListValue[PermissionsAttributes] {
	return terra.ReferenceAsList[PermissionsAttributes](ard.ref.Append("permissions"))
}

func (ard azurermRoleDefinitionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ard.ref.Append("timeouts"))
}

type azurermRoleDefinitionState struct {
	AssignableScopes         []string           `json:"assignable_scopes"`
	Description              string             `json:"description"`
	Id                       string             `json:"id"`
	Name                     string             `json:"name"`
	RoleDefinitionId         string             `json:"role_definition_id"`
	RoleDefinitionResourceId string             `json:"role_definition_resource_id"`
	Scope                    string             `json:"scope"`
	Permissions              []PermissionsState `json:"permissions"`
	Timeouts                 *TimeoutsState     `json:"timeouts"`
}
