// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mysql_active_directory_administrator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mysql_active_directory_administrator.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMysqlActiveDirectoryAdministratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amada *Resource) Type() string {
	return "azurerm_mysql_active_directory_administrator"
}

// LocalName returns the local name for [Resource].
func (amada *Resource) LocalName() string {
	return amada.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amada *Resource) Configuration() interface{} {
	return amada.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amada *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amada)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amada *Resource) Dependencies() terra.Dependencies {
	return amada.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amada *Resource) LifecycleManagement() *terra.Lifecycle {
	return amada.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amada *Resource) Attributes() azurermMysqlActiveDirectoryAdministratorAttributes {
	return azurermMysqlActiveDirectoryAdministratorAttributes{ref: terra.ReferenceResource(amada)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amada *Resource) ImportState(state io.Reader) error {
	amada.state = &azurermMysqlActiveDirectoryAdministratorState{}
	if err := json.NewDecoder(state).Decode(amada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amada.Type(), amada.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amada *Resource) State() (*azurermMysqlActiveDirectoryAdministratorState, bool) {
	return amada.state, amada.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amada *Resource) StateMust() *azurermMysqlActiveDirectoryAdministratorState {
	if amada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amada.Type(), amada.LocalName()))
	}
	return amada.state
}

// Args contains the configurations for azurerm_mysql_active_directory_administrator.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Login: string, required
	Login terra.StringValue `hcl:"login,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMysqlActiveDirectoryAdministratorAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("id"))
}

// Login returns a reference to field login of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) Login() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("login"))
}

// ObjectId returns a reference to field object_id of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("object_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("resource_group_name"))
}

// ServerName returns a reference to field server_name of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("server_name"))
}

// TenantId returns a reference to field tenant_id of azurerm_mysql_active_directory_administrator.
func (amada azurermMysqlActiveDirectoryAdministratorAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(amada.ref.Append("tenant_id"))
}

func (amada azurermMysqlActiveDirectoryAdministratorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amada.ref.Append("timeouts"))
}

type azurermMysqlActiveDirectoryAdministratorState struct {
	Id                string         `json:"id"`
	Login             string         `json:"login"`
	ObjectId          string         `json:"object_id"`
	ResourceGroupName string         `json:"resource_group_name"`
	ServerName        string         `json:"server_name"`
	TenantId          string         `json:"tenant_id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
