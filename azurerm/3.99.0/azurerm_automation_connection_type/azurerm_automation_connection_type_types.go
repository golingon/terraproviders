// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_automation_connection_type

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Field struct {
	// IsEncrypted: bool, optional
	IsEncrypted terra.BoolValue `hcl:"is_encrypted,attr"`
	// IsOptional: bool, optional
	IsOptional terra.BoolValue `hcl:"is_optional,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type FieldAttributes struct {
	ref terra.Reference
}

func (f FieldAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FieldAttributes) InternalWithRef(ref terra.Reference) FieldAttributes {
	return FieldAttributes{ref: ref}
}

func (f FieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FieldAttributes) IsEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("is_encrypted"))
}

func (f FieldAttributes) IsOptional() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("is_optional"))
}

func (f FieldAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f FieldAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type FieldState struct {
	IsEncrypted bool   `json:"is_encrypted"`
	IsOptional  bool   `json:"is_optional"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
