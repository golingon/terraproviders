// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_center_catalog

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dev_center_catalog.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDevCenterCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adcc *Resource) Type() string {
	return "azurerm_dev_center_catalog"
}

// LocalName returns the local name for [Resource].
func (adcc *Resource) LocalName() string {
	return adcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adcc *Resource) Configuration() interface{} {
	return adcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adcc *Resource) Dependencies() terra.Dependencies {
	return adcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adcc *Resource) Attributes() azurermDevCenterCatalogAttributes {
	return azurermDevCenterCatalogAttributes{ref: terra.ReferenceResource(adcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adcc *Resource) ImportState(state io.Reader) error {
	adcc.state = &azurermDevCenterCatalogState{}
	if err := json.NewDecoder(state).Decode(adcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adcc.Type(), adcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adcc *Resource) State() (*azurermDevCenterCatalogState, bool) {
	return adcc.state, adcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adcc *Resource) StateMust() *azurermDevCenterCatalogState {
	if adcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adcc.Type(), adcc.LocalName()))
	}
	return adcc.state
}

// Args contains the configurations for azurerm_dev_center_catalog.
type Args struct {
	// DevCenterId: string, required
	DevCenterId terra.StringValue `hcl:"dev_center_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// CatalogAdogit: optional
	CatalogAdogit *CatalogAdogit `hcl:"catalog_adogit,block"`
	// CatalogGithub: optional
	CatalogGithub *CatalogGithub `hcl:"catalog_github,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDevCenterCatalogAttributes struct {
	ref terra.Reference
}

// DevCenterId returns a reference to field dev_center_id of azurerm_dev_center_catalog.
func (adcc azurermDevCenterCatalogAttributes) DevCenterId() terra.StringValue {
	return terra.ReferenceAsString(adcc.ref.Append("dev_center_id"))
}

// Id returns a reference to field id of azurerm_dev_center_catalog.
func (adcc azurermDevCenterCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adcc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_dev_center_catalog.
func (adcc azurermDevCenterCatalogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adcc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_center_catalog.
func (adcc azurermDevCenterCatalogAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adcc.ref.Append("resource_group_name"))
}

func (adcc azurermDevCenterCatalogAttributes) CatalogAdogit() terra.ListValue[CatalogAdogitAttributes] {
	return terra.ReferenceAsList[CatalogAdogitAttributes](adcc.ref.Append("catalog_adogit"))
}

func (adcc azurermDevCenterCatalogAttributes) CatalogGithub() terra.ListValue[CatalogGithubAttributes] {
	return terra.ReferenceAsList[CatalogGithubAttributes](adcc.ref.Append("catalog_github"))
}

func (adcc azurermDevCenterCatalogAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adcc.ref.Append("timeouts"))
}

type azurermDevCenterCatalogState struct {
	DevCenterId       string               `json:"dev_center_id"`
	Id                string               `json:"id"`
	Name              string               `json:"name"`
	ResourceGroupName string               `json:"resource_group_name"`
	CatalogAdogit     []CatalogAdogitState `json:"catalog_adogit"`
	CatalogGithub     []CatalogGithubState `json:"catalog_github"`
	Timeouts          *TimeoutsState       `json:"timeouts"`
}
