// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_center_catalog

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogAdogit struct {
	// Branch: string, required
	Branch terra.StringValue `hcl:"branch,attr" validate:"required"`
	// KeyVaultKeyUrl: string, required
	KeyVaultKeyUrl terra.StringValue `hcl:"key_vault_key_url,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type CatalogGithub struct {
	// Branch: string, required
	Branch terra.StringValue `hcl:"branch,attr" validate:"required"`
	// KeyVaultKeyUrl: string, required
	KeyVaultKeyUrl terra.StringValue `hcl:"key_vault_key_url,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CatalogAdogitAttributes struct {
	ref terra.Reference
}

func (ca CatalogAdogitAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CatalogAdogitAttributes) InternalWithRef(ref terra.Reference) CatalogAdogitAttributes {
	return CatalogAdogitAttributes{ref: ref}
}

func (ca CatalogAdogitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CatalogAdogitAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("branch"))
}

func (ca CatalogAdogitAttributes) KeyVaultKeyUrl() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("key_vault_key_url"))
}

func (ca CatalogAdogitAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("path"))
}

func (ca CatalogAdogitAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("uri"))
}

type CatalogGithubAttributes struct {
	ref terra.Reference
}

func (cg CatalogGithubAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg CatalogGithubAttributes) InternalWithRef(ref terra.Reference) CatalogGithubAttributes {
	return CatalogGithubAttributes{ref: ref}
}

func (cg CatalogGithubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg CatalogGithubAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("branch"))
}

func (cg CatalogGithubAttributes) KeyVaultKeyUrl() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("key_vault_key_url"))
}

func (cg CatalogGithubAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("path"))
}

func (cg CatalogGithubAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CatalogAdogitState struct {
	Branch         string `json:"branch"`
	KeyVaultKeyUrl string `json:"key_vault_key_url"`
	Path           string `json:"path"`
	Uri            string `json:"uri"`
}

type CatalogGithubState struct {
	Branch         string `json:"branch"`
	KeyVaultKeyUrl string `json:"key_vault_key_url"`
	Path           string `json:"path"`
	Uri            string `json:"uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
