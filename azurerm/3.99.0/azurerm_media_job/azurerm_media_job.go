// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_job.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amj *Resource) Type() string {
	return "azurerm_media_job"
}

// LocalName returns the local name for [Resource].
func (amj *Resource) LocalName() string {
	return amj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amj *Resource) Configuration() interface{} {
	return amj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amj *Resource) Dependencies() terra.Dependencies {
	return amj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amj *Resource) LifecycleManagement() *terra.Lifecycle {
	return amj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amj *Resource) Attributes() azurermMediaJobAttributes {
	return azurermMediaJobAttributes{ref: terra.ReferenceResource(amj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amj *Resource) ImportState(state io.Reader) error {
	amj.state = &azurermMediaJobState{}
	if err := json.NewDecoder(state).Decode(amj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amj.Type(), amj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amj *Resource) State() (*azurermMediaJobState, bool) {
	return amj.state, amj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amj *Resource) StateMust() *azurermMediaJobState {
	if amj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amj.Type(), amj.LocalName()))
	}
	return amj.state
}

// Args contains the configurations for azurerm_media_job.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TransformName: string, required
	TransformName terra.StringValue `hcl:"transform_name,attr" validate:"required"`
	// InputAsset: required
	InputAsset *InputAsset `hcl:"input_asset,block" validate:"required"`
	// OutputAsset: min=1
	OutputAsset []OutputAsset `hcl:"output_asset,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaJobAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_media_job.
func (amj azurermMediaJobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_media_job.
func (amj azurermMediaJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_job.
func (amj azurermMediaJobAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_job.
func (amj azurermMediaJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("name"))
}

// Priority returns a reference to field priority of azurerm_media_job.
func (amj azurermMediaJobAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("priority"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_job.
func (amj azurermMediaJobAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("resource_group_name"))
}

// TransformName returns a reference to field transform_name of azurerm_media_job.
func (amj azurermMediaJobAttributes) TransformName() terra.StringValue {
	return terra.ReferenceAsString(amj.ref.Append("transform_name"))
}

func (amj azurermMediaJobAttributes) InputAsset() terra.ListValue[InputAssetAttributes] {
	return terra.ReferenceAsList[InputAssetAttributes](amj.ref.Append("input_asset"))
}

func (amj azurermMediaJobAttributes) OutputAsset() terra.ListValue[OutputAssetAttributes] {
	return terra.ReferenceAsList[OutputAssetAttributes](amj.ref.Append("output_asset"))
}

func (amj azurermMediaJobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amj.ref.Append("timeouts"))
}

type azurermMediaJobState struct {
	Description              string             `json:"description"`
	Id                       string             `json:"id"`
	MediaServicesAccountName string             `json:"media_services_account_name"`
	Name                     string             `json:"name"`
	Priority                 string             `json:"priority"`
	ResourceGroupName        string             `json:"resource_group_name"`
	TransformName            string             `json:"transform_name"`
	InputAsset               []InputAssetState  `json:"input_asset"`
	OutputAsset              []OutputAssetState `json:"output_asset"`
	Timeouts                 *TimeoutsState     `json:"timeouts"`
}
