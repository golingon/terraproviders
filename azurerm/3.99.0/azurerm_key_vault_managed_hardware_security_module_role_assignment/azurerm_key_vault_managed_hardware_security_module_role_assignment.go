// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_managed_hardware_security_module_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_managed_hardware_security_module_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvmhsmra *Resource) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module_role_assignment"
}

// LocalName returns the local name for [Resource].
func (akvmhsmra *Resource) LocalName() string {
	return akvmhsmra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvmhsmra *Resource) Configuration() interface{} {
	return akvmhsmra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvmhsmra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvmhsmra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvmhsmra *Resource) Dependencies() terra.Dependencies {
	return akvmhsmra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvmhsmra *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvmhsmra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvmhsmra *Resource) Attributes() azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes {
	return azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes{ref: terra.ReferenceResource(akvmhsmra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvmhsmra *Resource) ImportState(state io.Reader) error {
	akvmhsmra.state = &azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(akvmhsmra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvmhsmra.Type(), akvmhsmra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvmhsmra *Resource) State() (*azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentState, bool) {
	return akvmhsmra.state, akvmhsmra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvmhsmra *Resource) StateMust() *azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentState {
	if akvmhsmra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvmhsmra.Type(), akvmhsmra.LocalName()))
	}
	return akvmhsmra.state
}

// Args contains the configurations for azurerm_key_vault_managed_hardware_security_module_role_assignment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleDefinitionId: string, required
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// VaultBaseUrl: string, required
	VaultBaseUrl terra.StringValue `hcl:"vault_base_url,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("name"))
}

// PrincipalId returns a reference to field principal_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("principal_id"))
}

// ResourceId returns a reference to field resource_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("resource_id"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("role_definition_id"))
}

// Scope returns a reference to field scope of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("scope"))
}

// VaultBaseUrl returns a reference to field vault_base_url of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) VaultBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(akvmhsmra.ref.Append("vault_base_url"))
}

func (akvmhsmra azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvmhsmra.ref.Append("timeouts"))
}

type azurermKeyVaultManagedHardwareSecurityModuleRoleAssignmentState struct {
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	PrincipalId      string         `json:"principal_id"`
	ResourceId       string         `json:"resource_id"`
	RoleDefinitionId string         `json:"role_definition_id"`
	Scope            string         `json:"scope"`
	VaultBaseUrl     string         `json:"vault_base_url"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
