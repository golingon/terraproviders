// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_relay_hybrid_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_relay_hybrid_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRelayHybridConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arhc *Resource) Type() string {
	return "azurerm_relay_hybrid_connection"
}

// LocalName returns the local name for [Resource].
func (arhc *Resource) LocalName() string {
	return arhc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arhc *Resource) Configuration() interface{} {
	return arhc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arhc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arhc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arhc *Resource) Dependencies() terra.Dependencies {
	return arhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arhc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arhc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arhc *Resource) Attributes() azurermRelayHybridConnectionAttributes {
	return azurermRelayHybridConnectionAttributes{ref: terra.ReferenceResource(arhc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arhc *Resource) ImportState(state io.Reader) error {
	arhc.state = &azurermRelayHybridConnectionState{}
	if err := json.NewDecoder(state).Decode(arhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arhc.Type(), arhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arhc *Resource) State() (*azurermRelayHybridConnectionState, bool) {
	return arhc.state, arhc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arhc *Resource) StateMust() *azurermRelayHybridConnectionState {
	if arhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arhc.Type(), arhc.LocalName()))
	}
	return arhc.state
}

// Args contains the configurations for azurerm_relay_hybrid_connection.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RelayNamespaceName: string, required
	RelayNamespaceName terra.StringValue `hcl:"relay_namespace_name,attr" validate:"required"`
	// RequiresClientAuthorization: bool, optional
	RequiresClientAuthorization terra.BoolValue `hcl:"requires_client_authorization,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// UserMetadata: string, optional
	UserMetadata terra.StringValue `hcl:"user_metadata,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRelayHybridConnectionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("name"))
}

// RelayNamespaceName returns a reference to field relay_namespace_name of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) RelayNamespaceName() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("relay_namespace_name"))
}

// RequiresClientAuthorization returns a reference to field requires_client_authorization of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) RequiresClientAuthorization() terra.BoolValue {
	return terra.ReferenceAsBool(arhc.ref.Append("requires_client_authorization"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("resource_group_name"))
}

// UserMetadata returns a reference to field user_metadata of azurerm_relay_hybrid_connection.
func (arhc azurermRelayHybridConnectionAttributes) UserMetadata() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("user_metadata"))
}

func (arhc azurermRelayHybridConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arhc.ref.Append("timeouts"))
}

type azurermRelayHybridConnectionState struct {
	Id                          string         `json:"id"`
	Name                        string         `json:"name"`
	RelayNamespaceName          string         `json:"relay_namespace_name"`
	RequiresClientAuthorization bool           `json:"requires_client_authorization"`
	ResourceGroupName           string         `json:"resource_group_name"`
	UserMetadata                string         `json:"user_metadata"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
