// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mysql_flexible_server

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataHighAvailabilityAttributes struct {
	ref terra.Reference
}

func (ha DataHighAvailabilityAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha DataHighAvailabilityAttributes) InternalWithRef(ref terra.Reference) DataHighAvailabilityAttributes {
	return DataHighAvailabilityAttributes{ref: ref}
}

func (ha DataHighAvailabilityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha DataHighAvailabilityAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ha.ref.Append("mode"))
}

func (ha DataHighAvailabilityAttributes) StandbyAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ha.ref.Append("standby_availability_zone"))
}

type DataMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw DataMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw DataMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DataMaintenanceWindowAttributes {
	return DataMaintenanceWindowAttributes{ref: ref}
}

func (mw DataMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw DataMaintenanceWindowAttributes) DayOfWeek() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("day_of_week"))
}

func (mw DataMaintenanceWindowAttributes) StartHour() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("start_hour"))
}

func (mw DataMaintenanceWindowAttributes) StartMinute() terra.NumberValue {
	return terra.ReferenceAsNumber(mw.ref.Append("start_minute"))
}

type DataStorageAttributes struct {
	ref terra.Reference
}

func (s DataStorageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataStorageAttributes) InternalWithRef(ref terra.Reference) DataStorageAttributes {
	return DataStorageAttributes{ref: ref}
}

func (s DataStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataStorageAttributes) AutoGrowEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("auto_grow_enabled"))
}

func (s DataStorageAttributes) IoScalingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("io_scaling_enabled"))
}

func (s DataStorageAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("iops"))
}

func (s DataStorageAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("size_gb"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataHighAvailabilityState struct {
	Mode                    string `json:"mode"`
	StandbyAvailabilityZone string `json:"standby_availability_zone"`
}

type DataMaintenanceWindowState struct {
	DayOfWeek   float64 `json:"day_of_week"`
	StartHour   float64 `json:"start_hour"`
	StartMinute float64 `json:"start_minute"`
}

type DataStorageState struct {
	AutoGrowEnabled  bool    `json:"auto_grow_enabled"`
	IoScalingEnabled bool    `json:"io_scaling_enabled"`
	Iops             float64 `json:"iops"`
	SizeGb           float64 `json:"size_gb"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
