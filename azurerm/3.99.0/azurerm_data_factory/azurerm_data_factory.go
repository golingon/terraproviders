// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adf *Resource) Type() string {
	return "azurerm_data_factory"
}

// LocalName returns the local name for [Resource].
func (adf *Resource) LocalName() string {
	return adf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adf *Resource) Configuration() interface{} {
	return adf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adf *Resource) Dependencies() terra.Dependencies {
	return adf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adf *Resource) LifecycleManagement() *terra.Lifecycle {
	return adf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adf *Resource) Attributes() azurermDataFactoryAttributes {
	return azurermDataFactoryAttributes{ref: terra.ReferenceResource(adf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adf *Resource) ImportState(state io.Reader) error {
	adf.state = &azurermDataFactoryState{}
	if err := json.NewDecoder(state).Decode(adf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adf.Type(), adf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adf *Resource) State() (*azurermDataFactoryState, bool) {
	return adf.state, adf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adf *Resource) StateMust() *azurermDataFactoryState {
	if adf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adf.Type(), adf.LocalName()))
	}
	return adf.state
}

// Args contains the configurations for azurerm_data_factory.
type Args struct {
	// CustomerManagedKeyId: string, optional
	CustomerManagedKeyId terra.StringValue `hcl:"customer_managed_key_id,attr"`
	// CustomerManagedKeyIdentityId: string, optional
	CustomerManagedKeyIdentityId terra.StringValue `hcl:"customer_managed_key_identity_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedVirtualNetworkEnabled: bool, optional
	ManagedVirtualNetworkEnabled terra.BoolValue `hcl:"managed_virtual_network_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkEnabled: bool, optional
	PublicNetworkEnabled terra.BoolValue `hcl:"public_network_enabled,attr"`
	// PurviewId: string, optional
	PurviewId terra.StringValue `hcl:"purview_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// GithubConfiguration: optional
	GithubConfiguration *GithubConfiguration `hcl:"github_configuration,block"`
	// GlobalParameter: min=0
	GlobalParameter []GlobalParameter `hcl:"global_parameter,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VstsConfiguration: optional
	VstsConfiguration *VstsConfiguration `hcl:"vsts_configuration,block"`
}

type azurermDataFactoryAttributes struct {
	ref terra.Reference
}

// CustomerManagedKeyId returns a reference to field customer_managed_key_id of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) CustomerManagedKeyId() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("customer_managed_key_id"))
}

// CustomerManagedKeyIdentityId returns a reference to field customer_managed_key_identity_id of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) CustomerManagedKeyIdentityId() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("customer_managed_key_identity_id"))
}

// Id returns a reference to field id of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("location"))
}

// ManagedVirtualNetworkEnabled returns a reference to field managed_virtual_network_enabled of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) ManagedVirtualNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adf.ref.Append("managed_virtual_network_enabled"))
}

// Name returns a reference to field name of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("name"))
}

// PublicNetworkEnabled returns a reference to field public_network_enabled of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) PublicNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adf.ref.Append("public_network_enabled"))
}

// PurviewId returns a reference to field purview_id of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) PurviewId() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("purview_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adf.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_data_factory.
func (adf azurermDataFactoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adf.ref.Append("tags"))
}

func (adf azurermDataFactoryAttributes) GithubConfiguration() terra.ListValue[GithubConfigurationAttributes] {
	return terra.ReferenceAsList[GithubConfigurationAttributes](adf.ref.Append("github_configuration"))
}

func (adf azurermDataFactoryAttributes) GlobalParameter() terra.SetValue[GlobalParameterAttributes] {
	return terra.ReferenceAsSet[GlobalParameterAttributes](adf.ref.Append("global_parameter"))
}

func (adf azurermDataFactoryAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](adf.ref.Append("identity"))
}

func (adf azurermDataFactoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adf.ref.Append("timeouts"))
}

func (adf azurermDataFactoryAttributes) VstsConfiguration() terra.ListValue[VstsConfigurationAttributes] {
	return terra.ReferenceAsList[VstsConfigurationAttributes](adf.ref.Append("vsts_configuration"))
}

type azurermDataFactoryState struct {
	CustomerManagedKeyId         string                     `json:"customer_managed_key_id"`
	CustomerManagedKeyIdentityId string                     `json:"customer_managed_key_identity_id"`
	Id                           string                     `json:"id"`
	Location                     string                     `json:"location"`
	ManagedVirtualNetworkEnabled bool                       `json:"managed_virtual_network_enabled"`
	Name                         string                     `json:"name"`
	PublicNetworkEnabled         bool                       `json:"public_network_enabled"`
	PurviewId                    string                     `json:"purview_id"`
	ResourceGroupName            string                     `json:"resource_group_name"`
	Tags                         map[string]string          `json:"tags"`
	GithubConfiguration          []GithubConfigurationState `json:"github_configuration"`
	GlobalParameter              []GlobalParameterState     `json:"global_parameter"`
	Identity                     []IdentityState            `json:"identity"`
	Timeouts                     *TimeoutsState             `json:"timeouts"`
	VstsConfiguration            []VstsConfigurationState   `json:"vsts_configuration"`
}
