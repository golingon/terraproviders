// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataGithubConfigurationAttributes struct {
	ref terra.Reference
}

func (gc DataGithubConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc DataGithubConfigurationAttributes) InternalWithRef(ref terra.Reference) DataGithubConfigurationAttributes {
	return DataGithubConfigurationAttributes{ref: ref}
}

func (gc DataGithubConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc DataGithubConfigurationAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("account_name"))
}

func (gc DataGithubConfigurationAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("branch_name"))
}

func (gc DataGithubConfigurationAttributes) GitUrl() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("git_url"))
}

func (gc DataGithubConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("repository_name"))
}

func (gc DataGithubConfigurationAttributes) RootFolder() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("root_folder"))
}

type DataIdentityAttributes struct {
	ref terra.Reference
}

func (i DataIdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdentityAttributes) InternalWithRef(ref terra.Reference) DataIdentityAttributes {
	return DataIdentityAttributes{ref: ref}
}

func (i DataIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i DataIdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i DataIdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i DataIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type DataVstsConfigurationAttributes struct {
	ref terra.Reference
}

func (vc DataVstsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc DataVstsConfigurationAttributes) InternalWithRef(ref terra.Reference) DataVstsConfigurationAttributes {
	return DataVstsConfigurationAttributes{ref: ref}
}

func (vc DataVstsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc DataVstsConfigurationAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("account_name"))
}

func (vc DataVstsConfigurationAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("branch_name"))
}

func (vc DataVstsConfigurationAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("project_name"))
}

func (vc DataVstsConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("repository_name"))
}

func (vc DataVstsConfigurationAttributes) RootFolder() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("root_folder"))
}

func (vc DataVstsConfigurationAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("tenant_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataGithubConfigurationState struct {
	AccountName    string `json:"account_name"`
	BranchName     string `json:"branch_name"`
	GitUrl         string `json:"git_url"`
	RepositoryName string `json:"repository_name"`
	RootFolder     string `json:"root_folder"`
}

type DataIdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type DataVstsConfigurationState struct {
	AccountName    string `json:"account_name"`
	BranchName     string `json:"branch_name"`
	ProjectName    string `json:"project_name"`
	RepositoryName string `json:"repository_name"`
	RootFolder     string `json:"root_folder"`
	TenantId       string `json:"tenant_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
