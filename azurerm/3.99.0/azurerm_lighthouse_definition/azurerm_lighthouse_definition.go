// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lighthouse_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lighthouse_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLighthouseDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ald *Resource) Type() string {
	return "azurerm_lighthouse_definition"
}

// LocalName returns the local name for [Resource].
func (ald *Resource) LocalName() string {
	return ald.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ald *Resource) Configuration() interface{} {
	return ald.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ald *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ald)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ald *Resource) Dependencies() terra.Dependencies {
	return ald.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ald *Resource) LifecycleManagement() *terra.Lifecycle {
	return ald.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ald *Resource) Attributes() azurermLighthouseDefinitionAttributes {
	return azurermLighthouseDefinitionAttributes{ref: terra.ReferenceResource(ald)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ald *Resource) ImportState(state io.Reader) error {
	ald.state = &azurermLighthouseDefinitionState{}
	if err := json.NewDecoder(state).Decode(ald.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ald.Type(), ald.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ald *Resource) State() (*azurermLighthouseDefinitionState, bool) {
	return ald.state, ald.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ald *Resource) StateMust() *azurermLighthouseDefinitionState {
	if ald.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ald.Type(), ald.LocalName()))
	}
	return ald.state
}

// Args contains the configurations for azurerm_lighthouse_definition.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LighthouseDefinitionId: string, optional
	LighthouseDefinitionId terra.StringValue `hcl:"lighthouse_definition_id,attr"`
	// ManagingTenantId: string, required
	ManagingTenantId terra.StringValue `hcl:"managing_tenant_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Authorization: min=1
	Authorization []Authorization `hcl:"authorization,block" validate:"min=1"`
	// EligibleAuthorization: min=0
	EligibleAuthorization []EligibleAuthorization `hcl:"eligible_authorization,block" validate:"min=0"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLighthouseDefinitionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("id"))
}

// LighthouseDefinitionId returns a reference to field lighthouse_definition_id of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) LighthouseDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("lighthouse_definition_id"))
}

// ManagingTenantId returns a reference to field managing_tenant_id of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) ManagingTenantId() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("managing_tenant_id"))
}

// Name returns a reference to field name of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("name"))
}

// Scope returns a reference to field scope of azurerm_lighthouse_definition.
func (ald azurermLighthouseDefinitionAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("scope"))
}

func (ald azurermLighthouseDefinitionAttributes) Authorization() terra.SetValue[AuthorizationAttributes] {
	return terra.ReferenceAsSet[AuthorizationAttributes](ald.ref.Append("authorization"))
}

func (ald azurermLighthouseDefinitionAttributes) EligibleAuthorization() terra.SetValue[EligibleAuthorizationAttributes] {
	return terra.ReferenceAsSet[EligibleAuthorizationAttributes](ald.ref.Append("eligible_authorization"))
}

func (ald azurermLighthouseDefinitionAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](ald.ref.Append("plan"))
}

func (ald azurermLighthouseDefinitionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ald.ref.Append("timeouts"))
}

type azurermLighthouseDefinitionState struct {
	Description            string                       `json:"description"`
	Id                     string                       `json:"id"`
	LighthouseDefinitionId string                       `json:"lighthouse_definition_id"`
	ManagingTenantId       string                       `json:"managing_tenant_id"`
	Name                   string                       `json:"name"`
	Scope                  string                       `json:"scope"`
	Authorization          []AuthorizationState         `json:"authorization"`
	EligibleAuthorization  []EligibleAuthorizationState `json:"eligible_authorization"`
	Plan                   []PlanState                  `json:"plan"`
	Timeouts               *TimeoutsState               `json:"timeouts"`
}
