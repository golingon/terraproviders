// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asra *Resource) Type() string {
	return "azurerm_synapse_role_assignment"
}

// LocalName returns the local name for [Resource].
func (asra *Resource) LocalName() string {
	return asra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asra *Resource) Configuration() interface{} {
	return asra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asra *Resource) Dependencies() terra.Dependencies {
	return asra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asra *Resource) LifecycleManagement() *terra.Lifecycle {
	return asra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asra *Resource) Attributes() azurermSynapseRoleAssignmentAttributes {
	return azurermSynapseRoleAssignmentAttributes{ref: terra.ReferenceResource(asra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asra *Resource) ImportState(state io.Reader) error {
	asra.state = &azurermSynapseRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(asra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asra.Type(), asra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asra *Resource) State() (*azurermSynapseRoleAssignmentState, bool) {
	return asra.state, asra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asra *Resource) StateMust() *azurermSynapseRoleAssignmentState {
	if asra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asra.Type(), asra.LocalName()))
	}
	return asra.state
}

// Args contains the configurations for azurerm_synapse_role_assignment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// PrincipalType: string, optional
	PrincipalType terra.StringValue `hcl:"principal_type,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// SynapseSparkPoolId: string, optional
	SynapseSparkPoolId terra.StringValue `hcl:"synapse_spark_pool_id,attr"`
	// SynapseWorkspaceId: string, optional
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseRoleAssignmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("id"))
}

// PrincipalId returns a reference to field principal_id of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("principal_id"))
}

// PrincipalType returns a reference to field principal_type of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("principal_type"))
}

// RoleName returns a reference to field role_name of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("role_name"))
}

// SynapseSparkPoolId returns a reference to field synapse_spark_pool_id of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) SynapseSparkPoolId() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("synapse_spark_pool_id"))
}

// SynapseWorkspaceId returns a reference to field synapse_workspace_id of azurerm_synapse_role_assignment.
func (asra azurermSynapseRoleAssignmentAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(asra.ref.Append("synapse_workspace_id"))
}

func (asra azurermSynapseRoleAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asra.ref.Append("timeouts"))
}

type azurermSynapseRoleAssignmentState struct {
	Id                 string         `json:"id"`
	PrincipalId        string         `json:"principal_id"`
	PrincipalType      string         `json:"principal_type"`
	RoleName           string         `json:"role_name"`
	SynapseSparkPoolId string         `json:"synapse_spark_pool_id"`
	SynapseWorkspaceId string         `json:"synapse_workspace_id"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
