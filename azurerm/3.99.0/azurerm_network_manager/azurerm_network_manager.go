// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_manager

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_network_manager.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetworkManagerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anm *Resource) Type() string {
	return "azurerm_network_manager"
}

// LocalName returns the local name for [Resource].
func (anm *Resource) LocalName() string {
	return anm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anm *Resource) Configuration() interface{} {
	return anm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anm *Resource) Dependencies() terra.Dependencies {
	return anm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anm *Resource) LifecycleManagement() *terra.Lifecycle {
	return anm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anm *Resource) Attributes() azurermNetworkManagerAttributes {
	return azurermNetworkManagerAttributes{ref: terra.ReferenceResource(anm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anm *Resource) ImportState(state io.Reader) error {
	anm.state = &azurermNetworkManagerState{}
	if err := json.NewDecoder(state).Decode(anm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anm.Type(), anm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anm *Resource) State() (*azurermNetworkManagerState, bool) {
	return anm.state, anm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anm *Resource) StateMust() *azurermNetworkManagerState {
	if anm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anm.Type(), anm.LocalName()))
	}
	return anm.state
}

// Args contains the configurations for azurerm_network_manager.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScopeAccesses: list of string, required
	ScopeAccesses terra.ListValue[terra.StringValue] `hcl:"scope_accesses,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Scope: required
	Scope *Scope `hcl:"scope,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetworkManagerAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anm.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anm.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anm.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(anm.ref.Append("resource_group_name"))
}

// ScopeAccesses returns a reference to field scope_accesses of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) ScopeAccesses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](anm.ref.Append("scope_accesses"))
}

// Tags returns a reference to field tags of azurerm_network_manager.
func (anm azurermNetworkManagerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anm.ref.Append("tags"))
}

func (anm azurermNetworkManagerAttributes) CrossTenantScopes() terra.ListValue[CrossTenantScopesAttributes] {
	return terra.ReferenceAsList[CrossTenantScopesAttributes](anm.ref.Append("cross_tenant_scopes"))
}

func (anm azurermNetworkManagerAttributes) Scope() terra.ListValue[ScopeAttributes] {
	return terra.ReferenceAsList[ScopeAttributes](anm.ref.Append("scope"))
}

func (anm azurermNetworkManagerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anm.ref.Append("timeouts"))
}

type azurermNetworkManagerState struct {
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	ResourceGroupName string                   `json:"resource_group_name"`
	ScopeAccesses     []string                 `json:"scope_accesses"`
	Tags              map[string]string        `json:"tags"`
	CrossTenantScopes []CrossTenantScopesState `json:"cross_tenant_scopes"`
	Scope             []ScopeState             `json:"scope"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
