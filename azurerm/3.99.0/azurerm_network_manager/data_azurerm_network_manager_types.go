// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_manager

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataCrossTenantScopesAttributes struct {
	ref terra.Reference
}

func (cts DataCrossTenantScopesAttributes) InternalRef() (terra.Reference, error) {
	return cts.ref, nil
}

func (cts DataCrossTenantScopesAttributes) InternalWithRef(ref terra.Reference) DataCrossTenantScopesAttributes {
	return DataCrossTenantScopesAttributes{ref: ref}
}

func (cts DataCrossTenantScopesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cts.ref.InternalTokens()
}

func (cts DataCrossTenantScopesAttributes) ManagementGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cts.ref.Append("management_groups"))
}

func (cts DataCrossTenantScopesAttributes) Subscriptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cts.ref.Append("subscriptions"))
}

func (cts DataCrossTenantScopesAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(cts.ref.Append("tenant_id"))
}

type DataScopeAttributes struct {
	ref terra.Reference
}

func (s DataScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataScopeAttributes) InternalWithRef(ref terra.Reference) DataScopeAttributes {
	return DataScopeAttributes{ref: ref}
}

func (s DataScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataScopeAttributes) ManagementGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("management_group_ids"))
}

func (s DataScopeAttributes) SubscriptionIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("subscription_ids"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataCrossTenantScopesState struct {
	ManagementGroups []string `json:"management_groups"`
	Subscriptions    []string `json:"subscriptions"`
	TenantId         string   `json:"tenant_id"`
}

type DataScopeState struct {
	ManagementGroupIds []string `json:"management_group_ids"`
	SubscriptionIds    []string `json:"subscription_ids"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
