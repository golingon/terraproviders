// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_asset_filter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_asset_filter.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaAssetFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amaf *Resource) Type() string {
	return "azurerm_media_asset_filter"
}

// LocalName returns the local name for [Resource].
func (amaf *Resource) LocalName() string {
	return amaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amaf *Resource) Configuration() interface{} {
	return amaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amaf *Resource) Dependencies() terra.Dependencies {
	return amaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return amaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amaf *Resource) Attributes() azurermMediaAssetFilterAttributes {
	return azurermMediaAssetFilterAttributes{ref: terra.ReferenceResource(amaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amaf *Resource) ImportState(state io.Reader) error {
	amaf.state = &azurermMediaAssetFilterState{}
	if err := json.NewDecoder(state).Decode(amaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amaf.Type(), amaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amaf *Resource) State() (*azurermMediaAssetFilterState, bool) {
	return amaf.state, amaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amaf *Resource) StateMust() *azurermMediaAssetFilterState {
	if amaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amaf.Type(), amaf.LocalName()))
	}
	return amaf.state
}

// Args contains the configurations for azurerm_media_asset_filter.
type Args struct {
	// AssetId: string, required
	AssetId terra.StringValue `hcl:"asset_id,attr" validate:"required"`
	// FirstQualityBitrate: number, optional
	FirstQualityBitrate terra.NumberValue `hcl:"first_quality_bitrate,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PresentationTimeRange: optional
	PresentationTimeRange *PresentationTimeRange `hcl:"presentation_time_range,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrackSelection: min=0
	TrackSelection []TrackSelection `hcl:"track_selection,block" validate:"min=0"`
}

type azurermMediaAssetFilterAttributes struct {
	ref terra.Reference
}

// AssetId returns a reference to field asset_id of azurerm_media_asset_filter.
func (amaf azurermMediaAssetFilterAttributes) AssetId() terra.StringValue {
	return terra.ReferenceAsString(amaf.ref.Append("asset_id"))
}

// FirstQualityBitrate returns a reference to field first_quality_bitrate of azurerm_media_asset_filter.
func (amaf azurermMediaAssetFilterAttributes) FirstQualityBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(amaf.ref.Append("first_quality_bitrate"))
}

// Id returns a reference to field id of azurerm_media_asset_filter.
func (amaf azurermMediaAssetFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amaf.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_media_asset_filter.
func (amaf azurermMediaAssetFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amaf.ref.Append("name"))
}

func (amaf azurermMediaAssetFilterAttributes) PresentationTimeRange() terra.ListValue[PresentationTimeRangeAttributes] {
	return terra.ReferenceAsList[PresentationTimeRangeAttributes](amaf.ref.Append("presentation_time_range"))
}

func (amaf azurermMediaAssetFilterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amaf.ref.Append("timeouts"))
}

func (amaf azurermMediaAssetFilterAttributes) TrackSelection() terra.ListValue[TrackSelectionAttributes] {
	return terra.ReferenceAsList[TrackSelectionAttributes](amaf.ref.Append("track_selection"))
}

type azurermMediaAssetFilterState struct {
	AssetId               string                       `json:"asset_id"`
	FirstQualityBitrate   float64                      `json:"first_quality_bitrate"`
	Id                    string                       `json:"id"`
	Name                  string                       `json:"name"`
	PresentationTimeRange []PresentationTimeRangeState `json:"presentation_time_range"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
	TrackSelection        []TrackSelectionState        `json:"track_selection"`
}
