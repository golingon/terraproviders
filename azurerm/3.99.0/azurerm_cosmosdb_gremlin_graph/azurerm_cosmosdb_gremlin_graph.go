// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_gremlin_graph

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_gremlin_graph.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbGremlinGraphState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acgg *Resource) Type() string {
	return "azurerm_cosmosdb_gremlin_graph"
}

// LocalName returns the local name for [Resource].
func (acgg *Resource) LocalName() string {
	return acgg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acgg *Resource) Configuration() interface{} {
	return acgg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acgg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acgg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acgg *Resource) Dependencies() terra.Dependencies {
	return acgg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acgg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acgg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acgg *Resource) Attributes() azurermCosmosdbGremlinGraphAttributes {
	return azurermCosmosdbGremlinGraphAttributes{ref: terra.ReferenceResource(acgg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acgg *Resource) ImportState(state io.Reader) error {
	acgg.state = &azurermCosmosdbGremlinGraphState{}
	if err := json.NewDecoder(state).Decode(acgg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acgg.Type(), acgg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acgg *Resource) State() (*azurermCosmosdbGremlinGraphState, bool) {
	return acgg.state, acgg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acgg *Resource) StateMust() *azurermCosmosdbGremlinGraphState {
	if acgg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acgg.Type(), acgg.LocalName()))
	}
	return acgg.state
}

// Args contains the configurations for azurerm_cosmosdb_gremlin_graph.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// AnalyticalStorageTtl: number, optional
	AnalyticalStorageTtl terra.NumberValue `hcl:"analytical_storage_ttl,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKeyPath: string, required
	PartitionKeyPath terra.StringValue `hcl:"partition_key_path,attr" validate:"required"`
	// PartitionKeyVersion: number, optional
	PartitionKeyVersion terra.NumberValue `hcl:"partition_key_version,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// AutoscaleSettings: optional
	AutoscaleSettings *AutoscaleSettings `hcl:"autoscale_settings,block"`
	// ConflictResolutionPolicy: optional
	ConflictResolutionPolicy *ConflictResolutionPolicy `hcl:"conflict_resolution_policy,block"`
	// IndexPolicy: optional
	IndexPolicy *IndexPolicy `hcl:"index_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UniqueKey: min=0
	UniqueKey []UniqueKey `hcl:"unique_key,block" validate:"min=0"`
}

type azurermCosmosdbGremlinGraphAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("account_name"))
}

// AnalyticalStorageTtl returns a reference to field analytical_storage_ttl of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) AnalyticalStorageTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(acgg.ref.Append("analytical_storage_ttl"))
}

// DatabaseName returns a reference to field database_name of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("database_name"))
}

// DefaultTtl returns a reference to field default_ttl of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(acgg.ref.Append("default_ttl"))
}

// Id returns a reference to field id of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("name"))
}

// PartitionKeyPath returns a reference to field partition_key_path of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) PartitionKeyPath() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("partition_key_path"))
}

// PartitionKeyVersion returns a reference to field partition_key_version of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) PartitionKeyVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(acgg.ref.Append("partition_key_version"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acgg.ref.Append("resource_group_name"))
}

// Throughput returns a reference to field throughput of azurerm_cosmosdb_gremlin_graph.
func (acgg azurermCosmosdbGremlinGraphAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(acgg.ref.Append("throughput"))
}

func (acgg azurermCosmosdbGremlinGraphAttributes) AutoscaleSettings() terra.ListValue[AutoscaleSettingsAttributes] {
	return terra.ReferenceAsList[AutoscaleSettingsAttributes](acgg.ref.Append("autoscale_settings"))
}

func (acgg azurermCosmosdbGremlinGraphAttributes) ConflictResolutionPolicy() terra.ListValue[ConflictResolutionPolicyAttributes] {
	return terra.ReferenceAsList[ConflictResolutionPolicyAttributes](acgg.ref.Append("conflict_resolution_policy"))
}

func (acgg azurermCosmosdbGremlinGraphAttributes) IndexPolicy() terra.ListValue[IndexPolicyAttributes] {
	return terra.ReferenceAsList[IndexPolicyAttributes](acgg.ref.Append("index_policy"))
}

func (acgg azurermCosmosdbGremlinGraphAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acgg.ref.Append("timeouts"))
}

func (acgg azurermCosmosdbGremlinGraphAttributes) UniqueKey() terra.SetValue[UniqueKeyAttributes] {
	return terra.ReferenceAsSet[UniqueKeyAttributes](acgg.ref.Append("unique_key"))
}

type azurermCosmosdbGremlinGraphState struct {
	AccountName              string                          `json:"account_name"`
	AnalyticalStorageTtl     float64                         `json:"analytical_storage_ttl"`
	DatabaseName             string                          `json:"database_name"`
	DefaultTtl               float64                         `json:"default_ttl"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	PartitionKeyPath         string                          `json:"partition_key_path"`
	PartitionKeyVersion      float64                         `json:"partition_key_version"`
	ResourceGroupName        string                          `json:"resource_group_name"`
	Throughput               float64                         `json:"throughput"`
	AutoscaleSettings        []AutoscaleSettingsState        `json:"autoscale_settings"`
	ConflictResolutionPolicy []ConflictResolutionPolicyState `json:"conflict_resolution_policy"`
	IndexPolicy              []IndexPolicyState              `json:"index_policy"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
	UniqueKey                []UniqueKeyState                `json:"unique_key"`
}
