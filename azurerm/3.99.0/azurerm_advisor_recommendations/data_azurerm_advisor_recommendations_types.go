// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_advisor_recommendations

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataRecommendationsAttributes struct {
	ref terra.Reference
}

func (r DataRecommendationsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRecommendationsAttributes) InternalWithRef(ref terra.Reference) DataRecommendationsAttributes {
	return DataRecommendationsAttributes{ref: ref}
}

func (r DataRecommendationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRecommendationsAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("category"))
}

func (r DataRecommendationsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r DataRecommendationsAttributes) Impact() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("impact"))
}

func (r DataRecommendationsAttributes) RecommendationName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("recommendation_name"))
}

func (r DataRecommendationsAttributes) RecommendationTypeId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("recommendation_type_id"))
}

func (r DataRecommendationsAttributes) ResourceName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_name"))
}

func (r DataRecommendationsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_type"))
}

func (r DataRecommendationsAttributes) SuppressionNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](r.ref.Append("suppression_names"))
}

func (r DataRecommendationsAttributes) UpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("updated_time"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataRecommendationsState struct {
	Category             string   `json:"category"`
	Description          string   `json:"description"`
	Impact               string   `json:"impact"`
	RecommendationName   string   `json:"recommendation_name"`
	RecommendationTypeId string   `json:"recommendation_type_id"`
	ResourceName         string   `json:"resource_name"`
	ResourceType         string   `json:"resource_type"`
	SuppressionNames     []string `json:"suppression_names"`
	UpdatedTime          string   `json:"updated_time"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
