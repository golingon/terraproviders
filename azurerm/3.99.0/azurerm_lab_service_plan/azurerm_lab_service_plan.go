// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lab_service_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lab_service_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLabServicePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alsp *Resource) Type() string {
	return "azurerm_lab_service_plan"
}

// LocalName returns the local name for [Resource].
func (alsp *Resource) LocalName() string {
	return alsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alsp *Resource) Configuration() interface{} {
	return alsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alsp *Resource) Dependencies() terra.Dependencies {
	return alsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alsp *Resource) Attributes() azurermLabServicePlanAttributes {
	return azurermLabServicePlanAttributes{ref: terra.ReferenceResource(alsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alsp *Resource) ImportState(state io.Reader) error {
	alsp.state = &azurermLabServicePlanState{}
	if err := json.NewDecoder(state).Decode(alsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alsp.Type(), alsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alsp *Resource) State() (*azurermLabServicePlanState, bool) {
	return alsp.state, alsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alsp *Resource) StateMust() *azurermLabServicePlanState {
	if alsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alsp.Type(), alsp.LocalName()))
	}
	return alsp.state
}

// Args contains the configurations for azurerm_lab_service_plan.
type Args struct {
	// AllowedRegions: list of string, required
	AllowedRegions terra.ListValue[terra.StringValue] `hcl:"allowed_regions,attr" validate:"required"`
	// DefaultNetworkSubnetId: string, optional
	DefaultNetworkSubnetId terra.StringValue `hcl:"default_network_subnet_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SharedGalleryId: string, optional
	SharedGalleryId terra.StringValue `hcl:"shared_gallery_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DefaultAutoShutdown: optional
	DefaultAutoShutdown *DefaultAutoShutdown `hcl:"default_auto_shutdown,block"`
	// DefaultConnection: optional
	DefaultConnection *DefaultConnection `hcl:"default_connection,block"`
	// Support: optional
	Support *Support `hcl:"support,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLabServicePlanAttributes struct {
	ref terra.Reference
}

// AllowedRegions returns a reference to field allowed_regions of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) AllowedRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alsp.ref.Append("allowed_regions"))
}

// DefaultNetworkSubnetId returns a reference to field default_network_subnet_id of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) DefaultNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("default_network_subnet_id"))
}

// Id returns a reference to field id of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("resource_group_name"))
}

// SharedGalleryId returns a reference to field shared_gallery_id of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) SharedGalleryId() terra.StringValue {
	return terra.ReferenceAsString(alsp.ref.Append("shared_gallery_id"))
}

// Tags returns a reference to field tags of azurerm_lab_service_plan.
func (alsp azurermLabServicePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alsp.ref.Append("tags"))
}

func (alsp azurermLabServicePlanAttributes) DefaultAutoShutdown() terra.ListValue[DefaultAutoShutdownAttributes] {
	return terra.ReferenceAsList[DefaultAutoShutdownAttributes](alsp.ref.Append("default_auto_shutdown"))
}

func (alsp azurermLabServicePlanAttributes) DefaultConnection() terra.ListValue[DefaultConnectionAttributes] {
	return terra.ReferenceAsList[DefaultConnectionAttributes](alsp.ref.Append("default_connection"))
}

func (alsp azurermLabServicePlanAttributes) Support() terra.ListValue[SupportAttributes] {
	return terra.ReferenceAsList[SupportAttributes](alsp.ref.Append("support"))
}

func (alsp azurermLabServicePlanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alsp.ref.Append("timeouts"))
}

type azurermLabServicePlanState struct {
	AllowedRegions         []string                   `json:"allowed_regions"`
	DefaultNetworkSubnetId string                     `json:"default_network_subnet_id"`
	Id                     string                     `json:"id"`
	Location               string                     `json:"location"`
	Name                   string                     `json:"name"`
	ResourceGroupName      string                     `json:"resource_group_name"`
	SharedGalleryId        string                     `json:"shared_gallery_id"`
	Tags                   map[string]string          `json:"tags"`
	DefaultAutoShutdown    []DefaultAutoShutdownState `json:"default_auto_shutdown"`
	DefaultConnection      []DefaultConnectionState   `json:"default_connection"`
	Support                []SupportState             `json:"support"`
	Timeouts               *TimeoutsState             `json:"timeouts"`
}
