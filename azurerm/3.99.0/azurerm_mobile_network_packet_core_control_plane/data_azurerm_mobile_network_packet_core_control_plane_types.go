// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mobile_network_packet_core_control_plane

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataIdentityAttributes struct {
	ref terra.Reference
}

func (i DataIdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdentityAttributes) InternalWithRef(ref terra.Reference) DataIdentityAttributes {
	return DataIdentityAttributes{ref: ref}
}

func (i DataIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i DataIdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type DataLocalDiagnosticsAccessAttributes struct {
	ref terra.Reference
}

func (lda DataLocalDiagnosticsAccessAttributes) InternalRef() (terra.Reference, error) {
	return lda.ref, nil
}

func (lda DataLocalDiagnosticsAccessAttributes) InternalWithRef(ref terra.Reference) DataLocalDiagnosticsAccessAttributes {
	return DataLocalDiagnosticsAccessAttributes{ref: ref}
}

func (lda DataLocalDiagnosticsAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lda.ref.InternalTokens()
}

func (lda DataLocalDiagnosticsAccessAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(lda.ref.Append("authentication_type"))
}

func (lda DataLocalDiagnosticsAccessAttributes) HttpsServerCertificateUrl() terra.StringValue {
	return terra.ReferenceAsString(lda.ref.Append("https_server_certificate_url"))
}

type DataPlatformAttributes struct {
	ref terra.Reference
}

func (p DataPlatformAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataPlatformAttributes) InternalWithRef(ref terra.Reference) DataPlatformAttributes {
	return DataPlatformAttributes{ref: ref}
}

func (p DataPlatformAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataPlatformAttributes) ArcKubernetesClusterId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("arc_kubernetes_cluster_id"))
}

func (p DataPlatformAttributes) CustomLocationId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("custom_location_id"))
}

func (p DataPlatformAttributes) EdgeDeviceId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("edge_device_id"))
}

func (p DataPlatformAttributes) StackHciClusterId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("stack_hci_cluster_id"))
}

func (p DataPlatformAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataIdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type DataLocalDiagnosticsAccessState struct {
	AuthenticationType        string `json:"authentication_type"`
	HttpsServerCertificateUrl string `json:"https_server_certificate_url"`
}

type DataPlatformState struct {
	ArcKubernetesClusterId string `json:"arc_kubernetes_cluster_id"`
	CustomLocationId       string `json:"custom_location_id"`
	EdgeDeviceId           string `json:"edge_device_id"`
	StackHciClusterId      string `json:"stack_hci_cluster_id"`
	Type                   string `json:"type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
