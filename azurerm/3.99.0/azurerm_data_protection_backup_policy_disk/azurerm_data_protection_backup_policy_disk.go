// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_protection_backup_policy_disk

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_protection_backup_policy_disk.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataProtectionBackupPolicyDiskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpbpd *Resource) Type() string {
	return "azurerm_data_protection_backup_policy_disk"
}

// LocalName returns the local name for [Resource].
func (adpbpd *Resource) LocalName() string {
	return adpbpd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpbpd *Resource) Configuration() interface{} {
	return adpbpd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpbpd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpbpd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpbpd *Resource) Dependencies() terra.Dependencies {
	return adpbpd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpbpd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpbpd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpbpd *Resource) Attributes() azurermDataProtectionBackupPolicyDiskAttributes {
	return azurermDataProtectionBackupPolicyDiskAttributes{ref: terra.ReferenceResource(adpbpd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpbpd *Resource) ImportState(state io.Reader) error {
	adpbpd.state = &azurermDataProtectionBackupPolicyDiskState{}
	if err := json.NewDecoder(state).Decode(adpbpd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpbpd.Type(), adpbpd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpbpd *Resource) State() (*azurermDataProtectionBackupPolicyDiskState, bool) {
	return adpbpd.state, adpbpd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpbpd *Resource) StateMust() *azurermDataProtectionBackupPolicyDiskState {
	if adpbpd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpbpd.Type(), adpbpd.LocalName()))
	}
	return adpbpd.state
}

// Args contains the configurations for azurerm_data_protection_backup_policy_disk.
type Args struct {
	// BackupRepeatingTimeIntervals: list of string, required
	BackupRepeatingTimeIntervals terra.ListValue[terra.StringValue] `hcl:"backup_repeating_time_intervals,attr" validate:"required"`
	// DefaultRetentionDuration: string, required
	DefaultRetentionDuration terra.StringValue `hcl:"default_retention_duration,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// VaultId: string, required
	VaultId terra.StringValue `hcl:"vault_id,attr" validate:"required"`
	// RetentionRule: min=0
	RetentionRule []RetentionRule `hcl:"retention_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataProtectionBackupPolicyDiskAttributes struct {
	ref terra.Reference
}

// BackupRepeatingTimeIntervals returns a reference to field backup_repeating_time_intervals of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) BackupRepeatingTimeIntervals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adpbpd.ref.Append("backup_repeating_time_intervals"))
}

// DefaultRetentionDuration returns a reference to field default_retention_duration of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) DefaultRetentionDuration() terra.StringValue {
	return terra.ReferenceAsString(adpbpd.ref.Append("default_retention_duration"))
}

// Id returns a reference to field id of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpbpd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpbpd.ref.Append("name"))
}

// TimeZone returns a reference to field time_zone of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(adpbpd.ref.Append("time_zone"))
}

// VaultId returns a reference to field vault_id of azurerm_data_protection_backup_policy_disk.
func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) VaultId() terra.StringValue {
	return terra.ReferenceAsString(adpbpd.ref.Append("vault_id"))
}

func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) RetentionRule() terra.ListValue[RetentionRuleAttributes] {
	return terra.ReferenceAsList[RetentionRuleAttributes](adpbpd.ref.Append("retention_rule"))
}

func (adpbpd azurermDataProtectionBackupPolicyDiskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpbpd.ref.Append("timeouts"))
}

type azurermDataProtectionBackupPolicyDiskState struct {
	BackupRepeatingTimeIntervals []string             `json:"backup_repeating_time_intervals"`
	DefaultRetentionDuration     string               `json:"default_retention_duration"`
	Id                           string               `json:"id"`
	Name                         string               `json:"name"`
	TimeZone                     string               `json:"time_zone"`
	VaultId                      string               `json:"vault_id"`
	RetentionRule                []RetentionRuleState `json:"retention_rule"`
	Timeouts                     *TimeoutsState       `json:"timeouts"`
}
