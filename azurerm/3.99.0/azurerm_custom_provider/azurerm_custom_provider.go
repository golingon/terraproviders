// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_custom_provider

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_custom_provider.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCustomProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acp *Resource) Type() string {
	return "azurerm_custom_provider"
}

// LocalName returns the local name for [Resource].
func (acp *Resource) LocalName() string {
	return acp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acp *Resource) Configuration() interface{} {
	return acp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acp *Resource) Dependencies() terra.Dependencies {
	return acp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acp *Resource) Attributes() azurermCustomProviderAttributes {
	return azurermCustomProviderAttributes{ref: terra.ReferenceResource(acp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acp *Resource) ImportState(state io.Reader) error {
	acp.state = &azurermCustomProviderState{}
	if err := json.NewDecoder(state).Decode(acp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acp.Type(), acp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acp *Resource) State() (*azurermCustomProviderState, bool) {
	return acp.state, acp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acp *Resource) StateMust() *azurermCustomProviderState {
	if acp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acp.Type(), acp.LocalName()))
	}
	return acp.state
}

// Args contains the configurations for azurerm_custom_provider.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=0
	Action []Action `hcl:"action,block" validate:"min=0"`
	// ResourceType: min=0
	ResourceType []ResourceType `hcl:"resource_type,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Validation: min=0
	Validation []Validation `hcl:"validation,block" validate:"min=0"`
}

type azurermCustomProviderAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_custom_provider.
func (acp azurermCustomProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_custom_provider.
func (acp azurermCustomProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_custom_provider.
func (acp azurermCustomProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_custom_provider.
func (acp azurermCustomProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_custom_provider.
func (acp azurermCustomProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acp.ref.Append("tags"))
}

func (acp azurermCustomProviderAttributes) Action() terra.SetValue[ActionAttributes] {
	return terra.ReferenceAsSet[ActionAttributes](acp.ref.Append("action"))
}

func (acp azurermCustomProviderAttributes) ResourceType() terra.SetValue[ResourceTypeAttributes] {
	return terra.ReferenceAsSet[ResourceTypeAttributes](acp.ref.Append("resource_type"))
}

func (acp azurermCustomProviderAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acp.ref.Append("timeouts"))
}

func (acp azurermCustomProviderAttributes) Validation() terra.SetValue[ValidationAttributes] {
	return terra.ReferenceAsSet[ValidationAttributes](acp.ref.Append("validation"))
}

type azurermCustomProviderState struct {
	Id                string              `json:"id"`
	Location          string              `json:"location"`
	Name              string              `json:"name"`
	ResourceGroupName string              `json:"resource_group_name"`
	Tags              map[string]string   `json:"tags"`
	Action            []ActionState       `json:"action"`
	ResourceType      []ResourceTypeState `json:"resource_type"`
	Timeouts          *TimeoutsState      `json:"timeouts"`
	Validation        []ValidationState   `json:"validation"`
}
