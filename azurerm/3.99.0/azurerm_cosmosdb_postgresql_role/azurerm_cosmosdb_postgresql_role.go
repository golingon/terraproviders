// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_postgresql_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_postgresql_role.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbPostgresqlRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acpr *Resource) Type() string {
	return "azurerm_cosmosdb_postgresql_role"
}

// LocalName returns the local name for [Resource].
func (acpr *Resource) LocalName() string {
	return acpr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acpr *Resource) Configuration() interface{} {
	return acpr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acpr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acpr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acpr *Resource) Dependencies() terra.Dependencies {
	return acpr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acpr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acpr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acpr *Resource) Attributes() azurermCosmosdbPostgresqlRoleAttributes {
	return azurermCosmosdbPostgresqlRoleAttributes{ref: terra.ReferenceResource(acpr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acpr *Resource) ImportState(state io.Reader) error {
	acpr.state = &azurermCosmosdbPostgresqlRoleState{}
	if err := json.NewDecoder(state).Decode(acpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acpr.Type(), acpr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acpr *Resource) State() (*azurermCosmosdbPostgresqlRoleState, bool) {
	return acpr.state, acpr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acpr *Resource) StateMust() *azurermCosmosdbPostgresqlRoleState {
	if acpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acpr.Type(), acpr.LocalName()))
	}
	return acpr.state
}

// Args contains the configurations for azurerm_cosmosdb_postgresql_role.
type Args struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbPostgresqlRoleAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_cosmosdb_postgresql_role.
func (acpr azurermCosmosdbPostgresqlRoleAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(acpr.ref.Append("cluster_id"))
}

// Id returns a reference to field id of azurerm_cosmosdb_postgresql_role.
func (acpr azurermCosmosdbPostgresqlRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acpr.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_postgresql_role.
func (acpr azurermCosmosdbPostgresqlRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acpr.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_cosmosdb_postgresql_role.
func (acpr azurermCosmosdbPostgresqlRoleAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(acpr.ref.Append("password"))
}

func (acpr azurermCosmosdbPostgresqlRoleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acpr.ref.Append("timeouts"))
}

type azurermCosmosdbPostgresqlRoleState struct {
	ClusterId string         `json:"cluster_id"`
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	Password  string         `json:"password"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
