// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_cassandra_datacenter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_cassandra_datacenter.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbCassandraDatacenterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accd *Resource) Type() string {
	return "azurerm_cosmosdb_cassandra_datacenter"
}

// LocalName returns the local name for [Resource].
func (accd *Resource) LocalName() string {
	return accd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accd *Resource) Configuration() interface{} {
	return accd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accd *Resource) Dependencies() terra.Dependencies {
	return accd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accd *Resource) LifecycleManagement() *terra.Lifecycle {
	return accd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accd *Resource) Attributes() azurermCosmosdbCassandraDatacenterAttributes {
	return azurermCosmosdbCassandraDatacenterAttributes{ref: terra.ReferenceResource(accd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accd *Resource) ImportState(state io.Reader) error {
	accd.state = &azurermCosmosdbCassandraDatacenterState{}
	if err := json.NewDecoder(state).Decode(accd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accd.Type(), accd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accd *Resource) State() (*azurermCosmosdbCassandraDatacenterState, bool) {
	return accd.state, accd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accd *Resource) StateMust() *azurermCosmosdbCassandraDatacenterState {
	if accd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accd.Type(), accd.LocalName()))
	}
	return accd.state
}

// Args contains the configurations for azurerm_cosmosdb_cassandra_datacenter.
type Args struct {
	// AvailabilityZonesEnabled: bool, optional
	AvailabilityZonesEnabled terra.BoolValue `hcl:"availability_zones_enabled,attr"`
	// BackupStorageCustomerKeyUri: string, optional
	BackupStorageCustomerKeyUri terra.StringValue `hcl:"backup_storage_customer_key_uri,attr"`
	// Base64EncodedYamlFragment: string, optional
	Base64EncodedYamlFragment terra.StringValue `hcl:"base64_encoded_yaml_fragment,attr"`
	// CassandraClusterId: string, required
	CassandraClusterId terra.StringValue `hcl:"cassandra_cluster_id,attr" validate:"required"`
	// DelegatedManagementSubnetId: string, required
	DelegatedManagementSubnetId terra.StringValue `hcl:"delegated_management_subnet_id,attr" validate:"required"`
	// DiskCount: number, optional
	DiskCount terra.NumberValue `hcl:"disk_count,attr"`
	// DiskSku: string, optional
	DiskSku terra.StringValue `hcl:"disk_sku,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedDiskCustomerKeyUri: string, optional
	ManagedDiskCustomerKeyUri terra.StringValue `hcl:"managed_disk_customer_key_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbCassandraDatacenterAttributes struct {
	ref terra.Reference
}

// AvailabilityZonesEnabled returns a reference to field availability_zones_enabled of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) AvailabilityZonesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(accd.ref.Append("availability_zones_enabled"))
}

// BackupStorageCustomerKeyUri returns a reference to field backup_storage_customer_key_uri of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) BackupStorageCustomerKeyUri() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("backup_storage_customer_key_uri"))
}

// Base64EncodedYamlFragment returns a reference to field base64_encoded_yaml_fragment of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) Base64EncodedYamlFragment() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("base64_encoded_yaml_fragment"))
}

// CassandraClusterId returns a reference to field cassandra_cluster_id of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) CassandraClusterId() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("cassandra_cluster_id"))
}

// DelegatedManagementSubnetId returns a reference to field delegated_management_subnet_id of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) DelegatedManagementSubnetId() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("delegated_management_subnet_id"))
}

// DiskCount returns a reference to field disk_count of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) DiskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(accd.ref.Append("disk_count"))
}

// DiskSku returns a reference to field disk_sku of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) DiskSku() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("disk_sku"))
}

// Id returns a reference to field id of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("location"))
}

// ManagedDiskCustomerKeyUri returns a reference to field managed_disk_customer_key_uri of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) ManagedDiskCustomerKeyUri() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("managed_disk_customer_key_uri"))
}

// Name returns a reference to field name of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("name"))
}

// NodeCount returns a reference to field node_count of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(accd.ref.Append("node_count"))
}

// SeedNodeIpAddresses returns a reference to field seed_node_ip_addresses of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) SeedNodeIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](accd.ref.Append("seed_node_ip_addresses"))
}

// SkuName returns a reference to field sku_name of azurerm_cosmosdb_cassandra_datacenter.
func (accd azurermCosmosdbCassandraDatacenterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(accd.ref.Append("sku_name"))
}

func (accd azurermCosmosdbCassandraDatacenterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](accd.ref.Append("timeouts"))
}

type azurermCosmosdbCassandraDatacenterState struct {
	AvailabilityZonesEnabled    bool           `json:"availability_zones_enabled"`
	BackupStorageCustomerKeyUri string         `json:"backup_storage_customer_key_uri"`
	Base64EncodedYamlFragment   string         `json:"base64_encoded_yaml_fragment"`
	CassandraClusterId          string         `json:"cassandra_cluster_id"`
	DelegatedManagementSubnetId string         `json:"delegated_management_subnet_id"`
	DiskCount                   float64        `json:"disk_count"`
	DiskSku                     string         `json:"disk_sku"`
	Id                          string         `json:"id"`
	Location                    string         `json:"location"`
	ManagedDiskCustomerKeyUri   string         `json:"managed_disk_customer_key_uri"`
	Name                        string         `json:"name"`
	NodeCount                   float64        `json:"node_count"`
	SeedNodeIpAddresses         []string       `json:"seed_node_ip_addresses"`
	SkuName                     string         `json:"sku_name"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
