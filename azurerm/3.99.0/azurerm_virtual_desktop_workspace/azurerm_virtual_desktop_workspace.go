// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_desktop_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_desktop_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualDesktopWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avdw *Resource) Type() string {
	return "azurerm_virtual_desktop_workspace"
}

// LocalName returns the local name for [Resource].
func (avdw *Resource) LocalName() string {
	return avdw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avdw *Resource) Configuration() interface{} {
	return avdw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avdw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avdw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avdw *Resource) Dependencies() terra.Dependencies {
	return avdw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avdw *Resource) LifecycleManagement() *terra.Lifecycle {
	return avdw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avdw *Resource) Attributes() azurermVirtualDesktopWorkspaceAttributes {
	return azurermVirtualDesktopWorkspaceAttributes{ref: terra.ReferenceResource(avdw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avdw *Resource) ImportState(state io.Reader) error {
	avdw.state = &azurermVirtualDesktopWorkspaceState{}
	if err := json.NewDecoder(state).Decode(avdw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avdw.Type(), avdw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avdw *Resource) State() (*azurermVirtualDesktopWorkspaceState, bool) {
	return avdw.state, avdw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avdw *Resource) StateMust() *azurermVirtualDesktopWorkspaceState {
	if avdw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avdw.Type(), avdw.LocalName()))
	}
	return avdw.state
}

// Args contains the configurations for azurerm_virtual_desktop_workspace.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualDesktopWorkspaceAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("description"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("friendly_name"))
}

// Id returns a reference to field id of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(avdw.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avdw.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_virtual_desktop_workspace.
func (avdw azurermVirtualDesktopWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avdw.ref.Append("tags"))
}

func (avdw azurermVirtualDesktopWorkspaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avdw.ref.Append("timeouts"))
}

type azurermVirtualDesktopWorkspaceState struct {
	Description                string            `json:"description"`
	FriendlyName               string            `json:"friendly_name"`
	Id                         string            `json:"id"`
	Location                   string            `json:"location"`
	Name                       string            `json:"name"`
	PublicNetworkAccessEnabled bool              `json:"public_network_access_enabled"`
	ResourceGroupName          string            `json:"resource_group_name"`
	Tags                       map[string]string `json:"tags"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
