// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_endpoint_custom_domain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CdnManagedHttps struct {
	// CertificateType: string, required
	CertificateType terra.StringValue `hcl:"certificate_type,attr" validate:"required"`
	// ProtocolType: string, required
	ProtocolType terra.StringValue `hcl:"protocol_type,attr" validate:"required"`
	// TlsVersion: string, optional
	TlsVersion terra.StringValue `hcl:"tls_version,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UserManagedHttps struct {
	// KeyVaultCertificateId: string, optional
	KeyVaultCertificateId terra.StringValue `hcl:"key_vault_certificate_id,attr"`
	// KeyVaultSecretId: string, optional
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr"`
	// TlsVersion: string, optional
	TlsVersion terra.StringValue `hcl:"tls_version,attr"`
}

type CdnManagedHttpsAttributes struct {
	ref terra.Reference
}

func (cmh CdnManagedHttpsAttributes) InternalRef() (terra.Reference, error) {
	return cmh.ref, nil
}

func (cmh CdnManagedHttpsAttributes) InternalWithRef(ref terra.Reference) CdnManagedHttpsAttributes {
	return CdnManagedHttpsAttributes{ref: ref}
}

func (cmh CdnManagedHttpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmh.ref.InternalTokens()
}

func (cmh CdnManagedHttpsAttributes) CertificateType() terra.StringValue {
	return terra.ReferenceAsString(cmh.ref.Append("certificate_type"))
}

func (cmh CdnManagedHttpsAttributes) ProtocolType() terra.StringValue {
	return terra.ReferenceAsString(cmh.ref.Append("protocol_type"))
}

func (cmh CdnManagedHttpsAttributes) TlsVersion() terra.StringValue {
	return terra.ReferenceAsString(cmh.ref.Append("tls_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UserManagedHttpsAttributes struct {
	ref terra.Reference
}

func (umh UserManagedHttpsAttributes) InternalRef() (terra.Reference, error) {
	return umh.ref, nil
}

func (umh UserManagedHttpsAttributes) InternalWithRef(ref terra.Reference) UserManagedHttpsAttributes {
	return UserManagedHttpsAttributes{ref: ref}
}

func (umh UserManagedHttpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return umh.ref.InternalTokens()
}

func (umh UserManagedHttpsAttributes) KeyVaultCertificateId() terra.StringValue {
	return terra.ReferenceAsString(umh.ref.Append("key_vault_certificate_id"))
}

func (umh UserManagedHttpsAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(umh.ref.Append("key_vault_secret_id"))
}

func (umh UserManagedHttpsAttributes) TlsVersion() terra.StringValue {
	return terra.ReferenceAsString(umh.ref.Append("tls_version"))
}

type CdnManagedHttpsState struct {
	CertificateType string `json:"certificate_type"`
	ProtocolType    string `json:"protocol_type"`
	TlsVersion      string `json:"tls_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UserManagedHttpsState struct {
	KeyVaultCertificateId string `json:"key_vault_certificate_id"`
	KeyVaultSecretId      string `json:"key_vault_secret_id"`
	TlsVersion            string `json:"tls_version"`
}
