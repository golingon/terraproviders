// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_machine_learning_compute_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_machine_learning_compute_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMachineLearningComputeClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amlcc *Resource) Type() string {
	return "azurerm_machine_learning_compute_cluster"
}

// LocalName returns the local name for [Resource].
func (amlcc *Resource) LocalName() string {
	return amlcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amlcc *Resource) Configuration() interface{} {
	return amlcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amlcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amlcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amlcc *Resource) Dependencies() terra.Dependencies {
	return amlcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amlcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amlcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amlcc *Resource) Attributes() azurermMachineLearningComputeClusterAttributes {
	return azurermMachineLearningComputeClusterAttributes{ref: terra.ReferenceResource(amlcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amlcc *Resource) ImportState(state io.Reader) error {
	amlcc.state = &azurermMachineLearningComputeClusterState{}
	if err := json.NewDecoder(state).Decode(amlcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amlcc.Type(), amlcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amlcc *Resource) State() (*azurermMachineLearningComputeClusterState, bool) {
	return amlcc.state, amlcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amlcc *Resource) StateMust() *azurermMachineLearningComputeClusterState {
	if amlcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amlcc.Type(), amlcc.LocalName()))
	}
	return amlcc.state
}

// Args contains the configurations for azurerm_machine_learning_compute_cluster.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalAuthEnabled: bool, optional
	LocalAuthEnabled terra.BoolValue `hcl:"local_auth_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineLearningWorkspaceId: string, required
	MachineLearningWorkspaceId terra.StringValue `hcl:"machine_learning_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodePublicIpEnabled: bool, optional
	NodePublicIpEnabled terra.BoolValue `hcl:"node_public_ip_enabled,attr"`
	// SshPublicAccessEnabled: bool, optional
	SshPublicAccessEnabled terra.BoolValue `hcl:"ssh_public_access_enabled,attr"`
	// SubnetResourceId: string, optional
	SubnetResourceId terra.StringValue `hcl:"subnet_resource_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VmPriority: string, required
	VmPriority terra.StringValue `hcl:"vm_priority,attr" validate:"required"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// ScaleSettings: required
	ScaleSettings *ScaleSettings `hcl:"scale_settings,block" validate:"required"`
	// Ssh: optional
	Ssh *Ssh `hcl:"ssh,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMachineLearningComputeClusterAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("id"))
}

// LocalAuthEnabled returns a reference to field local_auth_enabled of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) LocalAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amlcc.ref.Append("local_auth_enabled"))
}

// Location returns a reference to field location of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("location"))
}

// MachineLearningWorkspaceId returns a reference to field machine_learning_workspace_id of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) MachineLearningWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("machine_learning_workspace_id"))
}

// Name returns a reference to field name of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("name"))
}

// NodePublicIpEnabled returns a reference to field node_public_ip_enabled of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) NodePublicIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amlcc.ref.Append("node_public_ip_enabled"))
}

// SshPublicAccessEnabled returns a reference to field ssh_public_access_enabled of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) SshPublicAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amlcc.ref.Append("ssh_public_access_enabled"))
}

// SubnetResourceId returns a reference to field subnet_resource_id of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) SubnetResourceId() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("subnet_resource_id"))
}

// Tags returns a reference to field tags of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amlcc.ref.Append("tags"))
}

// VmPriority returns a reference to field vm_priority of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) VmPriority() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("vm_priority"))
}

// VmSize returns a reference to field vm_size of azurerm_machine_learning_compute_cluster.
func (amlcc azurermMachineLearningComputeClusterAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(amlcc.ref.Append("vm_size"))
}

func (amlcc azurermMachineLearningComputeClusterAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](amlcc.ref.Append("identity"))
}

func (amlcc azurermMachineLearningComputeClusterAttributes) ScaleSettings() terra.ListValue[ScaleSettingsAttributes] {
	return terra.ReferenceAsList[ScaleSettingsAttributes](amlcc.ref.Append("scale_settings"))
}

func (amlcc azurermMachineLearningComputeClusterAttributes) Ssh() terra.ListValue[SshAttributes] {
	return terra.ReferenceAsList[SshAttributes](amlcc.ref.Append("ssh"))
}

func (amlcc azurermMachineLearningComputeClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amlcc.ref.Append("timeouts"))
}

type azurermMachineLearningComputeClusterState struct {
	Description                string               `json:"description"`
	Id                         string               `json:"id"`
	LocalAuthEnabled           bool                 `json:"local_auth_enabled"`
	Location                   string               `json:"location"`
	MachineLearningWorkspaceId string               `json:"machine_learning_workspace_id"`
	Name                       string               `json:"name"`
	NodePublicIpEnabled        bool                 `json:"node_public_ip_enabled"`
	SshPublicAccessEnabled     bool                 `json:"ssh_public_access_enabled"`
	SubnetResourceId           string               `json:"subnet_resource_id"`
	Tags                       map[string]string    `json:"tags"`
	VmPriority                 string               `json:"vm_priority"`
	VmSize                     string               `json:"vm_size"`
	Identity                   []IdentityState      `json:"identity"`
	ScaleSettings              []ScaleSettingsState `json:"scale_settings"`
	Ssh                        []SshState           `json:"ssh"`
	Timeouts                   *TimeoutsState       `json:"timeouts"`
}
