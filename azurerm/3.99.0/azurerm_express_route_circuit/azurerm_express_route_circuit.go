// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_express_route_circuit

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_express_route_circuit.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermExpressRouteCircuitState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aerc *Resource) Type() string {
	return "azurerm_express_route_circuit"
}

// LocalName returns the local name for [Resource].
func (aerc *Resource) LocalName() string {
	return aerc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aerc *Resource) Configuration() interface{} {
	return aerc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aerc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aerc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aerc *Resource) Dependencies() terra.Dependencies {
	return aerc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aerc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aerc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aerc *Resource) Attributes() azurermExpressRouteCircuitAttributes {
	return azurermExpressRouteCircuitAttributes{ref: terra.ReferenceResource(aerc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aerc *Resource) ImportState(state io.Reader) error {
	aerc.state = &azurermExpressRouteCircuitState{}
	if err := json.NewDecoder(state).Decode(aerc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aerc.Type(), aerc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aerc *Resource) State() (*azurermExpressRouteCircuitState, bool) {
	return aerc.state, aerc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aerc *Resource) StateMust() *azurermExpressRouteCircuitState {
	if aerc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aerc.Type(), aerc.LocalName()))
	}
	return aerc.state
}

// Args contains the configurations for azurerm_express_route_circuit.
type Args struct {
	// AllowClassicOperations: bool, optional
	AllowClassicOperations terra.BoolValue `hcl:"allow_classic_operations,attr"`
	// AuthorizationKey: string, optional
	AuthorizationKey terra.StringValue `hcl:"authorization_key,attr"`
	// BandwidthInGbps: number, optional
	BandwidthInGbps terra.NumberValue `hcl:"bandwidth_in_gbps,attr"`
	// BandwidthInMbps: number, optional
	BandwidthInMbps terra.NumberValue `hcl:"bandwidth_in_mbps,attr"`
	// ExpressRoutePortId: string, optional
	ExpressRoutePortId terra.StringValue `hcl:"express_route_port_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeeringLocation: string, optional
	PeeringLocation terra.StringValue `hcl:"peering_location,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceProviderName: string, optional
	ServiceProviderName terra.StringValue `hcl:"service_provider_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermExpressRouteCircuitAttributes struct {
	ref terra.Reference
}

// AllowClassicOperations returns a reference to field allow_classic_operations of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) AllowClassicOperations() terra.BoolValue {
	return terra.ReferenceAsBool(aerc.ref.Append("allow_classic_operations"))
}

// AuthorizationKey returns a reference to field authorization_key of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("authorization_key"))
}

// BandwidthInGbps returns a reference to field bandwidth_in_gbps of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) BandwidthInGbps() terra.NumberValue {
	return terra.ReferenceAsNumber(aerc.ref.Append("bandwidth_in_gbps"))
}

// BandwidthInMbps returns a reference to field bandwidth_in_mbps of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) BandwidthInMbps() terra.NumberValue {
	return terra.ReferenceAsNumber(aerc.ref.Append("bandwidth_in_mbps"))
}

// ExpressRoutePortId returns a reference to field express_route_port_id of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) ExpressRoutePortId() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("express_route_port_id"))
}

// Id returns a reference to field id of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("name"))
}

// PeeringLocation returns a reference to field peering_location of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) PeeringLocation() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("peering_location"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("resource_group_name"))
}

// ServiceKey returns a reference to field service_key of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) ServiceKey() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("service_key"))
}

// ServiceProviderName returns a reference to field service_provider_name of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) ServiceProviderName() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("service_provider_name"))
}

// ServiceProviderProvisioningState returns a reference to field service_provider_provisioning_state of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) ServiceProviderProvisioningState() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("service_provider_provisioning_state"))
}

// Tags returns a reference to field tags of azurerm_express_route_circuit.
func (aerc azurermExpressRouteCircuitAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aerc.ref.Append("tags"))
}

func (aerc azurermExpressRouteCircuitAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](aerc.ref.Append("sku"))
}

func (aerc azurermExpressRouteCircuitAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aerc.ref.Append("timeouts"))
}

type azurermExpressRouteCircuitState struct {
	AllowClassicOperations           bool              `json:"allow_classic_operations"`
	AuthorizationKey                 string            `json:"authorization_key"`
	BandwidthInGbps                  float64           `json:"bandwidth_in_gbps"`
	BandwidthInMbps                  float64           `json:"bandwidth_in_mbps"`
	ExpressRoutePortId               string            `json:"express_route_port_id"`
	Id                               string            `json:"id"`
	Location                         string            `json:"location"`
	Name                             string            `json:"name"`
	PeeringLocation                  string            `json:"peering_location"`
	ResourceGroupName                string            `json:"resource_group_name"`
	ServiceKey                       string            `json:"service_key"`
	ServiceProviderName              string            `json:"service_provider_name"`
	ServiceProviderProvisioningState string            `json:"service_provider_provisioning_state"`
	Tags                             map[string]string `json:"tags"`
	Sku                              []SkuState        `json:"sku"`
	Timeouts                         *TimeoutsState    `json:"timeouts"`
}
