// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_log_analytics_datasource_windows_event

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_log_analytics_datasource_windows_event.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogAnalyticsDatasourceWindowsEventState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aladwe *Resource) Type() string {
	return "azurerm_log_analytics_datasource_windows_event"
}

// LocalName returns the local name for [Resource].
func (aladwe *Resource) LocalName() string {
	return aladwe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aladwe *Resource) Configuration() interface{} {
	return aladwe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aladwe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aladwe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aladwe *Resource) Dependencies() terra.Dependencies {
	return aladwe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aladwe *Resource) LifecycleManagement() *terra.Lifecycle {
	return aladwe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aladwe *Resource) Attributes() azurermLogAnalyticsDatasourceWindowsEventAttributes {
	return azurermLogAnalyticsDatasourceWindowsEventAttributes{ref: terra.ReferenceResource(aladwe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aladwe *Resource) ImportState(state io.Reader) error {
	aladwe.state = &azurermLogAnalyticsDatasourceWindowsEventState{}
	if err := json.NewDecoder(state).Decode(aladwe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aladwe.Type(), aladwe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aladwe *Resource) State() (*azurermLogAnalyticsDatasourceWindowsEventState, bool) {
	return aladwe.state, aladwe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aladwe *Resource) StateMust() *azurermLogAnalyticsDatasourceWindowsEventState {
	if aladwe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aladwe.Type(), aladwe.LocalName()))
	}
	return aladwe.state
}

// Args contains the configurations for azurerm_log_analytics_datasource_windows_event.
type Args struct {
	// EventLogName: string, required
	EventLogName terra.StringValue `hcl:"event_log_name,attr" validate:"required"`
	// EventTypes: set of string, required
	EventTypes terra.SetValue[terra.StringValue] `hcl:"event_types,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// WorkspaceName: string, required
	WorkspaceName terra.StringValue `hcl:"workspace_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogAnalyticsDatasourceWindowsEventAttributes struct {
	ref terra.Reference
}

// EventLogName returns a reference to field event_log_name of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) EventLogName() terra.StringValue {
	return terra.ReferenceAsString(aladwe.ref.Append("event_log_name"))
}

// EventTypes returns a reference to field event_types of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) EventTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aladwe.ref.Append("event_types"))
}

// Id returns a reference to field id of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aladwe.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aladwe.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aladwe.ref.Append("resource_group_name"))
}

// WorkspaceName returns a reference to field workspace_name of azurerm_log_analytics_datasource_windows_event.
func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) WorkspaceName() terra.StringValue {
	return terra.ReferenceAsString(aladwe.ref.Append("workspace_name"))
}

func (aladwe azurermLogAnalyticsDatasourceWindowsEventAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aladwe.ref.Append("timeouts"))
}

type azurermLogAnalyticsDatasourceWindowsEventState struct {
	EventLogName      string         `json:"event_log_name"`
	EventTypes        []string       `json:"event_types"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	ResourceGroupName string         `json:"resource_group_name"`
	WorkspaceName     string         `json:"workspace_name"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
