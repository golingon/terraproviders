// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_digital_twins_endpoint_eventgrid

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_digital_twins_endpoint_eventgrid.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDigitalTwinsEndpointEventgridState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adtee *Resource) Type() string {
	return "azurerm_digital_twins_endpoint_eventgrid"
}

// LocalName returns the local name for [Resource].
func (adtee *Resource) LocalName() string {
	return adtee.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adtee *Resource) Configuration() interface{} {
	return adtee.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adtee *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adtee)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adtee *Resource) Dependencies() terra.Dependencies {
	return adtee.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adtee *Resource) LifecycleManagement() *terra.Lifecycle {
	return adtee.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adtee *Resource) Attributes() azurermDigitalTwinsEndpointEventgridAttributes {
	return azurermDigitalTwinsEndpointEventgridAttributes{ref: terra.ReferenceResource(adtee)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adtee *Resource) ImportState(state io.Reader) error {
	adtee.state = &azurermDigitalTwinsEndpointEventgridState{}
	if err := json.NewDecoder(state).Decode(adtee.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adtee.Type(), adtee.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adtee *Resource) State() (*azurermDigitalTwinsEndpointEventgridState, bool) {
	return adtee.state, adtee.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adtee *Resource) StateMust() *azurermDigitalTwinsEndpointEventgridState {
	if adtee.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adtee.Type(), adtee.LocalName()))
	}
	return adtee.state
}

// Args contains the configurations for azurerm_digital_twins_endpoint_eventgrid.
type Args struct {
	// DeadLetterStorageSecret: string, optional
	DeadLetterStorageSecret terra.StringValue `hcl:"dead_letter_storage_secret,attr"`
	// DigitalTwinsId: string, required
	DigitalTwinsId terra.StringValue `hcl:"digital_twins_id,attr" validate:"required"`
	// EventgridTopicEndpoint: string, required
	EventgridTopicEndpoint terra.StringValue `hcl:"eventgrid_topic_endpoint,attr" validate:"required"`
	// EventgridTopicPrimaryAccessKey: string, required
	EventgridTopicPrimaryAccessKey terra.StringValue `hcl:"eventgrid_topic_primary_access_key,attr" validate:"required"`
	// EventgridTopicSecondaryAccessKey: string, required
	EventgridTopicSecondaryAccessKey terra.StringValue `hcl:"eventgrid_topic_secondary_access_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDigitalTwinsEndpointEventgridAttributes struct {
	ref terra.Reference
}

// DeadLetterStorageSecret returns a reference to field dead_letter_storage_secret of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) DeadLetterStorageSecret() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("dead_letter_storage_secret"))
}

// DigitalTwinsId returns a reference to field digital_twins_id of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) DigitalTwinsId() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("digital_twins_id"))
}

// EventgridTopicEndpoint returns a reference to field eventgrid_topic_endpoint of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) EventgridTopicEndpoint() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("eventgrid_topic_endpoint"))
}

// EventgridTopicPrimaryAccessKey returns a reference to field eventgrid_topic_primary_access_key of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) EventgridTopicPrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("eventgrid_topic_primary_access_key"))
}

// EventgridTopicSecondaryAccessKey returns a reference to field eventgrid_topic_secondary_access_key of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) EventgridTopicSecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("eventgrid_topic_secondary_access_key"))
}

// Id returns a reference to field id of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_digital_twins_endpoint_eventgrid.
func (adtee azurermDigitalTwinsEndpointEventgridAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adtee.ref.Append("name"))
}

func (adtee azurermDigitalTwinsEndpointEventgridAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adtee.ref.Append("timeouts"))
}

type azurermDigitalTwinsEndpointEventgridState struct {
	DeadLetterStorageSecret          string         `json:"dead_letter_storage_secret"`
	DigitalTwinsId                   string         `json:"digital_twins_id"`
	EventgridTopicEndpoint           string         `json:"eventgrid_topic_endpoint"`
	EventgridTopicPrimaryAccessKey   string         `json:"eventgrid_topic_primary_access_key"`
	EventgridTopicSecondaryAccessKey string         `json:"eventgrid_topic_secondary_access_key"`
	Id                               string         `json:"id"`
	Name                             string         `json:"name"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
