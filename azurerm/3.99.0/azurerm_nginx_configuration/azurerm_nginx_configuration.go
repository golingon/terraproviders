// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_nginx_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_nginx_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNginxConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anc *Resource) Type() string {
	return "azurerm_nginx_configuration"
}

// LocalName returns the local name for [Resource].
func (anc *Resource) LocalName() string {
	return anc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anc *Resource) Configuration() interface{} {
	return anc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anc *Resource) Dependencies() terra.Dependencies {
	return anc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anc *Resource) Attributes() azurermNginxConfigurationAttributes {
	return azurermNginxConfigurationAttributes{ref: terra.ReferenceResource(anc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anc *Resource) ImportState(state io.Reader) error {
	anc.state = &azurermNginxConfigurationState{}
	if err := json.NewDecoder(state).Decode(anc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anc.Type(), anc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anc *Resource) State() (*azurermNginxConfigurationState, bool) {
	return anc.state, anc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anc *Resource) StateMust() *azurermNginxConfigurationState {
	if anc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anc.Type(), anc.LocalName()))
	}
	return anc.state
}

// Args contains the configurations for azurerm_nginx_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NginxDeploymentId: string, required
	NginxDeploymentId terra.StringValue `hcl:"nginx_deployment_id,attr" validate:"required"`
	// PackageData: string, optional
	PackageData terra.StringValue `hcl:"package_data,attr"`
	// RootFile: string, required
	RootFile terra.StringValue `hcl:"root_file,attr" validate:"required"`
	// ConfigFile: min=0
	ConfigFile []ConfigFile `hcl:"config_file,block" validate:"min=0"`
	// ProtectedFile: min=0
	ProtectedFile []ProtectedFile `hcl:"protected_file,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNginxConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_nginx_configuration.
func (anc azurermNginxConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("id"))
}

// NginxDeploymentId returns a reference to field nginx_deployment_id of azurerm_nginx_configuration.
func (anc azurermNginxConfigurationAttributes) NginxDeploymentId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("nginx_deployment_id"))
}

// PackageData returns a reference to field package_data of azurerm_nginx_configuration.
func (anc azurermNginxConfigurationAttributes) PackageData() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("package_data"))
}

// RootFile returns a reference to field root_file of azurerm_nginx_configuration.
func (anc azurermNginxConfigurationAttributes) RootFile() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("root_file"))
}

func (anc azurermNginxConfigurationAttributes) ConfigFile() terra.SetValue[ConfigFileAttributes] {
	return terra.ReferenceAsSet[ConfigFileAttributes](anc.ref.Append("config_file"))
}

func (anc azurermNginxConfigurationAttributes) ProtectedFile() terra.SetValue[ProtectedFileAttributes] {
	return terra.ReferenceAsSet[ProtectedFileAttributes](anc.ref.Append("protected_file"))
}

func (anc azurermNginxConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anc.ref.Append("timeouts"))
}

type azurermNginxConfigurationState struct {
	Id                string               `json:"id"`
	NginxDeploymentId string               `json:"nginx_deployment_id"`
	PackageData       string               `json:"package_data"`
	RootFile          string               `json:"root_file"`
	ConfigFile        []ConfigFileState    `json:"config_file"`
	ProtectedFile     []ProtectedFileState `json:"protected_file"`
	Timeouts          *TimeoutsState       `json:"timeouts"`
}
