// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_traffic_manager_profile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataDnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DataDnsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DataDnsConfigAttributes) InternalWithRef(ref terra.Reference) DataDnsConfigAttributes {
	return DataDnsConfigAttributes{ref: ref}
}

func (dc DataDnsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DataDnsConfigAttributes) RelativeName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("relative_name"))
}

func (dc DataDnsConfigAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("ttl"))
}

type DataMonitorConfigAttributes struct {
	ref terra.Reference
}

func (mc DataMonitorConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc DataMonitorConfigAttributes) InternalWithRef(ref terra.Reference) DataMonitorConfigAttributes {
	return DataMonitorConfigAttributes{ref: ref}
}

func (mc DataMonitorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc DataMonitorConfigAttributes) ExpectedStatusCodeRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("expected_status_code_ranges"))
}

func (mc DataMonitorConfigAttributes) IntervalInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("interval_in_seconds"))
}

func (mc DataMonitorConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("path"))
}

func (mc DataMonitorConfigAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("port"))
}

func (mc DataMonitorConfigAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("protocol"))
}

func (mc DataMonitorConfigAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("timeout_in_seconds"))
}

func (mc DataMonitorConfigAttributes) ToleratedNumberOfFailures() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("tolerated_number_of_failures"))
}

func (mc DataMonitorConfigAttributes) CustomHeader() terra.ListValue[DataMonitorConfigCustomHeaderAttributes] {
	return terra.ReferenceAsList[DataMonitorConfigCustomHeaderAttributes](mc.ref.Append("custom_header"))
}

type DataMonitorConfigCustomHeaderAttributes struct {
	ref terra.Reference
}

func (ch DataMonitorConfigCustomHeaderAttributes) InternalRef() (terra.Reference, error) {
	return ch.ref, nil
}

func (ch DataMonitorConfigCustomHeaderAttributes) InternalWithRef(ref terra.Reference) DataMonitorConfigCustomHeaderAttributes {
	return DataMonitorConfigCustomHeaderAttributes{ref: ref}
}

func (ch DataMonitorConfigCustomHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ch.ref.InternalTokens()
}

func (ch DataMonitorConfigCustomHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("name"))
}

func (ch DataMonitorConfigCustomHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("value"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDnsConfigState struct {
	RelativeName string  `json:"relative_name"`
	Ttl          float64 `json:"ttl"`
}

type DataMonitorConfigState struct {
	ExpectedStatusCodeRanges  []string                             `json:"expected_status_code_ranges"`
	IntervalInSeconds         float64                              `json:"interval_in_seconds"`
	Path                      string                               `json:"path"`
	Port                      float64                              `json:"port"`
	Protocol                  string                               `json:"protocol"`
	TimeoutInSeconds          float64                              `json:"timeout_in_seconds"`
	ToleratedNumberOfFailures float64                              `json:"tolerated_number_of_failures"`
	CustomHeader              []DataMonitorConfigCustomHeaderState `json:"custom_header"`
}

type DataMonitorConfigCustomHeaderState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
