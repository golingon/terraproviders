// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_traffic_manager_profile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DnsConfig struct {
	// RelativeName: string, required
	RelativeName terra.StringValue `hcl:"relative_name,attr" validate:"required"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
}

type MonitorConfig struct {
	// ExpectedStatusCodeRanges: list of string, optional
	ExpectedStatusCodeRanges terra.ListValue[terra.StringValue] `hcl:"expected_status_code_ranges,attr"`
	// IntervalInSeconds: number, optional
	IntervalInSeconds terra.NumberValue `hcl:"interval_in_seconds,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
	// ToleratedNumberOfFailures: number, optional
	ToleratedNumberOfFailures terra.NumberValue `hcl:"tolerated_number_of_failures,attr"`
	// MonitorConfigCustomHeader: min=0
	CustomHeader []MonitorConfigCustomHeader `hcl:"custom_header,block" validate:"min=0"`
}

type MonitorConfigCustomHeader struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DnsConfigAttributes struct {
	ref terra.Reference
}

func (dc DnsConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DnsConfigAttributes) InternalWithRef(ref terra.Reference) DnsConfigAttributes {
	return DnsConfigAttributes{ref: ref}
}

func (dc DnsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DnsConfigAttributes) RelativeName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("relative_name"))
}

func (dc DnsConfigAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("ttl"))
}

type MonitorConfigAttributes struct {
	ref terra.Reference
}

func (mc MonitorConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitorConfigAttributes) InternalWithRef(ref terra.Reference) MonitorConfigAttributes {
	return MonitorConfigAttributes{ref: ref}
}

func (mc MonitorConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitorConfigAttributes) ExpectedStatusCodeRanges() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("expected_status_code_ranges"))
}

func (mc MonitorConfigAttributes) IntervalInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("interval_in_seconds"))
}

func (mc MonitorConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("path"))
}

func (mc MonitorConfigAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("port"))
}

func (mc MonitorConfigAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("protocol"))
}

func (mc MonitorConfigAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("timeout_in_seconds"))
}

func (mc MonitorConfigAttributes) ToleratedNumberOfFailures() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("tolerated_number_of_failures"))
}

func (mc MonitorConfigAttributes) CustomHeader() terra.ListValue[MonitorConfigCustomHeaderAttributes] {
	return terra.ReferenceAsList[MonitorConfigCustomHeaderAttributes](mc.ref.Append("custom_header"))
}

type MonitorConfigCustomHeaderAttributes struct {
	ref terra.Reference
}

func (ch MonitorConfigCustomHeaderAttributes) InternalRef() (terra.Reference, error) {
	return ch.ref, nil
}

func (ch MonitorConfigCustomHeaderAttributes) InternalWithRef(ref terra.Reference) MonitorConfigCustomHeaderAttributes {
	return MonitorConfigCustomHeaderAttributes{ref: ref}
}

func (ch MonitorConfigCustomHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ch.ref.InternalTokens()
}

func (ch MonitorConfigCustomHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("name"))
}

func (ch MonitorConfigCustomHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DnsConfigState struct {
	RelativeName string  `json:"relative_name"`
	Ttl          float64 `json:"ttl"`
}

type MonitorConfigState struct {
	ExpectedStatusCodeRanges  []string                         `json:"expected_status_code_ranges"`
	IntervalInSeconds         float64                          `json:"interval_in_seconds"`
	Path                      string                           `json:"path"`
	Port                      float64                          `json:"port"`
	Protocol                  string                           `json:"protocol"`
	TimeoutInSeconds          float64                          `json:"timeout_in_seconds"`
	ToleratedNumberOfFailures float64                          `json:"tolerated_number_of_failures"`
	CustomHeader              []MonitorConfigCustomHeaderState `json:"custom_header"`
}

type MonitorConfigCustomHeaderState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
