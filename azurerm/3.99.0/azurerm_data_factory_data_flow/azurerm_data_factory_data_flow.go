// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_data_flow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_data_flow.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryDataFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfdf *Resource) Type() string {
	return "azurerm_data_factory_data_flow"
}

// LocalName returns the local name for [Resource].
func (adfdf *Resource) LocalName() string {
	return adfdf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfdf *Resource) Configuration() interface{} {
	return adfdf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfdf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfdf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfdf *Resource) Dependencies() terra.Dependencies {
	return adfdf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfdf *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfdf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfdf *Resource) Attributes() azurermDataFactoryDataFlowAttributes {
	return azurermDataFactoryDataFlowAttributes{ref: terra.ReferenceResource(adfdf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfdf *Resource) ImportState(state io.Reader) error {
	adfdf.state = &azurermDataFactoryDataFlowState{}
	if err := json.NewDecoder(state).Decode(adfdf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfdf.Type(), adfdf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfdf *Resource) State() (*azurermDataFactoryDataFlowState, bool) {
	return adfdf.state, adfdf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfdf *Resource) StateMust() *azurermDataFactoryDataFlowState {
	if adfdf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfdf.Type(), adfdf.LocalName()))
	}
	return adfdf.state
}

// Args contains the configurations for azurerm_data_factory_data_flow.
type Args struct {
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Script: string, optional
	Script terra.StringValue `hcl:"script,attr"`
	// ScriptLines: list of string, optional
	ScriptLines terra.ListValue[terra.StringValue] `hcl:"script_lines,attr"`
	// Sink: min=1
	Sink []Sink `hcl:"sink,block" validate:"min=1"`
	// Source: min=1
	Source []Source `hcl:"source,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Transformation: min=0
	Transformation []Transformation `hcl:"transformation,block" validate:"min=0"`
}

type azurermDataFactoryDataFlowAttributes struct {
	ref terra.Reference
}

// Annotations returns a reference to field annotations of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfdf.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("name"))
}

// Script returns a reference to field script of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) Script() terra.StringValue {
	return terra.ReferenceAsString(adfdf.ref.Append("script"))
}

// ScriptLines returns a reference to field script_lines of azurerm_data_factory_data_flow.
func (adfdf azurermDataFactoryDataFlowAttributes) ScriptLines() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfdf.ref.Append("script_lines"))
}

func (adfdf azurermDataFactoryDataFlowAttributes) Sink() terra.ListValue[SinkAttributes] {
	return terra.ReferenceAsList[SinkAttributes](adfdf.ref.Append("sink"))
}

func (adfdf azurermDataFactoryDataFlowAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](adfdf.ref.Append("source"))
}

func (adfdf azurermDataFactoryDataFlowAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfdf.ref.Append("timeouts"))
}

func (adfdf azurermDataFactoryDataFlowAttributes) Transformation() terra.ListValue[TransformationAttributes] {
	return terra.ReferenceAsList[TransformationAttributes](adfdf.ref.Append("transformation"))
}

type azurermDataFactoryDataFlowState struct {
	Annotations    []string              `json:"annotations"`
	DataFactoryId  string                `json:"data_factory_id"`
	Description    string                `json:"description"`
	Folder         string                `json:"folder"`
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	Script         string                `json:"script"`
	ScriptLines    []string              `json:"script_lines"`
	Sink           []SinkState           `json:"sink"`
	Source         []SourceState         `json:"source"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
	Transformation []TransformationState `json:"transformation"`
}
