// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_certificates

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource azurerm_key_vault_certificates.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (akvc *DataSource) DataSource() string {
	return "azurerm_key_vault_certificates"
}

// LocalName returns the local name for [DataSource].
func (akvc *DataSource) LocalName() string {
	return akvc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (akvc *DataSource) Configuration() interface{} {
	return akvc.Args
}

// Attributes returns the attributes for [DataSource].
func (akvc *DataSource) Attributes() dataAzurermKeyVaultCertificatesAttributes {
	return dataAzurermKeyVaultCertificatesAttributes{ref: terra.ReferenceDataSource(akvc)}
}

// DataArgs contains the configurations for azurerm_key_vault_certificates.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludePending: bool, optional
	IncludePending terra.BoolValue `hcl:"include_pending,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAzurermKeyVaultCertificatesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_key_vault_certificates.
func (akvc dataAzurermKeyVaultCertificatesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("id"))
}

// IncludePending returns a reference to field include_pending of azurerm_key_vault_certificates.
func (akvc dataAzurermKeyVaultCertificatesAttributes) IncludePending() terra.BoolValue {
	return terra.ReferenceAsBool(akvc.ref.Append("include_pending"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_key_vault_certificates.
func (akvc dataAzurermKeyVaultCertificatesAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvc.ref.Append("key_vault_id"))
}

// Names returns a reference to field names of azurerm_key_vault_certificates.
func (akvc dataAzurermKeyVaultCertificatesAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvc.ref.Append("names"))
}

func (akvc dataAzurermKeyVaultCertificatesAttributes) Certificates() terra.ListValue[DataCertificatesAttributes] {
	return terra.ReferenceAsList[DataCertificatesAttributes](akvc.ref.Append("certificates"))
}

func (akvc dataAzurermKeyVaultCertificatesAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](akvc.ref.Append("timeouts"))
}
