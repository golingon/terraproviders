// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_api_portal

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_api_portal.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudApiPortalState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascap *Resource) Type() string {
	return "azurerm_spring_cloud_api_portal"
}

// LocalName returns the local name for [Resource].
func (ascap *Resource) LocalName() string {
	return ascap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascap *Resource) Configuration() interface{} {
	return ascap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascap *Resource) Dependencies() terra.Dependencies {
	return ascap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascap *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascap *Resource) Attributes() azurermSpringCloudApiPortalAttributes {
	return azurermSpringCloudApiPortalAttributes{ref: terra.ReferenceResource(ascap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascap *Resource) ImportState(state io.Reader) error {
	ascap.state = &azurermSpringCloudApiPortalState{}
	if err := json.NewDecoder(state).Decode(ascap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascap.Type(), ascap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascap *Resource) State() (*azurermSpringCloudApiPortalState, bool) {
	return ascap.state, ascap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascap *Resource) StateMust() *azurermSpringCloudApiPortalState {
	if ascap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascap.Type(), ascap.LocalName()))
	}
	return ascap.state
}

// Args contains the configurations for azurerm_spring_cloud_api_portal.
type Args struct {
	// ApiTryOutEnabled: bool, optional
	ApiTryOutEnabled terra.BoolValue `hcl:"api_try_out_enabled,attr"`
	// GatewayIds: set of string, optional
	GatewayIds terra.SetValue[terra.StringValue] `hcl:"gateway_ids,attr"`
	// HttpsOnlyEnabled: bool, optional
	HttpsOnlyEnabled terra.BoolValue `hcl:"https_only_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Sso: optional
	Sso *Sso `hcl:"sso,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudApiPortalAttributes struct {
	ref terra.Reference
}

// ApiTryOutEnabled returns a reference to field api_try_out_enabled of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) ApiTryOutEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascap.ref.Append("api_try_out_enabled"))
}

// GatewayIds returns a reference to field gateway_ids of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) GatewayIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ascap.ref.Append("gateway_ids"))
}

// HttpsOnlyEnabled returns a reference to field https_only_enabled of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) HttpsOnlyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascap.ref.Append("https_only_enabled"))
}

// Id returns a reference to field id of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascap.ref.Append("id"))
}

// InstanceCount returns a reference to field instance_count of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ascap.ref.Append("instance_count"))
}

// Name returns a reference to field name of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascap.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascap.ref.Append("public_network_access_enabled"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(ascap.ref.Append("spring_cloud_service_id"))
}

// Url returns a reference to field url of azurerm_spring_cloud_api_portal.
func (ascap azurermSpringCloudApiPortalAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ascap.ref.Append("url"))
}

func (ascap azurermSpringCloudApiPortalAttributes) Sso() terra.ListValue[SsoAttributes] {
	return terra.ReferenceAsList[SsoAttributes](ascap.ref.Append("sso"))
}

func (ascap azurermSpringCloudApiPortalAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascap.ref.Append("timeouts"))
}

type azurermSpringCloudApiPortalState struct {
	ApiTryOutEnabled           bool           `json:"api_try_out_enabled"`
	GatewayIds                 []string       `json:"gateway_ids"`
	HttpsOnlyEnabled           bool           `json:"https_only_enabled"`
	Id                         string         `json:"id"`
	InstanceCount              float64        `json:"instance_count"`
	Name                       string         `json:"name"`
	PublicNetworkAccessEnabled bool           `json:"public_network_access_enabled"`
	SpringCloudServiceId       string         `json:"spring_cloud_service_id"`
	Url                        string         `json:"url"`
	Sso                        []SsoState     `json:"sso"`
	Timeouts                   *TimeoutsState `json:"timeouts"`
}
