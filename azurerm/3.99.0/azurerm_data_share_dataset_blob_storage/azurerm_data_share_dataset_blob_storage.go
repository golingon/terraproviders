// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_share_dataset_blob_storage

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_share_dataset_blob_storage.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataShareDatasetBlobStorageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adsdbs *Resource) Type() string {
	return "azurerm_data_share_dataset_blob_storage"
}

// LocalName returns the local name for [Resource].
func (adsdbs *Resource) LocalName() string {
	return adsdbs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adsdbs *Resource) Configuration() interface{} {
	return adsdbs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adsdbs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adsdbs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adsdbs *Resource) Dependencies() terra.Dependencies {
	return adsdbs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adsdbs *Resource) LifecycleManagement() *terra.Lifecycle {
	return adsdbs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adsdbs *Resource) Attributes() azurermDataShareDatasetBlobStorageAttributes {
	return azurermDataShareDatasetBlobStorageAttributes{ref: terra.ReferenceResource(adsdbs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adsdbs *Resource) ImportState(state io.Reader) error {
	adsdbs.state = &azurermDataShareDatasetBlobStorageState{}
	if err := json.NewDecoder(state).Decode(adsdbs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adsdbs.Type(), adsdbs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adsdbs *Resource) State() (*azurermDataShareDatasetBlobStorageState, bool) {
	return adsdbs.state, adsdbs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adsdbs *Resource) StateMust() *azurermDataShareDatasetBlobStorageState {
	if adsdbs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adsdbs.Type(), adsdbs.LocalName()))
	}
	return adsdbs.state
}

// Args contains the configurations for azurerm_data_share_dataset_blob_storage.
type Args struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// DataShareId: string, required
	DataShareId terra.StringValue `hcl:"data_share_id,attr" validate:"required"`
	// FilePath: string, optional
	FilePath terra.StringValue `hcl:"file_path,attr"`
	// FolderPath: string, optional
	FolderPath terra.StringValue `hcl:"folder_path,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccount: required
	StorageAccount *StorageAccount `hcl:"storage_account,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataShareDatasetBlobStorageAttributes struct {
	ref terra.Reference
}

// ContainerName returns a reference to field container_name of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("container_name"))
}

// DataShareId returns a reference to field data_share_id of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) DataShareId() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("data_share_id"))
}

// DisplayName returns a reference to field display_name of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("display_name"))
}

// FilePath returns a reference to field file_path of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) FilePath() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("file_path"))
}

// FolderPath returns a reference to field folder_path of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) FolderPath() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("folder_path"))
}

// Id returns a reference to field id of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_share_dataset_blob_storage.
func (adsdbs azurermDataShareDatasetBlobStorageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adsdbs.ref.Append("name"))
}

func (adsdbs azurermDataShareDatasetBlobStorageAttributes) StorageAccount() terra.ListValue[StorageAccountAttributes] {
	return terra.ReferenceAsList[StorageAccountAttributes](adsdbs.ref.Append("storage_account"))
}

func (adsdbs azurermDataShareDatasetBlobStorageAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adsdbs.ref.Append("timeouts"))
}

type azurermDataShareDatasetBlobStorageState struct {
	ContainerName  string                `json:"container_name"`
	DataShareId    string                `json:"data_share_id"`
	DisplayName    string                `json:"display_name"`
	FilePath       string                `json:"file_path"`
	FolderPath     string                `json:"folder_path"`
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	StorageAccount []StorageAccountState `json:"storage_account"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
