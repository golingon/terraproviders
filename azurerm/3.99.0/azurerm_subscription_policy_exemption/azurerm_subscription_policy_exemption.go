// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_subscription_policy_exemption

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_subscription_policy_exemption.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSubscriptionPolicyExemptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspe *Resource) Type() string {
	return "azurerm_subscription_policy_exemption"
}

// LocalName returns the local name for [Resource].
func (aspe *Resource) LocalName() string {
	return aspe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspe *Resource) Configuration() interface{} {
	return aspe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspe *Resource) Dependencies() terra.Dependencies {
	return aspe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspe *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspe *Resource) Attributes() azurermSubscriptionPolicyExemptionAttributes {
	return azurermSubscriptionPolicyExemptionAttributes{ref: terra.ReferenceResource(aspe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspe *Resource) ImportState(state io.Reader) error {
	aspe.state = &azurermSubscriptionPolicyExemptionState{}
	if err := json.NewDecoder(state).Decode(aspe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspe.Type(), aspe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspe *Resource) State() (*azurermSubscriptionPolicyExemptionState, bool) {
	return aspe.state, aspe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspe *Resource) StateMust() *azurermSubscriptionPolicyExemptionState {
	if aspe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspe.Type(), aspe.LocalName()))
	}
	return aspe.state
}

// Args contains the configurations for azurerm_subscription_policy_exemption.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// ExemptionCategory: string, required
	ExemptionCategory terra.StringValue `hcl:"exemption_category,attr" validate:"required"`
	// ExpiresOn: string, optional
	ExpiresOn terra.StringValue `hcl:"expires_on,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyAssignmentId: string, required
	PolicyAssignmentId terra.StringValue `hcl:"policy_assignment_id,attr" validate:"required"`
	// PolicyDefinitionReferenceIds: list of string, optional
	PolicyDefinitionReferenceIds terra.ListValue[terra.StringValue] `hcl:"policy_definition_reference_ids,attr"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSubscriptionPolicyExemptionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("display_name"))
}

// ExemptionCategory returns a reference to field exemption_category of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) ExemptionCategory() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("exemption_category"))
}

// ExpiresOn returns a reference to field expires_on of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) ExpiresOn() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("expires_on"))
}

// Id returns a reference to field id of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) Metadata() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("name"))
}

// PolicyAssignmentId returns a reference to field policy_assignment_id of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) PolicyAssignmentId() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("policy_assignment_id"))
}

// PolicyDefinitionReferenceIds returns a reference to field policy_definition_reference_ids of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) PolicyDefinitionReferenceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aspe.ref.Append("policy_definition_reference_ids"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_subscription_policy_exemption.
func (aspe azurermSubscriptionPolicyExemptionAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("subscription_id"))
}

func (aspe azurermSubscriptionPolicyExemptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aspe.ref.Append("timeouts"))
}

type azurermSubscriptionPolicyExemptionState struct {
	Description                  string         `json:"description"`
	DisplayName                  string         `json:"display_name"`
	ExemptionCategory            string         `json:"exemption_category"`
	ExpiresOn                    string         `json:"expires_on"`
	Id                           string         `json:"id"`
	Metadata                     string         `json:"metadata"`
	Name                         string         `json:"name"`
	PolicyAssignmentId           string         `json:"policy_assignment_id"`
	PolicyDefinitionReferenceIds []string       `json:"policy_definition_reference_ids"`
	SubscriptionId               string         `json:"subscription_id"`
	Timeouts                     *TimeoutsState `json:"timeouts"`
}
