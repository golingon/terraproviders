// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_healthcare_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_healthcare_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHealthcareServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahs *Resource) Type() string {
	return "azurerm_healthcare_service"
}

// LocalName returns the local name for [Resource].
func (ahs *Resource) LocalName() string {
	return ahs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahs *Resource) Configuration() interface{} {
	return ahs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahs *Resource) Dependencies() terra.Dependencies {
	return ahs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahs *Resource) Attributes() azurermHealthcareServiceAttributes {
	return azurermHealthcareServiceAttributes{ref: terra.ReferenceResource(ahs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahs *Resource) ImportState(state io.Reader) error {
	ahs.state = &azurermHealthcareServiceState{}
	if err := json.NewDecoder(state).Decode(ahs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahs.Type(), ahs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahs *Resource) State() (*azurermHealthcareServiceState, bool) {
	return ahs.state, ahs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahs *Resource) StateMust() *azurermHealthcareServiceState {
	if ahs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahs.Type(), ahs.LocalName()))
	}
	return ahs.state
}

// Args contains the configurations for azurerm_healthcare_service.
type Args struct {
	// AccessPolicyObjectIds: set of string, optional
	AccessPolicyObjectIds terra.SetValue[terra.StringValue] `hcl:"access_policy_object_ids,attr"`
	// ConfigurationExportStorageAccountName: string, optional
	ConfigurationExportStorageAccountName terra.StringValue `hcl:"configuration_export_storage_account_name,attr"`
	// CosmosdbKeyVaultKeyVersionlessId: string, optional
	CosmosdbKeyVaultKeyVersionlessId terra.StringValue `hcl:"cosmosdb_key_vault_key_versionless_id,attr"`
	// CosmosdbThroughput: number, optional
	CosmosdbThroughput terra.NumberValue `hcl:"cosmosdb_throughput,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AuthenticationConfiguration: optional
	AuthenticationConfiguration *AuthenticationConfiguration `hcl:"authentication_configuration,block"`
	// CorsConfiguration: optional
	CorsConfiguration *CorsConfiguration `hcl:"cors_configuration,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHealthcareServiceAttributes struct {
	ref terra.Reference
}

// AccessPolicyObjectIds returns a reference to field access_policy_object_ids of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) AccessPolicyObjectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ahs.ref.Append("access_policy_object_ids"))
}

// ConfigurationExportStorageAccountName returns a reference to field configuration_export_storage_account_name of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) ConfigurationExportStorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("configuration_export_storage_account_name"))
}

// CosmosdbKeyVaultKeyVersionlessId returns a reference to field cosmosdb_key_vault_key_versionless_id of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) CosmosdbKeyVaultKeyVersionlessId() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("cosmosdb_key_vault_key_versionless_id"))
}

// CosmosdbThroughput returns a reference to field cosmosdb_throughput of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) CosmosdbThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ahs.ref.Append("cosmosdb_throughput"))
}

// Id returns a reference to field id of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("id"))
}

// Kind returns a reference to field kind of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ahs.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ahs.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_healthcare_service.
func (ahs azurermHealthcareServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ahs.ref.Append("tags"))
}

func (ahs azurermHealthcareServiceAttributes) AuthenticationConfiguration() terra.ListValue[AuthenticationConfigurationAttributes] {
	return terra.ReferenceAsList[AuthenticationConfigurationAttributes](ahs.ref.Append("authentication_configuration"))
}

func (ahs azurermHealthcareServiceAttributes) CorsConfiguration() terra.ListValue[CorsConfigurationAttributes] {
	return terra.ReferenceAsList[CorsConfigurationAttributes](ahs.ref.Append("cors_configuration"))
}

func (ahs azurermHealthcareServiceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ahs.ref.Append("identity"))
}

func (ahs azurermHealthcareServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahs.ref.Append("timeouts"))
}

type azurermHealthcareServiceState struct {
	AccessPolicyObjectIds                 []string                           `json:"access_policy_object_ids"`
	ConfigurationExportStorageAccountName string                             `json:"configuration_export_storage_account_name"`
	CosmosdbKeyVaultKeyVersionlessId      string                             `json:"cosmosdb_key_vault_key_versionless_id"`
	CosmosdbThroughput                    float64                            `json:"cosmosdb_throughput"`
	Id                                    string                             `json:"id"`
	Kind                                  string                             `json:"kind"`
	Location                              string                             `json:"location"`
	Name                                  string                             `json:"name"`
	PublicNetworkAccessEnabled            bool                               `json:"public_network_access_enabled"`
	ResourceGroupName                     string                             `json:"resource_group_name"`
	Tags                                  map[string]string                  `json:"tags"`
	AuthenticationConfiguration           []AuthenticationConfigurationState `json:"authentication_configuration"`
	CorsConfiguration                     []CorsConfigurationState           `json:"cors_configuration"`
	Identity                              []IdentityState                    `json:"identity"`
	Timeouts                              *TimeoutsState                     `json:"timeouts"`
}
