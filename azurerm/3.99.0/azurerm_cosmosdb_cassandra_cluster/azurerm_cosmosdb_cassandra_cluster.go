// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cosmosdb_cassandra_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cosmosdb_cassandra_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCosmosdbCassandraClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accc *Resource) Type() string {
	return "azurerm_cosmosdb_cassandra_cluster"
}

// LocalName returns the local name for [Resource].
func (accc *Resource) LocalName() string {
	return accc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accc *Resource) Configuration() interface{} {
	return accc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accc *Resource) Dependencies() terra.Dependencies {
	return accc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accc *Resource) LifecycleManagement() *terra.Lifecycle {
	return accc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accc *Resource) Attributes() azurermCosmosdbCassandraClusterAttributes {
	return azurermCosmosdbCassandraClusterAttributes{ref: terra.ReferenceResource(accc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accc *Resource) ImportState(state io.Reader) error {
	accc.state = &azurermCosmosdbCassandraClusterState{}
	if err := json.NewDecoder(state).Decode(accc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accc.Type(), accc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accc *Resource) State() (*azurermCosmosdbCassandraClusterState, bool) {
	return accc.state, accc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accc *Resource) StateMust() *azurermCosmosdbCassandraClusterState {
	if accc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accc.Type(), accc.LocalName()))
	}
	return accc.state
}

// Args contains the configurations for azurerm_cosmosdb_cassandra_cluster.
type Args struct {
	// AuthenticationMethod: string, optional
	AuthenticationMethod terra.StringValue `hcl:"authentication_method,attr"`
	// ClientCertificatePems: list of string, optional
	ClientCertificatePems terra.ListValue[terra.StringValue] `hcl:"client_certificate_pems,attr"`
	// DefaultAdminPassword: string, required
	DefaultAdminPassword terra.StringValue `hcl:"default_admin_password,attr" validate:"required"`
	// DelegatedManagementSubnetId: string, required
	DelegatedManagementSubnetId terra.StringValue `hcl:"delegated_management_subnet_id,attr" validate:"required"`
	// ExternalGossipCertificatePems: list of string, optional
	ExternalGossipCertificatePems terra.ListValue[terra.StringValue] `hcl:"external_gossip_certificate_pems,attr"`
	// ExternalSeedNodeIpAddresses: list of string, optional
	ExternalSeedNodeIpAddresses terra.ListValue[terra.StringValue] `hcl:"external_seed_node_ip_addresses,attr"`
	// HoursBetweenBackups: number, optional
	HoursBetweenBackups terra.NumberValue `hcl:"hours_between_backups,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RepairEnabled: bool, optional
	RepairEnabled terra.BoolValue `hcl:"repair_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCosmosdbCassandraClusterAttributes struct {
	ref terra.Reference
}

// AuthenticationMethod returns a reference to field authentication_method of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) AuthenticationMethod() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("authentication_method"))
}

// ClientCertificatePems returns a reference to field client_certificate_pems of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) ClientCertificatePems() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](accc.ref.Append("client_certificate_pems"))
}

// DefaultAdminPassword returns a reference to field default_admin_password of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) DefaultAdminPassword() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("default_admin_password"))
}

// DelegatedManagementSubnetId returns a reference to field delegated_management_subnet_id of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) DelegatedManagementSubnetId() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("delegated_management_subnet_id"))
}

// ExternalGossipCertificatePems returns a reference to field external_gossip_certificate_pems of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) ExternalGossipCertificatePems() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](accc.ref.Append("external_gossip_certificate_pems"))
}

// ExternalSeedNodeIpAddresses returns a reference to field external_seed_node_ip_addresses of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) ExternalSeedNodeIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](accc.ref.Append("external_seed_node_ip_addresses"))
}

// HoursBetweenBackups returns a reference to field hours_between_backups of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) HoursBetweenBackups() terra.NumberValue {
	return terra.ReferenceAsNumber(accc.ref.Append("hours_between_backups"))
}

// Id returns a reference to field id of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("name"))
}

// RepairEnabled returns a reference to field repair_enabled of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) RepairEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(accc.ref.Append("repair_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accc.ref.Append("tags"))
}

// Version returns a reference to field version of azurerm_cosmosdb_cassandra_cluster.
func (accc azurermCosmosdbCassandraClusterAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("version"))
}

func (accc azurermCosmosdbCassandraClusterAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](accc.ref.Append("identity"))
}

func (accc azurermCosmosdbCassandraClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](accc.ref.Append("timeouts"))
}

type azurermCosmosdbCassandraClusterState struct {
	AuthenticationMethod          string            `json:"authentication_method"`
	ClientCertificatePems         []string          `json:"client_certificate_pems"`
	DefaultAdminPassword          string            `json:"default_admin_password"`
	DelegatedManagementSubnetId   string            `json:"delegated_management_subnet_id"`
	ExternalGossipCertificatePems []string          `json:"external_gossip_certificate_pems"`
	ExternalSeedNodeIpAddresses   []string          `json:"external_seed_node_ip_addresses"`
	HoursBetweenBackups           float64           `json:"hours_between_backups"`
	Id                            string            `json:"id"`
	Location                      string            `json:"location"`
	Name                          string            `json:"name"`
	RepairEnabled                 bool              `json:"repair_enabled"`
	ResourceGroupName             string            `json:"resource_group_name"`
	Tags                          map[string]string `json:"tags"`
	Version                       string            `json:"version"`
	Identity                      []IdentityState   `json:"identity"`
	Timeouts                      *TimeoutsState    `json:"timeouts"`
}
