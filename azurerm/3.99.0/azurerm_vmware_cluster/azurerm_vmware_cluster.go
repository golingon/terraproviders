// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_vmware_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_vmware_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVmwareClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avc *Resource) Type() string {
	return "azurerm_vmware_cluster"
}

// LocalName returns the local name for [Resource].
func (avc *Resource) LocalName() string {
	return avc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avc *Resource) Configuration() interface{} {
	return avc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avc *Resource) Dependencies() terra.Dependencies {
	return avc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avc *Resource) LifecycleManagement() *terra.Lifecycle {
	return avc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avc *Resource) Attributes() azurermVmwareClusterAttributes {
	return azurermVmwareClusterAttributes{ref: terra.ReferenceResource(avc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avc *Resource) ImportState(state io.Reader) error {
	avc.state = &azurermVmwareClusterState{}
	if err := json.NewDecoder(state).Decode(avc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avc.Type(), avc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avc *Resource) State() (*azurermVmwareClusterState, bool) {
	return avc.state, avc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avc *Resource) StateMust() *azurermVmwareClusterState {
	if avc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avc.Type(), avc.LocalName()))
	}
	return avc.state
}

// Args contains the configurations for azurerm_vmware_cluster.
type Args struct {
	// ClusterNodeCount: number, required
	ClusterNodeCount terra.NumberValue `hcl:"cluster_node_count,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// VmwareCloudId: string, required
	VmwareCloudId terra.StringValue `hcl:"vmware_cloud_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVmwareClusterAttributes struct {
	ref terra.Reference
}

// ClusterNodeCount returns a reference to field cluster_node_count of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) ClusterNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(avc.ref.Append("cluster_node_count"))
}

// ClusterNumber returns a reference to field cluster_number of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) ClusterNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(avc.ref.Append("cluster_number"))
}

// Hosts returns a reference to field hosts of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avc.ref.Append("hosts"))
}

// Id returns a reference to field id of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("name"))
}

// SkuName returns a reference to field sku_name of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("sku_name"))
}

// VmwareCloudId returns a reference to field vmware_cloud_id of azurerm_vmware_cluster.
func (avc azurermVmwareClusterAttributes) VmwareCloudId() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("vmware_cloud_id"))
}

func (avc azurermVmwareClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avc.ref.Append("timeouts"))
}

type azurermVmwareClusterState struct {
	ClusterNodeCount float64        `json:"cluster_node_count"`
	ClusterNumber    float64        `json:"cluster_number"`
	Hosts            []string       `json:"hosts"`
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	SkuName          string         `json:"sku_name"`
	VmwareCloudId    string         `json:"vmware_cloud_id"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
