// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_wan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_wan.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualWanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avw *Resource) Type() string {
	return "azurerm_virtual_wan"
}

// LocalName returns the local name for [Resource].
func (avw *Resource) LocalName() string {
	return avw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avw *Resource) Configuration() interface{} {
	return avw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avw *Resource) Dependencies() terra.Dependencies {
	return avw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avw *Resource) LifecycleManagement() *terra.Lifecycle {
	return avw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avw *Resource) Attributes() azurermVirtualWanAttributes {
	return azurermVirtualWanAttributes{ref: terra.ReferenceResource(avw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avw *Resource) ImportState(state io.Reader) error {
	avw.state = &azurermVirtualWanState{}
	if err := json.NewDecoder(state).Decode(avw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avw.Type(), avw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avw *Resource) State() (*azurermVirtualWanState, bool) {
	return avw.state, avw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avw *Resource) StateMust() *azurermVirtualWanState {
	if avw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avw.Type(), avw.LocalName()))
	}
	return avw.state
}

// Args contains the configurations for azurerm_virtual_wan.
type Args struct {
	// AllowBranchToBranchTraffic: bool, optional
	AllowBranchToBranchTraffic terra.BoolValue `hcl:"allow_branch_to_branch_traffic,attr"`
	// DisableVpnEncryption: bool, optional
	DisableVpnEncryption terra.BoolValue `hcl:"disable_vpn_encryption,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Office365LocalBreakoutCategory: string, optional
	Office365LocalBreakoutCategory terra.StringValue `hcl:"office365_local_breakout_category,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualWanAttributes struct {
	ref terra.Reference
}

// AllowBranchToBranchTraffic returns a reference to field allow_branch_to_branch_traffic of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) AllowBranchToBranchTraffic() terra.BoolValue {
	return terra.ReferenceAsBool(avw.ref.Append("allow_branch_to_branch_traffic"))
}

// DisableVpnEncryption returns a reference to field disable_vpn_encryption of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) DisableVpnEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(avw.ref.Append("disable_vpn_encryption"))
}

// Id returns a reference to field id of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("name"))
}

// Office365LocalBreakoutCategory returns a reference to field office365_local_breakout_category of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Office365LocalBreakoutCategory() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("office365_local_breakout_category"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avw.ref.Append("tags"))
}

// Type returns a reference to field type of azurerm_virtual_wan.
func (avw azurermVirtualWanAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(avw.ref.Append("type"))
}

func (avw azurermVirtualWanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avw.ref.Append("timeouts"))
}

type azurermVirtualWanState struct {
	AllowBranchToBranchTraffic     bool              `json:"allow_branch_to_branch_traffic"`
	DisableVpnEncryption           bool              `json:"disable_vpn_encryption"`
	Id                             string            `json:"id"`
	Location                       string            `json:"location"`
	Name                           string            `json:"name"`
	Office365LocalBreakoutCategory string            `json:"office365_local_breakout_category"`
	ResourceGroupName              string            `json:"resource_group_name"`
	Tags                           map[string]string `json:"tags"`
	Type                           string            `json:"type"`
	Timeouts                       *TimeoutsState    `json:"timeouts"`
}
