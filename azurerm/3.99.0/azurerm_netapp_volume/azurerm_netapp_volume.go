// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_netapp_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetappVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anv *Resource) Type() string {
	return "azurerm_netapp_volume"
}

// LocalName returns the local name for [Resource].
func (anv *Resource) LocalName() string {
	return anv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anv *Resource) Configuration() interface{} {
	return anv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anv *Resource) Dependencies() terra.Dependencies {
	return anv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anv *Resource) LifecycleManagement() *terra.Lifecycle {
	return anv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anv *Resource) Attributes() azurermNetappVolumeAttributes {
	return azurermNetappVolumeAttributes{ref: terra.ReferenceResource(anv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anv *Resource) ImportState(state io.Reader) error {
	anv.state = &azurermNetappVolumeState{}
	if err := json.NewDecoder(state).Decode(anv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anv.Type(), anv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anv *Resource) State() (*azurermNetappVolumeState, bool) {
	return anv.state, anv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anv *Resource) StateMust() *azurermNetappVolumeState {
	if anv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anv.Type(), anv.LocalName()))
	}
	return anv.state
}

// Args contains the configurations for azurerm_netapp_volume.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// AzureVmwareDataStoreEnabled: bool, optional
	AzureVmwareDataStoreEnabled terra.BoolValue `hcl:"azure_vmware_data_store_enabled,attr"`
	// CreateFromSnapshotResourceId: string, optional
	CreateFromSnapshotResourceId terra.StringValue `hcl:"create_from_snapshot_resource_id,attr"`
	// EncryptionKeySource: string, optional
	EncryptionKeySource terra.StringValue `hcl:"encryption_key_source,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KerberosEnabled: bool, optional
	KerberosEnabled terra.BoolValue `hcl:"kerberos_enabled,attr"`
	// KeyVaultPrivateEndpointId: string, optional
	KeyVaultPrivateEndpointId terra.StringValue `hcl:"key_vault_private_endpoint_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkFeatures: string, optional
	NetworkFeatures terra.StringValue `hcl:"network_features,attr"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// Protocols: set of string, optional
	Protocols terra.SetValue[terra.StringValue] `hcl:"protocols,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// ServiceLevel: string, required
	ServiceLevel terra.StringValue `hcl:"service_level,attr" validate:"required"`
	// SmbAccessBasedEnumerationEnabled: bool, optional
	SmbAccessBasedEnumerationEnabled terra.BoolValue `hcl:"smb_access_based_enumeration_enabled,attr"`
	// SmbContinuousAvailabilityEnabled: bool, optional
	SmbContinuousAvailabilityEnabled terra.BoolValue `hcl:"smb_continuous_availability_enabled,attr"`
	// SmbNonBrowsableEnabled: bool, optional
	SmbNonBrowsableEnabled terra.BoolValue `hcl:"smb_non_browsable_enabled,attr"`
	// SnapshotDirectoryVisible: bool, optional
	SnapshotDirectoryVisible terra.BoolValue `hcl:"snapshot_directory_visible,attr"`
	// StorageQuotaInGb: number, required
	StorageQuotaInGb terra.NumberValue `hcl:"storage_quota_in_gb,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ThroughputInMibps: number, optional
	ThroughputInMibps terra.NumberValue `hcl:"throughput_in_mibps,attr"`
	// VolumePath: string, required
	VolumePath terra.StringValue `hcl:"volume_path,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// DataProtectionReplication: optional
	DataProtectionReplication *DataProtectionReplication `hcl:"data_protection_replication,block"`
	// DataProtectionSnapshotPolicy: optional
	DataProtectionSnapshotPolicy *DataProtectionSnapshotPolicy `hcl:"data_protection_snapshot_policy,block"`
	// ExportPolicyRule: min=0,max=5
	ExportPolicyRule []ExportPolicyRule `hcl:"export_policy_rule,block" validate:"min=0,max=5"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetappVolumeAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("account_name"))
}

// AzureVmwareDataStoreEnabled returns a reference to field azure_vmware_data_store_enabled of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) AzureVmwareDataStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("azure_vmware_data_store_enabled"))
}

// CreateFromSnapshotResourceId returns a reference to field create_from_snapshot_resource_id of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) CreateFromSnapshotResourceId() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("create_from_snapshot_resource_id"))
}

// EncryptionKeySource returns a reference to field encryption_key_source of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) EncryptionKeySource() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("encryption_key_source"))
}

// Id returns a reference to field id of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("id"))
}

// KerberosEnabled returns a reference to field kerberos_enabled of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) KerberosEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("kerberos_enabled"))
}

// KeyVaultPrivateEndpointId returns a reference to field key_vault_private_endpoint_id of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) KeyVaultPrivateEndpointId() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("key_vault_private_endpoint_id"))
}

// Location returns a reference to field location of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("location"))
}

// MountIpAddresses returns a reference to field mount_ip_addresses of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) MountIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](anv.ref.Append("mount_ip_addresses"))
}

// Name returns a reference to field name of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("name"))
}

// NetworkFeatures returns a reference to field network_features of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) NetworkFeatures() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("network_features"))
}

// PoolName returns a reference to field pool_name of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) PoolName() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("pool_name"))
}

// Protocols returns a reference to field protocols of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Protocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](anv.ref.Append("protocols"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("resource_group_name"))
}

// SecurityStyle returns a reference to field security_style of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("security_style"))
}

// ServiceLevel returns a reference to field service_level of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) ServiceLevel() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("service_level"))
}

// SmbAccessBasedEnumerationEnabled returns a reference to field smb_access_based_enumeration_enabled of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SmbAccessBasedEnumerationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("smb_access_based_enumeration_enabled"))
}

// SmbContinuousAvailabilityEnabled returns a reference to field smb_continuous_availability_enabled of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SmbContinuousAvailabilityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("smb_continuous_availability_enabled"))
}

// SmbNonBrowsableEnabled returns a reference to field smb_non_browsable_enabled of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SmbNonBrowsableEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("smb_non_browsable_enabled"))
}

// SnapshotDirectoryVisible returns a reference to field snapshot_directory_visible of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SnapshotDirectoryVisible() terra.BoolValue {
	return terra.ReferenceAsBool(anv.ref.Append("snapshot_directory_visible"))
}

// StorageQuotaInGb returns a reference to field storage_quota_in_gb of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) StorageQuotaInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(anv.ref.Append("storage_quota_in_gb"))
}

// SubnetId returns a reference to field subnet_id of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anv.ref.Append("tags"))
}

// ThroughputInMibps returns a reference to field throughput_in_mibps of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) ThroughputInMibps() terra.NumberValue {
	return terra.ReferenceAsNumber(anv.ref.Append("throughput_in_mibps"))
}

// VolumePath returns a reference to field volume_path of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) VolumePath() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("volume_path"))
}

// Zone returns a reference to field zone of azurerm_netapp_volume.
func (anv azurermNetappVolumeAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(anv.ref.Append("zone"))
}

func (anv azurermNetappVolumeAttributes) DataProtectionReplication() terra.ListValue[DataProtectionReplicationAttributes] {
	return terra.ReferenceAsList[DataProtectionReplicationAttributes](anv.ref.Append("data_protection_replication"))
}

func (anv azurermNetappVolumeAttributes) DataProtectionSnapshotPolicy() terra.ListValue[DataProtectionSnapshotPolicyAttributes] {
	return terra.ReferenceAsList[DataProtectionSnapshotPolicyAttributes](anv.ref.Append("data_protection_snapshot_policy"))
}

func (anv azurermNetappVolumeAttributes) ExportPolicyRule() terra.ListValue[ExportPolicyRuleAttributes] {
	return terra.ReferenceAsList[ExportPolicyRuleAttributes](anv.ref.Append("export_policy_rule"))
}

func (anv azurermNetappVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anv.ref.Append("timeouts"))
}

type azurermNetappVolumeState struct {
	AccountName                      string                              `json:"account_name"`
	AzureVmwareDataStoreEnabled      bool                                `json:"azure_vmware_data_store_enabled"`
	CreateFromSnapshotResourceId     string                              `json:"create_from_snapshot_resource_id"`
	EncryptionKeySource              string                              `json:"encryption_key_source"`
	Id                               string                              `json:"id"`
	KerberosEnabled                  bool                                `json:"kerberos_enabled"`
	KeyVaultPrivateEndpointId        string                              `json:"key_vault_private_endpoint_id"`
	Location                         string                              `json:"location"`
	MountIpAddresses                 []string                            `json:"mount_ip_addresses"`
	Name                             string                              `json:"name"`
	NetworkFeatures                  string                              `json:"network_features"`
	PoolName                         string                              `json:"pool_name"`
	Protocols                        []string                            `json:"protocols"`
	ResourceGroupName                string                              `json:"resource_group_name"`
	SecurityStyle                    string                              `json:"security_style"`
	ServiceLevel                     string                              `json:"service_level"`
	SmbAccessBasedEnumerationEnabled bool                                `json:"smb_access_based_enumeration_enabled"`
	SmbContinuousAvailabilityEnabled bool                                `json:"smb_continuous_availability_enabled"`
	SmbNonBrowsableEnabled           bool                                `json:"smb_non_browsable_enabled"`
	SnapshotDirectoryVisible         bool                                `json:"snapshot_directory_visible"`
	StorageQuotaInGb                 float64                             `json:"storage_quota_in_gb"`
	SubnetId                         string                              `json:"subnet_id"`
	Tags                             map[string]string                   `json:"tags"`
	ThroughputInMibps                float64                             `json:"throughput_in_mibps"`
	VolumePath                       string                              `json:"volume_path"`
	Zone                             string                              `json:"zone"`
	DataProtectionReplication        []DataProtectionReplicationState    `json:"data_protection_replication"`
	DataProtectionSnapshotPolicy     []DataProtectionSnapshotPolicyState `json:"data_protection_snapshot_policy"`
	ExportPolicyRule                 []ExportPolicyRuleState             `json:"export_policy_rule"`
	Timeouts                         *TimeoutsState                      `json:"timeouts"`
}
