// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_shared_image_versions

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataImagesAttributes struct {
	ref terra.Reference
}

func (i DataImagesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataImagesAttributes) InternalWithRef(ref terra.Reference) DataImagesAttributes {
	return DataImagesAttributes{ref: ref}
}

func (i DataImagesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataImagesAttributes) ExcludeFromLatest() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("exclude_from_latest"))
}

func (i DataImagesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("id"))
}

func (i DataImagesAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("location"))
}

func (i DataImagesAttributes) ManagedImageId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("managed_image_id"))
}

func (i DataImagesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

func (i DataImagesAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](i.ref.Append("tags"))
}

func (i DataImagesAttributes) TargetRegion() terra.ListValue[DataImagesTargetRegionAttributes] {
	return terra.ReferenceAsList[DataImagesTargetRegionAttributes](i.ref.Append("target_region"))
}

type DataImagesTargetRegionAttributes struct {
	ref terra.Reference
}

func (tr DataImagesTargetRegionAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DataImagesTargetRegionAttributes) InternalWithRef(ref terra.Reference) DataImagesTargetRegionAttributes {
	return DataImagesTargetRegionAttributes{ref: ref}
}

func (tr DataImagesTargetRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DataImagesTargetRegionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("name"))
}

func (tr DataImagesTargetRegionAttributes) RegionalReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(tr.ref.Append("regional_replica_count"))
}

func (tr DataImagesTargetRegionAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("storage_account_type"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataImagesState struct {
	ExcludeFromLatest bool                          `json:"exclude_from_latest"`
	Id                string                        `json:"id"`
	Location          string                        `json:"location"`
	ManagedImageId    string                        `json:"managed_image_id"`
	Name              string                        `json:"name"`
	Tags              map[string]string             `json:"tags"`
	TargetRegion      []DataImagesTargetRegionState `json:"target_region"`
}

type DataImagesTargetRegionState struct {
	Name                 string  `json:"name"`
	RegionalReplicaCount float64 `json:"regional_replica_count"`
	StorageAccountType   string  `json:"storage_account_type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
