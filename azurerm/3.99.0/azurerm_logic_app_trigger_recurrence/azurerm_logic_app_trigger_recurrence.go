// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logic_app_trigger_recurrence

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_logic_app_trigger_recurrence.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogicAppTriggerRecurrenceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alatr *Resource) Type() string {
	return "azurerm_logic_app_trigger_recurrence"
}

// LocalName returns the local name for [Resource].
func (alatr *Resource) LocalName() string {
	return alatr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alatr *Resource) Configuration() interface{} {
	return alatr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alatr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alatr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alatr *Resource) Dependencies() terra.Dependencies {
	return alatr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alatr *Resource) LifecycleManagement() *terra.Lifecycle {
	return alatr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alatr *Resource) Attributes() azurermLogicAppTriggerRecurrenceAttributes {
	return azurermLogicAppTriggerRecurrenceAttributes{ref: terra.ReferenceResource(alatr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alatr *Resource) ImportState(state io.Reader) error {
	alatr.state = &azurermLogicAppTriggerRecurrenceState{}
	if err := json.NewDecoder(state).Decode(alatr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alatr.Type(), alatr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alatr *Resource) State() (*azurermLogicAppTriggerRecurrenceState, bool) {
	return alatr.state, alatr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alatr *Resource) StateMust() *azurermLogicAppTriggerRecurrenceState {
	if alatr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alatr.Type(), alatr.LocalName()))
	}
	return alatr.state
}

// Args contains the configurations for azurerm_logic_app_trigger_recurrence.
type Args struct {
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// LogicAppId: string, required
	LogicAppId terra.StringValue `hcl:"logic_app_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogicAppTriggerRecurrenceAttributes struct {
	ref terra.Reference
}

// Frequency returns a reference to field frequency of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("frequency"))
}

// Id returns a reference to field id of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("id"))
}

// Interval returns a reference to field interval of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(alatr.ref.Append("interval"))
}

// LogicAppId returns a reference to field logic_app_id of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) LogicAppId() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("logic_app_id"))
}

// Name returns a reference to field name of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("name"))
}

// StartTime returns a reference to field start_time of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("start_time"))
}

// TimeZone returns a reference to field time_zone of azurerm_logic_app_trigger_recurrence.
func (alatr azurermLogicAppTriggerRecurrenceAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(alatr.ref.Append("time_zone"))
}

func (alatr azurermLogicAppTriggerRecurrenceAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](alatr.ref.Append("schedule"))
}

func (alatr azurermLogicAppTriggerRecurrenceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alatr.ref.Append("timeouts"))
}

type azurermLogicAppTriggerRecurrenceState struct {
	Frequency  string          `json:"frequency"`
	Id         string          `json:"id"`
	Interval   float64         `json:"interval"`
	LogicAppId string          `json:"logic_app_id"`
	Name       string          `json:"name"`
	StartTime  string          `json:"start_time"`
	TimeZone   string          `json:"time_zone"`
	Schedule   []ScheduleState `json:"schedule"`
	Timeouts   *TimeoutsState  `json:"timeouts"`
}
