// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_sql_elasticpool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_sql_elasticpool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSqlElasticpoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ase *Resource) Type() string {
	return "azurerm_sql_elasticpool"
}

// LocalName returns the local name for [Resource].
func (ase *Resource) LocalName() string {
	return ase.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ase *Resource) Configuration() interface{} {
	return ase.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ase *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ase)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ase *Resource) Dependencies() terra.Dependencies {
	return ase.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ase *Resource) LifecycleManagement() *terra.Lifecycle {
	return ase.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ase *Resource) Attributes() azurermSqlElasticpoolAttributes {
	return azurermSqlElasticpoolAttributes{ref: terra.ReferenceResource(ase)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ase *Resource) ImportState(state io.Reader) error {
	ase.state = &azurermSqlElasticpoolState{}
	if err := json.NewDecoder(state).Decode(ase.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ase.Type(), ase.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ase *Resource) State() (*azurermSqlElasticpoolState, bool) {
	return ase.state, ase.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ase *Resource) StateMust() *azurermSqlElasticpoolState {
	if ase.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ase.Type(), ase.LocalName()))
	}
	return ase.state
}

// Args contains the configurations for azurerm_sql_elasticpool.
type Args struct {
	// DbDtuMax: number, optional
	DbDtuMax terra.NumberValue `hcl:"db_dtu_max,attr"`
	// DbDtuMin: number, optional
	DbDtuMin terra.NumberValue `hcl:"db_dtu_min,attr"`
	// Dtu: number, required
	Dtu terra.NumberValue `hcl:"dtu,attr" validate:"required"`
	// Edition: string, required
	Edition terra.StringValue `hcl:"edition,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PoolSize: number, optional
	PoolSize terra.NumberValue `hcl:"pool_size,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSqlElasticpoolAttributes struct {
	ref terra.Reference
}

// CreationDate returns a reference to field creation_date of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("creation_date"))
}

// DbDtuMax returns a reference to field db_dtu_max of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) DbDtuMax() terra.NumberValue {
	return terra.ReferenceAsNumber(ase.ref.Append("db_dtu_max"))
}

// DbDtuMin returns a reference to field db_dtu_min of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) DbDtuMin() terra.NumberValue {
	return terra.ReferenceAsNumber(ase.ref.Append("db_dtu_min"))
}

// Dtu returns a reference to field dtu of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Dtu() terra.NumberValue {
	return terra.ReferenceAsNumber(ase.ref.Append("dtu"))
}

// Edition returns a reference to field edition of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("edition"))
}

// Id returns a reference to field id of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("name"))
}

// PoolSize returns a reference to field pool_size of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) PoolSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ase.ref.Append("pool_size"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("resource_group_name"))
}

// ServerName returns a reference to field server_name of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("server_name"))
}

// Tags returns a reference to field tags of azurerm_sql_elasticpool.
func (ase azurermSqlElasticpoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ase.ref.Append("tags"))
}

func (ase azurermSqlElasticpoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ase.ref.Append("timeouts"))
}

type azurermSqlElasticpoolState struct {
	CreationDate      string            `json:"creation_date"`
	DbDtuMax          float64           `json:"db_dtu_max"`
	DbDtuMin          float64           `json:"db_dtu_min"`
	Dtu               float64           `json:"dtu"`
	Edition           string            `json:"edition"`
	Id                string            `json:"id"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	PoolSize          float64           `json:"pool_size"`
	ResourceGroupName string            `json:"resource_group_name"`
	ServerName        string            `json:"server_name"`
	Tags              map[string]string `json:"tags"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
