// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_dataset_mysql

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_dataset_mysql.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryDatasetMysqlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfdm *Resource) Type() string {
	return "azurerm_data_factory_dataset_mysql"
}

// LocalName returns the local name for [Resource].
func (adfdm *Resource) LocalName() string {
	return adfdm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfdm *Resource) Configuration() interface{} {
	return adfdm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfdm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfdm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfdm *Resource) Dependencies() terra.Dependencies {
	return adfdm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfdm *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfdm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfdm *Resource) Attributes() azurermDataFactoryDatasetMysqlAttributes {
	return azurermDataFactoryDatasetMysqlAttributes{ref: terra.ReferenceResource(adfdm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfdm *Resource) ImportState(state io.Reader) error {
	adfdm.state = &azurermDataFactoryDatasetMysqlState{}
	if err := json.NewDecoder(state).Decode(adfdm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfdm.Type(), adfdm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfdm *Resource) State() (*azurermDataFactoryDatasetMysqlState, bool) {
	return adfdm.state, adfdm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfdm *Resource) StateMust() *azurermDataFactoryDatasetMysqlState {
	if adfdm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfdm.Type(), adfdm.LocalName()))
	}
	return adfdm.state
}

// Args contains the configurations for azurerm_data_factory_dataset_mysql.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TableName: string, optional
	TableName terra.StringValue `hcl:"table_name,attr"`
	// SchemaColumn: min=0
	SchemaColumn []SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryDatasetMysqlAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdm.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfdm.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("id"))
}

// LinkedServiceName returns a reference to field linked_service_name of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("linked_service_name"))
}

// Name returns a reference to field name of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdm.ref.Append("parameters"))
}

// TableName returns a reference to field table_name of azurerm_data_factory_dataset_mysql.
func (adfdm azurermDataFactoryDatasetMysqlAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(adfdm.ref.Append("table_name"))
}

func (adfdm azurermDataFactoryDatasetMysqlAttributes) SchemaColumn() terra.ListValue[SchemaColumnAttributes] {
	return terra.ReferenceAsList[SchemaColumnAttributes](adfdm.ref.Append("schema_column"))
}

func (adfdm azurermDataFactoryDatasetMysqlAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfdm.ref.Append("timeouts"))
}

type azurermDataFactoryDatasetMysqlState struct {
	AdditionalProperties map[string]string   `json:"additional_properties"`
	Annotations          []string            `json:"annotations"`
	DataFactoryId        string              `json:"data_factory_id"`
	Description          string              `json:"description"`
	Folder               string              `json:"folder"`
	Id                   string              `json:"id"`
	LinkedServiceName    string              `json:"linked_service_name"`
	Name                 string              `json:"name"`
	Parameters           map[string]string   `json:"parameters"`
	TableName            string              `json:"table_name"`
	SchemaColumn         []SchemaColumnState `json:"schema_column"`
	Timeouts             *TimeoutsState      `json:"timeouts"`
}
