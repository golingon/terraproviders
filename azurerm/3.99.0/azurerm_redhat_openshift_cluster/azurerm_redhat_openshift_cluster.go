// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_redhat_openshift_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_redhat_openshift_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRedhatOpenshiftClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aroc *Resource) Type() string {
	return "azurerm_redhat_openshift_cluster"
}

// LocalName returns the local name for [Resource].
func (aroc *Resource) LocalName() string {
	return aroc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aroc *Resource) Configuration() interface{} {
	return aroc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aroc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aroc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aroc *Resource) Dependencies() terra.Dependencies {
	return aroc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aroc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aroc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aroc *Resource) Attributes() azurermRedhatOpenshiftClusterAttributes {
	return azurermRedhatOpenshiftClusterAttributes{ref: terra.ReferenceResource(aroc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aroc *Resource) ImportState(state io.Reader) error {
	aroc.state = &azurermRedhatOpenshiftClusterState{}
	if err := json.NewDecoder(state).Decode(aroc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aroc.Type(), aroc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aroc *Resource) State() (*azurermRedhatOpenshiftClusterState, bool) {
	return aroc.state, aroc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aroc *Resource) StateMust() *azurermRedhatOpenshiftClusterState {
	if aroc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aroc.Type(), aroc.LocalName()))
	}
	return aroc.state
}

// Args contains the configurations for azurerm_redhat_openshift_cluster.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ApiServerProfile: required
	ApiServerProfile *ApiServerProfile `hcl:"api_server_profile,block" validate:"required"`
	// ClusterProfile: required
	ClusterProfile *ClusterProfile `hcl:"cluster_profile,block" validate:"required"`
	// IngressProfile: required
	IngressProfile *IngressProfile `hcl:"ingress_profile,block" validate:"required"`
	// MainProfile: required
	MainProfile *MainProfile `hcl:"main_profile,block" validate:"required"`
	// NetworkProfile: required
	NetworkProfile *NetworkProfile `hcl:"network_profile,block" validate:"required"`
	// ServicePrincipal: required
	ServicePrincipal *ServicePrincipal `hcl:"service_principal,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WorkerProfile: required
	WorkerProfile *WorkerProfile `hcl:"worker_profile,block" validate:"required"`
}

type azurermRedhatOpenshiftClusterAttributes struct {
	ref terra.Reference
}

// ConsoleUrl returns a reference to field console_url of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) ConsoleUrl() terra.StringValue {
	return terra.ReferenceAsString(aroc.ref.Append("console_url"))
}

// Id returns a reference to field id of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aroc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aroc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aroc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aroc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_redhat_openshift_cluster.
func (aroc azurermRedhatOpenshiftClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aroc.ref.Append("tags"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) ApiServerProfile() terra.ListValue[ApiServerProfileAttributes] {
	return terra.ReferenceAsList[ApiServerProfileAttributes](aroc.ref.Append("api_server_profile"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) ClusterProfile() terra.ListValue[ClusterProfileAttributes] {
	return terra.ReferenceAsList[ClusterProfileAttributes](aroc.ref.Append("cluster_profile"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) IngressProfile() terra.ListValue[IngressProfileAttributes] {
	return terra.ReferenceAsList[IngressProfileAttributes](aroc.ref.Append("ingress_profile"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) MainProfile() terra.ListValue[MainProfileAttributes] {
	return terra.ReferenceAsList[MainProfileAttributes](aroc.ref.Append("main_profile"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) NetworkProfile() terra.ListValue[NetworkProfileAttributes] {
	return terra.ReferenceAsList[NetworkProfileAttributes](aroc.ref.Append("network_profile"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) ServicePrincipal() terra.ListValue[ServicePrincipalAttributes] {
	return terra.ReferenceAsList[ServicePrincipalAttributes](aroc.ref.Append("service_principal"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aroc.ref.Append("timeouts"))
}

func (aroc azurermRedhatOpenshiftClusterAttributes) WorkerProfile() terra.ListValue[WorkerProfileAttributes] {
	return terra.ReferenceAsList[WorkerProfileAttributes](aroc.ref.Append("worker_profile"))
}

type azurermRedhatOpenshiftClusterState struct {
	ConsoleUrl        string                  `json:"console_url"`
	Id                string                  `json:"id"`
	Location          string                  `json:"location"`
	Name              string                  `json:"name"`
	ResourceGroupName string                  `json:"resource_group_name"`
	Tags              map[string]string       `json:"tags"`
	ApiServerProfile  []ApiServerProfileState `json:"api_server_profile"`
	ClusterProfile    []ClusterProfileState   `json:"cluster_profile"`
	IngressProfile    []IngressProfileState   `json:"ingress_profile"`
	MainProfile       []MainProfileState      `json:"main_profile"`
	NetworkProfile    []NetworkProfileState   `json:"network_profile"`
	ServicePrincipal  []ServicePrincipalState `json:"service_principal"`
	Timeouts          *TimeoutsState          `json:"timeouts"`
	WorkerProfile     []WorkerProfileState    `json:"worker_profile"`
}
