// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_api_diagnostic

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_api_diagnostic.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementApiDiagnosticState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamad *Resource) Type() string {
	return "azurerm_api_management_api_diagnostic"
}

// LocalName returns the local name for [Resource].
func (aamad *Resource) LocalName() string {
	return aamad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamad *Resource) Configuration() interface{} {
	return aamad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamad *Resource) Dependencies() terra.Dependencies {
	return aamad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamad *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamad *Resource) Attributes() azurermApiManagementApiDiagnosticAttributes {
	return azurermApiManagementApiDiagnosticAttributes{ref: terra.ReferenceResource(aamad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamad *Resource) ImportState(state io.Reader) error {
	aamad.state = &azurermApiManagementApiDiagnosticState{}
	if err := json.NewDecoder(state).Decode(aamad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamad.Type(), aamad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamad *Resource) State() (*azurermApiManagementApiDiagnosticState, bool) {
	return aamad.state, aamad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamad *Resource) StateMust() *azurermApiManagementApiDiagnosticState {
	if aamad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamad.Type(), aamad.LocalName()))
	}
	return aamad.state
}

// Args contains the configurations for azurerm_api_management_api_diagnostic.
type Args struct {
	// AlwaysLogErrors: bool, optional
	AlwaysLogErrors terra.BoolValue `hcl:"always_log_errors,attr"`
	// ApiManagementLoggerId: string, required
	ApiManagementLoggerId terra.StringValue `hcl:"api_management_logger_id,attr" validate:"required"`
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ApiName: string, required
	ApiName terra.StringValue `hcl:"api_name,attr" validate:"required"`
	// HttpCorrelationProtocol: string, optional
	HttpCorrelationProtocol terra.StringValue `hcl:"http_correlation_protocol,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identifier: string, required
	Identifier terra.StringValue `hcl:"identifier,attr" validate:"required"`
	// LogClientIp: bool, optional
	LogClientIp terra.BoolValue `hcl:"log_client_ip,attr"`
	// OperationNameFormat: string, optional
	OperationNameFormat terra.StringValue `hcl:"operation_name_format,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SamplingPercentage: number, optional
	SamplingPercentage terra.NumberValue `hcl:"sampling_percentage,attr"`
	// Verbosity: string, optional
	Verbosity terra.StringValue `hcl:"verbosity,attr"`
	// BackendRequest: optional
	BackendRequest *BackendRequest `hcl:"backend_request,block"`
	// BackendResponse: optional
	BackendResponse *BackendResponse `hcl:"backend_response,block"`
	// FrontendRequest: optional
	FrontendRequest *FrontendRequest `hcl:"frontend_request,block"`
	// FrontendResponse: optional
	FrontendResponse *FrontendResponse `hcl:"frontend_response,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementApiDiagnosticAttributes struct {
	ref terra.Reference
}

// AlwaysLogErrors returns a reference to field always_log_errors of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) AlwaysLogErrors() terra.BoolValue {
	return terra.ReferenceAsBool(aamad.ref.Append("always_log_errors"))
}

// ApiManagementLoggerId returns a reference to field api_management_logger_id of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) ApiManagementLoggerId() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("api_management_logger_id"))
}

// ApiManagementName returns a reference to field api_management_name of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("api_management_name"))
}

// ApiName returns a reference to field api_name of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) ApiName() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("api_name"))
}

// HttpCorrelationProtocol returns a reference to field http_correlation_protocol of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) HttpCorrelationProtocol() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("http_correlation_protocol"))
}

// Id returns a reference to field id of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("id"))
}

// Identifier returns a reference to field identifier of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("identifier"))
}

// LogClientIp returns a reference to field log_client_ip of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) LogClientIp() terra.BoolValue {
	return terra.ReferenceAsBool(aamad.ref.Append("log_client_ip"))
}

// OperationNameFormat returns a reference to field operation_name_format of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) OperationNameFormat() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("operation_name_format"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("resource_group_name"))
}

// SamplingPercentage returns a reference to field sampling_percentage of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) SamplingPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(aamad.ref.Append("sampling_percentage"))
}

// Verbosity returns a reference to field verbosity of azurerm_api_management_api_diagnostic.
func (aamad azurermApiManagementApiDiagnosticAttributes) Verbosity() terra.StringValue {
	return terra.ReferenceAsString(aamad.ref.Append("verbosity"))
}

func (aamad azurermApiManagementApiDiagnosticAttributes) BackendRequest() terra.ListValue[BackendRequestAttributes] {
	return terra.ReferenceAsList[BackendRequestAttributes](aamad.ref.Append("backend_request"))
}

func (aamad azurermApiManagementApiDiagnosticAttributes) BackendResponse() terra.ListValue[BackendResponseAttributes] {
	return terra.ReferenceAsList[BackendResponseAttributes](aamad.ref.Append("backend_response"))
}

func (aamad azurermApiManagementApiDiagnosticAttributes) FrontendRequest() terra.ListValue[FrontendRequestAttributes] {
	return terra.ReferenceAsList[FrontendRequestAttributes](aamad.ref.Append("frontend_request"))
}

func (aamad azurermApiManagementApiDiagnosticAttributes) FrontendResponse() terra.ListValue[FrontendResponseAttributes] {
	return terra.ReferenceAsList[FrontendResponseAttributes](aamad.ref.Append("frontend_response"))
}

func (aamad azurermApiManagementApiDiagnosticAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamad.ref.Append("timeouts"))
}

type azurermApiManagementApiDiagnosticState struct {
	AlwaysLogErrors         bool                    `json:"always_log_errors"`
	ApiManagementLoggerId   string                  `json:"api_management_logger_id"`
	ApiManagementName       string                  `json:"api_management_name"`
	ApiName                 string                  `json:"api_name"`
	HttpCorrelationProtocol string                  `json:"http_correlation_protocol"`
	Id                      string                  `json:"id"`
	Identifier              string                  `json:"identifier"`
	LogClientIp             bool                    `json:"log_client_ip"`
	OperationNameFormat     string                  `json:"operation_name_format"`
	ResourceGroupName       string                  `json:"resource_group_name"`
	SamplingPercentage      float64                 `json:"sampling_percentage"`
	Verbosity               string                  `json:"verbosity"`
	BackendRequest          []BackendRequestState   `json:"backend_request"`
	BackendResponse         []BackendResponseState  `json:"backend_response"`
	FrontendRequest         []FrontendRequestState  `json:"frontend_request"`
	FrontendResponse        []FrontendResponseState `json:"frontend_response"`
	Timeouts                *TimeoutsState          `json:"timeouts"`
}
