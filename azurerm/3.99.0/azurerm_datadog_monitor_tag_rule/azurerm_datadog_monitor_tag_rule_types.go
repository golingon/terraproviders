// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_datadog_monitor_tag_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Log struct {
	// AadLogEnabled: bool, optional
	AadLogEnabled terra.BoolValue `hcl:"aad_log_enabled,attr"`
	// ResourceLogEnabled: bool, optional
	ResourceLogEnabled terra.BoolValue `hcl:"resource_log_enabled,attr"`
	// SubscriptionLogEnabled: bool, optional
	SubscriptionLogEnabled terra.BoolValue `hcl:"subscription_log_enabled,attr"`
	// LogFilter: min=0
	Filter []LogFilter `hcl:"filter,block" validate:"min=0"`
}

type LogFilter struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Metric struct {
	// MetricFilter: min=0
	Filter []MetricFilter `hcl:"filter,block" validate:"min=0"`
}

type MetricFilter struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LogAttributes struct {
	ref terra.Reference
}

func (l LogAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LogAttributes) InternalWithRef(ref terra.Reference) LogAttributes {
	return LogAttributes{ref: ref}
}

func (l LogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LogAttributes) AadLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("aad_log_enabled"))
}

func (l LogAttributes) ResourceLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("resource_log_enabled"))
}

func (l LogAttributes) SubscriptionLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("subscription_log_enabled"))
}

func (l LogAttributes) Filter() terra.ListValue[LogFilterAttributes] {
	return terra.ReferenceAsList[LogFilterAttributes](l.ref.Append("filter"))
}

type LogFilterAttributes struct {
	ref terra.Reference
}

func (f LogFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f LogFilterAttributes) InternalWithRef(ref terra.Reference) LogFilterAttributes {
	return LogFilterAttributes{ref: ref}
}

func (f LogFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f LogFilterAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("action"))
}

func (f LogFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f LogFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("value"))
}

type MetricAttributes struct {
	ref terra.Reference
}

func (m MetricAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetricAttributes) InternalWithRef(ref terra.Reference) MetricAttributes {
	return MetricAttributes{ref: ref}
}

func (m MetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetricAttributes) Filter() terra.ListValue[MetricFilterAttributes] {
	return terra.ReferenceAsList[MetricFilterAttributes](m.ref.Append("filter"))
}

type MetricFilterAttributes struct {
	ref terra.Reference
}

func (f MetricFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f MetricFilterAttributes) InternalWithRef(ref terra.Reference) MetricFilterAttributes {
	return MetricFilterAttributes{ref: ref}
}

func (f MetricFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f MetricFilterAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("action"))
}

func (f MetricFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f MetricFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LogState struct {
	AadLogEnabled          bool             `json:"aad_log_enabled"`
	ResourceLogEnabled     bool             `json:"resource_log_enabled"`
	SubscriptionLogEnabled bool             `json:"subscription_log_enabled"`
	Filter                 []LogFilterState `json:"filter"`
}

type LogFilterState struct {
	Action string `json:"action"`
	Name   string `json:"name"`
	Value  string `json:"value"`
}

type MetricState struct {
	Filter []MetricFilterState `json:"filter"`
}

type MetricFilterState struct {
	Action string `json:"action"`
	Name   string `json:"name"`
	Value  string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
