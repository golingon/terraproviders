// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamb *Resource) Type() string {
	return "azurerm_api_management_backend"
}

// LocalName returns the local name for [Resource].
func (aamb *Resource) LocalName() string {
	return aamb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamb *Resource) Configuration() interface{} {
	return aamb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamb *Resource) Dependencies() terra.Dependencies {
	return aamb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamb *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamb *Resource) Attributes() azurermApiManagementBackendAttributes {
	return azurermApiManagementBackendAttributes{ref: terra.ReferenceResource(aamb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamb *Resource) ImportState(state io.Reader) error {
	aamb.state = &azurermApiManagementBackendState{}
	if err := json.NewDecoder(state).Decode(aamb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamb.Type(), aamb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamb *Resource) State() (*azurermApiManagementBackendState, bool) {
	return aamb.state, aamb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamb *Resource) StateMust() *azurermApiManagementBackendState {
	if aamb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamb.Type(), aamb.LocalName()))
	}
	return aamb.state
}

// Args contains the configurations for azurerm_api_management_backend.
type Args struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ResourceId: string, optional
	ResourceId terra.StringValue `hcl:"resource_id,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Credentials: optional
	Credentials *Credentials `hcl:"credentials,block"`
	// Proxy: optional
	Proxy *Proxy `hcl:"proxy,block"`
	// ServiceFabricCluster: optional
	ServiceFabricCluster *ServiceFabricCluster `hcl:"service_fabric_cluster,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Tls: optional
	Tls *Tls `hcl:"tls,block"`
}

type azurermApiManagementBackendAttributes struct {
	ref terra.Reference
}

// ApiManagementName returns a reference to field api_management_name of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("api_management_name"))
}

// Description returns a reference to field description of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("name"))
}

// Protocol returns a reference to field protocol of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("protocol"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("resource_group_name"))
}

// ResourceId returns a reference to field resource_id of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("resource_id"))
}

// Title returns a reference to field title of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("title"))
}

// Url returns a reference to field url of azurerm_api_management_backend.
func (aamb azurermApiManagementBackendAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(aamb.ref.Append("url"))
}

func (aamb azurermApiManagementBackendAttributes) Credentials() terra.ListValue[CredentialsAttributes] {
	return terra.ReferenceAsList[CredentialsAttributes](aamb.ref.Append("credentials"))
}

func (aamb azurermApiManagementBackendAttributes) Proxy() terra.ListValue[ProxyAttributes] {
	return terra.ReferenceAsList[ProxyAttributes](aamb.ref.Append("proxy"))
}

func (aamb azurermApiManagementBackendAttributes) ServiceFabricCluster() terra.ListValue[ServiceFabricClusterAttributes] {
	return terra.ReferenceAsList[ServiceFabricClusterAttributes](aamb.ref.Append("service_fabric_cluster"))
}

func (aamb azurermApiManagementBackendAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamb.ref.Append("timeouts"))
}

func (aamb azurermApiManagementBackendAttributes) Tls() terra.ListValue[TlsAttributes] {
	return terra.ReferenceAsList[TlsAttributes](aamb.ref.Append("tls"))
}

type azurermApiManagementBackendState struct {
	ApiManagementName    string                      `json:"api_management_name"`
	Description          string                      `json:"description"`
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	Protocol             string                      `json:"protocol"`
	ResourceGroupName    string                      `json:"resource_group_name"`
	ResourceId           string                      `json:"resource_id"`
	Title                string                      `json:"title"`
	Url                  string                      `json:"url"`
	Credentials          []CredentialsState          `json:"credentials"`
	Proxy                []ProxyState                `json:"proxy"`
	ServiceFabricCluster []ServiceFabricClusterState `json:"service_fabric_cluster"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
	Tls                  []TlsState                  `json:"tls"`
}
