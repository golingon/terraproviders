// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_sql_managed_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_sql_managed_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSqlManagedInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asmi *Resource) Type() string {
	return "azurerm_sql_managed_instance"
}

// LocalName returns the local name for [Resource].
func (asmi *Resource) LocalName() string {
	return asmi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asmi *Resource) Configuration() interface{} {
	return asmi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asmi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asmi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asmi *Resource) Dependencies() terra.Dependencies {
	return asmi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asmi *Resource) LifecycleManagement() *terra.Lifecycle {
	return asmi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asmi *Resource) Attributes() azurermSqlManagedInstanceAttributes {
	return azurermSqlManagedInstanceAttributes{ref: terra.ReferenceResource(asmi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asmi *Resource) ImportState(state io.Reader) error {
	asmi.state = &azurermSqlManagedInstanceState{}
	if err := json.NewDecoder(state).Decode(asmi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asmi.Type(), asmi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asmi *Resource) State() (*azurermSqlManagedInstanceState, bool) {
	return asmi.state, asmi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asmi *Resource) StateMust() *azurermSqlManagedInstanceState {
	if asmi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asmi.Type(), asmi.LocalName()))
	}
	return asmi.state
}

// Args contains the configurations for azurerm_sql_managed_instance.
type Args struct {
	// AdministratorLogin: string, required
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr" validate:"required"`
	// AdministratorLoginPassword: string, required
	AdministratorLoginPassword terra.StringValue `hcl:"administrator_login_password,attr" validate:"required"`
	// Collation: string, optional
	Collation terra.StringValue `hcl:"collation,attr"`
	// DnsZonePartnerId: string, optional
	DnsZonePartnerId terra.StringValue `hcl:"dns_zone_partner_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, required
	LicenseType terra.StringValue `hcl:"license_type,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProxyOverride: string, optional
	ProxyOverride terra.StringValue `hcl:"proxy_override,attr"`
	// PublicDataEndpointEnabled: bool, optional
	PublicDataEndpointEnabled terra.BoolValue `hcl:"public_data_endpoint_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// StorageAccountType: string, optional
	StorageAccountType terra.StringValue `hcl:"storage_account_type,attr"`
	// StorageSizeInGb: number, required
	StorageSizeInGb terra.NumberValue `hcl:"storage_size_in_gb,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimezoneId: string, optional
	TimezoneId terra.StringValue `hcl:"timezone_id,attr"`
	// Vcores: number, required
	Vcores terra.NumberValue `hcl:"vcores,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSqlManagedInstanceAttributes struct {
	ref terra.Reference
}

// AdministratorLogin returns a reference to field administrator_login of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("administrator_login"))
}

// AdministratorLoginPassword returns a reference to field administrator_login_password of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) AdministratorLoginPassword() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("administrator_login_password"))
}

// Collation returns a reference to field collation of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("collation"))
}

// DnsZonePartnerId returns a reference to field dns_zone_partner_id of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) DnsZonePartnerId() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("dns_zone_partner_id"))
}

// Fqdn returns a reference to field fqdn of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("fqdn"))
}

// Id returns a reference to field id of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("location"))
}

// MinimumTlsVersion returns a reference to field minimum_tls_version of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("minimum_tls_version"))
}

// Name returns a reference to field name of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("name"))
}

// ProxyOverride returns a reference to field proxy_override of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) ProxyOverride() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("proxy_override"))
}

// PublicDataEndpointEnabled returns a reference to field public_data_endpoint_enabled of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) PublicDataEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asmi.ref.Append("public_data_endpoint_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("sku_name"))
}

// StorageAccountType returns a reference to field storage_account_type of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) StorageAccountType() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("storage_account_type"))
}

// StorageSizeInGb returns a reference to field storage_size_in_gb of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) StorageSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(asmi.ref.Append("storage_size_in_gb"))
}

// SubnetId returns a reference to field subnet_id of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asmi.ref.Append("tags"))
}

// TimezoneId returns a reference to field timezone_id of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) TimezoneId() terra.StringValue {
	return terra.ReferenceAsString(asmi.ref.Append("timezone_id"))
}

// Vcores returns a reference to field vcores of azurerm_sql_managed_instance.
func (asmi azurermSqlManagedInstanceAttributes) Vcores() terra.NumberValue {
	return terra.ReferenceAsNumber(asmi.ref.Append("vcores"))
}

func (asmi azurermSqlManagedInstanceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](asmi.ref.Append("identity"))
}

func (asmi azurermSqlManagedInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asmi.ref.Append("timeouts"))
}

type azurermSqlManagedInstanceState struct {
	AdministratorLogin         string            `json:"administrator_login"`
	AdministratorLoginPassword string            `json:"administrator_login_password"`
	Collation                  string            `json:"collation"`
	DnsZonePartnerId           string            `json:"dns_zone_partner_id"`
	Fqdn                       string            `json:"fqdn"`
	Id                         string            `json:"id"`
	LicenseType                string            `json:"license_type"`
	Location                   string            `json:"location"`
	MinimumTlsVersion          string            `json:"minimum_tls_version"`
	Name                       string            `json:"name"`
	ProxyOverride              string            `json:"proxy_override"`
	PublicDataEndpointEnabled  bool              `json:"public_data_endpoint_enabled"`
	ResourceGroupName          string            `json:"resource_group_name"`
	SkuName                    string            `json:"sku_name"`
	StorageAccountType         string            `json:"storage_account_type"`
	StorageSizeInGb            float64           `json:"storage_size_in_gb"`
	SubnetId                   string            `json:"subnet_id"`
	Tags                       map[string]string `json:"tags"`
	TimezoneId                 string            `json:"timezone_id"`
	Vcores                     float64           `json:"vcores"`
	Identity                   []IdentityState   `json:"identity"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
