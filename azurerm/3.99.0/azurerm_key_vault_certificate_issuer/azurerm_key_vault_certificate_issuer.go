// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_certificate_issuer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_certificate_issuer.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultCertificateIssuerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvci *Resource) Type() string {
	return "azurerm_key_vault_certificate_issuer"
}

// LocalName returns the local name for [Resource].
func (akvci *Resource) LocalName() string {
	return akvci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvci *Resource) Configuration() interface{} {
	return akvci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvci *Resource) Dependencies() terra.Dependencies {
	return akvci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvci *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvci *Resource) Attributes() azurermKeyVaultCertificateIssuerAttributes {
	return azurermKeyVaultCertificateIssuerAttributes{ref: terra.ReferenceResource(akvci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvci *Resource) ImportState(state io.Reader) error {
	akvci.state = &azurermKeyVaultCertificateIssuerState{}
	if err := json.NewDecoder(state).Decode(akvci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvci.Type(), akvci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvci *Resource) State() (*azurermKeyVaultCertificateIssuerState, bool) {
	return akvci.state, akvci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvci *Resource) StateMust() *azurermKeyVaultCertificateIssuerState {
	if akvci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvci.Type(), akvci.LocalName()))
	}
	return akvci.state
}

// Args contains the configurations for azurerm_key_vault_certificate_issuer.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrgId: string, optional
	OrgId terra.StringValue `hcl:"org_id,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// Admin: min=0
	Admin []Admin `hcl:"admin,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultCertificateIssuerAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("account_id"))
}

// Id returns a reference to field id of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("key_vault_id"))
}

// Name returns a reference to field name of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("name"))
}

// OrgId returns a reference to field org_id of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("org_id"))
}

// Password returns a reference to field password of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("password"))
}

// ProviderName returns a reference to field provider_name of azurerm_key_vault_certificate_issuer.
func (akvci azurermKeyVaultCertificateIssuerAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(akvci.ref.Append("provider_name"))
}

func (akvci azurermKeyVaultCertificateIssuerAttributes) Admin() terra.ListValue[AdminAttributes] {
	return terra.ReferenceAsList[AdminAttributes](akvci.ref.Append("admin"))
}

func (akvci azurermKeyVaultCertificateIssuerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvci.ref.Append("timeouts"))
}

type azurermKeyVaultCertificateIssuerState struct {
	AccountId    string         `json:"account_id"`
	Id           string         `json:"id"`
	KeyVaultId   string         `json:"key_vault_id"`
	Name         string         `json:"name"`
	OrgId        string         `json:"org_id"`
	Password     string         `json:"password"`
	ProviderName string         `json:"provider_name"`
	Admin        []AdminState   `json:"admin"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
