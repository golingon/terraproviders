// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_dataset_binary

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_dataset_binary.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryDatasetBinaryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfdb *Resource) Type() string {
	return "azurerm_data_factory_dataset_binary"
}

// LocalName returns the local name for [Resource].
func (adfdb *Resource) LocalName() string {
	return adfdb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfdb *Resource) Configuration() interface{} {
	return adfdb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfdb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfdb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfdb *Resource) Dependencies() terra.Dependencies {
	return adfdb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfdb *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfdb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfdb *Resource) Attributes() azurermDataFactoryDatasetBinaryAttributes {
	return azurermDataFactoryDatasetBinaryAttributes{ref: terra.ReferenceResource(adfdb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfdb *Resource) ImportState(state io.Reader) error {
	adfdb.state = &azurermDataFactoryDatasetBinaryState{}
	if err := json.NewDecoder(state).Decode(adfdb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfdb.Type(), adfdb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfdb *Resource) State() (*azurermDataFactoryDatasetBinaryState, bool) {
	return adfdb.state, adfdb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfdb *Resource) StateMust() *azurermDataFactoryDatasetBinaryState {
	if adfdb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfdb.Type(), adfdb.LocalName()))
	}
	return adfdb.state
}

// Args contains the configurations for azurerm_data_factory_dataset_binary.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// AzureBlobStorageLocation: optional
	AzureBlobStorageLocation *AzureBlobStorageLocation `hcl:"azure_blob_storage_location,block"`
	// Compression: optional
	Compression *Compression `hcl:"compression,block"`
	// HttpServerLocation: optional
	HttpServerLocation *HttpServerLocation `hcl:"http_server_location,block"`
	// SftpServerLocation: optional
	SftpServerLocation *SftpServerLocation `hcl:"sftp_server_location,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryDatasetBinaryAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdb.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfdb.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("id"))
}

// LinkedServiceName returns a reference to field linked_service_name of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("linked_service_name"))
}

// Name returns a reference to field name of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfdb.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_dataset_binary.
func (adfdb azurermDataFactoryDatasetBinaryAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfdb.ref.Append("parameters"))
}

func (adfdb azurermDataFactoryDatasetBinaryAttributes) AzureBlobStorageLocation() terra.ListValue[AzureBlobStorageLocationAttributes] {
	return terra.ReferenceAsList[AzureBlobStorageLocationAttributes](adfdb.ref.Append("azure_blob_storage_location"))
}

func (adfdb azurermDataFactoryDatasetBinaryAttributes) Compression() terra.ListValue[CompressionAttributes] {
	return terra.ReferenceAsList[CompressionAttributes](adfdb.ref.Append("compression"))
}

func (adfdb azurermDataFactoryDatasetBinaryAttributes) HttpServerLocation() terra.ListValue[HttpServerLocationAttributes] {
	return terra.ReferenceAsList[HttpServerLocationAttributes](adfdb.ref.Append("http_server_location"))
}

func (adfdb azurermDataFactoryDatasetBinaryAttributes) SftpServerLocation() terra.ListValue[SftpServerLocationAttributes] {
	return terra.ReferenceAsList[SftpServerLocationAttributes](adfdb.ref.Append("sftp_server_location"))
}

func (adfdb azurermDataFactoryDatasetBinaryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfdb.ref.Append("timeouts"))
}

type azurermDataFactoryDatasetBinaryState struct {
	AdditionalProperties     map[string]string               `json:"additional_properties"`
	Annotations              []string                        `json:"annotations"`
	DataFactoryId            string                          `json:"data_factory_id"`
	Description              string                          `json:"description"`
	Folder                   string                          `json:"folder"`
	Id                       string                          `json:"id"`
	LinkedServiceName        string                          `json:"linked_service_name"`
	Name                     string                          `json:"name"`
	Parameters               map[string]string               `json:"parameters"`
	AzureBlobStorageLocation []AzureBlobStorageLocationState `json:"azure_blob_storage_location"`
	Compression              []CompressionState              `json:"compression"`
	HttpServerLocation       []HttpServerLocationState       `json:"http_server_location"`
	SftpServerLocation       []SftpServerLocationState       `json:"sftp_server_location"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
