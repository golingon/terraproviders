// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_container

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_container.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageContainerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asc *Resource) Type() string {
	return "azurerm_storage_container"
}

// LocalName returns the local name for [Resource].
func (asc *Resource) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asc *Resource) Configuration() interface{} {
	return asc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asc *Resource) Dependencies() terra.Dependencies {
	return asc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asc *Resource) Attributes() azurermStorageContainerAttributes {
	return azurermStorageContainerAttributes{ref: terra.ReferenceResource(asc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asc *Resource) ImportState(state io.Reader) error {
	asc.state = &azurermStorageContainerState{}
	if err := json.NewDecoder(state).Decode(asc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asc.Type(), asc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asc *Resource) State() (*azurermStorageContainerState, bool) {
	return asc.state, asc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asc *Resource) StateMust() *azurermStorageContainerState {
	if asc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asc.Type(), asc.LocalName()))
	}
	return asc.state
}

// Args contains the configurations for azurerm_storage_container.
type Args struct {
	// ContainerAccessType: string, optional
	ContainerAccessType terra.StringValue `hcl:"container_access_type,attr"`
	// DefaultEncryptionScope: string, optional
	DefaultEncryptionScope terra.StringValue `hcl:"default_encryption_scope,attr"`
	// EncryptionScopeOverrideEnabled: bool, optional
	EncryptionScopeOverrideEnabled terra.BoolValue `hcl:"encryption_scope_override_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageContainerAttributes struct {
	ref terra.Reference
}

// ContainerAccessType returns a reference to field container_access_type of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) ContainerAccessType() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("container_access_type"))
}

// DefaultEncryptionScope returns a reference to field default_encryption_scope of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) DefaultEncryptionScope() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("default_encryption_scope"))
}

// EncryptionScopeOverrideEnabled returns a reference to field encryption_scope_override_enabled of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) EncryptionScopeOverrideEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("encryption_scope_override_enabled"))
}

// HasImmutabilityPolicy returns a reference to field has_immutability_policy of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) HasImmutabilityPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("has_immutability_policy"))
}

// HasLegalHold returns a reference to field has_legal_hold of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) HasLegalHold() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("has_legal_hold"))
}

// Id returns a reference to field id of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asc.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("resource_manager_id"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_container.
func (asc azurermStorageContainerAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("storage_account_name"))
}

func (asc azurermStorageContainerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asc.ref.Append("timeouts"))
}

type azurermStorageContainerState struct {
	ContainerAccessType            string            `json:"container_access_type"`
	DefaultEncryptionScope         string            `json:"default_encryption_scope"`
	EncryptionScopeOverrideEnabled bool              `json:"encryption_scope_override_enabled"`
	HasImmutabilityPolicy          bool              `json:"has_immutability_policy"`
	HasLegalHold                   bool              `json:"has_legal_hold"`
	Id                             string            `json:"id"`
	Metadata                       map[string]string `json:"metadata"`
	Name                           string            `json:"name"`
	ResourceManagerId              string            `json:"resource_manager_id"`
	StorageAccountName             string            `json:"storage_account_name"`
	Timeouts                       *TimeoutsState    `json:"timeouts"`
}
