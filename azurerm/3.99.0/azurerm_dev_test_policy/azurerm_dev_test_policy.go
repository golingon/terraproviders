// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_test_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dev_test_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDevTestPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adtp *Resource) Type() string {
	return "azurerm_dev_test_policy"
}

// LocalName returns the local name for [Resource].
func (adtp *Resource) LocalName() string {
	return adtp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adtp *Resource) Configuration() interface{} {
	return adtp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adtp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adtp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adtp *Resource) Dependencies() terra.Dependencies {
	return adtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adtp *Resource) LifecycleManagement() *terra.Lifecycle {
	return adtp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adtp *Resource) Attributes() azurermDevTestPolicyAttributes {
	return azurermDevTestPolicyAttributes{ref: terra.ReferenceResource(adtp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adtp *Resource) ImportState(state io.Reader) error {
	adtp.state = &azurermDevTestPolicyState{}
	if err := json.NewDecoder(state).Decode(adtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adtp.Type(), adtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adtp *Resource) State() (*azurermDevTestPolicyState, bool) {
	return adtp.state, adtp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adtp *Resource) StateMust() *azurermDevTestPolicyState {
	if adtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adtp.Type(), adtp.LocalName()))
	}
	return adtp.state
}

// Args contains the configurations for azurerm_dev_test_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EvaluatorType: string, required
	EvaluatorType terra.StringValue `hcl:"evaluator_type,attr" validate:"required"`
	// FactData: string, optional
	FactData terra.StringValue `hcl:"fact_data,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabName: string, required
	LabName terra.StringValue `hcl:"lab_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicySetName: string, required
	PolicySetName terra.StringValue `hcl:"policy_set_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Threshold: string, required
	Threshold terra.StringValue `hcl:"threshold,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDevTestPolicyAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("description"))
}

// EvaluatorType returns a reference to field evaluator_type of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) EvaluatorType() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("evaluator_type"))
}

// FactData returns a reference to field fact_data of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) FactData() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("fact_data"))
}

// Id returns a reference to field id of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("id"))
}

// LabName returns a reference to field lab_name of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) LabName() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("lab_name"))
}

// Name returns a reference to field name of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("name"))
}

// PolicySetName returns a reference to field policy_set_name of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) PolicySetName() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("policy_set_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adtp.ref.Append("tags"))
}

// Threshold returns a reference to field threshold of azurerm_dev_test_policy.
func (adtp azurermDevTestPolicyAttributes) Threshold() terra.StringValue {
	return terra.ReferenceAsString(adtp.ref.Append("threshold"))
}

func (adtp azurermDevTestPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adtp.ref.Append("timeouts"))
}

type azurermDevTestPolicyState struct {
	Description       string            `json:"description"`
	EvaluatorType     string            `json:"evaluator_type"`
	FactData          string            `json:"fact_data"`
	Id                string            `json:"id"`
	LabName           string            `json:"lab_name"`
	Name              string            `json:"name"`
	PolicySetName     string            `json:"policy_set_name"`
	ResourceGroupName string            `json:"resource_group_name"`
	Tags              map[string]string `json:"tags"`
	Threshold         string            `json:"threshold"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
