// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_vpn_server_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_vpn_server_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVpnServerConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avsc *Resource) Type() string {
	return "azurerm_vpn_server_configuration"
}

// LocalName returns the local name for [Resource].
func (avsc *Resource) LocalName() string {
	return avsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avsc *Resource) Configuration() interface{} {
	return avsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avsc *Resource) Dependencies() terra.Dependencies {
	return avsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return avsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avsc *Resource) Attributes() azurermVpnServerConfigurationAttributes {
	return azurermVpnServerConfigurationAttributes{ref: terra.ReferenceResource(avsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avsc *Resource) ImportState(state io.Reader) error {
	avsc.state = &azurermVpnServerConfigurationState{}
	if err := json.NewDecoder(state).Decode(avsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avsc.Type(), avsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avsc *Resource) State() (*azurermVpnServerConfigurationState, bool) {
	return avsc.state, avsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avsc *Resource) StateMust() *azurermVpnServerConfigurationState {
	if avsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avsc.Type(), avsc.LocalName()))
	}
	return avsc.state
}

// Args contains the configurations for azurerm_vpn_server_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpnAuthenticationTypes: list of string, required
	VpnAuthenticationTypes terra.ListValue[terra.StringValue] `hcl:"vpn_authentication_types,attr" validate:"required"`
	// VpnProtocols: set of string, optional
	VpnProtocols terra.SetValue[terra.StringValue] `hcl:"vpn_protocols,attr"`
	// AzureActiveDirectoryAuthentication: min=0
	AzureActiveDirectoryAuthentication []AzureActiveDirectoryAuthentication `hcl:"azure_active_directory_authentication,block" validate:"min=0"`
	// ClientRevokedCertificate: min=0
	ClientRevokedCertificate []ClientRevokedCertificate `hcl:"client_revoked_certificate,block" validate:"min=0"`
	// ClientRootCertificate: min=0
	ClientRootCertificate []ClientRootCertificate `hcl:"client_root_certificate,block" validate:"min=0"`
	// IpsecPolicy: optional
	IpsecPolicy *IpsecPolicy `hcl:"ipsec_policy,block"`
	// Radius: optional
	Radius *Radius `hcl:"radius,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVpnServerConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avsc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avsc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avsc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avsc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avsc.ref.Append("tags"))
}

// VpnAuthenticationTypes returns a reference to field vpn_authentication_types of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) VpnAuthenticationTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avsc.ref.Append("vpn_authentication_types"))
}

// VpnProtocols returns a reference to field vpn_protocols of azurerm_vpn_server_configuration.
func (avsc azurermVpnServerConfigurationAttributes) VpnProtocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avsc.ref.Append("vpn_protocols"))
}

func (avsc azurermVpnServerConfigurationAttributes) AzureActiveDirectoryAuthentication() terra.ListValue[AzureActiveDirectoryAuthenticationAttributes] {
	return terra.ReferenceAsList[AzureActiveDirectoryAuthenticationAttributes](avsc.ref.Append("azure_active_directory_authentication"))
}

func (avsc azurermVpnServerConfigurationAttributes) ClientRevokedCertificate() terra.SetValue[ClientRevokedCertificateAttributes] {
	return terra.ReferenceAsSet[ClientRevokedCertificateAttributes](avsc.ref.Append("client_revoked_certificate"))
}

func (avsc azurermVpnServerConfigurationAttributes) ClientRootCertificate() terra.SetValue[ClientRootCertificateAttributes] {
	return terra.ReferenceAsSet[ClientRootCertificateAttributes](avsc.ref.Append("client_root_certificate"))
}

func (avsc azurermVpnServerConfigurationAttributes) IpsecPolicy() terra.ListValue[IpsecPolicyAttributes] {
	return terra.ReferenceAsList[IpsecPolicyAttributes](avsc.ref.Append("ipsec_policy"))
}

func (avsc azurermVpnServerConfigurationAttributes) Radius() terra.ListValue[RadiusAttributes] {
	return terra.ReferenceAsList[RadiusAttributes](avsc.ref.Append("radius"))
}

func (avsc azurermVpnServerConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avsc.ref.Append("timeouts"))
}

type azurermVpnServerConfigurationState struct {
	Id                                 string                                    `json:"id"`
	Location                           string                                    `json:"location"`
	Name                               string                                    `json:"name"`
	ResourceGroupName                  string                                    `json:"resource_group_name"`
	Tags                               map[string]string                         `json:"tags"`
	VpnAuthenticationTypes             []string                                  `json:"vpn_authentication_types"`
	VpnProtocols                       []string                                  `json:"vpn_protocols"`
	AzureActiveDirectoryAuthentication []AzureActiveDirectoryAuthenticationState `json:"azure_active_directory_authentication"`
	ClientRevokedCertificate           []ClientRevokedCertificateState           `json:"client_revoked_certificate"`
	ClientRootCertificate              []ClientRootCertificateState              `json:"client_root_certificate"`
	IpsecPolicy                        []IpsecPolicyState                        `json:"ipsec_policy"`
	Radius                             []RadiusState                             `json:"radius"`
	Timeouts                           *TimeoutsState                            `json:"timeouts"`
}
