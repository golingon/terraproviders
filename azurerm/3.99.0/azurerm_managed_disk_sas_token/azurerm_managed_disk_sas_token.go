// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_disk_sas_token

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_managed_disk_sas_token.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagedDiskSasTokenState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amdst *Resource) Type() string {
	return "azurerm_managed_disk_sas_token"
}

// LocalName returns the local name for [Resource].
func (amdst *Resource) LocalName() string {
	return amdst.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amdst *Resource) Configuration() interface{} {
	return amdst.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amdst *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amdst)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amdst *Resource) Dependencies() terra.Dependencies {
	return amdst.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amdst *Resource) LifecycleManagement() *terra.Lifecycle {
	return amdst.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amdst *Resource) Attributes() azurermManagedDiskSasTokenAttributes {
	return azurermManagedDiskSasTokenAttributes{ref: terra.ReferenceResource(amdst)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amdst *Resource) ImportState(state io.Reader) error {
	amdst.state = &azurermManagedDiskSasTokenState{}
	if err := json.NewDecoder(state).Decode(amdst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amdst.Type(), amdst.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amdst *Resource) State() (*azurermManagedDiskSasTokenState, bool) {
	return amdst.state, amdst.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amdst *Resource) StateMust() *azurermManagedDiskSasTokenState {
	if amdst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amdst.Type(), amdst.LocalName()))
	}
	return amdst.state
}

// Args contains the configurations for azurerm_managed_disk_sas_token.
type Args struct {
	// AccessLevel: string, required
	AccessLevel terra.StringValue `hcl:"access_level,attr" validate:"required"`
	// DurationInSeconds: number, required
	DurationInSeconds terra.NumberValue `hcl:"duration_in_seconds,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedDiskId: string, required
	ManagedDiskId terra.StringValue `hcl:"managed_disk_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagedDiskSasTokenAttributes struct {
	ref terra.Reference
}

// AccessLevel returns a reference to field access_level of azurerm_managed_disk_sas_token.
func (amdst azurermManagedDiskSasTokenAttributes) AccessLevel() terra.StringValue {
	return terra.ReferenceAsString(amdst.ref.Append("access_level"))
}

// DurationInSeconds returns a reference to field duration_in_seconds of azurerm_managed_disk_sas_token.
func (amdst azurermManagedDiskSasTokenAttributes) DurationInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(amdst.ref.Append("duration_in_seconds"))
}

// Id returns a reference to field id of azurerm_managed_disk_sas_token.
func (amdst azurermManagedDiskSasTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amdst.ref.Append("id"))
}

// ManagedDiskId returns a reference to field managed_disk_id of azurerm_managed_disk_sas_token.
func (amdst azurermManagedDiskSasTokenAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(amdst.ref.Append("managed_disk_id"))
}

// SasUrl returns a reference to field sas_url of azurerm_managed_disk_sas_token.
func (amdst azurermManagedDiskSasTokenAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(amdst.ref.Append("sas_url"))
}

func (amdst azurermManagedDiskSasTokenAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amdst.ref.Append("timeouts"))
}

type azurermManagedDiskSasTokenState struct {
	AccessLevel       string         `json:"access_level"`
	DurationInSeconds float64        `json:"duration_in_seconds"`
	Id                string         `json:"id"`
	ManagedDiskId     string         `json:"managed_disk_id"`
	SasUrl            string         `json:"sas_url"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
