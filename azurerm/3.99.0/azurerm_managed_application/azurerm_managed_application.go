// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_managed_application.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagedApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ama *Resource) Type() string {
	return "azurerm_managed_application"
}

// LocalName returns the local name for [Resource].
func (ama *Resource) LocalName() string {
	return ama.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ama *Resource) Configuration() interface{} {
	return ama.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ama *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ama)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ama *Resource) Dependencies() terra.Dependencies {
	return ama.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ama *Resource) LifecycleManagement() *terra.Lifecycle {
	return ama.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ama *Resource) Attributes() azurermManagedApplicationAttributes {
	return azurermManagedApplicationAttributes{ref: terra.ReferenceResource(ama)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ama *Resource) ImportState(state io.Reader) error {
	ama.state = &azurermManagedApplicationState{}
	if err := json.NewDecoder(state).Decode(ama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ama.Type(), ama.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ama *Resource) State() (*azurermManagedApplicationState, bool) {
	return ama.state, ama.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ama *Resource) StateMust() *azurermManagedApplicationState {
	if ama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ama.Type(), ama.LocalName()))
	}
	return ama.state
}

// Args contains the configurations for azurerm_managed_application.
type Args struct {
	// ApplicationDefinitionId: string, optional
	ApplicationDefinitionId terra.StringValue `hcl:"application_definition_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroupName: string, required
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParameterValues: string, optional
	ParameterValues terra.StringValue `hcl:"parameter_values,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagedApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationDefinitionId returns a reference to field application_definition_id of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) ApplicationDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("application_definition_id"))
}

// Id returns a reference to field id of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("id"))
}

// Kind returns a reference to field kind of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("location"))
}

// ManagedResourceGroupName returns a reference to field managed_resource_group_name of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("managed_resource_group_name"))
}

// Name returns a reference to field name of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("name"))
}

// Outputs returns a reference to field outputs of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("outputs"))
}

// ParameterValues returns a reference to field parameter_values of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) ParameterValues() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("parameter_values"))
}

// Parameters returns a reference to field parameters of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("parameters"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_managed_application.
func (ama azurermManagedApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("tags"))
}

func (ama azurermManagedApplicationAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](ama.ref.Append("plan"))
}

func (ama azurermManagedApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ama.ref.Append("timeouts"))
}

type azurermManagedApplicationState struct {
	ApplicationDefinitionId  string            `json:"application_definition_id"`
	Id                       string            `json:"id"`
	Kind                     string            `json:"kind"`
	Location                 string            `json:"location"`
	ManagedResourceGroupName string            `json:"managed_resource_group_name"`
	Name                     string            `json:"name"`
	Outputs                  map[string]string `json:"outputs"`
	ParameterValues          string            `json:"parameter_values"`
	Parameters               map[string]string `json:"parameters"`
	ResourceGroupName        string            `json:"resource_group_name"`
	Tags                     map[string]string `json:"tags"`
	Plan                     []PlanState       `json:"plan"`
	Timeouts                 *TimeoutsState    `json:"timeouts"`
}
