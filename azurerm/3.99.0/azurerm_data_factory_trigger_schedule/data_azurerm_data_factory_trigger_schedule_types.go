// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_trigger_schedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataScheduleAttributes struct {
	ref terra.Reference
}

func (s DataScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataScheduleAttributes) InternalWithRef(ref terra.Reference) DataScheduleAttributes {
	return DataScheduleAttributes{ref: ref}
}

func (s DataScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataScheduleAttributes) DaysOfMonth() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("days_of_month"))
}

func (s DataScheduleAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("days_of_week"))
}

func (s DataScheduleAttributes) Hours() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("hours"))
}

func (s DataScheduleAttributes) Minutes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("minutes"))
}

func (s DataScheduleAttributes) Monthly() terra.ListValue[DataScheduleMonthlyAttributes] {
	return terra.ReferenceAsList[DataScheduleMonthlyAttributes](s.ref.Append("monthly"))
}

type DataScheduleMonthlyAttributes struct {
	ref terra.Reference
}

func (m DataScheduleMonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DataScheduleMonthlyAttributes) InternalWithRef(ref terra.Reference) DataScheduleMonthlyAttributes {
	return DataScheduleMonthlyAttributes{ref: ref}
}

func (m DataScheduleMonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DataScheduleMonthlyAttributes) Week() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("week"))
}

func (m DataScheduleMonthlyAttributes) Weekday() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("weekday"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataScheduleState struct {
	DaysOfMonth []float64                  `json:"days_of_month"`
	DaysOfWeek  []string                   `json:"days_of_week"`
	Hours       []float64                  `json:"hours"`
	Minutes     []float64                  `json:"minutes"`
	Monthly     []DataScheduleMonthlyState `json:"monthly"`
}

type DataScheduleMonthlyState struct {
	Week    float64 `json:"week"`
	Weekday string  `json:"weekday"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
