// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_trigger_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_trigger_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryTriggerScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfts *Resource) Type() string {
	return "azurerm_data_factory_trigger_schedule"
}

// LocalName returns the local name for [Resource].
func (adfts *Resource) LocalName() string {
	return adfts.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfts *Resource) Configuration() interface{} {
	return adfts.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfts *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfts)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfts *Resource) Dependencies() terra.Dependencies {
	return adfts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfts *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfts.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfts *Resource) Attributes() azurermDataFactoryTriggerScheduleAttributes {
	return azurermDataFactoryTriggerScheduleAttributes{ref: terra.ReferenceResource(adfts)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfts *Resource) ImportState(state io.Reader) error {
	adfts.state = &azurermDataFactoryTriggerScheduleState{}
	if err := json.NewDecoder(state).Decode(adfts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfts.Type(), adfts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfts *Resource) State() (*azurermDataFactoryTriggerScheduleState, bool) {
	return adfts.state, adfts.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfts *Resource) StateMust() *azurermDataFactoryTriggerScheduleState {
	if adfts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfts.Type(), adfts.LocalName()))
	}
	return adfts.state
}

// Args contains the configurations for azurerm_data_factory_trigger_schedule.
type Args struct {
	// Activated: bool, optional
	Activated terra.BoolValue `hcl:"activated,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// Frequency: string, optional
	Frequency terra.StringValue `hcl:"frequency,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PipelineName: string, optional
	PipelineName terra.StringValue `hcl:"pipeline_name,attr"`
	// PipelineParameters: map of string, optional
	PipelineParameters terra.MapValue[terra.StringValue] `hcl:"pipeline_parameters,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// Pipeline: min=0
	Pipeline []Pipeline `hcl:"pipeline,block" validate:"min=0"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryTriggerScheduleAttributes struct {
	ref terra.Reference
}

// Activated returns a reference to field activated of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Activated() terra.BoolValue {
	return terra.ReferenceAsBool(adfts.ref.Append("activated"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfts.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("description"))
}

// EndTime returns a reference to field end_time of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("end_time"))
}

// Frequency returns a reference to field frequency of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("frequency"))
}

// Id returns a reference to field id of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("id"))
}

// Interval returns a reference to field interval of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(adfts.ref.Append("interval"))
}

// Name returns a reference to field name of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("name"))
}

// PipelineName returns a reference to field pipeline_name of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) PipelineName() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("pipeline_name"))
}

// PipelineParameters returns a reference to field pipeline_parameters of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) PipelineParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfts.ref.Append("pipeline_parameters"))
}

// StartTime returns a reference to field start_time of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("start_time"))
}

// TimeZone returns a reference to field time_zone of azurerm_data_factory_trigger_schedule.
func (adfts azurermDataFactoryTriggerScheduleAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(adfts.ref.Append("time_zone"))
}

func (adfts azurermDataFactoryTriggerScheduleAttributes) Pipeline() terra.ListValue[PipelineAttributes] {
	return terra.ReferenceAsList[PipelineAttributes](adfts.ref.Append("pipeline"))
}

func (adfts azurermDataFactoryTriggerScheduleAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](adfts.ref.Append("schedule"))
}

func (adfts azurermDataFactoryTriggerScheduleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfts.ref.Append("timeouts"))
}

type azurermDataFactoryTriggerScheduleState struct {
	Activated          bool              `json:"activated"`
	Annotations        []string          `json:"annotations"`
	DataFactoryId      string            `json:"data_factory_id"`
	Description        string            `json:"description"`
	EndTime            string            `json:"end_time"`
	Frequency          string            `json:"frequency"`
	Id                 string            `json:"id"`
	Interval           float64           `json:"interval"`
	Name               string            `json:"name"`
	PipelineName       string            `json:"pipeline_name"`
	PipelineParameters map[string]string `json:"pipeline_parameters"`
	StartTime          string            `json:"start_time"`
	TimeZone           string            `json:"time_zone"`
	Pipeline           []PipelineState   `json:"pipeline"`
	Schedule           []ScheduleState   `json:"schedule"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
