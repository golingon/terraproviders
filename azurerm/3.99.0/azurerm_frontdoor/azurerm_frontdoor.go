// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_frontdoor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_frontdoor.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermFrontdoorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (af *Resource) Type() string {
	return "azurerm_frontdoor"
}

// LocalName returns the local name for [Resource].
func (af *Resource) LocalName() string {
	return af.Name
}

// Configuration returns the configuration (args) for [Resource].
func (af *Resource) Configuration() interface{} {
	return af.Args
}

// DependOn is used for other resources to depend on [Resource].
func (af *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(af)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (af *Resource) Dependencies() terra.Dependencies {
	return af.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (af *Resource) LifecycleManagement() *terra.Lifecycle {
	return af.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (af *Resource) Attributes() azurermFrontdoorAttributes {
	return azurermFrontdoorAttributes{ref: terra.ReferenceResource(af)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (af *Resource) ImportState(state io.Reader) error {
	af.state = &azurermFrontdoorState{}
	if err := json.NewDecoder(state).Decode(af.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", af.Type(), af.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (af *Resource) State() (*azurermFrontdoorState, bool) {
	return af.state, af.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (af *Resource) StateMust() *azurermFrontdoorState {
	if af.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", af.Type(), af.LocalName()))
	}
	return af.state
}

// Args contains the configurations for azurerm_frontdoor.
type Args struct {
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerEnabled: bool, optional
	LoadBalancerEnabled terra.BoolValue `hcl:"load_balancer_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// BackendPool: min=1
	BackendPool []BackendPool `hcl:"backend_pool,block" validate:"min=1"`
	// BackendPoolHealthProbe: min=1,max=5000
	BackendPoolHealthProbe []BackendPoolHealthProbe `hcl:"backend_pool_health_probe,block" validate:"min=1,max=5000"`
	// BackendPoolLoadBalancing: min=1,max=5000
	BackendPoolLoadBalancing []BackendPoolLoadBalancing `hcl:"backend_pool_load_balancing,block" validate:"min=1,max=5000"`
	// BackendPoolSettings: min=0
	BackendPoolSettings []BackendPoolSettings `hcl:"backend_pool_settings,block" validate:"min=0"`
	// FrontendEndpoint: min=1,max=500
	FrontendEndpoint []FrontendEndpoint `hcl:"frontend_endpoint,block" validate:"min=1,max=500"`
	// RoutingRule: min=1,max=500
	RoutingRule []RoutingRule `hcl:"routing_rule,block" validate:"min=1,max=500"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermFrontdoorAttributes struct {
	ref terra.Reference
}

// BackendPoolHealthProbes returns a reference to field backend_pool_health_probes of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) BackendPoolHealthProbes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("backend_pool_health_probes"))
}

// BackendPoolLoadBalancingSettings returns a reference to field backend_pool_load_balancing_settings of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) BackendPoolLoadBalancingSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("backend_pool_load_balancing_settings"))
}

// BackendPools returns a reference to field backend_pools of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) BackendPools() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("backend_pools"))
}

// Cname returns a reference to field cname of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) Cname() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("cname"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("friendly_name"))
}

// FrontendEndpoints returns a reference to field frontend_endpoints of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) FrontendEndpoints() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("frontend_endpoints"))
}

// HeaderFrontdoorId returns a reference to field header_frontdoor_id of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) HeaderFrontdoorId() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("header_frontdoor_id"))
}

// Id returns a reference to field id of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("id"))
}

// LoadBalancerEnabled returns a reference to field load_balancer_enabled of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) LoadBalancerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(af.ref.Append("load_balancer_enabled"))
}

// Name returns a reference to field name of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("resource_group_name"))
}

// RoutingRules returns a reference to field routing_rules of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) RoutingRules() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("routing_rules"))
}

// Tags returns a reference to field tags of azurerm_frontdoor.
func (af azurermFrontdoorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("tags"))
}

func (af azurermFrontdoorAttributes) ExplicitResourceOrder() terra.ListValue[ExplicitResourceOrderAttributes] {
	return terra.ReferenceAsList[ExplicitResourceOrderAttributes](af.ref.Append("explicit_resource_order"))
}

func (af azurermFrontdoorAttributes) BackendPool() terra.ListValue[BackendPoolAttributes] {
	return terra.ReferenceAsList[BackendPoolAttributes](af.ref.Append("backend_pool"))
}

func (af azurermFrontdoorAttributes) BackendPoolHealthProbe() terra.ListValue[BackendPoolHealthProbeAttributes] {
	return terra.ReferenceAsList[BackendPoolHealthProbeAttributes](af.ref.Append("backend_pool_health_probe"))
}

func (af azurermFrontdoorAttributes) BackendPoolLoadBalancing() terra.ListValue[BackendPoolLoadBalancingAttributes] {
	return terra.ReferenceAsList[BackendPoolLoadBalancingAttributes](af.ref.Append("backend_pool_load_balancing"))
}

func (af azurermFrontdoorAttributes) BackendPoolSettings() terra.ListValue[BackendPoolSettingsAttributes] {
	return terra.ReferenceAsList[BackendPoolSettingsAttributes](af.ref.Append("backend_pool_settings"))
}

func (af azurermFrontdoorAttributes) FrontendEndpoint() terra.ListValue[FrontendEndpointAttributes] {
	return terra.ReferenceAsList[FrontendEndpointAttributes](af.ref.Append("frontend_endpoint"))
}

func (af azurermFrontdoorAttributes) RoutingRule() terra.ListValue[RoutingRuleAttributes] {
	return terra.ReferenceAsList[RoutingRuleAttributes](af.ref.Append("routing_rule"))
}

func (af azurermFrontdoorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](af.ref.Append("timeouts"))
}

type azurermFrontdoorState struct {
	BackendPoolHealthProbes          map[string]string               `json:"backend_pool_health_probes"`
	BackendPoolLoadBalancingSettings map[string]string               `json:"backend_pool_load_balancing_settings"`
	BackendPools                     map[string]string               `json:"backend_pools"`
	Cname                            string                          `json:"cname"`
	FriendlyName                     string                          `json:"friendly_name"`
	FrontendEndpoints                map[string]string               `json:"frontend_endpoints"`
	HeaderFrontdoorId                string                          `json:"header_frontdoor_id"`
	Id                               string                          `json:"id"`
	LoadBalancerEnabled              bool                            `json:"load_balancer_enabled"`
	Name                             string                          `json:"name"`
	ResourceGroupName                string                          `json:"resource_group_name"`
	RoutingRules                     map[string]string               `json:"routing_rules"`
	Tags                             map[string]string               `json:"tags"`
	ExplicitResourceOrder            []ExplicitResourceOrderState    `json:"explicit_resource_order"`
	BackendPool                      []BackendPoolState              `json:"backend_pool"`
	BackendPoolHealthProbe           []BackendPoolHealthProbeState   `json:"backend_pool_health_probe"`
	BackendPoolLoadBalancing         []BackendPoolLoadBalancingState `json:"backend_pool_load_balancing"`
	BackendPoolSettings              []BackendPoolSettingsState      `json:"backend_pool_settings"`
	FrontendEndpoint                 []FrontendEndpointState         `json:"frontend_endpoint"`
	RoutingRule                      []RoutingRuleState              `json:"routing_rule"`
	Timeouts                         *TimeoutsState                  `json:"timeouts"`
}
