// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_stream_analytics_output_synapse

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_stream_analytics_output_synapse.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStreamAnalyticsOutputSynapseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asaos *Resource) Type() string {
	return "azurerm_stream_analytics_output_synapse"
}

// LocalName returns the local name for [Resource].
func (asaos *Resource) LocalName() string {
	return asaos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asaos *Resource) Configuration() interface{} {
	return asaos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asaos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asaos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asaos *Resource) Dependencies() terra.Dependencies {
	return asaos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asaos *Resource) LifecycleManagement() *terra.Lifecycle {
	return asaos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asaos *Resource) Attributes() azurermStreamAnalyticsOutputSynapseAttributes {
	return azurermStreamAnalyticsOutputSynapseAttributes{ref: terra.ReferenceResource(asaos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asaos *Resource) ImportState(state io.Reader) error {
	asaos.state = &azurermStreamAnalyticsOutputSynapseState{}
	if err := json.NewDecoder(state).Decode(asaos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asaos.Type(), asaos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asaos *Resource) State() (*azurermStreamAnalyticsOutputSynapseState, bool) {
	return asaos.state, asaos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asaos *Resource) StateMust() *azurermStreamAnalyticsOutputSynapseState {
	if asaos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asaos.Type(), asaos.LocalName()))
	}
	return asaos.state
}

// Args contains the configurations for azurerm_stream_analytics_output_synapse.
type Args struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Server: string, required
	Server terra.StringValue `hcl:"server,attr" validate:"required"`
	// StreamAnalyticsJobName: string, required
	StreamAnalyticsJobName terra.StringValue `hcl:"stream_analytics_job_name,attr" validate:"required"`
	// Table: string, required
	Table terra.StringValue `hcl:"table,attr" validate:"required"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStreamAnalyticsOutputSynapseAttributes struct {
	ref terra.Reference
}

// Database returns a reference to field database of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("database"))
}

// Id returns a reference to field id of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("password"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("resource_group_name"))
}

// Server returns a reference to field server of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Server() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("server"))
}

// StreamAnalyticsJobName returns a reference to field stream_analytics_job_name of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) StreamAnalyticsJobName() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("stream_analytics_job_name"))
}

// Table returns a reference to field table of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Table() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("table"))
}

// User returns a reference to field user of azurerm_stream_analytics_output_synapse.
func (asaos azurermStreamAnalyticsOutputSynapseAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(asaos.ref.Append("user"))
}

func (asaos azurermStreamAnalyticsOutputSynapseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asaos.ref.Append("timeouts"))
}

type azurermStreamAnalyticsOutputSynapseState struct {
	Database               string         `json:"database"`
	Id                     string         `json:"id"`
	Name                   string         `json:"name"`
	Password               string         `json:"password"`
	ResourceGroupName      string         `json:"resource_group_name"`
	Server                 string         `json:"server"`
	StreamAnalyticsJobName string         `json:"stream_analytics_job_name"`
	Table                  string         `json:"table"`
	User                   string         `json:"user"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
