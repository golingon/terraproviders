// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_vpn_server_configuration_policy_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_vpn_server_configuration_policy_group.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVpnServerConfigurationPolicyGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avscpg *Resource) Type() string {
	return "azurerm_vpn_server_configuration_policy_group"
}

// LocalName returns the local name for [Resource].
func (avscpg *Resource) LocalName() string {
	return avscpg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avscpg *Resource) Configuration() interface{} {
	return avscpg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avscpg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avscpg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avscpg *Resource) Dependencies() terra.Dependencies {
	return avscpg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avscpg *Resource) LifecycleManagement() *terra.Lifecycle {
	return avscpg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avscpg *Resource) Attributes() azurermVpnServerConfigurationPolicyGroupAttributes {
	return azurermVpnServerConfigurationPolicyGroupAttributes{ref: terra.ReferenceResource(avscpg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avscpg *Resource) ImportState(state io.Reader) error {
	avscpg.state = &azurermVpnServerConfigurationPolicyGroupState{}
	if err := json.NewDecoder(state).Decode(avscpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avscpg.Type(), avscpg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avscpg *Resource) State() (*azurermVpnServerConfigurationPolicyGroupState, bool) {
	return avscpg.state, avscpg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avscpg *Resource) StateMust() *azurermVpnServerConfigurationPolicyGroupState {
	if avscpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avscpg.Type(), avscpg.LocalName()))
	}
	return avscpg.state
}

// Args contains the configurations for azurerm_vpn_server_configuration_policy_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// VpnServerConfigurationId: string, required
	VpnServerConfigurationId terra.StringValue `hcl:"vpn_server_configuration_id,attr" validate:"required"`
	// Policy: min=1
	Policy []Policy `hcl:"policy,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVpnServerConfigurationPolicyGroupAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_vpn_server_configuration_policy_group.
func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avscpg.ref.Append("id"))
}

// IsDefault returns a reference to field is_default of azurerm_vpn_server_configuration_policy_group.
func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(avscpg.ref.Append("is_default"))
}

// Name returns a reference to field name of azurerm_vpn_server_configuration_policy_group.
func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avscpg.ref.Append("name"))
}

// Priority returns a reference to field priority of azurerm_vpn_server_configuration_policy_group.
func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(avscpg.ref.Append("priority"))
}

// VpnServerConfigurationId returns a reference to field vpn_server_configuration_id of azurerm_vpn_server_configuration_policy_group.
func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) VpnServerConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(avscpg.ref.Append("vpn_server_configuration_id"))
}

func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) Policy() terra.SetValue[PolicyAttributes] {
	return terra.ReferenceAsSet[PolicyAttributes](avscpg.ref.Append("policy"))
}

func (avscpg azurermVpnServerConfigurationPolicyGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avscpg.ref.Append("timeouts"))
}

type azurermVpnServerConfigurationPolicyGroupState struct {
	Id                       string         `json:"id"`
	IsDefault                bool           `json:"is_default"`
	Name                     string         `json:"name"`
	Priority                 float64        `json:"priority"`
	VpnServerConfigurationId string         `json:"vpn_server_configuration_id"`
	Policy                   []PolicyState  `json:"policy"`
	Timeouts                 *TimeoutsState `json:"timeouts"`
}
