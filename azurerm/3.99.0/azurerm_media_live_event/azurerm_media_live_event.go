// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_live_event

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_live_event.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaLiveEventState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amle *Resource) Type() string {
	return "azurerm_media_live_event"
}

// LocalName returns the local name for [Resource].
func (amle *Resource) LocalName() string {
	return amle.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amle *Resource) Configuration() interface{} {
	return amle.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amle *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amle)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amle *Resource) Dependencies() terra.Dependencies {
	return amle.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amle *Resource) LifecycleManagement() *terra.Lifecycle {
	return amle.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amle *Resource) Attributes() azurermMediaLiveEventAttributes {
	return azurermMediaLiveEventAttributes{ref: terra.ReferenceResource(amle)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amle *Resource) ImportState(state io.Reader) error {
	amle.state = &azurermMediaLiveEventState{}
	if err := json.NewDecoder(state).Decode(amle.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amle.Type(), amle.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amle *Resource) State() (*azurermMediaLiveEventState, bool) {
	return amle.state, amle.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amle *Resource) StateMust() *azurermMediaLiveEventState {
	if amle.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amle.Type(), amle.LocalName()))
	}
	return amle.state
}

// Args contains the configurations for azurerm_media_live_event.
type Args struct {
	// AutoStartEnabled: bool, optional
	AutoStartEnabled terra.BoolValue `hcl:"auto_start_enabled,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HostnamePrefix: string, optional
	HostnamePrefix terra.StringValue `hcl:"hostname_prefix,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StreamOptions: list of string, optional
	StreamOptions terra.ListValue[terra.StringValue] `hcl:"stream_options,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TranscriptionLanguages: list of string, optional
	TranscriptionLanguages terra.ListValue[terra.StringValue] `hcl:"transcription_languages,attr"`
	// UseStaticHostname: bool, optional
	UseStaticHostname terra.BoolValue `hcl:"use_static_hostname,attr"`
	// CrossSiteAccessPolicy: optional
	CrossSiteAccessPolicy *CrossSiteAccessPolicy `hcl:"cross_site_access_policy,block"`
	// Encoding: optional
	Encoding *Encoding `hcl:"encoding,block"`
	// Input: required
	Input *Input `hcl:"input,block" validate:"required"`
	// Preview: optional
	Preview *Preview `hcl:"preview,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaLiveEventAttributes struct {
	ref terra.Reference
}

// AutoStartEnabled returns a reference to field auto_start_enabled of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) AutoStartEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amle.ref.Append("auto_start_enabled"))
}

// Description returns a reference to field description of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("description"))
}

// HostnamePrefix returns a reference to field hostname_prefix of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) HostnamePrefix() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("hostname_prefix"))
}

// Id returns a reference to field id of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("location"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amle.ref.Append("resource_group_name"))
}

// StreamOptions returns a reference to field stream_options of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) StreamOptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amle.ref.Append("stream_options"))
}

// Tags returns a reference to field tags of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amle.ref.Append("tags"))
}

// TranscriptionLanguages returns a reference to field transcription_languages of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) TranscriptionLanguages() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amle.ref.Append("transcription_languages"))
}

// UseStaticHostname returns a reference to field use_static_hostname of azurerm_media_live_event.
func (amle azurermMediaLiveEventAttributes) UseStaticHostname() terra.BoolValue {
	return terra.ReferenceAsBool(amle.ref.Append("use_static_hostname"))
}

func (amle azurermMediaLiveEventAttributes) CrossSiteAccessPolicy() terra.ListValue[CrossSiteAccessPolicyAttributes] {
	return terra.ReferenceAsList[CrossSiteAccessPolicyAttributes](amle.ref.Append("cross_site_access_policy"))
}

func (amle azurermMediaLiveEventAttributes) Encoding() terra.ListValue[EncodingAttributes] {
	return terra.ReferenceAsList[EncodingAttributes](amle.ref.Append("encoding"))
}

func (amle azurermMediaLiveEventAttributes) Input() terra.ListValue[InputAttributes] {
	return terra.ReferenceAsList[InputAttributes](amle.ref.Append("input"))
}

func (amle azurermMediaLiveEventAttributes) Preview() terra.ListValue[PreviewAttributes] {
	return terra.ReferenceAsList[PreviewAttributes](amle.ref.Append("preview"))
}

func (amle azurermMediaLiveEventAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amle.ref.Append("timeouts"))
}

type azurermMediaLiveEventState struct {
	AutoStartEnabled         bool                         `json:"auto_start_enabled"`
	Description              string                       `json:"description"`
	HostnamePrefix           string                       `json:"hostname_prefix"`
	Id                       string                       `json:"id"`
	Location                 string                       `json:"location"`
	MediaServicesAccountName string                       `json:"media_services_account_name"`
	Name                     string                       `json:"name"`
	ResourceGroupName        string                       `json:"resource_group_name"`
	StreamOptions            []string                     `json:"stream_options"`
	Tags                     map[string]string            `json:"tags"`
	TranscriptionLanguages   []string                     `json:"transcription_languages"`
	UseStaticHostname        bool                         `json:"use_static_hostname"`
	CrossSiteAccessPolicy    []CrossSiteAccessPolicyState `json:"cross_site_access_policy"`
	Encoding                 []EncodingState              `json:"encoding"`
	Input                    []InputState                 `json:"input"`
	Preview                  []PreviewState               `json:"preview"`
	Timeouts                 *TimeoutsState               `json:"timeouts"`
}
