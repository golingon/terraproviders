// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_arc_kubernetes_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_arc_kubernetes_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermArcKubernetesClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aakc *Resource) Type() string {
	return "azurerm_arc_kubernetes_cluster"
}

// LocalName returns the local name for [Resource].
func (aakc *Resource) LocalName() string {
	return aakc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aakc *Resource) Configuration() interface{} {
	return aakc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aakc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aakc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aakc *Resource) Dependencies() terra.Dependencies {
	return aakc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aakc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aakc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aakc *Resource) Attributes() azurermArcKubernetesClusterAttributes {
	return azurermArcKubernetesClusterAttributes{ref: terra.ReferenceResource(aakc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aakc *Resource) ImportState(state io.Reader) error {
	aakc.state = &azurermArcKubernetesClusterState{}
	if err := json.NewDecoder(state).Decode(aakc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aakc.Type(), aakc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aakc *Resource) State() (*azurermArcKubernetesClusterState, bool) {
	return aakc.state, aakc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aakc *Resource) StateMust() *azurermArcKubernetesClusterState {
	if aakc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aakc.Type(), aakc.LocalName()))
	}
	return aakc.state
}

// Args contains the configurations for azurerm_arc_kubernetes_cluster.
type Args struct {
	// AgentPublicKeyCertificate: string, required
	AgentPublicKeyCertificate terra.StringValue `hcl:"agent_public_key_certificate,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermArcKubernetesClusterAttributes struct {
	ref terra.Reference
}

// AgentPublicKeyCertificate returns a reference to field agent_public_key_certificate of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) AgentPublicKeyCertificate() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("agent_public_key_certificate"))
}

// AgentVersion returns a reference to field agent_version of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) AgentVersion() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("agent_version"))
}

// Distribution returns a reference to field distribution of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Distribution() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("distribution"))
}

// Id returns a reference to field id of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("id"))
}

// Infrastructure returns a reference to field infrastructure of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Infrastructure() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("infrastructure"))
}

// KubernetesVersion returns a reference to field kubernetes_version of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) KubernetesVersion() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("kubernetes_version"))
}

// Location returns a reference to field location of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("name"))
}

// Offering returns a reference to field offering of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Offering() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("offering"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aakc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aakc.ref.Append("tags"))
}

// TotalCoreCount returns a reference to field total_core_count of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) TotalCoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aakc.ref.Append("total_core_count"))
}

// TotalNodeCount returns a reference to field total_node_count of azurerm_arc_kubernetes_cluster.
func (aakc azurermArcKubernetesClusterAttributes) TotalNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aakc.ref.Append("total_node_count"))
}

func (aakc azurermArcKubernetesClusterAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aakc.ref.Append("identity"))
}

func (aakc azurermArcKubernetesClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aakc.ref.Append("timeouts"))
}

type azurermArcKubernetesClusterState struct {
	AgentPublicKeyCertificate string            `json:"agent_public_key_certificate"`
	AgentVersion              string            `json:"agent_version"`
	Distribution              string            `json:"distribution"`
	Id                        string            `json:"id"`
	Infrastructure            string            `json:"infrastructure"`
	KubernetesVersion         string            `json:"kubernetes_version"`
	Location                  string            `json:"location"`
	Name                      string            `json:"name"`
	Offering                  string            `json:"offering"`
	ResourceGroupName         string            `json:"resource_group_name"`
	Tags                      map[string]string `json:"tags"`
	TotalCoreCount            float64           `json:"total_core_count"`
	TotalNodeCount            float64           `json:"total_node_count"`
	Identity                  []IdentityState   `json:"identity"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
