// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_resource_group_cost_management_view

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Dataset struct {
	// Granularity: string, required
	Granularity terra.StringValue `hcl:"granularity,attr" validate:"required"`
	// DatasetAggregation: min=1
	Aggregation []DatasetAggregation `hcl:"aggregation,block" validate:"min=1"`
	// DatasetGrouping: min=0
	Grouping []DatasetGrouping `hcl:"grouping,block" validate:"min=0"`
	// DatasetSorting: min=0
	Sorting []DatasetSorting `hcl:"sorting,block" validate:"min=0"`
}

type DatasetAggregation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DatasetGrouping struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DatasetSorting struct {
	// Direction: string, required
	Direction terra.StringValue `hcl:"direction,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Kpi struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Pivot struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DatasetAttributes struct {
	ref terra.Reference
}

func (d DatasetAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatasetAttributes) InternalWithRef(ref terra.Reference) DatasetAttributes {
	return DatasetAttributes{ref: ref}
}

func (d DatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatasetAttributes) Granularity() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("granularity"))
}

func (d DatasetAttributes) Aggregation() terra.SetValue[DatasetAggregationAttributes] {
	return terra.ReferenceAsSet[DatasetAggregationAttributes](d.ref.Append("aggregation"))
}

func (d DatasetAttributes) Grouping() terra.ListValue[DatasetGroupingAttributes] {
	return terra.ReferenceAsList[DatasetGroupingAttributes](d.ref.Append("grouping"))
}

func (d DatasetAttributes) Sorting() terra.ListValue[DatasetSortingAttributes] {
	return terra.ReferenceAsList[DatasetSortingAttributes](d.ref.Append("sorting"))
}

type DatasetAggregationAttributes struct {
	ref terra.Reference
}

func (a DatasetAggregationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DatasetAggregationAttributes) InternalWithRef(ref terra.Reference) DatasetAggregationAttributes {
	return DatasetAggregationAttributes{ref: ref}
}

func (a DatasetAggregationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DatasetAggregationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("column_name"))
}

func (a DatasetAggregationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

type DatasetGroupingAttributes struct {
	ref terra.Reference
}

func (g DatasetGroupingAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DatasetGroupingAttributes) InternalWithRef(ref terra.Reference) DatasetGroupingAttributes {
	return DatasetGroupingAttributes{ref: ref}
}

func (g DatasetGroupingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DatasetGroupingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g DatasetGroupingAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("type"))
}

type DatasetSortingAttributes struct {
	ref terra.Reference
}

func (s DatasetSortingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasetSortingAttributes) InternalWithRef(ref terra.Reference) DatasetSortingAttributes {
	return DatasetSortingAttributes{ref: ref}
}

func (s DatasetSortingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasetSortingAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("direction"))
}

func (s DatasetSortingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

type KpiAttributes struct {
	ref terra.Reference
}

func (k KpiAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KpiAttributes) InternalWithRef(ref terra.Reference) KpiAttributes {
	return KpiAttributes{ref: ref}
}

func (k KpiAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KpiAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("type"))
}

type PivotAttributes struct {
	ref terra.Reference
}

func (p PivotAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PivotAttributes) InternalWithRef(ref terra.Reference) PivotAttributes {
	return PivotAttributes{ref: ref}
}

func (p PivotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PivotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p PivotAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DatasetState struct {
	Granularity string                    `json:"granularity"`
	Aggregation []DatasetAggregationState `json:"aggregation"`
	Grouping    []DatasetGroupingState    `json:"grouping"`
	Sorting     []DatasetSortingState     `json:"sorting"`
}

type DatasetAggregationState struct {
	ColumnName string `json:"column_name"`
	Name       string `json:"name"`
}

type DatasetGroupingState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DatasetSortingState struct {
	Direction string `json:"direction"`
	Name      string `json:"name"`
}

type KpiState struct {
	Type string `json:"type"`
}

type PivotState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
