// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_express_route_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_express_route_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermExpressRouteConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aerc *Resource) Type() string {
	return "azurerm_express_route_connection"
}

// LocalName returns the local name for [Resource].
func (aerc *Resource) LocalName() string {
	return aerc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aerc *Resource) Configuration() interface{} {
	return aerc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aerc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aerc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aerc *Resource) Dependencies() terra.Dependencies {
	return aerc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aerc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aerc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aerc *Resource) Attributes() azurermExpressRouteConnectionAttributes {
	return azurermExpressRouteConnectionAttributes{ref: terra.ReferenceResource(aerc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aerc *Resource) ImportState(state io.Reader) error {
	aerc.state = &azurermExpressRouteConnectionState{}
	if err := json.NewDecoder(state).Decode(aerc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aerc.Type(), aerc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aerc *Resource) State() (*azurermExpressRouteConnectionState, bool) {
	return aerc.state, aerc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aerc *Resource) StateMust() *azurermExpressRouteConnectionState {
	if aerc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aerc.Type(), aerc.LocalName()))
	}
	return aerc.state
}

// Args contains the configurations for azurerm_express_route_connection.
type Args struct {
	// AuthorizationKey: string, optional
	AuthorizationKey terra.StringValue `hcl:"authorization_key,attr"`
	// EnableInternetSecurity: bool, optional
	EnableInternetSecurity terra.BoolValue `hcl:"enable_internet_security,attr"`
	// ExpressRouteCircuitPeeringId: string, required
	ExpressRouteCircuitPeeringId terra.StringValue `hcl:"express_route_circuit_peering_id,attr" validate:"required"`
	// ExpressRouteGatewayBypassEnabled: bool, optional
	ExpressRouteGatewayBypassEnabled terra.BoolValue `hcl:"express_route_gateway_bypass_enabled,attr"`
	// ExpressRouteGatewayId: string, required
	ExpressRouteGatewayId terra.StringValue `hcl:"express_route_gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoutingWeight: number, optional
	RoutingWeight terra.NumberValue `hcl:"routing_weight,attr"`
	// Routing: optional
	Routing *Routing `hcl:"routing,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermExpressRouteConnectionAttributes struct {
	ref terra.Reference
}

// AuthorizationKey returns a reference to field authorization_key of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("authorization_key"))
}

// EnableInternetSecurity returns a reference to field enable_internet_security of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) EnableInternetSecurity() terra.BoolValue {
	return terra.ReferenceAsBool(aerc.ref.Append("enable_internet_security"))
}

// ExpressRouteCircuitPeeringId returns a reference to field express_route_circuit_peering_id of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) ExpressRouteCircuitPeeringId() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("express_route_circuit_peering_id"))
}

// ExpressRouteGatewayBypassEnabled returns a reference to field express_route_gateway_bypass_enabled of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) ExpressRouteGatewayBypassEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aerc.ref.Append("express_route_gateway_bypass_enabled"))
}

// ExpressRouteGatewayId returns a reference to field express_route_gateway_id of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) ExpressRouteGatewayId() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("express_route_gateway_id"))
}

// Id returns a reference to field id of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("name"))
}

// RoutingWeight returns a reference to field routing_weight of azurerm_express_route_connection.
func (aerc azurermExpressRouteConnectionAttributes) RoutingWeight() terra.NumberValue {
	return terra.ReferenceAsNumber(aerc.ref.Append("routing_weight"))
}

func (aerc azurermExpressRouteConnectionAttributes) Routing() terra.ListValue[RoutingAttributes] {
	return terra.ReferenceAsList[RoutingAttributes](aerc.ref.Append("routing"))
}

func (aerc azurermExpressRouteConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aerc.ref.Append("timeouts"))
}

type azurermExpressRouteConnectionState struct {
	AuthorizationKey                 string         `json:"authorization_key"`
	EnableInternetSecurity           bool           `json:"enable_internet_security"`
	ExpressRouteCircuitPeeringId     string         `json:"express_route_circuit_peering_id"`
	ExpressRouteGatewayBypassEnabled bool           `json:"express_route_gateway_bypass_enabled"`
	ExpressRouteGatewayId            string         `json:"express_route_gateway_id"`
	Id                               string         `json:"id"`
	Name                             string         `json:"name"`
	RoutingWeight                    float64        `json:"routing_weight"`
	Routing                          []RoutingState `json:"routing"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
