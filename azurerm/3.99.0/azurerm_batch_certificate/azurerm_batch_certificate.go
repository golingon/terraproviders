// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_batch_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_batch_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBatchCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abc *Resource) Type() string {
	return "azurerm_batch_certificate"
}

// LocalName returns the local name for [Resource].
func (abc *Resource) LocalName() string {
	return abc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abc *Resource) Configuration() interface{} {
	return abc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abc *Resource) Dependencies() terra.Dependencies {
	return abc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abc *Resource) LifecycleManagement() *terra.Lifecycle {
	return abc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abc *Resource) Attributes() azurermBatchCertificateAttributes {
	return azurermBatchCertificateAttributes{ref: terra.ReferenceResource(abc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abc *Resource) ImportState(state io.Reader) error {
	abc.state = &azurermBatchCertificateState{}
	if err := json.NewDecoder(state).Decode(abc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abc.Type(), abc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abc *Resource) State() (*azurermBatchCertificateState, bool) {
	return abc.state, abc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abc *Resource) StateMust() *azurermBatchCertificateState {
	if abc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abc.Type(), abc.LocalName()))
	}
	return abc.state
}

// Args contains the configurations for azurerm_batch_certificate.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Thumbprint: string, required
	Thumbprint terra.StringValue `hcl:"thumbprint,attr" validate:"required"`
	// ThumbprintAlgorithm: string, required
	ThumbprintAlgorithm terra.StringValue `hcl:"thumbprint_algorithm,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBatchCertificateAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("account_name"))
}

// Certificate returns a reference to field certificate of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("certificate"))
}

// Format returns a reference to field format of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("format"))
}

// Id returns a reference to field id of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("password"))
}

// PublicData returns a reference to field public_data of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) PublicData() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("public_data"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("resource_group_name"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("thumbprint"))
}

// ThumbprintAlgorithm returns a reference to field thumbprint_algorithm of azurerm_batch_certificate.
func (abc azurermBatchCertificateAttributes) ThumbprintAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(abc.ref.Append("thumbprint_algorithm"))
}

func (abc azurermBatchCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abc.ref.Append("timeouts"))
}

type azurermBatchCertificateState struct {
	AccountName         string         `json:"account_name"`
	Certificate         string         `json:"certificate"`
	Format              string         `json:"format"`
	Id                  string         `json:"id"`
	Name                string         `json:"name"`
	Password            string         `json:"password"`
	PublicData          string         `json:"public_data"`
	ResourceGroupName   string         `json:"resource_group_name"`
	Thumbprint          string         `json:"thumbprint"`
	ThumbprintAlgorithm string         `json:"thumbprint_algorithm"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
