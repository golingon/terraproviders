// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_services_account_filter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_services_account_filter.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaServicesAccountFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsaf *Resource) Type() string {
	return "azurerm_media_services_account_filter"
}

// LocalName returns the local name for [Resource].
func (amsaf *Resource) LocalName() string {
	return amsaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsaf *Resource) Configuration() interface{} {
	return amsaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsaf *Resource) Dependencies() terra.Dependencies {
	return amsaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsaf *Resource) Attributes() azurermMediaServicesAccountFilterAttributes {
	return azurermMediaServicesAccountFilterAttributes{ref: terra.ReferenceResource(amsaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsaf *Resource) ImportState(state io.Reader) error {
	amsaf.state = &azurermMediaServicesAccountFilterState{}
	if err := json.NewDecoder(state).Decode(amsaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsaf.Type(), amsaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsaf *Resource) State() (*azurermMediaServicesAccountFilterState, bool) {
	return amsaf.state, amsaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsaf *Resource) StateMust() *azurermMediaServicesAccountFilterState {
	if amsaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsaf.Type(), amsaf.LocalName()))
	}
	return amsaf.state
}

// Args contains the configurations for azurerm_media_services_account_filter.
type Args struct {
	// FirstQualityBitrate: number, optional
	FirstQualityBitrate terra.NumberValue `hcl:"first_quality_bitrate,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MediaServicesAccountName: string, required
	MediaServicesAccountName terra.StringValue `hcl:"media_services_account_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// PresentationTimeRange: optional
	PresentationTimeRange *PresentationTimeRange `hcl:"presentation_time_range,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrackSelection: min=0
	TrackSelection []TrackSelection `hcl:"track_selection,block" validate:"min=0"`
}

type azurermMediaServicesAccountFilterAttributes struct {
	ref terra.Reference
}

// FirstQualityBitrate returns a reference to field first_quality_bitrate of azurerm_media_services_account_filter.
func (amsaf azurermMediaServicesAccountFilterAttributes) FirstQualityBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(amsaf.ref.Append("first_quality_bitrate"))
}

// Id returns a reference to field id of azurerm_media_services_account_filter.
func (amsaf azurermMediaServicesAccountFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsaf.ref.Append("id"))
}

// MediaServicesAccountName returns a reference to field media_services_account_name of azurerm_media_services_account_filter.
func (amsaf azurermMediaServicesAccountFilterAttributes) MediaServicesAccountName() terra.StringValue {
	return terra.ReferenceAsString(amsaf.ref.Append("media_services_account_name"))
}

// Name returns a reference to field name of azurerm_media_services_account_filter.
func (amsaf azurermMediaServicesAccountFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amsaf.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_services_account_filter.
func (amsaf azurermMediaServicesAccountFilterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amsaf.ref.Append("resource_group_name"))
}

func (amsaf azurermMediaServicesAccountFilterAttributes) PresentationTimeRange() terra.ListValue[PresentationTimeRangeAttributes] {
	return terra.ReferenceAsList[PresentationTimeRangeAttributes](amsaf.ref.Append("presentation_time_range"))
}

func (amsaf azurermMediaServicesAccountFilterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsaf.ref.Append("timeouts"))
}

func (amsaf azurermMediaServicesAccountFilterAttributes) TrackSelection() terra.ListValue[TrackSelectionAttributes] {
	return terra.ReferenceAsList[TrackSelectionAttributes](amsaf.ref.Append("track_selection"))
}

type azurermMediaServicesAccountFilterState struct {
	FirstQualityBitrate      float64                      `json:"first_quality_bitrate"`
	Id                       string                       `json:"id"`
	MediaServicesAccountName string                       `json:"media_services_account_name"`
	Name                     string                       `json:"name"`
	ResourceGroupName        string                       `json:"resource_group_name"`
	PresentationTimeRange    []PresentationTimeRangeState `json:"presentation_time_range"`
	Timeouts                 *TimeoutsState               `json:"timeouts"`
	TrackSelection           []TrackSelectionState        `json:"track_selection"`
}
