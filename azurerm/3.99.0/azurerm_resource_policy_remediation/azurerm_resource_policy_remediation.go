// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_resource_policy_remediation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_resource_policy_remediation.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermResourcePolicyRemediationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arpr *Resource) Type() string {
	return "azurerm_resource_policy_remediation"
}

// LocalName returns the local name for [Resource].
func (arpr *Resource) LocalName() string {
	return arpr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arpr *Resource) Configuration() interface{} {
	return arpr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arpr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arpr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arpr *Resource) Dependencies() terra.Dependencies {
	return arpr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arpr *Resource) LifecycleManagement() *terra.Lifecycle {
	return arpr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arpr *Resource) Attributes() azurermResourcePolicyRemediationAttributes {
	return azurermResourcePolicyRemediationAttributes{ref: terra.ReferenceResource(arpr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arpr *Resource) ImportState(state io.Reader) error {
	arpr.state = &azurermResourcePolicyRemediationState{}
	if err := json.NewDecoder(state).Decode(arpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arpr.Type(), arpr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arpr *Resource) State() (*azurermResourcePolicyRemediationState, bool) {
	return arpr.state, arpr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arpr *Resource) StateMust() *azurermResourcePolicyRemediationState {
	if arpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arpr.Type(), arpr.LocalName()))
	}
	return arpr.state
}

// Args contains the configurations for azurerm_resource_policy_remediation.
type Args struct {
	// FailurePercentage: number, optional
	FailurePercentage terra.NumberValue `hcl:"failure_percentage,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocationFilters: list of string, optional
	LocationFilters terra.ListValue[terra.StringValue] `hcl:"location_filters,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParallelDeployments: number, optional
	ParallelDeployments terra.NumberValue `hcl:"parallel_deployments,attr"`
	// PolicyAssignmentId: string, required
	PolicyAssignmentId terra.StringValue `hcl:"policy_assignment_id,attr" validate:"required"`
	// PolicyDefinitionId: string, optional
	PolicyDefinitionId terra.StringValue `hcl:"policy_definition_id,attr"`
	// PolicyDefinitionReferenceId: string, optional
	PolicyDefinitionReferenceId terra.StringValue `hcl:"policy_definition_reference_id,attr"`
	// ResourceCount: number, optional
	ResourceCount terra.NumberValue `hcl:"resource_count,attr"`
	// ResourceDiscoveryMode: string, optional
	ResourceDiscoveryMode terra.StringValue `hcl:"resource_discovery_mode,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermResourcePolicyRemediationAttributes struct {
	ref terra.Reference
}

// FailurePercentage returns a reference to field failure_percentage of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) FailurePercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(arpr.ref.Append("failure_percentage"))
}

// Id returns a reference to field id of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("id"))
}

// LocationFilters returns a reference to field location_filters of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) LocationFilters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arpr.ref.Append("location_filters"))
}

// Name returns a reference to field name of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("name"))
}

// ParallelDeployments returns a reference to field parallel_deployments of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) ParallelDeployments() terra.NumberValue {
	return terra.ReferenceAsNumber(arpr.ref.Append("parallel_deployments"))
}

// PolicyAssignmentId returns a reference to field policy_assignment_id of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) PolicyAssignmentId() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("policy_assignment_id"))
}

// PolicyDefinitionId returns a reference to field policy_definition_id of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("policy_definition_id"))
}

// PolicyDefinitionReferenceId returns a reference to field policy_definition_reference_id of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) PolicyDefinitionReferenceId() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("policy_definition_reference_id"))
}

// ResourceCount returns a reference to field resource_count of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) ResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(arpr.ref.Append("resource_count"))
}

// ResourceDiscoveryMode returns a reference to field resource_discovery_mode of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) ResourceDiscoveryMode() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("resource_discovery_mode"))
}

// ResourceId returns a reference to field resource_id of azurerm_resource_policy_remediation.
func (arpr azurermResourcePolicyRemediationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(arpr.ref.Append("resource_id"))
}

func (arpr azurermResourcePolicyRemediationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arpr.ref.Append("timeouts"))
}

type azurermResourcePolicyRemediationState struct {
	FailurePercentage           float64        `json:"failure_percentage"`
	Id                          string         `json:"id"`
	LocationFilters             []string       `json:"location_filters"`
	Name                        string         `json:"name"`
	ParallelDeployments         float64        `json:"parallel_deployments"`
	PolicyAssignmentId          string         `json:"policy_assignment_id"`
	PolicyDefinitionId          string         `json:"policy_definition_id"`
	PolicyDefinitionReferenceId string         `json:"policy_definition_reference_id"`
	ResourceCount               float64        `json:"resource_count"`
	ResourceDiscoveryMode       string         `json:"resource_discovery_mode"`
	ResourceId                  string         `json:"resource_id"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
