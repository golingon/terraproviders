// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_virtual_machine_availability_group_listener

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_virtual_machine_availability_group_listener.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlVirtualMachineAvailabilityGroupListenerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amvmagl *Resource) Type() string {
	return "azurerm_mssql_virtual_machine_availability_group_listener"
}

// LocalName returns the local name for [Resource].
func (amvmagl *Resource) LocalName() string {
	return amvmagl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amvmagl *Resource) Configuration() interface{} {
	return amvmagl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amvmagl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amvmagl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amvmagl *Resource) Dependencies() terra.Dependencies {
	return amvmagl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amvmagl *Resource) LifecycleManagement() *terra.Lifecycle {
	return amvmagl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amvmagl *Resource) Attributes() azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes {
	return azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes{ref: terra.ReferenceResource(amvmagl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amvmagl *Resource) ImportState(state io.Reader) error {
	amvmagl.state = &azurermMssqlVirtualMachineAvailabilityGroupListenerState{}
	if err := json.NewDecoder(state).Decode(amvmagl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amvmagl.Type(), amvmagl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amvmagl *Resource) State() (*azurermMssqlVirtualMachineAvailabilityGroupListenerState, bool) {
	return amvmagl.state, amvmagl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amvmagl *Resource) StateMust() *azurermMssqlVirtualMachineAvailabilityGroupListenerState {
	if amvmagl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amvmagl.Type(), amvmagl.LocalName()))
	}
	return amvmagl.state
}

// Args contains the configurations for azurerm_mssql_virtual_machine_availability_group_listener.
type Args struct {
	// AvailabilityGroupName: string, optional
	AvailabilityGroupName terra.StringValue `hcl:"availability_group_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// SqlVirtualMachineGroupId: string, required
	SqlVirtualMachineGroupId terra.StringValue `hcl:"sql_virtual_machine_group_id,attr" validate:"required"`
	// LoadBalancerConfiguration: optional
	LoadBalancerConfiguration *LoadBalancerConfiguration `hcl:"load_balancer_configuration,block"`
	// MultiSubnetIpConfiguration: min=0
	MultiSubnetIpConfiguration []MultiSubnetIpConfiguration `hcl:"multi_subnet_ip_configuration,block" validate:"min=0"`
	// Replica: min=1
	Replica []Replica `hcl:"replica,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes struct {
	ref terra.Reference
}

// AvailabilityGroupName returns a reference to field availability_group_name of azurerm_mssql_virtual_machine_availability_group_listener.
func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) AvailabilityGroupName() terra.StringValue {
	return terra.ReferenceAsString(amvmagl.ref.Append("availability_group_name"))
}

// Id returns a reference to field id of azurerm_mssql_virtual_machine_availability_group_listener.
func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amvmagl.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_mssql_virtual_machine_availability_group_listener.
func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amvmagl.ref.Append("name"))
}

// Port returns a reference to field port of azurerm_mssql_virtual_machine_availability_group_listener.
func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(amvmagl.ref.Append("port"))
}

// SqlVirtualMachineGroupId returns a reference to field sql_virtual_machine_group_id of azurerm_mssql_virtual_machine_availability_group_listener.
func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) SqlVirtualMachineGroupId() terra.StringValue {
	return terra.ReferenceAsString(amvmagl.ref.Append("sql_virtual_machine_group_id"))
}

func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) LoadBalancerConfiguration() terra.ListValue[LoadBalancerConfigurationAttributes] {
	return terra.ReferenceAsList[LoadBalancerConfigurationAttributes](amvmagl.ref.Append("load_balancer_configuration"))
}

func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) MultiSubnetIpConfiguration() terra.SetValue[MultiSubnetIpConfigurationAttributes] {
	return terra.ReferenceAsSet[MultiSubnetIpConfigurationAttributes](amvmagl.ref.Append("multi_subnet_ip_configuration"))
}

func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) Replica() terra.SetValue[ReplicaAttributes] {
	return terra.ReferenceAsSet[ReplicaAttributes](amvmagl.ref.Append("replica"))
}

func (amvmagl azurermMssqlVirtualMachineAvailabilityGroupListenerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amvmagl.ref.Append("timeouts"))
}

type azurermMssqlVirtualMachineAvailabilityGroupListenerState struct {
	AvailabilityGroupName      string                            `json:"availability_group_name"`
	Id                         string                            `json:"id"`
	Name                       string                            `json:"name"`
	Port                       float64                           `json:"port"`
	SqlVirtualMachineGroupId   string                            `json:"sql_virtual_machine_group_id"`
	LoadBalancerConfiguration  []LoadBalancerConfigurationState  `json:"load_balancer_configuration"`
	MultiSubnetIpConfiguration []MultiSubnetIpConfigurationState `json:"multi_subnet_ip_configuration"`
	Replica                    []ReplicaState                    `json:"replica"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
