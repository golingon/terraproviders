// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_application_insights_standard_web_test

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Request struct {
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// FollowRedirectsEnabled: bool, optional
	FollowRedirectsEnabled terra.BoolValue `hcl:"follow_redirects_enabled,attr"`
	// HttpVerb: string, optional
	HttpVerb terra.StringValue `hcl:"http_verb,attr"`
	// ParseDependentRequestsEnabled: bool, optional
	ParseDependentRequestsEnabled terra.BoolValue `hcl:"parse_dependent_requests_enabled,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// RequestHeader: min=0
	Header []RequestHeader `hcl:"header,block" validate:"min=0"`
}

type RequestHeader struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ValidationRules struct {
	// ExpectedStatusCode: number, optional
	ExpectedStatusCode terra.NumberValue `hcl:"expected_status_code,attr"`
	// SslCertRemainingLifetime: number, optional
	SslCertRemainingLifetime terra.NumberValue `hcl:"ssl_cert_remaining_lifetime,attr"`
	// SslCheckEnabled: bool, optional
	SslCheckEnabled terra.BoolValue `hcl:"ssl_check_enabled,attr"`
	// ValidationRulesContent: optional
	Content *ValidationRulesContent `hcl:"content,block"`
}

type ValidationRulesContent struct {
	// ContentMatch: string, required
	ContentMatch terra.StringValue `hcl:"content_match,attr" validate:"required"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PassIfTextFound: bool, optional
	PassIfTextFound terra.BoolValue `hcl:"pass_if_text_found,attr"`
}

type RequestAttributes struct {
	ref terra.Reference
}

func (r RequestAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RequestAttributes) InternalWithRef(ref terra.Reference) RequestAttributes {
	return RequestAttributes{ref: ref}
}

func (r RequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RequestAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("body"))
}

func (r RequestAttributes) FollowRedirectsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("follow_redirects_enabled"))
}

func (r RequestAttributes) HttpVerb() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("http_verb"))
}

func (r RequestAttributes) ParseDependentRequestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("parse_dependent_requests_enabled"))
}

func (r RequestAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("url"))
}

func (r RequestAttributes) Header() terra.ListValue[RequestHeaderAttributes] {
	return terra.ReferenceAsList[RequestHeaderAttributes](r.ref.Append("header"))
}

type RequestHeaderAttributes struct {
	ref terra.Reference
}

func (h RequestHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h RequestHeaderAttributes) InternalWithRef(ref terra.Reference) RequestHeaderAttributes {
	return RequestHeaderAttributes{ref: ref}
}

func (h RequestHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h RequestHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h RequestHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ValidationRulesAttributes struct {
	ref terra.Reference
}

func (vr ValidationRulesAttributes) InternalRef() (terra.Reference, error) {
	return vr.ref, nil
}

func (vr ValidationRulesAttributes) InternalWithRef(ref terra.Reference) ValidationRulesAttributes {
	return ValidationRulesAttributes{ref: ref}
}

func (vr ValidationRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vr.ref.InternalTokens()
}

func (vr ValidationRulesAttributes) ExpectedStatusCode() terra.NumberValue {
	return terra.ReferenceAsNumber(vr.ref.Append("expected_status_code"))
}

func (vr ValidationRulesAttributes) SslCertRemainingLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(vr.ref.Append("ssl_cert_remaining_lifetime"))
}

func (vr ValidationRulesAttributes) SslCheckEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(vr.ref.Append("ssl_check_enabled"))
}

func (vr ValidationRulesAttributes) Content() terra.ListValue[ValidationRulesContentAttributes] {
	return terra.ReferenceAsList[ValidationRulesContentAttributes](vr.ref.Append("content"))
}

type ValidationRulesContentAttributes struct {
	ref terra.Reference
}

func (c ValidationRulesContentAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ValidationRulesContentAttributes) InternalWithRef(ref terra.Reference) ValidationRulesContentAttributes {
	return ValidationRulesContentAttributes{ref: ref}
}

func (c ValidationRulesContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ValidationRulesContentAttributes) ContentMatch() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("content_match"))
}

func (c ValidationRulesContentAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("ignore_case"))
}

func (c ValidationRulesContentAttributes) PassIfTextFound() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("pass_if_text_found"))
}

type RequestState struct {
	Body                          string               `json:"body"`
	FollowRedirectsEnabled        bool                 `json:"follow_redirects_enabled"`
	HttpVerb                      string               `json:"http_verb"`
	ParseDependentRequestsEnabled bool                 `json:"parse_dependent_requests_enabled"`
	Url                           string               `json:"url"`
	Header                        []RequestHeaderState `json:"header"`
}

type RequestHeaderState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type ValidationRulesState struct {
	ExpectedStatusCode       float64                       `json:"expected_status_code"`
	SslCertRemainingLifetime float64                       `json:"ssl_cert_remaining_lifetime"`
	SslCheckEnabled          bool                          `json:"ssl_check_enabled"`
	Content                  []ValidationRulesContentState `json:"content"`
}

type ValidationRulesContentState struct {
	ContentMatch    string `json:"content_match"`
	IgnoreCase      bool   `json:"ignore_case"`
	PassIfTextFound bool   `json:"pass_if_text_found"`
}
