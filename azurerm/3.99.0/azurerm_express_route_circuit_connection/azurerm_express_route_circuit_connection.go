// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_express_route_circuit_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_express_route_circuit_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermExpressRouteCircuitConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aercc *Resource) Type() string {
	return "azurerm_express_route_circuit_connection"
}

// LocalName returns the local name for [Resource].
func (aercc *Resource) LocalName() string {
	return aercc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aercc *Resource) Configuration() interface{} {
	return aercc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aercc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aercc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aercc *Resource) Dependencies() terra.Dependencies {
	return aercc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aercc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aercc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aercc *Resource) Attributes() azurermExpressRouteCircuitConnectionAttributes {
	return azurermExpressRouteCircuitConnectionAttributes{ref: terra.ReferenceResource(aercc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aercc *Resource) ImportState(state io.Reader) error {
	aercc.state = &azurermExpressRouteCircuitConnectionState{}
	if err := json.NewDecoder(state).Decode(aercc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aercc.Type(), aercc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aercc *Resource) State() (*azurermExpressRouteCircuitConnectionState, bool) {
	return aercc.state, aercc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aercc *Resource) StateMust() *azurermExpressRouteCircuitConnectionState {
	if aercc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aercc.Type(), aercc.LocalName()))
	}
	return aercc.state
}

// Args contains the configurations for azurerm_express_route_circuit_connection.
type Args struct {
	// AddressPrefixIpv4: string, required
	AddressPrefixIpv4 terra.StringValue `hcl:"address_prefix_ipv4,attr" validate:"required"`
	// AddressPrefixIpv6: string, optional
	AddressPrefixIpv6 terra.StringValue `hcl:"address_prefix_ipv6,attr"`
	// AuthorizationKey: string, optional
	AuthorizationKey terra.StringValue `hcl:"authorization_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PeerPeeringId: string, required
	PeerPeeringId terra.StringValue `hcl:"peer_peering_id,attr" validate:"required"`
	// PeeringId: string, required
	PeeringId terra.StringValue `hcl:"peering_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermExpressRouteCircuitConnectionAttributes struct {
	ref terra.Reference
}

// AddressPrefixIpv4 returns a reference to field address_prefix_ipv4 of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) AddressPrefixIpv4() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("address_prefix_ipv4"))
}

// AddressPrefixIpv6 returns a reference to field address_prefix_ipv6 of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) AddressPrefixIpv6() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("address_prefix_ipv6"))
}

// AuthorizationKey returns a reference to field authorization_key of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) AuthorizationKey() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("authorization_key"))
}

// Id returns a reference to field id of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("name"))
}

// PeerPeeringId returns a reference to field peer_peering_id of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) PeerPeeringId() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("peer_peering_id"))
}

// PeeringId returns a reference to field peering_id of azurerm_express_route_circuit_connection.
func (aercc azurermExpressRouteCircuitConnectionAttributes) PeeringId() terra.StringValue {
	return terra.ReferenceAsString(aercc.ref.Append("peering_id"))
}

func (aercc azurermExpressRouteCircuitConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aercc.ref.Append("timeouts"))
}

type azurermExpressRouteCircuitConnectionState struct {
	AddressPrefixIpv4 string         `json:"address_prefix_ipv4"`
	AddressPrefixIpv6 string         `json:"address_prefix_ipv6"`
	AuthorizationKey  string         `json:"authorization_key"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	PeerPeeringId     string         `json:"peer_peering_id"`
	PeeringId         string         `json:"peering_id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
