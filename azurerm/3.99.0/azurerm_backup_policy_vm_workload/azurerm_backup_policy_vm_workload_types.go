// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_policy_vm_workload

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ProtectionPolicy struct {
	// PolicyType: string, required
	PolicyType terra.StringValue `hcl:"policy_type,attr" validate:"required"`
	// ProtectionPolicyBackup: required
	Backup *ProtectionPolicyBackup `hcl:"backup,block" validate:"required"`
	// ProtectionPolicyRetentionDaily: optional
	RetentionDaily *ProtectionPolicyRetentionDaily `hcl:"retention_daily,block"`
	// ProtectionPolicyRetentionMonthly: optional
	RetentionMonthly *ProtectionPolicyRetentionMonthly `hcl:"retention_monthly,block"`
	// ProtectionPolicyRetentionWeekly: optional
	RetentionWeekly *ProtectionPolicyRetentionWeekly `hcl:"retention_weekly,block"`
	// ProtectionPolicyRetentionYearly: optional
	RetentionYearly *ProtectionPolicyRetentionYearly `hcl:"retention_yearly,block"`
	// ProtectionPolicySimpleRetention: optional
	SimpleRetention *ProtectionPolicySimpleRetention `hcl:"simple_retention,block"`
}

type ProtectionPolicyBackup struct {
	// Frequency: string, optional
	Frequency terra.StringValue `hcl:"frequency,attr"`
	// FrequencyInMinutes: number, optional
	FrequencyInMinutes terra.NumberValue `hcl:"frequency_in_minutes,attr"`
	// Time: string, optional
	Time terra.StringValue `hcl:"time,attr"`
	// Weekdays: set of string, optional
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr"`
}

type ProtectionPolicyRetentionDaily struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
}

type ProtectionPolicyRetentionMonthly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// FormatType: string, required
	FormatType terra.StringValue `hcl:"format_type,attr" validate:"required"`
	// Monthdays: set of number, optional
	Monthdays terra.SetValue[terra.NumberValue] `hcl:"monthdays,attr"`
	// Weekdays: set of string, optional
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr"`
	// Weeks: set of string, optional
	Weeks terra.SetValue[terra.StringValue] `hcl:"weeks,attr"`
}

type ProtectionPolicyRetentionWeekly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Weekdays: set of string, required
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr" validate:"required"`
}

type ProtectionPolicyRetentionYearly struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// FormatType: string, required
	FormatType terra.StringValue `hcl:"format_type,attr" validate:"required"`
	// Monthdays: set of number, optional
	Monthdays terra.SetValue[terra.NumberValue] `hcl:"monthdays,attr"`
	// Months: set of string, required
	Months terra.SetValue[terra.StringValue] `hcl:"months,attr" validate:"required"`
	// Weekdays: set of string, optional
	Weekdays terra.SetValue[terra.StringValue] `hcl:"weekdays,attr"`
	// Weeks: set of string, optional
	Weeks terra.SetValue[terra.StringValue] `hcl:"weeks,attr"`
}

type ProtectionPolicySimpleRetention struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
}

type Settings struct {
	// CompressionEnabled: bool, optional
	CompressionEnabled terra.BoolValue `hcl:"compression_enabled,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ProtectionPolicyAttributes struct {
	ref terra.Reference
}

func (pp ProtectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp ProtectionPolicyAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyAttributes {
	return ProtectionPolicyAttributes{ref: ref}
}

func (pp ProtectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp ProtectionPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("policy_type"))
}

func (pp ProtectionPolicyAttributes) Backup() terra.ListValue[ProtectionPolicyBackupAttributes] {
	return terra.ReferenceAsList[ProtectionPolicyBackupAttributes](pp.ref.Append("backup"))
}

func (pp ProtectionPolicyAttributes) RetentionDaily() terra.ListValue[ProtectionPolicyRetentionDailyAttributes] {
	return terra.ReferenceAsList[ProtectionPolicyRetentionDailyAttributes](pp.ref.Append("retention_daily"))
}

func (pp ProtectionPolicyAttributes) RetentionMonthly() terra.ListValue[ProtectionPolicyRetentionMonthlyAttributes] {
	return terra.ReferenceAsList[ProtectionPolicyRetentionMonthlyAttributes](pp.ref.Append("retention_monthly"))
}

func (pp ProtectionPolicyAttributes) RetentionWeekly() terra.ListValue[ProtectionPolicyRetentionWeeklyAttributes] {
	return terra.ReferenceAsList[ProtectionPolicyRetentionWeeklyAttributes](pp.ref.Append("retention_weekly"))
}

func (pp ProtectionPolicyAttributes) RetentionYearly() terra.ListValue[ProtectionPolicyRetentionYearlyAttributes] {
	return terra.ReferenceAsList[ProtectionPolicyRetentionYearlyAttributes](pp.ref.Append("retention_yearly"))
}

func (pp ProtectionPolicyAttributes) SimpleRetention() terra.ListValue[ProtectionPolicySimpleRetentionAttributes] {
	return terra.ReferenceAsList[ProtectionPolicySimpleRetentionAttributes](pp.ref.Append("simple_retention"))
}

type ProtectionPolicyBackupAttributes struct {
	ref terra.Reference
}

func (b ProtectionPolicyBackupAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b ProtectionPolicyBackupAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyBackupAttributes {
	return ProtectionPolicyBackupAttributes{ref: ref}
}

func (b ProtectionPolicyBackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b ProtectionPolicyBackupAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("frequency"))
}

func (b ProtectionPolicyBackupAttributes) FrequencyInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("frequency_in_minutes"))
}

func (b ProtectionPolicyBackupAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("time"))
}

func (b ProtectionPolicyBackupAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](b.ref.Append("weekdays"))
}

type ProtectionPolicyRetentionDailyAttributes struct {
	ref terra.Reference
}

func (rd ProtectionPolicyRetentionDailyAttributes) InternalRef() (terra.Reference, error) {
	return rd.ref, nil
}

func (rd ProtectionPolicyRetentionDailyAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyRetentionDailyAttributes {
	return ProtectionPolicyRetentionDailyAttributes{ref: ref}
}

func (rd ProtectionPolicyRetentionDailyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rd.ref.InternalTokens()
}

func (rd ProtectionPolicyRetentionDailyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rd.ref.Append("count"))
}

type ProtectionPolicyRetentionMonthlyAttributes struct {
	ref terra.Reference
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyRetentionMonthlyAttributes {
	return ProtectionPolicyRetentionMonthlyAttributes{ref: ref}
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("count"))
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) FormatType() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("format_type"))
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) Monthdays() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](rm.ref.Append("monthdays"))
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rm.ref.Append("weekdays"))
}

func (rm ProtectionPolicyRetentionMonthlyAttributes) Weeks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rm.ref.Append("weeks"))
}

type ProtectionPolicyRetentionWeeklyAttributes struct {
	ref terra.Reference
}

func (rw ProtectionPolicyRetentionWeeklyAttributes) InternalRef() (terra.Reference, error) {
	return rw.ref, nil
}

func (rw ProtectionPolicyRetentionWeeklyAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyRetentionWeeklyAttributes {
	return ProtectionPolicyRetentionWeeklyAttributes{ref: ref}
}

func (rw ProtectionPolicyRetentionWeeklyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rw.ref.InternalTokens()
}

func (rw ProtectionPolicyRetentionWeeklyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rw.ref.Append("count"))
}

func (rw ProtectionPolicyRetentionWeeklyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rw.ref.Append("weekdays"))
}

type ProtectionPolicyRetentionYearlyAttributes struct {
	ref terra.Reference
}

func (ry ProtectionPolicyRetentionYearlyAttributes) InternalRef() (terra.Reference, error) {
	return ry.ref, nil
}

func (ry ProtectionPolicyRetentionYearlyAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicyRetentionYearlyAttributes {
	return ProtectionPolicyRetentionYearlyAttributes{ref: ref}
}

func (ry ProtectionPolicyRetentionYearlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ry.ref.InternalTokens()
}

func (ry ProtectionPolicyRetentionYearlyAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ry.ref.Append("count"))
}

func (ry ProtectionPolicyRetentionYearlyAttributes) FormatType() terra.StringValue {
	return terra.ReferenceAsString(ry.ref.Append("format_type"))
}

func (ry ProtectionPolicyRetentionYearlyAttributes) Monthdays() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](ry.ref.Append("monthdays"))
}

func (ry ProtectionPolicyRetentionYearlyAttributes) Months() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("months"))
}

func (ry ProtectionPolicyRetentionYearlyAttributes) Weekdays() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("weekdays"))
}

func (ry ProtectionPolicyRetentionYearlyAttributes) Weeks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ry.ref.Append("weeks"))
}

type ProtectionPolicySimpleRetentionAttributes struct {
	ref terra.Reference
}

func (sr ProtectionPolicySimpleRetentionAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr ProtectionPolicySimpleRetentionAttributes) InternalWithRef(ref terra.Reference) ProtectionPolicySimpleRetentionAttributes {
	return ProtectionPolicySimpleRetentionAttributes{ref: ref}
}

func (sr ProtectionPolicySimpleRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr ProtectionPolicySimpleRetentionAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("count"))
}

type SettingsAttributes struct {
	ref terra.Reference
}

func (s SettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SettingsAttributes) InternalWithRef(ref terra.Reference) SettingsAttributes {
	return SettingsAttributes{ref: ref}
}

func (s SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SettingsAttributes) CompressionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("compression_enabled"))
}

func (s SettingsAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("time_zone"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ProtectionPolicyState struct {
	PolicyType       string                                  `json:"policy_type"`
	Backup           []ProtectionPolicyBackupState           `json:"backup"`
	RetentionDaily   []ProtectionPolicyRetentionDailyState   `json:"retention_daily"`
	RetentionMonthly []ProtectionPolicyRetentionMonthlyState `json:"retention_monthly"`
	RetentionWeekly  []ProtectionPolicyRetentionWeeklyState  `json:"retention_weekly"`
	RetentionYearly  []ProtectionPolicyRetentionYearlyState  `json:"retention_yearly"`
	SimpleRetention  []ProtectionPolicySimpleRetentionState  `json:"simple_retention"`
}

type ProtectionPolicyBackupState struct {
	Frequency          string   `json:"frequency"`
	FrequencyInMinutes float64  `json:"frequency_in_minutes"`
	Time               string   `json:"time"`
	Weekdays           []string `json:"weekdays"`
}

type ProtectionPolicyRetentionDailyState struct {
	Count float64 `json:"count"`
}

type ProtectionPolicyRetentionMonthlyState struct {
	Count      float64   `json:"count"`
	FormatType string    `json:"format_type"`
	Monthdays  []float64 `json:"monthdays"`
	Weekdays   []string  `json:"weekdays"`
	Weeks      []string  `json:"weeks"`
}

type ProtectionPolicyRetentionWeeklyState struct {
	Count    float64  `json:"count"`
	Weekdays []string `json:"weekdays"`
}

type ProtectionPolicyRetentionYearlyState struct {
	Count      float64   `json:"count"`
	FormatType string    `json:"format_type"`
	Monthdays  []float64 `json:"monthdays"`
	Months     []string  `json:"months"`
	Weekdays   []string  `json:"weekdays"`
	Weeks      []string  `json:"weeks"`
}

type ProtectionPolicySimpleRetentionState struct {
	Count float64 `json:"count"`
}

type SettingsState struct {
	CompressionEnabled bool   `json:"compression_enabled"`
	TimeZone           string `json:"time_zone"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
