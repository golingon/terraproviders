// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_ip_group_cidr

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_ip_group_cidr.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermIpGroupCidrState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aigc *Resource) Type() string {
	return "azurerm_ip_group_cidr"
}

// LocalName returns the local name for [Resource].
func (aigc *Resource) LocalName() string {
	return aigc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aigc *Resource) Configuration() interface{} {
	return aigc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aigc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aigc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aigc *Resource) Dependencies() terra.Dependencies {
	return aigc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aigc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aigc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aigc *Resource) Attributes() azurermIpGroupCidrAttributes {
	return azurermIpGroupCidrAttributes{ref: terra.ReferenceResource(aigc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aigc *Resource) ImportState(state io.Reader) error {
	aigc.state = &azurermIpGroupCidrState{}
	if err := json.NewDecoder(state).Decode(aigc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aigc.Type(), aigc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aigc *Resource) State() (*azurermIpGroupCidrState, bool) {
	return aigc.state, aigc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aigc *Resource) StateMust() *azurermIpGroupCidrState {
	if aigc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aigc.Type(), aigc.LocalName()))
	}
	return aigc.state
}

// Args contains the configurations for azurerm_ip_group_cidr.
type Args struct {
	// Cidr: string, required
	Cidr terra.StringValue `hcl:"cidr,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpGroupId: string, required
	IpGroupId terra.StringValue `hcl:"ip_group_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermIpGroupCidrAttributes struct {
	ref terra.Reference
}

// Cidr returns a reference to field cidr of azurerm_ip_group_cidr.
func (aigc azurermIpGroupCidrAttributes) Cidr() terra.StringValue {
	return terra.ReferenceAsString(aigc.ref.Append("cidr"))
}

// Id returns a reference to field id of azurerm_ip_group_cidr.
func (aigc azurermIpGroupCidrAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aigc.ref.Append("id"))
}

// IpGroupId returns a reference to field ip_group_id of azurerm_ip_group_cidr.
func (aigc azurermIpGroupCidrAttributes) IpGroupId() terra.StringValue {
	return terra.ReferenceAsString(aigc.ref.Append("ip_group_id"))
}

func (aigc azurermIpGroupCidrAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aigc.ref.Append("timeouts"))
}

type azurermIpGroupCidrState struct {
	Cidr      string         `json:"cidr"`
	Id        string         `json:"id"`
	IpGroupId string         `json:"ip_group_id"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
