// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kusto_attached_database_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kusto_attached_database_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKustoAttachedDatabaseConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akadc *Resource) Type() string {
	return "azurerm_kusto_attached_database_configuration"
}

// LocalName returns the local name for [Resource].
func (akadc *Resource) LocalName() string {
	return akadc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akadc *Resource) Configuration() interface{} {
	return akadc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akadc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akadc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akadc *Resource) Dependencies() terra.Dependencies {
	return akadc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akadc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akadc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akadc *Resource) Attributes() azurermKustoAttachedDatabaseConfigurationAttributes {
	return azurermKustoAttachedDatabaseConfigurationAttributes{ref: terra.ReferenceResource(akadc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akadc *Resource) ImportState(state io.Reader) error {
	akadc.state = &azurermKustoAttachedDatabaseConfigurationState{}
	if err := json.NewDecoder(state).Decode(akadc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akadc.Type(), akadc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akadc *Resource) State() (*azurermKustoAttachedDatabaseConfigurationState, bool) {
	return akadc.state, akadc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akadc *Resource) StateMust() *azurermKustoAttachedDatabaseConfigurationState {
	if akadc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akadc.Type(), akadc.LocalName()))
	}
	return akadc.state
}

// Args contains the configurations for azurerm_kusto_attached_database_configuration.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// ClusterResourceId: string, required
	ClusterResourceId terra.StringValue `hcl:"cluster_resource_id,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DefaultPrincipalModificationKind: string, optional
	DefaultPrincipalModificationKind terra.StringValue `hcl:"default_principal_modification_kind,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sharing: optional
	Sharing *Sharing `hcl:"sharing,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKustoAttachedDatabaseConfigurationAttributes struct {
	ref terra.Reference
}

// AttachedDatabaseNames returns a reference to field attached_database_names of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) AttachedDatabaseNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akadc.ref.Append("attached_database_names"))
}

// ClusterName returns a reference to field cluster_name of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("cluster_name"))
}

// ClusterResourceId returns a reference to field cluster_resource_id of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) ClusterResourceId() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("cluster_resource_id"))
}

// DatabaseName returns a reference to field database_name of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("database_name"))
}

// DefaultPrincipalModificationKind returns a reference to field default_principal_modification_kind of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) DefaultPrincipalModificationKind() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("default_principal_modification_kind"))
}

// Id returns a reference to field id of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_kusto_attached_database_configuration.
func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(akadc.ref.Append("resource_group_name"))
}

func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) Sharing() terra.ListValue[SharingAttributes] {
	return terra.ReferenceAsList[SharingAttributes](akadc.ref.Append("sharing"))
}

func (akadc azurermKustoAttachedDatabaseConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akadc.ref.Append("timeouts"))
}

type azurermKustoAttachedDatabaseConfigurationState struct {
	AttachedDatabaseNames            []string       `json:"attached_database_names"`
	ClusterName                      string         `json:"cluster_name"`
	ClusterResourceId                string         `json:"cluster_resource_id"`
	DatabaseName                     string         `json:"database_name"`
	DefaultPrincipalModificationKind string         `json:"default_principal_modification_kind"`
	Id                               string         `json:"id"`
	Location                         string         `json:"location"`
	Name                             string         `json:"name"`
	ResourceGroupName                string         `json:"resource_group_name"`
	Sharing                          []SharingState `json:"sharing"`
	Timeouts                         *TimeoutsState `json:"timeouts"`
}
