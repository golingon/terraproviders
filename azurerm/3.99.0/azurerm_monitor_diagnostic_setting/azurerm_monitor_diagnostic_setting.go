// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_diagnostic_setting

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_diagnostic_setting.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorDiagnosticSettingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amds *Resource) Type() string {
	return "azurerm_monitor_diagnostic_setting"
}

// LocalName returns the local name for [Resource].
func (amds *Resource) LocalName() string {
	return amds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amds *Resource) Configuration() interface{} {
	return amds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amds *Resource) Dependencies() terra.Dependencies {
	return amds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amds *Resource) LifecycleManagement() *terra.Lifecycle {
	return amds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amds *Resource) Attributes() azurermMonitorDiagnosticSettingAttributes {
	return azurermMonitorDiagnosticSettingAttributes{ref: terra.ReferenceResource(amds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amds *Resource) ImportState(state io.Reader) error {
	amds.state = &azurermMonitorDiagnosticSettingState{}
	if err := json.NewDecoder(state).Decode(amds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amds.Type(), amds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amds *Resource) State() (*azurermMonitorDiagnosticSettingState, bool) {
	return amds.state, amds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amds *Resource) StateMust() *azurermMonitorDiagnosticSettingState {
	if amds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amds.Type(), amds.LocalName()))
	}
	return amds.state
}

// Args contains the configurations for azurerm_monitor_diagnostic_setting.
type Args struct {
	// EventhubAuthorizationRuleId: string, optional
	EventhubAuthorizationRuleId terra.StringValue `hcl:"eventhub_authorization_rule_id,attr"`
	// EventhubName: string, optional
	EventhubName terra.StringValue `hcl:"eventhub_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogAnalyticsDestinationType: string, optional
	LogAnalyticsDestinationType terra.StringValue `hcl:"log_analytics_destination_type,attr"`
	// LogAnalyticsWorkspaceId: string, optional
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartnerSolutionId: string, optional
	PartnerSolutionId terra.StringValue `hcl:"partner_solution_id,attr"`
	// StorageAccountId: string, optional
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// EnabledLog: min=0
	EnabledLog []EnabledLog `hcl:"enabled_log,block" validate:"min=0"`
	// Log: min=0
	Log []Log `hcl:"log,block" validate:"min=0"`
	// Metric: min=0
	Metric []Metric `hcl:"metric,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorDiagnosticSettingAttributes struct {
	ref terra.Reference
}

// EventhubAuthorizationRuleId returns a reference to field eventhub_authorization_rule_id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) EventhubAuthorizationRuleId() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("eventhub_authorization_rule_id"))
}

// EventhubName returns a reference to field eventhub_name of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("eventhub_name"))
}

// Id returns a reference to field id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("id"))
}

// LogAnalyticsDestinationType returns a reference to field log_analytics_destination_type of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) LogAnalyticsDestinationType() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("log_analytics_destination_type"))
}

// LogAnalyticsWorkspaceId returns a reference to field log_analytics_workspace_id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("log_analytics_workspace_id"))
}

// Name returns a reference to field name of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("name"))
}

// PartnerSolutionId returns a reference to field partner_solution_id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) PartnerSolutionId() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("partner_solution_id"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("storage_account_id"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_monitor_diagnostic_setting.
func (amds azurermMonitorDiagnosticSettingAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(amds.ref.Append("target_resource_id"))
}

func (amds azurermMonitorDiagnosticSettingAttributes) EnabledLog() terra.SetValue[EnabledLogAttributes] {
	return terra.ReferenceAsSet[EnabledLogAttributes](amds.ref.Append("enabled_log"))
}

func (amds azurermMonitorDiagnosticSettingAttributes) Log() terra.SetValue[LogAttributes] {
	return terra.ReferenceAsSet[LogAttributes](amds.ref.Append("log"))
}

func (amds azurermMonitorDiagnosticSettingAttributes) Metric() terra.SetValue[MetricAttributes] {
	return terra.ReferenceAsSet[MetricAttributes](amds.ref.Append("metric"))
}

func (amds azurermMonitorDiagnosticSettingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amds.ref.Append("timeouts"))
}

type azurermMonitorDiagnosticSettingState struct {
	EventhubAuthorizationRuleId string            `json:"eventhub_authorization_rule_id"`
	EventhubName                string            `json:"eventhub_name"`
	Id                          string            `json:"id"`
	LogAnalyticsDestinationType string            `json:"log_analytics_destination_type"`
	LogAnalyticsWorkspaceId     string            `json:"log_analytics_workspace_id"`
	Name                        string            `json:"name"`
	PartnerSolutionId           string            `json:"partner_solution_id"`
	StorageAccountId            string            `json:"storage_account_id"`
	TargetResourceId            string            `json:"target_resource_id"`
	EnabledLog                  []EnabledLogState `json:"enabled_log"`
	Log                         []LogState        `json:"log"`
	Metric                      []MetricState     `json:"metric"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
