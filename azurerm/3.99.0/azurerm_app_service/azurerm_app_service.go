// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aas *Resource) Type() string {
	return "azurerm_app_service"
}

// LocalName returns the local name for [Resource].
func (aas *Resource) LocalName() string {
	return aas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aas *Resource) Configuration() interface{} {
	return aas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aas *Resource) Dependencies() terra.Dependencies {
	return aas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aas *Resource) Attributes() azurermAppServiceAttributes {
	return azurermAppServiceAttributes{ref: terra.ReferenceResource(aas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aas *Resource) ImportState(state io.Reader) error {
	aas.state = &azurermAppServiceState{}
	if err := json.NewDecoder(state).Decode(aas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aas.Type(), aas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aas *Resource) State() (*azurermAppServiceState, bool) {
	return aas.state, aas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aas *Resource) StateMust() *azurermAppServiceState {
	if aas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aas.Type(), aas.LocalName()))
	}
	return aas.state
}

// Args contains the configurations for azurerm_app_service.
type Args struct {
	// AppServicePlanId: string, required
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr" validate:"required"`
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// ClientAffinityEnabled: bool, optional
	ClientAffinityEnabled terra.BoolValue `hcl:"client_affinity_enabled,attr"`
	// ClientCertEnabled: bool, optional
	ClientCertEnabled terra.BoolValue `hcl:"client_cert_enabled,attr"`
	// ClientCertMode: string, optional
	ClientCertMode terra.StringValue `hcl:"client_cert_mode,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultReferenceIdentityId: string, optional
	KeyVaultReferenceIdentityId terra.StringValue `hcl:"key_vault_reference_identity_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AuthSettings: optional
	AuthSettings *AuthSettings `hcl:"auth_settings,block"`
	// Backup: optional
	Backup *Backup `hcl:"backup,block"`
	// ConnectionString: min=0
	ConnectionString []ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Logs: optional
	Logs *Logs `hcl:"logs,block"`
	// SiteConfig: optional
	SiteConfig *SiteConfig `hcl:"site_config,block"`
	// SourceControl: optional
	SourceControl *SourceControl `hcl:"source_control,block"`
	// StorageAccount: min=0
	StorageAccount []StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppServiceAttributes struct {
	ref terra.Reference
}

// AppServicePlanId returns a reference to field app_service_plan_id of azurerm_app_service.
func (aas azurermAppServiceAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("app_service_plan_id"))
}

// AppSettings returns a reference to field app_settings of azurerm_app_service.
func (aas azurermAppServiceAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("app_settings"))
}

// ClientAffinityEnabled returns a reference to field client_affinity_enabled of azurerm_app_service.
func (aas azurermAppServiceAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("client_affinity_enabled"))
}

// ClientCertEnabled returns a reference to field client_cert_enabled of azurerm_app_service.
func (aas azurermAppServiceAttributes) ClientCertEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("client_cert_enabled"))
}

// ClientCertMode returns a reference to field client_cert_mode of azurerm_app_service.
func (aas azurermAppServiceAttributes) ClientCertMode() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("client_cert_mode"))
}

// CustomDomainVerificationId returns a reference to field custom_domain_verification_id of azurerm_app_service.
func (aas azurermAppServiceAttributes) CustomDomainVerificationId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("custom_domain_verification_id"))
}

// DefaultSiteHostname returns a reference to field default_site_hostname of azurerm_app_service.
func (aas azurermAppServiceAttributes) DefaultSiteHostname() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("default_site_hostname"))
}

// Enabled returns a reference to field enabled of azurerm_app_service.
func (aas azurermAppServiceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("enabled"))
}

// HttpsOnly returns a reference to field https_only of azurerm_app_service.
func (aas azurermAppServiceAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("https_only"))
}

// Id returns a reference to field id of azurerm_app_service.
func (aas azurermAppServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("id"))
}

// KeyVaultReferenceIdentityId returns a reference to field key_vault_reference_identity_id of azurerm_app_service.
func (aas azurermAppServiceAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("key_vault_reference_identity_id"))
}

// Location returns a reference to field location of azurerm_app_service.
func (aas azurermAppServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_app_service.
func (aas azurermAppServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("name"))
}

// OutboundIpAddressList returns a reference to field outbound_ip_address_list of azurerm_app_service.
func (aas azurermAppServiceAttributes) OutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aas.ref.Append("outbound_ip_address_list"))
}

// OutboundIpAddresses returns a reference to field outbound_ip_addresses of azurerm_app_service.
func (aas azurermAppServiceAttributes) OutboundIpAddresses() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("outbound_ip_addresses"))
}

// PossibleOutboundIpAddressList returns a reference to field possible_outbound_ip_address_list of azurerm_app_service.
func (aas azurermAppServiceAttributes) PossibleOutboundIpAddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aas.ref.Append("possible_outbound_ip_address_list"))
}

// PossibleOutboundIpAddresses returns a reference to field possible_outbound_ip_addresses of azurerm_app_service.
func (aas azurermAppServiceAttributes) PossibleOutboundIpAddresses() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("possible_outbound_ip_addresses"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service.
func (aas azurermAppServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_app_service.
func (aas azurermAppServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags"))
}

func (aas azurermAppServiceAttributes) SiteCredential() terra.ListValue[SiteCredentialAttributes] {
	return terra.ReferenceAsList[SiteCredentialAttributes](aas.ref.Append("site_credential"))
}

func (aas azurermAppServiceAttributes) AuthSettings() terra.ListValue[AuthSettingsAttributes] {
	return terra.ReferenceAsList[AuthSettingsAttributes](aas.ref.Append("auth_settings"))
}

func (aas azurermAppServiceAttributes) Backup() terra.ListValue[BackupAttributes] {
	return terra.ReferenceAsList[BackupAttributes](aas.ref.Append("backup"))
}

func (aas azurermAppServiceAttributes) ConnectionString() terra.SetValue[ConnectionStringAttributes] {
	return terra.ReferenceAsSet[ConnectionStringAttributes](aas.ref.Append("connection_string"))
}

func (aas azurermAppServiceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aas.ref.Append("identity"))
}

func (aas azurermAppServiceAttributes) Logs() terra.ListValue[LogsAttributes] {
	return terra.ReferenceAsList[LogsAttributes](aas.ref.Append("logs"))
}

func (aas azurermAppServiceAttributes) SiteConfig() terra.ListValue[SiteConfigAttributes] {
	return terra.ReferenceAsList[SiteConfigAttributes](aas.ref.Append("site_config"))
}

func (aas azurermAppServiceAttributes) SourceControl() terra.ListValue[SourceControlAttributes] {
	return terra.ReferenceAsList[SourceControlAttributes](aas.ref.Append("source_control"))
}

func (aas azurermAppServiceAttributes) StorageAccount() terra.SetValue[StorageAccountAttributes] {
	return terra.ReferenceAsSet[StorageAccountAttributes](aas.ref.Append("storage_account"))
}

func (aas azurermAppServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aas.ref.Append("timeouts"))
}

type azurermAppServiceState struct {
	AppServicePlanId              string                  `json:"app_service_plan_id"`
	AppSettings                   map[string]string       `json:"app_settings"`
	ClientAffinityEnabled         bool                    `json:"client_affinity_enabled"`
	ClientCertEnabled             bool                    `json:"client_cert_enabled"`
	ClientCertMode                string                  `json:"client_cert_mode"`
	CustomDomainVerificationId    string                  `json:"custom_domain_verification_id"`
	DefaultSiteHostname           string                  `json:"default_site_hostname"`
	Enabled                       bool                    `json:"enabled"`
	HttpsOnly                     bool                    `json:"https_only"`
	Id                            string                  `json:"id"`
	KeyVaultReferenceIdentityId   string                  `json:"key_vault_reference_identity_id"`
	Location                      string                  `json:"location"`
	Name                          string                  `json:"name"`
	OutboundIpAddressList         []string                `json:"outbound_ip_address_list"`
	OutboundIpAddresses           string                  `json:"outbound_ip_addresses"`
	PossibleOutboundIpAddressList []string                `json:"possible_outbound_ip_address_list"`
	PossibleOutboundIpAddresses   string                  `json:"possible_outbound_ip_addresses"`
	ResourceGroupName             string                  `json:"resource_group_name"`
	Tags                          map[string]string       `json:"tags"`
	SiteCredential                []SiteCredentialState   `json:"site_credential"`
	AuthSettings                  []AuthSettingsState     `json:"auth_settings"`
	Backup                        []BackupState           `json:"backup"`
	ConnectionString              []ConnectionStringState `json:"connection_string"`
	Identity                      []IdentityState         `json:"identity"`
	Logs                          []LogsState             `json:"logs"`
	SiteConfig                    []SiteConfigState       `json:"site_config"`
	SourceControl                 []SourceControlState    `json:"source_control"`
	StorageAccount                []StorageAccountState   `json:"storage_account"`
	Timeouts                      *TimeoutsState          `json:"timeouts"`
}
