// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataConnectionStringAttributes struct {
	ref terra.Reference
}

func (cs DataConnectionStringAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataConnectionStringAttributes) InternalWithRef(ref terra.Reference) DataConnectionStringAttributes {
	return DataConnectionStringAttributes{ref: ref}
}

func (cs DataConnectionStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataConnectionStringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs DataConnectionStringAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

func (cs DataConnectionStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type DataSiteConfigAttributes struct {
	ref terra.Reference
}

func (sc DataSiteConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSiteConfigAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigAttributes {
	return DataSiteConfigAttributes{ref: ref}
}

func (sc DataSiteConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSiteConfigAttributes) AcrUseManagedIdentityCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("acr_use_managed_identity_credentials"))
}

func (sc DataSiteConfigAttributes) AcrUserManagedIdentityClientId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("acr_user_managed_identity_client_id"))
}

func (sc DataSiteConfigAttributes) AlwaysOn() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("always_on"))
}

func (sc DataSiteConfigAttributes) AppCommandLine() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("app_command_line"))
}

func (sc DataSiteConfigAttributes) DefaultDocuments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("default_documents"))
}

func (sc DataSiteConfigAttributes) DotnetFrameworkVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("dotnet_framework_version"))
}

func (sc DataSiteConfigAttributes) FtpsState() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ftps_state"))
}

func (sc DataSiteConfigAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("health_check_path"))
}

func (sc DataSiteConfigAttributes) Http2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("http2_enabled"))
}

func (sc DataSiteConfigAttributes) JavaContainer() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("java_container"))
}

func (sc DataSiteConfigAttributes) JavaContainerVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("java_container_version"))
}

func (sc DataSiteConfigAttributes) JavaVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("java_version"))
}

func (sc DataSiteConfigAttributes) LinuxFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("linux_fx_version"))
}

func (sc DataSiteConfigAttributes) LocalMysqlEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("local_mysql_enabled"))
}

func (sc DataSiteConfigAttributes) ManagedPipelineMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("managed_pipeline_mode"))
}

func (sc DataSiteConfigAttributes) MinTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("min_tls_version"))
}

func (sc DataSiteConfigAttributes) NumberOfWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("number_of_workers"))
}

func (sc DataSiteConfigAttributes) PhpVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("php_version"))
}

func (sc DataSiteConfigAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("python_version"))
}

func (sc DataSiteConfigAttributes) RemoteDebuggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("remote_debugging_enabled"))
}

func (sc DataSiteConfigAttributes) RemoteDebuggingVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("remote_debugging_version"))
}

func (sc DataSiteConfigAttributes) ScmType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_type"))
}

func (sc DataSiteConfigAttributes) ScmUseMainIpRestriction() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("scm_use_main_ip_restriction"))
}

func (sc DataSiteConfigAttributes) Use32BitWorkerProcess() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_32_bit_worker_process"))
}

func (sc DataSiteConfigAttributes) VnetRouteAllEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("vnet_route_all_enabled"))
}

func (sc DataSiteConfigAttributes) WebsocketsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("websockets_enabled"))
}

func (sc DataSiteConfigAttributes) WindowsFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("windows_fx_version"))
}

func (sc DataSiteConfigAttributes) Cors() terra.ListValue[DataSiteConfigCorsAttributes] {
	return terra.ReferenceAsList[DataSiteConfigCorsAttributes](sc.ref.Append("cors"))
}

func (sc DataSiteConfigAttributes) IpRestriction() terra.ListValue[DataSiteConfigIpRestrictionAttributes] {
	return terra.ReferenceAsList[DataSiteConfigIpRestrictionAttributes](sc.ref.Append("ip_restriction"))
}

func (sc DataSiteConfigAttributes) ScmIpRestriction() terra.ListValue[DataSiteConfigScmIpRestrictionAttributes] {
	return terra.ReferenceAsList[DataSiteConfigScmIpRestrictionAttributes](sc.ref.Append("scm_ip_restriction"))
}

type DataSiteConfigCorsAttributes struct {
	ref terra.Reference
}

func (c DataSiteConfigCorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataSiteConfigCorsAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigCorsAttributes {
	return DataSiteConfigCorsAttributes{ref: ref}
}

func (c DataSiteConfigCorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataSiteConfigCorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c DataSiteConfigCorsAttributes) SupportCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("support_credentials"))
}

type DataSiteConfigIpRestrictionAttributes struct {
	ref terra.Reference
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigIpRestrictionAttributes {
	return DataSiteConfigIpRestrictionAttributes{ref: ref}
}

func (ir DataSiteConfigIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir DataSiteConfigIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir DataSiteConfigIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_address"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("name"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("priority"))
}

func (ir DataSiteConfigIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("service_tag"))
}

func (ir DataSiteConfigIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("virtual_network_subnet_id"))
}

func (ir DataSiteConfigIpRestrictionAttributes) Headers() terra.ListValue[DataSiteConfigIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[DataSiteConfigIpRestrictionHeadersAttributes](ir.ref.Append("headers"))
}

type DataSiteConfigIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigIpRestrictionHeadersAttributes {
	return DataSiteConfigIpRestrictionHeadersAttributes{ref: ref}
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h DataSiteConfigIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type DataSiteConfigScmIpRestrictionAttributes struct {
	ref terra.Reference
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigScmIpRestrictionAttributes {
	return DataSiteConfigScmIpRestrictionAttributes{ref: ref}
}

func (sir DataSiteConfigScmIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("action"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("ip_address"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("name"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(sir.ref.Append("priority"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("service_tag"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("virtual_network_subnet_id"))
}

func (sir DataSiteConfigScmIpRestrictionAttributes) Headers() terra.ListValue[DataSiteConfigScmIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[DataSiteConfigScmIpRestrictionHeadersAttributes](sir.ref.Append("headers"))
}

type DataSiteConfigScmIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) DataSiteConfigScmIpRestrictionHeadersAttributes {
	return DataSiteConfigScmIpRestrictionHeadersAttributes{ref: ref}
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h DataSiteConfigScmIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type DataSiteCredentialAttributes struct {
	ref terra.Reference
}

func (sc DataSiteCredentialAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSiteCredentialAttributes) InternalWithRef(ref terra.Reference) DataSiteCredentialAttributes {
	return DataSiteCredentialAttributes{ref: ref}
}

func (sc DataSiteCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSiteCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

func (sc DataSiteCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("username"))
}

type DataSourceControlAttributes struct {
	ref terra.Reference
}

func (sc DataSourceControlAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataSourceControlAttributes) InternalWithRef(ref terra.Reference) DataSourceControlAttributes {
	return DataSourceControlAttributes{ref: ref}
}

func (sc DataSourceControlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataSourceControlAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("branch"))
}

func (sc DataSourceControlAttributes) ManualIntegration() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("manual_integration"))
}

func (sc DataSourceControlAttributes) RepoUrl() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("repo_url"))
}

func (sc DataSourceControlAttributes) RollbackEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("rollback_enabled"))
}

func (sc DataSourceControlAttributes) UseMercurial() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_mercurial"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataConnectionStringState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type DataSiteConfigState struct {
	AcrUseManagedIdentityCredentials bool                                  `json:"acr_use_managed_identity_credentials"`
	AcrUserManagedIdentityClientId   string                                `json:"acr_user_managed_identity_client_id"`
	AlwaysOn                         bool                                  `json:"always_on"`
	AppCommandLine                   string                                `json:"app_command_line"`
	DefaultDocuments                 []string                              `json:"default_documents"`
	DotnetFrameworkVersion           string                                `json:"dotnet_framework_version"`
	FtpsState                        string                                `json:"ftps_state"`
	HealthCheckPath                  string                                `json:"health_check_path"`
	Http2Enabled                     bool                                  `json:"http2_enabled"`
	JavaContainer                    string                                `json:"java_container"`
	JavaContainerVersion             string                                `json:"java_container_version"`
	JavaVersion                      string                                `json:"java_version"`
	LinuxFxVersion                   string                                `json:"linux_fx_version"`
	LocalMysqlEnabled                bool                                  `json:"local_mysql_enabled"`
	ManagedPipelineMode              string                                `json:"managed_pipeline_mode"`
	MinTlsVersion                    string                                `json:"min_tls_version"`
	NumberOfWorkers                  float64                               `json:"number_of_workers"`
	PhpVersion                       string                                `json:"php_version"`
	PythonVersion                    string                                `json:"python_version"`
	RemoteDebuggingEnabled           bool                                  `json:"remote_debugging_enabled"`
	RemoteDebuggingVersion           string                                `json:"remote_debugging_version"`
	ScmType                          string                                `json:"scm_type"`
	ScmUseMainIpRestriction          bool                                  `json:"scm_use_main_ip_restriction"`
	Use32BitWorkerProcess            bool                                  `json:"use_32_bit_worker_process"`
	VnetRouteAllEnabled              bool                                  `json:"vnet_route_all_enabled"`
	WebsocketsEnabled                bool                                  `json:"websockets_enabled"`
	WindowsFxVersion                 string                                `json:"windows_fx_version"`
	Cors                             []DataSiteConfigCorsState             `json:"cors"`
	IpRestriction                    []DataSiteConfigIpRestrictionState    `json:"ip_restriction"`
	ScmIpRestriction                 []DataSiteConfigScmIpRestrictionState `json:"scm_ip_restriction"`
}

type DataSiteConfigCorsState struct {
	AllowedOrigins     []string `json:"allowed_origins"`
	SupportCredentials bool     `json:"support_credentials"`
}

type DataSiteConfigIpRestrictionState struct {
	Action                 string                                    `json:"action"`
	IpAddress              string                                    `json:"ip_address"`
	Name                   string                                    `json:"name"`
	Priority               float64                                   `json:"priority"`
	ServiceTag             string                                    `json:"service_tag"`
	VirtualNetworkSubnetId string                                    `json:"virtual_network_subnet_id"`
	Headers                []DataSiteConfigIpRestrictionHeadersState `json:"headers"`
}

type DataSiteConfigIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type DataSiteConfigScmIpRestrictionState struct {
	Action                 string                                       `json:"action"`
	IpAddress              string                                       `json:"ip_address"`
	Name                   string                                       `json:"name"`
	Priority               float64                                      `json:"priority"`
	ServiceTag             string                                       `json:"service_tag"`
	VirtualNetworkSubnetId string                                       `json:"virtual_network_subnet_id"`
	Headers                []DataSiteConfigScmIpRestrictionHeadersState `json:"headers"`
}

type DataSiteConfigScmIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type DataSiteCredentialState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type DataSourceControlState struct {
	Branch            string `json:"branch"`
	ManualIntegration bool   `json:"manual_integration"`
	RepoUrl           string `json:"repo_url"`
	RollbackEnabled   bool   `json:"rollback_enabled"`
	UseMercurial      bool   `json:"use_mercurial"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
