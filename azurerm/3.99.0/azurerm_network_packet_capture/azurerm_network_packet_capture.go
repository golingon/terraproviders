// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_packet_capture

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_network_packet_capture.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetworkPacketCaptureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anpc *Resource) Type() string {
	return "azurerm_network_packet_capture"
}

// LocalName returns the local name for [Resource].
func (anpc *Resource) LocalName() string {
	return anpc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anpc *Resource) Configuration() interface{} {
	return anpc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anpc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anpc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anpc *Resource) Dependencies() terra.Dependencies {
	return anpc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anpc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anpc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anpc *Resource) Attributes() azurermNetworkPacketCaptureAttributes {
	return azurermNetworkPacketCaptureAttributes{ref: terra.ReferenceResource(anpc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anpc *Resource) ImportState(state io.Reader) error {
	anpc.state = &azurermNetworkPacketCaptureState{}
	if err := json.NewDecoder(state).Decode(anpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anpc.Type(), anpc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anpc *Resource) State() (*azurermNetworkPacketCaptureState, bool) {
	return anpc.state, anpc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anpc *Resource) StateMust() *azurermNetworkPacketCaptureState {
	if anpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anpc.Type(), anpc.LocalName()))
	}
	return anpc.state
}

// Args contains the configurations for azurerm_network_packet_capture.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumBytesPerPacket: number, optional
	MaximumBytesPerPacket terra.NumberValue `hcl:"maximum_bytes_per_packet,attr"`
	// MaximumBytesPerSession: number, optional
	MaximumBytesPerSession terra.NumberValue `hcl:"maximum_bytes_per_session,attr"`
	// MaximumCaptureDuration: number, optional
	MaximumCaptureDuration terra.NumberValue `hcl:"maximum_capture_duration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkWatcherName: string, required
	NetworkWatcherName terra.StringValue `hcl:"network_watcher_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Filter: min=0
	Filter []Filter `hcl:"filter,block" validate:"min=0"`
	// StorageLocation: required
	StorageLocation *StorageLocation `hcl:"storage_location,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetworkPacketCaptureAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anpc.ref.Append("id"))
}

// MaximumBytesPerPacket returns a reference to field maximum_bytes_per_packet of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) MaximumBytesPerPacket() terra.NumberValue {
	return terra.ReferenceAsNumber(anpc.ref.Append("maximum_bytes_per_packet"))
}

// MaximumBytesPerSession returns a reference to field maximum_bytes_per_session of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) MaximumBytesPerSession() terra.NumberValue {
	return terra.ReferenceAsNumber(anpc.ref.Append("maximum_bytes_per_session"))
}

// MaximumCaptureDuration returns a reference to field maximum_capture_duration of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) MaximumCaptureDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(anpc.ref.Append("maximum_capture_duration"))
}

// Name returns a reference to field name of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anpc.ref.Append("name"))
}

// NetworkWatcherName returns a reference to field network_watcher_name of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) NetworkWatcherName() terra.StringValue {
	return terra.ReferenceAsString(anpc.ref.Append("network_watcher_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(anpc.ref.Append("resource_group_name"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_network_packet_capture.
func (anpc azurermNetworkPacketCaptureAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(anpc.ref.Append("target_resource_id"))
}

func (anpc azurermNetworkPacketCaptureAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](anpc.ref.Append("filter"))
}

func (anpc azurermNetworkPacketCaptureAttributes) StorageLocation() terra.ListValue[StorageLocationAttributes] {
	return terra.ReferenceAsList[StorageLocationAttributes](anpc.ref.Append("storage_location"))
}

func (anpc azurermNetworkPacketCaptureAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anpc.ref.Append("timeouts"))
}

type azurermNetworkPacketCaptureState struct {
	Id                     string                 `json:"id"`
	MaximumBytesPerPacket  float64                `json:"maximum_bytes_per_packet"`
	MaximumBytesPerSession float64                `json:"maximum_bytes_per_session"`
	MaximumCaptureDuration float64                `json:"maximum_capture_duration"`
	Name                   string                 `json:"name"`
	NetworkWatcherName     string                 `json:"network_watcher_name"`
	ResourceGroupName      string                 `json:"resource_group_name"`
	TargetResourceId       string                 `json:"target_resource_id"`
	Filter                 []FilterState          `json:"filter"`
	StorageLocation        []StorageLocationState `json:"storage_location"`
	Timeouts               *TimeoutsState         `json:"timeouts"`
}
