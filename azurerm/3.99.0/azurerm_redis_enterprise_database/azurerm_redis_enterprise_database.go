// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_redis_enterprise_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_redis_enterprise_database.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRedisEnterpriseDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ared *Resource) Type() string {
	return "azurerm_redis_enterprise_database"
}

// LocalName returns the local name for [Resource].
func (ared *Resource) LocalName() string {
	return ared.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ared *Resource) Configuration() interface{} {
	return ared.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ared *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ared)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ared *Resource) Dependencies() terra.Dependencies {
	return ared.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ared *Resource) LifecycleManagement() *terra.Lifecycle {
	return ared.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ared *Resource) Attributes() azurermRedisEnterpriseDatabaseAttributes {
	return azurermRedisEnterpriseDatabaseAttributes{ref: terra.ReferenceResource(ared)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ared *Resource) ImportState(state io.Reader) error {
	ared.state = &azurermRedisEnterpriseDatabaseState{}
	if err := json.NewDecoder(state).Decode(ared.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ared.Type(), ared.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ared *Resource) State() (*azurermRedisEnterpriseDatabaseState, bool) {
	return ared.state, ared.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ared *Resource) StateMust() *azurermRedisEnterpriseDatabaseState {
	if ared.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ared.Type(), ared.LocalName()))
	}
	return ared.state
}

// Args contains the configurations for azurerm_redis_enterprise_database.
type Args struct {
	// ClientProtocol: string, optional
	ClientProtocol terra.StringValue `hcl:"client_protocol,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ClusteringPolicy: string, optional
	ClusteringPolicy terra.StringValue `hcl:"clustering_policy,attr"`
	// EvictionPolicy: string, optional
	EvictionPolicy terra.StringValue `hcl:"eviction_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedDatabaseGroupNickname: string, optional
	LinkedDatabaseGroupNickname terra.StringValue `hcl:"linked_database_group_nickname,attr"`
	// LinkedDatabaseId: set of string, optional
	LinkedDatabaseId terra.SetValue[terra.StringValue] `hcl:"linked_database_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ResourceGroupName: string, optional
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr"`
	// Module: min=0,max=4
	Module []Module `hcl:"module,block" validate:"min=0,max=4"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRedisEnterpriseDatabaseAttributes struct {
	ref terra.Reference
}

// ClientProtocol returns a reference to field client_protocol of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) ClientProtocol() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("client_protocol"))
}

// ClusterId returns a reference to field cluster_id of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("cluster_id"))
}

// ClusteringPolicy returns a reference to field clustering_policy of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) ClusteringPolicy() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("clustering_policy"))
}

// EvictionPolicy returns a reference to field eviction_policy of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) EvictionPolicy() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("eviction_policy"))
}

// Id returns a reference to field id of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("id"))
}

// LinkedDatabaseGroupNickname returns a reference to field linked_database_group_nickname of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) LinkedDatabaseGroupNickname() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("linked_database_group_nickname"))
}

// LinkedDatabaseId returns a reference to field linked_database_id of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) LinkedDatabaseId() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ared.ref.Append("linked_database_id"))
}

// Name returns a reference to field name of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("name"))
}

// Port returns a reference to field port of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ared.ref.Append("port"))
}

// PrimaryAccessKey returns a reference to field primary_access_key of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("primary_access_key"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("resource_group_name"))
}

// SecondaryAccessKey returns a reference to field secondary_access_key of azurerm_redis_enterprise_database.
func (ared azurermRedisEnterpriseDatabaseAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ared.ref.Append("secondary_access_key"))
}

func (ared azurermRedisEnterpriseDatabaseAttributes) Module() terra.ListValue[ModuleAttributes] {
	return terra.ReferenceAsList[ModuleAttributes](ared.ref.Append("module"))
}

func (ared azurermRedisEnterpriseDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ared.ref.Append("timeouts"))
}

type azurermRedisEnterpriseDatabaseState struct {
	ClientProtocol              string         `json:"client_protocol"`
	ClusterId                   string         `json:"cluster_id"`
	ClusteringPolicy            string         `json:"clustering_policy"`
	EvictionPolicy              string         `json:"eviction_policy"`
	Id                          string         `json:"id"`
	LinkedDatabaseGroupNickname string         `json:"linked_database_group_nickname"`
	LinkedDatabaseId            []string       `json:"linked_database_id"`
	Name                        string         `json:"name"`
	Port                        float64        `json:"port"`
	PrimaryAccessKey            string         `json:"primary_access_key"`
	ResourceGroupName           string         `json:"resource_group_name"`
	SecondaryAccessKey          string         `json:"secondary_access_key"`
	Module                      []ModuleState  `json:"module"`
	Timeouts                    *TimeoutsState `json:"timeouts"`
}
