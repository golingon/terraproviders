// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_function_app

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthSettings struct {
	// AdditionalLoginParams: map of string, optional
	AdditionalLoginParams terra.MapValue[terra.StringValue] `hcl:"additional_login_params,attr"`
	// AllowedExternalRedirectUrls: list of string, optional
	AllowedExternalRedirectUrls terra.ListValue[terra.StringValue] `hcl:"allowed_external_redirect_urls,attr"`
	// DefaultProvider: string, optional
	DefaultProvider terra.StringValue `hcl:"default_provider,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// RuntimeVersion: string, optional
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr"`
	// TokenRefreshExtensionHours: number, optional
	TokenRefreshExtensionHours terra.NumberValue `hcl:"token_refresh_extension_hours,attr"`
	// TokenStoreEnabled: bool, optional
	TokenStoreEnabled terra.BoolValue `hcl:"token_store_enabled,attr"`
	// UnauthenticatedClientAction: string, optional
	UnauthenticatedClientAction terra.StringValue `hcl:"unauthenticated_client_action,attr"`
	// AuthSettingsActiveDirectory: optional
	ActiveDirectory *AuthSettingsActiveDirectory `hcl:"active_directory,block"`
	// AuthSettingsFacebook: optional
	Facebook *AuthSettingsFacebook `hcl:"facebook,block"`
	// AuthSettingsGoogle: optional
	Google *AuthSettingsGoogle `hcl:"google,block"`
	// AuthSettingsMicrosoft: optional
	Microsoft *AuthSettingsMicrosoft `hcl:"microsoft,block"`
	// AuthSettingsTwitter: optional
	Twitter *AuthSettingsTwitter `hcl:"twitter,block"`
}

type AuthSettingsActiveDirectory struct {
	// AllowedAudiences: list of string, optional
	AllowedAudiences terra.ListValue[terra.StringValue] `hcl:"allowed_audiences,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
}

type AuthSettingsFacebook struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// AppSecret: string, required
	AppSecret terra.StringValue `hcl:"app_secret,attr" validate:"required"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsGoogle struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsMicrosoft struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsTwitter struct {
	// ConsumerKey: string, required
	ConsumerKey terra.StringValue `hcl:"consumer_key,attr" validate:"required"`
	// ConsumerSecret: string, required
	ConsumerSecret terra.StringValue `hcl:"consumer_secret,attr" validate:"required"`
}

type ConnectionString struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SiteConfig struct {
	// AlwaysOn: bool, optional
	AlwaysOn terra.BoolValue `hcl:"always_on,attr"`
	// AppScaleLimit: number, optional
	AppScaleLimit terra.NumberValue `hcl:"app_scale_limit,attr"`
	// AutoSwapSlotName: string, optional
	AutoSwapSlotName terra.StringValue `hcl:"auto_swap_slot_name,attr"`
	// DotnetFrameworkVersion: string, optional
	DotnetFrameworkVersion terra.StringValue `hcl:"dotnet_framework_version,attr"`
	// ElasticInstanceMinimum: number, optional
	ElasticInstanceMinimum terra.NumberValue `hcl:"elastic_instance_minimum,attr"`
	// FtpsState: string, optional
	FtpsState terra.StringValue `hcl:"ftps_state,attr"`
	// HealthCheckPath: string, optional
	HealthCheckPath terra.StringValue `hcl:"health_check_path,attr"`
	// Http2Enabled: bool, optional
	Http2Enabled terra.BoolValue `hcl:"http2_enabled,attr"`
	// JavaVersion: string, optional
	JavaVersion terra.StringValue `hcl:"java_version,attr"`
	// LinuxFxVersion: string, optional
	LinuxFxVersion terra.StringValue `hcl:"linux_fx_version,attr"`
	// MinTlsVersion: string, optional
	MinTlsVersion terra.StringValue `hcl:"min_tls_version,attr"`
	// PreWarmedInstanceCount: number, optional
	PreWarmedInstanceCount terra.NumberValue `hcl:"pre_warmed_instance_count,attr"`
	// RuntimeScaleMonitoringEnabled: bool, optional
	RuntimeScaleMonitoringEnabled terra.BoolValue `hcl:"runtime_scale_monitoring_enabled,attr"`
	// ScmType: string, optional
	ScmType terra.StringValue `hcl:"scm_type,attr"`
	// ScmUseMainIpRestriction: bool, optional
	ScmUseMainIpRestriction terra.BoolValue `hcl:"scm_use_main_ip_restriction,attr"`
	// Use32BitWorkerProcess: bool, optional
	Use32BitWorkerProcess terra.BoolValue `hcl:"use_32_bit_worker_process,attr"`
	// VnetRouteAllEnabled: bool, optional
	VnetRouteAllEnabled terra.BoolValue `hcl:"vnet_route_all_enabled,attr"`
	// WebsocketsEnabled: bool, optional
	WebsocketsEnabled terra.BoolValue `hcl:"websockets_enabled,attr"`
	// SiteConfigIpRestriction: min=0
	IpRestriction []SiteConfigIpRestriction `hcl:"ip_restriction,block" validate:"min=0"`
	// SiteConfigScmIpRestriction: min=0
	ScmIpRestriction []SiteConfigScmIpRestriction `hcl:"scm_ip_restriction,block" validate:"min=0"`
	// SiteConfigCors: optional
	Cors *SiteConfigCors `hcl:"cors,block"`
}

type SiteConfigIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigIpRestrictionHeaders: min=0
	Headers []SiteConfigIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type SiteConfigIpRestrictionHeaders struct {
	// XAzureFdid: set of string, optional
	XAzureFdid terra.SetValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: set of string, optional
	XFdHealthProbe terra.SetValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: set of string, optional
	XForwardedFor terra.SetValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: set of string, optional
	XForwardedHost terra.SetValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type SiteConfigScmIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigScmIpRestrictionHeaders: min=0
	Headers []SiteConfigScmIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type SiteConfigScmIpRestrictionHeaders struct {
	// XAzureFdid: set of string, optional
	XAzureFdid terra.SetValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: set of string, optional
	XFdHealthProbe terra.SetValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: set of string, optional
	XForwardedFor terra.SetValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: set of string, optional
	XForwardedHost terra.SetValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type SiteConfigCors struct {
	// AllowedOrigins: set of string, required
	AllowedOrigins terra.SetValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// SupportCredentials: bool, optional
	SupportCredentials terra.BoolValue `hcl:"support_credentials,attr"`
}

type SourceControl struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// ManualIntegration: bool, optional
	ManualIntegration terra.BoolValue `hcl:"manual_integration,attr"`
	// RepoUrl: string, optional
	RepoUrl terra.StringValue `hcl:"repo_url,attr"`
	// RollbackEnabled: bool, optional
	RollbackEnabled terra.BoolValue `hcl:"rollback_enabled,attr"`
	// UseMercurial: bool, optional
	UseMercurial terra.BoolValue `hcl:"use_mercurial,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SiteCredentialAttributes struct {
	ref terra.Reference
}

func (sc SiteCredentialAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteCredentialAttributes) InternalWithRef(ref terra.Reference) SiteCredentialAttributes {
	return SiteCredentialAttributes{ref: ref}
}

func (sc SiteCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

func (sc SiteCredentialAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("username"))
}

type AuthSettingsAttributes struct {
	ref terra.Reference
}

func (as AuthSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AuthSettingsAttributes) InternalWithRef(ref terra.Reference) AuthSettingsAttributes {
	return AuthSettingsAttributes{ref: ref}
}

func (as AuthSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AuthSettingsAttributes) AdditionalLoginParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("additional_login_params"))
}

func (as AuthSettingsAttributes) AllowedExternalRedirectUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("allowed_external_redirect_urls"))
}

func (as AuthSettingsAttributes) DefaultProvider() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("default_provider"))
}

func (as AuthSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enabled"))
}

func (as AuthSettingsAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("issuer"))
}

func (as AuthSettingsAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("runtime_version"))
}

func (as AuthSettingsAttributes) TokenRefreshExtensionHours() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("token_refresh_extension_hours"))
}

func (as AuthSettingsAttributes) TokenStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("token_store_enabled"))
}

func (as AuthSettingsAttributes) UnauthenticatedClientAction() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("unauthenticated_client_action"))
}

func (as AuthSettingsAttributes) ActiveDirectory() terra.ListValue[AuthSettingsActiveDirectoryAttributes] {
	return terra.ReferenceAsList[AuthSettingsActiveDirectoryAttributes](as.ref.Append("active_directory"))
}

func (as AuthSettingsAttributes) Facebook() terra.ListValue[AuthSettingsFacebookAttributes] {
	return terra.ReferenceAsList[AuthSettingsFacebookAttributes](as.ref.Append("facebook"))
}

func (as AuthSettingsAttributes) Google() terra.ListValue[AuthSettingsGoogleAttributes] {
	return terra.ReferenceAsList[AuthSettingsGoogleAttributes](as.ref.Append("google"))
}

func (as AuthSettingsAttributes) Microsoft() terra.ListValue[AuthSettingsMicrosoftAttributes] {
	return terra.ReferenceAsList[AuthSettingsMicrosoftAttributes](as.ref.Append("microsoft"))
}

func (as AuthSettingsAttributes) Twitter() terra.ListValue[AuthSettingsTwitterAttributes] {
	return terra.ReferenceAsList[AuthSettingsTwitterAttributes](as.ref.Append("twitter"))
}

type AuthSettingsActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) AuthSettingsActiveDirectoryAttributes {
	return AuthSettingsActiveDirectoryAttributes{ref: ref}
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad AuthSettingsActiveDirectoryAttributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ad.ref.Append("allowed_audiences"))
}

func (ad AuthSettingsActiveDirectoryAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_id"))
}

func (ad AuthSettingsActiveDirectoryAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_secret"))
}

type AuthSettingsFacebookAttributes struct {
	ref terra.Reference
}

func (f AuthSettingsFacebookAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f AuthSettingsFacebookAttributes) InternalWithRef(ref terra.Reference) AuthSettingsFacebookAttributes {
	return AuthSettingsFacebookAttributes{ref: ref}
}

func (f AuthSettingsFacebookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f AuthSettingsFacebookAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_id"))
}

func (f AuthSettingsFacebookAttributes) AppSecret() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_secret"))
}

func (f AuthSettingsFacebookAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("oauth_scopes"))
}

type AuthSettingsGoogleAttributes struct {
	ref terra.Reference
}

func (g AuthSettingsGoogleAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g AuthSettingsGoogleAttributes) InternalWithRef(ref terra.Reference) AuthSettingsGoogleAttributes {
	return AuthSettingsGoogleAttributes{ref: ref}
}

func (g AuthSettingsGoogleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g AuthSettingsGoogleAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_id"))
}

func (g AuthSettingsGoogleAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret"))
}

func (g AuthSettingsGoogleAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("oauth_scopes"))
}

type AuthSettingsMicrosoftAttributes struct {
	ref terra.Reference
}

func (m AuthSettingsMicrosoftAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m AuthSettingsMicrosoftAttributes) InternalWithRef(ref terra.Reference) AuthSettingsMicrosoftAttributes {
	return AuthSettingsMicrosoftAttributes{ref: ref}
}

func (m AuthSettingsMicrosoftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m AuthSettingsMicrosoftAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_id"))
}

func (m AuthSettingsMicrosoftAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_secret"))
}

func (m AuthSettingsMicrosoftAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("oauth_scopes"))
}

type AuthSettingsTwitterAttributes struct {
	ref terra.Reference
}

func (t AuthSettingsTwitterAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t AuthSettingsTwitterAttributes) InternalWithRef(ref terra.Reference) AuthSettingsTwitterAttributes {
	return AuthSettingsTwitterAttributes{ref: ref}
}

func (t AuthSettingsTwitterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t AuthSettingsTwitterAttributes) ConsumerKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_key"))
}

func (t AuthSettingsTwitterAttributes) ConsumerSecret() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_secret"))
}

type ConnectionStringAttributes struct {
	ref terra.Reference
}

func (cs ConnectionStringAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConnectionStringAttributes) InternalWithRef(ref terra.Reference) ConnectionStringAttributes {
	return ConnectionStringAttributes{ref: ref}
}

func (cs ConnectionStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConnectionStringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs ConnectionStringAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

func (cs ConnectionStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type SiteConfigAttributes struct {
	ref terra.Reference
}

func (sc SiteConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteConfigAttributes) InternalWithRef(ref terra.Reference) SiteConfigAttributes {
	return SiteConfigAttributes{ref: ref}
}

func (sc SiteConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteConfigAttributes) AlwaysOn() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("always_on"))
}

func (sc SiteConfigAttributes) AppScaleLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("app_scale_limit"))
}

func (sc SiteConfigAttributes) AutoSwapSlotName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("auto_swap_slot_name"))
}

func (sc SiteConfigAttributes) DotnetFrameworkVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("dotnet_framework_version"))
}

func (sc SiteConfigAttributes) ElasticInstanceMinimum() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("elastic_instance_minimum"))
}

func (sc SiteConfigAttributes) FtpsState() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ftps_state"))
}

func (sc SiteConfigAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("health_check_path"))
}

func (sc SiteConfigAttributes) Http2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("http2_enabled"))
}

func (sc SiteConfigAttributes) JavaVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("java_version"))
}

func (sc SiteConfigAttributes) LinuxFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("linux_fx_version"))
}

func (sc SiteConfigAttributes) MinTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("min_tls_version"))
}

func (sc SiteConfigAttributes) PreWarmedInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("pre_warmed_instance_count"))
}

func (sc SiteConfigAttributes) RuntimeScaleMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("runtime_scale_monitoring_enabled"))
}

func (sc SiteConfigAttributes) ScmType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_type"))
}

func (sc SiteConfigAttributes) ScmUseMainIpRestriction() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("scm_use_main_ip_restriction"))
}

func (sc SiteConfigAttributes) Use32BitWorkerProcess() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_32_bit_worker_process"))
}

func (sc SiteConfigAttributes) VnetRouteAllEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("vnet_route_all_enabled"))
}

func (sc SiteConfigAttributes) WebsocketsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("websockets_enabled"))
}

func (sc SiteConfigAttributes) IpRestriction() terra.ListValue[SiteConfigIpRestrictionAttributes] {
	return terra.ReferenceAsList[SiteConfigIpRestrictionAttributes](sc.ref.Append("ip_restriction"))
}

func (sc SiteConfigAttributes) ScmIpRestriction() terra.ListValue[SiteConfigScmIpRestrictionAttributes] {
	return terra.ReferenceAsList[SiteConfigScmIpRestrictionAttributes](sc.ref.Append("scm_ip_restriction"))
}

func (sc SiteConfigAttributes) Cors() terra.ListValue[SiteConfigCorsAttributes] {
	return terra.ReferenceAsList[SiteConfigCorsAttributes](sc.ref.Append("cors"))
}

type SiteConfigIpRestrictionAttributes struct {
	ref terra.Reference
}

func (ir SiteConfigIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir SiteConfigIpRestrictionAttributes) InternalWithRef(ref terra.Reference) SiteConfigIpRestrictionAttributes {
	return SiteConfigIpRestrictionAttributes{ref: ref}
}

func (ir SiteConfigIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir SiteConfigIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir SiteConfigIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_address"))
}

func (ir SiteConfigIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("name"))
}

func (ir SiteConfigIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("priority"))
}

func (ir SiteConfigIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("service_tag"))
}

func (ir SiteConfigIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("virtual_network_subnet_id"))
}

func (ir SiteConfigIpRestrictionAttributes) Headers() terra.ListValue[SiteConfigIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[SiteConfigIpRestrictionHeadersAttributes](ir.ref.Append("headers"))
}

type SiteConfigIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) SiteConfigIpRestrictionHeadersAttributes {
	return SiteConfigIpRestrictionHeadersAttributes{ref: ref}
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SiteConfigIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type SiteConfigScmIpRestrictionAttributes struct {
	ref terra.Reference
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalWithRef(ref terra.Reference) SiteConfigScmIpRestrictionAttributes {
	return SiteConfigScmIpRestrictionAttributes{ref: ref}
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir SiteConfigScmIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("action"))
}

func (sir SiteConfigScmIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("ip_address"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("name"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(sir.ref.Append("priority"))
}

func (sir SiteConfigScmIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("service_tag"))
}

func (sir SiteConfigScmIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("virtual_network_subnet_id"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Headers() terra.ListValue[SiteConfigScmIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[SiteConfigScmIpRestrictionHeadersAttributes](sir.ref.Append("headers"))
}

type SiteConfigScmIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) SiteConfigScmIpRestrictionHeadersAttributes {
	return SiteConfigScmIpRestrictionHeadersAttributes{ref: ref}
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XAzureFdid() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XFdHealthProbe() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XForwardedFor() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XForwardedHost() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type SiteConfigCorsAttributes struct {
	ref terra.Reference
}

func (c SiteConfigCorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SiteConfigCorsAttributes) InternalWithRef(ref terra.Reference) SiteConfigCorsAttributes {
	return SiteConfigCorsAttributes{ref: ref}
}

func (c SiteConfigCorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SiteConfigCorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c SiteConfigCorsAttributes) SupportCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("support_credentials"))
}

type SourceControlAttributes struct {
	ref terra.Reference
}

func (sc SourceControlAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SourceControlAttributes) InternalWithRef(ref terra.Reference) SourceControlAttributes {
	return SourceControlAttributes{ref: ref}
}

func (sc SourceControlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SourceControlAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("branch"))
}

func (sc SourceControlAttributes) ManualIntegration() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("manual_integration"))
}

func (sc SourceControlAttributes) RepoUrl() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("repo_url"))
}

func (sc SourceControlAttributes) RollbackEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("rollback_enabled"))
}

func (sc SourceControlAttributes) UseMercurial() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_mercurial"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SiteCredentialState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type AuthSettingsState struct {
	AdditionalLoginParams       map[string]string                  `json:"additional_login_params"`
	AllowedExternalRedirectUrls []string                           `json:"allowed_external_redirect_urls"`
	DefaultProvider             string                             `json:"default_provider"`
	Enabled                     bool                               `json:"enabled"`
	Issuer                      string                             `json:"issuer"`
	RuntimeVersion              string                             `json:"runtime_version"`
	TokenRefreshExtensionHours  float64                            `json:"token_refresh_extension_hours"`
	TokenStoreEnabled           bool                               `json:"token_store_enabled"`
	UnauthenticatedClientAction string                             `json:"unauthenticated_client_action"`
	ActiveDirectory             []AuthSettingsActiveDirectoryState `json:"active_directory"`
	Facebook                    []AuthSettingsFacebookState        `json:"facebook"`
	Google                      []AuthSettingsGoogleState          `json:"google"`
	Microsoft                   []AuthSettingsMicrosoftState       `json:"microsoft"`
	Twitter                     []AuthSettingsTwitterState         `json:"twitter"`
}

type AuthSettingsActiveDirectoryState struct {
	AllowedAudiences []string `json:"allowed_audiences"`
	ClientId         string   `json:"client_id"`
	ClientSecret     string   `json:"client_secret"`
}

type AuthSettingsFacebookState struct {
	AppId       string   `json:"app_id"`
	AppSecret   string   `json:"app_secret"`
	OauthScopes []string `json:"oauth_scopes"`
}

type AuthSettingsGoogleState struct {
	ClientId     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	OauthScopes  []string `json:"oauth_scopes"`
}

type AuthSettingsMicrosoftState struct {
	ClientId     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	OauthScopes  []string `json:"oauth_scopes"`
}

type AuthSettingsTwitterState struct {
	ConsumerKey    string `json:"consumer_key"`
	ConsumerSecret string `json:"consumer_secret"`
}

type ConnectionStringState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type SiteConfigState struct {
	AlwaysOn                      bool                              `json:"always_on"`
	AppScaleLimit                 float64                           `json:"app_scale_limit"`
	AutoSwapSlotName              string                            `json:"auto_swap_slot_name"`
	DotnetFrameworkVersion        string                            `json:"dotnet_framework_version"`
	ElasticInstanceMinimum        float64                           `json:"elastic_instance_minimum"`
	FtpsState                     string                            `json:"ftps_state"`
	HealthCheckPath               string                            `json:"health_check_path"`
	Http2Enabled                  bool                              `json:"http2_enabled"`
	JavaVersion                   string                            `json:"java_version"`
	LinuxFxVersion                string                            `json:"linux_fx_version"`
	MinTlsVersion                 string                            `json:"min_tls_version"`
	PreWarmedInstanceCount        float64                           `json:"pre_warmed_instance_count"`
	RuntimeScaleMonitoringEnabled bool                              `json:"runtime_scale_monitoring_enabled"`
	ScmType                       string                            `json:"scm_type"`
	ScmUseMainIpRestriction       bool                              `json:"scm_use_main_ip_restriction"`
	Use32BitWorkerProcess         bool                              `json:"use_32_bit_worker_process"`
	VnetRouteAllEnabled           bool                              `json:"vnet_route_all_enabled"`
	WebsocketsEnabled             bool                              `json:"websockets_enabled"`
	IpRestriction                 []SiteConfigIpRestrictionState    `json:"ip_restriction"`
	ScmIpRestriction              []SiteConfigScmIpRestrictionState `json:"scm_ip_restriction"`
	Cors                          []SiteConfigCorsState             `json:"cors"`
}

type SiteConfigIpRestrictionState struct {
	Action                 string                                `json:"action"`
	IpAddress              string                                `json:"ip_address"`
	Name                   string                                `json:"name"`
	Priority               float64                               `json:"priority"`
	ServiceTag             string                                `json:"service_tag"`
	VirtualNetworkSubnetId string                                `json:"virtual_network_subnet_id"`
	Headers                []SiteConfigIpRestrictionHeadersState `json:"headers"`
}

type SiteConfigIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type SiteConfigScmIpRestrictionState struct {
	Action                 string                                   `json:"action"`
	IpAddress              string                                   `json:"ip_address"`
	Name                   string                                   `json:"name"`
	Priority               float64                                  `json:"priority"`
	ServiceTag             string                                   `json:"service_tag"`
	VirtualNetworkSubnetId string                                   `json:"virtual_network_subnet_id"`
	Headers                []SiteConfigScmIpRestrictionHeadersState `json:"headers"`
}

type SiteConfigScmIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type SiteConfigCorsState struct {
	AllowedOrigins     []string `json:"allowed_origins"`
	SupportCredentials bool     `json:"support_credentials"`
}

type SourceControlState struct {
	Branch            string `json:"branch"`
	ManualIntegration bool   `json:"manual_integration"`
	RepoUrl           string `json:"repo_url"`
	RollbackEnabled   bool   `json:"rollback_enabled"`
	UseMercurial      bool   `json:"use_mercurial"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
