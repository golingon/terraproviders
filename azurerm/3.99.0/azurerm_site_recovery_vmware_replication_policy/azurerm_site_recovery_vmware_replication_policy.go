// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_site_recovery_vmware_replication_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_site_recovery_vmware_replication_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSiteRecoveryVmwareReplicationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asrvrp *Resource) Type() string {
	return "azurerm_site_recovery_vmware_replication_policy"
}

// LocalName returns the local name for [Resource].
func (asrvrp *Resource) LocalName() string {
	return asrvrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asrvrp *Resource) Configuration() interface{} {
	return asrvrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asrvrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asrvrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asrvrp *Resource) Dependencies() terra.Dependencies {
	return asrvrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asrvrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asrvrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asrvrp *Resource) Attributes() azurermSiteRecoveryVmwareReplicationPolicyAttributes {
	return azurermSiteRecoveryVmwareReplicationPolicyAttributes{ref: terra.ReferenceResource(asrvrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asrvrp *Resource) ImportState(state io.Reader) error {
	asrvrp.state = &azurermSiteRecoveryVmwareReplicationPolicyState{}
	if err := json.NewDecoder(state).Decode(asrvrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asrvrp.Type(), asrvrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asrvrp *Resource) State() (*azurermSiteRecoveryVmwareReplicationPolicyState, bool) {
	return asrvrp.state, asrvrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asrvrp *Resource) StateMust() *azurermSiteRecoveryVmwareReplicationPolicyState {
	if asrvrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asrvrp.Type(), asrvrp.LocalName()))
	}
	return asrvrp.state
}

// Args contains the configurations for azurerm_site_recovery_vmware_replication_policy.
type Args struct {
	// ApplicationConsistentSnapshotFrequencyInMinutes: number, required
	ApplicationConsistentSnapshotFrequencyInMinutes terra.NumberValue `hcl:"application_consistent_snapshot_frequency_in_minutes,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryPointRetentionInMinutes: number, required
	RecoveryPointRetentionInMinutes terra.NumberValue `hcl:"recovery_point_retention_in_minutes,attr" validate:"required"`
	// RecoveryVaultId: string, required
	RecoveryVaultId terra.StringValue `hcl:"recovery_vault_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSiteRecoveryVmwareReplicationPolicyAttributes struct {
	ref terra.Reference
}

// ApplicationConsistentSnapshotFrequencyInMinutes returns a reference to field application_consistent_snapshot_frequency_in_minutes of azurerm_site_recovery_vmware_replication_policy.
func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) ApplicationConsistentSnapshotFrequencyInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(asrvrp.ref.Append("application_consistent_snapshot_frequency_in_minutes"))
}

// Id returns a reference to field id of azurerm_site_recovery_vmware_replication_policy.
func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asrvrp.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_site_recovery_vmware_replication_policy.
func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asrvrp.ref.Append("name"))
}

// RecoveryPointRetentionInMinutes returns a reference to field recovery_point_retention_in_minutes of azurerm_site_recovery_vmware_replication_policy.
func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) RecoveryPointRetentionInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(asrvrp.ref.Append("recovery_point_retention_in_minutes"))
}

// RecoveryVaultId returns a reference to field recovery_vault_id of azurerm_site_recovery_vmware_replication_policy.
func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) RecoveryVaultId() terra.StringValue {
	return terra.ReferenceAsString(asrvrp.ref.Append("recovery_vault_id"))
}

func (asrvrp azurermSiteRecoveryVmwareReplicationPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asrvrp.ref.Append("timeouts"))
}

type azurermSiteRecoveryVmwareReplicationPolicyState struct {
	ApplicationConsistentSnapshotFrequencyInMinutes float64        `json:"application_consistent_snapshot_frequency_in_minutes"`
	Id                                              string         `json:"id"`
	Name                                            string         `json:"name"`
	RecoveryPointRetentionInMinutes                 float64        `json:"recovery_point_retention_in_minutes"`
	RecoveryVaultId                                 string         `json:"recovery_vault_id"`
	Timeouts                                        *TimeoutsState `json:"timeouts"`
}
