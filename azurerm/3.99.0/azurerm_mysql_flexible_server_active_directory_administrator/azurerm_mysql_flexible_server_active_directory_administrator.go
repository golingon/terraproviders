// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mysql_flexible_server_active_directory_administrator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mysql_flexible_server_active_directory_administrator.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMysqlFlexibleServerActiveDirectoryAdministratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amfsada *Resource) Type() string {
	return "azurerm_mysql_flexible_server_active_directory_administrator"
}

// LocalName returns the local name for [Resource].
func (amfsada *Resource) LocalName() string {
	return amfsada.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amfsada *Resource) Configuration() interface{} {
	return amfsada.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amfsada *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amfsada)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amfsada *Resource) Dependencies() terra.Dependencies {
	return amfsada.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amfsada *Resource) LifecycleManagement() *terra.Lifecycle {
	return amfsada.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amfsada *Resource) Attributes() azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes {
	return azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes{ref: terra.ReferenceResource(amfsada)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amfsada *Resource) ImportState(state io.Reader) error {
	amfsada.state = &azurermMysqlFlexibleServerActiveDirectoryAdministratorState{}
	if err := json.NewDecoder(state).Decode(amfsada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amfsada.Type(), amfsada.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amfsada *Resource) State() (*azurermMysqlFlexibleServerActiveDirectoryAdministratorState, bool) {
	return amfsada.state, amfsada.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amfsada *Resource) StateMust() *azurermMysqlFlexibleServerActiveDirectoryAdministratorState {
	if amfsada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amfsada.Type(), amfsada.LocalName()))
	}
	return amfsada.state
}

// Args contains the configurations for azurerm_mysql_flexible_server_active_directory_administrator.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityId: string, required
	IdentityId terra.StringValue `hcl:"identity_id,attr" validate:"required"`
	// Login: string, required
	Login terra.StringValue `hcl:"login,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("id"))
}

// IdentityId returns a reference to field identity_id of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("identity_id"))
}

// Login returns a reference to field login of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) Login() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("login"))
}

// ObjectId returns a reference to field object_id of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("object_id"))
}

// ServerId returns a reference to field server_id of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("server_id"))
}

// TenantId returns a reference to field tenant_id of azurerm_mysql_flexible_server_active_directory_administrator.
func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(amfsada.ref.Append("tenant_id"))
}

func (amfsada azurermMysqlFlexibleServerActiveDirectoryAdministratorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amfsada.ref.Append("timeouts"))
}

type azurermMysqlFlexibleServerActiveDirectoryAdministratorState struct {
	Id         string         `json:"id"`
	IdentityId string         `json:"identity_id"`
	Login      string         `json:"login"`
	ObjectId   string         `json:"object_id"`
	ServerId   string         `json:"server_id"`
	TenantId   string         `json:"tenant_id"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
