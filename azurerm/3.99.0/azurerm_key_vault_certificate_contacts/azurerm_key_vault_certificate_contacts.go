// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_certificate_contacts

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_certificate_contacts.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultCertificateContactsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvcc *Resource) Type() string {
	return "azurerm_key_vault_certificate_contacts"
}

// LocalName returns the local name for [Resource].
func (akvcc *Resource) LocalName() string {
	return akvcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvcc *Resource) Configuration() interface{} {
	return akvcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvcc *Resource) Dependencies() terra.Dependencies {
	return akvcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvcc *Resource) Attributes() azurermKeyVaultCertificateContactsAttributes {
	return azurermKeyVaultCertificateContactsAttributes{ref: terra.ReferenceResource(akvcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvcc *Resource) ImportState(state io.Reader) error {
	akvcc.state = &azurermKeyVaultCertificateContactsState{}
	if err := json.NewDecoder(state).Decode(akvcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvcc.Type(), akvcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvcc *Resource) State() (*azurermKeyVaultCertificateContactsState, bool) {
	return akvcc.state, akvcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvcc *Resource) StateMust() *azurermKeyVaultCertificateContactsState {
	if akvcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvcc.Type(), akvcc.LocalName()))
	}
	return akvcc.state
}

// Args contains the configurations for azurerm_key_vault_certificate_contacts.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// Contact: min=1
	Contact []Contact `hcl:"contact,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultCertificateContactsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_key_vault_certificate_contacts.
func (akvcc azurermKeyVaultCertificateContactsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvcc.ref.Append("id"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_key_vault_certificate_contacts.
func (akvcc azurermKeyVaultCertificateContactsAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akvcc.ref.Append("key_vault_id"))
}

func (akvcc azurermKeyVaultCertificateContactsAttributes) Contact() terra.SetValue[ContactAttributes] {
	return terra.ReferenceAsSet[ContactAttributes](akvcc.ref.Append("contact"))
}

func (akvcc azurermKeyVaultCertificateContactsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvcc.ref.Append("timeouts"))
}

type azurermKeyVaultCertificateContactsState struct {
	Id         string         `json:"id"`
	KeyVaultId string         `json:"key_vault_id"`
	Contact    []ContactState `json:"contact"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
