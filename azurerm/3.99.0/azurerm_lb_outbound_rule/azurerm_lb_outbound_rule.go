// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lb_outbound_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lb_outbound_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLbOutboundRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alor *Resource) Type() string {
	return "azurerm_lb_outbound_rule"
}

// LocalName returns the local name for [Resource].
func (alor *Resource) LocalName() string {
	return alor.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alor *Resource) Configuration() interface{} {
	return alor.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alor *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alor)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alor *Resource) Dependencies() terra.Dependencies {
	return alor.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alor *Resource) LifecycleManagement() *terra.Lifecycle {
	return alor.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alor *Resource) Attributes() azurermLbOutboundRuleAttributes {
	return azurermLbOutboundRuleAttributes{ref: terra.ReferenceResource(alor)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alor *Resource) ImportState(state io.Reader) error {
	alor.state = &azurermLbOutboundRuleState{}
	if err := json.NewDecoder(state).Decode(alor.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alor.Type(), alor.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alor *Resource) State() (*azurermLbOutboundRuleState, bool) {
	return alor.state, alor.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alor *Resource) StateMust() *azurermLbOutboundRuleState {
	if alor.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alor.Type(), alor.LocalName()))
	}
	return alor.state
}

// Args contains the configurations for azurerm_lb_outbound_rule.
type Args struct {
	// AllocatedOutboundPorts: number, optional
	AllocatedOutboundPorts terra.NumberValue `hcl:"allocated_outbound_ports,attr"`
	// BackendAddressPoolId: string, required
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr" validate:"required"`
	// EnableTcpReset: bool, optional
	EnableTcpReset terra.BoolValue `hcl:"enable_tcp_reset,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// LoadbalancerId: string, required
	LoadbalancerId terra.StringValue `hcl:"loadbalancer_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// FrontendIpConfiguration: min=0
	FrontendIpConfiguration []FrontendIpConfiguration `hcl:"frontend_ip_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLbOutboundRuleAttributes struct {
	ref terra.Reference
}

// AllocatedOutboundPorts returns a reference to field allocated_outbound_ports of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) AllocatedOutboundPorts() terra.NumberValue {
	return terra.ReferenceAsNumber(alor.ref.Append("allocated_outbound_ports"))
}

// BackendAddressPoolId returns a reference to field backend_address_pool_id of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(alor.ref.Append("backend_address_pool_id"))
}

// EnableTcpReset returns a reference to field enable_tcp_reset of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) EnableTcpReset() terra.BoolValue {
	return terra.ReferenceAsBool(alor.ref.Append("enable_tcp_reset"))
}

// Id returns a reference to field id of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alor.ref.Append("id"))
}

// IdleTimeoutInMinutes returns a reference to field idle_timeout_in_minutes of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(alor.ref.Append("idle_timeout_in_minutes"))
}

// LoadbalancerId returns a reference to field loadbalancer_id of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) LoadbalancerId() terra.StringValue {
	return terra.ReferenceAsString(alor.ref.Append("loadbalancer_id"))
}

// Name returns a reference to field name of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alor.ref.Append("name"))
}

// Protocol returns a reference to field protocol of azurerm_lb_outbound_rule.
func (alor azurermLbOutboundRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(alor.ref.Append("protocol"))
}

func (alor azurermLbOutboundRuleAttributes) FrontendIpConfiguration() terra.ListValue[FrontendIpConfigurationAttributes] {
	return terra.ReferenceAsList[FrontendIpConfigurationAttributes](alor.ref.Append("frontend_ip_configuration"))
}

func (alor azurermLbOutboundRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alor.ref.Append("timeouts"))
}

type azurermLbOutboundRuleState struct {
	AllocatedOutboundPorts  float64                        `json:"allocated_outbound_ports"`
	BackendAddressPoolId    string                         `json:"backend_address_pool_id"`
	EnableTcpReset          bool                           `json:"enable_tcp_reset"`
	Id                      string                         `json:"id"`
	IdleTimeoutInMinutes    float64                        `json:"idle_timeout_in_minutes"`
	LoadbalancerId          string                         `json:"loadbalancer_id"`
	Name                    string                         `json:"name"`
	Protocol                string                         `json:"protocol"`
	FrontendIpConfiguration []FrontendIpConfigurationState `json:"frontend_ip_configuration"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
