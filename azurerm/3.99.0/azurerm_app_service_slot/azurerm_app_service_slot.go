// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service_slot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_service_slot.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppServiceSlotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aass *Resource) Type() string {
	return "azurerm_app_service_slot"
}

// LocalName returns the local name for [Resource].
func (aass *Resource) LocalName() string {
	return aass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aass *Resource) Configuration() interface{} {
	return aass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aass *Resource) Dependencies() terra.Dependencies {
	return aass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aass *Resource) LifecycleManagement() *terra.Lifecycle {
	return aass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aass *Resource) Attributes() azurermAppServiceSlotAttributes {
	return azurermAppServiceSlotAttributes{ref: terra.ReferenceResource(aass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aass *Resource) ImportState(state io.Reader) error {
	aass.state = &azurermAppServiceSlotState{}
	if err := json.NewDecoder(state).Decode(aass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aass.Type(), aass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aass *Resource) State() (*azurermAppServiceSlotState, bool) {
	return aass.state, aass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aass *Resource) StateMust() *azurermAppServiceSlotState {
	if aass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aass.Type(), aass.LocalName()))
	}
	return aass.state
}

// Args contains the configurations for azurerm_app_service_slot.
type Args struct {
	// AppServiceName: string, required
	AppServiceName terra.StringValue `hcl:"app_service_name,attr" validate:"required"`
	// AppServicePlanId: string, required
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr" validate:"required"`
	// AppSettings: map of string, optional
	AppSettings terra.MapValue[terra.StringValue] `hcl:"app_settings,attr"`
	// ClientAffinityEnabled: bool, optional
	ClientAffinityEnabled terra.BoolValue `hcl:"client_affinity_enabled,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpsOnly: bool, optional
	HttpsOnly terra.BoolValue `hcl:"https_only,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultReferenceIdentityId: string, optional
	KeyVaultReferenceIdentityId terra.StringValue `hcl:"key_vault_reference_identity_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AuthSettings: optional
	AuthSettings *AuthSettings `hcl:"auth_settings,block"`
	// ConnectionString: min=0
	ConnectionString []ConnectionString `hcl:"connection_string,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Logs: optional
	Logs *Logs `hcl:"logs,block"`
	// SiteConfig: optional
	SiteConfig *SiteConfig `hcl:"site_config,block"`
	// StorageAccount: min=0
	StorageAccount []StorageAccount `hcl:"storage_account,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppServiceSlotAttributes struct {
	ref terra.Reference
}

// AppServiceName returns a reference to field app_service_name of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) AppServiceName() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("app_service_name"))
}

// AppServicePlanId returns a reference to field app_service_plan_id of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("app_service_plan_id"))
}

// AppSettings returns a reference to field app_settings of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) AppSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aass.ref.Append("app_settings"))
}

// ClientAffinityEnabled returns a reference to field client_affinity_enabled of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) ClientAffinityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aass.ref.Append("client_affinity_enabled"))
}

// DefaultSiteHostname returns a reference to field default_site_hostname of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) DefaultSiteHostname() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("default_site_hostname"))
}

// Enabled returns a reference to field enabled of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aass.ref.Append("enabled"))
}

// HttpsOnly returns a reference to field https_only of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) HttpsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(aass.ref.Append("https_only"))
}

// Id returns a reference to field id of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("id"))
}

// KeyVaultReferenceIdentityId returns a reference to field key_vault_reference_identity_id of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) KeyVaultReferenceIdentityId() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("key_vault_reference_identity_id"))
}

// Location returns a reference to field location of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aass.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_app_service_slot.
func (aass azurermAppServiceSlotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aass.ref.Append("tags"))
}

func (aass azurermAppServiceSlotAttributes) SiteCredential() terra.ListValue[SiteCredentialAttributes] {
	return terra.ReferenceAsList[SiteCredentialAttributes](aass.ref.Append("site_credential"))
}

func (aass azurermAppServiceSlotAttributes) AuthSettings() terra.ListValue[AuthSettingsAttributes] {
	return terra.ReferenceAsList[AuthSettingsAttributes](aass.ref.Append("auth_settings"))
}

func (aass azurermAppServiceSlotAttributes) ConnectionString() terra.SetValue[ConnectionStringAttributes] {
	return terra.ReferenceAsSet[ConnectionStringAttributes](aass.ref.Append("connection_string"))
}

func (aass azurermAppServiceSlotAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aass.ref.Append("identity"))
}

func (aass azurermAppServiceSlotAttributes) Logs() terra.ListValue[LogsAttributes] {
	return terra.ReferenceAsList[LogsAttributes](aass.ref.Append("logs"))
}

func (aass azurermAppServiceSlotAttributes) SiteConfig() terra.ListValue[SiteConfigAttributes] {
	return terra.ReferenceAsList[SiteConfigAttributes](aass.ref.Append("site_config"))
}

func (aass azurermAppServiceSlotAttributes) StorageAccount() terra.SetValue[StorageAccountAttributes] {
	return terra.ReferenceAsSet[StorageAccountAttributes](aass.ref.Append("storage_account"))
}

func (aass azurermAppServiceSlotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aass.ref.Append("timeouts"))
}

type azurermAppServiceSlotState struct {
	AppServiceName              string                  `json:"app_service_name"`
	AppServicePlanId            string                  `json:"app_service_plan_id"`
	AppSettings                 map[string]string       `json:"app_settings"`
	ClientAffinityEnabled       bool                    `json:"client_affinity_enabled"`
	DefaultSiteHostname         string                  `json:"default_site_hostname"`
	Enabled                     bool                    `json:"enabled"`
	HttpsOnly                   bool                    `json:"https_only"`
	Id                          string                  `json:"id"`
	KeyVaultReferenceIdentityId string                  `json:"key_vault_reference_identity_id"`
	Location                    string                  `json:"location"`
	Name                        string                  `json:"name"`
	ResourceGroupName           string                  `json:"resource_group_name"`
	Tags                        map[string]string       `json:"tags"`
	SiteCredential              []SiteCredentialState   `json:"site_credential"`
	AuthSettings                []AuthSettingsState     `json:"auth_settings"`
	ConnectionString            []ConnectionStringState `json:"connection_string"`
	Identity                    []IdentityState         `json:"identity"`
	Logs                        []LogsState             `json:"logs"`
	SiteConfig                  []SiteConfigState       `json:"site_config"`
	StorageAccount              []StorageAccountState   `json:"storage_account"`
	Timeouts                    *TimeoutsState          `json:"timeouts"`
}
