// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_snapshot_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataDailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DataDailyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DataDailyScheduleAttributes) InternalWithRef(ref terra.Reference) DataDailyScheduleAttributes {
	return DataDailyScheduleAttributes{ref: ref}
}

func (ds DataDailyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DataDailyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("hour"))
}

func (ds DataDailyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("minute"))
}

func (ds DataDailyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("snapshots_to_keep"))
}

type DataHourlyScheduleAttributes struct {
	ref terra.Reference
}

func (hs DataHourlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs DataHourlyScheduleAttributes) InternalWithRef(ref terra.Reference) DataHourlyScheduleAttributes {
	return DataHourlyScheduleAttributes{ref: ref}
}

func (hs DataHourlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs DataHourlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("minute"))
}

func (hs DataHourlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("snapshots_to_keep"))
}

type DataMonthlyScheduleAttributes struct {
	ref terra.Reference
}

func (ms DataMonthlyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms DataMonthlyScheduleAttributes) InternalWithRef(ref terra.Reference) DataMonthlyScheduleAttributes {
	return DataMonthlyScheduleAttributes{ref: ref}
}

func (ms DataMonthlyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms DataMonthlyScheduleAttributes) DaysOfMonth() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](ms.ref.Append("days_of_month"))
}

func (ms DataMonthlyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("hour"))
}

func (ms DataMonthlyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("minute"))
}

func (ms DataMonthlyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("snapshots_to_keep"))
}

type DataWeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws DataWeeklyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws DataWeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) DataWeeklyScheduleAttributes {
	return DataWeeklyScheduleAttributes{ref: ref}
}

func (ws DataWeeklyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws DataWeeklyScheduleAttributes) DaysOfWeek() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ws.ref.Append("days_of_week"))
}

func (ws DataWeeklyScheduleAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("hour"))
}

func (ws DataWeeklyScheduleAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("minute"))
}

func (ws DataWeeklyScheduleAttributes) SnapshotsToKeep() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("snapshots_to_keep"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDailyScheduleState struct {
	Hour            float64 `json:"hour"`
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type DataHourlyScheduleState struct {
	Minute          float64 `json:"minute"`
	SnapshotsToKeep float64 `json:"snapshots_to_keep"`
}

type DataMonthlyScheduleState struct {
	DaysOfMonth     []float64 `json:"days_of_month"`
	Hour            float64   `json:"hour"`
	Minute          float64   `json:"minute"`
	SnapshotsToKeep float64   `json:"snapshots_to_keep"`
}

type DataWeeklyScheduleState struct {
	DaysOfWeek      []string `json:"days_of_week"`
	Hour            float64  `json:"hour"`
	Minute          float64  `json:"minute"`
	SnapshotsToKeep float64  `json:"snapshots_to_keep"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
