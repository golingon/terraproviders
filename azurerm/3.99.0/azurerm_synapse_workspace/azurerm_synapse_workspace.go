// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asw *Resource) Type() string {
	return "azurerm_synapse_workspace"
}

// LocalName returns the local name for [Resource].
func (asw *Resource) LocalName() string {
	return asw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asw *Resource) Configuration() interface{} {
	return asw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asw *Resource) Dependencies() terra.Dependencies {
	return asw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asw *Resource) LifecycleManagement() *terra.Lifecycle {
	return asw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asw *Resource) Attributes() azurermSynapseWorkspaceAttributes {
	return azurermSynapseWorkspaceAttributes{ref: terra.ReferenceResource(asw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asw *Resource) ImportState(state io.Reader) error {
	asw.state = &azurermSynapseWorkspaceState{}
	if err := json.NewDecoder(state).Decode(asw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asw.Type(), asw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asw *Resource) State() (*azurermSynapseWorkspaceState, bool) {
	return asw.state, asw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asw *Resource) StateMust() *azurermSynapseWorkspaceState {
	if asw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asw.Type(), asw.LocalName()))
	}
	return asw.state
}

// Args contains the configurations for azurerm_synapse_workspace.
type Args struct {
	// AzureadAuthenticationOnly: bool, optional
	AzureadAuthenticationOnly terra.BoolValue `hcl:"azuread_authentication_only,attr"`
	// ComputeSubnetId: string, optional
	ComputeSubnetId terra.StringValue `hcl:"compute_subnet_id,attr"`
	// DataExfiltrationProtectionEnabled: bool, optional
	DataExfiltrationProtectionEnabled terra.BoolValue `hcl:"data_exfiltration_protection_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkingAllowedForAadTenantIds: list of string, optional
	LinkingAllowedForAadTenantIds terra.ListValue[terra.StringValue] `hcl:"linking_allowed_for_aad_tenant_ids,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedResourceGroupName: string, optional
	ManagedResourceGroupName terra.StringValue `hcl:"managed_resource_group_name,attr"`
	// ManagedVirtualNetworkEnabled: bool, optional
	ManagedVirtualNetworkEnabled terra.BoolValue `hcl:"managed_virtual_network_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// PurviewId: string, optional
	PurviewId terra.StringValue `hcl:"purview_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SqlAdministratorLogin: string, optional
	SqlAdministratorLogin terra.StringValue `hcl:"sql_administrator_login,attr"`
	// SqlAdministratorLoginPassword: string, optional
	SqlAdministratorLoginPassword terra.StringValue `hcl:"sql_administrator_login_password,attr"`
	// SqlIdentityControlEnabled: bool, optional
	SqlIdentityControlEnabled terra.BoolValue `hcl:"sql_identity_control_enabled,attr"`
	// StorageDataLakeGen2FilesystemId: string, required
	StorageDataLakeGen2FilesystemId terra.StringValue `hcl:"storage_data_lake_gen2_filesystem_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AadAdmin: min=0
	AadAdmin []AadAdmin `hcl:"aad_admin,block" validate:"min=0"`
	// SqlAadAdmin: min=0
	SqlAadAdmin []SqlAadAdmin `hcl:"sql_aad_admin,block" validate:"min=0"`
	// AzureDevopsRepo: optional
	AzureDevopsRepo *AzureDevopsRepo `hcl:"azure_devops_repo,block"`
	// CustomerManagedKey: optional
	CustomerManagedKey *CustomerManagedKey `hcl:"customer_managed_key,block"`
	// GithubRepo: optional
	GithubRepo *GithubRepo `hcl:"github_repo,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseWorkspaceAttributes struct {
	ref terra.Reference
}

// AzureadAuthenticationOnly returns a reference to field azuread_authentication_only of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) AzureadAuthenticationOnly() terra.BoolValue {
	return terra.ReferenceAsBool(asw.ref.Append("azuread_authentication_only"))
}

// ComputeSubnetId returns a reference to field compute_subnet_id of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) ComputeSubnetId() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("compute_subnet_id"))
}

// ConnectivityEndpoints returns a reference to field connectivity_endpoints of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) ConnectivityEndpoints() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asw.ref.Append("connectivity_endpoints"))
}

// DataExfiltrationProtectionEnabled returns a reference to field data_exfiltration_protection_enabled of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) DataExfiltrationProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asw.ref.Append("data_exfiltration_protection_enabled"))
}

// Id returns a reference to field id of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("id"))
}

// LinkingAllowedForAadTenantIds returns a reference to field linking_allowed_for_aad_tenant_ids of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) LinkingAllowedForAadTenantIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asw.ref.Append("linking_allowed_for_aad_tenant_ids"))
}

// Location returns a reference to field location of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("location"))
}

// ManagedResourceGroupName returns a reference to field managed_resource_group_name of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) ManagedResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("managed_resource_group_name"))
}

// ManagedVirtualNetworkEnabled returns a reference to field managed_virtual_network_enabled of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) ManagedVirtualNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asw.ref.Append("managed_virtual_network_enabled"))
}

// Name returns a reference to field name of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asw.ref.Append("public_network_access_enabled"))
}

// PurviewId returns a reference to field purview_id of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) PurviewId() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("purview_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("resource_group_name"))
}

// SqlAdministratorLogin returns a reference to field sql_administrator_login of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) SqlAdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("sql_administrator_login"))
}

// SqlAdministratorLoginPassword returns a reference to field sql_administrator_login_password of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) SqlAdministratorLoginPassword() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("sql_administrator_login_password"))
}

// SqlIdentityControlEnabled returns a reference to field sql_identity_control_enabled of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) SqlIdentityControlEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asw.ref.Append("sql_identity_control_enabled"))
}

// StorageDataLakeGen2FilesystemId returns a reference to field storage_data_lake_gen2_filesystem_id of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) StorageDataLakeGen2FilesystemId() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("storage_data_lake_gen2_filesystem_id"))
}

// Tags returns a reference to field tags of azurerm_synapse_workspace.
func (asw azurermSynapseWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asw.ref.Append("tags"))
}

func (asw azurermSynapseWorkspaceAttributes) AadAdmin() terra.ListValue[AadAdminAttributes] {
	return terra.ReferenceAsList[AadAdminAttributes](asw.ref.Append("aad_admin"))
}

func (asw azurermSynapseWorkspaceAttributes) SqlAadAdmin() terra.ListValue[SqlAadAdminAttributes] {
	return terra.ReferenceAsList[SqlAadAdminAttributes](asw.ref.Append("sql_aad_admin"))
}

func (asw azurermSynapseWorkspaceAttributes) AzureDevopsRepo() terra.ListValue[AzureDevopsRepoAttributes] {
	return terra.ReferenceAsList[AzureDevopsRepoAttributes](asw.ref.Append("azure_devops_repo"))
}

func (asw azurermSynapseWorkspaceAttributes) CustomerManagedKey() terra.ListValue[CustomerManagedKeyAttributes] {
	return terra.ReferenceAsList[CustomerManagedKeyAttributes](asw.ref.Append("customer_managed_key"))
}

func (asw azurermSynapseWorkspaceAttributes) GithubRepo() terra.ListValue[GithubRepoAttributes] {
	return terra.ReferenceAsList[GithubRepoAttributes](asw.ref.Append("github_repo"))
}

func (asw azurermSynapseWorkspaceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](asw.ref.Append("identity"))
}

func (asw azurermSynapseWorkspaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asw.ref.Append("timeouts"))
}

type azurermSynapseWorkspaceState struct {
	AzureadAuthenticationOnly         bool                      `json:"azuread_authentication_only"`
	ComputeSubnetId                   string                    `json:"compute_subnet_id"`
	ConnectivityEndpoints             map[string]string         `json:"connectivity_endpoints"`
	DataExfiltrationProtectionEnabled bool                      `json:"data_exfiltration_protection_enabled"`
	Id                                string                    `json:"id"`
	LinkingAllowedForAadTenantIds     []string                  `json:"linking_allowed_for_aad_tenant_ids"`
	Location                          string                    `json:"location"`
	ManagedResourceGroupName          string                    `json:"managed_resource_group_name"`
	ManagedVirtualNetworkEnabled      bool                      `json:"managed_virtual_network_enabled"`
	Name                              string                    `json:"name"`
	PublicNetworkAccessEnabled        bool                      `json:"public_network_access_enabled"`
	PurviewId                         string                    `json:"purview_id"`
	ResourceGroupName                 string                    `json:"resource_group_name"`
	SqlAdministratorLogin             string                    `json:"sql_administrator_login"`
	SqlAdministratorLoginPassword     string                    `json:"sql_administrator_login_password"`
	SqlIdentityControlEnabled         bool                      `json:"sql_identity_control_enabled"`
	StorageDataLakeGen2FilesystemId   string                    `json:"storage_data_lake_gen2_filesystem_id"`
	Tags                              map[string]string         `json:"tags"`
	AadAdmin                          []AadAdminState           `json:"aad_admin"`
	SqlAadAdmin                       []SqlAadAdminState        `json:"sql_aad_admin"`
	AzureDevopsRepo                   []AzureDevopsRepoState    `json:"azure_devops_repo"`
	CustomerManagedKey                []CustomerManagedKeyState `json:"customer_managed_key"`
	GithubRepo                        []GithubRepoState         `json:"github_repo"`
	Identity                          []IdentityState           `json:"identity"`
	Timeouts                          *TimeoutsState            `json:"timeouts"`
}
