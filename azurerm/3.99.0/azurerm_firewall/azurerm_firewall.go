// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_firewall

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_firewall.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermFirewallState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (af *Resource) Type() string {
	return "azurerm_firewall"
}

// LocalName returns the local name for [Resource].
func (af *Resource) LocalName() string {
	return af.Name
}

// Configuration returns the configuration (args) for [Resource].
func (af *Resource) Configuration() interface{} {
	return af.Args
}

// DependOn is used for other resources to depend on [Resource].
func (af *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(af)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (af *Resource) Dependencies() terra.Dependencies {
	return af.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (af *Resource) LifecycleManagement() *terra.Lifecycle {
	return af.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (af *Resource) Attributes() azurermFirewallAttributes {
	return azurermFirewallAttributes{ref: terra.ReferenceResource(af)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (af *Resource) ImportState(state io.Reader) error {
	af.state = &azurermFirewallState{}
	if err := json.NewDecoder(state).Decode(af.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", af.Type(), af.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (af *Resource) State() (*azurermFirewallState, bool) {
	return af.state, af.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (af *Resource) StateMust() *azurermFirewallState {
	if af.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", af.Type(), af.LocalName()))
	}
	return af.state
}

// Args contains the configurations for azurerm_firewall.
type Args struct {
	// DnsProxyEnabled: bool, optional
	DnsProxyEnabled terra.BoolValue `hcl:"dns_proxy_enabled,attr"`
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// FirewallPolicyId: string, optional
	FirewallPolicyId terra.StringValue `hcl:"firewall_policy_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpRanges: set of string, optional
	PrivateIpRanges terra.SetValue[terra.StringValue] `hcl:"private_ip_ranges,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SkuTier: string, required
	SkuTier terra.StringValue `hcl:"sku_tier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ThreatIntelMode: string, optional
	ThreatIntelMode terra.StringValue `hcl:"threat_intel_mode,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// IpConfiguration: min=0
	IpConfiguration []IpConfiguration `hcl:"ip_configuration,block" validate:"min=0"`
	// ManagementIpConfiguration: optional
	ManagementIpConfiguration *ManagementIpConfiguration `hcl:"management_ip_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualHub: optional
	VirtualHub *VirtualHub `hcl:"virtual_hub,block"`
}

type azurermFirewallAttributes struct {
	ref terra.Reference
}

// DnsProxyEnabled returns a reference to field dns_proxy_enabled of azurerm_firewall.
func (af azurermFirewallAttributes) DnsProxyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(af.ref.Append("dns_proxy_enabled"))
}

// DnsServers returns a reference to field dns_servers of azurerm_firewall.
func (af azurermFirewallAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](af.ref.Append("dns_servers"))
}

// FirewallPolicyId returns a reference to field firewall_policy_id of azurerm_firewall.
func (af azurermFirewallAttributes) FirewallPolicyId() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("firewall_policy_id"))
}

// Id returns a reference to field id of azurerm_firewall.
func (af azurermFirewallAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_firewall.
func (af azurermFirewallAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_firewall.
func (af azurermFirewallAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("name"))
}

// PrivateIpRanges returns a reference to field private_ip_ranges of azurerm_firewall.
func (af azurermFirewallAttributes) PrivateIpRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](af.ref.Append("private_ip_ranges"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_firewall.
func (af azurermFirewallAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_firewall.
func (af azurermFirewallAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("sku_name"))
}

// SkuTier returns a reference to field sku_tier of azurerm_firewall.
func (af azurermFirewallAttributes) SkuTier() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("sku_tier"))
}

// Tags returns a reference to field tags of azurerm_firewall.
func (af azurermFirewallAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("tags"))
}

// ThreatIntelMode returns a reference to field threat_intel_mode of azurerm_firewall.
func (af azurermFirewallAttributes) ThreatIntelMode() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("threat_intel_mode"))
}

// Zones returns a reference to field zones of azurerm_firewall.
func (af azurermFirewallAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](af.ref.Append("zones"))
}

func (af azurermFirewallAttributes) IpConfiguration() terra.ListValue[IpConfigurationAttributes] {
	return terra.ReferenceAsList[IpConfigurationAttributes](af.ref.Append("ip_configuration"))
}

func (af azurermFirewallAttributes) ManagementIpConfiguration() terra.ListValue[ManagementIpConfigurationAttributes] {
	return terra.ReferenceAsList[ManagementIpConfigurationAttributes](af.ref.Append("management_ip_configuration"))
}

func (af azurermFirewallAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](af.ref.Append("timeouts"))
}

func (af azurermFirewallAttributes) VirtualHub() terra.ListValue[VirtualHubAttributes] {
	return terra.ReferenceAsList[VirtualHubAttributes](af.ref.Append("virtual_hub"))
}

type azurermFirewallState struct {
	DnsProxyEnabled           bool                             `json:"dns_proxy_enabled"`
	DnsServers                []string                         `json:"dns_servers"`
	FirewallPolicyId          string                           `json:"firewall_policy_id"`
	Id                        string                           `json:"id"`
	Location                  string                           `json:"location"`
	Name                      string                           `json:"name"`
	PrivateIpRanges           []string                         `json:"private_ip_ranges"`
	ResourceGroupName         string                           `json:"resource_group_name"`
	SkuName                   string                           `json:"sku_name"`
	SkuTier                   string                           `json:"sku_tier"`
	Tags                      map[string]string                `json:"tags"`
	ThreatIntelMode           string                           `json:"threat_intel_mode"`
	Zones                     []string                         `json:"zones"`
	IpConfiguration           []IpConfigurationState           `json:"ip_configuration"`
	ManagementIpConfiguration []ManagementIpConfigurationState `json:"management_ip_configuration"`
	Timeouts                  *TimeoutsState                   `json:"timeouts"`
	VirtualHub                []VirtualHubState                `json:"virtual_hub"`
}
