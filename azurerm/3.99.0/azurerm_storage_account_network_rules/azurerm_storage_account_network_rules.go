// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_account_network_rules

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_account_network_rules.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageAccountNetworkRulesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asanr *Resource) Type() string {
	return "azurerm_storage_account_network_rules"
}

// LocalName returns the local name for [Resource].
func (asanr *Resource) LocalName() string {
	return asanr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asanr *Resource) Configuration() interface{} {
	return asanr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asanr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asanr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asanr *Resource) Dependencies() terra.Dependencies {
	return asanr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asanr *Resource) LifecycleManagement() *terra.Lifecycle {
	return asanr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asanr *Resource) Attributes() azurermStorageAccountNetworkRulesAttributes {
	return azurermStorageAccountNetworkRulesAttributes{ref: terra.ReferenceResource(asanr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asanr *Resource) ImportState(state io.Reader) error {
	asanr.state = &azurermStorageAccountNetworkRulesState{}
	if err := json.NewDecoder(state).Decode(asanr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asanr.Type(), asanr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asanr *Resource) State() (*azurermStorageAccountNetworkRulesState, bool) {
	return asanr.state, asanr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asanr *Resource) StateMust() *azurermStorageAccountNetworkRulesState {
	if asanr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asanr.Type(), asanr.LocalName()))
	}
	return asanr.state
}

// Args contains the configurations for azurerm_storage_account_network_rules.
type Args struct {
	// Bypass: set of string, optional
	Bypass terra.SetValue[terra.StringValue] `hcl:"bypass,attr"`
	// DefaultAction: string, required
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpRules: set of string, optional
	IpRules terra.SetValue[terra.StringValue] `hcl:"ip_rules,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// VirtualNetworkSubnetIds: set of string, optional
	VirtualNetworkSubnetIds terra.SetValue[terra.StringValue] `hcl:"virtual_network_subnet_ids,attr"`
	// PrivateLinkAccess: min=0
	PrivateLinkAccess []PrivateLinkAccess `hcl:"private_link_access,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageAccountNetworkRulesAttributes struct {
	ref terra.Reference
}

// Bypass returns a reference to field bypass of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) Bypass() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asanr.ref.Append("bypass"))
}

// DefaultAction returns a reference to field default_action of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(asanr.ref.Append("default_action"))
}

// Id returns a reference to field id of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asanr.ref.Append("id"))
}

// IpRules returns a reference to field ip_rules of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) IpRules() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asanr.ref.Append("ip_rules"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(asanr.ref.Append("storage_account_id"))
}

// VirtualNetworkSubnetIds returns a reference to field virtual_network_subnet_ids of azurerm_storage_account_network_rules.
func (asanr azurermStorageAccountNetworkRulesAttributes) VirtualNetworkSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asanr.ref.Append("virtual_network_subnet_ids"))
}

func (asanr azurermStorageAccountNetworkRulesAttributes) PrivateLinkAccess() terra.ListValue[PrivateLinkAccessAttributes] {
	return terra.ReferenceAsList[PrivateLinkAccessAttributes](asanr.ref.Append("private_link_access"))
}

func (asanr azurermStorageAccountNetworkRulesAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asanr.ref.Append("timeouts"))
}

type azurermStorageAccountNetworkRulesState struct {
	Bypass                  []string                 `json:"bypass"`
	DefaultAction           string                   `json:"default_action"`
	Id                      string                   `json:"id"`
	IpRules                 []string                 `json:"ip_rules"`
	StorageAccountId        string                   `json:"storage_account_id"`
	VirtualNetworkSubnetIds []string                 `json:"virtual_network_subnet_ids"`
	PrivateLinkAccess       []PrivateLinkAccessState `json:"private_link_access"`
	Timeouts                *TimeoutsState           `json:"timeouts"`
}
