// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_machine_run_command

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_machine_run_command.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualMachineRunCommandState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avmrc *Resource) Type() string {
	return "azurerm_virtual_machine_run_command"
}

// LocalName returns the local name for [Resource].
func (avmrc *Resource) LocalName() string {
	return avmrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avmrc *Resource) Configuration() interface{} {
	return avmrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avmrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avmrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avmrc *Resource) Dependencies() terra.Dependencies {
	return avmrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avmrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return avmrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avmrc *Resource) Attributes() azurermVirtualMachineRunCommandAttributes {
	return azurermVirtualMachineRunCommandAttributes{ref: terra.ReferenceResource(avmrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avmrc *Resource) ImportState(state io.Reader) error {
	avmrc.state = &azurermVirtualMachineRunCommandState{}
	if err := json.NewDecoder(state).Decode(avmrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avmrc.Type(), avmrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avmrc *Resource) State() (*azurermVirtualMachineRunCommandState, bool) {
	return avmrc.state, avmrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avmrc *Resource) StateMust() *azurermVirtualMachineRunCommandState {
	if avmrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avmrc.Type(), avmrc.LocalName()))
	}
	return avmrc.state
}

// Args contains the configurations for azurerm_virtual_machine_run_command.
type Args struct {
	// ErrorBlobUri: string, optional
	ErrorBlobUri terra.StringValue `hcl:"error_blob_uri,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OutputBlobUri: string, optional
	OutputBlobUri terra.StringValue `hcl:"output_blob_uri,attr"`
	// RunAsPassword: string, optional
	RunAsPassword terra.StringValue `hcl:"run_as_password,attr"`
	// RunAsUser: string, optional
	RunAsUser terra.StringValue `hcl:"run_as_user,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualMachineId: string, required
	VirtualMachineId terra.StringValue `hcl:"virtual_machine_id,attr" validate:"required"`
	// ErrorBlobManagedIdentity: optional
	ErrorBlobManagedIdentity *ErrorBlobManagedIdentity `hcl:"error_blob_managed_identity,block"`
	// OutputBlobManagedIdentity: optional
	OutputBlobManagedIdentity *OutputBlobManagedIdentity `hcl:"output_blob_managed_identity,block"`
	// Parameter: min=0
	Parameter []Parameter `hcl:"parameter,block" validate:"min=0"`
	// ProtectedParameter: min=0
	ProtectedParameter []ProtectedParameter `hcl:"protected_parameter,block" validate:"min=0"`
	// Source: required
	Source *Source `hcl:"source,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualMachineRunCommandAttributes struct {
	ref terra.Reference
}

// ErrorBlobUri returns a reference to field error_blob_uri of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) ErrorBlobUri() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("error_blob_uri"))
}

// Id returns a reference to field id of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("name"))
}

// OutputBlobUri returns a reference to field output_blob_uri of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) OutputBlobUri() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("output_blob_uri"))
}

// RunAsPassword returns a reference to field run_as_password of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) RunAsPassword() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("run_as_password"))
}

// RunAsUser returns a reference to field run_as_user of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) RunAsUser() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("run_as_user"))
}

// Tags returns a reference to field tags of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avmrc.ref.Append("tags"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurerm_virtual_machine_run_command.
func (avmrc azurermVirtualMachineRunCommandAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(avmrc.ref.Append("virtual_machine_id"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) InstanceView() terra.ListValue[InstanceViewAttributes] {
	return terra.ReferenceAsList[InstanceViewAttributes](avmrc.ref.Append("instance_view"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) ErrorBlobManagedIdentity() terra.ListValue[ErrorBlobManagedIdentityAttributes] {
	return terra.ReferenceAsList[ErrorBlobManagedIdentityAttributes](avmrc.ref.Append("error_blob_managed_identity"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) OutputBlobManagedIdentity() terra.ListValue[OutputBlobManagedIdentityAttributes] {
	return terra.ReferenceAsList[OutputBlobManagedIdentityAttributes](avmrc.ref.Append("output_blob_managed_identity"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) Parameter() terra.ListValue[ParameterAttributes] {
	return terra.ReferenceAsList[ParameterAttributes](avmrc.ref.Append("parameter"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) ProtectedParameter() terra.ListValue[ProtectedParameterAttributes] {
	return terra.ReferenceAsList[ProtectedParameterAttributes](avmrc.ref.Append("protected_parameter"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](avmrc.ref.Append("source"))
}

func (avmrc azurermVirtualMachineRunCommandAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avmrc.ref.Append("timeouts"))
}

type azurermVirtualMachineRunCommandState struct {
	ErrorBlobUri              string                           `json:"error_blob_uri"`
	Id                        string                           `json:"id"`
	Location                  string                           `json:"location"`
	Name                      string                           `json:"name"`
	OutputBlobUri             string                           `json:"output_blob_uri"`
	RunAsPassword             string                           `json:"run_as_password"`
	RunAsUser                 string                           `json:"run_as_user"`
	Tags                      map[string]string                `json:"tags"`
	VirtualMachineId          string                           `json:"virtual_machine_id"`
	InstanceView              []InstanceViewState              `json:"instance_view"`
	ErrorBlobManagedIdentity  []ErrorBlobManagedIdentityState  `json:"error_blob_managed_identity"`
	OutputBlobManagedIdentity []OutputBlobManagedIdentityState `json:"output_blob_managed_identity"`
	Parameter                 []ParameterState                 `json:"parameter"`
	ProtectedParameter        []ProtectedParameterState        `json:"protected_parameter"`
	Source                    []SourceState                    `json:"source"`
	Timeouts                  *TimeoutsState                   `json:"timeouts"`
}
