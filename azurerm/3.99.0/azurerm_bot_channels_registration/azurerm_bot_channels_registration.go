// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_bot_channels_registration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_bot_channels_registration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBotChannelsRegistrationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abcr *Resource) Type() string {
	return "azurerm_bot_channels_registration"
}

// LocalName returns the local name for [Resource].
func (abcr *Resource) LocalName() string {
	return abcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abcr *Resource) Configuration() interface{} {
	return abcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abcr *Resource) Dependencies() terra.Dependencies {
	return abcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return abcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abcr *Resource) Attributes() azurermBotChannelsRegistrationAttributes {
	return azurermBotChannelsRegistrationAttributes{ref: terra.ReferenceResource(abcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abcr *Resource) ImportState(state io.Reader) error {
	abcr.state = &azurermBotChannelsRegistrationState{}
	if err := json.NewDecoder(state).Decode(abcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abcr.Type(), abcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abcr *Resource) State() (*azurermBotChannelsRegistrationState, bool) {
	return abcr.state, abcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abcr *Resource) StateMust() *azurermBotChannelsRegistrationState {
	if abcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abcr.Type(), abcr.LocalName()))
	}
	return abcr.state
}

// Args contains the configurations for azurerm_bot_channels_registration.
type Args struct {
	// CmkKeyVaultUrl: string, optional
	CmkKeyVaultUrl terra.StringValue `hcl:"cmk_key_vault_url,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeveloperAppInsightsApiKey: string, optional
	DeveloperAppInsightsApiKey terra.StringValue `hcl:"developer_app_insights_api_key,attr"`
	// DeveloperAppInsightsApplicationId: string, optional
	DeveloperAppInsightsApplicationId terra.StringValue `hcl:"developer_app_insights_application_id,attr"`
	// DeveloperAppInsightsKey: string, optional
	DeveloperAppInsightsKey terra.StringValue `hcl:"developer_app_insights_key,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Endpoint: string, optional
	Endpoint terra.StringValue `hcl:"endpoint,attr"`
	// IconUrl: string, optional
	IconUrl terra.StringValue `hcl:"icon_url,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsolatedNetworkEnabled: bool, optional
	IsolatedNetworkEnabled terra.BoolValue `hcl:"isolated_network_enabled,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MicrosoftAppId: string, required
	MicrosoftAppId terra.StringValue `hcl:"microsoft_app_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// StreamingEndpointEnabled: bool, optional
	StreamingEndpointEnabled terra.BoolValue `hcl:"streaming_endpoint_enabled,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBotChannelsRegistrationAttributes struct {
	ref terra.Reference
}

// CmkKeyVaultUrl returns a reference to field cmk_key_vault_url of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) CmkKeyVaultUrl() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("cmk_key_vault_url"))
}

// Description returns a reference to field description of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("description"))
}

// DeveloperAppInsightsApiKey returns a reference to field developer_app_insights_api_key of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) DeveloperAppInsightsApiKey() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("developer_app_insights_api_key"))
}

// DeveloperAppInsightsApplicationId returns a reference to field developer_app_insights_application_id of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) DeveloperAppInsightsApplicationId() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("developer_app_insights_application_id"))
}

// DeveloperAppInsightsKey returns a reference to field developer_app_insights_key of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) DeveloperAppInsightsKey() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("developer_app_insights_key"))
}

// DisplayName returns a reference to field display_name of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("display_name"))
}

// Endpoint returns a reference to field endpoint of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("endpoint"))
}

// IconUrl returns a reference to field icon_url of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) IconUrl() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("icon_url"))
}

// Id returns a reference to field id of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("id"))
}

// IsolatedNetworkEnabled returns a reference to field isolated_network_enabled of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) IsolatedNetworkEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(abcr.ref.Append("isolated_network_enabled"))
}

// Location returns a reference to field location of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("location"))
}

// MicrosoftAppId returns a reference to field microsoft_app_id of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) MicrosoftAppId() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("microsoft_app_id"))
}

// Name returns a reference to field name of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(abcr.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(abcr.ref.Append("sku"))
}

// StreamingEndpointEnabled returns a reference to field streaming_endpoint_enabled of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) StreamingEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(abcr.ref.Append("streaming_endpoint_enabled"))
}

// Tags returns a reference to field tags of azurerm_bot_channels_registration.
func (abcr azurermBotChannelsRegistrationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abcr.ref.Append("tags"))
}

func (abcr azurermBotChannelsRegistrationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abcr.ref.Append("timeouts"))
}

type azurermBotChannelsRegistrationState struct {
	CmkKeyVaultUrl                    string            `json:"cmk_key_vault_url"`
	Description                       string            `json:"description"`
	DeveloperAppInsightsApiKey        string            `json:"developer_app_insights_api_key"`
	DeveloperAppInsightsApplicationId string            `json:"developer_app_insights_application_id"`
	DeveloperAppInsightsKey           string            `json:"developer_app_insights_key"`
	DisplayName                       string            `json:"display_name"`
	Endpoint                          string            `json:"endpoint"`
	IconUrl                           string            `json:"icon_url"`
	Id                                string            `json:"id"`
	IsolatedNetworkEnabled            bool              `json:"isolated_network_enabled"`
	Location                          string            `json:"location"`
	MicrosoftAppId                    string            `json:"microsoft_app_id"`
	Name                              string            `json:"name"`
	PublicNetworkAccessEnabled        bool              `json:"public_network_access_enabled"`
	ResourceGroupName                 string            `json:"resource_group_name"`
	Sku                               string            `json:"sku"`
	StreamingEndpointEnabled          bool              `json:"streaming_endpoint_enabled"`
	Tags                              map[string]string `json:"tags"`
	Timeouts                          *TimeoutsState    `json:"timeouts"`
}
