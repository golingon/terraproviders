// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_app_cosmosdb_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_app_cosmosdb_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudAppCosmosdbAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascaca *Resource) Type() string {
	return "azurerm_spring_cloud_app_cosmosdb_association"
}

// LocalName returns the local name for [Resource].
func (ascaca *Resource) LocalName() string {
	return ascaca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascaca *Resource) Configuration() interface{} {
	return ascaca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascaca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascaca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascaca *Resource) Dependencies() terra.Dependencies {
	return ascaca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascaca *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascaca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascaca *Resource) Attributes() azurermSpringCloudAppCosmosdbAssociationAttributes {
	return azurermSpringCloudAppCosmosdbAssociationAttributes{ref: terra.ReferenceResource(ascaca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascaca *Resource) ImportState(state io.Reader) error {
	ascaca.state = &azurermSpringCloudAppCosmosdbAssociationState{}
	if err := json.NewDecoder(state).Decode(ascaca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascaca.Type(), ascaca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascaca *Resource) State() (*azurermSpringCloudAppCosmosdbAssociationState, bool) {
	return ascaca.state, ascaca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascaca *Resource) StateMust() *azurermSpringCloudAppCosmosdbAssociationState {
	if ascaca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascaca.Type(), ascaca.LocalName()))
	}
	return ascaca.state
}

// Args contains the configurations for azurerm_spring_cloud_app_cosmosdb_association.
type Args struct {
	// ApiType: string, required
	ApiType terra.StringValue `hcl:"api_type,attr" validate:"required"`
	// CosmosdbAccessKey: string, required
	CosmosdbAccessKey terra.StringValue `hcl:"cosmosdb_access_key,attr" validate:"required"`
	// CosmosdbAccountId: string, required
	CosmosdbAccountId terra.StringValue `hcl:"cosmosdb_account_id,attr" validate:"required"`
	// CosmosdbCassandraKeyspaceName: string, optional
	CosmosdbCassandraKeyspaceName terra.StringValue `hcl:"cosmosdb_cassandra_keyspace_name,attr"`
	// CosmosdbGremlinDatabaseName: string, optional
	CosmosdbGremlinDatabaseName terra.StringValue `hcl:"cosmosdb_gremlin_database_name,attr"`
	// CosmosdbGremlinGraphName: string, optional
	CosmosdbGremlinGraphName terra.StringValue `hcl:"cosmosdb_gremlin_graph_name,attr"`
	// CosmosdbMongoDatabaseName: string, optional
	CosmosdbMongoDatabaseName terra.StringValue `hcl:"cosmosdb_mongo_database_name,attr"`
	// CosmosdbSqlDatabaseName: string, optional
	CosmosdbSqlDatabaseName terra.StringValue `hcl:"cosmosdb_sql_database_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudAppCosmosdbAssociationAttributes struct {
	ref terra.Reference
}

// ApiType returns a reference to field api_type of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) ApiType() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("api_type"))
}

// CosmosdbAccessKey returns a reference to field cosmosdb_access_key of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbAccessKey() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_access_key"))
}

// CosmosdbAccountId returns a reference to field cosmosdb_account_id of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbAccountId() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_account_id"))
}

// CosmosdbCassandraKeyspaceName returns a reference to field cosmosdb_cassandra_keyspace_name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbCassandraKeyspaceName() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_cassandra_keyspace_name"))
}

// CosmosdbGremlinDatabaseName returns a reference to field cosmosdb_gremlin_database_name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbGremlinDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_gremlin_database_name"))
}

// CosmosdbGremlinGraphName returns a reference to field cosmosdb_gremlin_graph_name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbGremlinGraphName() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_gremlin_graph_name"))
}

// CosmosdbMongoDatabaseName returns a reference to field cosmosdb_mongo_database_name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbMongoDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_mongo_database_name"))
}

// CosmosdbSqlDatabaseName returns a reference to field cosmosdb_sql_database_name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) CosmosdbSqlDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("cosmosdb_sql_database_name"))
}

// Id returns a reference to field id of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("name"))
}

// SpringCloudAppId returns a reference to field spring_cloud_app_id of azurerm_spring_cloud_app_cosmosdb_association.
func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceAsString(ascaca.ref.Append("spring_cloud_app_id"))
}

func (ascaca azurermSpringCloudAppCosmosdbAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascaca.ref.Append("timeouts"))
}

type azurermSpringCloudAppCosmosdbAssociationState struct {
	ApiType                       string         `json:"api_type"`
	CosmosdbAccessKey             string         `json:"cosmosdb_access_key"`
	CosmosdbAccountId             string         `json:"cosmosdb_account_id"`
	CosmosdbCassandraKeyspaceName string         `json:"cosmosdb_cassandra_keyspace_name"`
	CosmosdbGremlinDatabaseName   string         `json:"cosmosdb_gremlin_database_name"`
	CosmosdbGremlinGraphName      string         `json:"cosmosdb_gremlin_graph_name"`
	CosmosdbMongoDatabaseName     string         `json:"cosmosdb_mongo_database_name"`
	CosmosdbSqlDatabaseName       string         `json:"cosmosdb_sql_database_name"`
	Id                            string         `json:"id"`
	Name                          string         `json:"name"`
	SpringCloudAppId              string         `json:"spring_cloud_app_id"`
	Timeouts                      *TimeoutsState `json:"timeouts"`
}
