// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mssql_server_extended_auditing_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mssql_server_extended_auditing_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMssqlServerExtendedAuditingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amseap *Resource) Type() string {
	return "azurerm_mssql_server_extended_auditing_policy"
}

// LocalName returns the local name for [Resource].
func (amseap *Resource) LocalName() string {
	return amseap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amseap *Resource) Configuration() interface{} {
	return amseap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amseap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amseap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amseap *Resource) Dependencies() terra.Dependencies {
	return amseap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amseap *Resource) LifecycleManagement() *terra.Lifecycle {
	return amseap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amseap *Resource) Attributes() azurermMssqlServerExtendedAuditingPolicyAttributes {
	return azurermMssqlServerExtendedAuditingPolicyAttributes{ref: terra.ReferenceResource(amseap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amseap *Resource) ImportState(state io.Reader) error {
	amseap.state = &azurermMssqlServerExtendedAuditingPolicyState{}
	if err := json.NewDecoder(state).Decode(amseap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amseap.Type(), amseap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amseap *Resource) State() (*azurermMssqlServerExtendedAuditingPolicyState, bool) {
	return amseap.state, amseap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amseap *Resource) StateMust() *azurermMssqlServerExtendedAuditingPolicyState {
	if amseap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amseap.Type(), amseap.LocalName()))
	}
	return amseap.state
}

// Args contains the configurations for azurerm_mssql_server_extended_auditing_policy.
type Args struct {
	// AuditActionsAndGroups: list of string, optional
	AuditActionsAndGroups terra.ListValue[terra.StringValue] `hcl:"audit_actions_and_groups,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogMonitoringEnabled: bool, optional
	LogMonitoringEnabled terra.BoolValue `hcl:"log_monitoring_enabled,attr"`
	// PredicateExpression: string, optional
	PredicateExpression terra.StringValue `hcl:"predicate_expression,attr"`
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageAccountAccessKeyIsSecondary: bool, optional
	StorageAccountAccessKeyIsSecondary terra.BoolValue `hcl:"storage_account_access_key_is_secondary,attr"`
	// StorageAccountSubscriptionId: string, optional
	StorageAccountSubscriptionId terra.StringValue `hcl:"storage_account_subscription_id,attr"`
	// StorageEndpoint: string, optional
	StorageEndpoint terra.StringValue `hcl:"storage_endpoint,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMssqlServerExtendedAuditingPolicyAttributes struct {
	ref terra.Reference
}

// AuditActionsAndGroups returns a reference to field audit_actions_and_groups of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) AuditActionsAndGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amseap.ref.Append("audit_actions_and_groups"))
}

// Enabled returns a reference to field enabled of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amseap.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("id"))
}

// LogMonitoringEnabled returns a reference to field log_monitoring_enabled of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) LogMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amseap.ref.Append("log_monitoring_enabled"))
}

// PredicateExpression returns a reference to field predicate_expression of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) PredicateExpression() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("predicate_expression"))
}

// RetentionInDays returns a reference to field retention_in_days of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(amseap.ref.Append("retention_in_days"))
}

// ServerId returns a reference to field server_id of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("server_id"))
}

// StorageAccountAccessKey returns a reference to field storage_account_access_key of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("storage_account_access_key"))
}

// StorageAccountAccessKeyIsSecondary returns a reference to field storage_account_access_key_is_secondary of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) StorageAccountAccessKeyIsSecondary() terra.BoolValue {
	return terra.ReferenceAsBool(amseap.ref.Append("storage_account_access_key_is_secondary"))
}

// StorageAccountSubscriptionId returns a reference to field storage_account_subscription_id of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) StorageAccountSubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("storage_account_subscription_id"))
}

// StorageEndpoint returns a reference to field storage_endpoint of azurerm_mssql_server_extended_auditing_policy.
func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) StorageEndpoint() terra.StringValue {
	return terra.ReferenceAsString(amseap.ref.Append("storage_endpoint"))
}

func (amseap azurermMssqlServerExtendedAuditingPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amseap.ref.Append("timeouts"))
}

type azurermMssqlServerExtendedAuditingPolicyState struct {
	AuditActionsAndGroups              []string       `json:"audit_actions_and_groups"`
	Enabled                            bool           `json:"enabled"`
	Id                                 string         `json:"id"`
	LogMonitoringEnabled               bool           `json:"log_monitoring_enabled"`
	PredicateExpression                string         `json:"predicate_expression"`
	RetentionInDays                    float64        `json:"retention_in_days"`
	ServerId                           string         `json:"server_id"`
	StorageAccountAccessKey            string         `json:"storage_account_access_key"`
	StorageAccountAccessKeyIsSecondary bool           `json:"storage_account_access_key_is_secondary"`
	StorageAccountSubscriptionId       string         `json:"storage_account_subscription_id"`
	StorageEndpoint                    string         `json:"storage_endpoint"`
	Timeouts                           *TimeoutsState `json:"timeouts"`
}
