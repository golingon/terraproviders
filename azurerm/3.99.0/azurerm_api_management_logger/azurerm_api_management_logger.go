// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_logger

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_logger.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementLoggerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaml *Resource) Type() string {
	return "azurerm_api_management_logger"
}

// LocalName returns the local name for [Resource].
func (aaml *Resource) LocalName() string {
	return aaml.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaml *Resource) Configuration() interface{} {
	return aaml.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaml *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaml)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaml *Resource) Dependencies() terra.Dependencies {
	return aaml.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaml *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaml.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaml *Resource) Attributes() azurermApiManagementLoggerAttributes {
	return azurermApiManagementLoggerAttributes{ref: terra.ReferenceResource(aaml)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaml *Resource) ImportState(state io.Reader) error {
	aaml.state = &azurermApiManagementLoggerState{}
	if err := json.NewDecoder(state).Decode(aaml.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaml.Type(), aaml.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaml *Resource) State() (*azurermApiManagementLoggerState, bool) {
	return aaml.state, aaml.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaml *Resource) StateMust() *azurermApiManagementLoggerState {
	if aaml.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaml.Type(), aaml.LocalName()))
	}
	return aaml.state
}

// Args contains the configurations for azurerm_api_management_logger.
type Args struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// Buffered: bool, optional
	Buffered terra.BoolValue `hcl:"buffered,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ResourceId: string, optional
	ResourceId terra.StringValue `hcl:"resource_id,attr"`
	// ApplicationInsights: optional
	ApplicationInsights *ApplicationInsights `hcl:"application_insights,block"`
	// Eventhub: optional
	Eventhub *Eventhub `hcl:"eventhub,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementLoggerAttributes struct {
	ref terra.Reference
}

// ApiManagementName returns a reference to field api_management_name of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("api_management_name"))
}

// Buffered returns a reference to field buffered of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) Buffered() terra.BoolValue {
	return terra.ReferenceAsBool(aaml.ref.Append("buffered"))
}

// Description returns a reference to field description of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("resource_group_name"))
}

// ResourceId returns a reference to field resource_id of azurerm_api_management_logger.
func (aaml azurermApiManagementLoggerAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(aaml.ref.Append("resource_id"))
}

func (aaml azurermApiManagementLoggerAttributes) ApplicationInsights() terra.ListValue[ApplicationInsightsAttributes] {
	return terra.ReferenceAsList[ApplicationInsightsAttributes](aaml.ref.Append("application_insights"))
}

func (aaml azurermApiManagementLoggerAttributes) Eventhub() terra.ListValue[EventhubAttributes] {
	return terra.ReferenceAsList[EventhubAttributes](aaml.ref.Append("eventhub"))
}

func (aaml azurermApiManagementLoggerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaml.ref.Append("timeouts"))
}

type azurermApiManagementLoggerState struct {
	ApiManagementName   string                     `json:"api_management_name"`
	Buffered            bool                       `json:"buffered"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	ResourceGroupName   string                     `json:"resource_group_name"`
	ResourceId          string                     `json:"resource_id"`
	ApplicationInsights []ApplicationInsightsState `json:"application_insights"`
	Eventhub            []EventhubState            `json:"eventhub"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
