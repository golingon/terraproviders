// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kusto_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kusto_database.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKustoDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akd *Resource) Type() string {
	return "azurerm_kusto_database"
}

// LocalName returns the local name for [Resource].
func (akd *Resource) LocalName() string {
	return akd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akd *Resource) Configuration() interface{} {
	return akd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akd *Resource) Dependencies() terra.Dependencies {
	return akd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akd *Resource) LifecycleManagement() *terra.Lifecycle {
	return akd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akd *Resource) Attributes() azurermKustoDatabaseAttributes {
	return azurermKustoDatabaseAttributes{ref: terra.ReferenceResource(akd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akd *Resource) ImportState(state io.Reader) error {
	akd.state = &azurermKustoDatabaseState{}
	if err := json.NewDecoder(state).Decode(akd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akd.Type(), akd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akd *Resource) State() (*azurermKustoDatabaseState, bool) {
	return akd.state, akd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akd *Resource) StateMust() *azurermKustoDatabaseState {
	if akd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akd.Type(), akd.LocalName()))
	}
	return akd.state
}

// Args contains the configurations for azurerm_kusto_database.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// HotCachePeriod: string, optional
	HotCachePeriod terra.StringValue `hcl:"hot_cache_period,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SoftDeletePeriod: string, optional
	SoftDeletePeriod terra.StringValue `hcl:"soft_delete_period,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKustoDatabaseAttributes struct {
	ref terra.Reference
}

// ClusterName returns a reference to field cluster_name of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("cluster_name"))
}

// HotCachePeriod returns a reference to field hot_cache_period of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) HotCachePeriod() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("hot_cache_period"))
}

// Id returns a reference to field id of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("resource_group_name"))
}

// Size returns a reference to field size of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(akd.ref.Append("size"))
}

// SoftDeletePeriod returns a reference to field soft_delete_period of azurerm_kusto_database.
func (akd azurermKustoDatabaseAttributes) SoftDeletePeriod() terra.StringValue {
	return terra.ReferenceAsString(akd.ref.Append("soft_delete_period"))
}

func (akd azurermKustoDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akd.ref.Append("timeouts"))
}

type azurermKustoDatabaseState struct {
	ClusterName       string         `json:"cluster_name"`
	HotCachePeriod    string         `json:"hot_cache_period"`
	Id                string         `json:"id"`
	Location          string         `json:"location"`
	Name              string         `json:"name"`
	ResourceGroupName string         `json:"resource_group_name"`
	Size              float64        `json:"size"`
	SoftDeletePeriod  string         `json:"soft_delete_period"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
