// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_cdn_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermCdnEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ace *Resource) Type() string {
	return "azurerm_cdn_endpoint"
}

// LocalName returns the local name for [Resource].
func (ace *Resource) LocalName() string {
	return ace.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ace *Resource) Configuration() interface{} {
	return ace.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ace *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ace)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ace *Resource) Dependencies() terra.Dependencies {
	return ace.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ace *Resource) LifecycleManagement() *terra.Lifecycle {
	return ace.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ace *Resource) Attributes() azurermCdnEndpointAttributes {
	return azurermCdnEndpointAttributes{ref: terra.ReferenceResource(ace)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ace *Resource) ImportState(state io.Reader) error {
	ace.state = &azurermCdnEndpointState{}
	if err := json.NewDecoder(state).Decode(ace.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ace.Type(), ace.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ace *Resource) State() (*azurermCdnEndpointState, bool) {
	return ace.state, ace.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ace *Resource) StateMust() *azurermCdnEndpointState {
	if ace.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ace.Type(), ace.LocalName()))
	}
	return ace.state
}

// Args contains the configurations for azurerm_cdn_endpoint.
type Args struct {
	// ContentTypesToCompress: set of string, optional
	ContentTypesToCompress terra.SetValue[terra.StringValue] `hcl:"content_types_to_compress,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsCompressionEnabled: bool, optional
	IsCompressionEnabled terra.BoolValue `hcl:"is_compression_enabled,attr"`
	// IsHttpAllowed: bool, optional
	IsHttpAllowed terra.BoolValue `hcl:"is_http_allowed,attr"`
	// IsHttpsAllowed: bool, optional
	IsHttpsAllowed terra.BoolValue `hcl:"is_https_allowed,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptimizationType: string, optional
	OptimizationType terra.StringValue `hcl:"optimization_type,attr"`
	// OriginHostHeader: string, optional
	OriginHostHeader terra.StringValue `hcl:"origin_host_header,attr"`
	// OriginPath: string, optional
	OriginPath terra.StringValue `hcl:"origin_path,attr"`
	// ProbePath: string, optional
	ProbePath terra.StringValue `hcl:"probe_path,attr"`
	// ProfileName: string, required
	ProfileName terra.StringValue `hcl:"profile_name,attr" validate:"required"`
	// QuerystringCachingBehaviour: string, optional
	QuerystringCachingBehaviour terra.StringValue `hcl:"querystring_caching_behaviour,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DeliveryRule: min=0
	DeliveryRule []DeliveryRule `hcl:"delivery_rule,block" validate:"min=0"`
	// GeoFilter: min=0
	GeoFilter []GeoFilter `hcl:"geo_filter,block" validate:"min=0"`
	// GlobalDeliveryRule: optional
	GlobalDeliveryRule *GlobalDeliveryRule `hcl:"global_delivery_rule,block"`
	// Origin: min=1
	Origin []Origin `hcl:"origin,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermCdnEndpointAttributes struct {
	ref terra.Reference
}

// ContentTypesToCompress returns a reference to field content_types_to_compress of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) ContentTypesToCompress() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ace.ref.Append("content_types_to_compress"))
}

// Fqdn returns a reference to field fqdn of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("fqdn"))
}

// Id returns a reference to field id of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("id"))
}

// IsCompressionEnabled returns a reference to field is_compression_enabled of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) IsCompressionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ace.ref.Append("is_compression_enabled"))
}

// IsHttpAllowed returns a reference to field is_http_allowed of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) IsHttpAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(ace.ref.Append("is_http_allowed"))
}

// IsHttpsAllowed returns a reference to field is_https_allowed of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) IsHttpsAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(ace.ref.Append("is_https_allowed"))
}

// Location returns a reference to field location of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("name"))
}

// OptimizationType returns a reference to field optimization_type of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) OptimizationType() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("optimization_type"))
}

// OriginHostHeader returns a reference to field origin_host_header of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) OriginHostHeader() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("origin_host_header"))
}

// OriginPath returns a reference to field origin_path of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) OriginPath() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("origin_path"))
}

// ProbePath returns a reference to field probe_path of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) ProbePath() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("probe_path"))
}

// ProfileName returns a reference to field profile_name of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) ProfileName() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("profile_name"))
}

// QuerystringCachingBehaviour returns a reference to field querystring_caching_behaviour of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) QuerystringCachingBehaviour() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("querystring_caching_behaviour"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ace.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_cdn_endpoint.
func (ace azurermCdnEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ace.ref.Append("tags"))
}

func (ace azurermCdnEndpointAttributes) DeliveryRule() terra.ListValue[DeliveryRuleAttributes] {
	return terra.ReferenceAsList[DeliveryRuleAttributes](ace.ref.Append("delivery_rule"))
}

func (ace azurermCdnEndpointAttributes) GeoFilter() terra.ListValue[GeoFilterAttributes] {
	return terra.ReferenceAsList[GeoFilterAttributes](ace.ref.Append("geo_filter"))
}

func (ace azurermCdnEndpointAttributes) GlobalDeliveryRule() terra.ListValue[GlobalDeliveryRuleAttributes] {
	return terra.ReferenceAsList[GlobalDeliveryRuleAttributes](ace.ref.Append("global_delivery_rule"))
}

func (ace azurermCdnEndpointAttributes) Origin() terra.SetValue[OriginAttributes] {
	return terra.ReferenceAsSet[OriginAttributes](ace.ref.Append("origin"))
}

func (ace azurermCdnEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ace.ref.Append("timeouts"))
}

type azurermCdnEndpointState struct {
	ContentTypesToCompress      []string                  `json:"content_types_to_compress"`
	Fqdn                        string                    `json:"fqdn"`
	Id                          string                    `json:"id"`
	IsCompressionEnabled        bool                      `json:"is_compression_enabled"`
	IsHttpAllowed               bool                      `json:"is_http_allowed"`
	IsHttpsAllowed              bool                      `json:"is_https_allowed"`
	Location                    string                    `json:"location"`
	Name                        string                    `json:"name"`
	OptimizationType            string                    `json:"optimization_type"`
	OriginHostHeader            string                    `json:"origin_host_header"`
	OriginPath                  string                    `json:"origin_path"`
	ProbePath                   string                    `json:"probe_path"`
	ProfileName                 string                    `json:"profile_name"`
	QuerystringCachingBehaviour string                    `json:"querystring_caching_behaviour"`
	ResourceGroupName           string                    `json:"resource_group_name"`
	Tags                        map[string]string         `json:"tags"`
	DeliveryRule                []DeliveryRuleState       `json:"delivery_rule"`
	GeoFilter                   []GeoFilterState          `json:"geo_filter"`
	GlobalDeliveryRule          []GlobalDeliveryRuleState `json:"global_delivery_rule"`
	Origin                      []OriginState             `json:"origin"`
	Timeouts                    *TimeoutsState            `json:"timeouts"`
}
