// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_management_lock

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_management_lock.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagementLockState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aml *Resource) Type() string {
	return "azurerm_management_lock"
}

// LocalName returns the local name for [Resource].
func (aml *Resource) LocalName() string {
	return aml.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aml *Resource) Configuration() interface{} {
	return aml.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aml *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aml)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aml *Resource) Dependencies() terra.Dependencies {
	return aml.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aml *Resource) LifecycleManagement() *terra.Lifecycle {
	return aml.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aml *Resource) Attributes() azurermManagementLockAttributes {
	return azurermManagementLockAttributes{ref: terra.ReferenceResource(aml)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aml *Resource) ImportState(state io.Reader) error {
	aml.state = &azurermManagementLockState{}
	if err := json.NewDecoder(state).Decode(aml.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aml.Type(), aml.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aml *Resource) State() (*azurermManagementLockState, bool) {
	return aml.state, aml.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aml *Resource) StateMust() *azurermManagementLockState {
	if aml.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aml.Type(), aml.LocalName()))
	}
	return aml.state
}

// Args contains the configurations for azurerm_management_lock.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LockLevel: string, required
	LockLevel terra.StringValue `hcl:"lock_level,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagementLockAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_management_lock.
func (aml azurermManagementLockAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aml.ref.Append("id"))
}

// LockLevel returns a reference to field lock_level of azurerm_management_lock.
func (aml azurermManagementLockAttributes) LockLevel() terra.StringValue {
	return terra.ReferenceAsString(aml.ref.Append("lock_level"))
}

// Name returns a reference to field name of azurerm_management_lock.
func (aml azurermManagementLockAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aml.ref.Append("name"))
}

// Notes returns a reference to field notes of azurerm_management_lock.
func (aml azurermManagementLockAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(aml.ref.Append("notes"))
}

// Scope returns a reference to field scope of azurerm_management_lock.
func (aml azurermManagementLockAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(aml.ref.Append("scope"))
}

func (aml azurermManagementLockAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aml.ref.Append("timeouts"))
}

type azurermManagementLockState struct {
	Id        string         `json:"id"`
	LockLevel string         `json:"lock_level"`
	Name      string         `json:"name"`
	Notes     string         `json:"notes"`
	Scope     string         `json:"scope"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
