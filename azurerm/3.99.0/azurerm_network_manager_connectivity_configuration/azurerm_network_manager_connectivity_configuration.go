// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_manager_connectivity_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_network_manager_connectivity_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetworkManagerConnectivityConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anmcc *Resource) Type() string {
	return "azurerm_network_manager_connectivity_configuration"
}

// LocalName returns the local name for [Resource].
func (anmcc *Resource) LocalName() string {
	return anmcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anmcc *Resource) Configuration() interface{} {
	return anmcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anmcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anmcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anmcc *Resource) Dependencies() terra.Dependencies {
	return anmcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anmcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anmcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anmcc *Resource) Attributes() azurermNetworkManagerConnectivityConfigurationAttributes {
	return azurermNetworkManagerConnectivityConfigurationAttributes{ref: terra.ReferenceResource(anmcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anmcc *Resource) ImportState(state io.Reader) error {
	anmcc.state = &azurermNetworkManagerConnectivityConfigurationState{}
	if err := json.NewDecoder(state).Decode(anmcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anmcc.Type(), anmcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anmcc *Resource) State() (*azurermNetworkManagerConnectivityConfigurationState, bool) {
	return anmcc.state, anmcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anmcc *Resource) StateMust() *azurermNetworkManagerConnectivityConfigurationState {
	if anmcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anmcc.Type(), anmcc.LocalName()))
	}
	return anmcc.state
}

// Args contains the configurations for azurerm_network_manager_connectivity_configuration.
type Args struct {
	// ConnectivityTopology: string, required
	ConnectivityTopology terra.StringValue `hcl:"connectivity_topology,attr" validate:"required"`
	// DeleteExistingPeeringEnabled: bool, optional
	DeleteExistingPeeringEnabled terra.BoolValue `hcl:"delete_existing_peering_enabled,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalMeshEnabled: bool, optional
	GlobalMeshEnabled terra.BoolValue `hcl:"global_mesh_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// AppliesToGroup: min=1
	AppliesToGroup []AppliesToGroup `hcl:"applies_to_group,block" validate:"min=1"`
	// Hub: optional
	Hub *Hub `hcl:"hub,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetworkManagerConnectivityConfigurationAttributes struct {
	ref terra.Reference
}

// ConnectivityTopology returns a reference to field connectivity_topology of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) ConnectivityTopology() terra.StringValue {
	return terra.ReferenceAsString(anmcc.ref.Append("connectivity_topology"))
}

// DeleteExistingPeeringEnabled returns a reference to field delete_existing_peering_enabled of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) DeleteExistingPeeringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anmcc.ref.Append("delete_existing_peering_enabled"))
}

// Description returns a reference to field description of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anmcc.ref.Append("description"))
}

// GlobalMeshEnabled returns a reference to field global_mesh_enabled of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) GlobalMeshEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anmcc.ref.Append("global_mesh_enabled"))
}

// Id returns a reference to field id of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anmcc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anmcc.ref.Append("name"))
}

// NetworkManagerId returns a reference to field network_manager_id of azurerm_network_manager_connectivity_configuration.
func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceAsString(anmcc.ref.Append("network_manager_id"))
}

func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) AppliesToGroup() terra.ListValue[AppliesToGroupAttributes] {
	return terra.ReferenceAsList[AppliesToGroupAttributes](anmcc.ref.Append("applies_to_group"))
}

func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) Hub() terra.ListValue[HubAttributes] {
	return terra.ReferenceAsList[HubAttributes](anmcc.ref.Append("hub"))
}

func (anmcc azurermNetworkManagerConnectivityConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anmcc.ref.Append("timeouts"))
}

type azurermNetworkManagerConnectivityConfigurationState struct {
	ConnectivityTopology         string                `json:"connectivity_topology"`
	DeleteExistingPeeringEnabled bool                  `json:"delete_existing_peering_enabled"`
	Description                  string                `json:"description"`
	GlobalMeshEnabled            bool                  `json:"global_mesh_enabled"`
	Id                           string                `json:"id"`
	Name                         string                `json:"name"`
	NetworkManagerId             string                `json:"network_manager_id"`
	AppliesToGroup               []AppliesToGroupState `json:"applies_to_group"`
	Hub                          []HubState            `json:"hub"`
	Timeouts                     *TimeoutsState        `json:"timeouts"`
}
