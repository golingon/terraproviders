// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_smart_detector_alert_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_smart_detector_alert_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorSmartDetectorAlertRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsdar *Resource) Type() string {
	return "azurerm_monitor_smart_detector_alert_rule"
}

// LocalName returns the local name for [Resource].
func (amsdar *Resource) LocalName() string {
	return amsdar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsdar *Resource) Configuration() interface{} {
	return amsdar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsdar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsdar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsdar *Resource) Dependencies() terra.Dependencies {
	return amsdar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsdar *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsdar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsdar *Resource) Attributes() azurermMonitorSmartDetectorAlertRuleAttributes {
	return azurermMonitorSmartDetectorAlertRuleAttributes{ref: terra.ReferenceResource(amsdar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsdar *Resource) ImportState(state io.Reader) error {
	amsdar.state = &azurermMonitorSmartDetectorAlertRuleState{}
	if err := json.NewDecoder(state).Decode(amsdar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsdar.Type(), amsdar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsdar *Resource) State() (*azurermMonitorSmartDetectorAlertRuleState, bool) {
	return amsdar.state, amsdar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsdar *Resource) StateMust() *azurermMonitorSmartDetectorAlertRuleState {
	if amsdar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsdar.Type(), amsdar.LocalName()))
	}
	return amsdar.state
}

// Args contains the configurations for azurerm_monitor_smart_detector_alert_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DetectorType: string, required
	DetectorType terra.StringValue `hcl:"detector_type,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ScopeResourceIds: set of string, required
	ScopeResourceIds terra.SetValue[terra.StringValue] `hcl:"scope_resource_ids,attr" validate:"required"`
	// Severity: string, required
	Severity terra.StringValue `hcl:"severity,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ThrottlingDuration: string, optional
	ThrottlingDuration terra.StringValue `hcl:"throttling_duration,attr"`
	// ActionGroup: required
	ActionGroup *ActionGroup `hcl:"action_group,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorSmartDetectorAlertRuleAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("description"))
}

// DetectorType returns a reference to field detector_type of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) DetectorType() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("detector_type"))
}

// Enabled returns a reference to field enabled of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amsdar.ref.Append("enabled"))
}

// Frequency returns a reference to field frequency of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("frequency"))
}

// Id returns a reference to field id of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("resource_group_name"))
}

// ScopeResourceIds returns a reference to field scope_resource_ids of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) ScopeResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amsdar.ref.Append("scope_resource_ids"))
}

// Severity returns a reference to field severity of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("severity"))
}

// Tags returns a reference to field tags of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amsdar.ref.Append("tags"))
}

// ThrottlingDuration returns a reference to field throttling_duration of azurerm_monitor_smart_detector_alert_rule.
func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) ThrottlingDuration() terra.StringValue {
	return terra.ReferenceAsString(amsdar.ref.Append("throttling_duration"))
}

func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) ActionGroup() terra.ListValue[ActionGroupAttributes] {
	return terra.ReferenceAsList[ActionGroupAttributes](amsdar.ref.Append("action_group"))
}

func (amsdar azurermMonitorSmartDetectorAlertRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsdar.ref.Append("timeouts"))
}

type azurermMonitorSmartDetectorAlertRuleState struct {
	Description        string             `json:"description"`
	DetectorType       string             `json:"detector_type"`
	Enabled            bool               `json:"enabled"`
	Frequency          string             `json:"frequency"`
	Id                 string             `json:"id"`
	Name               string             `json:"name"`
	ResourceGroupName  string             `json:"resource_group_name"`
	ScopeResourceIds   []string           `json:"scope_resource_ids"`
	Severity           string             `json:"severity"`
	Tags               map[string]string  `json:"tags"`
	ThrottlingDuration string             `json:"throttling_duration"`
	ActionGroup        []ActionGroupState `json:"action_group"`
	Timeouts           *TimeoutsState     `json:"timeouts"`
}
