// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_iothub_endpoint_storage_container

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_iothub_endpoint_storage_container.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermIothubEndpointStorageContainerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiesc *Resource) Type() string {
	return "azurerm_iothub_endpoint_storage_container"
}

// LocalName returns the local name for [Resource].
func (aiesc *Resource) LocalName() string {
	return aiesc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiesc *Resource) Configuration() interface{} {
	return aiesc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiesc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiesc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiesc *Resource) Dependencies() terra.Dependencies {
	return aiesc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiesc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiesc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiesc *Resource) Attributes() azurermIothubEndpointStorageContainerAttributes {
	return azurermIothubEndpointStorageContainerAttributes{ref: terra.ReferenceResource(aiesc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiesc *Resource) ImportState(state io.Reader) error {
	aiesc.state = &azurermIothubEndpointStorageContainerState{}
	if err := json.NewDecoder(state).Decode(aiesc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiesc.Type(), aiesc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiesc *Resource) State() (*azurermIothubEndpointStorageContainerState, bool) {
	return aiesc.state, aiesc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiesc *Resource) StateMust() *azurermIothubEndpointStorageContainerState {
	if aiesc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiesc.Type(), aiesc.LocalName()))
	}
	return aiesc.state
}

// Args contains the configurations for azurerm_iothub_endpoint_storage_container.
type Args struct {
	// AuthenticationType: string, optional
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
	// BatchFrequencyInSeconds: number, optional
	BatchFrequencyInSeconds terra.NumberValue `hcl:"batch_frequency_in_seconds,attr"`
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// EndpointUri: string, optional
	EndpointUri terra.StringValue `hcl:"endpoint_uri,attr"`
	// FileNameFormat: string, optional
	FileNameFormat terra.StringValue `hcl:"file_name_format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityId: string, optional
	IdentityId terra.StringValue `hcl:"identity_id,attr"`
	// IothubId: string, required
	IothubId terra.StringValue `hcl:"iothub_id,attr" validate:"required"`
	// MaxChunkSizeInBytes: number, optional
	MaxChunkSizeInBytes terra.NumberValue `hcl:"max_chunk_size_in_bytes,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermIothubEndpointStorageContainerAttributes struct {
	ref terra.Reference
}

// AuthenticationType returns a reference to field authentication_type of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("authentication_type"))
}

// BatchFrequencyInSeconds returns a reference to field batch_frequency_in_seconds of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) BatchFrequencyInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aiesc.ref.Append("batch_frequency_in_seconds"))
}

// ConnectionString returns a reference to field connection_string of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("connection_string"))
}

// ContainerName returns a reference to field container_name of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("container_name"))
}

// Encoding returns a reference to field encoding of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("encoding"))
}

// EndpointUri returns a reference to field endpoint_uri of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("endpoint_uri"))
}

// FileNameFormat returns a reference to field file_name_format of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) FileNameFormat() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("file_name_format"))
}

// Id returns a reference to field id of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("id"))
}

// IdentityId returns a reference to field identity_id of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) IdentityId() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("identity_id"))
}

// IothubId returns a reference to field iothub_id of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) IothubId() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("iothub_id"))
}

// MaxChunkSizeInBytes returns a reference to field max_chunk_size_in_bytes of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) MaxChunkSizeInBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(aiesc.ref.Append("max_chunk_size_in_bytes"))
}

// Name returns a reference to field name of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_iothub_endpoint_storage_container.
func (aiesc azurermIothubEndpointStorageContainerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aiesc.ref.Append("resource_group_name"))
}

func (aiesc azurermIothubEndpointStorageContainerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aiesc.ref.Append("timeouts"))
}

type azurermIothubEndpointStorageContainerState struct {
	AuthenticationType      string         `json:"authentication_type"`
	BatchFrequencyInSeconds float64        `json:"batch_frequency_in_seconds"`
	ConnectionString        string         `json:"connection_string"`
	ContainerName           string         `json:"container_name"`
	Encoding                string         `json:"encoding"`
	EndpointUri             string         `json:"endpoint_uri"`
	FileNameFormat          string         `json:"file_name_format"`
	Id                      string         `json:"id"`
	IdentityId              string         `json:"identity_id"`
	IothubId                string         `json:"iothub_id"`
	MaxChunkSizeInBytes     float64        `json:"max_chunk_size_in_bytes"`
	Name                    string         `json:"name"`
	ResourceGroupName       string         `json:"resource_group_name"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
