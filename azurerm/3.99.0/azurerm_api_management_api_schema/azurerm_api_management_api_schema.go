// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_api_schema

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_api_schema.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementApiSchemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamas *Resource) Type() string {
	return "azurerm_api_management_api_schema"
}

// LocalName returns the local name for [Resource].
func (aamas *Resource) LocalName() string {
	return aamas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamas *Resource) Configuration() interface{} {
	return aamas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamas *Resource) Dependencies() terra.Dependencies {
	return aamas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamas *Resource) Attributes() azurermApiManagementApiSchemaAttributes {
	return azurermApiManagementApiSchemaAttributes{ref: terra.ReferenceResource(aamas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamas *Resource) ImportState(state io.Reader) error {
	aamas.state = &azurermApiManagementApiSchemaState{}
	if err := json.NewDecoder(state).Decode(aamas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamas.Type(), aamas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamas *Resource) State() (*azurermApiManagementApiSchemaState, bool) {
	return aamas.state, aamas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamas *Resource) StateMust() *azurermApiManagementApiSchemaState {
	if aamas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamas.Type(), aamas.LocalName()))
	}
	return aamas.state
}

// Args contains the configurations for azurerm_api_management_api_schema.
type Args struct {
	// ApiManagementName: string, required
	ApiManagementName terra.StringValue `hcl:"api_management_name,attr" validate:"required"`
	// ApiName: string, required
	ApiName terra.StringValue `hcl:"api_name,attr" validate:"required"`
	// Components: string, optional
	Components terra.StringValue `hcl:"components,attr"`
	// ContentType: string, required
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
	// Definitions: string, optional
	Definitions terra.StringValue `hcl:"definitions,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SchemaId: string, required
	SchemaId terra.StringValue `hcl:"schema_id,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementApiSchemaAttributes struct {
	ref terra.Reference
}

// ApiManagementName returns a reference to field api_management_name of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) ApiManagementName() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("api_management_name"))
}

// ApiName returns a reference to field api_name of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) ApiName() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("api_name"))
}

// Components returns a reference to field components of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) Components() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("components"))
}

// ContentType returns a reference to field content_type of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("content_type"))
}

// Definitions returns a reference to field definitions of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) Definitions() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("definitions"))
}

// Id returns a reference to field id of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("resource_group_name"))
}

// SchemaId returns a reference to field schema_id of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) SchemaId() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("schema_id"))
}

// Value returns a reference to field value of azurerm_api_management_api_schema.
func (aamas azurermApiManagementApiSchemaAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aamas.ref.Append("value"))
}

func (aamas azurermApiManagementApiSchemaAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamas.ref.Append("timeouts"))
}

type azurermApiManagementApiSchemaState struct {
	ApiManagementName string         `json:"api_management_name"`
	ApiName           string         `json:"api_name"`
	Components        string         `json:"components"`
	ContentType       string         `json:"content_type"`
	Definitions       string         `json:"definitions"`
	Id                string         `json:"id"`
	ResourceGroupName string         `json:"resource_group_name"`
	SchemaId          string         `json:"schema_id"`
	Value             string         `json:"value"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
