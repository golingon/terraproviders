// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_windows_virtual_machine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_windows_virtual_machine.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermWindowsVirtualMachineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awvm *Resource) Type() string {
	return "azurerm_windows_virtual_machine"
}

// LocalName returns the local name for [Resource].
func (awvm *Resource) LocalName() string {
	return awvm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awvm *Resource) Configuration() interface{} {
	return awvm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awvm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awvm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awvm *Resource) Dependencies() terra.Dependencies {
	return awvm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awvm *Resource) LifecycleManagement() *terra.Lifecycle {
	return awvm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awvm *Resource) Attributes() azurermWindowsVirtualMachineAttributes {
	return azurermWindowsVirtualMachineAttributes{ref: terra.ReferenceResource(awvm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awvm *Resource) ImportState(state io.Reader) error {
	awvm.state = &azurermWindowsVirtualMachineState{}
	if err := json.NewDecoder(state).Decode(awvm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awvm.Type(), awvm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awvm *Resource) State() (*azurermWindowsVirtualMachineState, bool) {
	return awvm.state, awvm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awvm *Resource) StateMust() *azurermWindowsVirtualMachineState {
	if awvm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awvm.Type(), awvm.LocalName()))
	}
	return awvm.state
}

// Args contains the configurations for azurerm_windows_virtual_machine.
type Args struct {
	// AdminPassword: string, required
	AdminPassword terra.StringValue `hcl:"admin_password,attr" validate:"required"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// AllowExtensionOperations: bool, optional
	AllowExtensionOperations terra.BoolValue `hcl:"allow_extension_operations,attr"`
	// AvailabilitySetId: string, optional
	AvailabilitySetId terra.StringValue `hcl:"availability_set_id,attr"`
	// BypassPlatformSafetyChecksOnUserScheduleEnabled: bool, optional
	BypassPlatformSafetyChecksOnUserScheduleEnabled terra.BoolValue `hcl:"bypass_platform_safety_checks_on_user_schedule_enabled,attr"`
	// CapacityReservationGroupId: string, optional
	CapacityReservationGroupId terra.StringValue `hcl:"capacity_reservation_group_id,attr"`
	// ComputerName: string, optional
	ComputerName terra.StringValue `hcl:"computer_name,attr"`
	// CustomData: string, optional
	CustomData terra.StringValue `hcl:"custom_data,attr"`
	// DedicatedHostGroupId: string, optional
	DedicatedHostGroupId terra.StringValue `hcl:"dedicated_host_group_id,attr"`
	// DedicatedHostId: string, optional
	DedicatedHostId terra.StringValue `hcl:"dedicated_host_id,attr"`
	// DiskControllerType: string, optional
	DiskControllerType terra.StringValue `hcl:"disk_controller_type,attr"`
	// EdgeZone: string, optional
	EdgeZone terra.StringValue `hcl:"edge_zone,attr"`
	// EnableAutomaticUpdates: bool, optional
	EnableAutomaticUpdates terra.BoolValue `hcl:"enable_automatic_updates,attr"`
	// EncryptionAtHostEnabled: bool, optional
	EncryptionAtHostEnabled terra.BoolValue `hcl:"encryption_at_host_enabled,attr"`
	// EvictionPolicy: string, optional
	EvictionPolicy terra.StringValue `hcl:"eviction_policy,attr"`
	// ExtensionsTimeBudget: string, optional
	ExtensionsTimeBudget terra.StringValue `hcl:"extensions_time_budget,attr"`
	// HotpatchingEnabled: bool, optional
	HotpatchingEnabled terra.BoolValue `hcl:"hotpatching_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaxBidPrice: number, optional
	MaxBidPrice terra.NumberValue `hcl:"max_bid_price,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkInterfaceIds: list of string, required
	NetworkInterfaceIds terra.ListValue[terra.StringValue] `hcl:"network_interface_ids,attr" validate:"required"`
	// PatchAssessmentMode: string, optional
	PatchAssessmentMode terra.StringValue `hcl:"patch_assessment_mode,attr"`
	// PatchMode: string, optional
	PatchMode terra.StringValue `hcl:"patch_mode,attr"`
	// PlatformFaultDomain: number, optional
	PlatformFaultDomain terra.NumberValue `hcl:"platform_fault_domain,attr"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// ProvisionVmAgent: bool, optional
	ProvisionVmAgent terra.BoolValue `hcl:"provision_vm_agent,attr"`
	// ProximityPlacementGroupId: string, optional
	ProximityPlacementGroupId terra.StringValue `hcl:"proximity_placement_group_id,attr"`
	// RebootSetting: string, optional
	RebootSetting terra.StringValue `hcl:"reboot_setting,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecureBootEnabled: bool, optional
	SecureBootEnabled terra.BoolValue `hcl:"secure_boot_enabled,attr"`
	// Size: string, required
	Size terra.StringValue `hcl:"size,attr" validate:"required"`
	// SourceImageId: string, optional
	SourceImageId terra.StringValue `hcl:"source_image_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// VirtualMachineScaleSetId: string, optional
	VirtualMachineScaleSetId terra.StringValue `hcl:"virtual_machine_scale_set_id,attr"`
	// VmAgentPlatformUpdatesEnabled: bool, optional
	VmAgentPlatformUpdatesEnabled terra.BoolValue `hcl:"vm_agent_platform_updates_enabled,attr"`
	// VtpmEnabled: bool, optional
	VtpmEnabled terra.BoolValue `hcl:"vtpm_enabled,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AdditionalCapabilities: optional
	AdditionalCapabilities *AdditionalCapabilities `hcl:"additional_capabilities,block"`
	// AdditionalUnattendContent: min=0
	AdditionalUnattendContent []AdditionalUnattendContent `hcl:"additional_unattend_content,block" validate:"min=0"`
	// BootDiagnostics: optional
	BootDiagnostics *BootDiagnostics `hcl:"boot_diagnostics,block"`
	// GalleryApplication: min=0,max=100
	GalleryApplication []GalleryApplication `hcl:"gallery_application,block" validate:"min=0,max=100"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// OsDisk: required
	OsDisk *OsDisk `hcl:"os_disk,block" validate:"required"`
	// OsImageNotification: optional
	OsImageNotification *OsImageNotification `hcl:"os_image_notification,block"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// Secret: min=0
	Secret []Secret `hcl:"secret,block" validate:"min=0"`
	// SourceImageReference: optional
	SourceImageReference *SourceImageReference `hcl:"source_image_reference,block"`
	// TerminationNotification: optional
	TerminationNotification *TerminationNotification `hcl:"termination_notification,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WinrmListener: min=0
	WinrmListener []WinrmListener `hcl:"winrm_listener,block" validate:"min=0"`
}

type azurermWindowsVirtualMachineAttributes struct {
	ref terra.Reference
}

// AdminPassword returns a reference to field admin_password of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("admin_password"))
}

// AdminUsername returns a reference to field admin_username of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("admin_username"))
}

// AllowExtensionOperations returns a reference to field allow_extension_operations of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) AllowExtensionOperations() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("allow_extension_operations"))
}

// AvailabilitySetId returns a reference to field availability_set_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) AvailabilitySetId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("availability_set_id"))
}

// BypassPlatformSafetyChecksOnUserScheduleEnabled returns a reference to field bypass_platform_safety_checks_on_user_schedule_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) BypassPlatformSafetyChecksOnUserScheduleEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("bypass_platform_safety_checks_on_user_schedule_enabled"))
}

// CapacityReservationGroupId returns a reference to field capacity_reservation_group_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) CapacityReservationGroupId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("capacity_reservation_group_id"))
}

// ComputerName returns a reference to field computer_name of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) ComputerName() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("computer_name"))
}

// CustomData returns a reference to field custom_data of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) CustomData() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("custom_data"))
}

// DedicatedHostGroupId returns a reference to field dedicated_host_group_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) DedicatedHostGroupId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("dedicated_host_group_id"))
}

// DedicatedHostId returns a reference to field dedicated_host_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) DedicatedHostId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("dedicated_host_id"))
}

// DiskControllerType returns a reference to field disk_controller_type of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) DiskControllerType() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("disk_controller_type"))
}

// EdgeZone returns a reference to field edge_zone of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) EdgeZone() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("edge_zone"))
}

// EnableAutomaticUpdates returns a reference to field enable_automatic_updates of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) EnableAutomaticUpdates() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("enable_automatic_updates"))
}

// EncryptionAtHostEnabled returns a reference to field encryption_at_host_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) EncryptionAtHostEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("encryption_at_host_enabled"))
}

// EvictionPolicy returns a reference to field eviction_policy of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) EvictionPolicy() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("eviction_policy"))
}

// ExtensionsTimeBudget returns a reference to field extensions_time_budget of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) ExtensionsTimeBudget() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("extensions_time_budget"))
}

// HotpatchingEnabled returns a reference to field hotpatching_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) HotpatchingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("hotpatching_enabled"))
}

// Id returns a reference to field id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("location"))
}

// MaxBidPrice returns a reference to field max_bid_price of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) MaxBidPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(awvm.ref.Append("max_bid_price"))
}

// Name returns a reference to field name of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("name"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) NetworkInterfaceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](awvm.ref.Append("network_interface_ids"))
}

// PatchAssessmentMode returns a reference to field patch_assessment_mode of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PatchAssessmentMode() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("patch_assessment_mode"))
}

// PatchMode returns a reference to field patch_mode of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("patch_mode"))
}

// PlatformFaultDomain returns a reference to field platform_fault_domain of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PlatformFaultDomain() terra.NumberValue {
	return terra.ReferenceAsNumber(awvm.ref.Append("platform_fault_domain"))
}

// Priority returns a reference to field priority of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("priority"))
}

// PrivateIpAddress returns a reference to field private_ip_address of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("private_ip_address"))
}

// PrivateIpAddresses returns a reference to field private_ip_addresses of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PrivateIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](awvm.ref.Append("private_ip_addresses"))
}

// ProvisionVmAgent returns a reference to field provision_vm_agent of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) ProvisionVmAgent() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("provision_vm_agent"))
}

// ProximityPlacementGroupId returns a reference to field proximity_placement_group_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) ProximityPlacementGroupId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("proximity_placement_group_id"))
}

// PublicIpAddress returns a reference to field public_ip_address of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("public_ip_address"))
}

// PublicIpAddresses returns a reference to field public_ip_addresses of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) PublicIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](awvm.ref.Append("public_ip_addresses"))
}

// RebootSetting returns a reference to field reboot_setting of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) RebootSetting() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("reboot_setting"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("resource_group_name"))
}

// SecureBootEnabled returns a reference to field secure_boot_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) SecureBootEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("secure_boot_enabled"))
}

// Size returns a reference to field size of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Size() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("size"))
}

// SourceImageId returns a reference to field source_image_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) SourceImageId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("source_image_id"))
}

// Tags returns a reference to field tags of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awvm.ref.Append("tags"))
}

// Timezone returns a reference to field timezone of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("timezone"))
}

// UserData returns a reference to field user_data of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) UserData() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("user_data"))
}

// VirtualMachineId returns a reference to field virtual_machine_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) VirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("virtual_machine_id"))
}

// VirtualMachineScaleSetId returns a reference to field virtual_machine_scale_set_id of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) VirtualMachineScaleSetId() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("virtual_machine_scale_set_id"))
}

// VmAgentPlatformUpdatesEnabled returns a reference to field vm_agent_platform_updates_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) VmAgentPlatformUpdatesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("vm_agent_platform_updates_enabled"))
}

// VtpmEnabled returns a reference to field vtpm_enabled of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) VtpmEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(awvm.ref.Append("vtpm_enabled"))
}

// Zone returns a reference to field zone of azurerm_windows_virtual_machine.
func (awvm azurermWindowsVirtualMachineAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(awvm.ref.Append("zone"))
}

func (awvm azurermWindowsVirtualMachineAttributes) AdditionalCapabilities() terra.ListValue[AdditionalCapabilitiesAttributes] {
	return terra.ReferenceAsList[AdditionalCapabilitiesAttributes](awvm.ref.Append("additional_capabilities"))
}

func (awvm azurermWindowsVirtualMachineAttributes) AdditionalUnattendContent() terra.ListValue[AdditionalUnattendContentAttributes] {
	return terra.ReferenceAsList[AdditionalUnattendContentAttributes](awvm.ref.Append("additional_unattend_content"))
}

func (awvm azurermWindowsVirtualMachineAttributes) BootDiagnostics() terra.ListValue[BootDiagnosticsAttributes] {
	return terra.ReferenceAsList[BootDiagnosticsAttributes](awvm.ref.Append("boot_diagnostics"))
}

func (awvm azurermWindowsVirtualMachineAttributes) GalleryApplication() terra.ListValue[GalleryApplicationAttributes] {
	return terra.ReferenceAsList[GalleryApplicationAttributes](awvm.ref.Append("gallery_application"))
}

func (awvm azurermWindowsVirtualMachineAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](awvm.ref.Append("identity"))
}

func (awvm azurermWindowsVirtualMachineAttributes) OsDisk() terra.ListValue[OsDiskAttributes] {
	return terra.ReferenceAsList[OsDiskAttributes](awvm.ref.Append("os_disk"))
}

func (awvm azurermWindowsVirtualMachineAttributes) OsImageNotification() terra.ListValue[OsImageNotificationAttributes] {
	return terra.ReferenceAsList[OsImageNotificationAttributes](awvm.ref.Append("os_image_notification"))
}

func (awvm azurermWindowsVirtualMachineAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](awvm.ref.Append("plan"))
}

func (awvm azurermWindowsVirtualMachineAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](awvm.ref.Append("secret"))
}

func (awvm azurermWindowsVirtualMachineAttributes) SourceImageReference() terra.ListValue[SourceImageReferenceAttributes] {
	return terra.ReferenceAsList[SourceImageReferenceAttributes](awvm.ref.Append("source_image_reference"))
}

func (awvm azurermWindowsVirtualMachineAttributes) TerminationNotification() terra.ListValue[TerminationNotificationAttributes] {
	return terra.ReferenceAsList[TerminationNotificationAttributes](awvm.ref.Append("termination_notification"))
}

func (awvm azurermWindowsVirtualMachineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](awvm.ref.Append("timeouts"))
}

func (awvm azurermWindowsVirtualMachineAttributes) WinrmListener() terra.SetValue[WinrmListenerAttributes] {
	return terra.ReferenceAsSet[WinrmListenerAttributes](awvm.ref.Append("winrm_listener"))
}

type azurermWindowsVirtualMachineState struct {
	AdminPassword                                   string                           `json:"admin_password"`
	AdminUsername                                   string                           `json:"admin_username"`
	AllowExtensionOperations                        bool                             `json:"allow_extension_operations"`
	AvailabilitySetId                               string                           `json:"availability_set_id"`
	BypassPlatformSafetyChecksOnUserScheduleEnabled bool                             `json:"bypass_platform_safety_checks_on_user_schedule_enabled"`
	CapacityReservationGroupId                      string                           `json:"capacity_reservation_group_id"`
	ComputerName                                    string                           `json:"computer_name"`
	CustomData                                      string                           `json:"custom_data"`
	DedicatedHostGroupId                            string                           `json:"dedicated_host_group_id"`
	DedicatedHostId                                 string                           `json:"dedicated_host_id"`
	DiskControllerType                              string                           `json:"disk_controller_type"`
	EdgeZone                                        string                           `json:"edge_zone"`
	EnableAutomaticUpdates                          bool                             `json:"enable_automatic_updates"`
	EncryptionAtHostEnabled                         bool                             `json:"encryption_at_host_enabled"`
	EvictionPolicy                                  string                           `json:"eviction_policy"`
	ExtensionsTimeBudget                            string                           `json:"extensions_time_budget"`
	HotpatchingEnabled                              bool                             `json:"hotpatching_enabled"`
	Id                                              string                           `json:"id"`
	LicenseType                                     string                           `json:"license_type"`
	Location                                        string                           `json:"location"`
	MaxBidPrice                                     float64                          `json:"max_bid_price"`
	Name                                            string                           `json:"name"`
	NetworkInterfaceIds                             []string                         `json:"network_interface_ids"`
	PatchAssessmentMode                             string                           `json:"patch_assessment_mode"`
	PatchMode                                       string                           `json:"patch_mode"`
	PlatformFaultDomain                             float64                          `json:"platform_fault_domain"`
	Priority                                        string                           `json:"priority"`
	PrivateIpAddress                                string                           `json:"private_ip_address"`
	PrivateIpAddresses                              []string                         `json:"private_ip_addresses"`
	ProvisionVmAgent                                bool                             `json:"provision_vm_agent"`
	ProximityPlacementGroupId                       string                           `json:"proximity_placement_group_id"`
	PublicIpAddress                                 string                           `json:"public_ip_address"`
	PublicIpAddresses                               []string                         `json:"public_ip_addresses"`
	RebootSetting                                   string                           `json:"reboot_setting"`
	ResourceGroupName                               string                           `json:"resource_group_name"`
	SecureBootEnabled                               bool                             `json:"secure_boot_enabled"`
	Size                                            string                           `json:"size"`
	SourceImageId                                   string                           `json:"source_image_id"`
	Tags                                            map[string]string                `json:"tags"`
	Timezone                                        string                           `json:"timezone"`
	UserData                                        string                           `json:"user_data"`
	VirtualMachineId                                string                           `json:"virtual_machine_id"`
	VirtualMachineScaleSetId                        string                           `json:"virtual_machine_scale_set_id"`
	VmAgentPlatformUpdatesEnabled                   bool                             `json:"vm_agent_platform_updates_enabled"`
	VtpmEnabled                                     bool                             `json:"vtpm_enabled"`
	Zone                                            string                           `json:"zone"`
	AdditionalCapabilities                          []AdditionalCapabilitiesState    `json:"additional_capabilities"`
	AdditionalUnattendContent                       []AdditionalUnattendContentState `json:"additional_unattend_content"`
	BootDiagnostics                                 []BootDiagnosticsState           `json:"boot_diagnostics"`
	GalleryApplication                              []GalleryApplicationState        `json:"gallery_application"`
	Identity                                        []IdentityState                  `json:"identity"`
	OsDisk                                          []OsDiskState                    `json:"os_disk"`
	OsImageNotification                             []OsImageNotificationState       `json:"os_image_notification"`
	Plan                                            []PlanState                      `json:"plan"`
	Secret                                          []SecretState                    `json:"secret"`
	SourceImageReference                            []SourceImageReferenceState      `json:"source_image_reference"`
	TerminationNotification                         []TerminationNotificationState   `json:"termination_notification"`
	Timeouts                                        *TimeoutsState                   `json:"timeouts"`
	WinrmListener                                   []WinrmListenerState             `json:"winrm_listener"`
}
