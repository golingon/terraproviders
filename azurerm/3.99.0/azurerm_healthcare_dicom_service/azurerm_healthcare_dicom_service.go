// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_healthcare_dicom_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_healthcare_dicom_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHealthcareDicomServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahds *Resource) Type() string {
	return "azurerm_healthcare_dicom_service"
}

// LocalName returns the local name for [Resource].
func (ahds *Resource) LocalName() string {
	return ahds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahds *Resource) Configuration() interface{} {
	return ahds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahds *Resource) Dependencies() terra.Dependencies {
	return ahds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahds *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahds *Resource) Attributes() azurermHealthcareDicomServiceAttributes {
	return azurermHealthcareDicomServiceAttributes{ref: terra.ReferenceResource(ahds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahds *Resource) ImportState(state io.Reader) error {
	ahds.state = &azurermHealthcareDicomServiceState{}
	if err := json.NewDecoder(state).Decode(ahds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahds.Type(), ahds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahds *Resource) State() (*azurermHealthcareDicomServiceState, bool) {
	return ahds.state, ahds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahds *Resource) StateMust() *azurermHealthcareDicomServiceState {
	if ahds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahds.Type(), ahds.LocalName()))
	}
	return ahds.state
}

// Args contains the configurations for azurerm_healthcare_dicom_service.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHealthcareDicomServiceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahds.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ahds.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahds.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ahds.ref.Append("public_network_access_enabled"))
}

// ServiceUrl returns a reference to field service_url of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) ServiceUrl() terra.StringValue {
	return terra.ReferenceAsString(ahds.ref.Append("service_url"))
}

// Tags returns a reference to field tags of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ahds.ref.Append("tags"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_healthcare_dicom_service.
func (ahds azurermHealthcareDicomServiceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(ahds.ref.Append("workspace_id"))
}

func (ahds azurermHealthcareDicomServiceAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](ahds.ref.Append("authentication"))
}

func (ahds azurermHealthcareDicomServiceAttributes) PrivateEndpoint() terra.SetValue[PrivateEndpointAttributes] {
	return terra.ReferenceAsSet[PrivateEndpointAttributes](ahds.ref.Append("private_endpoint"))
}

func (ahds azurermHealthcareDicomServiceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](ahds.ref.Append("identity"))
}

func (ahds azurermHealthcareDicomServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahds.ref.Append("timeouts"))
}

type azurermHealthcareDicomServiceState struct {
	Id                         string                 `json:"id"`
	Location                   string                 `json:"location"`
	Name                       string                 `json:"name"`
	PublicNetworkAccessEnabled bool                   `json:"public_network_access_enabled"`
	ServiceUrl                 string                 `json:"service_url"`
	Tags                       map[string]string      `json:"tags"`
	WorkspaceId                string                 `json:"workspace_id"`
	Authentication             []AuthenticationState  `json:"authentication"`
	PrivateEndpoint            []PrivateEndpointState `json:"private_endpoint"`
	Identity                   []IdentityState        `json:"identity"`
	Timeouts                   *TimeoutsState         `json:"timeouts"`
}
