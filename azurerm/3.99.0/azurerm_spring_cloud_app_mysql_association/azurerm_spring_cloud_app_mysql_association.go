// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_app_mysql_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_app_mysql_association.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudAppMysqlAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascama *Resource) Type() string {
	return "azurerm_spring_cloud_app_mysql_association"
}

// LocalName returns the local name for [Resource].
func (ascama *Resource) LocalName() string {
	return ascama.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascama *Resource) Configuration() interface{} {
	return ascama.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascama *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascama)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascama *Resource) Dependencies() terra.Dependencies {
	return ascama.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascama *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascama.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascama *Resource) Attributes() azurermSpringCloudAppMysqlAssociationAttributes {
	return azurermSpringCloudAppMysqlAssociationAttributes{ref: terra.ReferenceResource(ascama)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascama *Resource) ImportState(state io.Reader) error {
	ascama.state = &azurermSpringCloudAppMysqlAssociationState{}
	if err := json.NewDecoder(state).Decode(ascama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascama.Type(), ascama.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascama *Resource) State() (*azurermSpringCloudAppMysqlAssociationState, bool) {
	return ascama.state, ascama.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascama *Resource) StateMust() *azurermSpringCloudAppMysqlAssociationState {
	if ascama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascama.Type(), ascama.LocalName()))
	}
	return ascama.state
}

// Args contains the configurations for azurerm_spring_cloud_app_mysql_association.
type Args struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MysqlServerId: string, required
	MysqlServerId terra.StringValue `hcl:"mysql_server_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// SpringCloudAppId: string, required
	SpringCloudAppId terra.StringValue `hcl:"spring_cloud_app_id,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudAppMysqlAssociationAttributes struct {
	ref terra.Reference
}

// DatabaseName returns a reference to field database_name of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("database_name"))
}

// Id returns a reference to field id of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("id"))
}

// MysqlServerId returns a reference to field mysql_server_id of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) MysqlServerId() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("mysql_server_id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("password"))
}

// SpringCloudAppId returns a reference to field spring_cloud_app_id of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) SpringCloudAppId() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("spring_cloud_app_id"))
}

// Username returns a reference to field username of azurerm_spring_cloud_app_mysql_association.
func (ascama azurermSpringCloudAppMysqlAssociationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ascama.ref.Append("username"))
}

func (ascama azurermSpringCloudAppMysqlAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascama.ref.Append("timeouts"))
}

type azurermSpringCloudAppMysqlAssociationState struct {
	DatabaseName     string         `json:"database_name"`
	Id               string         `json:"id"`
	MysqlServerId    string         `json:"mysql_server_id"`
	Name             string         `json:"name"`
	Password         string         `json:"password"`
	SpringCloudAppId string         `json:"spring_cloud_app_id"`
	Username         string         `json:"username"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
