// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_data_lake_gen2_filesystem

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_data_lake_gen2_filesystem.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageDataLakeGen2FilesystemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asdlgf *Resource) Type() string {
	return "azurerm_storage_data_lake_gen2_filesystem"
}

// LocalName returns the local name for [Resource].
func (asdlgf *Resource) LocalName() string {
	return asdlgf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asdlgf *Resource) Configuration() interface{} {
	return asdlgf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asdlgf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asdlgf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asdlgf *Resource) Dependencies() terra.Dependencies {
	return asdlgf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asdlgf *Resource) LifecycleManagement() *terra.Lifecycle {
	return asdlgf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asdlgf *Resource) Attributes() azurermStorageDataLakeGen2FilesystemAttributes {
	return azurermStorageDataLakeGen2FilesystemAttributes{ref: terra.ReferenceResource(asdlgf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asdlgf *Resource) ImportState(state io.Reader) error {
	asdlgf.state = &azurermStorageDataLakeGen2FilesystemState{}
	if err := json.NewDecoder(state).Decode(asdlgf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asdlgf.Type(), asdlgf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asdlgf *Resource) State() (*azurermStorageDataLakeGen2FilesystemState, bool) {
	return asdlgf.state, asdlgf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asdlgf *Resource) StateMust() *azurermStorageDataLakeGen2FilesystemState {
	if asdlgf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asdlgf.Type(), asdlgf.LocalName()))
	}
	return asdlgf.state
}

// Args contains the configurations for azurerm_storage_data_lake_gen2_filesystem.
type Args struct {
	// DefaultEncryptionScope: string, optional
	DefaultEncryptionScope terra.StringValue `hcl:"default_encryption_scope,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner: string, optional
	Owner terra.StringValue `hcl:"owner,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Ace: min=0
	Ace []Ace `hcl:"ace,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageDataLakeGen2FilesystemAttributes struct {
	ref terra.Reference
}

// DefaultEncryptionScope returns a reference to field default_encryption_scope of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) DefaultEncryptionScope() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("default_encryption_scope"))
}

// Group returns a reference to field group of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("group"))
}

// Id returns a reference to field id of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("name"))
}

// Owner returns a reference to field owner of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("owner"))
}

// Properties returns a reference to field properties of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asdlgf.ref.Append("properties"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_storage_data_lake_gen2_filesystem.
func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(asdlgf.ref.Append("storage_account_id"))
}

func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Ace() terra.SetValue[AceAttributes] {
	return terra.ReferenceAsSet[AceAttributes](asdlgf.ref.Append("ace"))
}

func (asdlgf azurermStorageDataLakeGen2FilesystemAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asdlgf.ref.Append("timeouts"))
}

type azurermStorageDataLakeGen2FilesystemState struct {
	DefaultEncryptionScope string            `json:"default_encryption_scope"`
	Group                  string            `json:"group"`
	Id                     string            `json:"id"`
	Name                   string            `json:"name"`
	Owner                  string            `json:"owner"`
	Properties             map[string]string `json:"properties"`
	StorageAccountId       string            `json:"storage_account_id"`
	Ace                    []AceState        `json:"ace"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
