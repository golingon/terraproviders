// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (as *Resource) Type() string {
	return "azurerm_subscription"
}

// LocalName returns the local name for [Resource].
func (as *Resource) LocalName() string {
	return as.Name
}

// Configuration returns the configuration (args) for [Resource].
func (as *Resource) Configuration() interface{} {
	return as.Args
}

// DependOn is used for other resources to depend on [Resource].
func (as *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (as *Resource) Dependencies() terra.Dependencies {
	return as.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (as *Resource) LifecycleManagement() *terra.Lifecycle {
	return as.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (as *Resource) Attributes() azurermSubscriptionAttributes {
	return azurermSubscriptionAttributes{ref: terra.ReferenceResource(as)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (as *Resource) ImportState(state io.Reader) error {
	as.state = &azurermSubscriptionState{}
	if err := json.NewDecoder(state).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (as *Resource) State() (*azurermSubscriptionState, bool) {
	return as.state, as.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (as *Resource) StateMust() *azurermSubscriptionState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

// Args contains the configurations for azurerm_subscription.
type Args struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// BillingScopeId: string, optional
	BillingScopeId terra.StringValue `hcl:"billing_scope_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubscriptionId: string, optional
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr"`
	// SubscriptionName: string, required
	SubscriptionName terra.StringValue `hcl:"subscription_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Workload: string, optional
	Workload terra.StringValue `hcl:"workload,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSubscriptionAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of azurerm_subscription.
func (as azurermSubscriptionAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("alias"))
}

// BillingScopeId returns a reference to field billing_scope_id of azurerm_subscription.
func (as azurermSubscriptionAttributes) BillingScopeId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("billing_scope_id"))
}

// Id returns a reference to field id of azurerm_subscription.
func (as azurermSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("id"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_subscription.
func (as azurermSubscriptionAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("subscription_id"))
}

// SubscriptionName returns a reference to field subscription_name of azurerm_subscription.
func (as azurermSubscriptionAttributes) SubscriptionName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("subscription_name"))
}

// Tags returns a reference to field tags of azurerm_subscription.
func (as azurermSubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("tags"))
}

// TenantId returns a reference to field tenant_id of azurerm_subscription.
func (as azurermSubscriptionAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("tenant_id"))
}

// Workload returns a reference to field workload of azurerm_subscription.
func (as azurermSubscriptionAttributes) Workload() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("workload"))
}

func (as azurermSubscriptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](as.ref.Append("timeouts"))
}

type azurermSubscriptionState struct {
	Alias            string            `json:"alias"`
	BillingScopeId   string            `json:"billing_scope_id"`
	Id               string            `json:"id"`
	SubscriptionId   string            `json:"subscription_id"`
	SubscriptionName string            `json:"subscription_name"`
	Tags             map[string]string `json:"tags"`
	TenantId         string            `json:"tenant_id"`
	Workload         string            `json:"workload"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
