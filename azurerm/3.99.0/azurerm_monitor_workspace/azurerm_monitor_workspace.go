// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amw *Resource) Type() string {
	return "azurerm_monitor_workspace"
}

// LocalName returns the local name for [Resource].
func (amw *Resource) LocalName() string {
	return amw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amw *Resource) Configuration() interface{} {
	return amw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amw *Resource) Dependencies() terra.Dependencies {
	return amw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amw *Resource) LifecycleManagement() *terra.Lifecycle {
	return amw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amw *Resource) Attributes() azurermMonitorWorkspaceAttributes {
	return azurermMonitorWorkspaceAttributes{ref: terra.ReferenceResource(amw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amw *Resource) ImportState(state io.Reader) error {
	amw.state = &azurermMonitorWorkspaceState{}
	if err := json.NewDecoder(state).Decode(amw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amw.Type(), amw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amw *Resource) State() (*azurermMonitorWorkspaceState, bool) {
	return amw.state, amw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amw *Resource) StateMust() *azurermMonitorWorkspaceState {
	if amw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amw.Type(), amw.LocalName()))
	}
	return amw.state
}

// Args contains the configurations for azurerm_monitor_workspace.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorWorkspaceAttributes struct {
	ref terra.Reference
}

// DefaultDataCollectionEndpointId returns a reference to field default_data_collection_endpoint_id of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) DefaultDataCollectionEndpointId() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("default_data_collection_endpoint_id"))
}

// DefaultDataCollectionRuleId returns a reference to field default_data_collection_rule_id of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) DefaultDataCollectionRuleId() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("default_data_collection_rule_id"))
}

// Id returns a reference to field id of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amw.ref.Append("public_network_access_enabled"))
}

// QueryEndpoint returns a reference to field query_endpoint of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) QueryEndpoint() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("query_endpoint"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amw.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_monitor_workspace.
func (amw azurermMonitorWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amw.ref.Append("tags"))
}

func (amw azurermMonitorWorkspaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amw.ref.Append("timeouts"))
}

type azurermMonitorWorkspaceState struct {
	DefaultDataCollectionEndpointId string            `json:"default_data_collection_endpoint_id"`
	DefaultDataCollectionRuleId     string            `json:"default_data_collection_rule_id"`
	Id                              string            `json:"id"`
	Location                        string            `json:"location"`
	Name                            string            `json:"name"`
	PublicNetworkAccessEnabled      bool              `json:"public_network_access_enabled"`
	QueryEndpoint                   string            `json:"query_endpoint"`
	ResourceGroupName               string            `json:"resource_group_name"`
	Tags                            map[string]string `json:"tags"`
	Timeouts                        *TimeoutsState    `json:"timeouts"`
}
