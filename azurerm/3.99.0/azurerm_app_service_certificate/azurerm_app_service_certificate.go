// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_service_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppServiceCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aasc *Resource) Type() string {
	return "azurerm_app_service_certificate"
}

// LocalName returns the local name for [Resource].
func (aasc *Resource) LocalName() string {
	return aasc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aasc *Resource) Configuration() interface{} {
	return aasc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aasc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aasc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aasc *Resource) Dependencies() terra.Dependencies {
	return aasc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aasc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aasc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aasc *Resource) Attributes() azurermAppServiceCertificateAttributes {
	return azurermAppServiceCertificateAttributes{ref: terra.ReferenceResource(aasc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aasc *Resource) ImportState(state io.Reader) error {
	aasc.state = &azurermAppServiceCertificateState{}
	if err := json.NewDecoder(state).Decode(aasc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aasc.Type(), aasc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aasc *Resource) State() (*azurermAppServiceCertificateState, bool) {
	return aasc.state, aasc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aasc *Resource) StateMust() *azurermAppServiceCertificateState {
	if aasc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aasc.Type(), aasc.LocalName()))
	}
	return aasc.state
}

// Args contains the configurations for azurerm_app_service_certificate.
type Args struct {
	// AppServicePlanId: string, optional
	AppServicePlanId terra.StringValue `hcl:"app_service_plan_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultId: string, optional
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr"`
	// KeyVaultSecretId: string, optional
	KeyVaultSecretId terra.StringValue `hcl:"key_vault_secret_id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// PfxBlob: string, optional
	PfxBlob terra.StringValue `hcl:"pfx_blob,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppServiceCertificateAttributes struct {
	ref terra.Reference
}

// AppServicePlanId returns a reference to field app_service_plan_id of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) AppServicePlanId() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("app_service_plan_id"))
}

// ExpirationDate returns a reference to field expiration_date of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("expiration_date"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("friendly_name"))
}

// HostNames returns a reference to field host_names of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) HostNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aasc.ref.Append("host_names"))
}

// HostingEnvironmentProfileId returns a reference to field hosting_environment_profile_id of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) HostingEnvironmentProfileId() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("hosting_environment_profile_id"))
}

// Id returns a reference to field id of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("id"))
}

// IssueDate returns a reference to field issue_date of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) IssueDate() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("issue_date"))
}

// Issuer returns a reference to field issuer of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("issuer"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("key_vault_id"))
}

// KeyVaultSecretId returns a reference to field key_vault_secret_id of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) KeyVaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("key_vault_secret_id"))
}

// Location returns a reference to field location of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("password"))
}

// PfxBlob returns a reference to field pfx_blob of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) PfxBlob() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("pfx_blob"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("resource_group_name"))
}

// SubjectName returns a reference to field subject_name of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) SubjectName() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("subject_name"))
}

// Tags returns a reference to field tags of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aasc.ref.Append("tags"))
}

// Thumbprint returns a reference to field thumbprint of azurerm_app_service_certificate.
func (aasc azurermAppServiceCertificateAttributes) Thumbprint() terra.StringValue {
	return terra.ReferenceAsString(aasc.ref.Append("thumbprint"))
}

func (aasc azurermAppServiceCertificateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aasc.ref.Append("timeouts"))
}

type azurermAppServiceCertificateState struct {
	AppServicePlanId            string            `json:"app_service_plan_id"`
	ExpirationDate              string            `json:"expiration_date"`
	FriendlyName                string            `json:"friendly_name"`
	HostNames                   []string          `json:"host_names"`
	HostingEnvironmentProfileId string            `json:"hosting_environment_profile_id"`
	Id                          string            `json:"id"`
	IssueDate                   string            `json:"issue_date"`
	Issuer                      string            `json:"issuer"`
	KeyVaultId                  string            `json:"key_vault_id"`
	KeyVaultSecretId            string            `json:"key_vault_secret_id"`
	Location                    string            `json:"location"`
	Name                        string            `json:"name"`
	Password                    string            `json:"password"`
	PfxBlob                     string            `json:"pfx_blob"`
	ResourceGroupName           string            `json:"resource_group_name"`
	SubjectName                 string            `json:"subject_name"`
	Tags                        map[string]string `json:"tags"`
	Thumbprint                  string            `json:"thumbprint"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
