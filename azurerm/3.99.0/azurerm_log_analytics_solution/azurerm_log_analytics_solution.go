// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_log_analytics_solution

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_log_analytics_solution.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogAnalyticsSolutionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alas *Resource) Type() string {
	return "azurerm_log_analytics_solution"
}

// LocalName returns the local name for [Resource].
func (alas *Resource) LocalName() string {
	return alas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alas *Resource) Configuration() interface{} {
	return alas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alas *Resource) Dependencies() terra.Dependencies {
	return alas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alas *Resource) LifecycleManagement() *terra.Lifecycle {
	return alas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alas *Resource) Attributes() azurermLogAnalyticsSolutionAttributes {
	return azurermLogAnalyticsSolutionAttributes{ref: terra.ReferenceResource(alas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alas *Resource) ImportState(state io.Reader) error {
	alas.state = &azurermLogAnalyticsSolutionState{}
	if err := json.NewDecoder(state).Decode(alas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alas.Type(), alas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alas *Resource) State() (*azurermLogAnalyticsSolutionState, bool) {
	return alas.state, alas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alas *Resource) StateMust() *azurermLogAnalyticsSolutionState {
	if alas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alas.Type(), alas.LocalName()))
	}
	return alas.state
}

// Args contains the configurations for azurerm_log_analytics_solution.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SolutionName: string, required
	SolutionName terra.StringValue `hcl:"solution_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// WorkspaceName: string, required
	WorkspaceName terra.StringValue `hcl:"workspace_name,attr" validate:"required"`
	// WorkspaceResourceId: string, required
	WorkspaceResourceId terra.StringValue `hcl:"workspace_resource_id,attr" validate:"required"`
	// Plan: required
	Plan *Plan `hcl:"plan,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogAnalyticsSolutionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("location"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("resource_group_name"))
}

// SolutionName returns a reference to field solution_name of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) SolutionName() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("solution_name"))
}

// Tags returns a reference to field tags of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alas.ref.Append("tags"))
}

// WorkspaceName returns a reference to field workspace_name of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) WorkspaceName() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("workspace_name"))
}

// WorkspaceResourceId returns a reference to field workspace_resource_id of azurerm_log_analytics_solution.
func (alas azurermLogAnalyticsSolutionAttributes) WorkspaceResourceId() terra.StringValue {
	return terra.ReferenceAsString(alas.ref.Append("workspace_resource_id"))
}

func (alas azurermLogAnalyticsSolutionAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](alas.ref.Append("plan"))
}

func (alas azurermLogAnalyticsSolutionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alas.ref.Append("timeouts"))
}

type azurermLogAnalyticsSolutionState struct {
	Id                  string            `json:"id"`
	Location            string            `json:"location"`
	ResourceGroupName   string            `json:"resource_group_name"`
	SolutionName        string            `json:"solution_name"`
	Tags                map[string]string `json:"tags"`
	WorkspaceName       string            `json:"workspace_name"`
	WorkspaceResourceId string            `json:"workspace_resource_id"`
	Plan                []PlanState       `json:"plan"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
