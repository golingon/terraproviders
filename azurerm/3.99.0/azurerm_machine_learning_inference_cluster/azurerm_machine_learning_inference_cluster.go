// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_machine_learning_inference_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_machine_learning_inference_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMachineLearningInferenceClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amlic *Resource) Type() string {
	return "azurerm_machine_learning_inference_cluster"
}

// LocalName returns the local name for [Resource].
func (amlic *Resource) LocalName() string {
	return amlic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amlic *Resource) Configuration() interface{} {
	return amlic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amlic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amlic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amlic *Resource) Dependencies() terra.Dependencies {
	return amlic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amlic *Resource) LifecycleManagement() *terra.Lifecycle {
	return amlic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amlic *Resource) Attributes() azurermMachineLearningInferenceClusterAttributes {
	return azurermMachineLearningInferenceClusterAttributes{ref: terra.ReferenceResource(amlic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amlic *Resource) ImportState(state io.Reader) error {
	amlic.state = &azurermMachineLearningInferenceClusterState{}
	if err := json.NewDecoder(state).Decode(amlic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amlic.Type(), amlic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amlic *Resource) State() (*azurermMachineLearningInferenceClusterState, bool) {
	return amlic.state, amlic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amlic *Resource) StateMust() *azurermMachineLearningInferenceClusterState {
	if amlic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amlic.Type(), amlic.LocalName()))
	}
	return amlic.state
}

// Args contains the configurations for azurerm_machine_learning_inference_cluster.
type Args struct {
	// ClusterPurpose: string, optional
	ClusterPurpose terra.StringValue `hcl:"cluster_purpose,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KubernetesClusterId: string, required
	KubernetesClusterId terra.StringValue `hcl:"kubernetes_cluster_id,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineLearningWorkspaceId: string, required
	MachineLearningWorkspaceId terra.StringValue `hcl:"machine_learning_workspace_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Ssl: optional
	Ssl *Ssl `hcl:"ssl,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMachineLearningInferenceClusterAttributes struct {
	ref terra.Reference
}

// ClusterPurpose returns a reference to field cluster_purpose of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) ClusterPurpose() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("cluster_purpose"))
}

// Description returns a reference to field description of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("id"))
}

// KubernetesClusterId returns a reference to field kubernetes_cluster_id of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) KubernetesClusterId() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("kubernetes_cluster_id"))
}

// Location returns a reference to field location of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("location"))
}

// MachineLearningWorkspaceId returns a reference to field machine_learning_workspace_id of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) MachineLearningWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("machine_learning_workspace_id"))
}

// Name returns a reference to field name of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amlic.ref.Append("name"))
}

// Tags returns a reference to field tags of azurerm_machine_learning_inference_cluster.
func (amlic azurermMachineLearningInferenceClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amlic.ref.Append("tags"))
}

func (amlic azurermMachineLearningInferenceClusterAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](amlic.ref.Append("identity"))
}

func (amlic azurermMachineLearningInferenceClusterAttributes) Ssl() terra.ListValue[SslAttributes] {
	return terra.ReferenceAsList[SslAttributes](amlic.ref.Append("ssl"))
}

func (amlic azurermMachineLearningInferenceClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amlic.ref.Append("timeouts"))
}

type azurermMachineLearningInferenceClusterState struct {
	ClusterPurpose             string            `json:"cluster_purpose"`
	Description                string            `json:"description"`
	Id                         string            `json:"id"`
	KubernetesClusterId        string            `json:"kubernetes_cluster_id"`
	Location                   string            `json:"location"`
	MachineLearningWorkspaceId string            `json:"machine_learning_workspace_id"`
	Name                       string            `json:"name"`
	Tags                       map[string]string `json:"tags"`
	Identity                   []IdentityState   `json:"identity"`
	Ssl                        []SslState        `json:"ssl"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
