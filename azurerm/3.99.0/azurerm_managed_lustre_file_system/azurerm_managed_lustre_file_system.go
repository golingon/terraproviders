// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_lustre_file_system

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_managed_lustre_file_system.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermManagedLustreFileSystemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amlfs *Resource) Type() string {
	return "azurerm_managed_lustre_file_system"
}

// LocalName returns the local name for [Resource].
func (amlfs *Resource) LocalName() string {
	return amlfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amlfs *Resource) Configuration() interface{} {
	return amlfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amlfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amlfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amlfs *Resource) Dependencies() terra.Dependencies {
	return amlfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amlfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return amlfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amlfs *Resource) Attributes() azurermManagedLustreFileSystemAttributes {
	return azurermManagedLustreFileSystemAttributes{ref: terra.ReferenceResource(amlfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amlfs *Resource) ImportState(state io.Reader) error {
	amlfs.state = &azurermManagedLustreFileSystemState{}
	if err := json.NewDecoder(state).Decode(amlfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amlfs.Type(), amlfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amlfs *Resource) State() (*azurermManagedLustreFileSystemState, bool) {
	return amlfs.state, amlfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amlfs *Resource) StateMust() *azurermManagedLustreFileSystemState {
	if amlfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amlfs.Type(), amlfs.LocalName()))
	}
	return amlfs.state
}

// Args contains the configurations for azurerm_managed_lustre_file_system.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// StorageCapacityInTb: number, required
	StorageCapacityInTb terra.NumberValue `hcl:"storage_capacity_in_tb,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Zones: set of string, required
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr" validate:"required"`
	// EncryptionKey: optional
	EncryptionKey *EncryptionKey `hcl:"encryption_key,block"`
	// HsmSetting: optional
	HsmSetting *HsmSetting `hcl:"hsm_setting,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// MaintenanceWindow: required
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermManagedLustreFileSystemAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("location"))
}

// MgsAddress returns a reference to field mgs_address of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) MgsAddress() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("mgs_address"))
}

// Name returns a reference to field name of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("sku_name"))
}

// StorageCapacityInTb returns a reference to field storage_capacity_in_tb of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) StorageCapacityInTb() terra.NumberValue {
	return terra.ReferenceAsNumber(amlfs.ref.Append("storage_capacity_in_tb"))
}

// SubnetId returns a reference to field subnet_id of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(amlfs.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amlfs.ref.Append("tags"))
}

// Zones returns a reference to field zones of azurerm_managed_lustre_file_system.
func (amlfs azurermManagedLustreFileSystemAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amlfs.ref.Append("zones"))
}

func (amlfs azurermManagedLustreFileSystemAttributes) EncryptionKey() terra.ListValue[EncryptionKeyAttributes] {
	return terra.ReferenceAsList[EncryptionKeyAttributes](amlfs.ref.Append("encryption_key"))
}

func (amlfs azurermManagedLustreFileSystemAttributes) HsmSetting() terra.ListValue[HsmSettingAttributes] {
	return terra.ReferenceAsList[HsmSettingAttributes](amlfs.ref.Append("hsm_setting"))
}

func (amlfs azurermManagedLustreFileSystemAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](amlfs.ref.Append("identity"))
}

func (amlfs azurermManagedLustreFileSystemAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](amlfs.ref.Append("maintenance_window"))
}

func (amlfs azurermManagedLustreFileSystemAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amlfs.ref.Append("timeouts"))
}

type azurermManagedLustreFileSystemState struct {
	Id                  string                   `json:"id"`
	Location            string                   `json:"location"`
	MgsAddress          string                   `json:"mgs_address"`
	Name                string                   `json:"name"`
	ResourceGroupName   string                   `json:"resource_group_name"`
	SkuName             string                   `json:"sku_name"`
	StorageCapacityInTb float64                  `json:"storage_capacity_in_tb"`
	SubnetId            string                   `json:"subnet_id"`
	Tags                map[string]string        `json:"tags"`
	Zones               []string                 `json:"zones"`
	EncryptionKey       []EncryptionKeyState     `json:"encryption_key"`
	HsmSetting          []HsmSettingState        `json:"hsm_setting"`
	Identity            []IdentityState          `json:"identity"`
	MaintenanceWindow   []MaintenanceWindowState `json:"maintenance_window"`
	Timeouts            *TimeoutsState           `json:"timeouts"`
}
