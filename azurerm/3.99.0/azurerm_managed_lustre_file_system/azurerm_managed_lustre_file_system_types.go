// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_managed_lustre_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionKey struct {
	// KeyUrl: string, required
	KeyUrl terra.StringValue `hcl:"key_url,attr" validate:"required"`
	// SourceVaultId: string, required
	SourceVaultId terra.StringValue `hcl:"source_vault_id,attr" validate:"required"`
}

type HsmSetting struct {
	// ContainerId: string, required
	ContainerId terra.StringValue `hcl:"container_id,attr" validate:"required"`
	// ImportPrefix: string, optional
	ImportPrefix terra.StringValue `hcl:"import_prefix,attr"`
	// LoggingContainerId: string, required
	LoggingContainerId terra.StringValue `hcl:"logging_container_id,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type MaintenanceWindow struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// TimeOfDayInUtc: string, required
	TimeOfDayInUtc terra.StringValue `hcl:"time_of_day_in_utc,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek EncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek EncryptionKeyAttributes) InternalWithRef(ref terra.Reference) EncryptionKeyAttributes {
	return EncryptionKeyAttributes{ref: ref}
}

func (ek EncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek EncryptionKeyAttributes) KeyUrl() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("key_url"))
}

func (ek EncryptionKeyAttributes) SourceVaultId() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("source_vault_id"))
}

type HsmSettingAttributes struct {
	ref terra.Reference
}

func (hs HsmSettingAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs HsmSettingAttributes) InternalWithRef(ref terra.Reference) HsmSettingAttributes {
	return HsmSettingAttributes{ref: ref}
}

func (hs HsmSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs HsmSettingAttributes) ContainerId() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("container_id"))
}

func (hs HsmSettingAttributes) ImportPrefix() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("import_prefix"))
}

func (hs HsmSettingAttributes) LoggingContainerId() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("logging_container_id"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type MaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw MaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw MaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAttributes {
	return MaintenanceWindowAttributes{ref: ref}
}

func (mw MaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw MaintenanceWindowAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("day_of_week"))
}

func (mw MaintenanceWindowAttributes) TimeOfDayInUtc() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("time_of_day_in_utc"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EncryptionKeyState struct {
	KeyUrl        string `json:"key_url"`
	SourceVaultId string `json:"source_vault_id"`
}

type HsmSettingState struct {
	ContainerId        string `json:"container_id"`
	ImportPrefix       string `json:"import_prefix"`
	LoggingContainerId string `json:"logging_container_id"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type MaintenanceWindowState struct {
	DayOfWeek      string `json:"day_of_week"`
	TimeOfDayInUtc string `json:"time_of_day_in_utc"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
