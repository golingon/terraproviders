// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_key_vault_managed_hardware_security_module

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_key_vault_managed_hardware_security_module.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKeyVaultManagedHardwareSecurityModuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvmhsm *Resource) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module"
}

// LocalName returns the local name for [Resource].
func (akvmhsm *Resource) LocalName() string {
	return akvmhsm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvmhsm *Resource) Configuration() interface{} {
	return akvmhsm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvmhsm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvmhsm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvmhsm *Resource) Dependencies() terra.Dependencies {
	return akvmhsm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvmhsm *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvmhsm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvmhsm *Resource) Attributes() azurermKeyVaultManagedHardwareSecurityModuleAttributes {
	return azurermKeyVaultManagedHardwareSecurityModuleAttributes{ref: terra.ReferenceResource(akvmhsm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvmhsm *Resource) ImportState(state io.Reader) error {
	akvmhsm.state = &azurermKeyVaultManagedHardwareSecurityModuleState{}
	if err := json.NewDecoder(state).Decode(akvmhsm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvmhsm.Type(), akvmhsm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvmhsm *Resource) State() (*azurermKeyVaultManagedHardwareSecurityModuleState, bool) {
	return akvmhsm.state, akvmhsm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvmhsm *Resource) StateMust() *azurermKeyVaultManagedHardwareSecurityModuleState {
	if akvmhsm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvmhsm.Type(), akvmhsm.LocalName()))
	}
	return akvmhsm.state
}

// Args contains the configurations for azurerm_key_vault_managed_hardware_security_module.
type Args struct {
	// AdminObjectIds: set of string, required
	AdminObjectIds terra.SetValue[terra.StringValue] `hcl:"admin_object_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// PurgeProtectionEnabled: bool, optional
	PurgeProtectionEnabled terra.BoolValue `hcl:"purge_protection_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SecurityDomainKeyVaultCertificateIds: list of string, optional
	SecurityDomainKeyVaultCertificateIds terra.ListValue[terra.StringValue] `hcl:"security_domain_key_vault_certificate_ids,attr"`
	// SecurityDomainQuorum: number, optional
	SecurityDomainQuorum terra.NumberValue `hcl:"security_domain_quorum,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SoftDeleteRetentionDays: number, optional
	SoftDeleteRetentionDays terra.NumberValue `hcl:"soft_delete_retention_days,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// NetworkAcls: optional
	NetworkAcls *NetworkAcls `hcl:"network_acls,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKeyVaultManagedHardwareSecurityModuleAttributes struct {
	ref terra.Reference
}

// AdminObjectIds returns a reference to field admin_object_ids of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) AdminObjectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](akvmhsm.ref.Append("admin_object_ids"))
}

// HsmUri returns a reference to field hsm_uri of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) HsmUri() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("hsm_uri"))
}

// Id returns a reference to field id of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akvmhsm.ref.Append("public_network_access_enabled"))
}

// PurgeProtectionEnabled returns a reference to field purge_protection_enabled of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) PurgeProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akvmhsm.ref.Append("purge_protection_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("resource_group_name"))
}

// SecurityDomainEncryptedData returns a reference to field security_domain_encrypted_data of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) SecurityDomainEncryptedData() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("security_domain_encrypted_data"))
}

// SecurityDomainKeyVaultCertificateIds returns a reference to field security_domain_key_vault_certificate_ids of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) SecurityDomainKeyVaultCertificateIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](akvmhsm.ref.Append("security_domain_key_vault_certificate_ids"))
}

// SecurityDomainQuorum returns a reference to field security_domain_quorum of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) SecurityDomainQuorum() terra.NumberValue {
	return terra.ReferenceAsNumber(akvmhsm.ref.Append("security_domain_quorum"))
}

// SkuName returns a reference to field sku_name of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("sku_name"))
}

// SoftDeleteRetentionDays returns a reference to field soft_delete_retention_days of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) SoftDeleteRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(akvmhsm.ref.Append("soft_delete_retention_days"))
}

// Tags returns a reference to field tags of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akvmhsm.ref.Append("tags"))
}

// TenantId returns a reference to field tenant_id of azurerm_key_vault_managed_hardware_security_module.
func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(akvmhsm.ref.Append("tenant_id"))
}

func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) NetworkAcls() terra.ListValue[NetworkAclsAttributes] {
	return terra.ReferenceAsList[NetworkAclsAttributes](akvmhsm.ref.Append("network_acls"))
}

func (akvmhsm azurermKeyVaultManagedHardwareSecurityModuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvmhsm.ref.Append("timeouts"))
}

type azurermKeyVaultManagedHardwareSecurityModuleState struct {
	AdminObjectIds                       []string           `json:"admin_object_ids"`
	HsmUri                               string             `json:"hsm_uri"`
	Id                                   string             `json:"id"`
	Location                             string             `json:"location"`
	Name                                 string             `json:"name"`
	PublicNetworkAccessEnabled           bool               `json:"public_network_access_enabled"`
	PurgeProtectionEnabled               bool               `json:"purge_protection_enabled"`
	ResourceGroupName                    string             `json:"resource_group_name"`
	SecurityDomainEncryptedData          string             `json:"security_domain_encrypted_data"`
	SecurityDomainKeyVaultCertificateIds []string           `json:"security_domain_key_vault_certificate_ids"`
	SecurityDomainQuorum                 float64            `json:"security_domain_quorum"`
	SkuName                              string             `json:"sku_name"`
	SoftDeleteRetentionDays              float64            `json:"soft_delete_retention_days"`
	Tags                                 map[string]string  `json:"tags"`
	TenantId                             string             `json:"tenant_id"`
	NetworkAcls                          []NetworkAclsState `json:"network_acls"`
	Timeouts                             *TimeoutsState     `json:"timeouts"`
}
