// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mobile_network_attached_data_network

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type NetworkAddressPortTranslation struct {
	// IcmpPinholeTimeoutInSeconds: number, optional
	IcmpPinholeTimeoutInSeconds terra.NumberValue `hcl:"icmp_pinhole_timeout_in_seconds,attr"`
	// PinholeMaximumNumber: number, optional
	PinholeMaximumNumber terra.NumberValue `hcl:"pinhole_maximum_number,attr"`
	// TcpPinholeTimeoutInSeconds: number, optional
	TcpPinholeTimeoutInSeconds terra.NumberValue `hcl:"tcp_pinhole_timeout_in_seconds,attr"`
	// TcpPortReuseMinimumHoldTimeInSeconds: number, optional
	TcpPortReuseMinimumHoldTimeInSeconds terra.NumberValue `hcl:"tcp_port_reuse_minimum_hold_time_in_seconds,attr"`
	// UdpPinholeTimeoutInSeconds: number, optional
	UdpPinholeTimeoutInSeconds terra.NumberValue `hcl:"udp_pinhole_timeout_in_seconds,attr"`
	// UdpPortReuseMinimumHoldTimeInSeconds: number, optional
	UdpPortReuseMinimumHoldTimeInSeconds terra.NumberValue `hcl:"udp_port_reuse_minimum_hold_time_in_seconds,attr"`
	// NetworkAddressPortTranslationPortRange: optional
	PortRange *NetworkAddressPortTranslationPortRange `hcl:"port_range,block"`
}

type NetworkAddressPortTranslationPortRange struct {
	// Maximum: number, optional
	Maximum terra.NumberValue `hcl:"maximum,attr"`
	// Minimum: number, optional
	Minimum terra.NumberValue `hcl:"minimum,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type NetworkAddressPortTranslationAttributes struct {
	ref terra.Reference
}

func (napt NetworkAddressPortTranslationAttributes) InternalRef() (terra.Reference, error) {
	return napt.ref, nil
}

func (napt NetworkAddressPortTranslationAttributes) InternalWithRef(ref terra.Reference) NetworkAddressPortTranslationAttributes {
	return NetworkAddressPortTranslationAttributes{ref: ref}
}

func (napt NetworkAddressPortTranslationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return napt.ref.InternalTokens()
}

func (napt NetworkAddressPortTranslationAttributes) IcmpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("icmp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) PinholeMaximumNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("pinhole_maximum_number"))
}

func (napt NetworkAddressPortTranslationAttributes) TcpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("tcp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) TcpPortReuseMinimumHoldTimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("tcp_port_reuse_minimum_hold_time_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) UdpPinholeTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("udp_pinhole_timeout_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) UdpPortReuseMinimumHoldTimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(napt.ref.Append("udp_port_reuse_minimum_hold_time_in_seconds"))
}

func (napt NetworkAddressPortTranslationAttributes) PortRange() terra.ListValue[NetworkAddressPortTranslationPortRangeAttributes] {
	return terra.ReferenceAsList[NetworkAddressPortTranslationPortRangeAttributes](napt.ref.Append("port_range"))
}

type NetworkAddressPortTranslationPortRangeAttributes struct {
	ref terra.Reference
}

func (pr NetworkAddressPortTranslationPortRangeAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr NetworkAddressPortTranslationPortRangeAttributes) InternalWithRef(ref terra.Reference) NetworkAddressPortTranslationPortRangeAttributes {
	return NetworkAddressPortTranslationPortRangeAttributes{ref: ref}
}

func (pr NetworkAddressPortTranslationPortRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr NetworkAddressPortTranslationPortRangeAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("maximum"))
}

func (pr NetworkAddressPortTranslationPortRangeAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("minimum"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type NetworkAddressPortTranslationState struct {
	IcmpPinholeTimeoutInSeconds          float64                                       `json:"icmp_pinhole_timeout_in_seconds"`
	PinholeMaximumNumber                 float64                                       `json:"pinhole_maximum_number"`
	TcpPinholeTimeoutInSeconds           float64                                       `json:"tcp_pinhole_timeout_in_seconds"`
	TcpPortReuseMinimumHoldTimeInSeconds float64                                       `json:"tcp_port_reuse_minimum_hold_time_in_seconds"`
	UdpPinholeTimeoutInSeconds           float64                                       `json:"udp_pinhole_timeout_in_seconds"`
	UdpPortReuseMinimumHoldTimeInSeconds float64                                       `json:"udp_port_reuse_minimum_hold_time_in_seconds"`
	PortRange                            []NetworkAddressPortTranslationPortRangeState `json:"port_range"`
}

type NetworkAddressPortTranslationPortRangeState struct {
	Maximum float64 `json:"maximum"`
	Minimum float64 `json:"minimum"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
