// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_media_services_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_media_services_account.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMediaServicesAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsa *Resource) Type() string {
	return "azurerm_media_services_account"
}

// LocalName returns the local name for [Resource].
func (amsa *Resource) LocalName() string {
	return amsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsa *Resource) Configuration() interface{} {
	return amsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsa *Resource) Dependencies() terra.Dependencies {
	return amsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsa *Resource) Attributes() azurermMediaServicesAccountAttributes {
	return azurermMediaServicesAccountAttributes{ref: terra.ReferenceResource(amsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsa *Resource) ImportState(state io.Reader) error {
	amsa.state = &azurermMediaServicesAccountState{}
	if err := json.NewDecoder(state).Decode(amsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsa.Type(), amsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsa *Resource) State() (*azurermMediaServicesAccountState, bool) {
	return amsa.state, amsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsa *Resource) StateMust() *azurermMediaServicesAccountState {
	if amsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsa.Type(), amsa.LocalName()))
	}
	return amsa.state
}

// Args contains the configurations for azurerm_media_services_account.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAuthenticationType: string, optional
	StorageAuthenticationType terra.StringValue `hcl:"storage_authentication_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// KeyDeliveryAccessControl: optional
	KeyDeliveryAccessControl *KeyDeliveryAccessControl `hcl:"key_delivery_access_control,block"`
	// StorageAccount: min=1
	StorageAccount []StorageAccount `hcl:"storage_account,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMediaServicesAccountAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsa.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amsa.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amsa.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(amsa.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amsa.ref.Append("resource_group_name"))
}

// StorageAuthenticationType returns a reference to field storage_authentication_type of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) StorageAuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(amsa.ref.Append("storage_authentication_type"))
}

// Tags returns a reference to field tags of azurerm_media_services_account.
func (amsa azurermMediaServicesAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amsa.ref.Append("tags"))
}

func (amsa azurermMediaServicesAccountAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](amsa.ref.Append("encryption"))
}

func (amsa azurermMediaServicesAccountAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](amsa.ref.Append("identity"))
}

func (amsa azurermMediaServicesAccountAttributes) KeyDeliveryAccessControl() terra.ListValue[KeyDeliveryAccessControlAttributes] {
	return terra.ReferenceAsList[KeyDeliveryAccessControlAttributes](amsa.ref.Append("key_delivery_access_control"))
}

func (amsa azurermMediaServicesAccountAttributes) StorageAccount() terra.SetValue[StorageAccountAttributes] {
	return terra.ReferenceAsSet[StorageAccountAttributes](amsa.ref.Append("storage_account"))
}

func (amsa azurermMediaServicesAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsa.ref.Append("timeouts"))
}

type azurermMediaServicesAccountState struct {
	Id                         string                          `json:"id"`
	Location                   string                          `json:"location"`
	Name                       string                          `json:"name"`
	PublicNetworkAccessEnabled bool                            `json:"public_network_access_enabled"`
	ResourceGroupName          string                          `json:"resource_group_name"`
	StorageAuthenticationType  string                          `json:"storage_authentication_type"`
	Tags                       map[string]string               `json:"tags"`
	Encryption                 []EncryptionState               `json:"encryption"`
	Identity                   []IdentityState                 `json:"identity"`
	KeyDeliveryAccessControl   []KeyDeliveryAccessControlState `json:"key_delivery_access_control"`
	StorageAccount             []StorageAccountState           `json:"storage_account"`
	Timeouts                   *TimeoutsState                  `json:"timeouts"`
}
