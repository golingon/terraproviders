// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_app_service_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_app_service_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermAppServicePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aasp *Resource) Type() string {
	return "azurerm_app_service_plan"
}

// LocalName returns the local name for [Resource].
func (aasp *Resource) LocalName() string {
	return aasp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aasp *Resource) Configuration() interface{} {
	return aasp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aasp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aasp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aasp *Resource) Dependencies() terra.Dependencies {
	return aasp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aasp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aasp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aasp *Resource) Attributes() azurermAppServicePlanAttributes {
	return azurermAppServicePlanAttributes{ref: terra.ReferenceResource(aasp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aasp *Resource) ImportState(state io.Reader) error {
	aasp.state = &azurermAppServicePlanState{}
	if err := json.NewDecoder(state).Decode(aasp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aasp.Type(), aasp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aasp *Resource) State() (*azurermAppServicePlanState, bool) {
	return aasp.state, aasp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aasp *Resource) StateMust() *azurermAppServicePlanState {
	if aasp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aasp.Type(), aasp.LocalName()))
	}
	return aasp.state
}

// Args contains the configurations for azurerm_app_service_plan.
type Args struct {
	// AppServiceEnvironmentId: string, optional
	AppServiceEnvironmentId terra.StringValue `hcl:"app_service_environment_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsXenon: bool, optional
	IsXenon terra.BoolValue `hcl:"is_xenon,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumElasticWorkerCount: number, optional
	MaximumElasticWorkerCount terra.NumberValue `hcl:"maximum_elastic_worker_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PerSiteScaling: bool, optional
	PerSiteScaling terra.BoolValue `hcl:"per_site_scaling,attr"`
	// Reserved: bool, optional
	Reserved terra.BoolValue `hcl:"reserved,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermAppServicePlanAttributes struct {
	ref terra.Reference
}

// AppServiceEnvironmentId returns a reference to field app_service_environment_id of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) AppServiceEnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("app_service_environment_id"))
}

// Id returns a reference to field id of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("id"))
}

// IsXenon returns a reference to field is_xenon of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) IsXenon() terra.BoolValue {
	return terra.ReferenceAsBool(aasp.ref.Append("is_xenon"))
}

// Kind returns a reference to field kind of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("location"))
}

// MaximumElasticWorkerCount returns a reference to field maximum_elastic_worker_count of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) MaximumElasticWorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aasp.ref.Append("maximum_elastic_worker_count"))
}

// MaximumNumberOfWorkers returns a reference to field maximum_number_of_workers of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) MaximumNumberOfWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(aasp.ref.Append("maximum_number_of_workers"))
}

// Name returns a reference to field name of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("name"))
}

// PerSiteScaling returns a reference to field per_site_scaling of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) PerSiteScaling() terra.BoolValue {
	return terra.ReferenceAsBool(aasp.ref.Append("per_site_scaling"))
}

// Reserved returns a reference to field reserved of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Reserved() terra.BoolValue {
	return terra.ReferenceAsBool(aasp.ref.Append("reserved"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aasp.ref.Append("tags"))
}

// ZoneRedundant returns a reference to field zone_redundant of azurerm_app_service_plan.
func (aasp azurermAppServicePlanAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceAsBool(aasp.ref.Append("zone_redundant"))
}

func (aasp azurermAppServicePlanAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](aasp.ref.Append("sku"))
}

func (aasp azurermAppServicePlanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aasp.ref.Append("timeouts"))
}

type azurermAppServicePlanState struct {
	AppServiceEnvironmentId   string            `json:"app_service_environment_id"`
	Id                        string            `json:"id"`
	IsXenon                   bool              `json:"is_xenon"`
	Kind                      string            `json:"kind"`
	Location                  string            `json:"location"`
	MaximumElasticWorkerCount float64           `json:"maximum_elastic_worker_count"`
	MaximumNumberOfWorkers    float64           `json:"maximum_number_of_workers"`
	Name                      string            `json:"name"`
	PerSiteScaling            bool              `json:"per_site_scaling"`
	Reserved                  bool              `json:"reserved"`
	ResourceGroupName         string            `json:"resource_group_name"`
	Tags                      map[string]string `json:"tags"`
	ZoneRedundant             bool              `json:"zone_redundant"`
	Sku                       []SkuState        `json:"sku"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
