// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_network_manager_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_network_manager_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetworkManagerDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anmd *Resource) Type() string {
	return "azurerm_network_manager_deployment"
}

// LocalName returns the local name for [Resource].
func (anmd *Resource) LocalName() string {
	return anmd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anmd *Resource) Configuration() interface{} {
	return anmd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anmd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anmd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anmd *Resource) Dependencies() terra.Dependencies {
	return anmd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anmd *Resource) LifecycleManagement() *terra.Lifecycle {
	return anmd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anmd *Resource) Attributes() azurermNetworkManagerDeploymentAttributes {
	return azurermNetworkManagerDeploymentAttributes{ref: terra.ReferenceResource(anmd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anmd *Resource) ImportState(state io.Reader) error {
	anmd.state = &azurermNetworkManagerDeploymentState{}
	if err := json.NewDecoder(state).Decode(anmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anmd.Type(), anmd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anmd *Resource) State() (*azurermNetworkManagerDeploymentState, bool) {
	return anmd.state, anmd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anmd *Resource) StateMust() *azurermNetworkManagerDeploymentState {
	if anmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anmd.Type(), anmd.LocalName()))
	}
	return anmd.state
}

// Args contains the configurations for azurerm_network_manager_deployment.
type Args struct {
	// ConfigurationIds: list of string, required
	ConfigurationIds terra.ListValue[terra.StringValue] `hcl:"configuration_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// NetworkManagerId: string, required
	NetworkManagerId terra.StringValue `hcl:"network_manager_id,attr" validate:"required"`
	// ScopeAccess: string, required
	ScopeAccess terra.StringValue `hcl:"scope_access,attr" validate:"required"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNetworkManagerDeploymentAttributes struct {
	ref terra.Reference
}

// ConfigurationIds returns a reference to field configuration_ids of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) ConfigurationIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](anmd.ref.Append("configuration_ids"))
}

// Id returns a reference to field id of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anmd.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anmd.ref.Append("location"))
}

// NetworkManagerId returns a reference to field network_manager_id of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) NetworkManagerId() terra.StringValue {
	return terra.ReferenceAsString(anmd.ref.Append("network_manager_id"))
}

// ScopeAccess returns a reference to field scope_access of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) ScopeAccess() terra.StringValue {
	return terra.ReferenceAsString(anmd.ref.Append("scope_access"))
}

// Triggers returns a reference to field triggers of azurerm_network_manager_deployment.
func (anmd azurermNetworkManagerDeploymentAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anmd.ref.Append("triggers"))
}

func (anmd azurermNetworkManagerDeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anmd.ref.Append("timeouts"))
}

type azurermNetworkManagerDeploymentState struct {
	ConfigurationIds []string          `json:"configuration_ids"`
	Id               string            `json:"id"`
	Location         string            `json:"location"`
	NetworkManagerId string            `json:"network_manager_id"`
	ScopeAccess      string            `json:"scope_access"`
	Triggers         map[string]string `json:"triggers"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
