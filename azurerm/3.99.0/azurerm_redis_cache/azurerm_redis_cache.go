// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_redis_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_redis_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermRedisCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arc *Resource) Type() string {
	return "azurerm_redis_cache"
}

// LocalName returns the local name for [Resource].
func (arc *Resource) LocalName() string {
	return arc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arc *Resource) Configuration() interface{} {
	return arc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arc *Resource) Dependencies() terra.Dependencies {
	return arc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arc *Resource) Attributes() azurermRedisCacheAttributes {
	return azurermRedisCacheAttributes{ref: terra.ReferenceResource(arc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arc *Resource) ImportState(state io.Reader) error {
	arc.state = &azurermRedisCacheState{}
	if err := json.NewDecoder(state).Decode(arc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arc.Type(), arc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arc *Resource) State() (*azurermRedisCacheState, bool) {
	return arc.state, arc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arc *Resource) StateMust() *azurermRedisCacheState {
	if arc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arc.Type(), arc.LocalName()))
	}
	return arc.state
}

// Args contains the configurations for azurerm_redis_cache.
type Args struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// EnableNonSslPort: bool, optional
	EnableNonSslPort terra.BoolValue `hcl:"enable_non_ssl_port,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateStaticIpAddress: string, optional
	PrivateStaticIpAddress terra.StringValue `hcl:"private_static_ip_address,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// RedisVersion: string, optional
	RedisVersion terra.StringValue `hcl:"redis_version,attr"`
	// ReplicasPerMaster: number, optional
	ReplicasPerMaster terra.NumberValue `hcl:"replicas_per_master,attr"`
	// ReplicasPerPrimary: number, optional
	ReplicasPerPrimary terra.NumberValue `hcl:"replicas_per_primary,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ShardCount: number, optional
	ShardCount terra.NumberValue `hcl:"shard_count,attr"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantSettings: map of string, optional
	TenantSettings terra.MapValue[terra.StringValue] `hcl:"tenant_settings,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// PatchSchedule: min=0
	PatchSchedule []PatchSchedule `hcl:"patch_schedule,block" validate:"min=0"`
	// RedisConfiguration: optional
	RedisConfiguration *RedisConfiguration `hcl:"redis_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermRedisCacheAttributes struct {
	ref terra.Reference
}

// Capacity returns a reference to field capacity of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("capacity"))
}

// EnableNonSslPort returns a reference to field enable_non_ssl_port of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) EnableNonSslPort() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enable_non_ssl_port"))
}

// Family returns a reference to field family of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Family() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("family"))
}

// Hostname returns a reference to field hostname of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("hostname"))
}

// Id returns a reference to field id of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("location"))
}

// MinimumTlsVersion returns a reference to field minimum_tls_version of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("minimum_tls_version"))
}

// Name returns a reference to field name of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("name"))
}

// Port returns a reference to field port of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("port"))
}

// PrimaryAccessKey returns a reference to field primary_access_key of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) PrimaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("primary_access_key"))
}

// PrimaryConnectionString returns a reference to field primary_connection_string of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) PrimaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("primary_connection_string"))
}

// PrivateStaticIpAddress returns a reference to field private_static_ip_address of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) PrivateStaticIpAddress() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("private_static_ip_address"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("public_network_access_enabled"))
}

// RedisVersion returns a reference to field redis_version of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) RedisVersion() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("redis_version"))
}

// ReplicasPerMaster returns a reference to field replicas_per_master of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) ReplicasPerMaster() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("replicas_per_master"))
}

// ReplicasPerPrimary returns a reference to field replicas_per_primary of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) ReplicasPerPrimary() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("replicas_per_primary"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("resource_group_name"))
}

// SecondaryAccessKey returns a reference to field secondary_access_key of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) SecondaryAccessKey() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("secondary_access_key"))
}

// SecondaryConnectionString returns a reference to field secondary_connection_string of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) SecondaryConnectionString() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("secondary_connection_string"))
}

// ShardCount returns a reference to field shard_count of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("shard_count"))
}

// SkuName returns a reference to field sku_name of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("sku_name"))
}

// SslPort returns a reference to field ssl_port of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) SslPort() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("ssl_port"))
}

// SubnetId returns a reference to field subnet_id of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arc.ref.Append("tags"))
}

// TenantSettings returns a reference to field tenant_settings of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) TenantSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arc.ref.Append("tenant_settings"))
}

// Zones returns a reference to field zones of azurerm_redis_cache.
func (arc azurermRedisCacheAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arc.ref.Append("zones"))
}

func (arc azurermRedisCacheAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](arc.ref.Append("identity"))
}

func (arc azurermRedisCacheAttributes) PatchSchedule() terra.ListValue[PatchScheduleAttributes] {
	return terra.ReferenceAsList[PatchScheduleAttributes](arc.ref.Append("patch_schedule"))
}

func (arc azurermRedisCacheAttributes) RedisConfiguration() terra.ListValue[RedisConfigurationAttributes] {
	return terra.ReferenceAsList[RedisConfigurationAttributes](arc.ref.Append("redis_configuration"))
}

func (arc azurermRedisCacheAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arc.ref.Append("timeouts"))
}

type azurermRedisCacheState struct {
	Capacity                   float64                   `json:"capacity"`
	EnableNonSslPort           bool                      `json:"enable_non_ssl_port"`
	Family                     string                    `json:"family"`
	Hostname                   string                    `json:"hostname"`
	Id                         string                    `json:"id"`
	Location                   string                    `json:"location"`
	MinimumTlsVersion          string                    `json:"minimum_tls_version"`
	Name                       string                    `json:"name"`
	Port                       float64                   `json:"port"`
	PrimaryAccessKey           string                    `json:"primary_access_key"`
	PrimaryConnectionString    string                    `json:"primary_connection_string"`
	PrivateStaticIpAddress     string                    `json:"private_static_ip_address"`
	PublicNetworkAccessEnabled bool                      `json:"public_network_access_enabled"`
	RedisVersion               string                    `json:"redis_version"`
	ReplicasPerMaster          float64                   `json:"replicas_per_master"`
	ReplicasPerPrimary         float64                   `json:"replicas_per_primary"`
	ResourceGroupName          string                    `json:"resource_group_name"`
	SecondaryAccessKey         string                    `json:"secondary_access_key"`
	SecondaryConnectionString  string                    `json:"secondary_connection_string"`
	ShardCount                 float64                   `json:"shard_count"`
	SkuName                    string                    `json:"sku_name"`
	SslPort                    float64                   `json:"ssl_port"`
	SubnetId                   string                    `json:"subnet_id"`
	Tags                       map[string]string         `json:"tags"`
	TenantSettings             map[string]string         `json:"tenant_settings"`
	Zones                      []string                  `json:"zones"`
	Identity                   []IdentityState           `json:"identity"`
	PatchSchedule              []PatchScheduleState      `json:"patch_schedule"`
	RedisConfiguration         []RedisConfigurationState `json:"redis_configuration"`
	Timeouts                   *TimeoutsState            `json:"timeouts"`
}
