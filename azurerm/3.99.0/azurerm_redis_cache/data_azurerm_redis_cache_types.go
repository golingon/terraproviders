// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_redis_cache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataPatchScheduleAttributes struct {
	ref terra.Reference
}

func (ps DataPatchScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps DataPatchScheduleAttributes) InternalWithRef(ref terra.Reference) DataPatchScheduleAttributes {
	return DataPatchScheduleAttributes{ref: ref}
}

func (ps DataPatchScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps DataPatchScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("day_of_week"))
}

func (ps DataPatchScheduleAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("maintenance_window"))
}

func (ps DataPatchScheduleAttributes) StartHourUtc() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("start_hour_utc"))
}

type DataRedisConfigurationAttributes struct {
	ref terra.Reference
}

func (rc DataRedisConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc DataRedisConfigurationAttributes) InternalWithRef(ref terra.Reference) DataRedisConfigurationAttributes {
	return DataRedisConfigurationAttributes{ref: ref}
}

func (rc DataRedisConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc DataRedisConfigurationAttributes) ActiveDirectoryAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("active_directory_authentication_enabled"))
}

func (rc DataRedisConfigurationAttributes) AofBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("aof_backup_enabled"))
}

func (rc DataRedisConfigurationAttributes) AofStorageConnectionString0() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("aof_storage_connection_string_0"))
}

func (rc DataRedisConfigurationAttributes) AofStorageConnectionString1() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("aof_storage_connection_string_1"))
}

func (rc DataRedisConfigurationAttributes) DataPersistenceAuthenticationMethod() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_persistence_authentication_method"))
}

func (rc DataRedisConfigurationAttributes) EnableAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("enable_authentication"))
}

func (rc DataRedisConfigurationAttributes) Maxclients() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxclients"))
}

func (rc DataRedisConfigurationAttributes) MaxfragmentationmemoryReserved() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxfragmentationmemory_reserved"))
}

func (rc DataRedisConfigurationAttributes) MaxmemoryDelta() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxmemory_delta"))
}

func (rc DataRedisConfigurationAttributes) MaxmemoryPolicy() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("maxmemory_policy"))
}

func (rc DataRedisConfigurationAttributes) MaxmemoryReserved() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxmemory_reserved"))
}

func (rc DataRedisConfigurationAttributes) NotifyKeyspaceEvents() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("notify_keyspace_events"))
}

func (rc DataRedisConfigurationAttributes) RdbBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("rdb_backup_enabled"))
}

func (rc DataRedisConfigurationAttributes) RdbBackupFrequency() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("rdb_backup_frequency"))
}

func (rc DataRedisConfigurationAttributes) RdbBackupMaxSnapshotCount() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("rdb_backup_max_snapshot_count"))
}

func (rc DataRedisConfigurationAttributes) RdbStorageConnectionString() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("rdb_storage_connection_string"))
}

func (rc DataRedisConfigurationAttributes) StorageAccountSubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("storage_account_subscription_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataPatchScheduleState struct {
	DayOfWeek         string  `json:"day_of_week"`
	MaintenanceWindow string  `json:"maintenance_window"`
	StartHourUtc      float64 `json:"start_hour_utc"`
}

type DataRedisConfigurationState struct {
	ActiveDirectoryAuthenticationEnabled bool    `json:"active_directory_authentication_enabled"`
	AofBackupEnabled                     bool    `json:"aof_backup_enabled"`
	AofStorageConnectionString0          string  `json:"aof_storage_connection_string_0"`
	AofStorageConnectionString1          string  `json:"aof_storage_connection_string_1"`
	DataPersistenceAuthenticationMethod  string  `json:"data_persistence_authentication_method"`
	EnableAuthentication                 bool    `json:"enable_authentication"`
	Maxclients                           float64 `json:"maxclients"`
	MaxfragmentationmemoryReserved       float64 `json:"maxfragmentationmemory_reserved"`
	MaxmemoryDelta                       float64 `json:"maxmemory_delta"`
	MaxmemoryPolicy                      string  `json:"maxmemory_policy"`
	MaxmemoryReserved                    float64 `json:"maxmemory_reserved"`
	NotifyKeyspaceEvents                 string  `json:"notify_keyspace_events"`
	RdbBackupEnabled                     bool    `json:"rdb_backup_enabled"`
	RdbBackupFrequency                   float64 `json:"rdb_backup_frequency"`
	RdbBackupMaxSnapshotCount            float64 `json:"rdb_backup_max_snapshot_count"`
	RdbStorageConnectionString           string  `json:"rdb_storage_connection_string"`
	StorageAccountSubscriptionId         string  `json:"storage_account_subscription_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
