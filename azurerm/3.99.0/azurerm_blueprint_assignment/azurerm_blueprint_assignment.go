// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_blueprint_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_blueprint_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBlueprintAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aba *Resource) Type() string {
	return "azurerm_blueprint_assignment"
}

// LocalName returns the local name for [Resource].
func (aba *Resource) LocalName() string {
	return aba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aba *Resource) Configuration() interface{} {
	return aba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aba *Resource) Dependencies() terra.Dependencies {
	return aba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aba *Resource) LifecycleManagement() *terra.Lifecycle {
	return aba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aba *Resource) Attributes() azurermBlueprintAssignmentAttributes {
	return azurermBlueprintAssignmentAttributes{ref: terra.ReferenceResource(aba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aba *Resource) ImportState(state io.Reader) error {
	aba.state = &azurermBlueprintAssignmentState{}
	if err := json.NewDecoder(state).Decode(aba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aba.Type(), aba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aba *Resource) State() (*azurermBlueprintAssignmentState, bool) {
	return aba.state, aba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aba *Resource) StateMust() *azurermBlueprintAssignmentState {
	if aba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aba.Type(), aba.LocalName()))
	}
	return aba.state
}

// Args contains the configurations for azurerm_blueprint_assignment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LockExcludeActions: list of string, optional
	LockExcludeActions terra.ListValue[terra.StringValue] `hcl:"lock_exclude_actions,attr"`
	// LockExcludePrincipals: list of string, optional
	LockExcludePrincipals terra.ListValue[terra.StringValue] `hcl:"lock_exclude_principals,attr"`
	// LockMode: string, optional
	LockMode terra.StringValue `hcl:"lock_mode,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParameterValues: string, optional
	ParameterValues terra.StringValue `hcl:"parameter_values,attr"`
	// ResourceGroups: string, optional
	ResourceGroups terra.StringValue `hcl:"resource_groups,attr"`
	// TargetSubscriptionId: string, required
	TargetSubscriptionId terra.StringValue `hcl:"target_subscription_id,attr" validate:"required"`
	// VersionId: string, required
	VersionId terra.StringValue `hcl:"version_id,attr" validate:"required"`
	// Identity: required
	Identity *Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBlueprintAssignmentAttributes struct {
	ref terra.Reference
}

// BlueprintName returns a reference to field blueprint_name of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) BlueprintName() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("blueprint_name"))
}

// Description returns a reference to field description of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("display_name"))
}

// Id returns a reference to field id of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("location"))
}

// LockExcludeActions returns a reference to field lock_exclude_actions of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) LockExcludeActions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aba.ref.Append("lock_exclude_actions"))
}

// LockExcludePrincipals returns a reference to field lock_exclude_principals of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) LockExcludePrincipals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aba.ref.Append("lock_exclude_principals"))
}

// LockMode returns a reference to field lock_mode of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) LockMode() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("lock_mode"))
}

// Name returns a reference to field name of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("name"))
}

// ParameterValues returns a reference to field parameter_values of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) ParameterValues() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("parameter_values"))
}

// ResourceGroups returns a reference to field resource_groups of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) ResourceGroups() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("resource_groups"))
}

// TargetSubscriptionId returns a reference to field target_subscription_id of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) TargetSubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("target_subscription_id"))
}

// Type returns a reference to field type of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("type"))
}

// VersionId returns a reference to field version_id of azurerm_blueprint_assignment.
func (aba azurermBlueprintAssignmentAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(aba.ref.Append("version_id"))
}

func (aba azurermBlueprintAssignmentAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aba.ref.Append("identity"))
}

func (aba azurermBlueprintAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aba.ref.Append("timeouts"))
}

type azurermBlueprintAssignmentState struct {
	BlueprintName         string          `json:"blueprint_name"`
	Description           string          `json:"description"`
	DisplayName           string          `json:"display_name"`
	Id                    string          `json:"id"`
	Location              string          `json:"location"`
	LockExcludeActions    []string        `json:"lock_exclude_actions"`
	LockExcludePrincipals []string        `json:"lock_exclude_principals"`
	LockMode              string          `json:"lock_mode"`
	Name                  string          `json:"name"`
	ParameterValues       string          `json:"parameter_values"`
	ResourceGroups        string          `json:"resource_groups"`
	TargetSubscriptionId  string          `json:"target_subscription_id"`
	Type                  string          `json:"type"`
	VersionId             string          `json:"version_id"`
	Identity              []IdentityState `json:"identity"`
	Timeouts              *TimeoutsState  `json:"timeouts"`
}
