// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_netapp_volume_group_sap_hana

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_netapp_volume_group_sap_hana.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNetappVolumeGroupSapHanaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anvgsh *Resource) Type() string {
	return "azurerm_netapp_volume_group_sap_hana"
}

// LocalName returns the local name for [Resource].
func (anvgsh *Resource) LocalName() string {
	return anvgsh.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anvgsh *Resource) Configuration() interface{} {
	return anvgsh.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anvgsh *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anvgsh)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anvgsh *Resource) Dependencies() terra.Dependencies {
	return anvgsh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anvgsh *Resource) LifecycleManagement() *terra.Lifecycle {
	return anvgsh.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anvgsh *Resource) Attributes() azurermNetappVolumeGroupSapHanaAttributes {
	return azurermNetappVolumeGroupSapHanaAttributes{ref: terra.ReferenceResource(anvgsh)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anvgsh *Resource) ImportState(state io.Reader) error {
	anvgsh.state = &azurermNetappVolumeGroupSapHanaState{}
	if err := json.NewDecoder(state).Decode(anvgsh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anvgsh.Type(), anvgsh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anvgsh *Resource) State() (*azurermNetappVolumeGroupSapHanaState, bool) {
	return anvgsh.state, anvgsh.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anvgsh *Resource) StateMust() *azurermNetappVolumeGroupSapHanaState {
	if anvgsh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anvgsh.Type(), anvgsh.LocalName()))
	}
	return anvgsh.state
}

// Args contains the configurations for azurerm_netapp_volume_group_sap_hana.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// ApplicationIdentifier: string, required
	ApplicationIdentifier terra.StringValue `hcl:"application_identifier,attr" validate:"required"`
	// GroupDescription: string, required
	GroupDescription terra.StringValue `hcl:"group_description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Volume: min=2,max=5
	Volume []Volume `hcl:"volume,block" validate:"min=2,max=5"`
}

type azurermNetappVolumeGroupSapHanaAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("account_name"))
}

// ApplicationIdentifier returns a reference to field application_identifier of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) ApplicationIdentifier() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("application_identifier"))
}

// GroupDescription returns a reference to field group_description of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) GroupDescription() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("group_description"))
}

// Id returns a reference to field id of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_netapp_volume_group_sap_hana.
func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(anvgsh.ref.Append("resource_group_name"))
}

func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anvgsh.ref.Append("timeouts"))
}

func (anvgsh azurermNetappVolumeGroupSapHanaAttributes) Volume() terra.ListValue[VolumeAttributes] {
	return terra.ReferenceAsList[VolumeAttributes](anvgsh.ref.Append("volume"))
}

type azurermNetappVolumeGroupSapHanaState struct {
	AccountName           string         `json:"account_name"`
	ApplicationIdentifier string         `json:"application_identifier"`
	GroupDescription      string         `json:"group_description"`
	Id                    string         `json:"id"`
	Location              string         `json:"location"`
	Name                  string         `json:"name"`
	ResourceGroupName     string         `json:"resource_group_name"`
	Timeouts              *TimeoutsState `json:"timeouts"`
	Volume                []VolumeState  `json:"volume"`
}
