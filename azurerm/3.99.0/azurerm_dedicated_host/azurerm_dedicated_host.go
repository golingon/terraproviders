// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dedicated_host

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dedicated_host.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDedicatedHostState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adh *Resource) Type() string {
	return "azurerm_dedicated_host"
}

// LocalName returns the local name for [Resource].
func (adh *Resource) LocalName() string {
	return adh.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adh *Resource) Configuration() interface{} {
	return adh.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adh *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adh)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adh *Resource) Dependencies() terra.Dependencies {
	return adh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adh *Resource) LifecycleManagement() *terra.Lifecycle {
	return adh.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adh *Resource) Attributes() azurermDedicatedHostAttributes {
	return azurermDedicatedHostAttributes{ref: terra.ReferenceResource(adh)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adh *Resource) ImportState(state io.Reader) error {
	adh.state = &azurermDedicatedHostState{}
	if err := json.NewDecoder(state).Decode(adh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adh.Type(), adh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adh *Resource) State() (*azurermDedicatedHostState, bool) {
	return adh.state, adh.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adh *Resource) StateMust() *azurermDedicatedHostState {
	if adh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adh.Type(), adh.LocalName()))
	}
	return adh.state
}

// Args contains the configurations for azurerm_dedicated_host.
type Args struct {
	// AutoReplaceOnFailure: bool, optional
	AutoReplaceOnFailure terra.BoolValue `hcl:"auto_replace_on_failure,attr"`
	// DedicatedHostGroupId: string, required
	DedicatedHostGroupId terra.StringValue `hcl:"dedicated_host_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformFaultDomain: number, required
	PlatformFaultDomain terra.NumberValue `hcl:"platform_fault_domain,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDedicatedHostAttributes struct {
	ref terra.Reference
}

// AutoReplaceOnFailure returns a reference to field auto_replace_on_failure of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) AutoReplaceOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(adh.ref.Append("auto_replace_on_failure"))
}

// DedicatedHostGroupId returns a reference to field dedicated_host_group_id of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) DedicatedHostGroupId() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("dedicated_host_group_id"))
}

// Id returns a reference to field id of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("name"))
}

// PlatformFaultDomain returns a reference to field platform_fault_domain of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) PlatformFaultDomain() terra.NumberValue {
	return terra.ReferenceAsNumber(adh.ref.Append("platform_fault_domain"))
}

// SkuName returns a reference to field sku_name of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(adh.ref.Append("sku_name"))
}

// Tags returns a reference to field tags of azurerm_dedicated_host.
func (adh azurermDedicatedHostAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adh.ref.Append("tags"))
}

func (adh azurermDedicatedHostAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adh.ref.Append("timeouts"))
}

type azurermDedicatedHostState struct {
	AutoReplaceOnFailure bool              `json:"auto_replace_on_failure"`
	DedicatedHostGroupId string            `json:"dedicated_host_group_id"`
	Id                   string            `json:"id"`
	LicenseType          string            `json:"license_type"`
	Location             string            `json:"location"`
	Name                 string            `json:"name"`
	PlatformFaultDomain  float64           `json:"platform_fault_domain"`
	SkuName              string            `json:"sku_name"`
	Tags                 map[string]string `json:"tags"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
