// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_stream_analytics_output_cosmosdb

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_stream_analytics_output_cosmosdb.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStreamAnalyticsOutputCosmosdbState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asaoc *Resource) Type() string {
	return "azurerm_stream_analytics_output_cosmosdb"
}

// LocalName returns the local name for [Resource].
func (asaoc *Resource) LocalName() string {
	return asaoc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asaoc *Resource) Configuration() interface{} {
	return asaoc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asaoc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asaoc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asaoc *Resource) Dependencies() terra.Dependencies {
	return asaoc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asaoc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asaoc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asaoc *Resource) Attributes() azurermStreamAnalyticsOutputCosmosdbAttributes {
	return azurermStreamAnalyticsOutputCosmosdbAttributes{ref: terra.ReferenceResource(asaoc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asaoc *Resource) ImportState(state io.Reader) error {
	asaoc.state = &azurermStreamAnalyticsOutputCosmosdbState{}
	if err := json.NewDecoder(state).Decode(asaoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asaoc.Type(), asaoc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asaoc *Resource) State() (*azurermStreamAnalyticsOutputCosmosdbState, bool) {
	return asaoc.state, asaoc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asaoc *Resource) StateMust() *azurermStreamAnalyticsOutputCosmosdbState {
	if asaoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asaoc.Type(), asaoc.LocalName()))
	}
	return asaoc.state
}

// Args contains the configurations for azurerm_stream_analytics_output_cosmosdb.
type Args struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// CosmosdbAccountKey: string, required
	CosmosdbAccountKey terra.StringValue `hcl:"cosmosdb_account_key,attr" validate:"required"`
	// CosmosdbSqlDatabaseId: string, required
	CosmosdbSqlDatabaseId terra.StringValue `hcl:"cosmosdb_sql_database_id,attr" validate:"required"`
	// DocumentId: string, optional
	DocumentId terra.StringValue `hcl:"document_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionKey: string, optional
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// StreamAnalyticsJobId: string, required
	StreamAnalyticsJobId terra.StringValue `hcl:"stream_analytics_job_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStreamAnalyticsOutputCosmosdbAttributes struct {
	ref terra.Reference
}

// ContainerName returns a reference to field container_name of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("container_name"))
}

// CosmosdbAccountKey returns a reference to field cosmosdb_account_key of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) CosmosdbAccountKey() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("cosmosdb_account_key"))
}

// CosmosdbSqlDatabaseId returns a reference to field cosmosdb_sql_database_id of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) CosmosdbSqlDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("cosmosdb_sql_database_id"))
}

// DocumentId returns a reference to field document_id of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) DocumentId() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("document_id"))
}

// Id returns a reference to field id of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("name"))
}

// PartitionKey returns a reference to field partition_key of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("partition_key"))
}

// StreamAnalyticsJobId returns a reference to field stream_analytics_job_id of azurerm_stream_analytics_output_cosmosdb.
func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) StreamAnalyticsJobId() terra.StringValue {
	return terra.ReferenceAsString(asaoc.ref.Append("stream_analytics_job_id"))
}

func (asaoc azurermStreamAnalyticsOutputCosmosdbAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asaoc.ref.Append("timeouts"))
}

type azurermStreamAnalyticsOutputCosmosdbState struct {
	ContainerName         string         `json:"container_name"`
	CosmosdbAccountKey    string         `json:"cosmosdb_account_key"`
	CosmosdbSqlDatabaseId string         `json:"cosmosdb_sql_database_id"`
	DocumentId            string         `json:"document_id"`
	Id                    string         `json:"id"`
	Name                  string         `json:"name"`
	PartitionKey          string         `json:"partition_key"`
	StreamAnalyticsJobId  string         `json:"stream_analytics_job_id"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
