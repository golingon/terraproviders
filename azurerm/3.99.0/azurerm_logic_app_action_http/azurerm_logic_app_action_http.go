// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logic_app_action_http

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_logic_app_action_http.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogicAppActionHttpState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alaah *Resource) Type() string {
	return "azurerm_logic_app_action_http"
}

// LocalName returns the local name for [Resource].
func (alaah *Resource) LocalName() string {
	return alaah.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alaah *Resource) Configuration() interface{} {
	return alaah.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alaah *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alaah)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alaah *Resource) Dependencies() terra.Dependencies {
	return alaah.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alaah *Resource) LifecycleManagement() *terra.Lifecycle {
	return alaah.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alaah *Resource) Attributes() azurermLogicAppActionHttpAttributes {
	return azurermLogicAppActionHttpAttributes{ref: terra.ReferenceResource(alaah)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alaah *Resource) ImportState(state io.Reader) error {
	alaah.state = &azurermLogicAppActionHttpState{}
	if err := json.NewDecoder(state).Decode(alaah.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alaah.Type(), alaah.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alaah *Resource) State() (*azurermLogicAppActionHttpState, bool) {
	return alaah.state, alaah.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alaah *Resource) StateMust() *azurermLogicAppActionHttpState {
	if alaah.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alaah.Type(), alaah.LocalName()))
	}
	return alaah.state
}

// Args contains the configurations for azurerm_logic_app_action_http.
type Args struct {
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// Headers: map of string, optional
	Headers terra.MapValue[terra.StringValue] `hcl:"headers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogicAppId: string, required
	LogicAppId terra.StringValue `hcl:"logic_app_id,attr" validate:"required"`
	// Method: string, required
	Method terra.StringValue `hcl:"method,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Queries: map of string, optional
	Queries terra.MapValue[terra.StringValue] `hcl:"queries,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
	// RunAfter: min=0
	RunAfter []RunAfter `hcl:"run_after,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogicAppActionHttpAttributes struct {
	ref terra.Reference
}

// Body returns a reference to field body of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("body"))
}

// Headers returns a reference to field headers of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Headers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alaah.ref.Append("headers"))
}

// Id returns a reference to field id of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("id"))
}

// LogicAppId returns a reference to field logic_app_id of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) LogicAppId() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("logic_app_id"))
}

// Method returns a reference to field method of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("method"))
}

// Name returns a reference to field name of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("name"))
}

// Queries returns a reference to field queries of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Queries() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alaah.ref.Append("queries"))
}

// Uri returns a reference to field uri of azurerm_logic_app_action_http.
func (alaah azurermLogicAppActionHttpAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(alaah.ref.Append("uri"))
}

func (alaah azurermLogicAppActionHttpAttributes) RunAfter() terra.SetValue[RunAfterAttributes] {
	return terra.ReferenceAsSet[RunAfterAttributes](alaah.ref.Append("run_after"))
}

func (alaah azurermLogicAppActionHttpAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alaah.ref.Append("timeouts"))
}

type azurermLogicAppActionHttpState struct {
	Body       string            `json:"body"`
	Headers    map[string]string `json:"headers"`
	Id         string            `json:"id"`
	LogicAppId string            `json:"logic_app_id"`
	Method     string            `json:"method"`
	Name       string            `json:"name"`
	Queries    map[string]string `json:"queries"`
	Uri        string            `json:"uri"`
	RunAfter   []RunAfterState   `json:"run_after"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
