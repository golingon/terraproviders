// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_autoscale_setting

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_autoscale_setting.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorAutoscaleSettingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amas *Resource) Type() string {
	return "azurerm_monitor_autoscale_setting"
}

// LocalName returns the local name for [Resource].
func (amas *Resource) LocalName() string {
	return amas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amas *Resource) Configuration() interface{} {
	return amas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amas *Resource) Dependencies() terra.Dependencies {
	return amas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amas *Resource) LifecycleManagement() *terra.Lifecycle {
	return amas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amas *Resource) Attributes() azurermMonitorAutoscaleSettingAttributes {
	return azurermMonitorAutoscaleSettingAttributes{ref: terra.ReferenceResource(amas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amas *Resource) ImportState(state io.Reader) error {
	amas.state = &azurermMonitorAutoscaleSettingState{}
	if err := json.NewDecoder(state).Decode(amas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amas.Type(), amas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amas *Resource) State() (*azurermMonitorAutoscaleSettingState, bool) {
	return amas.state, amas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amas *Resource) StateMust() *azurermMonitorAutoscaleSettingState {
	if amas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amas.Type(), amas.LocalName()))
	}
	return amas.state
}

// Args contains the configurations for azurerm_monitor_autoscale_setting.
type Args struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// Notification: optional
	Notification *Notification `hcl:"notification,block"`
	// Predictive: optional
	Predictive *Predictive `hcl:"predictive,block"`
	// Profile: min=1,max=20
	Profile []Profile `hcl:"profile,block" validate:"min=1,max=20"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorAutoscaleSettingAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amas.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amas.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amas.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amas.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amas.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amas.ref.Append("tags"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_monitor_autoscale_setting.
func (amas azurermMonitorAutoscaleSettingAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(amas.ref.Append("target_resource_id"))
}

func (amas azurermMonitorAutoscaleSettingAttributes) Notification() terra.ListValue[NotificationAttributes] {
	return terra.ReferenceAsList[NotificationAttributes](amas.ref.Append("notification"))
}

func (amas azurermMonitorAutoscaleSettingAttributes) Predictive() terra.ListValue[PredictiveAttributes] {
	return terra.ReferenceAsList[PredictiveAttributes](amas.ref.Append("predictive"))
}

func (amas azurermMonitorAutoscaleSettingAttributes) Profile() terra.ListValue[ProfileAttributes] {
	return terra.ReferenceAsList[ProfileAttributes](amas.ref.Append("profile"))
}

func (amas azurermMonitorAutoscaleSettingAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amas.ref.Append("timeouts"))
}

type azurermMonitorAutoscaleSettingState struct {
	Enabled           bool                `json:"enabled"`
	Id                string              `json:"id"`
	Location          string              `json:"location"`
	Name              string              `json:"name"`
	ResourceGroupName string              `json:"resource_group_name"`
	Tags              map[string]string   `json:"tags"`
	TargetResourceId  string              `json:"target_resource_id"`
	Notification      []NotificationState `json:"notification"`
	Predictive        []PredictiveState   `json:"predictive"`
	Profile           []ProfileState      `json:"profile"`
	Timeouts          *TimeoutsState      `json:"timeouts"`
}
