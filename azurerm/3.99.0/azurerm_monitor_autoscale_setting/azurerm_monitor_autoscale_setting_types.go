// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_autoscale_setting

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Notification struct {
	// NotificationEmail: optional
	Email *NotificationEmail `hcl:"email,block"`
	// NotificationWebhook: min=0
	Webhook []NotificationWebhook `hcl:"webhook,block" validate:"min=0"`
}

type NotificationEmail struct {
	// CustomEmails: list of string, optional
	CustomEmails terra.ListValue[terra.StringValue] `hcl:"custom_emails,attr"`
	// SendToSubscriptionAdministrator: bool, optional
	SendToSubscriptionAdministrator terra.BoolValue `hcl:"send_to_subscription_administrator,attr"`
	// SendToSubscriptionCoAdministrator: bool, optional
	SendToSubscriptionCoAdministrator terra.BoolValue `hcl:"send_to_subscription_co_administrator,attr"`
}

type NotificationWebhook struct {
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// ServiceUri: string, required
	ServiceUri terra.StringValue `hcl:"service_uri,attr" validate:"required"`
}

type Predictive struct {
	// LookAheadTime: string, optional
	LookAheadTime terra.StringValue `hcl:"look_ahead_time,attr"`
	// ScaleMode: string, required
	ScaleMode terra.StringValue `hcl:"scale_mode,attr" validate:"required"`
}

type Profile struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProfileCapacity: required
	Capacity *ProfileCapacity `hcl:"capacity,block" validate:"required"`
	// ProfileFixedDate: optional
	FixedDate *ProfileFixedDate `hcl:"fixed_date,block"`
	// ProfileRecurrence: optional
	Recurrence *ProfileRecurrence `hcl:"recurrence,block"`
	// ProfileRule: min=0,max=10
	Rule []ProfileRule `hcl:"rule,block" validate:"min=0,max=10"`
}

type ProfileCapacity struct {
	// Default: number, required
	Default terra.NumberValue `hcl:"default,attr" validate:"required"`
	// Maximum: number, required
	Maximum terra.NumberValue `hcl:"maximum,attr" validate:"required"`
	// Minimum: number, required
	Minimum terra.NumberValue `hcl:"minimum,attr" validate:"required"`
}

type ProfileFixedDate struct {
	// End: string, required
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
}

type ProfileRecurrence struct {
	// Days: list of string, required
	Days terra.ListValue[terra.StringValue] `hcl:"days,attr" validate:"required"`
	// Hours: list of number, required
	Hours terra.ListValue[terra.NumberValue] `hcl:"hours,attr" validate:"required"`
	// Minutes: list of number, required
	Minutes terra.ListValue[terra.NumberValue] `hcl:"minutes,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
}

type ProfileRule struct {
	// ProfileRuleMetricTrigger: required
	MetricTrigger *ProfileRuleMetricTrigger `hcl:"metric_trigger,block" validate:"required"`
	// ProfileRuleScaleAction: required
	ScaleAction *ProfileRuleScaleAction `hcl:"scale_action,block" validate:"required"`
}

type ProfileRuleMetricTrigger struct {
	// DivideByInstanceCount: bool, optional
	DivideByInstanceCount terra.BoolValue `hcl:"divide_by_instance_count,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace: string, optional
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr"`
	// MetricResourceId: string, required
	MetricResourceId terra.StringValue `hcl:"metric_resource_id,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Statistic: string, required
	Statistic terra.StringValue `hcl:"statistic,attr" validate:"required"`
	// Threshold: number, required
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// TimeAggregation: string, required
	TimeAggregation terra.StringValue `hcl:"time_aggregation,attr" validate:"required"`
	// TimeGrain: string, required
	TimeGrain terra.StringValue `hcl:"time_grain,attr" validate:"required"`
	// TimeWindow: string, required
	TimeWindow terra.StringValue `hcl:"time_window,attr" validate:"required"`
	// ProfileRuleMetricTriggerDimensions: min=0
	Dimensions []ProfileRuleMetricTriggerDimensions `hcl:"dimensions,block" validate:"min=0"`
}

type ProfileRuleMetricTriggerDimensions struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ProfileRuleScaleAction struct {
	// Cooldown: string, required
	Cooldown terra.StringValue `hcl:"cooldown,attr" validate:"required"`
	// Direction: string, required
	Direction terra.StringValue `hcl:"direction,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type NotificationAttributes struct {
	ref terra.Reference
}

func (n NotificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NotificationAttributes) InternalWithRef(ref terra.Reference) NotificationAttributes {
	return NotificationAttributes{ref: ref}
}

func (n NotificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NotificationAttributes) Email() terra.ListValue[NotificationEmailAttributes] {
	return terra.ReferenceAsList[NotificationEmailAttributes](n.ref.Append("email"))
}

func (n NotificationAttributes) Webhook() terra.ListValue[NotificationWebhookAttributes] {
	return terra.ReferenceAsList[NotificationWebhookAttributes](n.ref.Append("webhook"))
}

type NotificationEmailAttributes struct {
	ref terra.Reference
}

func (e NotificationEmailAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e NotificationEmailAttributes) InternalWithRef(ref terra.Reference) NotificationEmailAttributes {
	return NotificationEmailAttributes{ref: ref}
}

func (e NotificationEmailAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e NotificationEmailAttributes) CustomEmails() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("custom_emails"))
}

func (e NotificationEmailAttributes) SendToSubscriptionAdministrator() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("send_to_subscription_administrator"))
}

func (e NotificationEmailAttributes) SendToSubscriptionCoAdministrator() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("send_to_subscription_co_administrator"))
}

type NotificationWebhookAttributes struct {
	ref terra.Reference
}

func (w NotificationWebhookAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w NotificationWebhookAttributes) InternalWithRef(ref terra.Reference) NotificationWebhookAttributes {
	return NotificationWebhookAttributes{ref: ref}
}

func (w NotificationWebhookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w NotificationWebhookAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](w.ref.Append("properties"))
}

func (w NotificationWebhookAttributes) ServiceUri() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("service_uri"))
}

type PredictiveAttributes struct {
	ref terra.Reference
}

func (p PredictiveAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PredictiveAttributes) InternalWithRef(ref terra.Reference) PredictiveAttributes {
	return PredictiveAttributes{ref: ref}
}

func (p PredictiveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PredictiveAttributes) LookAheadTime() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("look_ahead_time"))
}

func (p PredictiveAttributes) ScaleMode() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("scale_mode"))
}

type ProfileAttributes struct {
	ref terra.Reference
}

func (p ProfileAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProfileAttributes) InternalWithRef(ref terra.Reference) ProfileAttributes {
	return ProfileAttributes{ref: ref}
}

func (p ProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ProfileAttributes) Capacity() terra.ListValue[ProfileCapacityAttributes] {
	return terra.ReferenceAsList[ProfileCapacityAttributes](p.ref.Append("capacity"))
}

func (p ProfileAttributes) FixedDate() terra.ListValue[ProfileFixedDateAttributes] {
	return terra.ReferenceAsList[ProfileFixedDateAttributes](p.ref.Append("fixed_date"))
}

func (p ProfileAttributes) Recurrence() terra.ListValue[ProfileRecurrenceAttributes] {
	return terra.ReferenceAsList[ProfileRecurrenceAttributes](p.ref.Append("recurrence"))
}

func (p ProfileAttributes) Rule() terra.ListValue[ProfileRuleAttributes] {
	return terra.ReferenceAsList[ProfileRuleAttributes](p.ref.Append("rule"))
}

type ProfileCapacityAttributes struct {
	ref terra.Reference
}

func (c ProfileCapacityAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ProfileCapacityAttributes) InternalWithRef(ref terra.Reference) ProfileCapacityAttributes {
	return ProfileCapacityAttributes{ref: ref}
}

func (c ProfileCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ProfileCapacityAttributes) Default() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("default"))
}

func (c ProfileCapacityAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("maximum"))
}

func (c ProfileCapacityAttributes) Minimum() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("minimum"))
}

type ProfileFixedDateAttributes struct {
	ref terra.Reference
}

func (fd ProfileFixedDateAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd ProfileFixedDateAttributes) InternalWithRef(ref terra.Reference) ProfileFixedDateAttributes {
	return ProfileFixedDateAttributes{ref: ref}
}

func (fd ProfileFixedDateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd ProfileFixedDateAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("end"))
}

func (fd ProfileFixedDateAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("start"))
}

func (fd ProfileFixedDateAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("timezone"))
}

type ProfileRecurrenceAttributes struct {
	ref terra.Reference
}

func (r ProfileRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ProfileRecurrenceAttributes) InternalWithRef(ref terra.Reference) ProfileRecurrenceAttributes {
	return ProfileRecurrenceAttributes{ref: ref}
}

func (r ProfileRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ProfileRecurrenceAttributes) Days() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("days"))
}

func (r ProfileRecurrenceAttributes) Hours() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("hours"))
}

func (r ProfileRecurrenceAttributes) Minutes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("minutes"))
}

func (r ProfileRecurrenceAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("timezone"))
}

type ProfileRuleAttributes struct {
	ref terra.Reference
}

func (r ProfileRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ProfileRuleAttributes) InternalWithRef(ref terra.Reference) ProfileRuleAttributes {
	return ProfileRuleAttributes{ref: ref}
}

func (r ProfileRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ProfileRuleAttributes) MetricTrigger() terra.ListValue[ProfileRuleMetricTriggerAttributes] {
	return terra.ReferenceAsList[ProfileRuleMetricTriggerAttributes](r.ref.Append("metric_trigger"))
}

func (r ProfileRuleAttributes) ScaleAction() terra.ListValue[ProfileRuleScaleActionAttributes] {
	return terra.ReferenceAsList[ProfileRuleScaleActionAttributes](r.ref.Append("scale_action"))
}

type ProfileRuleMetricTriggerAttributes struct {
	ref terra.Reference
}

func (mt ProfileRuleMetricTriggerAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt ProfileRuleMetricTriggerAttributes) InternalWithRef(ref terra.Reference) ProfileRuleMetricTriggerAttributes {
	return ProfileRuleMetricTriggerAttributes{ref: ref}
}

func (mt ProfileRuleMetricTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt ProfileRuleMetricTriggerAttributes) DivideByInstanceCount() terra.BoolValue {
	return terra.ReferenceAsBool(mt.ref.Append("divide_by_instance_count"))
}

func (mt ProfileRuleMetricTriggerAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("metric_name"))
}

func (mt ProfileRuleMetricTriggerAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("metric_namespace"))
}

func (mt ProfileRuleMetricTriggerAttributes) MetricResourceId() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("metric_resource_id"))
}

func (mt ProfileRuleMetricTriggerAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("operator"))
}

func (mt ProfileRuleMetricTriggerAttributes) Statistic() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("statistic"))
}

func (mt ProfileRuleMetricTriggerAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(mt.ref.Append("threshold"))
}

func (mt ProfileRuleMetricTriggerAttributes) TimeAggregation() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("time_aggregation"))
}

func (mt ProfileRuleMetricTriggerAttributes) TimeGrain() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("time_grain"))
}

func (mt ProfileRuleMetricTriggerAttributes) TimeWindow() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("time_window"))
}

func (mt ProfileRuleMetricTriggerAttributes) Dimensions() terra.ListValue[ProfileRuleMetricTriggerDimensionsAttributes] {
	return terra.ReferenceAsList[ProfileRuleMetricTriggerDimensionsAttributes](mt.ref.Append("dimensions"))
}

type ProfileRuleMetricTriggerDimensionsAttributes struct {
	ref terra.Reference
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) InternalWithRef(ref terra.Reference) ProfileRuleMetricTriggerDimensionsAttributes {
	return ProfileRuleMetricTriggerDimensionsAttributes{ref: ref}
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d ProfileRuleMetricTriggerDimensionsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("values"))
}

type ProfileRuleScaleActionAttributes struct {
	ref terra.Reference
}

func (sa ProfileRuleScaleActionAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa ProfileRuleScaleActionAttributes) InternalWithRef(ref terra.Reference) ProfileRuleScaleActionAttributes {
	return ProfileRuleScaleActionAttributes{ref: ref}
}

func (sa ProfileRuleScaleActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa ProfileRuleScaleActionAttributes) Cooldown() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("cooldown"))
}

func (sa ProfileRuleScaleActionAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("direction"))
}

func (sa ProfileRuleScaleActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("type"))
}

func (sa ProfileRuleScaleActionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type NotificationState struct {
	Email   []NotificationEmailState   `json:"email"`
	Webhook []NotificationWebhookState `json:"webhook"`
}

type NotificationEmailState struct {
	CustomEmails                      []string `json:"custom_emails"`
	SendToSubscriptionAdministrator   bool     `json:"send_to_subscription_administrator"`
	SendToSubscriptionCoAdministrator bool     `json:"send_to_subscription_co_administrator"`
}

type NotificationWebhookState struct {
	Properties map[string]string `json:"properties"`
	ServiceUri string            `json:"service_uri"`
}

type PredictiveState struct {
	LookAheadTime string `json:"look_ahead_time"`
	ScaleMode     string `json:"scale_mode"`
}

type ProfileState struct {
	Name       string                   `json:"name"`
	Capacity   []ProfileCapacityState   `json:"capacity"`
	FixedDate  []ProfileFixedDateState  `json:"fixed_date"`
	Recurrence []ProfileRecurrenceState `json:"recurrence"`
	Rule       []ProfileRuleState       `json:"rule"`
}

type ProfileCapacityState struct {
	Default float64 `json:"default"`
	Maximum float64 `json:"maximum"`
	Minimum float64 `json:"minimum"`
}

type ProfileFixedDateState struct {
	End      string `json:"end"`
	Start    string `json:"start"`
	Timezone string `json:"timezone"`
}

type ProfileRecurrenceState struct {
	Days     []string  `json:"days"`
	Hours    []float64 `json:"hours"`
	Minutes  []float64 `json:"minutes"`
	Timezone string    `json:"timezone"`
}

type ProfileRuleState struct {
	MetricTrigger []ProfileRuleMetricTriggerState `json:"metric_trigger"`
	ScaleAction   []ProfileRuleScaleActionState   `json:"scale_action"`
}

type ProfileRuleMetricTriggerState struct {
	DivideByInstanceCount bool                                      `json:"divide_by_instance_count"`
	MetricName            string                                    `json:"metric_name"`
	MetricNamespace       string                                    `json:"metric_namespace"`
	MetricResourceId      string                                    `json:"metric_resource_id"`
	Operator              string                                    `json:"operator"`
	Statistic             string                                    `json:"statistic"`
	Threshold             float64                                   `json:"threshold"`
	TimeAggregation       string                                    `json:"time_aggregation"`
	TimeGrain             string                                    `json:"time_grain"`
	TimeWindow            string                                    `json:"time_window"`
	Dimensions            []ProfileRuleMetricTriggerDimensionsState `json:"dimensions"`
}

type ProfileRuleMetricTriggerDimensionsState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ProfileRuleScaleActionState struct {
	Cooldown  string  `json:"cooldown"`
	Direction string  `json:"direction"`
	Type      string  `json:"type"`
	Value     float64 `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
