// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_queue

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_queue.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asq *Resource) Type() string {
	return "azurerm_storage_queue"
}

// LocalName returns the local name for [Resource].
func (asq *Resource) LocalName() string {
	return asq.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asq *Resource) Configuration() interface{} {
	return asq.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asq *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asq)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asq *Resource) Dependencies() terra.Dependencies {
	return asq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asq *Resource) LifecycleManagement() *terra.Lifecycle {
	return asq.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asq *Resource) Attributes() azurermStorageQueueAttributes {
	return azurermStorageQueueAttributes{ref: terra.ReferenceResource(asq)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asq *Resource) ImportState(state io.Reader) error {
	asq.state = &azurermStorageQueueState{}
	if err := json.NewDecoder(state).Decode(asq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asq.Type(), asq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asq *Resource) State() (*azurermStorageQueueState, bool) {
	return asq.state, asq.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asq *Resource) StateMust() *azurermStorageQueueState {
	if asq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asq.Type(), asq.LocalName()))
	}
	return asq.state
}

// Args contains the configurations for azurerm_storage_queue.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageQueueAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_storage_queue.
func (asq azurermStorageQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asq.ref.Append("id"))
}

// Metadata returns a reference to field metadata of azurerm_storage_queue.
func (asq azurermStorageQueueAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asq.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_storage_queue.
func (asq azurermStorageQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asq.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_storage_queue.
func (asq azurermStorageQueueAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(asq.ref.Append("resource_manager_id"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_queue.
func (asq azurermStorageQueueAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(asq.ref.Append("storage_account_name"))
}

func (asq azurermStorageQueueAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asq.ref.Append("timeouts"))
}

type azurermStorageQueueState struct {
	Id                 string            `json:"id"`
	Metadata           map[string]string `json:"metadata"`
	Name               string            `json:"name"`
	ResourceManagerId  string            `json:"resource_manager_id"`
	StorageAccountName string            `json:"storage_account_name"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
