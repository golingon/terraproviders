// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_hub_route_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_hub_route_table.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualHubRouteTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avhrt *Resource) Type() string {
	return "azurerm_virtual_hub_route_table"
}

// LocalName returns the local name for [Resource].
func (avhrt *Resource) LocalName() string {
	return avhrt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avhrt *Resource) Configuration() interface{} {
	return avhrt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avhrt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avhrt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avhrt *Resource) Dependencies() terra.Dependencies {
	return avhrt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avhrt *Resource) LifecycleManagement() *terra.Lifecycle {
	return avhrt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avhrt *Resource) Attributes() azurermVirtualHubRouteTableAttributes {
	return azurermVirtualHubRouteTableAttributes{ref: terra.ReferenceResource(avhrt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avhrt *Resource) ImportState(state io.Reader) error {
	avhrt.state = &azurermVirtualHubRouteTableState{}
	if err := json.NewDecoder(state).Decode(avhrt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avhrt.Type(), avhrt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avhrt *Resource) State() (*azurermVirtualHubRouteTableState, bool) {
	return avhrt.state, avhrt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avhrt *Resource) StateMust() *azurermVirtualHubRouteTableState {
	if avhrt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avhrt.Type(), avhrt.LocalName()))
	}
	return avhrt.state
}

// Args contains the configurations for azurerm_virtual_hub_route_table.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: set of string, optional
	Labels terra.SetValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualHubId: string, required
	VirtualHubId terra.StringValue `hcl:"virtual_hub_id,attr" validate:"required"`
	// Route: min=0
	Route []Route `hcl:"route,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualHubRouteTableAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_virtual_hub_route_table.
func (avhrt azurermVirtualHubRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avhrt.ref.Append("id"))
}

// Labels returns a reference to field labels of azurerm_virtual_hub_route_table.
func (avhrt azurermVirtualHubRouteTableAttributes) Labels() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avhrt.ref.Append("labels"))
}

// Name returns a reference to field name of azurerm_virtual_hub_route_table.
func (avhrt azurermVirtualHubRouteTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avhrt.ref.Append("name"))
}

// VirtualHubId returns a reference to field virtual_hub_id of azurerm_virtual_hub_route_table.
func (avhrt azurermVirtualHubRouteTableAttributes) VirtualHubId() terra.StringValue {
	return terra.ReferenceAsString(avhrt.ref.Append("virtual_hub_id"))
}

func (avhrt azurermVirtualHubRouteTableAttributes) Route() terra.SetValue[RouteAttributes] {
	return terra.ReferenceAsSet[RouteAttributes](avhrt.ref.Append("route"))
}

func (avhrt azurermVirtualHubRouteTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avhrt.ref.Append("timeouts"))
}

type azurermVirtualHubRouteTableState struct {
	Id           string         `json:"id"`
	Labels       []string       `json:"labels"`
	Name         string         `json:"name"`
	VirtualHubId string         `json:"virtual_hub_id"`
	Route        []RouteState   `json:"route"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
