// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_arc_resource_bridge_appliance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_arc_resource_bridge_appliance.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermArcResourceBridgeApplianceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aarba *Resource) Type() string {
	return "azurerm_arc_resource_bridge_appliance"
}

// LocalName returns the local name for [Resource].
func (aarba *Resource) LocalName() string {
	return aarba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aarba *Resource) Configuration() interface{} {
	return aarba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aarba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aarba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aarba *Resource) Dependencies() terra.Dependencies {
	return aarba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aarba *Resource) LifecycleManagement() *terra.Lifecycle {
	return aarba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aarba *Resource) Attributes() azurermArcResourceBridgeApplianceAttributes {
	return azurermArcResourceBridgeApplianceAttributes{ref: terra.ReferenceResource(aarba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aarba *Resource) ImportState(state io.Reader) error {
	aarba.state = &azurermArcResourceBridgeApplianceState{}
	if err := json.NewDecoder(state).Decode(aarba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aarba.Type(), aarba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aarba *Resource) State() (*azurermArcResourceBridgeApplianceState, bool) {
	return aarba.state, aarba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aarba *Resource) StateMust() *azurermArcResourceBridgeApplianceState {
	if aarba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aarba.Type(), aarba.LocalName()))
	}
	return aarba.state
}

// Args contains the configurations for azurerm_arc_resource_bridge_appliance.
type Args struct {
	// Distro: string, required
	Distro terra.StringValue `hcl:"distro,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureProvider: string, required
	InfrastructureProvider terra.StringValue `hcl:"infrastructure_provider,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicKeyBase64: string, optional
	PublicKeyBase64 terra.StringValue `hcl:"public_key_base64,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Identity: required
	Identity *Identity `hcl:"identity,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermArcResourceBridgeApplianceAttributes struct {
	ref terra.Reference
}

// Distro returns a reference to field distro of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) Distro() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("distro"))
}

// Id returns a reference to field id of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("id"))
}

// InfrastructureProvider returns a reference to field infrastructure_provider of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) InfrastructureProvider() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("infrastructure_provider"))
}

// Location returns a reference to field location of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("name"))
}

// PublicKeyBase64 returns a reference to field public_key_base64 of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) PublicKeyBase64() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("public_key_base64"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aarba.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_arc_resource_bridge_appliance.
func (aarba azurermArcResourceBridgeApplianceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aarba.ref.Append("tags"))
}

func (aarba azurermArcResourceBridgeApplianceAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aarba.ref.Append("identity"))
}

func (aarba azurermArcResourceBridgeApplianceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aarba.ref.Append("timeouts"))
}

type azurermArcResourceBridgeApplianceState struct {
	Distro                 string            `json:"distro"`
	Id                     string            `json:"id"`
	InfrastructureProvider string            `json:"infrastructure_provider"`
	Location               string            `json:"location"`
	Name                   string            `json:"name"`
	PublicKeyBase64        string            `json:"public_key_base64"`
	ResourceGroupName      string            `json:"resource_group_name"`
	Tags                   map[string]string `json:"tags"`
	Identity               []IdentityState   `json:"identity"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
