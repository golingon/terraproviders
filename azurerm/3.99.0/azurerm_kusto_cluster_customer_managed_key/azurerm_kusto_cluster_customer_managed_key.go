// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kusto_cluster_customer_managed_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kusto_cluster_customer_managed_key.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKustoClusterCustomerManagedKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akccmk *Resource) Type() string {
	return "azurerm_kusto_cluster_customer_managed_key"
}

// LocalName returns the local name for [Resource].
func (akccmk *Resource) LocalName() string {
	return akccmk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akccmk *Resource) Configuration() interface{} {
	return akccmk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akccmk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akccmk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akccmk *Resource) Dependencies() terra.Dependencies {
	return akccmk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akccmk *Resource) LifecycleManagement() *terra.Lifecycle {
	return akccmk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akccmk *Resource) Attributes() azurermKustoClusterCustomerManagedKeyAttributes {
	return azurermKustoClusterCustomerManagedKeyAttributes{ref: terra.ReferenceResource(akccmk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akccmk *Resource) ImportState(state io.Reader) error {
	akccmk.state = &azurermKustoClusterCustomerManagedKeyState{}
	if err := json.NewDecoder(state).Decode(akccmk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akccmk.Type(), akccmk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akccmk *Resource) State() (*azurermKustoClusterCustomerManagedKeyState, bool) {
	return akccmk.state, akccmk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akccmk *Resource) StateMust() *azurermKustoClusterCustomerManagedKeyState {
	if akccmk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akccmk.Type(), akccmk.LocalName()))
	}
	return akccmk.state
}

// Args contains the configurations for azurerm_kusto_cluster_customer_managed_key.
type Args struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyName: string, required
	KeyName terra.StringValue `hcl:"key_name,attr" validate:"required"`
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
	// KeyVersion: string, optional
	KeyVersion terra.StringValue `hcl:"key_version,attr"`
	// UserIdentity: string, optional
	UserIdentity terra.StringValue `hcl:"user_identity,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKustoClusterCustomerManagedKeyAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("cluster_id"))
}

// Id returns a reference to field id of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("id"))
}

// KeyName returns a reference to field key_name of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("key_name"))
}

// KeyVaultId returns a reference to field key_vault_id of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("key_vault_id"))
}

// KeyVersion returns a reference to field key_version of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) KeyVersion() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("key_version"))
}

// UserIdentity returns a reference to field user_identity of azurerm_kusto_cluster_customer_managed_key.
func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) UserIdentity() terra.StringValue {
	return terra.ReferenceAsString(akccmk.ref.Append("user_identity"))
}

func (akccmk azurermKustoClusterCustomerManagedKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akccmk.ref.Append("timeouts"))
}

type azurermKustoClusterCustomerManagedKeyState struct {
	ClusterId    string         `json:"cluster_id"`
	Id           string         `json:"id"`
	KeyName      string         `json:"key_name"`
	KeyVaultId   string         `json:"key_vault_id"`
	KeyVersion   string         `json:"key_version"`
	UserIdentity string         `json:"user_identity"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
