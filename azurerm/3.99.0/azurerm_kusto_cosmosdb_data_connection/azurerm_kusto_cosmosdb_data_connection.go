// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kusto_cosmosdb_data_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kusto_cosmosdb_data_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKustoCosmosdbDataConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akcdc *Resource) Type() string {
	return "azurerm_kusto_cosmosdb_data_connection"
}

// LocalName returns the local name for [Resource].
func (akcdc *Resource) LocalName() string {
	return akcdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akcdc *Resource) Configuration() interface{} {
	return akcdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akcdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akcdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akcdc *Resource) Dependencies() terra.Dependencies {
	return akcdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akcdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akcdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akcdc *Resource) Attributes() azurermKustoCosmosdbDataConnectionAttributes {
	return azurermKustoCosmosdbDataConnectionAttributes{ref: terra.ReferenceResource(akcdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akcdc *Resource) ImportState(state io.Reader) error {
	akcdc.state = &azurermKustoCosmosdbDataConnectionState{}
	if err := json.NewDecoder(state).Decode(akcdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akcdc.Type(), akcdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akcdc *Resource) State() (*azurermKustoCosmosdbDataConnectionState, bool) {
	return akcdc.state, akcdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akcdc *Resource) StateMust() *azurermKustoCosmosdbDataConnectionState {
	if akcdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akcdc.Type(), akcdc.LocalName()))
	}
	return akcdc.state
}

// Args contains the configurations for azurerm_kusto_cosmosdb_data_connection.
type Args struct {
	// CosmosdbContainerId: string, required
	CosmosdbContainerId terra.StringValue `hcl:"cosmosdb_container_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KustoDatabaseId: string, required
	KustoDatabaseId terra.StringValue `hcl:"kusto_database_id,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ManagedIdentityId: string, required
	ManagedIdentityId terra.StringValue `hcl:"managed_identity_id,attr" validate:"required"`
	// MappingRuleName: string, optional
	MappingRuleName terra.StringValue `hcl:"mapping_rule_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RetrievalStartDate: string, optional
	RetrievalStartDate terra.StringValue `hcl:"retrieval_start_date,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKustoCosmosdbDataConnectionAttributes struct {
	ref terra.Reference
}

// CosmosdbContainerId returns a reference to field cosmosdb_container_id of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) CosmosdbContainerId() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("cosmosdb_container_id"))
}

// Id returns a reference to field id of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("id"))
}

// KustoDatabaseId returns a reference to field kusto_database_id of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) KustoDatabaseId() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("kusto_database_id"))
}

// Location returns a reference to field location of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("location"))
}

// ManagedIdentityId returns a reference to field managed_identity_id of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) ManagedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("managed_identity_id"))
}

// MappingRuleName returns a reference to field mapping_rule_name of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) MappingRuleName() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("mapping_rule_name"))
}

// Name returns a reference to field name of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("name"))
}

// RetrievalStartDate returns a reference to field retrieval_start_date of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) RetrievalStartDate() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("retrieval_start_date"))
}

// TableName returns a reference to field table_name of azurerm_kusto_cosmosdb_data_connection.
func (akcdc azurermKustoCosmosdbDataConnectionAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(akcdc.ref.Append("table_name"))
}

func (akcdc azurermKustoCosmosdbDataConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akcdc.ref.Append("timeouts"))
}

type azurermKustoCosmosdbDataConnectionState struct {
	CosmosdbContainerId string         `json:"cosmosdb_container_id"`
	Id                  string         `json:"id"`
	KustoDatabaseId     string         `json:"kusto_database_id"`
	Location            string         `json:"location"`
	ManagedIdentityId   string         `json:"managed_identity_id"`
	MappingRuleName     string         `json:"mapping_rule_name"`
	Name                string         `json:"name"`
	RetrievalStartDate  string         `json:"retrieval_start_date"`
	TableName           string         `json:"table_name"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
