// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_new_relic_tag_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_new_relic_tag_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermNewRelicTagRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anrtr *Resource) Type() string {
	return "azurerm_new_relic_tag_rule"
}

// LocalName returns the local name for [Resource].
func (anrtr *Resource) LocalName() string {
	return anrtr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anrtr *Resource) Configuration() interface{} {
	return anrtr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anrtr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anrtr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anrtr *Resource) Dependencies() terra.Dependencies {
	return anrtr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anrtr *Resource) LifecycleManagement() *terra.Lifecycle {
	return anrtr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anrtr *Resource) Attributes() azurermNewRelicTagRuleAttributes {
	return azurermNewRelicTagRuleAttributes{ref: terra.ReferenceResource(anrtr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anrtr *Resource) ImportState(state io.Reader) error {
	anrtr.state = &azurermNewRelicTagRuleState{}
	if err := json.NewDecoder(state).Decode(anrtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anrtr.Type(), anrtr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anrtr *Resource) State() (*azurermNewRelicTagRuleState, bool) {
	return anrtr.state, anrtr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anrtr *Resource) StateMust() *azurermNewRelicTagRuleState {
	if anrtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anrtr.Type(), anrtr.LocalName()))
	}
	return anrtr.state
}

// Args contains the configurations for azurerm_new_relic_tag_rule.
type Args struct {
	// ActivityLogEnabled: bool, optional
	ActivityLogEnabled terra.BoolValue `hcl:"activity_log_enabled,attr"`
	// AzureActiveDirectoryLogEnabled: bool, optional
	AzureActiveDirectoryLogEnabled terra.BoolValue `hcl:"azure_active_directory_log_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricEnabled: bool, optional
	MetricEnabled terra.BoolValue `hcl:"metric_enabled,attr"`
	// MonitorId: string, required
	MonitorId terra.StringValue `hcl:"monitor_id,attr" validate:"required"`
	// SubscriptionLogEnabled: bool, optional
	SubscriptionLogEnabled terra.BoolValue `hcl:"subscription_log_enabled,attr"`
	// LogTagFilter: min=0
	LogTagFilter []LogTagFilter `hcl:"log_tag_filter,block" validate:"min=0"`
	// MetricTagFilter: min=0
	MetricTagFilter []MetricTagFilter `hcl:"metric_tag_filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermNewRelicTagRuleAttributes struct {
	ref terra.Reference
}

// ActivityLogEnabled returns a reference to field activity_log_enabled of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) ActivityLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anrtr.ref.Append("activity_log_enabled"))
}

// AzureActiveDirectoryLogEnabled returns a reference to field azure_active_directory_log_enabled of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) AzureActiveDirectoryLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anrtr.ref.Append("azure_active_directory_log_enabled"))
}

// Id returns a reference to field id of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anrtr.ref.Append("id"))
}

// MetricEnabled returns a reference to field metric_enabled of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) MetricEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anrtr.ref.Append("metric_enabled"))
}

// MonitorId returns a reference to field monitor_id of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) MonitorId() terra.StringValue {
	return terra.ReferenceAsString(anrtr.ref.Append("monitor_id"))
}

// SubscriptionLogEnabled returns a reference to field subscription_log_enabled of azurerm_new_relic_tag_rule.
func (anrtr azurermNewRelicTagRuleAttributes) SubscriptionLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(anrtr.ref.Append("subscription_log_enabled"))
}

func (anrtr azurermNewRelicTagRuleAttributes) LogTagFilter() terra.ListValue[LogTagFilterAttributes] {
	return terra.ReferenceAsList[LogTagFilterAttributes](anrtr.ref.Append("log_tag_filter"))
}

func (anrtr azurermNewRelicTagRuleAttributes) MetricTagFilter() terra.ListValue[MetricTagFilterAttributes] {
	return terra.ReferenceAsList[MetricTagFilterAttributes](anrtr.ref.Append("metric_tag_filter"))
}

func (anrtr azurermNewRelicTagRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anrtr.ref.Append("timeouts"))
}

type azurermNewRelicTagRuleState struct {
	ActivityLogEnabled             bool                   `json:"activity_log_enabled"`
	AzureActiveDirectoryLogEnabled bool                   `json:"azure_active_directory_log_enabled"`
	Id                             string                 `json:"id"`
	MetricEnabled                  bool                   `json:"metric_enabled"`
	MonitorId                      string                 `json:"monitor_id"`
	SubscriptionLogEnabled         bool                   `json:"subscription_log_enabled"`
	LogTagFilter                   []LogTagFilterState    `json:"log_tag_filter"`
	MetricTagFilter                []MetricTagFilterState `json:"metric_tag_filter"`
	Timeouts                       *TimeoutsState         `json:"timeouts"`
}
