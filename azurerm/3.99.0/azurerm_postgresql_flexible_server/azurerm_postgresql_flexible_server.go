// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_postgresql_flexible_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_postgresql_flexible_server.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPostgresqlFlexibleServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apfs *Resource) Type() string {
	return "azurerm_postgresql_flexible_server"
}

// LocalName returns the local name for [Resource].
func (apfs *Resource) LocalName() string {
	return apfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apfs *Resource) Configuration() interface{} {
	return apfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apfs *Resource) Dependencies() terra.Dependencies {
	return apfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return apfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apfs *Resource) Attributes() azurermPostgresqlFlexibleServerAttributes {
	return azurermPostgresqlFlexibleServerAttributes{ref: terra.ReferenceResource(apfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apfs *Resource) ImportState(state io.Reader) error {
	apfs.state = &azurermPostgresqlFlexibleServerState{}
	if err := json.NewDecoder(state).Decode(apfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apfs.Type(), apfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apfs *Resource) State() (*azurermPostgresqlFlexibleServerState, bool) {
	return apfs.state, apfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apfs *Resource) StateMust() *azurermPostgresqlFlexibleServerState {
	if apfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apfs.Type(), apfs.LocalName()))
	}
	return apfs.state
}

// Args contains the configurations for azurerm_postgresql_flexible_server.
type Args struct {
	// AdministratorLogin: string, optional
	AdministratorLogin terra.StringValue `hcl:"administrator_login,attr"`
	// AdministratorPassword: string, optional
	AdministratorPassword terra.StringValue `hcl:"administrator_password,attr"`
	// AutoGrowEnabled: bool, optional
	AutoGrowEnabled terra.BoolValue `hcl:"auto_grow_enabled,attr"`
	// BackupRetentionDays: number, optional
	BackupRetentionDays terra.NumberValue `hcl:"backup_retention_days,attr"`
	// CreateMode: string, optional
	CreateMode terra.StringValue `hcl:"create_mode,attr"`
	// DelegatedSubnetId: string, optional
	DelegatedSubnetId terra.StringValue `hcl:"delegated_subnet_id,attr"`
	// GeoRedundantBackupEnabled: bool, optional
	GeoRedundantBackupEnabled terra.BoolValue `hcl:"geo_redundant_backup_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PointInTimeRestoreTimeInUtc: string, optional
	PointInTimeRestoreTimeInUtc terra.StringValue `hcl:"point_in_time_restore_time_in_utc,attr"`
	// PrivateDnsZoneId: string, optional
	PrivateDnsZoneId terra.StringValue `hcl:"private_dns_zone_id,attr"`
	// ReplicationRole: string, optional
	ReplicationRole terra.StringValue `hcl:"replication_role,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// SourceServerId: string, optional
	SourceServerId terra.StringValue `hcl:"source_server_id,attr"`
	// StorageMb: number, optional
	StorageMb terra.NumberValue `hcl:"storage_mb,attr"`
	// StorageTier: string, optional
	StorageTier terra.StringValue `hcl:"storage_tier,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Authentication: optional
	Authentication *Authentication `hcl:"authentication,block"`
	// CustomerManagedKey: optional
	CustomerManagedKey *CustomerManagedKey `hcl:"customer_managed_key,block"`
	// HighAvailability: optional
	HighAvailability *HighAvailability `hcl:"high_availability,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPostgresqlFlexibleServerAttributes struct {
	ref terra.Reference
}

// AdministratorLogin returns a reference to field administrator_login of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) AdministratorLogin() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("administrator_login"))
}

// AdministratorPassword returns a reference to field administrator_password of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) AdministratorPassword() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("administrator_password"))
}

// AutoGrowEnabled returns a reference to field auto_grow_enabled of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) AutoGrowEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(apfs.ref.Append("auto_grow_enabled"))
}

// BackupRetentionDays returns a reference to field backup_retention_days of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) BackupRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(apfs.ref.Append("backup_retention_days"))
}

// CreateMode returns a reference to field create_mode of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) CreateMode() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("create_mode"))
}

// DelegatedSubnetId returns a reference to field delegated_subnet_id of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) DelegatedSubnetId() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("delegated_subnet_id"))
}

// Fqdn returns a reference to field fqdn of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("fqdn"))
}

// GeoRedundantBackupEnabled returns a reference to field geo_redundant_backup_enabled of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) GeoRedundantBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(apfs.ref.Append("geo_redundant_backup_enabled"))
}

// Id returns a reference to field id of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("name"))
}

// PointInTimeRestoreTimeInUtc returns a reference to field point_in_time_restore_time_in_utc of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) PointInTimeRestoreTimeInUtc() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("point_in_time_restore_time_in_utc"))
}

// PrivateDnsZoneId returns a reference to field private_dns_zone_id of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) PrivateDnsZoneId() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("private_dns_zone_id"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(apfs.ref.Append("public_network_access_enabled"))
}

// ReplicationRole returns a reference to field replication_role of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) ReplicationRole() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("replication_role"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("resource_group_name"))
}

// SkuName returns a reference to field sku_name of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("sku_name"))
}

// SourceServerId returns a reference to field source_server_id of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) SourceServerId() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("source_server_id"))
}

// StorageMb returns a reference to field storage_mb of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) StorageMb() terra.NumberValue {
	return terra.ReferenceAsNumber(apfs.ref.Append("storage_mb"))
}

// StorageTier returns a reference to field storage_tier of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) StorageTier() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("storage_tier"))
}

// Tags returns a reference to field tags of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apfs.ref.Append("tags"))
}

// Version returns a reference to field version of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("version"))
}

// Zone returns a reference to field zone of azurerm_postgresql_flexible_server.
func (apfs azurermPostgresqlFlexibleServerAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(apfs.ref.Append("zone"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](apfs.ref.Append("authentication"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) CustomerManagedKey() terra.ListValue[CustomerManagedKeyAttributes] {
	return terra.ReferenceAsList[CustomerManagedKeyAttributes](apfs.ref.Append("customer_managed_key"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) HighAvailability() terra.ListValue[HighAvailabilityAttributes] {
	return terra.ReferenceAsList[HighAvailabilityAttributes](apfs.ref.Append("high_availability"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](apfs.ref.Append("identity"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](apfs.ref.Append("maintenance_window"))
}

func (apfs azurermPostgresqlFlexibleServerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apfs.ref.Append("timeouts"))
}

type azurermPostgresqlFlexibleServerState struct {
	AdministratorLogin          string                    `json:"administrator_login"`
	AdministratorPassword       string                    `json:"administrator_password"`
	AutoGrowEnabled             bool                      `json:"auto_grow_enabled"`
	BackupRetentionDays         float64                   `json:"backup_retention_days"`
	CreateMode                  string                    `json:"create_mode"`
	DelegatedSubnetId           string                    `json:"delegated_subnet_id"`
	Fqdn                        string                    `json:"fqdn"`
	GeoRedundantBackupEnabled   bool                      `json:"geo_redundant_backup_enabled"`
	Id                          string                    `json:"id"`
	Location                    string                    `json:"location"`
	Name                        string                    `json:"name"`
	PointInTimeRestoreTimeInUtc string                    `json:"point_in_time_restore_time_in_utc"`
	PrivateDnsZoneId            string                    `json:"private_dns_zone_id"`
	PublicNetworkAccessEnabled  bool                      `json:"public_network_access_enabled"`
	ReplicationRole             string                    `json:"replication_role"`
	ResourceGroupName           string                    `json:"resource_group_name"`
	SkuName                     string                    `json:"sku_name"`
	SourceServerId              string                    `json:"source_server_id"`
	StorageMb                   float64                   `json:"storage_mb"`
	StorageTier                 string                    `json:"storage_tier"`
	Tags                        map[string]string         `json:"tags"`
	Version                     string                    `json:"version"`
	Zone                        string                    `json:"zone"`
	Authentication              []AuthenticationState     `json:"authentication"`
	CustomerManagedKey          []CustomerManagedKeyState `json:"customer_managed_key"`
	HighAvailability            []HighAvailabilityState   `json:"high_availability"`
	Identity                    []IdentityState           `json:"identity"`
	MaintenanceWindow           []MaintenanceWindowState  `json:"maintenance_window"`
	Timeouts                    *TimeoutsState            `json:"timeouts"`
}
