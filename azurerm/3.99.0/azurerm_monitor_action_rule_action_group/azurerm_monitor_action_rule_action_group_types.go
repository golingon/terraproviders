// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_action_rule_action_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Condition struct {
	// ConditionAlertContext: optional
	AlertContext *ConditionAlertContext `hcl:"alert_context,block"`
	// ConditionAlertRuleId: optional
	AlertRuleId *ConditionAlertRuleId `hcl:"alert_rule_id,block"`
	// ConditionDescription: optional
	Description *ConditionDescription `hcl:"description,block"`
	// ConditionMonitor: optional
	Monitor *ConditionMonitor `hcl:"monitor,block"`
	// ConditionMonitorService: optional
	MonitorService *ConditionMonitorService `hcl:"monitor_service,block"`
	// ConditionSeverity: optional
	Severity *ConditionSeverity `hcl:"severity,block"`
	// ConditionTargetResourceType: optional
	TargetResourceType *ConditionTargetResourceType `hcl:"target_resource_type,block"`
}

type ConditionAlertContext struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionAlertRuleId struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionDescription struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionMonitor struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionMonitorService struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionSeverity struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionTargetResourceType struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Scope struct {
	// ResourceIds: set of string, required
	ResourceIds terra.SetValue[terra.StringValue] `hcl:"resource_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) AlertContext() terra.ListValue[ConditionAlertContextAttributes] {
	return terra.ReferenceAsList[ConditionAlertContextAttributes](c.ref.Append("alert_context"))
}

func (c ConditionAttributes) AlertRuleId() terra.ListValue[ConditionAlertRuleIdAttributes] {
	return terra.ReferenceAsList[ConditionAlertRuleIdAttributes](c.ref.Append("alert_rule_id"))
}

func (c ConditionAttributes) Description() terra.ListValue[ConditionDescriptionAttributes] {
	return terra.ReferenceAsList[ConditionDescriptionAttributes](c.ref.Append("description"))
}

func (c ConditionAttributes) Monitor() terra.ListValue[ConditionMonitorAttributes] {
	return terra.ReferenceAsList[ConditionMonitorAttributes](c.ref.Append("monitor"))
}

func (c ConditionAttributes) MonitorService() terra.ListValue[ConditionMonitorServiceAttributes] {
	return terra.ReferenceAsList[ConditionMonitorServiceAttributes](c.ref.Append("monitor_service"))
}

func (c ConditionAttributes) Severity() terra.ListValue[ConditionSeverityAttributes] {
	return terra.ReferenceAsList[ConditionSeverityAttributes](c.ref.Append("severity"))
}

func (c ConditionAttributes) TargetResourceType() terra.ListValue[ConditionTargetResourceTypeAttributes] {
	return terra.ReferenceAsList[ConditionTargetResourceTypeAttributes](c.ref.Append("target_resource_type"))
}

type ConditionAlertContextAttributes struct {
	ref terra.Reference
}

func (ac ConditionAlertContextAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ConditionAlertContextAttributes) InternalWithRef(ref terra.Reference) ConditionAlertContextAttributes {
	return ConditionAlertContextAttributes{ref: ref}
}

func (ac ConditionAlertContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ConditionAlertContextAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("operator"))
}

func (ac ConditionAlertContextAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ac.ref.Append("values"))
}

type ConditionAlertRuleIdAttributes struct {
	ref terra.Reference
}

func (ari ConditionAlertRuleIdAttributes) InternalRef() (terra.Reference, error) {
	return ari.ref, nil
}

func (ari ConditionAlertRuleIdAttributes) InternalWithRef(ref terra.Reference) ConditionAlertRuleIdAttributes {
	return ConditionAlertRuleIdAttributes{ref: ref}
}

func (ari ConditionAlertRuleIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ari.ref.InternalTokens()
}

func (ari ConditionAlertRuleIdAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ari.ref.Append("operator"))
}

func (ari ConditionAlertRuleIdAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ari.ref.Append("values"))
}

type ConditionDescriptionAttributes struct {
	ref terra.Reference
}

func (d ConditionDescriptionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ConditionDescriptionAttributes) InternalWithRef(ref terra.Reference) ConditionDescriptionAttributes {
	return ConditionDescriptionAttributes{ref: ref}
}

func (d ConditionDescriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ConditionDescriptionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d ConditionDescriptionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type ConditionMonitorAttributes struct {
	ref terra.Reference
}

func (m ConditionMonitorAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ConditionMonitorAttributes) InternalWithRef(ref terra.Reference) ConditionMonitorAttributes {
	return ConditionMonitorAttributes{ref: ref}
}

func (m ConditionMonitorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ConditionMonitorAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("operator"))
}

func (m ConditionMonitorAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("values"))
}

type ConditionMonitorServiceAttributes struct {
	ref terra.Reference
}

func (ms ConditionMonitorServiceAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ConditionMonitorServiceAttributes) InternalWithRef(ref terra.Reference) ConditionMonitorServiceAttributes {
	return ConditionMonitorServiceAttributes{ref: ref}
}

func (ms ConditionMonitorServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ConditionMonitorServiceAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("operator"))
}

func (ms ConditionMonitorServiceAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ms.ref.Append("values"))
}

type ConditionSeverityAttributes struct {
	ref terra.Reference
}

func (s ConditionSeverityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ConditionSeverityAttributes) InternalWithRef(ref terra.Reference) ConditionSeverityAttributes {
	return ConditionSeverityAttributes{ref: ref}
}

func (s ConditionSeverityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ConditionSeverityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("operator"))
}

func (s ConditionSeverityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("values"))
}

type ConditionTargetResourceTypeAttributes struct {
	ref terra.Reference
}

func (trt ConditionTargetResourceTypeAttributes) InternalRef() (terra.Reference, error) {
	return trt.ref, nil
}

func (trt ConditionTargetResourceTypeAttributes) InternalWithRef(ref terra.Reference) ConditionTargetResourceTypeAttributes {
	return ConditionTargetResourceTypeAttributes{ref: ref}
}

func (trt ConditionTargetResourceTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trt.ref.InternalTokens()
}

func (trt ConditionTargetResourceTypeAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(trt.ref.Append("operator"))
}

func (trt ConditionTargetResourceTypeAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](trt.ref.Append("values"))
}

type ScopeAttributes struct {
	ref terra.Reference
}

func (s ScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScopeAttributes) InternalWithRef(ref terra.Reference) ScopeAttributes {
	return ScopeAttributes{ref: ref}
}

func (s ScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScopeAttributes) ResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("resource_ids"))
}

func (s ScopeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionState struct {
	AlertContext       []ConditionAlertContextState       `json:"alert_context"`
	AlertRuleId        []ConditionAlertRuleIdState        `json:"alert_rule_id"`
	Description        []ConditionDescriptionState        `json:"description"`
	Monitor            []ConditionMonitorState            `json:"monitor"`
	MonitorService     []ConditionMonitorServiceState     `json:"monitor_service"`
	Severity           []ConditionSeverityState           `json:"severity"`
	TargetResourceType []ConditionTargetResourceTypeState `json:"target_resource_type"`
}

type ConditionAlertContextState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionAlertRuleIdState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionDescriptionState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionMonitorState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionMonitorServiceState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionSeverityState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ConditionTargetResourceTypeState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ScopeState struct {
	ResourceIds []string `json:"resource_ids"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
