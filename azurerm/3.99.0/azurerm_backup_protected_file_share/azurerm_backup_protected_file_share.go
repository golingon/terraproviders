// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_protected_file_share

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_backup_protected_file_share.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBackupProtectedFileShareState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abpfs *Resource) Type() string {
	return "azurerm_backup_protected_file_share"
}

// LocalName returns the local name for [Resource].
func (abpfs *Resource) LocalName() string {
	return abpfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abpfs *Resource) Configuration() interface{} {
	return abpfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abpfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abpfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abpfs *Resource) Dependencies() terra.Dependencies {
	return abpfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abpfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return abpfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abpfs *Resource) Attributes() azurermBackupProtectedFileShareAttributes {
	return azurermBackupProtectedFileShareAttributes{ref: terra.ReferenceResource(abpfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abpfs *Resource) ImportState(state io.Reader) error {
	abpfs.state = &azurermBackupProtectedFileShareState{}
	if err := json.NewDecoder(state).Decode(abpfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abpfs.Type(), abpfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abpfs *Resource) State() (*azurermBackupProtectedFileShareState, bool) {
	return abpfs.state, abpfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abpfs *Resource) StateMust() *azurermBackupProtectedFileShareState {
	if abpfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abpfs.Type(), abpfs.LocalName()))
	}
	return abpfs.state
}

// Args contains the configurations for azurerm_backup_protected_file_share.
type Args struct {
	// BackupPolicyId: string, required
	BackupPolicyId terra.StringValue `hcl:"backup_policy_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceFileShareName: string, required
	SourceFileShareName terra.StringValue `hcl:"source_file_share_name,attr" validate:"required"`
	// SourceStorageAccountId: string, required
	SourceStorageAccountId terra.StringValue `hcl:"source_storage_account_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBackupProtectedFileShareAttributes struct {
	ref terra.Reference
}

// BackupPolicyId returns a reference to field backup_policy_id of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) BackupPolicyId() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("backup_policy_id"))
}

// Id returns a reference to field id of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("id"))
}

// RecoveryVaultName returns a reference to field recovery_vault_name of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("recovery_vault_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("resource_group_name"))
}

// SourceFileShareName returns a reference to field source_file_share_name of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) SourceFileShareName() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("source_file_share_name"))
}

// SourceStorageAccountId returns a reference to field source_storage_account_id of azurerm_backup_protected_file_share.
func (abpfs azurermBackupProtectedFileShareAttributes) SourceStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(abpfs.ref.Append("source_storage_account_id"))
}

func (abpfs azurermBackupProtectedFileShareAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abpfs.ref.Append("timeouts"))
}

type azurermBackupProtectedFileShareState struct {
	BackupPolicyId         string         `json:"backup_policy_id"`
	Id                     string         `json:"id"`
	RecoveryVaultName      string         `json:"recovery_vault_name"`
	ResourceGroupName      string         `json:"resource_group_name"`
	SourceFileShareName    string         `json:"source_file_share_name"`
	SourceStorageAccountId string         `json:"source_storage_account_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
