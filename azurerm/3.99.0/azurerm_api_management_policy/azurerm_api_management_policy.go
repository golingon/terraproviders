// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aamp *Resource) Type() string {
	return "azurerm_api_management_policy"
}

// LocalName returns the local name for [Resource].
func (aamp *Resource) LocalName() string {
	return aamp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aamp *Resource) Configuration() interface{} {
	return aamp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aamp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aamp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aamp *Resource) Dependencies() terra.Dependencies {
	return aamp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aamp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aamp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aamp *Resource) Attributes() azurermApiManagementPolicyAttributes {
	return azurermApiManagementPolicyAttributes{ref: terra.ReferenceResource(aamp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aamp *Resource) ImportState(state io.Reader) error {
	aamp.state = &azurermApiManagementPolicyState{}
	if err := json.NewDecoder(state).Decode(aamp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aamp.Type(), aamp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aamp *Resource) State() (*azurermApiManagementPolicyState, bool) {
	return aamp.state, aamp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aamp *Resource) StateMust() *azurermApiManagementPolicyState {
	if aamp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aamp.Type(), aamp.LocalName()))
	}
	return aamp.state
}

// Args contains the configurations for azurerm_api_management_policy.
type Args struct {
	// ApiManagementId: string, required
	ApiManagementId terra.StringValue `hcl:"api_management_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// XmlContent: string, optional
	XmlContent terra.StringValue `hcl:"xml_content,attr"`
	// XmlLink: string, optional
	XmlLink terra.StringValue `hcl:"xml_link,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermApiManagementPolicyAttributes struct {
	ref terra.Reference
}

// ApiManagementId returns a reference to field api_management_id of azurerm_api_management_policy.
func (aamp azurermApiManagementPolicyAttributes) ApiManagementId() terra.StringValue {
	return terra.ReferenceAsString(aamp.ref.Append("api_management_id"))
}

// Id returns a reference to field id of azurerm_api_management_policy.
func (aamp azurermApiManagementPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aamp.ref.Append("id"))
}

// XmlContent returns a reference to field xml_content of azurerm_api_management_policy.
func (aamp azurermApiManagementPolicyAttributes) XmlContent() terra.StringValue {
	return terra.ReferenceAsString(aamp.ref.Append("xml_content"))
}

// XmlLink returns a reference to field xml_link of azurerm_api_management_policy.
func (aamp azurermApiManagementPolicyAttributes) XmlLink() terra.StringValue {
	return terra.ReferenceAsString(aamp.ref.Append("xml_link"))
}

func (aamp azurermApiManagementPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aamp.ref.Append("timeouts"))
}

type azurermApiManagementPolicyState struct {
	ApiManagementId string         `json:"api_management_id"`
	Id              string         `json:"id"`
	XmlContent      string         `json:"xml_content"`
	XmlLink         string         `json:"xml_link"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
