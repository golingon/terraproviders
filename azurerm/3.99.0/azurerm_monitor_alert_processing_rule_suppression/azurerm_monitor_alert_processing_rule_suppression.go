// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_alert_processing_rule_suppression

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_alert_processing_rule_suppression.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorAlertProcessingRuleSuppressionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amaprs *Resource) Type() string {
	return "azurerm_monitor_alert_processing_rule_suppression"
}

// LocalName returns the local name for [Resource].
func (amaprs *Resource) LocalName() string {
	return amaprs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amaprs *Resource) Configuration() interface{} {
	return amaprs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amaprs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amaprs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amaprs *Resource) Dependencies() terra.Dependencies {
	return amaprs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amaprs *Resource) LifecycleManagement() *terra.Lifecycle {
	return amaprs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amaprs *Resource) Attributes() azurermMonitorAlertProcessingRuleSuppressionAttributes {
	return azurermMonitorAlertProcessingRuleSuppressionAttributes{ref: terra.ReferenceResource(amaprs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amaprs *Resource) ImportState(state io.Reader) error {
	amaprs.state = &azurermMonitorAlertProcessingRuleSuppressionState{}
	if err := json.NewDecoder(state).Decode(amaprs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amaprs.Type(), amaprs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amaprs *Resource) State() (*azurermMonitorAlertProcessingRuleSuppressionState, bool) {
	return amaprs.state, amaprs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amaprs *Resource) StateMust() *azurermMonitorAlertProcessingRuleSuppressionState {
	if amaprs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amaprs.Type(), amaprs.LocalName()))
	}
	return amaprs.state
}

// Args contains the configurations for azurerm_monitor_alert_processing_rule_suppression.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Scopes: list of string, required
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorAlertProcessingRuleSuppressionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amaprs.ref.Append("description"))
}

// Enabled returns a reference to field enabled of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(amaprs.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amaprs.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amaprs.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amaprs.ref.Append("resource_group_name"))
}

// Scopes returns a reference to field scopes of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amaprs.ref.Append("scopes"))
}

// Tags returns a reference to field tags of azurerm_monitor_alert_processing_rule_suppression.
func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amaprs.ref.Append("tags"))
}

func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](amaprs.ref.Append("condition"))
}

func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](amaprs.ref.Append("schedule"))
}

func (amaprs azurermMonitorAlertProcessingRuleSuppressionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amaprs.ref.Append("timeouts"))
}

type azurermMonitorAlertProcessingRuleSuppressionState struct {
	Description       string            `json:"description"`
	Enabled           bool              `json:"enabled"`
	Id                string            `json:"id"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	Scopes            []string          `json:"scopes"`
	Tags              map[string]string `json:"tags"`
	Condition         []ConditionState  `json:"condition"`
	Schedule          []ScheduleState   `json:"schedule"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
