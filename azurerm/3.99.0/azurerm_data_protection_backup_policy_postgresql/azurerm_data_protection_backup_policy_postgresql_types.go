// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_protection_backup_policy_postgresql

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RetentionRule struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RetentionRuleCriteria: required
	Criteria *RetentionRuleCriteria `hcl:"criteria,block" validate:"required"`
}

type RetentionRuleCriteria struct {
	// AbsoluteCriteria: string, optional
	AbsoluteCriteria terra.StringValue `hcl:"absolute_criteria,attr"`
	// DaysOfWeek: set of string, optional
	DaysOfWeek terra.SetValue[terra.StringValue] `hcl:"days_of_week,attr"`
	// MonthsOfYear: set of string, optional
	MonthsOfYear terra.SetValue[terra.StringValue] `hcl:"months_of_year,attr"`
	// ScheduledBackupTimes: set of string, optional
	ScheduledBackupTimes terra.SetValue[terra.StringValue] `hcl:"scheduled_backup_times,attr"`
	// WeeksOfMonth: set of string, optional
	WeeksOfMonth terra.SetValue[terra.StringValue] `hcl:"weeks_of_month,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type RetentionRuleAttributes struct {
	ref terra.Reference
}

func (rr RetentionRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RetentionRuleAttributes) InternalWithRef(ref terra.Reference) RetentionRuleAttributes {
	return RetentionRuleAttributes{ref: ref}
}

func (rr RetentionRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RetentionRuleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("duration"))
}

func (rr RetentionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr RetentionRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("priority"))
}

func (rr RetentionRuleAttributes) Criteria() terra.ListValue[RetentionRuleCriteriaAttributes] {
	return terra.ReferenceAsList[RetentionRuleCriteriaAttributes](rr.ref.Append("criteria"))
}

type RetentionRuleCriteriaAttributes struct {
	ref terra.Reference
}

func (c RetentionRuleCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c RetentionRuleCriteriaAttributes) InternalWithRef(ref terra.Reference) RetentionRuleCriteriaAttributes {
	return RetentionRuleCriteriaAttributes{ref: ref}
}

func (c RetentionRuleCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c RetentionRuleCriteriaAttributes) AbsoluteCriteria() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("absolute_criteria"))
}

func (c RetentionRuleCriteriaAttributes) DaysOfWeek() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("days_of_week"))
}

func (c RetentionRuleCriteriaAttributes) MonthsOfYear() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("months_of_year"))
}

func (c RetentionRuleCriteriaAttributes) ScheduledBackupTimes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("scheduled_backup_times"))
}

func (c RetentionRuleCriteriaAttributes) WeeksOfMonth() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("weeks_of_month"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type RetentionRuleState struct {
	Duration string                       `json:"duration"`
	Name     string                       `json:"name"`
	Priority float64                      `json:"priority"`
	Criteria []RetentionRuleCriteriaState `json:"criteria"`
}

type RetentionRuleCriteriaState struct {
	AbsoluteCriteria     string   `json:"absolute_criteria"`
	DaysOfWeek           []string `json:"days_of_week"`
	MonthsOfYear         []string `json:"months_of_year"`
	ScheduledBackupTimes []string `json:"scheduled_backup_times"`
	WeeksOfMonth         []string `json:"weeks_of_month"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
