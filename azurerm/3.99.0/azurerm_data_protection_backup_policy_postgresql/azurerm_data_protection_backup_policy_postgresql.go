// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_protection_backup_policy_postgresql

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_protection_backup_policy_postgresql.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataProtectionBackupPolicyPostgresqlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpbpp *Resource) Type() string {
	return "azurerm_data_protection_backup_policy_postgresql"
}

// LocalName returns the local name for [Resource].
func (adpbpp *Resource) LocalName() string {
	return adpbpp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpbpp *Resource) Configuration() interface{} {
	return adpbpp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpbpp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpbpp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpbpp *Resource) Dependencies() terra.Dependencies {
	return adpbpp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpbpp *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpbpp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpbpp *Resource) Attributes() azurermDataProtectionBackupPolicyPostgresqlAttributes {
	return azurermDataProtectionBackupPolicyPostgresqlAttributes{ref: terra.ReferenceResource(adpbpp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpbpp *Resource) ImportState(state io.Reader) error {
	adpbpp.state = &azurermDataProtectionBackupPolicyPostgresqlState{}
	if err := json.NewDecoder(state).Decode(adpbpp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpbpp.Type(), adpbpp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpbpp *Resource) State() (*azurermDataProtectionBackupPolicyPostgresqlState, bool) {
	return adpbpp.state, adpbpp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpbpp *Resource) StateMust() *azurermDataProtectionBackupPolicyPostgresqlState {
	if adpbpp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpbpp.Type(), adpbpp.LocalName()))
	}
	return adpbpp.state
}

// Args contains the configurations for azurerm_data_protection_backup_policy_postgresql.
type Args struct {
	// BackupRepeatingTimeIntervals: list of string, required
	BackupRepeatingTimeIntervals terra.ListValue[terra.StringValue] `hcl:"backup_repeating_time_intervals,attr" validate:"required"`
	// DefaultRetentionDuration: string, required
	DefaultRetentionDuration terra.StringValue `hcl:"default_retention_duration,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// VaultName: string, required
	VaultName terra.StringValue `hcl:"vault_name,attr" validate:"required"`
	// RetentionRule: min=0
	RetentionRule []RetentionRule `hcl:"retention_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataProtectionBackupPolicyPostgresqlAttributes struct {
	ref terra.Reference
}

// BackupRepeatingTimeIntervals returns a reference to field backup_repeating_time_intervals of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) BackupRepeatingTimeIntervals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adpbpp.ref.Append("backup_repeating_time_intervals"))
}

// DefaultRetentionDuration returns a reference to field default_retention_duration of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) DefaultRetentionDuration() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("default_retention_duration"))
}

// Id returns a reference to field id of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("resource_group_name"))
}

// TimeZone returns a reference to field time_zone of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("time_zone"))
}

// VaultName returns a reference to field vault_name of azurerm_data_protection_backup_policy_postgresql.
func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) VaultName() terra.StringValue {
	return terra.ReferenceAsString(adpbpp.ref.Append("vault_name"))
}

func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) RetentionRule() terra.ListValue[RetentionRuleAttributes] {
	return terra.ReferenceAsList[RetentionRuleAttributes](adpbpp.ref.Append("retention_rule"))
}

func (adpbpp azurermDataProtectionBackupPolicyPostgresqlAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpbpp.ref.Append("timeouts"))
}

type azurermDataProtectionBackupPolicyPostgresqlState struct {
	BackupRepeatingTimeIntervals []string             `json:"backup_repeating_time_intervals"`
	DefaultRetentionDuration     string               `json:"default_retention_duration"`
	Id                           string               `json:"id"`
	Name                         string               `json:"name"`
	ResourceGroupName            string               `json:"resource_group_name"`
	TimeZone                     string               `json:"time_zone"`
	VaultName                    string               `json:"vault_name"`
	RetentionRule                []RetentionRuleState `json:"retention_rule"`
	Timeouts                     *TimeoutsState       `json:"timeouts"`
}
