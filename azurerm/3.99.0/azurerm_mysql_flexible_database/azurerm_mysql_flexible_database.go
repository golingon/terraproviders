// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_mysql_flexible_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_mysql_flexible_database.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMysqlFlexibleDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amfd *Resource) Type() string {
	return "azurerm_mysql_flexible_database"
}

// LocalName returns the local name for [Resource].
func (amfd *Resource) LocalName() string {
	return amfd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amfd *Resource) Configuration() interface{} {
	return amfd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amfd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amfd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amfd *Resource) Dependencies() terra.Dependencies {
	return amfd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amfd *Resource) LifecycleManagement() *terra.Lifecycle {
	return amfd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amfd *Resource) Attributes() azurermMysqlFlexibleDatabaseAttributes {
	return azurermMysqlFlexibleDatabaseAttributes{ref: terra.ReferenceResource(amfd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amfd *Resource) ImportState(state io.Reader) error {
	amfd.state = &azurermMysqlFlexibleDatabaseState{}
	if err := json.NewDecoder(state).Decode(amfd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amfd.Type(), amfd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amfd *Resource) State() (*azurermMysqlFlexibleDatabaseState, bool) {
	return amfd.state, amfd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amfd *Resource) StateMust() *azurermMysqlFlexibleDatabaseState {
	if amfd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amfd.Type(), amfd.LocalName()))
	}
	return amfd.state
}

// Args contains the configurations for azurerm_mysql_flexible_database.
type Args struct {
	// Charset: string, required
	Charset terra.StringValue `hcl:"charset,attr" validate:"required"`
	// Collation: string, required
	Collation terra.StringValue `hcl:"collation,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServerName: string, required
	ServerName terra.StringValue `hcl:"server_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMysqlFlexibleDatabaseAttributes struct {
	ref terra.Reference
}

// Charset returns a reference to field charset of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) Charset() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("charset"))
}

// Collation returns a reference to field collation of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) Collation() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("collation"))
}

// Id returns a reference to field id of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("resource_group_name"))
}

// ServerName returns a reference to field server_name of azurerm_mysql_flexible_database.
func (amfd azurermMysqlFlexibleDatabaseAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(amfd.ref.Append("server_name"))
}

func (amfd azurermMysqlFlexibleDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amfd.ref.Append("timeouts"))
}

type azurermMysqlFlexibleDatabaseState struct {
	Charset           string         `json:"charset"`
	Collation         string         `json:"collation"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	ResourceGroupName string         `json:"resource_group_name"`
	ServerName        string         `json:"server_name"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
