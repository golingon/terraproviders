// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_trigger_blob_event

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_trigger_blob_event.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryTriggerBlobEventState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adftbe *Resource) Type() string {
	return "azurerm_data_factory_trigger_blob_event"
}

// LocalName returns the local name for [Resource].
func (adftbe *Resource) LocalName() string {
	return adftbe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adftbe *Resource) Configuration() interface{} {
	return adftbe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adftbe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adftbe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adftbe *Resource) Dependencies() terra.Dependencies {
	return adftbe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adftbe *Resource) LifecycleManagement() *terra.Lifecycle {
	return adftbe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adftbe *Resource) Attributes() azurermDataFactoryTriggerBlobEventAttributes {
	return azurermDataFactoryTriggerBlobEventAttributes{ref: terra.ReferenceResource(adftbe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adftbe *Resource) ImportState(state io.Reader) error {
	adftbe.state = &azurermDataFactoryTriggerBlobEventState{}
	if err := json.NewDecoder(state).Decode(adftbe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adftbe.Type(), adftbe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adftbe *Resource) State() (*azurermDataFactoryTriggerBlobEventState, bool) {
	return adftbe.state, adftbe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adftbe *Resource) StateMust() *azurermDataFactoryTriggerBlobEventState {
	if adftbe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adftbe.Type(), adftbe.LocalName()))
	}
	return adftbe.state
}

// Args contains the configurations for azurerm_data_factory_trigger_blob_event.
type Args struct {
	// Activated: bool, optional
	Activated terra.BoolValue `hcl:"activated,attr"`
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// BlobPathBeginsWith: string, optional
	BlobPathBeginsWith terra.StringValue `hcl:"blob_path_begins_with,attr"`
	// BlobPathEndsWith: string, optional
	BlobPathEndsWith terra.StringValue `hcl:"blob_path_ends_with,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Events: set of string, required
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreEmptyBlobs: bool, optional
	IgnoreEmptyBlobs terra.BoolValue `hcl:"ignore_empty_blobs,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Pipeline: min=1
	Pipeline []Pipeline `hcl:"pipeline,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryTriggerBlobEventAttributes struct {
	ref terra.Reference
}

// Activated returns a reference to field activated of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Activated() terra.BoolValue {
	return terra.ReferenceAsBool(adftbe.ref.Append("activated"))
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adftbe.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adftbe.ref.Append("annotations"))
}

// BlobPathBeginsWith returns a reference to field blob_path_begins_with of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) BlobPathBeginsWith() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("blob_path_begins_with"))
}

// BlobPathEndsWith returns a reference to field blob_path_ends_with of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) BlobPathEndsWith() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("blob_path_ends_with"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("description"))
}

// Events returns a reference to field events of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adftbe.ref.Append("events"))
}

// Id returns a reference to field id of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("id"))
}

// IgnoreEmptyBlobs returns a reference to field ignore_empty_blobs of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) IgnoreEmptyBlobs() terra.BoolValue {
	return terra.ReferenceAsBool(adftbe.ref.Append("ignore_empty_blobs"))
}

// Name returns a reference to field name of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("name"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_data_factory_trigger_blob_event.
func (adftbe azurermDataFactoryTriggerBlobEventAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(adftbe.ref.Append("storage_account_id"))
}

func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Pipeline() terra.SetValue[PipelineAttributes] {
	return terra.ReferenceAsSet[PipelineAttributes](adftbe.ref.Append("pipeline"))
}

func (adftbe azurermDataFactoryTriggerBlobEventAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adftbe.ref.Append("timeouts"))
}

type azurermDataFactoryTriggerBlobEventState struct {
	Activated            bool              `json:"activated"`
	AdditionalProperties map[string]string `json:"additional_properties"`
	Annotations          []string          `json:"annotations"`
	BlobPathBeginsWith   string            `json:"blob_path_begins_with"`
	BlobPathEndsWith     string            `json:"blob_path_ends_with"`
	DataFactoryId        string            `json:"data_factory_id"`
	Description          string            `json:"description"`
	Events               []string          `json:"events"`
	Id                   string            `json:"id"`
	IgnoreEmptyBlobs     bool              `json:"ignore_empty_blobs"`
	Name                 string            `json:"name"`
	StorageAccountId     string            `json:"storage_account_id"`
	Pipeline             []PipelineState   `json:"pipeline"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
