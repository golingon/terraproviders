// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_configuration_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Repository struct {
	// CaCertificateId: string, optional
	CaCertificateId terra.StringValue `hcl:"ca_certificate_id,attr"`
	// HostKey: string, optional
	HostKey terra.StringValue `hcl:"host_key,attr"`
	// HostKeyAlgorithm: string, optional
	HostKeyAlgorithm terra.StringValue `hcl:"host_key_algorithm,attr"`
	// Label: string, required
	Label terra.StringValue `hcl:"label,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Patterns: set of string, required
	Patterns terra.SetValue[terra.StringValue] `hcl:"patterns,attr" validate:"required"`
	// PrivateKey: string, optional
	PrivateKey terra.StringValue `hcl:"private_key,attr"`
	// SearchPaths: set of string, optional
	SearchPaths terra.SetValue[terra.StringValue] `hcl:"search_paths,attr"`
	// StrictHostKeyChecking: bool, optional
	StrictHostKeyChecking terra.BoolValue `hcl:"strict_host_key_checking,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RepositoryAttributes struct {
	ref terra.Reference
}

func (r RepositoryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RepositoryAttributes) InternalWithRef(ref terra.Reference) RepositoryAttributes {
	return RepositoryAttributes{ref: ref}
}

func (r RepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RepositoryAttributes) CaCertificateId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ca_certificate_id"))
}

func (r RepositoryAttributes) HostKey() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host_key"))
}

func (r RepositoryAttributes) HostKeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host_key_algorithm"))
}

func (r RepositoryAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("label"))
}

func (r RepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RepositoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("password"))
}

func (r RepositoryAttributes) Patterns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](r.ref.Append("patterns"))
}

func (r RepositoryAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("private_key"))
}

func (r RepositoryAttributes) SearchPaths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](r.ref.Append("search_paths"))
}

func (r RepositoryAttributes) StrictHostKeyChecking() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("strict_host_key_checking"))
}

func (r RepositoryAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

func (r RepositoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RepositoryState struct {
	CaCertificateId       string   `json:"ca_certificate_id"`
	HostKey               string   `json:"host_key"`
	HostKeyAlgorithm      string   `json:"host_key_algorithm"`
	Label                 string   `json:"label"`
	Name                  string   `json:"name"`
	Password              string   `json:"password"`
	Patterns              []string `json:"patterns"`
	PrivateKey            string   `json:"private_key"`
	SearchPaths           []string `json:"search_paths"`
	StrictHostKeyChecking bool     `json:"strict_host_key_checking"`
	Uri                   string   `json:"uri"`
	Username              string   `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
