// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_configuration_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_configuration_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudConfigurationServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asccs *Resource) Type() string {
	return "azurerm_spring_cloud_configuration_service"
}

// LocalName returns the local name for [Resource].
func (asccs *Resource) LocalName() string {
	return asccs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asccs *Resource) Configuration() interface{} {
	return asccs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asccs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asccs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asccs *Resource) Dependencies() terra.Dependencies {
	return asccs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asccs *Resource) LifecycleManagement() *terra.Lifecycle {
	return asccs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asccs *Resource) Attributes() azurermSpringCloudConfigurationServiceAttributes {
	return azurermSpringCloudConfigurationServiceAttributes{ref: terra.ReferenceResource(asccs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asccs *Resource) ImportState(state io.Reader) error {
	asccs.state = &azurermSpringCloudConfigurationServiceState{}
	if err := json.NewDecoder(state).Decode(asccs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asccs.Type(), asccs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asccs *Resource) State() (*azurermSpringCloudConfigurationServiceState, bool) {
	return asccs.state, asccs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asccs *Resource) StateMust() *azurermSpringCloudConfigurationServiceState {
	if asccs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asccs.Type(), asccs.LocalName()))
	}
	return asccs.state
}

// Args contains the configurations for azurerm_spring_cloud_configuration_service.
type Args struct {
	// Generation: string, optional
	Generation terra.StringValue `hcl:"generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RefreshIntervalInSeconds: number, optional
	RefreshIntervalInSeconds terra.NumberValue `hcl:"refresh_interval_in_seconds,attr"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Repository: min=0
	Repository []Repository `hcl:"repository,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSpringCloudConfigurationServiceAttributes struct {
	ref terra.Reference
}

// Generation returns a reference to field generation of azurerm_spring_cloud_configuration_service.
func (asccs azurermSpringCloudConfigurationServiceAttributes) Generation() terra.StringValue {
	return terra.ReferenceAsString(asccs.ref.Append("generation"))
}

// Id returns a reference to field id of azurerm_spring_cloud_configuration_service.
func (asccs azurermSpringCloudConfigurationServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asccs.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_configuration_service.
func (asccs azurermSpringCloudConfigurationServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asccs.ref.Append("name"))
}

// RefreshIntervalInSeconds returns a reference to field refresh_interval_in_seconds of azurerm_spring_cloud_configuration_service.
func (asccs azurermSpringCloudConfigurationServiceAttributes) RefreshIntervalInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(asccs.ref.Append("refresh_interval_in_seconds"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_configuration_service.
func (asccs azurermSpringCloudConfigurationServiceAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(asccs.ref.Append("spring_cloud_service_id"))
}

func (asccs azurermSpringCloudConfigurationServiceAttributes) Repository() terra.ListValue[RepositoryAttributes] {
	return terra.ReferenceAsList[RepositoryAttributes](asccs.ref.Append("repository"))
}

func (asccs azurermSpringCloudConfigurationServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asccs.ref.Append("timeouts"))
}

type azurermSpringCloudConfigurationServiceState struct {
	Generation               string            `json:"generation"`
	Id                       string            `json:"id"`
	Name                     string            `json:"name"`
	RefreshIntervalInSeconds float64           `json:"refresh_interval_in_seconds"`
	SpringCloudServiceId     string            `json:"spring_cloud_service_id"`
	Repository               []RepositoryState `json:"repository"`
	Timeouts                 *TimeoutsState    `json:"timeouts"`
}
