// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_pim_eligible_role_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_pim_eligible_role_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPimEligibleRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apera *Resource) Type() string {
	return "azurerm_pim_eligible_role_assignment"
}

// LocalName returns the local name for [Resource].
func (apera *Resource) LocalName() string {
	return apera.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apera *Resource) Configuration() interface{} {
	return apera.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apera *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apera)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apera *Resource) Dependencies() terra.Dependencies {
	return apera.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apera *Resource) LifecycleManagement() *terra.Lifecycle {
	return apera.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apera *Resource) Attributes() azurermPimEligibleRoleAssignmentAttributes {
	return azurermPimEligibleRoleAssignmentAttributes{ref: terra.ReferenceResource(apera)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apera *Resource) ImportState(state io.Reader) error {
	apera.state = &azurermPimEligibleRoleAssignmentState{}
	if err := json.NewDecoder(state).Decode(apera.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apera.Type(), apera.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apera *Resource) State() (*azurermPimEligibleRoleAssignmentState, bool) {
	return apera.state, apera.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apera *Resource) StateMust() *azurermPimEligibleRoleAssignmentState {
	if apera.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apera.Type(), apera.LocalName()))
	}
	return apera.state
}

// Args contains the configurations for azurerm_pim_eligible_role_assignment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Justification: string, optional
	Justification terra.StringValue `hcl:"justification,attr"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleDefinitionId: string, required
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// Ticket: optional
	Ticket *Ticket `hcl:"ticket,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPimEligibleRoleAssignmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("id"))
}

// Justification returns a reference to field justification of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) Justification() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("justification"))
}

// PrincipalId returns a reference to field principal_id of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("principal_id"))
}

// PrincipalType returns a reference to field principal_type of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("principal_type"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("role_definition_id"))
}

// Scope returns a reference to field scope of azurerm_pim_eligible_role_assignment.
func (apera azurermPimEligibleRoleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(apera.ref.Append("scope"))
}

func (apera azurermPimEligibleRoleAssignmentAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](apera.ref.Append("schedule"))
}

func (apera azurermPimEligibleRoleAssignmentAttributes) Ticket() terra.ListValue[TicketAttributes] {
	return terra.ReferenceAsList[TicketAttributes](apera.ref.Append("ticket"))
}

func (apera azurermPimEligibleRoleAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apera.ref.Append("timeouts"))
}

type azurermPimEligibleRoleAssignmentState struct {
	Id               string          `json:"id"`
	Justification    string          `json:"justification"`
	PrincipalId      string          `json:"principal_id"`
	PrincipalType    string          `json:"principal_type"`
	RoleDefinitionId string          `json:"role_definition_id"`
	Scope            string          `json:"scope"`
	Schedule         []ScheduleState `json:"schedule"`
	Ticket           []TicketState   `json:"ticket"`
	Timeouts         *TimeoutsState  `json:"timeouts"`
}
