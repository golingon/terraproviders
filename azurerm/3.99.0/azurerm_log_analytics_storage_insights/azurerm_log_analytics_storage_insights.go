// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_log_analytics_storage_insights

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_log_analytics_storage_insights.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogAnalyticsStorageInsightsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alasi *Resource) Type() string {
	return "azurerm_log_analytics_storage_insights"
}

// LocalName returns the local name for [Resource].
func (alasi *Resource) LocalName() string {
	return alasi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alasi *Resource) Configuration() interface{} {
	return alasi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alasi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alasi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alasi *Resource) Dependencies() terra.Dependencies {
	return alasi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alasi *Resource) LifecycleManagement() *terra.Lifecycle {
	return alasi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alasi *Resource) Attributes() azurermLogAnalyticsStorageInsightsAttributes {
	return azurermLogAnalyticsStorageInsightsAttributes{ref: terra.ReferenceResource(alasi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alasi *Resource) ImportState(state io.Reader) error {
	alasi.state = &azurermLogAnalyticsStorageInsightsState{}
	if err := json.NewDecoder(state).Decode(alasi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alasi.Type(), alasi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alasi *Resource) State() (*azurermLogAnalyticsStorageInsightsState, bool) {
	return alasi.state, alasi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alasi *Resource) StateMust() *azurermLogAnalyticsStorageInsightsState {
	if alasi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alasi.Type(), alasi.LocalName()))
	}
	return alasi.state
}

// Args contains the configurations for azurerm_log_analytics_storage_insights.
type Args struct {
	// BlobContainerNames: set of string, optional
	BlobContainerNames terra.SetValue[terra.StringValue] `hcl:"blob_container_names,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// StorageAccountKey: string, required
	StorageAccountKey terra.StringValue `hcl:"storage_account_key,attr" validate:"required"`
	// TableNames: set of string, optional
	TableNames terra.SetValue[terra.StringValue] `hcl:"table_names,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLogAnalyticsStorageInsightsAttributes struct {
	ref terra.Reference
}

// BlobContainerNames returns a reference to field blob_container_names of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) BlobContainerNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alasi.ref.Append("blob_container_names"))
}

// Id returns a reference to field id of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("resource_group_name"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("storage_account_id"))
}

// StorageAccountKey returns a reference to field storage_account_key of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) StorageAccountKey() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("storage_account_key"))
}

// TableNames returns a reference to field table_names of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) TableNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alasi.ref.Append("table_names"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_log_analytics_storage_insights.
func (alasi azurermLogAnalyticsStorageInsightsAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(alasi.ref.Append("workspace_id"))
}

func (alasi azurermLogAnalyticsStorageInsightsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alasi.ref.Append("timeouts"))
}

type azurermLogAnalyticsStorageInsightsState struct {
	BlobContainerNames []string       `json:"blob_container_names"`
	Id                 string         `json:"id"`
	Name               string         `json:"name"`
	ResourceGroupName  string         `json:"resource_group_name"`
	StorageAccountId   string         `json:"storage_account_id"`
	StorageAccountKey  string         `json:"storage_account_key"`
	TableNames         []string       `json:"table_names"`
	WorkspaceId        string         `json:"workspace_id"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
