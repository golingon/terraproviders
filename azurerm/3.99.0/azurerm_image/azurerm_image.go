// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_image

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_image.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermImageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ai *Resource) Type() string {
	return "azurerm_image"
}

// LocalName returns the local name for [Resource].
func (ai *Resource) LocalName() string {
	return ai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ai *Resource) Configuration() interface{} {
	return ai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ai *Resource) Dependencies() terra.Dependencies {
	return ai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ai *Resource) LifecycleManagement() *terra.Lifecycle {
	return ai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ai *Resource) Attributes() azurermImageAttributes {
	return azurermImageAttributes{ref: terra.ReferenceResource(ai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ai *Resource) ImportState(state io.Reader) error {
	ai.state = &azurermImageState{}
	if err := json.NewDecoder(state).Decode(ai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ai.Type(), ai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ai *Resource) State() (*azurermImageState, bool) {
	return ai.state, ai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ai *Resource) StateMust() *azurermImageState {
	if ai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ai.Type(), ai.LocalName()))
	}
	return ai.state
}

// Args contains the configurations for azurerm_image.
type Args struct {
	// HyperVGeneration: string, optional
	HyperVGeneration terra.StringValue `hcl:"hyper_v_generation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceVirtualMachineId: string, optional
	SourceVirtualMachineId terra.StringValue `hcl:"source_virtual_machine_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneResilient: bool, optional
	ZoneResilient terra.BoolValue `hcl:"zone_resilient,attr"`
	// DataDisk: min=0
	DataDisk []DataDisk `hcl:"data_disk,block" validate:"min=0"`
	// OsDisk: optional
	OsDisk *OsDisk `hcl:"os_disk,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermImageAttributes struct {
	ref terra.Reference
}

// HyperVGeneration returns a reference to field hyper_v_generation of azurerm_image.
func (ai azurermImageAttributes) HyperVGeneration() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("hyper_v_generation"))
}

// Id returns a reference to field id of azurerm_image.
func (ai azurermImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_image.
func (ai azurermImageAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_image.
func (ai azurermImageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_image.
func (ai azurermImageAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("resource_group_name"))
}

// SourceVirtualMachineId returns a reference to field source_virtual_machine_id of azurerm_image.
func (ai azurermImageAttributes) SourceVirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("source_virtual_machine_id"))
}

// Tags returns a reference to field tags of azurerm_image.
func (ai azurermImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ai.ref.Append("tags"))
}

// ZoneResilient returns a reference to field zone_resilient of azurerm_image.
func (ai azurermImageAttributes) ZoneResilient() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("zone_resilient"))
}

func (ai azurermImageAttributes) DataDisk() terra.ListValue[DataDiskAttributes] {
	return terra.ReferenceAsList[DataDiskAttributes](ai.ref.Append("data_disk"))
}

func (ai azurermImageAttributes) OsDisk() terra.ListValue[OsDiskAttributes] {
	return terra.ReferenceAsList[OsDiskAttributes](ai.ref.Append("os_disk"))
}

func (ai azurermImageAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ai.ref.Append("timeouts"))
}

type azurermImageState struct {
	HyperVGeneration       string            `json:"hyper_v_generation"`
	Id                     string            `json:"id"`
	Location               string            `json:"location"`
	Name                   string            `json:"name"`
	ResourceGroupName      string            `json:"resource_group_name"`
	SourceVirtualMachineId string            `json:"source_virtual_machine_id"`
	Tags                   map[string]string `json:"tags"`
	ZoneResilient          bool              `json:"zone_resilient"`
	DataDisk               []DataDiskState   `json:"data_disk"`
	OsDisk                 []OsDiskState     `json:"os_disk"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
