// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_cdn_frontdoor_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Actions struct {
	// ActionsRequestHeaderAction: min=0
	RequestHeaderAction []ActionsRequestHeaderAction `hcl:"request_header_action,block" validate:"min=0"`
	// ActionsResponseHeaderAction: min=0
	ResponseHeaderAction []ActionsResponseHeaderAction `hcl:"response_header_action,block" validate:"min=0"`
	// ActionsRouteConfigurationOverrideAction: optional
	RouteConfigurationOverrideAction *ActionsRouteConfigurationOverrideAction `hcl:"route_configuration_override_action,block"`
	// ActionsUrlRedirectAction: optional
	UrlRedirectAction *ActionsUrlRedirectAction `hcl:"url_redirect_action,block"`
	// ActionsUrlRewriteAction: optional
	UrlRewriteAction *ActionsUrlRewriteAction `hcl:"url_rewrite_action,block"`
}

type ActionsRequestHeaderAction struct {
	// HeaderAction: string, required
	HeaderAction terra.StringValue `hcl:"header_action,attr" validate:"required"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type ActionsResponseHeaderAction struct {
	// HeaderAction: string, required
	HeaderAction terra.StringValue `hcl:"header_action,attr" validate:"required"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type ActionsRouteConfigurationOverrideAction struct {
	// CacheBehavior: string, optional
	CacheBehavior terra.StringValue `hcl:"cache_behavior,attr"`
	// CacheDuration: string, optional
	CacheDuration terra.StringValue `hcl:"cache_duration,attr"`
	// CdnFrontdoorOriginGroupId: string, optional
	CdnFrontdoorOriginGroupId terra.StringValue `hcl:"cdn_frontdoor_origin_group_id,attr"`
	// CompressionEnabled: bool, optional
	CompressionEnabled terra.BoolValue `hcl:"compression_enabled,attr"`
	// ForwardingProtocol: string, optional
	ForwardingProtocol terra.StringValue `hcl:"forwarding_protocol,attr"`
	// QueryStringCachingBehavior: string, optional
	QueryStringCachingBehavior terra.StringValue `hcl:"query_string_caching_behavior,attr"`
	// QueryStringParameters: list of string, optional
	QueryStringParameters terra.ListValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type ActionsUrlRedirectAction struct {
	// DestinationFragment: string, optional
	DestinationFragment terra.StringValue `hcl:"destination_fragment,attr"`
	// DestinationHostname: string, required
	DestinationHostname terra.StringValue `hcl:"destination_hostname,attr" validate:"required"`
	// DestinationPath: string, optional
	DestinationPath terra.StringValue `hcl:"destination_path,attr"`
	// QueryString: string, optional
	QueryString terra.StringValue `hcl:"query_string,attr"`
	// RedirectProtocol: string, optional
	RedirectProtocol terra.StringValue `hcl:"redirect_protocol,attr"`
	// RedirectType: string, required
	RedirectType terra.StringValue `hcl:"redirect_type,attr" validate:"required"`
}

type ActionsUrlRewriteAction struct {
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// PreserveUnmatchedPath: bool, optional
	PreserveUnmatchedPath terra.BoolValue `hcl:"preserve_unmatched_path,attr"`
	// SourcePattern: string, required
	SourcePattern terra.StringValue `hcl:"source_pattern,attr" validate:"required"`
}

type Conditions struct {
	// ConditionsClientPortCondition: min=0
	ClientPortCondition []ConditionsClientPortCondition `hcl:"client_port_condition,block" validate:"min=0"`
	// ConditionsCookiesCondition: min=0
	CookiesCondition []ConditionsCookiesCondition `hcl:"cookies_condition,block" validate:"min=0"`
	// ConditionsHostNameCondition: min=0
	HostNameCondition []ConditionsHostNameCondition `hcl:"host_name_condition,block" validate:"min=0"`
	// ConditionsHttpVersionCondition: min=0
	HttpVersionCondition []ConditionsHttpVersionCondition `hcl:"http_version_condition,block" validate:"min=0"`
	// ConditionsIsDeviceCondition: min=0
	IsDeviceCondition []ConditionsIsDeviceCondition `hcl:"is_device_condition,block" validate:"min=0"`
	// ConditionsPostArgsCondition: min=0
	PostArgsCondition []ConditionsPostArgsCondition `hcl:"post_args_condition,block" validate:"min=0"`
	// ConditionsQueryStringCondition: min=0
	QueryStringCondition []ConditionsQueryStringCondition `hcl:"query_string_condition,block" validate:"min=0"`
	// ConditionsRemoteAddressCondition: min=0
	RemoteAddressCondition []ConditionsRemoteAddressCondition `hcl:"remote_address_condition,block" validate:"min=0"`
	// ConditionsRequestBodyCondition: min=0
	RequestBodyCondition []ConditionsRequestBodyCondition `hcl:"request_body_condition,block" validate:"min=0"`
	// ConditionsRequestHeaderCondition: min=0
	RequestHeaderCondition []ConditionsRequestHeaderCondition `hcl:"request_header_condition,block" validate:"min=0"`
	// ConditionsRequestMethodCondition: min=0
	RequestMethodCondition []ConditionsRequestMethodCondition `hcl:"request_method_condition,block" validate:"min=0"`
	// ConditionsRequestSchemeCondition: min=0
	RequestSchemeCondition []ConditionsRequestSchemeCondition `hcl:"request_scheme_condition,block" validate:"min=0"`
	// ConditionsRequestUriCondition: min=0
	RequestUriCondition []ConditionsRequestUriCondition `hcl:"request_uri_condition,block" validate:"min=0"`
	// ConditionsServerPortCondition: min=0
	ServerPortCondition []ConditionsServerPortCondition `hcl:"server_port_condition,block" validate:"min=0"`
	// ConditionsSocketAddressCondition: min=0
	SocketAddressCondition []ConditionsSocketAddressCondition `hcl:"socket_address_condition,block" validate:"min=0"`
	// ConditionsSslProtocolCondition: min=0
	SslProtocolCondition []ConditionsSslProtocolCondition `hcl:"ssl_protocol_condition,block" validate:"min=0"`
	// ConditionsUrlFileExtensionCondition: min=0
	UrlFileExtensionCondition []ConditionsUrlFileExtensionCondition `hcl:"url_file_extension_condition,block" validate:"min=0"`
	// ConditionsUrlFilenameCondition: min=0
	UrlFilenameCondition []ConditionsUrlFilenameCondition `hcl:"url_filename_condition,block" validate:"min=0"`
	// ConditionsUrlPathCondition: min=0
	UrlPathCondition []ConditionsUrlPathCondition `hcl:"url_path_condition,block" validate:"min=0"`
}

type ConditionsClientPortCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
}

type ConditionsCookiesCondition struct {
	// CookieName: string, required
	CookieName terra.StringValue `hcl:"cookie_name,attr" validate:"required"`
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsHostNameCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsHttpVersionCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsIsDeviceCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsPostArgsCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// PostArgsName: string, required
	PostArgsName terra.StringValue `hcl:"post_args_name,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsQueryStringCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsRemoteAddressCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsRequestBodyCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsRequestHeaderCondition struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsRequestMethodCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsRequestSchemeCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsRequestUriCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsServerPortCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
}

type ConditionsSocketAddressCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsSslProtocolCondition struct {
	// MatchValues: set of string, required
	MatchValues terra.SetValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
}

type ConditionsUrlFileExtensionCondition struct {
	// MatchValues: list of string, required
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr" validate:"required"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsUrlFilenameCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type ConditionsUrlPathCondition struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegateCondition: bool, optional
	NegateCondition terra.BoolValue `hcl:"negate_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) RequestHeaderAction() terra.ListValue[ActionsRequestHeaderActionAttributes] {
	return terra.ReferenceAsList[ActionsRequestHeaderActionAttributes](a.ref.Append("request_header_action"))
}

func (a ActionsAttributes) ResponseHeaderAction() terra.ListValue[ActionsResponseHeaderActionAttributes] {
	return terra.ReferenceAsList[ActionsResponseHeaderActionAttributes](a.ref.Append("response_header_action"))
}

func (a ActionsAttributes) RouteConfigurationOverrideAction() terra.ListValue[ActionsRouteConfigurationOverrideActionAttributes] {
	return terra.ReferenceAsList[ActionsRouteConfigurationOverrideActionAttributes](a.ref.Append("route_configuration_override_action"))
}

func (a ActionsAttributes) UrlRedirectAction() terra.ListValue[ActionsUrlRedirectActionAttributes] {
	return terra.ReferenceAsList[ActionsUrlRedirectActionAttributes](a.ref.Append("url_redirect_action"))
}

func (a ActionsAttributes) UrlRewriteAction() terra.ListValue[ActionsUrlRewriteActionAttributes] {
	return terra.ReferenceAsList[ActionsUrlRewriteActionAttributes](a.ref.Append("url_rewrite_action"))
}

type ActionsRequestHeaderActionAttributes struct {
	ref terra.Reference
}

func (rha ActionsRequestHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return rha.ref, nil
}

func (rha ActionsRequestHeaderActionAttributes) InternalWithRef(ref terra.Reference) ActionsRequestHeaderActionAttributes {
	return ActionsRequestHeaderActionAttributes{ref: ref}
}

func (rha ActionsRequestHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rha.ref.InternalTokens()
}

func (rha ActionsRequestHeaderActionAttributes) HeaderAction() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_action"))
}

func (rha ActionsRequestHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_name"))
}

func (rha ActionsRequestHeaderActionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("value"))
}

type ActionsResponseHeaderActionAttributes struct {
	ref terra.Reference
}

func (rha ActionsResponseHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return rha.ref, nil
}

func (rha ActionsResponseHeaderActionAttributes) InternalWithRef(ref terra.Reference) ActionsResponseHeaderActionAttributes {
	return ActionsResponseHeaderActionAttributes{ref: ref}
}

func (rha ActionsResponseHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rha.ref.InternalTokens()
}

func (rha ActionsResponseHeaderActionAttributes) HeaderAction() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_action"))
}

func (rha ActionsResponseHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("header_name"))
}

func (rha ActionsResponseHeaderActionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rha.ref.Append("value"))
}

type ActionsRouteConfigurationOverrideActionAttributes struct {
	ref terra.Reference
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) InternalRef() (terra.Reference, error) {
	return rcoa.ref, nil
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) InternalWithRef(ref terra.Reference) ActionsRouteConfigurationOverrideActionAttributes {
	return ActionsRouteConfigurationOverrideActionAttributes{ref: ref}
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rcoa.ref.InternalTokens()
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) CacheBehavior() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cache_behavior"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) CacheDuration() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cache_duration"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) CdnFrontdoorOriginGroupId() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("cdn_frontdoor_origin_group_id"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) CompressionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rcoa.ref.Append("compression_enabled"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) ForwardingProtocol() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("forwarding_protocol"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) QueryStringCachingBehavior() terra.StringValue {
	return terra.ReferenceAsString(rcoa.ref.Append("query_string_caching_behavior"))
}

func (rcoa ActionsRouteConfigurationOverrideActionAttributes) QueryStringParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rcoa.ref.Append("query_string_parameters"))
}

type ActionsUrlRedirectActionAttributes struct {
	ref terra.Reference
}

func (ura ActionsUrlRedirectActionAttributes) InternalRef() (terra.Reference, error) {
	return ura.ref, nil
}

func (ura ActionsUrlRedirectActionAttributes) InternalWithRef(ref terra.Reference) ActionsUrlRedirectActionAttributes {
	return ActionsUrlRedirectActionAttributes{ref: ref}
}

func (ura ActionsUrlRedirectActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ura.ref.InternalTokens()
}

func (ura ActionsUrlRedirectActionAttributes) DestinationFragment() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_fragment"))
}

func (ura ActionsUrlRedirectActionAttributes) DestinationHostname() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_hostname"))
}

func (ura ActionsUrlRedirectActionAttributes) DestinationPath() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination_path"))
}

func (ura ActionsUrlRedirectActionAttributes) QueryString() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("query_string"))
}

func (ura ActionsUrlRedirectActionAttributes) RedirectProtocol() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("redirect_protocol"))
}

func (ura ActionsUrlRedirectActionAttributes) RedirectType() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("redirect_type"))
}

type ActionsUrlRewriteActionAttributes struct {
	ref terra.Reference
}

func (ura ActionsUrlRewriteActionAttributes) InternalRef() (terra.Reference, error) {
	return ura.ref, nil
}

func (ura ActionsUrlRewriteActionAttributes) InternalWithRef(ref terra.Reference) ActionsUrlRewriteActionAttributes {
	return ActionsUrlRewriteActionAttributes{ref: ref}
}

func (ura ActionsUrlRewriteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ura.ref.InternalTokens()
}

func (ura ActionsUrlRewriteActionAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("destination"))
}

func (ura ActionsUrlRewriteActionAttributes) PreserveUnmatchedPath() terra.BoolValue {
	return terra.ReferenceAsBool(ura.ref.Append("preserve_unmatched_path"))
}

func (ura ActionsUrlRewriteActionAttributes) SourcePattern() terra.StringValue {
	return terra.ReferenceAsString(ura.ref.Append("source_pattern"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) ClientPortCondition() terra.ListValue[ConditionsClientPortConditionAttributes] {
	return terra.ReferenceAsList[ConditionsClientPortConditionAttributes](c.ref.Append("client_port_condition"))
}

func (c ConditionsAttributes) CookiesCondition() terra.ListValue[ConditionsCookiesConditionAttributes] {
	return terra.ReferenceAsList[ConditionsCookiesConditionAttributes](c.ref.Append("cookies_condition"))
}

func (c ConditionsAttributes) HostNameCondition() terra.ListValue[ConditionsHostNameConditionAttributes] {
	return terra.ReferenceAsList[ConditionsHostNameConditionAttributes](c.ref.Append("host_name_condition"))
}

func (c ConditionsAttributes) HttpVersionCondition() terra.ListValue[ConditionsHttpVersionConditionAttributes] {
	return terra.ReferenceAsList[ConditionsHttpVersionConditionAttributes](c.ref.Append("http_version_condition"))
}

func (c ConditionsAttributes) IsDeviceCondition() terra.ListValue[ConditionsIsDeviceConditionAttributes] {
	return terra.ReferenceAsList[ConditionsIsDeviceConditionAttributes](c.ref.Append("is_device_condition"))
}

func (c ConditionsAttributes) PostArgsCondition() terra.ListValue[ConditionsPostArgsConditionAttributes] {
	return terra.ReferenceAsList[ConditionsPostArgsConditionAttributes](c.ref.Append("post_args_condition"))
}

func (c ConditionsAttributes) QueryStringCondition() terra.ListValue[ConditionsQueryStringConditionAttributes] {
	return terra.ReferenceAsList[ConditionsQueryStringConditionAttributes](c.ref.Append("query_string_condition"))
}

func (c ConditionsAttributes) RemoteAddressCondition() terra.ListValue[ConditionsRemoteAddressConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRemoteAddressConditionAttributes](c.ref.Append("remote_address_condition"))
}

func (c ConditionsAttributes) RequestBodyCondition() terra.ListValue[ConditionsRequestBodyConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRequestBodyConditionAttributes](c.ref.Append("request_body_condition"))
}

func (c ConditionsAttributes) RequestHeaderCondition() terra.ListValue[ConditionsRequestHeaderConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRequestHeaderConditionAttributes](c.ref.Append("request_header_condition"))
}

func (c ConditionsAttributes) RequestMethodCondition() terra.ListValue[ConditionsRequestMethodConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRequestMethodConditionAttributes](c.ref.Append("request_method_condition"))
}

func (c ConditionsAttributes) RequestSchemeCondition() terra.ListValue[ConditionsRequestSchemeConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRequestSchemeConditionAttributes](c.ref.Append("request_scheme_condition"))
}

func (c ConditionsAttributes) RequestUriCondition() terra.ListValue[ConditionsRequestUriConditionAttributes] {
	return terra.ReferenceAsList[ConditionsRequestUriConditionAttributes](c.ref.Append("request_uri_condition"))
}

func (c ConditionsAttributes) ServerPortCondition() terra.ListValue[ConditionsServerPortConditionAttributes] {
	return terra.ReferenceAsList[ConditionsServerPortConditionAttributes](c.ref.Append("server_port_condition"))
}

func (c ConditionsAttributes) SocketAddressCondition() terra.ListValue[ConditionsSocketAddressConditionAttributes] {
	return terra.ReferenceAsList[ConditionsSocketAddressConditionAttributes](c.ref.Append("socket_address_condition"))
}

func (c ConditionsAttributes) SslProtocolCondition() terra.ListValue[ConditionsSslProtocolConditionAttributes] {
	return terra.ReferenceAsList[ConditionsSslProtocolConditionAttributes](c.ref.Append("ssl_protocol_condition"))
}

func (c ConditionsAttributes) UrlFileExtensionCondition() terra.ListValue[ConditionsUrlFileExtensionConditionAttributes] {
	return terra.ReferenceAsList[ConditionsUrlFileExtensionConditionAttributes](c.ref.Append("url_file_extension_condition"))
}

func (c ConditionsAttributes) UrlFilenameCondition() terra.ListValue[ConditionsUrlFilenameConditionAttributes] {
	return terra.ReferenceAsList[ConditionsUrlFilenameConditionAttributes](c.ref.Append("url_filename_condition"))
}

func (c ConditionsAttributes) UrlPathCondition() terra.ListValue[ConditionsUrlPathConditionAttributes] {
	return terra.ReferenceAsList[ConditionsUrlPathConditionAttributes](c.ref.Append("url_path_condition"))
}

type ConditionsClientPortConditionAttributes struct {
	ref terra.Reference
}

func (cpc ConditionsClientPortConditionAttributes) InternalRef() (terra.Reference, error) {
	return cpc.ref, nil
}

func (cpc ConditionsClientPortConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsClientPortConditionAttributes {
	return ConditionsClientPortConditionAttributes{ref: ref}
}

func (cpc ConditionsClientPortConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpc.ref.InternalTokens()
}

func (cpc ConditionsClientPortConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cpc.ref.Append("match_values"))
}

func (cpc ConditionsClientPortConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(cpc.ref.Append("negate_condition"))
}

func (cpc ConditionsClientPortConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(cpc.ref.Append("operator"))
}

type ConditionsCookiesConditionAttributes struct {
	ref terra.Reference
}

func (cc ConditionsCookiesConditionAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ConditionsCookiesConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsCookiesConditionAttributes {
	return ConditionsCookiesConditionAttributes{ref: ref}
}

func (cc ConditionsCookiesConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ConditionsCookiesConditionAttributes) CookieName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("cookie_name"))
}

func (cc ConditionsCookiesConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("match_values"))
}

func (cc ConditionsCookiesConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("negate_condition"))
}

func (cc ConditionsCookiesConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("operator"))
}

func (cc ConditionsCookiesConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("transforms"))
}

type ConditionsHostNameConditionAttributes struct {
	ref terra.Reference
}

func (hnc ConditionsHostNameConditionAttributes) InternalRef() (terra.Reference, error) {
	return hnc.ref, nil
}

func (hnc ConditionsHostNameConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsHostNameConditionAttributes {
	return ConditionsHostNameConditionAttributes{ref: ref}
}

func (hnc ConditionsHostNameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hnc.ref.InternalTokens()
}

func (hnc ConditionsHostNameConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hnc.ref.Append("match_values"))
}

func (hnc ConditionsHostNameConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(hnc.ref.Append("negate_condition"))
}

func (hnc ConditionsHostNameConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(hnc.ref.Append("operator"))
}

func (hnc ConditionsHostNameConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hnc.ref.Append("transforms"))
}

type ConditionsHttpVersionConditionAttributes struct {
	ref terra.Reference
}

func (hvc ConditionsHttpVersionConditionAttributes) InternalRef() (terra.Reference, error) {
	return hvc.ref, nil
}

func (hvc ConditionsHttpVersionConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsHttpVersionConditionAttributes {
	return ConditionsHttpVersionConditionAttributes{ref: ref}
}

func (hvc ConditionsHttpVersionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hvc.ref.InternalTokens()
}

func (hvc ConditionsHttpVersionConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hvc.ref.Append("match_values"))
}

func (hvc ConditionsHttpVersionConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(hvc.ref.Append("negate_condition"))
}

func (hvc ConditionsHttpVersionConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(hvc.ref.Append("operator"))
}

type ConditionsIsDeviceConditionAttributes struct {
	ref terra.Reference
}

func (idc ConditionsIsDeviceConditionAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc ConditionsIsDeviceConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsIsDeviceConditionAttributes {
	return ConditionsIsDeviceConditionAttributes{ref: ref}
}

func (idc ConditionsIsDeviceConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc ConditionsIsDeviceConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](idc.ref.Append("match_values"))
}

func (idc ConditionsIsDeviceConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(idc.ref.Append("negate_condition"))
}

func (idc ConditionsIsDeviceConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("operator"))
}

type ConditionsPostArgsConditionAttributes struct {
	ref terra.Reference
}

func (pac ConditionsPostArgsConditionAttributes) InternalRef() (terra.Reference, error) {
	return pac.ref, nil
}

func (pac ConditionsPostArgsConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsPostArgsConditionAttributes {
	return ConditionsPostArgsConditionAttributes{ref: ref}
}

func (pac ConditionsPostArgsConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pac.ref.InternalTokens()
}

func (pac ConditionsPostArgsConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pac.ref.Append("match_values"))
}

func (pac ConditionsPostArgsConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(pac.ref.Append("negate_condition"))
}

func (pac ConditionsPostArgsConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(pac.ref.Append("operator"))
}

func (pac ConditionsPostArgsConditionAttributes) PostArgsName() terra.StringValue {
	return terra.ReferenceAsString(pac.ref.Append("post_args_name"))
}

func (pac ConditionsPostArgsConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pac.ref.Append("transforms"))
}

type ConditionsQueryStringConditionAttributes struct {
	ref terra.Reference
}

func (qsc ConditionsQueryStringConditionAttributes) InternalRef() (terra.Reference, error) {
	return qsc.ref, nil
}

func (qsc ConditionsQueryStringConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsQueryStringConditionAttributes {
	return ConditionsQueryStringConditionAttributes{ref: ref}
}

func (qsc ConditionsQueryStringConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qsc.ref.InternalTokens()
}

func (qsc ConditionsQueryStringConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](qsc.ref.Append("match_values"))
}

func (qsc ConditionsQueryStringConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(qsc.ref.Append("negate_condition"))
}

func (qsc ConditionsQueryStringConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(qsc.ref.Append("operator"))
}

func (qsc ConditionsQueryStringConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](qsc.ref.Append("transforms"))
}

type ConditionsRemoteAddressConditionAttributes struct {
	ref terra.Reference
}

func (rac ConditionsRemoteAddressConditionAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac ConditionsRemoteAddressConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRemoteAddressConditionAttributes {
	return ConditionsRemoteAddressConditionAttributes{ref: ref}
}

func (rac ConditionsRemoteAddressConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac ConditionsRemoteAddressConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rac.ref.Append("match_values"))
}

func (rac ConditionsRemoteAddressConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rac.ref.Append("negate_condition"))
}

func (rac ConditionsRemoteAddressConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("operator"))
}

type ConditionsRequestBodyConditionAttributes struct {
	ref terra.Reference
}

func (rbc ConditionsRequestBodyConditionAttributes) InternalRef() (terra.Reference, error) {
	return rbc.ref, nil
}

func (rbc ConditionsRequestBodyConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRequestBodyConditionAttributes {
	return ConditionsRequestBodyConditionAttributes{ref: ref}
}

func (rbc ConditionsRequestBodyConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbc.ref.InternalTokens()
}

func (rbc ConditionsRequestBodyConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rbc.ref.Append("match_values"))
}

func (rbc ConditionsRequestBodyConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rbc.ref.Append("negate_condition"))
}

func (rbc ConditionsRequestBodyConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rbc.ref.Append("operator"))
}

func (rbc ConditionsRequestBodyConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rbc.ref.Append("transforms"))
}

type ConditionsRequestHeaderConditionAttributes struct {
	ref terra.Reference
}

func (rhc ConditionsRequestHeaderConditionAttributes) InternalRef() (terra.Reference, error) {
	return rhc.ref, nil
}

func (rhc ConditionsRequestHeaderConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRequestHeaderConditionAttributes {
	return ConditionsRequestHeaderConditionAttributes{ref: ref}
}

func (rhc ConditionsRequestHeaderConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhc.ref.InternalTokens()
}

func (rhc ConditionsRequestHeaderConditionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("header_name"))
}

func (rhc ConditionsRequestHeaderConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rhc.ref.Append("match_values"))
}

func (rhc ConditionsRequestHeaderConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rhc.ref.Append("negate_condition"))
}

func (rhc ConditionsRequestHeaderConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rhc.ref.Append("operator"))
}

func (rhc ConditionsRequestHeaderConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rhc.ref.Append("transforms"))
}

type ConditionsRequestMethodConditionAttributes struct {
	ref terra.Reference
}

func (rmc ConditionsRequestMethodConditionAttributes) InternalRef() (terra.Reference, error) {
	return rmc.ref, nil
}

func (rmc ConditionsRequestMethodConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRequestMethodConditionAttributes {
	return ConditionsRequestMethodConditionAttributes{ref: ref}
}

func (rmc ConditionsRequestMethodConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmc.ref.InternalTokens()
}

func (rmc ConditionsRequestMethodConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rmc.ref.Append("match_values"))
}

func (rmc ConditionsRequestMethodConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rmc.ref.Append("negate_condition"))
}

func (rmc ConditionsRequestMethodConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rmc.ref.Append("operator"))
}

type ConditionsRequestSchemeConditionAttributes struct {
	ref terra.Reference
}

func (rsc ConditionsRequestSchemeConditionAttributes) InternalRef() (terra.Reference, error) {
	return rsc.ref, nil
}

func (rsc ConditionsRequestSchemeConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRequestSchemeConditionAttributes {
	return ConditionsRequestSchemeConditionAttributes{ref: ref}
}

func (rsc ConditionsRequestSchemeConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rsc.ref.InternalTokens()
}

func (rsc ConditionsRequestSchemeConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rsc.ref.Append("match_values"))
}

func (rsc ConditionsRequestSchemeConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(rsc.ref.Append("negate_condition"))
}

func (rsc ConditionsRequestSchemeConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(rsc.ref.Append("operator"))
}

type ConditionsRequestUriConditionAttributes struct {
	ref terra.Reference
}

func (ruc ConditionsRequestUriConditionAttributes) InternalRef() (terra.Reference, error) {
	return ruc.ref, nil
}

func (ruc ConditionsRequestUriConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsRequestUriConditionAttributes {
	return ConditionsRequestUriConditionAttributes{ref: ref}
}

func (ruc ConditionsRequestUriConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ruc.ref.InternalTokens()
}

func (ruc ConditionsRequestUriConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ruc.ref.Append("match_values"))
}

func (ruc ConditionsRequestUriConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ruc.ref.Append("negate_condition"))
}

func (ruc ConditionsRequestUriConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ruc.ref.Append("operator"))
}

func (ruc ConditionsRequestUriConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ruc.ref.Append("transforms"))
}

type ConditionsServerPortConditionAttributes struct {
	ref terra.Reference
}

func (spc ConditionsServerPortConditionAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc ConditionsServerPortConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsServerPortConditionAttributes {
	return ConditionsServerPortConditionAttributes{ref: ref}
}

func (spc ConditionsServerPortConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc ConditionsServerPortConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](spc.ref.Append("match_values"))
}

func (spc ConditionsServerPortConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(spc.ref.Append("negate_condition"))
}

func (spc ConditionsServerPortConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("operator"))
}

type ConditionsSocketAddressConditionAttributes struct {
	ref terra.Reference
}

func (sac ConditionsSocketAddressConditionAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac ConditionsSocketAddressConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsSocketAddressConditionAttributes {
	return ConditionsSocketAddressConditionAttributes{ref: ref}
}

func (sac ConditionsSocketAddressConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac ConditionsSocketAddressConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sac.ref.Append("match_values"))
}

func (sac ConditionsSocketAddressConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(sac.ref.Append("negate_condition"))
}

func (sac ConditionsSocketAddressConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("operator"))
}

type ConditionsSslProtocolConditionAttributes struct {
	ref terra.Reference
}

func (spc ConditionsSslProtocolConditionAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc ConditionsSslProtocolConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsSslProtocolConditionAttributes {
	return ConditionsSslProtocolConditionAttributes{ref: ref}
}

func (spc ConditionsSslProtocolConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc ConditionsSslProtocolConditionAttributes) MatchValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](spc.ref.Append("match_values"))
}

func (spc ConditionsSslProtocolConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(spc.ref.Append("negate_condition"))
}

func (spc ConditionsSslProtocolConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("operator"))
}

type ConditionsUrlFileExtensionConditionAttributes struct {
	ref terra.Reference
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) InternalRef() (terra.Reference, error) {
	return ufec.ref, nil
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsUrlFileExtensionConditionAttributes {
	return ConditionsUrlFileExtensionConditionAttributes{ref: ref}
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ufec.ref.InternalTokens()
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ufec.ref.Append("match_values"))
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ufec.ref.Append("negate_condition"))
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ufec.ref.Append("operator"))
}

func (ufec ConditionsUrlFileExtensionConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ufec.ref.Append("transforms"))
}

type ConditionsUrlFilenameConditionAttributes struct {
	ref terra.Reference
}

func (ufc ConditionsUrlFilenameConditionAttributes) InternalRef() (terra.Reference, error) {
	return ufc.ref, nil
}

func (ufc ConditionsUrlFilenameConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsUrlFilenameConditionAttributes {
	return ConditionsUrlFilenameConditionAttributes{ref: ref}
}

func (ufc ConditionsUrlFilenameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ufc.ref.InternalTokens()
}

func (ufc ConditionsUrlFilenameConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ufc.ref.Append("match_values"))
}

func (ufc ConditionsUrlFilenameConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(ufc.ref.Append("negate_condition"))
}

func (ufc ConditionsUrlFilenameConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ufc.ref.Append("operator"))
}

func (ufc ConditionsUrlFilenameConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ufc.ref.Append("transforms"))
}

type ConditionsUrlPathConditionAttributes struct {
	ref terra.Reference
}

func (upc ConditionsUrlPathConditionAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc ConditionsUrlPathConditionAttributes) InternalWithRef(ref terra.Reference) ConditionsUrlPathConditionAttributes {
	return ConditionsUrlPathConditionAttributes{ref: ref}
}

func (upc ConditionsUrlPathConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc ConditionsUrlPathConditionAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](upc.ref.Append("match_values"))
}

func (upc ConditionsUrlPathConditionAttributes) NegateCondition() terra.BoolValue {
	return terra.ReferenceAsBool(upc.ref.Append("negate_condition"))
}

func (upc ConditionsUrlPathConditionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("operator"))
}

func (upc ConditionsUrlPathConditionAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](upc.ref.Append("transforms"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionsState struct {
	RequestHeaderAction              []ActionsRequestHeaderActionState              `json:"request_header_action"`
	ResponseHeaderAction             []ActionsResponseHeaderActionState             `json:"response_header_action"`
	RouteConfigurationOverrideAction []ActionsRouteConfigurationOverrideActionState `json:"route_configuration_override_action"`
	UrlRedirectAction                []ActionsUrlRedirectActionState                `json:"url_redirect_action"`
	UrlRewriteAction                 []ActionsUrlRewriteActionState                 `json:"url_rewrite_action"`
}

type ActionsRequestHeaderActionState struct {
	HeaderAction string `json:"header_action"`
	HeaderName   string `json:"header_name"`
	Value        string `json:"value"`
}

type ActionsResponseHeaderActionState struct {
	HeaderAction string `json:"header_action"`
	HeaderName   string `json:"header_name"`
	Value        string `json:"value"`
}

type ActionsRouteConfigurationOverrideActionState struct {
	CacheBehavior              string   `json:"cache_behavior"`
	CacheDuration              string   `json:"cache_duration"`
	CdnFrontdoorOriginGroupId  string   `json:"cdn_frontdoor_origin_group_id"`
	CompressionEnabled         bool     `json:"compression_enabled"`
	ForwardingProtocol         string   `json:"forwarding_protocol"`
	QueryStringCachingBehavior string   `json:"query_string_caching_behavior"`
	QueryStringParameters      []string `json:"query_string_parameters"`
}

type ActionsUrlRedirectActionState struct {
	DestinationFragment string `json:"destination_fragment"`
	DestinationHostname string `json:"destination_hostname"`
	DestinationPath     string `json:"destination_path"`
	QueryString         string `json:"query_string"`
	RedirectProtocol    string `json:"redirect_protocol"`
	RedirectType        string `json:"redirect_type"`
}

type ActionsUrlRewriteActionState struct {
	Destination           string `json:"destination"`
	PreserveUnmatchedPath bool   `json:"preserve_unmatched_path"`
	SourcePattern         string `json:"source_pattern"`
}

type ConditionsState struct {
	ClientPortCondition       []ConditionsClientPortConditionState       `json:"client_port_condition"`
	CookiesCondition          []ConditionsCookiesConditionState          `json:"cookies_condition"`
	HostNameCondition         []ConditionsHostNameConditionState         `json:"host_name_condition"`
	HttpVersionCondition      []ConditionsHttpVersionConditionState      `json:"http_version_condition"`
	IsDeviceCondition         []ConditionsIsDeviceConditionState         `json:"is_device_condition"`
	PostArgsCondition         []ConditionsPostArgsConditionState         `json:"post_args_condition"`
	QueryStringCondition      []ConditionsQueryStringConditionState      `json:"query_string_condition"`
	RemoteAddressCondition    []ConditionsRemoteAddressConditionState    `json:"remote_address_condition"`
	RequestBodyCondition      []ConditionsRequestBodyConditionState      `json:"request_body_condition"`
	RequestHeaderCondition    []ConditionsRequestHeaderConditionState    `json:"request_header_condition"`
	RequestMethodCondition    []ConditionsRequestMethodConditionState    `json:"request_method_condition"`
	RequestSchemeCondition    []ConditionsRequestSchemeConditionState    `json:"request_scheme_condition"`
	RequestUriCondition       []ConditionsRequestUriConditionState       `json:"request_uri_condition"`
	ServerPortCondition       []ConditionsServerPortConditionState       `json:"server_port_condition"`
	SocketAddressCondition    []ConditionsSocketAddressConditionState    `json:"socket_address_condition"`
	SslProtocolCondition      []ConditionsSslProtocolConditionState      `json:"ssl_protocol_condition"`
	UrlFileExtensionCondition []ConditionsUrlFileExtensionConditionState `json:"url_file_extension_condition"`
	UrlFilenameCondition      []ConditionsUrlFilenameConditionState      `json:"url_filename_condition"`
	UrlPathCondition          []ConditionsUrlPathConditionState          `json:"url_path_condition"`
}

type ConditionsClientPortConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsCookiesConditionState struct {
	CookieName      string   `json:"cookie_name"`
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsHostNameConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsHttpVersionConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsIsDeviceConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsPostArgsConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	PostArgsName    string   `json:"post_args_name"`
	Transforms      []string `json:"transforms"`
}

type ConditionsQueryStringConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsRemoteAddressConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsRequestBodyConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsRequestHeaderConditionState struct {
	HeaderName      string   `json:"header_name"`
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsRequestMethodConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsRequestSchemeConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsRequestUriConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsServerPortConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsSocketAddressConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsSslProtocolConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
}

type ConditionsUrlFileExtensionConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsUrlFilenameConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type ConditionsUrlPathConditionState struct {
	MatchValues     []string `json:"match_values"`
	NegateCondition bool     `json:"negate_condition"`
	Operator        string   `json:"operator"`
	Transforms      []string `json:"transforms"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
