// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_api_management

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_api_management.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermApiManagementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aam *Resource) Type() string {
	return "azurerm_api_management"
}

// LocalName returns the local name for [Resource].
func (aam *Resource) LocalName() string {
	return aam.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aam *Resource) Configuration() interface{} {
	return aam.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aam *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aam)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aam *Resource) Dependencies() terra.Dependencies {
	return aam.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aam *Resource) LifecycleManagement() *terra.Lifecycle {
	return aam.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aam *Resource) Attributes() azurermApiManagementAttributes {
	return azurermApiManagementAttributes{ref: terra.ReferenceResource(aam)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aam *Resource) ImportState(state io.Reader) error {
	aam.state = &azurermApiManagementState{}
	if err := json.NewDecoder(state).Decode(aam.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aam.Type(), aam.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aam *Resource) State() (*azurermApiManagementState, bool) {
	return aam.state, aam.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aam *Resource) StateMust() *azurermApiManagementState {
	if aam.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aam.Type(), aam.LocalName()))
	}
	return aam.state
}

// Args contains the configurations for azurerm_api_management.
type Args struct {
	// ClientCertificateEnabled: bool, optional
	ClientCertificateEnabled terra.BoolValue `hcl:"client_certificate_enabled,attr"`
	// GatewayDisabled: bool, optional
	GatewayDisabled terra.BoolValue `hcl:"gateway_disabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MinApiVersion: string, optional
	MinApiVersion terra.StringValue `hcl:"min_api_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationSenderEmail: string, optional
	NotificationSenderEmail terra.StringValue `hcl:"notification_sender_email,attr"`
	// PublicIpAddressId: string, optional
	PublicIpAddressId terra.StringValue `hcl:"public_ip_address_id,attr"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// PublisherEmail: string, required
	PublisherEmail terra.StringValue `hcl:"publisher_email,attr" validate:"required"`
	// PublisherName: string, required
	PublisherName terra.StringValue `hcl:"publisher_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VirtualNetworkType: string, optional
	VirtualNetworkType terra.StringValue `hcl:"virtual_network_type,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// Policy: min=0
	Policy []Policy `hcl:"policy,block" validate:"min=0"`
	// AdditionalLocation: min=0
	AdditionalLocation []AdditionalLocation `hcl:"additional_location,block" validate:"min=0"`
	// Certificate: min=0,max=10
	Certificate []Certificate `hcl:"certificate,block" validate:"min=0,max=10"`
	// Delegation: optional
	Delegation *Delegation `hcl:"delegation,block"`
	// HostnameConfiguration: optional
	HostnameConfiguration *HostnameConfiguration `hcl:"hostname_configuration,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Protocols: optional
	Protocols *Protocols `hcl:"protocols,block"`
	// Security: optional
	Security *Security `hcl:"security,block"`
	// SignIn: optional
	SignIn *SignIn `hcl:"sign_in,block"`
	// SignUp: optional
	SignUp *SignUp `hcl:"sign_up,block"`
	// TenantAccess: optional
	TenantAccess *TenantAccess `hcl:"tenant_access,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VirtualNetworkConfiguration: optional
	VirtualNetworkConfiguration *VirtualNetworkConfiguration `hcl:"virtual_network_configuration,block"`
}

type azurermApiManagementAttributes struct {
	ref terra.Reference
}

// ClientCertificateEnabled returns a reference to field client_certificate_enabled of azurerm_api_management.
func (aam azurermApiManagementAttributes) ClientCertificateEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aam.ref.Append("client_certificate_enabled"))
}

// DeveloperPortalUrl returns a reference to field developer_portal_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) DeveloperPortalUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("developer_portal_url"))
}

// GatewayDisabled returns a reference to field gateway_disabled of azurerm_api_management.
func (aam azurermApiManagementAttributes) GatewayDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(aam.ref.Append("gateway_disabled"))
}

// GatewayRegionalUrl returns a reference to field gateway_regional_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) GatewayRegionalUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("gateway_regional_url"))
}

// GatewayUrl returns a reference to field gateway_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) GatewayUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("gateway_url"))
}

// Id returns a reference to field id of azurerm_api_management.
func (aam azurermApiManagementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_api_management.
func (aam azurermApiManagementAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("location"))
}

// ManagementApiUrl returns a reference to field management_api_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) ManagementApiUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("management_api_url"))
}

// MinApiVersion returns a reference to field min_api_version of azurerm_api_management.
func (aam azurermApiManagementAttributes) MinApiVersion() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("min_api_version"))
}

// Name returns a reference to field name of azurerm_api_management.
func (aam azurermApiManagementAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("name"))
}

// NotificationSenderEmail returns a reference to field notification_sender_email of azurerm_api_management.
func (aam azurermApiManagementAttributes) NotificationSenderEmail() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("notification_sender_email"))
}

// PortalUrl returns a reference to field portal_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) PortalUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("portal_url"))
}

// PrivateIpAddresses returns a reference to field private_ip_addresses of azurerm_api_management.
func (aam azurermApiManagementAttributes) PrivateIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aam.ref.Append("private_ip_addresses"))
}

// PublicIpAddressId returns a reference to field public_ip_address_id of azurerm_api_management.
func (aam azurermApiManagementAttributes) PublicIpAddressId() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("public_ip_address_id"))
}

// PublicIpAddresses returns a reference to field public_ip_addresses of azurerm_api_management.
func (aam azurermApiManagementAttributes) PublicIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aam.ref.Append("public_ip_addresses"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_api_management.
func (aam azurermApiManagementAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aam.ref.Append("public_network_access_enabled"))
}

// PublisherEmail returns a reference to field publisher_email of azurerm_api_management.
func (aam azurermApiManagementAttributes) PublisherEmail() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("publisher_email"))
}

// PublisherName returns a reference to field publisher_name of azurerm_api_management.
func (aam azurermApiManagementAttributes) PublisherName() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("publisher_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_api_management.
func (aam azurermApiManagementAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("resource_group_name"))
}

// ScmUrl returns a reference to field scm_url of azurerm_api_management.
func (aam azurermApiManagementAttributes) ScmUrl() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("scm_url"))
}

// SkuName returns a reference to field sku_name of azurerm_api_management.
func (aam azurermApiManagementAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("sku_name"))
}

// Tags returns a reference to field tags of azurerm_api_management.
func (aam azurermApiManagementAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aam.ref.Append("tags"))
}

// VirtualNetworkType returns a reference to field virtual_network_type of azurerm_api_management.
func (aam azurermApiManagementAttributes) VirtualNetworkType() terra.StringValue {
	return terra.ReferenceAsString(aam.ref.Append("virtual_network_type"))
}

// Zones returns a reference to field zones of azurerm_api_management.
func (aam azurermApiManagementAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aam.ref.Append("zones"))
}

func (aam azurermApiManagementAttributes) Policy() terra.ListValue[PolicyAttributes] {
	return terra.ReferenceAsList[PolicyAttributes](aam.ref.Append("policy"))
}

func (aam azurermApiManagementAttributes) AdditionalLocation() terra.ListValue[AdditionalLocationAttributes] {
	return terra.ReferenceAsList[AdditionalLocationAttributes](aam.ref.Append("additional_location"))
}

func (aam azurermApiManagementAttributes) Certificate() terra.ListValue[CertificateAttributes] {
	return terra.ReferenceAsList[CertificateAttributes](aam.ref.Append("certificate"))
}

func (aam azurermApiManagementAttributes) Delegation() terra.ListValue[DelegationAttributes] {
	return terra.ReferenceAsList[DelegationAttributes](aam.ref.Append("delegation"))
}

func (aam azurermApiManagementAttributes) HostnameConfiguration() terra.ListValue[HostnameConfigurationAttributes] {
	return terra.ReferenceAsList[HostnameConfigurationAttributes](aam.ref.Append("hostname_configuration"))
}

func (aam azurermApiManagementAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aam.ref.Append("identity"))
}

func (aam azurermApiManagementAttributes) Protocols() terra.ListValue[ProtocolsAttributes] {
	return terra.ReferenceAsList[ProtocolsAttributes](aam.ref.Append("protocols"))
}

func (aam azurermApiManagementAttributes) Security() terra.ListValue[SecurityAttributes] {
	return terra.ReferenceAsList[SecurityAttributes](aam.ref.Append("security"))
}

func (aam azurermApiManagementAttributes) SignIn() terra.ListValue[SignInAttributes] {
	return terra.ReferenceAsList[SignInAttributes](aam.ref.Append("sign_in"))
}

func (aam azurermApiManagementAttributes) SignUp() terra.ListValue[SignUpAttributes] {
	return terra.ReferenceAsList[SignUpAttributes](aam.ref.Append("sign_up"))
}

func (aam azurermApiManagementAttributes) TenantAccess() terra.ListValue[TenantAccessAttributes] {
	return terra.ReferenceAsList[TenantAccessAttributes](aam.ref.Append("tenant_access"))
}

func (aam azurermApiManagementAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aam.ref.Append("timeouts"))
}

func (aam azurermApiManagementAttributes) VirtualNetworkConfiguration() terra.ListValue[VirtualNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[VirtualNetworkConfigurationAttributes](aam.ref.Append("virtual_network_configuration"))
}

type azurermApiManagementState struct {
	ClientCertificateEnabled    bool                               `json:"client_certificate_enabled"`
	DeveloperPortalUrl          string                             `json:"developer_portal_url"`
	GatewayDisabled             bool                               `json:"gateway_disabled"`
	GatewayRegionalUrl          string                             `json:"gateway_regional_url"`
	GatewayUrl                  string                             `json:"gateway_url"`
	Id                          string                             `json:"id"`
	Location                    string                             `json:"location"`
	ManagementApiUrl            string                             `json:"management_api_url"`
	MinApiVersion               string                             `json:"min_api_version"`
	Name                        string                             `json:"name"`
	NotificationSenderEmail     string                             `json:"notification_sender_email"`
	PortalUrl                   string                             `json:"portal_url"`
	PrivateIpAddresses          []string                           `json:"private_ip_addresses"`
	PublicIpAddressId           string                             `json:"public_ip_address_id"`
	PublicIpAddresses           []string                           `json:"public_ip_addresses"`
	PublicNetworkAccessEnabled  bool                               `json:"public_network_access_enabled"`
	PublisherEmail              string                             `json:"publisher_email"`
	PublisherName               string                             `json:"publisher_name"`
	ResourceGroupName           string                             `json:"resource_group_name"`
	ScmUrl                      string                             `json:"scm_url"`
	SkuName                     string                             `json:"sku_name"`
	Tags                        map[string]string                  `json:"tags"`
	VirtualNetworkType          string                             `json:"virtual_network_type"`
	Zones                       []string                           `json:"zones"`
	Policy                      []PolicyState                      `json:"policy"`
	AdditionalLocation          []AdditionalLocationState          `json:"additional_location"`
	Certificate                 []CertificateState                 `json:"certificate"`
	Delegation                  []DelegationState                  `json:"delegation"`
	HostnameConfiguration       []HostnameConfigurationState       `json:"hostname_configuration"`
	Identity                    []IdentityState                    `json:"identity"`
	Protocols                   []ProtocolsState                   `json:"protocols"`
	Security                    []SecurityState                    `json:"security"`
	SignIn                      []SignInState                      `json:"sign_in"`
	SignUp                      []SignUpState                      `json:"sign_up"`
	TenantAccess                []TenantAccessState                `json:"tenant_access"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
	VirtualNetworkConfiguration []VirtualNetworkConfigurationState `json:"virtual_network_configuration"`
}
