// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_subscription_policy_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_subscription_policy_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSubscriptionPolicyAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspa *Resource) Type() string {
	return "azurerm_subscription_policy_assignment"
}

// LocalName returns the local name for [Resource].
func (aspa *Resource) LocalName() string {
	return aspa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspa *Resource) Configuration() interface{} {
	return aspa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspa *Resource) Dependencies() terra.Dependencies {
	return aspa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspa *Resource) Attributes() azurermSubscriptionPolicyAssignmentAttributes {
	return azurermSubscriptionPolicyAssignmentAttributes{ref: terra.ReferenceResource(aspa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspa *Resource) ImportState(state io.Reader) error {
	aspa.state = &azurermSubscriptionPolicyAssignmentState{}
	if err := json.NewDecoder(state).Decode(aspa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspa.Type(), aspa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspa *Resource) State() (*azurermSubscriptionPolicyAssignmentState, bool) {
	return aspa.state, aspa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspa *Resource) StateMust() *azurermSubscriptionPolicyAssignmentState {
	if aspa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspa.Type(), aspa.LocalName()))
	}
	return aspa.state
}

// Args contains the configurations for azurerm_subscription_policy_assignment.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Enforce: bool, optional
	Enforce terra.BoolValue `hcl:"enforce,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Metadata: string, optional
	Metadata terra.StringValue `hcl:"metadata,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotScopes: list of string, optional
	NotScopes terra.ListValue[terra.StringValue] `hcl:"not_scopes,attr"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// PolicyDefinitionId: string, required
	PolicyDefinitionId terra.StringValue `hcl:"policy_definition_id,attr" validate:"required"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// NonComplianceMessage: min=0
	NonComplianceMessage []NonComplianceMessage `hcl:"non_compliance_message,block" validate:"min=0"`
	// Overrides: min=0
	Overrides []Overrides `hcl:"overrides,block" validate:"min=0"`
	// ResourceSelectors: min=0
	ResourceSelectors []ResourceSelectors `hcl:"resource_selectors,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSubscriptionPolicyAssignmentAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("display_name"))
}

// Enforce returns a reference to field enforce of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Enforce() terra.BoolValue {
	return terra.ReferenceAsBool(aspa.ref.Append("enforce"))
}

// Id returns a reference to field id of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("location"))
}

// Metadata returns a reference to field metadata of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Metadata() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("metadata"))
}

// Name returns a reference to field name of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("name"))
}

// NotScopes returns a reference to field not_scopes of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) NotScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aspa.ref.Append("not_scopes"))
}

// Parameters returns a reference to field parameters of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("parameters"))
}

// PolicyDefinitionId returns a reference to field policy_definition_id of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) PolicyDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("policy_definition_id"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_subscription_policy_assignment.
func (aspa azurermSubscriptionPolicyAssignmentAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("subscription_id"))
}

func (aspa azurermSubscriptionPolicyAssignmentAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](aspa.ref.Append("identity"))
}

func (aspa azurermSubscriptionPolicyAssignmentAttributes) NonComplianceMessage() terra.ListValue[NonComplianceMessageAttributes] {
	return terra.ReferenceAsList[NonComplianceMessageAttributes](aspa.ref.Append("non_compliance_message"))
}

func (aspa azurermSubscriptionPolicyAssignmentAttributes) Overrides() terra.ListValue[OverridesAttributes] {
	return terra.ReferenceAsList[OverridesAttributes](aspa.ref.Append("overrides"))
}

func (aspa azurermSubscriptionPolicyAssignmentAttributes) ResourceSelectors() terra.ListValue[ResourceSelectorsAttributes] {
	return terra.ReferenceAsList[ResourceSelectorsAttributes](aspa.ref.Append("resource_selectors"))
}

func (aspa azurermSubscriptionPolicyAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aspa.ref.Append("timeouts"))
}

type azurermSubscriptionPolicyAssignmentState struct {
	Description          string                      `json:"description"`
	DisplayName          string                      `json:"display_name"`
	Enforce              bool                        `json:"enforce"`
	Id                   string                      `json:"id"`
	Location             string                      `json:"location"`
	Metadata             string                      `json:"metadata"`
	Name                 string                      `json:"name"`
	NotScopes            []string                    `json:"not_scopes"`
	Parameters           string                      `json:"parameters"`
	PolicyDefinitionId   string                      `json:"policy_definition_id"`
	SubscriptionId       string                      `json:"subscription_id"`
	Identity             []IdentityState             `json:"identity"`
	NonComplianceMessage []NonComplianceMessageState `json:"non_compliance_message"`
	Overrides            []OverridesState            `json:"overrides"`
	ResourceSelectors    []ResourceSelectorsState    `json:"resource_selectors"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
