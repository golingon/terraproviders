// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_sql_pool_vulnerability_assessment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RecurringScans struct {
	// EmailSubscriptionAdminsEnabled: bool, optional
	EmailSubscriptionAdminsEnabled terra.BoolValue `hcl:"email_subscription_admins_enabled,attr"`
	// Emails: list of string, optional
	Emails terra.ListValue[terra.StringValue] `hcl:"emails,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RecurringScansAttributes struct {
	ref terra.Reference
}

func (rs RecurringScansAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecurringScansAttributes) InternalWithRef(ref terra.Reference) RecurringScansAttributes {
	return RecurringScansAttributes{ref: ref}
}

func (rs RecurringScansAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecurringScansAttributes) EmailSubscriptionAdminsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("email_subscription_admins_enabled"))
}

func (rs RecurringScansAttributes) Emails() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("emails"))
}

func (rs RecurringScansAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RecurringScansState struct {
	EmailSubscriptionAdminsEnabled bool     `json:"email_subscription_admins_enabled"`
	Emails                         []string `json:"emails"`
	Enabled                        bool     `json:"enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
