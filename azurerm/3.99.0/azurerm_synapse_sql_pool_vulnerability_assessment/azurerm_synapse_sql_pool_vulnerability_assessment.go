// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_sql_pool_vulnerability_assessment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_sql_pool_vulnerability_assessment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseSqlPoolVulnerabilityAssessmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asspva *Resource) Type() string {
	return "azurerm_synapse_sql_pool_vulnerability_assessment"
}

// LocalName returns the local name for [Resource].
func (asspva *Resource) LocalName() string {
	return asspva.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asspva *Resource) Configuration() interface{} {
	return asspva.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asspva *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asspva)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asspva *Resource) Dependencies() terra.Dependencies {
	return asspva.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asspva *Resource) LifecycleManagement() *terra.Lifecycle {
	return asspva.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asspva *Resource) Attributes() azurermSynapseSqlPoolVulnerabilityAssessmentAttributes {
	return azurermSynapseSqlPoolVulnerabilityAssessmentAttributes{ref: terra.ReferenceResource(asspva)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asspva *Resource) ImportState(state io.Reader) error {
	asspva.state = &azurermSynapseSqlPoolVulnerabilityAssessmentState{}
	if err := json.NewDecoder(state).Decode(asspva.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asspva.Type(), asspva.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asspva *Resource) State() (*azurermSynapseSqlPoolVulnerabilityAssessmentState, bool) {
	return asspva.state, asspva.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asspva *Resource) StateMust() *azurermSynapseSqlPoolVulnerabilityAssessmentState {
	if asspva.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asspva.Type(), asspva.LocalName()))
	}
	return asspva.state
}

// Args contains the configurations for azurerm_synapse_sql_pool_vulnerability_assessment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SqlPoolSecurityAlertPolicyId: string, required
	SqlPoolSecurityAlertPolicyId terra.StringValue `hcl:"sql_pool_security_alert_policy_id,attr" validate:"required"`
	// StorageAccountAccessKey: string, optional
	StorageAccountAccessKey terra.StringValue `hcl:"storage_account_access_key,attr"`
	// StorageContainerPath: string, required
	StorageContainerPath terra.StringValue `hcl:"storage_container_path,attr" validate:"required"`
	// StorageContainerSasKey: string, optional
	StorageContainerSasKey terra.StringValue `hcl:"storage_container_sas_key,attr"`
	// RecurringScans: optional
	RecurringScans *RecurringScans `hcl:"recurring_scans,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseSqlPoolVulnerabilityAssessmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_synapse_sql_pool_vulnerability_assessment.
func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asspva.ref.Append("id"))
}

// SqlPoolSecurityAlertPolicyId returns a reference to field sql_pool_security_alert_policy_id of azurerm_synapse_sql_pool_vulnerability_assessment.
func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) SqlPoolSecurityAlertPolicyId() terra.StringValue {
	return terra.ReferenceAsString(asspva.ref.Append("sql_pool_security_alert_policy_id"))
}

// StorageAccountAccessKey returns a reference to field storage_account_access_key of azurerm_synapse_sql_pool_vulnerability_assessment.
func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) StorageAccountAccessKey() terra.StringValue {
	return terra.ReferenceAsString(asspva.ref.Append("storage_account_access_key"))
}

// StorageContainerPath returns a reference to field storage_container_path of azurerm_synapse_sql_pool_vulnerability_assessment.
func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) StorageContainerPath() terra.StringValue {
	return terra.ReferenceAsString(asspva.ref.Append("storage_container_path"))
}

// StorageContainerSasKey returns a reference to field storage_container_sas_key of azurerm_synapse_sql_pool_vulnerability_assessment.
func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) StorageContainerSasKey() terra.StringValue {
	return terra.ReferenceAsString(asspva.ref.Append("storage_container_sas_key"))
}

func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) RecurringScans() terra.ListValue[RecurringScansAttributes] {
	return terra.ReferenceAsList[RecurringScansAttributes](asspva.ref.Append("recurring_scans"))
}

func (asspva azurermSynapseSqlPoolVulnerabilityAssessmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asspva.ref.Append("timeouts"))
}

type azurermSynapseSqlPoolVulnerabilityAssessmentState struct {
	Id                           string                `json:"id"`
	SqlPoolSecurityAlertPolicyId string                `json:"sql_pool_security_alert_policy_id"`
	StorageAccountAccessKey      string                `json:"storage_account_access_key"`
	StorageContainerPath         string                `json:"storage_container_path"`
	StorageContainerSasKey       string                `json:"storage_container_sas_key"`
	RecurringScans               []RecurringScansState `json:"recurring_scans"`
	Timeouts                     *TimeoutsState        `json:"timeouts"`
}
