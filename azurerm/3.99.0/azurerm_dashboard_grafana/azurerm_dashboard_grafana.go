// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dashboard_grafana

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_dashboard_grafana.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDashboardGrafanaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adg *Resource) Type() string {
	return "azurerm_dashboard_grafana"
}

// LocalName returns the local name for [Resource].
func (adg *Resource) LocalName() string {
	return adg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adg *Resource) Configuration() interface{} {
	return adg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adg *Resource) Dependencies() terra.Dependencies {
	return adg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adg *Resource) Attributes() azurermDashboardGrafanaAttributes {
	return azurermDashboardGrafanaAttributes{ref: terra.ReferenceResource(adg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adg *Resource) ImportState(state io.Reader) error {
	adg.state = &azurermDashboardGrafanaState{}
	if err := json.NewDecoder(state).Decode(adg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adg.Type(), adg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adg *Resource) State() (*azurermDashboardGrafanaState, bool) {
	return adg.state, adg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adg *Resource) StateMust() *azurermDashboardGrafanaState {
	if adg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adg.Type(), adg.LocalName()))
	}
	return adg.state
}

// Args contains the configurations for azurerm_dashboard_grafana.
type Args struct {
	// ApiKeyEnabled: bool, optional
	ApiKeyEnabled terra.BoolValue `hcl:"api_key_enabled,attr"`
	// AutoGeneratedDomainNameLabelScope: string, optional
	AutoGeneratedDomainNameLabelScope terra.StringValue `hcl:"auto_generated_domain_name_label_scope,attr"`
	// DeterministicOutboundIpEnabled: bool, optional
	DeterministicOutboundIpEnabled terra.BoolValue `hcl:"deterministic_outbound_ip_enabled,attr"`
	// GrafanaMajorVersion: string, optional
	GrafanaMajorVersion terra.StringValue `hcl:"grafana_major_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Sku: string, optional
	Sku terra.StringValue `hcl:"sku,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundancyEnabled: bool, optional
	ZoneRedundancyEnabled terra.BoolValue `hcl:"zone_redundancy_enabled,attr"`
	// AzureMonitorWorkspaceIntegrations: min=0
	AzureMonitorWorkspaceIntegrations []AzureMonitorWorkspaceIntegrations `hcl:"azure_monitor_workspace_integrations,block" validate:"min=0"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// Smtp: optional
	Smtp *Smtp `hcl:"smtp,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDashboardGrafanaAttributes struct {
	ref terra.Reference
}

// ApiKeyEnabled returns a reference to field api_key_enabled of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) ApiKeyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adg.ref.Append("api_key_enabled"))
}

// AutoGeneratedDomainNameLabelScope returns a reference to field auto_generated_domain_name_label_scope of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) AutoGeneratedDomainNameLabelScope() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("auto_generated_domain_name_label_scope"))
}

// DeterministicOutboundIpEnabled returns a reference to field deterministic_outbound_ip_enabled of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) DeterministicOutboundIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adg.ref.Append("deterministic_outbound_ip_enabled"))
}

// Endpoint returns a reference to field endpoint of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("endpoint"))
}

// GrafanaMajorVersion returns a reference to field grafana_major_version of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) GrafanaMajorVersion() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("grafana_major_version"))
}

// GrafanaVersion returns a reference to field grafana_version of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) GrafanaVersion() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("grafana_version"))
}

// Id returns a reference to field id of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("name"))
}

// OutboundIp returns a reference to field outbound_ip of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) OutboundIp() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adg.ref.Append("outbound_ip"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adg.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("resource_group_name"))
}

// Sku returns a reference to field sku of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("sku"))
}

// Tags returns a reference to field tags of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adg.ref.Append("tags"))
}

// ZoneRedundancyEnabled returns a reference to field zone_redundancy_enabled of azurerm_dashboard_grafana.
func (adg azurermDashboardGrafanaAttributes) ZoneRedundancyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adg.ref.Append("zone_redundancy_enabled"))
}

func (adg azurermDashboardGrafanaAttributes) AzureMonitorWorkspaceIntegrations() terra.ListValue[AzureMonitorWorkspaceIntegrationsAttributes] {
	return terra.ReferenceAsList[AzureMonitorWorkspaceIntegrationsAttributes](adg.ref.Append("azure_monitor_workspace_integrations"))
}

func (adg azurermDashboardGrafanaAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](adg.ref.Append("identity"))
}

func (adg azurermDashboardGrafanaAttributes) Smtp() terra.ListValue[SmtpAttributes] {
	return terra.ReferenceAsList[SmtpAttributes](adg.ref.Append("smtp"))
}

func (adg azurermDashboardGrafanaAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adg.ref.Append("timeouts"))
}

type azurermDashboardGrafanaState struct {
	ApiKeyEnabled                     bool                                     `json:"api_key_enabled"`
	AutoGeneratedDomainNameLabelScope string                                   `json:"auto_generated_domain_name_label_scope"`
	DeterministicOutboundIpEnabled    bool                                     `json:"deterministic_outbound_ip_enabled"`
	Endpoint                          string                                   `json:"endpoint"`
	GrafanaMajorVersion               string                                   `json:"grafana_major_version"`
	GrafanaVersion                    string                                   `json:"grafana_version"`
	Id                                string                                   `json:"id"`
	Location                          string                                   `json:"location"`
	Name                              string                                   `json:"name"`
	OutboundIp                        []string                                 `json:"outbound_ip"`
	PublicNetworkAccessEnabled        bool                                     `json:"public_network_access_enabled"`
	ResourceGroupName                 string                                   `json:"resource_group_name"`
	Sku                               string                                   `json:"sku"`
	Tags                              map[string]string                        `json:"tags"`
	ZoneRedundancyEnabled             bool                                     `json:"zone_redundancy_enabled"`
	AzureMonitorWorkspaceIntegrations []AzureMonitorWorkspaceIntegrationsState `json:"azure_monitor_workspace_integrations"`
	Identity                          []IdentityState                          `json:"identity"`
	Smtp                              []SmtpState                              `json:"smtp"`
	Timeouts                          *TimeoutsState                           `json:"timeouts"`
}
