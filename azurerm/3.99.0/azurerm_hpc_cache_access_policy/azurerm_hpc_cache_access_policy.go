// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_hpc_cache_access_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_hpc_cache_access_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermHpcCacheAccessPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ahcap *Resource) Type() string {
	return "azurerm_hpc_cache_access_policy"
}

// LocalName returns the local name for [Resource].
func (ahcap *Resource) LocalName() string {
	return ahcap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ahcap *Resource) Configuration() interface{} {
	return ahcap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ahcap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ahcap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ahcap *Resource) Dependencies() terra.Dependencies {
	return ahcap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ahcap *Resource) LifecycleManagement() *terra.Lifecycle {
	return ahcap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ahcap *Resource) Attributes() azurermHpcCacheAccessPolicyAttributes {
	return azurermHpcCacheAccessPolicyAttributes{ref: terra.ReferenceResource(ahcap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ahcap *Resource) ImportState(state io.Reader) error {
	ahcap.state = &azurermHpcCacheAccessPolicyState{}
	if err := json.NewDecoder(state).Decode(ahcap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahcap.Type(), ahcap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ahcap *Resource) State() (*azurermHpcCacheAccessPolicyState, bool) {
	return ahcap.state, ahcap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ahcap *Resource) StateMust() *azurermHpcCacheAccessPolicyState {
	if ahcap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahcap.Type(), ahcap.LocalName()))
	}
	return ahcap.state
}

// Args contains the configurations for azurerm_hpc_cache_access_policy.
type Args struct {
	// HpcCacheId: string, required
	HpcCacheId terra.StringValue `hcl:"hpc_cache_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// AccessRule: min=1,max=3
	AccessRule []AccessRule `hcl:"access_rule,block" validate:"min=1,max=3"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermHpcCacheAccessPolicyAttributes struct {
	ref terra.Reference
}

// HpcCacheId returns a reference to field hpc_cache_id of azurerm_hpc_cache_access_policy.
func (ahcap azurermHpcCacheAccessPolicyAttributes) HpcCacheId() terra.StringValue {
	return terra.ReferenceAsString(ahcap.ref.Append("hpc_cache_id"))
}

// Id returns a reference to field id of azurerm_hpc_cache_access_policy.
func (ahcap azurermHpcCacheAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ahcap.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_hpc_cache_access_policy.
func (ahcap azurermHpcCacheAccessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahcap.ref.Append("name"))
}

func (ahcap azurermHpcCacheAccessPolicyAttributes) AccessRule() terra.SetValue[AccessRuleAttributes] {
	return terra.ReferenceAsSet[AccessRuleAttributes](ahcap.ref.Append("access_rule"))
}

func (ahcap azurermHpcCacheAccessPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ahcap.ref.Append("timeouts"))
}

type azurermHpcCacheAccessPolicyState struct {
	HpcCacheId string            `json:"hpc_cache_id"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	AccessRule []AccessRuleState `json:"access_rule"`
	Timeouts   *TimeoutsState    `json:"timeouts"`
}
