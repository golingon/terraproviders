// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_bot_channel_facebook

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_bot_channel_facebook.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBotChannelFacebookState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abcf *Resource) Type() string {
	return "azurerm_bot_channel_facebook"
}

// LocalName returns the local name for [Resource].
func (abcf *Resource) LocalName() string {
	return abcf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abcf *Resource) Configuration() interface{} {
	return abcf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abcf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abcf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abcf *Resource) Dependencies() terra.Dependencies {
	return abcf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abcf *Resource) LifecycleManagement() *terra.Lifecycle {
	return abcf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abcf *Resource) Attributes() azurermBotChannelFacebookAttributes {
	return azurermBotChannelFacebookAttributes{ref: terra.ReferenceResource(abcf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abcf *Resource) ImportState(state io.Reader) error {
	abcf.state = &azurermBotChannelFacebookState{}
	if err := json.NewDecoder(state).Decode(abcf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abcf.Type(), abcf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abcf *Resource) State() (*azurermBotChannelFacebookState, bool) {
	return abcf.state, abcf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abcf *Resource) StateMust() *azurermBotChannelFacebookState {
	if abcf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abcf.Type(), abcf.LocalName()))
	}
	return abcf.state
}

// Args contains the configurations for azurerm_bot_channel_facebook.
type Args struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// FacebookApplicationId: string, required
	FacebookApplicationId terra.StringValue `hcl:"facebook_application_id,attr" validate:"required"`
	// FacebookApplicationSecret: string, required
	FacebookApplicationSecret terra.StringValue `hcl:"facebook_application_secret,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Page: min=1
	Page []Page `hcl:"page,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBotChannelFacebookAttributes struct {
	ref terra.Reference
}

// BotName returns a reference to field bot_name of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) BotName() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("bot_name"))
}

// FacebookApplicationId returns a reference to field facebook_application_id of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) FacebookApplicationId() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("facebook_application_id"))
}

// FacebookApplicationSecret returns a reference to field facebook_application_secret of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) FacebookApplicationSecret() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("facebook_application_secret"))
}

// Id returns a reference to field id of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("location"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_bot_channel_facebook.
func (abcf azurermBotChannelFacebookAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abcf.ref.Append("resource_group_name"))
}

func (abcf azurermBotChannelFacebookAttributes) Page() terra.SetValue[PageAttributes] {
	return terra.ReferenceAsSet[PageAttributes](abcf.ref.Append("page"))
}

func (abcf azurermBotChannelFacebookAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abcf.ref.Append("timeouts"))
}

type azurermBotChannelFacebookState struct {
	BotName                   string         `json:"bot_name"`
	FacebookApplicationId     string         `json:"facebook_application_id"`
	FacebookApplicationSecret string         `json:"facebook_application_secret"`
	Id                        string         `json:"id"`
	Location                  string         `json:"location"`
	ResourceGroupName         string         `json:"resource_group_name"`
	Page                      []PageState    `json:"page"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
