// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_private_dns_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_private_dns_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermPrivateDnsZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apdz *Resource) Type() string {
	return "azurerm_private_dns_zone"
}

// LocalName returns the local name for [Resource].
func (apdz *Resource) LocalName() string {
	return apdz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apdz *Resource) Configuration() interface{} {
	return apdz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apdz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apdz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apdz *Resource) Dependencies() terra.Dependencies {
	return apdz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apdz *Resource) LifecycleManagement() *terra.Lifecycle {
	return apdz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apdz *Resource) Attributes() azurermPrivateDnsZoneAttributes {
	return azurermPrivateDnsZoneAttributes{ref: terra.ReferenceResource(apdz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apdz *Resource) ImportState(state io.Reader) error {
	apdz.state = &azurermPrivateDnsZoneState{}
	if err := json.NewDecoder(state).Decode(apdz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apdz.Type(), apdz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apdz *Resource) State() (*azurermPrivateDnsZoneState, bool) {
	return apdz.state, apdz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apdz *Resource) StateMust() *azurermPrivateDnsZoneState {
	if apdz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apdz.Type(), apdz.LocalName()))
	}
	return apdz.state
}

// Args contains the configurations for azurerm_private_dns_zone.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// SoaRecord: optional
	SoaRecord *SoaRecord `hcl:"soa_record,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermPrivateDnsZoneAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apdz.ref.Append("id"))
}

// MaxNumberOfRecordSets returns a reference to field max_number_of_record_sets of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) MaxNumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceAsNumber(apdz.ref.Append("max_number_of_record_sets"))
}

// MaxNumberOfVirtualNetworkLinks returns a reference to field max_number_of_virtual_network_links of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) MaxNumberOfVirtualNetworkLinks() terra.NumberValue {
	return terra.ReferenceAsNumber(apdz.ref.Append("max_number_of_virtual_network_links"))
}

// MaxNumberOfVirtualNetworkLinksWithRegistration returns a reference to field max_number_of_virtual_network_links_with_registration of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) MaxNumberOfVirtualNetworkLinksWithRegistration() terra.NumberValue {
	return terra.ReferenceAsNumber(apdz.ref.Append("max_number_of_virtual_network_links_with_registration"))
}

// Name returns a reference to field name of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apdz.ref.Append("name"))
}

// NumberOfRecordSets returns a reference to field number_of_record_sets of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) NumberOfRecordSets() terra.NumberValue {
	return terra.ReferenceAsNumber(apdz.ref.Append("number_of_record_sets"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(apdz.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_private_dns_zone.
func (apdz azurermPrivateDnsZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apdz.ref.Append("tags"))
}

func (apdz azurermPrivateDnsZoneAttributes) SoaRecord() terra.ListValue[SoaRecordAttributes] {
	return terra.ReferenceAsList[SoaRecordAttributes](apdz.ref.Append("soa_record"))
}

func (apdz azurermPrivateDnsZoneAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](apdz.ref.Append("timeouts"))
}

type azurermPrivateDnsZoneState struct {
	Id                                             string            `json:"id"`
	MaxNumberOfRecordSets                          float64           `json:"max_number_of_record_sets"`
	MaxNumberOfVirtualNetworkLinks                 float64           `json:"max_number_of_virtual_network_links"`
	MaxNumberOfVirtualNetworkLinksWithRegistration float64           `json:"max_number_of_virtual_network_links_with_registration"`
	Name                                           string            `json:"name"`
	NumberOfRecordSets                             float64           `json:"number_of_record_sets"`
	ResourceGroupName                              string            `json:"resource_group_name"`
	Tags                                           map[string]string `json:"tags"`
	SoaRecord                                      []SoaRecordState  `json:"soa_record"`
	Timeouts                                       *TimeoutsState    `json:"timeouts"`
}
