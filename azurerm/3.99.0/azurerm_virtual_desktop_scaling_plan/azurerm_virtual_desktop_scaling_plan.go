// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_desktop_scaling_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_desktop_scaling_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualDesktopScalingPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avdsp *Resource) Type() string {
	return "azurerm_virtual_desktop_scaling_plan"
}

// LocalName returns the local name for [Resource].
func (avdsp *Resource) LocalName() string {
	return avdsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avdsp *Resource) Configuration() interface{} {
	return avdsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avdsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avdsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avdsp *Resource) Dependencies() terra.Dependencies {
	return avdsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avdsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return avdsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avdsp *Resource) Attributes() azurermVirtualDesktopScalingPlanAttributes {
	return azurermVirtualDesktopScalingPlanAttributes{ref: terra.ReferenceResource(avdsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avdsp *Resource) ImportState(state io.Reader) error {
	avdsp.state = &azurermVirtualDesktopScalingPlanState{}
	if err := json.NewDecoder(state).Decode(avdsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avdsp.Type(), avdsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avdsp *Resource) State() (*azurermVirtualDesktopScalingPlanState, bool) {
	return avdsp.state, avdsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avdsp *Resource) StateMust() *azurermVirtualDesktopScalingPlanState {
	if avdsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avdsp.Type(), avdsp.LocalName()))
	}
	return avdsp.state
}

// Args contains the configurations for azurerm_virtual_desktop_scaling_plan.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExclusionTag: string, optional
	ExclusionTag terra.StringValue `hcl:"exclusion_tag,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// HostPool: min=0
	HostPool []HostPool `hcl:"host_pool,block" validate:"min=0"`
	// Schedule: min=1
	Schedule []Schedule `hcl:"schedule,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualDesktopScalingPlanAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("description"))
}

// ExclusionTag returns a reference to field exclusion_tag of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) ExclusionTag() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("exclusion_tag"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("friendly_name"))
}

// Id returns a reference to field id of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avdsp.ref.Append("tags"))
}

// TimeZone returns a reference to field time_zone of azurerm_virtual_desktop_scaling_plan.
func (avdsp azurermVirtualDesktopScalingPlanAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(avdsp.ref.Append("time_zone"))
}

func (avdsp azurermVirtualDesktopScalingPlanAttributes) HostPool() terra.ListValue[HostPoolAttributes] {
	return terra.ReferenceAsList[HostPoolAttributes](avdsp.ref.Append("host_pool"))
}

func (avdsp azurermVirtualDesktopScalingPlanAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](avdsp.ref.Append("schedule"))
}

func (avdsp azurermVirtualDesktopScalingPlanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avdsp.ref.Append("timeouts"))
}

type azurermVirtualDesktopScalingPlanState struct {
	Description       string            `json:"description"`
	ExclusionTag      string            `json:"exclusion_tag"`
	FriendlyName      string            `json:"friendly_name"`
	Id                string            `json:"id"`
	Location          string            `json:"location"`
	Name              string            `json:"name"`
	ResourceGroupName string            `json:"resource_group_name"`
	Tags              map[string]string `json:"tags"`
	TimeZone          string            `json:"time_zone"`
	HostPool          []HostPoolState   `json:"host_pool"`
	Schedule          []ScheduleState   `json:"schedule"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
