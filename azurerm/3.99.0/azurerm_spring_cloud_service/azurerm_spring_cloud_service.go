// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_spring_cloud_service.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSpringCloudServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascs *Resource) Type() string {
	return "azurerm_spring_cloud_service"
}

// LocalName returns the local name for [Resource].
func (ascs *Resource) LocalName() string {
	return ascs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascs *Resource) Configuration() interface{} {
	return ascs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascs *Resource) Dependencies() terra.Dependencies {
	return ascs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascs *Resource) Attributes() azurermSpringCloudServiceAttributes {
	return azurermSpringCloudServiceAttributes{ref: terra.ReferenceResource(ascs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascs *Resource) ImportState(state io.Reader) error {
	ascs.state = &azurermSpringCloudServiceState{}
	if err := json.NewDecoder(state).Decode(ascs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascs.Type(), ascs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascs *Resource) State() (*azurermSpringCloudServiceState, bool) {
	return ascs.state, ascs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascs *Resource) StateMust() *azurermSpringCloudServiceState {
	if ascs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascs.Type(), ascs.LocalName()))
	}
	return ascs.state
}

// Args contains the configurations for azurerm_spring_cloud_service.
type Args struct {
	// BuildAgentPoolSize: string, optional
	BuildAgentPoolSize terra.StringValue `hcl:"build_agent_pool_size,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// LogStreamPublicEndpointEnabled: bool, optional
	LogStreamPublicEndpointEnabled terra.BoolValue `hcl:"log_stream_public_endpoint_enabled,attr"`
	// ManagedEnvironmentId: string, optional
	ManagedEnvironmentId terra.StringValue `hcl:"managed_environment_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// ServiceRegistryEnabled: bool, optional
	ServiceRegistryEnabled terra.BoolValue `hcl:"service_registry_enabled,attr"`
	// SkuName: string, optional
	SkuName terra.StringValue `hcl:"sku_name,attr"`
	// SkuTier: string, optional
	SkuTier terra.StringValue `hcl:"sku_tier,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ZoneRedundant: bool, optional
	ZoneRedundant terra.BoolValue `hcl:"zone_redundant,attr"`
	// ConfigServerGitSetting: optional
	ConfigServerGitSetting *ConfigServerGitSetting `hcl:"config_server_git_setting,block"`
	// ContainerRegistry: min=0
	ContainerRegistry []ContainerRegistry `hcl:"container_registry,block" validate:"min=0"`
	// DefaultBuildService: optional
	DefaultBuildService *DefaultBuildService `hcl:"default_build_service,block"`
	// Marketplace: optional
	Marketplace *Marketplace `hcl:"marketplace,block"`
	// Network: optional
	Network *Network `hcl:"network,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Trace: optional
	Trace *Trace `hcl:"trace,block"`
}

type azurermSpringCloudServiceAttributes struct {
	ref terra.Reference
}

// BuildAgentPoolSize returns a reference to field build_agent_pool_size of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) BuildAgentPoolSize() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("build_agent_pool_size"))
}

// Id returns a reference to field id of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("location"))
}

// LogStreamPublicEndpointEnabled returns a reference to field log_stream_public_endpoint_enabled of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) LogStreamPublicEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascs.ref.Append("log_stream_public_endpoint_enabled"))
}

// ManagedEnvironmentId returns a reference to field managed_environment_id of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) ManagedEnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("managed_environment_id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("name"))
}

// OutboundPublicIpAddresses returns a reference to field outbound_public_ip_addresses of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) OutboundPublicIpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ascs.ref.Append("outbound_public_ip_addresses"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("resource_group_name"))
}

// ServiceRegistryEnabled returns a reference to field service_registry_enabled of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) ServiceRegistryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ascs.ref.Append("service_registry_enabled"))
}

// ServiceRegistryId returns a reference to field service_registry_id of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) ServiceRegistryId() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("service_registry_id"))
}

// SkuName returns a reference to field sku_name of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("sku_name"))
}

// SkuTier returns a reference to field sku_tier of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) SkuTier() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("sku_tier"))
}

// Tags returns a reference to field tags of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascs.ref.Append("tags"))
}

// ZoneRedundant returns a reference to field zone_redundant of azurerm_spring_cloud_service.
func (ascs azurermSpringCloudServiceAttributes) ZoneRedundant() terra.BoolValue {
	return terra.ReferenceAsBool(ascs.ref.Append("zone_redundant"))
}

func (ascs azurermSpringCloudServiceAttributes) RequiredNetworkTrafficRules() terra.ListValue[RequiredNetworkTrafficRulesAttributes] {
	return terra.ReferenceAsList[RequiredNetworkTrafficRulesAttributes](ascs.ref.Append("required_network_traffic_rules"))
}

func (ascs azurermSpringCloudServiceAttributes) ConfigServerGitSetting() terra.ListValue[ConfigServerGitSettingAttributes] {
	return terra.ReferenceAsList[ConfigServerGitSettingAttributes](ascs.ref.Append("config_server_git_setting"))
}

func (ascs azurermSpringCloudServiceAttributes) ContainerRegistry() terra.ListValue[ContainerRegistryAttributes] {
	return terra.ReferenceAsList[ContainerRegistryAttributes](ascs.ref.Append("container_registry"))
}

func (ascs azurermSpringCloudServiceAttributes) DefaultBuildService() terra.ListValue[DefaultBuildServiceAttributes] {
	return terra.ReferenceAsList[DefaultBuildServiceAttributes](ascs.ref.Append("default_build_service"))
}

func (ascs azurermSpringCloudServiceAttributes) Marketplace() terra.ListValue[MarketplaceAttributes] {
	return terra.ReferenceAsList[MarketplaceAttributes](ascs.ref.Append("marketplace"))
}

func (ascs azurermSpringCloudServiceAttributes) Network() terra.ListValue[NetworkAttributes] {
	return terra.ReferenceAsList[NetworkAttributes](ascs.ref.Append("network"))
}

func (ascs azurermSpringCloudServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascs.ref.Append("timeouts"))
}

func (ascs azurermSpringCloudServiceAttributes) Trace() terra.ListValue[TraceAttributes] {
	return terra.ReferenceAsList[TraceAttributes](ascs.ref.Append("trace"))
}

type azurermSpringCloudServiceState struct {
	BuildAgentPoolSize             string                             `json:"build_agent_pool_size"`
	Id                             string                             `json:"id"`
	Location                       string                             `json:"location"`
	LogStreamPublicEndpointEnabled bool                               `json:"log_stream_public_endpoint_enabled"`
	ManagedEnvironmentId           string                             `json:"managed_environment_id"`
	Name                           string                             `json:"name"`
	OutboundPublicIpAddresses      []string                           `json:"outbound_public_ip_addresses"`
	ResourceGroupName              string                             `json:"resource_group_name"`
	ServiceRegistryEnabled         bool                               `json:"service_registry_enabled"`
	ServiceRegistryId              string                             `json:"service_registry_id"`
	SkuName                        string                             `json:"sku_name"`
	SkuTier                        string                             `json:"sku_tier"`
	Tags                           map[string]string                  `json:"tags"`
	ZoneRedundant                  bool                               `json:"zone_redundant"`
	RequiredNetworkTrafficRules    []RequiredNetworkTrafficRulesState `json:"required_network_traffic_rules"`
	ConfigServerGitSetting         []ConfigServerGitSettingState      `json:"config_server_git_setting"`
	ContainerRegistry              []ContainerRegistryState           `json:"container_registry"`
	DefaultBuildService            []DefaultBuildServiceState         `json:"default_build_service"`
	Marketplace                    []MarketplaceState                 `json:"marketplace"`
	Network                        []NetworkState                     `json:"network"`
	Timeouts                       *TimeoutsState                     `json:"timeouts"`
	Trace                          []TraceState                       `json:"trace"`
}
