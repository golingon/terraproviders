// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_spring_cloud_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataConfigServerGitSettingAttributes struct {
	ref terra.Reference
}

func (csgs DataConfigServerGitSettingAttributes) InternalRef() (terra.Reference, error) {
	return csgs.ref, nil
}

func (csgs DataConfigServerGitSettingAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingAttributes {
	return DataConfigServerGitSettingAttributes{ref: ref}
}

func (csgs DataConfigServerGitSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csgs.ref.InternalTokens()
}

func (csgs DataConfigServerGitSettingAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(csgs.ref.Append("label"))
}

func (csgs DataConfigServerGitSettingAttributes) SearchPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](csgs.ref.Append("search_paths"))
}

func (csgs DataConfigServerGitSettingAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(csgs.ref.Append("uri"))
}

func (csgs DataConfigServerGitSettingAttributes) HttpBasicAuth() terra.ListValue[DataConfigServerGitSettingHttpBasicAuthAttributes] {
	return terra.ReferenceAsList[DataConfigServerGitSettingHttpBasicAuthAttributes](csgs.ref.Append("http_basic_auth"))
}

func (csgs DataConfigServerGitSettingAttributes) Repository() terra.ListValue[DataConfigServerGitSettingRepositoryAttributes] {
	return terra.ReferenceAsList[DataConfigServerGitSettingRepositoryAttributes](csgs.ref.Append("repository"))
}

func (csgs DataConfigServerGitSettingAttributes) SshAuth() terra.ListValue[DataConfigServerGitSettingSshAuthAttributes] {
	return terra.ReferenceAsList[DataConfigServerGitSettingSshAuthAttributes](csgs.ref.Append("ssh_auth"))
}

type DataConfigServerGitSettingHttpBasicAuthAttributes struct {
	ref terra.Reference
}

func (hba DataConfigServerGitSettingHttpBasicAuthAttributes) InternalRef() (terra.Reference, error) {
	return hba.ref, nil
}

func (hba DataConfigServerGitSettingHttpBasicAuthAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingHttpBasicAuthAttributes {
	return DataConfigServerGitSettingHttpBasicAuthAttributes{ref: ref}
}

func (hba DataConfigServerGitSettingHttpBasicAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hba.ref.InternalTokens()
}

func (hba DataConfigServerGitSettingHttpBasicAuthAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(hba.ref.Append("password"))
}

func (hba DataConfigServerGitSettingHttpBasicAuthAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(hba.ref.Append("username"))
}

type DataConfigServerGitSettingRepositoryAttributes struct {
	ref terra.Reference
}

func (r DataConfigServerGitSettingRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataConfigServerGitSettingRepositoryAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingRepositoryAttributes {
	return DataConfigServerGitSettingRepositoryAttributes{ref: ref}
}

func (r DataConfigServerGitSettingRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataConfigServerGitSettingRepositoryAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("label"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) Pattern() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("pattern"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) SearchPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("search_paths"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("uri"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) HttpBasicAuth() terra.ListValue[DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes] {
	return terra.ReferenceAsList[DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes](r.ref.Append("http_basic_auth"))
}

func (r DataConfigServerGitSettingRepositoryAttributes) SshAuth() terra.ListValue[DataConfigServerGitSettingRepositorySshAuthAttributes] {
	return terra.ReferenceAsList[DataConfigServerGitSettingRepositorySshAuthAttributes](r.ref.Append("ssh_auth"))
}

type DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes struct {
	ref terra.Reference
}

func (hba DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes) InternalRef() (terra.Reference, error) {
	return hba.ref, nil
}

func (hba DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes {
	return DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes{ref: ref}
}

func (hba DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hba.ref.InternalTokens()
}

func (hba DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(hba.ref.Append("password"))
}

func (hba DataConfigServerGitSettingRepositoryHttpBasicAuthAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(hba.ref.Append("username"))
}

type DataConfigServerGitSettingRepositorySshAuthAttributes struct {
	ref terra.Reference
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingRepositorySshAuthAttributes {
	return DataConfigServerGitSettingRepositorySshAuthAttributes{ref: ref}
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) HostKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("host_key"))
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) HostKeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("host_key_algorithm"))
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("private_key"))
}

func (sa DataConfigServerGitSettingRepositorySshAuthAttributes) StrictHostKeyCheckingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("strict_host_key_checking_enabled"))
}

type DataConfigServerGitSettingSshAuthAttributes struct {
	ref terra.Reference
}

func (sa DataConfigServerGitSettingSshAuthAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa DataConfigServerGitSettingSshAuthAttributes) InternalWithRef(ref terra.Reference) DataConfigServerGitSettingSshAuthAttributes {
	return DataConfigServerGitSettingSshAuthAttributes{ref: ref}
}

func (sa DataConfigServerGitSettingSshAuthAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa DataConfigServerGitSettingSshAuthAttributes) HostKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("host_key"))
}

func (sa DataConfigServerGitSettingSshAuthAttributes) HostKeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("host_key_algorithm"))
}

func (sa DataConfigServerGitSettingSshAuthAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("private_key"))
}

func (sa DataConfigServerGitSettingSshAuthAttributes) StrictHostKeyCheckingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("strict_host_key_checking_enabled"))
}

type DataRequiredNetworkTrafficRulesAttributes struct {
	ref terra.Reference
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) InternalRef() (terra.Reference, error) {
	return rntr.ref, nil
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) InternalWithRef(ref terra.Reference) DataRequiredNetworkTrafficRulesAttributes {
	return DataRequiredNetworkTrafficRulesAttributes{ref: ref}
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rntr.ref.InternalTokens()
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(rntr.ref.Append("direction"))
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) Fqdns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rntr.ref.Append("fqdns"))
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rntr.ref.Append("ip_addresses"))
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(rntr.ref.Append("port"))
}

func (rntr DataRequiredNetworkTrafficRulesAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(rntr.ref.Append("protocol"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataConfigServerGitSettingState struct {
	Label         string                                         `json:"label"`
	SearchPaths   []string                                       `json:"search_paths"`
	Uri           string                                         `json:"uri"`
	HttpBasicAuth []DataConfigServerGitSettingHttpBasicAuthState `json:"http_basic_auth"`
	Repository    []DataConfigServerGitSettingRepositoryState    `json:"repository"`
	SshAuth       []DataConfigServerGitSettingSshAuthState       `json:"ssh_auth"`
}

type DataConfigServerGitSettingHttpBasicAuthState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type DataConfigServerGitSettingRepositoryState struct {
	Label         string                                                   `json:"label"`
	Name          string                                                   `json:"name"`
	Pattern       []string                                                 `json:"pattern"`
	SearchPaths   []string                                                 `json:"search_paths"`
	Uri           string                                                   `json:"uri"`
	HttpBasicAuth []DataConfigServerGitSettingRepositoryHttpBasicAuthState `json:"http_basic_auth"`
	SshAuth       []DataConfigServerGitSettingRepositorySshAuthState       `json:"ssh_auth"`
}

type DataConfigServerGitSettingRepositoryHttpBasicAuthState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type DataConfigServerGitSettingRepositorySshAuthState struct {
	HostKey                      string `json:"host_key"`
	HostKeyAlgorithm             string `json:"host_key_algorithm"`
	PrivateKey                   string `json:"private_key"`
	StrictHostKeyCheckingEnabled bool   `json:"strict_host_key_checking_enabled"`
}

type DataConfigServerGitSettingSshAuthState struct {
	HostKey                      string `json:"host_key"`
	HostKeyAlgorithm             string `json:"host_key_algorithm"`
	PrivateKey                   string `json:"private_key"`
	StrictHostKeyCheckingEnabled bool   `json:"strict_host_key_checking_enabled"`
}

type DataRequiredNetworkTrafficRulesState struct {
	Direction   string   `json:"direction"`
	Fqdns       []string `json:"fqdns"`
	IpAddresses []string `json:"ip_addresses"`
	Port        float64  `json:"port"`
	Protocol    string   `json:"protocol"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
