// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_machine_learning_datastore_datalake_gen2

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_machine_learning_datastore_datalake_gen2.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMachineLearningDatastoreDatalakeGen2State
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amlddg *Resource) Type() string {
	return "azurerm_machine_learning_datastore_datalake_gen2"
}

// LocalName returns the local name for [Resource].
func (amlddg *Resource) LocalName() string {
	return amlddg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amlddg *Resource) Configuration() interface{} {
	return amlddg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amlddg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amlddg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amlddg *Resource) Dependencies() terra.Dependencies {
	return amlddg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amlddg *Resource) LifecycleManagement() *terra.Lifecycle {
	return amlddg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amlddg *Resource) Attributes() azurermMachineLearningDatastoreDatalakeGen2Attributes {
	return azurermMachineLearningDatastoreDatalakeGen2Attributes{ref: terra.ReferenceResource(amlddg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amlddg *Resource) ImportState(state io.Reader) error {
	amlddg.state = &azurermMachineLearningDatastoreDatalakeGen2State{}
	if err := json.NewDecoder(state).Decode(amlddg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amlddg.Type(), amlddg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amlddg *Resource) State() (*azurermMachineLearningDatastoreDatalakeGen2State, bool) {
	return amlddg.state, amlddg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amlddg *Resource) StateMust() *azurermMachineLearningDatastoreDatalakeGen2State {
	if amlddg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amlddg.Type(), amlddg.LocalName()))
	}
	return amlddg.state
}

// Args contains the configurations for azurerm_machine_learning_datastore_datalake_gen2.
type Args struct {
	// AuthorityUrl: string, optional
	AuthorityUrl terra.StringValue `hcl:"authority_url,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceDataIdentity: string, optional
	ServiceDataIdentity terra.StringValue `hcl:"service_data_identity,attr"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMachineLearningDatastoreDatalakeGen2Attributes struct {
	ref terra.Reference
}

// AuthorityUrl returns a reference to field authority_url of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) AuthorityUrl() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("authority_url"))
}

// ClientId returns a reference to field client_id of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("client_secret"))
}

// Description returns a reference to field description of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("id"))
}

// IsDefault returns a reference to field is_default of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(amlddg.ref.Append("is_default"))
}

// Name returns a reference to field name of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("name"))
}

// ServiceDataIdentity returns a reference to field service_data_identity of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) ServiceDataIdentity() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("service_data_identity"))
}

// StorageContainerId returns a reference to field storage_container_id of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("storage_container_id"))
}

// Tags returns a reference to field tags of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amlddg.ref.Append("tags"))
}

// TenantId returns a reference to field tenant_id of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("tenant_id"))
}

// WorkspaceId returns a reference to field workspace_id of azurerm_machine_learning_datastore_datalake_gen2.
func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(amlddg.ref.Append("workspace_id"))
}

func (amlddg azurermMachineLearningDatastoreDatalakeGen2Attributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amlddg.ref.Append("timeouts"))
}

type azurermMachineLearningDatastoreDatalakeGen2State struct {
	AuthorityUrl        string            `json:"authority_url"`
	ClientId            string            `json:"client_id"`
	ClientSecret        string            `json:"client_secret"`
	Description         string            `json:"description"`
	Id                  string            `json:"id"`
	IsDefault           bool              `json:"is_default"`
	Name                string            `json:"name"`
	ServiceDataIdentity string            `json:"service_data_identity"`
	StorageContainerId  string            `json:"storage_container_id"`
	Tags                map[string]string `json:"tags"`
	TenantId            string            `json:"tenant_id"`
	WorkspaceId         string            `json:"workspace_id"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
