// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_kusto_cluster_principal_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_kusto_cluster_principal_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermKustoClusterPrincipalAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akcpa *Resource) Type() string {
	return "azurerm_kusto_cluster_principal_assignment"
}

// LocalName returns the local name for [Resource].
func (akcpa *Resource) LocalName() string {
	return akcpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akcpa *Resource) Configuration() interface{} {
	return akcpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akcpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akcpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akcpa *Resource) Dependencies() terra.Dependencies {
	return akcpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akcpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return akcpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akcpa *Resource) Attributes() azurermKustoClusterPrincipalAssignmentAttributes {
	return azurermKustoClusterPrincipalAssignmentAttributes{ref: terra.ReferenceResource(akcpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akcpa *Resource) ImportState(state io.Reader) error {
	akcpa.state = &azurermKustoClusterPrincipalAssignmentState{}
	if err := json.NewDecoder(state).Decode(akcpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akcpa.Type(), akcpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akcpa *Resource) State() (*azurermKustoClusterPrincipalAssignmentState, bool) {
	return akcpa.state, akcpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akcpa *Resource) StateMust() *azurermKustoClusterPrincipalAssignmentState {
	if akcpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akcpa.Type(), akcpa.LocalName()))
	}
	return akcpa.state
}

// Args contains the configurations for azurerm_kusto_cluster_principal_assignment.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// PrincipalType: string, required
	PrincipalType terra.StringValue `hcl:"principal_type,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermKustoClusterPrincipalAssignmentAttributes struct {
	ref terra.Reference
}

// ClusterName returns a reference to field cluster_name of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("cluster_name"))
}

// Id returns a reference to field id of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("name"))
}

// PrincipalId returns a reference to field principal_id of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("principal_id"))
}

// PrincipalName returns a reference to field principal_name of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) PrincipalName() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("principal_name"))
}

// PrincipalType returns a reference to field principal_type of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("principal_type"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("resource_group_name"))
}

// Role returns a reference to field role of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("role"))
}

// TenantId returns a reference to field tenant_id of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("tenant_id"))
}

// TenantName returns a reference to field tenant_name of azurerm_kusto_cluster_principal_assignment.
func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) TenantName() terra.StringValue {
	return terra.ReferenceAsString(akcpa.ref.Append("tenant_name"))
}

func (akcpa azurermKustoClusterPrincipalAssignmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akcpa.ref.Append("timeouts"))
}

type azurermKustoClusterPrincipalAssignmentState struct {
	ClusterName       string         `json:"cluster_name"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	PrincipalId       string         `json:"principal_id"`
	PrincipalName     string         `json:"principal_name"`
	PrincipalType     string         `json:"principal_type"`
	ResourceGroupName string         `json:"resource_group_name"`
	Role              string         `json:"role"`
	TenantId          string         `json:"tenant_id"`
	TenantName        string         `json:"tenant_name"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
