// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_orbital_contact_profile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Links struct {
	// Direction: string, required
	Direction terra.StringValue `hcl:"direction,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Polarization: string, required
	Polarization terra.StringValue `hcl:"polarization,attr" validate:"required"`
	// LinksChannels: min=1
	Channels []LinksChannels `hcl:"channels,block" validate:"min=1"`
}

type LinksChannels struct {
	// BandwidthMhz: number, required
	BandwidthMhz terra.NumberValue `hcl:"bandwidth_mhz,attr" validate:"required"`
	// CenterFrequencyMhz: number, required
	CenterFrequencyMhz terra.NumberValue `hcl:"center_frequency_mhz,attr" validate:"required"`
	// DemodulationConfiguration: string, optional
	DemodulationConfiguration terra.StringValue `hcl:"demodulation_configuration,attr"`
	// ModulationConfiguration: string, optional
	ModulationConfiguration terra.StringValue `hcl:"modulation_configuration,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// LinksChannelsEndPoint: min=1
	EndPoint []LinksChannelsEndPoint `hcl:"end_point,block" validate:"min=1"`
}

type LinksChannelsEndPoint struct {
	// EndPointName: string, required
	EndPointName terra.StringValue `hcl:"end_point_name,attr" validate:"required"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Port: string, required
	Port terra.StringValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LinksAttributes struct {
	ref terra.Reference
}

func (l LinksAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LinksAttributes) InternalWithRef(ref terra.Reference) LinksAttributes {
	return LinksAttributes{ref: ref}
}

func (l LinksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LinksAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("direction"))
}

func (l LinksAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("name"))
}

func (l LinksAttributes) Polarization() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("polarization"))
}

func (l LinksAttributes) Channels() terra.ListValue[LinksChannelsAttributes] {
	return terra.ReferenceAsList[LinksChannelsAttributes](l.ref.Append("channels"))
}

type LinksChannelsAttributes struct {
	ref terra.Reference
}

func (c LinksChannelsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c LinksChannelsAttributes) InternalWithRef(ref terra.Reference) LinksChannelsAttributes {
	return LinksChannelsAttributes{ref: ref}
}

func (c LinksChannelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c LinksChannelsAttributes) BandwidthMhz() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("bandwidth_mhz"))
}

func (c LinksChannelsAttributes) CenterFrequencyMhz() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("center_frequency_mhz"))
}

func (c LinksChannelsAttributes) DemodulationConfiguration() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("demodulation_configuration"))
}

func (c LinksChannelsAttributes) ModulationConfiguration() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("modulation_configuration"))
}

func (c LinksChannelsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c LinksChannelsAttributes) EndPoint() terra.SetValue[LinksChannelsEndPointAttributes] {
	return terra.ReferenceAsSet[LinksChannelsEndPointAttributes](c.ref.Append("end_point"))
}

type LinksChannelsEndPointAttributes struct {
	ref terra.Reference
}

func (ep LinksChannelsEndPointAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep LinksChannelsEndPointAttributes) InternalWithRef(ref terra.Reference) LinksChannelsEndPointAttributes {
	return LinksChannelsEndPointAttributes{ref: ref}
}

func (ep LinksChannelsEndPointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep LinksChannelsEndPointAttributes) EndPointName() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("end_point_name"))
}

func (ep LinksChannelsEndPointAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("ip_address"))
}

func (ep LinksChannelsEndPointAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("port"))
}

func (ep LinksChannelsEndPointAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("protocol"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LinksState struct {
	Direction    string               `json:"direction"`
	Name         string               `json:"name"`
	Polarization string               `json:"polarization"`
	Channels     []LinksChannelsState `json:"channels"`
}

type LinksChannelsState struct {
	BandwidthMhz              float64                      `json:"bandwidth_mhz"`
	CenterFrequencyMhz        float64                      `json:"center_frequency_mhz"`
	DemodulationConfiguration string                       `json:"demodulation_configuration"`
	ModulationConfiguration   string                       `json:"modulation_configuration"`
	Name                      string                       `json:"name"`
	EndPoint                  []LinksChannelsEndPointState `json:"end_point"`
}

type LinksChannelsEndPointState struct {
	EndPointName string `json:"end_point_name"`
	IpAddress    string `json:"ip_address"`
	Port         string `json:"port"`
	Protocol     string `json:"protocol"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
