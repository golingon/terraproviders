// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_windows_web_app_slot

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthSettings struct {
	// AdditionalLoginParameters: map of string, optional
	AdditionalLoginParameters terra.MapValue[terra.StringValue] `hcl:"additional_login_parameters,attr"`
	// AllowedExternalRedirectUrls: list of string, optional
	AllowedExternalRedirectUrls terra.ListValue[terra.StringValue] `hcl:"allowed_external_redirect_urls,attr"`
	// DefaultProvider: string, optional
	DefaultProvider terra.StringValue `hcl:"default_provider,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// RuntimeVersion: string, optional
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr"`
	// TokenRefreshExtensionHours: number, optional
	TokenRefreshExtensionHours terra.NumberValue `hcl:"token_refresh_extension_hours,attr"`
	// TokenStoreEnabled: bool, optional
	TokenStoreEnabled terra.BoolValue `hcl:"token_store_enabled,attr"`
	// UnauthenticatedClientAction: string, optional
	UnauthenticatedClientAction terra.StringValue `hcl:"unauthenticated_client_action,attr"`
	// AuthSettingsActiveDirectory: optional
	ActiveDirectory *AuthSettingsActiveDirectory `hcl:"active_directory,block"`
	// AuthSettingsFacebook: optional
	Facebook *AuthSettingsFacebook `hcl:"facebook,block"`
	// AuthSettingsGithub: optional
	Github *AuthSettingsGithub `hcl:"github,block"`
	// AuthSettingsGoogle: optional
	Google *AuthSettingsGoogle `hcl:"google,block"`
	// AuthSettingsMicrosoft: optional
	Microsoft *AuthSettingsMicrosoft `hcl:"microsoft,block"`
	// AuthSettingsTwitter: optional
	Twitter *AuthSettingsTwitter `hcl:"twitter,block"`
}

type AuthSettingsActiveDirectory struct {
	// AllowedAudiences: list of string, optional
	AllowedAudiences terra.ListValue[terra.StringValue] `hcl:"allowed_audiences,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// ClientSecretSettingName: string, optional
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr"`
}

type AuthSettingsFacebook struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// AppSecret: string, optional
	AppSecret terra.StringValue `hcl:"app_secret,attr"`
	// AppSecretSettingName: string, optional
	AppSecretSettingName terra.StringValue `hcl:"app_secret_setting_name,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsGithub struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// ClientSecretSettingName: string, optional
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsGoogle struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// ClientSecretSettingName: string, optional
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsMicrosoft struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// ClientSecretSettingName: string, optional
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr"`
	// OauthScopes: list of string, optional
	OauthScopes terra.ListValue[terra.StringValue] `hcl:"oauth_scopes,attr"`
}

type AuthSettingsTwitter struct {
	// ConsumerKey: string, required
	ConsumerKey terra.StringValue `hcl:"consumer_key,attr" validate:"required"`
	// ConsumerSecret: string, optional
	ConsumerSecret terra.StringValue `hcl:"consumer_secret,attr"`
	// ConsumerSecretSettingName: string, optional
	ConsumerSecretSettingName terra.StringValue `hcl:"consumer_secret_setting_name,attr"`
}

type AuthSettingsV2 struct {
	// AuthEnabled: bool, optional
	AuthEnabled terra.BoolValue `hcl:"auth_enabled,attr"`
	// ConfigFilePath: string, optional
	ConfigFilePath terra.StringValue `hcl:"config_file_path,attr"`
	// DefaultProvider: string, optional
	DefaultProvider terra.StringValue `hcl:"default_provider,attr"`
	// ExcludedPaths: list of string, optional
	ExcludedPaths terra.ListValue[terra.StringValue] `hcl:"excluded_paths,attr"`
	// ForwardProxyConvention: string, optional
	ForwardProxyConvention terra.StringValue `hcl:"forward_proxy_convention,attr"`
	// ForwardProxyCustomHostHeaderName: string, optional
	ForwardProxyCustomHostHeaderName terra.StringValue `hcl:"forward_proxy_custom_host_header_name,attr"`
	// ForwardProxyCustomSchemeHeaderName: string, optional
	ForwardProxyCustomSchemeHeaderName terra.StringValue `hcl:"forward_proxy_custom_scheme_header_name,attr"`
	// HttpRouteApiPrefix: string, optional
	HttpRouteApiPrefix terra.StringValue `hcl:"http_route_api_prefix,attr"`
	// RequireAuthentication: bool, optional
	RequireAuthentication terra.BoolValue `hcl:"require_authentication,attr"`
	// RequireHttps: bool, optional
	RequireHttps terra.BoolValue `hcl:"require_https,attr"`
	// RuntimeVersion: string, optional
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr"`
	// UnauthenticatedAction: string, optional
	UnauthenticatedAction terra.StringValue `hcl:"unauthenticated_action,attr"`
	// AuthSettingsV2ActiveDirectoryV2: optional
	ActiveDirectoryV2 *AuthSettingsV2ActiveDirectoryV2 `hcl:"active_directory_v2,block"`
	// AuthSettingsV2AppleV2: optional
	AppleV2 *AuthSettingsV2AppleV2 `hcl:"apple_v2,block"`
	// AuthSettingsV2AzureStaticWebAppV2: optional
	AzureStaticWebAppV2 *AuthSettingsV2AzureStaticWebAppV2 `hcl:"azure_static_web_app_v2,block"`
	// AuthSettingsV2CustomOidcV2: min=0
	CustomOidcV2 []AuthSettingsV2CustomOidcV2 `hcl:"custom_oidc_v2,block" validate:"min=0"`
	// AuthSettingsV2FacebookV2: optional
	FacebookV2 *AuthSettingsV2FacebookV2 `hcl:"facebook_v2,block"`
	// AuthSettingsV2GithubV2: optional
	GithubV2 *AuthSettingsV2GithubV2 `hcl:"github_v2,block"`
	// AuthSettingsV2GoogleV2: optional
	GoogleV2 *AuthSettingsV2GoogleV2 `hcl:"google_v2,block"`
	// AuthSettingsV2Login: required
	Login *AuthSettingsV2Login `hcl:"login,block" validate:"required"`
	// AuthSettingsV2MicrosoftV2: optional
	MicrosoftV2 *AuthSettingsV2MicrosoftV2 `hcl:"microsoft_v2,block"`
	// AuthSettingsV2TwitterV2: optional
	TwitterV2 *AuthSettingsV2TwitterV2 `hcl:"twitter_v2,block"`
}

type AuthSettingsV2ActiveDirectoryV2 struct {
	// AllowedApplications: list of string, optional
	AllowedApplications terra.ListValue[terra.StringValue] `hcl:"allowed_applications,attr"`
	// AllowedAudiences: list of string, optional
	AllowedAudiences terra.ListValue[terra.StringValue] `hcl:"allowed_audiences,attr"`
	// AllowedGroups: list of string, optional
	AllowedGroups terra.ListValue[terra.StringValue] `hcl:"allowed_groups,attr"`
	// AllowedIdentities: list of string, optional
	AllowedIdentities terra.ListValue[terra.StringValue] `hcl:"allowed_identities,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecretCertificateThumbprint: string, optional
	ClientSecretCertificateThumbprint terra.StringValue `hcl:"client_secret_certificate_thumbprint,attr"`
	// ClientSecretSettingName: string, optional
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr"`
	// JwtAllowedClientApplications: list of string, optional
	JwtAllowedClientApplications terra.ListValue[terra.StringValue] `hcl:"jwt_allowed_client_applications,attr"`
	// JwtAllowedGroups: list of string, optional
	JwtAllowedGroups terra.ListValue[terra.StringValue] `hcl:"jwt_allowed_groups,attr"`
	// LoginParameters: map of string, optional
	LoginParameters terra.MapValue[terra.StringValue] `hcl:"login_parameters,attr"`
	// TenantAuthEndpoint: string, required
	TenantAuthEndpoint terra.StringValue `hcl:"tenant_auth_endpoint,attr" validate:"required"`
	// WwwAuthenticationDisabled: bool, optional
	WwwAuthenticationDisabled terra.BoolValue `hcl:"www_authentication_disabled,attr"`
}

type AuthSettingsV2AppleV2 struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecretSettingName: string, required
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr" validate:"required"`
}

type AuthSettingsV2AzureStaticWebAppV2 struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
}

type AuthSettingsV2CustomOidcV2 struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NameClaimType: string, optional
	NameClaimType terra.StringValue `hcl:"name_claim_type,attr"`
	// OpenidConfigurationEndpoint: string, required
	OpenidConfigurationEndpoint terra.StringValue `hcl:"openid_configuration_endpoint,attr" validate:"required"`
	// Scopes: list of string, optional
	Scopes terra.ListValue[terra.StringValue] `hcl:"scopes,attr"`
}

type AuthSettingsV2FacebookV2 struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// AppSecretSettingName: string, required
	AppSecretSettingName terra.StringValue `hcl:"app_secret_setting_name,attr" validate:"required"`
	// GraphApiVersion: string, optional
	GraphApiVersion terra.StringValue `hcl:"graph_api_version,attr"`
	// LoginScopes: list of string, optional
	LoginScopes terra.ListValue[terra.StringValue] `hcl:"login_scopes,attr"`
}

type AuthSettingsV2GithubV2 struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecretSettingName: string, required
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr" validate:"required"`
	// LoginScopes: list of string, optional
	LoginScopes terra.ListValue[terra.StringValue] `hcl:"login_scopes,attr"`
}

type AuthSettingsV2GoogleV2 struct {
	// AllowedAudiences: list of string, optional
	AllowedAudiences terra.ListValue[terra.StringValue] `hcl:"allowed_audiences,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecretSettingName: string, required
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr" validate:"required"`
	// LoginScopes: list of string, optional
	LoginScopes terra.ListValue[terra.StringValue] `hcl:"login_scopes,attr"`
}

type AuthSettingsV2Login struct {
	// AllowedExternalRedirectUrls: list of string, optional
	AllowedExternalRedirectUrls terra.ListValue[terra.StringValue] `hcl:"allowed_external_redirect_urls,attr"`
	// CookieExpirationConvention: string, optional
	CookieExpirationConvention terra.StringValue `hcl:"cookie_expiration_convention,attr"`
	// CookieExpirationTime: string, optional
	CookieExpirationTime terra.StringValue `hcl:"cookie_expiration_time,attr"`
	// LogoutEndpoint: string, optional
	LogoutEndpoint terra.StringValue `hcl:"logout_endpoint,attr"`
	// NonceExpirationTime: string, optional
	NonceExpirationTime terra.StringValue `hcl:"nonce_expiration_time,attr"`
	// PreserveUrlFragmentsForLogins: bool, optional
	PreserveUrlFragmentsForLogins terra.BoolValue `hcl:"preserve_url_fragments_for_logins,attr"`
	// TokenRefreshExtensionTime: number, optional
	TokenRefreshExtensionTime terra.NumberValue `hcl:"token_refresh_extension_time,attr"`
	// TokenStoreEnabled: bool, optional
	TokenStoreEnabled terra.BoolValue `hcl:"token_store_enabled,attr"`
	// TokenStorePath: string, optional
	TokenStorePath terra.StringValue `hcl:"token_store_path,attr"`
	// TokenStoreSasSettingName: string, optional
	TokenStoreSasSettingName terra.StringValue `hcl:"token_store_sas_setting_name,attr"`
	// ValidateNonce: bool, optional
	ValidateNonce terra.BoolValue `hcl:"validate_nonce,attr"`
}

type AuthSettingsV2MicrosoftV2 struct {
	// AllowedAudiences: list of string, optional
	AllowedAudiences terra.ListValue[terra.StringValue] `hcl:"allowed_audiences,attr"`
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecretSettingName: string, required
	ClientSecretSettingName terra.StringValue `hcl:"client_secret_setting_name,attr" validate:"required"`
	// LoginScopes: list of string, optional
	LoginScopes terra.ListValue[terra.StringValue] `hcl:"login_scopes,attr"`
}

type AuthSettingsV2TwitterV2 struct {
	// ConsumerKey: string, required
	ConsumerKey terra.StringValue `hcl:"consumer_key,attr" validate:"required"`
	// ConsumerSecretSettingName: string, required
	ConsumerSecretSettingName terra.StringValue `hcl:"consumer_secret_setting_name,attr" validate:"required"`
}

type Backup struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountUrl: string, required
	StorageAccountUrl terra.StringValue `hcl:"storage_account_url,attr" validate:"required"`
	// BackupSchedule: required
	Schedule *BackupSchedule `hcl:"schedule,block" validate:"required"`
}

type BackupSchedule struct {
	// FrequencyInterval: number, required
	FrequencyInterval terra.NumberValue `hcl:"frequency_interval,attr" validate:"required"`
	// FrequencyUnit: string, required
	FrequencyUnit terra.StringValue `hcl:"frequency_unit,attr" validate:"required"`
	// KeepAtLeastOneBackup: bool, optional
	KeepAtLeastOneBackup terra.BoolValue `hcl:"keep_at_least_one_backup,attr"`
	// RetentionPeriodDays: number, optional
	RetentionPeriodDays terra.NumberValue `hcl:"retention_period_days,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type ConnectionString struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Logs struct {
	// DetailedErrorMessages: bool, optional
	DetailedErrorMessages terra.BoolValue `hcl:"detailed_error_messages,attr"`
	// FailedRequestTracing: bool, optional
	FailedRequestTracing terra.BoolValue `hcl:"failed_request_tracing,attr"`
	// LogsApplicationLogs: optional
	ApplicationLogs *LogsApplicationLogs `hcl:"application_logs,block"`
	// LogsHttpLogs: optional
	HttpLogs *LogsHttpLogs `hcl:"http_logs,block"`
}

type LogsApplicationLogs struct {
	// FileSystemLevel: string, required
	FileSystemLevel terra.StringValue `hcl:"file_system_level,attr" validate:"required"`
	// LogsApplicationLogsAzureBlobStorage: optional
	AzureBlobStorage *LogsApplicationLogsAzureBlobStorage `hcl:"azure_blob_storage,block"`
}

type LogsApplicationLogsAzureBlobStorage struct {
	// Level: string, required
	Level terra.StringValue `hcl:"level,attr" validate:"required"`
	// RetentionInDays: number, required
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr" validate:"required"`
	// SasUrl: string, required
	SasUrl terra.StringValue `hcl:"sas_url,attr" validate:"required"`
}

type LogsHttpLogs struct {
	// LogsHttpLogsAzureBlobStorage: optional
	AzureBlobStorage *LogsHttpLogsAzureBlobStorage `hcl:"azure_blob_storage,block"`
	// LogsHttpLogsFileSystem: optional
	FileSystem *LogsHttpLogsFileSystem `hcl:"file_system,block"`
}

type LogsHttpLogsAzureBlobStorage struct {
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// SasUrl: string, required
	SasUrl terra.StringValue `hcl:"sas_url,attr" validate:"required"`
}

type LogsHttpLogsFileSystem struct {
	// RetentionInDays: number, required
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr" validate:"required"`
	// RetentionInMb: number, required
	RetentionInMb terra.NumberValue `hcl:"retention_in_mb,attr" validate:"required"`
}

type SiteConfig struct {
	// AlwaysOn: bool, optional
	AlwaysOn terra.BoolValue `hcl:"always_on,attr"`
	// ApiDefinitionUrl: string, optional
	ApiDefinitionUrl terra.StringValue `hcl:"api_definition_url,attr"`
	// ApiManagementApiId: string, optional
	ApiManagementApiId terra.StringValue `hcl:"api_management_api_id,attr"`
	// AppCommandLine: string, optional
	AppCommandLine terra.StringValue `hcl:"app_command_line,attr"`
	// AutoHealEnabled: bool, optional
	AutoHealEnabled terra.BoolValue `hcl:"auto_heal_enabled,attr"`
	// AutoSwapSlotName: string, optional
	AutoSwapSlotName terra.StringValue `hcl:"auto_swap_slot_name,attr"`
	// ContainerRegistryManagedIdentityClientId: string, optional
	ContainerRegistryManagedIdentityClientId terra.StringValue `hcl:"container_registry_managed_identity_client_id,attr"`
	// ContainerRegistryUseManagedIdentity: bool, optional
	ContainerRegistryUseManagedIdentity terra.BoolValue `hcl:"container_registry_use_managed_identity,attr"`
	// DefaultDocuments: list of string, optional
	DefaultDocuments terra.ListValue[terra.StringValue] `hcl:"default_documents,attr"`
	// FtpsState: string, optional
	FtpsState terra.StringValue `hcl:"ftps_state,attr"`
	// HealthCheckEvictionTimeInMin: number, optional
	HealthCheckEvictionTimeInMin terra.NumberValue `hcl:"health_check_eviction_time_in_min,attr"`
	// HealthCheckPath: string, optional
	HealthCheckPath terra.StringValue `hcl:"health_check_path,attr"`
	// Http2Enabled: bool, optional
	Http2Enabled terra.BoolValue `hcl:"http2_enabled,attr"`
	// IpRestrictionDefaultAction: string, optional
	IpRestrictionDefaultAction terra.StringValue `hcl:"ip_restriction_default_action,attr"`
	// LoadBalancingMode: string, optional
	LoadBalancingMode terra.StringValue `hcl:"load_balancing_mode,attr"`
	// LocalMysqlEnabled: bool, optional
	LocalMysqlEnabled terra.BoolValue `hcl:"local_mysql_enabled,attr"`
	// ManagedPipelineMode: string, optional
	ManagedPipelineMode terra.StringValue `hcl:"managed_pipeline_mode,attr"`
	// MinimumTlsVersion: string, optional
	MinimumTlsVersion terra.StringValue `hcl:"minimum_tls_version,attr"`
	// RemoteDebuggingEnabled: bool, optional
	RemoteDebuggingEnabled terra.BoolValue `hcl:"remote_debugging_enabled,attr"`
	// RemoteDebuggingVersion: string, optional
	RemoteDebuggingVersion terra.StringValue `hcl:"remote_debugging_version,attr"`
	// ScmIpRestrictionDefaultAction: string, optional
	ScmIpRestrictionDefaultAction terra.StringValue `hcl:"scm_ip_restriction_default_action,attr"`
	// ScmMinimumTlsVersion: string, optional
	ScmMinimumTlsVersion terra.StringValue `hcl:"scm_minimum_tls_version,attr"`
	// ScmUseMainIpRestriction: bool, optional
	ScmUseMainIpRestriction terra.BoolValue `hcl:"scm_use_main_ip_restriction,attr"`
	// Use32BitWorker: bool, optional
	Use32BitWorker terra.BoolValue `hcl:"use_32_bit_worker,attr"`
	// VnetRouteAllEnabled: bool, optional
	VnetRouteAllEnabled terra.BoolValue `hcl:"vnet_route_all_enabled,attr"`
	// WebsocketsEnabled: bool, optional
	WebsocketsEnabled terra.BoolValue `hcl:"websockets_enabled,attr"`
	// WorkerCount: number, optional
	WorkerCount terra.NumberValue `hcl:"worker_count,attr"`
	// SiteConfigApplicationStack: optional
	ApplicationStack *SiteConfigApplicationStack `hcl:"application_stack,block"`
	// SiteConfigAutoHealSetting: optional
	AutoHealSetting *SiteConfigAutoHealSetting `hcl:"auto_heal_setting,block"`
	// SiteConfigCors: optional
	Cors *SiteConfigCors `hcl:"cors,block"`
	// SiteConfigIpRestriction: min=0
	IpRestriction []SiteConfigIpRestriction `hcl:"ip_restriction,block" validate:"min=0"`
	// SiteConfigScmIpRestriction: min=0
	ScmIpRestriction []SiteConfigScmIpRestriction `hcl:"scm_ip_restriction,block" validate:"min=0"`
	// SiteConfigVirtualApplication: min=0
	VirtualApplication []SiteConfigVirtualApplication `hcl:"virtual_application,block" validate:"min=0"`
}

type SiteConfigApplicationStack struct {
	// CurrentStack: string, optional
	CurrentStack terra.StringValue `hcl:"current_stack,attr"`
	// DockerContainerName: string, optional
	DockerContainerName terra.StringValue `hcl:"docker_container_name,attr"`
	// DockerContainerRegistry: string, optional
	DockerContainerRegistry terra.StringValue `hcl:"docker_container_registry,attr"`
	// DockerContainerTag: string, optional
	DockerContainerTag terra.StringValue `hcl:"docker_container_tag,attr"`
	// DockerImageName: string, optional
	DockerImageName terra.StringValue `hcl:"docker_image_name,attr"`
	// DockerRegistryPassword: string, optional
	DockerRegistryPassword terra.StringValue `hcl:"docker_registry_password,attr"`
	// DockerRegistryUrl: string, optional
	DockerRegistryUrl terra.StringValue `hcl:"docker_registry_url,attr"`
	// DockerRegistryUsername: string, optional
	DockerRegistryUsername terra.StringValue `hcl:"docker_registry_username,attr"`
	// DotnetCoreVersion: string, optional
	DotnetCoreVersion terra.StringValue `hcl:"dotnet_core_version,attr"`
	// DotnetVersion: string, optional
	DotnetVersion terra.StringValue `hcl:"dotnet_version,attr"`
	// JavaContainer: string, optional
	JavaContainer terra.StringValue `hcl:"java_container,attr"`
	// JavaContainerVersion: string, optional
	JavaContainerVersion terra.StringValue `hcl:"java_container_version,attr"`
	// JavaEmbeddedServerEnabled: bool, optional
	JavaEmbeddedServerEnabled terra.BoolValue `hcl:"java_embedded_server_enabled,attr"`
	// JavaVersion: string, optional
	JavaVersion terra.StringValue `hcl:"java_version,attr"`
	// NodeVersion: string, optional
	NodeVersion terra.StringValue `hcl:"node_version,attr"`
	// PhpVersion: string, optional
	PhpVersion terra.StringValue `hcl:"php_version,attr"`
	// Python: bool, optional
	Python terra.BoolValue `hcl:"python,attr"`
	// PythonVersion: string, optional
	PythonVersion terra.StringValue `hcl:"python_version,attr"`
	// TomcatVersion: string, optional
	TomcatVersion terra.StringValue `hcl:"tomcat_version,attr"`
}

type SiteConfigAutoHealSetting struct {
	// SiteConfigAutoHealSettingAction: required
	Action *SiteConfigAutoHealSettingAction `hcl:"action,block" validate:"required"`
	// SiteConfigAutoHealSettingTrigger: required
	Trigger *SiteConfigAutoHealSettingTrigger `hcl:"trigger,block" validate:"required"`
}

type SiteConfigAutoHealSettingAction struct {
	// ActionType: string, required
	ActionType terra.StringValue `hcl:"action_type,attr" validate:"required"`
	// MinimumProcessExecutionTime: string, optional
	MinimumProcessExecutionTime terra.StringValue `hcl:"minimum_process_execution_time,attr"`
	// SiteConfigAutoHealSettingActionCustomAction: optional
	CustomAction *SiteConfigAutoHealSettingActionCustomAction `hcl:"custom_action,block"`
}

type SiteConfigAutoHealSettingActionCustomAction struct {
	// Executable: string, required
	Executable terra.StringValue `hcl:"executable,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
}

type SiteConfigAutoHealSettingTrigger struct {
	// PrivateMemoryKb: number, optional
	PrivateMemoryKb terra.NumberValue `hcl:"private_memory_kb,attr"`
	// SiteConfigAutoHealSettingTriggerRequests: optional
	Requests *SiteConfigAutoHealSettingTriggerRequests `hcl:"requests,block"`
	// SiteConfigAutoHealSettingTriggerSlowRequest: optional
	SlowRequest *SiteConfigAutoHealSettingTriggerSlowRequest `hcl:"slow_request,block"`
	// SiteConfigAutoHealSettingTriggerStatusCode: min=0
	StatusCode []SiteConfigAutoHealSettingTriggerStatusCode `hcl:"status_code,block" validate:"min=0"`
}

type SiteConfigAutoHealSettingTriggerRequests struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Interval: string, required
	Interval terra.StringValue `hcl:"interval,attr" validate:"required"`
}

type SiteConfigAutoHealSettingTriggerSlowRequest struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Interval: string, required
	Interval terra.StringValue `hcl:"interval,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// TimeTaken: string, required
	TimeTaken terra.StringValue `hcl:"time_taken,attr" validate:"required"`
}

type SiteConfigAutoHealSettingTriggerStatusCode struct {
	// Count: number, required
	Count terra.NumberValue `hcl:"count,attr" validate:"required"`
	// Interval: string, required
	Interval terra.StringValue `hcl:"interval,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// StatusCodeRange: string, required
	StatusCodeRange terra.StringValue `hcl:"status_code_range,attr" validate:"required"`
	// SubStatus: number, optional
	SubStatus terra.NumberValue `hcl:"sub_status,attr"`
	// Win32StatusCode: number, optional
	Win32StatusCode terra.NumberValue `hcl:"win32_status_code,attr"`
}

type SiteConfigCors struct {
	// AllowedOrigins: set of string, optional
	AllowedOrigins terra.SetValue[terra.StringValue] `hcl:"allowed_origins,attr"`
	// SupportCredentials: bool, optional
	SupportCredentials terra.BoolValue `hcl:"support_credentials,attr"`
}

type SiteConfigIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigIpRestrictionHeaders: min=0
	Headers []SiteConfigIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type SiteConfigIpRestrictionHeaders struct {
	// XAzureFdid: list of string, optional
	XAzureFdid terra.ListValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: list of string, optional
	XFdHealthProbe terra.ListValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: list of string, optional
	XForwardedFor terra.ListValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: list of string, optional
	XForwardedHost terra.ListValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type SiteConfigScmIpRestriction struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// ServiceTag: string, optional
	ServiceTag terra.StringValue `hcl:"service_tag,attr"`
	// VirtualNetworkSubnetId: string, optional
	VirtualNetworkSubnetId terra.StringValue `hcl:"virtual_network_subnet_id,attr"`
	// SiteConfigScmIpRestrictionHeaders: min=0
	Headers []SiteConfigScmIpRestrictionHeaders `hcl:"headers,block" validate:"min=0"`
}

type SiteConfigScmIpRestrictionHeaders struct {
	// XAzureFdid: list of string, optional
	XAzureFdid terra.ListValue[terra.StringValue] `hcl:"x_azure_fdid,attr"`
	// XFdHealthProbe: list of string, optional
	XFdHealthProbe terra.ListValue[terra.StringValue] `hcl:"x_fd_health_probe,attr"`
	// XForwardedFor: list of string, optional
	XForwardedFor terra.ListValue[terra.StringValue] `hcl:"x_forwarded_for,attr"`
	// XForwardedHost: list of string, optional
	XForwardedHost terra.ListValue[terra.StringValue] `hcl:"x_forwarded_host,attr"`
}

type SiteConfigVirtualApplication struct {
	// PhysicalPath: string, required
	PhysicalPath terra.StringValue `hcl:"physical_path,attr" validate:"required"`
	// Preload: bool, required
	Preload terra.BoolValue `hcl:"preload,attr" validate:"required"`
	// VirtualPath: string, required
	VirtualPath terra.StringValue `hcl:"virtual_path,attr" validate:"required"`
	// SiteConfigVirtualApplicationVirtualDirectory: min=0
	VirtualDirectory []SiteConfigVirtualApplicationVirtualDirectory `hcl:"virtual_directory,block" validate:"min=0"`
}

type SiteConfigVirtualApplicationVirtualDirectory struct {
	// PhysicalPath: string, optional
	PhysicalPath terra.StringValue `hcl:"physical_path,attr"`
	// VirtualPath: string, optional
	VirtualPath terra.StringValue `hcl:"virtual_path,attr"`
}

type StorageAccount struct {
	// AccessKey: string, required
	AccessKey terra.StringValue `hcl:"access_key,attr" validate:"required"`
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// MountPath: string, optional
	MountPath terra.StringValue `hcl:"mount_path,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ShareName: string, required
	ShareName terra.StringValue `hcl:"share_name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SiteCredentialAttributes struct {
	ref terra.Reference
}

func (sc SiteCredentialAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteCredentialAttributes) InternalWithRef(ref terra.Reference) SiteCredentialAttributes {
	return SiteCredentialAttributes{ref: ref}
}

func (sc SiteCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteCredentialAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc SiteCredentialAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("password"))
}

type AuthSettingsAttributes struct {
	ref terra.Reference
}

func (as AuthSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AuthSettingsAttributes) InternalWithRef(ref terra.Reference) AuthSettingsAttributes {
	return AuthSettingsAttributes{ref: ref}
}

func (as AuthSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AuthSettingsAttributes) AdditionalLoginParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("additional_login_parameters"))
}

func (as AuthSettingsAttributes) AllowedExternalRedirectUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("allowed_external_redirect_urls"))
}

func (as AuthSettingsAttributes) DefaultProvider() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("default_provider"))
}

func (as AuthSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enabled"))
}

func (as AuthSettingsAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("issuer"))
}

func (as AuthSettingsAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("runtime_version"))
}

func (as AuthSettingsAttributes) TokenRefreshExtensionHours() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("token_refresh_extension_hours"))
}

func (as AuthSettingsAttributes) TokenStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("token_store_enabled"))
}

func (as AuthSettingsAttributes) UnauthenticatedClientAction() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("unauthenticated_client_action"))
}

func (as AuthSettingsAttributes) ActiveDirectory() terra.ListValue[AuthSettingsActiveDirectoryAttributes] {
	return terra.ReferenceAsList[AuthSettingsActiveDirectoryAttributes](as.ref.Append("active_directory"))
}

func (as AuthSettingsAttributes) Facebook() terra.ListValue[AuthSettingsFacebookAttributes] {
	return terra.ReferenceAsList[AuthSettingsFacebookAttributes](as.ref.Append("facebook"))
}

func (as AuthSettingsAttributes) Github() terra.ListValue[AuthSettingsGithubAttributes] {
	return terra.ReferenceAsList[AuthSettingsGithubAttributes](as.ref.Append("github"))
}

func (as AuthSettingsAttributes) Google() terra.ListValue[AuthSettingsGoogleAttributes] {
	return terra.ReferenceAsList[AuthSettingsGoogleAttributes](as.ref.Append("google"))
}

func (as AuthSettingsAttributes) Microsoft() terra.ListValue[AuthSettingsMicrosoftAttributes] {
	return terra.ReferenceAsList[AuthSettingsMicrosoftAttributes](as.ref.Append("microsoft"))
}

func (as AuthSettingsAttributes) Twitter() terra.ListValue[AuthSettingsTwitterAttributes] {
	return terra.ReferenceAsList[AuthSettingsTwitterAttributes](as.ref.Append("twitter"))
}

type AuthSettingsActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) AuthSettingsActiveDirectoryAttributes {
	return AuthSettingsActiveDirectoryAttributes{ref: ref}
}

func (ad AuthSettingsActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad AuthSettingsActiveDirectoryAttributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ad.ref.Append("allowed_audiences"))
}

func (ad AuthSettingsActiveDirectoryAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_id"))
}

func (ad AuthSettingsActiveDirectoryAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_secret"))
}

func (ad AuthSettingsActiveDirectoryAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("client_secret_setting_name"))
}

type AuthSettingsFacebookAttributes struct {
	ref terra.Reference
}

func (f AuthSettingsFacebookAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f AuthSettingsFacebookAttributes) InternalWithRef(ref terra.Reference) AuthSettingsFacebookAttributes {
	return AuthSettingsFacebookAttributes{ref: ref}
}

func (f AuthSettingsFacebookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f AuthSettingsFacebookAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_id"))
}

func (f AuthSettingsFacebookAttributes) AppSecret() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_secret"))
}

func (f AuthSettingsFacebookAttributes) AppSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("app_secret_setting_name"))
}

func (f AuthSettingsFacebookAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("oauth_scopes"))
}

type AuthSettingsGithubAttributes struct {
	ref terra.Reference
}

func (g AuthSettingsGithubAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g AuthSettingsGithubAttributes) InternalWithRef(ref terra.Reference) AuthSettingsGithubAttributes {
	return AuthSettingsGithubAttributes{ref: ref}
}

func (g AuthSettingsGithubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g AuthSettingsGithubAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_id"))
}

func (g AuthSettingsGithubAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret"))
}

func (g AuthSettingsGithubAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret_setting_name"))
}

func (g AuthSettingsGithubAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("oauth_scopes"))
}

type AuthSettingsGoogleAttributes struct {
	ref terra.Reference
}

func (g AuthSettingsGoogleAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g AuthSettingsGoogleAttributes) InternalWithRef(ref terra.Reference) AuthSettingsGoogleAttributes {
	return AuthSettingsGoogleAttributes{ref: ref}
}

func (g AuthSettingsGoogleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g AuthSettingsGoogleAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_id"))
}

func (g AuthSettingsGoogleAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret"))
}

func (g AuthSettingsGoogleAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("client_secret_setting_name"))
}

func (g AuthSettingsGoogleAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](g.ref.Append("oauth_scopes"))
}

type AuthSettingsMicrosoftAttributes struct {
	ref terra.Reference
}

func (m AuthSettingsMicrosoftAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m AuthSettingsMicrosoftAttributes) InternalWithRef(ref terra.Reference) AuthSettingsMicrosoftAttributes {
	return AuthSettingsMicrosoftAttributes{ref: ref}
}

func (m AuthSettingsMicrosoftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m AuthSettingsMicrosoftAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_id"))
}

func (m AuthSettingsMicrosoftAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_secret"))
}

func (m AuthSettingsMicrosoftAttributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("client_secret_setting_name"))
}

func (m AuthSettingsMicrosoftAttributes) OauthScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("oauth_scopes"))
}

type AuthSettingsTwitterAttributes struct {
	ref terra.Reference
}

func (t AuthSettingsTwitterAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t AuthSettingsTwitterAttributes) InternalWithRef(ref terra.Reference) AuthSettingsTwitterAttributes {
	return AuthSettingsTwitterAttributes{ref: ref}
}

func (t AuthSettingsTwitterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t AuthSettingsTwitterAttributes) ConsumerKey() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_key"))
}

func (t AuthSettingsTwitterAttributes) ConsumerSecret() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_secret"))
}

func (t AuthSettingsTwitterAttributes) ConsumerSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("consumer_secret_setting_name"))
}

type AuthSettingsV2Attributes struct {
	ref terra.Reference
}

func (asv AuthSettingsV2Attributes) InternalRef() (terra.Reference, error) {
	return asv.ref, nil
}

func (asv AuthSettingsV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2Attributes {
	return AuthSettingsV2Attributes{ref: ref}
}

func (asv AuthSettingsV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return asv.ref.InternalTokens()
}

func (asv AuthSettingsV2Attributes) AuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("auth_enabled"))
}

func (asv AuthSettingsV2Attributes) ConfigFilePath() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("config_file_path"))
}

func (asv AuthSettingsV2Attributes) DefaultProvider() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("default_provider"))
}

func (asv AuthSettingsV2Attributes) ExcludedPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asv.ref.Append("excluded_paths"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyConvention() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_convention"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyCustomHostHeaderName() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_custom_host_header_name"))
}

func (asv AuthSettingsV2Attributes) ForwardProxyCustomSchemeHeaderName() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("forward_proxy_custom_scheme_header_name"))
}

func (asv AuthSettingsV2Attributes) HttpRouteApiPrefix() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("http_route_api_prefix"))
}

func (asv AuthSettingsV2Attributes) RequireAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("require_authentication"))
}

func (asv AuthSettingsV2Attributes) RequireHttps() terra.BoolValue {
	return terra.ReferenceAsBool(asv.ref.Append("require_https"))
}

func (asv AuthSettingsV2Attributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("runtime_version"))
}

func (asv AuthSettingsV2Attributes) UnauthenticatedAction() terra.StringValue {
	return terra.ReferenceAsString(asv.ref.Append("unauthenticated_action"))
}

func (asv AuthSettingsV2Attributes) ActiveDirectoryV2() terra.ListValue[AuthSettingsV2ActiveDirectoryV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2ActiveDirectoryV2Attributes](asv.ref.Append("active_directory_v2"))
}

func (asv AuthSettingsV2Attributes) AppleV2() terra.ListValue[AuthSettingsV2AppleV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2AppleV2Attributes](asv.ref.Append("apple_v2"))
}

func (asv AuthSettingsV2Attributes) AzureStaticWebAppV2() terra.ListValue[AuthSettingsV2AzureStaticWebAppV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2AzureStaticWebAppV2Attributes](asv.ref.Append("azure_static_web_app_v2"))
}

func (asv AuthSettingsV2Attributes) CustomOidcV2() terra.ListValue[AuthSettingsV2CustomOidcV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2CustomOidcV2Attributes](asv.ref.Append("custom_oidc_v2"))
}

func (asv AuthSettingsV2Attributes) FacebookV2() terra.ListValue[AuthSettingsV2FacebookV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2FacebookV2Attributes](asv.ref.Append("facebook_v2"))
}

func (asv AuthSettingsV2Attributes) GithubV2() terra.ListValue[AuthSettingsV2GithubV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2GithubV2Attributes](asv.ref.Append("github_v2"))
}

func (asv AuthSettingsV2Attributes) GoogleV2() terra.ListValue[AuthSettingsV2GoogleV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2GoogleV2Attributes](asv.ref.Append("google_v2"))
}

func (asv AuthSettingsV2Attributes) Login() terra.ListValue[AuthSettingsV2LoginAttributes] {
	return terra.ReferenceAsList[AuthSettingsV2LoginAttributes](asv.ref.Append("login"))
}

func (asv AuthSettingsV2Attributes) MicrosoftV2() terra.ListValue[AuthSettingsV2MicrosoftV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2MicrosoftV2Attributes](asv.ref.Append("microsoft_v2"))
}

func (asv AuthSettingsV2Attributes) TwitterV2() terra.ListValue[AuthSettingsV2TwitterV2Attributes] {
	return terra.ReferenceAsList[AuthSettingsV2TwitterV2Attributes](asv.ref.Append("twitter_v2"))
}

type AuthSettingsV2ActiveDirectoryV2Attributes struct {
	ref terra.Reference
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) InternalRef() (terra.Reference, error) {
	return adv.ref, nil
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2ActiveDirectoryV2Attributes {
	return AuthSettingsV2ActiveDirectoryV2Attributes{ref: ref}
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return adv.ref.InternalTokens()
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) AllowedApplications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_applications"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_audiences"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) AllowedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_groups"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) AllowedIdentities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("allowed_identities"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_id"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) ClientSecretCertificateThumbprint() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_secret_certificate_thumbprint"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("client_secret_setting_name"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) JwtAllowedClientApplications() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("jwt_allowed_client_applications"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) JwtAllowedGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adv.ref.Append("jwt_allowed_groups"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) LoginParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adv.ref.Append("login_parameters"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) TenantAuthEndpoint() terra.StringValue {
	return terra.ReferenceAsString(adv.ref.Append("tenant_auth_endpoint"))
}

func (adv AuthSettingsV2ActiveDirectoryV2Attributes) WwwAuthenticationDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(adv.ref.Append("www_authentication_disabled"))
}

type AuthSettingsV2AppleV2Attributes struct {
	ref terra.Reference
}

func (av AuthSettingsV2AppleV2Attributes) InternalRef() (terra.Reference, error) {
	return av.ref, nil
}

func (av AuthSettingsV2AppleV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2AppleV2Attributes {
	return AuthSettingsV2AppleV2Attributes{ref: ref}
}

func (av AuthSettingsV2AppleV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return av.ref.InternalTokens()
}

func (av AuthSettingsV2AppleV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("client_id"))
}

func (av AuthSettingsV2AppleV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("client_secret_setting_name"))
}

func (av AuthSettingsV2AppleV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](av.ref.Append("login_scopes"))
}

type AuthSettingsV2AzureStaticWebAppV2Attributes struct {
	ref terra.Reference
}

func (aswav AuthSettingsV2AzureStaticWebAppV2Attributes) InternalRef() (terra.Reference, error) {
	return aswav.ref, nil
}

func (aswav AuthSettingsV2AzureStaticWebAppV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2AzureStaticWebAppV2Attributes {
	return AuthSettingsV2AzureStaticWebAppV2Attributes{ref: ref}
}

func (aswav AuthSettingsV2AzureStaticWebAppV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return aswav.ref.InternalTokens()
}

func (aswav AuthSettingsV2AzureStaticWebAppV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(aswav.ref.Append("client_id"))
}

type AuthSettingsV2CustomOidcV2Attributes struct {
	ref terra.Reference
}

func (cov AuthSettingsV2CustomOidcV2Attributes) InternalRef() (terra.Reference, error) {
	return cov.ref, nil
}

func (cov AuthSettingsV2CustomOidcV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2CustomOidcV2Attributes {
	return AuthSettingsV2CustomOidcV2Attributes{ref: ref}
}

func (cov AuthSettingsV2CustomOidcV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return cov.ref.InternalTokens()
}

func (cov AuthSettingsV2CustomOidcV2Attributes) AuthorisationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("authorisation_endpoint"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) CertificationUri() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("certification_uri"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) ClientCredentialMethod() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_credential_method"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_id"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("client_secret_setting_name"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) IssuerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("issuer_endpoint"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("name"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) NameClaimType() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("name_claim_type"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) OpenidConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("openid_configuration_endpoint"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) Scopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cov.ref.Append("scopes"))
}

func (cov AuthSettingsV2CustomOidcV2Attributes) TokenEndpoint() terra.StringValue {
	return terra.ReferenceAsString(cov.ref.Append("token_endpoint"))
}

type AuthSettingsV2FacebookV2Attributes struct {
	ref terra.Reference
}

func (fv AuthSettingsV2FacebookV2Attributes) InternalRef() (terra.Reference, error) {
	return fv.ref, nil
}

func (fv AuthSettingsV2FacebookV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2FacebookV2Attributes {
	return AuthSettingsV2FacebookV2Attributes{ref: ref}
}

func (fv AuthSettingsV2FacebookV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return fv.ref.InternalTokens()
}

func (fv AuthSettingsV2FacebookV2Attributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("app_id"))
}

func (fv AuthSettingsV2FacebookV2Attributes) AppSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("app_secret_setting_name"))
}

func (fv AuthSettingsV2FacebookV2Attributes) GraphApiVersion() terra.StringValue {
	return terra.ReferenceAsString(fv.ref.Append("graph_api_version"))
}

func (fv AuthSettingsV2FacebookV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fv.ref.Append("login_scopes"))
}

type AuthSettingsV2GithubV2Attributes struct {
	ref terra.Reference
}

func (gv AuthSettingsV2GithubV2Attributes) InternalRef() (terra.Reference, error) {
	return gv.ref, nil
}

func (gv AuthSettingsV2GithubV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2GithubV2Attributes {
	return AuthSettingsV2GithubV2Attributes{ref: ref}
}

func (gv AuthSettingsV2GithubV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return gv.ref.InternalTokens()
}

func (gv AuthSettingsV2GithubV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_id"))
}

func (gv AuthSettingsV2GithubV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_secret_setting_name"))
}

func (gv AuthSettingsV2GithubV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("login_scopes"))
}

type AuthSettingsV2GoogleV2Attributes struct {
	ref terra.Reference
}

func (gv AuthSettingsV2GoogleV2Attributes) InternalRef() (terra.Reference, error) {
	return gv.ref, nil
}

func (gv AuthSettingsV2GoogleV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2GoogleV2Attributes {
	return AuthSettingsV2GoogleV2Attributes{ref: ref}
}

func (gv AuthSettingsV2GoogleV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return gv.ref.InternalTokens()
}

func (gv AuthSettingsV2GoogleV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("allowed_audiences"))
}

func (gv AuthSettingsV2GoogleV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_id"))
}

func (gv AuthSettingsV2GoogleV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(gv.ref.Append("client_secret_setting_name"))
}

func (gv AuthSettingsV2GoogleV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gv.ref.Append("login_scopes"))
}

type AuthSettingsV2LoginAttributes struct {
	ref terra.Reference
}

func (l AuthSettingsV2LoginAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l AuthSettingsV2LoginAttributes) InternalWithRef(ref terra.Reference) AuthSettingsV2LoginAttributes {
	return AuthSettingsV2LoginAttributes{ref: ref}
}

func (l AuthSettingsV2LoginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l AuthSettingsV2LoginAttributes) AllowedExternalRedirectUrls() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("allowed_external_redirect_urls"))
}

func (l AuthSettingsV2LoginAttributes) CookieExpirationConvention() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cookie_expiration_convention"))
}

func (l AuthSettingsV2LoginAttributes) CookieExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cookie_expiration_time"))
}

func (l AuthSettingsV2LoginAttributes) LogoutEndpoint() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("logout_endpoint"))
}

func (l AuthSettingsV2LoginAttributes) NonceExpirationTime() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("nonce_expiration_time"))
}

func (l AuthSettingsV2LoginAttributes) PreserveUrlFragmentsForLogins() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("preserve_url_fragments_for_logins"))
}

func (l AuthSettingsV2LoginAttributes) TokenRefreshExtensionTime() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("token_refresh_extension_time"))
}

func (l AuthSettingsV2LoginAttributes) TokenStoreEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("token_store_enabled"))
}

func (l AuthSettingsV2LoginAttributes) TokenStorePath() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("token_store_path"))
}

func (l AuthSettingsV2LoginAttributes) TokenStoreSasSettingName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("token_store_sas_setting_name"))
}

func (l AuthSettingsV2LoginAttributes) ValidateNonce() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("validate_nonce"))
}

type AuthSettingsV2MicrosoftV2Attributes struct {
	ref terra.Reference
}

func (mv AuthSettingsV2MicrosoftV2Attributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv AuthSettingsV2MicrosoftV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2MicrosoftV2Attributes {
	return AuthSettingsV2MicrosoftV2Attributes{ref: ref}
}

func (mv AuthSettingsV2MicrosoftV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv AuthSettingsV2MicrosoftV2Attributes) AllowedAudiences() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mv.ref.Append("allowed_audiences"))
}

func (mv AuthSettingsV2MicrosoftV2Attributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("client_id"))
}

func (mv AuthSettingsV2MicrosoftV2Attributes) ClientSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("client_secret_setting_name"))
}

func (mv AuthSettingsV2MicrosoftV2Attributes) LoginScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mv.ref.Append("login_scopes"))
}

type AuthSettingsV2TwitterV2Attributes struct {
	ref terra.Reference
}

func (tv AuthSettingsV2TwitterV2Attributes) InternalRef() (terra.Reference, error) {
	return tv.ref, nil
}

func (tv AuthSettingsV2TwitterV2Attributes) InternalWithRef(ref terra.Reference) AuthSettingsV2TwitterV2Attributes {
	return AuthSettingsV2TwitterV2Attributes{ref: ref}
}

func (tv AuthSettingsV2TwitterV2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return tv.ref.InternalTokens()
}

func (tv AuthSettingsV2TwitterV2Attributes) ConsumerKey() terra.StringValue {
	return terra.ReferenceAsString(tv.ref.Append("consumer_key"))
}

func (tv AuthSettingsV2TwitterV2Attributes) ConsumerSecretSettingName() terra.StringValue {
	return terra.ReferenceAsString(tv.ref.Append("consumer_secret_setting_name"))
}

type BackupAttributes struct {
	ref terra.Reference
}

func (b BackupAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackupAttributes) InternalWithRef(ref terra.Reference) BackupAttributes {
	return BackupAttributes{ref: ref}
}

func (b BackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackupAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("enabled"))
}

func (b BackupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b BackupAttributes) StorageAccountUrl() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("storage_account_url"))
}

func (b BackupAttributes) Schedule() terra.ListValue[BackupScheduleAttributes] {
	return terra.ReferenceAsList[BackupScheduleAttributes](b.ref.Append("schedule"))
}

type BackupScheduleAttributes struct {
	ref terra.Reference
}

func (s BackupScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BackupScheduleAttributes) InternalWithRef(ref terra.Reference) BackupScheduleAttributes {
	return BackupScheduleAttributes{ref: ref}
}

func (s BackupScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BackupScheduleAttributes) FrequencyInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("frequency_interval"))
}

func (s BackupScheduleAttributes) FrequencyUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency_unit"))
}

func (s BackupScheduleAttributes) KeepAtLeastOneBackup() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("keep_at_least_one_backup"))
}

func (s BackupScheduleAttributes) LastExecutionTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("last_execution_time"))
}

func (s BackupScheduleAttributes) RetentionPeriodDays() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("retention_period_days"))
}

func (s BackupScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

type ConnectionStringAttributes struct {
	ref terra.Reference
}

func (cs ConnectionStringAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConnectionStringAttributes) InternalWithRef(ref terra.Reference) ConnectionStringAttributes {
	return ConnectionStringAttributes{ref: ref}
}

func (cs ConnectionStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConnectionStringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs ConnectionStringAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

func (cs ConnectionStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type LogsAttributes struct {
	ref terra.Reference
}

func (l LogsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LogsAttributes) InternalWithRef(ref terra.Reference) LogsAttributes {
	return LogsAttributes{ref: ref}
}

func (l LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LogsAttributes) DetailedErrorMessages() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("detailed_error_messages"))
}

func (l LogsAttributes) FailedRequestTracing() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("failed_request_tracing"))
}

func (l LogsAttributes) ApplicationLogs() terra.ListValue[LogsApplicationLogsAttributes] {
	return terra.ReferenceAsList[LogsApplicationLogsAttributes](l.ref.Append("application_logs"))
}

func (l LogsAttributes) HttpLogs() terra.ListValue[LogsHttpLogsAttributes] {
	return terra.ReferenceAsList[LogsHttpLogsAttributes](l.ref.Append("http_logs"))
}

type LogsApplicationLogsAttributes struct {
	ref terra.Reference
}

func (al LogsApplicationLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al LogsApplicationLogsAttributes) InternalWithRef(ref terra.Reference) LogsApplicationLogsAttributes {
	return LogsApplicationLogsAttributes{ref: ref}
}

func (al LogsApplicationLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al LogsApplicationLogsAttributes) FileSystemLevel() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("file_system_level"))
}

func (al LogsApplicationLogsAttributes) AzureBlobStorage() terra.ListValue[LogsApplicationLogsAzureBlobStorageAttributes] {
	return terra.ReferenceAsList[LogsApplicationLogsAzureBlobStorageAttributes](al.ref.Append("azure_blob_storage"))
}

type LogsApplicationLogsAzureBlobStorageAttributes struct {
	ref terra.Reference
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) InternalRef() (terra.Reference, error) {
	return abs.ref, nil
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) InternalWithRef(ref terra.Reference) LogsApplicationLogsAzureBlobStorageAttributes {
	return LogsApplicationLogsAzureBlobStorageAttributes{ref: ref}
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abs.ref.InternalTokens()
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("level"))
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(abs.ref.Append("retention_in_days"))
}

func (abs LogsApplicationLogsAzureBlobStorageAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("sas_url"))
}

type LogsHttpLogsAttributes struct {
	ref terra.Reference
}

func (hl LogsHttpLogsAttributes) InternalRef() (terra.Reference, error) {
	return hl.ref, nil
}

func (hl LogsHttpLogsAttributes) InternalWithRef(ref terra.Reference) LogsHttpLogsAttributes {
	return LogsHttpLogsAttributes{ref: ref}
}

func (hl LogsHttpLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hl.ref.InternalTokens()
}

func (hl LogsHttpLogsAttributes) AzureBlobStorage() terra.ListValue[LogsHttpLogsAzureBlobStorageAttributes] {
	return terra.ReferenceAsList[LogsHttpLogsAzureBlobStorageAttributes](hl.ref.Append("azure_blob_storage"))
}

func (hl LogsHttpLogsAttributes) FileSystem() terra.ListValue[LogsHttpLogsFileSystemAttributes] {
	return terra.ReferenceAsList[LogsHttpLogsFileSystemAttributes](hl.ref.Append("file_system"))
}

type LogsHttpLogsAzureBlobStorageAttributes struct {
	ref terra.Reference
}

func (abs LogsHttpLogsAzureBlobStorageAttributes) InternalRef() (terra.Reference, error) {
	return abs.ref, nil
}

func (abs LogsHttpLogsAzureBlobStorageAttributes) InternalWithRef(ref terra.Reference) LogsHttpLogsAzureBlobStorageAttributes {
	return LogsHttpLogsAzureBlobStorageAttributes{ref: ref}
}

func (abs LogsHttpLogsAzureBlobStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abs.ref.InternalTokens()
}

func (abs LogsHttpLogsAzureBlobStorageAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(abs.ref.Append("retention_in_days"))
}

func (abs LogsHttpLogsAzureBlobStorageAttributes) SasUrl() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("sas_url"))
}

type LogsHttpLogsFileSystemAttributes struct {
	ref terra.Reference
}

func (fs LogsHttpLogsFileSystemAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs LogsHttpLogsFileSystemAttributes) InternalWithRef(ref terra.Reference) LogsHttpLogsFileSystemAttributes {
	return LogsHttpLogsFileSystemAttributes{ref: ref}
}

func (fs LogsHttpLogsFileSystemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs LogsHttpLogsFileSystemAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("retention_in_days"))
}

func (fs LogsHttpLogsFileSystemAttributes) RetentionInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(fs.ref.Append("retention_in_mb"))
}

type SiteConfigAttributes struct {
	ref terra.Reference
}

func (sc SiteConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteConfigAttributes) InternalWithRef(ref terra.Reference) SiteConfigAttributes {
	return SiteConfigAttributes{ref: ref}
}

func (sc SiteConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteConfigAttributes) AlwaysOn() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("always_on"))
}

func (sc SiteConfigAttributes) ApiDefinitionUrl() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("api_definition_url"))
}

func (sc SiteConfigAttributes) ApiManagementApiId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("api_management_api_id"))
}

func (sc SiteConfigAttributes) AppCommandLine() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("app_command_line"))
}

func (sc SiteConfigAttributes) AutoHealEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("auto_heal_enabled"))
}

func (sc SiteConfigAttributes) AutoSwapSlotName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("auto_swap_slot_name"))
}

func (sc SiteConfigAttributes) ContainerRegistryManagedIdentityClientId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("container_registry_managed_identity_client_id"))
}

func (sc SiteConfigAttributes) ContainerRegistryUseManagedIdentity() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("container_registry_use_managed_identity"))
}

func (sc SiteConfigAttributes) DefaultDocuments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("default_documents"))
}

func (sc SiteConfigAttributes) DetailedErrorLoggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("detailed_error_logging_enabled"))
}

func (sc SiteConfigAttributes) FtpsState() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ftps_state"))
}

func (sc SiteConfigAttributes) HealthCheckEvictionTimeInMin() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("health_check_eviction_time_in_min"))
}

func (sc SiteConfigAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("health_check_path"))
}

func (sc SiteConfigAttributes) Http2Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("http2_enabled"))
}

func (sc SiteConfigAttributes) IpRestrictionDefaultAction() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ip_restriction_default_action"))
}

func (sc SiteConfigAttributes) LoadBalancingMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("load_balancing_mode"))
}

func (sc SiteConfigAttributes) LocalMysqlEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("local_mysql_enabled"))
}

func (sc SiteConfigAttributes) ManagedPipelineMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("managed_pipeline_mode"))
}

func (sc SiteConfigAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("minimum_tls_version"))
}

func (sc SiteConfigAttributes) RemoteDebuggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("remote_debugging_enabled"))
}

func (sc SiteConfigAttributes) RemoteDebuggingVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("remote_debugging_version"))
}

func (sc SiteConfigAttributes) ScmIpRestrictionDefaultAction() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_ip_restriction_default_action"))
}

func (sc SiteConfigAttributes) ScmMinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_minimum_tls_version"))
}

func (sc SiteConfigAttributes) ScmType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("scm_type"))
}

func (sc SiteConfigAttributes) ScmUseMainIpRestriction() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("scm_use_main_ip_restriction"))
}

func (sc SiteConfigAttributes) Use32BitWorker() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("use_32_bit_worker"))
}

func (sc SiteConfigAttributes) VnetRouteAllEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("vnet_route_all_enabled"))
}

func (sc SiteConfigAttributes) WebsocketsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("websockets_enabled"))
}

func (sc SiteConfigAttributes) WindowsFxVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("windows_fx_version"))
}

func (sc SiteConfigAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("worker_count"))
}

func (sc SiteConfigAttributes) ApplicationStack() terra.ListValue[SiteConfigApplicationStackAttributes] {
	return terra.ReferenceAsList[SiteConfigApplicationStackAttributes](sc.ref.Append("application_stack"))
}

func (sc SiteConfigAttributes) AutoHealSetting() terra.ListValue[SiteConfigAutoHealSettingAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingAttributes](sc.ref.Append("auto_heal_setting"))
}

func (sc SiteConfigAttributes) Cors() terra.ListValue[SiteConfigCorsAttributes] {
	return terra.ReferenceAsList[SiteConfigCorsAttributes](sc.ref.Append("cors"))
}

func (sc SiteConfigAttributes) IpRestriction() terra.ListValue[SiteConfigIpRestrictionAttributes] {
	return terra.ReferenceAsList[SiteConfigIpRestrictionAttributes](sc.ref.Append("ip_restriction"))
}

func (sc SiteConfigAttributes) ScmIpRestriction() terra.ListValue[SiteConfigScmIpRestrictionAttributes] {
	return terra.ReferenceAsList[SiteConfigScmIpRestrictionAttributes](sc.ref.Append("scm_ip_restriction"))
}

func (sc SiteConfigAttributes) VirtualApplication() terra.SetValue[SiteConfigVirtualApplicationAttributes] {
	return terra.ReferenceAsSet[SiteConfigVirtualApplicationAttributes](sc.ref.Append("virtual_application"))
}

type SiteConfigApplicationStackAttributes struct {
	ref terra.Reference
}

func (as SiteConfigApplicationStackAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as SiteConfigApplicationStackAttributes) InternalWithRef(ref terra.Reference) SiteConfigApplicationStackAttributes {
	return SiteConfigApplicationStackAttributes{ref: ref}
}

func (as SiteConfigApplicationStackAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as SiteConfigApplicationStackAttributes) CurrentStack() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("current_stack"))
}

func (as SiteConfigApplicationStackAttributes) DockerContainerName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_name"))
}

func (as SiteConfigApplicationStackAttributes) DockerContainerRegistry() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_registry"))
}

func (as SiteConfigApplicationStackAttributes) DockerContainerTag() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_container_tag"))
}

func (as SiteConfigApplicationStackAttributes) DockerImageName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_image_name"))
}

func (as SiteConfigApplicationStackAttributes) DockerRegistryPassword() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_registry_password"))
}

func (as SiteConfigApplicationStackAttributes) DockerRegistryUrl() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_registry_url"))
}

func (as SiteConfigApplicationStackAttributes) DockerRegistryUsername() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("docker_registry_username"))
}

func (as SiteConfigApplicationStackAttributes) DotnetCoreVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("dotnet_core_version"))
}

func (as SiteConfigApplicationStackAttributes) DotnetVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("dotnet_version"))
}

func (as SiteConfigApplicationStackAttributes) JavaContainer() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_container"))
}

func (as SiteConfigApplicationStackAttributes) JavaContainerVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_container_version"))
}

func (as SiteConfigApplicationStackAttributes) JavaEmbeddedServerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("java_embedded_server_enabled"))
}

func (as SiteConfigApplicationStackAttributes) JavaVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("java_version"))
}

func (as SiteConfigApplicationStackAttributes) NodeVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("node_version"))
}

func (as SiteConfigApplicationStackAttributes) PhpVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("php_version"))
}

func (as SiteConfigApplicationStackAttributes) Python() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("python"))
}

func (as SiteConfigApplicationStackAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("python_version"))
}

func (as SiteConfigApplicationStackAttributes) TomcatVersion() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("tomcat_version"))
}

type SiteConfigAutoHealSettingAttributes struct {
	ref terra.Reference
}

func (ahs SiteConfigAutoHealSettingAttributes) InternalRef() (terra.Reference, error) {
	return ahs.ref, nil
}

func (ahs SiteConfigAutoHealSettingAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingAttributes {
	return SiteConfigAutoHealSettingAttributes{ref: ref}
}

func (ahs SiteConfigAutoHealSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ahs.ref.InternalTokens()
}

func (ahs SiteConfigAutoHealSettingAttributes) Action() terra.ListValue[SiteConfigAutoHealSettingActionAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingActionAttributes](ahs.ref.Append("action"))
}

func (ahs SiteConfigAutoHealSettingAttributes) Trigger() terra.ListValue[SiteConfigAutoHealSettingTriggerAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingTriggerAttributes](ahs.ref.Append("trigger"))
}

type SiteConfigAutoHealSettingActionAttributes struct {
	ref terra.Reference
}

func (a SiteConfigAutoHealSettingActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SiteConfigAutoHealSettingActionAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingActionAttributes {
	return SiteConfigAutoHealSettingActionAttributes{ref: ref}
}

func (a SiteConfigAutoHealSettingActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SiteConfigAutoHealSettingActionAttributes) ActionType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_type"))
}

func (a SiteConfigAutoHealSettingActionAttributes) MinimumProcessExecutionTime() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("minimum_process_execution_time"))
}

func (a SiteConfigAutoHealSettingActionAttributes) CustomAction() terra.ListValue[SiteConfigAutoHealSettingActionCustomActionAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingActionCustomActionAttributes](a.ref.Append("custom_action"))
}

type SiteConfigAutoHealSettingActionCustomActionAttributes struct {
	ref terra.Reference
}

func (ca SiteConfigAutoHealSettingActionCustomActionAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca SiteConfigAutoHealSettingActionCustomActionAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingActionCustomActionAttributes {
	return SiteConfigAutoHealSettingActionCustomActionAttributes{ref: ref}
}

func (ca SiteConfigAutoHealSettingActionCustomActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca SiteConfigAutoHealSettingActionCustomActionAttributes) Executable() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("executable"))
}

func (ca SiteConfigAutoHealSettingActionCustomActionAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("parameters"))
}

type SiteConfigAutoHealSettingTriggerAttributes struct {
	ref terra.Reference
}

func (t SiteConfigAutoHealSettingTriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SiteConfigAutoHealSettingTriggerAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingTriggerAttributes {
	return SiteConfigAutoHealSettingTriggerAttributes{ref: ref}
}

func (t SiteConfigAutoHealSettingTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SiteConfigAutoHealSettingTriggerAttributes) PrivateMemoryKb() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("private_memory_kb"))
}

func (t SiteConfigAutoHealSettingTriggerAttributes) Requests() terra.ListValue[SiteConfigAutoHealSettingTriggerRequestsAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingTriggerRequestsAttributes](t.ref.Append("requests"))
}

func (t SiteConfigAutoHealSettingTriggerAttributes) SlowRequest() terra.ListValue[SiteConfigAutoHealSettingTriggerSlowRequestAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingTriggerSlowRequestAttributes](t.ref.Append("slow_request"))
}

func (t SiteConfigAutoHealSettingTriggerAttributes) StatusCode() terra.ListValue[SiteConfigAutoHealSettingTriggerStatusCodeAttributes] {
	return terra.ReferenceAsList[SiteConfigAutoHealSettingTriggerStatusCodeAttributes](t.ref.Append("status_code"))
}

type SiteConfigAutoHealSettingTriggerRequestsAttributes struct {
	ref terra.Reference
}

func (r SiteConfigAutoHealSettingTriggerRequestsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SiteConfigAutoHealSettingTriggerRequestsAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingTriggerRequestsAttributes {
	return SiteConfigAutoHealSettingTriggerRequestsAttributes{ref: ref}
}

func (r SiteConfigAutoHealSettingTriggerRequestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SiteConfigAutoHealSettingTriggerRequestsAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("count"))
}

func (r SiteConfigAutoHealSettingTriggerRequestsAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("interval"))
}

type SiteConfigAutoHealSettingTriggerSlowRequestAttributes struct {
	ref terra.Reference
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingTriggerSlowRequestAttributes {
	return SiteConfigAutoHealSettingTriggerSlowRequestAttributes{ref: ref}
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("count"))
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("interval"))
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("path"))
}

func (sr SiteConfigAutoHealSettingTriggerSlowRequestAttributes) TimeTaken() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("time_taken"))
}

type SiteConfigAutoHealSettingTriggerStatusCodeAttributes struct {
	ref terra.Reference
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) InternalWithRef(ref terra.Reference) SiteConfigAutoHealSettingTriggerStatusCodeAttributes {
	return SiteConfigAutoHealSettingTriggerStatusCodeAttributes{ref: ref}
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("count"))
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("interval"))
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("path"))
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) StatusCodeRange() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("status_code_range"))
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) SubStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sub_status"))
}

func (sc SiteConfigAutoHealSettingTriggerStatusCodeAttributes) Win32StatusCode() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("win32_status_code"))
}

type SiteConfigCorsAttributes struct {
	ref terra.Reference
}

func (c SiteConfigCorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SiteConfigCorsAttributes) InternalWithRef(ref terra.Reference) SiteConfigCorsAttributes {
	return SiteConfigCorsAttributes{ref: ref}
}

func (c SiteConfigCorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SiteConfigCorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c SiteConfigCorsAttributes) SupportCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("support_credentials"))
}

type SiteConfigIpRestrictionAttributes struct {
	ref terra.Reference
}

func (ir SiteConfigIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir SiteConfigIpRestrictionAttributes) InternalWithRef(ref terra.Reference) SiteConfigIpRestrictionAttributes {
	return SiteConfigIpRestrictionAttributes{ref: ref}
}

func (ir SiteConfigIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir SiteConfigIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("action"))
}

func (ir SiteConfigIpRestrictionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("description"))
}

func (ir SiteConfigIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("ip_address"))
}

func (ir SiteConfigIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("name"))
}

func (ir SiteConfigIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("priority"))
}

func (ir SiteConfigIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("service_tag"))
}

func (ir SiteConfigIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("virtual_network_subnet_id"))
}

func (ir SiteConfigIpRestrictionAttributes) Headers() terra.ListValue[SiteConfigIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[SiteConfigIpRestrictionHeadersAttributes](ir.ref.Append("headers"))
}

type SiteConfigIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) SiteConfigIpRestrictionHeadersAttributes {
	return SiteConfigIpRestrictionHeadersAttributes{ref: ref}
}

func (h SiteConfigIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SiteConfigIpRestrictionHeadersAttributes) XAzureFdid() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XFdHealthProbe() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XForwardedFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h SiteConfigIpRestrictionHeadersAttributes) XForwardedHost() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type SiteConfigScmIpRestrictionAttributes struct {
	ref terra.Reference
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalRef() (terra.Reference, error) {
	return sir.ref, nil
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalWithRef(ref terra.Reference) SiteConfigScmIpRestrictionAttributes {
	return SiteConfigScmIpRestrictionAttributes{ref: ref}
}

func (sir SiteConfigScmIpRestrictionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sir.ref.InternalTokens()
}

func (sir SiteConfigScmIpRestrictionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("action"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("description"))
}

func (sir SiteConfigScmIpRestrictionAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("ip_address"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("name"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(sir.ref.Append("priority"))
}

func (sir SiteConfigScmIpRestrictionAttributes) ServiceTag() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("service_tag"))
}

func (sir SiteConfigScmIpRestrictionAttributes) VirtualNetworkSubnetId() terra.StringValue {
	return terra.ReferenceAsString(sir.ref.Append("virtual_network_subnet_id"))
}

func (sir SiteConfigScmIpRestrictionAttributes) Headers() terra.ListValue[SiteConfigScmIpRestrictionHeadersAttributes] {
	return terra.ReferenceAsList[SiteConfigScmIpRestrictionHeadersAttributes](sir.ref.Append("headers"))
}

type SiteConfigScmIpRestrictionHeadersAttributes struct {
	ref terra.Reference
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalWithRef(ref terra.Reference) SiteConfigScmIpRestrictionHeadersAttributes {
	return SiteConfigScmIpRestrictionHeadersAttributes{ref: ref}
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XAzureFdid() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_azure_fdid"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XFdHealthProbe() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_fd_health_probe"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XForwardedFor() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_for"))
}

func (h SiteConfigScmIpRestrictionHeadersAttributes) XForwardedHost() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](h.ref.Append("x_forwarded_host"))
}

type SiteConfigVirtualApplicationAttributes struct {
	ref terra.Reference
}

func (va SiteConfigVirtualApplicationAttributes) InternalRef() (terra.Reference, error) {
	return va.ref, nil
}

func (va SiteConfigVirtualApplicationAttributes) InternalWithRef(ref terra.Reference) SiteConfigVirtualApplicationAttributes {
	return SiteConfigVirtualApplicationAttributes{ref: ref}
}

func (va SiteConfigVirtualApplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return va.ref.InternalTokens()
}

func (va SiteConfigVirtualApplicationAttributes) PhysicalPath() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("physical_path"))
}

func (va SiteConfigVirtualApplicationAttributes) Preload() terra.BoolValue {
	return terra.ReferenceAsBool(va.ref.Append("preload"))
}

func (va SiteConfigVirtualApplicationAttributes) VirtualPath() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("virtual_path"))
}

func (va SiteConfigVirtualApplicationAttributes) VirtualDirectory() terra.SetValue[SiteConfigVirtualApplicationVirtualDirectoryAttributes] {
	return terra.ReferenceAsSet[SiteConfigVirtualApplicationVirtualDirectoryAttributes](va.ref.Append("virtual_directory"))
}

type SiteConfigVirtualApplicationVirtualDirectoryAttributes struct {
	ref terra.Reference
}

func (vd SiteConfigVirtualApplicationVirtualDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return vd.ref, nil
}

func (vd SiteConfigVirtualApplicationVirtualDirectoryAttributes) InternalWithRef(ref terra.Reference) SiteConfigVirtualApplicationVirtualDirectoryAttributes {
	return SiteConfigVirtualApplicationVirtualDirectoryAttributes{ref: ref}
}

func (vd SiteConfigVirtualApplicationVirtualDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vd.ref.InternalTokens()
}

func (vd SiteConfigVirtualApplicationVirtualDirectoryAttributes) PhysicalPath() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("physical_path"))
}

func (vd SiteConfigVirtualApplicationVirtualDirectoryAttributes) VirtualPath() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("virtual_path"))
}

type StorageAccountAttributes struct {
	ref terra.Reference
}

func (sa StorageAccountAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa StorageAccountAttributes) InternalWithRef(ref terra.Reference) StorageAccountAttributes {
	return StorageAccountAttributes{ref: ref}
}

func (sa StorageAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa StorageAccountAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("access_key"))
}

func (sa StorageAccountAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("account_name"))
}

func (sa StorageAccountAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("mount_path"))
}

func (sa StorageAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa StorageAccountAttributes) ShareName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("share_name"))
}

func (sa StorageAccountAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SiteCredentialState struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type AuthSettingsState struct {
	AdditionalLoginParameters   map[string]string                  `json:"additional_login_parameters"`
	AllowedExternalRedirectUrls []string                           `json:"allowed_external_redirect_urls"`
	DefaultProvider             string                             `json:"default_provider"`
	Enabled                     bool                               `json:"enabled"`
	Issuer                      string                             `json:"issuer"`
	RuntimeVersion              string                             `json:"runtime_version"`
	TokenRefreshExtensionHours  float64                            `json:"token_refresh_extension_hours"`
	TokenStoreEnabled           bool                               `json:"token_store_enabled"`
	UnauthenticatedClientAction string                             `json:"unauthenticated_client_action"`
	ActiveDirectory             []AuthSettingsActiveDirectoryState `json:"active_directory"`
	Facebook                    []AuthSettingsFacebookState        `json:"facebook"`
	Github                      []AuthSettingsGithubState          `json:"github"`
	Google                      []AuthSettingsGoogleState          `json:"google"`
	Microsoft                   []AuthSettingsMicrosoftState       `json:"microsoft"`
	Twitter                     []AuthSettingsTwitterState         `json:"twitter"`
}

type AuthSettingsActiveDirectoryState struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
}

type AuthSettingsFacebookState struct {
	AppId                string   `json:"app_id"`
	AppSecret            string   `json:"app_secret"`
	AppSecretSettingName string   `json:"app_secret_setting_name"`
	OauthScopes          []string `json:"oauth_scopes"`
}

type AuthSettingsGithubState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type AuthSettingsGoogleState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type AuthSettingsMicrosoftState struct {
	ClientId                string   `json:"client_id"`
	ClientSecret            string   `json:"client_secret"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	OauthScopes             []string `json:"oauth_scopes"`
}

type AuthSettingsTwitterState struct {
	ConsumerKey               string `json:"consumer_key"`
	ConsumerSecret            string `json:"consumer_secret"`
	ConsumerSecretSettingName string `json:"consumer_secret_setting_name"`
}

type AuthSettingsV2State struct {
	AuthEnabled                        bool                                     `json:"auth_enabled"`
	ConfigFilePath                     string                                   `json:"config_file_path"`
	DefaultProvider                    string                                   `json:"default_provider"`
	ExcludedPaths                      []string                                 `json:"excluded_paths"`
	ForwardProxyConvention             string                                   `json:"forward_proxy_convention"`
	ForwardProxyCustomHostHeaderName   string                                   `json:"forward_proxy_custom_host_header_name"`
	ForwardProxyCustomSchemeHeaderName string                                   `json:"forward_proxy_custom_scheme_header_name"`
	HttpRouteApiPrefix                 string                                   `json:"http_route_api_prefix"`
	RequireAuthentication              bool                                     `json:"require_authentication"`
	RequireHttps                       bool                                     `json:"require_https"`
	RuntimeVersion                     string                                   `json:"runtime_version"`
	UnauthenticatedAction              string                                   `json:"unauthenticated_action"`
	ActiveDirectoryV2                  []AuthSettingsV2ActiveDirectoryV2State   `json:"active_directory_v2"`
	AppleV2                            []AuthSettingsV2AppleV2State             `json:"apple_v2"`
	AzureStaticWebAppV2                []AuthSettingsV2AzureStaticWebAppV2State `json:"azure_static_web_app_v2"`
	CustomOidcV2                       []AuthSettingsV2CustomOidcV2State        `json:"custom_oidc_v2"`
	FacebookV2                         []AuthSettingsV2FacebookV2State          `json:"facebook_v2"`
	GithubV2                           []AuthSettingsV2GithubV2State            `json:"github_v2"`
	GoogleV2                           []AuthSettingsV2GoogleV2State            `json:"google_v2"`
	Login                              []AuthSettingsV2LoginState               `json:"login"`
	MicrosoftV2                        []AuthSettingsV2MicrosoftV2State         `json:"microsoft_v2"`
	TwitterV2                          []AuthSettingsV2TwitterV2State           `json:"twitter_v2"`
}

type AuthSettingsV2ActiveDirectoryV2State struct {
	AllowedApplications               []string          `json:"allowed_applications"`
	AllowedAudiences                  []string          `json:"allowed_audiences"`
	AllowedGroups                     []string          `json:"allowed_groups"`
	AllowedIdentities                 []string          `json:"allowed_identities"`
	ClientId                          string            `json:"client_id"`
	ClientSecretCertificateThumbprint string            `json:"client_secret_certificate_thumbprint"`
	ClientSecretSettingName           string            `json:"client_secret_setting_name"`
	JwtAllowedClientApplications      []string          `json:"jwt_allowed_client_applications"`
	JwtAllowedGroups                  []string          `json:"jwt_allowed_groups"`
	LoginParameters                   map[string]string `json:"login_parameters"`
	TenantAuthEndpoint                string            `json:"tenant_auth_endpoint"`
	WwwAuthenticationDisabled         bool              `json:"www_authentication_disabled"`
}

type AuthSettingsV2AppleV2State struct {
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type AuthSettingsV2AzureStaticWebAppV2State struct {
	ClientId string `json:"client_id"`
}

type AuthSettingsV2CustomOidcV2State struct {
	AuthorisationEndpoint       string   `json:"authorisation_endpoint"`
	CertificationUri            string   `json:"certification_uri"`
	ClientCredentialMethod      string   `json:"client_credential_method"`
	ClientId                    string   `json:"client_id"`
	ClientSecretSettingName     string   `json:"client_secret_setting_name"`
	IssuerEndpoint              string   `json:"issuer_endpoint"`
	Name                        string   `json:"name"`
	NameClaimType               string   `json:"name_claim_type"`
	OpenidConfigurationEndpoint string   `json:"openid_configuration_endpoint"`
	Scopes                      []string `json:"scopes"`
	TokenEndpoint               string   `json:"token_endpoint"`
}

type AuthSettingsV2FacebookV2State struct {
	AppId                string   `json:"app_id"`
	AppSecretSettingName string   `json:"app_secret_setting_name"`
	GraphApiVersion      string   `json:"graph_api_version"`
	LoginScopes          []string `json:"login_scopes"`
}

type AuthSettingsV2GithubV2State struct {
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type AuthSettingsV2GoogleV2State struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type AuthSettingsV2LoginState struct {
	AllowedExternalRedirectUrls   []string `json:"allowed_external_redirect_urls"`
	CookieExpirationConvention    string   `json:"cookie_expiration_convention"`
	CookieExpirationTime          string   `json:"cookie_expiration_time"`
	LogoutEndpoint                string   `json:"logout_endpoint"`
	NonceExpirationTime           string   `json:"nonce_expiration_time"`
	PreserveUrlFragmentsForLogins bool     `json:"preserve_url_fragments_for_logins"`
	TokenRefreshExtensionTime     float64  `json:"token_refresh_extension_time"`
	TokenStoreEnabled             bool     `json:"token_store_enabled"`
	TokenStorePath                string   `json:"token_store_path"`
	TokenStoreSasSettingName      string   `json:"token_store_sas_setting_name"`
	ValidateNonce                 bool     `json:"validate_nonce"`
}

type AuthSettingsV2MicrosoftV2State struct {
	AllowedAudiences        []string `json:"allowed_audiences"`
	ClientId                string   `json:"client_id"`
	ClientSecretSettingName string   `json:"client_secret_setting_name"`
	LoginScopes             []string `json:"login_scopes"`
}

type AuthSettingsV2TwitterV2State struct {
	ConsumerKey               string `json:"consumer_key"`
	ConsumerSecretSettingName string `json:"consumer_secret_setting_name"`
}

type BackupState struct {
	Enabled           bool                  `json:"enabled"`
	Name              string                `json:"name"`
	StorageAccountUrl string                `json:"storage_account_url"`
	Schedule          []BackupScheduleState `json:"schedule"`
}

type BackupScheduleState struct {
	FrequencyInterval    float64 `json:"frequency_interval"`
	FrequencyUnit        string  `json:"frequency_unit"`
	KeepAtLeastOneBackup bool    `json:"keep_at_least_one_backup"`
	LastExecutionTime    string  `json:"last_execution_time"`
	RetentionPeriodDays  float64 `json:"retention_period_days"`
	StartTime            string  `json:"start_time"`
}

type ConnectionStringState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type LogsState struct {
	DetailedErrorMessages bool                       `json:"detailed_error_messages"`
	FailedRequestTracing  bool                       `json:"failed_request_tracing"`
	ApplicationLogs       []LogsApplicationLogsState `json:"application_logs"`
	HttpLogs              []LogsHttpLogsState        `json:"http_logs"`
}

type LogsApplicationLogsState struct {
	FileSystemLevel  string                                     `json:"file_system_level"`
	AzureBlobStorage []LogsApplicationLogsAzureBlobStorageState `json:"azure_blob_storage"`
}

type LogsApplicationLogsAzureBlobStorageState struct {
	Level           string  `json:"level"`
	RetentionInDays float64 `json:"retention_in_days"`
	SasUrl          string  `json:"sas_url"`
}

type LogsHttpLogsState struct {
	AzureBlobStorage []LogsHttpLogsAzureBlobStorageState `json:"azure_blob_storage"`
	FileSystem       []LogsHttpLogsFileSystemState       `json:"file_system"`
}

type LogsHttpLogsAzureBlobStorageState struct {
	RetentionInDays float64 `json:"retention_in_days"`
	SasUrl          string  `json:"sas_url"`
}

type LogsHttpLogsFileSystemState struct {
	RetentionInDays float64 `json:"retention_in_days"`
	RetentionInMb   float64 `json:"retention_in_mb"`
}

type SiteConfigState struct {
	AlwaysOn                                 bool                                `json:"always_on"`
	ApiDefinitionUrl                         string                              `json:"api_definition_url"`
	ApiManagementApiId                       string                              `json:"api_management_api_id"`
	AppCommandLine                           string                              `json:"app_command_line"`
	AutoHealEnabled                          bool                                `json:"auto_heal_enabled"`
	AutoSwapSlotName                         string                              `json:"auto_swap_slot_name"`
	ContainerRegistryManagedIdentityClientId string                              `json:"container_registry_managed_identity_client_id"`
	ContainerRegistryUseManagedIdentity      bool                                `json:"container_registry_use_managed_identity"`
	DefaultDocuments                         []string                            `json:"default_documents"`
	DetailedErrorLoggingEnabled              bool                                `json:"detailed_error_logging_enabled"`
	FtpsState                                string                              `json:"ftps_state"`
	HealthCheckEvictionTimeInMin             float64                             `json:"health_check_eviction_time_in_min"`
	HealthCheckPath                          string                              `json:"health_check_path"`
	Http2Enabled                             bool                                `json:"http2_enabled"`
	IpRestrictionDefaultAction               string                              `json:"ip_restriction_default_action"`
	LoadBalancingMode                        string                              `json:"load_balancing_mode"`
	LocalMysqlEnabled                        bool                                `json:"local_mysql_enabled"`
	ManagedPipelineMode                      string                              `json:"managed_pipeline_mode"`
	MinimumTlsVersion                        string                              `json:"minimum_tls_version"`
	RemoteDebuggingEnabled                   bool                                `json:"remote_debugging_enabled"`
	RemoteDebuggingVersion                   string                              `json:"remote_debugging_version"`
	ScmIpRestrictionDefaultAction            string                              `json:"scm_ip_restriction_default_action"`
	ScmMinimumTlsVersion                     string                              `json:"scm_minimum_tls_version"`
	ScmType                                  string                              `json:"scm_type"`
	ScmUseMainIpRestriction                  bool                                `json:"scm_use_main_ip_restriction"`
	Use32BitWorker                           bool                                `json:"use_32_bit_worker"`
	VnetRouteAllEnabled                      bool                                `json:"vnet_route_all_enabled"`
	WebsocketsEnabled                        bool                                `json:"websockets_enabled"`
	WindowsFxVersion                         string                              `json:"windows_fx_version"`
	WorkerCount                              float64                             `json:"worker_count"`
	ApplicationStack                         []SiteConfigApplicationStackState   `json:"application_stack"`
	AutoHealSetting                          []SiteConfigAutoHealSettingState    `json:"auto_heal_setting"`
	Cors                                     []SiteConfigCorsState               `json:"cors"`
	IpRestriction                            []SiteConfigIpRestrictionState      `json:"ip_restriction"`
	ScmIpRestriction                         []SiteConfigScmIpRestrictionState   `json:"scm_ip_restriction"`
	VirtualApplication                       []SiteConfigVirtualApplicationState `json:"virtual_application"`
}

type SiteConfigApplicationStackState struct {
	CurrentStack              string `json:"current_stack"`
	DockerContainerName       string `json:"docker_container_name"`
	DockerContainerRegistry   string `json:"docker_container_registry"`
	DockerContainerTag        string `json:"docker_container_tag"`
	DockerImageName           string `json:"docker_image_name"`
	DockerRegistryPassword    string `json:"docker_registry_password"`
	DockerRegistryUrl         string `json:"docker_registry_url"`
	DockerRegistryUsername    string `json:"docker_registry_username"`
	DotnetCoreVersion         string `json:"dotnet_core_version"`
	DotnetVersion             string `json:"dotnet_version"`
	JavaContainer             string `json:"java_container"`
	JavaContainerVersion      string `json:"java_container_version"`
	JavaEmbeddedServerEnabled bool   `json:"java_embedded_server_enabled"`
	JavaVersion               string `json:"java_version"`
	NodeVersion               string `json:"node_version"`
	PhpVersion                string `json:"php_version"`
	Python                    bool   `json:"python"`
	PythonVersion             string `json:"python_version"`
	TomcatVersion             string `json:"tomcat_version"`
}

type SiteConfigAutoHealSettingState struct {
	Action  []SiteConfigAutoHealSettingActionState  `json:"action"`
	Trigger []SiteConfigAutoHealSettingTriggerState `json:"trigger"`
}

type SiteConfigAutoHealSettingActionState struct {
	ActionType                  string                                             `json:"action_type"`
	MinimumProcessExecutionTime string                                             `json:"minimum_process_execution_time"`
	CustomAction                []SiteConfigAutoHealSettingActionCustomActionState `json:"custom_action"`
}

type SiteConfigAutoHealSettingActionCustomActionState struct {
	Executable string `json:"executable"`
	Parameters string `json:"parameters"`
}

type SiteConfigAutoHealSettingTriggerState struct {
	PrivateMemoryKb float64                                            `json:"private_memory_kb"`
	Requests        []SiteConfigAutoHealSettingTriggerRequestsState    `json:"requests"`
	SlowRequest     []SiteConfigAutoHealSettingTriggerSlowRequestState `json:"slow_request"`
	StatusCode      []SiteConfigAutoHealSettingTriggerStatusCodeState  `json:"status_code"`
}

type SiteConfigAutoHealSettingTriggerRequestsState struct {
	Count    float64 `json:"count"`
	Interval string  `json:"interval"`
}

type SiteConfigAutoHealSettingTriggerSlowRequestState struct {
	Count     float64 `json:"count"`
	Interval  string  `json:"interval"`
	Path      string  `json:"path"`
	TimeTaken string  `json:"time_taken"`
}

type SiteConfigAutoHealSettingTriggerStatusCodeState struct {
	Count           float64 `json:"count"`
	Interval        string  `json:"interval"`
	Path            string  `json:"path"`
	StatusCodeRange string  `json:"status_code_range"`
	SubStatus       float64 `json:"sub_status"`
	Win32StatusCode float64 `json:"win32_status_code"`
}

type SiteConfigCorsState struct {
	AllowedOrigins     []string `json:"allowed_origins"`
	SupportCredentials bool     `json:"support_credentials"`
}

type SiteConfigIpRestrictionState struct {
	Action                 string                                `json:"action"`
	Description            string                                `json:"description"`
	IpAddress              string                                `json:"ip_address"`
	Name                   string                                `json:"name"`
	Priority               float64                               `json:"priority"`
	ServiceTag             string                                `json:"service_tag"`
	VirtualNetworkSubnetId string                                `json:"virtual_network_subnet_id"`
	Headers                []SiteConfigIpRestrictionHeadersState `json:"headers"`
}

type SiteConfigIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type SiteConfigScmIpRestrictionState struct {
	Action                 string                                   `json:"action"`
	Description            string                                   `json:"description"`
	IpAddress              string                                   `json:"ip_address"`
	Name                   string                                   `json:"name"`
	Priority               float64                                  `json:"priority"`
	ServiceTag             string                                   `json:"service_tag"`
	VirtualNetworkSubnetId string                                   `json:"virtual_network_subnet_id"`
	Headers                []SiteConfigScmIpRestrictionHeadersState `json:"headers"`
}

type SiteConfigScmIpRestrictionHeadersState struct {
	XAzureFdid     []string `json:"x_azure_fdid"`
	XFdHealthProbe []string `json:"x_fd_health_probe"`
	XForwardedFor  []string `json:"x_forwarded_for"`
	XForwardedHost []string `json:"x_forwarded_host"`
}

type SiteConfigVirtualApplicationState struct {
	PhysicalPath     string                                              `json:"physical_path"`
	Preload          bool                                                `json:"preload"`
	VirtualPath      string                                              `json:"virtual_path"`
	VirtualDirectory []SiteConfigVirtualApplicationVirtualDirectoryState `json:"virtual_directory"`
}

type SiteConfigVirtualApplicationVirtualDirectoryState struct {
	PhysicalPath string `json:"physical_path"`
	VirtualPath  string `json:"virtual_path"`
}

type StorageAccountState struct {
	AccessKey   string `json:"access_key"`
	AccountName string `json:"account_name"`
	MountPath   string `json:"mount_path"`
	Name        string `json:"name"`
	ShareName   string `json:"share_name"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
