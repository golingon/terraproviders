// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lb_backend_address_pool_address

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lb_backend_address_pool_address.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLbBackendAddressPoolAddressState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (albapa *Resource) Type() string {
	return "azurerm_lb_backend_address_pool_address"
}

// LocalName returns the local name for [Resource].
func (albapa *Resource) LocalName() string {
	return albapa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (albapa *Resource) Configuration() interface{} {
	return albapa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (albapa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(albapa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (albapa *Resource) Dependencies() terra.Dependencies {
	return albapa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (albapa *Resource) LifecycleManagement() *terra.Lifecycle {
	return albapa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (albapa *Resource) Attributes() azurermLbBackendAddressPoolAddressAttributes {
	return azurermLbBackendAddressPoolAddressAttributes{ref: terra.ReferenceResource(albapa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (albapa *Resource) ImportState(state io.Reader) error {
	albapa.state = &azurermLbBackendAddressPoolAddressState{}
	if err := json.NewDecoder(state).Decode(albapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albapa.Type(), albapa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (albapa *Resource) State() (*azurermLbBackendAddressPoolAddressState, bool) {
	return albapa.state, albapa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (albapa *Resource) StateMust() *azurermLbBackendAddressPoolAddressState {
	if albapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albapa.Type(), albapa.LocalName()))
	}
	return albapa.state
}

// Args contains the configurations for azurerm_lb_backend_address_pool_address.
type Args struct {
	// BackendAddressIpConfigurationId: string, optional
	BackendAddressIpConfigurationId terra.StringValue `hcl:"backend_address_ip_configuration_id,attr"`
	// BackendAddressPoolId: string, required
	BackendAddressPoolId terra.StringValue `hcl:"backend_address_pool_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VirtualNetworkId: string, optional
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLbBackendAddressPoolAddressAttributes struct {
	ref terra.Reference
}

// BackendAddressIpConfigurationId returns a reference to field backend_address_ip_configuration_id of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) BackendAddressIpConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("backend_address_ip_configuration_id"))
}

// BackendAddressPoolId returns a reference to field backend_address_pool_id of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) BackendAddressPoolId() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("backend_address_pool_id"))
}

// Id returns a reference to field id of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("ip_address"))
}

// Name returns a reference to field name of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("name"))
}

// VirtualNetworkId returns a reference to field virtual_network_id of azurerm_lb_backend_address_pool_address.
func (albapa azurermLbBackendAddressPoolAddressAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(albapa.ref.Append("virtual_network_id"))
}

func (albapa azurermLbBackendAddressPoolAddressAttributes) InboundNatRulePortMapping() terra.ListValue[InboundNatRulePortMappingAttributes] {
	return terra.ReferenceAsList[InboundNatRulePortMappingAttributes](albapa.ref.Append("inbound_nat_rule_port_mapping"))
}

func (albapa azurermLbBackendAddressPoolAddressAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](albapa.ref.Append("timeouts"))
}

type azurermLbBackendAddressPoolAddressState struct {
	BackendAddressIpConfigurationId string                           `json:"backend_address_ip_configuration_id"`
	BackendAddressPoolId            string                           `json:"backend_address_pool_id"`
	Id                              string                           `json:"id"`
	IpAddress                       string                           `json:"ip_address"`
	Name                            string                           `json:"name"`
	VirtualNetworkId                string                           `json:"virtual_network_id"`
	InboundNatRulePortMapping       []InboundNatRulePortMappingState `json:"inbound_nat_rule_port_mapping"`
	Timeouts                        *TimeoutsState                   `json:"timeouts"`
}
