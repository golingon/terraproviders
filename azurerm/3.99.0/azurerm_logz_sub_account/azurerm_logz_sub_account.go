// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_logz_sub_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_logz_sub_account.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLogzSubAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alsa *Resource) Type() string {
	return "azurerm_logz_sub_account"
}

// LocalName returns the local name for [Resource].
func (alsa *Resource) LocalName() string {
	return alsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alsa *Resource) Configuration() interface{} {
	return alsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alsa *Resource) Dependencies() terra.Dependencies {
	return alsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return alsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alsa *Resource) Attributes() azurermLogzSubAccountAttributes {
	return azurermLogzSubAccountAttributes{ref: terra.ReferenceResource(alsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alsa *Resource) ImportState(state io.Reader) error {
	alsa.state = &azurermLogzSubAccountState{}
	if err := json.NewDecoder(state).Decode(alsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alsa.Type(), alsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alsa *Resource) State() (*azurermLogzSubAccountState, bool) {
	return alsa.state, alsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alsa *Resource) StateMust() *azurermLogzSubAccountState {
	if alsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alsa.Type(), alsa.LocalName()))
	}
	return alsa.state
}

// Args contains the configurations for azurerm_logz_sub_account.
type Args struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogzMonitorId: string, required
	LogzMonitorId terra.StringValue `hcl:"logz_monitor_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// User: required
	User *User `hcl:"user,block" validate:"required"`
}

type azurermLogzSubAccountAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of azurerm_logz_sub_account.
func (alsa azurermLogzSubAccountAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(alsa.ref.Append("enabled"))
}

// Id returns a reference to field id of azurerm_logz_sub_account.
func (alsa azurermLogzSubAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alsa.ref.Append("id"))
}

// LogzMonitorId returns a reference to field logz_monitor_id of azurerm_logz_sub_account.
func (alsa azurermLogzSubAccountAttributes) LogzMonitorId() terra.StringValue {
	return terra.ReferenceAsString(alsa.ref.Append("logz_monitor_id"))
}

// Name returns a reference to field name of azurerm_logz_sub_account.
func (alsa azurermLogzSubAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alsa.ref.Append("name"))
}

// Tags returns a reference to field tags of azurerm_logz_sub_account.
func (alsa azurermLogzSubAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alsa.ref.Append("tags"))
}

func (alsa azurermLogzSubAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alsa.ref.Append("timeouts"))
}

func (alsa azurermLogzSubAccountAttributes) User() terra.ListValue[UserAttributes] {
	return terra.ReferenceAsList[UserAttributes](alsa.ref.Append("user"))
}

type azurermLogzSubAccountState struct {
	Enabled       bool              `json:"enabled"`
	Id            string            `json:"id"`
	LogzMonitorId string            `json:"logz_monitor_id"`
	Name          string            `json:"name"`
	Tags          map[string]string `json:"tags"`
	Timeouts      *TimeoutsState    `json:"timeouts"`
	User          []UserState       `json:"user"`
}
