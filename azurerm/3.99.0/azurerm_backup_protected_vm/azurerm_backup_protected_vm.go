// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_backup_protected_vm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_backup_protected_vm.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermBackupProtectedVmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abpv *Resource) Type() string {
	return "azurerm_backup_protected_vm"
}

// LocalName returns the local name for [Resource].
func (abpv *Resource) LocalName() string {
	return abpv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abpv *Resource) Configuration() interface{} {
	return abpv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abpv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abpv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abpv *Resource) Dependencies() terra.Dependencies {
	return abpv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abpv *Resource) LifecycleManagement() *terra.Lifecycle {
	return abpv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abpv *Resource) Attributes() azurermBackupProtectedVmAttributes {
	return azurermBackupProtectedVmAttributes{ref: terra.ReferenceResource(abpv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abpv *Resource) ImportState(state io.Reader) error {
	abpv.state = &azurermBackupProtectedVmState{}
	if err := json.NewDecoder(state).Decode(abpv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abpv.Type(), abpv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abpv *Resource) State() (*azurermBackupProtectedVmState, bool) {
	return abpv.state, abpv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abpv *Resource) StateMust() *azurermBackupProtectedVmState {
	if abpv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abpv.Type(), abpv.LocalName()))
	}
	return abpv.state
}

// Args contains the configurations for azurerm_backup_protected_vm.
type Args struct {
	// BackupPolicyId: string, optional
	BackupPolicyId terra.StringValue `hcl:"backup_policy_id,attr"`
	// ExcludeDiskLuns: set of number, optional
	ExcludeDiskLuns terra.SetValue[terra.NumberValue] `hcl:"exclude_disk_luns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeDiskLuns: set of number, optional
	IncludeDiskLuns terra.SetValue[terra.NumberValue] `hcl:"include_disk_luns,attr"`
	// ProtectionState: string, optional
	ProtectionState terra.StringValue `hcl:"protection_state,attr"`
	// RecoveryVaultName: string, required
	RecoveryVaultName terra.StringValue `hcl:"recovery_vault_name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// SourceVmId: string, optional
	SourceVmId terra.StringValue `hcl:"source_vm_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermBackupProtectedVmAttributes struct {
	ref terra.Reference
}

// BackupPolicyId returns a reference to field backup_policy_id of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) BackupPolicyId() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("backup_policy_id"))
}

// ExcludeDiskLuns returns a reference to field exclude_disk_luns of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) ExcludeDiskLuns() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](abpv.ref.Append("exclude_disk_luns"))
}

// Id returns a reference to field id of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("id"))
}

// IncludeDiskLuns returns a reference to field include_disk_luns of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) IncludeDiskLuns() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](abpv.ref.Append("include_disk_luns"))
}

// ProtectionState returns a reference to field protection_state of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) ProtectionState() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("protection_state"))
}

// RecoveryVaultName returns a reference to field recovery_vault_name of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) RecoveryVaultName() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("recovery_vault_name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("resource_group_name"))
}

// SourceVmId returns a reference to field source_vm_id of azurerm_backup_protected_vm.
func (abpv azurermBackupProtectedVmAttributes) SourceVmId() terra.StringValue {
	return terra.ReferenceAsString(abpv.ref.Append("source_vm_id"))
}

func (abpv azurermBackupProtectedVmAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abpv.ref.Append("timeouts"))
}

type azurermBackupProtectedVmState struct {
	BackupPolicyId    string         `json:"backup_policy_id"`
	ExcludeDiskLuns   []float64      `json:"exclude_disk_luns"`
	Id                string         `json:"id"`
	IncludeDiskLuns   []float64      `json:"include_disk_luns"`
	ProtectionState   string         `json:"protection_state"`
	RecoveryVaultName string         `json:"recovery_vault_name"`
	ResourceGroupName string         `json:"resource_group_name"`
	SourceVmId        string         `json:"source_vm_id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
