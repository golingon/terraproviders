// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_lab_service_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_lab_service_user.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermLabServiceUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alsu *Resource) Type() string {
	return "azurerm_lab_service_user"
}

// LocalName returns the local name for [Resource].
func (alsu *Resource) LocalName() string {
	return alsu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alsu *Resource) Configuration() interface{} {
	return alsu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alsu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alsu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alsu *Resource) Dependencies() terra.Dependencies {
	return alsu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alsu *Resource) LifecycleManagement() *terra.Lifecycle {
	return alsu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alsu *Resource) Attributes() azurermLabServiceUserAttributes {
	return azurermLabServiceUserAttributes{ref: terra.ReferenceResource(alsu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alsu *Resource) ImportState(state io.Reader) error {
	alsu.state = &azurermLabServiceUserState{}
	if err := json.NewDecoder(state).Decode(alsu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alsu.Type(), alsu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alsu *Resource) State() (*azurermLabServiceUserState, bool) {
	return alsu.state, alsu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alsu *Resource) StateMust() *azurermLabServiceUserState {
	if alsu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alsu.Type(), alsu.LocalName()))
	}
	return alsu.state
}

// Args contains the configurations for azurerm_lab_service_user.
type Args struct {
	// AdditionalUsageQuota: string, optional
	AdditionalUsageQuota terra.StringValue `hcl:"additional_usage_quota,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LabId: string, required
	LabId terra.StringValue `hcl:"lab_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermLabServiceUserAttributes struct {
	ref terra.Reference
}

// AdditionalUsageQuota returns a reference to field additional_usage_quota of azurerm_lab_service_user.
func (alsu azurermLabServiceUserAttributes) AdditionalUsageQuota() terra.StringValue {
	return terra.ReferenceAsString(alsu.ref.Append("additional_usage_quota"))
}

// Email returns a reference to field email of azurerm_lab_service_user.
func (alsu azurermLabServiceUserAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(alsu.ref.Append("email"))
}

// Id returns a reference to field id of azurerm_lab_service_user.
func (alsu azurermLabServiceUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alsu.ref.Append("id"))
}

// LabId returns a reference to field lab_id of azurerm_lab_service_user.
func (alsu azurermLabServiceUserAttributes) LabId() terra.StringValue {
	return terra.ReferenceAsString(alsu.ref.Append("lab_id"))
}

// Name returns a reference to field name of azurerm_lab_service_user.
func (alsu azurermLabServiceUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alsu.ref.Append("name"))
}

func (alsu azurermLabServiceUserAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alsu.ref.Append("timeouts"))
}

type azurermLabServiceUserState struct {
	AdditionalUsageQuota string         `json:"additional_usage_quota"`
	Email                string         `json:"email"`
	Id                   string         `json:"id"`
	LabId                string         `json:"lab_id"`
	Name                 string         `json:"name"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
