// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_data_factory_custom_dataset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_data_factory_custom_dataset.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDataFactoryCustomDatasetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adfcd *Resource) Type() string {
	return "azurerm_data_factory_custom_dataset"
}

// LocalName returns the local name for [Resource].
func (adfcd *Resource) LocalName() string {
	return adfcd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adfcd *Resource) Configuration() interface{} {
	return adfcd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adfcd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adfcd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adfcd *Resource) Dependencies() terra.Dependencies {
	return adfcd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adfcd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adfcd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adfcd *Resource) Attributes() azurermDataFactoryCustomDatasetAttributes {
	return azurermDataFactoryCustomDatasetAttributes{ref: terra.ReferenceResource(adfcd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adfcd *Resource) ImportState(state io.Reader) error {
	adfcd.state = &azurermDataFactoryCustomDatasetState{}
	if err := json.NewDecoder(state).Decode(adfcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adfcd.Type(), adfcd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adfcd *Resource) State() (*azurermDataFactoryCustomDatasetState, bool) {
	return adfcd.state, adfcd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adfcd *Resource) StateMust() *azurermDataFactoryCustomDatasetState {
	if adfcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adfcd.Type(), adfcd.LocalName()))
	}
	return adfcd.state
}

// Args contains the configurations for azurerm_data_factory_custom_dataset.
type Args struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SchemaJson: string, optional
	SchemaJson terra.StringValue `hcl:"schema_json,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// TypePropertiesJson: string, required
	TypePropertiesJson terra.StringValue `hcl:"type_properties_json,attr" validate:"required"`
	// LinkedService: required
	LinkedService *LinkedService `hcl:"linked_service,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDataFactoryCustomDatasetAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfcd.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adfcd.ref.Append("annotations"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adfcd.ref.Append("parameters"))
}

// SchemaJson returns a reference to field schema_json of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) SchemaJson() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("schema_json"))
}

// Type returns a reference to field type of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("type"))
}

// TypePropertiesJson returns a reference to field type_properties_json of azurerm_data_factory_custom_dataset.
func (adfcd azurermDataFactoryCustomDatasetAttributes) TypePropertiesJson() terra.StringValue {
	return terra.ReferenceAsString(adfcd.ref.Append("type_properties_json"))
}

func (adfcd azurermDataFactoryCustomDatasetAttributes) LinkedService() terra.ListValue[LinkedServiceAttributes] {
	return terra.ReferenceAsList[LinkedServiceAttributes](adfcd.ref.Append("linked_service"))
}

func (adfcd azurermDataFactoryCustomDatasetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adfcd.ref.Append("timeouts"))
}

type azurermDataFactoryCustomDatasetState struct {
	AdditionalProperties map[string]string    `json:"additional_properties"`
	Annotations          []string             `json:"annotations"`
	DataFactoryId        string               `json:"data_factory_id"`
	Description          string               `json:"description"`
	Folder               string               `json:"folder"`
	Id                   string               `json:"id"`
	Name                 string               `json:"name"`
	Parameters           map[string]string    `json:"parameters"`
	SchemaJson           string               `json:"schema_json"`
	Type                 string               `json:"type"`
	TypePropertiesJson   string               `json:"type_properties_json"`
	LinkedService        []LinkedServiceState `json:"linked_service"`
	Timeouts             *TimeoutsState       `json:"timeouts"`
}
