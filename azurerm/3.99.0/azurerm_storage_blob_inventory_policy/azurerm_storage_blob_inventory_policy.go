// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_blob_inventory_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_blob_inventory_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageBlobInventoryPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbip *Resource) Type() string {
	return "azurerm_storage_blob_inventory_policy"
}

// LocalName returns the local name for [Resource].
func (asbip *Resource) LocalName() string {
	return asbip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbip *Resource) Configuration() interface{} {
	return asbip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbip *Resource) Dependencies() terra.Dependencies {
	return asbip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbip *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbip *Resource) Attributes() azurermStorageBlobInventoryPolicyAttributes {
	return azurermStorageBlobInventoryPolicyAttributes{ref: terra.ReferenceResource(asbip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbip *Resource) ImportState(state io.Reader) error {
	asbip.state = &azurermStorageBlobInventoryPolicyState{}
	if err := json.NewDecoder(state).Decode(asbip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbip.Type(), asbip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbip *Resource) State() (*azurermStorageBlobInventoryPolicyState, bool) {
	return asbip.state, asbip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbip *Resource) StateMust() *azurermStorageBlobInventoryPolicyState {
	if asbip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbip.Type(), asbip.LocalName()))
	}
	return asbip.state
}

// Args contains the configurations for azurerm_storage_blob_inventory_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Rules: min=1
	Rules []Rules `hcl:"rules,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageBlobInventoryPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_storage_blob_inventory_policy.
func (asbip azurermStorageBlobInventoryPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbip.ref.Append("id"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_storage_blob_inventory_policy.
func (asbip azurermStorageBlobInventoryPolicyAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(asbip.ref.Append("storage_account_id"))
}

func (asbip azurermStorageBlobInventoryPolicyAttributes) Rules() terra.SetValue[RulesAttributes] {
	return terra.ReferenceAsSet[RulesAttributes](asbip.ref.Append("rules"))
}

func (asbip azurermStorageBlobInventoryPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asbip.ref.Append("timeouts"))
}

type azurermStorageBlobInventoryPolicyState struct {
	Id               string         `json:"id"`
	StorageAccountId string         `json:"storage_account_id"`
	Rules            []RulesState   `json:"rules"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
