// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_digital_twins_time_series_database_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_digital_twins_time_series_database_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermDigitalTwinsTimeSeriesDatabaseConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adttsdc *Resource) Type() string {
	return "azurerm_digital_twins_time_series_database_connection"
}

// LocalName returns the local name for [Resource].
func (adttsdc *Resource) LocalName() string {
	return adttsdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adttsdc *Resource) Configuration() interface{} {
	return adttsdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adttsdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adttsdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adttsdc *Resource) Dependencies() terra.Dependencies {
	return adttsdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adttsdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adttsdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adttsdc *Resource) Attributes() azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes {
	return azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes{ref: terra.ReferenceResource(adttsdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adttsdc *Resource) ImportState(state io.Reader) error {
	adttsdc.state = &azurermDigitalTwinsTimeSeriesDatabaseConnectionState{}
	if err := json.NewDecoder(state).Decode(adttsdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adttsdc.Type(), adttsdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adttsdc *Resource) State() (*azurermDigitalTwinsTimeSeriesDatabaseConnectionState, bool) {
	return adttsdc.state, adttsdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adttsdc *Resource) StateMust() *azurermDigitalTwinsTimeSeriesDatabaseConnectionState {
	if adttsdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adttsdc.Type(), adttsdc.LocalName()))
	}
	return adttsdc.state
}

// Args contains the configurations for azurerm_digital_twins_time_series_database_connection.
type Args struct {
	// DigitalTwinsId: string, required
	DigitalTwinsId terra.StringValue `hcl:"digital_twins_id,attr" validate:"required"`
	// EventhubConsumerGroupName: string, optional
	EventhubConsumerGroupName terra.StringValue `hcl:"eventhub_consumer_group_name,attr"`
	// EventhubName: string, required
	EventhubName terra.StringValue `hcl:"eventhub_name,attr" validate:"required"`
	// EventhubNamespaceEndpointUri: string, required
	EventhubNamespaceEndpointUri terra.StringValue `hcl:"eventhub_namespace_endpoint_uri,attr" validate:"required"`
	// EventhubNamespaceId: string, required
	EventhubNamespaceId terra.StringValue `hcl:"eventhub_namespace_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KustoClusterId: string, required
	KustoClusterId terra.StringValue `hcl:"kusto_cluster_id,attr" validate:"required"`
	// KustoClusterUri: string, required
	KustoClusterUri terra.StringValue `hcl:"kusto_cluster_uri,attr" validate:"required"`
	// KustoDatabaseName: string, required
	KustoDatabaseName terra.StringValue `hcl:"kusto_database_name,attr" validate:"required"`
	// KustoTableName: string, optional
	KustoTableName terra.StringValue `hcl:"kusto_table_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes struct {
	ref terra.Reference
}

// DigitalTwinsId returns a reference to field digital_twins_id of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) DigitalTwinsId() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("digital_twins_id"))
}

// EventhubConsumerGroupName returns a reference to field eventhub_consumer_group_name of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) EventhubConsumerGroupName() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("eventhub_consumer_group_name"))
}

// EventhubName returns a reference to field eventhub_name of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) EventhubName() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("eventhub_name"))
}

// EventhubNamespaceEndpointUri returns a reference to field eventhub_namespace_endpoint_uri of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) EventhubNamespaceEndpointUri() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("eventhub_namespace_endpoint_uri"))
}

// EventhubNamespaceId returns a reference to field eventhub_namespace_id of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) EventhubNamespaceId() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("eventhub_namespace_id"))
}

// Id returns a reference to field id of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("id"))
}

// KustoClusterId returns a reference to field kusto_cluster_id of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) KustoClusterId() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("kusto_cluster_id"))
}

// KustoClusterUri returns a reference to field kusto_cluster_uri of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) KustoClusterUri() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("kusto_cluster_uri"))
}

// KustoDatabaseName returns a reference to field kusto_database_name of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) KustoDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("kusto_database_name"))
}

// KustoTableName returns a reference to field kusto_table_name of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) KustoTableName() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("kusto_table_name"))
}

// Name returns a reference to field name of azurerm_digital_twins_time_series_database_connection.
func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adttsdc.ref.Append("name"))
}

func (adttsdc azurermDigitalTwinsTimeSeriesDatabaseConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adttsdc.ref.Append("timeouts"))
}

type azurermDigitalTwinsTimeSeriesDatabaseConnectionState struct {
	DigitalTwinsId               string         `json:"digital_twins_id"`
	EventhubConsumerGroupName    string         `json:"eventhub_consumer_group_name"`
	EventhubName                 string         `json:"eventhub_name"`
	EventhubNamespaceEndpointUri string         `json:"eventhub_namespace_endpoint_uri"`
	EventhubNamespaceId          string         `json:"eventhub_namespace_id"`
	Id                           string         `json:"id"`
	KustoClusterId               string         `json:"kusto_cluster_id"`
	KustoClusterUri              string         `json:"kusto_cluster_uri"`
	KustoDatabaseName            string         `json:"kusto_database_name"`
	KustoTableName               string         `json:"kusto_table_name"`
	Name                         string         `json:"name"`
	Timeouts                     *TimeoutsState `json:"timeouts"`
}
