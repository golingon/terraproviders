// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_network_dns_servers

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_network_dns_servers.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualNetworkDnsServersState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avnds *Resource) Type() string {
	return "azurerm_virtual_network_dns_servers"
}

// LocalName returns the local name for [Resource].
func (avnds *Resource) LocalName() string {
	return avnds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avnds *Resource) Configuration() interface{} {
	return avnds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avnds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avnds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avnds *Resource) Dependencies() terra.Dependencies {
	return avnds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avnds *Resource) LifecycleManagement() *terra.Lifecycle {
	return avnds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avnds *Resource) Attributes() azurermVirtualNetworkDnsServersAttributes {
	return azurermVirtualNetworkDnsServersAttributes{ref: terra.ReferenceResource(avnds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avnds *Resource) ImportState(state io.Reader) error {
	avnds.state = &azurermVirtualNetworkDnsServersState{}
	if err := json.NewDecoder(state).Decode(avnds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avnds.Type(), avnds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avnds *Resource) State() (*azurermVirtualNetworkDnsServersState, bool) {
	return avnds.state, avnds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avnds *Resource) StateMust() *azurermVirtualNetworkDnsServersState {
	if avnds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avnds.Type(), avnds.LocalName()))
	}
	return avnds.state
}

// Args contains the configurations for azurerm_virtual_network_dns_servers.
type Args struct {
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VirtualNetworkId: string, required
	VirtualNetworkId terra.StringValue `hcl:"virtual_network_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualNetworkDnsServersAttributes struct {
	ref terra.Reference
}

// DnsServers returns a reference to field dns_servers of azurerm_virtual_network_dns_servers.
func (avnds azurermVirtualNetworkDnsServersAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avnds.ref.Append("dns_servers"))
}

// Id returns a reference to field id of azurerm_virtual_network_dns_servers.
func (avnds azurermVirtualNetworkDnsServersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avnds.ref.Append("id"))
}

// VirtualNetworkId returns a reference to field virtual_network_id of azurerm_virtual_network_dns_servers.
func (avnds azurermVirtualNetworkDnsServersAttributes) VirtualNetworkId() terra.StringValue {
	return terra.ReferenceAsString(avnds.ref.Append("virtual_network_id"))
}

func (avnds azurermVirtualNetworkDnsServersAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avnds.ref.Append("timeouts"))
}

type azurermVirtualNetworkDnsServersState struct {
	DnsServers       []string       `json:"dns_servers"`
	Id               string         `json:"id"`
	VirtualNetworkId string         `json:"virtual_network_id"`
	Timeouts         *TimeoutsState `json:"timeouts"`
}
