// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_function_app_active_slot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_function_app_active_slot.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermFunctionAppActiveSlotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afaas *Resource) Type() string {
	return "azurerm_function_app_active_slot"
}

// LocalName returns the local name for [Resource].
func (afaas *Resource) LocalName() string {
	return afaas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afaas *Resource) Configuration() interface{} {
	return afaas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afaas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afaas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afaas *Resource) Dependencies() terra.Dependencies {
	return afaas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afaas *Resource) LifecycleManagement() *terra.Lifecycle {
	return afaas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afaas *Resource) Attributes() azurermFunctionAppActiveSlotAttributes {
	return azurermFunctionAppActiveSlotAttributes{ref: terra.ReferenceResource(afaas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afaas *Resource) ImportState(state io.Reader) error {
	afaas.state = &azurermFunctionAppActiveSlotState{}
	if err := json.NewDecoder(state).Decode(afaas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afaas.Type(), afaas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afaas *Resource) State() (*azurermFunctionAppActiveSlotState, bool) {
	return afaas.state, afaas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afaas *Resource) StateMust() *azurermFunctionAppActiveSlotState {
	if afaas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afaas.Type(), afaas.LocalName()))
	}
	return afaas.state
}

// Args contains the configurations for azurerm_function_app_active_slot.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OverwriteNetworkConfig: bool, optional
	OverwriteNetworkConfig terra.BoolValue `hcl:"overwrite_network_config,attr"`
	// SlotId: string, required
	SlotId terra.StringValue `hcl:"slot_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermFunctionAppActiveSlotAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_function_app_active_slot.
func (afaas azurermFunctionAppActiveSlotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afaas.ref.Append("id"))
}

// LastSuccessfulSwap returns a reference to field last_successful_swap of azurerm_function_app_active_slot.
func (afaas azurermFunctionAppActiveSlotAttributes) LastSuccessfulSwap() terra.StringValue {
	return terra.ReferenceAsString(afaas.ref.Append("last_successful_swap"))
}

// OverwriteNetworkConfig returns a reference to field overwrite_network_config of azurerm_function_app_active_slot.
func (afaas azurermFunctionAppActiveSlotAttributes) OverwriteNetworkConfig() terra.BoolValue {
	return terra.ReferenceAsBool(afaas.ref.Append("overwrite_network_config"))
}

// SlotId returns a reference to field slot_id of azurerm_function_app_active_slot.
func (afaas azurermFunctionAppActiveSlotAttributes) SlotId() terra.StringValue {
	return terra.ReferenceAsString(afaas.ref.Append("slot_id"))
}

func (afaas azurermFunctionAppActiveSlotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afaas.ref.Append("timeouts"))
}

type azurermFunctionAppActiveSlotState struct {
	Id                     string         `json:"id"`
	LastSuccessfulSwap     string         `json:"last_successful_swap"`
	OverwriteNetworkConfig bool           `json:"overwrite_network_config"`
	SlotId                 string         `json:"slot_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
