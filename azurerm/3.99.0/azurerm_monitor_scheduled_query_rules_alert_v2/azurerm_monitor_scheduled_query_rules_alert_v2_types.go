// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_scheduled_query_rules_alert_v2

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// ActionGroups: list of string, optional
	ActionGroups terra.ListValue[terra.StringValue] `hcl:"action_groups,attr"`
	// CustomProperties: map of string, optional
	CustomProperties terra.MapValue[terra.StringValue] `hcl:"custom_properties,attr"`
}

type Criteria struct {
	// MetricMeasureColumn: string, optional
	MetricMeasureColumn terra.StringValue `hcl:"metric_measure_column,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// ResourceIdColumn: string, optional
	ResourceIdColumn terra.StringValue `hcl:"resource_id_column,attr"`
	// Threshold: number, required
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// TimeAggregationMethod: string, required
	TimeAggregationMethod terra.StringValue `hcl:"time_aggregation_method,attr" validate:"required"`
	// CriteriaDimension: min=0
	Dimension []CriteriaDimension `hcl:"dimension,block" validate:"min=0"`
	// CriteriaFailingPeriods: optional
	FailingPeriods *CriteriaFailingPeriods `hcl:"failing_periods,block"`
}

type CriteriaDimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type CriteriaFailingPeriods struct {
	// MinimumFailingPeriodsToTriggerAlert: number, required
	MinimumFailingPeriodsToTriggerAlert terra.NumberValue `hcl:"minimum_failing_periods_to_trigger_alert,attr" validate:"required"`
	// NumberOfEvaluationPeriods: number, required
	NumberOfEvaluationPeriods terra.NumberValue `hcl:"number_of_evaluation_periods,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("action_groups"))
}

func (a ActionAttributes) CustomProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("custom_properties"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) MetricMeasureColumn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("metric_measure_column"))
}

func (c CriteriaAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("operator"))
}

func (c CriteriaAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("query"))
}

func (c CriteriaAttributes) ResourceIdColumn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resource_id_column"))
}

func (c CriteriaAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("threshold"))
}

func (c CriteriaAttributes) TimeAggregationMethod() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("time_aggregation_method"))
}

func (c CriteriaAttributes) Dimension() terra.ListValue[CriteriaDimensionAttributes] {
	return terra.ReferenceAsList[CriteriaDimensionAttributes](c.ref.Append("dimension"))
}

func (c CriteriaAttributes) FailingPeriods() terra.ListValue[CriteriaFailingPeriodsAttributes] {
	return terra.ReferenceAsList[CriteriaFailingPeriodsAttributes](c.ref.Append("failing_periods"))
}

type CriteriaDimensionAttributes struct {
	ref terra.Reference
}

func (d CriteriaDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d CriteriaDimensionAttributes) InternalWithRef(ref terra.Reference) CriteriaDimensionAttributes {
	return CriteriaDimensionAttributes{ref: ref}
}

func (d CriteriaDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d CriteriaDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d CriteriaDimensionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d CriteriaDimensionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("values"))
}

type CriteriaFailingPeriodsAttributes struct {
	ref terra.Reference
}

func (fp CriteriaFailingPeriodsAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp CriteriaFailingPeriodsAttributes) InternalWithRef(ref terra.Reference) CriteriaFailingPeriodsAttributes {
	return CriteriaFailingPeriodsAttributes{ref: ref}
}

func (fp CriteriaFailingPeriodsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp CriteriaFailingPeriodsAttributes) MinimumFailingPeriodsToTriggerAlert() terra.NumberValue {
	return terra.ReferenceAsNumber(fp.ref.Append("minimum_failing_periods_to_trigger_alert"))
}

func (fp CriteriaFailingPeriodsAttributes) NumberOfEvaluationPeriods() terra.NumberValue {
	return terra.ReferenceAsNumber(fp.ref.Append("number_of_evaluation_periods"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	ActionGroups     []string          `json:"action_groups"`
	CustomProperties map[string]string `json:"custom_properties"`
}

type CriteriaState struct {
	MetricMeasureColumn   string                        `json:"metric_measure_column"`
	Operator              string                        `json:"operator"`
	Query                 string                        `json:"query"`
	ResourceIdColumn      string                        `json:"resource_id_column"`
	Threshold             float64                       `json:"threshold"`
	TimeAggregationMethod string                        `json:"time_aggregation_method"`
	Dimension             []CriteriaDimensionState      `json:"dimension"`
	FailingPeriods        []CriteriaFailingPeriodsState `json:"failing_periods"`
}

type CriteriaDimensionState struct {
	Name     string   `json:"name"`
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type CriteriaFailingPeriodsState struct {
	MinimumFailingPeriodsToTriggerAlert float64 `json:"minimum_failing_periods_to_trigger_alert"`
	NumberOfEvaluationPeriods           float64 `json:"number_of_evaluation_periods"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
