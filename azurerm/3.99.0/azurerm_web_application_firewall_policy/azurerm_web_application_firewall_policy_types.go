// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_web_application_firewall_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomRules struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// GroupRateLimitBy: string, optional
	GroupRateLimitBy terra.StringValue `hcl:"group_rate_limit_by,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RateLimitDuration: string, optional
	RateLimitDuration terra.StringValue `hcl:"rate_limit_duration,attr"`
	// RateLimitThreshold: number, optional
	RateLimitThreshold terra.NumberValue `hcl:"rate_limit_threshold,attr"`
	// RuleType: string, required
	RuleType terra.StringValue `hcl:"rule_type,attr" validate:"required"`
	// CustomRulesMatchConditions: min=1
	MatchConditions []CustomRulesMatchConditions `hcl:"match_conditions,block" validate:"min=1"`
}

type CustomRulesMatchConditions struct {
	// MatchValues: list of string, optional
	MatchValues terra.ListValue[terra.StringValue] `hcl:"match_values,attr"`
	// NegationCondition: bool, optional
	NegationCondition terra.BoolValue `hcl:"negation_condition,attr"`
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Transforms: set of string, optional
	Transforms terra.SetValue[terra.StringValue] `hcl:"transforms,attr"`
	// CustomRulesMatchConditionsMatchVariables: min=1
	MatchVariables []CustomRulesMatchConditionsMatchVariables `hcl:"match_variables,block" validate:"min=1"`
}

type CustomRulesMatchConditionsMatchVariables struct {
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// VariableName: string, required
	VariableName terra.StringValue `hcl:"variable_name,attr" validate:"required"`
}

type ManagedRules struct {
	// ManagedRulesExclusion: min=0
	Exclusion []ManagedRulesExclusion `hcl:"exclusion,block" validate:"min=0"`
	// ManagedRulesManagedRuleSet: min=1
	ManagedRuleSet []ManagedRulesManagedRuleSet `hcl:"managed_rule_set,block" validate:"min=1"`
}

type ManagedRulesExclusion struct {
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Selector: string, required
	Selector terra.StringValue `hcl:"selector,attr" validate:"required"`
	// SelectorMatchOperator: string, required
	SelectorMatchOperator terra.StringValue `hcl:"selector_match_operator,attr" validate:"required"`
	// ManagedRulesExclusionExcludedRuleSet: optional
	ExcludedRuleSet *ManagedRulesExclusionExcludedRuleSet `hcl:"excluded_rule_set,block"`
}

type ManagedRulesExclusionExcludedRuleSet struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ManagedRulesExclusionExcludedRuleSetRuleGroup: min=0
	RuleGroup []ManagedRulesExclusionExcludedRuleSetRuleGroup `hcl:"rule_group,block" validate:"min=0"`
}

type ManagedRulesExclusionExcludedRuleSetRuleGroup struct {
	// ExcludedRules: list of string, optional
	ExcludedRules terra.ListValue[terra.StringValue] `hcl:"excluded_rules,attr"`
	// RuleGroupName: string, required
	RuleGroupName terra.StringValue `hcl:"rule_group_name,attr" validate:"required"`
}

type ManagedRulesManagedRuleSet struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// ManagedRulesManagedRuleSetRuleGroupOverride: min=0
	RuleGroupOverride []ManagedRulesManagedRuleSetRuleGroupOverride `hcl:"rule_group_override,block" validate:"min=0"`
}

type ManagedRulesManagedRuleSetRuleGroupOverride struct {
	// DisabledRules: list of string, optional
	DisabledRules terra.ListValue[terra.StringValue] `hcl:"disabled_rules,attr"`
	// RuleGroupName: string, required
	RuleGroupName terra.StringValue `hcl:"rule_group_name,attr" validate:"required"`
	// ManagedRulesManagedRuleSetRuleGroupOverrideRule: min=0
	Rule []ManagedRulesManagedRuleSetRuleGroupOverrideRule `hcl:"rule,block" validate:"min=0"`
}

type ManagedRulesManagedRuleSetRuleGroupOverrideRule struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type PolicySettings struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FileUploadLimitInMb: number, optional
	FileUploadLimitInMb terra.NumberValue `hcl:"file_upload_limit_in_mb,attr"`
	// MaxRequestBodySizeInKb: number, optional
	MaxRequestBodySizeInKb terra.NumberValue `hcl:"max_request_body_size_in_kb,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// RequestBodyCheck: bool, optional
	RequestBodyCheck terra.BoolValue `hcl:"request_body_check,attr"`
	// RequestBodyInspectLimitInKb: number, optional
	RequestBodyInspectLimitInKb terra.NumberValue `hcl:"request_body_inspect_limit_in_kb,attr"`
	// PolicySettingsLogScrubbing: optional
	LogScrubbing *PolicySettingsLogScrubbing `hcl:"log_scrubbing,block"`
}

type PolicySettingsLogScrubbing struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// PolicySettingsLogScrubbingRule: min=0
	Rule []PolicySettingsLogScrubbingRule `hcl:"rule,block" validate:"min=0"`
}

type PolicySettingsLogScrubbingRule struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// MatchVariable: string, required
	MatchVariable terra.StringValue `hcl:"match_variable,attr" validate:"required"`
	// Selector: string, optional
	Selector terra.StringValue `hcl:"selector,attr"`
	// SelectorMatchOperator: string, optional
	SelectorMatchOperator terra.StringValue `hcl:"selector_match_operator,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomRulesAttributes struct {
	ref terra.Reference
}

func (cr CustomRulesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CustomRulesAttributes) InternalWithRef(ref terra.Reference) CustomRulesAttributes {
	return CustomRulesAttributes{ref: ref}
}

func (cr CustomRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CustomRulesAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("action"))
}

func (cr CustomRulesAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cr.ref.Append("enabled"))
}

func (cr CustomRulesAttributes) GroupRateLimitBy() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("group_rate_limit_by"))
}

func (cr CustomRulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("name"))
}

func (cr CustomRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("priority"))
}

func (cr CustomRulesAttributes) RateLimitDuration() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("rate_limit_duration"))
}

func (cr CustomRulesAttributes) RateLimitThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("rate_limit_threshold"))
}

func (cr CustomRulesAttributes) RuleType() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("rule_type"))
}

func (cr CustomRulesAttributes) MatchConditions() terra.ListValue[CustomRulesMatchConditionsAttributes] {
	return terra.ReferenceAsList[CustomRulesMatchConditionsAttributes](cr.ref.Append("match_conditions"))
}

type CustomRulesMatchConditionsAttributes struct {
	ref terra.Reference
}

func (mc CustomRulesMatchConditionsAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc CustomRulesMatchConditionsAttributes) InternalWithRef(ref terra.Reference) CustomRulesMatchConditionsAttributes {
	return CustomRulesMatchConditionsAttributes{ref: ref}
}

func (mc CustomRulesMatchConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc CustomRulesMatchConditionsAttributes) MatchValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("match_values"))
}

func (mc CustomRulesMatchConditionsAttributes) NegationCondition() terra.BoolValue {
	return terra.ReferenceAsBool(mc.ref.Append("negation_condition"))
}

func (mc CustomRulesMatchConditionsAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("operator"))
}

func (mc CustomRulesMatchConditionsAttributes) Transforms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](mc.ref.Append("transforms"))
}

func (mc CustomRulesMatchConditionsAttributes) MatchVariables() terra.ListValue[CustomRulesMatchConditionsMatchVariablesAttributes] {
	return terra.ReferenceAsList[CustomRulesMatchConditionsMatchVariablesAttributes](mc.ref.Append("match_variables"))
}

type CustomRulesMatchConditionsMatchVariablesAttributes struct {
	ref terra.Reference
}

func (mv CustomRulesMatchConditionsMatchVariablesAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv CustomRulesMatchConditionsMatchVariablesAttributes) InternalWithRef(ref terra.Reference) CustomRulesMatchConditionsMatchVariablesAttributes {
	return CustomRulesMatchConditionsMatchVariablesAttributes{ref: ref}
}

func (mv CustomRulesMatchConditionsMatchVariablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv CustomRulesMatchConditionsMatchVariablesAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("selector"))
}

func (mv CustomRulesMatchConditionsMatchVariablesAttributes) VariableName() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("variable_name"))
}

type ManagedRulesAttributes struct {
	ref terra.Reference
}

func (mr ManagedRulesAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr ManagedRulesAttributes) InternalWithRef(ref terra.Reference) ManagedRulesAttributes {
	return ManagedRulesAttributes{ref: ref}
}

func (mr ManagedRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr ManagedRulesAttributes) Exclusion() terra.ListValue[ManagedRulesExclusionAttributes] {
	return terra.ReferenceAsList[ManagedRulesExclusionAttributes](mr.ref.Append("exclusion"))
}

func (mr ManagedRulesAttributes) ManagedRuleSet() terra.ListValue[ManagedRulesManagedRuleSetAttributes] {
	return terra.ReferenceAsList[ManagedRulesManagedRuleSetAttributes](mr.ref.Append("managed_rule_set"))
}

type ManagedRulesExclusionAttributes struct {
	ref terra.Reference
}

func (e ManagedRulesExclusionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ManagedRulesExclusionAttributes) InternalWithRef(ref terra.Reference) ManagedRulesExclusionAttributes {
	return ManagedRulesExclusionAttributes{ref: ref}
}

func (e ManagedRulesExclusionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ManagedRulesExclusionAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("match_variable"))
}

func (e ManagedRulesExclusionAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector"))
}

func (e ManagedRulesExclusionAttributes) SelectorMatchOperator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("selector_match_operator"))
}

func (e ManagedRulesExclusionAttributes) ExcludedRuleSet() terra.ListValue[ManagedRulesExclusionExcludedRuleSetAttributes] {
	return terra.ReferenceAsList[ManagedRulesExclusionExcludedRuleSetAttributes](e.ref.Append("excluded_rule_set"))
}

type ManagedRulesExclusionExcludedRuleSetAttributes struct {
	ref terra.Reference
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) InternalRef() (terra.Reference, error) {
	return ers.ref, nil
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) InternalWithRef(ref terra.Reference) ManagedRulesExclusionExcludedRuleSetAttributes {
	return ManagedRulesExclusionExcludedRuleSetAttributes{ref: ref}
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ers.ref.InternalTokens()
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ers.ref.Append("type"))
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ers.ref.Append("version"))
}

func (ers ManagedRulesExclusionExcludedRuleSetAttributes) RuleGroup() terra.ListValue[ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes] {
	return terra.ReferenceAsList[ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes](ers.ref.Append("rule_group"))
}

type ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes struct {
	ref terra.Reference
}

func (rg ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes) InternalWithRef(ref terra.Reference) ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes {
	return ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes{ref: ref}
}

func (rg ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes) ExcludedRules() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rg.ref.Append("excluded_rules"))
}

func (rg ManagedRulesExclusionExcludedRuleSetRuleGroupAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(rg.ref.Append("rule_group_name"))
}

type ManagedRulesManagedRuleSetAttributes struct {
	ref terra.Reference
}

func (mrs ManagedRulesManagedRuleSetAttributes) InternalRef() (terra.Reference, error) {
	return mrs.ref, nil
}

func (mrs ManagedRulesManagedRuleSetAttributes) InternalWithRef(ref terra.Reference) ManagedRulesManagedRuleSetAttributes {
	return ManagedRulesManagedRuleSetAttributes{ref: ref}
}

func (mrs ManagedRulesManagedRuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mrs.ref.InternalTokens()
}

func (mrs ManagedRulesManagedRuleSetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mrs.ref.Append("type"))
}

func (mrs ManagedRulesManagedRuleSetAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(mrs.ref.Append("version"))
}

func (mrs ManagedRulesManagedRuleSetAttributes) RuleGroupOverride() terra.ListValue[ManagedRulesManagedRuleSetRuleGroupOverrideAttributes] {
	return terra.ReferenceAsList[ManagedRulesManagedRuleSetRuleGroupOverrideAttributes](mrs.ref.Append("rule_group_override"))
}

type ManagedRulesManagedRuleSetRuleGroupOverrideAttributes struct {
	ref terra.Reference
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) InternalRef() (terra.Reference, error) {
	return rgo.ref, nil
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) InternalWithRef(ref terra.Reference) ManagedRulesManagedRuleSetRuleGroupOverrideAttributes {
	return ManagedRulesManagedRuleSetRuleGroupOverrideAttributes{ref: ref}
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rgo.ref.InternalTokens()
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) DisabledRules() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rgo.ref.Append("disabled_rules"))
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) RuleGroupName() terra.StringValue {
	return terra.ReferenceAsString(rgo.ref.Append("rule_group_name"))
}

func (rgo ManagedRulesManagedRuleSetRuleGroupOverrideAttributes) Rule() terra.ListValue[ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes] {
	return terra.ReferenceAsList[ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes](rgo.ref.Append("rule"))
}

type ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes struct {
	ref terra.Reference
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) InternalWithRef(ref terra.Reference) ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes {
	return ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes{ref: ref}
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("action"))
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("enabled"))
}

func (r ManagedRulesManagedRuleSetRuleGroupOverrideRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

type PolicySettingsAttributes struct {
	ref terra.Reference
}

func (ps PolicySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PolicySettingsAttributes) InternalWithRef(ref terra.Reference) PolicySettingsAttributes {
	return PolicySettingsAttributes{ref: ref}
}

func (ps PolicySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PolicySettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ps.ref.Append("enabled"))
}

func (ps PolicySettingsAttributes) FileUploadLimitInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("file_upload_limit_in_mb"))
}

func (ps PolicySettingsAttributes) MaxRequestBodySizeInKb() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("max_request_body_size_in_kb"))
}

func (ps PolicySettingsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("mode"))
}

func (ps PolicySettingsAttributes) RequestBodyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(ps.ref.Append("request_body_check"))
}

func (ps PolicySettingsAttributes) RequestBodyInspectLimitInKb() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("request_body_inspect_limit_in_kb"))
}

func (ps PolicySettingsAttributes) LogScrubbing() terra.ListValue[PolicySettingsLogScrubbingAttributes] {
	return terra.ReferenceAsList[PolicySettingsLogScrubbingAttributes](ps.ref.Append("log_scrubbing"))
}

type PolicySettingsLogScrubbingAttributes struct {
	ref terra.Reference
}

func (ls PolicySettingsLogScrubbingAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls PolicySettingsLogScrubbingAttributes) InternalWithRef(ref terra.Reference) PolicySettingsLogScrubbingAttributes {
	return PolicySettingsLogScrubbingAttributes{ref: ref}
}

func (ls PolicySettingsLogScrubbingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls PolicySettingsLogScrubbingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ls.ref.Append("enabled"))
}

func (ls PolicySettingsLogScrubbingAttributes) Rule() terra.ListValue[PolicySettingsLogScrubbingRuleAttributes] {
	return terra.ReferenceAsList[PolicySettingsLogScrubbingRuleAttributes](ls.ref.Append("rule"))
}

type PolicySettingsLogScrubbingRuleAttributes struct {
	ref terra.Reference
}

func (r PolicySettingsLogScrubbingRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r PolicySettingsLogScrubbingRuleAttributes) InternalWithRef(ref terra.Reference) PolicySettingsLogScrubbingRuleAttributes {
	return PolicySettingsLogScrubbingRuleAttributes{ref: ref}
}

func (r PolicySettingsLogScrubbingRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r PolicySettingsLogScrubbingRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("enabled"))
}

func (r PolicySettingsLogScrubbingRuleAttributes) MatchVariable() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("match_variable"))
}

func (r PolicySettingsLogScrubbingRuleAttributes) Selector() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("selector"))
}

func (r PolicySettingsLogScrubbingRuleAttributes) SelectorMatchOperator() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("selector_match_operator"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomRulesState struct {
	Action             string                            `json:"action"`
	Enabled            bool                              `json:"enabled"`
	GroupRateLimitBy   string                            `json:"group_rate_limit_by"`
	Name               string                            `json:"name"`
	Priority           float64                           `json:"priority"`
	RateLimitDuration  string                            `json:"rate_limit_duration"`
	RateLimitThreshold float64                           `json:"rate_limit_threshold"`
	RuleType           string                            `json:"rule_type"`
	MatchConditions    []CustomRulesMatchConditionsState `json:"match_conditions"`
}

type CustomRulesMatchConditionsState struct {
	MatchValues       []string                                        `json:"match_values"`
	NegationCondition bool                                            `json:"negation_condition"`
	Operator          string                                          `json:"operator"`
	Transforms        []string                                        `json:"transforms"`
	MatchVariables    []CustomRulesMatchConditionsMatchVariablesState `json:"match_variables"`
}

type CustomRulesMatchConditionsMatchVariablesState struct {
	Selector     string `json:"selector"`
	VariableName string `json:"variable_name"`
}

type ManagedRulesState struct {
	Exclusion      []ManagedRulesExclusionState      `json:"exclusion"`
	ManagedRuleSet []ManagedRulesManagedRuleSetState `json:"managed_rule_set"`
}

type ManagedRulesExclusionState struct {
	MatchVariable         string                                      `json:"match_variable"`
	Selector              string                                      `json:"selector"`
	SelectorMatchOperator string                                      `json:"selector_match_operator"`
	ExcludedRuleSet       []ManagedRulesExclusionExcludedRuleSetState `json:"excluded_rule_set"`
}

type ManagedRulesExclusionExcludedRuleSetState struct {
	Type      string                                               `json:"type"`
	Version   string                                               `json:"version"`
	RuleGroup []ManagedRulesExclusionExcludedRuleSetRuleGroupState `json:"rule_group"`
}

type ManagedRulesExclusionExcludedRuleSetRuleGroupState struct {
	ExcludedRules []string `json:"excluded_rules"`
	RuleGroupName string   `json:"rule_group_name"`
}

type ManagedRulesManagedRuleSetState struct {
	Type              string                                             `json:"type"`
	Version           string                                             `json:"version"`
	RuleGroupOverride []ManagedRulesManagedRuleSetRuleGroupOverrideState `json:"rule_group_override"`
}

type ManagedRulesManagedRuleSetRuleGroupOverrideState struct {
	DisabledRules []string                                               `json:"disabled_rules"`
	RuleGroupName string                                                 `json:"rule_group_name"`
	Rule          []ManagedRulesManagedRuleSetRuleGroupOverrideRuleState `json:"rule"`
}

type ManagedRulesManagedRuleSetRuleGroupOverrideRuleState struct {
	Action  string `json:"action"`
	Enabled bool   `json:"enabled"`
	Id      string `json:"id"`
}

type PolicySettingsState struct {
	Enabled                     bool                              `json:"enabled"`
	FileUploadLimitInMb         float64                           `json:"file_upload_limit_in_mb"`
	MaxRequestBodySizeInKb      float64                           `json:"max_request_body_size_in_kb"`
	Mode                        string                            `json:"mode"`
	RequestBodyCheck            bool                              `json:"request_body_check"`
	RequestBodyInspectLimitInKb float64                           `json:"request_body_inspect_limit_in_kb"`
	LogScrubbing                []PolicySettingsLogScrubbingState `json:"log_scrubbing"`
}

type PolicySettingsLogScrubbingState struct {
	Enabled bool                                  `json:"enabled"`
	Rule    []PolicySettingsLogScrubbingRuleState `json:"rule"`
}

type PolicySettingsLogScrubbingRuleState struct {
	Enabled               bool   `json:"enabled"`
	MatchVariable         string `json:"match_variable"`
	Selector              string `json:"selector"`
	SelectorMatchOperator string `json:"selector_match_operator"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
