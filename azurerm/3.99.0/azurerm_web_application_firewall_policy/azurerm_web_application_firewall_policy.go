// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_web_application_firewall_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_web_application_firewall_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermWebApplicationFirewallPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awafp *Resource) Type() string {
	return "azurerm_web_application_firewall_policy"
}

// LocalName returns the local name for [Resource].
func (awafp *Resource) LocalName() string {
	return awafp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awafp *Resource) Configuration() interface{} {
	return awafp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awafp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awafp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awafp *Resource) Dependencies() terra.Dependencies {
	return awafp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awafp *Resource) LifecycleManagement() *terra.Lifecycle {
	return awafp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awafp *Resource) Attributes() azurermWebApplicationFirewallPolicyAttributes {
	return azurermWebApplicationFirewallPolicyAttributes{ref: terra.ReferenceResource(awafp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awafp *Resource) ImportState(state io.Reader) error {
	awafp.state = &azurermWebApplicationFirewallPolicyState{}
	if err := json.NewDecoder(state).Decode(awafp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awafp.Type(), awafp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awafp *Resource) State() (*azurermWebApplicationFirewallPolicyState, bool) {
	return awafp.state, awafp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awafp *Resource) StateMust() *azurermWebApplicationFirewallPolicyState {
	if awafp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awafp.Type(), awafp.LocalName()))
	}
	return awafp.state
}

// Args contains the configurations for azurerm_web_application_firewall_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// CustomRules: min=0
	CustomRules []CustomRules `hcl:"custom_rules,block" validate:"min=0"`
	// ManagedRules: required
	ManagedRules *ManagedRules `hcl:"managed_rules,block" validate:"required"`
	// PolicySettings: optional
	PolicySettings *PolicySettings `hcl:"policy_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermWebApplicationFirewallPolicyAttributes struct {
	ref terra.Reference
}

// HttpListenerIds returns a reference to field http_listener_ids of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) HttpListenerIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](awafp.ref.Append("http_listener_ids"))
}

// Id returns a reference to field id of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awafp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(awafp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awafp.ref.Append("name"))
}

// PathBasedRuleIds returns a reference to field path_based_rule_ids of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) PathBasedRuleIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](awafp.ref.Append("path_based_rule_ids"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(awafp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_web_application_firewall_policy.
func (awafp azurermWebApplicationFirewallPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awafp.ref.Append("tags"))
}

func (awafp azurermWebApplicationFirewallPolicyAttributes) CustomRules() terra.ListValue[CustomRulesAttributes] {
	return terra.ReferenceAsList[CustomRulesAttributes](awafp.ref.Append("custom_rules"))
}

func (awafp azurermWebApplicationFirewallPolicyAttributes) ManagedRules() terra.ListValue[ManagedRulesAttributes] {
	return terra.ReferenceAsList[ManagedRulesAttributes](awafp.ref.Append("managed_rules"))
}

func (awafp azurermWebApplicationFirewallPolicyAttributes) PolicySettings() terra.ListValue[PolicySettingsAttributes] {
	return terra.ReferenceAsList[PolicySettingsAttributes](awafp.ref.Append("policy_settings"))
}

func (awafp azurermWebApplicationFirewallPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](awafp.ref.Append("timeouts"))
}

type azurermWebApplicationFirewallPolicyState struct {
	HttpListenerIds   []string              `json:"http_listener_ids"`
	Id                string                `json:"id"`
	Location          string                `json:"location"`
	Name              string                `json:"name"`
	PathBasedRuleIds  []string              `json:"path_based_rule_ids"`
	ResourceGroupName string                `json:"resource_group_name"`
	Tags              map[string]string     `json:"tags"`
	CustomRules       []CustomRulesState    `json:"custom_rules"`
	ManagedRules      []ManagedRulesState   `json:"managed_rules"`
	PolicySettings    []PolicySettingsState `json:"policy_settings"`
	Timeouts          *TimeoutsState        `json:"timeouts"`
}
