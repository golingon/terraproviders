// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_data_collection_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFlow struct {
	// BuiltInTransform: string, optional
	BuiltInTransform terra.StringValue `hcl:"built_in_transform,attr"`
	// Destinations: list of string, required
	Destinations terra.ListValue[terra.StringValue] `hcl:"destinations,attr" validate:"required"`
	// OutputStream: string, optional
	OutputStream terra.StringValue `hcl:"output_stream,attr"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
	// TransformKql: string, optional
	TransformKql terra.StringValue `hcl:"transform_kql,attr"`
}

type DataSources struct {
	// DataSourcesDataImport: optional
	DataImport *DataSourcesDataImport `hcl:"data_import,block"`
	// DataSourcesExtension: min=0
	Extension []DataSourcesExtension `hcl:"extension,block" validate:"min=0"`
	// DataSourcesIisLog: min=0
	IisLog []DataSourcesIisLog `hcl:"iis_log,block" validate:"min=0"`
	// DataSourcesLogFile: min=0
	LogFile []DataSourcesLogFile `hcl:"log_file,block" validate:"min=0"`
	// DataSourcesPerformanceCounter: min=0
	PerformanceCounter []DataSourcesPerformanceCounter `hcl:"performance_counter,block" validate:"min=0"`
	// DataSourcesPlatformTelemetry: min=0
	PlatformTelemetry []DataSourcesPlatformTelemetry `hcl:"platform_telemetry,block" validate:"min=0"`
	// DataSourcesPrometheusForwarder: min=0
	PrometheusForwarder []DataSourcesPrometheusForwarder `hcl:"prometheus_forwarder,block" validate:"min=0"`
	// DataSourcesSyslog: min=0
	Syslog []DataSourcesSyslog `hcl:"syslog,block" validate:"min=0"`
	// DataSourcesWindowsEventLog: min=0
	WindowsEventLog []DataSourcesWindowsEventLog `hcl:"windows_event_log,block" validate:"min=0"`
	// DataSourcesWindowsFirewallLog: min=0
	WindowsFirewallLog []DataSourcesWindowsFirewallLog `hcl:"windows_firewall_log,block" validate:"min=0"`
}

type DataSourcesDataImport struct {
	// DataSourcesDataImportEventHubDataSource: min=1
	EventHubDataSource []DataSourcesDataImportEventHubDataSource `hcl:"event_hub_data_source,block" validate:"min=1"`
}

type DataSourcesDataImportEventHubDataSource struct {
	// ConsumerGroup: string, optional
	ConsumerGroup terra.StringValue `hcl:"consumer_group,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Stream: string, required
	Stream terra.StringValue `hcl:"stream,attr" validate:"required"`
}

type DataSourcesExtension struct {
	// ExtensionJson: string, optional
	ExtensionJson terra.StringValue `hcl:"extension_json,attr"`
	// ExtensionName: string, required
	ExtensionName terra.StringValue `hcl:"extension_name,attr" validate:"required"`
	// InputDataSources: list of string, optional
	InputDataSources terra.ListValue[terra.StringValue] `hcl:"input_data_sources,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type DataSourcesIisLog struct {
	// LogDirectories: list of string, optional
	LogDirectories terra.ListValue[terra.StringValue] `hcl:"log_directories,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type DataSourcesLogFile struct {
	// FilePatterns: list of string, required
	FilePatterns terra.ListValue[terra.StringValue] `hcl:"file_patterns,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
	// DataSourcesLogFileSettings: optional
	Settings *DataSourcesLogFileSettings `hcl:"settings,block"`
}

type DataSourcesLogFileSettings struct {
	// DataSourcesLogFileSettingsText: required
	Text *DataSourcesLogFileSettingsText `hcl:"text,block" validate:"required"`
}

type DataSourcesLogFileSettingsText struct {
	// RecordStartTimestampFormat: string, required
	RecordStartTimestampFormat terra.StringValue `hcl:"record_start_timestamp_format,attr" validate:"required"`
}

type DataSourcesPerformanceCounter struct {
	// CounterSpecifiers: list of string, required
	CounterSpecifiers terra.ListValue[terra.StringValue] `hcl:"counter_specifiers,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SamplingFrequencyInSeconds: number, required
	SamplingFrequencyInSeconds terra.NumberValue `hcl:"sampling_frequency_in_seconds,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type DataSourcesPlatformTelemetry struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type DataSourcesPrometheusForwarder struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
	// DataSourcesPrometheusForwarderLabelIncludeFilter: min=0
	LabelIncludeFilter []DataSourcesPrometheusForwarderLabelIncludeFilter `hcl:"label_include_filter,block" validate:"min=0"`
}

type DataSourcesPrometheusForwarderLabelIncludeFilter struct {
	// Label: string, required
	Label terra.StringValue `hcl:"label,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DataSourcesSyslog struct {
	// FacilityNames: list of string, required
	FacilityNames terra.ListValue[terra.StringValue] `hcl:"facility_names,attr" validate:"required"`
	// LogLevels: list of string, required
	LogLevels terra.ListValue[terra.StringValue] `hcl:"log_levels,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, optional
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr"`
}

type DataSourcesWindowsEventLog struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
	// XPathQueries: list of string, required
	XPathQueries terra.ListValue[terra.StringValue] `hcl:"x_path_queries,attr" validate:"required"`
}

type DataSourcesWindowsFirewallLog struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Streams: list of string, required
	Streams terra.ListValue[terra.StringValue] `hcl:"streams,attr" validate:"required"`
}

type Destinations struct {
	// DestinationsAzureMonitorMetrics: optional
	AzureMonitorMetrics *DestinationsAzureMonitorMetrics `hcl:"azure_monitor_metrics,block"`
	// DestinationsEventHub: optional
	EventHub *DestinationsEventHub `hcl:"event_hub,block"`
	// DestinationsEventHubDirect: optional
	EventHubDirect *DestinationsEventHubDirect `hcl:"event_hub_direct,block"`
	// DestinationsLogAnalytics: min=0
	LogAnalytics []DestinationsLogAnalytics `hcl:"log_analytics,block" validate:"min=0"`
	// DestinationsMonitorAccount: min=0
	MonitorAccount []DestinationsMonitorAccount `hcl:"monitor_account,block" validate:"min=0"`
	// DestinationsStorageBlob: min=0
	StorageBlob []DestinationsStorageBlob `hcl:"storage_blob,block" validate:"min=0"`
	// DestinationsStorageBlobDirect: min=0
	StorageBlobDirect []DestinationsStorageBlobDirect `hcl:"storage_blob_direct,block" validate:"min=0"`
	// DestinationsStorageTableDirect: min=0
	StorageTableDirect []DestinationsStorageTableDirect `hcl:"storage_table_direct,block" validate:"min=0"`
}

type DestinationsAzureMonitorMetrics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DestinationsEventHub struct {
	// EventHubId: string, required
	EventHubId terra.StringValue `hcl:"event_hub_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DestinationsEventHubDirect struct {
	// EventHubId: string, required
	EventHubId terra.StringValue `hcl:"event_hub_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DestinationsLogAnalytics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// WorkspaceResourceId: string, required
	WorkspaceResourceId terra.StringValue `hcl:"workspace_resource_id,attr" validate:"required"`
}

type DestinationsMonitorAccount struct {
	// MonitorAccountId: string, required
	MonitorAccountId terra.StringValue `hcl:"monitor_account_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DestinationsStorageBlob struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
}

type DestinationsStorageBlobDirect struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
}

type DestinationsStorageTableDirect struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type StreamDeclaration struct {
	// StreamName: string, required
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
	// StreamDeclarationColumn: min=1
	Column []StreamDeclarationColumn `hcl:"column,block" validate:"min=1"`
}

type StreamDeclarationColumn struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataFlowAttributes struct {
	ref terra.Reference
}

func (df DataFlowAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df DataFlowAttributes) InternalWithRef(ref terra.Reference) DataFlowAttributes {
	return DataFlowAttributes{ref: ref}
}

func (df DataFlowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df DataFlowAttributes) BuiltInTransform() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("built_in_transform"))
}

func (df DataFlowAttributes) Destinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](df.ref.Append("destinations"))
}

func (df DataFlowAttributes) OutputStream() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("output_stream"))
}

func (df DataFlowAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](df.ref.Append("streams"))
}

func (df DataFlowAttributes) TransformKql() terra.StringValue {
	return terra.ReferenceAsString(df.ref.Append("transform_kql"))
}

type DataSourcesAttributes struct {
	ref terra.Reference
}

func (ds DataSourcesAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DataSourcesAttributes) InternalWithRef(ref terra.Reference) DataSourcesAttributes {
	return DataSourcesAttributes{ref: ref}
}

func (ds DataSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DataSourcesAttributes) DataImport() terra.ListValue[DataSourcesDataImportAttributes] {
	return terra.ReferenceAsList[DataSourcesDataImportAttributes](ds.ref.Append("data_import"))
}

func (ds DataSourcesAttributes) Extension() terra.ListValue[DataSourcesExtensionAttributes] {
	return terra.ReferenceAsList[DataSourcesExtensionAttributes](ds.ref.Append("extension"))
}

func (ds DataSourcesAttributes) IisLog() terra.ListValue[DataSourcesIisLogAttributes] {
	return terra.ReferenceAsList[DataSourcesIisLogAttributes](ds.ref.Append("iis_log"))
}

func (ds DataSourcesAttributes) LogFile() terra.ListValue[DataSourcesLogFileAttributes] {
	return terra.ReferenceAsList[DataSourcesLogFileAttributes](ds.ref.Append("log_file"))
}

func (ds DataSourcesAttributes) PerformanceCounter() terra.ListValue[DataSourcesPerformanceCounterAttributes] {
	return terra.ReferenceAsList[DataSourcesPerformanceCounterAttributes](ds.ref.Append("performance_counter"))
}

func (ds DataSourcesAttributes) PlatformTelemetry() terra.ListValue[DataSourcesPlatformTelemetryAttributes] {
	return terra.ReferenceAsList[DataSourcesPlatformTelemetryAttributes](ds.ref.Append("platform_telemetry"))
}

func (ds DataSourcesAttributes) PrometheusForwarder() terra.ListValue[DataSourcesPrometheusForwarderAttributes] {
	return terra.ReferenceAsList[DataSourcesPrometheusForwarderAttributes](ds.ref.Append("prometheus_forwarder"))
}

func (ds DataSourcesAttributes) Syslog() terra.ListValue[DataSourcesSyslogAttributes] {
	return terra.ReferenceAsList[DataSourcesSyslogAttributes](ds.ref.Append("syslog"))
}

func (ds DataSourcesAttributes) WindowsEventLog() terra.ListValue[DataSourcesWindowsEventLogAttributes] {
	return terra.ReferenceAsList[DataSourcesWindowsEventLogAttributes](ds.ref.Append("windows_event_log"))
}

func (ds DataSourcesAttributes) WindowsFirewallLog() terra.ListValue[DataSourcesWindowsFirewallLogAttributes] {
	return terra.ReferenceAsList[DataSourcesWindowsFirewallLogAttributes](ds.ref.Append("windows_firewall_log"))
}

type DataSourcesDataImportAttributes struct {
	ref terra.Reference
}

func (di DataSourcesDataImportAttributes) InternalRef() (terra.Reference, error) {
	return di.ref, nil
}

func (di DataSourcesDataImportAttributes) InternalWithRef(ref terra.Reference) DataSourcesDataImportAttributes {
	return DataSourcesDataImportAttributes{ref: ref}
}

func (di DataSourcesDataImportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return di.ref.InternalTokens()
}

func (di DataSourcesDataImportAttributes) EventHubDataSource() terra.ListValue[DataSourcesDataImportEventHubDataSourceAttributes] {
	return terra.ReferenceAsList[DataSourcesDataImportEventHubDataSourceAttributes](di.ref.Append("event_hub_data_source"))
}

type DataSourcesDataImportEventHubDataSourceAttributes struct {
	ref terra.Reference
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return ehds.ref, nil
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) InternalWithRef(ref terra.Reference) DataSourcesDataImportEventHubDataSourceAttributes {
	return DataSourcesDataImportEventHubDataSourceAttributes{ref: ref}
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ehds.ref.InternalTokens()
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) ConsumerGroup() terra.StringValue {
	return terra.ReferenceAsString(ehds.ref.Append("consumer_group"))
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ehds.ref.Append("name"))
}

func (ehds DataSourcesDataImportEventHubDataSourceAttributes) Stream() terra.StringValue {
	return terra.ReferenceAsString(ehds.ref.Append("stream"))
}

type DataSourcesExtensionAttributes struct {
	ref terra.Reference
}

func (e DataSourcesExtensionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataSourcesExtensionAttributes) InternalWithRef(ref terra.Reference) DataSourcesExtensionAttributes {
	return DataSourcesExtensionAttributes{ref: ref}
}

func (e DataSourcesExtensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataSourcesExtensionAttributes) ExtensionJson() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("extension_json"))
}

func (e DataSourcesExtensionAttributes) ExtensionName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("extension_name"))
}

func (e DataSourcesExtensionAttributes) InputDataSources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("input_data_sources"))
}

func (e DataSourcesExtensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e DataSourcesExtensionAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("streams"))
}

type DataSourcesIisLogAttributes struct {
	ref terra.Reference
}

func (il DataSourcesIisLogAttributes) InternalRef() (terra.Reference, error) {
	return il.ref, nil
}

func (il DataSourcesIisLogAttributes) InternalWithRef(ref terra.Reference) DataSourcesIisLogAttributes {
	return DataSourcesIisLogAttributes{ref: ref}
}

func (il DataSourcesIisLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return il.ref.InternalTokens()
}

func (il DataSourcesIisLogAttributes) LogDirectories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](il.ref.Append("log_directories"))
}

func (il DataSourcesIisLogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(il.ref.Append("name"))
}

func (il DataSourcesIisLogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](il.ref.Append("streams"))
}

type DataSourcesLogFileAttributes struct {
	ref terra.Reference
}

func (lf DataSourcesLogFileAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf DataSourcesLogFileAttributes) InternalWithRef(ref terra.Reference) DataSourcesLogFileAttributes {
	return DataSourcesLogFileAttributes{ref: ref}
}

func (lf DataSourcesLogFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf DataSourcesLogFileAttributes) FilePatterns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lf.ref.Append("file_patterns"))
}

func (lf DataSourcesLogFileAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("format"))
}

func (lf DataSourcesLogFileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("name"))
}

func (lf DataSourcesLogFileAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lf.ref.Append("streams"))
}

func (lf DataSourcesLogFileAttributes) Settings() terra.ListValue[DataSourcesLogFileSettingsAttributes] {
	return terra.ReferenceAsList[DataSourcesLogFileSettingsAttributes](lf.ref.Append("settings"))
}

type DataSourcesLogFileSettingsAttributes struct {
	ref terra.Reference
}

func (s DataSourcesLogFileSettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSourcesLogFileSettingsAttributes) InternalWithRef(ref terra.Reference) DataSourcesLogFileSettingsAttributes {
	return DataSourcesLogFileSettingsAttributes{ref: ref}
}

func (s DataSourcesLogFileSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSourcesLogFileSettingsAttributes) Text() terra.ListValue[DataSourcesLogFileSettingsTextAttributes] {
	return terra.ReferenceAsList[DataSourcesLogFileSettingsTextAttributes](s.ref.Append("text"))
}

type DataSourcesLogFileSettingsTextAttributes struct {
	ref terra.Reference
}

func (t DataSourcesLogFileSettingsTextAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataSourcesLogFileSettingsTextAttributes) InternalWithRef(ref terra.Reference) DataSourcesLogFileSettingsTextAttributes {
	return DataSourcesLogFileSettingsTextAttributes{ref: ref}
}

func (t DataSourcesLogFileSettingsTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataSourcesLogFileSettingsTextAttributes) RecordStartTimestampFormat() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("record_start_timestamp_format"))
}

type DataSourcesPerformanceCounterAttributes struct {
	ref terra.Reference
}

func (pc DataSourcesPerformanceCounterAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc DataSourcesPerformanceCounterAttributes) InternalWithRef(ref terra.Reference) DataSourcesPerformanceCounterAttributes {
	return DataSourcesPerformanceCounterAttributes{ref: ref}
}

func (pc DataSourcesPerformanceCounterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc DataSourcesPerformanceCounterAttributes) CounterSpecifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("counter_specifiers"))
}

func (pc DataSourcesPerformanceCounterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("name"))
}

func (pc DataSourcesPerformanceCounterAttributes) SamplingFrequencyInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("sampling_frequency_in_seconds"))
}

func (pc DataSourcesPerformanceCounterAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("streams"))
}

type DataSourcesPlatformTelemetryAttributes struct {
	ref terra.Reference
}

func (pt DataSourcesPlatformTelemetryAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt DataSourcesPlatformTelemetryAttributes) InternalWithRef(ref terra.Reference) DataSourcesPlatformTelemetryAttributes {
	return DataSourcesPlatformTelemetryAttributes{ref: ref}
}

func (pt DataSourcesPlatformTelemetryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt DataSourcesPlatformTelemetryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("name"))
}

func (pt DataSourcesPlatformTelemetryAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pt.ref.Append("streams"))
}

type DataSourcesPrometheusForwarderAttributes struct {
	ref terra.Reference
}

func (pf DataSourcesPrometheusForwarderAttributes) InternalRef() (terra.Reference, error) {
	return pf.ref, nil
}

func (pf DataSourcesPrometheusForwarderAttributes) InternalWithRef(ref terra.Reference) DataSourcesPrometheusForwarderAttributes {
	return DataSourcesPrometheusForwarderAttributes{ref: ref}
}

func (pf DataSourcesPrometheusForwarderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pf.ref.InternalTokens()
}

func (pf DataSourcesPrometheusForwarderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pf.ref.Append("name"))
}

func (pf DataSourcesPrometheusForwarderAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pf.ref.Append("streams"))
}

func (pf DataSourcesPrometheusForwarderAttributes) LabelIncludeFilter() terra.SetValue[DataSourcesPrometheusForwarderLabelIncludeFilterAttributes] {
	return terra.ReferenceAsSet[DataSourcesPrometheusForwarderLabelIncludeFilterAttributes](pf.ref.Append("label_include_filter"))
}

type DataSourcesPrometheusForwarderLabelIncludeFilterAttributes struct {
	ref terra.Reference
}

func (lif DataSourcesPrometheusForwarderLabelIncludeFilterAttributes) InternalRef() (terra.Reference, error) {
	return lif.ref, nil
}

func (lif DataSourcesPrometheusForwarderLabelIncludeFilterAttributes) InternalWithRef(ref terra.Reference) DataSourcesPrometheusForwarderLabelIncludeFilterAttributes {
	return DataSourcesPrometheusForwarderLabelIncludeFilterAttributes{ref: ref}
}

func (lif DataSourcesPrometheusForwarderLabelIncludeFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lif.ref.InternalTokens()
}

func (lif DataSourcesPrometheusForwarderLabelIncludeFilterAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(lif.ref.Append("label"))
}

func (lif DataSourcesPrometheusForwarderLabelIncludeFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(lif.ref.Append("value"))
}

type DataSourcesSyslogAttributes struct {
	ref terra.Reference
}

func (s DataSourcesSyslogAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSourcesSyslogAttributes) InternalWithRef(ref terra.Reference) DataSourcesSyslogAttributes {
	return DataSourcesSyslogAttributes{ref: ref}
}

func (s DataSourcesSyslogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSourcesSyslogAttributes) FacilityNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("facility_names"))
}

func (s DataSourcesSyslogAttributes) LogLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("log_levels"))
}

func (s DataSourcesSyslogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataSourcesSyslogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("streams"))
}

type DataSourcesWindowsEventLogAttributes struct {
	ref terra.Reference
}

func (wel DataSourcesWindowsEventLogAttributes) InternalRef() (terra.Reference, error) {
	return wel.ref, nil
}

func (wel DataSourcesWindowsEventLogAttributes) InternalWithRef(ref terra.Reference) DataSourcesWindowsEventLogAttributes {
	return DataSourcesWindowsEventLogAttributes{ref: ref}
}

func (wel DataSourcesWindowsEventLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wel.ref.InternalTokens()
}

func (wel DataSourcesWindowsEventLogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wel.ref.Append("name"))
}

func (wel DataSourcesWindowsEventLogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wel.ref.Append("streams"))
}

func (wel DataSourcesWindowsEventLogAttributes) XPathQueries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wel.ref.Append("x_path_queries"))
}

type DataSourcesWindowsFirewallLogAttributes struct {
	ref terra.Reference
}

func (wfl DataSourcesWindowsFirewallLogAttributes) InternalRef() (terra.Reference, error) {
	return wfl.ref, nil
}

func (wfl DataSourcesWindowsFirewallLogAttributes) InternalWithRef(ref terra.Reference) DataSourcesWindowsFirewallLogAttributes {
	return DataSourcesWindowsFirewallLogAttributes{ref: ref}
}

func (wfl DataSourcesWindowsFirewallLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wfl.ref.InternalTokens()
}

func (wfl DataSourcesWindowsFirewallLogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wfl.ref.Append("name"))
}

func (wfl DataSourcesWindowsFirewallLogAttributes) Streams() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wfl.ref.Append("streams"))
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) AzureMonitorMetrics() terra.ListValue[DestinationsAzureMonitorMetricsAttributes] {
	return terra.ReferenceAsList[DestinationsAzureMonitorMetricsAttributes](d.ref.Append("azure_monitor_metrics"))
}

func (d DestinationsAttributes) EventHub() terra.ListValue[DestinationsEventHubAttributes] {
	return terra.ReferenceAsList[DestinationsEventHubAttributes](d.ref.Append("event_hub"))
}

func (d DestinationsAttributes) EventHubDirect() terra.ListValue[DestinationsEventHubDirectAttributes] {
	return terra.ReferenceAsList[DestinationsEventHubDirectAttributes](d.ref.Append("event_hub_direct"))
}

func (d DestinationsAttributes) LogAnalytics() terra.ListValue[DestinationsLogAnalyticsAttributes] {
	return terra.ReferenceAsList[DestinationsLogAnalyticsAttributes](d.ref.Append("log_analytics"))
}

func (d DestinationsAttributes) MonitorAccount() terra.ListValue[DestinationsMonitorAccountAttributes] {
	return terra.ReferenceAsList[DestinationsMonitorAccountAttributes](d.ref.Append("monitor_account"))
}

func (d DestinationsAttributes) StorageBlob() terra.ListValue[DestinationsStorageBlobAttributes] {
	return terra.ReferenceAsList[DestinationsStorageBlobAttributes](d.ref.Append("storage_blob"))
}

func (d DestinationsAttributes) StorageBlobDirect() terra.ListValue[DestinationsStorageBlobDirectAttributes] {
	return terra.ReferenceAsList[DestinationsStorageBlobDirectAttributes](d.ref.Append("storage_blob_direct"))
}

func (d DestinationsAttributes) StorageTableDirect() terra.ListValue[DestinationsStorageTableDirectAttributes] {
	return terra.ReferenceAsList[DestinationsStorageTableDirectAttributes](d.ref.Append("storage_table_direct"))
}

type DestinationsAzureMonitorMetricsAttributes struct {
	ref terra.Reference
}

func (amm DestinationsAzureMonitorMetricsAttributes) InternalRef() (terra.Reference, error) {
	return amm.ref, nil
}

func (amm DestinationsAzureMonitorMetricsAttributes) InternalWithRef(ref terra.Reference) DestinationsAzureMonitorMetricsAttributes {
	return DestinationsAzureMonitorMetricsAttributes{ref: ref}
}

func (amm DestinationsAzureMonitorMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amm.ref.InternalTokens()
}

func (amm DestinationsAzureMonitorMetricsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amm.ref.Append("name"))
}

type DestinationsEventHubAttributes struct {
	ref terra.Reference
}

func (eh DestinationsEventHubAttributes) InternalRef() (terra.Reference, error) {
	return eh.ref, nil
}

func (eh DestinationsEventHubAttributes) InternalWithRef(ref terra.Reference) DestinationsEventHubAttributes {
	return DestinationsEventHubAttributes{ref: ref}
}

func (eh DestinationsEventHubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eh.ref.InternalTokens()
}

func (eh DestinationsEventHubAttributes) EventHubId() terra.StringValue {
	return terra.ReferenceAsString(eh.ref.Append("event_hub_id"))
}

func (eh DestinationsEventHubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(eh.ref.Append("name"))
}

type DestinationsEventHubDirectAttributes struct {
	ref terra.Reference
}

func (ehd DestinationsEventHubDirectAttributes) InternalRef() (terra.Reference, error) {
	return ehd.ref, nil
}

func (ehd DestinationsEventHubDirectAttributes) InternalWithRef(ref terra.Reference) DestinationsEventHubDirectAttributes {
	return DestinationsEventHubDirectAttributes{ref: ref}
}

func (ehd DestinationsEventHubDirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ehd.ref.InternalTokens()
}

func (ehd DestinationsEventHubDirectAttributes) EventHubId() terra.StringValue {
	return terra.ReferenceAsString(ehd.ref.Append("event_hub_id"))
}

func (ehd DestinationsEventHubDirectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ehd.ref.Append("name"))
}

type DestinationsLogAnalyticsAttributes struct {
	ref terra.Reference
}

func (la DestinationsLogAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la DestinationsLogAnalyticsAttributes) InternalWithRef(ref terra.Reference) DestinationsLogAnalyticsAttributes {
	return DestinationsLogAnalyticsAttributes{ref: ref}
}

func (la DestinationsLogAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la DestinationsLogAnalyticsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("name"))
}

func (la DestinationsLogAnalyticsAttributes) WorkspaceResourceId() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("workspace_resource_id"))
}

type DestinationsMonitorAccountAttributes struct {
	ref terra.Reference
}

func (ma DestinationsMonitorAccountAttributes) InternalRef() (terra.Reference, error) {
	return ma.ref, nil
}

func (ma DestinationsMonitorAccountAttributes) InternalWithRef(ref terra.Reference) DestinationsMonitorAccountAttributes {
	return DestinationsMonitorAccountAttributes{ref: ref}
}

func (ma DestinationsMonitorAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ma.ref.InternalTokens()
}

func (ma DestinationsMonitorAccountAttributes) MonitorAccountId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("monitor_account_id"))
}

func (ma DestinationsMonitorAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("name"))
}

type DestinationsStorageBlobAttributes struct {
	ref terra.Reference
}

func (sb DestinationsStorageBlobAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb DestinationsStorageBlobAttributes) InternalWithRef(ref terra.Reference) DestinationsStorageBlobAttributes {
	return DestinationsStorageBlobAttributes{ref: ref}
}

func (sb DestinationsStorageBlobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb DestinationsStorageBlobAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("container_name"))
}

func (sb DestinationsStorageBlobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("name"))
}

func (sb DestinationsStorageBlobAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("storage_account_id"))
}

type DestinationsStorageBlobDirectAttributes struct {
	ref terra.Reference
}

func (sbd DestinationsStorageBlobDirectAttributes) InternalRef() (terra.Reference, error) {
	return sbd.ref, nil
}

func (sbd DestinationsStorageBlobDirectAttributes) InternalWithRef(ref terra.Reference) DestinationsStorageBlobDirectAttributes {
	return DestinationsStorageBlobDirectAttributes{ref: ref}
}

func (sbd DestinationsStorageBlobDirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbd.ref.InternalTokens()
}

func (sbd DestinationsStorageBlobDirectAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("container_name"))
}

func (sbd DestinationsStorageBlobDirectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("name"))
}

func (sbd DestinationsStorageBlobDirectAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("storage_account_id"))
}

type DestinationsStorageTableDirectAttributes struct {
	ref terra.Reference
}

func (std DestinationsStorageTableDirectAttributes) InternalRef() (terra.Reference, error) {
	return std.ref, nil
}

func (std DestinationsStorageTableDirectAttributes) InternalWithRef(ref terra.Reference) DestinationsStorageTableDirectAttributes {
	return DestinationsStorageTableDirectAttributes{ref: ref}
}

func (std DestinationsStorageTableDirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return std.ref.InternalTokens()
}

func (std DestinationsStorageTableDirectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(std.ref.Append("name"))
}

func (std DestinationsStorageTableDirectAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(std.ref.Append("storage_account_id"))
}

func (std DestinationsStorageTableDirectAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(std.ref.Append("table_name"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type StreamDeclarationAttributes struct {
	ref terra.Reference
}

func (sd StreamDeclarationAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd StreamDeclarationAttributes) InternalWithRef(ref terra.Reference) StreamDeclarationAttributes {
	return StreamDeclarationAttributes{ref: ref}
}

func (sd StreamDeclarationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd StreamDeclarationAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("stream_name"))
}

func (sd StreamDeclarationAttributes) Column() terra.ListValue[StreamDeclarationColumnAttributes] {
	return terra.ReferenceAsList[StreamDeclarationColumnAttributes](sd.ref.Append("column"))
}

type StreamDeclarationColumnAttributes struct {
	ref terra.Reference
}

func (c StreamDeclarationColumnAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StreamDeclarationColumnAttributes) InternalWithRef(ref terra.Reference) StreamDeclarationColumnAttributes {
	return StreamDeclarationColumnAttributes{ref: ref}
}

func (c StreamDeclarationColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StreamDeclarationColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c StreamDeclarationColumnAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataFlowState struct {
	BuiltInTransform string   `json:"built_in_transform"`
	Destinations     []string `json:"destinations"`
	OutputStream     string   `json:"output_stream"`
	Streams          []string `json:"streams"`
	TransformKql     string   `json:"transform_kql"`
}

type DataSourcesState struct {
	DataImport          []DataSourcesDataImportState          `json:"data_import"`
	Extension           []DataSourcesExtensionState           `json:"extension"`
	IisLog              []DataSourcesIisLogState              `json:"iis_log"`
	LogFile             []DataSourcesLogFileState             `json:"log_file"`
	PerformanceCounter  []DataSourcesPerformanceCounterState  `json:"performance_counter"`
	PlatformTelemetry   []DataSourcesPlatformTelemetryState   `json:"platform_telemetry"`
	PrometheusForwarder []DataSourcesPrometheusForwarderState `json:"prometheus_forwarder"`
	Syslog              []DataSourcesSyslogState              `json:"syslog"`
	WindowsEventLog     []DataSourcesWindowsEventLogState     `json:"windows_event_log"`
	WindowsFirewallLog  []DataSourcesWindowsFirewallLogState  `json:"windows_firewall_log"`
}

type DataSourcesDataImportState struct {
	EventHubDataSource []DataSourcesDataImportEventHubDataSourceState `json:"event_hub_data_source"`
}

type DataSourcesDataImportEventHubDataSourceState struct {
	ConsumerGroup string `json:"consumer_group"`
	Name          string `json:"name"`
	Stream        string `json:"stream"`
}

type DataSourcesExtensionState struct {
	ExtensionJson    string   `json:"extension_json"`
	ExtensionName    string   `json:"extension_name"`
	InputDataSources []string `json:"input_data_sources"`
	Name             string   `json:"name"`
	Streams          []string `json:"streams"`
}

type DataSourcesIisLogState struct {
	LogDirectories []string `json:"log_directories"`
	Name           string   `json:"name"`
	Streams        []string `json:"streams"`
}

type DataSourcesLogFileState struct {
	FilePatterns []string                          `json:"file_patterns"`
	Format       string                            `json:"format"`
	Name         string                            `json:"name"`
	Streams      []string                          `json:"streams"`
	Settings     []DataSourcesLogFileSettingsState `json:"settings"`
}

type DataSourcesLogFileSettingsState struct {
	Text []DataSourcesLogFileSettingsTextState `json:"text"`
}

type DataSourcesLogFileSettingsTextState struct {
	RecordStartTimestampFormat string `json:"record_start_timestamp_format"`
}

type DataSourcesPerformanceCounterState struct {
	CounterSpecifiers          []string `json:"counter_specifiers"`
	Name                       string   `json:"name"`
	SamplingFrequencyInSeconds float64  `json:"sampling_frequency_in_seconds"`
	Streams                    []string `json:"streams"`
}

type DataSourcesPlatformTelemetryState struct {
	Name    string   `json:"name"`
	Streams []string `json:"streams"`
}

type DataSourcesPrometheusForwarderState struct {
	Name               string                                                  `json:"name"`
	Streams            []string                                                `json:"streams"`
	LabelIncludeFilter []DataSourcesPrometheusForwarderLabelIncludeFilterState `json:"label_include_filter"`
}

type DataSourcesPrometheusForwarderLabelIncludeFilterState struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

type DataSourcesSyslogState struct {
	FacilityNames []string `json:"facility_names"`
	LogLevels     []string `json:"log_levels"`
	Name          string   `json:"name"`
	Streams       []string `json:"streams"`
}

type DataSourcesWindowsEventLogState struct {
	Name         string   `json:"name"`
	Streams      []string `json:"streams"`
	XPathQueries []string `json:"x_path_queries"`
}

type DataSourcesWindowsFirewallLogState struct {
	Name    string   `json:"name"`
	Streams []string `json:"streams"`
}

type DestinationsState struct {
	AzureMonitorMetrics []DestinationsAzureMonitorMetricsState `json:"azure_monitor_metrics"`
	EventHub            []DestinationsEventHubState            `json:"event_hub"`
	EventHubDirect      []DestinationsEventHubDirectState      `json:"event_hub_direct"`
	LogAnalytics        []DestinationsLogAnalyticsState        `json:"log_analytics"`
	MonitorAccount      []DestinationsMonitorAccountState      `json:"monitor_account"`
	StorageBlob         []DestinationsStorageBlobState         `json:"storage_blob"`
	StorageBlobDirect   []DestinationsStorageBlobDirectState   `json:"storage_blob_direct"`
	StorageTableDirect  []DestinationsStorageTableDirectState  `json:"storage_table_direct"`
}

type DestinationsAzureMonitorMetricsState struct {
	Name string `json:"name"`
}

type DestinationsEventHubState struct {
	EventHubId string `json:"event_hub_id"`
	Name       string `json:"name"`
}

type DestinationsEventHubDirectState struct {
	EventHubId string `json:"event_hub_id"`
	Name       string `json:"name"`
}

type DestinationsLogAnalyticsState struct {
	Name                string `json:"name"`
	WorkspaceResourceId string `json:"workspace_resource_id"`
}

type DestinationsMonitorAccountState struct {
	MonitorAccountId string `json:"monitor_account_id"`
	Name             string `json:"name"`
}

type DestinationsStorageBlobState struct {
	ContainerName    string `json:"container_name"`
	Name             string `json:"name"`
	StorageAccountId string `json:"storage_account_id"`
}

type DestinationsStorageBlobDirectState struct {
	ContainerName    string `json:"container_name"`
	Name             string `json:"name"`
	StorageAccountId string `json:"storage_account_id"`
}

type DestinationsStorageTableDirectState struct {
	Name             string `json:"name"`
	StorageAccountId string `json:"storage_account_id"`
	TableName        string `json:"table_name"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type StreamDeclarationState struct {
	StreamName string                         `json:"stream_name"`
	Column     []StreamDeclarationColumnState `json:"column"`
}

type StreamDeclarationColumnState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
