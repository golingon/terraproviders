// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_monitor_data_collection_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_monitor_data_collection_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermMonitorDataCollectionRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amdcr *Resource) Type() string {
	return "azurerm_monitor_data_collection_rule"
}

// LocalName returns the local name for [Resource].
func (amdcr *Resource) LocalName() string {
	return amdcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amdcr *Resource) Configuration() interface{} {
	return amdcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amdcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amdcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amdcr *Resource) Dependencies() terra.Dependencies {
	return amdcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amdcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return amdcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amdcr *Resource) Attributes() azurermMonitorDataCollectionRuleAttributes {
	return azurermMonitorDataCollectionRuleAttributes{ref: terra.ReferenceResource(amdcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amdcr *Resource) ImportState(state io.Reader) error {
	amdcr.state = &azurermMonitorDataCollectionRuleState{}
	if err := json.NewDecoder(state).Decode(amdcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amdcr.Type(), amdcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amdcr *Resource) State() (*azurermMonitorDataCollectionRuleState, bool) {
	return amdcr.state, amdcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amdcr *Resource) StateMust() *azurermMonitorDataCollectionRuleState {
	if amdcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amdcr.Type(), amdcr.LocalName()))
	}
	return amdcr.state
}

// Args contains the configurations for azurerm_monitor_data_collection_rule.
type Args struct {
	// DataCollectionEndpointId: string, optional
	DataCollectionEndpointId terra.StringValue `hcl:"data_collection_endpoint_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, optional
	Kind terra.StringValue `hcl:"kind,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DataFlow: min=1
	DataFlow []DataFlow `hcl:"data_flow,block" validate:"min=1"`
	// DataSources: optional
	DataSources *DataSources `hcl:"data_sources,block"`
	// Destinations: required
	Destinations *Destinations `hcl:"destinations,block" validate:"required"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// StreamDeclaration: min=0
	StreamDeclaration []StreamDeclaration `hcl:"stream_declaration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermMonitorDataCollectionRuleAttributes struct {
	ref terra.Reference
}

// DataCollectionEndpointId returns a reference to field data_collection_endpoint_id of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) DataCollectionEndpointId() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("data_collection_endpoint_id"))
}

// Description returns a reference to field description of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("id"))
}

// ImmutableId returns a reference to field immutable_id of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) ImmutableId() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("immutable_id"))
}

// Kind returns a reference to field kind of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("kind"))
}

// Location returns a reference to field location of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(amdcr.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_monitor_data_collection_rule.
func (amdcr azurermMonitorDataCollectionRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amdcr.ref.Append("tags"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) DataFlow() terra.ListValue[DataFlowAttributes] {
	return terra.ReferenceAsList[DataFlowAttributes](amdcr.ref.Append("data_flow"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) DataSources() terra.ListValue[DataSourcesAttributes] {
	return terra.ReferenceAsList[DataSourcesAttributes](amdcr.ref.Append("data_sources"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) Destinations() terra.ListValue[DestinationsAttributes] {
	return terra.ReferenceAsList[DestinationsAttributes](amdcr.ref.Append("destinations"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](amdcr.ref.Append("identity"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) StreamDeclaration() terra.SetValue[StreamDeclarationAttributes] {
	return terra.ReferenceAsSet[StreamDeclarationAttributes](amdcr.ref.Append("stream_declaration"))
}

func (amdcr azurermMonitorDataCollectionRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amdcr.ref.Append("timeouts"))
}

type azurermMonitorDataCollectionRuleState struct {
	DataCollectionEndpointId string                   `json:"data_collection_endpoint_id"`
	Description              string                   `json:"description"`
	Id                       string                   `json:"id"`
	ImmutableId              string                   `json:"immutable_id"`
	Kind                     string                   `json:"kind"`
	Location                 string                   `json:"location"`
	Name                     string                   `json:"name"`
	ResourceGroupName        string                   `json:"resource_group_name"`
	Tags                     map[string]string        `json:"tags"`
	DataFlow                 []DataFlowState          `json:"data_flow"`
	DataSources              []DataSourcesState       `json:"data_sources"`
	Destinations             []DestinationsState      `json:"destinations"`
	Identity                 []IdentityState          `json:"identity"`
	StreamDeclaration        []StreamDeclarationState `json:"stream_declaration"`
	Timeouts                 *TimeoutsState           `json:"timeouts"`
}
