// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_desktop_host_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_desktop_host_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualDesktopHostPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avdhp *Resource) Type() string {
	return "azurerm_virtual_desktop_host_pool"
}

// LocalName returns the local name for [Resource].
func (avdhp *Resource) LocalName() string {
	return avdhp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avdhp *Resource) Configuration() interface{} {
	return avdhp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avdhp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avdhp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avdhp *Resource) Dependencies() terra.Dependencies {
	return avdhp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avdhp *Resource) LifecycleManagement() *terra.Lifecycle {
	return avdhp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avdhp *Resource) Attributes() azurermVirtualDesktopHostPoolAttributes {
	return azurermVirtualDesktopHostPoolAttributes{ref: terra.ReferenceResource(avdhp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avdhp *Resource) ImportState(state io.Reader) error {
	avdhp.state = &azurermVirtualDesktopHostPoolState{}
	if err := json.NewDecoder(state).Decode(avdhp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avdhp.Type(), avdhp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avdhp *Resource) State() (*azurermVirtualDesktopHostPoolState, bool) {
	return avdhp.state, avdhp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avdhp *Resource) StateMust() *azurermVirtualDesktopHostPoolState {
	if avdhp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avdhp.Type(), avdhp.LocalName()))
	}
	return avdhp.state
}

// Args contains the configurations for azurerm_virtual_desktop_host_pool.
type Args struct {
	// CustomRdpProperties: string, optional
	CustomRdpProperties terra.StringValue `hcl:"custom_rdp_properties,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerType: string, required
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr" validate:"required"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MaximumSessionsAllowed: number, optional
	MaximumSessionsAllowed terra.NumberValue `hcl:"maximum_sessions_allowed,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PersonalDesktopAssignmentType: string, optional
	PersonalDesktopAssignmentType terra.StringValue `hcl:"personal_desktop_assignment_type,attr"`
	// PreferredAppGroupType: string, optional
	PreferredAppGroupType terra.StringValue `hcl:"preferred_app_group_type,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StartVmOnConnect: bool, optional
	StartVmOnConnect terra.BoolValue `hcl:"start_vm_on_connect,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ValidateEnvironment: bool, optional
	ValidateEnvironment terra.BoolValue `hcl:"validate_environment,attr"`
	// VmTemplate: string, optional
	VmTemplate terra.StringValue `hcl:"vm_template,attr"`
	// ScheduledAgentUpdates: optional
	ScheduledAgentUpdates *ScheduledAgentUpdates `hcl:"scheduled_agent_updates,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualDesktopHostPoolAttributes struct {
	ref terra.Reference
}

// CustomRdpProperties returns a reference to field custom_rdp_properties of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) CustomRdpProperties() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("custom_rdp_properties"))
}

// Description returns a reference to field description of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("description"))
}

// FriendlyName returns a reference to field friendly_name of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("friendly_name"))
}

// Id returns a reference to field id of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("id"))
}

// LoadBalancerType returns a reference to field load_balancer_type of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("load_balancer_type"))
}

// Location returns a reference to field location of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("location"))
}

// MaximumSessionsAllowed returns a reference to field maximum_sessions_allowed of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) MaximumSessionsAllowed() terra.NumberValue {
	return terra.ReferenceAsNumber(avdhp.ref.Append("maximum_sessions_allowed"))
}

// Name returns a reference to field name of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("name"))
}

// PersonalDesktopAssignmentType returns a reference to field personal_desktop_assignment_type of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) PersonalDesktopAssignmentType() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("personal_desktop_assignment_type"))
}

// PreferredAppGroupType returns a reference to field preferred_app_group_type of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) PreferredAppGroupType() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("preferred_app_group_type"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("resource_group_name"))
}

// StartVmOnConnect returns a reference to field start_vm_on_connect of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) StartVmOnConnect() terra.BoolValue {
	return terra.ReferenceAsBool(avdhp.ref.Append("start_vm_on_connect"))
}

// Tags returns a reference to field tags of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avdhp.ref.Append("tags"))
}

// Type returns a reference to field type of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("type"))
}

// ValidateEnvironment returns a reference to field validate_environment of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) ValidateEnvironment() terra.BoolValue {
	return terra.ReferenceAsBool(avdhp.ref.Append("validate_environment"))
}

// VmTemplate returns a reference to field vm_template of azurerm_virtual_desktop_host_pool.
func (avdhp azurermVirtualDesktopHostPoolAttributes) VmTemplate() terra.StringValue {
	return terra.ReferenceAsString(avdhp.ref.Append("vm_template"))
}

func (avdhp azurermVirtualDesktopHostPoolAttributes) ScheduledAgentUpdates() terra.ListValue[ScheduledAgentUpdatesAttributes] {
	return terra.ReferenceAsList[ScheduledAgentUpdatesAttributes](avdhp.ref.Append("scheduled_agent_updates"))
}

func (avdhp azurermVirtualDesktopHostPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avdhp.ref.Append("timeouts"))
}

type azurermVirtualDesktopHostPoolState struct {
	CustomRdpProperties           string                       `json:"custom_rdp_properties"`
	Description                   string                       `json:"description"`
	FriendlyName                  string                       `json:"friendly_name"`
	Id                            string                       `json:"id"`
	LoadBalancerType              string                       `json:"load_balancer_type"`
	Location                      string                       `json:"location"`
	MaximumSessionsAllowed        float64                      `json:"maximum_sessions_allowed"`
	Name                          string                       `json:"name"`
	PersonalDesktopAssignmentType string                       `json:"personal_desktop_assignment_type"`
	PreferredAppGroupType         string                       `json:"preferred_app_group_type"`
	ResourceGroupName             string                       `json:"resource_group_name"`
	StartVmOnConnect              bool                         `json:"start_vm_on_connect"`
	Tags                          map[string]string            `json:"tags"`
	Type                          string                       `json:"type"`
	ValidateEnvironment           bool                         `json:"validate_environment"`
	VmTemplate                    string                       `json:"vm_template"`
	ScheduledAgentUpdates         []ScheduledAgentUpdatesState `json:"scheduled_agent_updates"`
	Timeouts                      *TimeoutsState               `json:"timeouts"`
}
