// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_iothub_dps

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_iothub_dps.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermIothubDpsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aid *Resource) Type() string {
	return "azurerm_iothub_dps"
}

// LocalName returns the local name for [Resource].
func (aid *Resource) LocalName() string {
	return aid.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aid *Resource) Configuration() interface{} {
	return aid.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aid *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aid)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aid *Resource) Dependencies() terra.Dependencies {
	return aid.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aid *Resource) LifecycleManagement() *terra.Lifecycle {
	return aid.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aid *Resource) Attributes() azurermIothubDpsAttributes {
	return azurermIothubDpsAttributes{ref: terra.ReferenceResource(aid)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aid *Resource) ImportState(state io.Reader) error {
	aid.state = &azurermIothubDpsState{}
	if err := json.NewDecoder(state).Decode(aid.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aid.Type(), aid.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aid *Resource) State() (*azurermIothubDpsState, bool) {
	return aid.state, aid.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aid *Resource) StateMust() *azurermIothubDpsState {
	if aid.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aid.Type(), aid.LocalName()))
	}
	return aid.state
}

// Args contains the configurations for azurerm_iothub_dps.
type Args struct {
	// AllocationPolicy: string, optional
	AllocationPolicy terra.StringValue `hcl:"allocation_policy,attr"`
	// DataResidencyEnabled: bool, optional
	DataResidencyEnabled terra.BoolValue `hcl:"data_residency_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicNetworkAccessEnabled: bool, optional
	PublicNetworkAccessEnabled terra.BoolValue `hcl:"public_network_access_enabled,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// IpFilterRule: min=0
	IpFilterRule []IpFilterRule `hcl:"ip_filter_rule,block" validate:"min=0"`
	// LinkedHub: min=0
	LinkedHub []LinkedHub `hcl:"linked_hub,block" validate:"min=0"`
	// Sku: required
	Sku *Sku `hcl:"sku,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermIothubDpsAttributes struct {
	ref terra.Reference
}

// AllocationPolicy returns a reference to field allocation_policy of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) AllocationPolicy() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("allocation_policy"))
}

// DataResidencyEnabled returns a reference to field data_residency_enabled of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) DataResidencyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aid.ref.Append("data_residency_enabled"))
}

// DeviceProvisioningHostName returns a reference to field device_provisioning_host_name of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) DeviceProvisioningHostName() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("device_provisioning_host_name"))
}

// Id returns a reference to field id of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("id"))
}

// IdScope returns a reference to field id_scope of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) IdScope() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("id_scope"))
}

// Location returns a reference to field location of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("name"))
}

// PublicNetworkAccessEnabled returns a reference to field public_network_access_enabled of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) PublicNetworkAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aid.ref.Append("public_network_access_enabled"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("resource_group_name"))
}

// ServiceOperationsHostName returns a reference to field service_operations_host_name of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) ServiceOperationsHostName() terra.StringValue {
	return terra.ReferenceAsString(aid.ref.Append("service_operations_host_name"))
}

// Tags returns a reference to field tags of azurerm_iothub_dps.
func (aid azurermIothubDpsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aid.ref.Append("tags"))
}

func (aid azurermIothubDpsAttributes) IpFilterRule() terra.ListValue[IpFilterRuleAttributes] {
	return terra.ReferenceAsList[IpFilterRuleAttributes](aid.ref.Append("ip_filter_rule"))
}

func (aid azurermIothubDpsAttributes) LinkedHub() terra.ListValue[LinkedHubAttributes] {
	return terra.ReferenceAsList[LinkedHubAttributes](aid.ref.Append("linked_hub"))
}

func (aid azurermIothubDpsAttributes) Sku() terra.ListValue[SkuAttributes] {
	return terra.ReferenceAsList[SkuAttributes](aid.ref.Append("sku"))
}

func (aid azurermIothubDpsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aid.ref.Append("timeouts"))
}

type azurermIothubDpsState struct {
	AllocationPolicy           string              `json:"allocation_policy"`
	DataResidencyEnabled       bool                `json:"data_residency_enabled"`
	DeviceProvisioningHostName string              `json:"device_provisioning_host_name"`
	Id                         string              `json:"id"`
	IdScope                    string              `json:"id_scope"`
	Location                   string              `json:"location"`
	Name                       string              `json:"name"`
	PublicNetworkAccessEnabled bool                `json:"public_network_access_enabled"`
	ResourceGroupName          string              `json:"resource_group_name"`
	ServiceOperationsHostName  string              `json:"service_operations_host_name"`
	Tags                       map[string]string   `json:"tags"`
	IpFilterRule               []IpFilterRuleState `json:"ip_filter_rule"`
	LinkedHub                  []LinkedHubState    `json:"linked_hub"`
	Sku                        []SkuState          `json:"sku"`
	Timeouts                   *TimeoutsState      `json:"timeouts"`
}
