// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_synapse_spark_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_synapse_spark_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermSynapseSparkPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assp *Resource) Type() string {
	return "azurerm_synapse_spark_pool"
}

// LocalName returns the local name for [Resource].
func (assp *Resource) LocalName() string {
	return assp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assp *Resource) Configuration() interface{} {
	return assp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assp *Resource) Dependencies() terra.Dependencies {
	return assp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assp *Resource) LifecycleManagement() *terra.Lifecycle {
	return assp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assp *Resource) Attributes() azurermSynapseSparkPoolAttributes {
	return azurermSynapseSparkPoolAttributes{ref: terra.ReferenceResource(assp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assp *Resource) ImportState(state io.Reader) error {
	assp.state = &azurermSynapseSparkPoolState{}
	if err := json.NewDecoder(state).Decode(assp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assp.Type(), assp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assp *Resource) State() (*azurermSynapseSparkPoolState, bool) {
	return assp.state, assp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assp *Resource) StateMust() *azurermSynapseSparkPoolState {
	if assp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assp.Type(), assp.LocalName()))
	}
	return assp.state
}

// Args contains the configurations for azurerm_synapse_spark_pool.
type Args struct {
	// CacheSize: number, optional
	CacheSize terra.NumberValue `hcl:"cache_size,attr"`
	// ComputeIsolationEnabled: bool, optional
	ComputeIsolationEnabled terra.BoolValue `hcl:"compute_isolation_enabled,attr"`
	// DynamicExecutorAllocationEnabled: bool, optional
	DynamicExecutorAllocationEnabled terra.BoolValue `hcl:"dynamic_executor_allocation_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxExecutors: number, optional
	MaxExecutors terra.NumberValue `hcl:"max_executors,attr"`
	// MinExecutors: number, optional
	MinExecutors terra.NumberValue `hcl:"min_executors,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeSize: string, required
	NodeSize terra.StringValue `hcl:"node_size,attr" validate:"required"`
	// NodeSizeFamily: string, required
	NodeSizeFamily terra.StringValue `hcl:"node_size_family,attr" validate:"required"`
	// SessionLevelPackagesEnabled: bool, optional
	SessionLevelPackagesEnabled terra.BoolValue `hcl:"session_level_packages_enabled,attr"`
	// SparkEventsFolder: string, optional
	SparkEventsFolder terra.StringValue `hcl:"spark_events_folder,attr"`
	// SparkLogFolder: string, optional
	SparkLogFolder terra.StringValue `hcl:"spark_log_folder,attr"`
	// SparkVersion: string, optional
	SparkVersion terra.StringValue `hcl:"spark_version,attr"`
	// SynapseWorkspaceId: string, required
	SynapseWorkspaceId terra.StringValue `hcl:"synapse_workspace_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AutoPause: optional
	AutoPause *AutoPause `hcl:"auto_pause,block"`
	// AutoScale: optional
	AutoScale *AutoScale `hcl:"auto_scale,block"`
	// LibraryRequirement: optional
	LibraryRequirement *LibraryRequirement `hcl:"library_requirement,block"`
	// SparkConfig: optional
	SparkConfig *SparkConfig `hcl:"spark_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermSynapseSparkPoolAttributes struct {
	ref terra.Reference
}

// CacheSize returns a reference to field cache_size of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) CacheSize() terra.NumberValue {
	return terra.ReferenceAsNumber(assp.ref.Append("cache_size"))
}

// ComputeIsolationEnabled returns a reference to field compute_isolation_enabled of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) ComputeIsolationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("compute_isolation_enabled"))
}

// DynamicExecutorAllocationEnabled returns a reference to field dynamic_executor_allocation_enabled of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) DynamicExecutorAllocationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("dynamic_executor_allocation_enabled"))
}

// Id returns a reference to field id of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("id"))
}

// MaxExecutors returns a reference to field max_executors of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) MaxExecutors() terra.NumberValue {
	return terra.ReferenceAsNumber(assp.ref.Append("max_executors"))
}

// MinExecutors returns a reference to field min_executors of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) MinExecutors() terra.NumberValue {
	return terra.ReferenceAsNumber(assp.ref.Append("min_executors"))
}

// Name returns a reference to field name of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("name"))
}

// NodeCount returns a reference to field node_count of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(assp.ref.Append("node_count"))
}

// NodeSize returns a reference to field node_size of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) NodeSize() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("node_size"))
}

// NodeSizeFamily returns a reference to field node_size_family of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) NodeSizeFamily() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("node_size_family"))
}

// SessionLevelPackagesEnabled returns a reference to field session_level_packages_enabled of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) SessionLevelPackagesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("session_level_packages_enabled"))
}

// SparkEventsFolder returns a reference to field spark_events_folder of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) SparkEventsFolder() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("spark_events_folder"))
}

// SparkLogFolder returns a reference to field spark_log_folder of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) SparkLogFolder() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("spark_log_folder"))
}

// SparkVersion returns a reference to field spark_version of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) SparkVersion() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("spark_version"))
}

// SynapseWorkspaceId returns a reference to field synapse_workspace_id of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) SynapseWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("synapse_workspace_id"))
}

// Tags returns a reference to field tags of azurerm_synapse_spark_pool.
func (assp azurermSynapseSparkPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assp.ref.Append("tags"))
}

func (assp azurermSynapseSparkPoolAttributes) AutoPause() terra.ListValue[AutoPauseAttributes] {
	return terra.ReferenceAsList[AutoPauseAttributes](assp.ref.Append("auto_pause"))
}

func (assp azurermSynapseSparkPoolAttributes) AutoScale() terra.ListValue[AutoScaleAttributes] {
	return terra.ReferenceAsList[AutoScaleAttributes](assp.ref.Append("auto_scale"))
}

func (assp azurermSynapseSparkPoolAttributes) LibraryRequirement() terra.ListValue[LibraryRequirementAttributes] {
	return terra.ReferenceAsList[LibraryRequirementAttributes](assp.ref.Append("library_requirement"))
}

func (assp azurermSynapseSparkPoolAttributes) SparkConfig() terra.ListValue[SparkConfigAttributes] {
	return terra.ReferenceAsList[SparkConfigAttributes](assp.ref.Append("spark_config"))
}

func (assp azurermSynapseSparkPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assp.ref.Append("timeouts"))
}

type azurermSynapseSparkPoolState struct {
	CacheSize                        float64                   `json:"cache_size"`
	ComputeIsolationEnabled          bool                      `json:"compute_isolation_enabled"`
	DynamicExecutorAllocationEnabled bool                      `json:"dynamic_executor_allocation_enabled"`
	Id                               string                    `json:"id"`
	MaxExecutors                     float64                   `json:"max_executors"`
	MinExecutors                     float64                   `json:"min_executors"`
	Name                             string                    `json:"name"`
	NodeCount                        float64                   `json:"node_count"`
	NodeSize                         string                    `json:"node_size"`
	NodeSizeFamily                   string                    `json:"node_size_family"`
	SessionLevelPackagesEnabled      bool                      `json:"session_level_packages_enabled"`
	SparkEventsFolder                string                    `json:"spark_events_folder"`
	SparkLogFolder                   string                    `json:"spark_log_folder"`
	SparkVersion                     string                    `json:"spark_version"`
	SynapseWorkspaceId               string                    `json:"synapse_workspace_id"`
	Tags                             map[string]string         `json:"tags"`
	AutoPause                        []AutoPauseState          `json:"auto_pause"`
	AutoScale                        []AutoScaleState          `json:"auto_scale"`
	LibraryRequirement               []LibraryRequirementState `json:"library_requirement"`
	SparkConfig                      []SparkConfigState        `json:"spark_config"`
	Timeouts                         *TimeoutsState            `json:"timeouts"`
}
