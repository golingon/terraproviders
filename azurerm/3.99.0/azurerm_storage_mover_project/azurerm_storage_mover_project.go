// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_storage_mover_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_storage_mover_project.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermStorageMoverProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asmp *Resource) Type() string {
	return "azurerm_storage_mover_project"
}

// LocalName returns the local name for [Resource].
func (asmp *Resource) LocalName() string {
	return asmp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asmp *Resource) Configuration() interface{} {
	return asmp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asmp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asmp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asmp *Resource) Dependencies() terra.Dependencies {
	return asmp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asmp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asmp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asmp *Resource) Attributes() azurermStorageMoverProjectAttributes {
	return azurermStorageMoverProjectAttributes{ref: terra.ReferenceResource(asmp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asmp *Resource) ImportState(state io.Reader) error {
	asmp.state = &azurermStorageMoverProjectState{}
	if err := json.NewDecoder(state).Decode(asmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asmp.Type(), asmp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asmp *Resource) State() (*azurermStorageMoverProjectState, bool) {
	return asmp.state, asmp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asmp *Resource) StateMust() *azurermStorageMoverProjectState {
	if asmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asmp.Type(), asmp.LocalName()))
	}
	return asmp.state
}

// Args contains the configurations for azurerm_storage_mover_project.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageMoverId: string, required
	StorageMoverId terra.StringValue `hcl:"storage_mover_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermStorageMoverProjectAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_storage_mover_project.
func (asmp azurermStorageMoverProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asmp.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_storage_mover_project.
func (asmp azurermStorageMoverProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asmp.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_storage_mover_project.
func (asmp azurermStorageMoverProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asmp.ref.Append("name"))
}

// StorageMoverId returns a reference to field storage_mover_id of azurerm_storage_mover_project.
func (asmp azurermStorageMoverProjectAttributes) StorageMoverId() terra.StringValue {
	return terra.ReferenceAsString(asmp.ref.Append("storage_mover_id"))
}

func (asmp azurermStorageMoverProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asmp.ref.Append("timeouts"))
}

type azurermStorageMoverProjectState struct {
	Description    string         `json:"description"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	StorageMoverId string         `json:"storage_mover_id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
