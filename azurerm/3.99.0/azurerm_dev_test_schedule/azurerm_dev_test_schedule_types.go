// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_dev_test_schedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DailyRecurrence struct {
	// Time: string, required
	Time terra.StringValue `hcl:"time,attr" validate:"required"`
}

type HourlyRecurrence struct {
	// Minute: number, required
	Minute terra.NumberValue `hcl:"minute,attr" validate:"required"`
}

type NotificationSettings struct {
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// TimeInMinutes: number, optional
	TimeInMinutes terra.NumberValue `hcl:"time_in_minutes,attr"`
	// WebhookUrl: string, optional
	WebhookUrl terra.StringValue `hcl:"webhook_url,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WeeklyRecurrence struct {
	// Time: string, required
	Time terra.StringValue `hcl:"time,attr" validate:"required"`
	// WeekDays: list of string, optional
	WeekDays terra.ListValue[terra.StringValue] `hcl:"week_days,attr"`
}

type DailyRecurrenceAttributes struct {
	ref terra.Reference
}

func (dr DailyRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DailyRecurrenceAttributes) InternalWithRef(ref terra.Reference) DailyRecurrenceAttributes {
	return DailyRecurrenceAttributes{ref: ref}
}

func (dr DailyRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DailyRecurrenceAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("time"))
}

type HourlyRecurrenceAttributes struct {
	ref terra.Reference
}

func (hr HourlyRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HourlyRecurrenceAttributes) InternalWithRef(ref terra.Reference) HourlyRecurrenceAttributes {
	return HourlyRecurrenceAttributes{ref: ref}
}

func (hr HourlyRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HourlyRecurrenceAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(hr.ref.Append("minute"))
}

type NotificationSettingsAttributes struct {
	ref terra.Reference
}

func (ns NotificationSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ns.ref, nil
}

func (ns NotificationSettingsAttributes) InternalWithRef(ref terra.Reference) NotificationSettingsAttributes {
	return NotificationSettingsAttributes{ref: ref}
}

func (ns NotificationSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ns.ref.InternalTokens()
}

func (ns NotificationSettingsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ns.ref.Append("status"))
}

func (ns NotificationSettingsAttributes) TimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ns.ref.Append("time_in_minutes"))
}

func (ns NotificationSettingsAttributes) WebhookUrl() terra.StringValue {
	return terra.ReferenceAsString(ns.ref.Append("webhook_url"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WeeklyRecurrenceAttributes struct {
	ref terra.Reference
}

func (wr WeeklyRecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return wr.ref, nil
}

func (wr WeeklyRecurrenceAttributes) InternalWithRef(ref terra.Reference) WeeklyRecurrenceAttributes {
	return WeeklyRecurrenceAttributes{ref: ref}
}

func (wr WeeklyRecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wr.ref.InternalTokens()
}

func (wr WeeklyRecurrenceAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(wr.ref.Append("time"))
}

func (wr WeeklyRecurrenceAttributes) WeekDays() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wr.ref.Append("week_days"))
}

type DailyRecurrenceState struct {
	Time string `json:"time"`
}

type HourlyRecurrenceState struct {
	Minute float64 `json:"minute"`
}

type NotificationSettingsState struct {
	Status        string  `json:"status"`
	TimeInMinutes float64 `json:"time_in_minutes"`
	WebhookUrl    string  `json:"webhook_url"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WeeklyRecurrenceState struct {
	Time     string   `json:"time"`
	WeekDays []string `json:"week_days"`
}
