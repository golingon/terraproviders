// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_servicebus_subscription_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_servicebus_subscription_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermServicebusSubscriptionRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assr *Resource) Type() string {
	return "azurerm_servicebus_subscription_rule"
}

// LocalName returns the local name for [Resource].
func (assr *Resource) LocalName() string {
	return assr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assr *Resource) Configuration() interface{} {
	return assr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assr *Resource) Dependencies() terra.Dependencies {
	return assr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assr *Resource) LifecycleManagement() *terra.Lifecycle {
	return assr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assr *Resource) Attributes() azurermServicebusSubscriptionRuleAttributes {
	return azurermServicebusSubscriptionRuleAttributes{ref: terra.ReferenceResource(assr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assr *Resource) ImportState(state io.Reader) error {
	assr.state = &azurermServicebusSubscriptionRuleState{}
	if err := json.NewDecoder(state).Decode(assr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assr.Type(), assr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assr *Resource) State() (*azurermServicebusSubscriptionRuleState, bool) {
	return assr.state, assr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assr *Resource) StateMust() *azurermServicebusSubscriptionRuleState {
	if assr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assr.Type(), assr.LocalName()))
	}
	return assr.state
}

// Args contains the configurations for azurerm_servicebus_subscription_rule.
type Args struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// FilterType: string, required
	FilterType terra.StringValue `hcl:"filter_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlFilter: string, optional
	SqlFilter terra.StringValue `hcl:"sql_filter,attr"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// CorrelationFilter: optional
	CorrelationFilter *CorrelationFilter `hcl:"correlation_filter,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermServicebusSubscriptionRuleAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("action"))
}

// FilterType returns a reference to field filter_type of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("filter_type"))
}

// Id returns a reference to field id of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("name"))
}

// SqlFilter returns a reference to field sql_filter of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) SqlFilter() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("sql_filter"))
}

// SqlFilterCompatibilityLevel returns a reference to field sql_filter_compatibility_level of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) SqlFilterCompatibilityLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(assr.ref.Append("sql_filter_compatibility_level"))
}

// SubscriptionId returns a reference to field subscription_id of azurerm_servicebus_subscription_rule.
func (assr azurermServicebusSubscriptionRuleAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(assr.ref.Append("subscription_id"))
}

func (assr azurermServicebusSubscriptionRuleAttributes) CorrelationFilter() terra.ListValue[CorrelationFilterAttributes] {
	return terra.ReferenceAsList[CorrelationFilterAttributes](assr.ref.Append("correlation_filter"))
}

func (assr azurermServicebusSubscriptionRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assr.ref.Append("timeouts"))
}

type azurermServicebusSubscriptionRuleState struct {
	Action                      string                   `json:"action"`
	FilterType                  string                   `json:"filter_type"`
	Id                          string                   `json:"id"`
	Name                        string                   `json:"name"`
	SqlFilter                   string                   `json:"sql_filter"`
	SqlFilterCompatibilityLevel float64                  `json:"sql_filter_compatibility_level"`
	SubscriptionId              string                   `json:"subscription_id"`
	CorrelationFilter           []CorrelationFilterState `json:"correlation_filter"`
	Timeouts                    *TimeoutsState           `json:"timeouts"`
}
