// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm_virtual_machine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource azurerm_virtual_machine.
type Resource struct {
	Name      string
	Args      Args
	state     *azurermVirtualMachineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avm *Resource) Type() string {
	return "azurerm_virtual_machine"
}

// LocalName returns the local name for [Resource].
func (avm *Resource) LocalName() string {
	return avm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avm *Resource) Configuration() interface{} {
	return avm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avm *Resource) Dependencies() terra.Dependencies {
	return avm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avm *Resource) LifecycleManagement() *terra.Lifecycle {
	return avm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avm *Resource) Attributes() azurermVirtualMachineAttributes {
	return azurermVirtualMachineAttributes{ref: terra.ReferenceResource(avm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avm *Resource) ImportState(state io.Reader) error {
	avm.state = &azurermVirtualMachineState{}
	if err := json.NewDecoder(state).Decode(avm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avm.Type(), avm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avm *Resource) State() (*azurermVirtualMachineState, bool) {
	return avm.state, avm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avm *Resource) StateMust() *azurermVirtualMachineState {
	if avm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avm.Type(), avm.LocalName()))
	}
	return avm.state
}

// Args contains the configurations for azurerm_virtual_machine.
type Args struct {
	// AvailabilitySetId: string, optional
	AvailabilitySetId terra.StringValue `hcl:"availability_set_id,attr"`
	// DeleteDataDisksOnTermination: bool, optional
	DeleteDataDisksOnTermination terra.BoolValue `hcl:"delete_data_disks_on_termination,attr"`
	// DeleteOsDiskOnTermination: bool, optional
	DeleteOsDiskOnTermination terra.BoolValue `hcl:"delete_os_disk_on_termination,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkInterfaceIds: list of string, required
	NetworkInterfaceIds terra.ListValue[terra.StringValue] `hcl:"network_interface_ids,attr" validate:"required"`
	// PrimaryNetworkInterfaceId: string, optional
	PrimaryNetworkInterfaceId terra.StringValue `hcl:"primary_network_interface_id,attr"`
	// ProximityPlacementGroupId: string, optional
	ProximityPlacementGroupId terra.StringValue `hcl:"proximity_placement_group_id,attr"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// Zones: list of string, optional
	Zones terra.ListValue[terra.StringValue] `hcl:"zones,attr"`
	// AdditionalCapabilities: optional
	AdditionalCapabilities *AdditionalCapabilities `hcl:"additional_capabilities,block"`
	// BootDiagnostics: optional
	BootDiagnostics *BootDiagnostics `hcl:"boot_diagnostics,block"`
	// Identity: optional
	Identity *Identity `hcl:"identity,block"`
	// OsProfile: optional
	OsProfile *OsProfile `hcl:"os_profile,block"`
	// OsProfileLinuxConfig: optional
	OsProfileLinuxConfig *OsProfileLinuxConfig `hcl:"os_profile_linux_config,block"`
	// OsProfileSecrets: min=0
	OsProfileSecrets []OsProfileSecrets `hcl:"os_profile_secrets,block" validate:"min=0"`
	// OsProfileWindowsConfig: optional
	OsProfileWindowsConfig *OsProfileWindowsConfig `hcl:"os_profile_windows_config,block"`
	// Plan: optional
	Plan *Plan `hcl:"plan,block"`
	// StorageDataDisk: min=0
	StorageDataDisk []StorageDataDisk `hcl:"storage_data_disk,block" validate:"min=0"`
	// StorageImageReference: optional
	StorageImageReference *StorageImageReference `hcl:"storage_image_reference,block"`
	// StorageOsDisk: required
	StorageOsDisk *StorageOsDisk `hcl:"storage_os_disk,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type azurermVirtualMachineAttributes struct {
	ref terra.Reference
}

// AvailabilitySetId returns a reference to field availability_set_id of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) AvailabilitySetId() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("availability_set_id"))
}

// DeleteDataDisksOnTermination returns a reference to field delete_data_disks_on_termination of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) DeleteDataDisksOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(avm.ref.Append("delete_data_disks_on_termination"))
}

// DeleteOsDiskOnTermination returns a reference to field delete_os_disk_on_termination of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) DeleteOsDiskOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(avm.ref.Append("delete_os_disk_on_termination"))
}

// Id returns a reference to field id of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("license_type"))
}

// Location returns a reference to field location of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("name"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) NetworkInterfaceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avm.ref.Append("network_interface_ids"))
}

// PrimaryNetworkInterfaceId returns a reference to field primary_network_interface_id of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) PrimaryNetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("primary_network_interface_id"))
}

// ProximityPlacementGroupId returns a reference to field proximity_placement_group_id of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) ProximityPlacementGroupId() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("proximity_placement_group_id"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avm.ref.Append("tags"))
}

// VmSize returns a reference to field vm_size of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(avm.ref.Append("vm_size"))
}

// Zones returns a reference to field zones of azurerm_virtual_machine.
func (avm azurermVirtualMachineAttributes) Zones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avm.ref.Append("zones"))
}

func (avm azurermVirtualMachineAttributes) AdditionalCapabilities() terra.ListValue[AdditionalCapabilitiesAttributes] {
	return terra.ReferenceAsList[AdditionalCapabilitiesAttributes](avm.ref.Append("additional_capabilities"))
}

func (avm azurermVirtualMachineAttributes) BootDiagnostics() terra.ListValue[BootDiagnosticsAttributes] {
	return terra.ReferenceAsList[BootDiagnosticsAttributes](avm.ref.Append("boot_diagnostics"))
}

func (avm azurermVirtualMachineAttributes) Identity() terra.ListValue[IdentityAttributes] {
	return terra.ReferenceAsList[IdentityAttributes](avm.ref.Append("identity"))
}

func (avm azurermVirtualMachineAttributes) OsProfile() terra.SetValue[OsProfileAttributes] {
	return terra.ReferenceAsSet[OsProfileAttributes](avm.ref.Append("os_profile"))
}

func (avm azurermVirtualMachineAttributes) OsProfileLinuxConfig() terra.SetValue[OsProfileLinuxConfigAttributes] {
	return terra.ReferenceAsSet[OsProfileLinuxConfigAttributes](avm.ref.Append("os_profile_linux_config"))
}

func (avm azurermVirtualMachineAttributes) OsProfileSecrets() terra.ListValue[OsProfileSecretsAttributes] {
	return terra.ReferenceAsList[OsProfileSecretsAttributes](avm.ref.Append("os_profile_secrets"))
}

func (avm azurermVirtualMachineAttributes) OsProfileWindowsConfig() terra.SetValue[OsProfileWindowsConfigAttributes] {
	return terra.ReferenceAsSet[OsProfileWindowsConfigAttributes](avm.ref.Append("os_profile_windows_config"))
}

func (avm azurermVirtualMachineAttributes) Plan() terra.ListValue[PlanAttributes] {
	return terra.ReferenceAsList[PlanAttributes](avm.ref.Append("plan"))
}

func (avm azurermVirtualMachineAttributes) StorageDataDisk() terra.ListValue[StorageDataDiskAttributes] {
	return terra.ReferenceAsList[StorageDataDiskAttributes](avm.ref.Append("storage_data_disk"))
}

func (avm azurermVirtualMachineAttributes) StorageImageReference() terra.SetValue[StorageImageReferenceAttributes] {
	return terra.ReferenceAsSet[StorageImageReferenceAttributes](avm.ref.Append("storage_image_reference"))
}

func (avm azurermVirtualMachineAttributes) StorageOsDisk() terra.ListValue[StorageOsDiskAttributes] {
	return terra.ReferenceAsList[StorageOsDiskAttributes](avm.ref.Append("storage_os_disk"))
}

func (avm azurermVirtualMachineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avm.ref.Append("timeouts"))
}

type azurermVirtualMachineState struct {
	AvailabilitySetId            string                        `json:"availability_set_id"`
	DeleteDataDisksOnTermination bool                          `json:"delete_data_disks_on_termination"`
	DeleteOsDiskOnTermination    bool                          `json:"delete_os_disk_on_termination"`
	Id                           string                        `json:"id"`
	LicenseType                  string                        `json:"license_type"`
	Location                     string                        `json:"location"`
	Name                         string                        `json:"name"`
	NetworkInterfaceIds          []string                      `json:"network_interface_ids"`
	PrimaryNetworkInterfaceId    string                        `json:"primary_network_interface_id"`
	ProximityPlacementGroupId    string                        `json:"proximity_placement_group_id"`
	ResourceGroupName            string                        `json:"resource_group_name"`
	Tags                         map[string]string             `json:"tags"`
	VmSize                       string                        `json:"vm_size"`
	Zones                        []string                      `json:"zones"`
	AdditionalCapabilities       []AdditionalCapabilitiesState `json:"additional_capabilities"`
	BootDiagnostics              []BootDiagnosticsState        `json:"boot_diagnostics"`
	Identity                     []IdentityState               `json:"identity"`
	OsProfile                    []OsProfileState              `json:"os_profile"`
	OsProfileLinuxConfig         []OsProfileLinuxConfigState   `json:"os_profile_linux_config"`
	OsProfileSecrets             []OsProfileSecretsState       `json:"os_profile_secrets"`
	OsProfileWindowsConfig       []OsProfileWindowsConfigState `json:"os_profile_windows_config"`
	Plan                         []PlanState                   `json:"plan"`
	StorageDataDisk              []StorageDataDiskState        `json:"storage_data_disk"`
	StorageImageReference        []StorageImageReferenceState  `json:"storage_image_reference"`
	StorageOsDisk                []StorageOsDiskState          `json:"storage_os_disk"`
	Timeouts                     *TimeoutsState                `json:"timeouts"`
}
