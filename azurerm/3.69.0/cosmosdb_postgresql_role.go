// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	cosmosdbpostgresqlrole "github.com/golingon/terraproviders/azurerm/3.69.0/cosmosdbpostgresqlrole"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCosmosdbPostgresqlRole creates a new instance of [CosmosdbPostgresqlRole].
func NewCosmosdbPostgresqlRole(name string, args CosmosdbPostgresqlRoleArgs) *CosmosdbPostgresqlRole {
	return &CosmosdbPostgresqlRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CosmosdbPostgresqlRole)(nil)

// CosmosdbPostgresqlRole represents the Terraform resource azurerm_cosmosdb_postgresql_role.
type CosmosdbPostgresqlRole struct {
	Name      string
	Args      CosmosdbPostgresqlRoleArgs
	state     *cosmosdbPostgresqlRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) Type() string {
	return "azurerm_cosmosdb_postgresql_role"
}

// LocalName returns the local name for [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) LocalName() string {
	return cpr.Name
}

// Configuration returns the configuration (args) for [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) Configuration() interface{} {
	return cpr.Args
}

// DependOn is used for other resources to depend on [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) DependOn() terra.Reference {
	return terra.ReferenceResource(cpr)
}

// Dependencies returns the list of resources [CosmosdbPostgresqlRole] depends_on.
func (cpr *CosmosdbPostgresqlRole) Dependencies() terra.Dependencies {
	return cpr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) LifecycleManagement() *terra.Lifecycle {
	return cpr.Lifecycle
}

// Attributes returns the attributes for [CosmosdbPostgresqlRole].
func (cpr *CosmosdbPostgresqlRole) Attributes() cosmosdbPostgresqlRoleAttributes {
	return cosmosdbPostgresqlRoleAttributes{ref: terra.ReferenceResource(cpr)}
}

// ImportState imports the given attribute values into [CosmosdbPostgresqlRole]'s state.
func (cpr *CosmosdbPostgresqlRole) ImportState(av io.Reader) error {
	cpr.state = &cosmosdbPostgresqlRoleState{}
	if err := json.NewDecoder(av).Decode(cpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpr.Type(), cpr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CosmosdbPostgresqlRole] has state.
func (cpr *CosmosdbPostgresqlRole) State() (*cosmosdbPostgresqlRoleState, bool) {
	return cpr.state, cpr.state != nil
}

// StateMust returns the state for [CosmosdbPostgresqlRole]. Panics if the state is nil.
func (cpr *CosmosdbPostgresqlRole) StateMust() *cosmosdbPostgresqlRoleState {
	if cpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpr.Type(), cpr.LocalName()))
	}
	return cpr.state
}

// CosmosdbPostgresqlRoleArgs contains the configurations for azurerm_cosmosdb_postgresql_role.
type CosmosdbPostgresqlRoleArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cosmosdbpostgresqlrole.Timeouts `hcl:"timeouts,block"`
}
type cosmosdbPostgresqlRoleAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_cosmosdb_postgresql_role.
func (cpr cosmosdbPostgresqlRoleAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(cpr.ref.Append("cluster_id"))
}

// Id returns a reference to field id of azurerm_cosmosdb_postgresql_role.
func (cpr cosmosdbPostgresqlRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cpr.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_cosmosdb_postgresql_role.
func (cpr cosmosdbPostgresqlRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cpr.ref.Append("name"))
}

// Password returns a reference to field password of azurerm_cosmosdb_postgresql_role.
func (cpr cosmosdbPostgresqlRoleAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cpr.ref.Append("password"))
}

func (cpr cosmosdbPostgresqlRoleAttributes) Timeouts() cosmosdbpostgresqlrole.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cosmosdbpostgresqlrole.TimeoutsAttributes](cpr.ref.Append("timeouts"))
}

type cosmosdbPostgresqlRoleState struct {
	ClusterId string                                `json:"cluster_id"`
	Id        string                                `json:"id"`
	Name      string                                `json:"name"`
	Password  string                                `json:"password"`
	Timeouts  *cosmosdbpostgresqlrole.TimeoutsState `json:"timeouts"`
}
