// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlserverkey "github.com/golingon/terraproviders/azurerm/3.69.0/postgresqlserverkey"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPostgresqlServerKey creates a new instance of [PostgresqlServerKey].
func NewPostgresqlServerKey(name string, args PostgresqlServerKeyArgs) *PostgresqlServerKey {
	return &PostgresqlServerKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlServerKey)(nil)

// PostgresqlServerKey represents the Terraform resource azurerm_postgresql_server_key.
type PostgresqlServerKey struct {
	Name      string
	Args      PostgresqlServerKeyArgs
	state     *postgresqlServerKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PostgresqlServerKey].
func (psk *PostgresqlServerKey) Type() string {
	return "azurerm_postgresql_server_key"
}

// LocalName returns the local name for [PostgresqlServerKey].
func (psk *PostgresqlServerKey) LocalName() string {
	return psk.Name
}

// Configuration returns the configuration (args) for [PostgresqlServerKey].
func (psk *PostgresqlServerKey) Configuration() interface{} {
	return psk.Args
}

// DependOn is used for other resources to depend on [PostgresqlServerKey].
func (psk *PostgresqlServerKey) DependOn() terra.Reference {
	return terra.ReferenceResource(psk)
}

// Dependencies returns the list of resources [PostgresqlServerKey] depends_on.
func (psk *PostgresqlServerKey) Dependencies() terra.Dependencies {
	return psk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PostgresqlServerKey].
func (psk *PostgresqlServerKey) LifecycleManagement() *terra.Lifecycle {
	return psk.Lifecycle
}

// Attributes returns the attributes for [PostgresqlServerKey].
func (psk *PostgresqlServerKey) Attributes() postgresqlServerKeyAttributes {
	return postgresqlServerKeyAttributes{ref: terra.ReferenceResource(psk)}
}

// ImportState imports the given attribute values into [PostgresqlServerKey]'s state.
func (psk *PostgresqlServerKey) ImportState(av io.Reader) error {
	psk.state = &postgresqlServerKeyState{}
	if err := json.NewDecoder(av).Decode(psk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psk.Type(), psk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PostgresqlServerKey] has state.
func (psk *PostgresqlServerKey) State() (*postgresqlServerKeyState, bool) {
	return psk.state, psk.state != nil
}

// StateMust returns the state for [PostgresqlServerKey]. Panics if the state is nil.
func (psk *PostgresqlServerKey) StateMust() *postgresqlServerKeyState {
	if psk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psk.Type(), psk.LocalName()))
	}
	return psk.state
}

// PostgresqlServerKeyArgs contains the configurations for azurerm_postgresql_server_key.
type PostgresqlServerKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyVaultKeyId: string, required
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *postgresqlserverkey.Timeouts `hcl:"timeouts,block"`
}
type postgresqlServerKeyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_postgresql_server_key.
func (psk postgresqlServerKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(psk.ref.Append("id"))
}

// KeyVaultKeyId returns a reference to field key_vault_key_id of azurerm_postgresql_server_key.
func (psk postgresqlServerKeyAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(psk.ref.Append("key_vault_key_id"))
}

// ServerId returns a reference to field server_id of azurerm_postgresql_server_key.
func (psk postgresqlServerKeyAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(psk.ref.Append("server_id"))
}

func (psk postgresqlServerKeyAttributes) Timeouts() postgresqlserverkey.TimeoutsAttributes {
	return terra.ReferenceAsSingle[postgresqlserverkey.TimeoutsAttributes](psk.ref.Append("timeouts"))
}

type postgresqlServerKeyState struct {
	Id            string                             `json:"id"`
	KeyVaultKeyId string                             `json:"key_vault_key_id"`
	ServerId      string                             `json:"server_id"`
	Timeouts      *postgresqlserverkey.TimeoutsState `json:"timeouts"`
}
