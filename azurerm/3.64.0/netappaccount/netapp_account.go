// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package netappaccount

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ActiveDirectory struct {
	// DnsServers: list of string, required
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr" validate:"required"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// OrganizationalUnit: string, optional
	OrganizationalUnit terra.StringValue `hcl:"organizational_unit,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// SmbServerName: string, required
	SmbServerName terra.StringValue `hcl:"smb_server_name,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad ActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad ActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) ActiveDirectoryAttributes {
	return ActiveDirectoryAttributes{ref: ref}
}

func (ad ActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad ActiveDirectoryAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ad.ref.Append("dns_servers"))
}

func (ad ActiveDirectoryAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("domain"))
}

func (ad ActiveDirectoryAttributes) OrganizationalUnit() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("organizational_unit"))
}

func (ad ActiveDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("password"))
}

func (ad ActiveDirectoryAttributes) SmbServerName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("smb_server_name"))
}

func (ad ActiveDirectoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActiveDirectoryState struct {
	DnsServers         []string `json:"dns_servers"`
	Domain             string   `json:"domain"`
	OrganizationalUnit string   `json:"organizational_unit"`
	Password           string   `json:"password"`
	SmbServerName      string   `json:"smb_server_name"`
	Username           string   `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
