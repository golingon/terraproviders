// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package monitoractionruleactiongroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Condition struct {
	// AlertContext: optional
	AlertContext *AlertContext `hcl:"alert_context,block"`
	// AlertRuleId: optional
	AlertRuleId *AlertRuleId `hcl:"alert_rule_id,block"`
	// Description: optional
	Description *Description `hcl:"description,block"`
	// Monitor: optional
	Monitor *Monitor `hcl:"monitor,block"`
	// MonitorService: optional
	MonitorService *MonitorService `hcl:"monitor_service,block"`
	// Severity: optional
	Severity *Severity `hcl:"severity,block"`
	// TargetResourceType: optional
	TargetResourceType *TargetResourceType `hcl:"target_resource_type,block"`
}

type AlertContext struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type AlertRuleId struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Description struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Monitor struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type MonitorService struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Severity struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TargetResourceType struct {
	// Operator: string, required
	Operator terra.StringValue `hcl:"operator,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Scope struct {
	// ResourceIds: set of string, required
	ResourceIds terra.SetValue[terra.StringValue] `hcl:"resource_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) AlertContext() terra.ListValue[AlertContextAttributes] {
	return terra.ReferenceAsList[AlertContextAttributes](c.ref.Append("alert_context"))
}

func (c ConditionAttributes) AlertRuleId() terra.ListValue[AlertRuleIdAttributes] {
	return terra.ReferenceAsList[AlertRuleIdAttributes](c.ref.Append("alert_rule_id"))
}

func (c ConditionAttributes) Description() terra.ListValue[DescriptionAttributes] {
	return terra.ReferenceAsList[DescriptionAttributes](c.ref.Append("description"))
}

func (c ConditionAttributes) Monitor() terra.ListValue[MonitorAttributes] {
	return terra.ReferenceAsList[MonitorAttributes](c.ref.Append("monitor"))
}

func (c ConditionAttributes) MonitorService() terra.ListValue[MonitorServiceAttributes] {
	return terra.ReferenceAsList[MonitorServiceAttributes](c.ref.Append("monitor_service"))
}

func (c ConditionAttributes) Severity() terra.ListValue[SeverityAttributes] {
	return terra.ReferenceAsList[SeverityAttributes](c.ref.Append("severity"))
}

func (c ConditionAttributes) TargetResourceType() terra.ListValue[TargetResourceTypeAttributes] {
	return terra.ReferenceAsList[TargetResourceTypeAttributes](c.ref.Append("target_resource_type"))
}

type AlertContextAttributes struct {
	ref terra.Reference
}

func (ac AlertContextAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AlertContextAttributes) InternalWithRef(ref terra.Reference) AlertContextAttributes {
	return AlertContextAttributes{ref: ref}
}

func (ac AlertContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AlertContextAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("operator"))
}

func (ac AlertContextAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ac.ref.Append("values"))
}

type AlertRuleIdAttributes struct {
	ref terra.Reference
}

func (ari AlertRuleIdAttributes) InternalRef() (terra.Reference, error) {
	return ari.ref, nil
}

func (ari AlertRuleIdAttributes) InternalWithRef(ref terra.Reference) AlertRuleIdAttributes {
	return AlertRuleIdAttributes{ref: ref}
}

func (ari AlertRuleIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ari.ref.InternalTokens()
}

func (ari AlertRuleIdAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ari.ref.Append("operator"))
}

func (ari AlertRuleIdAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ari.ref.Append("values"))
}

type DescriptionAttributes struct {
	ref terra.Reference
}

func (d DescriptionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DescriptionAttributes) InternalWithRef(ref terra.Reference) DescriptionAttributes {
	return DescriptionAttributes{ref: ref}
}

func (d DescriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DescriptionAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operator"))
}

func (d DescriptionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type MonitorAttributes struct {
	ref terra.Reference
}

func (m MonitorAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitorAttributes) InternalWithRef(ref terra.Reference) MonitorAttributes {
	return MonitorAttributes{ref: ref}
}

func (m MonitorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitorAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("operator"))
}

func (m MonitorAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("values"))
}

type MonitorServiceAttributes struct {
	ref terra.Reference
}

func (ms MonitorServiceAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MonitorServiceAttributes) InternalWithRef(ref terra.Reference) MonitorServiceAttributes {
	return MonitorServiceAttributes{ref: ref}
}

func (ms MonitorServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MonitorServiceAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("operator"))
}

func (ms MonitorServiceAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ms.ref.Append("values"))
}

type SeverityAttributes struct {
	ref terra.Reference
}

func (s SeverityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SeverityAttributes) InternalWithRef(ref terra.Reference) SeverityAttributes {
	return SeverityAttributes{ref: ref}
}

func (s SeverityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SeverityAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("operator"))
}

func (s SeverityAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("values"))
}

type TargetResourceTypeAttributes struct {
	ref terra.Reference
}

func (trt TargetResourceTypeAttributes) InternalRef() (terra.Reference, error) {
	return trt.ref, nil
}

func (trt TargetResourceTypeAttributes) InternalWithRef(ref terra.Reference) TargetResourceTypeAttributes {
	return TargetResourceTypeAttributes{ref: ref}
}

func (trt TargetResourceTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trt.ref.InternalTokens()
}

func (trt TargetResourceTypeAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(trt.ref.Append("operator"))
}

func (trt TargetResourceTypeAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](trt.ref.Append("values"))
}

type ScopeAttributes struct {
	ref terra.Reference
}

func (s ScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScopeAttributes) InternalWithRef(ref terra.Reference) ScopeAttributes {
	return ScopeAttributes{ref: ref}
}

func (s ScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScopeAttributes) ResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("resource_ids"))
}

func (s ScopeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConditionState struct {
	AlertContext       []AlertContextState       `json:"alert_context"`
	AlertRuleId        []AlertRuleIdState        `json:"alert_rule_id"`
	Description        []DescriptionState        `json:"description"`
	Monitor            []MonitorState            `json:"monitor"`
	MonitorService     []MonitorServiceState     `json:"monitor_service"`
	Severity           []SeverityState           `json:"severity"`
	TargetResourceType []TargetResourceTypeState `json:"target_resource_type"`
}

type AlertContextState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type AlertRuleIdState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type DescriptionState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type MonitorState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type MonitorServiceState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type SeverityState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type TargetResourceTypeState struct {
	Operator string   `json:"operator"`
	Values   []string `json:"values"`
}

type ScopeState struct {
	ResourceIds []string `json:"resource_ids"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
