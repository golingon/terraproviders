// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package netappvolume

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DataProtectionReplication struct {
	// EndpointType: string, optional
	EndpointType terra.StringValue `hcl:"endpoint_type,attr"`
	// RemoteVolumeLocation: string, required
	RemoteVolumeLocation terra.StringValue `hcl:"remote_volume_location,attr" validate:"required"`
	// RemoteVolumeResourceId: string, required
	RemoteVolumeResourceId terra.StringValue `hcl:"remote_volume_resource_id,attr" validate:"required"`
	// ReplicationFrequency: string, required
	ReplicationFrequency terra.StringValue `hcl:"replication_frequency,attr" validate:"required"`
}

type DataProtectionSnapshotPolicy struct {
	// SnapshotPolicyId: string, required
	SnapshotPolicyId terra.StringValue `hcl:"snapshot_policy_id,attr" validate:"required"`
}

type ExportPolicyRule struct {
	// AllowedClients: set of string, required
	AllowedClients terra.SetValue[terra.StringValue] `hcl:"allowed_clients,attr" validate:"required"`
	// ProtocolsEnabled: list of string, optional
	ProtocolsEnabled terra.ListValue[terra.StringValue] `hcl:"protocols_enabled,attr"`
	// RootAccessEnabled: bool, optional
	RootAccessEnabled terra.BoolValue `hcl:"root_access_enabled,attr"`
	// RuleIndex: number, required
	RuleIndex terra.NumberValue `hcl:"rule_index,attr" validate:"required"`
	// UnixReadOnly: bool, optional
	UnixReadOnly terra.BoolValue `hcl:"unix_read_only,attr"`
	// UnixReadWrite: bool, optional
	UnixReadWrite terra.BoolValue `hcl:"unix_read_write,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataProtectionReplicationAttributes struct {
	ref terra.Reference
}

func (dpr DataProtectionReplicationAttributes) InternalRef() (terra.Reference, error) {
	return dpr.ref, nil
}

func (dpr DataProtectionReplicationAttributes) InternalWithRef(ref terra.Reference) DataProtectionReplicationAttributes {
	return DataProtectionReplicationAttributes{ref: ref}
}

func (dpr DataProtectionReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpr.ref.InternalTokens()
}

func (dpr DataProtectionReplicationAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(dpr.ref.Append("endpoint_type"))
}

func (dpr DataProtectionReplicationAttributes) RemoteVolumeLocation() terra.StringValue {
	return terra.ReferenceAsString(dpr.ref.Append("remote_volume_location"))
}

func (dpr DataProtectionReplicationAttributes) RemoteVolumeResourceId() terra.StringValue {
	return terra.ReferenceAsString(dpr.ref.Append("remote_volume_resource_id"))
}

func (dpr DataProtectionReplicationAttributes) ReplicationFrequency() terra.StringValue {
	return terra.ReferenceAsString(dpr.ref.Append("replication_frequency"))
}

type DataProtectionSnapshotPolicyAttributes struct {
	ref terra.Reference
}

func (dpsp DataProtectionSnapshotPolicyAttributes) InternalRef() (terra.Reference, error) {
	return dpsp.ref, nil
}

func (dpsp DataProtectionSnapshotPolicyAttributes) InternalWithRef(ref terra.Reference) DataProtectionSnapshotPolicyAttributes {
	return DataProtectionSnapshotPolicyAttributes{ref: ref}
}

func (dpsp DataProtectionSnapshotPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpsp.ref.InternalTokens()
}

func (dpsp DataProtectionSnapshotPolicyAttributes) SnapshotPolicyId() terra.StringValue {
	return terra.ReferenceAsString(dpsp.ref.Append("snapshot_policy_id"))
}

type ExportPolicyRuleAttributes struct {
	ref terra.Reference
}

func (epr ExportPolicyRuleAttributes) InternalRef() (terra.Reference, error) {
	return epr.ref, nil
}

func (epr ExportPolicyRuleAttributes) InternalWithRef(ref terra.Reference) ExportPolicyRuleAttributes {
	return ExportPolicyRuleAttributes{ref: ref}
}

func (epr ExportPolicyRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return epr.ref.InternalTokens()
}

func (epr ExportPolicyRuleAttributes) AllowedClients() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](epr.ref.Append("allowed_clients"))
}

func (epr ExportPolicyRuleAttributes) ProtocolsEnabled() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](epr.ref.Append("protocols_enabled"))
}

func (epr ExportPolicyRuleAttributes) RootAccessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(epr.ref.Append("root_access_enabled"))
}

func (epr ExportPolicyRuleAttributes) RuleIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(epr.ref.Append("rule_index"))
}

func (epr ExportPolicyRuleAttributes) UnixReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(epr.ref.Append("unix_read_only"))
}

func (epr ExportPolicyRuleAttributes) UnixReadWrite() terra.BoolValue {
	return terra.ReferenceAsBool(epr.ref.Append("unix_read_write"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataProtectionReplicationState struct {
	EndpointType           string `json:"endpoint_type"`
	RemoteVolumeLocation   string `json:"remote_volume_location"`
	RemoteVolumeResourceId string `json:"remote_volume_resource_id"`
	ReplicationFrequency   string `json:"replication_frequency"`
}

type DataProtectionSnapshotPolicyState struct {
	SnapshotPolicyId string `json:"snapshot_policy_id"`
}

type ExportPolicyRuleState struct {
	AllowedClients    []string `json:"allowed_clients"`
	ProtocolsEnabled  []string `json:"protocols_enabled"`
	RootAccessEnabled bool     `json:"root_access_enabled"`
	RuleIndex         float64  `json:"rule_index"`
	UnixReadOnly      bool     `json:"unix_read_only"`
	UnixReadWrite     bool     `json:"unix_read_write"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
