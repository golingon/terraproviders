// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package frontdoorcustomhttpsconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CustomHttpsConfiguration struct {
	// AzureKeyVaultCertificateSecretName: string, optional
	AzureKeyVaultCertificateSecretName terra.StringValue `hcl:"azure_key_vault_certificate_secret_name,attr"`
	// AzureKeyVaultCertificateSecretVersion: string, optional
	AzureKeyVaultCertificateSecretVersion terra.StringValue `hcl:"azure_key_vault_certificate_secret_version,attr"`
	// AzureKeyVaultCertificateVaultId: string, optional
	AzureKeyVaultCertificateVaultId terra.StringValue `hcl:"azure_key_vault_certificate_vault_id,attr"`
	// CertificateSource: string, optional
	CertificateSource terra.StringValue `hcl:"certificate_source,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomHttpsConfigurationAttributes struct {
	ref terra.Reference
}

func (chc CustomHttpsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return chc.ref, nil
}

func (chc CustomHttpsConfigurationAttributes) InternalWithRef(ref terra.Reference) CustomHttpsConfigurationAttributes {
	return CustomHttpsConfigurationAttributes{ref: ref}
}

func (chc CustomHttpsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return chc.ref.InternalTokens()
}

func (chc CustomHttpsConfigurationAttributes) AzureKeyVaultCertificateSecretName() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("azure_key_vault_certificate_secret_name"))
}

func (chc CustomHttpsConfigurationAttributes) AzureKeyVaultCertificateSecretVersion() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("azure_key_vault_certificate_secret_version"))
}

func (chc CustomHttpsConfigurationAttributes) AzureKeyVaultCertificateVaultId() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("azure_key_vault_certificate_vault_id"))
}

func (chc CustomHttpsConfigurationAttributes) CertificateSource() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("certificate_source"))
}

func (chc CustomHttpsConfigurationAttributes) MinimumTlsVersion() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("minimum_tls_version"))
}

func (chc CustomHttpsConfigurationAttributes) ProvisioningState() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("provisioning_state"))
}

func (chc CustomHttpsConfigurationAttributes) ProvisioningSubstate() terra.StringValue {
	return terra.ReferenceAsString(chc.ref.Append("provisioning_substate"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomHttpsConfigurationState struct {
	AzureKeyVaultCertificateSecretName    string `json:"azure_key_vault_certificate_secret_name"`
	AzureKeyVaultCertificateSecretVersion string `json:"azure_key_vault_certificate_secret_version"`
	AzureKeyVaultCertificateVaultId       string `json:"azure_key_vault_certificate_vault_id"`
	CertificateSource                     string `json:"certificate_source"`
	MinimumTlsVersion                     string `json:"minimum_tls_version"`
	ProvisioningState                     string `json:"provisioning_state"`
	ProvisioningSubstate                  string `json:"provisioning_substate"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
