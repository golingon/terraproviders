// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package kubernetescluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type KubeAdminConfig struct{}

type KubeConfig struct{}

type AciConnectorLinux struct {
	// SubnetName: string, required
	SubnetName terra.StringValue `hcl:"subnet_name,attr" validate:"required"`
	// ConnectorIdentity: min=0
	ConnectorIdentity []ConnectorIdentity `hcl:"connector_identity,block" validate:"min=0"`
}

type ConnectorIdentity struct{}

type ApiServerAccessProfile struct {
	// AuthorizedIpRanges: set of string, optional
	AuthorizedIpRanges terra.SetValue[terra.StringValue] `hcl:"authorized_ip_ranges,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// VnetIntegrationEnabled: bool, optional
	VnetIntegrationEnabled terra.BoolValue `hcl:"vnet_integration_enabled,attr"`
}

type AutoScalerProfile struct {
	// BalanceSimilarNodeGroups: bool, optional
	BalanceSimilarNodeGroups terra.BoolValue `hcl:"balance_similar_node_groups,attr"`
	// EmptyBulkDeleteMax: string, optional
	EmptyBulkDeleteMax terra.StringValue `hcl:"empty_bulk_delete_max,attr"`
	// Expander: string, optional
	Expander terra.StringValue `hcl:"expander,attr"`
	// MaxGracefulTerminationSec: string, optional
	MaxGracefulTerminationSec terra.StringValue `hcl:"max_graceful_termination_sec,attr"`
	// MaxNodeProvisioningTime: string, optional
	MaxNodeProvisioningTime terra.StringValue `hcl:"max_node_provisioning_time,attr"`
	// MaxUnreadyNodes: number, optional
	MaxUnreadyNodes terra.NumberValue `hcl:"max_unready_nodes,attr"`
	// MaxUnreadyPercentage: number, optional
	MaxUnreadyPercentage terra.NumberValue `hcl:"max_unready_percentage,attr"`
	// NewPodScaleUpDelay: string, optional
	NewPodScaleUpDelay terra.StringValue `hcl:"new_pod_scale_up_delay,attr"`
	// ScaleDownDelayAfterAdd: string, optional
	ScaleDownDelayAfterAdd terra.StringValue `hcl:"scale_down_delay_after_add,attr"`
	// ScaleDownDelayAfterDelete: string, optional
	ScaleDownDelayAfterDelete terra.StringValue `hcl:"scale_down_delay_after_delete,attr"`
	// ScaleDownDelayAfterFailure: string, optional
	ScaleDownDelayAfterFailure terra.StringValue `hcl:"scale_down_delay_after_failure,attr"`
	// ScaleDownUnneeded: string, optional
	ScaleDownUnneeded terra.StringValue `hcl:"scale_down_unneeded,attr"`
	// ScaleDownUnready: string, optional
	ScaleDownUnready terra.StringValue `hcl:"scale_down_unready,attr"`
	// ScaleDownUtilizationThreshold: string, optional
	ScaleDownUtilizationThreshold terra.StringValue `hcl:"scale_down_utilization_threshold,attr"`
	// ScanInterval: string, optional
	ScanInterval terra.StringValue `hcl:"scan_interval,attr"`
	// SkipNodesWithLocalStorage: bool, optional
	SkipNodesWithLocalStorage terra.BoolValue `hcl:"skip_nodes_with_local_storage,attr"`
	// SkipNodesWithSystemPods: bool, optional
	SkipNodesWithSystemPods terra.BoolValue `hcl:"skip_nodes_with_system_pods,attr"`
}

type AzureActiveDirectoryRoleBasedAccessControl struct {
	// AdminGroupObjectIds: list of string, optional
	AdminGroupObjectIds terra.ListValue[terra.StringValue] `hcl:"admin_group_object_ids,attr"`
	// AzureRbacEnabled: bool, optional
	AzureRbacEnabled terra.BoolValue `hcl:"azure_rbac_enabled,attr"`
	// ClientAppId: string, optional
	ClientAppId terra.StringValue `hcl:"client_app_id,attr"`
	// Managed: bool, optional
	Managed terra.BoolValue `hcl:"managed,attr"`
	// ServerAppId: string, optional
	ServerAppId terra.StringValue `hcl:"server_app_id,attr"`
	// ServerAppSecret: string, optional
	ServerAppSecret terra.StringValue `hcl:"server_app_secret,attr"`
	// TenantId: string, optional
	TenantId terra.StringValue `hcl:"tenant_id,attr"`
}

type ConfidentialComputing struct {
	// SgxQuoteHelperEnabled: bool, required
	SgxQuoteHelperEnabled terra.BoolValue `hcl:"sgx_quote_helper_enabled,attr" validate:"required"`
}

type DefaultNodePool struct {
	// CapacityReservationGroupId: string, optional
	CapacityReservationGroupId terra.StringValue `hcl:"capacity_reservation_group_id,attr"`
	// CustomCaTrustEnabled: bool, optional
	CustomCaTrustEnabled terra.BoolValue `hcl:"custom_ca_trust_enabled,attr"`
	// EnableAutoScaling: bool, optional
	EnableAutoScaling terra.BoolValue `hcl:"enable_auto_scaling,attr"`
	// EnableHostEncryption: bool, optional
	EnableHostEncryption terra.BoolValue `hcl:"enable_host_encryption,attr"`
	// EnableNodePublicIp: bool, optional
	EnableNodePublicIp terra.BoolValue `hcl:"enable_node_public_ip,attr"`
	// FipsEnabled: bool, optional
	FipsEnabled terra.BoolValue `hcl:"fips_enabled,attr"`
	// HostGroupId: string, optional
	HostGroupId terra.StringValue `hcl:"host_group_id,attr"`
	// KubeletDiskType: string, optional
	KubeletDiskType terra.StringValue `hcl:"kubelet_disk_type,attr"`
	// MaxCount: number, optional
	MaxCount terra.NumberValue `hcl:"max_count,attr"`
	// MaxPods: number, optional
	MaxPods terra.NumberValue `hcl:"max_pods,attr"`
	// MessageOfTheDay: string, optional
	MessageOfTheDay terra.StringValue `hcl:"message_of_the_day,attr"`
	// MinCount: number, optional
	MinCount terra.NumberValue `hcl:"min_count,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, optional
	NodeCount terra.NumberValue `hcl:"node_count,attr"`
	// NodeLabels: map of string, optional
	NodeLabels terra.MapValue[terra.StringValue] `hcl:"node_labels,attr"`
	// NodePublicIpPrefixId: string, optional
	NodePublicIpPrefixId terra.StringValue `hcl:"node_public_ip_prefix_id,attr"`
	// NodeTaints: list of string, optional
	NodeTaints terra.ListValue[terra.StringValue] `hcl:"node_taints,attr"`
	// OnlyCriticalAddonsEnabled: bool, optional
	OnlyCriticalAddonsEnabled terra.BoolValue `hcl:"only_critical_addons_enabled,attr"`
	// OrchestratorVersion: string, optional
	OrchestratorVersion terra.StringValue `hcl:"orchestrator_version,attr"`
	// OsDiskSizeGb: number, optional
	OsDiskSizeGb terra.NumberValue `hcl:"os_disk_size_gb,attr"`
	// OsDiskType: string, optional
	OsDiskType terra.StringValue `hcl:"os_disk_type,attr"`
	// OsSku: string, optional
	OsSku terra.StringValue `hcl:"os_sku,attr"`
	// PodSubnetId: string, optional
	PodSubnetId terra.StringValue `hcl:"pod_subnet_id,attr"`
	// ProximityPlacementGroupId: string, optional
	ProximityPlacementGroupId terra.StringValue `hcl:"proximity_placement_group_id,attr"`
	// ScaleDownMode: string, optional
	ScaleDownMode terra.StringValue `hcl:"scale_down_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TemporaryNameForRotation: string, optional
	TemporaryNameForRotation terra.StringValue `hcl:"temporary_name_for_rotation,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UltraSsdEnabled: bool, optional
	UltraSsdEnabled terra.BoolValue `hcl:"ultra_ssd_enabled,attr"`
	// VmSize: string, required
	VmSize terra.StringValue `hcl:"vm_size,attr" validate:"required"`
	// VnetSubnetId: string, optional
	VnetSubnetId terra.StringValue `hcl:"vnet_subnet_id,attr"`
	// WorkloadRuntime: string, optional
	WorkloadRuntime terra.StringValue `hcl:"workload_runtime,attr"`
	// Zones: set of string, optional
	Zones terra.SetValue[terra.StringValue] `hcl:"zones,attr"`
	// KubeletConfig: optional
	KubeletConfig *KubeletConfig `hcl:"kubelet_config,block"`
	// LinuxOsConfig: optional
	LinuxOsConfig *LinuxOsConfig `hcl:"linux_os_config,block"`
	// NodeNetworkProfile: optional
	NodeNetworkProfile *NodeNetworkProfile `hcl:"node_network_profile,block"`
	// UpgradeSettings: optional
	UpgradeSettings *UpgradeSettings `hcl:"upgrade_settings,block"`
}

type KubeletConfig struct {
	// AllowedUnsafeSysctls: set of string, optional
	AllowedUnsafeSysctls terra.SetValue[terra.StringValue] `hcl:"allowed_unsafe_sysctls,attr"`
	// ContainerLogMaxLine: number, optional
	ContainerLogMaxLine terra.NumberValue `hcl:"container_log_max_line,attr"`
	// ContainerLogMaxSizeMb: number, optional
	ContainerLogMaxSizeMb terra.NumberValue `hcl:"container_log_max_size_mb,attr"`
	// CpuCfsQuotaEnabled: bool, optional
	CpuCfsQuotaEnabled terra.BoolValue `hcl:"cpu_cfs_quota_enabled,attr"`
	// CpuCfsQuotaPeriod: string, optional
	CpuCfsQuotaPeriod terra.StringValue `hcl:"cpu_cfs_quota_period,attr"`
	// CpuManagerPolicy: string, optional
	CpuManagerPolicy terra.StringValue `hcl:"cpu_manager_policy,attr"`
	// ImageGcHighThreshold: number, optional
	ImageGcHighThreshold terra.NumberValue `hcl:"image_gc_high_threshold,attr"`
	// ImageGcLowThreshold: number, optional
	ImageGcLowThreshold terra.NumberValue `hcl:"image_gc_low_threshold,attr"`
	// PodMaxPid: number, optional
	PodMaxPid terra.NumberValue `hcl:"pod_max_pid,attr"`
	// TopologyManagerPolicy: string, optional
	TopologyManagerPolicy terra.StringValue `hcl:"topology_manager_policy,attr"`
}

type LinuxOsConfig struct {
	// SwapFileSizeMb: number, optional
	SwapFileSizeMb terra.NumberValue `hcl:"swap_file_size_mb,attr"`
	// TransparentHugePageDefrag: string, optional
	TransparentHugePageDefrag terra.StringValue `hcl:"transparent_huge_page_defrag,attr"`
	// TransparentHugePageEnabled: string, optional
	TransparentHugePageEnabled terra.StringValue `hcl:"transparent_huge_page_enabled,attr"`
	// SysctlConfig: optional
	SysctlConfig *SysctlConfig `hcl:"sysctl_config,block"`
}

type SysctlConfig struct {
	// FsAioMaxNr: number, optional
	FsAioMaxNr terra.NumberValue `hcl:"fs_aio_max_nr,attr"`
	// FsFileMax: number, optional
	FsFileMax terra.NumberValue `hcl:"fs_file_max,attr"`
	// FsInotifyMaxUserWatches: number, optional
	FsInotifyMaxUserWatches terra.NumberValue `hcl:"fs_inotify_max_user_watches,attr"`
	// FsNrOpen: number, optional
	FsNrOpen terra.NumberValue `hcl:"fs_nr_open,attr"`
	// KernelThreadsMax: number, optional
	KernelThreadsMax terra.NumberValue `hcl:"kernel_threads_max,attr"`
	// NetCoreNetdevMaxBacklog: number, optional
	NetCoreNetdevMaxBacklog terra.NumberValue `hcl:"net_core_netdev_max_backlog,attr"`
	// NetCoreOptmemMax: number, optional
	NetCoreOptmemMax terra.NumberValue `hcl:"net_core_optmem_max,attr"`
	// NetCoreRmemDefault: number, optional
	NetCoreRmemDefault terra.NumberValue `hcl:"net_core_rmem_default,attr"`
	// NetCoreRmemMax: number, optional
	NetCoreRmemMax terra.NumberValue `hcl:"net_core_rmem_max,attr"`
	// NetCoreSomaxconn: number, optional
	NetCoreSomaxconn terra.NumberValue `hcl:"net_core_somaxconn,attr"`
	// NetCoreWmemDefault: number, optional
	NetCoreWmemDefault terra.NumberValue `hcl:"net_core_wmem_default,attr"`
	// NetCoreWmemMax: number, optional
	NetCoreWmemMax terra.NumberValue `hcl:"net_core_wmem_max,attr"`
	// NetIpv4IpLocalPortRangeMax: number, optional
	NetIpv4IpLocalPortRangeMax terra.NumberValue `hcl:"net_ipv4_ip_local_port_range_max,attr"`
	// NetIpv4IpLocalPortRangeMin: number, optional
	NetIpv4IpLocalPortRangeMin terra.NumberValue `hcl:"net_ipv4_ip_local_port_range_min,attr"`
	// NetIpv4NeighDefaultGcThresh1: number, optional
	NetIpv4NeighDefaultGcThresh1 terra.NumberValue `hcl:"net_ipv4_neigh_default_gc_thresh1,attr"`
	// NetIpv4NeighDefaultGcThresh2: number, optional
	NetIpv4NeighDefaultGcThresh2 terra.NumberValue `hcl:"net_ipv4_neigh_default_gc_thresh2,attr"`
	// NetIpv4NeighDefaultGcThresh3: number, optional
	NetIpv4NeighDefaultGcThresh3 terra.NumberValue `hcl:"net_ipv4_neigh_default_gc_thresh3,attr"`
	// NetIpv4TcpFinTimeout: number, optional
	NetIpv4TcpFinTimeout terra.NumberValue `hcl:"net_ipv4_tcp_fin_timeout,attr"`
	// NetIpv4TcpKeepaliveIntvl: number, optional
	NetIpv4TcpKeepaliveIntvl terra.NumberValue `hcl:"net_ipv4_tcp_keepalive_intvl,attr"`
	// NetIpv4TcpKeepaliveProbes: number, optional
	NetIpv4TcpKeepaliveProbes terra.NumberValue `hcl:"net_ipv4_tcp_keepalive_probes,attr"`
	// NetIpv4TcpKeepaliveTime: number, optional
	NetIpv4TcpKeepaliveTime terra.NumberValue `hcl:"net_ipv4_tcp_keepalive_time,attr"`
	// NetIpv4TcpMaxSynBacklog: number, optional
	NetIpv4TcpMaxSynBacklog terra.NumberValue `hcl:"net_ipv4_tcp_max_syn_backlog,attr"`
	// NetIpv4TcpMaxTwBuckets: number, optional
	NetIpv4TcpMaxTwBuckets terra.NumberValue `hcl:"net_ipv4_tcp_max_tw_buckets,attr"`
	// NetIpv4TcpTwReuse: bool, optional
	NetIpv4TcpTwReuse terra.BoolValue `hcl:"net_ipv4_tcp_tw_reuse,attr"`
	// NetNetfilterNfConntrackBuckets: number, optional
	NetNetfilterNfConntrackBuckets terra.NumberValue `hcl:"net_netfilter_nf_conntrack_buckets,attr"`
	// NetNetfilterNfConntrackMax: number, optional
	NetNetfilterNfConntrackMax terra.NumberValue `hcl:"net_netfilter_nf_conntrack_max,attr"`
	// VmMaxMapCount: number, optional
	VmMaxMapCount terra.NumberValue `hcl:"vm_max_map_count,attr"`
	// VmSwappiness: number, optional
	VmSwappiness terra.NumberValue `hcl:"vm_swappiness,attr"`
	// VmVfsCachePressure: number, optional
	VmVfsCachePressure terra.NumberValue `hcl:"vm_vfs_cache_pressure,attr"`
}

type NodeNetworkProfile struct {
	// NodePublicIpTags: map of string, optional
	NodePublicIpTags terra.MapValue[terra.StringValue] `hcl:"node_public_ip_tags,attr"`
}

type UpgradeSettings struct {
	// MaxSurge: string, required
	MaxSurge terra.StringValue `hcl:"max_surge,attr" validate:"required"`
}

type HttpProxyConfig struct {
	// HttpProxy: string, optional
	HttpProxy terra.StringValue `hcl:"http_proxy,attr"`
	// HttpsProxy: string, optional
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// NoProxy: set of string, optional
	NoProxy terra.SetValue[terra.StringValue] `hcl:"no_proxy,attr"`
	// TrustedCa: string, optional
	TrustedCa terra.StringValue `hcl:"trusted_ca,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type IngressApplicationGateway struct {
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// GatewayName: string, optional
	GatewayName terra.StringValue `hcl:"gateway_name,attr"`
	// SubnetCidr: string, optional
	SubnetCidr terra.StringValue `hcl:"subnet_cidr,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// IngressApplicationGatewayIdentity: min=0
	IngressApplicationGatewayIdentity []IngressApplicationGatewayIdentity `hcl:"ingress_application_gateway_identity,block" validate:"min=0"`
}

type IngressApplicationGatewayIdentity struct{}

type KeyManagementService struct {
	// KeyVaultKeyId: string, required
	KeyVaultKeyId terra.StringValue `hcl:"key_vault_key_id,attr" validate:"required"`
	// KeyVaultNetworkAccess: string, optional
	KeyVaultNetworkAccess terra.StringValue `hcl:"key_vault_network_access,attr"`
}

type KeyVaultSecretsProvider struct {
	// SecretRotationEnabled: bool, optional
	SecretRotationEnabled terra.BoolValue `hcl:"secret_rotation_enabled,attr"`
	// SecretRotationInterval: string, optional
	SecretRotationInterval terra.StringValue `hcl:"secret_rotation_interval,attr"`
	// SecretIdentity: min=0
	SecretIdentity []SecretIdentity `hcl:"secret_identity,block" validate:"min=0"`
}

type SecretIdentity struct{}

type KubeletIdentity struct {
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ObjectId: string, optional
	ObjectId terra.StringValue `hcl:"object_id,attr"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
}

type LinuxProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshKey: required
	SshKey *SshKey `hcl:"ssh_key,block" validate:"required"`
}

type SshKey struct {
	// KeyData: string, required
	KeyData terra.StringValue `hcl:"key_data,attr" validate:"required"`
}

type MaintenanceWindow struct {
	// Allowed: min=0
	Allowed []Allowed `hcl:"allowed,block" validate:"min=0"`
	// MaintenanceWindowNotAllowed: min=0
	NotAllowed []MaintenanceWindowNotAllowed `hcl:"not_allowed,block" validate:"min=0"`
}

type Allowed struct {
	// Day: string, required
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// Hours: set of number, required
	Hours terra.SetValue[terra.NumberValue] `hcl:"hours,attr" validate:"required"`
}

type MaintenanceWindowNotAllowed struct {
	// End: string, required
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
}

type MaintenanceWindowAutoUpgrade struct {
	// DayOfMonth: number, optional
	DayOfMonth terra.NumberValue `hcl:"day_of_month,attr"`
	// DayOfWeek: string, optional
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr"`
	// Duration: number, required
	Duration terra.NumberValue `hcl:"duration,attr" validate:"required"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// UtcOffset: string, optional
	UtcOffset terra.StringValue `hcl:"utc_offset,attr"`
	// WeekIndex: string, optional
	WeekIndex terra.StringValue `hcl:"week_index,attr"`
	// MaintenanceWindowAutoUpgradeNotAllowed: min=0
	NotAllowed []MaintenanceWindowAutoUpgradeNotAllowed `hcl:"not_allowed,block" validate:"min=0"`
}

type MaintenanceWindowAutoUpgradeNotAllowed struct {
	// End: string, required
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
}

type MaintenanceWindowNodeOs struct {
	// DayOfMonth: number, optional
	DayOfMonth terra.NumberValue `hcl:"day_of_month,attr"`
	// DayOfWeek: string, optional
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr"`
	// Duration: number, required
	Duration terra.NumberValue `hcl:"duration,attr" validate:"required"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// UtcOffset: string, optional
	UtcOffset terra.StringValue `hcl:"utc_offset,attr"`
	// WeekIndex: string, optional
	WeekIndex terra.StringValue `hcl:"week_index,attr"`
	// MaintenanceWindowNodeOsNotAllowed: min=0
	NotAllowed []MaintenanceWindowNodeOsNotAllowed `hcl:"not_allowed,block" validate:"min=0"`
}

type MaintenanceWindowNodeOsNotAllowed struct {
	// End: string, required
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
}

type MicrosoftDefender struct {
	// LogAnalyticsWorkspaceId: string, required
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr" validate:"required"`
}

type MonitorMetrics struct {
	// AnnotationsAllowed: string, optional
	AnnotationsAllowed terra.StringValue `hcl:"annotations_allowed,attr"`
	// LabelsAllowed: string, optional
	LabelsAllowed terra.StringValue `hcl:"labels_allowed,attr"`
}

type NetworkProfile struct {
	// DnsServiceIp: string, optional
	DnsServiceIp terra.StringValue `hcl:"dns_service_ip,attr"`
	// DockerBridgeCidr: string, optional
	DockerBridgeCidr terra.StringValue `hcl:"docker_bridge_cidr,attr"`
	// EbpfDataPlane: string, optional
	EbpfDataPlane terra.StringValue `hcl:"ebpf_data_plane,attr"`
	// IpVersions: list of string, optional
	IpVersions terra.ListValue[terra.StringValue] `hcl:"ip_versions,attr"`
	// LoadBalancerSku: string, optional
	LoadBalancerSku terra.StringValue `hcl:"load_balancer_sku,attr"`
	// NetworkMode: string, optional
	NetworkMode terra.StringValue `hcl:"network_mode,attr"`
	// NetworkPlugin: string, required
	NetworkPlugin terra.StringValue `hcl:"network_plugin,attr" validate:"required"`
	// NetworkPluginMode: string, optional
	NetworkPluginMode terra.StringValue `hcl:"network_plugin_mode,attr"`
	// NetworkPolicy: string, optional
	NetworkPolicy terra.StringValue `hcl:"network_policy,attr"`
	// OutboundType: string, optional
	OutboundType terra.StringValue `hcl:"outbound_type,attr"`
	// PodCidr: string, optional
	PodCidr terra.StringValue `hcl:"pod_cidr,attr"`
	// PodCidrs: list of string, optional
	PodCidrs terra.ListValue[terra.StringValue] `hcl:"pod_cidrs,attr"`
	// ServiceCidr: string, optional
	ServiceCidr terra.StringValue `hcl:"service_cidr,attr"`
	// ServiceCidrs: list of string, optional
	ServiceCidrs terra.ListValue[terra.StringValue] `hcl:"service_cidrs,attr"`
	// LoadBalancerProfile: optional
	LoadBalancerProfile *LoadBalancerProfile `hcl:"load_balancer_profile,block"`
	// NatGatewayProfile: optional
	NatGatewayProfile *NatGatewayProfile `hcl:"nat_gateway_profile,block"`
}

type LoadBalancerProfile struct {
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// ManagedOutboundIpCount: number, optional
	ManagedOutboundIpCount terra.NumberValue `hcl:"managed_outbound_ip_count,attr"`
	// ManagedOutboundIpv6Count: number, optional
	ManagedOutboundIpv6Count terra.NumberValue `hcl:"managed_outbound_ipv6_count,attr"`
	// OutboundIpAddressIds: set of string, optional
	OutboundIpAddressIds terra.SetValue[terra.StringValue] `hcl:"outbound_ip_address_ids,attr"`
	// OutboundIpPrefixIds: set of string, optional
	OutboundIpPrefixIds terra.SetValue[terra.StringValue] `hcl:"outbound_ip_prefix_ids,attr"`
	// OutboundPortsAllocated: number, optional
	OutboundPortsAllocated terra.NumberValue `hcl:"outbound_ports_allocated,attr"`
}

type NatGatewayProfile struct {
	// IdleTimeoutInMinutes: number, optional
	IdleTimeoutInMinutes terra.NumberValue `hcl:"idle_timeout_in_minutes,attr"`
	// ManagedOutboundIpCount: number, optional
	ManagedOutboundIpCount terra.NumberValue `hcl:"managed_outbound_ip_count,attr"`
}

type OmsAgent struct {
	// LogAnalyticsWorkspaceId: string, required
	LogAnalyticsWorkspaceId terra.StringValue `hcl:"log_analytics_workspace_id,attr" validate:"required"`
	// MsiAuthForMonitoringEnabled: bool, optional
	MsiAuthForMonitoringEnabled terra.BoolValue `hcl:"msi_auth_for_monitoring_enabled,attr"`
	// OmsAgentIdentity: min=0
	OmsAgentIdentity []OmsAgentIdentity `hcl:"oms_agent_identity,block" validate:"min=0"`
}

type OmsAgentIdentity struct{}

type ServiceMeshProfile struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type ServicePrincipal struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
}

type StorageProfile struct {
	// BlobDriverEnabled: bool, optional
	BlobDriverEnabled terra.BoolValue `hcl:"blob_driver_enabled,attr"`
	// DiskDriverEnabled: bool, optional
	DiskDriverEnabled terra.BoolValue `hcl:"disk_driver_enabled,attr"`
	// DiskDriverVersion: string, optional
	DiskDriverVersion terra.StringValue `hcl:"disk_driver_version,attr"`
	// FileDriverEnabled: bool, optional
	FileDriverEnabled terra.BoolValue `hcl:"file_driver_enabled,attr"`
	// SnapshotControllerEnabled: bool, optional
	SnapshotControllerEnabled terra.BoolValue `hcl:"snapshot_controller_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WebAppRouting struct {
	// DnsZoneId: string, required
	DnsZoneId terra.StringValue `hcl:"dns_zone_id,attr" validate:"required"`
}

type WindowsProfile struct {
	// AdminPassword: string, optional
	AdminPassword terra.StringValue `hcl:"admin_password,attr"`
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// License: string, optional
	License terra.StringValue `hcl:"license,attr"`
	// Gmsa: optional
	Gmsa *Gmsa `hcl:"gmsa,block"`
}

type Gmsa struct {
	// DnsServer: string, required
	DnsServer terra.StringValue `hcl:"dns_server,attr" validate:"required"`
	// RootDomain: string, required
	RootDomain terra.StringValue `hcl:"root_domain,attr" validate:"required"`
}

type WorkloadAutoscalerProfile struct {
	// KedaEnabled: bool, optional
	KedaEnabled terra.BoolValue `hcl:"keda_enabled,attr"`
	// VerticalPodAutoscalerEnabled: bool, optional
	VerticalPodAutoscalerEnabled terra.BoolValue `hcl:"vertical_pod_autoscaler_enabled,attr"`
}

type KubeAdminConfigAttributes struct {
	ref terra.Reference
}

func (kac KubeAdminConfigAttributes) InternalRef() (terra.Reference, error) {
	return kac.ref, nil
}

func (kac KubeAdminConfigAttributes) InternalWithRef(ref terra.Reference) KubeAdminConfigAttributes {
	return KubeAdminConfigAttributes{ref: ref}
}

func (kac KubeAdminConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kac.ref.InternalTokens()
}

func (kac KubeAdminConfigAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("client_certificate"))
}

func (kac KubeAdminConfigAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("client_key"))
}

func (kac KubeAdminConfigAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("cluster_ca_certificate"))
}

func (kac KubeAdminConfigAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("host"))
}

func (kac KubeAdminConfigAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("password"))
}

func (kac KubeAdminConfigAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(kac.ref.Append("username"))
}

type KubeConfigAttributes struct {
	ref terra.Reference
}

func (kc KubeConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KubeConfigAttributes) InternalWithRef(ref terra.Reference) KubeConfigAttributes {
	return KubeConfigAttributes{ref: ref}
}

func (kc KubeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KubeConfigAttributes) ClientCertificate() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("client_certificate"))
}

func (kc KubeConfigAttributes) ClientKey() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("client_key"))
}

func (kc KubeConfigAttributes) ClusterCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cluster_ca_certificate"))
}

func (kc KubeConfigAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("host"))
}

func (kc KubeConfigAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("password"))
}

func (kc KubeConfigAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("username"))
}

type AciConnectorLinuxAttributes struct {
	ref terra.Reference
}

func (acl AciConnectorLinuxAttributes) InternalRef() (terra.Reference, error) {
	return acl.ref, nil
}

func (acl AciConnectorLinuxAttributes) InternalWithRef(ref terra.Reference) AciConnectorLinuxAttributes {
	return AciConnectorLinuxAttributes{ref: ref}
}

func (acl AciConnectorLinuxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return acl.ref.InternalTokens()
}

func (acl AciConnectorLinuxAttributes) SubnetName() terra.StringValue {
	return terra.ReferenceAsString(acl.ref.Append("subnet_name"))
}

func (acl AciConnectorLinuxAttributes) ConnectorIdentity() terra.ListValue[ConnectorIdentityAttributes] {
	return terra.ReferenceAsList[ConnectorIdentityAttributes](acl.ref.Append("connector_identity"))
}

type ConnectorIdentityAttributes struct {
	ref terra.Reference
}

func (ci ConnectorIdentityAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci ConnectorIdentityAttributes) InternalWithRef(ref terra.Reference) ConnectorIdentityAttributes {
	return ConnectorIdentityAttributes{ref: ref}
}

func (ci ConnectorIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci ConnectorIdentityAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("client_id"))
}

func (ci ConnectorIdentityAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("object_id"))
}

func (ci ConnectorIdentityAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("user_assigned_identity_id"))
}

type ApiServerAccessProfileAttributes struct {
	ref terra.Reference
}

func (asap ApiServerAccessProfileAttributes) InternalRef() (terra.Reference, error) {
	return asap.ref, nil
}

func (asap ApiServerAccessProfileAttributes) InternalWithRef(ref terra.Reference) ApiServerAccessProfileAttributes {
	return ApiServerAccessProfileAttributes{ref: ref}
}

func (asap ApiServerAccessProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asap.ref.InternalTokens()
}

func (asap ApiServerAccessProfileAttributes) AuthorizedIpRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asap.ref.Append("authorized_ip_ranges"))
}

func (asap ApiServerAccessProfileAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(asap.ref.Append("subnet_id"))
}

func (asap ApiServerAccessProfileAttributes) VnetIntegrationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asap.ref.Append("vnet_integration_enabled"))
}

type AutoScalerProfileAttributes struct {
	ref terra.Reference
}

func (asp AutoScalerProfileAttributes) InternalRef() (terra.Reference, error) {
	return asp.ref, nil
}

func (asp AutoScalerProfileAttributes) InternalWithRef(ref terra.Reference) AutoScalerProfileAttributes {
	return AutoScalerProfileAttributes{ref: ref}
}

func (asp AutoScalerProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asp.ref.InternalTokens()
}

func (asp AutoScalerProfileAttributes) BalanceSimilarNodeGroups() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("balance_similar_node_groups"))
}

func (asp AutoScalerProfileAttributes) EmptyBulkDeleteMax() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("empty_bulk_delete_max"))
}

func (asp AutoScalerProfileAttributes) Expander() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("expander"))
}

func (asp AutoScalerProfileAttributes) MaxGracefulTerminationSec() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("max_graceful_termination_sec"))
}

func (asp AutoScalerProfileAttributes) MaxNodeProvisioningTime() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("max_node_provisioning_time"))
}

func (asp AutoScalerProfileAttributes) MaxUnreadyNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("max_unready_nodes"))
}

func (asp AutoScalerProfileAttributes) MaxUnreadyPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("max_unready_percentage"))
}

func (asp AutoScalerProfileAttributes) NewPodScaleUpDelay() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("new_pod_scale_up_delay"))
}

func (asp AutoScalerProfileAttributes) ScaleDownDelayAfterAdd() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_delay_after_add"))
}

func (asp AutoScalerProfileAttributes) ScaleDownDelayAfterDelete() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_delay_after_delete"))
}

func (asp AutoScalerProfileAttributes) ScaleDownDelayAfterFailure() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_delay_after_failure"))
}

func (asp AutoScalerProfileAttributes) ScaleDownUnneeded() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_unneeded"))
}

func (asp AutoScalerProfileAttributes) ScaleDownUnready() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_unready"))
}

func (asp AutoScalerProfileAttributes) ScaleDownUtilizationThreshold() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scale_down_utilization_threshold"))
}

func (asp AutoScalerProfileAttributes) ScanInterval() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("scan_interval"))
}

func (asp AutoScalerProfileAttributes) SkipNodesWithLocalStorage() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("skip_nodes_with_local_storage"))
}

func (asp AutoScalerProfileAttributes) SkipNodesWithSystemPods() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("skip_nodes_with_system_pods"))
}

type AzureActiveDirectoryRoleBasedAccessControlAttributes struct {
	ref terra.Reference
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) InternalRef() (terra.Reference, error) {
	return aadrbac.ref, nil
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) InternalWithRef(ref terra.Reference) AzureActiveDirectoryRoleBasedAccessControlAttributes {
	return AzureActiveDirectoryRoleBasedAccessControlAttributes{ref: ref}
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aadrbac.ref.InternalTokens()
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) AdminGroupObjectIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aadrbac.ref.Append("admin_group_object_ids"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) AzureRbacEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aadrbac.ref.Append("azure_rbac_enabled"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) ClientAppId() terra.StringValue {
	return terra.ReferenceAsString(aadrbac.ref.Append("client_app_id"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) Managed() terra.BoolValue {
	return terra.ReferenceAsBool(aadrbac.ref.Append("managed"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) ServerAppId() terra.StringValue {
	return terra.ReferenceAsString(aadrbac.ref.Append("server_app_id"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) ServerAppSecret() terra.StringValue {
	return terra.ReferenceAsString(aadrbac.ref.Append("server_app_secret"))
}

func (aadrbac AzureActiveDirectoryRoleBasedAccessControlAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(aadrbac.ref.Append("tenant_id"))
}

type ConfidentialComputingAttributes struct {
	ref terra.Reference
}

func (cc ConfidentialComputingAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ConfidentialComputingAttributes) InternalWithRef(ref terra.Reference) ConfidentialComputingAttributes {
	return ConfidentialComputingAttributes{ref: ref}
}

func (cc ConfidentialComputingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ConfidentialComputingAttributes) SgxQuoteHelperEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("sgx_quote_helper_enabled"))
}

type DefaultNodePoolAttributes struct {
	ref terra.Reference
}

func (dnp DefaultNodePoolAttributes) InternalRef() (terra.Reference, error) {
	return dnp.ref, nil
}

func (dnp DefaultNodePoolAttributes) InternalWithRef(ref terra.Reference) DefaultNodePoolAttributes {
	return DefaultNodePoolAttributes{ref: ref}
}

func (dnp DefaultNodePoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dnp.ref.InternalTokens()
}

func (dnp DefaultNodePoolAttributes) CapacityReservationGroupId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("capacity_reservation_group_id"))
}

func (dnp DefaultNodePoolAttributes) CustomCaTrustEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("custom_ca_trust_enabled"))
}

func (dnp DefaultNodePoolAttributes) EnableAutoScaling() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("enable_auto_scaling"))
}

func (dnp DefaultNodePoolAttributes) EnableHostEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("enable_host_encryption"))
}

func (dnp DefaultNodePoolAttributes) EnableNodePublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("enable_node_public_ip"))
}

func (dnp DefaultNodePoolAttributes) FipsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("fips_enabled"))
}

func (dnp DefaultNodePoolAttributes) HostGroupId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("host_group_id"))
}

func (dnp DefaultNodePoolAttributes) KubeletDiskType() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("kubelet_disk_type"))
}

func (dnp DefaultNodePoolAttributes) MaxCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dnp.ref.Append("max_count"))
}

func (dnp DefaultNodePoolAttributes) MaxPods() terra.NumberValue {
	return terra.ReferenceAsNumber(dnp.ref.Append("max_pods"))
}

func (dnp DefaultNodePoolAttributes) MessageOfTheDay() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("message_of_the_day"))
}

func (dnp DefaultNodePoolAttributes) MinCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dnp.ref.Append("min_count"))
}

func (dnp DefaultNodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("name"))
}

func (dnp DefaultNodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dnp.ref.Append("node_count"))
}

func (dnp DefaultNodePoolAttributes) NodeLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dnp.ref.Append("node_labels"))
}

func (dnp DefaultNodePoolAttributes) NodePublicIpPrefixId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("node_public_ip_prefix_id"))
}

func (dnp DefaultNodePoolAttributes) NodeTaints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dnp.ref.Append("node_taints"))
}

func (dnp DefaultNodePoolAttributes) OnlyCriticalAddonsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("only_critical_addons_enabled"))
}

func (dnp DefaultNodePoolAttributes) OrchestratorVersion() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("orchestrator_version"))
}

func (dnp DefaultNodePoolAttributes) OsDiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dnp.ref.Append("os_disk_size_gb"))
}

func (dnp DefaultNodePoolAttributes) OsDiskType() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("os_disk_type"))
}

func (dnp DefaultNodePoolAttributes) OsSku() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("os_sku"))
}

func (dnp DefaultNodePoolAttributes) PodSubnetId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("pod_subnet_id"))
}

func (dnp DefaultNodePoolAttributes) ProximityPlacementGroupId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("proximity_placement_group_id"))
}

func (dnp DefaultNodePoolAttributes) ScaleDownMode() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("scale_down_mode"))
}

func (dnp DefaultNodePoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dnp.ref.Append("tags"))
}

func (dnp DefaultNodePoolAttributes) TemporaryNameForRotation() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("temporary_name_for_rotation"))
}

func (dnp DefaultNodePoolAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("type"))
}

func (dnp DefaultNodePoolAttributes) UltraSsdEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(dnp.ref.Append("ultra_ssd_enabled"))
}

func (dnp DefaultNodePoolAttributes) VmSize() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("vm_size"))
}

func (dnp DefaultNodePoolAttributes) VnetSubnetId() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("vnet_subnet_id"))
}

func (dnp DefaultNodePoolAttributes) WorkloadRuntime() terra.StringValue {
	return terra.ReferenceAsString(dnp.ref.Append("workload_runtime"))
}

func (dnp DefaultNodePoolAttributes) Zones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dnp.ref.Append("zones"))
}

func (dnp DefaultNodePoolAttributes) KubeletConfig() terra.ListValue[KubeletConfigAttributes] {
	return terra.ReferenceAsList[KubeletConfigAttributes](dnp.ref.Append("kubelet_config"))
}

func (dnp DefaultNodePoolAttributes) LinuxOsConfig() terra.ListValue[LinuxOsConfigAttributes] {
	return terra.ReferenceAsList[LinuxOsConfigAttributes](dnp.ref.Append("linux_os_config"))
}

func (dnp DefaultNodePoolAttributes) NodeNetworkProfile() terra.ListValue[NodeNetworkProfileAttributes] {
	return terra.ReferenceAsList[NodeNetworkProfileAttributes](dnp.ref.Append("node_network_profile"))
}

func (dnp DefaultNodePoolAttributes) UpgradeSettings() terra.ListValue[UpgradeSettingsAttributes] {
	return terra.ReferenceAsList[UpgradeSettingsAttributes](dnp.ref.Append("upgrade_settings"))
}

type KubeletConfigAttributes struct {
	ref terra.Reference
}

func (kc KubeletConfigAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KubeletConfigAttributes) InternalWithRef(ref terra.Reference) KubeletConfigAttributes {
	return KubeletConfigAttributes{ref: ref}
}

func (kc KubeletConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KubeletConfigAttributes) AllowedUnsafeSysctls() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](kc.ref.Append("allowed_unsafe_sysctls"))
}

func (kc KubeletConfigAttributes) ContainerLogMaxLine() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("container_log_max_line"))
}

func (kc KubeletConfigAttributes) ContainerLogMaxSizeMb() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("container_log_max_size_mb"))
}

func (kc KubeletConfigAttributes) CpuCfsQuotaEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("cpu_cfs_quota_enabled"))
}

func (kc KubeletConfigAttributes) CpuCfsQuotaPeriod() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_cfs_quota_period"))
}

func (kc KubeletConfigAttributes) CpuManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("cpu_manager_policy"))
}

func (kc KubeletConfigAttributes) ImageGcHighThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("image_gc_high_threshold"))
}

func (kc KubeletConfigAttributes) ImageGcLowThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("image_gc_low_threshold"))
}

func (kc KubeletConfigAttributes) PodMaxPid() terra.NumberValue {
	return terra.ReferenceAsNumber(kc.ref.Append("pod_max_pid"))
}

func (kc KubeletConfigAttributes) TopologyManagerPolicy() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("topology_manager_policy"))
}

type LinuxOsConfigAttributes struct {
	ref terra.Reference
}

func (loc LinuxOsConfigAttributes) InternalRef() (terra.Reference, error) {
	return loc.ref, nil
}

func (loc LinuxOsConfigAttributes) InternalWithRef(ref terra.Reference) LinuxOsConfigAttributes {
	return LinuxOsConfigAttributes{ref: ref}
}

func (loc LinuxOsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return loc.ref.InternalTokens()
}

func (loc LinuxOsConfigAttributes) SwapFileSizeMb() terra.NumberValue {
	return terra.ReferenceAsNumber(loc.ref.Append("swap_file_size_mb"))
}

func (loc LinuxOsConfigAttributes) TransparentHugePageDefrag() terra.StringValue {
	return terra.ReferenceAsString(loc.ref.Append("transparent_huge_page_defrag"))
}

func (loc LinuxOsConfigAttributes) TransparentHugePageEnabled() terra.StringValue {
	return terra.ReferenceAsString(loc.ref.Append("transparent_huge_page_enabled"))
}

func (loc LinuxOsConfigAttributes) SysctlConfig() terra.ListValue[SysctlConfigAttributes] {
	return terra.ReferenceAsList[SysctlConfigAttributes](loc.ref.Append("sysctl_config"))
}

type SysctlConfigAttributes struct {
	ref terra.Reference
}

func (sc SysctlConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SysctlConfigAttributes) InternalWithRef(ref terra.Reference) SysctlConfigAttributes {
	return SysctlConfigAttributes{ref: ref}
}

func (sc SysctlConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SysctlConfigAttributes) FsAioMaxNr() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("fs_aio_max_nr"))
}

func (sc SysctlConfigAttributes) FsFileMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("fs_file_max"))
}

func (sc SysctlConfigAttributes) FsInotifyMaxUserWatches() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("fs_inotify_max_user_watches"))
}

func (sc SysctlConfigAttributes) FsNrOpen() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("fs_nr_open"))
}

func (sc SysctlConfigAttributes) KernelThreadsMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("kernel_threads_max"))
}

func (sc SysctlConfigAttributes) NetCoreNetdevMaxBacklog() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_netdev_max_backlog"))
}

func (sc SysctlConfigAttributes) NetCoreOptmemMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_optmem_max"))
}

func (sc SysctlConfigAttributes) NetCoreRmemDefault() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_rmem_default"))
}

func (sc SysctlConfigAttributes) NetCoreRmemMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_rmem_max"))
}

func (sc SysctlConfigAttributes) NetCoreSomaxconn() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_somaxconn"))
}

func (sc SysctlConfigAttributes) NetCoreWmemDefault() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_wmem_default"))
}

func (sc SysctlConfigAttributes) NetCoreWmemMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_core_wmem_max"))
}

func (sc SysctlConfigAttributes) NetIpv4IpLocalPortRangeMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_ip_local_port_range_max"))
}

func (sc SysctlConfigAttributes) NetIpv4IpLocalPortRangeMin() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_ip_local_port_range_min"))
}

func (sc SysctlConfigAttributes) NetIpv4NeighDefaultGcThresh1() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_neigh_default_gc_thresh1"))
}

func (sc SysctlConfigAttributes) NetIpv4NeighDefaultGcThresh2() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_neigh_default_gc_thresh2"))
}

func (sc SysctlConfigAttributes) NetIpv4NeighDefaultGcThresh3() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_neigh_default_gc_thresh3"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpFinTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_fin_timeout"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpKeepaliveIntvl() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_keepalive_intvl"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpKeepaliveProbes() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_keepalive_probes"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpKeepaliveTime() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_keepalive_time"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpMaxSynBacklog() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_max_syn_backlog"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpMaxTwBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_ipv4_tcp_max_tw_buckets"))
}

func (sc SysctlConfigAttributes) NetIpv4TcpTwReuse() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("net_ipv4_tcp_tw_reuse"))
}

func (sc SysctlConfigAttributes) NetNetfilterNfConntrackBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_netfilter_nf_conntrack_buckets"))
}

func (sc SysctlConfigAttributes) NetNetfilterNfConntrackMax() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("net_netfilter_nf_conntrack_max"))
}

func (sc SysctlConfigAttributes) VmMaxMapCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("vm_max_map_count"))
}

func (sc SysctlConfigAttributes) VmSwappiness() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("vm_swappiness"))
}

func (sc SysctlConfigAttributes) VmVfsCachePressure() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("vm_vfs_cache_pressure"))
}

type NodeNetworkProfileAttributes struct {
	ref terra.Reference
}

func (nnp NodeNetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return nnp.ref, nil
}

func (nnp NodeNetworkProfileAttributes) InternalWithRef(ref terra.Reference) NodeNetworkProfileAttributes {
	return NodeNetworkProfileAttributes{ref: ref}
}

func (nnp NodeNetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nnp.ref.InternalTokens()
}

func (nnp NodeNetworkProfileAttributes) NodePublicIpTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nnp.ref.Append("node_public_ip_tags"))
}

type UpgradeSettingsAttributes struct {
	ref terra.Reference
}

func (us UpgradeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us UpgradeSettingsAttributes) InternalWithRef(ref terra.Reference) UpgradeSettingsAttributes {
	return UpgradeSettingsAttributes{ref: ref}
}

func (us UpgradeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us UpgradeSettingsAttributes) MaxSurge() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("max_surge"))
}

type HttpProxyConfigAttributes struct {
	ref terra.Reference
}

func (hpc HttpProxyConfigAttributes) InternalRef() (terra.Reference, error) {
	return hpc.ref, nil
}

func (hpc HttpProxyConfigAttributes) InternalWithRef(ref terra.Reference) HttpProxyConfigAttributes {
	return HttpProxyConfigAttributes{ref: ref}
}

func (hpc HttpProxyConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hpc.ref.InternalTokens()
}

func (hpc HttpProxyConfigAttributes) HttpProxy() terra.StringValue {
	return terra.ReferenceAsString(hpc.ref.Append("http_proxy"))
}

func (hpc HttpProxyConfigAttributes) HttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(hpc.ref.Append("https_proxy"))
}

func (hpc HttpProxyConfigAttributes) NoProxy() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hpc.ref.Append("no_proxy"))
}

func (hpc HttpProxyConfigAttributes) TrustedCa() terra.StringValue {
	return terra.ReferenceAsString(hpc.ref.Append("trusted_ca"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type IngressApplicationGatewayAttributes struct {
	ref terra.Reference
}

func (iag IngressApplicationGatewayAttributes) InternalRef() (terra.Reference, error) {
	return iag.ref, nil
}

func (iag IngressApplicationGatewayAttributes) InternalWithRef(ref terra.Reference) IngressApplicationGatewayAttributes {
	return IngressApplicationGatewayAttributes{ref: ref}
}

func (iag IngressApplicationGatewayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iag.ref.InternalTokens()
}

func (iag IngressApplicationGatewayAttributes) EffectiveGatewayId() terra.StringValue {
	return terra.ReferenceAsString(iag.ref.Append("effective_gateway_id"))
}

func (iag IngressApplicationGatewayAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(iag.ref.Append("gateway_id"))
}

func (iag IngressApplicationGatewayAttributes) GatewayName() terra.StringValue {
	return terra.ReferenceAsString(iag.ref.Append("gateway_name"))
}

func (iag IngressApplicationGatewayAttributes) SubnetCidr() terra.StringValue {
	return terra.ReferenceAsString(iag.ref.Append("subnet_cidr"))
}

func (iag IngressApplicationGatewayAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(iag.ref.Append("subnet_id"))
}

func (iag IngressApplicationGatewayAttributes) IngressApplicationGatewayIdentity() terra.ListValue[IngressApplicationGatewayIdentityAttributes] {
	return terra.ReferenceAsList[IngressApplicationGatewayIdentityAttributes](iag.ref.Append("ingress_application_gateway_identity"))
}

type IngressApplicationGatewayIdentityAttributes struct {
	ref terra.Reference
}

func (iagi IngressApplicationGatewayIdentityAttributes) InternalRef() (terra.Reference, error) {
	return iagi.ref, nil
}

func (iagi IngressApplicationGatewayIdentityAttributes) InternalWithRef(ref terra.Reference) IngressApplicationGatewayIdentityAttributes {
	return IngressApplicationGatewayIdentityAttributes{ref: ref}
}

func (iagi IngressApplicationGatewayIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iagi.ref.InternalTokens()
}

func (iagi IngressApplicationGatewayIdentityAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(iagi.ref.Append("client_id"))
}

func (iagi IngressApplicationGatewayIdentityAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(iagi.ref.Append("object_id"))
}

func (iagi IngressApplicationGatewayIdentityAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(iagi.ref.Append("user_assigned_identity_id"))
}

type KeyManagementServiceAttributes struct {
	ref terra.Reference
}

func (kms KeyManagementServiceAttributes) InternalRef() (terra.Reference, error) {
	return kms.ref, nil
}

func (kms KeyManagementServiceAttributes) InternalWithRef(ref terra.Reference) KeyManagementServiceAttributes {
	return KeyManagementServiceAttributes{ref: ref}
}

func (kms KeyManagementServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kms.ref.InternalTokens()
}

func (kms KeyManagementServiceAttributes) KeyVaultKeyId() terra.StringValue {
	return terra.ReferenceAsString(kms.ref.Append("key_vault_key_id"))
}

func (kms KeyManagementServiceAttributes) KeyVaultNetworkAccess() terra.StringValue {
	return terra.ReferenceAsString(kms.ref.Append("key_vault_network_access"))
}

type KeyVaultSecretsProviderAttributes struct {
	ref terra.Reference
}

func (kvsp KeyVaultSecretsProviderAttributes) InternalRef() (terra.Reference, error) {
	return kvsp.ref, nil
}

func (kvsp KeyVaultSecretsProviderAttributes) InternalWithRef(ref terra.Reference) KeyVaultSecretsProviderAttributes {
	return KeyVaultSecretsProviderAttributes{ref: ref}
}

func (kvsp KeyVaultSecretsProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvsp.ref.InternalTokens()
}

func (kvsp KeyVaultSecretsProviderAttributes) SecretRotationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(kvsp.ref.Append("secret_rotation_enabled"))
}

func (kvsp KeyVaultSecretsProviderAttributes) SecretRotationInterval() terra.StringValue {
	return terra.ReferenceAsString(kvsp.ref.Append("secret_rotation_interval"))
}

func (kvsp KeyVaultSecretsProviderAttributes) SecretIdentity() terra.ListValue[SecretIdentityAttributes] {
	return terra.ReferenceAsList[SecretIdentityAttributes](kvsp.ref.Append("secret_identity"))
}

type SecretIdentityAttributes struct {
	ref terra.Reference
}

func (si SecretIdentityAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SecretIdentityAttributes) InternalWithRef(ref terra.Reference) SecretIdentityAttributes {
	return SecretIdentityAttributes{ref: ref}
}

func (si SecretIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SecretIdentityAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("client_id"))
}

func (si SecretIdentityAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("object_id"))
}

func (si SecretIdentityAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("user_assigned_identity_id"))
}

type KubeletIdentityAttributes struct {
	ref terra.Reference
}

func (ki KubeletIdentityAttributes) InternalRef() (terra.Reference, error) {
	return ki.ref, nil
}

func (ki KubeletIdentityAttributes) InternalWithRef(ref terra.Reference) KubeletIdentityAttributes {
	return KubeletIdentityAttributes{ref: ref}
}

func (ki KubeletIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ki.ref.InternalTokens()
}

func (ki KubeletIdentityAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ki.ref.Append("client_id"))
}

func (ki KubeletIdentityAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(ki.ref.Append("object_id"))
}

func (ki KubeletIdentityAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(ki.ref.Append("user_assigned_identity_id"))
}

type LinuxProfileAttributes struct {
	ref terra.Reference
}

func (lp LinuxProfileAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LinuxProfileAttributes) InternalWithRef(ref terra.Reference) LinuxProfileAttributes {
	return LinuxProfileAttributes{ref: ref}
}

func (lp LinuxProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LinuxProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("admin_username"))
}

func (lp LinuxProfileAttributes) SshKey() terra.ListValue[SshKeyAttributes] {
	return terra.ReferenceAsList[SshKeyAttributes](lp.ref.Append("ssh_key"))
}

type SshKeyAttributes struct {
	ref terra.Reference
}

func (sk SshKeyAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk SshKeyAttributes) InternalWithRef(ref terra.Reference) SshKeyAttributes {
	return SshKeyAttributes{ref: ref}
}

func (sk SshKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk SshKeyAttributes) KeyData() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("key_data"))
}

type MaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw MaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw MaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAttributes {
	return MaintenanceWindowAttributes{ref: ref}
}

func (mw MaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw MaintenanceWindowAttributes) Allowed() terra.SetValue[AllowedAttributes] {
	return terra.ReferenceAsSet[AllowedAttributes](mw.ref.Append("allowed"))
}

func (mw MaintenanceWindowAttributes) NotAllowed() terra.SetValue[MaintenanceWindowNotAllowedAttributes] {
	return terra.ReferenceAsSet[MaintenanceWindowNotAllowedAttributes](mw.ref.Append("not_allowed"))
}

type AllowedAttributes struct {
	ref terra.Reference
}

func (a AllowedAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AllowedAttributes) InternalWithRef(ref terra.Reference) AllowedAttributes {
	return AllowedAttributes{ref: ref}
}

func (a AllowedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AllowedAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("day"))
}

func (a AllowedAttributes) Hours() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](a.ref.Append("hours"))
}

type MaintenanceWindowNotAllowedAttributes struct {
	ref terra.Reference
}

func (na MaintenanceWindowNotAllowedAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na MaintenanceWindowNotAllowedAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowNotAllowedAttributes {
	return MaintenanceWindowNotAllowedAttributes{ref: ref}
}

func (na MaintenanceWindowNotAllowedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na MaintenanceWindowNotAllowedAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("end"))
}

func (na MaintenanceWindowNotAllowedAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("start"))
}

type MaintenanceWindowAutoUpgradeAttributes struct {
	ref terra.Reference
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) InternalRef() (terra.Reference, error) {
	return mwau.ref, nil
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAutoUpgradeAttributes {
	return MaintenanceWindowAutoUpgradeAttributes{ref: ref}
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mwau.ref.InternalTokens()
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) DayOfMonth() terra.NumberValue {
	return terra.ReferenceAsNumber(mwau.ref.Append("day_of_month"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("day_of_week"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) Duration() terra.NumberValue {
	return terra.ReferenceAsNumber(mwau.ref.Append("duration"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("frequency"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(mwau.ref.Append("interval"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("start_date"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("start_time"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) UtcOffset() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("utc_offset"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) WeekIndex() terra.StringValue {
	return terra.ReferenceAsString(mwau.ref.Append("week_index"))
}

func (mwau MaintenanceWindowAutoUpgradeAttributes) NotAllowed() terra.SetValue[MaintenanceWindowAutoUpgradeNotAllowedAttributes] {
	return terra.ReferenceAsSet[MaintenanceWindowAutoUpgradeNotAllowedAttributes](mwau.ref.Append("not_allowed"))
}

type MaintenanceWindowAutoUpgradeNotAllowedAttributes struct {
	ref terra.Reference
}

func (na MaintenanceWindowAutoUpgradeNotAllowedAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na MaintenanceWindowAutoUpgradeNotAllowedAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowAutoUpgradeNotAllowedAttributes {
	return MaintenanceWindowAutoUpgradeNotAllowedAttributes{ref: ref}
}

func (na MaintenanceWindowAutoUpgradeNotAllowedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na MaintenanceWindowAutoUpgradeNotAllowedAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("end"))
}

func (na MaintenanceWindowAutoUpgradeNotAllowedAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("start"))
}

type MaintenanceWindowNodeOsAttributes struct {
	ref terra.Reference
}

func (mwno MaintenanceWindowNodeOsAttributes) InternalRef() (terra.Reference, error) {
	return mwno.ref, nil
}

func (mwno MaintenanceWindowNodeOsAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowNodeOsAttributes {
	return MaintenanceWindowNodeOsAttributes{ref: ref}
}

func (mwno MaintenanceWindowNodeOsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mwno.ref.InternalTokens()
}

func (mwno MaintenanceWindowNodeOsAttributes) DayOfMonth() terra.NumberValue {
	return terra.ReferenceAsNumber(mwno.ref.Append("day_of_month"))
}

func (mwno MaintenanceWindowNodeOsAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("day_of_week"))
}

func (mwno MaintenanceWindowNodeOsAttributes) Duration() terra.NumberValue {
	return terra.ReferenceAsNumber(mwno.ref.Append("duration"))
}

func (mwno MaintenanceWindowNodeOsAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("frequency"))
}

func (mwno MaintenanceWindowNodeOsAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(mwno.ref.Append("interval"))
}

func (mwno MaintenanceWindowNodeOsAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("start_date"))
}

func (mwno MaintenanceWindowNodeOsAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("start_time"))
}

func (mwno MaintenanceWindowNodeOsAttributes) UtcOffset() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("utc_offset"))
}

func (mwno MaintenanceWindowNodeOsAttributes) WeekIndex() terra.StringValue {
	return terra.ReferenceAsString(mwno.ref.Append("week_index"))
}

func (mwno MaintenanceWindowNodeOsAttributes) NotAllowed() terra.SetValue[MaintenanceWindowNodeOsNotAllowedAttributes] {
	return terra.ReferenceAsSet[MaintenanceWindowNodeOsNotAllowedAttributes](mwno.ref.Append("not_allowed"))
}

type MaintenanceWindowNodeOsNotAllowedAttributes struct {
	ref terra.Reference
}

func (na MaintenanceWindowNodeOsNotAllowedAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na MaintenanceWindowNodeOsNotAllowedAttributes) InternalWithRef(ref terra.Reference) MaintenanceWindowNodeOsNotAllowedAttributes {
	return MaintenanceWindowNodeOsNotAllowedAttributes{ref: ref}
}

func (na MaintenanceWindowNodeOsNotAllowedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na MaintenanceWindowNodeOsNotAllowedAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("end"))
}

func (na MaintenanceWindowNodeOsNotAllowedAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("start"))
}

type MicrosoftDefenderAttributes struct {
	ref terra.Reference
}

func (md MicrosoftDefenderAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md MicrosoftDefenderAttributes) InternalWithRef(ref terra.Reference) MicrosoftDefenderAttributes {
	return MicrosoftDefenderAttributes{ref: ref}
}

func (md MicrosoftDefenderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md MicrosoftDefenderAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("log_analytics_workspace_id"))
}

type MonitorMetricsAttributes struct {
	ref terra.Reference
}

func (mm MonitorMetricsAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MonitorMetricsAttributes) InternalWithRef(ref terra.Reference) MonitorMetricsAttributes {
	return MonitorMetricsAttributes{ref: ref}
}

func (mm MonitorMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm MonitorMetricsAttributes) AnnotationsAllowed() terra.StringValue {
	return terra.ReferenceAsString(mm.ref.Append("annotations_allowed"))
}

func (mm MonitorMetricsAttributes) LabelsAllowed() terra.StringValue {
	return terra.ReferenceAsString(mm.ref.Append("labels_allowed"))
}

type NetworkProfileAttributes struct {
	ref terra.Reference
}

func (np NetworkProfileAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NetworkProfileAttributes) InternalWithRef(ref terra.Reference) NetworkProfileAttributes {
	return NetworkProfileAttributes{ref: ref}
}

func (np NetworkProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NetworkProfileAttributes) DnsServiceIp() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("dns_service_ip"))
}

func (np NetworkProfileAttributes) DockerBridgeCidr() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("docker_bridge_cidr"))
}

func (np NetworkProfileAttributes) EbpfDataPlane() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("ebpf_data_plane"))
}

func (np NetworkProfileAttributes) IpVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("ip_versions"))
}

func (np NetworkProfileAttributes) LoadBalancerSku() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("load_balancer_sku"))
}

func (np NetworkProfileAttributes) NetworkMode() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_mode"))
}

func (np NetworkProfileAttributes) NetworkPlugin() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_plugin"))
}

func (np NetworkProfileAttributes) NetworkPluginMode() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_plugin_mode"))
}

func (np NetworkProfileAttributes) NetworkPolicy() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("network_policy"))
}

func (np NetworkProfileAttributes) OutboundType() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("outbound_type"))
}

func (np NetworkProfileAttributes) PodCidr() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("pod_cidr"))
}

func (np NetworkProfileAttributes) PodCidrs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("pod_cidrs"))
}

func (np NetworkProfileAttributes) ServiceCidr() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("service_cidr"))
}

func (np NetworkProfileAttributes) ServiceCidrs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](np.ref.Append("service_cidrs"))
}

func (np NetworkProfileAttributes) LoadBalancerProfile() terra.ListValue[LoadBalancerProfileAttributes] {
	return terra.ReferenceAsList[LoadBalancerProfileAttributes](np.ref.Append("load_balancer_profile"))
}

func (np NetworkProfileAttributes) NatGatewayProfile() terra.ListValue[NatGatewayProfileAttributes] {
	return terra.ReferenceAsList[NatGatewayProfileAttributes](np.ref.Append("nat_gateway_profile"))
}

type LoadBalancerProfileAttributes struct {
	ref terra.Reference
}

func (lbp LoadBalancerProfileAttributes) InternalRef() (terra.Reference, error) {
	return lbp.ref, nil
}

func (lbp LoadBalancerProfileAttributes) InternalWithRef(ref terra.Reference) LoadBalancerProfileAttributes {
	return LoadBalancerProfileAttributes{ref: ref}
}

func (lbp LoadBalancerProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lbp.ref.InternalTokens()
}

func (lbp LoadBalancerProfileAttributes) EffectiveOutboundIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lbp.ref.Append("effective_outbound_ips"))
}

func (lbp LoadBalancerProfileAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(lbp.ref.Append("idle_timeout_in_minutes"))
}

func (lbp LoadBalancerProfileAttributes) ManagedOutboundIpCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lbp.ref.Append("managed_outbound_ip_count"))
}

func (lbp LoadBalancerProfileAttributes) ManagedOutboundIpv6Count() terra.NumberValue {
	return terra.ReferenceAsNumber(lbp.ref.Append("managed_outbound_ipv6_count"))
}

func (lbp LoadBalancerProfileAttributes) OutboundIpAddressIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lbp.ref.Append("outbound_ip_address_ids"))
}

func (lbp LoadBalancerProfileAttributes) OutboundIpPrefixIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lbp.ref.Append("outbound_ip_prefix_ids"))
}

func (lbp LoadBalancerProfileAttributes) OutboundPortsAllocated() terra.NumberValue {
	return terra.ReferenceAsNumber(lbp.ref.Append("outbound_ports_allocated"))
}

type NatGatewayProfileAttributes struct {
	ref terra.Reference
}

func (ngp NatGatewayProfileAttributes) InternalRef() (terra.Reference, error) {
	return ngp.ref, nil
}

func (ngp NatGatewayProfileAttributes) InternalWithRef(ref terra.Reference) NatGatewayProfileAttributes {
	return NatGatewayProfileAttributes{ref: ref}
}

func (ngp NatGatewayProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ngp.ref.InternalTokens()
}

func (ngp NatGatewayProfileAttributes) EffectiveOutboundIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ngp.ref.Append("effective_outbound_ips"))
}

func (ngp NatGatewayProfileAttributes) IdleTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ngp.ref.Append("idle_timeout_in_minutes"))
}

func (ngp NatGatewayProfileAttributes) ManagedOutboundIpCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ngp.ref.Append("managed_outbound_ip_count"))
}

type OmsAgentAttributes struct {
	ref terra.Reference
}

func (oa OmsAgentAttributes) InternalRef() (terra.Reference, error) {
	return oa.ref, nil
}

func (oa OmsAgentAttributes) InternalWithRef(ref terra.Reference) OmsAgentAttributes {
	return OmsAgentAttributes{ref: ref}
}

func (oa OmsAgentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oa.ref.InternalTokens()
}

func (oa OmsAgentAttributes) LogAnalyticsWorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("log_analytics_workspace_id"))
}

func (oa OmsAgentAttributes) MsiAuthForMonitoringEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(oa.ref.Append("msi_auth_for_monitoring_enabled"))
}

func (oa OmsAgentAttributes) OmsAgentIdentity() terra.ListValue[OmsAgentIdentityAttributes] {
	return terra.ReferenceAsList[OmsAgentIdentityAttributes](oa.ref.Append("oms_agent_identity"))
}

type OmsAgentIdentityAttributes struct {
	ref terra.Reference
}

func (oai OmsAgentIdentityAttributes) InternalRef() (terra.Reference, error) {
	return oai.ref, nil
}

func (oai OmsAgentIdentityAttributes) InternalWithRef(ref terra.Reference) OmsAgentIdentityAttributes {
	return OmsAgentIdentityAttributes{ref: ref}
}

func (oai OmsAgentIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oai.ref.InternalTokens()
}

func (oai OmsAgentIdentityAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(oai.ref.Append("client_id"))
}

func (oai OmsAgentIdentityAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(oai.ref.Append("object_id"))
}

func (oai OmsAgentIdentityAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(oai.ref.Append("user_assigned_identity_id"))
}

type ServiceMeshProfileAttributes struct {
	ref terra.Reference
}

func (smp ServiceMeshProfileAttributes) InternalRef() (terra.Reference, error) {
	return smp.ref, nil
}

func (smp ServiceMeshProfileAttributes) InternalWithRef(ref terra.Reference) ServiceMeshProfileAttributes {
	return ServiceMeshProfileAttributes{ref: ref}
}

func (smp ServiceMeshProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smp.ref.InternalTokens()
}

func (smp ServiceMeshProfileAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(smp.ref.Append("mode"))
}

type ServicePrincipalAttributes struct {
	ref terra.Reference
}

func (sp ServicePrincipalAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp ServicePrincipalAttributes) InternalWithRef(ref terra.Reference) ServicePrincipalAttributes {
	return ServicePrincipalAttributes{ref: ref}
}

func (sp ServicePrincipalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp ServicePrincipalAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("client_id"))
}

func (sp ServicePrincipalAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("client_secret"))
}

type StorageProfileAttributes struct {
	ref terra.Reference
}

func (sp StorageProfileAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp StorageProfileAttributes) InternalWithRef(ref terra.Reference) StorageProfileAttributes {
	return StorageProfileAttributes{ref: ref}
}

func (sp StorageProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp StorageProfileAttributes) BlobDriverEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("blob_driver_enabled"))
}

func (sp StorageProfileAttributes) DiskDriverEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("disk_driver_enabled"))
}

func (sp StorageProfileAttributes) DiskDriverVersion() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("disk_driver_version"))
}

func (sp StorageProfileAttributes) FileDriverEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("file_driver_enabled"))
}

func (sp StorageProfileAttributes) SnapshotControllerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("snapshot_controller_enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WebAppRoutingAttributes struct {
	ref terra.Reference
}

func (war WebAppRoutingAttributes) InternalRef() (terra.Reference, error) {
	return war.ref, nil
}

func (war WebAppRoutingAttributes) InternalWithRef(ref terra.Reference) WebAppRoutingAttributes {
	return WebAppRoutingAttributes{ref: ref}
}

func (war WebAppRoutingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return war.ref.InternalTokens()
}

func (war WebAppRoutingAttributes) DnsZoneId() terra.StringValue {
	return terra.ReferenceAsString(war.ref.Append("dns_zone_id"))
}

type WindowsProfileAttributes struct {
	ref terra.Reference
}

func (wp WindowsProfileAttributes) InternalRef() (terra.Reference, error) {
	return wp.ref, nil
}

func (wp WindowsProfileAttributes) InternalWithRef(ref terra.Reference) WindowsProfileAttributes {
	return WindowsProfileAttributes{ref: ref}
}

func (wp WindowsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wp.ref.InternalTokens()
}

func (wp WindowsProfileAttributes) AdminPassword() terra.StringValue {
	return terra.ReferenceAsString(wp.ref.Append("admin_password"))
}

func (wp WindowsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(wp.ref.Append("admin_username"))
}

func (wp WindowsProfileAttributes) License() terra.StringValue {
	return terra.ReferenceAsString(wp.ref.Append("license"))
}

func (wp WindowsProfileAttributes) Gmsa() terra.ListValue[GmsaAttributes] {
	return terra.ReferenceAsList[GmsaAttributes](wp.ref.Append("gmsa"))
}

type GmsaAttributes struct {
	ref terra.Reference
}

func (g GmsaAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GmsaAttributes) InternalWithRef(ref terra.Reference) GmsaAttributes {
	return GmsaAttributes{ref: ref}
}

func (g GmsaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GmsaAttributes) DnsServer() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("dns_server"))
}

func (g GmsaAttributes) RootDomain() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("root_domain"))
}

type WorkloadAutoscalerProfileAttributes struct {
	ref terra.Reference
}

func (wap WorkloadAutoscalerProfileAttributes) InternalRef() (terra.Reference, error) {
	return wap.ref, nil
}

func (wap WorkloadAutoscalerProfileAttributes) InternalWithRef(ref terra.Reference) WorkloadAutoscalerProfileAttributes {
	return WorkloadAutoscalerProfileAttributes{ref: ref}
}

func (wap WorkloadAutoscalerProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wap.ref.InternalTokens()
}

func (wap WorkloadAutoscalerProfileAttributes) KedaEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(wap.ref.Append("keda_enabled"))
}

func (wap WorkloadAutoscalerProfileAttributes) VerticalPodAutoscalerControlledValues() terra.StringValue {
	return terra.ReferenceAsString(wap.ref.Append("vertical_pod_autoscaler_controlled_values"))
}

func (wap WorkloadAutoscalerProfileAttributes) VerticalPodAutoscalerEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(wap.ref.Append("vertical_pod_autoscaler_enabled"))
}

func (wap WorkloadAutoscalerProfileAttributes) VerticalPodAutoscalerUpdateMode() terra.StringValue {
	return terra.ReferenceAsString(wap.ref.Append("vertical_pod_autoscaler_update_mode"))
}

type KubeAdminConfigState struct {
	ClientCertificate    string `json:"client_certificate"`
	ClientKey            string `json:"client_key"`
	ClusterCaCertificate string `json:"cluster_ca_certificate"`
	Host                 string `json:"host"`
	Password             string `json:"password"`
	Username             string `json:"username"`
}

type KubeConfigState struct {
	ClientCertificate    string `json:"client_certificate"`
	ClientKey            string `json:"client_key"`
	ClusterCaCertificate string `json:"cluster_ca_certificate"`
	Host                 string `json:"host"`
	Password             string `json:"password"`
	Username             string `json:"username"`
}

type AciConnectorLinuxState struct {
	SubnetName        string                   `json:"subnet_name"`
	ConnectorIdentity []ConnectorIdentityState `json:"connector_identity"`
}

type ConnectorIdentityState struct {
	ClientId               string `json:"client_id"`
	ObjectId               string `json:"object_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type ApiServerAccessProfileState struct {
	AuthorizedIpRanges     []string `json:"authorized_ip_ranges"`
	SubnetId               string   `json:"subnet_id"`
	VnetIntegrationEnabled bool     `json:"vnet_integration_enabled"`
}

type AutoScalerProfileState struct {
	BalanceSimilarNodeGroups      bool    `json:"balance_similar_node_groups"`
	EmptyBulkDeleteMax            string  `json:"empty_bulk_delete_max"`
	Expander                      string  `json:"expander"`
	MaxGracefulTerminationSec     string  `json:"max_graceful_termination_sec"`
	MaxNodeProvisioningTime       string  `json:"max_node_provisioning_time"`
	MaxUnreadyNodes               float64 `json:"max_unready_nodes"`
	MaxUnreadyPercentage          float64 `json:"max_unready_percentage"`
	NewPodScaleUpDelay            string  `json:"new_pod_scale_up_delay"`
	ScaleDownDelayAfterAdd        string  `json:"scale_down_delay_after_add"`
	ScaleDownDelayAfterDelete     string  `json:"scale_down_delay_after_delete"`
	ScaleDownDelayAfterFailure    string  `json:"scale_down_delay_after_failure"`
	ScaleDownUnneeded             string  `json:"scale_down_unneeded"`
	ScaleDownUnready              string  `json:"scale_down_unready"`
	ScaleDownUtilizationThreshold string  `json:"scale_down_utilization_threshold"`
	ScanInterval                  string  `json:"scan_interval"`
	SkipNodesWithLocalStorage     bool    `json:"skip_nodes_with_local_storage"`
	SkipNodesWithSystemPods       bool    `json:"skip_nodes_with_system_pods"`
}

type AzureActiveDirectoryRoleBasedAccessControlState struct {
	AdminGroupObjectIds []string `json:"admin_group_object_ids"`
	AzureRbacEnabled    bool     `json:"azure_rbac_enabled"`
	ClientAppId         string   `json:"client_app_id"`
	Managed             bool     `json:"managed"`
	ServerAppId         string   `json:"server_app_id"`
	ServerAppSecret     string   `json:"server_app_secret"`
	TenantId            string   `json:"tenant_id"`
}

type ConfidentialComputingState struct {
	SgxQuoteHelperEnabled bool `json:"sgx_quote_helper_enabled"`
}

type DefaultNodePoolState struct {
	CapacityReservationGroupId string                    `json:"capacity_reservation_group_id"`
	CustomCaTrustEnabled       bool                      `json:"custom_ca_trust_enabled"`
	EnableAutoScaling          bool                      `json:"enable_auto_scaling"`
	EnableHostEncryption       bool                      `json:"enable_host_encryption"`
	EnableNodePublicIp         bool                      `json:"enable_node_public_ip"`
	FipsEnabled                bool                      `json:"fips_enabled"`
	HostGroupId                string                    `json:"host_group_id"`
	KubeletDiskType            string                    `json:"kubelet_disk_type"`
	MaxCount                   float64                   `json:"max_count"`
	MaxPods                    float64                   `json:"max_pods"`
	MessageOfTheDay            string                    `json:"message_of_the_day"`
	MinCount                   float64                   `json:"min_count"`
	Name                       string                    `json:"name"`
	NodeCount                  float64                   `json:"node_count"`
	NodeLabels                 map[string]string         `json:"node_labels"`
	NodePublicIpPrefixId       string                    `json:"node_public_ip_prefix_id"`
	NodeTaints                 []string                  `json:"node_taints"`
	OnlyCriticalAddonsEnabled  bool                      `json:"only_critical_addons_enabled"`
	OrchestratorVersion        string                    `json:"orchestrator_version"`
	OsDiskSizeGb               float64                   `json:"os_disk_size_gb"`
	OsDiskType                 string                    `json:"os_disk_type"`
	OsSku                      string                    `json:"os_sku"`
	PodSubnetId                string                    `json:"pod_subnet_id"`
	ProximityPlacementGroupId  string                    `json:"proximity_placement_group_id"`
	ScaleDownMode              string                    `json:"scale_down_mode"`
	Tags                       map[string]string         `json:"tags"`
	TemporaryNameForRotation   string                    `json:"temporary_name_for_rotation"`
	Type                       string                    `json:"type"`
	UltraSsdEnabled            bool                      `json:"ultra_ssd_enabled"`
	VmSize                     string                    `json:"vm_size"`
	VnetSubnetId               string                    `json:"vnet_subnet_id"`
	WorkloadRuntime            string                    `json:"workload_runtime"`
	Zones                      []string                  `json:"zones"`
	KubeletConfig              []KubeletConfigState      `json:"kubelet_config"`
	LinuxOsConfig              []LinuxOsConfigState      `json:"linux_os_config"`
	NodeNetworkProfile         []NodeNetworkProfileState `json:"node_network_profile"`
	UpgradeSettings            []UpgradeSettingsState    `json:"upgrade_settings"`
}

type KubeletConfigState struct {
	AllowedUnsafeSysctls  []string `json:"allowed_unsafe_sysctls"`
	ContainerLogMaxLine   float64  `json:"container_log_max_line"`
	ContainerLogMaxSizeMb float64  `json:"container_log_max_size_mb"`
	CpuCfsQuotaEnabled    bool     `json:"cpu_cfs_quota_enabled"`
	CpuCfsQuotaPeriod     string   `json:"cpu_cfs_quota_period"`
	CpuManagerPolicy      string   `json:"cpu_manager_policy"`
	ImageGcHighThreshold  float64  `json:"image_gc_high_threshold"`
	ImageGcLowThreshold   float64  `json:"image_gc_low_threshold"`
	PodMaxPid             float64  `json:"pod_max_pid"`
	TopologyManagerPolicy string   `json:"topology_manager_policy"`
}

type LinuxOsConfigState struct {
	SwapFileSizeMb             float64             `json:"swap_file_size_mb"`
	TransparentHugePageDefrag  string              `json:"transparent_huge_page_defrag"`
	TransparentHugePageEnabled string              `json:"transparent_huge_page_enabled"`
	SysctlConfig               []SysctlConfigState `json:"sysctl_config"`
}

type SysctlConfigState struct {
	FsAioMaxNr                     float64 `json:"fs_aio_max_nr"`
	FsFileMax                      float64 `json:"fs_file_max"`
	FsInotifyMaxUserWatches        float64 `json:"fs_inotify_max_user_watches"`
	FsNrOpen                       float64 `json:"fs_nr_open"`
	KernelThreadsMax               float64 `json:"kernel_threads_max"`
	NetCoreNetdevMaxBacklog        float64 `json:"net_core_netdev_max_backlog"`
	NetCoreOptmemMax               float64 `json:"net_core_optmem_max"`
	NetCoreRmemDefault             float64 `json:"net_core_rmem_default"`
	NetCoreRmemMax                 float64 `json:"net_core_rmem_max"`
	NetCoreSomaxconn               float64 `json:"net_core_somaxconn"`
	NetCoreWmemDefault             float64 `json:"net_core_wmem_default"`
	NetCoreWmemMax                 float64 `json:"net_core_wmem_max"`
	NetIpv4IpLocalPortRangeMax     float64 `json:"net_ipv4_ip_local_port_range_max"`
	NetIpv4IpLocalPortRangeMin     float64 `json:"net_ipv4_ip_local_port_range_min"`
	NetIpv4NeighDefaultGcThresh1   float64 `json:"net_ipv4_neigh_default_gc_thresh1"`
	NetIpv4NeighDefaultGcThresh2   float64 `json:"net_ipv4_neigh_default_gc_thresh2"`
	NetIpv4NeighDefaultGcThresh3   float64 `json:"net_ipv4_neigh_default_gc_thresh3"`
	NetIpv4TcpFinTimeout           float64 `json:"net_ipv4_tcp_fin_timeout"`
	NetIpv4TcpKeepaliveIntvl       float64 `json:"net_ipv4_tcp_keepalive_intvl"`
	NetIpv4TcpKeepaliveProbes      float64 `json:"net_ipv4_tcp_keepalive_probes"`
	NetIpv4TcpKeepaliveTime        float64 `json:"net_ipv4_tcp_keepalive_time"`
	NetIpv4TcpMaxSynBacklog        float64 `json:"net_ipv4_tcp_max_syn_backlog"`
	NetIpv4TcpMaxTwBuckets         float64 `json:"net_ipv4_tcp_max_tw_buckets"`
	NetIpv4TcpTwReuse              bool    `json:"net_ipv4_tcp_tw_reuse"`
	NetNetfilterNfConntrackBuckets float64 `json:"net_netfilter_nf_conntrack_buckets"`
	NetNetfilterNfConntrackMax     float64 `json:"net_netfilter_nf_conntrack_max"`
	VmMaxMapCount                  float64 `json:"vm_max_map_count"`
	VmSwappiness                   float64 `json:"vm_swappiness"`
	VmVfsCachePressure             float64 `json:"vm_vfs_cache_pressure"`
}

type NodeNetworkProfileState struct {
	NodePublicIpTags map[string]string `json:"node_public_ip_tags"`
}

type UpgradeSettingsState struct {
	MaxSurge string `json:"max_surge"`
}

type HttpProxyConfigState struct {
	HttpProxy  string   `json:"http_proxy"`
	HttpsProxy string   `json:"https_proxy"`
	NoProxy    []string `json:"no_proxy"`
	TrustedCa  string   `json:"trusted_ca"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type IngressApplicationGatewayState struct {
	EffectiveGatewayId                string                                   `json:"effective_gateway_id"`
	GatewayId                         string                                   `json:"gateway_id"`
	GatewayName                       string                                   `json:"gateway_name"`
	SubnetCidr                        string                                   `json:"subnet_cidr"`
	SubnetId                          string                                   `json:"subnet_id"`
	IngressApplicationGatewayIdentity []IngressApplicationGatewayIdentityState `json:"ingress_application_gateway_identity"`
}

type IngressApplicationGatewayIdentityState struct {
	ClientId               string `json:"client_id"`
	ObjectId               string `json:"object_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type KeyManagementServiceState struct {
	KeyVaultKeyId         string `json:"key_vault_key_id"`
	KeyVaultNetworkAccess string `json:"key_vault_network_access"`
}

type KeyVaultSecretsProviderState struct {
	SecretRotationEnabled  bool                  `json:"secret_rotation_enabled"`
	SecretRotationInterval string                `json:"secret_rotation_interval"`
	SecretIdentity         []SecretIdentityState `json:"secret_identity"`
}

type SecretIdentityState struct {
	ClientId               string `json:"client_id"`
	ObjectId               string `json:"object_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type KubeletIdentityState struct {
	ClientId               string `json:"client_id"`
	ObjectId               string `json:"object_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type LinuxProfileState struct {
	AdminUsername string        `json:"admin_username"`
	SshKey        []SshKeyState `json:"ssh_key"`
}

type SshKeyState struct {
	KeyData string `json:"key_data"`
}

type MaintenanceWindowState struct {
	Allowed    []AllowedState                     `json:"allowed"`
	NotAllowed []MaintenanceWindowNotAllowedState `json:"not_allowed"`
}

type AllowedState struct {
	Day   string    `json:"day"`
	Hours []float64 `json:"hours"`
}

type MaintenanceWindowNotAllowedState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}

type MaintenanceWindowAutoUpgradeState struct {
	DayOfMonth float64                                       `json:"day_of_month"`
	DayOfWeek  string                                        `json:"day_of_week"`
	Duration   float64                                       `json:"duration"`
	Frequency  string                                        `json:"frequency"`
	Interval   float64                                       `json:"interval"`
	StartDate  string                                        `json:"start_date"`
	StartTime  string                                        `json:"start_time"`
	UtcOffset  string                                        `json:"utc_offset"`
	WeekIndex  string                                        `json:"week_index"`
	NotAllowed []MaintenanceWindowAutoUpgradeNotAllowedState `json:"not_allowed"`
}

type MaintenanceWindowAutoUpgradeNotAllowedState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}

type MaintenanceWindowNodeOsState struct {
	DayOfMonth float64                                  `json:"day_of_month"`
	DayOfWeek  string                                   `json:"day_of_week"`
	Duration   float64                                  `json:"duration"`
	Frequency  string                                   `json:"frequency"`
	Interval   float64                                  `json:"interval"`
	StartDate  string                                   `json:"start_date"`
	StartTime  string                                   `json:"start_time"`
	UtcOffset  string                                   `json:"utc_offset"`
	WeekIndex  string                                   `json:"week_index"`
	NotAllowed []MaintenanceWindowNodeOsNotAllowedState `json:"not_allowed"`
}

type MaintenanceWindowNodeOsNotAllowedState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}

type MicrosoftDefenderState struct {
	LogAnalyticsWorkspaceId string `json:"log_analytics_workspace_id"`
}

type MonitorMetricsState struct {
	AnnotationsAllowed string `json:"annotations_allowed"`
	LabelsAllowed      string `json:"labels_allowed"`
}

type NetworkProfileState struct {
	DnsServiceIp        string                     `json:"dns_service_ip"`
	DockerBridgeCidr    string                     `json:"docker_bridge_cidr"`
	EbpfDataPlane       string                     `json:"ebpf_data_plane"`
	IpVersions          []string                   `json:"ip_versions"`
	LoadBalancerSku     string                     `json:"load_balancer_sku"`
	NetworkMode         string                     `json:"network_mode"`
	NetworkPlugin       string                     `json:"network_plugin"`
	NetworkPluginMode   string                     `json:"network_plugin_mode"`
	NetworkPolicy       string                     `json:"network_policy"`
	OutboundType        string                     `json:"outbound_type"`
	PodCidr             string                     `json:"pod_cidr"`
	PodCidrs            []string                   `json:"pod_cidrs"`
	ServiceCidr         string                     `json:"service_cidr"`
	ServiceCidrs        []string                   `json:"service_cidrs"`
	LoadBalancerProfile []LoadBalancerProfileState `json:"load_balancer_profile"`
	NatGatewayProfile   []NatGatewayProfileState   `json:"nat_gateway_profile"`
}

type LoadBalancerProfileState struct {
	EffectiveOutboundIps     []string `json:"effective_outbound_ips"`
	IdleTimeoutInMinutes     float64  `json:"idle_timeout_in_minutes"`
	ManagedOutboundIpCount   float64  `json:"managed_outbound_ip_count"`
	ManagedOutboundIpv6Count float64  `json:"managed_outbound_ipv6_count"`
	OutboundIpAddressIds     []string `json:"outbound_ip_address_ids"`
	OutboundIpPrefixIds      []string `json:"outbound_ip_prefix_ids"`
	OutboundPortsAllocated   float64  `json:"outbound_ports_allocated"`
}

type NatGatewayProfileState struct {
	EffectiveOutboundIps   []string `json:"effective_outbound_ips"`
	IdleTimeoutInMinutes   float64  `json:"idle_timeout_in_minutes"`
	ManagedOutboundIpCount float64  `json:"managed_outbound_ip_count"`
}

type OmsAgentState struct {
	LogAnalyticsWorkspaceId     string                  `json:"log_analytics_workspace_id"`
	MsiAuthForMonitoringEnabled bool                    `json:"msi_auth_for_monitoring_enabled"`
	OmsAgentIdentity            []OmsAgentIdentityState `json:"oms_agent_identity"`
}

type OmsAgentIdentityState struct {
	ClientId               string `json:"client_id"`
	ObjectId               string `json:"object_id"`
	UserAssignedIdentityId string `json:"user_assigned_identity_id"`
}

type ServiceMeshProfileState struct {
	Mode string `json:"mode"`
}

type ServicePrincipalState struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

type StorageProfileState struct {
	BlobDriverEnabled         bool   `json:"blob_driver_enabled"`
	DiskDriverEnabled         bool   `json:"disk_driver_enabled"`
	DiskDriverVersion         string `json:"disk_driver_version"`
	FileDriverEnabled         bool   `json:"file_driver_enabled"`
	SnapshotControllerEnabled bool   `json:"snapshot_controller_enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type WebAppRoutingState struct {
	DnsZoneId string `json:"dns_zone_id"`
}

type WindowsProfileState struct {
	AdminPassword string      `json:"admin_password"`
	AdminUsername string      `json:"admin_username"`
	License       string      `json:"license"`
	Gmsa          []GmsaState `json:"gmsa"`
}

type GmsaState struct {
	DnsServer  string `json:"dns_server"`
	RootDomain string `json:"root_domain"`
}

type WorkloadAutoscalerProfileState struct {
	KedaEnabled                           bool   `json:"keda_enabled"`
	VerticalPodAutoscalerControlledValues string `json:"vertical_pod_autoscaler_controlled_values"`
	VerticalPodAutoscalerEnabled          bool   `json:"vertical_pod_autoscaler_enabled"`
	VerticalPodAutoscalerUpdateMode       string `json:"vertical_pod_autoscaler_update_mode"`
}
