// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package automanageconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Antimalware struct {
	// RealTimeProtectionEnabled: bool, optional
	RealTimeProtectionEnabled terra.BoolValue `hcl:"real_time_protection_enabled,attr"`
	// ScheduledScanDay: number, optional
	ScheduledScanDay terra.NumberValue `hcl:"scheduled_scan_day,attr"`
	// ScheduledScanEnabled: bool, optional
	ScheduledScanEnabled terra.BoolValue `hcl:"scheduled_scan_enabled,attr"`
	// ScheduledScanTimeInMinutes: number, optional
	ScheduledScanTimeInMinutes terra.NumberValue `hcl:"scheduled_scan_time_in_minutes,attr"`
	// ScheduledScanType: string, optional
	ScheduledScanType terra.StringValue `hcl:"scheduled_scan_type,attr"`
	// Exclusions: optional
	Exclusions *Exclusions `hcl:"exclusions,block"`
}

type Exclusions struct {
	// Extensions: string, optional
	Extensions terra.StringValue `hcl:"extensions,attr"`
	// Paths: string, optional
	Paths terra.StringValue `hcl:"paths,attr"`
	// Processes: string, optional
	Processes terra.StringValue `hcl:"processes,attr"`
}

type AzureSecurityBaseline struct {
	// AssignmentType: string, optional
	AssignmentType terra.StringValue `hcl:"assignment_type,attr"`
}

type Backup struct {
	// InstantRpRetentionRangeInDays: number, optional
	InstantRpRetentionRangeInDays terra.NumberValue `hcl:"instant_rp_retention_range_in_days,attr"`
	// PolicyName: string, optional
	PolicyName terra.StringValue `hcl:"policy_name,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// RetentionPolicy: optional
	RetentionPolicy *RetentionPolicy `hcl:"retention_policy,block"`
	// SchedulePolicy: optional
	SchedulePolicy *SchedulePolicy `hcl:"schedule_policy,block"`
}

type RetentionPolicy struct {
	// RetentionPolicyType: string, optional
	RetentionPolicyType terra.StringValue `hcl:"retention_policy_type,attr"`
	// DailySchedule: optional
	DailySchedule *DailySchedule `hcl:"daily_schedule,block"`
	// WeeklySchedule: optional
	WeeklySchedule *WeeklySchedule `hcl:"weekly_schedule,block"`
}

type DailySchedule struct {
	// RetentionTimes: list of string, optional
	RetentionTimes terra.ListValue[terra.StringValue] `hcl:"retention_times,attr"`
	// DailyScheduleRetentionDuration: optional
	RetentionDuration *DailyScheduleRetentionDuration `hcl:"retention_duration,block"`
}

type DailyScheduleRetentionDuration struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// DurationType: string, optional
	DurationType terra.StringValue `hcl:"duration_type,attr"`
}

type WeeklySchedule struct {
	// RetentionTimes: list of string, optional
	RetentionTimes terra.ListValue[terra.StringValue] `hcl:"retention_times,attr"`
	// WeeklyScheduleRetentionDuration: optional
	RetentionDuration *WeeklyScheduleRetentionDuration `hcl:"retention_duration,block"`
}

type WeeklyScheduleRetentionDuration struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// DurationType: string, optional
	DurationType terra.StringValue `hcl:"duration_type,attr"`
}

type SchedulePolicy struct {
	// SchedulePolicyType: string, optional
	SchedulePolicyType terra.StringValue `hcl:"schedule_policy_type,attr"`
	// ScheduleRunDays: list of string, optional
	ScheduleRunDays terra.ListValue[terra.StringValue] `hcl:"schedule_run_days,attr"`
	// ScheduleRunFrequency: string, optional
	ScheduleRunFrequency terra.StringValue `hcl:"schedule_run_frequency,attr"`
	// ScheduleRunTimes: list of string, optional
	ScheduleRunTimes terra.ListValue[terra.StringValue] `hcl:"schedule_run_times,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AntimalwareAttributes struct {
	ref terra.Reference
}

func (a AntimalwareAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AntimalwareAttributes) InternalWithRef(ref terra.Reference) AntimalwareAttributes {
	return AntimalwareAttributes{ref: ref}
}

func (a AntimalwareAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AntimalwareAttributes) RealTimeProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("real_time_protection_enabled"))
}

func (a AntimalwareAttributes) ScheduledScanDay() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("scheduled_scan_day"))
}

func (a AntimalwareAttributes) ScheduledScanEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("scheduled_scan_enabled"))
}

func (a AntimalwareAttributes) ScheduledScanTimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("scheduled_scan_time_in_minutes"))
}

func (a AntimalwareAttributes) ScheduledScanType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("scheduled_scan_type"))
}

func (a AntimalwareAttributes) Exclusions() terra.ListValue[ExclusionsAttributes] {
	return terra.ReferenceAsList[ExclusionsAttributes](a.ref.Append("exclusions"))
}

type ExclusionsAttributes struct {
	ref terra.Reference
}

func (e ExclusionsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExclusionsAttributes) InternalWithRef(ref terra.Reference) ExclusionsAttributes {
	return ExclusionsAttributes{ref: ref}
}

func (e ExclusionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExclusionsAttributes) Extensions() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("extensions"))
}

func (e ExclusionsAttributes) Paths() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("paths"))
}

func (e ExclusionsAttributes) Processes() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("processes"))
}

type AzureSecurityBaselineAttributes struct {
	ref terra.Reference
}

func (asb AzureSecurityBaselineAttributes) InternalRef() (terra.Reference, error) {
	return asb.ref, nil
}

func (asb AzureSecurityBaselineAttributes) InternalWithRef(ref terra.Reference) AzureSecurityBaselineAttributes {
	return AzureSecurityBaselineAttributes{ref: ref}
}

func (asb AzureSecurityBaselineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asb.ref.InternalTokens()
}

func (asb AzureSecurityBaselineAttributes) AssignmentType() terra.StringValue {
	return terra.ReferenceAsString(asb.ref.Append("assignment_type"))
}

type BackupAttributes struct {
	ref terra.Reference
}

func (b BackupAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackupAttributes) InternalWithRef(ref terra.Reference) BackupAttributes {
	return BackupAttributes{ref: ref}
}

func (b BackupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackupAttributes) InstantRpRetentionRangeInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(b.ref.Append("instant_rp_retention_range_in_days"))
}

func (b BackupAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("policy_name"))
}

func (b BackupAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("time_zone"))
}

func (b BackupAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceAsList[RetentionPolicyAttributes](b.ref.Append("retention_policy"))
}

func (b BackupAttributes) SchedulePolicy() terra.ListValue[SchedulePolicyAttributes] {
	return terra.ReferenceAsList[SchedulePolicyAttributes](b.ref.Append("schedule_policy"))
}

type RetentionPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetentionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetentionPolicyAttributes) InternalWithRef(ref terra.Reference) RetentionPolicyAttributes {
	return RetentionPolicyAttributes{ref: ref}
}

func (rp RetentionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetentionPolicyAttributes) RetentionPolicyType() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("retention_policy_type"))
}

func (rp RetentionPolicyAttributes) DailySchedule() terra.ListValue[DailyScheduleAttributes] {
	return terra.ReferenceAsList[DailyScheduleAttributes](rp.ref.Append("daily_schedule"))
}

func (rp RetentionPolicyAttributes) WeeklySchedule() terra.ListValue[WeeklyScheduleAttributes] {
	return terra.ReferenceAsList[WeeklyScheduleAttributes](rp.ref.Append("weekly_schedule"))
}

type DailyScheduleAttributes struct {
	ref terra.Reference
}

func (ds DailyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DailyScheduleAttributes) InternalWithRef(ref terra.Reference) DailyScheduleAttributes {
	return DailyScheduleAttributes{ref: ref}
}

func (ds DailyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DailyScheduleAttributes) RetentionTimes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("retention_times"))
}

func (ds DailyScheduleAttributes) RetentionDuration() terra.ListValue[DailyScheduleRetentionDurationAttributes] {
	return terra.ReferenceAsList[DailyScheduleRetentionDurationAttributes](ds.ref.Append("retention_duration"))
}

type DailyScheduleRetentionDurationAttributes struct {
	ref terra.Reference
}

func (rd DailyScheduleRetentionDurationAttributes) InternalRef() (terra.Reference, error) {
	return rd.ref, nil
}

func (rd DailyScheduleRetentionDurationAttributes) InternalWithRef(ref terra.Reference) DailyScheduleRetentionDurationAttributes {
	return DailyScheduleRetentionDurationAttributes{ref: ref}
}

func (rd DailyScheduleRetentionDurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rd.ref.InternalTokens()
}

func (rd DailyScheduleRetentionDurationAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rd.ref.Append("count"))
}

func (rd DailyScheduleRetentionDurationAttributes) DurationType() terra.StringValue {
	return terra.ReferenceAsString(rd.ref.Append("duration_type"))
}

type WeeklyScheduleAttributes struct {
	ref terra.Reference
}

func (ws WeeklyScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WeeklyScheduleAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleAttributes {
	return WeeklyScheduleAttributes{ref: ref}
}

func (ws WeeklyScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WeeklyScheduleAttributes) RetentionTimes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ws.ref.Append("retention_times"))
}

func (ws WeeklyScheduleAttributes) RetentionDuration() terra.ListValue[WeeklyScheduleRetentionDurationAttributes] {
	return terra.ReferenceAsList[WeeklyScheduleRetentionDurationAttributes](ws.ref.Append("retention_duration"))
}

type WeeklyScheduleRetentionDurationAttributes struct {
	ref terra.Reference
}

func (rd WeeklyScheduleRetentionDurationAttributes) InternalRef() (terra.Reference, error) {
	return rd.ref, nil
}

func (rd WeeklyScheduleRetentionDurationAttributes) InternalWithRef(ref terra.Reference) WeeklyScheduleRetentionDurationAttributes {
	return WeeklyScheduleRetentionDurationAttributes{ref: ref}
}

func (rd WeeklyScheduleRetentionDurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rd.ref.InternalTokens()
}

func (rd WeeklyScheduleRetentionDurationAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rd.ref.Append("count"))
}

func (rd WeeklyScheduleRetentionDurationAttributes) DurationType() terra.StringValue {
	return terra.ReferenceAsString(rd.ref.Append("duration_type"))
}

type SchedulePolicyAttributes struct {
	ref terra.Reference
}

func (sp SchedulePolicyAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SchedulePolicyAttributes) InternalWithRef(ref terra.Reference) SchedulePolicyAttributes {
	return SchedulePolicyAttributes{ref: ref}
}

func (sp SchedulePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SchedulePolicyAttributes) SchedulePolicyType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("schedule_policy_type"))
}

func (sp SchedulePolicyAttributes) ScheduleRunDays() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("schedule_run_days"))
}

func (sp SchedulePolicyAttributes) ScheduleRunFrequency() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("schedule_run_frequency"))
}

func (sp SchedulePolicyAttributes) ScheduleRunTimes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sp.ref.Append("schedule_run_times"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AntimalwareState struct {
	RealTimeProtectionEnabled  bool              `json:"real_time_protection_enabled"`
	ScheduledScanDay           float64           `json:"scheduled_scan_day"`
	ScheduledScanEnabled       bool              `json:"scheduled_scan_enabled"`
	ScheduledScanTimeInMinutes float64           `json:"scheduled_scan_time_in_minutes"`
	ScheduledScanType          string            `json:"scheduled_scan_type"`
	Exclusions                 []ExclusionsState `json:"exclusions"`
}

type ExclusionsState struct {
	Extensions string `json:"extensions"`
	Paths      string `json:"paths"`
	Processes  string `json:"processes"`
}

type AzureSecurityBaselineState struct {
	AssignmentType string `json:"assignment_type"`
}

type BackupState struct {
	InstantRpRetentionRangeInDays float64                `json:"instant_rp_retention_range_in_days"`
	PolicyName                    string                 `json:"policy_name"`
	TimeZone                      string                 `json:"time_zone"`
	RetentionPolicy               []RetentionPolicyState `json:"retention_policy"`
	SchedulePolicy                []SchedulePolicyState  `json:"schedule_policy"`
}

type RetentionPolicyState struct {
	RetentionPolicyType string                `json:"retention_policy_type"`
	DailySchedule       []DailyScheduleState  `json:"daily_schedule"`
	WeeklySchedule      []WeeklyScheduleState `json:"weekly_schedule"`
}

type DailyScheduleState struct {
	RetentionTimes    []string                              `json:"retention_times"`
	RetentionDuration []DailyScheduleRetentionDurationState `json:"retention_duration"`
}

type DailyScheduleRetentionDurationState struct {
	Count        float64 `json:"count"`
	DurationType string  `json:"duration_type"`
}

type WeeklyScheduleState struct {
	RetentionTimes    []string                               `json:"retention_times"`
	RetentionDuration []WeeklyScheduleRetentionDurationState `json:"retention_duration"`
}

type WeeklyScheduleRetentionDurationState struct {
	Count        float64 `json:"count"`
	DurationType string  `json:"duration_type"`
}

type SchedulePolicyState struct {
	SchedulePolicyType   string   `json:"schedule_policy_type"`
	ScheduleRunDays      []string `json:"schedule_run_days"`
	ScheduleRunFrequency string   `json:"schedule_run_frequency"`
	ScheduleRunTimes     []string `json:"schedule_run_times"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
