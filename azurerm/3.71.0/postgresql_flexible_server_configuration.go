// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	postgresqlflexibleserverconfiguration "github.com/golingon/terraproviders/azurerm/3.71.0/postgresqlflexibleserverconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewPostgresqlFlexibleServerConfiguration creates a new instance of [PostgresqlFlexibleServerConfiguration].
func NewPostgresqlFlexibleServerConfiguration(name string, args PostgresqlFlexibleServerConfigurationArgs) *PostgresqlFlexibleServerConfiguration {
	return &PostgresqlFlexibleServerConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PostgresqlFlexibleServerConfiguration)(nil)

// PostgresqlFlexibleServerConfiguration represents the Terraform resource azurerm_postgresql_flexible_server_configuration.
type PostgresqlFlexibleServerConfiguration struct {
	Name      string
	Args      PostgresqlFlexibleServerConfigurationArgs
	state     *postgresqlFlexibleServerConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) Type() string {
	return "azurerm_postgresql_flexible_server_configuration"
}

// LocalName returns the local name for [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) LocalName() string {
	return pfsc.Name
}

// Configuration returns the configuration (args) for [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) Configuration() interface{} {
	return pfsc.Args
}

// DependOn is used for other resources to depend on [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(pfsc)
}

// Dependencies returns the list of resources [PostgresqlFlexibleServerConfiguration] depends_on.
func (pfsc *PostgresqlFlexibleServerConfiguration) Dependencies() terra.Dependencies {
	return pfsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) LifecycleManagement() *terra.Lifecycle {
	return pfsc.Lifecycle
}

// Attributes returns the attributes for [PostgresqlFlexibleServerConfiguration].
func (pfsc *PostgresqlFlexibleServerConfiguration) Attributes() postgresqlFlexibleServerConfigurationAttributes {
	return postgresqlFlexibleServerConfigurationAttributes{ref: terra.ReferenceResource(pfsc)}
}

// ImportState imports the given attribute values into [PostgresqlFlexibleServerConfiguration]'s state.
func (pfsc *PostgresqlFlexibleServerConfiguration) ImportState(av io.Reader) error {
	pfsc.state = &postgresqlFlexibleServerConfigurationState{}
	if err := json.NewDecoder(av).Decode(pfsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pfsc.Type(), pfsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PostgresqlFlexibleServerConfiguration] has state.
func (pfsc *PostgresqlFlexibleServerConfiguration) State() (*postgresqlFlexibleServerConfigurationState, bool) {
	return pfsc.state, pfsc.state != nil
}

// StateMust returns the state for [PostgresqlFlexibleServerConfiguration]. Panics if the state is nil.
func (pfsc *PostgresqlFlexibleServerConfiguration) StateMust() *postgresqlFlexibleServerConfigurationState {
	if pfsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pfsc.Type(), pfsc.LocalName()))
	}
	return pfsc.state
}

// PostgresqlFlexibleServerConfigurationArgs contains the configurations for azurerm_postgresql_flexible_server_configuration.
type PostgresqlFlexibleServerConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *postgresqlflexibleserverconfiguration.Timeouts `hcl:"timeouts,block"`
}
type postgresqlFlexibleServerConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_postgresql_flexible_server_configuration.
func (pfsc postgresqlFlexibleServerConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pfsc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_postgresql_flexible_server_configuration.
func (pfsc postgresqlFlexibleServerConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pfsc.ref.Append("name"))
}

// ServerId returns a reference to field server_id of azurerm_postgresql_flexible_server_configuration.
func (pfsc postgresqlFlexibleServerConfigurationAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(pfsc.ref.Append("server_id"))
}

// Value returns a reference to field value of azurerm_postgresql_flexible_server_configuration.
func (pfsc postgresqlFlexibleServerConfigurationAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pfsc.ref.Append("value"))
}

func (pfsc postgresqlFlexibleServerConfigurationAttributes) Timeouts() postgresqlflexibleserverconfiguration.TimeoutsAttributes {
	return terra.ReferenceAsSingle[postgresqlflexibleserverconfiguration.TimeoutsAttributes](pfsc.ref.Append("timeouts"))
}

type postgresqlFlexibleServerConfigurationState struct {
	Id       string                                               `json:"id"`
	Name     string                                               `json:"name"`
	ServerId string                                               `json:"server_id"`
	Value    string                                               `json:"value"`
	Timeouts *postgresqlflexibleserverconfiguration.TimeoutsState `json:"timeouts"`
}
