// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	customprovider "github.com/golingon/terraproviders/azurerm/3.71.0/customprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCustomProvider creates a new instance of [CustomProvider].
func NewCustomProvider(name string, args CustomProviderArgs) *CustomProvider {
	return &CustomProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CustomProvider)(nil)

// CustomProvider represents the Terraform resource azurerm_custom_provider.
type CustomProvider struct {
	Name      string
	Args      CustomProviderArgs
	state     *customProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CustomProvider].
func (cp *CustomProvider) Type() string {
	return "azurerm_custom_provider"
}

// LocalName returns the local name for [CustomProvider].
func (cp *CustomProvider) LocalName() string {
	return cp.Name
}

// Configuration returns the configuration (args) for [CustomProvider].
func (cp *CustomProvider) Configuration() interface{} {
	return cp.Args
}

// DependOn is used for other resources to depend on [CustomProvider].
func (cp *CustomProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(cp)
}

// Dependencies returns the list of resources [CustomProvider] depends_on.
func (cp *CustomProvider) Dependencies() terra.Dependencies {
	return cp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CustomProvider].
func (cp *CustomProvider) LifecycleManagement() *terra.Lifecycle {
	return cp.Lifecycle
}

// Attributes returns the attributes for [CustomProvider].
func (cp *CustomProvider) Attributes() customProviderAttributes {
	return customProviderAttributes{ref: terra.ReferenceResource(cp)}
}

// ImportState imports the given attribute values into [CustomProvider]'s state.
func (cp *CustomProvider) ImportState(av io.Reader) error {
	cp.state = &customProviderState{}
	if err := json.NewDecoder(av).Decode(cp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cp.Type(), cp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CustomProvider] has state.
func (cp *CustomProvider) State() (*customProviderState, bool) {
	return cp.state, cp.state != nil
}

// StateMust returns the state for [CustomProvider]. Panics if the state is nil.
func (cp *CustomProvider) StateMust() *customProviderState {
	if cp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cp.Type(), cp.LocalName()))
	}
	return cp.state
}

// CustomProviderArgs contains the configurations for azurerm_custom_provider.
type CustomProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Action: min=0
	Action []customprovider.Action `hcl:"action,block" validate:"min=0"`
	// ResourceType: min=0
	ResourceType []customprovider.ResourceType `hcl:"resource_type,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *customprovider.Timeouts `hcl:"timeouts,block"`
	// Validation: min=0
	Validation []customprovider.Validation `hcl:"validation,block" validate:"min=0"`
}
type customProviderAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_custom_provider.
func (cp customProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_custom_provider.
func (cp customProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_custom_provider.
func (cp customProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_custom_provider.
func (cp customProviderAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_custom_provider.
func (cp customProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cp.ref.Append("tags"))
}

func (cp customProviderAttributes) Action() terra.SetValue[customprovider.ActionAttributes] {
	return terra.ReferenceAsSet[customprovider.ActionAttributes](cp.ref.Append("action"))
}

func (cp customProviderAttributes) ResourceType() terra.SetValue[customprovider.ResourceTypeAttributes] {
	return terra.ReferenceAsSet[customprovider.ResourceTypeAttributes](cp.ref.Append("resource_type"))
}

func (cp customProviderAttributes) Timeouts() customprovider.TimeoutsAttributes {
	return terra.ReferenceAsSingle[customprovider.TimeoutsAttributes](cp.ref.Append("timeouts"))
}

func (cp customProviderAttributes) Validation() terra.SetValue[customprovider.ValidationAttributes] {
	return terra.ReferenceAsSet[customprovider.ValidationAttributes](cp.ref.Append("validation"))
}

type customProviderState struct {
	Id                string                             `json:"id"`
	Location          string                             `json:"location"`
	Name              string                             `json:"name"`
	ResourceGroupName string                             `json:"resource_group_name"`
	Tags              map[string]string                  `json:"tags"`
	Action            []customprovider.ActionState       `json:"action"`
	ResourceType      []customprovider.ResourceTypeState `json:"resource_type"`
	Timeouts          *customprovider.TimeoutsState      `json:"timeouts"`
	Validation        []customprovider.ValidationState   `json:"validation"`
}
