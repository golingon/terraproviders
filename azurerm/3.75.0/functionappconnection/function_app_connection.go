// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package functionappconnection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Authentication struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrincipalId: string, optional
	PrincipalId terra.StringValue `hcl:"principal_id,attr"`
	// Secret: string, optional
	Secret terra.StringValue `hcl:"secret,attr"`
	// SubscriptionId: string, optional
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SecretStore struct {
	// KeyVaultId: string, required
	KeyVaultId terra.StringValue `hcl:"key_vault_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("certificate"))
}

func (a AuthenticationAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("client_id"))
}

func (a AuthenticationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AuthenticationAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("principal_id"))
}

func (a AuthenticationAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("secret"))
}

func (a AuthenticationAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("subscription_id"))
}

func (a AuthenticationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type SecretStoreAttributes struct {
	ref terra.Reference
}

func (ss SecretStoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SecretStoreAttributes) InternalWithRef(ref terra.Reference) SecretStoreAttributes {
	return SecretStoreAttributes{ref: ref}
}

func (ss SecretStoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SecretStoreAttributes) KeyVaultId() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("key_vault_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuthenticationState struct {
	Certificate    string `json:"certificate"`
	ClientId       string `json:"client_id"`
	Name           string `json:"name"`
	PrincipalId    string `json:"principal_id"`
	Secret         string `json:"secret"`
	SubscriptionId string `json:"subscription_id"`
	Type           string `json:"type"`
}

type SecretStoreState struct {
	KeyVaultId string `json:"key_vault_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
