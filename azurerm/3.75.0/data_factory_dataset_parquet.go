// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	datafactorydatasetparquet "github.com/golingon/terraproviders/azurerm/3.75.0/datafactorydatasetparquet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataFactoryDatasetParquet creates a new instance of [DataFactoryDatasetParquet].
func NewDataFactoryDatasetParquet(name string, args DataFactoryDatasetParquetArgs) *DataFactoryDatasetParquet {
	return &DataFactoryDatasetParquet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataFactoryDatasetParquet)(nil)

// DataFactoryDatasetParquet represents the Terraform resource azurerm_data_factory_dataset_parquet.
type DataFactoryDatasetParquet struct {
	Name      string
	Args      DataFactoryDatasetParquetArgs
	state     *dataFactoryDatasetParquetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) Type() string {
	return "azurerm_data_factory_dataset_parquet"
}

// LocalName returns the local name for [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) LocalName() string {
	return dfdp.Name
}

// Configuration returns the configuration (args) for [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) Configuration() interface{} {
	return dfdp.Args
}

// DependOn is used for other resources to depend on [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) DependOn() terra.Reference {
	return terra.ReferenceResource(dfdp)
}

// Dependencies returns the list of resources [DataFactoryDatasetParquet] depends_on.
func (dfdp *DataFactoryDatasetParquet) Dependencies() terra.Dependencies {
	return dfdp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) LifecycleManagement() *terra.Lifecycle {
	return dfdp.Lifecycle
}

// Attributes returns the attributes for [DataFactoryDatasetParquet].
func (dfdp *DataFactoryDatasetParquet) Attributes() dataFactoryDatasetParquetAttributes {
	return dataFactoryDatasetParquetAttributes{ref: terra.ReferenceResource(dfdp)}
}

// ImportState imports the given attribute values into [DataFactoryDatasetParquet]'s state.
func (dfdp *DataFactoryDatasetParquet) ImportState(av io.Reader) error {
	dfdp.state = &dataFactoryDatasetParquetState{}
	if err := json.NewDecoder(av).Decode(dfdp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dfdp.Type(), dfdp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataFactoryDatasetParquet] has state.
func (dfdp *DataFactoryDatasetParquet) State() (*dataFactoryDatasetParquetState, bool) {
	return dfdp.state, dfdp.state != nil
}

// StateMust returns the state for [DataFactoryDatasetParquet]. Panics if the state is nil.
func (dfdp *DataFactoryDatasetParquet) StateMust() *dataFactoryDatasetParquetState {
	if dfdp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dfdp.Type(), dfdp.LocalName()))
	}
	return dfdp.state
}

// DataFactoryDatasetParquetArgs contains the configurations for azurerm_data_factory_dataset_parquet.
type DataFactoryDatasetParquetArgs struct {
	// AdditionalProperties: map of string, optional
	AdditionalProperties terra.MapValue[terra.StringValue] `hcl:"additional_properties,attr"`
	// Annotations: list of string, optional
	Annotations terra.ListValue[terra.StringValue] `hcl:"annotations,attr"`
	// CompressionCodec: string, optional
	CompressionCodec terra.StringValue `hcl:"compression_codec,attr"`
	// CompressionLevel: string, optional
	CompressionLevel terra.StringValue `hcl:"compression_level,attr"`
	// DataFactoryId: string, required
	DataFactoryId terra.StringValue `hcl:"data_factory_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Folder: string, optional
	Folder terra.StringValue `hcl:"folder,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkedServiceName: string, required
	LinkedServiceName terra.StringValue `hcl:"linked_service_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// AzureBlobFsLocation: optional
	AzureBlobFsLocation *datafactorydatasetparquet.AzureBlobFsLocation `hcl:"azure_blob_fs_location,block"`
	// AzureBlobStorageLocation: optional
	AzureBlobStorageLocation *datafactorydatasetparquet.AzureBlobStorageLocation `hcl:"azure_blob_storage_location,block"`
	// HttpServerLocation: optional
	HttpServerLocation *datafactorydatasetparquet.HttpServerLocation `hcl:"http_server_location,block"`
	// SchemaColumn: min=0
	SchemaColumn []datafactorydatasetparquet.SchemaColumn `hcl:"schema_column,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datafactorydatasetparquet.Timeouts `hcl:"timeouts,block"`
}
type dataFactoryDatasetParquetAttributes struct {
	ref terra.Reference
}

// AdditionalProperties returns a reference to field additional_properties of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) AdditionalProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfdp.ref.Append("additional_properties"))
}

// Annotations returns a reference to field annotations of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Annotations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dfdp.ref.Append("annotations"))
}

// CompressionCodec returns a reference to field compression_codec of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) CompressionCodec() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("compression_codec"))
}

// CompressionLevel returns a reference to field compression_level of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) CompressionLevel() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("compression_level"))
}

// DataFactoryId returns a reference to field data_factory_id of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) DataFactoryId() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("data_factory_id"))
}

// Description returns a reference to field description of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("description"))
}

// Folder returns a reference to field folder of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Folder() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("folder"))
}

// Id returns a reference to field id of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("id"))
}

// LinkedServiceName returns a reference to field linked_service_name of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) LinkedServiceName() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("linked_service_name"))
}

// Name returns a reference to field name of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dfdp.ref.Append("name"))
}

// Parameters returns a reference to field parameters of azurerm_data_factory_dataset_parquet.
func (dfdp dataFactoryDatasetParquetAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dfdp.ref.Append("parameters"))
}

func (dfdp dataFactoryDatasetParquetAttributes) AzureBlobFsLocation() terra.ListValue[datafactorydatasetparquet.AzureBlobFsLocationAttributes] {
	return terra.ReferenceAsList[datafactorydatasetparquet.AzureBlobFsLocationAttributes](dfdp.ref.Append("azure_blob_fs_location"))
}

func (dfdp dataFactoryDatasetParquetAttributes) AzureBlobStorageLocation() terra.ListValue[datafactorydatasetparquet.AzureBlobStorageLocationAttributes] {
	return terra.ReferenceAsList[datafactorydatasetparquet.AzureBlobStorageLocationAttributes](dfdp.ref.Append("azure_blob_storage_location"))
}

func (dfdp dataFactoryDatasetParquetAttributes) HttpServerLocation() terra.ListValue[datafactorydatasetparquet.HttpServerLocationAttributes] {
	return terra.ReferenceAsList[datafactorydatasetparquet.HttpServerLocationAttributes](dfdp.ref.Append("http_server_location"))
}

func (dfdp dataFactoryDatasetParquetAttributes) SchemaColumn() terra.ListValue[datafactorydatasetparquet.SchemaColumnAttributes] {
	return terra.ReferenceAsList[datafactorydatasetparquet.SchemaColumnAttributes](dfdp.ref.Append("schema_column"))
}

func (dfdp dataFactoryDatasetParquetAttributes) Timeouts() datafactorydatasetparquet.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datafactorydatasetparquet.TimeoutsAttributes](dfdp.ref.Append("timeouts"))
}

type dataFactoryDatasetParquetState struct {
	AdditionalProperties     map[string]string                                         `json:"additional_properties"`
	Annotations              []string                                                  `json:"annotations"`
	CompressionCodec         string                                                    `json:"compression_codec"`
	CompressionLevel         string                                                    `json:"compression_level"`
	DataFactoryId            string                                                    `json:"data_factory_id"`
	Description              string                                                    `json:"description"`
	Folder                   string                                                    `json:"folder"`
	Id                       string                                                    `json:"id"`
	LinkedServiceName        string                                                    `json:"linked_service_name"`
	Name                     string                                                    `json:"name"`
	Parameters               map[string]string                                         `json:"parameters"`
	AzureBlobFsLocation      []datafactorydatasetparquet.AzureBlobFsLocationState      `json:"azure_blob_fs_location"`
	AzureBlobStorageLocation []datafactorydatasetparquet.AzureBlobStorageLocationState `json:"azure_blob_storage_location"`
	HttpServerLocation       []datafactorydatasetparquet.HttpServerLocationState       `json:"http_server_location"`
	SchemaColumn             []datafactorydatasetparquet.SchemaColumnState             `json:"schema_column"`
	Timeouts                 *datafactorydatasetparquet.TimeoutsState                  `json:"timeouts"`
}
