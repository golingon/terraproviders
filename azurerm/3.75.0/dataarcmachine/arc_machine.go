// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataarcmachine

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Agent struct {
	// ExtensionsAllowList: min=0
	ExtensionsAllowList []ExtensionsAllowList `hcl:"extensions_allow_list,block" validate:"min=0"`
	// ExtensionsBlockList: min=0
	ExtensionsBlockList []ExtensionsBlockList `hcl:"extensions_block_list,block" validate:"min=0"`
}

type ExtensionsAllowList struct{}

type ExtensionsBlockList struct{}

type CloudMetadata struct{}

type Identity struct{}

type LocationData struct{}

type OsProfile struct {
	// Linux: min=0
	Linux []Linux `hcl:"linux,block" validate:"min=0"`
	// Windows: min=0
	Windows []Windows `hcl:"windows,block" validate:"min=0"`
}

type Linux struct {
	// LinuxPatch: min=0
	Patch []LinuxPatch `hcl:"patch,block" validate:"min=0"`
}

type LinuxPatch struct{}

type Windows struct {
	// WindowsPatch: min=0
	Patch []WindowsPatch `hcl:"patch,block" validate:"min=0"`
}

type WindowsPatch struct{}

type ServiceStatus struct {
	// ExtensionService: min=0
	ExtensionService []ExtensionService `hcl:"extension_service,block" validate:"min=0"`
	// GuestConfigurationService: min=0
	GuestConfigurationService []GuestConfigurationService `hcl:"guest_configuration_service,block" validate:"min=0"`
}

type ExtensionService struct{}

type GuestConfigurationService struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AgentAttributes struct {
	ref terra.Reference
}

func (a AgentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AgentAttributes) InternalWithRef(ref terra.Reference) AgentAttributes {
	return AgentAttributes{ref: ref}
}

func (a AgentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AgentAttributes) ExtensionsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("extensions_enabled"))
}

func (a AgentAttributes) GuestConfigurationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("guest_configuration_enabled"))
}

func (a AgentAttributes) IncomingConnectionsPorts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("incoming_connections_ports"))
}

func (a AgentAttributes) ProxyBypass() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("proxy_bypass"))
}

func (a AgentAttributes) ProxyUrl() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("proxy_url"))
}

func (a AgentAttributes) ExtensionsAllowList() terra.ListValue[ExtensionsAllowListAttributes] {
	return terra.ReferenceAsList[ExtensionsAllowListAttributes](a.ref.Append("extensions_allow_list"))
}

func (a AgentAttributes) ExtensionsBlockList() terra.ListValue[ExtensionsBlockListAttributes] {
	return terra.ReferenceAsList[ExtensionsBlockListAttributes](a.ref.Append("extensions_block_list"))
}

type ExtensionsAllowListAttributes struct {
	ref terra.Reference
}

func (eal ExtensionsAllowListAttributes) InternalRef() (terra.Reference, error) {
	return eal.ref, nil
}

func (eal ExtensionsAllowListAttributes) InternalWithRef(ref terra.Reference) ExtensionsAllowListAttributes {
	return ExtensionsAllowListAttributes{ref: ref}
}

func (eal ExtensionsAllowListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eal.ref.InternalTokens()
}

func (eal ExtensionsAllowListAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(eal.ref.Append("publisher"))
}

func (eal ExtensionsAllowListAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(eal.ref.Append("type"))
}

type ExtensionsBlockListAttributes struct {
	ref terra.Reference
}

func (ebl ExtensionsBlockListAttributes) InternalRef() (terra.Reference, error) {
	return ebl.ref, nil
}

func (ebl ExtensionsBlockListAttributes) InternalWithRef(ref terra.Reference) ExtensionsBlockListAttributes {
	return ExtensionsBlockListAttributes{ref: ref}
}

func (ebl ExtensionsBlockListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebl.ref.InternalTokens()
}

func (ebl ExtensionsBlockListAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(ebl.ref.Append("publisher"))
}

func (ebl ExtensionsBlockListAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ebl.ref.Append("type"))
}

type CloudMetadataAttributes struct {
	ref terra.Reference
}

func (cm CloudMetadataAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm CloudMetadataAttributes) InternalWithRef(ref terra.Reference) CloudMetadataAttributes {
	return CloudMetadataAttributes{ref: ref}
}

func (cm CloudMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm CloudMetadataAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("provider"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type LocationDataAttributes struct {
	ref terra.Reference
}

func (ld LocationDataAttributes) InternalRef() (terra.Reference, error) {
	return ld.ref, nil
}

func (ld LocationDataAttributes) InternalWithRef(ref terra.Reference) LocationDataAttributes {
	return LocationDataAttributes{ref: ref}
}

func (ld LocationDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ld.ref.InternalTokens()
}

func (ld LocationDataAttributes) City() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("city"))
}

func (ld LocationDataAttributes) CountryOrRegion() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("country_or_region"))
}

func (ld LocationDataAttributes) District() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("district"))
}

func (ld LocationDataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ld.ref.Append("name"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) ComputerName() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("computer_name"))
}

func (op OsProfileAttributes) Linux() terra.ListValue[LinuxAttributes] {
	return terra.ReferenceAsList[LinuxAttributes](op.ref.Append("linux"))
}

func (op OsProfileAttributes) Windows() terra.ListValue[WindowsAttributes] {
	return terra.ReferenceAsList[WindowsAttributes](op.ref.Append("windows"))
}

type LinuxAttributes struct {
	ref terra.Reference
}

func (l LinuxAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LinuxAttributes) InternalWithRef(ref terra.Reference) LinuxAttributes {
	return LinuxAttributes{ref: ref}
}

func (l LinuxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LinuxAttributes) Patch() terra.ListValue[LinuxPatchAttributes] {
	return terra.ReferenceAsList[LinuxPatchAttributes](l.ref.Append("patch"))
}

type LinuxPatchAttributes struct {
	ref terra.Reference
}

func (p LinuxPatchAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p LinuxPatchAttributes) InternalWithRef(ref terra.Reference) LinuxPatchAttributes {
	return LinuxPatchAttributes{ref: ref}
}

func (p LinuxPatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p LinuxPatchAttributes) AssessmentMode() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("assessment_mode"))
}

func (p LinuxPatchAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("patch_mode"))
}

type WindowsAttributes struct {
	ref terra.Reference
}

func (w WindowsAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WindowsAttributes) InternalWithRef(ref terra.Reference) WindowsAttributes {
	return WindowsAttributes{ref: ref}
}

func (w WindowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WindowsAttributes) Patch() terra.ListValue[WindowsPatchAttributes] {
	return terra.ReferenceAsList[WindowsPatchAttributes](w.ref.Append("patch"))
}

type WindowsPatchAttributes struct {
	ref terra.Reference
}

func (p WindowsPatchAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p WindowsPatchAttributes) InternalWithRef(ref terra.Reference) WindowsPatchAttributes {
	return WindowsPatchAttributes{ref: ref}
}

func (p WindowsPatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p WindowsPatchAttributes) AssessmentMode() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("assessment_mode"))
}

func (p WindowsPatchAttributes) PatchMode() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("patch_mode"))
}

type ServiceStatusAttributes struct {
	ref terra.Reference
}

func (ss ServiceStatusAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss ServiceStatusAttributes) InternalWithRef(ref terra.Reference) ServiceStatusAttributes {
	return ServiceStatusAttributes{ref: ref}
}

func (ss ServiceStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss ServiceStatusAttributes) ExtensionService() terra.ListValue[ExtensionServiceAttributes] {
	return terra.ReferenceAsList[ExtensionServiceAttributes](ss.ref.Append("extension_service"))
}

func (ss ServiceStatusAttributes) GuestConfigurationService() terra.ListValue[GuestConfigurationServiceAttributes] {
	return terra.ReferenceAsList[GuestConfigurationServiceAttributes](ss.ref.Append("guest_configuration_service"))
}

type ExtensionServiceAttributes struct {
	ref terra.Reference
}

func (es ExtensionServiceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ExtensionServiceAttributes) InternalWithRef(ref terra.Reference) ExtensionServiceAttributes {
	return ExtensionServiceAttributes{ref: ref}
}

func (es ExtensionServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ExtensionServiceAttributes) StartupType() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("startup_type"))
}

func (es ExtensionServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("status"))
}

type GuestConfigurationServiceAttributes struct {
	ref terra.Reference
}

func (gcs GuestConfigurationServiceAttributes) InternalRef() (terra.Reference, error) {
	return gcs.ref, nil
}

func (gcs GuestConfigurationServiceAttributes) InternalWithRef(ref terra.Reference) GuestConfigurationServiceAttributes {
	return GuestConfigurationServiceAttributes{ref: ref}
}

func (gcs GuestConfigurationServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gcs.ref.InternalTokens()
}

func (gcs GuestConfigurationServiceAttributes) StartupType() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("startup_type"))
}

func (gcs GuestConfigurationServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(gcs.ref.Append("status"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AgentState struct {
	ExtensionsEnabled         bool                       `json:"extensions_enabled"`
	GuestConfigurationEnabled bool                       `json:"guest_configuration_enabled"`
	IncomingConnectionsPorts  []string                   `json:"incoming_connections_ports"`
	ProxyBypass               []string                   `json:"proxy_bypass"`
	ProxyUrl                  string                     `json:"proxy_url"`
	ExtensionsAllowList       []ExtensionsAllowListState `json:"extensions_allow_list"`
	ExtensionsBlockList       []ExtensionsBlockListState `json:"extensions_block_list"`
}

type ExtensionsAllowListState struct {
	Publisher string `json:"publisher"`
	Type      string `json:"type"`
}

type ExtensionsBlockListState struct {
	Publisher string `json:"publisher"`
	Type      string `json:"type"`
}

type CloudMetadataState struct {
	Provider string `json:"provider"`
}

type IdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type LocationDataState struct {
	City            string `json:"city"`
	CountryOrRegion string `json:"country_or_region"`
	District        string `json:"district"`
	Name            string `json:"name"`
}

type OsProfileState struct {
	ComputerName string         `json:"computer_name"`
	Linux        []LinuxState   `json:"linux"`
	Windows      []WindowsState `json:"windows"`
}

type LinuxState struct {
	Patch []LinuxPatchState `json:"patch"`
}

type LinuxPatchState struct {
	AssessmentMode string `json:"assessment_mode"`
	PatchMode      string `json:"patch_mode"`
}

type WindowsState struct {
	Patch []WindowsPatchState `json:"patch"`
}

type WindowsPatchState struct {
	AssessmentMode string `json:"assessment_mode"`
	PatchMode      string `json:"patch_mode"`
}

type ServiceStatusState struct {
	ExtensionService          []ExtensionServiceState          `json:"extension_service"`
	GuestConfigurationService []GuestConfigurationServiceState `json:"guest_configuration_service"`
}

type ExtensionServiceState struct {
	StartupType string `json:"startup_type"`
	Status      string `json:"status"`
}

type GuestConfigurationServiceState struct {
	StartupType string `json:"startup_type"`
	Status      string `json:"status"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
