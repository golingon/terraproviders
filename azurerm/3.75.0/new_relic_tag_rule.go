// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	newrelictagrule "github.com/golingon/terraproviders/azurerm/3.75.0/newrelictagrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNewRelicTagRule creates a new instance of [NewRelicTagRule].
func NewNewRelicTagRule(name string, args NewRelicTagRuleArgs) *NewRelicTagRule {
	return &NewRelicTagRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NewRelicTagRule)(nil)

// NewRelicTagRule represents the Terraform resource azurerm_new_relic_tag_rule.
type NewRelicTagRule struct {
	Name      string
	Args      NewRelicTagRuleArgs
	state     *newRelicTagRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NewRelicTagRule].
func (nrtr *NewRelicTagRule) Type() string {
	return "azurerm_new_relic_tag_rule"
}

// LocalName returns the local name for [NewRelicTagRule].
func (nrtr *NewRelicTagRule) LocalName() string {
	return nrtr.Name
}

// Configuration returns the configuration (args) for [NewRelicTagRule].
func (nrtr *NewRelicTagRule) Configuration() interface{} {
	return nrtr.Args
}

// DependOn is used for other resources to depend on [NewRelicTagRule].
func (nrtr *NewRelicTagRule) DependOn() terra.Reference {
	return terra.ReferenceResource(nrtr)
}

// Dependencies returns the list of resources [NewRelicTagRule] depends_on.
func (nrtr *NewRelicTagRule) Dependencies() terra.Dependencies {
	return nrtr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NewRelicTagRule].
func (nrtr *NewRelicTagRule) LifecycleManagement() *terra.Lifecycle {
	return nrtr.Lifecycle
}

// Attributes returns the attributes for [NewRelicTagRule].
func (nrtr *NewRelicTagRule) Attributes() newRelicTagRuleAttributes {
	return newRelicTagRuleAttributes{ref: terra.ReferenceResource(nrtr)}
}

// ImportState imports the given attribute values into [NewRelicTagRule]'s state.
func (nrtr *NewRelicTagRule) ImportState(av io.Reader) error {
	nrtr.state = &newRelicTagRuleState{}
	if err := json.NewDecoder(av).Decode(nrtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nrtr.Type(), nrtr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NewRelicTagRule] has state.
func (nrtr *NewRelicTagRule) State() (*newRelicTagRuleState, bool) {
	return nrtr.state, nrtr.state != nil
}

// StateMust returns the state for [NewRelicTagRule]. Panics if the state is nil.
func (nrtr *NewRelicTagRule) StateMust() *newRelicTagRuleState {
	if nrtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nrtr.Type(), nrtr.LocalName()))
	}
	return nrtr.state
}

// NewRelicTagRuleArgs contains the configurations for azurerm_new_relic_tag_rule.
type NewRelicTagRuleArgs struct {
	// ActivityLogEnabled: bool, optional
	ActivityLogEnabled terra.BoolValue `hcl:"activity_log_enabled,attr"`
	// AzureActiveDirectoryLogEnabled: bool, optional
	AzureActiveDirectoryLogEnabled terra.BoolValue `hcl:"azure_active_directory_log_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricEnabled: bool, optional
	MetricEnabled terra.BoolValue `hcl:"metric_enabled,attr"`
	// MonitorId: string, required
	MonitorId terra.StringValue `hcl:"monitor_id,attr" validate:"required"`
	// SubscriptionLogEnabled: bool, optional
	SubscriptionLogEnabled terra.BoolValue `hcl:"subscription_log_enabled,attr"`
	// LogTagFilter: min=0
	LogTagFilter []newrelictagrule.LogTagFilter `hcl:"log_tag_filter,block" validate:"min=0"`
	// MetricTagFilter: min=0
	MetricTagFilter []newrelictagrule.MetricTagFilter `hcl:"metric_tag_filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *newrelictagrule.Timeouts `hcl:"timeouts,block"`
}
type newRelicTagRuleAttributes struct {
	ref terra.Reference
}

// ActivityLogEnabled returns a reference to field activity_log_enabled of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) ActivityLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nrtr.ref.Append("activity_log_enabled"))
}

// AzureActiveDirectoryLogEnabled returns a reference to field azure_active_directory_log_enabled of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) AzureActiveDirectoryLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nrtr.ref.Append("azure_active_directory_log_enabled"))
}

// Id returns a reference to field id of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nrtr.ref.Append("id"))
}

// MetricEnabled returns a reference to field metric_enabled of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) MetricEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nrtr.ref.Append("metric_enabled"))
}

// MonitorId returns a reference to field monitor_id of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) MonitorId() terra.StringValue {
	return terra.ReferenceAsString(nrtr.ref.Append("monitor_id"))
}

// SubscriptionLogEnabled returns a reference to field subscription_log_enabled of azurerm_new_relic_tag_rule.
func (nrtr newRelicTagRuleAttributes) SubscriptionLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(nrtr.ref.Append("subscription_log_enabled"))
}

func (nrtr newRelicTagRuleAttributes) LogTagFilter() terra.ListValue[newrelictagrule.LogTagFilterAttributes] {
	return terra.ReferenceAsList[newrelictagrule.LogTagFilterAttributes](nrtr.ref.Append("log_tag_filter"))
}

func (nrtr newRelicTagRuleAttributes) MetricTagFilter() terra.ListValue[newrelictagrule.MetricTagFilterAttributes] {
	return terra.ReferenceAsList[newrelictagrule.MetricTagFilterAttributes](nrtr.ref.Append("metric_tag_filter"))
}

func (nrtr newRelicTagRuleAttributes) Timeouts() newrelictagrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[newrelictagrule.TimeoutsAttributes](nrtr.ref.Append("timeouts"))
}

type newRelicTagRuleState struct {
	ActivityLogEnabled             bool                                   `json:"activity_log_enabled"`
	AzureActiveDirectoryLogEnabled bool                                   `json:"azure_active_directory_log_enabled"`
	Id                             string                                 `json:"id"`
	MetricEnabled                  bool                                   `json:"metric_enabled"`
	MonitorId                      string                                 `json:"monitor_id"`
	SubscriptionLogEnabled         bool                                   `json:"subscription_log_enabled"`
	LogTagFilter                   []newrelictagrule.LogTagFilterState    `json:"log_tag_filter"`
	MetricTagFilter                []newrelictagrule.MetricTagFilterState `json:"metric_tag_filter"`
	Timeouts                       *newrelictagrule.TimeoutsState         `json:"timeouts"`
}
