// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	graphservicesaccount "github.com/golingon/terraproviders/azurerm/3.75.0/graphservicesaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGraphServicesAccount creates a new instance of [GraphServicesAccount].
func NewGraphServicesAccount(name string, args GraphServicesAccountArgs) *GraphServicesAccount {
	return &GraphServicesAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GraphServicesAccount)(nil)

// GraphServicesAccount represents the Terraform resource azurerm_graph_services_account.
type GraphServicesAccount struct {
	Name      string
	Args      GraphServicesAccountArgs
	state     *graphServicesAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GraphServicesAccount].
func (gsa *GraphServicesAccount) Type() string {
	return "azurerm_graph_services_account"
}

// LocalName returns the local name for [GraphServicesAccount].
func (gsa *GraphServicesAccount) LocalName() string {
	return gsa.Name
}

// Configuration returns the configuration (args) for [GraphServicesAccount].
func (gsa *GraphServicesAccount) Configuration() interface{} {
	return gsa.Args
}

// DependOn is used for other resources to depend on [GraphServicesAccount].
func (gsa *GraphServicesAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(gsa)
}

// Dependencies returns the list of resources [GraphServicesAccount] depends_on.
func (gsa *GraphServicesAccount) Dependencies() terra.Dependencies {
	return gsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GraphServicesAccount].
func (gsa *GraphServicesAccount) LifecycleManagement() *terra.Lifecycle {
	return gsa.Lifecycle
}

// Attributes returns the attributes for [GraphServicesAccount].
func (gsa *GraphServicesAccount) Attributes() graphServicesAccountAttributes {
	return graphServicesAccountAttributes{ref: terra.ReferenceResource(gsa)}
}

// ImportState imports the given attribute values into [GraphServicesAccount]'s state.
func (gsa *GraphServicesAccount) ImportState(av io.Reader) error {
	gsa.state = &graphServicesAccountState{}
	if err := json.NewDecoder(av).Decode(gsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsa.Type(), gsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GraphServicesAccount] has state.
func (gsa *GraphServicesAccount) State() (*graphServicesAccountState, bool) {
	return gsa.state, gsa.state != nil
}

// StateMust returns the state for [GraphServicesAccount]. Panics if the state is nil.
func (gsa *GraphServicesAccount) StateMust() *graphServicesAccountState {
	if gsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsa.Type(), gsa.LocalName()))
	}
	return gsa.state
}

// GraphServicesAccountArgs contains the configurations for azurerm_graph_services_account.
type GraphServicesAccountArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *graphservicesaccount.Timeouts `hcl:"timeouts,block"`
}
type graphServicesAccountAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("application_id"))
}

// BillingPlanId returns a reference to field billing_plan_id of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) BillingPlanId() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("billing_plan_id"))
}

// Id returns a reference to field id of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_graph_services_account.
func (gsa graphServicesAccountAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsa.ref.Append("tags"))
}

func (gsa graphServicesAccountAttributes) Timeouts() graphservicesaccount.TimeoutsAttributes {
	return terra.ReferenceAsSingle[graphservicesaccount.TimeoutsAttributes](gsa.ref.Append("timeouts"))
}

type graphServicesAccountState struct {
	ApplicationId     string                              `json:"application_id"`
	BillingPlanId     string                              `json:"billing_plan_id"`
	Id                string                              `json:"id"`
	Name              string                              `json:"name"`
	ResourceGroupName string                              `json:"resource_group_name"`
	Tags              map[string]string                   `json:"tags"`
	Timeouts          *graphservicesaccount.TimeoutsState `json:"timeouts"`
}
