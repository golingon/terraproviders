// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	functionappconnection "github.com/golingon/terraproviders/azurerm/3.75.0/functionappconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewFunctionAppConnection creates a new instance of [FunctionAppConnection].
func NewFunctionAppConnection(name string, args FunctionAppConnectionArgs) *FunctionAppConnection {
	return &FunctionAppConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FunctionAppConnection)(nil)

// FunctionAppConnection represents the Terraform resource azurerm_function_app_connection.
type FunctionAppConnection struct {
	Name      string
	Args      FunctionAppConnectionArgs
	state     *functionAppConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FunctionAppConnection].
func (fac *FunctionAppConnection) Type() string {
	return "azurerm_function_app_connection"
}

// LocalName returns the local name for [FunctionAppConnection].
func (fac *FunctionAppConnection) LocalName() string {
	return fac.Name
}

// Configuration returns the configuration (args) for [FunctionAppConnection].
func (fac *FunctionAppConnection) Configuration() interface{} {
	return fac.Args
}

// DependOn is used for other resources to depend on [FunctionAppConnection].
func (fac *FunctionAppConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(fac)
}

// Dependencies returns the list of resources [FunctionAppConnection] depends_on.
func (fac *FunctionAppConnection) Dependencies() terra.Dependencies {
	return fac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FunctionAppConnection].
func (fac *FunctionAppConnection) LifecycleManagement() *terra.Lifecycle {
	return fac.Lifecycle
}

// Attributes returns the attributes for [FunctionAppConnection].
func (fac *FunctionAppConnection) Attributes() functionAppConnectionAttributes {
	return functionAppConnectionAttributes{ref: terra.ReferenceResource(fac)}
}

// ImportState imports the given attribute values into [FunctionAppConnection]'s state.
func (fac *FunctionAppConnection) ImportState(av io.Reader) error {
	fac.state = &functionAppConnectionState{}
	if err := json.NewDecoder(av).Decode(fac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fac.Type(), fac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FunctionAppConnection] has state.
func (fac *FunctionAppConnection) State() (*functionAppConnectionState, bool) {
	return fac.state, fac.state != nil
}

// StateMust returns the state for [FunctionAppConnection]. Panics if the state is nil.
func (fac *FunctionAppConnection) StateMust() *functionAppConnectionState {
	if fac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fac.Type(), fac.LocalName()))
	}
	return fac.state
}

// FunctionAppConnectionArgs contains the configurations for azurerm_function_app_connection.
type FunctionAppConnectionArgs struct {
	// ClientType: string, optional
	ClientType terra.StringValue `hcl:"client_type,attr"`
	// FunctionAppId: string, required
	FunctionAppId terra.StringValue `hcl:"function_app_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TargetResourceId: string, required
	TargetResourceId terra.StringValue `hcl:"target_resource_id,attr" validate:"required"`
	// VnetSolution: string, optional
	VnetSolution terra.StringValue `hcl:"vnet_solution,attr"`
	// Authentication: required
	Authentication *functionappconnection.Authentication `hcl:"authentication,block" validate:"required"`
	// SecretStore: optional
	SecretStore *functionappconnection.SecretStore `hcl:"secret_store,block"`
	// Timeouts: optional
	Timeouts *functionappconnection.Timeouts `hcl:"timeouts,block"`
}
type functionAppConnectionAttributes struct {
	ref terra.Reference
}

// ClientType returns a reference to field client_type of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) ClientType() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("client_type"))
}

// FunctionAppId returns a reference to field function_app_id of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) FunctionAppId() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("function_app_id"))
}

// Id returns a reference to field id of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("name"))
}

// TargetResourceId returns a reference to field target_resource_id of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) TargetResourceId() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("target_resource_id"))
}

// VnetSolution returns a reference to field vnet_solution of azurerm_function_app_connection.
func (fac functionAppConnectionAttributes) VnetSolution() terra.StringValue {
	return terra.ReferenceAsString(fac.ref.Append("vnet_solution"))
}

func (fac functionAppConnectionAttributes) Authentication() terra.ListValue[functionappconnection.AuthenticationAttributes] {
	return terra.ReferenceAsList[functionappconnection.AuthenticationAttributes](fac.ref.Append("authentication"))
}

func (fac functionAppConnectionAttributes) SecretStore() terra.ListValue[functionappconnection.SecretStoreAttributes] {
	return terra.ReferenceAsList[functionappconnection.SecretStoreAttributes](fac.ref.Append("secret_store"))
}

func (fac functionAppConnectionAttributes) Timeouts() functionappconnection.TimeoutsAttributes {
	return terra.ReferenceAsSingle[functionappconnection.TimeoutsAttributes](fac.ref.Append("timeouts"))
}

type functionAppConnectionState struct {
	ClientType       string                                      `json:"client_type"`
	FunctionAppId    string                                      `json:"function_app_id"`
	Id               string                                      `json:"id"`
	Name             string                                      `json:"name"`
	TargetResourceId string                                      `json:"target_resource_id"`
	VnetSolution     string                                      `json:"vnet_solution"`
	Authentication   []functionappconnection.AuthenticationState `json:"authentication"`
	SecretStore      []functionappconnection.SecretStoreState    `json:"secret_store"`
	Timeouts         *functionappconnection.TimeoutsState        `json:"timeouts"`
}
