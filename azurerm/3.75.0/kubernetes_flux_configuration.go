// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	kubernetesfluxconfiguration "github.com/golingon/terraproviders/azurerm/3.75.0/kubernetesfluxconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewKubernetesFluxConfiguration creates a new instance of [KubernetesFluxConfiguration].
func NewKubernetesFluxConfiguration(name string, args KubernetesFluxConfigurationArgs) *KubernetesFluxConfiguration {
	return &KubernetesFluxConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KubernetesFluxConfiguration)(nil)

// KubernetesFluxConfiguration represents the Terraform resource azurerm_kubernetes_flux_configuration.
type KubernetesFluxConfiguration struct {
	Name      string
	Args      KubernetesFluxConfigurationArgs
	state     *kubernetesFluxConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) Type() string {
	return "azurerm_kubernetes_flux_configuration"
}

// LocalName returns the local name for [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) LocalName() string {
	return kfc.Name
}

// Configuration returns the configuration (args) for [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) Configuration() interface{} {
	return kfc.Args
}

// DependOn is used for other resources to depend on [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(kfc)
}

// Dependencies returns the list of resources [KubernetesFluxConfiguration] depends_on.
func (kfc *KubernetesFluxConfiguration) Dependencies() terra.Dependencies {
	return kfc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) LifecycleManagement() *terra.Lifecycle {
	return kfc.Lifecycle
}

// Attributes returns the attributes for [KubernetesFluxConfiguration].
func (kfc *KubernetesFluxConfiguration) Attributes() kubernetesFluxConfigurationAttributes {
	return kubernetesFluxConfigurationAttributes{ref: terra.ReferenceResource(kfc)}
}

// ImportState imports the given attribute values into [KubernetesFluxConfiguration]'s state.
func (kfc *KubernetesFluxConfiguration) ImportState(av io.Reader) error {
	kfc.state = &kubernetesFluxConfigurationState{}
	if err := json.NewDecoder(av).Decode(kfc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kfc.Type(), kfc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KubernetesFluxConfiguration] has state.
func (kfc *KubernetesFluxConfiguration) State() (*kubernetesFluxConfigurationState, bool) {
	return kfc.state, kfc.state != nil
}

// StateMust returns the state for [KubernetesFluxConfiguration]. Panics if the state is nil.
func (kfc *KubernetesFluxConfiguration) StateMust() *kubernetesFluxConfigurationState {
	if kfc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kfc.Type(), kfc.LocalName()))
	}
	return kfc.state
}

// KubernetesFluxConfigurationArgs contains the configurations for azurerm_kubernetes_flux_configuration.
type KubernetesFluxConfigurationArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ContinuousReconciliationEnabled: bool, optional
	ContinuousReconciliationEnabled terra.BoolValue `hcl:"continuous_reconciliation_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Scope: string, optional
	Scope terra.StringValue `hcl:"scope,attr"`
	// BlobStorage: optional
	BlobStorage *kubernetesfluxconfiguration.BlobStorage `hcl:"blob_storage,block"`
	// Bucket: optional
	Bucket *kubernetesfluxconfiguration.Bucket `hcl:"bucket,block"`
	// GitRepository: optional
	GitRepository *kubernetesfluxconfiguration.GitRepository `hcl:"git_repository,block"`
	// Kustomizations: min=1
	Kustomizations []kubernetesfluxconfiguration.Kustomizations `hcl:"kustomizations,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *kubernetesfluxconfiguration.Timeouts `hcl:"timeouts,block"`
}
type kubernetesFluxConfigurationAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("cluster_id"))
}

// ContinuousReconciliationEnabled returns a reference to field continuous_reconciliation_enabled of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) ContinuousReconciliationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(kfc.ref.Append("continuous_reconciliation_enabled"))
}

// Id returns a reference to field id of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("name"))
}

// Namespace returns a reference to field namespace of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("namespace"))
}

// Scope returns a reference to field scope of azurerm_kubernetes_flux_configuration.
func (kfc kubernetesFluxConfigurationAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("scope"))
}

func (kfc kubernetesFluxConfigurationAttributes) BlobStorage() terra.ListValue[kubernetesfluxconfiguration.BlobStorageAttributes] {
	return terra.ReferenceAsList[kubernetesfluxconfiguration.BlobStorageAttributes](kfc.ref.Append("blob_storage"))
}

func (kfc kubernetesFluxConfigurationAttributes) Bucket() terra.ListValue[kubernetesfluxconfiguration.BucketAttributes] {
	return terra.ReferenceAsList[kubernetesfluxconfiguration.BucketAttributes](kfc.ref.Append("bucket"))
}

func (kfc kubernetesFluxConfigurationAttributes) GitRepository() terra.ListValue[kubernetesfluxconfiguration.GitRepositoryAttributes] {
	return terra.ReferenceAsList[kubernetesfluxconfiguration.GitRepositoryAttributes](kfc.ref.Append("git_repository"))
}

func (kfc kubernetesFluxConfigurationAttributes) Kustomizations() terra.SetValue[kubernetesfluxconfiguration.KustomizationsAttributes] {
	return terra.ReferenceAsSet[kubernetesfluxconfiguration.KustomizationsAttributes](kfc.ref.Append("kustomizations"))
}

func (kfc kubernetesFluxConfigurationAttributes) Timeouts() kubernetesfluxconfiguration.TimeoutsAttributes {
	return terra.ReferenceAsSingle[kubernetesfluxconfiguration.TimeoutsAttributes](kfc.ref.Append("timeouts"))
}

type kubernetesFluxConfigurationState struct {
	ClusterId                       string                                            `json:"cluster_id"`
	ContinuousReconciliationEnabled bool                                              `json:"continuous_reconciliation_enabled"`
	Id                              string                                            `json:"id"`
	Name                            string                                            `json:"name"`
	Namespace                       string                                            `json:"namespace"`
	Scope                           string                                            `json:"scope"`
	BlobStorage                     []kubernetesfluxconfiguration.BlobStorageState    `json:"blob_storage"`
	Bucket                          []kubernetesfluxconfiguration.BucketState         `json:"bucket"`
	GitRepository                   []kubernetesfluxconfiguration.GitRepositoryState  `json:"git_repository"`
	Kustomizations                  []kubernetesfluxconfiguration.KustomizationsState `json:"kustomizations"`
	Timeouts                        *kubernetesfluxconfiguration.TimeoutsState        `json:"timeouts"`
}
