// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitycenterstoragedefender "github.com/golingon/terraproviders/azurerm/3.98.0/securitycenterstoragedefender"
	"io"
)

// NewSecurityCenterStorageDefender creates a new instance of [SecurityCenterStorageDefender].
func NewSecurityCenterStorageDefender(name string, args SecurityCenterStorageDefenderArgs) *SecurityCenterStorageDefender {
	return &SecurityCenterStorageDefender{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterStorageDefender)(nil)

// SecurityCenterStorageDefender represents the Terraform resource azurerm_security_center_storage_defender.
type SecurityCenterStorageDefender struct {
	Name      string
	Args      SecurityCenterStorageDefenderArgs
	state     *securityCenterStorageDefenderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) Type() string {
	return "azurerm_security_center_storage_defender"
}

// LocalName returns the local name for [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) LocalName() string {
	return scsd.Name
}

// Configuration returns the configuration (args) for [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) Configuration() interface{} {
	return scsd.Args
}

// DependOn is used for other resources to depend on [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) DependOn() terra.Reference {
	return terra.ReferenceResource(scsd)
}

// Dependencies returns the list of resources [SecurityCenterStorageDefender] depends_on.
func (scsd *SecurityCenterStorageDefender) Dependencies() terra.Dependencies {
	return scsd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) LifecycleManagement() *terra.Lifecycle {
	return scsd.Lifecycle
}

// Attributes returns the attributes for [SecurityCenterStorageDefender].
func (scsd *SecurityCenterStorageDefender) Attributes() securityCenterStorageDefenderAttributes {
	return securityCenterStorageDefenderAttributes{ref: terra.ReferenceResource(scsd)}
}

// ImportState imports the given attribute values into [SecurityCenterStorageDefender]'s state.
func (scsd *SecurityCenterStorageDefender) ImportState(av io.Reader) error {
	scsd.state = &securityCenterStorageDefenderState{}
	if err := json.NewDecoder(av).Decode(scsd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scsd.Type(), scsd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecurityCenterStorageDefender] has state.
func (scsd *SecurityCenterStorageDefender) State() (*securityCenterStorageDefenderState, bool) {
	return scsd.state, scsd.state != nil
}

// StateMust returns the state for [SecurityCenterStorageDefender]. Panics if the state is nil.
func (scsd *SecurityCenterStorageDefender) StateMust() *securityCenterStorageDefenderState {
	if scsd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scsd.Type(), scsd.LocalName()))
	}
	return scsd.state
}

// SecurityCenterStorageDefenderArgs contains the configurations for azurerm_security_center_storage_defender.
type SecurityCenterStorageDefenderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MalwareScanningOnUploadCapGbPerMonth: number, optional
	MalwareScanningOnUploadCapGbPerMonth terra.NumberValue `hcl:"malware_scanning_on_upload_cap_gb_per_month,attr"`
	// MalwareScanningOnUploadEnabled: bool, optional
	MalwareScanningOnUploadEnabled terra.BoolValue `hcl:"malware_scanning_on_upload_enabled,attr"`
	// OverrideSubscriptionSettingsEnabled: bool, optional
	OverrideSubscriptionSettingsEnabled terra.BoolValue `hcl:"override_subscription_settings_enabled,attr"`
	// SensitiveDataDiscoveryEnabled: bool, optional
	SensitiveDataDiscoveryEnabled terra.BoolValue `hcl:"sensitive_data_discovery_enabled,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycenterstoragedefender.Timeouts `hcl:"timeouts,block"`
}
type securityCenterStorageDefenderAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scsd.ref.Append("id"))
}

// MalwareScanningOnUploadCapGbPerMonth returns a reference to field malware_scanning_on_upload_cap_gb_per_month of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) MalwareScanningOnUploadCapGbPerMonth() terra.NumberValue {
	return terra.ReferenceAsNumber(scsd.ref.Append("malware_scanning_on_upload_cap_gb_per_month"))
}

// MalwareScanningOnUploadEnabled returns a reference to field malware_scanning_on_upload_enabled of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) MalwareScanningOnUploadEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(scsd.ref.Append("malware_scanning_on_upload_enabled"))
}

// OverrideSubscriptionSettingsEnabled returns a reference to field override_subscription_settings_enabled of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) OverrideSubscriptionSettingsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(scsd.ref.Append("override_subscription_settings_enabled"))
}

// SensitiveDataDiscoveryEnabled returns a reference to field sensitive_data_discovery_enabled of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) SensitiveDataDiscoveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(scsd.ref.Append("sensitive_data_discovery_enabled"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_security_center_storage_defender.
func (scsd securityCenterStorageDefenderAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(scsd.ref.Append("storage_account_id"))
}

func (scsd securityCenterStorageDefenderAttributes) Timeouts() securitycenterstoragedefender.TimeoutsAttributes {
	return terra.ReferenceAsSingle[securitycenterstoragedefender.TimeoutsAttributes](scsd.ref.Append("timeouts"))
}

type securityCenterStorageDefenderState struct {
	Id                                   string                                       `json:"id"`
	MalwareScanningOnUploadCapGbPerMonth float64                                      `json:"malware_scanning_on_upload_cap_gb_per_month"`
	MalwareScanningOnUploadEnabled       bool                                         `json:"malware_scanning_on_upload_enabled"`
	OverrideSubscriptionSettingsEnabled  bool                                         `json:"override_subscription_settings_enabled"`
	SensitiveDataDiscoveryEnabled        bool                                         `json:"sensitive_data_discovery_enabled"`
	StorageAccountId                     string                                       `json:"storage_account_id"`
	Timeouts                             *securitycenterstoragedefender.TimeoutsState `json:"timeouts"`
}
