// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	elasticsanvolume "github.com/golingon/terraproviders/azurerm/3.98.0/elasticsanvolume"
	"io"
)

// NewElasticSanVolume creates a new instance of [ElasticSanVolume].
func NewElasticSanVolume(name string, args ElasticSanVolumeArgs) *ElasticSanVolume {
	return &ElasticSanVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticSanVolume)(nil)

// ElasticSanVolume represents the Terraform resource azurerm_elastic_san_volume.
type ElasticSanVolume struct {
	Name      string
	Args      ElasticSanVolumeArgs
	state     *elasticSanVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ElasticSanVolume].
func (esv *ElasticSanVolume) Type() string {
	return "azurerm_elastic_san_volume"
}

// LocalName returns the local name for [ElasticSanVolume].
func (esv *ElasticSanVolume) LocalName() string {
	return esv.Name
}

// Configuration returns the configuration (args) for [ElasticSanVolume].
func (esv *ElasticSanVolume) Configuration() interface{} {
	return esv.Args
}

// DependOn is used for other resources to depend on [ElasticSanVolume].
func (esv *ElasticSanVolume) DependOn() terra.Reference {
	return terra.ReferenceResource(esv)
}

// Dependencies returns the list of resources [ElasticSanVolume] depends_on.
func (esv *ElasticSanVolume) Dependencies() terra.Dependencies {
	return esv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ElasticSanVolume].
func (esv *ElasticSanVolume) LifecycleManagement() *terra.Lifecycle {
	return esv.Lifecycle
}

// Attributes returns the attributes for [ElasticSanVolume].
func (esv *ElasticSanVolume) Attributes() elasticSanVolumeAttributes {
	return elasticSanVolumeAttributes{ref: terra.ReferenceResource(esv)}
}

// ImportState imports the given attribute values into [ElasticSanVolume]'s state.
func (esv *ElasticSanVolume) ImportState(av io.Reader) error {
	esv.state = &elasticSanVolumeState{}
	if err := json.NewDecoder(av).Decode(esv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esv.Type(), esv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ElasticSanVolume] has state.
func (esv *ElasticSanVolume) State() (*elasticSanVolumeState, bool) {
	return esv.state, esv.state != nil
}

// StateMust returns the state for [ElasticSanVolume]. Panics if the state is nil.
func (esv *ElasticSanVolume) StateMust() *elasticSanVolumeState {
	if esv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esv.Type(), esv.LocalName()))
	}
	return esv.state
}

// ElasticSanVolumeArgs contains the configurations for azurerm_elastic_san_volume.
type ElasticSanVolumeArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SizeInGib: number, required
	SizeInGib terra.NumberValue `hcl:"size_in_gib,attr" validate:"required"`
	// VolumeGroupId: string, required
	VolumeGroupId terra.StringValue `hcl:"volume_group_id,attr" validate:"required"`
	// CreateSource: optional
	CreateSource *elasticsanvolume.CreateSource `hcl:"create_source,block"`
	// Timeouts: optional
	Timeouts *elasticsanvolume.Timeouts `hcl:"timeouts,block"`
}
type elasticSanVolumeAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("name"))
}

// SizeInGib returns a reference to field size_in_gib of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(esv.ref.Append("size_in_gib"))
}

// TargetIqn returns a reference to field target_iqn of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) TargetIqn() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("target_iqn"))
}

// TargetPortalHostname returns a reference to field target_portal_hostname of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) TargetPortalHostname() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("target_portal_hostname"))
}

// TargetPortalPort returns a reference to field target_portal_port of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) TargetPortalPort() terra.NumberValue {
	return terra.ReferenceAsNumber(esv.ref.Append("target_portal_port"))
}

// VolumeGroupId returns a reference to field volume_group_id of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) VolumeGroupId() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("volume_group_id"))
}

// VolumeId returns a reference to field volume_id of azurerm_elastic_san_volume.
func (esv elasticSanVolumeAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(esv.ref.Append("volume_id"))
}

func (esv elasticSanVolumeAttributes) CreateSource() terra.ListValue[elasticsanvolume.CreateSourceAttributes] {
	return terra.ReferenceAsList[elasticsanvolume.CreateSourceAttributes](esv.ref.Append("create_source"))
}

func (esv elasticSanVolumeAttributes) Timeouts() elasticsanvolume.TimeoutsAttributes {
	return terra.ReferenceAsSingle[elasticsanvolume.TimeoutsAttributes](esv.ref.Append("timeouts"))
}

type elasticSanVolumeState struct {
	Id                   string                               `json:"id"`
	Name                 string                               `json:"name"`
	SizeInGib            float64                              `json:"size_in_gib"`
	TargetIqn            string                               `json:"target_iqn"`
	TargetPortalHostname string                               `json:"target_portal_hostname"`
	TargetPortalPort     float64                              `json:"target_portal_port"`
	VolumeGroupId        string                               `json:"volume_group_id"`
	VolumeId             string                               `json:"volume_id"`
	CreateSource         []elasticsanvolume.CreateSourceState `json:"create_source"`
	Timeouts             *elasticsanvolume.TimeoutsState      `json:"timeouts"`
}
