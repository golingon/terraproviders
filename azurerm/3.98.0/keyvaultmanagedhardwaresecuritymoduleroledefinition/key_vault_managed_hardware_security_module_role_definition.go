// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package keyvaultmanagedhardwaresecuritymoduleroledefinition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Permission struct {
	// Actions: list of string, optional
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr"`
	// DataActions: set of string, optional
	DataActions terra.SetValue[terra.StringValue] `hcl:"data_actions,attr"`
	// NotActions: list of string, optional
	NotActions terra.ListValue[terra.StringValue] `hcl:"not_actions,attr"`
	// NotDataActions: set of string, optional
	NotDataActions terra.SetValue[terra.StringValue] `hcl:"not_data_actions,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PermissionAttributes struct {
	ref terra.Reference
}

func (p PermissionAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionAttributes) InternalWithRef(ref terra.Reference) PermissionAttributes {
	return PermissionAttributes{ref: ref}
}

func (p PermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionAttributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionAttributes) DataActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("data_actions"))
}

func (p PermissionAttributes) NotActions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("not_actions"))
}

func (p PermissionAttributes) NotDataActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("not_data_actions"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PermissionState struct {
	Actions        []string `json:"actions"`
	DataActions    []string `json:"data_actions"`
	NotActions     []string `json:"not_actions"`
	NotDataActions []string `json:"not_data_actions"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
