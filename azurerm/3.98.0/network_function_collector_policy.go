// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	networkfunctioncollectorpolicy "github.com/golingon/terraproviders/azurerm/3.98.0/networkfunctioncollectorpolicy"
	"io"
)

// NewNetworkFunctionCollectorPolicy creates a new instance of [NetworkFunctionCollectorPolicy].
func NewNetworkFunctionCollectorPolicy(name string, args NetworkFunctionCollectorPolicyArgs) *NetworkFunctionCollectorPolicy {
	return &NetworkFunctionCollectorPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkFunctionCollectorPolicy)(nil)

// NetworkFunctionCollectorPolicy represents the Terraform resource azurerm_network_function_collector_policy.
type NetworkFunctionCollectorPolicy struct {
	Name      string
	Args      NetworkFunctionCollectorPolicyArgs
	state     *networkFunctionCollectorPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) Type() string {
	return "azurerm_network_function_collector_policy"
}

// LocalName returns the local name for [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) LocalName() string {
	return nfcp.Name
}

// Configuration returns the configuration (args) for [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) Configuration() interface{} {
	return nfcp.Args
}

// DependOn is used for other resources to depend on [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nfcp)
}

// Dependencies returns the list of resources [NetworkFunctionCollectorPolicy] depends_on.
func (nfcp *NetworkFunctionCollectorPolicy) Dependencies() terra.Dependencies {
	return nfcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) LifecycleManagement() *terra.Lifecycle {
	return nfcp.Lifecycle
}

// Attributes returns the attributes for [NetworkFunctionCollectorPolicy].
func (nfcp *NetworkFunctionCollectorPolicy) Attributes() networkFunctionCollectorPolicyAttributes {
	return networkFunctionCollectorPolicyAttributes{ref: terra.ReferenceResource(nfcp)}
}

// ImportState imports the given attribute values into [NetworkFunctionCollectorPolicy]'s state.
func (nfcp *NetworkFunctionCollectorPolicy) ImportState(av io.Reader) error {
	nfcp.state = &networkFunctionCollectorPolicyState{}
	if err := json.NewDecoder(av).Decode(nfcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nfcp.Type(), nfcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkFunctionCollectorPolicy] has state.
func (nfcp *NetworkFunctionCollectorPolicy) State() (*networkFunctionCollectorPolicyState, bool) {
	return nfcp.state, nfcp.state != nil
}

// StateMust returns the state for [NetworkFunctionCollectorPolicy]. Panics if the state is nil.
func (nfcp *NetworkFunctionCollectorPolicy) StateMust() *networkFunctionCollectorPolicyState {
	if nfcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nfcp.Type(), nfcp.LocalName()))
	}
	return nfcp.state
}

// NetworkFunctionCollectorPolicyArgs contains the configurations for azurerm_network_function_collector_policy.
type NetworkFunctionCollectorPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TrafficCollectorId: string, required
	TrafficCollectorId terra.StringValue `hcl:"traffic_collector_id,attr" validate:"required"`
	// IpfxEmission: required
	IpfxEmission *networkfunctioncollectorpolicy.IpfxEmission `hcl:"ipfx_emission,block" validate:"required"`
	// IpfxIngestion: required
	IpfxIngestion *networkfunctioncollectorpolicy.IpfxIngestion `hcl:"ipfx_ingestion,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkfunctioncollectorpolicy.Timeouts `hcl:"timeouts,block"`
}
type networkFunctionCollectorPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_network_function_collector_policy.
func (nfcp networkFunctionCollectorPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nfcp.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_network_function_collector_policy.
func (nfcp networkFunctionCollectorPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nfcp.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_network_function_collector_policy.
func (nfcp networkFunctionCollectorPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nfcp.ref.Append("name"))
}

// Tags returns a reference to field tags of azurerm_network_function_collector_policy.
func (nfcp networkFunctionCollectorPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nfcp.ref.Append("tags"))
}

// TrafficCollectorId returns a reference to field traffic_collector_id of azurerm_network_function_collector_policy.
func (nfcp networkFunctionCollectorPolicyAttributes) TrafficCollectorId() terra.StringValue {
	return terra.ReferenceAsString(nfcp.ref.Append("traffic_collector_id"))
}

func (nfcp networkFunctionCollectorPolicyAttributes) IpfxEmission() terra.ListValue[networkfunctioncollectorpolicy.IpfxEmissionAttributes] {
	return terra.ReferenceAsList[networkfunctioncollectorpolicy.IpfxEmissionAttributes](nfcp.ref.Append("ipfx_emission"))
}

func (nfcp networkFunctionCollectorPolicyAttributes) IpfxIngestion() terra.ListValue[networkfunctioncollectorpolicy.IpfxIngestionAttributes] {
	return terra.ReferenceAsList[networkfunctioncollectorpolicy.IpfxIngestionAttributes](nfcp.ref.Append("ipfx_ingestion"))
}

func (nfcp networkFunctionCollectorPolicyAttributes) Timeouts() networkfunctioncollectorpolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkfunctioncollectorpolicy.TimeoutsAttributes](nfcp.ref.Append("timeouts"))
}

type networkFunctionCollectorPolicyState struct {
	Id                 string                                              `json:"id"`
	Location           string                                              `json:"location"`
	Name               string                                              `json:"name"`
	Tags               map[string]string                                   `json:"tags"`
	TrafficCollectorId string                                              `json:"traffic_collector_id"`
	IpfxEmission       []networkfunctioncollectorpolicy.IpfxEmissionState  `json:"ipfx_emission"`
	IpfxIngestion      []networkfunctioncollectorpolicy.IpfxIngestionState `json:"ipfx_ingestion"`
	Timeouts           *networkfunctioncollectorpolicy.TimeoutsState       `json:"timeouts"`
}
