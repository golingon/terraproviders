// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package expressrouteport

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Link1 struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// MacsecCakKeyvaultSecretId: string, optional
	MacsecCakKeyvaultSecretId terra.StringValue `hcl:"macsec_cak_keyvault_secret_id,attr"`
	// MacsecCipher: string, optional
	MacsecCipher terra.StringValue `hcl:"macsec_cipher,attr"`
	// MacsecCknKeyvaultSecretId: string, optional
	MacsecCknKeyvaultSecretId terra.StringValue `hcl:"macsec_ckn_keyvault_secret_id,attr"`
	// MacsecSciEnabled: bool, optional
	MacsecSciEnabled terra.BoolValue `hcl:"macsec_sci_enabled,attr"`
}

type Link2 struct {
	// AdminEnabled: bool, optional
	AdminEnabled terra.BoolValue `hcl:"admin_enabled,attr"`
	// MacsecCakKeyvaultSecretId: string, optional
	MacsecCakKeyvaultSecretId terra.StringValue `hcl:"macsec_cak_keyvault_secret_id,attr"`
	// MacsecCipher: string, optional
	MacsecCipher terra.StringValue `hcl:"macsec_cipher,attr"`
	// MacsecCknKeyvaultSecretId: string, optional
	MacsecCknKeyvaultSecretId terra.StringValue `hcl:"macsec_ckn_keyvault_secret_id,attr"`
	// MacsecSciEnabled: bool, optional
	MacsecSciEnabled terra.BoolValue `hcl:"macsec_sci_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type Link1Attributes struct {
	ref terra.Reference
}

func (l Link1Attributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l Link1Attributes) InternalWithRef(ref terra.Reference) Link1Attributes {
	return Link1Attributes{ref: ref}
}

func (l Link1Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l Link1Attributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("admin_enabled"))
}

func (l Link1Attributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("connector_type"))
}

func (l Link1Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("id"))
}

func (l Link1Attributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("interface_name"))
}

func (l Link1Attributes) MacsecCakKeyvaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_cak_keyvault_secret_id"))
}

func (l Link1Attributes) MacsecCipher() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_cipher"))
}

func (l Link1Attributes) MacsecCknKeyvaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_ckn_keyvault_secret_id"))
}

func (l Link1Attributes) MacsecSciEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("macsec_sci_enabled"))
}

func (l Link1Attributes) PatchPanelId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("patch_panel_id"))
}

func (l Link1Attributes) RackId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("rack_id"))
}

func (l Link1Attributes) RouterName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("router_name"))
}

type Link2Attributes struct {
	ref terra.Reference
}

func (l Link2Attributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l Link2Attributes) InternalWithRef(ref terra.Reference) Link2Attributes {
	return Link2Attributes{ref: ref}
}

func (l Link2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l Link2Attributes) AdminEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("admin_enabled"))
}

func (l Link2Attributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("connector_type"))
}

func (l Link2Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("id"))
}

func (l Link2Attributes) InterfaceName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("interface_name"))
}

func (l Link2Attributes) MacsecCakKeyvaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_cak_keyvault_secret_id"))
}

func (l Link2Attributes) MacsecCipher() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_cipher"))
}

func (l Link2Attributes) MacsecCknKeyvaultSecretId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("macsec_ckn_keyvault_secret_id"))
}

func (l Link2Attributes) MacsecSciEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("macsec_sci_enabled"))
}

func (l Link2Attributes) PatchPanelId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("patch_panel_id"))
}

func (l Link2Attributes) RackId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("rack_id"))
}

func (l Link2Attributes) RouterName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("router_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type Link1State struct {
	AdminEnabled              bool   `json:"admin_enabled"`
	ConnectorType             string `json:"connector_type"`
	Id                        string `json:"id"`
	InterfaceName             string `json:"interface_name"`
	MacsecCakKeyvaultSecretId string `json:"macsec_cak_keyvault_secret_id"`
	MacsecCipher              string `json:"macsec_cipher"`
	MacsecCknKeyvaultSecretId string `json:"macsec_ckn_keyvault_secret_id"`
	MacsecSciEnabled          bool   `json:"macsec_sci_enabled"`
	PatchPanelId              string `json:"patch_panel_id"`
	RackId                    string `json:"rack_id"`
	RouterName                string `json:"router_name"`
}

type Link2State struct {
	AdminEnabled              bool   `json:"admin_enabled"`
	ConnectorType             string `json:"connector_type"`
	Id                        string `json:"id"`
	InterfaceName             string `json:"interface_name"`
	MacsecCakKeyvaultSecretId string `json:"macsec_cak_keyvault_secret_id"`
	MacsecCipher              string `json:"macsec_cipher"`
	MacsecCknKeyvaultSecretId string `json:"macsec_ckn_keyvault_secret_id"`
	MacsecSciEnabled          bool   `json:"macsec_sci_enabled"`
	PatchPanelId              string `json:"patch_panel_id"`
	RackId                    string `json:"rack_id"`
	RouterName                string `json:"router_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
