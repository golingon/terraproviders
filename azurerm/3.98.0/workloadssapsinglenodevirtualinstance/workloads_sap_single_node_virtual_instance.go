// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package workloadssapsinglenodevirtualinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SingleServerConfiguration struct {
	// AppResourceGroupName: string, required
	AppResourceGroupName terra.StringValue `hcl:"app_resource_group_name,attr" validate:"required"`
	// DatabaseType: string, optional
	DatabaseType terra.StringValue `hcl:"database_type,attr"`
	// SecondaryIpEnabled: bool, optional
	SecondaryIpEnabled terra.BoolValue `hcl:"secondary_ip_enabled,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// DiskVolumeConfiguration: min=0
	DiskVolumeConfiguration []DiskVolumeConfiguration `hcl:"disk_volume_configuration,block" validate:"min=0"`
	// VirtualMachineConfiguration: required
	VirtualMachineConfiguration *VirtualMachineConfiguration `hcl:"virtual_machine_configuration,block" validate:"required"`
	// VirtualMachineResourceNames: optional
	VirtualMachineResourceNames *VirtualMachineResourceNames `hcl:"virtual_machine_resource_names,block"`
}

type DiskVolumeConfiguration struct {
	// NumberOfDisks: number, required
	NumberOfDisks terra.NumberValue `hcl:"number_of_disks,attr" validate:"required"`
	// SizeInGb: number, required
	SizeInGb terra.NumberValue `hcl:"size_in_gb,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type VirtualMachineConfiguration struct {
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// Image: required
	Image *Image `hcl:"image,block" validate:"required"`
	// OsProfile: required
	OsProfile *OsProfile `hcl:"os_profile,block" validate:"required"`
}

type Image struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type OsProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshPrivateKey: string, required
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr" validate:"required"`
	// SshPublicKey: string, required
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr" validate:"required"`
}

type VirtualMachineResourceNames struct {
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// NetworkInterfaceNames: list of string, optional
	NetworkInterfaceNames terra.ListValue[terra.StringValue] `hcl:"network_interface_names,attr"`
	// OsDiskName: string, optional
	OsDiskName terra.StringValue `hcl:"os_disk_name,attr"`
	// VirtualMachineName: string, optional
	VirtualMachineName terra.StringValue `hcl:"virtual_machine_name,attr"`
	// DataDisk: min=0
	DataDisk []DataDisk `hcl:"data_disk,block" validate:"min=0"`
}

type DataDisk struct {
	// Names: list of string, required
	Names terra.ListValue[terra.StringValue] `hcl:"names,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type SingleServerConfigurationAttributes struct {
	ref terra.Reference
}

func (ssc SingleServerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc SingleServerConfigurationAttributes) InternalWithRef(ref terra.Reference) SingleServerConfigurationAttributes {
	return SingleServerConfigurationAttributes{ref: ref}
}

func (ssc SingleServerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc SingleServerConfigurationAttributes) AppResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("app_resource_group_name"))
}

func (ssc SingleServerConfigurationAttributes) DatabaseType() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("database_type"))
}

func (ssc SingleServerConfigurationAttributes) SecondaryIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssc.ref.Append("secondary_ip_enabled"))
}

func (ssc SingleServerConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("subnet_id"))
}

func (ssc SingleServerConfigurationAttributes) DiskVolumeConfiguration() terra.SetValue[DiskVolumeConfigurationAttributes] {
	return terra.ReferenceAsSet[DiskVolumeConfigurationAttributes](ssc.ref.Append("disk_volume_configuration"))
}

func (ssc SingleServerConfigurationAttributes) VirtualMachineConfiguration() terra.ListValue[VirtualMachineConfigurationAttributes] {
	return terra.ReferenceAsList[VirtualMachineConfigurationAttributes](ssc.ref.Append("virtual_machine_configuration"))
}

func (ssc SingleServerConfigurationAttributes) VirtualMachineResourceNames() terra.ListValue[VirtualMachineResourceNamesAttributes] {
	return terra.ReferenceAsList[VirtualMachineResourceNamesAttributes](ssc.ref.Append("virtual_machine_resource_names"))
}

type DiskVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (dvc DiskVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dvc.ref, nil
}

func (dvc DiskVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) DiskVolumeConfigurationAttributes {
	return DiskVolumeConfigurationAttributes{ref: ref}
}

func (dvc DiskVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dvc.ref.InternalTokens()
}

func (dvc DiskVolumeConfigurationAttributes) NumberOfDisks() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("number_of_disks"))
}

func (dvc DiskVolumeConfigurationAttributes) SizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("size_in_gb"))
}

func (dvc DiskVolumeConfigurationAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("sku_name"))
}

func (dvc DiskVolumeConfigurationAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("volume_name"))
}

type VirtualMachineConfigurationAttributes struct {
	ref terra.Reference
}

func (vmc VirtualMachineConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc VirtualMachineConfigurationAttributes) InternalWithRef(ref terra.Reference) VirtualMachineConfigurationAttributes {
	return VirtualMachineConfigurationAttributes{ref: ref}
}

func (vmc VirtualMachineConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc VirtualMachineConfigurationAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("virtual_machine_size"))
}

func (vmc VirtualMachineConfigurationAttributes) Image() terra.ListValue[ImageAttributes] {
	return terra.ReferenceAsList[ImageAttributes](vmc.ref.Append("image"))
}

func (vmc VirtualMachineConfigurationAttributes) OsProfile() terra.ListValue[OsProfileAttributes] {
	return terra.ReferenceAsList[OsProfileAttributes](vmc.ref.Append("os_profile"))
}

type ImageAttributes struct {
	ref terra.Reference
}

func (i ImageAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ImageAttributes) InternalWithRef(ref terra.Reference) ImageAttributes {
	return ImageAttributes{ref: ref}
}

func (i ImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ImageAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("offer"))
}

func (i ImageAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("publisher"))
}

func (i ImageAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sku"))
}

func (i ImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type OsProfileAttributes struct {
	ref terra.Reference
}

func (op OsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op OsProfileAttributes) InternalWithRef(ref terra.Reference) OsProfileAttributes {
	return OsProfileAttributes{ref: ref}
}

func (op OsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op OsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op OsProfileAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_private_key"))
}

func (op OsProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_public_key"))
}

type VirtualMachineResourceNamesAttributes struct {
	ref terra.Reference
}

func (vmrn VirtualMachineResourceNamesAttributes) InternalRef() (terra.Reference, error) {
	return vmrn.ref, nil
}

func (vmrn VirtualMachineResourceNamesAttributes) InternalWithRef(ref terra.Reference) VirtualMachineResourceNamesAttributes {
	return VirtualMachineResourceNamesAttributes{ref: ref}
}

func (vmrn VirtualMachineResourceNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmrn.ref.InternalTokens()
}

func (vmrn VirtualMachineResourceNamesAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("host_name"))
}

func (vmrn VirtualMachineResourceNamesAttributes) NetworkInterfaceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vmrn.ref.Append("network_interface_names"))
}

func (vmrn VirtualMachineResourceNamesAttributes) OsDiskName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("os_disk_name"))
}

func (vmrn VirtualMachineResourceNamesAttributes) VirtualMachineName() terra.StringValue {
	return terra.ReferenceAsString(vmrn.ref.Append("virtual_machine_name"))
}

func (vmrn VirtualMachineResourceNamesAttributes) DataDisk() terra.SetValue[DataDiskAttributes] {
	return terra.ReferenceAsSet[DataDiskAttributes](vmrn.ref.Append("data_disk"))
}

type DataDiskAttributes struct {
	ref terra.Reference
}

func (dd DataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDiskAttributes) InternalWithRef(ref terra.Reference) DataDiskAttributes {
	return DataDiskAttributes{ref: ref}
}

func (dd DataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDiskAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("names"))
}

func (dd DataDiskAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("volume_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type SingleServerConfigurationState struct {
	AppResourceGroupName        string                             `json:"app_resource_group_name"`
	DatabaseType                string                             `json:"database_type"`
	SecondaryIpEnabled          bool                               `json:"secondary_ip_enabled"`
	SubnetId                    string                             `json:"subnet_id"`
	DiskVolumeConfiguration     []DiskVolumeConfigurationState     `json:"disk_volume_configuration"`
	VirtualMachineConfiguration []VirtualMachineConfigurationState `json:"virtual_machine_configuration"`
	VirtualMachineResourceNames []VirtualMachineResourceNamesState `json:"virtual_machine_resource_names"`
}

type DiskVolumeConfigurationState struct {
	NumberOfDisks float64 `json:"number_of_disks"`
	SizeInGb      float64 `json:"size_in_gb"`
	SkuName       string  `json:"sku_name"`
	VolumeName    string  `json:"volume_name"`
}

type VirtualMachineConfigurationState struct {
	VirtualMachineSize string           `json:"virtual_machine_size"`
	Image              []ImageState     `json:"image"`
	OsProfile          []OsProfileState `json:"os_profile"`
}

type ImageState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type OsProfileState struct {
	AdminUsername string `json:"admin_username"`
	SshPrivateKey string `json:"ssh_private_key"`
	SshPublicKey  string `json:"ssh_public_key"`
}

type VirtualMachineResourceNamesState struct {
	HostName              string          `json:"host_name"`
	NetworkInterfaceNames []string        `json:"network_interface_names"`
	OsDiskName            string          `json:"os_disk_name"`
	VirtualMachineName    string          `json:"virtual_machine_name"`
	DataDisk              []DataDiskState `json:"data_disk"`
}

type DataDiskState struct {
	Names      []string `json:"names"`
	VolumeName string   `json:"volume_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
