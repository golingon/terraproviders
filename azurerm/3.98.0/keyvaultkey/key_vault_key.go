// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package keyvaultkey

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RotationPolicy struct {
	// ExpireAfter: string, optional
	ExpireAfter terra.StringValue `hcl:"expire_after,attr"`
	// NotifyBeforeExpiry: string, optional
	NotifyBeforeExpiry terra.StringValue `hcl:"notify_before_expiry,attr"`
	// Automatic: optional
	Automatic *Automatic `hcl:"automatic,block"`
}

type Automatic struct {
	// TimeAfterCreation: string, optional
	TimeAfterCreation terra.StringValue `hcl:"time_after_creation,attr"`
	// TimeBeforeExpiry: string, optional
	TimeBeforeExpiry terra.StringValue `hcl:"time_before_expiry,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RotationPolicyAttributes struct {
	ref terra.Reference
}

func (rp RotationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RotationPolicyAttributes) InternalWithRef(ref terra.Reference) RotationPolicyAttributes {
	return RotationPolicyAttributes{ref: ref}
}

func (rp RotationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RotationPolicyAttributes) ExpireAfter() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("expire_after"))
}

func (rp RotationPolicyAttributes) NotifyBeforeExpiry() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("notify_before_expiry"))
}

func (rp RotationPolicyAttributes) Automatic() terra.ListValue[AutomaticAttributes] {
	return terra.ReferenceAsList[AutomaticAttributes](rp.ref.Append("automatic"))
}

type AutomaticAttributes struct {
	ref terra.Reference
}

func (a AutomaticAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AutomaticAttributes) InternalWithRef(ref terra.Reference) AutomaticAttributes {
	return AutomaticAttributes{ref: ref}
}

func (a AutomaticAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AutomaticAttributes) TimeAfterCreation() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("time_after_creation"))
}

func (a AutomaticAttributes) TimeBeforeExpiry() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("time_before_expiry"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RotationPolicyState struct {
	ExpireAfter        string           `json:"expire_after"`
	NotifyBeforeExpiry string           `json:"notify_before_expiry"`
	Automatic          []AutomaticState `json:"automatic"`
}

type AutomaticState struct {
	TimeAfterCreation string `json:"time_after_creation"`
	TimeBeforeExpiry  string `json:"time_before_expiry"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
