// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	springclouddynatraceapplicationperformancemonitoring "github.com/golingon/terraproviders/azurerm/3.98.0/springclouddynatraceapplicationperformancemonitoring"
	"io"
)

// NewSpringCloudDynatraceApplicationPerformanceMonitoring creates a new instance of [SpringCloudDynatraceApplicationPerformanceMonitoring].
func NewSpringCloudDynatraceApplicationPerformanceMonitoring(name string, args SpringCloudDynatraceApplicationPerformanceMonitoringArgs) *SpringCloudDynatraceApplicationPerformanceMonitoring {
	return &SpringCloudDynatraceApplicationPerformanceMonitoring{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)

// SpringCloudDynatraceApplicationPerformanceMonitoring represents the Terraform resource azurerm_spring_cloud_dynatrace_application_performance_monitoring.
type SpringCloudDynatraceApplicationPerformanceMonitoring struct {
	Name      string
	Args      SpringCloudDynatraceApplicationPerformanceMonitoringArgs
	state     *springCloudDynatraceApplicationPerformanceMonitoringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) Type() string {
	return "azurerm_spring_cloud_dynatrace_application_performance_monitoring"
}

// LocalName returns the local name for [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) LocalName() string {
	return scdapm.Name
}

// Configuration returns the configuration (args) for [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) Configuration() interface{} {
	return scdapm.Args
}

// DependOn is used for other resources to depend on [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) DependOn() terra.Reference {
	return terra.ReferenceResource(scdapm)
}

// Dependencies returns the list of resources [SpringCloudDynatraceApplicationPerformanceMonitoring] depends_on.
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) Dependencies() terra.Dependencies {
	return scdapm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) LifecycleManagement() *terra.Lifecycle {
	return scdapm.Lifecycle
}

// Attributes returns the attributes for [SpringCloudDynatraceApplicationPerformanceMonitoring].
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) Attributes() springCloudDynatraceApplicationPerformanceMonitoringAttributes {
	return springCloudDynatraceApplicationPerformanceMonitoringAttributes{ref: terra.ReferenceResource(scdapm)}
}

// ImportState imports the given attribute values into [SpringCloudDynatraceApplicationPerformanceMonitoring]'s state.
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) ImportState(av io.Reader) error {
	scdapm.state = &springCloudDynatraceApplicationPerformanceMonitoringState{}
	if err := json.NewDecoder(av).Decode(scdapm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scdapm.Type(), scdapm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SpringCloudDynatraceApplicationPerformanceMonitoring] has state.
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) State() (*springCloudDynatraceApplicationPerformanceMonitoringState, bool) {
	return scdapm.state, scdapm.state != nil
}

// StateMust returns the state for [SpringCloudDynatraceApplicationPerformanceMonitoring]. Panics if the state is nil.
func (scdapm *SpringCloudDynatraceApplicationPerformanceMonitoring) StateMust() *springCloudDynatraceApplicationPerformanceMonitoringState {
	if scdapm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scdapm.Type(), scdapm.LocalName()))
	}
	return scdapm.state
}

// SpringCloudDynatraceApplicationPerformanceMonitoringArgs contains the configurations for azurerm_spring_cloud_dynatrace_application_performance_monitoring.
type SpringCloudDynatraceApplicationPerformanceMonitoringArgs struct {
	// ApiToken: string, optional
	ApiToken terra.StringValue `hcl:"api_token,attr"`
	// ApiUrl: string, optional
	ApiUrl terra.StringValue `hcl:"api_url,attr"`
	// ConnectionPoint: string, required
	ConnectionPoint terra.StringValue `hcl:"connection_point,attr" validate:"required"`
	// EnvironmentId: string, optional
	EnvironmentId terra.StringValue `hcl:"environment_id,attr"`
	// GloballyEnabled: bool, optional
	GloballyEnabled terra.BoolValue `hcl:"globally_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpringCloudServiceId: string, required
	SpringCloudServiceId terra.StringValue `hcl:"spring_cloud_service_id,attr" validate:"required"`
	// Tenant: string, required
	Tenant terra.StringValue `hcl:"tenant,attr" validate:"required"`
	// TenantToken: string, required
	TenantToken terra.StringValue `hcl:"tenant_token,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *springclouddynatraceapplicationperformancemonitoring.Timeouts `hcl:"timeouts,block"`
}
type springCloudDynatraceApplicationPerformanceMonitoringAttributes struct {
	ref terra.Reference
}

// ApiToken returns a reference to field api_token of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) ApiToken() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("api_token"))
}

// ApiUrl returns a reference to field api_url of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) ApiUrl() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("api_url"))
}

// ConnectionPoint returns a reference to field connection_point of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) ConnectionPoint() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("connection_point"))
}

// EnvironmentId returns a reference to field environment_id of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("environment_id"))
}

// GloballyEnabled returns a reference to field globally_enabled of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) GloballyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(scdapm.ref.Append("globally_enabled"))
}

// Id returns a reference to field id of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("name"))
}

// SpringCloudServiceId returns a reference to field spring_cloud_service_id of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) SpringCloudServiceId() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("spring_cloud_service_id"))
}

// Tenant returns a reference to field tenant of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) Tenant() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("tenant"))
}

// TenantToken returns a reference to field tenant_token of azurerm_spring_cloud_dynatrace_application_performance_monitoring.
func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) TenantToken() terra.StringValue {
	return terra.ReferenceAsString(scdapm.ref.Append("tenant_token"))
}

func (scdapm springCloudDynatraceApplicationPerformanceMonitoringAttributes) Timeouts() springclouddynatraceapplicationperformancemonitoring.TimeoutsAttributes {
	return terra.ReferenceAsSingle[springclouddynatraceapplicationperformancemonitoring.TimeoutsAttributes](scdapm.ref.Append("timeouts"))
}

type springCloudDynatraceApplicationPerformanceMonitoringState struct {
	ApiToken             string                                                              `json:"api_token"`
	ApiUrl               string                                                              `json:"api_url"`
	ConnectionPoint      string                                                              `json:"connection_point"`
	EnvironmentId        string                                                              `json:"environment_id"`
	GloballyEnabled      bool                                                                `json:"globally_enabled"`
	Id                   string                                                              `json:"id"`
	Name                 string                                                              `json:"name"`
	SpringCloudServiceId string                                                              `json:"spring_cloud_service_id"`
	Tenant               string                                                              `json:"tenant"`
	TenantToken          string                                                              `json:"tenant_token"`
	Timeouts             *springclouddynatraceapplicationperformancemonitoring.TimeoutsState `json:"timeouts"`
}
