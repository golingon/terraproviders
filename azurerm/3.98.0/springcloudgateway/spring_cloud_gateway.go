// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package springcloudgateway

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApiMetadata struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DocumentationUrl: string, optional
	DocumentationUrl terra.StringValue `hcl:"documentation_url,attr"`
	// ServerUrl: string, optional
	ServerUrl terra.StringValue `hcl:"server_url,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type ClientAuthorization struct {
	// CertificateIds: list of string, optional
	CertificateIds terra.ListValue[terra.StringValue] `hcl:"certificate_ids,attr"`
	// VerificationEnabled: bool, optional
	VerificationEnabled terra.BoolValue `hcl:"verification_enabled,attr"`
}

type Cors struct {
	// AllowedHeaders: set of string, optional
	AllowedHeaders terra.SetValue[terra.StringValue] `hcl:"allowed_headers,attr"`
	// AllowedMethods: set of string, optional
	AllowedMethods terra.SetValue[terra.StringValue] `hcl:"allowed_methods,attr"`
	// AllowedOriginPatterns: set of string, optional
	AllowedOriginPatterns terra.SetValue[terra.StringValue] `hcl:"allowed_origin_patterns,attr"`
	// AllowedOrigins: set of string, optional
	AllowedOrigins terra.SetValue[terra.StringValue] `hcl:"allowed_origins,attr"`
	// CredentialsAllowed: bool, optional
	CredentialsAllowed terra.BoolValue `hcl:"credentials_allowed,attr"`
	// ExposedHeaders: set of string, optional
	ExposedHeaders terra.SetValue[terra.StringValue] `hcl:"exposed_headers,attr"`
	// MaxAgeSeconds: number, optional
	MaxAgeSeconds terra.NumberValue `hcl:"max_age_seconds,attr"`
}

type LocalResponseCachePerInstance struct {
	// Size: string, optional
	Size terra.StringValue `hcl:"size,attr"`
	// TimeToLive: string, optional
	TimeToLive terra.StringValue `hcl:"time_to_live,attr"`
}

type LocalResponseCachePerRoute struct {
	// Size: string, optional
	Size terra.StringValue `hcl:"size,attr"`
	// TimeToLive: string, optional
	TimeToLive terra.StringValue `hcl:"time_to_live,attr"`
}

type Quota struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type Sso struct {
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// IssuerUri: string, optional
	IssuerUri terra.StringValue `hcl:"issuer_uri,attr"`
	// Scope: set of string, optional
	Scope terra.SetValue[terra.StringValue] `hcl:"scope,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ApiMetadataAttributes struct {
	ref terra.Reference
}

func (am ApiMetadataAttributes) InternalRef() (terra.Reference, error) {
	return am.ref, nil
}

func (am ApiMetadataAttributes) InternalWithRef(ref terra.Reference) ApiMetadataAttributes {
	return ApiMetadataAttributes{ref: ref}
}

func (am ApiMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return am.ref.InternalTokens()
}

func (am ApiMetadataAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("description"))
}

func (am ApiMetadataAttributes) DocumentationUrl() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("documentation_url"))
}

func (am ApiMetadataAttributes) ServerUrl() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("server_url"))
}

func (am ApiMetadataAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("title"))
}

func (am ApiMetadataAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("version"))
}

type ClientAuthorizationAttributes struct {
	ref terra.Reference
}

func (ca ClientAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ClientAuthorizationAttributes) InternalWithRef(ref terra.Reference) ClientAuthorizationAttributes {
	return ClientAuthorizationAttributes{ref: ref}
}

func (ca ClientAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ClientAuthorizationAttributes) CertificateIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ca.ref.Append("certificate_ids"))
}

func (ca ClientAuthorizationAttributes) VerificationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("verification_enabled"))
}

type CorsAttributes struct {
	ref terra.Reference
}

func (c CorsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CorsAttributes) InternalWithRef(ref terra.Reference) CorsAttributes {
	return CorsAttributes{ref: ref}
}

func (c CorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CorsAttributes) AllowedHeaders() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_headers"))
}

func (c CorsAttributes) AllowedMethods() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_methods"))
}

func (c CorsAttributes) AllowedOriginPatterns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origin_patterns"))
}

func (c CorsAttributes) AllowedOrigins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_origins"))
}

func (c CorsAttributes) CredentialsAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("credentials_allowed"))
}

func (c CorsAttributes) ExposedHeaders() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("exposed_headers"))
}

func (c CorsAttributes) MaxAgeSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("max_age_seconds"))
}

type LocalResponseCachePerInstanceAttributes struct {
	ref terra.Reference
}

func (lrcpi LocalResponseCachePerInstanceAttributes) InternalRef() (terra.Reference, error) {
	return lrcpi.ref, nil
}

func (lrcpi LocalResponseCachePerInstanceAttributes) InternalWithRef(ref terra.Reference) LocalResponseCachePerInstanceAttributes {
	return LocalResponseCachePerInstanceAttributes{ref: ref}
}

func (lrcpi LocalResponseCachePerInstanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lrcpi.ref.InternalTokens()
}

func (lrcpi LocalResponseCachePerInstanceAttributes) Size() terra.StringValue {
	return terra.ReferenceAsString(lrcpi.ref.Append("size"))
}

func (lrcpi LocalResponseCachePerInstanceAttributes) TimeToLive() terra.StringValue {
	return terra.ReferenceAsString(lrcpi.ref.Append("time_to_live"))
}

type LocalResponseCachePerRouteAttributes struct {
	ref terra.Reference
}

func (lrcpr LocalResponseCachePerRouteAttributes) InternalRef() (terra.Reference, error) {
	return lrcpr.ref, nil
}

func (lrcpr LocalResponseCachePerRouteAttributes) InternalWithRef(ref terra.Reference) LocalResponseCachePerRouteAttributes {
	return LocalResponseCachePerRouteAttributes{ref: ref}
}

func (lrcpr LocalResponseCachePerRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lrcpr.ref.InternalTokens()
}

func (lrcpr LocalResponseCachePerRouteAttributes) Size() terra.StringValue {
	return terra.ReferenceAsString(lrcpr.ref.Append("size"))
}

func (lrcpr LocalResponseCachePerRouteAttributes) TimeToLive() terra.StringValue {
	return terra.ReferenceAsString(lrcpr.ref.Append("time_to_live"))
}

type QuotaAttributes struct {
	ref terra.Reference
}

func (q QuotaAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q QuotaAttributes) InternalWithRef(ref terra.Reference) QuotaAttributes {
	return QuotaAttributes{ref: ref}
}

func (q QuotaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q QuotaAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("cpu"))
}

func (q QuotaAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("memory"))
}

type SsoAttributes struct {
	ref terra.Reference
}

func (s SsoAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SsoAttributes) InternalWithRef(ref terra.Reference) SsoAttributes {
	return SsoAttributes{ref: ref}
}

func (s SsoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SsoAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_id"))
}

func (s SsoAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("client_secret"))
}

func (s SsoAttributes) IssuerUri() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("issuer_uri"))
}

func (s SsoAttributes) Scope() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("scope"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ApiMetadataState struct {
	Description      string `json:"description"`
	DocumentationUrl string `json:"documentation_url"`
	ServerUrl        string `json:"server_url"`
	Title            string `json:"title"`
	Version          string `json:"version"`
}

type ClientAuthorizationState struct {
	CertificateIds      []string `json:"certificate_ids"`
	VerificationEnabled bool     `json:"verification_enabled"`
}

type CorsState struct {
	AllowedHeaders        []string `json:"allowed_headers"`
	AllowedMethods        []string `json:"allowed_methods"`
	AllowedOriginPatterns []string `json:"allowed_origin_patterns"`
	AllowedOrigins        []string `json:"allowed_origins"`
	CredentialsAllowed    bool     `json:"credentials_allowed"`
	ExposedHeaders        []string `json:"exposed_headers"`
	MaxAgeSeconds         float64  `json:"max_age_seconds"`
}

type LocalResponseCachePerInstanceState struct {
	Size       string `json:"size"`
	TimeToLive string `json:"time_to_live"`
}

type LocalResponseCachePerRouteState struct {
	Size       string `json:"size"`
	TimeToLive string `json:"time_to_live"`
}

type QuotaState struct {
	Cpu    string `json:"cpu"`
	Memory string `json:"memory"`
}

type SsoState struct {
	ClientId     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	IssuerUri    string   `json:"issuer_uri"`
	Scope        []string `json:"scope"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
