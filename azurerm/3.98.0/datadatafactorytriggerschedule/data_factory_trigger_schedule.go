// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datadatafactorytriggerschedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Schedule struct {
	// Monthly: min=0
	Monthly []Monthly `hcl:"monthly,block" validate:"min=0"`
}

type Monthly struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DaysOfMonth() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("days_of_month"))
}

func (s ScheduleAttributes) DaysOfWeek() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("days_of_week"))
}

func (s ScheduleAttributes) Hours() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("hours"))
}

func (s ScheduleAttributes) Minutes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](s.ref.Append("minutes"))
}

func (s ScheduleAttributes) Monthly() terra.ListValue[MonthlyAttributes] {
	return terra.ReferenceAsList[MonthlyAttributes](s.ref.Append("monthly"))
}

type MonthlyAttributes struct {
	ref terra.Reference
}

func (m MonthlyAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonthlyAttributes) InternalWithRef(ref terra.Reference) MonthlyAttributes {
	return MonthlyAttributes{ref: ref}
}

func (m MonthlyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonthlyAttributes) Week() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("week"))
}

func (m MonthlyAttributes) Weekday() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("weekday"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type ScheduleState struct {
	DaysOfMonth []float64      `json:"days_of_month"`
	DaysOfWeek  []string       `json:"days_of_week"`
	Hours       []float64      `json:"hours"`
	Minutes     []float64      `json:"minutes"`
	Monthly     []MonthlyState `json:"monthly"`
}

type MonthlyState struct {
	Week    float64 `json:"week"`
	Weekday string  `json:"weekday"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
