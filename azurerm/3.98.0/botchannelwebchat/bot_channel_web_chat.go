// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package botchannelwebchat

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Site struct {
	// EndpointParametersEnabled: bool, optional
	EndpointParametersEnabled terra.BoolValue `hcl:"endpoint_parameters_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StorageEnabled: bool, optional
	StorageEnabled terra.BoolValue `hcl:"storage_enabled,attr"`
	// UserUploadEnabled: bool, optional
	UserUploadEnabled terra.BoolValue `hcl:"user_upload_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SiteAttributes struct {
	ref terra.Reference
}

func (s SiteAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SiteAttributes) InternalWithRef(ref terra.Reference) SiteAttributes {
	return SiteAttributes{ref: ref}
}

func (s SiteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SiteAttributes) EndpointParametersEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("endpoint_parameters_enabled"))
}

func (s SiteAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SiteAttributes) StorageEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("storage_enabled"))
}

func (s SiteAttributes) UserUploadEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("user_upload_enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SiteState struct {
	EndpointParametersEnabled bool   `json:"endpoint_parameters_enabled"`
	Name                      string `json:"name"`
	StorageEnabled            bool   `json:"storage_enabled"`
	UserUploadEnabled         bool   `json:"user_upload_enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
