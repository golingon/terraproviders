// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package apimanagementapi

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Contact struct {
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
}

type Import struct {
	// ContentFormat: string, required
	ContentFormat terra.StringValue `hcl:"content_format,attr" validate:"required"`
	// ContentValue: string, required
	ContentValue terra.StringValue `hcl:"content_value,attr" validate:"required"`
	// WsdlSelector: optional
	WsdlSelector *WsdlSelector `hcl:"wsdl_selector,block"`
}

type WsdlSelector struct {
	// EndpointName: string, required
	EndpointName terra.StringValue `hcl:"endpoint_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type License struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
}

type Oauth2Authorization struct {
	// AuthorizationServerName: string, required
	AuthorizationServerName terra.StringValue `hcl:"authorization_server_name,attr" validate:"required"`
	// Scope: string, optional
	Scope terra.StringValue `hcl:"scope,attr"`
}

type OpenidAuthentication struct {
	// BearerTokenSendingMethods: set of string, optional
	BearerTokenSendingMethods terra.SetValue[terra.StringValue] `hcl:"bearer_token_sending_methods,attr"`
	// OpenidProviderName: string, required
	OpenidProviderName terra.StringValue `hcl:"openid_provider_name,attr" validate:"required"`
}

type SubscriptionKeyParameterNames struct {
	// Header: string, required
	Header terra.StringValue `hcl:"header,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ContactAttributes struct {
	ref terra.Reference
}

func (c ContactAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContactAttributes) InternalWithRef(ref terra.Reference) ContactAttributes {
	return ContactAttributes{ref: ref}
}

func (c ContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("email"))
}

func (c ContactAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContactAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("url"))
}

type ImportAttributes struct {
	ref terra.Reference
}

func (i ImportAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ImportAttributes) InternalWithRef(ref terra.Reference) ImportAttributes {
	return ImportAttributes{ref: ref}
}

func (i ImportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ImportAttributes) ContentFormat() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("content_format"))
}

func (i ImportAttributes) ContentValue() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("content_value"))
}

func (i ImportAttributes) WsdlSelector() terra.ListValue[WsdlSelectorAttributes] {
	return terra.ReferenceAsList[WsdlSelectorAttributes](i.ref.Append("wsdl_selector"))
}

type WsdlSelectorAttributes struct {
	ref terra.Reference
}

func (ws WsdlSelectorAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WsdlSelectorAttributes) InternalWithRef(ref terra.Reference) WsdlSelectorAttributes {
	return WsdlSelectorAttributes{ref: ref}
}

func (ws WsdlSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WsdlSelectorAttributes) EndpointName() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("endpoint_name"))
}

func (ws WsdlSelectorAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("service_name"))
}

type LicenseAttributes struct {
	ref terra.Reference
}

func (l LicenseAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LicenseAttributes) InternalWithRef(ref terra.Reference) LicenseAttributes {
	return LicenseAttributes{ref: ref}
}

func (l LicenseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LicenseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("name"))
}

func (l LicenseAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("url"))
}

type Oauth2AuthorizationAttributes struct {
	ref terra.Reference
}

func (oa Oauth2AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return oa.ref, nil
}

func (oa Oauth2AuthorizationAttributes) InternalWithRef(ref terra.Reference) Oauth2AuthorizationAttributes {
	return Oauth2AuthorizationAttributes{ref: ref}
}

func (oa Oauth2AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oa.ref.InternalTokens()
}

func (oa Oauth2AuthorizationAttributes) AuthorizationServerName() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("authorization_server_name"))
}

func (oa Oauth2AuthorizationAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("scope"))
}

type OpenidAuthenticationAttributes struct {
	ref terra.Reference
}

func (oa OpenidAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return oa.ref, nil
}

func (oa OpenidAuthenticationAttributes) InternalWithRef(ref terra.Reference) OpenidAuthenticationAttributes {
	return OpenidAuthenticationAttributes{ref: ref}
}

func (oa OpenidAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oa.ref.InternalTokens()
}

func (oa OpenidAuthenticationAttributes) BearerTokenSendingMethods() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](oa.ref.Append("bearer_token_sending_methods"))
}

func (oa OpenidAuthenticationAttributes) OpenidProviderName() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("openid_provider_name"))
}

type SubscriptionKeyParameterNamesAttributes struct {
	ref terra.Reference
}

func (skpn SubscriptionKeyParameterNamesAttributes) InternalRef() (terra.Reference, error) {
	return skpn.ref, nil
}

func (skpn SubscriptionKeyParameterNamesAttributes) InternalWithRef(ref terra.Reference) SubscriptionKeyParameterNamesAttributes {
	return SubscriptionKeyParameterNamesAttributes{ref: ref}
}

func (skpn SubscriptionKeyParameterNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skpn.ref.InternalTokens()
}

func (skpn SubscriptionKeyParameterNamesAttributes) Header() terra.StringValue {
	return terra.ReferenceAsString(skpn.ref.Append("header"))
}

func (skpn SubscriptionKeyParameterNamesAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(skpn.ref.Append("query"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ContactState struct {
	Email string `json:"email"`
	Name  string `json:"name"`
	Url   string `json:"url"`
}

type ImportState struct {
	ContentFormat string              `json:"content_format"`
	ContentValue  string              `json:"content_value"`
	WsdlSelector  []WsdlSelectorState `json:"wsdl_selector"`
}

type WsdlSelectorState struct {
	EndpointName string `json:"endpoint_name"`
	ServiceName  string `json:"service_name"`
}

type LicenseState struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

type Oauth2AuthorizationState struct {
	AuthorizationServerName string `json:"authorization_server_name"`
	Scope                   string `json:"scope"`
}

type OpenidAuthenticationState struct {
	BearerTokenSendingMethods []string `json:"bearer_token_sending_methods"`
	OpenidProviderName        string   `json:"openid_provider_name"`
}

type SubscriptionKeyParameterNamesState struct {
	Header string `json:"header"`
	Query  string `json:"query"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
