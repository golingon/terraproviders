// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"github.com/golingon/lingon/pkg/terra"
	datanetworkmanager "github.com/golingon/terraproviders/azurerm/3.98.0/datanetworkmanager"
)

// NewDataNetworkManager creates a new instance of [DataNetworkManager].
func NewDataNetworkManager(name string, args DataNetworkManagerArgs) *DataNetworkManager {
	return &DataNetworkManager{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNetworkManager)(nil)

// DataNetworkManager represents the Terraform data resource azurerm_network_manager.
type DataNetworkManager struct {
	Name string
	Args DataNetworkManagerArgs
}

// DataSource returns the Terraform object type for [DataNetworkManager].
func (nm *DataNetworkManager) DataSource() string {
	return "azurerm_network_manager"
}

// LocalName returns the local name for [DataNetworkManager].
func (nm *DataNetworkManager) LocalName() string {
	return nm.Name
}

// Configuration returns the configuration (args) for [DataNetworkManager].
func (nm *DataNetworkManager) Configuration() interface{} {
	return nm.Args
}

// Attributes returns the attributes for [DataNetworkManager].
func (nm *DataNetworkManager) Attributes() dataNetworkManagerAttributes {
	return dataNetworkManagerAttributes{ref: terra.ReferenceDataResource(nm)}
}

// DataNetworkManagerArgs contains the configurations for azurerm_network_manager.
type DataNetworkManagerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// CrossTenantScopes: min=0
	CrossTenantScopes []datanetworkmanager.CrossTenantScopes `hcl:"cross_tenant_scopes,block" validate:"min=0"`
	// Scope: min=0
	Scope []datanetworkmanager.Scope `hcl:"scope,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datanetworkmanager.Timeouts `hcl:"timeouts,block"`
}
type dataNetworkManagerAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(nm.ref.Append("resource_group_name"))
}

// ScopeAccesses returns a reference to field scope_accesses of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) ScopeAccesses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nm.ref.Append("scope_accesses"))
}

// Tags returns a reference to field tags of azurerm_network_manager.
func (nm dataNetworkManagerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nm.ref.Append("tags"))
}

func (nm dataNetworkManagerAttributes) CrossTenantScopes() terra.ListValue[datanetworkmanager.CrossTenantScopesAttributes] {
	return terra.ReferenceAsList[datanetworkmanager.CrossTenantScopesAttributes](nm.ref.Append("cross_tenant_scopes"))
}

func (nm dataNetworkManagerAttributes) Scope() terra.ListValue[datanetworkmanager.ScopeAttributes] {
	return terra.ReferenceAsList[datanetworkmanager.ScopeAttributes](nm.ref.Append("scope"))
}

func (nm dataNetworkManagerAttributes) Timeouts() datanetworkmanager.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datanetworkmanager.TimeoutsAttributes](nm.ref.Append("timeouts"))
}
