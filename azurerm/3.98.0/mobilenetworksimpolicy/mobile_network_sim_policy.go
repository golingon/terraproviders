// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package mobilenetworksimpolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Slice struct {
	// DefaultDataNetworkId: string, required
	DefaultDataNetworkId terra.StringValue `hcl:"default_data_network_id,attr" validate:"required"`
	// SliceId: string, required
	SliceId terra.StringValue `hcl:"slice_id,attr" validate:"required"`
	// DataNetwork: min=1
	DataNetwork []DataNetwork `hcl:"data_network,block" validate:"min=1"`
}

type DataNetwork struct {
	// AdditionalAllowedSessionTypes: list of string, optional
	AdditionalAllowedSessionTypes terra.ListValue[terra.StringValue] `hcl:"additional_allowed_session_types,attr"`
	// AllocationAndRetentionPriorityLevel: number, optional
	AllocationAndRetentionPriorityLevel terra.NumberValue `hcl:"allocation_and_retention_priority_level,attr"`
	// AllowedServicesIds: list of string, required
	AllowedServicesIds terra.ListValue[terra.StringValue] `hcl:"allowed_services_ids,attr" validate:"required"`
	// DataNetworkId: string, required
	DataNetworkId terra.StringValue `hcl:"data_network_id,attr" validate:"required"`
	// DefaultSessionType: string, optional
	DefaultSessionType terra.StringValue `hcl:"default_session_type,attr"`
	// MaxBufferedPackets: number, optional
	MaxBufferedPackets terra.NumberValue `hcl:"max_buffered_packets,attr"`
	// PreemptionCapability: string, optional
	PreemptionCapability terra.StringValue `hcl:"preemption_capability,attr"`
	// PreemptionVulnerability: string, optional
	PreemptionVulnerability terra.StringValue `hcl:"preemption_vulnerability,attr"`
	// QosIndicator: number, required
	QosIndicator terra.NumberValue `hcl:"qos_indicator,attr" validate:"required"`
	// SessionAggregateMaximumBitRate: required
	SessionAggregateMaximumBitRate *SessionAggregateMaximumBitRate `hcl:"session_aggregate_maximum_bit_rate,block" validate:"required"`
}

type SessionAggregateMaximumBitRate struct {
	// Downlink: string, required
	Downlink terra.StringValue `hcl:"downlink,attr" validate:"required"`
	// Uplink: string, required
	Uplink terra.StringValue `hcl:"uplink,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UserEquipmentAggregateMaximumBitRate struct {
	// Downlink: string, required
	Downlink terra.StringValue `hcl:"downlink,attr" validate:"required"`
	// Uplink: string, required
	Uplink terra.StringValue `hcl:"uplink,attr" validate:"required"`
}

type SliceAttributes struct {
	ref terra.Reference
}

func (s SliceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SliceAttributes) InternalWithRef(ref terra.Reference) SliceAttributes {
	return SliceAttributes{ref: ref}
}

func (s SliceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SliceAttributes) DefaultDataNetworkId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("default_data_network_id"))
}

func (s SliceAttributes) SliceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("slice_id"))
}

func (s SliceAttributes) DataNetwork() terra.ListValue[DataNetworkAttributes] {
	return terra.ReferenceAsList[DataNetworkAttributes](s.ref.Append("data_network"))
}

type DataNetworkAttributes struct {
	ref terra.Reference
}

func (dn DataNetworkAttributes) InternalRef() (terra.Reference, error) {
	return dn.ref, nil
}

func (dn DataNetworkAttributes) InternalWithRef(ref terra.Reference) DataNetworkAttributes {
	return DataNetworkAttributes{ref: ref}
}

func (dn DataNetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dn.ref.InternalTokens()
}

func (dn DataNetworkAttributes) AdditionalAllowedSessionTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dn.ref.Append("additional_allowed_session_types"))
}

func (dn DataNetworkAttributes) AllocationAndRetentionPriorityLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(dn.ref.Append("allocation_and_retention_priority_level"))
}

func (dn DataNetworkAttributes) AllowedServicesIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dn.ref.Append("allowed_services_ids"))
}

func (dn DataNetworkAttributes) DataNetworkId() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("data_network_id"))
}

func (dn DataNetworkAttributes) DefaultSessionType() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("default_session_type"))
}

func (dn DataNetworkAttributes) MaxBufferedPackets() terra.NumberValue {
	return terra.ReferenceAsNumber(dn.ref.Append("max_buffered_packets"))
}

func (dn DataNetworkAttributes) PreemptionCapability() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("preemption_capability"))
}

func (dn DataNetworkAttributes) PreemptionVulnerability() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("preemption_vulnerability"))
}

func (dn DataNetworkAttributes) QosIndicator() terra.NumberValue {
	return terra.ReferenceAsNumber(dn.ref.Append("qos_indicator"))
}

func (dn DataNetworkAttributes) SessionAggregateMaximumBitRate() terra.ListValue[SessionAggregateMaximumBitRateAttributes] {
	return terra.ReferenceAsList[SessionAggregateMaximumBitRateAttributes](dn.ref.Append("session_aggregate_maximum_bit_rate"))
}

type SessionAggregateMaximumBitRateAttributes struct {
	ref terra.Reference
}

func (sambr SessionAggregateMaximumBitRateAttributes) InternalRef() (terra.Reference, error) {
	return sambr.ref, nil
}

func (sambr SessionAggregateMaximumBitRateAttributes) InternalWithRef(ref terra.Reference) SessionAggregateMaximumBitRateAttributes {
	return SessionAggregateMaximumBitRateAttributes{ref: ref}
}

func (sambr SessionAggregateMaximumBitRateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sambr.ref.InternalTokens()
}

func (sambr SessionAggregateMaximumBitRateAttributes) Downlink() terra.StringValue {
	return terra.ReferenceAsString(sambr.ref.Append("downlink"))
}

func (sambr SessionAggregateMaximumBitRateAttributes) Uplink() terra.StringValue {
	return terra.ReferenceAsString(sambr.ref.Append("uplink"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UserEquipmentAggregateMaximumBitRateAttributes struct {
	ref terra.Reference
}

func (ueambr UserEquipmentAggregateMaximumBitRateAttributes) InternalRef() (terra.Reference, error) {
	return ueambr.ref, nil
}

func (ueambr UserEquipmentAggregateMaximumBitRateAttributes) InternalWithRef(ref terra.Reference) UserEquipmentAggregateMaximumBitRateAttributes {
	return UserEquipmentAggregateMaximumBitRateAttributes{ref: ref}
}

func (ueambr UserEquipmentAggregateMaximumBitRateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ueambr.ref.InternalTokens()
}

func (ueambr UserEquipmentAggregateMaximumBitRateAttributes) Downlink() terra.StringValue {
	return terra.ReferenceAsString(ueambr.ref.Append("downlink"))
}

func (ueambr UserEquipmentAggregateMaximumBitRateAttributes) Uplink() terra.StringValue {
	return terra.ReferenceAsString(ueambr.ref.Append("uplink"))
}

type SliceState struct {
	DefaultDataNetworkId string             `json:"default_data_network_id"`
	SliceId              string             `json:"slice_id"`
	DataNetwork          []DataNetworkState `json:"data_network"`
}

type DataNetworkState struct {
	AdditionalAllowedSessionTypes       []string                              `json:"additional_allowed_session_types"`
	AllocationAndRetentionPriorityLevel float64                               `json:"allocation_and_retention_priority_level"`
	AllowedServicesIds                  []string                              `json:"allowed_services_ids"`
	DataNetworkId                       string                                `json:"data_network_id"`
	DefaultSessionType                  string                                `json:"default_session_type"`
	MaxBufferedPackets                  float64                               `json:"max_buffered_packets"`
	PreemptionCapability                string                                `json:"preemption_capability"`
	PreemptionVulnerability             string                                `json:"preemption_vulnerability"`
	QosIndicator                        float64                               `json:"qos_indicator"`
	SessionAggregateMaximumBitRate      []SessionAggregateMaximumBitRateState `json:"session_aggregate_maximum_bit_rate"`
}

type SessionAggregateMaximumBitRateState struct {
	Downlink string `json:"downlink"`
	Uplink   string `json:"uplink"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UserEquipmentAggregateMaximumBitRateState struct {
	Downlink string `json:"downlink"`
	Uplink   string `json:"uplink"`
}
