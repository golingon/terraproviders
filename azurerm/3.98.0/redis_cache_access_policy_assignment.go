// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	rediscacheaccesspolicyassignment "github.com/golingon/terraproviders/azurerm/3.98.0/rediscacheaccesspolicyassignment"
	"io"
)

// NewRedisCacheAccessPolicyAssignment creates a new instance of [RedisCacheAccessPolicyAssignment].
func NewRedisCacheAccessPolicyAssignment(name string, args RedisCacheAccessPolicyAssignmentArgs) *RedisCacheAccessPolicyAssignment {
	return &RedisCacheAccessPolicyAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisCacheAccessPolicyAssignment)(nil)

// RedisCacheAccessPolicyAssignment represents the Terraform resource azurerm_redis_cache_access_policy_assignment.
type RedisCacheAccessPolicyAssignment struct {
	Name      string
	Args      RedisCacheAccessPolicyAssignmentArgs
	state     *redisCacheAccessPolicyAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) Type() string {
	return "azurerm_redis_cache_access_policy_assignment"
}

// LocalName returns the local name for [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) LocalName() string {
	return rcapa.Name
}

// Configuration returns the configuration (args) for [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) Configuration() interface{} {
	return rcapa.Args
}

// DependOn is used for other resources to depend on [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(rcapa)
}

// Dependencies returns the list of resources [RedisCacheAccessPolicyAssignment] depends_on.
func (rcapa *RedisCacheAccessPolicyAssignment) Dependencies() terra.Dependencies {
	return rcapa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) LifecycleManagement() *terra.Lifecycle {
	return rcapa.Lifecycle
}

// Attributes returns the attributes for [RedisCacheAccessPolicyAssignment].
func (rcapa *RedisCacheAccessPolicyAssignment) Attributes() redisCacheAccessPolicyAssignmentAttributes {
	return redisCacheAccessPolicyAssignmentAttributes{ref: terra.ReferenceResource(rcapa)}
}

// ImportState imports the given attribute values into [RedisCacheAccessPolicyAssignment]'s state.
func (rcapa *RedisCacheAccessPolicyAssignment) ImportState(av io.Reader) error {
	rcapa.state = &redisCacheAccessPolicyAssignmentState{}
	if err := json.NewDecoder(av).Decode(rcapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcapa.Type(), rcapa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedisCacheAccessPolicyAssignment] has state.
func (rcapa *RedisCacheAccessPolicyAssignment) State() (*redisCacheAccessPolicyAssignmentState, bool) {
	return rcapa.state, rcapa.state != nil
}

// StateMust returns the state for [RedisCacheAccessPolicyAssignment]. Panics if the state is nil.
func (rcapa *RedisCacheAccessPolicyAssignment) StateMust() *redisCacheAccessPolicyAssignmentState {
	if rcapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcapa.Type(), rcapa.LocalName()))
	}
	return rcapa.state
}

// RedisCacheAccessPolicyAssignmentArgs contains the configurations for azurerm_redis_cache_access_policy_assignment.
type RedisCacheAccessPolicyAssignmentArgs struct {
	// AccessPolicyName: string, required
	AccessPolicyName terra.StringValue `hcl:"access_policy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ObjectId: string, required
	ObjectId terra.StringValue `hcl:"object_id,attr" validate:"required"`
	// ObjectIdAlias: string, required
	ObjectIdAlias terra.StringValue `hcl:"object_id_alias,attr" validate:"required"`
	// RedisCacheId: string, required
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *rediscacheaccesspolicyassignment.Timeouts `hcl:"timeouts,block"`
}
type redisCacheAccessPolicyAssignmentAttributes struct {
	ref terra.Reference
}

// AccessPolicyName returns a reference to field access_policy_name of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) AccessPolicyName() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("access_policy_name"))
}

// Id returns a reference to field id of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("name"))
}

// ObjectId returns a reference to field object_id of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) ObjectId() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("object_id"))
}

// ObjectIdAlias returns a reference to field object_id_alias of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) ObjectIdAlias() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("object_id_alias"))
}

// RedisCacheId returns a reference to field redis_cache_id of azurerm_redis_cache_access_policy_assignment.
func (rcapa redisCacheAccessPolicyAssignmentAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(rcapa.ref.Append("redis_cache_id"))
}

func (rcapa redisCacheAccessPolicyAssignmentAttributes) Timeouts() rediscacheaccesspolicyassignment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[rediscacheaccesspolicyassignment.TimeoutsAttributes](rcapa.ref.Append("timeouts"))
}

type redisCacheAccessPolicyAssignmentState struct {
	AccessPolicyName string                                          `json:"access_policy_name"`
	Id               string                                          `json:"id"`
	Name             string                                          `json:"name"`
	ObjectId         string                                          `json:"object_id"`
	ObjectIdAlias    string                                          `json:"object_id_alias"`
	RedisCacheId     string                                          `json:"redis_cache_id"`
	Timeouts         *rediscacheaccesspolicyassignment.TimeoutsState `json:"timeouts"`
}
