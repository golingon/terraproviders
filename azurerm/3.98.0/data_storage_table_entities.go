// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"github.com/golingon/lingon/pkg/terra"
	datastoragetableentities "github.com/golingon/terraproviders/azurerm/3.98.0/datastoragetableentities"
)

// NewDataStorageTableEntities creates a new instance of [DataStorageTableEntities].
func NewDataStorageTableEntities(name string, args DataStorageTableEntitiesArgs) *DataStorageTableEntities {
	return &DataStorageTableEntities{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataStorageTableEntities)(nil)

// DataStorageTableEntities represents the Terraform data resource azurerm_storage_table_entities.
type DataStorageTableEntities struct {
	Name string
	Args DataStorageTableEntitiesArgs
}

// DataSource returns the Terraform object type for [DataStorageTableEntities].
func (ste *DataStorageTableEntities) DataSource() string {
	return "azurerm_storage_table_entities"
}

// LocalName returns the local name for [DataStorageTableEntities].
func (ste *DataStorageTableEntities) LocalName() string {
	return ste.Name
}

// Configuration returns the configuration (args) for [DataStorageTableEntities].
func (ste *DataStorageTableEntities) Configuration() interface{} {
	return ste.Args
}

// Attributes returns the attributes for [DataStorageTableEntities].
func (ste *DataStorageTableEntities) Attributes() dataStorageTableEntitiesAttributes {
	return dataStorageTableEntitiesAttributes{ref: terra.ReferenceDataResource(ste)}
}

// DataStorageTableEntitiesArgs contains the configurations for azurerm_storage_table_entities.
type DataStorageTableEntitiesArgs struct {
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Select: list of string, optional
	Select terra.ListValue[terra.StringValue] `hcl:"select,attr"`
	// StorageAccountName: string, required
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Items: min=0
	Items []datastoragetableentities.Items `hcl:"items,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datastoragetableentities.Timeouts `hcl:"timeouts,block"`
}
type dataStorageTableEntitiesAttributes struct {
	ref terra.Reference
}

// Filter returns a reference to field filter of azurerm_storage_table_entities.
func (ste dataStorageTableEntitiesAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(ste.ref.Append("filter"))
}

// Id returns a reference to field id of azurerm_storage_table_entities.
func (ste dataStorageTableEntitiesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ste.ref.Append("id"))
}

// Select returns a reference to field select of azurerm_storage_table_entities.
func (ste dataStorageTableEntitiesAttributes) Select() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ste.ref.Append("select"))
}

// StorageAccountName returns a reference to field storage_account_name of azurerm_storage_table_entities.
func (ste dataStorageTableEntitiesAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(ste.ref.Append("storage_account_name"))
}

// TableName returns a reference to field table_name of azurerm_storage_table_entities.
func (ste dataStorageTableEntitiesAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(ste.ref.Append("table_name"))
}

func (ste dataStorageTableEntitiesAttributes) Items() terra.ListValue[datastoragetableentities.ItemsAttributes] {
	return terra.ReferenceAsList[datastoragetableentities.ItemsAttributes](ste.ref.Append("items"))
}

func (ste dataStorageTableEntitiesAttributes) Timeouts() datastoragetableentities.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datastoragetableentities.TimeoutsAttributes](ste.ref.Append("timeouts"))
}
