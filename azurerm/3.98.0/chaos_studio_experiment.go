// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	chaosstudioexperiment "github.com/golingon/terraproviders/azurerm/3.98.0/chaosstudioexperiment"
	"io"
)

// NewChaosStudioExperiment creates a new instance of [ChaosStudioExperiment].
func NewChaosStudioExperiment(name string, args ChaosStudioExperimentArgs) *ChaosStudioExperiment {
	return &ChaosStudioExperiment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ChaosStudioExperiment)(nil)

// ChaosStudioExperiment represents the Terraform resource azurerm_chaos_studio_experiment.
type ChaosStudioExperiment struct {
	Name      string
	Args      ChaosStudioExperimentArgs
	state     *chaosStudioExperimentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) Type() string {
	return "azurerm_chaos_studio_experiment"
}

// LocalName returns the local name for [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) LocalName() string {
	return cse.Name
}

// Configuration returns the configuration (args) for [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) Configuration() interface{} {
	return cse.Args
}

// DependOn is used for other resources to depend on [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) DependOn() terra.Reference {
	return terra.ReferenceResource(cse)
}

// Dependencies returns the list of resources [ChaosStudioExperiment] depends_on.
func (cse *ChaosStudioExperiment) Dependencies() terra.Dependencies {
	return cse.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) LifecycleManagement() *terra.Lifecycle {
	return cse.Lifecycle
}

// Attributes returns the attributes for [ChaosStudioExperiment].
func (cse *ChaosStudioExperiment) Attributes() chaosStudioExperimentAttributes {
	return chaosStudioExperimentAttributes{ref: terra.ReferenceResource(cse)}
}

// ImportState imports the given attribute values into [ChaosStudioExperiment]'s state.
func (cse *ChaosStudioExperiment) ImportState(av io.Reader) error {
	cse.state = &chaosStudioExperimentState{}
	if err := json.NewDecoder(av).Decode(cse.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cse.Type(), cse.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ChaosStudioExperiment] has state.
func (cse *ChaosStudioExperiment) State() (*chaosStudioExperimentState, bool) {
	return cse.state, cse.state != nil
}

// StateMust returns the state for [ChaosStudioExperiment]. Panics if the state is nil.
func (cse *ChaosStudioExperiment) StateMust() *chaosStudioExperimentState {
	if cse.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cse.Type(), cse.LocalName()))
	}
	return cse.state
}

// ChaosStudioExperimentArgs contains the configurations for azurerm_chaos_studio_experiment.
type ChaosStudioExperimentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Identity: optional
	Identity *chaosstudioexperiment.Identity `hcl:"identity,block"`
	// Selectors: min=1
	Selectors []chaosstudioexperiment.Selectors `hcl:"selectors,block" validate:"min=1"`
	// Steps: min=1
	Steps []chaosstudioexperiment.Steps `hcl:"steps,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *chaosstudioexperiment.Timeouts `hcl:"timeouts,block"`
}
type chaosStudioExperimentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_chaos_studio_experiment.
func (cse chaosStudioExperimentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cse.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_chaos_studio_experiment.
func (cse chaosStudioExperimentAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cse.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_chaos_studio_experiment.
func (cse chaosStudioExperimentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cse.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_chaos_studio_experiment.
func (cse chaosStudioExperimentAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(cse.ref.Append("resource_group_name"))
}

func (cse chaosStudioExperimentAttributes) Identity() terra.ListValue[chaosstudioexperiment.IdentityAttributes] {
	return terra.ReferenceAsList[chaosstudioexperiment.IdentityAttributes](cse.ref.Append("identity"))
}

func (cse chaosStudioExperimentAttributes) Selectors() terra.ListValue[chaosstudioexperiment.SelectorsAttributes] {
	return terra.ReferenceAsList[chaosstudioexperiment.SelectorsAttributes](cse.ref.Append("selectors"))
}

func (cse chaosStudioExperimentAttributes) Steps() terra.ListValue[chaosstudioexperiment.StepsAttributes] {
	return terra.ReferenceAsList[chaosstudioexperiment.StepsAttributes](cse.ref.Append("steps"))
}

func (cse chaosStudioExperimentAttributes) Timeouts() chaosstudioexperiment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[chaosstudioexperiment.TimeoutsAttributes](cse.ref.Append("timeouts"))
}

type chaosStudioExperimentState struct {
	Id                string                                 `json:"id"`
	Location          string                                 `json:"location"`
	Name              string                                 `json:"name"`
	ResourceGroupName string                                 `json:"resource_group_name"`
	Identity          []chaosstudioexperiment.IdentityState  `json:"identity"`
	Selectors         []chaosstudioexperiment.SelectorsState `json:"selectors"`
	Steps             []chaosstudioexperiment.StepsState     `json:"steps"`
	Timeouts          *chaosstudioexperiment.TimeoutsState   `json:"timeouts"`
}
