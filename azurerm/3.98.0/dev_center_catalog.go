// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	devcentercatalog "github.com/golingon/terraproviders/azurerm/3.98.0/devcentercatalog"
	"io"
)

// NewDevCenterCatalog creates a new instance of [DevCenterCatalog].
func NewDevCenterCatalog(name string, args DevCenterCatalogArgs) *DevCenterCatalog {
	return &DevCenterCatalog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevCenterCatalog)(nil)

// DevCenterCatalog represents the Terraform resource azurerm_dev_center_catalog.
type DevCenterCatalog struct {
	Name      string
	Args      DevCenterCatalogArgs
	state     *devCenterCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevCenterCatalog].
func (dcc *DevCenterCatalog) Type() string {
	return "azurerm_dev_center_catalog"
}

// LocalName returns the local name for [DevCenterCatalog].
func (dcc *DevCenterCatalog) LocalName() string {
	return dcc.Name
}

// Configuration returns the configuration (args) for [DevCenterCatalog].
func (dcc *DevCenterCatalog) Configuration() interface{} {
	return dcc.Args
}

// DependOn is used for other resources to depend on [DevCenterCatalog].
func (dcc *DevCenterCatalog) DependOn() terra.Reference {
	return terra.ReferenceResource(dcc)
}

// Dependencies returns the list of resources [DevCenterCatalog] depends_on.
func (dcc *DevCenterCatalog) Dependencies() terra.Dependencies {
	return dcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevCenterCatalog].
func (dcc *DevCenterCatalog) LifecycleManagement() *terra.Lifecycle {
	return dcc.Lifecycle
}

// Attributes returns the attributes for [DevCenterCatalog].
func (dcc *DevCenterCatalog) Attributes() devCenterCatalogAttributes {
	return devCenterCatalogAttributes{ref: terra.ReferenceResource(dcc)}
}

// ImportState imports the given attribute values into [DevCenterCatalog]'s state.
func (dcc *DevCenterCatalog) ImportState(av io.Reader) error {
	dcc.state = &devCenterCatalogState{}
	if err := json.NewDecoder(av).Decode(dcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcc.Type(), dcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevCenterCatalog] has state.
func (dcc *DevCenterCatalog) State() (*devCenterCatalogState, bool) {
	return dcc.state, dcc.state != nil
}

// StateMust returns the state for [DevCenterCatalog]. Panics if the state is nil.
func (dcc *DevCenterCatalog) StateMust() *devCenterCatalogState {
	if dcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcc.Type(), dcc.LocalName()))
	}
	return dcc.state
}

// DevCenterCatalogArgs contains the configurations for azurerm_dev_center_catalog.
type DevCenterCatalogArgs struct {
	// DevCenterId: string, required
	DevCenterId terra.StringValue `hcl:"dev_center_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// CatalogAdogit: optional
	CatalogAdogit *devcentercatalog.CatalogAdogit `hcl:"catalog_adogit,block"`
	// CatalogGithub: optional
	CatalogGithub *devcentercatalog.CatalogGithub `hcl:"catalog_github,block"`
	// Timeouts: optional
	Timeouts *devcentercatalog.Timeouts `hcl:"timeouts,block"`
}
type devCenterCatalogAttributes struct {
	ref terra.Reference
}

// DevCenterId returns a reference to field dev_center_id of azurerm_dev_center_catalog.
func (dcc devCenterCatalogAttributes) DevCenterId() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("dev_center_id"))
}

// Id returns a reference to field id of azurerm_dev_center_catalog.
func (dcc devCenterCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_dev_center_catalog.
func (dcc devCenterCatalogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_dev_center_catalog.
func (dcc devCenterCatalogAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("resource_group_name"))
}

func (dcc devCenterCatalogAttributes) CatalogAdogit() terra.ListValue[devcentercatalog.CatalogAdogitAttributes] {
	return terra.ReferenceAsList[devcentercatalog.CatalogAdogitAttributes](dcc.ref.Append("catalog_adogit"))
}

func (dcc devCenterCatalogAttributes) CatalogGithub() terra.ListValue[devcentercatalog.CatalogGithubAttributes] {
	return terra.ReferenceAsList[devcentercatalog.CatalogGithubAttributes](dcc.ref.Append("catalog_github"))
}

func (dcc devCenterCatalogAttributes) Timeouts() devcentercatalog.TimeoutsAttributes {
	return terra.ReferenceAsSingle[devcentercatalog.TimeoutsAttributes](dcc.ref.Append("timeouts"))
}

type devCenterCatalogState struct {
	DevCenterId       string                                `json:"dev_center_id"`
	Id                string                                `json:"id"`
	Name              string                                `json:"name"`
	ResourceGroupName string                                `json:"resource_group_name"`
	CatalogAdogit     []devcentercatalog.CatalogAdogitState `json:"catalog_adogit"`
	CatalogGithub     []devcentercatalog.CatalogGithubState `json:"catalog_github"`
	Timeouts          *devcentercatalog.TimeoutsState       `json:"timeouts"`
}
