// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	keyvaultmanagedhardwaresecuritymoduleroleassignment "github.com/golingon/terraproviders/azurerm/3.98.0/keyvaultmanagedhardwaresecuritymoduleroleassignment"
	"io"
)

// NewKeyVaultManagedHardwareSecurityModuleRoleAssignment creates a new instance of [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func NewKeyVaultManagedHardwareSecurityModuleRoleAssignment(name string, args KeyVaultManagedHardwareSecurityModuleRoleAssignmentArgs) *KeyVaultManagedHardwareSecurityModuleRoleAssignment {
	return &KeyVaultManagedHardwareSecurityModuleRoleAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultManagedHardwareSecurityModuleRoleAssignment)(nil)

// KeyVaultManagedHardwareSecurityModuleRoleAssignment represents the Terraform resource azurerm_key_vault_managed_hardware_security_module_role_assignment.
type KeyVaultManagedHardwareSecurityModuleRoleAssignment struct {
	Name      string
	Args      KeyVaultManagedHardwareSecurityModuleRoleAssignmentArgs
	state     *keyVaultManagedHardwareSecurityModuleRoleAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module_role_assignment"
}

// LocalName returns the local name for [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) LocalName() string {
	return kvmhsmra.Name
}

// Configuration returns the configuration (args) for [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) Configuration() interface{} {
	return kvmhsmra.Args
}

// DependOn is used for other resources to depend on [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(kvmhsmra)
}

// Dependencies returns the list of resources [KeyVaultManagedHardwareSecurityModuleRoleAssignment] depends_on.
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) Dependencies() terra.Dependencies {
	return kvmhsmra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) LifecycleManagement() *terra.Lifecycle {
	return kvmhsmra.Lifecycle
}

// Attributes returns the attributes for [KeyVaultManagedHardwareSecurityModuleRoleAssignment].
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) Attributes() keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes {
	return keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes{ref: terra.ReferenceResource(kvmhsmra)}
}

// ImportState imports the given attribute values into [KeyVaultManagedHardwareSecurityModuleRoleAssignment]'s state.
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) ImportState(av io.Reader) error {
	kvmhsmra.state = &keyVaultManagedHardwareSecurityModuleRoleAssignmentState{}
	if err := json.NewDecoder(av).Decode(kvmhsmra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvmhsmra.Type(), kvmhsmra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyVaultManagedHardwareSecurityModuleRoleAssignment] has state.
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) State() (*keyVaultManagedHardwareSecurityModuleRoleAssignmentState, bool) {
	return kvmhsmra.state, kvmhsmra.state != nil
}

// StateMust returns the state for [KeyVaultManagedHardwareSecurityModuleRoleAssignment]. Panics if the state is nil.
func (kvmhsmra *KeyVaultManagedHardwareSecurityModuleRoleAssignment) StateMust() *keyVaultManagedHardwareSecurityModuleRoleAssignmentState {
	if kvmhsmra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvmhsmra.Type(), kvmhsmra.LocalName()))
	}
	return kvmhsmra.state
}

// KeyVaultManagedHardwareSecurityModuleRoleAssignmentArgs contains the configurations for azurerm_key_vault_managed_hardware_security_module_role_assignment.
type KeyVaultManagedHardwareSecurityModuleRoleAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// RoleDefinitionId: string, required
	RoleDefinitionId terra.StringValue `hcl:"role_definition_id,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// VaultBaseUrl: string, required
	VaultBaseUrl terra.StringValue `hcl:"vault_base_url,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *keyvaultmanagedhardwaresecuritymoduleroleassignment.Timeouts `hcl:"timeouts,block"`
}
type keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("name"))
}

// PrincipalId returns a reference to field principal_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("principal_id"))
}

// ResourceId returns a reference to field resource_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("resource_id"))
}

// RoleDefinitionId returns a reference to field role_definition_id of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) RoleDefinitionId() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("role_definition_id"))
}

// Scope returns a reference to field scope of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("scope"))
}

// VaultBaseUrl returns a reference to field vault_base_url of azurerm_key_vault_managed_hardware_security_module_role_assignment.
func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) VaultBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmra.ref.Append("vault_base_url"))
}

func (kvmhsmra keyVaultManagedHardwareSecurityModuleRoleAssignmentAttributes) Timeouts() keyvaultmanagedhardwaresecuritymoduleroleassignment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[keyvaultmanagedhardwaresecuritymoduleroleassignment.TimeoutsAttributes](kvmhsmra.ref.Append("timeouts"))
}

type keyVaultManagedHardwareSecurityModuleRoleAssignmentState struct {
	Id               string                                                             `json:"id"`
	Name             string                                                             `json:"name"`
	PrincipalId      string                                                             `json:"principal_id"`
	ResourceId       string                                                             `json:"resource_id"`
	RoleDefinitionId string                                                             `json:"role_definition_id"`
	Scope            string                                                             `json:"scope"`
	VaultBaseUrl     string                                                             `json:"vault_base_url"`
	Timeouts         *keyvaultmanagedhardwaresecuritymoduleroleassignment.TimeoutsState `json:"timeouts"`
}
