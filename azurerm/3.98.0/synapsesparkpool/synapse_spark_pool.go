// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package synapsesparkpool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoPause struct {
	// DelayInMinutes: number, required
	DelayInMinutes terra.NumberValue `hcl:"delay_in_minutes,attr" validate:"required"`
}

type AutoScale struct {
	// MaxNodeCount: number, required
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr" validate:"required"`
	// MinNodeCount: number, required
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr" validate:"required"`
}

type LibraryRequirement struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Filename: string, required
	Filename terra.StringValue `hcl:"filename,attr" validate:"required"`
}

type SparkConfig struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Filename: string, required
	Filename terra.StringValue `hcl:"filename,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AutoPauseAttributes struct {
	ref terra.Reference
}

func (ap AutoPauseAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap AutoPauseAttributes) InternalWithRef(ref terra.Reference) AutoPauseAttributes {
	return AutoPauseAttributes{ref: ref}
}

func (ap AutoPauseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap AutoPauseAttributes) DelayInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("delay_in_minutes"))
}

type AutoScaleAttributes struct {
	ref terra.Reference
}

func (as AutoScaleAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutoScaleAttributes) InternalWithRef(ref terra.Reference) AutoScaleAttributes {
	return AutoScaleAttributes{ref: ref}
}

func (as AutoScaleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutoScaleAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_node_count"))
}

func (as AutoScaleAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("min_node_count"))
}

type LibraryRequirementAttributes struct {
	ref terra.Reference
}

func (lr LibraryRequirementAttributes) InternalRef() (terra.Reference, error) {
	return lr.ref, nil
}

func (lr LibraryRequirementAttributes) InternalWithRef(ref terra.Reference) LibraryRequirementAttributes {
	return LibraryRequirementAttributes{ref: ref}
}

func (lr LibraryRequirementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lr.ref.InternalTokens()
}

func (lr LibraryRequirementAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("content"))
}

func (lr LibraryRequirementAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("filename"))
}

type SparkConfigAttributes struct {
	ref terra.Reference
}

func (sc SparkConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SparkConfigAttributes) InternalWithRef(ref terra.Reference) SparkConfigAttributes {
	return SparkConfigAttributes{ref: ref}
}

func (sc SparkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SparkConfigAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("content"))
}

func (sc SparkConfigAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("filename"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AutoPauseState struct {
	DelayInMinutes float64 `json:"delay_in_minutes"`
}

type AutoScaleState struct {
	MaxNodeCount float64 `json:"max_node_count"`
	MinNodeCount float64 `json:"min_node_count"`
}

type LibraryRequirementState struct {
	Content  string `json:"content"`
	Filename string `json:"filename"`
}

type SparkConfigState struct {
	Content  string `json:"content"`
	Filename string `json:"filename"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
