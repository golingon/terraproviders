// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datanginxdeployment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoScaleProfile struct{}

type FrontendPrivate struct{}

type FrontendPublic struct{}

type Identity struct{}

type LoggingStorageAccount struct{}

type NetworkInterface struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AutoScaleProfileAttributes struct {
	ref terra.Reference
}

func (asp AutoScaleProfileAttributes) InternalRef() (terra.Reference, error) {
	return asp.ref, nil
}

func (asp AutoScaleProfileAttributes) InternalWithRef(ref terra.Reference) AutoScaleProfileAttributes {
	return AutoScaleProfileAttributes{ref: ref}
}

func (asp AutoScaleProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asp.ref.InternalTokens()
}

func (asp AutoScaleProfileAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("max_capacity"))
}

func (asp AutoScaleProfileAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("min_capacity"))
}

func (asp AutoScaleProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("name"))
}

type FrontendPrivateAttributes struct {
	ref terra.Reference
}

func (fp FrontendPrivateAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp FrontendPrivateAttributes) InternalWithRef(ref terra.Reference) FrontendPrivateAttributes {
	return FrontendPrivateAttributes{ref: ref}
}

func (fp FrontendPrivateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp FrontendPrivateAttributes) AllocationMethod() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("allocation_method"))
}

func (fp FrontendPrivateAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("ip_address"))
}

func (fp FrontendPrivateAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("subnet_id"))
}

type FrontendPublicAttributes struct {
	ref terra.Reference
}

func (fp FrontendPublicAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp FrontendPublicAttributes) InternalWithRef(ref terra.Reference) FrontendPublicAttributes {
	return FrontendPublicAttributes{ref: ref}
}

func (fp FrontendPublicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp FrontendPublicAttributes) IpAddress() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("ip_address"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type LoggingStorageAccountAttributes struct {
	ref terra.Reference
}

func (lsa LoggingStorageAccountAttributes) InternalRef() (terra.Reference, error) {
	return lsa.ref, nil
}

func (lsa LoggingStorageAccountAttributes) InternalWithRef(ref terra.Reference) LoggingStorageAccountAttributes {
	return LoggingStorageAccountAttributes{ref: ref}
}

func (lsa LoggingStorageAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsa.ref.InternalTokens()
}

func (lsa LoggingStorageAccountAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(lsa.ref.Append("container_name"))
}

func (lsa LoggingStorageAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lsa.ref.Append("name"))
}

type NetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceAttributes {
	return NetworkInterfaceAttributes{ref: ref}
}

func (ni NetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AutoScaleProfileState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
	Name        string  `json:"name"`
}

type FrontendPrivateState struct {
	AllocationMethod string `json:"allocation_method"`
	IpAddress        string `json:"ip_address"`
	SubnetId         string `json:"subnet_id"`
}

type FrontendPublicState struct {
	IpAddress []string `json:"ip_address"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type LoggingStorageAccountState struct {
	ContainerName string `json:"container_name"`
	Name          string `json:"name"`
}

type NetworkInterfaceState struct {
	SubnetId string `json:"subnet_id"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
