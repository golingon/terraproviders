// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package sharedimagegallery

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Sharing struct {
	// Permission: string, required
	Permission terra.StringValue `hcl:"permission,attr" validate:"required"`
	// CommunityGallery: optional
	CommunityGallery *CommunityGallery `hcl:"community_gallery,block"`
}

type CommunityGallery struct {
	// Eula: string, required
	Eula terra.StringValue `hcl:"eula,attr" validate:"required"`
	// Prefix: string, required
	Prefix terra.StringValue `hcl:"prefix,attr" validate:"required"`
	// PublisherEmail: string, required
	PublisherEmail terra.StringValue `hcl:"publisher_email,attr" validate:"required"`
	// PublisherUri: string, required
	PublisherUri terra.StringValue `hcl:"publisher_uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SharingAttributes struct {
	ref terra.Reference
}

func (s SharingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SharingAttributes) InternalWithRef(ref terra.Reference) SharingAttributes {
	return SharingAttributes{ref: ref}
}

func (s SharingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SharingAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("permission"))
}

func (s SharingAttributes) CommunityGallery() terra.ListValue[CommunityGalleryAttributes] {
	return terra.ReferenceAsList[CommunityGalleryAttributes](s.ref.Append("community_gallery"))
}

type CommunityGalleryAttributes struct {
	ref terra.Reference
}

func (cg CommunityGalleryAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg CommunityGalleryAttributes) InternalWithRef(ref terra.Reference) CommunityGalleryAttributes {
	return CommunityGalleryAttributes{ref: ref}
}

func (cg CommunityGalleryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg CommunityGalleryAttributes) Eula() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("eula"))
}

func (cg CommunityGalleryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("name"))
}

func (cg CommunityGalleryAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("prefix"))
}

func (cg CommunityGalleryAttributes) PublisherEmail() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("publisher_email"))
}

func (cg CommunityGalleryAttributes) PublisherUri() terra.StringValue {
	return terra.ReferenceAsString(cg.ref.Append("publisher_uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SharingState struct {
	Permission       string                  `json:"permission"`
	CommunityGallery []CommunityGalleryState `json:"community_gallery"`
}

type CommunityGalleryState struct {
	Eula           string `json:"eula"`
	Name           string `json:"name"`
	Prefix         string `json:"prefix"`
	PublisherEmail string `json:"publisher_email"`
	PublisherUri   string `json:"publisher_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
