// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package workloadssapthreetiervirtualinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, required
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ThreeTierConfiguration struct {
	// AppResourceGroupName: string, required
	AppResourceGroupName terra.StringValue `hcl:"app_resource_group_name,attr" validate:"required"`
	// HighAvailabilityType: string, optional
	HighAvailabilityType terra.StringValue `hcl:"high_availability_type,attr"`
	// SecondaryIpEnabled: bool, optional
	SecondaryIpEnabled terra.BoolValue `hcl:"secondary_ip_enabled,attr"`
	// ApplicationServerConfiguration: required
	ApplicationServerConfiguration *ApplicationServerConfiguration `hcl:"application_server_configuration,block" validate:"required"`
	// CentralServerConfiguration: required
	CentralServerConfiguration *CentralServerConfiguration `hcl:"central_server_configuration,block" validate:"required"`
	// DatabaseServerConfiguration: required
	DatabaseServerConfiguration *DatabaseServerConfiguration `hcl:"database_server_configuration,block" validate:"required"`
	// ResourceNames: optional
	ResourceNames *ResourceNames `hcl:"resource_names,block"`
	// TransportCreateAndMount: optional
	TransportCreateAndMount *TransportCreateAndMount `hcl:"transport_create_and_mount,block"`
}

type ApplicationServerConfiguration struct {
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// ApplicationServerConfigurationVirtualMachineConfiguration: required
	VirtualMachineConfiguration *ApplicationServerConfigurationVirtualMachineConfiguration `hcl:"virtual_machine_configuration,block" validate:"required"`
}

type ApplicationServerConfigurationVirtualMachineConfiguration struct {
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// ApplicationServerConfigurationVirtualMachineConfigurationImage: required
	Image *ApplicationServerConfigurationVirtualMachineConfigurationImage `hcl:"image,block" validate:"required"`
	// ApplicationServerConfigurationVirtualMachineConfigurationOsProfile: required
	OsProfile *ApplicationServerConfigurationVirtualMachineConfigurationOsProfile `hcl:"os_profile,block" validate:"required"`
}

type ApplicationServerConfigurationVirtualMachineConfigurationImage struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type ApplicationServerConfigurationVirtualMachineConfigurationOsProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshPrivateKey: string, required
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr" validate:"required"`
	// SshPublicKey: string, required
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr" validate:"required"`
}

type CentralServerConfiguration struct {
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// CentralServerConfigurationVirtualMachineConfiguration: required
	VirtualMachineConfiguration *CentralServerConfigurationVirtualMachineConfiguration `hcl:"virtual_machine_configuration,block" validate:"required"`
}

type CentralServerConfigurationVirtualMachineConfiguration struct {
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// CentralServerConfigurationVirtualMachineConfigurationImage: required
	Image *CentralServerConfigurationVirtualMachineConfigurationImage `hcl:"image,block" validate:"required"`
	// CentralServerConfigurationVirtualMachineConfigurationOsProfile: required
	OsProfile *CentralServerConfigurationVirtualMachineConfigurationOsProfile `hcl:"os_profile,block" validate:"required"`
}

type CentralServerConfigurationVirtualMachineConfigurationImage struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type CentralServerConfigurationVirtualMachineConfigurationOsProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshPrivateKey: string, required
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr" validate:"required"`
	// SshPublicKey: string, required
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr" validate:"required"`
}

type DatabaseServerConfiguration struct {
	// DatabaseType: string, optional
	DatabaseType terra.StringValue `hcl:"database_type,attr"`
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// DiskVolumeConfiguration: min=0
	DiskVolumeConfiguration []DiskVolumeConfiguration `hcl:"disk_volume_configuration,block" validate:"min=0"`
	// DatabaseServerConfigurationVirtualMachineConfiguration: required
	VirtualMachineConfiguration *DatabaseServerConfigurationVirtualMachineConfiguration `hcl:"virtual_machine_configuration,block" validate:"required"`
}

type DiskVolumeConfiguration struct {
	// NumberOfDisks: number, required
	NumberOfDisks terra.NumberValue `hcl:"number_of_disks,attr" validate:"required"`
	// SizeInGb: number, required
	SizeInGb terra.NumberValue `hcl:"size_in_gb,attr" validate:"required"`
	// SkuName: string, required
	SkuName terra.StringValue `hcl:"sku_name,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type DatabaseServerConfigurationVirtualMachineConfiguration struct {
	// VirtualMachineSize: string, required
	VirtualMachineSize terra.StringValue `hcl:"virtual_machine_size,attr" validate:"required"`
	// DatabaseServerConfigurationVirtualMachineConfigurationImage: required
	Image *DatabaseServerConfigurationVirtualMachineConfigurationImage `hcl:"image,block" validate:"required"`
	// DatabaseServerConfigurationVirtualMachineConfigurationOsProfile: required
	OsProfile *DatabaseServerConfigurationVirtualMachineConfigurationOsProfile `hcl:"os_profile,block" validate:"required"`
}

type DatabaseServerConfigurationVirtualMachineConfigurationImage struct {
	// Offer: string, required
	Offer terra.StringValue `hcl:"offer,attr" validate:"required"`
	// Publisher: string, required
	Publisher terra.StringValue `hcl:"publisher,attr" validate:"required"`
	// Sku: string, required
	Sku terra.StringValue `hcl:"sku,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type DatabaseServerConfigurationVirtualMachineConfigurationOsProfile struct {
	// AdminUsername: string, required
	AdminUsername terra.StringValue `hcl:"admin_username,attr" validate:"required"`
	// SshPrivateKey: string, required
	SshPrivateKey terra.StringValue `hcl:"ssh_private_key,attr" validate:"required"`
	// SshPublicKey: string, required
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr" validate:"required"`
}

type ResourceNames struct {
	// ApplicationServer: optional
	ApplicationServer *ApplicationServer `hcl:"application_server,block"`
	// CentralServer: optional
	CentralServer *CentralServer `hcl:"central_server,block"`
	// DatabaseServer: optional
	DatabaseServer *DatabaseServer `hcl:"database_server,block"`
	// SharedStorage: optional
	SharedStorage *SharedStorage `hcl:"shared_storage,block"`
}

type ApplicationServer struct {
	// AvailabilitySetName: string, optional
	AvailabilitySetName terra.StringValue `hcl:"availability_set_name,attr"`
	// ApplicationServerVirtualMachine: min=0
	VirtualMachine []ApplicationServerVirtualMachine `hcl:"virtual_machine,block" validate:"min=0"`
}

type ApplicationServerVirtualMachine struct {
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// NetworkInterfaceNames: list of string, optional
	NetworkInterfaceNames terra.ListValue[terra.StringValue] `hcl:"network_interface_names,attr"`
	// OsDiskName: string, optional
	OsDiskName terra.StringValue `hcl:"os_disk_name,attr"`
	// VirtualMachineName: string, optional
	VirtualMachineName terra.StringValue `hcl:"virtual_machine_name,attr"`
	// ApplicationServerVirtualMachineDataDisk: min=0
	DataDisk []ApplicationServerVirtualMachineDataDisk `hcl:"data_disk,block" validate:"min=0"`
}

type ApplicationServerVirtualMachineDataDisk struct {
	// Names: list of string, required
	Names terra.ListValue[terra.StringValue] `hcl:"names,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type CentralServer struct {
	// AvailabilitySetName: string, optional
	AvailabilitySetName terra.StringValue `hcl:"availability_set_name,attr"`
	// CentralServerLoadBalancer: optional
	LoadBalancer *CentralServerLoadBalancer `hcl:"load_balancer,block"`
	// CentralServerVirtualMachine: min=0
	VirtualMachine []CentralServerVirtualMachine `hcl:"virtual_machine,block" validate:"min=0"`
}

type CentralServerLoadBalancer struct {
	// BackendPoolNames: list of string, optional
	BackendPoolNames terra.ListValue[terra.StringValue] `hcl:"backend_pool_names,attr"`
	// FrontendIpConfigurationNames: list of string, optional
	FrontendIpConfigurationNames terra.ListValue[terra.StringValue] `hcl:"frontend_ip_configuration_names,attr"`
	// HealthProbeNames: list of string, optional
	HealthProbeNames terra.ListValue[terra.StringValue] `hcl:"health_probe_names,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type CentralServerVirtualMachine struct {
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// NetworkInterfaceNames: list of string, optional
	NetworkInterfaceNames terra.ListValue[terra.StringValue] `hcl:"network_interface_names,attr"`
	// OsDiskName: string, optional
	OsDiskName terra.StringValue `hcl:"os_disk_name,attr"`
	// VirtualMachineName: string, optional
	VirtualMachineName terra.StringValue `hcl:"virtual_machine_name,attr"`
	// CentralServerVirtualMachineDataDisk: min=0
	DataDisk []CentralServerVirtualMachineDataDisk `hcl:"data_disk,block" validate:"min=0"`
}

type CentralServerVirtualMachineDataDisk struct {
	// Names: list of string, required
	Names terra.ListValue[terra.StringValue] `hcl:"names,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type DatabaseServer struct {
	// AvailabilitySetName: string, optional
	AvailabilitySetName terra.StringValue `hcl:"availability_set_name,attr"`
	// DatabaseServerLoadBalancer: optional
	LoadBalancer *DatabaseServerLoadBalancer `hcl:"load_balancer,block"`
	// DatabaseServerVirtualMachine: min=0
	VirtualMachine []DatabaseServerVirtualMachine `hcl:"virtual_machine,block" validate:"min=0"`
}

type DatabaseServerLoadBalancer struct {
	// BackendPoolNames: list of string, optional
	BackendPoolNames terra.ListValue[terra.StringValue] `hcl:"backend_pool_names,attr"`
	// FrontendIpConfigurationNames: list of string, optional
	FrontendIpConfigurationNames terra.ListValue[terra.StringValue] `hcl:"frontend_ip_configuration_names,attr"`
	// HealthProbeNames: list of string, optional
	HealthProbeNames terra.ListValue[terra.StringValue] `hcl:"health_probe_names,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type DatabaseServerVirtualMachine struct {
	// HostName: string, optional
	HostName terra.StringValue `hcl:"host_name,attr"`
	// NetworkInterfaceNames: list of string, optional
	NetworkInterfaceNames terra.ListValue[terra.StringValue] `hcl:"network_interface_names,attr"`
	// OsDiskName: string, optional
	OsDiskName terra.StringValue `hcl:"os_disk_name,attr"`
	// VirtualMachineName: string, optional
	VirtualMachineName terra.StringValue `hcl:"virtual_machine_name,attr"`
	// DatabaseServerVirtualMachineDataDisk: min=0
	DataDisk []DatabaseServerVirtualMachineDataDisk `hcl:"data_disk,block" validate:"min=0"`
}

type DatabaseServerVirtualMachineDataDisk struct {
	// Names: list of string, required
	Names terra.ListValue[terra.StringValue] `hcl:"names,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type SharedStorage struct {
	// AccountName: string, optional
	AccountName terra.StringValue `hcl:"account_name,attr"`
	// PrivateEndpointName: string, optional
	PrivateEndpointName terra.StringValue `hcl:"private_endpoint_name,attr"`
}

type TransportCreateAndMount struct {
	// ResourceGroupId: string, optional
	ResourceGroupId terra.StringValue `hcl:"resource_group_id,attr"`
	// StorageAccountName: string, optional
	StorageAccountName terra.StringValue `hcl:"storage_account_name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type ThreeTierConfigurationAttributes struct {
	ref terra.Reference
}

func (ttc ThreeTierConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ttc.ref, nil
}

func (ttc ThreeTierConfigurationAttributes) InternalWithRef(ref terra.Reference) ThreeTierConfigurationAttributes {
	return ThreeTierConfigurationAttributes{ref: ref}
}

func (ttc ThreeTierConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ttc.ref.InternalTokens()
}

func (ttc ThreeTierConfigurationAttributes) AppResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(ttc.ref.Append("app_resource_group_name"))
}

func (ttc ThreeTierConfigurationAttributes) HighAvailabilityType() terra.StringValue {
	return terra.ReferenceAsString(ttc.ref.Append("high_availability_type"))
}

func (ttc ThreeTierConfigurationAttributes) SecondaryIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ttc.ref.Append("secondary_ip_enabled"))
}

func (ttc ThreeTierConfigurationAttributes) ApplicationServerConfiguration() terra.ListValue[ApplicationServerConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationServerConfigurationAttributes](ttc.ref.Append("application_server_configuration"))
}

func (ttc ThreeTierConfigurationAttributes) CentralServerConfiguration() terra.ListValue[CentralServerConfigurationAttributes] {
	return terra.ReferenceAsList[CentralServerConfigurationAttributes](ttc.ref.Append("central_server_configuration"))
}

func (ttc ThreeTierConfigurationAttributes) DatabaseServerConfiguration() terra.ListValue[DatabaseServerConfigurationAttributes] {
	return terra.ReferenceAsList[DatabaseServerConfigurationAttributes](ttc.ref.Append("database_server_configuration"))
}

func (ttc ThreeTierConfigurationAttributes) ResourceNames() terra.ListValue[ResourceNamesAttributes] {
	return terra.ReferenceAsList[ResourceNamesAttributes](ttc.ref.Append("resource_names"))
}

func (ttc ThreeTierConfigurationAttributes) TransportCreateAndMount() terra.ListValue[TransportCreateAndMountAttributes] {
	return terra.ReferenceAsList[TransportCreateAndMountAttributes](ttc.ref.Append("transport_create_and_mount"))
}

type ApplicationServerConfigurationAttributes struct {
	ref terra.Reference
}

func (asc ApplicationServerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc ApplicationServerConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationServerConfigurationAttributes {
	return ApplicationServerConfigurationAttributes{ref: ref}
}

func (asc ApplicationServerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc ApplicationServerConfigurationAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("instance_count"))
}

func (asc ApplicationServerConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("subnet_id"))
}

func (asc ApplicationServerConfigurationAttributes) VirtualMachineConfiguration() terra.ListValue[ApplicationServerConfigurationVirtualMachineConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationServerConfigurationVirtualMachineConfigurationAttributes](asc.ref.Append("virtual_machine_configuration"))
}

type ApplicationServerConfigurationVirtualMachineConfigurationAttributes struct {
	ref terra.Reference
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationServerConfigurationVirtualMachineConfigurationAttributes {
	return ApplicationServerConfigurationVirtualMachineConfigurationAttributes{ref: ref}
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("virtual_machine_size"))
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) Image() terra.ListValue[ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes] {
	return terra.ReferenceAsList[ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes](vmc.ref.Append("image"))
}

func (vmc ApplicationServerConfigurationVirtualMachineConfigurationAttributes) OsProfile() terra.ListValue[ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes] {
	return terra.ReferenceAsList[ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes](vmc.ref.Append("os_profile"))
}

type ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes struct {
	ref terra.Reference
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) InternalWithRef(ref terra.Reference) ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes {
	return ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes{ref: ref}
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("offer"))
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("publisher"))
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sku"))
}

func (i ApplicationServerConfigurationVirtualMachineConfigurationImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes struct {
	ref terra.Reference
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalWithRef(ref terra.Reference) ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes {
	return ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes{ref: ref}
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_private_key"))
}

func (op ApplicationServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_public_key"))
}

type CentralServerConfigurationAttributes struct {
	ref terra.Reference
}

func (csc CentralServerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return csc.ref, nil
}

func (csc CentralServerConfigurationAttributes) InternalWithRef(ref terra.Reference) CentralServerConfigurationAttributes {
	return CentralServerConfigurationAttributes{ref: ref}
}

func (csc CentralServerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csc.ref.InternalTokens()
}

func (csc CentralServerConfigurationAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(csc.ref.Append("instance_count"))
}

func (csc CentralServerConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(csc.ref.Append("subnet_id"))
}

func (csc CentralServerConfigurationAttributes) VirtualMachineConfiguration() terra.ListValue[CentralServerConfigurationVirtualMachineConfigurationAttributes] {
	return terra.ReferenceAsList[CentralServerConfigurationVirtualMachineConfigurationAttributes](csc.ref.Append("virtual_machine_configuration"))
}

type CentralServerConfigurationVirtualMachineConfigurationAttributes struct {
	ref terra.Reference
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) InternalWithRef(ref terra.Reference) CentralServerConfigurationVirtualMachineConfigurationAttributes {
	return CentralServerConfigurationVirtualMachineConfigurationAttributes{ref: ref}
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("virtual_machine_size"))
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) Image() terra.ListValue[CentralServerConfigurationVirtualMachineConfigurationImageAttributes] {
	return terra.ReferenceAsList[CentralServerConfigurationVirtualMachineConfigurationImageAttributes](vmc.ref.Append("image"))
}

func (vmc CentralServerConfigurationVirtualMachineConfigurationAttributes) OsProfile() terra.ListValue[CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes] {
	return terra.ReferenceAsList[CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes](vmc.ref.Append("os_profile"))
}

type CentralServerConfigurationVirtualMachineConfigurationImageAttributes struct {
	ref terra.Reference
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) InternalWithRef(ref terra.Reference) CentralServerConfigurationVirtualMachineConfigurationImageAttributes {
	return CentralServerConfigurationVirtualMachineConfigurationImageAttributes{ref: ref}
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("offer"))
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("publisher"))
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sku"))
}

func (i CentralServerConfigurationVirtualMachineConfigurationImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes struct {
	ref terra.Reference
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalWithRef(ref terra.Reference) CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes {
	return CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes{ref: ref}
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_private_key"))
}

func (op CentralServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_public_key"))
}

type DatabaseServerConfigurationAttributes struct {
	ref terra.Reference
}

func (dsc DatabaseServerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsc.ref, nil
}

func (dsc DatabaseServerConfigurationAttributes) InternalWithRef(ref terra.Reference) DatabaseServerConfigurationAttributes {
	return DatabaseServerConfigurationAttributes{ref: ref}
}

func (dsc DatabaseServerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsc.ref.InternalTokens()
}

func (dsc DatabaseServerConfigurationAttributes) DatabaseType() terra.StringValue {
	return terra.ReferenceAsString(dsc.ref.Append("database_type"))
}

func (dsc DatabaseServerConfigurationAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dsc.ref.Append("instance_count"))
}

func (dsc DatabaseServerConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(dsc.ref.Append("subnet_id"))
}

func (dsc DatabaseServerConfigurationAttributes) DiskVolumeConfiguration() terra.SetValue[DiskVolumeConfigurationAttributes] {
	return terra.ReferenceAsSet[DiskVolumeConfigurationAttributes](dsc.ref.Append("disk_volume_configuration"))
}

func (dsc DatabaseServerConfigurationAttributes) VirtualMachineConfiguration() terra.ListValue[DatabaseServerConfigurationVirtualMachineConfigurationAttributes] {
	return terra.ReferenceAsList[DatabaseServerConfigurationVirtualMachineConfigurationAttributes](dsc.ref.Append("virtual_machine_configuration"))
}

type DiskVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (dvc DiskVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dvc.ref, nil
}

func (dvc DiskVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) DiskVolumeConfigurationAttributes {
	return DiskVolumeConfigurationAttributes{ref: ref}
}

func (dvc DiskVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dvc.ref.InternalTokens()
}

func (dvc DiskVolumeConfigurationAttributes) NumberOfDisks() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("number_of_disks"))
}

func (dvc DiskVolumeConfigurationAttributes) SizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dvc.ref.Append("size_in_gb"))
}

func (dvc DiskVolumeConfigurationAttributes) SkuName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("sku_name"))
}

func (dvc DiskVolumeConfigurationAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("volume_name"))
}

type DatabaseServerConfigurationVirtualMachineConfigurationAttributes struct {
	ref terra.Reference
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vmc.ref, nil
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) InternalWithRef(ref terra.Reference) DatabaseServerConfigurationVirtualMachineConfigurationAttributes {
	return DatabaseServerConfigurationVirtualMachineConfigurationAttributes{ref: ref}
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmc.ref.InternalTokens()
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) VirtualMachineSize() terra.StringValue {
	return terra.ReferenceAsString(vmc.ref.Append("virtual_machine_size"))
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) Image() terra.ListValue[DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes] {
	return terra.ReferenceAsList[DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes](vmc.ref.Append("image"))
}

func (vmc DatabaseServerConfigurationVirtualMachineConfigurationAttributes) OsProfile() terra.ListValue[DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes] {
	return terra.ReferenceAsList[DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes](vmc.ref.Append("os_profile"))
}

type DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes struct {
	ref terra.Reference
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) InternalWithRef(ref terra.Reference) DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes {
	return DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes{ref: ref}
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) Offer() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("offer"))
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) Publisher() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("publisher"))
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) Sku() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sku"))
}

func (i DatabaseServerConfigurationVirtualMachineConfigurationImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("version"))
}

type DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes struct {
	ref terra.Reference
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalWithRef(ref terra.Reference) DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes {
	return DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes{ref: ref}
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("admin_username"))
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPrivateKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_private_key"))
}

func (op DatabaseServerConfigurationVirtualMachineConfigurationOsProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("ssh_public_key"))
}

type ResourceNamesAttributes struct {
	ref terra.Reference
}

func (rn ResourceNamesAttributes) InternalRef() (terra.Reference, error) {
	return rn.ref, nil
}

func (rn ResourceNamesAttributes) InternalWithRef(ref terra.Reference) ResourceNamesAttributes {
	return ResourceNamesAttributes{ref: ref}
}

func (rn ResourceNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rn.ref.InternalTokens()
}

func (rn ResourceNamesAttributes) ApplicationServer() terra.ListValue[ApplicationServerAttributes] {
	return terra.ReferenceAsList[ApplicationServerAttributes](rn.ref.Append("application_server"))
}

func (rn ResourceNamesAttributes) CentralServer() terra.ListValue[CentralServerAttributes] {
	return terra.ReferenceAsList[CentralServerAttributes](rn.ref.Append("central_server"))
}

func (rn ResourceNamesAttributes) DatabaseServer() terra.ListValue[DatabaseServerAttributes] {
	return terra.ReferenceAsList[DatabaseServerAttributes](rn.ref.Append("database_server"))
}

func (rn ResourceNamesAttributes) SharedStorage() terra.ListValue[SharedStorageAttributes] {
	return terra.ReferenceAsList[SharedStorageAttributes](rn.ref.Append("shared_storage"))
}

type ApplicationServerAttributes struct {
	ref terra.Reference
}

func (as ApplicationServerAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ApplicationServerAttributes) InternalWithRef(ref terra.Reference) ApplicationServerAttributes {
	return ApplicationServerAttributes{ref: ref}
}

func (as ApplicationServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ApplicationServerAttributes) AvailabilitySetName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("availability_set_name"))
}

func (as ApplicationServerAttributes) VirtualMachine() terra.ListValue[ApplicationServerVirtualMachineAttributes] {
	return terra.ReferenceAsList[ApplicationServerVirtualMachineAttributes](as.ref.Append("virtual_machine"))
}

type ApplicationServerVirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm ApplicationServerVirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm ApplicationServerVirtualMachineAttributes) InternalWithRef(ref terra.Reference) ApplicationServerVirtualMachineAttributes {
	return ApplicationServerVirtualMachineAttributes{ref: ref}
}

func (vm ApplicationServerVirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm ApplicationServerVirtualMachineAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("host_name"))
}

func (vm ApplicationServerVirtualMachineAttributes) NetworkInterfaceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vm.ref.Append("network_interface_names"))
}

func (vm ApplicationServerVirtualMachineAttributes) OsDiskName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("os_disk_name"))
}

func (vm ApplicationServerVirtualMachineAttributes) VirtualMachineName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("virtual_machine_name"))
}

func (vm ApplicationServerVirtualMachineAttributes) DataDisk() terra.SetValue[ApplicationServerVirtualMachineDataDiskAttributes] {
	return terra.ReferenceAsSet[ApplicationServerVirtualMachineDataDiskAttributes](vm.ref.Append("data_disk"))
}

type ApplicationServerVirtualMachineDataDiskAttributes struct {
	ref terra.Reference
}

func (dd ApplicationServerVirtualMachineDataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd ApplicationServerVirtualMachineDataDiskAttributes) InternalWithRef(ref terra.Reference) ApplicationServerVirtualMachineDataDiskAttributes {
	return ApplicationServerVirtualMachineDataDiskAttributes{ref: ref}
}

func (dd ApplicationServerVirtualMachineDataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd ApplicationServerVirtualMachineDataDiskAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("names"))
}

func (dd ApplicationServerVirtualMachineDataDiskAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("volume_name"))
}

type CentralServerAttributes struct {
	ref terra.Reference
}

func (cs CentralServerAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs CentralServerAttributes) InternalWithRef(ref terra.Reference) CentralServerAttributes {
	return CentralServerAttributes{ref: ref}
}

func (cs CentralServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs CentralServerAttributes) AvailabilitySetName() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("availability_set_name"))
}

func (cs CentralServerAttributes) LoadBalancer() terra.ListValue[CentralServerLoadBalancerAttributes] {
	return terra.ReferenceAsList[CentralServerLoadBalancerAttributes](cs.ref.Append("load_balancer"))
}

func (cs CentralServerAttributes) VirtualMachine() terra.ListValue[CentralServerVirtualMachineAttributes] {
	return terra.ReferenceAsList[CentralServerVirtualMachineAttributes](cs.ref.Append("virtual_machine"))
}

type CentralServerLoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb CentralServerLoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb CentralServerLoadBalancerAttributes) InternalWithRef(ref terra.Reference) CentralServerLoadBalancerAttributes {
	return CentralServerLoadBalancerAttributes{ref: ref}
}

func (lb CentralServerLoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb CentralServerLoadBalancerAttributes) BackendPoolNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("backend_pool_names"))
}

func (lb CentralServerLoadBalancerAttributes) FrontendIpConfigurationNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("frontend_ip_configuration_names"))
}

func (lb CentralServerLoadBalancerAttributes) HealthProbeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("health_probe_names"))
}

func (lb CentralServerLoadBalancerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lb.ref.Append("name"))
}

type CentralServerVirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm CentralServerVirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm CentralServerVirtualMachineAttributes) InternalWithRef(ref terra.Reference) CentralServerVirtualMachineAttributes {
	return CentralServerVirtualMachineAttributes{ref: ref}
}

func (vm CentralServerVirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm CentralServerVirtualMachineAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("host_name"))
}

func (vm CentralServerVirtualMachineAttributes) NetworkInterfaceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vm.ref.Append("network_interface_names"))
}

func (vm CentralServerVirtualMachineAttributes) OsDiskName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("os_disk_name"))
}

func (vm CentralServerVirtualMachineAttributes) VirtualMachineName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("virtual_machine_name"))
}

func (vm CentralServerVirtualMachineAttributes) DataDisk() terra.SetValue[CentralServerVirtualMachineDataDiskAttributes] {
	return terra.ReferenceAsSet[CentralServerVirtualMachineDataDiskAttributes](vm.ref.Append("data_disk"))
}

type CentralServerVirtualMachineDataDiskAttributes struct {
	ref terra.Reference
}

func (dd CentralServerVirtualMachineDataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd CentralServerVirtualMachineDataDiskAttributes) InternalWithRef(ref terra.Reference) CentralServerVirtualMachineDataDiskAttributes {
	return CentralServerVirtualMachineDataDiskAttributes{ref: ref}
}

func (dd CentralServerVirtualMachineDataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd CentralServerVirtualMachineDataDiskAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("names"))
}

func (dd CentralServerVirtualMachineDataDiskAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("volume_name"))
}

type DatabaseServerAttributes struct {
	ref terra.Reference
}

func (ds DatabaseServerAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DatabaseServerAttributes) InternalWithRef(ref terra.Reference) DatabaseServerAttributes {
	return DatabaseServerAttributes{ref: ref}
}

func (ds DatabaseServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DatabaseServerAttributes) AvailabilitySetName() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("availability_set_name"))
}

func (ds DatabaseServerAttributes) LoadBalancer() terra.ListValue[DatabaseServerLoadBalancerAttributes] {
	return terra.ReferenceAsList[DatabaseServerLoadBalancerAttributes](ds.ref.Append("load_balancer"))
}

func (ds DatabaseServerAttributes) VirtualMachine() terra.ListValue[DatabaseServerVirtualMachineAttributes] {
	return terra.ReferenceAsList[DatabaseServerVirtualMachineAttributes](ds.ref.Append("virtual_machine"))
}

type DatabaseServerLoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb DatabaseServerLoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb DatabaseServerLoadBalancerAttributes) InternalWithRef(ref terra.Reference) DatabaseServerLoadBalancerAttributes {
	return DatabaseServerLoadBalancerAttributes{ref: ref}
}

func (lb DatabaseServerLoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb DatabaseServerLoadBalancerAttributes) BackendPoolNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("backend_pool_names"))
}

func (lb DatabaseServerLoadBalancerAttributes) FrontendIpConfigurationNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("frontend_ip_configuration_names"))
}

func (lb DatabaseServerLoadBalancerAttributes) HealthProbeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lb.ref.Append("health_probe_names"))
}

func (lb DatabaseServerLoadBalancerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lb.ref.Append("name"))
}

type DatabaseServerVirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm DatabaseServerVirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm DatabaseServerVirtualMachineAttributes) InternalWithRef(ref terra.Reference) DatabaseServerVirtualMachineAttributes {
	return DatabaseServerVirtualMachineAttributes{ref: ref}
}

func (vm DatabaseServerVirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm DatabaseServerVirtualMachineAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("host_name"))
}

func (vm DatabaseServerVirtualMachineAttributes) NetworkInterfaceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vm.ref.Append("network_interface_names"))
}

func (vm DatabaseServerVirtualMachineAttributes) OsDiskName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("os_disk_name"))
}

func (vm DatabaseServerVirtualMachineAttributes) VirtualMachineName() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("virtual_machine_name"))
}

func (vm DatabaseServerVirtualMachineAttributes) DataDisk() terra.SetValue[DatabaseServerVirtualMachineDataDiskAttributes] {
	return terra.ReferenceAsSet[DatabaseServerVirtualMachineDataDiskAttributes](vm.ref.Append("data_disk"))
}

type DatabaseServerVirtualMachineDataDiskAttributes struct {
	ref terra.Reference
}

func (dd DatabaseServerVirtualMachineDataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DatabaseServerVirtualMachineDataDiskAttributes) InternalWithRef(ref terra.Reference) DatabaseServerVirtualMachineDataDiskAttributes {
	return DatabaseServerVirtualMachineDataDiskAttributes{ref: ref}
}

func (dd DatabaseServerVirtualMachineDataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DatabaseServerVirtualMachineDataDiskAttributes) Names() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dd.ref.Append("names"))
}

func (dd DatabaseServerVirtualMachineDataDiskAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("volume_name"))
}

type SharedStorageAttributes struct {
	ref terra.Reference
}

func (ss SharedStorageAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SharedStorageAttributes) InternalWithRef(ref terra.Reference) SharedStorageAttributes {
	return SharedStorageAttributes{ref: ref}
}

func (ss SharedStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SharedStorageAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("account_name"))
}

func (ss SharedStorageAttributes) PrivateEndpointName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("private_endpoint_name"))
}

type TransportCreateAndMountAttributes struct {
	ref terra.Reference
}

func (tcam TransportCreateAndMountAttributes) InternalRef() (terra.Reference, error) {
	return tcam.ref, nil
}

func (tcam TransportCreateAndMountAttributes) InternalWithRef(ref terra.Reference) TransportCreateAndMountAttributes {
	return TransportCreateAndMountAttributes{ref: ref}
}

func (tcam TransportCreateAndMountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tcam.ref.InternalTokens()
}

func (tcam TransportCreateAndMountAttributes) ResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(tcam.ref.Append("resource_group_id"))
}

func (tcam TransportCreateAndMountAttributes) StorageAccountName() terra.StringValue {
	return terra.ReferenceAsString(tcam.ref.Append("storage_account_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	Type        string   `json:"type"`
}

type ThreeTierConfigurationState struct {
	AppResourceGroupName           string                                `json:"app_resource_group_name"`
	HighAvailabilityType           string                                `json:"high_availability_type"`
	SecondaryIpEnabled             bool                                  `json:"secondary_ip_enabled"`
	ApplicationServerConfiguration []ApplicationServerConfigurationState `json:"application_server_configuration"`
	CentralServerConfiguration     []CentralServerConfigurationState     `json:"central_server_configuration"`
	DatabaseServerConfiguration    []DatabaseServerConfigurationState    `json:"database_server_configuration"`
	ResourceNames                  []ResourceNamesState                  `json:"resource_names"`
	TransportCreateAndMount        []TransportCreateAndMountState        `json:"transport_create_and_mount"`
}

type ApplicationServerConfigurationState struct {
	InstanceCount               float64                                                          `json:"instance_count"`
	SubnetId                    string                                                           `json:"subnet_id"`
	VirtualMachineConfiguration []ApplicationServerConfigurationVirtualMachineConfigurationState `json:"virtual_machine_configuration"`
}

type ApplicationServerConfigurationVirtualMachineConfigurationState struct {
	VirtualMachineSize string                                                                    `json:"virtual_machine_size"`
	Image              []ApplicationServerConfigurationVirtualMachineConfigurationImageState     `json:"image"`
	OsProfile          []ApplicationServerConfigurationVirtualMachineConfigurationOsProfileState `json:"os_profile"`
}

type ApplicationServerConfigurationVirtualMachineConfigurationImageState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type ApplicationServerConfigurationVirtualMachineConfigurationOsProfileState struct {
	AdminUsername string `json:"admin_username"`
	SshPrivateKey string `json:"ssh_private_key"`
	SshPublicKey  string `json:"ssh_public_key"`
}

type CentralServerConfigurationState struct {
	InstanceCount               float64                                                      `json:"instance_count"`
	SubnetId                    string                                                       `json:"subnet_id"`
	VirtualMachineConfiguration []CentralServerConfigurationVirtualMachineConfigurationState `json:"virtual_machine_configuration"`
}

type CentralServerConfigurationVirtualMachineConfigurationState struct {
	VirtualMachineSize string                                                                `json:"virtual_machine_size"`
	Image              []CentralServerConfigurationVirtualMachineConfigurationImageState     `json:"image"`
	OsProfile          []CentralServerConfigurationVirtualMachineConfigurationOsProfileState `json:"os_profile"`
}

type CentralServerConfigurationVirtualMachineConfigurationImageState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type CentralServerConfigurationVirtualMachineConfigurationOsProfileState struct {
	AdminUsername string `json:"admin_username"`
	SshPrivateKey string `json:"ssh_private_key"`
	SshPublicKey  string `json:"ssh_public_key"`
}

type DatabaseServerConfigurationState struct {
	DatabaseType                string                                                        `json:"database_type"`
	InstanceCount               float64                                                       `json:"instance_count"`
	SubnetId                    string                                                        `json:"subnet_id"`
	DiskVolumeConfiguration     []DiskVolumeConfigurationState                                `json:"disk_volume_configuration"`
	VirtualMachineConfiguration []DatabaseServerConfigurationVirtualMachineConfigurationState `json:"virtual_machine_configuration"`
}

type DiskVolumeConfigurationState struct {
	NumberOfDisks float64 `json:"number_of_disks"`
	SizeInGb      float64 `json:"size_in_gb"`
	SkuName       string  `json:"sku_name"`
	VolumeName    string  `json:"volume_name"`
}

type DatabaseServerConfigurationVirtualMachineConfigurationState struct {
	VirtualMachineSize string                                                                 `json:"virtual_machine_size"`
	Image              []DatabaseServerConfigurationVirtualMachineConfigurationImageState     `json:"image"`
	OsProfile          []DatabaseServerConfigurationVirtualMachineConfigurationOsProfileState `json:"os_profile"`
}

type DatabaseServerConfigurationVirtualMachineConfigurationImageState struct {
	Offer     string `json:"offer"`
	Publisher string `json:"publisher"`
	Sku       string `json:"sku"`
	Version   string `json:"version"`
}

type DatabaseServerConfigurationVirtualMachineConfigurationOsProfileState struct {
	AdminUsername string `json:"admin_username"`
	SshPrivateKey string `json:"ssh_private_key"`
	SshPublicKey  string `json:"ssh_public_key"`
}

type ResourceNamesState struct {
	ApplicationServer []ApplicationServerState `json:"application_server"`
	CentralServer     []CentralServerState     `json:"central_server"`
	DatabaseServer    []DatabaseServerState    `json:"database_server"`
	SharedStorage     []SharedStorageState     `json:"shared_storage"`
}

type ApplicationServerState struct {
	AvailabilitySetName string                                 `json:"availability_set_name"`
	VirtualMachine      []ApplicationServerVirtualMachineState `json:"virtual_machine"`
}

type ApplicationServerVirtualMachineState struct {
	HostName              string                                         `json:"host_name"`
	NetworkInterfaceNames []string                                       `json:"network_interface_names"`
	OsDiskName            string                                         `json:"os_disk_name"`
	VirtualMachineName    string                                         `json:"virtual_machine_name"`
	DataDisk              []ApplicationServerVirtualMachineDataDiskState `json:"data_disk"`
}

type ApplicationServerVirtualMachineDataDiskState struct {
	Names      []string `json:"names"`
	VolumeName string   `json:"volume_name"`
}

type CentralServerState struct {
	AvailabilitySetName string                             `json:"availability_set_name"`
	LoadBalancer        []CentralServerLoadBalancerState   `json:"load_balancer"`
	VirtualMachine      []CentralServerVirtualMachineState `json:"virtual_machine"`
}

type CentralServerLoadBalancerState struct {
	BackendPoolNames             []string `json:"backend_pool_names"`
	FrontendIpConfigurationNames []string `json:"frontend_ip_configuration_names"`
	HealthProbeNames             []string `json:"health_probe_names"`
	Name                         string   `json:"name"`
}

type CentralServerVirtualMachineState struct {
	HostName              string                                     `json:"host_name"`
	NetworkInterfaceNames []string                                   `json:"network_interface_names"`
	OsDiskName            string                                     `json:"os_disk_name"`
	VirtualMachineName    string                                     `json:"virtual_machine_name"`
	DataDisk              []CentralServerVirtualMachineDataDiskState `json:"data_disk"`
}

type CentralServerVirtualMachineDataDiskState struct {
	Names      []string `json:"names"`
	VolumeName string   `json:"volume_name"`
}

type DatabaseServerState struct {
	AvailabilitySetName string                              `json:"availability_set_name"`
	LoadBalancer        []DatabaseServerLoadBalancerState   `json:"load_balancer"`
	VirtualMachine      []DatabaseServerVirtualMachineState `json:"virtual_machine"`
}

type DatabaseServerLoadBalancerState struct {
	BackendPoolNames             []string `json:"backend_pool_names"`
	FrontendIpConfigurationNames []string `json:"frontend_ip_configuration_names"`
	HealthProbeNames             []string `json:"health_probe_names"`
	Name                         string   `json:"name"`
}

type DatabaseServerVirtualMachineState struct {
	HostName              string                                      `json:"host_name"`
	NetworkInterfaceNames []string                                    `json:"network_interface_names"`
	OsDiskName            string                                      `json:"os_disk_name"`
	VirtualMachineName    string                                      `json:"virtual_machine_name"`
	DataDisk              []DatabaseServerVirtualMachineDataDiskState `json:"data_disk"`
}

type DatabaseServerVirtualMachineDataDiskState struct {
	Names      []string `json:"names"`
	VolumeName string   `json:"volume_name"`
}

type SharedStorageState struct {
	AccountName         string `json:"account_name"`
	PrivateEndpointName string `json:"private_endpoint_name"`
}

type TransportCreateAndMountState struct {
	ResourceGroupId    string `json:"resource_group_id"`
	StorageAccountName string `json:"storage_account_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
