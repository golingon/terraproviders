// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package privateendpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomDnsConfigs struct{}

type NetworkInterface struct{}

type PrivateDnsZoneConfigs struct {
	// RecordSets: min=0
	RecordSets []RecordSets `hcl:"record_sets,block" validate:"min=0"`
}

type RecordSets struct{}

type IpConfiguration struct {
	// MemberName: string, optional
	MemberName terra.StringValue `hcl:"member_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateIpAddress: string, required
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr" validate:"required"`
	// SubresourceName: string, optional
	SubresourceName terra.StringValue `hcl:"subresource_name,attr"`
}

type PrivateDnsZoneGroup struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateDnsZoneIds: list of string, required
	PrivateDnsZoneIds terra.ListValue[terra.StringValue] `hcl:"private_dns_zone_ids,attr" validate:"required"`
}

type PrivateServiceConnection struct {
	// IsManualConnection: bool, required
	IsManualConnection terra.BoolValue `hcl:"is_manual_connection,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PrivateConnectionResourceAlias: string, optional
	PrivateConnectionResourceAlias terra.StringValue `hcl:"private_connection_resource_alias,attr"`
	// PrivateConnectionResourceId: string, optional
	PrivateConnectionResourceId terra.StringValue `hcl:"private_connection_resource_id,attr"`
	// RequestMessage: string, optional
	RequestMessage terra.StringValue `hcl:"request_message,attr"`
	// SubresourceNames: list of string, optional
	SubresourceNames terra.ListValue[terra.StringValue] `hcl:"subresource_names,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CustomDnsConfigsAttributes struct {
	ref terra.Reference
}

func (cdc CustomDnsConfigsAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc CustomDnsConfigsAttributes) InternalWithRef(ref terra.Reference) CustomDnsConfigsAttributes {
	return CustomDnsConfigsAttributes{ref: ref}
}

func (cdc CustomDnsConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc CustomDnsConfigsAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("fqdn"))
}

func (cdc CustomDnsConfigsAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cdc.ref.Append("ip_addresses"))
}

type NetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceAttributes {
	return NetworkInterfaceAttributes{ref: ref}
}

func (ni NetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("id"))
}

func (ni NetworkInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("name"))
}

type PrivateDnsZoneConfigsAttributes struct {
	ref terra.Reference
}

func (pdzc PrivateDnsZoneConfigsAttributes) InternalRef() (terra.Reference, error) {
	return pdzc.ref, nil
}

func (pdzc PrivateDnsZoneConfigsAttributes) InternalWithRef(ref terra.Reference) PrivateDnsZoneConfigsAttributes {
	return PrivateDnsZoneConfigsAttributes{ref: ref}
}

func (pdzc PrivateDnsZoneConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdzc.ref.InternalTokens()
}

func (pdzc PrivateDnsZoneConfigsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pdzc.ref.Append("id"))
}

func (pdzc PrivateDnsZoneConfigsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pdzc.ref.Append("name"))
}

func (pdzc PrivateDnsZoneConfigsAttributes) PrivateDnsZoneId() terra.StringValue {
	return terra.ReferenceAsString(pdzc.ref.Append("private_dns_zone_id"))
}

func (pdzc PrivateDnsZoneConfigsAttributes) RecordSets() terra.ListValue[RecordSetsAttributes] {
	return terra.ReferenceAsList[RecordSetsAttributes](pdzc.ref.Append("record_sets"))
}

type RecordSetsAttributes struct {
	ref terra.Reference
}

func (rs RecordSetsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecordSetsAttributes) InternalWithRef(ref terra.Reference) RecordSetsAttributes {
	return RecordSetsAttributes{ref: ref}
}

func (rs RecordSetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecordSetsAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("fqdn"))
}

func (rs RecordSetsAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rs.ref.Append("ip_addresses"))
}

func (rs RecordSetsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("name"))
}

func (rs RecordSetsAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("ttl"))
}

func (rs RecordSetsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("type"))
}

type IpConfigurationAttributes struct {
	ref terra.Reference
}

func (ic IpConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IpConfigurationAttributes) InternalWithRef(ref terra.Reference) IpConfigurationAttributes {
	return IpConfigurationAttributes{ref: ref}
}

func (ic IpConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IpConfigurationAttributes) MemberName() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("member_name"))
}

func (ic IpConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic IpConfigurationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("private_ip_address"))
}

func (ic IpConfigurationAttributes) SubresourceName() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("subresource_name"))
}

type PrivateDnsZoneGroupAttributes struct {
	ref terra.Reference
}

func (pdzg PrivateDnsZoneGroupAttributes) InternalRef() (terra.Reference, error) {
	return pdzg.ref, nil
}

func (pdzg PrivateDnsZoneGroupAttributes) InternalWithRef(ref terra.Reference) PrivateDnsZoneGroupAttributes {
	return PrivateDnsZoneGroupAttributes{ref: ref}
}

func (pdzg PrivateDnsZoneGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdzg.ref.InternalTokens()
}

func (pdzg PrivateDnsZoneGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pdzg.ref.Append("id"))
}

func (pdzg PrivateDnsZoneGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pdzg.ref.Append("name"))
}

func (pdzg PrivateDnsZoneGroupAttributes) PrivateDnsZoneIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pdzg.ref.Append("private_dns_zone_ids"))
}

type PrivateServiceConnectionAttributes struct {
	ref terra.Reference
}

func (psc PrivateServiceConnectionAttributes) InternalRef() (terra.Reference, error) {
	return psc.ref, nil
}

func (psc PrivateServiceConnectionAttributes) InternalWithRef(ref terra.Reference) PrivateServiceConnectionAttributes {
	return PrivateServiceConnectionAttributes{ref: ref}
}

func (psc PrivateServiceConnectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psc.ref.InternalTokens()
}

func (psc PrivateServiceConnectionAttributes) IsManualConnection() terra.BoolValue {
	return terra.ReferenceAsBool(psc.ref.Append("is_manual_connection"))
}

func (psc PrivateServiceConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("name"))
}

func (psc PrivateServiceConnectionAttributes) PrivateConnectionResourceAlias() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("private_connection_resource_alias"))
}

func (psc PrivateServiceConnectionAttributes) PrivateConnectionResourceId() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("private_connection_resource_id"))
}

func (psc PrivateServiceConnectionAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("private_ip_address"))
}

func (psc PrivateServiceConnectionAttributes) RequestMessage() terra.StringValue {
	return terra.ReferenceAsString(psc.ref.Append("request_message"))
}

func (psc PrivateServiceConnectionAttributes) SubresourceNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](psc.ref.Append("subresource_names"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CustomDnsConfigsState struct {
	Fqdn        string   `json:"fqdn"`
	IpAddresses []string `json:"ip_addresses"`
}

type NetworkInterfaceState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type PrivateDnsZoneConfigsState struct {
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	PrivateDnsZoneId string            `json:"private_dns_zone_id"`
	RecordSets       []RecordSetsState `json:"record_sets"`
}

type RecordSetsState struct {
	Fqdn        string   `json:"fqdn"`
	IpAddresses []string `json:"ip_addresses"`
	Name        string   `json:"name"`
	Ttl         float64  `json:"ttl"`
	Type        string   `json:"type"`
}

type IpConfigurationState struct {
	MemberName       string `json:"member_name"`
	Name             string `json:"name"`
	PrivateIpAddress string `json:"private_ip_address"`
	SubresourceName  string `json:"subresource_name"`
}

type PrivateDnsZoneGroupState struct {
	Id                string   `json:"id"`
	Name              string   `json:"name"`
	PrivateDnsZoneIds []string `json:"private_dns_zone_ids"`
}

type PrivateServiceConnectionState struct {
	IsManualConnection             bool     `json:"is_manual_connection"`
	Name                           string   `json:"name"`
	PrivateConnectionResourceAlias string   `json:"private_connection_resource_alias"`
	PrivateConnectionResourceId    string   `json:"private_connection_resource_id"`
	PrivateIpAddress               string   `json:"private_ip_address"`
	RequestMessage                 string   `json:"request_message"`
	SubresourceNames               []string `json:"subresource_names"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
