// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	elasticsanvolumegroup "github.com/golingon/terraproviders/azurerm/3.98.0/elasticsanvolumegroup"
	"io"
)

// NewElasticSanVolumeGroup creates a new instance of [ElasticSanVolumeGroup].
func NewElasticSanVolumeGroup(name string, args ElasticSanVolumeGroupArgs) *ElasticSanVolumeGroup {
	return &ElasticSanVolumeGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticSanVolumeGroup)(nil)

// ElasticSanVolumeGroup represents the Terraform resource azurerm_elastic_san_volume_group.
type ElasticSanVolumeGroup struct {
	Name      string
	Args      ElasticSanVolumeGroupArgs
	state     *elasticSanVolumeGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) Type() string {
	return "azurerm_elastic_san_volume_group"
}

// LocalName returns the local name for [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) LocalName() string {
	return esvg.Name
}

// Configuration returns the configuration (args) for [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) Configuration() interface{} {
	return esvg.Args
}

// DependOn is used for other resources to depend on [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(esvg)
}

// Dependencies returns the list of resources [ElasticSanVolumeGroup] depends_on.
func (esvg *ElasticSanVolumeGroup) Dependencies() terra.Dependencies {
	return esvg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) LifecycleManagement() *terra.Lifecycle {
	return esvg.Lifecycle
}

// Attributes returns the attributes for [ElasticSanVolumeGroup].
func (esvg *ElasticSanVolumeGroup) Attributes() elasticSanVolumeGroupAttributes {
	return elasticSanVolumeGroupAttributes{ref: terra.ReferenceResource(esvg)}
}

// ImportState imports the given attribute values into [ElasticSanVolumeGroup]'s state.
func (esvg *ElasticSanVolumeGroup) ImportState(av io.Reader) error {
	esvg.state = &elasticSanVolumeGroupState{}
	if err := json.NewDecoder(av).Decode(esvg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esvg.Type(), esvg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ElasticSanVolumeGroup] has state.
func (esvg *ElasticSanVolumeGroup) State() (*elasticSanVolumeGroupState, bool) {
	return esvg.state, esvg.state != nil
}

// StateMust returns the state for [ElasticSanVolumeGroup]. Panics if the state is nil.
func (esvg *ElasticSanVolumeGroup) StateMust() *elasticSanVolumeGroupState {
	if esvg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esvg.Type(), esvg.LocalName()))
	}
	return esvg.state
}

// ElasticSanVolumeGroupArgs contains the configurations for azurerm_elastic_san_volume_group.
type ElasticSanVolumeGroupArgs struct {
	// ElasticSanId: string, required
	ElasticSanId terra.StringValue `hcl:"elastic_san_id,attr" validate:"required"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtocolType: string, optional
	ProtocolType terra.StringValue `hcl:"protocol_type,attr"`
	// Encryption: optional
	Encryption *elasticsanvolumegroup.Encryption `hcl:"encryption,block"`
	// Identity: optional
	Identity *elasticsanvolumegroup.Identity `hcl:"identity,block"`
	// NetworkRule: min=0
	NetworkRule []elasticsanvolumegroup.NetworkRule `hcl:"network_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *elasticsanvolumegroup.Timeouts `hcl:"timeouts,block"`
}
type elasticSanVolumeGroupAttributes struct {
	ref terra.Reference
}

// ElasticSanId returns a reference to field elastic_san_id of azurerm_elastic_san_volume_group.
func (esvg elasticSanVolumeGroupAttributes) ElasticSanId() terra.StringValue {
	return terra.ReferenceAsString(esvg.ref.Append("elastic_san_id"))
}

// EncryptionType returns a reference to field encryption_type of azurerm_elastic_san_volume_group.
func (esvg elasticSanVolumeGroupAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(esvg.ref.Append("encryption_type"))
}

// Id returns a reference to field id of azurerm_elastic_san_volume_group.
func (esvg elasticSanVolumeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(esvg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_elastic_san_volume_group.
func (esvg elasticSanVolumeGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(esvg.ref.Append("name"))
}

// ProtocolType returns a reference to field protocol_type of azurerm_elastic_san_volume_group.
func (esvg elasticSanVolumeGroupAttributes) ProtocolType() terra.StringValue {
	return terra.ReferenceAsString(esvg.ref.Append("protocol_type"))
}

func (esvg elasticSanVolumeGroupAttributes) Encryption() terra.ListValue[elasticsanvolumegroup.EncryptionAttributes] {
	return terra.ReferenceAsList[elasticsanvolumegroup.EncryptionAttributes](esvg.ref.Append("encryption"))
}

func (esvg elasticSanVolumeGroupAttributes) Identity() terra.ListValue[elasticsanvolumegroup.IdentityAttributes] {
	return terra.ReferenceAsList[elasticsanvolumegroup.IdentityAttributes](esvg.ref.Append("identity"))
}

func (esvg elasticSanVolumeGroupAttributes) NetworkRule() terra.ListValue[elasticsanvolumegroup.NetworkRuleAttributes] {
	return terra.ReferenceAsList[elasticsanvolumegroup.NetworkRuleAttributes](esvg.ref.Append("network_rule"))
}

func (esvg elasticSanVolumeGroupAttributes) Timeouts() elasticsanvolumegroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[elasticsanvolumegroup.TimeoutsAttributes](esvg.ref.Append("timeouts"))
}

type elasticSanVolumeGroupState struct {
	ElasticSanId   string                                   `json:"elastic_san_id"`
	EncryptionType string                                   `json:"encryption_type"`
	Id             string                                   `json:"id"`
	Name           string                                   `json:"name"`
	ProtocolType   string                                   `json:"protocol_type"`
	Encryption     []elasticsanvolumegroup.EncryptionState  `json:"encryption"`
	Identity       []elasticsanvolumegroup.IdentityState    `json:"identity"`
	NetworkRule    []elasticsanvolumegroup.NetworkRuleState `json:"network_rule"`
	Timeouts       *elasticsanvolumegroup.TimeoutsState     `json:"timeouts"`
}
