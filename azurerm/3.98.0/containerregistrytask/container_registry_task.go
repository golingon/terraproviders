// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package containerregistrytask

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AgentSetting struct {
	// Cpu: number, required
	Cpu terra.NumberValue `hcl:"cpu,attr" validate:"required"`
}

type BaseImageTrigger struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// UpdateTriggerEndpoint: string, optional
	UpdateTriggerEndpoint terra.StringValue `hcl:"update_trigger_endpoint,attr"`
	// UpdateTriggerPayloadType: string, optional
	UpdateTriggerPayloadType terra.StringValue `hcl:"update_trigger_payload_type,attr"`
}

type DockerStep struct {
	// Arguments: map of string, optional
	Arguments terra.MapValue[terra.StringValue] `hcl:"arguments,attr"`
	// CacheEnabled: bool, optional
	CacheEnabled terra.BoolValue `hcl:"cache_enabled,attr"`
	// ContextAccessToken: string, required
	ContextAccessToken terra.StringValue `hcl:"context_access_token,attr" validate:"required"`
	// ContextPath: string, required
	ContextPath terra.StringValue `hcl:"context_path,attr" validate:"required"`
	// DockerfilePath: string, required
	DockerfilePath terra.StringValue `hcl:"dockerfile_path,attr" validate:"required"`
	// ImageNames: list of string, optional
	ImageNames terra.ListValue[terra.StringValue] `hcl:"image_names,attr"`
	// PushEnabled: bool, optional
	PushEnabled terra.BoolValue `hcl:"push_enabled,attr"`
	// SecretArguments: map of string, optional
	SecretArguments terra.MapValue[terra.StringValue] `hcl:"secret_arguments,attr"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
}

type EncodedStep struct {
	// ContextAccessToken: string, optional
	ContextAccessToken terra.StringValue `hcl:"context_access_token,attr"`
	// ContextPath: string, optional
	ContextPath terra.StringValue `hcl:"context_path,attr"`
	// SecretValues: map of string, optional
	SecretValues terra.MapValue[terra.StringValue] `hcl:"secret_values,attr"`
	// TaskContent: string, required
	TaskContent terra.StringValue `hcl:"task_content,attr" validate:"required"`
	// ValueContent: string, optional
	ValueContent terra.StringValue `hcl:"value_content,attr"`
	// Values: map of string, optional
	Values terra.MapValue[terra.StringValue] `hcl:"values,attr"`
}

type FileStep struct {
	// ContextAccessToken: string, optional
	ContextAccessToken terra.StringValue `hcl:"context_access_token,attr"`
	// ContextPath: string, optional
	ContextPath terra.StringValue `hcl:"context_path,attr"`
	// SecretValues: map of string, optional
	SecretValues terra.MapValue[terra.StringValue] `hcl:"secret_values,attr"`
	// TaskFilePath: string, required
	TaskFilePath terra.StringValue `hcl:"task_file_path,attr" validate:"required"`
	// ValueFilePath: string, optional
	ValueFilePath terra.StringValue `hcl:"value_file_path,attr"`
	// Values: map of string, optional
	Values terra.MapValue[terra.StringValue] `hcl:"values,attr"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Platform struct {
	// Architecture: string, optional
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// Os: string, required
	Os terra.StringValue `hcl:"os,attr" validate:"required"`
	// Variant: string, optional
	Variant terra.StringValue `hcl:"variant,attr"`
}

type RegistryCredential struct {
	// Custom: min=0
	Custom []Custom `hcl:"custom,block" validate:"min=0"`
	// Source: optional
	Source *Source `hcl:"source,block"`
}

type Custom struct {
	// Identity: string, optional
	Identity terra.StringValue `hcl:"identity,attr"`
	// LoginServer: string, required
	LoginServer terra.StringValue `hcl:"login_server,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Source struct {
	// LoginMode: string, required
	LoginMode terra.StringValue `hcl:"login_mode,attr" validate:"required"`
}

type SourceTrigger struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Events: list of string, required
	Events terra.ListValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RepositoryUrl: string, required
	RepositoryUrl terra.StringValue `hcl:"repository_url,attr" validate:"required"`
	// SourceType: string, required
	SourceType terra.StringValue `hcl:"source_type,attr" validate:"required"`
	// Authentication: optional
	Authentication *Authentication `hcl:"authentication,block"`
}

type Authentication struct {
	// ExpireInSeconds: number, optional
	ExpireInSeconds terra.NumberValue `hcl:"expire_in_seconds,attr"`
	// RefreshToken: string, optional
	RefreshToken terra.StringValue `hcl:"refresh_token,attr"`
	// Scope: string, optional
	Scope terra.StringValue `hcl:"scope,attr"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// TokenType: string, required
	TokenType terra.StringValue `hcl:"token_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TimerTrigger struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
}

type AgentSettingAttributes struct {
	ref terra.Reference
}

func (as AgentSettingAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AgentSettingAttributes) InternalWithRef(ref terra.Reference) AgentSettingAttributes {
	return AgentSettingAttributes{ref: ref}
}

func (as AgentSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AgentSettingAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("cpu"))
}

type BaseImageTriggerAttributes struct {
	ref terra.Reference
}

func (bit BaseImageTriggerAttributes) InternalRef() (terra.Reference, error) {
	return bit.ref, nil
}

func (bit BaseImageTriggerAttributes) InternalWithRef(ref terra.Reference) BaseImageTriggerAttributes {
	return BaseImageTriggerAttributes{ref: ref}
}

func (bit BaseImageTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bit.ref.InternalTokens()
}

func (bit BaseImageTriggerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bit.ref.Append("enabled"))
}

func (bit BaseImageTriggerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bit.ref.Append("name"))
}

func (bit BaseImageTriggerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(bit.ref.Append("type"))
}

func (bit BaseImageTriggerAttributes) UpdateTriggerEndpoint() terra.StringValue {
	return terra.ReferenceAsString(bit.ref.Append("update_trigger_endpoint"))
}

func (bit BaseImageTriggerAttributes) UpdateTriggerPayloadType() terra.StringValue {
	return terra.ReferenceAsString(bit.ref.Append("update_trigger_payload_type"))
}

type DockerStepAttributes struct {
	ref terra.Reference
}

func (ds DockerStepAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DockerStepAttributes) InternalWithRef(ref terra.Reference) DockerStepAttributes {
	return DockerStepAttributes{ref: ref}
}

func (ds DockerStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DockerStepAttributes) Arguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ds.ref.Append("arguments"))
}

func (ds DockerStepAttributes) CacheEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ds.ref.Append("cache_enabled"))
}

func (ds DockerStepAttributes) ContextAccessToken() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("context_access_token"))
}

func (ds DockerStepAttributes) ContextPath() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("context_path"))
}

func (ds DockerStepAttributes) DockerfilePath() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("dockerfile_path"))
}

func (ds DockerStepAttributes) ImageNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ds.ref.Append("image_names"))
}

func (ds DockerStepAttributes) PushEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ds.ref.Append("push_enabled"))
}

func (ds DockerStepAttributes) SecretArguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ds.ref.Append("secret_arguments"))
}

func (ds DockerStepAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("target"))
}

type EncodedStepAttributes struct {
	ref terra.Reference
}

func (es EncodedStepAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EncodedStepAttributes) InternalWithRef(ref terra.Reference) EncodedStepAttributes {
	return EncodedStepAttributes{ref: ref}
}

func (es EncodedStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EncodedStepAttributes) ContextAccessToken() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("context_access_token"))
}

func (es EncodedStepAttributes) ContextPath() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("context_path"))
}

func (es EncodedStepAttributes) SecretValues() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](es.ref.Append("secret_values"))
}

func (es EncodedStepAttributes) TaskContent() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("task_content"))
}

func (es EncodedStepAttributes) ValueContent() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("value_content"))
}

func (es EncodedStepAttributes) Values() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](es.ref.Append("values"))
}

type FileStepAttributes struct {
	ref terra.Reference
}

func (fs FileStepAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FileStepAttributes) InternalWithRef(ref terra.Reference) FileStepAttributes {
	return FileStepAttributes{ref: ref}
}

func (fs FileStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FileStepAttributes) ContextAccessToken() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("context_access_token"))
}

func (fs FileStepAttributes) ContextPath() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("context_path"))
}

func (fs FileStepAttributes) SecretValues() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fs.ref.Append("secret_values"))
}

func (fs FileStepAttributes) TaskFilePath() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("task_file_path"))
}

func (fs FileStepAttributes) ValueFilePath() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("value_file_path"))
}

func (fs FileStepAttributes) Values() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fs.ref.Append("values"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type PlatformAttributes struct {
	ref terra.Reference
}

func (p PlatformAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlatformAttributes) InternalWithRef(ref terra.Reference) PlatformAttributes {
	return PlatformAttributes{ref: ref}
}

func (p PlatformAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlatformAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("architecture"))
}

func (p PlatformAttributes) Os() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("os"))
}

func (p PlatformAttributes) Variant() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("variant"))
}

type RegistryCredentialAttributes struct {
	ref terra.Reference
}

func (rc RegistryCredentialAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RegistryCredentialAttributes) InternalWithRef(ref terra.Reference) RegistryCredentialAttributes {
	return RegistryCredentialAttributes{ref: ref}
}

func (rc RegistryCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RegistryCredentialAttributes) Custom() terra.SetValue[CustomAttributes] {
	return terra.ReferenceAsSet[CustomAttributes](rc.ref.Append("custom"))
}

func (rc RegistryCredentialAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](rc.ref.Append("source"))
}

type CustomAttributes struct {
	ref terra.Reference
}

func (c CustomAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CustomAttributes) InternalWithRef(ref terra.Reference) CustomAttributes {
	return CustomAttributes{ref: ref}
}

func (c CustomAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CustomAttributes) Identity() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("identity"))
}

func (c CustomAttributes) LoginServer() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("login_server"))
}

func (c CustomAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("password"))
}

func (c CustomAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("username"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) LoginMode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("login_mode"))
}

type SourceTriggerAttributes struct {
	ref terra.Reference
}

func (st SourceTriggerAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st SourceTriggerAttributes) InternalWithRef(ref terra.Reference) SourceTriggerAttributes {
	return SourceTriggerAttributes{ref: ref}
}

func (st SourceTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st SourceTriggerAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("branch"))
}

func (st SourceTriggerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(st.ref.Append("enabled"))
}

func (st SourceTriggerAttributes) Events() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](st.ref.Append("events"))
}

func (st SourceTriggerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("name"))
}

func (st SourceTriggerAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("repository_url"))
}

func (st SourceTriggerAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("source_type"))
}

func (st SourceTriggerAttributes) Authentication() terra.ListValue[AuthenticationAttributes] {
	return terra.ReferenceAsList[AuthenticationAttributes](st.ref.Append("authentication"))
}

type AuthenticationAttributes struct {
	ref terra.Reference
}

func (a AuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthenticationAttributes) InternalWithRef(ref terra.Reference) AuthenticationAttributes {
	return AuthenticationAttributes{ref: ref}
}

func (a AuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthenticationAttributes) ExpireInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("expire_in_seconds"))
}

func (a AuthenticationAttributes) RefreshToken() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("refresh_token"))
}

func (a AuthenticationAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("scope"))
}

func (a AuthenticationAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("token"))
}

func (a AuthenticationAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("token_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TimerTriggerAttributes struct {
	ref terra.Reference
}

func (tt TimerTriggerAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt TimerTriggerAttributes) InternalWithRef(ref terra.Reference) TimerTriggerAttributes {
	return TimerTriggerAttributes{ref: ref}
}

func (tt TimerTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt TimerTriggerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(tt.ref.Append("enabled"))
}

func (tt TimerTriggerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("name"))
}

func (tt TimerTriggerAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("schedule"))
}

type AgentSettingState struct {
	Cpu float64 `json:"cpu"`
}

type BaseImageTriggerState struct {
	Enabled                  bool   `json:"enabled"`
	Name                     string `json:"name"`
	Type                     string `json:"type"`
	UpdateTriggerEndpoint    string `json:"update_trigger_endpoint"`
	UpdateTriggerPayloadType string `json:"update_trigger_payload_type"`
}

type DockerStepState struct {
	Arguments          map[string]string `json:"arguments"`
	CacheEnabled       bool              `json:"cache_enabled"`
	ContextAccessToken string            `json:"context_access_token"`
	ContextPath        string            `json:"context_path"`
	DockerfilePath     string            `json:"dockerfile_path"`
	ImageNames         []string          `json:"image_names"`
	PushEnabled        bool              `json:"push_enabled"`
	SecretArguments    map[string]string `json:"secret_arguments"`
	Target             string            `json:"target"`
}

type EncodedStepState struct {
	ContextAccessToken string            `json:"context_access_token"`
	ContextPath        string            `json:"context_path"`
	SecretValues       map[string]string `json:"secret_values"`
	TaskContent        string            `json:"task_content"`
	ValueContent       string            `json:"value_content"`
	Values             map[string]string `json:"values"`
}

type FileStepState struct {
	ContextAccessToken string            `json:"context_access_token"`
	ContextPath        string            `json:"context_path"`
	SecretValues       map[string]string `json:"secret_values"`
	TaskFilePath       string            `json:"task_file_path"`
	ValueFilePath      string            `json:"value_file_path"`
	Values             map[string]string `json:"values"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type PlatformState struct {
	Architecture string `json:"architecture"`
	Os           string `json:"os"`
	Variant      string `json:"variant"`
}

type RegistryCredentialState struct {
	Custom []CustomState `json:"custom"`
	Source []SourceState `json:"source"`
}

type CustomState struct {
	Identity    string `json:"identity"`
	LoginServer string `json:"login_server"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

type SourceState struct {
	LoginMode string `json:"login_mode"`
}

type SourceTriggerState struct {
	Branch         string                `json:"branch"`
	Enabled        bool                  `json:"enabled"`
	Events         []string              `json:"events"`
	Name           string                `json:"name"`
	RepositoryUrl  string                `json:"repository_url"`
	SourceType     string                `json:"source_type"`
	Authentication []AuthenticationState `json:"authentication"`
}

type AuthenticationState struct {
	ExpireInSeconds float64 `json:"expire_in_seconds"`
	RefreshToken    string  `json:"refresh_token"`
	Scope           string  `json:"scope"`
	Token           string  `json:"token"`
	TokenType       string  `json:"token_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type TimerTriggerState struct {
	Enabled  bool   `json:"enabled"`
	Name     string `json:"name"`
	Schedule string `json:"schedule"`
}
