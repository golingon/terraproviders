// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	redhatopenshiftcluster "github.com/golingon/terraproviders/azurerm/3.98.0/redhatopenshiftcluster"
	"io"
)

// NewRedhatOpenshiftCluster creates a new instance of [RedhatOpenshiftCluster].
func NewRedhatOpenshiftCluster(name string, args RedhatOpenshiftClusterArgs) *RedhatOpenshiftCluster {
	return &RedhatOpenshiftCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedhatOpenshiftCluster)(nil)

// RedhatOpenshiftCluster represents the Terraform resource azurerm_redhat_openshift_cluster.
type RedhatOpenshiftCluster struct {
	Name      string
	Args      RedhatOpenshiftClusterArgs
	state     *redhatOpenshiftClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) Type() string {
	return "azurerm_redhat_openshift_cluster"
}

// LocalName returns the local name for [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) LocalName() string {
	return roc.Name
}

// Configuration returns the configuration (args) for [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) Configuration() interface{} {
	return roc.Args
}

// DependOn is used for other resources to depend on [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(roc)
}

// Dependencies returns the list of resources [RedhatOpenshiftCluster] depends_on.
func (roc *RedhatOpenshiftCluster) Dependencies() terra.Dependencies {
	return roc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) LifecycleManagement() *terra.Lifecycle {
	return roc.Lifecycle
}

// Attributes returns the attributes for [RedhatOpenshiftCluster].
func (roc *RedhatOpenshiftCluster) Attributes() redhatOpenshiftClusterAttributes {
	return redhatOpenshiftClusterAttributes{ref: terra.ReferenceResource(roc)}
}

// ImportState imports the given attribute values into [RedhatOpenshiftCluster]'s state.
func (roc *RedhatOpenshiftCluster) ImportState(av io.Reader) error {
	roc.state = &redhatOpenshiftClusterState{}
	if err := json.NewDecoder(av).Decode(roc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", roc.Type(), roc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedhatOpenshiftCluster] has state.
func (roc *RedhatOpenshiftCluster) State() (*redhatOpenshiftClusterState, bool) {
	return roc.state, roc.state != nil
}

// StateMust returns the state for [RedhatOpenshiftCluster]. Panics if the state is nil.
func (roc *RedhatOpenshiftCluster) StateMust() *redhatOpenshiftClusterState {
	if roc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", roc.Type(), roc.LocalName()))
	}
	return roc.state
}

// RedhatOpenshiftClusterArgs contains the configurations for azurerm_redhat_openshift_cluster.
type RedhatOpenshiftClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ApiServerProfile: required
	ApiServerProfile *redhatopenshiftcluster.ApiServerProfile `hcl:"api_server_profile,block" validate:"required"`
	// ClusterProfile: required
	ClusterProfile *redhatopenshiftcluster.ClusterProfile `hcl:"cluster_profile,block" validate:"required"`
	// IngressProfile: required
	IngressProfile *redhatopenshiftcluster.IngressProfile `hcl:"ingress_profile,block" validate:"required"`
	// MainProfile: required
	MainProfile *redhatopenshiftcluster.MainProfile `hcl:"main_profile,block" validate:"required"`
	// NetworkProfile: required
	NetworkProfile *redhatopenshiftcluster.NetworkProfile `hcl:"network_profile,block" validate:"required"`
	// ServicePrincipal: required
	ServicePrincipal *redhatopenshiftcluster.ServicePrincipal `hcl:"service_principal,block" validate:"required"`
	// Timeouts: optional
	Timeouts *redhatopenshiftcluster.Timeouts `hcl:"timeouts,block"`
	// WorkerProfile: required
	WorkerProfile *redhatopenshiftcluster.WorkerProfile `hcl:"worker_profile,block" validate:"required"`
}
type redhatOpenshiftClusterAttributes struct {
	ref terra.Reference
}

// ConsoleUrl returns a reference to field console_url of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) ConsoleUrl() terra.StringValue {
	return terra.ReferenceAsString(roc.ref.Append("console_url"))
}

// Id returns a reference to field id of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(roc.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(roc.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(roc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(roc.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_redhat_openshift_cluster.
func (roc redhatOpenshiftClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](roc.ref.Append("tags"))
}

func (roc redhatOpenshiftClusterAttributes) ApiServerProfile() terra.ListValue[redhatopenshiftcluster.ApiServerProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.ApiServerProfileAttributes](roc.ref.Append("api_server_profile"))
}

func (roc redhatOpenshiftClusterAttributes) ClusterProfile() terra.ListValue[redhatopenshiftcluster.ClusterProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.ClusterProfileAttributes](roc.ref.Append("cluster_profile"))
}

func (roc redhatOpenshiftClusterAttributes) IngressProfile() terra.ListValue[redhatopenshiftcluster.IngressProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.IngressProfileAttributes](roc.ref.Append("ingress_profile"))
}

func (roc redhatOpenshiftClusterAttributes) MainProfile() terra.ListValue[redhatopenshiftcluster.MainProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.MainProfileAttributes](roc.ref.Append("main_profile"))
}

func (roc redhatOpenshiftClusterAttributes) NetworkProfile() terra.ListValue[redhatopenshiftcluster.NetworkProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.NetworkProfileAttributes](roc.ref.Append("network_profile"))
}

func (roc redhatOpenshiftClusterAttributes) ServicePrincipal() terra.ListValue[redhatopenshiftcluster.ServicePrincipalAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.ServicePrincipalAttributes](roc.ref.Append("service_principal"))
}

func (roc redhatOpenshiftClusterAttributes) Timeouts() redhatopenshiftcluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[redhatopenshiftcluster.TimeoutsAttributes](roc.ref.Append("timeouts"))
}

func (roc redhatOpenshiftClusterAttributes) WorkerProfile() terra.ListValue[redhatopenshiftcluster.WorkerProfileAttributes] {
	return terra.ReferenceAsList[redhatopenshiftcluster.WorkerProfileAttributes](roc.ref.Append("worker_profile"))
}

type redhatOpenshiftClusterState struct {
	ConsoleUrl        string                                         `json:"console_url"`
	Id                string                                         `json:"id"`
	Location          string                                         `json:"location"`
	Name              string                                         `json:"name"`
	ResourceGroupName string                                         `json:"resource_group_name"`
	Tags              map[string]string                              `json:"tags"`
	ApiServerProfile  []redhatopenshiftcluster.ApiServerProfileState `json:"api_server_profile"`
	ClusterProfile    []redhatopenshiftcluster.ClusterProfileState   `json:"cluster_profile"`
	IngressProfile    []redhatopenshiftcluster.IngressProfileState   `json:"ingress_profile"`
	MainProfile       []redhatopenshiftcluster.MainProfileState      `json:"main_profile"`
	NetworkProfile    []redhatopenshiftcluster.NetworkProfileState   `json:"network_profile"`
	ServicePrincipal  []redhatopenshiftcluster.ServicePrincipalState `json:"service_principal"`
	Timeouts          *redhatopenshiftcluster.TimeoutsState          `json:"timeouts"`
	WorkerProfile     []redhatopenshiftcluster.WorkerProfileState    `json:"worker_profile"`
}
