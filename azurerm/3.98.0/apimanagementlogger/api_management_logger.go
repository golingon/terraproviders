// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package apimanagementlogger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApplicationInsights struct {
	// InstrumentationKey: string, required
	InstrumentationKey terra.StringValue `hcl:"instrumentation_key,attr" validate:"required"`
}

type Eventhub struct {
	// ConnectionString: string, optional
	ConnectionString terra.StringValue `hcl:"connection_string,attr"`
	// EndpointUri: string, optional
	EndpointUri terra.StringValue `hcl:"endpoint_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UserAssignedIdentityClientId: string, optional
	UserAssignedIdentityClientId terra.StringValue `hcl:"user_assigned_identity_client_id,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ApplicationInsightsAttributes struct {
	ref terra.Reference
}

func (ai ApplicationInsightsAttributes) InternalRef() (terra.Reference, error) {
	return ai.ref, nil
}

func (ai ApplicationInsightsAttributes) InternalWithRef(ref terra.Reference) ApplicationInsightsAttributes {
	return ApplicationInsightsAttributes{ref: ref}
}

func (ai ApplicationInsightsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ai.ref.InternalTokens()
}

func (ai ApplicationInsightsAttributes) InstrumentationKey() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("instrumentation_key"))
}

type EventhubAttributes struct {
	ref terra.Reference
}

func (e EventhubAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EventhubAttributes) InternalWithRef(ref terra.Reference) EventhubAttributes {
	return EventhubAttributes{ref: ref}
}

func (e EventhubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EventhubAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("connection_string"))
}

func (e EventhubAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint_uri"))
}

func (e EventhubAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EventhubAttributes) UserAssignedIdentityClientId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("user_assigned_identity_client_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ApplicationInsightsState struct {
	InstrumentationKey string `json:"instrumentation_key"`
}

type EventhubState struct {
	ConnectionString             string `json:"connection_string"`
	EndpointUri                  string `json:"endpoint_uri"`
	Name                         string `json:"name"`
	UserAssignedIdentityClientId string `json:"user_assigned_identity_client_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
