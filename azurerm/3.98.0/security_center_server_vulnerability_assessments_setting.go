// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitycenterservervulnerabilityassessmentssetting "github.com/golingon/terraproviders/azurerm/3.98.0/securitycenterservervulnerabilityassessmentssetting"
	"io"
)

// NewSecurityCenterServerVulnerabilityAssessmentsSetting creates a new instance of [SecurityCenterServerVulnerabilityAssessmentsSetting].
func NewSecurityCenterServerVulnerabilityAssessmentsSetting(name string, args SecurityCenterServerVulnerabilityAssessmentsSettingArgs) *SecurityCenterServerVulnerabilityAssessmentsSetting {
	return &SecurityCenterServerVulnerabilityAssessmentsSetting{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityCenterServerVulnerabilityAssessmentsSetting)(nil)

// SecurityCenterServerVulnerabilityAssessmentsSetting represents the Terraform resource azurerm_security_center_server_vulnerability_assessments_setting.
type SecurityCenterServerVulnerabilityAssessmentsSetting struct {
	Name      string
	Args      SecurityCenterServerVulnerabilityAssessmentsSettingArgs
	state     *securityCenterServerVulnerabilityAssessmentsSettingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) Type() string {
	return "azurerm_security_center_server_vulnerability_assessments_setting"
}

// LocalName returns the local name for [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) LocalName() string {
	return scsvas.Name
}

// Configuration returns the configuration (args) for [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) Configuration() interface{} {
	return scsvas.Args
}

// DependOn is used for other resources to depend on [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) DependOn() terra.Reference {
	return terra.ReferenceResource(scsvas)
}

// Dependencies returns the list of resources [SecurityCenterServerVulnerabilityAssessmentsSetting] depends_on.
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) Dependencies() terra.Dependencies {
	return scsvas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) LifecycleManagement() *terra.Lifecycle {
	return scsvas.Lifecycle
}

// Attributes returns the attributes for [SecurityCenterServerVulnerabilityAssessmentsSetting].
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) Attributes() securityCenterServerVulnerabilityAssessmentsSettingAttributes {
	return securityCenterServerVulnerabilityAssessmentsSettingAttributes{ref: terra.ReferenceResource(scsvas)}
}

// ImportState imports the given attribute values into [SecurityCenterServerVulnerabilityAssessmentsSetting]'s state.
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) ImportState(av io.Reader) error {
	scsvas.state = &securityCenterServerVulnerabilityAssessmentsSettingState{}
	if err := json.NewDecoder(av).Decode(scsvas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scsvas.Type(), scsvas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecurityCenterServerVulnerabilityAssessmentsSetting] has state.
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) State() (*securityCenterServerVulnerabilityAssessmentsSettingState, bool) {
	return scsvas.state, scsvas.state != nil
}

// StateMust returns the state for [SecurityCenterServerVulnerabilityAssessmentsSetting]. Panics if the state is nil.
func (scsvas *SecurityCenterServerVulnerabilityAssessmentsSetting) StateMust() *securityCenterServerVulnerabilityAssessmentsSettingState {
	if scsvas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scsvas.Type(), scsvas.LocalName()))
	}
	return scsvas.state
}

// SecurityCenterServerVulnerabilityAssessmentsSettingArgs contains the configurations for azurerm_security_center_server_vulnerability_assessments_setting.
type SecurityCenterServerVulnerabilityAssessmentsSettingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VulnerabilityAssessmentProvider: string, required
	VulnerabilityAssessmentProvider terra.StringValue `hcl:"vulnerability_assessment_provider,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securitycenterservervulnerabilityassessmentssetting.Timeouts `hcl:"timeouts,block"`
}
type securityCenterServerVulnerabilityAssessmentsSettingAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_security_center_server_vulnerability_assessments_setting.
func (scsvas securityCenterServerVulnerabilityAssessmentsSettingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scsvas.ref.Append("id"))
}

// VulnerabilityAssessmentProvider returns a reference to field vulnerability_assessment_provider of azurerm_security_center_server_vulnerability_assessments_setting.
func (scsvas securityCenterServerVulnerabilityAssessmentsSettingAttributes) VulnerabilityAssessmentProvider() terra.StringValue {
	return terra.ReferenceAsString(scsvas.ref.Append("vulnerability_assessment_provider"))
}

func (scsvas securityCenterServerVulnerabilityAssessmentsSettingAttributes) Timeouts() securitycenterservervulnerabilityassessmentssetting.TimeoutsAttributes {
	return terra.ReferenceAsSingle[securitycenterservervulnerabilityassessmentssetting.TimeoutsAttributes](scsvas.ref.Append("timeouts"))
}

type securityCenterServerVulnerabilityAssessmentsSettingState struct {
	Id                              string                                                             `json:"id"`
	VulnerabilityAssessmentProvider string                                                             `json:"vulnerability_assessment_provider"`
	Timeouts                        *securitycenterservervulnerabilityassessmentssetting.TimeoutsState `json:"timeouts"`
}
