// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package provider

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Features struct {
	// ApiManagement: optional
	ApiManagement *ApiManagement `hcl:"api_management,block"`
	// AppConfiguration: optional
	AppConfiguration *AppConfiguration `hcl:"app_configuration,block"`
	// ApplicationInsights: optional
	ApplicationInsights *ApplicationInsights `hcl:"application_insights,block"`
	// CognitiveAccount: optional
	CognitiveAccount *CognitiveAccount `hcl:"cognitive_account,block"`
	// KeyVault: optional
	KeyVault *KeyVault `hcl:"key_vault,block"`
	// LogAnalyticsWorkspace: optional
	LogAnalyticsWorkspace *LogAnalyticsWorkspace `hcl:"log_analytics_workspace,block"`
	// ManagedDisk: optional
	ManagedDisk *ManagedDisk `hcl:"managed_disk,block"`
	// PostgresqlFlexibleServer: optional
	PostgresqlFlexibleServer *PostgresqlFlexibleServer `hcl:"postgresql_flexible_server,block"`
	// RecoveryService: optional
	RecoveryService *RecoveryService `hcl:"recovery_service,block"`
	// ResourceGroup: optional
	ResourceGroup *ResourceGroup `hcl:"resource_group,block"`
	// Subscription: optional
	Subscription *Subscription `hcl:"subscription,block"`
	// TemplateDeployment: optional
	TemplateDeployment *TemplateDeployment `hcl:"template_deployment,block"`
	// VirtualMachine: optional
	VirtualMachine *VirtualMachine `hcl:"virtual_machine,block"`
	// VirtualMachineScaleSet: optional
	VirtualMachineScaleSet *VirtualMachineScaleSet `hcl:"virtual_machine_scale_set,block"`
}

type ApiManagement struct {
	// PurgeSoftDeleteOnDestroy: bool, optional
	PurgeSoftDeleteOnDestroy terra.BoolValue `hcl:"purge_soft_delete_on_destroy,attr"`
	// RecoverSoftDeleted: bool, optional
	RecoverSoftDeleted terra.BoolValue `hcl:"recover_soft_deleted,attr"`
}

type AppConfiguration struct {
	// PurgeSoftDeleteOnDestroy: bool, optional
	PurgeSoftDeleteOnDestroy terra.BoolValue `hcl:"purge_soft_delete_on_destroy,attr"`
	// RecoverSoftDeleted: bool, optional
	RecoverSoftDeleted terra.BoolValue `hcl:"recover_soft_deleted,attr"`
}

type ApplicationInsights struct {
	// DisableGeneratedRule: bool, optional
	DisableGeneratedRule terra.BoolValue `hcl:"disable_generated_rule,attr"`
}

type CognitiveAccount struct {
	// PurgeSoftDeleteOnDestroy: bool, optional
	PurgeSoftDeleteOnDestroy terra.BoolValue `hcl:"purge_soft_delete_on_destroy,attr"`
}

type KeyVault struct {
	// PurgeSoftDeleteOnDestroy: bool, optional
	PurgeSoftDeleteOnDestroy terra.BoolValue `hcl:"purge_soft_delete_on_destroy,attr"`
	// PurgeSoftDeletedCertificatesOnDestroy: bool, optional
	PurgeSoftDeletedCertificatesOnDestroy terra.BoolValue `hcl:"purge_soft_deleted_certificates_on_destroy,attr"`
	// PurgeSoftDeletedHardwareSecurityModulesOnDestroy: bool, optional
	PurgeSoftDeletedHardwareSecurityModulesOnDestroy terra.BoolValue `hcl:"purge_soft_deleted_hardware_security_modules_on_destroy,attr"`
	// PurgeSoftDeletedKeysOnDestroy: bool, optional
	PurgeSoftDeletedKeysOnDestroy terra.BoolValue `hcl:"purge_soft_deleted_keys_on_destroy,attr"`
	// PurgeSoftDeletedSecretsOnDestroy: bool, optional
	PurgeSoftDeletedSecretsOnDestroy terra.BoolValue `hcl:"purge_soft_deleted_secrets_on_destroy,attr"`
	// RecoverSoftDeletedCertificates: bool, optional
	RecoverSoftDeletedCertificates terra.BoolValue `hcl:"recover_soft_deleted_certificates,attr"`
	// RecoverSoftDeletedKeyVaults: bool, optional
	RecoverSoftDeletedKeyVaults terra.BoolValue `hcl:"recover_soft_deleted_key_vaults,attr"`
	// RecoverSoftDeletedKeys: bool, optional
	RecoverSoftDeletedKeys terra.BoolValue `hcl:"recover_soft_deleted_keys,attr"`
	// RecoverSoftDeletedSecrets: bool, optional
	RecoverSoftDeletedSecrets terra.BoolValue `hcl:"recover_soft_deleted_secrets,attr"`
}

type LogAnalyticsWorkspace struct {
	// PermanentlyDeleteOnDestroy: bool, optional
	PermanentlyDeleteOnDestroy terra.BoolValue `hcl:"permanently_delete_on_destroy,attr"`
}

type ManagedDisk struct {
	// ExpandWithoutDowntime: bool, optional
	ExpandWithoutDowntime terra.BoolValue `hcl:"expand_without_downtime,attr"`
}

type PostgresqlFlexibleServer struct {
	// RestartServerOnConfigurationValueChange: bool, optional
	RestartServerOnConfigurationValueChange terra.BoolValue `hcl:"restart_server_on_configuration_value_change,attr"`
}

type RecoveryService struct {
	// PurgeProtectedItemsFromVaultOnDestroy: bool, optional
	PurgeProtectedItemsFromVaultOnDestroy terra.BoolValue `hcl:"purge_protected_items_from_vault_on_destroy,attr"`
	// VmBackupStopProtectionAndRetainDataOnDestroy: bool, optional
	VmBackupStopProtectionAndRetainDataOnDestroy terra.BoolValue `hcl:"vm_backup_stop_protection_and_retain_data_on_destroy,attr"`
}

type ResourceGroup struct {
	// PreventDeletionIfContainsResources: bool, optional
	PreventDeletionIfContainsResources terra.BoolValue `hcl:"prevent_deletion_if_contains_resources,attr"`
}

type Subscription struct {
	// PreventCancellationOnDestroy: bool, optional
	PreventCancellationOnDestroy terra.BoolValue `hcl:"prevent_cancellation_on_destroy,attr"`
}

type TemplateDeployment struct {
	// DeleteNestedItemsDuringDeletion: bool, required
	DeleteNestedItemsDuringDeletion terra.BoolValue `hcl:"delete_nested_items_during_deletion,attr" validate:"required"`
}

type VirtualMachine struct {
	// DeleteOsDiskOnDeletion: bool, optional
	DeleteOsDiskOnDeletion terra.BoolValue `hcl:"delete_os_disk_on_deletion,attr"`
	// GracefulShutdown: bool, optional
	GracefulShutdown terra.BoolValue `hcl:"graceful_shutdown,attr"`
	// SkipShutdownAndForceDelete: bool, optional
	SkipShutdownAndForceDelete terra.BoolValue `hcl:"skip_shutdown_and_force_delete,attr"`
}

type VirtualMachineScaleSet struct {
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// ReimageOnManualUpgrade: bool, optional
	ReimageOnManualUpgrade terra.BoolValue `hcl:"reimage_on_manual_upgrade,attr"`
	// RollInstancesWhenRequired: bool, optional
	RollInstancesWhenRequired terra.BoolValue `hcl:"roll_instances_when_required,attr"`
	// ScaleToZeroBeforeDeletion: bool, optional
	ScaleToZeroBeforeDeletion terra.BoolValue `hcl:"scale_to_zero_before_deletion,attr"`
}

type FeaturesAttributes struct {
	ref terra.Reference
}

func (f FeaturesAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FeaturesAttributes) InternalWithRef(ref terra.Reference) FeaturesAttributes {
	return FeaturesAttributes{ref: ref}
}

func (f FeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FeaturesAttributes) ApiManagement() terra.ListValue[ApiManagementAttributes] {
	return terra.ReferenceAsList[ApiManagementAttributes](f.ref.Append("api_management"))
}

func (f FeaturesAttributes) AppConfiguration() terra.ListValue[AppConfigurationAttributes] {
	return terra.ReferenceAsList[AppConfigurationAttributes](f.ref.Append("app_configuration"))
}

func (f FeaturesAttributes) ApplicationInsights() terra.ListValue[ApplicationInsightsAttributes] {
	return terra.ReferenceAsList[ApplicationInsightsAttributes](f.ref.Append("application_insights"))
}

func (f FeaturesAttributes) CognitiveAccount() terra.ListValue[CognitiveAccountAttributes] {
	return terra.ReferenceAsList[CognitiveAccountAttributes](f.ref.Append("cognitive_account"))
}

func (f FeaturesAttributes) KeyVault() terra.ListValue[KeyVaultAttributes] {
	return terra.ReferenceAsList[KeyVaultAttributes](f.ref.Append("key_vault"))
}

func (f FeaturesAttributes) LogAnalyticsWorkspace() terra.ListValue[LogAnalyticsWorkspaceAttributes] {
	return terra.ReferenceAsList[LogAnalyticsWorkspaceAttributes](f.ref.Append("log_analytics_workspace"))
}

func (f FeaturesAttributes) ManagedDisk() terra.ListValue[ManagedDiskAttributes] {
	return terra.ReferenceAsList[ManagedDiskAttributes](f.ref.Append("managed_disk"))
}

func (f FeaturesAttributes) PostgresqlFlexibleServer() terra.ListValue[PostgresqlFlexibleServerAttributes] {
	return terra.ReferenceAsList[PostgresqlFlexibleServerAttributes](f.ref.Append("postgresql_flexible_server"))
}

func (f FeaturesAttributes) RecoveryService() terra.ListValue[RecoveryServiceAttributes] {
	return terra.ReferenceAsList[RecoveryServiceAttributes](f.ref.Append("recovery_service"))
}

func (f FeaturesAttributes) ResourceGroup() terra.ListValue[ResourceGroupAttributes] {
	return terra.ReferenceAsList[ResourceGroupAttributes](f.ref.Append("resource_group"))
}

func (f FeaturesAttributes) Subscription() terra.ListValue[SubscriptionAttributes] {
	return terra.ReferenceAsList[SubscriptionAttributes](f.ref.Append("subscription"))
}

func (f FeaturesAttributes) TemplateDeployment() terra.ListValue[TemplateDeploymentAttributes] {
	return terra.ReferenceAsList[TemplateDeploymentAttributes](f.ref.Append("template_deployment"))
}

func (f FeaturesAttributes) VirtualMachine() terra.ListValue[VirtualMachineAttributes] {
	return terra.ReferenceAsList[VirtualMachineAttributes](f.ref.Append("virtual_machine"))
}

func (f FeaturesAttributes) VirtualMachineScaleSet() terra.ListValue[VirtualMachineScaleSetAttributes] {
	return terra.ReferenceAsList[VirtualMachineScaleSetAttributes](f.ref.Append("virtual_machine_scale_set"))
}

type ApiManagementAttributes struct {
	ref terra.Reference
}

func (am ApiManagementAttributes) InternalRef() (terra.Reference, error) {
	return am.ref, nil
}

func (am ApiManagementAttributes) InternalWithRef(ref terra.Reference) ApiManagementAttributes {
	return ApiManagementAttributes{ref: ref}
}

func (am ApiManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return am.ref.InternalTokens()
}

func (am ApiManagementAttributes) PurgeSoftDeleteOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(am.ref.Append("purge_soft_delete_on_destroy"))
}

func (am ApiManagementAttributes) RecoverSoftDeleted() terra.BoolValue {
	return terra.ReferenceAsBool(am.ref.Append("recover_soft_deleted"))
}

type AppConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AppConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AppConfigurationAttributes) InternalWithRef(ref terra.Reference) AppConfigurationAttributes {
	return AppConfigurationAttributes{ref: ref}
}

func (ac AppConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AppConfigurationAttributes) PurgeSoftDeleteOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("purge_soft_delete_on_destroy"))
}

func (ac AppConfigurationAttributes) RecoverSoftDeleted() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("recover_soft_deleted"))
}

type ApplicationInsightsAttributes struct {
	ref terra.Reference
}

func (ai ApplicationInsightsAttributes) InternalRef() (terra.Reference, error) {
	return ai.ref, nil
}

func (ai ApplicationInsightsAttributes) InternalWithRef(ref terra.Reference) ApplicationInsightsAttributes {
	return ApplicationInsightsAttributes{ref: ref}
}

func (ai ApplicationInsightsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ai.ref.InternalTokens()
}

func (ai ApplicationInsightsAttributes) DisableGeneratedRule() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("disable_generated_rule"))
}

type CognitiveAccountAttributes struct {
	ref terra.Reference
}

func (ca CognitiveAccountAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CognitiveAccountAttributes) InternalWithRef(ref terra.Reference) CognitiveAccountAttributes {
	return CognitiveAccountAttributes{ref: ref}
}

func (ca CognitiveAccountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CognitiveAccountAttributes) PurgeSoftDeleteOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("purge_soft_delete_on_destroy"))
}

type KeyVaultAttributes struct {
	ref terra.Reference
}

func (kv KeyVaultAttributes) InternalRef() (terra.Reference, error) {
	return kv.ref, nil
}

func (kv KeyVaultAttributes) InternalWithRef(ref terra.Reference) KeyVaultAttributes {
	return KeyVaultAttributes{ref: ref}
}

func (kv KeyVaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kv.ref.InternalTokens()
}

func (kv KeyVaultAttributes) PurgeSoftDeleteOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("purge_soft_delete_on_destroy"))
}

func (kv KeyVaultAttributes) PurgeSoftDeletedCertificatesOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("purge_soft_deleted_certificates_on_destroy"))
}

func (kv KeyVaultAttributes) PurgeSoftDeletedHardwareSecurityModulesOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("purge_soft_deleted_hardware_security_modules_on_destroy"))
}

func (kv KeyVaultAttributes) PurgeSoftDeletedKeysOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("purge_soft_deleted_keys_on_destroy"))
}

func (kv KeyVaultAttributes) PurgeSoftDeletedSecretsOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("purge_soft_deleted_secrets_on_destroy"))
}

func (kv KeyVaultAttributes) RecoverSoftDeletedCertificates() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("recover_soft_deleted_certificates"))
}

func (kv KeyVaultAttributes) RecoverSoftDeletedKeyVaults() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("recover_soft_deleted_key_vaults"))
}

func (kv KeyVaultAttributes) RecoverSoftDeletedKeys() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("recover_soft_deleted_keys"))
}

func (kv KeyVaultAttributes) RecoverSoftDeletedSecrets() terra.BoolValue {
	return terra.ReferenceAsBool(kv.ref.Append("recover_soft_deleted_secrets"))
}

type LogAnalyticsWorkspaceAttributes struct {
	ref terra.Reference
}

func (law LogAnalyticsWorkspaceAttributes) InternalRef() (terra.Reference, error) {
	return law.ref, nil
}

func (law LogAnalyticsWorkspaceAttributes) InternalWithRef(ref terra.Reference) LogAnalyticsWorkspaceAttributes {
	return LogAnalyticsWorkspaceAttributes{ref: ref}
}

func (law LogAnalyticsWorkspaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return law.ref.InternalTokens()
}

func (law LogAnalyticsWorkspaceAttributes) PermanentlyDeleteOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(law.ref.Append("permanently_delete_on_destroy"))
}

type ManagedDiskAttributes struct {
	ref terra.Reference
}

func (md ManagedDiskAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md ManagedDiskAttributes) InternalWithRef(ref terra.Reference) ManagedDiskAttributes {
	return ManagedDiskAttributes{ref: ref}
}

func (md ManagedDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md ManagedDiskAttributes) ExpandWithoutDowntime() terra.BoolValue {
	return terra.ReferenceAsBool(md.ref.Append("expand_without_downtime"))
}

type PostgresqlFlexibleServerAttributes struct {
	ref terra.Reference
}

func (pfs PostgresqlFlexibleServerAttributes) InternalRef() (terra.Reference, error) {
	return pfs.ref, nil
}

func (pfs PostgresqlFlexibleServerAttributes) InternalWithRef(ref terra.Reference) PostgresqlFlexibleServerAttributes {
	return PostgresqlFlexibleServerAttributes{ref: ref}
}

func (pfs PostgresqlFlexibleServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pfs.ref.InternalTokens()
}

func (pfs PostgresqlFlexibleServerAttributes) RestartServerOnConfigurationValueChange() terra.BoolValue {
	return terra.ReferenceAsBool(pfs.ref.Append("restart_server_on_configuration_value_change"))
}

type RecoveryServiceAttributes struct {
	ref terra.Reference
}

func (rs RecoveryServiceAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecoveryServiceAttributes) InternalWithRef(ref terra.Reference) RecoveryServiceAttributes {
	return RecoveryServiceAttributes{ref: ref}
}

func (rs RecoveryServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecoveryServiceAttributes) PurgeProtectedItemsFromVaultOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("purge_protected_items_from_vault_on_destroy"))
}

func (rs RecoveryServiceAttributes) VmBackupStopProtectionAndRetainDataOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("vm_backup_stop_protection_and_retain_data_on_destroy"))
}

type ResourceGroupAttributes struct {
	ref terra.Reference
}

func (rg ResourceGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg ResourceGroupAttributes) InternalWithRef(ref terra.Reference) ResourceGroupAttributes {
	return ResourceGroupAttributes{ref: ref}
}

func (rg ResourceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg ResourceGroupAttributes) PreventDeletionIfContainsResources() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("prevent_deletion_if_contains_resources"))
}

type SubscriptionAttributes struct {
	ref terra.Reference
}

func (s SubscriptionAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubscriptionAttributes) InternalWithRef(ref terra.Reference) SubscriptionAttributes {
	return SubscriptionAttributes{ref: ref}
}

func (s SubscriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubscriptionAttributes) PreventCancellationOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("prevent_cancellation_on_destroy"))
}

type TemplateDeploymentAttributes struct {
	ref terra.Reference
}

func (td TemplateDeploymentAttributes) InternalRef() (terra.Reference, error) {
	return td.ref, nil
}

func (td TemplateDeploymentAttributes) InternalWithRef(ref terra.Reference) TemplateDeploymentAttributes {
	return TemplateDeploymentAttributes{ref: ref}
}

func (td TemplateDeploymentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return td.ref.InternalTokens()
}

func (td TemplateDeploymentAttributes) DeleteNestedItemsDuringDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(td.ref.Append("delete_nested_items_during_deletion"))
}

type VirtualMachineAttributes struct {
	ref terra.Reference
}

func (vm VirtualMachineAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VirtualMachineAttributes) InternalWithRef(ref terra.Reference) VirtualMachineAttributes {
	return VirtualMachineAttributes{ref: ref}
}

func (vm VirtualMachineAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VirtualMachineAttributes) DeleteOsDiskOnDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("delete_os_disk_on_deletion"))
}

func (vm VirtualMachineAttributes) GracefulShutdown() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("graceful_shutdown"))
}

func (vm VirtualMachineAttributes) SkipShutdownAndForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("skip_shutdown_and_force_delete"))
}

type VirtualMachineScaleSetAttributes struct {
	ref terra.Reference
}

func (vmss VirtualMachineScaleSetAttributes) InternalRef() (terra.Reference, error) {
	return vmss.ref, nil
}

func (vmss VirtualMachineScaleSetAttributes) InternalWithRef(ref terra.Reference) VirtualMachineScaleSetAttributes {
	return VirtualMachineScaleSetAttributes{ref: ref}
}

func (vmss VirtualMachineScaleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmss.ref.InternalTokens()
}

func (vmss VirtualMachineScaleSetAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("force_delete"))
}

func (vmss VirtualMachineScaleSetAttributes) ReimageOnManualUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("reimage_on_manual_upgrade"))
}

func (vmss VirtualMachineScaleSetAttributes) RollInstancesWhenRequired() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("roll_instances_when_required"))
}

func (vmss VirtualMachineScaleSetAttributes) ScaleToZeroBeforeDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(vmss.ref.Append("scale_to_zero_before_deletion"))
}

type FeaturesState struct {
	ApiManagement            []ApiManagementState            `json:"api_management"`
	AppConfiguration         []AppConfigurationState         `json:"app_configuration"`
	ApplicationInsights      []ApplicationInsightsState      `json:"application_insights"`
	CognitiveAccount         []CognitiveAccountState         `json:"cognitive_account"`
	KeyVault                 []KeyVaultState                 `json:"key_vault"`
	LogAnalyticsWorkspace    []LogAnalyticsWorkspaceState    `json:"log_analytics_workspace"`
	ManagedDisk              []ManagedDiskState              `json:"managed_disk"`
	PostgresqlFlexibleServer []PostgresqlFlexibleServerState `json:"postgresql_flexible_server"`
	RecoveryService          []RecoveryServiceState          `json:"recovery_service"`
	ResourceGroup            []ResourceGroupState            `json:"resource_group"`
	Subscription             []SubscriptionState             `json:"subscription"`
	TemplateDeployment       []TemplateDeploymentState       `json:"template_deployment"`
	VirtualMachine           []VirtualMachineState           `json:"virtual_machine"`
	VirtualMachineScaleSet   []VirtualMachineScaleSetState   `json:"virtual_machine_scale_set"`
}

type ApiManagementState struct {
	PurgeSoftDeleteOnDestroy bool `json:"purge_soft_delete_on_destroy"`
	RecoverSoftDeleted       bool `json:"recover_soft_deleted"`
}

type AppConfigurationState struct {
	PurgeSoftDeleteOnDestroy bool `json:"purge_soft_delete_on_destroy"`
	RecoverSoftDeleted       bool `json:"recover_soft_deleted"`
}

type ApplicationInsightsState struct {
	DisableGeneratedRule bool `json:"disable_generated_rule"`
}

type CognitiveAccountState struct {
	PurgeSoftDeleteOnDestroy bool `json:"purge_soft_delete_on_destroy"`
}

type KeyVaultState struct {
	PurgeSoftDeleteOnDestroy                         bool `json:"purge_soft_delete_on_destroy"`
	PurgeSoftDeletedCertificatesOnDestroy            bool `json:"purge_soft_deleted_certificates_on_destroy"`
	PurgeSoftDeletedHardwareSecurityModulesOnDestroy bool `json:"purge_soft_deleted_hardware_security_modules_on_destroy"`
	PurgeSoftDeletedKeysOnDestroy                    bool `json:"purge_soft_deleted_keys_on_destroy"`
	PurgeSoftDeletedSecretsOnDestroy                 bool `json:"purge_soft_deleted_secrets_on_destroy"`
	RecoverSoftDeletedCertificates                   bool `json:"recover_soft_deleted_certificates"`
	RecoverSoftDeletedKeyVaults                      bool `json:"recover_soft_deleted_key_vaults"`
	RecoverSoftDeletedKeys                           bool `json:"recover_soft_deleted_keys"`
	RecoverSoftDeletedSecrets                        bool `json:"recover_soft_deleted_secrets"`
}

type LogAnalyticsWorkspaceState struct {
	PermanentlyDeleteOnDestroy bool `json:"permanently_delete_on_destroy"`
}

type ManagedDiskState struct {
	ExpandWithoutDowntime bool `json:"expand_without_downtime"`
}

type PostgresqlFlexibleServerState struct {
	RestartServerOnConfigurationValueChange bool `json:"restart_server_on_configuration_value_change"`
}

type RecoveryServiceState struct {
	PurgeProtectedItemsFromVaultOnDestroy        bool `json:"purge_protected_items_from_vault_on_destroy"`
	VmBackupStopProtectionAndRetainDataOnDestroy bool `json:"vm_backup_stop_protection_and_retain_data_on_destroy"`
}

type ResourceGroupState struct {
	PreventDeletionIfContainsResources bool `json:"prevent_deletion_if_contains_resources"`
}

type SubscriptionState struct {
	PreventCancellationOnDestroy bool `json:"prevent_cancellation_on_destroy"`
}

type TemplateDeploymentState struct {
	DeleteNestedItemsDuringDeletion bool `json:"delete_nested_items_during_deletion"`
}

type VirtualMachineState struct {
	DeleteOsDiskOnDeletion     bool `json:"delete_os_disk_on_deletion"`
	GracefulShutdown           bool `json:"graceful_shutdown"`
	SkipShutdownAndForceDelete bool `json:"skip_shutdown_and_force_delete"`
}

type VirtualMachineScaleSetState struct {
	ForceDelete               bool `json:"force_delete"`
	ReimageOnManualUpgrade    bool `json:"reimage_on_manual_upgrade"`
	RollInstancesWhenRequired bool `json:"roll_instances_when_required"`
	ScaleToZeroBeforeDeletion bool `json:"scale_to_zero_before_deletion"`
}
