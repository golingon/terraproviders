// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	siterecoveryvmwarereplicatedvm "github.com/golingon/terraproviders/azurerm/3.98.0/siterecoveryvmwarereplicatedvm"
	"io"
)

// NewSiteRecoveryVmwareReplicatedVm creates a new instance of [SiteRecoveryVmwareReplicatedVm].
func NewSiteRecoveryVmwareReplicatedVm(name string, args SiteRecoveryVmwareReplicatedVmArgs) *SiteRecoveryVmwareReplicatedVm {
	return &SiteRecoveryVmwareReplicatedVm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SiteRecoveryVmwareReplicatedVm)(nil)

// SiteRecoveryVmwareReplicatedVm represents the Terraform resource azurerm_site_recovery_vmware_replicated_vm.
type SiteRecoveryVmwareReplicatedVm struct {
	Name      string
	Args      SiteRecoveryVmwareReplicatedVmArgs
	state     *siteRecoveryVmwareReplicatedVmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) Type() string {
	return "azurerm_site_recovery_vmware_replicated_vm"
}

// LocalName returns the local name for [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) LocalName() string {
	return srvrv.Name
}

// Configuration returns the configuration (args) for [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) Configuration() interface{} {
	return srvrv.Args
}

// DependOn is used for other resources to depend on [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) DependOn() terra.Reference {
	return terra.ReferenceResource(srvrv)
}

// Dependencies returns the list of resources [SiteRecoveryVmwareReplicatedVm] depends_on.
func (srvrv *SiteRecoveryVmwareReplicatedVm) Dependencies() terra.Dependencies {
	return srvrv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) LifecycleManagement() *terra.Lifecycle {
	return srvrv.Lifecycle
}

// Attributes returns the attributes for [SiteRecoveryVmwareReplicatedVm].
func (srvrv *SiteRecoveryVmwareReplicatedVm) Attributes() siteRecoveryVmwareReplicatedVmAttributes {
	return siteRecoveryVmwareReplicatedVmAttributes{ref: terra.ReferenceResource(srvrv)}
}

// ImportState imports the given attribute values into [SiteRecoveryVmwareReplicatedVm]'s state.
func (srvrv *SiteRecoveryVmwareReplicatedVm) ImportState(av io.Reader) error {
	srvrv.state = &siteRecoveryVmwareReplicatedVmState{}
	if err := json.NewDecoder(av).Decode(srvrv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srvrv.Type(), srvrv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SiteRecoveryVmwareReplicatedVm] has state.
func (srvrv *SiteRecoveryVmwareReplicatedVm) State() (*siteRecoveryVmwareReplicatedVmState, bool) {
	return srvrv.state, srvrv.state != nil
}

// StateMust returns the state for [SiteRecoveryVmwareReplicatedVm]. Panics if the state is nil.
func (srvrv *SiteRecoveryVmwareReplicatedVm) StateMust() *siteRecoveryVmwareReplicatedVmState {
	if srvrv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srvrv.Type(), srvrv.LocalName()))
	}
	return srvrv.state
}

// SiteRecoveryVmwareReplicatedVmArgs contains the configurations for azurerm_site_recovery_vmware_replicated_vm.
type SiteRecoveryVmwareReplicatedVmArgs struct {
	// ApplianceName: string, required
	ApplianceName terra.StringValue `hcl:"appliance_name,attr" validate:"required"`
	// DefaultLogStorageAccountId: string, optional
	DefaultLogStorageAccountId terra.StringValue `hcl:"default_log_storage_account_id,attr"`
	// DefaultRecoveryDiskType: string, optional
	DefaultRecoveryDiskType terra.StringValue `hcl:"default_recovery_disk_type,attr"`
	// DefaultTargetDiskEncryptionSetId: string, optional
	DefaultTargetDiskEncryptionSetId terra.StringValue `hcl:"default_target_disk_encryption_set_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// MultiVmGroupName: string, optional
	MultiVmGroupName terra.StringValue `hcl:"multi_vm_group_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PhysicalServerCredentialName: string, required
	PhysicalServerCredentialName terra.StringValue `hcl:"physical_server_credential_name,attr" validate:"required"`
	// RecoveryReplicationPolicyId: string, required
	RecoveryReplicationPolicyId terra.StringValue `hcl:"recovery_replication_policy_id,attr" validate:"required"`
	// RecoveryVaultId: string, required
	RecoveryVaultId terra.StringValue `hcl:"recovery_vault_id,attr" validate:"required"`
	// SourceVmName: string, required
	SourceVmName terra.StringValue `hcl:"source_vm_name,attr" validate:"required"`
	// TargetAvailabilitySetId: string, optional
	TargetAvailabilitySetId terra.StringValue `hcl:"target_availability_set_id,attr"`
	// TargetBootDiagnosticsStorageAccountId: string, optional
	TargetBootDiagnosticsStorageAccountId terra.StringValue `hcl:"target_boot_diagnostics_storage_account_id,attr"`
	// TargetNetworkId: string, optional
	TargetNetworkId terra.StringValue `hcl:"target_network_id,attr"`
	// TargetProximityPlacementGroupId: string, optional
	TargetProximityPlacementGroupId terra.StringValue `hcl:"target_proximity_placement_group_id,attr"`
	// TargetResourceGroupId: string, required
	TargetResourceGroupId terra.StringValue `hcl:"target_resource_group_id,attr" validate:"required"`
	// TargetVmName: string, required
	TargetVmName terra.StringValue `hcl:"target_vm_name,attr" validate:"required"`
	// TargetVmSize: string, optional
	TargetVmSize terra.StringValue `hcl:"target_vm_size,attr"`
	// TargetZone: string, optional
	TargetZone terra.StringValue `hcl:"target_zone,attr"`
	// TestNetworkId: string, optional
	TestNetworkId terra.StringValue `hcl:"test_network_id,attr"`
	// ManagedDisk: min=0
	ManagedDisk []siterecoveryvmwarereplicatedvm.ManagedDisk `hcl:"managed_disk,block" validate:"min=0"`
	// NetworkInterface: min=0
	NetworkInterface []siterecoveryvmwarereplicatedvm.NetworkInterface `hcl:"network_interface,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *siterecoveryvmwarereplicatedvm.Timeouts `hcl:"timeouts,block"`
}
type siteRecoveryVmwareReplicatedVmAttributes struct {
	ref terra.Reference
}

// ApplianceName returns a reference to field appliance_name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) ApplianceName() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("appliance_name"))
}

// DefaultLogStorageAccountId returns a reference to field default_log_storage_account_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) DefaultLogStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("default_log_storage_account_id"))
}

// DefaultRecoveryDiskType returns a reference to field default_recovery_disk_type of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) DefaultRecoveryDiskType() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("default_recovery_disk_type"))
}

// DefaultTargetDiskEncryptionSetId returns a reference to field default_target_disk_encryption_set_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) DefaultTargetDiskEncryptionSetId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("default_target_disk_encryption_set_id"))
}

// Id returns a reference to field id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("id"))
}

// LicenseType returns a reference to field license_type of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("license_type"))
}

// MultiVmGroupName returns a reference to field multi_vm_group_name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) MultiVmGroupName() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("multi_vm_group_name"))
}

// Name returns a reference to field name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("name"))
}

// PhysicalServerCredentialName returns a reference to field physical_server_credential_name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) PhysicalServerCredentialName() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("physical_server_credential_name"))
}

// RecoveryReplicationPolicyId returns a reference to field recovery_replication_policy_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) RecoveryReplicationPolicyId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("recovery_replication_policy_id"))
}

// RecoveryVaultId returns a reference to field recovery_vault_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) RecoveryVaultId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("recovery_vault_id"))
}

// SourceVmName returns a reference to field source_vm_name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) SourceVmName() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("source_vm_name"))
}

// TargetAvailabilitySetId returns a reference to field target_availability_set_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetAvailabilitySetId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_availability_set_id"))
}

// TargetBootDiagnosticsStorageAccountId returns a reference to field target_boot_diagnostics_storage_account_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetBootDiagnosticsStorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_boot_diagnostics_storage_account_id"))
}

// TargetNetworkId returns a reference to field target_network_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetNetworkId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_network_id"))
}

// TargetProximityPlacementGroupId returns a reference to field target_proximity_placement_group_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetProximityPlacementGroupId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_proximity_placement_group_id"))
}

// TargetResourceGroupId returns a reference to field target_resource_group_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetResourceGroupId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_resource_group_id"))
}

// TargetVmName returns a reference to field target_vm_name of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetVmName() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_vm_name"))
}

// TargetVmSize returns a reference to field target_vm_size of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetVmSize() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_vm_size"))
}

// TargetZone returns a reference to field target_zone of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TargetZone() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("target_zone"))
}

// TestNetworkId returns a reference to field test_network_id of azurerm_site_recovery_vmware_replicated_vm.
func (srvrv siteRecoveryVmwareReplicatedVmAttributes) TestNetworkId() terra.StringValue {
	return terra.ReferenceAsString(srvrv.ref.Append("test_network_id"))
}

func (srvrv siteRecoveryVmwareReplicatedVmAttributes) ManagedDisk() terra.ListValue[siterecoveryvmwarereplicatedvm.ManagedDiskAttributes] {
	return terra.ReferenceAsList[siterecoveryvmwarereplicatedvm.ManagedDiskAttributes](srvrv.ref.Append("managed_disk"))
}

func (srvrv siteRecoveryVmwareReplicatedVmAttributes) NetworkInterface() terra.ListValue[siterecoveryvmwarereplicatedvm.NetworkInterfaceAttributes] {
	return terra.ReferenceAsList[siterecoveryvmwarereplicatedvm.NetworkInterfaceAttributes](srvrv.ref.Append("network_interface"))
}

func (srvrv siteRecoveryVmwareReplicatedVmAttributes) Timeouts() siterecoveryvmwarereplicatedvm.TimeoutsAttributes {
	return terra.ReferenceAsSingle[siterecoveryvmwarereplicatedvm.TimeoutsAttributes](srvrv.ref.Append("timeouts"))
}

type siteRecoveryVmwareReplicatedVmState struct {
	ApplianceName                         string                                                 `json:"appliance_name"`
	DefaultLogStorageAccountId            string                                                 `json:"default_log_storage_account_id"`
	DefaultRecoveryDiskType               string                                                 `json:"default_recovery_disk_type"`
	DefaultTargetDiskEncryptionSetId      string                                                 `json:"default_target_disk_encryption_set_id"`
	Id                                    string                                                 `json:"id"`
	LicenseType                           string                                                 `json:"license_type"`
	MultiVmGroupName                      string                                                 `json:"multi_vm_group_name"`
	Name                                  string                                                 `json:"name"`
	PhysicalServerCredentialName          string                                                 `json:"physical_server_credential_name"`
	RecoveryReplicationPolicyId           string                                                 `json:"recovery_replication_policy_id"`
	RecoveryVaultId                       string                                                 `json:"recovery_vault_id"`
	SourceVmName                          string                                                 `json:"source_vm_name"`
	TargetAvailabilitySetId               string                                                 `json:"target_availability_set_id"`
	TargetBootDiagnosticsStorageAccountId string                                                 `json:"target_boot_diagnostics_storage_account_id"`
	TargetNetworkId                       string                                                 `json:"target_network_id"`
	TargetProximityPlacementGroupId       string                                                 `json:"target_proximity_placement_group_id"`
	TargetResourceGroupId                 string                                                 `json:"target_resource_group_id"`
	TargetVmName                          string                                                 `json:"target_vm_name"`
	TargetVmSize                          string                                                 `json:"target_vm_size"`
	TargetZone                            string                                                 `json:"target_zone"`
	TestNetworkId                         string                                                 `json:"test_network_id"`
	ManagedDisk                           []siterecoveryvmwarereplicatedvm.ManagedDiskState      `json:"managed_disk"`
	NetworkInterface                      []siterecoveryvmwarereplicatedvm.NetworkInterfaceState `json:"network_interface"`
	Timeouts                              *siterecoveryvmwarereplicatedvm.TimeoutsState          `json:"timeouts"`
}
