// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationloadbalancersubnetassociation "github.com/golingon/terraproviders/azurerm/3.98.0/applicationloadbalancersubnetassociation"
	"io"
)

// NewApplicationLoadBalancerSubnetAssociation creates a new instance of [ApplicationLoadBalancerSubnetAssociation].
func NewApplicationLoadBalancerSubnetAssociation(name string, args ApplicationLoadBalancerSubnetAssociationArgs) *ApplicationLoadBalancerSubnetAssociation {
	return &ApplicationLoadBalancerSubnetAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationLoadBalancerSubnetAssociation)(nil)

// ApplicationLoadBalancerSubnetAssociation represents the Terraform resource azurerm_application_load_balancer_subnet_association.
type ApplicationLoadBalancerSubnetAssociation struct {
	Name      string
	Args      ApplicationLoadBalancerSubnetAssociationArgs
	state     *applicationLoadBalancerSubnetAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) Type() string {
	return "azurerm_application_load_balancer_subnet_association"
}

// LocalName returns the local name for [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) LocalName() string {
	return albsa.Name
}

// Configuration returns the configuration (args) for [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) Configuration() interface{} {
	return albsa.Args
}

// DependOn is used for other resources to depend on [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(albsa)
}

// Dependencies returns the list of resources [ApplicationLoadBalancerSubnetAssociation] depends_on.
func (albsa *ApplicationLoadBalancerSubnetAssociation) Dependencies() terra.Dependencies {
	return albsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) LifecycleManagement() *terra.Lifecycle {
	return albsa.Lifecycle
}

// Attributes returns the attributes for [ApplicationLoadBalancerSubnetAssociation].
func (albsa *ApplicationLoadBalancerSubnetAssociation) Attributes() applicationLoadBalancerSubnetAssociationAttributes {
	return applicationLoadBalancerSubnetAssociationAttributes{ref: terra.ReferenceResource(albsa)}
}

// ImportState imports the given attribute values into [ApplicationLoadBalancerSubnetAssociation]'s state.
func (albsa *ApplicationLoadBalancerSubnetAssociation) ImportState(av io.Reader) error {
	albsa.state = &applicationLoadBalancerSubnetAssociationState{}
	if err := json.NewDecoder(av).Decode(albsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albsa.Type(), albsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationLoadBalancerSubnetAssociation] has state.
func (albsa *ApplicationLoadBalancerSubnetAssociation) State() (*applicationLoadBalancerSubnetAssociationState, bool) {
	return albsa.state, albsa.state != nil
}

// StateMust returns the state for [ApplicationLoadBalancerSubnetAssociation]. Panics if the state is nil.
func (albsa *ApplicationLoadBalancerSubnetAssociation) StateMust() *applicationLoadBalancerSubnetAssociationState {
	if albsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albsa.Type(), albsa.LocalName()))
	}
	return albsa.state
}

// ApplicationLoadBalancerSubnetAssociationArgs contains the configurations for azurerm_application_load_balancer_subnet_association.
type ApplicationLoadBalancerSubnetAssociationArgs struct {
	// ApplicationLoadBalancerId: string, required
	ApplicationLoadBalancerId terra.StringValue `hcl:"application_load_balancer_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *applicationloadbalancersubnetassociation.Timeouts `hcl:"timeouts,block"`
}
type applicationLoadBalancerSubnetAssociationAttributes struct {
	ref terra.Reference
}

// ApplicationLoadBalancerId returns a reference to field application_load_balancer_id of azurerm_application_load_balancer_subnet_association.
func (albsa applicationLoadBalancerSubnetAssociationAttributes) ApplicationLoadBalancerId() terra.StringValue {
	return terra.ReferenceAsString(albsa.ref.Append("application_load_balancer_id"))
}

// Id returns a reference to field id of azurerm_application_load_balancer_subnet_association.
func (albsa applicationLoadBalancerSubnetAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albsa.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_application_load_balancer_subnet_association.
func (albsa applicationLoadBalancerSubnetAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(albsa.ref.Append("name"))
}

// SubnetId returns a reference to field subnet_id of azurerm_application_load_balancer_subnet_association.
func (albsa applicationLoadBalancerSubnetAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(albsa.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of azurerm_application_load_balancer_subnet_association.
func (albsa applicationLoadBalancerSubnetAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](albsa.ref.Append("tags"))
}

func (albsa applicationLoadBalancerSubnetAssociationAttributes) Timeouts() applicationloadbalancersubnetassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationloadbalancersubnetassociation.TimeoutsAttributes](albsa.ref.Append("timeouts"))
}

type applicationLoadBalancerSubnetAssociationState struct {
	ApplicationLoadBalancerId string                                                  `json:"application_load_balancer_id"`
	Id                        string                                                  `json:"id"`
	Name                      string                                                  `json:"name"`
	SubnetId                  string                                                  `json:"subnet_id"`
	Tags                      map[string]string                                       `json:"tags"`
	Timeouts                  *applicationloadbalancersubnetassociation.TimeoutsState `json:"timeouts"`
}
