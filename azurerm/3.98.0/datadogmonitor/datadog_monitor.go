// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datadogmonitor

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatadogOrganization struct {
	// ApiKey: string, required
	ApiKey terra.StringValue `hcl:"api_key,attr" validate:"required"`
	// ApplicationKey: string, required
	ApplicationKey terra.StringValue `hcl:"application_key,attr" validate:"required"`
	// EnterpriseAppId: string, optional
	EnterpriseAppId terra.StringValue `hcl:"enterprise_app_id,attr"`
	// LinkingAuthCode: string, optional
	LinkingAuthCode terra.StringValue `hcl:"linking_auth_code,attr"`
	// LinkingClientId: string, optional
	LinkingClientId terra.StringValue `hcl:"linking_client_id,attr"`
	// RedirectUri: string, optional
	RedirectUri terra.StringValue `hcl:"redirect_uri,attr"`
}

type Identity struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type User struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PhoneNumber: string, optional
	PhoneNumber terra.StringValue `hcl:"phone_number,attr"`
}

type DatadogOrganizationAttributes struct {
	ref terra.Reference
}

func (do DatadogOrganizationAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DatadogOrganizationAttributes) InternalWithRef(ref terra.Reference) DatadogOrganizationAttributes {
	return DatadogOrganizationAttributes{ref: ref}
}

func (do DatadogOrganizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DatadogOrganizationAttributes) ApiKey() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("api_key"))
}

func (do DatadogOrganizationAttributes) ApplicationKey() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("application_key"))
}

func (do DatadogOrganizationAttributes) EnterpriseAppId() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("enterprise_app_id"))
}

func (do DatadogOrganizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("id"))
}

func (do DatadogOrganizationAttributes) LinkingAuthCode() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("linking_auth_code"))
}

func (do DatadogOrganizationAttributes) LinkingClientId() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("linking_client_id"))
}

func (do DatadogOrganizationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("name"))
}

func (do DatadogOrganizationAttributes) RedirectUri() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("redirect_uri"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UserAttributes struct {
	ref terra.Reference
}

func (u UserAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UserAttributes) InternalWithRef(ref terra.Reference) UserAttributes {
	return UserAttributes{ref: ref}
}

func (u UserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UserAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("email"))
}

func (u UserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("name"))
}

func (u UserAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("phone_number"))
}

type DatadogOrganizationState struct {
	ApiKey          string `json:"api_key"`
	ApplicationKey  string `json:"application_key"`
	EnterpriseAppId string `json:"enterprise_app_id"`
	Id              string `json:"id"`
	LinkingAuthCode string `json:"linking_auth_code"`
	LinkingClientId string `json:"linking_client_id"`
	Name            string `json:"name"`
	RedirectUri     string `json:"redirect_uri"`
}

type IdentityState struct {
	PrincipalId string `json:"principal_id"`
	TenantId    string `json:"tenant_id"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UserState struct {
	Email       string `json:"email"`
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`
}
