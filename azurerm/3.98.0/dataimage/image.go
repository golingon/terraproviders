// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataimage

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDisk struct{}

type OsDisk struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataDiskAttributes struct {
	ref terra.Reference
}

func (dd DataDiskAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DataDiskAttributes) InternalWithRef(ref terra.Reference) DataDiskAttributes {
	return DataDiskAttributes{ref: ref}
}

func (dd DataDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DataDiskAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("blob_uri"))
}

func (dd DataDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("caching"))
}

func (dd DataDiskAttributes) Lun() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("lun"))
}

func (dd DataDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("managed_disk_id"))
}

func (dd DataDiskAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(dd.ref.Append("size_gb"))
}

type OsDiskAttributes struct {
	ref terra.Reference
}

func (od OsDiskAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OsDiskAttributes) InternalWithRef(ref terra.Reference) OsDiskAttributes {
	return OsDiskAttributes{ref: ref}
}

func (od OsDiskAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OsDiskAttributes) BlobUri() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("blob_uri"))
}

func (od OsDiskAttributes) Caching() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("caching"))
}

func (od OsDiskAttributes) ManagedDiskId() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("managed_disk_id"))
}

func (od OsDiskAttributes) OsState() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("os_state"))
}

func (od OsDiskAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(od.ref.Append("os_type"))
}

func (od OsDiskAttributes) SizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("size_gb"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDiskState struct {
	BlobUri       string  `json:"blob_uri"`
	Caching       string  `json:"caching"`
	Lun           float64 `json:"lun"`
	ManagedDiskId string  `json:"managed_disk_id"`
	SizeGb        float64 `json:"size_gb"`
}

type OsDiskState struct {
	BlobUri       string  `json:"blob_uri"`
	Caching       string  `json:"caching"`
	ManagedDiskId string  `json:"managed_disk_id"`
	OsState       string  `json:"os_state"`
	OsType        string  `json:"os_type"`
	SizeGb        float64 `json:"size_gb"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
