// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	devcentergallery "github.com/golingon/terraproviders/azurerm/3.98.0/devcentergallery"
	"io"
)

// NewDevCenterGallery creates a new instance of [DevCenterGallery].
func NewDevCenterGallery(name string, args DevCenterGalleryArgs) *DevCenterGallery {
	return &DevCenterGallery{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevCenterGallery)(nil)

// DevCenterGallery represents the Terraform resource azurerm_dev_center_gallery.
type DevCenterGallery struct {
	Name      string
	Args      DevCenterGalleryArgs
	state     *devCenterGalleryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevCenterGallery].
func (dcg *DevCenterGallery) Type() string {
	return "azurerm_dev_center_gallery"
}

// LocalName returns the local name for [DevCenterGallery].
func (dcg *DevCenterGallery) LocalName() string {
	return dcg.Name
}

// Configuration returns the configuration (args) for [DevCenterGallery].
func (dcg *DevCenterGallery) Configuration() interface{} {
	return dcg.Args
}

// DependOn is used for other resources to depend on [DevCenterGallery].
func (dcg *DevCenterGallery) DependOn() terra.Reference {
	return terra.ReferenceResource(dcg)
}

// Dependencies returns the list of resources [DevCenterGallery] depends_on.
func (dcg *DevCenterGallery) Dependencies() terra.Dependencies {
	return dcg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevCenterGallery].
func (dcg *DevCenterGallery) LifecycleManagement() *terra.Lifecycle {
	return dcg.Lifecycle
}

// Attributes returns the attributes for [DevCenterGallery].
func (dcg *DevCenterGallery) Attributes() devCenterGalleryAttributes {
	return devCenterGalleryAttributes{ref: terra.ReferenceResource(dcg)}
}

// ImportState imports the given attribute values into [DevCenterGallery]'s state.
func (dcg *DevCenterGallery) ImportState(av io.Reader) error {
	dcg.state = &devCenterGalleryState{}
	if err := json.NewDecoder(av).Decode(dcg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcg.Type(), dcg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevCenterGallery] has state.
func (dcg *DevCenterGallery) State() (*devCenterGalleryState, bool) {
	return dcg.state, dcg.state != nil
}

// StateMust returns the state for [DevCenterGallery]. Panics if the state is nil.
func (dcg *DevCenterGallery) StateMust() *devCenterGalleryState {
	if dcg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcg.Type(), dcg.LocalName()))
	}
	return dcg.state
}

// DevCenterGalleryArgs contains the configurations for azurerm_dev_center_gallery.
type DevCenterGalleryArgs struct {
	// DevCenterId: string, required
	DevCenterId terra.StringValue `hcl:"dev_center_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SharedGalleryId: string, required
	SharedGalleryId terra.StringValue `hcl:"shared_gallery_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *devcentergallery.Timeouts `hcl:"timeouts,block"`
}
type devCenterGalleryAttributes struct {
	ref terra.Reference
}

// DevCenterId returns a reference to field dev_center_id of azurerm_dev_center_gallery.
func (dcg devCenterGalleryAttributes) DevCenterId() terra.StringValue {
	return terra.ReferenceAsString(dcg.ref.Append("dev_center_id"))
}

// Id returns a reference to field id of azurerm_dev_center_gallery.
func (dcg devCenterGalleryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dcg.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_dev_center_gallery.
func (dcg devCenterGalleryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dcg.ref.Append("name"))
}

// SharedGalleryId returns a reference to field shared_gallery_id of azurerm_dev_center_gallery.
func (dcg devCenterGalleryAttributes) SharedGalleryId() terra.StringValue {
	return terra.ReferenceAsString(dcg.ref.Append("shared_gallery_id"))
}

func (dcg devCenterGalleryAttributes) Timeouts() devcentergallery.TimeoutsAttributes {
	return terra.ReferenceAsSingle[devcentergallery.TimeoutsAttributes](dcg.ref.Append("timeouts"))
}

type devCenterGalleryState struct {
	DevCenterId     string                          `json:"dev_center_id"`
	Id              string                          `json:"id"`
	Name            string                          `json:"name"`
	SharedGalleryId string                          `json:"shared_gallery_id"`
	Timeouts        *devcentergallery.TimeoutsState `json:"timeouts"`
}
