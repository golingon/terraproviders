// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datalocation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ZoneMappings struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type ZoneMappingsAttributes struct {
	ref terra.Reference
}

func (zm ZoneMappingsAttributes) InternalRef() (terra.Reference, error) {
	return zm.ref, nil
}

func (zm ZoneMappingsAttributes) InternalWithRef(ref terra.Reference) ZoneMappingsAttributes {
	return ZoneMappingsAttributes{ref: ref}
}

func (zm ZoneMappingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return zm.ref.InternalTokens()
}

func (zm ZoneMappingsAttributes) LogicalZone() terra.StringValue {
	return terra.ReferenceAsString(zm.ref.Append("logical_zone"))
}

func (zm ZoneMappingsAttributes) PhysicalZone() terra.StringValue {
	return terra.ReferenceAsString(zm.ref.Append("physical_zone"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type ZoneMappingsState struct {
	LogicalZone  string `json:"logical_zone"`
	PhysicalZone string `json:"physical_zone"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
