// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	rediscacheaccesspolicy "github.com/golingon/terraproviders/azurerm/3.98.0/rediscacheaccesspolicy"
	"io"
)

// NewRedisCacheAccessPolicy creates a new instance of [RedisCacheAccessPolicy].
func NewRedisCacheAccessPolicy(name string, args RedisCacheAccessPolicyArgs) *RedisCacheAccessPolicy {
	return &RedisCacheAccessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedisCacheAccessPolicy)(nil)

// RedisCacheAccessPolicy represents the Terraform resource azurerm_redis_cache_access_policy.
type RedisCacheAccessPolicy struct {
	Name      string
	Args      RedisCacheAccessPolicyArgs
	state     *redisCacheAccessPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) Type() string {
	return "azurerm_redis_cache_access_policy"
}

// LocalName returns the local name for [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) LocalName() string {
	return rcap.Name
}

// Configuration returns the configuration (args) for [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) Configuration() interface{} {
	return rcap.Args
}

// DependOn is used for other resources to depend on [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(rcap)
}

// Dependencies returns the list of resources [RedisCacheAccessPolicy] depends_on.
func (rcap *RedisCacheAccessPolicy) Dependencies() terra.Dependencies {
	return rcap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) LifecycleManagement() *terra.Lifecycle {
	return rcap.Lifecycle
}

// Attributes returns the attributes for [RedisCacheAccessPolicy].
func (rcap *RedisCacheAccessPolicy) Attributes() redisCacheAccessPolicyAttributes {
	return redisCacheAccessPolicyAttributes{ref: terra.ReferenceResource(rcap)}
}

// ImportState imports the given attribute values into [RedisCacheAccessPolicy]'s state.
func (rcap *RedisCacheAccessPolicy) ImportState(av io.Reader) error {
	rcap.state = &redisCacheAccessPolicyState{}
	if err := json.NewDecoder(av).Decode(rcap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcap.Type(), rcap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedisCacheAccessPolicy] has state.
func (rcap *RedisCacheAccessPolicy) State() (*redisCacheAccessPolicyState, bool) {
	return rcap.state, rcap.state != nil
}

// StateMust returns the state for [RedisCacheAccessPolicy]. Panics if the state is nil.
func (rcap *RedisCacheAccessPolicy) StateMust() *redisCacheAccessPolicyState {
	if rcap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcap.Type(), rcap.LocalName()))
	}
	return rcap.state
}

// RedisCacheAccessPolicyArgs contains the configurations for azurerm_redis_cache_access_policy.
type RedisCacheAccessPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Permissions: string, required
	Permissions terra.StringValue `hcl:"permissions,attr" validate:"required"`
	// RedisCacheId: string, required
	RedisCacheId terra.StringValue `hcl:"redis_cache_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *rediscacheaccesspolicy.Timeouts `hcl:"timeouts,block"`
}
type redisCacheAccessPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_redis_cache_access_policy.
func (rcap redisCacheAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rcap.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_redis_cache_access_policy.
func (rcap redisCacheAccessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rcap.ref.Append("name"))
}

// Permissions returns a reference to field permissions of azurerm_redis_cache_access_policy.
func (rcap redisCacheAccessPolicyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(rcap.ref.Append("permissions"))
}

// RedisCacheId returns a reference to field redis_cache_id of azurerm_redis_cache_access_policy.
func (rcap redisCacheAccessPolicyAttributes) RedisCacheId() terra.StringValue {
	return terra.ReferenceAsString(rcap.ref.Append("redis_cache_id"))
}

func (rcap redisCacheAccessPolicyAttributes) Timeouts() rediscacheaccesspolicy.TimeoutsAttributes {
	return terra.ReferenceAsSingle[rediscacheaccesspolicy.TimeoutsAttributes](rcap.ref.Append("timeouts"))
}

type redisCacheAccessPolicyState struct {
	Id           string                                `json:"id"`
	Name         string                                `json:"name"`
	Permissions  string                                `json:"permissions"`
	RedisCacheId string                                `json:"redis_cache_id"`
	Timeouts     *rediscacheaccesspolicy.TimeoutsState `json:"timeouts"`
}
