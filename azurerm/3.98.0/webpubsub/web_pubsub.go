// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package webpubsub

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type LiveTrace struct {
	// ConnectivityLogsEnabled: bool, optional
	ConnectivityLogsEnabled terra.BoolValue `hcl:"connectivity_logs_enabled,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpRequestLogsEnabled: bool, optional
	HttpRequestLogsEnabled terra.BoolValue `hcl:"http_request_logs_enabled,attr"`
	// MessagingLogsEnabled: bool, optional
	MessagingLogsEnabled terra.BoolValue `hcl:"messaging_logs_enabled,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type LiveTraceAttributes struct {
	ref terra.Reference
}

func (lt LiveTraceAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt LiveTraceAttributes) InternalWithRef(ref terra.Reference) LiveTraceAttributes {
	return LiveTraceAttributes{ref: ref}
}

func (lt LiveTraceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt LiveTraceAttributes) ConnectivityLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("connectivity_logs_enabled"))
}

func (lt LiveTraceAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("enabled"))
}

func (lt LiveTraceAttributes) HttpRequestLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("http_request_logs_enabled"))
}

func (lt LiveTraceAttributes) MessagingLogsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("messaging_logs_enabled"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type LiveTraceState struct {
	ConnectivityLogsEnabled bool `json:"connectivity_logs_enabled"`
	Enabled                 bool `json:"enabled"`
	HttpRequestLogsEnabled  bool `json:"http_request_logs_enabled"`
	MessagingLogsEnabled    bool `json:"messaging_logs_enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
