// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package webpubsubnetworkacl

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PrivateEndpoint struct {
	// AllowedRequestTypes: set of string, optional
	AllowedRequestTypes terra.SetValue[terra.StringValue] `hcl:"allowed_request_types,attr"`
	// DeniedRequestTypes: set of string, optional
	DeniedRequestTypes terra.SetValue[terra.StringValue] `hcl:"denied_request_types,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type PublicNetwork struct {
	// AllowedRequestTypes: set of string, optional
	AllowedRequestTypes terra.SetValue[terra.StringValue] `hcl:"allowed_request_types,attr"`
	// DeniedRequestTypes: set of string, optional
	DeniedRequestTypes terra.SetValue[terra.StringValue] `hcl:"denied_request_types,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type PrivateEndpointAttributes struct {
	ref terra.Reference
}

func (pe PrivateEndpointAttributes) InternalRef() (terra.Reference, error) {
	return pe.ref, nil
}

func (pe PrivateEndpointAttributes) InternalWithRef(ref terra.Reference) PrivateEndpointAttributes {
	return PrivateEndpointAttributes{ref: ref}
}

func (pe PrivateEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pe.ref.InternalTokens()
}

func (pe PrivateEndpointAttributes) AllowedRequestTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pe.ref.Append("allowed_request_types"))
}

func (pe PrivateEndpointAttributes) DeniedRequestTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pe.ref.Append("denied_request_types"))
}

func (pe PrivateEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pe.ref.Append("id"))
}

type PublicNetworkAttributes struct {
	ref terra.Reference
}

func (pn PublicNetworkAttributes) InternalRef() (terra.Reference, error) {
	return pn.ref, nil
}

func (pn PublicNetworkAttributes) InternalWithRef(ref terra.Reference) PublicNetworkAttributes {
	return PublicNetworkAttributes{ref: ref}
}

func (pn PublicNetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pn.ref.InternalTokens()
}

func (pn PublicNetworkAttributes) AllowedRequestTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pn.ref.Append("allowed_request_types"))
}

func (pn PublicNetworkAttributes) DeniedRequestTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pn.ref.Append("denied_request_types"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PrivateEndpointState struct {
	AllowedRequestTypes []string `json:"allowed_request_types"`
	DeniedRequestTypes  []string `json:"denied_request_types"`
	Id                  string   `json:"id"`
}

type PublicNetworkState struct {
	AllowedRequestTypes []string `json:"allowed_request_types"`
	DeniedRequestTypes  []string `json:"denied_request_types"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
