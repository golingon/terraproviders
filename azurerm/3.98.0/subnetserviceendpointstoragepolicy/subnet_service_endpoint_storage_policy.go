// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package subnetserviceendpointstoragepolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Definition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// ServiceResources: set of string, required
	ServiceResources terra.SetValue[terra.StringValue] `hcl:"service_resources,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DefinitionAttributes struct {
	ref terra.Reference
}

func (d DefinitionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DefinitionAttributes) InternalWithRef(ref terra.Reference) DefinitionAttributes {
	return DefinitionAttributes{ref: ref}
}

func (d DefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("description"))
}

func (d DefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DefinitionAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("service"))
}

func (d DefinitionAttributes) ServiceResources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("service_resources"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DefinitionState struct {
	Description      string   `json:"description"`
	Name             string   `json:"name"`
	Service          string   `json:"service"`
	ServiceResources []string `json:"service_resources"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
