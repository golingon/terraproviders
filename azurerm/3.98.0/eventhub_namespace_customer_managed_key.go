// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	eventhubnamespacecustomermanagedkey "github.com/golingon/terraproviders/azurerm/3.98.0/eventhubnamespacecustomermanagedkey"
	"io"
)

// NewEventhubNamespaceCustomerManagedKey creates a new instance of [EventhubNamespaceCustomerManagedKey].
func NewEventhubNamespaceCustomerManagedKey(name string, args EventhubNamespaceCustomerManagedKeyArgs) *EventhubNamespaceCustomerManagedKey {
	return &EventhubNamespaceCustomerManagedKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EventhubNamespaceCustomerManagedKey)(nil)

// EventhubNamespaceCustomerManagedKey represents the Terraform resource azurerm_eventhub_namespace_customer_managed_key.
type EventhubNamespaceCustomerManagedKey struct {
	Name      string
	Args      EventhubNamespaceCustomerManagedKeyArgs
	state     *eventhubNamespaceCustomerManagedKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) Type() string {
	return "azurerm_eventhub_namespace_customer_managed_key"
}

// LocalName returns the local name for [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) LocalName() string {
	return encmk.Name
}

// Configuration returns the configuration (args) for [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) Configuration() interface{} {
	return encmk.Args
}

// DependOn is used for other resources to depend on [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) DependOn() terra.Reference {
	return terra.ReferenceResource(encmk)
}

// Dependencies returns the list of resources [EventhubNamespaceCustomerManagedKey] depends_on.
func (encmk *EventhubNamespaceCustomerManagedKey) Dependencies() terra.Dependencies {
	return encmk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) LifecycleManagement() *terra.Lifecycle {
	return encmk.Lifecycle
}

// Attributes returns the attributes for [EventhubNamespaceCustomerManagedKey].
func (encmk *EventhubNamespaceCustomerManagedKey) Attributes() eventhubNamespaceCustomerManagedKeyAttributes {
	return eventhubNamespaceCustomerManagedKeyAttributes{ref: terra.ReferenceResource(encmk)}
}

// ImportState imports the given attribute values into [EventhubNamespaceCustomerManagedKey]'s state.
func (encmk *EventhubNamespaceCustomerManagedKey) ImportState(av io.Reader) error {
	encmk.state = &eventhubNamespaceCustomerManagedKeyState{}
	if err := json.NewDecoder(av).Decode(encmk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", encmk.Type(), encmk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EventhubNamespaceCustomerManagedKey] has state.
func (encmk *EventhubNamespaceCustomerManagedKey) State() (*eventhubNamespaceCustomerManagedKeyState, bool) {
	return encmk.state, encmk.state != nil
}

// StateMust returns the state for [EventhubNamespaceCustomerManagedKey]. Panics if the state is nil.
func (encmk *EventhubNamespaceCustomerManagedKey) StateMust() *eventhubNamespaceCustomerManagedKeyState {
	if encmk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", encmk.Type(), encmk.LocalName()))
	}
	return encmk.state
}

// EventhubNamespaceCustomerManagedKeyArgs contains the configurations for azurerm_eventhub_namespace_customer_managed_key.
type EventhubNamespaceCustomerManagedKeyArgs struct {
	// EventhubNamespaceId: string, required
	EventhubNamespaceId terra.StringValue `hcl:"eventhub_namespace_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureEncryptionEnabled: bool, optional
	InfrastructureEncryptionEnabled terra.BoolValue `hcl:"infrastructure_encryption_enabled,attr"`
	// KeyVaultKeyIds: set of string, required
	KeyVaultKeyIds terra.SetValue[terra.StringValue] `hcl:"key_vault_key_ids,attr" validate:"required"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// Timeouts: optional
	Timeouts *eventhubnamespacecustomermanagedkey.Timeouts `hcl:"timeouts,block"`
}
type eventhubNamespaceCustomerManagedKeyAttributes struct {
	ref terra.Reference
}

// EventhubNamespaceId returns a reference to field eventhub_namespace_id of azurerm_eventhub_namespace_customer_managed_key.
func (encmk eventhubNamespaceCustomerManagedKeyAttributes) EventhubNamespaceId() terra.StringValue {
	return terra.ReferenceAsString(encmk.ref.Append("eventhub_namespace_id"))
}

// Id returns a reference to field id of azurerm_eventhub_namespace_customer_managed_key.
func (encmk eventhubNamespaceCustomerManagedKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(encmk.ref.Append("id"))
}

// InfrastructureEncryptionEnabled returns a reference to field infrastructure_encryption_enabled of azurerm_eventhub_namespace_customer_managed_key.
func (encmk eventhubNamespaceCustomerManagedKeyAttributes) InfrastructureEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(encmk.ref.Append("infrastructure_encryption_enabled"))
}

// KeyVaultKeyIds returns a reference to field key_vault_key_ids of azurerm_eventhub_namespace_customer_managed_key.
func (encmk eventhubNamespaceCustomerManagedKeyAttributes) KeyVaultKeyIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](encmk.ref.Append("key_vault_key_ids"))
}

// UserAssignedIdentityId returns a reference to field user_assigned_identity_id of azurerm_eventhub_namespace_customer_managed_key.
func (encmk eventhubNamespaceCustomerManagedKeyAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(encmk.ref.Append("user_assigned_identity_id"))
}

func (encmk eventhubNamespaceCustomerManagedKeyAttributes) Timeouts() eventhubnamespacecustomermanagedkey.TimeoutsAttributes {
	return terra.ReferenceAsSingle[eventhubnamespacecustomermanagedkey.TimeoutsAttributes](encmk.ref.Append("timeouts"))
}

type eventhubNamespaceCustomerManagedKeyState struct {
	EventhubNamespaceId             string                                             `json:"eventhub_namespace_id"`
	Id                              string                                             `json:"id"`
	InfrastructureEncryptionEnabled bool                                               `json:"infrastructure_encryption_enabled"`
	KeyVaultKeyIds                  []string                                           `json:"key_vault_key_ids"`
	UserAssignedIdentityId          string                                             `json:"user_assigned_identity_id"`
	Timeouts                        *eventhubnamespacecustomermanagedkey.TimeoutsState `json:"timeouts"`
}
