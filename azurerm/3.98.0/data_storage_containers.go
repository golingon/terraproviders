// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"github.com/golingon/lingon/pkg/terra"
	datastoragecontainers "github.com/golingon/terraproviders/azurerm/3.98.0/datastoragecontainers"
)

// NewDataStorageContainers creates a new instance of [DataStorageContainers].
func NewDataStorageContainers(name string, args DataStorageContainersArgs) *DataStorageContainers {
	return &DataStorageContainers{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataStorageContainers)(nil)

// DataStorageContainers represents the Terraform data resource azurerm_storage_containers.
type DataStorageContainers struct {
	Name string
	Args DataStorageContainersArgs
}

// DataSource returns the Terraform object type for [DataStorageContainers].
func (sc *DataStorageContainers) DataSource() string {
	return "azurerm_storage_containers"
}

// LocalName returns the local name for [DataStorageContainers].
func (sc *DataStorageContainers) LocalName() string {
	return sc.Name
}

// Configuration returns the configuration (args) for [DataStorageContainers].
func (sc *DataStorageContainers) Configuration() interface{} {
	return sc.Args
}

// Attributes returns the attributes for [DataStorageContainers].
func (sc *DataStorageContainers) Attributes() dataStorageContainersAttributes {
	return dataStorageContainersAttributes{ref: terra.ReferenceDataResource(sc)}
}

// DataStorageContainersArgs contains the configurations for azurerm_storage_containers.
type DataStorageContainersArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// StorageAccountId: string, required
	StorageAccountId terra.StringValue `hcl:"storage_account_id,attr" validate:"required"`
	// Containers: min=0
	Containers []datastoragecontainers.Containers `hcl:"containers,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datastoragecontainers.Timeouts `hcl:"timeouts,block"`
}
type dataStorageContainersAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_storage_containers.
func (sc dataStorageContainersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

// NamePrefix returns a reference to field name_prefix of azurerm_storage_containers.
func (sc dataStorageContainersAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name_prefix"))
}

// StorageAccountId returns a reference to field storage_account_id of azurerm_storage_containers.
func (sc dataStorageContainersAttributes) StorageAccountId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("storage_account_id"))
}

func (sc dataStorageContainersAttributes) Containers() terra.ListValue[datastoragecontainers.ContainersAttributes] {
	return terra.ReferenceAsList[datastoragecontainers.ContainersAttributes](sc.ref.Append("containers"))
}

func (sc dataStorageContainersAttributes) Timeouts() datastoragecontainers.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datastoragecontainers.TimeoutsAttributes](sc.ref.Append("timeouts"))
}
