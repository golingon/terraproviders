// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package cosmosdbgremlingraph

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoscaleSettings struct {
	// MaxThroughput: number, optional
	MaxThroughput terra.NumberValue `hcl:"max_throughput,attr"`
}

type ConflictResolutionPolicy struct {
	// ConflictResolutionPath: string, optional
	ConflictResolutionPath terra.StringValue `hcl:"conflict_resolution_path,attr"`
	// ConflictResolutionProcedure: string, optional
	ConflictResolutionProcedure terra.StringValue `hcl:"conflict_resolution_procedure,attr"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type IndexPolicy struct {
	// Automatic: bool, optional
	Automatic terra.BoolValue `hcl:"automatic,attr"`
	// ExcludedPaths: set of string, optional
	ExcludedPaths terra.SetValue[terra.StringValue] `hcl:"excluded_paths,attr"`
	// IncludedPaths: set of string, optional
	IncludedPaths terra.SetValue[terra.StringValue] `hcl:"included_paths,attr"`
	// IndexingMode: string, required
	IndexingMode terra.StringValue `hcl:"indexing_mode,attr" validate:"required"`
	// CompositeIndex: min=0
	CompositeIndex []CompositeIndex `hcl:"composite_index,block" validate:"min=0"`
	// SpatialIndex: min=0
	SpatialIndex []SpatialIndex `hcl:"spatial_index,block" validate:"min=0"`
}

type CompositeIndex struct {
	// Index: min=1
	Index []Index `hcl:"index,block" validate:"min=1"`
}

type Index struct {
	// Order: string, required
	Order terra.StringValue `hcl:"order,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type SpatialIndex struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type UniqueKey struct {
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
}

type AutoscaleSettingsAttributes struct {
	ref terra.Reference
}

func (as AutoscaleSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AutoscaleSettingsAttributes) InternalWithRef(ref terra.Reference) AutoscaleSettingsAttributes {
	return AutoscaleSettingsAttributes{ref: ref}
}

func (as AutoscaleSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AutoscaleSettingsAttributes) MaxThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("max_throughput"))
}

type ConflictResolutionPolicyAttributes struct {
	ref terra.Reference
}

func (crp ConflictResolutionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return crp.ref, nil
}

func (crp ConflictResolutionPolicyAttributes) InternalWithRef(ref terra.Reference) ConflictResolutionPolicyAttributes {
	return ConflictResolutionPolicyAttributes{ref: ref}
}

func (crp ConflictResolutionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crp.ref.InternalTokens()
}

func (crp ConflictResolutionPolicyAttributes) ConflictResolutionPath() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("conflict_resolution_path"))
}

func (crp ConflictResolutionPolicyAttributes) ConflictResolutionProcedure() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("conflict_resolution_procedure"))
}

func (crp ConflictResolutionPolicyAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("mode"))
}

type IndexPolicyAttributes struct {
	ref terra.Reference
}

func (ip IndexPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip IndexPolicyAttributes) InternalWithRef(ref terra.Reference) IndexPolicyAttributes {
	return IndexPolicyAttributes{ref: ref}
}

func (ip IndexPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip IndexPolicyAttributes) Automatic() terra.BoolValue {
	return terra.ReferenceAsBool(ip.ref.Append("automatic"))
}

func (ip IndexPolicyAttributes) ExcludedPaths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ip.ref.Append("excluded_paths"))
}

func (ip IndexPolicyAttributes) IncludedPaths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ip.ref.Append("included_paths"))
}

func (ip IndexPolicyAttributes) IndexingMode() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("indexing_mode"))
}

func (ip IndexPolicyAttributes) CompositeIndex() terra.ListValue[CompositeIndexAttributes] {
	return terra.ReferenceAsList[CompositeIndexAttributes](ip.ref.Append("composite_index"))
}

func (ip IndexPolicyAttributes) SpatialIndex() terra.ListValue[SpatialIndexAttributes] {
	return terra.ReferenceAsList[SpatialIndexAttributes](ip.ref.Append("spatial_index"))
}

type CompositeIndexAttributes struct {
	ref terra.Reference
}

func (ci CompositeIndexAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CompositeIndexAttributes) InternalWithRef(ref terra.Reference) CompositeIndexAttributes {
	return CompositeIndexAttributes{ref: ref}
}

func (ci CompositeIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CompositeIndexAttributes) Index() terra.ListValue[IndexAttributes] {
	return terra.ReferenceAsList[IndexAttributes](ci.ref.Append("index"))
}

type IndexAttributes struct {
	ref terra.Reference
}

func (i IndexAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IndexAttributes) InternalWithRef(ref terra.Reference) IndexAttributes {
	return IndexAttributes{ref: ref}
}

func (i IndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IndexAttributes) Order() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("order"))
}

func (i IndexAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("path"))
}

type SpatialIndexAttributes struct {
	ref terra.Reference
}

func (si SpatialIndexAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SpatialIndexAttributes) InternalWithRef(ref terra.Reference) SpatialIndexAttributes {
	return SpatialIndexAttributes{ref: ref}
}

func (si SpatialIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SpatialIndexAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("path"))
}

func (si SpatialIndexAttributes) Types() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](si.ref.Append("types"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type UniqueKeyAttributes struct {
	ref terra.Reference
}

func (uk UniqueKeyAttributes) InternalRef() (terra.Reference, error) {
	return uk.ref, nil
}

func (uk UniqueKeyAttributes) InternalWithRef(ref terra.Reference) UniqueKeyAttributes {
	return UniqueKeyAttributes{ref: ref}
}

func (uk UniqueKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uk.ref.InternalTokens()
}

func (uk UniqueKeyAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](uk.ref.Append("paths"))
}

type AutoscaleSettingsState struct {
	MaxThroughput float64 `json:"max_throughput"`
}

type ConflictResolutionPolicyState struct {
	ConflictResolutionPath      string `json:"conflict_resolution_path"`
	ConflictResolutionProcedure string `json:"conflict_resolution_procedure"`
	Mode                        string `json:"mode"`
}

type IndexPolicyState struct {
	Automatic      bool                  `json:"automatic"`
	ExcludedPaths  []string              `json:"excluded_paths"`
	IncludedPaths  []string              `json:"included_paths"`
	IndexingMode   string                `json:"indexing_mode"`
	CompositeIndex []CompositeIndexState `json:"composite_index"`
	SpatialIndex   []SpatialIndexState   `json:"spatial_index"`
}

type CompositeIndexState struct {
	Index []IndexState `json:"index"`
}

type IndexState struct {
	Order string `json:"order"`
	Path  string `json:"path"`
}

type SpatialIndexState struct {
	Path  string   `json:"path"`
	Types []string `json:"types"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type UniqueKeyState struct {
	Paths []string `json:"paths"`
}
