// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package netappaccount

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ActiveDirectory struct {
	// AesEncryptionEnabled: bool, optional
	AesEncryptionEnabled terra.BoolValue `hcl:"aes_encryption_enabled,attr"`
	// DnsServers: list of string, required
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr" validate:"required"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// KerberosAdName: string, optional
	KerberosAdName terra.StringValue `hcl:"kerberos_ad_name,attr"`
	// KerberosKdcIp: string, optional
	KerberosKdcIp terra.StringValue `hcl:"kerberos_kdc_ip,attr"`
	// LdapOverTlsEnabled: bool, optional
	LdapOverTlsEnabled terra.BoolValue `hcl:"ldap_over_tls_enabled,attr"`
	// LdapSigningEnabled: bool, optional
	LdapSigningEnabled terra.BoolValue `hcl:"ldap_signing_enabled,attr"`
	// LocalNfsUsersWithLdapAllowed: bool, optional
	LocalNfsUsersWithLdapAllowed terra.BoolValue `hcl:"local_nfs_users_with_ldap_allowed,attr"`
	// OrganizationalUnit: string, optional
	OrganizationalUnit terra.StringValue `hcl:"organizational_unit,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// ServerRootCaCertificate: string, optional
	ServerRootCaCertificate terra.StringValue `hcl:"server_root_ca_certificate,attr"`
	// SiteName: string, optional
	SiteName terra.StringValue `hcl:"site_name,attr"`
	// SmbServerName: string, required
	SmbServerName terra.StringValue `hcl:"smb_server_name,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (ad ActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad ActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) ActiveDirectoryAttributes {
	return ActiveDirectoryAttributes{ref: ref}
}

func (ad ActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad ActiveDirectoryAttributes) AesEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("aes_encryption_enabled"))
}

func (ad ActiveDirectoryAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ad.ref.Append("dns_servers"))
}

func (ad ActiveDirectoryAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("domain"))
}

func (ad ActiveDirectoryAttributes) KerberosAdName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("kerberos_ad_name"))
}

func (ad ActiveDirectoryAttributes) KerberosKdcIp() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("kerberos_kdc_ip"))
}

func (ad ActiveDirectoryAttributes) LdapOverTlsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("ldap_over_tls_enabled"))
}

func (ad ActiveDirectoryAttributes) LdapSigningEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("ldap_signing_enabled"))
}

func (ad ActiveDirectoryAttributes) LocalNfsUsersWithLdapAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("local_nfs_users_with_ldap_allowed"))
}

func (ad ActiveDirectoryAttributes) OrganizationalUnit() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("organizational_unit"))
}

func (ad ActiveDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("password"))
}

func (ad ActiveDirectoryAttributes) ServerRootCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("server_root_ca_certificate"))
}

func (ad ActiveDirectoryAttributes) SiteName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("site_name"))
}

func (ad ActiveDirectoryAttributes) SmbServerName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("smb_server_name"))
}

func (ad ActiveDirectoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("username"))
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActiveDirectoryState struct {
	AesEncryptionEnabled         bool     `json:"aes_encryption_enabled"`
	DnsServers                   []string `json:"dns_servers"`
	Domain                       string   `json:"domain"`
	KerberosAdName               string   `json:"kerberos_ad_name"`
	KerberosKdcIp                string   `json:"kerberos_kdc_ip"`
	LdapOverTlsEnabled           bool     `json:"ldap_over_tls_enabled"`
	LdapSigningEnabled           bool     `json:"ldap_signing_enabled"`
	LocalNfsUsersWithLdapAllowed bool     `json:"local_nfs_users_with_ldap_allowed"`
	OrganizationalUnit           string   `json:"organizational_unit"`
	Password                     string   `json:"password"`
	ServerRootCaCertificate      string   `json:"server_root_ca_certificate"`
	SiteName                     string   `json:"site_name"`
	SmbServerName                string   `json:"smb_server_name"`
	Username                     string   `json:"username"`
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
