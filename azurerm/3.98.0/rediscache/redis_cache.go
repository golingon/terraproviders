// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package rediscache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PatchSchedule struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// MaintenanceWindow: string, optional
	MaintenanceWindow terra.StringValue `hcl:"maintenance_window,attr"`
	// StartHourUtc: number, optional
	StartHourUtc terra.NumberValue `hcl:"start_hour_utc,attr"`
}

type RedisConfiguration struct {
	// ActiveDirectoryAuthenticationEnabled: bool, optional
	ActiveDirectoryAuthenticationEnabled terra.BoolValue `hcl:"active_directory_authentication_enabled,attr"`
	// AofBackupEnabled: bool, optional
	AofBackupEnabled terra.BoolValue `hcl:"aof_backup_enabled,attr"`
	// AofStorageConnectionString0: string, optional
	AofStorageConnectionString0 terra.StringValue `hcl:"aof_storage_connection_string_0,attr"`
	// AofStorageConnectionString1: string, optional
	AofStorageConnectionString1 terra.StringValue `hcl:"aof_storage_connection_string_1,attr"`
	// DataPersistenceAuthenticationMethod: string, optional
	DataPersistenceAuthenticationMethod terra.StringValue `hcl:"data_persistence_authentication_method,attr"`
	// EnableAuthentication: bool, optional
	EnableAuthentication terra.BoolValue `hcl:"enable_authentication,attr"`
	// MaxfragmentationmemoryReserved: number, optional
	MaxfragmentationmemoryReserved terra.NumberValue `hcl:"maxfragmentationmemory_reserved,attr"`
	// MaxmemoryDelta: number, optional
	MaxmemoryDelta terra.NumberValue `hcl:"maxmemory_delta,attr"`
	// MaxmemoryPolicy: string, optional
	MaxmemoryPolicy terra.StringValue `hcl:"maxmemory_policy,attr"`
	// MaxmemoryReserved: number, optional
	MaxmemoryReserved terra.NumberValue `hcl:"maxmemory_reserved,attr"`
	// NotifyKeyspaceEvents: string, optional
	NotifyKeyspaceEvents terra.StringValue `hcl:"notify_keyspace_events,attr"`
	// RdbBackupEnabled: bool, optional
	RdbBackupEnabled terra.BoolValue `hcl:"rdb_backup_enabled,attr"`
	// RdbBackupFrequency: number, optional
	RdbBackupFrequency terra.NumberValue `hcl:"rdb_backup_frequency,attr"`
	// RdbBackupMaxSnapshotCount: number, optional
	RdbBackupMaxSnapshotCount terra.NumberValue `hcl:"rdb_backup_max_snapshot_count,attr"`
	// RdbStorageConnectionString: string, optional
	RdbStorageConnectionString terra.StringValue `hcl:"rdb_storage_connection_string,attr"`
	// StorageAccountSubscriptionId: string, optional
	StorageAccountSubscriptionId terra.StringValue `hcl:"storage_account_subscription_id,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type PatchScheduleAttributes struct {
	ref terra.Reference
}

func (ps PatchScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PatchScheduleAttributes) InternalWithRef(ref terra.Reference) PatchScheduleAttributes {
	return PatchScheduleAttributes{ref: ref}
}

func (ps PatchScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PatchScheduleAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("day_of_week"))
}

func (ps PatchScheduleAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("maintenance_window"))
}

func (ps PatchScheduleAttributes) StartHourUtc() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("start_hour_utc"))
}

type RedisConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RedisConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RedisConfigurationAttributes) InternalWithRef(ref terra.Reference) RedisConfigurationAttributes {
	return RedisConfigurationAttributes{ref: ref}
}

func (rc RedisConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RedisConfigurationAttributes) ActiveDirectoryAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("active_directory_authentication_enabled"))
}

func (rc RedisConfigurationAttributes) AofBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("aof_backup_enabled"))
}

func (rc RedisConfigurationAttributes) AofStorageConnectionString0() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("aof_storage_connection_string_0"))
}

func (rc RedisConfigurationAttributes) AofStorageConnectionString1() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("aof_storage_connection_string_1"))
}

func (rc RedisConfigurationAttributes) DataPersistenceAuthenticationMethod() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_persistence_authentication_method"))
}

func (rc RedisConfigurationAttributes) EnableAuthentication() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("enable_authentication"))
}

func (rc RedisConfigurationAttributes) Maxclients() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxclients"))
}

func (rc RedisConfigurationAttributes) MaxfragmentationmemoryReserved() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxfragmentationmemory_reserved"))
}

func (rc RedisConfigurationAttributes) MaxmemoryDelta() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxmemory_delta"))
}

func (rc RedisConfigurationAttributes) MaxmemoryPolicy() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("maxmemory_policy"))
}

func (rc RedisConfigurationAttributes) MaxmemoryReserved() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("maxmemory_reserved"))
}

func (rc RedisConfigurationAttributes) NotifyKeyspaceEvents() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("notify_keyspace_events"))
}

func (rc RedisConfigurationAttributes) RdbBackupEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("rdb_backup_enabled"))
}

func (rc RedisConfigurationAttributes) RdbBackupFrequency() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("rdb_backup_frequency"))
}

func (rc RedisConfigurationAttributes) RdbBackupMaxSnapshotCount() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("rdb_backup_max_snapshot_count"))
}

func (rc RedisConfigurationAttributes) RdbStorageConnectionString() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("rdb_storage_connection_string"))
}

func (rc RedisConfigurationAttributes) StorageAccountSubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("storage_account_subscription_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type PatchScheduleState struct {
	DayOfWeek         string  `json:"day_of_week"`
	MaintenanceWindow string  `json:"maintenance_window"`
	StartHourUtc      float64 `json:"start_hour_utc"`
}

type RedisConfigurationState struct {
	ActiveDirectoryAuthenticationEnabled bool    `json:"active_directory_authentication_enabled"`
	AofBackupEnabled                     bool    `json:"aof_backup_enabled"`
	AofStorageConnectionString0          string  `json:"aof_storage_connection_string_0"`
	AofStorageConnectionString1          string  `json:"aof_storage_connection_string_1"`
	DataPersistenceAuthenticationMethod  string  `json:"data_persistence_authentication_method"`
	EnableAuthentication                 bool    `json:"enable_authentication"`
	Maxclients                           float64 `json:"maxclients"`
	MaxfragmentationmemoryReserved       float64 `json:"maxfragmentationmemory_reserved"`
	MaxmemoryDelta                       float64 `json:"maxmemory_delta"`
	MaxmemoryPolicy                      string  `json:"maxmemory_policy"`
	MaxmemoryReserved                    float64 `json:"maxmemory_reserved"`
	NotifyKeyspaceEvents                 string  `json:"notify_keyspace_events"`
	RdbBackupEnabled                     bool    `json:"rdb_backup_enabled"`
	RdbBackupFrequency                   float64 `json:"rdb_backup_frequency"`
	RdbBackupMaxSnapshotCount            float64 `json:"rdb_backup_max_snapshot_count"`
	RdbStorageConnectionString           string  `json:"rdb_storage_connection_string"`
	StorageAccountSubscriptionId         string  `json:"storage_account_subscription_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
