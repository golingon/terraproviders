// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	dataprotectionbackuppolicykubernetescluster "github.com/golingon/terraproviders/azurerm/3.98.0/dataprotectionbackuppolicykubernetescluster"
	"io"
)

// NewDataProtectionBackupPolicyKubernetesCluster creates a new instance of [DataProtectionBackupPolicyKubernetesCluster].
func NewDataProtectionBackupPolicyKubernetesCluster(name string, args DataProtectionBackupPolicyKubernetesClusterArgs) *DataProtectionBackupPolicyKubernetesCluster {
	return &DataProtectionBackupPolicyKubernetesCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataProtectionBackupPolicyKubernetesCluster)(nil)

// DataProtectionBackupPolicyKubernetesCluster represents the Terraform resource azurerm_data_protection_backup_policy_kubernetes_cluster.
type DataProtectionBackupPolicyKubernetesCluster struct {
	Name      string
	Args      DataProtectionBackupPolicyKubernetesClusterArgs
	state     *dataProtectionBackupPolicyKubernetesClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) Type() string {
	return "azurerm_data_protection_backup_policy_kubernetes_cluster"
}

// LocalName returns the local name for [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) LocalName() string {
	return dpbpkc.Name
}

// Configuration returns the configuration (args) for [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) Configuration() interface{} {
	return dpbpkc.Args
}

// DependOn is used for other resources to depend on [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(dpbpkc)
}

// Dependencies returns the list of resources [DataProtectionBackupPolicyKubernetesCluster] depends_on.
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) Dependencies() terra.Dependencies {
	return dpbpkc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) LifecycleManagement() *terra.Lifecycle {
	return dpbpkc.Lifecycle
}

// Attributes returns the attributes for [DataProtectionBackupPolicyKubernetesCluster].
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) Attributes() dataProtectionBackupPolicyKubernetesClusterAttributes {
	return dataProtectionBackupPolicyKubernetesClusterAttributes{ref: terra.ReferenceResource(dpbpkc)}
}

// ImportState imports the given attribute values into [DataProtectionBackupPolicyKubernetesCluster]'s state.
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) ImportState(av io.Reader) error {
	dpbpkc.state = &dataProtectionBackupPolicyKubernetesClusterState{}
	if err := json.NewDecoder(av).Decode(dpbpkc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpbpkc.Type(), dpbpkc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataProtectionBackupPolicyKubernetesCluster] has state.
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) State() (*dataProtectionBackupPolicyKubernetesClusterState, bool) {
	return dpbpkc.state, dpbpkc.state != nil
}

// StateMust returns the state for [DataProtectionBackupPolicyKubernetesCluster]. Panics if the state is nil.
func (dpbpkc *DataProtectionBackupPolicyKubernetesCluster) StateMust() *dataProtectionBackupPolicyKubernetesClusterState {
	if dpbpkc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpbpkc.Type(), dpbpkc.LocalName()))
	}
	return dpbpkc.state
}

// DataProtectionBackupPolicyKubernetesClusterArgs contains the configurations for azurerm_data_protection_backup_policy_kubernetes_cluster.
type DataProtectionBackupPolicyKubernetesClusterArgs struct {
	// BackupRepeatingTimeIntervals: list of string, required
	BackupRepeatingTimeIntervals terra.ListValue[terra.StringValue] `hcl:"backup_repeating_time_intervals,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// VaultName: string, required
	VaultName terra.StringValue `hcl:"vault_name,attr" validate:"required"`
	// DefaultRetentionRule: required
	DefaultRetentionRule *dataprotectionbackuppolicykubernetescluster.DefaultRetentionRule `hcl:"default_retention_rule,block" validate:"required"`
	// RetentionRule: min=0
	RetentionRule []dataprotectionbackuppolicykubernetescluster.RetentionRule `hcl:"retention_rule,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataprotectionbackuppolicykubernetescluster.Timeouts `hcl:"timeouts,block"`
}
type dataProtectionBackupPolicyKubernetesClusterAttributes struct {
	ref terra.Reference
}

// BackupRepeatingTimeIntervals returns a reference to field backup_repeating_time_intervals of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) BackupRepeatingTimeIntervals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dpbpkc.ref.Append("backup_repeating_time_intervals"))
}

// Id returns a reference to field id of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dpbpkc.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dpbpkc.ref.Append("name"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(dpbpkc.ref.Append("resource_group_name"))
}

// TimeZone returns a reference to field time_zone of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(dpbpkc.ref.Append("time_zone"))
}

// VaultName returns a reference to field vault_name of azurerm_data_protection_backup_policy_kubernetes_cluster.
func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) VaultName() terra.StringValue {
	return terra.ReferenceAsString(dpbpkc.ref.Append("vault_name"))
}

func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) DefaultRetentionRule() terra.ListValue[dataprotectionbackuppolicykubernetescluster.DefaultRetentionRuleAttributes] {
	return terra.ReferenceAsList[dataprotectionbackuppolicykubernetescluster.DefaultRetentionRuleAttributes](dpbpkc.ref.Append("default_retention_rule"))
}

func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) RetentionRule() terra.ListValue[dataprotectionbackuppolicykubernetescluster.RetentionRuleAttributes] {
	return terra.ReferenceAsList[dataprotectionbackuppolicykubernetescluster.RetentionRuleAttributes](dpbpkc.ref.Append("retention_rule"))
}

func (dpbpkc dataProtectionBackupPolicyKubernetesClusterAttributes) Timeouts() dataprotectionbackuppolicykubernetescluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dataprotectionbackuppolicykubernetescluster.TimeoutsAttributes](dpbpkc.ref.Append("timeouts"))
}

type dataProtectionBackupPolicyKubernetesClusterState struct {
	BackupRepeatingTimeIntervals []string                                                                `json:"backup_repeating_time_intervals"`
	Id                           string                                                                  `json:"id"`
	Name                         string                                                                  `json:"name"`
	ResourceGroupName            string                                                                  `json:"resource_group_name"`
	TimeZone                     string                                                                  `json:"time_zone"`
	VaultName                    string                                                                  `json:"vault_name"`
	DefaultRetentionRule         []dataprotectionbackuppolicykubernetescluster.DefaultRetentionRuleState `json:"default_retention_rule"`
	RetentionRule                []dataprotectionbackuppolicykubernetescluster.RetentionRuleState        `json:"retention_rule"`
	Timeouts                     *dataprotectionbackuppolicykubernetescluster.TimeoutsState              `json:"timeouts"`
}
