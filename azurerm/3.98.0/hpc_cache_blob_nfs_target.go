// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	hpccacheblobnfstarget "github.com/golingon/terraproviders/azurerm/3.98.0/hpccacheblobnfstarget"
	"io"
)

// NewHpcCacheBlobNfsTarget creates a new instance of [HpcCacheBlobNfsTarget].
func NewHpcCacheBlobNfsTarget(name string, args HpcCacheBlobNfsTargetArgs) *HpcCacheBlobNfsTarget {
	return &HpcCacheBlobNfsTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*HpcCacheBlobNfsTarget)(nil)

// HpcCacheBlobNfsTarget represents the Terraform resource azurerm_hpc_cache_blob_nfs_target.
type HpcCacheBlobNfsTarget struct {
	Name      string
	Args      HpcCacheBlobNfsTargetArgs
	state     *hpcCacheBlobNfsTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) Type() string {
	return "azurerm_hpc_cache_blob_nfs_target"
}

// LocalName returns the local name for [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) LocalName() string {
	return hcbnt.Name
}

// Configuration returns the configuration (args) for [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) Configuration() interface{} {
	return hcbnt.Args
}

// DependOn is used for other resources to depend on [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(hcbnt)
}

// Dependencies returns the list of resources [HpcCacheBlobNfsTarget] depends_on.
func (hcbnt *HpcCacheBlobNfsTarget) Dependencies() terra.Dependencies {
	return hcbnt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) LifecycleManagement() *terra.Lifecycle {
	return hcbnt.Lifecycle
}

// Attributes returns the attributes for [HpcCacheBlobNfsTarget].
func (hcbnt *HpcCacheBlobNfsTarget) Attributes() hpcCacheBlobNfsTargetAttributes {
	return hpcCacheBlobNfsTargetAttributes{ref: terra.ReferenceResource(hcbnt)}
}

// ImportState imports the given attribute values into [HpcCacheBlobNfsTarget]'s state.
func (hcbnt *HpcCacheBlobNfsTarget) ImportState(av io.Reader) error {
	hcbnt.state = &hpcCacheBlobNfsTargetState{}
	if err := json.NewDecoder(av).Decode(hcbnt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", hcbnt.Type(), hcbnt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [HpcCacheBlobNfsTarget] has state.
func (hcbnt *HpcCacheBlobNfsTarget) State() (*hpcCacheBlobNfsTargetState, bool) {
	return hcbnt.state, hcbnt.state != nil
}

// StateMust returns the state for [HpcCacheBlobNfsTarget]. Panics if the state is nil.
func (hcbnt *HpcCacheBlobNfsTarget) StateMust() *hpcCacheBlobNfsTargetState {
	if hcbnt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", hcbnt.Type(), hcbnt.LocalName()))
	}
	return hcbnt.state
}

// HpcCacheBlobNfsTargetArgs contains the configurations for azurerm_hpc_cache_blob_nfs_target.
type HpcCacheBlobNfsTargetArgs struct {
	// AccessPolicyName: string, optional
	AccessPolicyName terra.StringValue `hcl:"access_policy_name,attr"`
	// CacheName: string, required
	CacheName terra.StringValue `hcl:"cache_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespacePath: string, required
	NamespacePath terra.StringValue `hcl:"namespace_path,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// StorageContainerId: string, required
	StorageContainerId terra.StringValue `hcl:"storage_container_id,attr" validate:"required"`
	// UsageModel: string, required
	UsageModel terra.StringValue `hcl:"usage_model,attr" validate:"required"`
	// VerificationTimerInSeconds: number, optional
	VerificationTimerInSeconds terra.NumberValue `hcl:"verification_timer_in_seconds,attr"`
	// WriteBackTimerInSeconds: number, optional
	WriteBackTimerInSeconds terra.NumberValue `hcl:"write_back_timer_in_seconds,attr"`
	// Timeouts: optional
	Timeouts *hpccacheblobnfstarget.Timeouts `hcl:"timeouts,block"`
}
type hpcCacheBlobNfsTargetAttributes struct {
	ref terra.Reference
}

// AccessPolicyName returns a reference to field access_policy_name of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) AccessPolicyName() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("access_policy_name"))
}

// CacheName returns a reference to field cache_name of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) CacheName() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("cache_name"))
}

// Id returns a reference to field id of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("name"))
}

// NamespacePath returns a reference to field namespace_path of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("namespace_path"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("resource_group_name"))
}

// StorageContainerId returns a reference to field storage_container_id of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) StorageContainerId() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("storage_container_id"))
}

// UsageModel returns a reference to field usage_model of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) UsageModel() terra.StringValue {
	return terra.ReferenceAsString(hcbnt.ref.Append("usage_model"))
}

// VerificationTimerInSeconds returns a reference to field verification_timer_in_seconds of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) VerificationTimerInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hcbnt.ref.Append("verification_timer_in_seconds"))
}

// WriteBackTimerInSeconds returns a reference to field write_back_timer_in_seconds of azurerm_hpc_cache_blob_nfs_target.
func (hcbnt hpcCacheBlobNfsTargetAttributes) WriteBackTimerInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hcbnt.ref.Append("write_back_timer_in_seconds"))
}

func (hcbnt hpcCacheBlobNfsTargetAttributes) Timeouts() hpccacheblobnfstarget.TimeoutsAttributes {
	return terra.ReferenceAsSingle[hpccacheblobnfstarget.TimeoutsAttributes](hcbnt.ref.Append("timeouts"))
}

type hpcCacheBlobNfsTargetState struct {
	AccessPolicyName           string                               `json:"access_policy_name"`
	CacheName                  string                               `json:"cache_name"`
	Id                         string                               `json:"id"`
	Name                       string                               `json:"name"`
	NamespacePath              string                               `json:"namespace_path"`
	ResourceGroupName          string                               `json:"resource_group_name"`
	StorageContainerId         string                               `json:"storage_container_id"`
	UsageModel                 string                               `json:"usage_model"`
	VerificationTimerInSeconds float64                              `json:"verification_timer_in_seconds"`
	WriteBackTimerInSeconds    float64                              `json:"write_back_timer_in_seconds"`
	Timeouts                   *hpccacheblobnfstarget.TimeoutsState `json:"timeouts"`
}
