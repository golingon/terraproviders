// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datastorageaccountblobcontainersas

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Permissions struct {
	// Add: bool, required
	Add terra.BoolValue `hcl:"add,attr" validate:"required"`
	// Create: bool, required
	Create terra.BoolValue `hcl:"create,attr" validate:"required"`
	// Delete: bool, required
	Delete terra.BoolValue `hcl:"delete,attr" validate:"required"`
	// List: bool, required
	List terra.BoolValue `hcl:"list,attr" validate:"required"`
	// Read: bool, required
	Read terra.BoolValue `hcl:"read,attr" validate:"required"`
	// Write: bool, required
	Write terra.BoolValue `hcl:"write,attr" validate:"required"`
}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) Add() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("add"))
}

func (p PermissionsAttributes) Create() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("create"))
}

func (p PermissionsAttributes) Delete() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("delete"))
}

func (p PermissionsAttributes) List() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("list"))
}

func (p PermissionsAttributes) Read() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("read"))
}

func (p PermissionsAttributes) Write() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("write"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type PermissionsState struct {
	Add    bool `json:"add"`
	Create bool `json:"create"`
	Delete bool `json:"delete"`
	List   bool `json:"list"`
	Read   bool `json:"read"`
	Write  bool `json:"write"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
