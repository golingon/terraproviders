// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	netappaccountencryption "github.com/golingon/terraproviders/azurerm/3.98.0/netappaccountencryption"
	"io"
)

// NewNetappAccountEncryption creates a new instance of [NetappAccountEncryption].
func NewNetappAccountEncryption(name string, args NetappAccountEncryptionArgs) *NetappAccountEncryption {
	return &NetappAccountEncryption{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetappAccountEncryption)(nil)

// NetappAccountEncryption represents the Terraform resource azurerm_netapp_account_encryption.
type NetappAccountEncryption struct {
	Name      string
	Args      NetappAccountEncryptionArgs
	state     *netappAccountEncryptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetappAccountEncryption].
func (nae *NetappAccountEncryption) Type() string {
	return "azurerm_netapp_account_encryption"
}

// LocalName returns the local name for [NetappAccountEncryption].
func (nae *NetappAccountEncryption) LocalName() string {
	return nae.Name
}

// Configuration returns the configuration (args) for [NetappAccountEncryption].
func (nae *NetappAccountEncryption) Configuration() interface{} {
	return nae.Args
}

// DependOn is used for other resources to depend on [NetappAccountEncryption].
func (nae *NetappAccountEncryption) DependOn() terra.Reference {
	return terra.ReferenceResource(nae)
}

// Dependencies returns the list of resources [NetappAccountEncryption] depends_on.
func (nae *NetappAccountEncryption) Dependencies() terra.Dependencies {
	return nae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetappAccountEncryption].
func (nae *NetappAccountEncryption) LifecycleManagement() *terra.Lifecycle {
	return nae.Lifecycle
}

// Attributes returns the attributes for [NetappAccountEncryption].
func (nae *NetappAccountEncryption) Attributes() netappAccountEncryptionAttributes {
	return netappAccountEncryptionAttributes{ref: terra.ReferenceResource(nae)}
}

// ImportState imports the given attribute values into [NetappAccountEncryption]'s state.
func (nae *NetappAccountEncryption) ImportState(av io.Reader) error {
	nae.state = &netappAccountEncryptionState{}
	if err := json.NewDecoder(av).Decode(nae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nae.Type(), nae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetappAccountEncryption] has state.
func (nae *NetappAccountEncryption) State() (*netappAccountEncryptionState, bool) {
	return nae.state, nae.state != nil
}

// StateMust returns the state for [NetappAccountEncryption]. Panics if the state is nil.
func (nae *NetappAccountEncryption) StateMust() *netappAccountEncryptionState {
	if nae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nae.Type(), nae.LocalName()))
	}
	return nae.state
}

// NetappAccountEncryptionArgs contains the configurations for azurerm_netapp_account_encryption.
type NetappAccountEncryptionArgs struct {
	// EncryptionKey: string, required
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetappAccountId: string, required
	NetappAccountId terra.StringValue `hcl:"netapp_account_id,attr" validate:"required"`
	// SystemAssignedIdentityPrincipalId: string, optional
	SystemAssignedIdentityPrincipalId terra.StringValue `hcl:"system_assigned_identity_principal_id,attr"`
	// UserAssignedIdentityId: string, optional
	UserAssignedIdentityId terra.StringValue `hcl:"user_assigned_identity_id,attr"`
	// Timeouts: optional
	Timeouts *netappaccountencryption.Timeouts `hcl:"timeouts,block"`
}
type netappAccountEncryptionAttributes struct {
	ref terra.Reference
}

// EncryptionKey returns a reference to field encryption_key of azurerm_netapp_account_encryption.
func (nae netappAccountEncryptionAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(nae.ref.Append("encryption_key"))
}

// Id returns a reference to field id of azurerm_netapp_account_encryption.
func (nae netappAccountEncryptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nae.ref.Append("id"))
}

// NetappAccountId returns a reference to field netapp_account_id of azurerm_netapp_account_encryption.
func (nae netappAccountEncryptionAttributes) NetappAccountId() terra.StringValue {
	return terra.ReferenceAsString(nae.ref.Append("netapp_account_id"))
}

// SystemAssignedIdentityPrincipalId returns a reference to field system_assigned_identity_principal_id of azurerm_netapp_account_encryption.
func (nae netappAccountEncryptionAttributes) SystemAssignedIdentityPrincipalId() terra.StringValue {
	return terra.ReferenceAsString(nae.ref.Append("system_assigned_identity_principal_id"))
}

// UserAssignedIdentityId returns a reference to field user_assigned_identity_id of azurerm_netapp_account_encryption.
func (nae netappAccountEncryptionAttributes) UserAssignedIdentityId() terra.StringValue {
	return terra.ReferenceAsString(nae.ref.Append("user_assigned_identity_id"))
}

func (nae netappAccountEncryptionAttributes) Timeouts() netappaccountencryption.TimeoutsAttributes {
	return terra.ReferenceAsSingle[netappaccountencryption.TimeoutsAttributes](nae.ref.Append("timeouts"))
}

type netappAccountEncryptionState struct {
	EncryptionKey                     string                                 `json:"encryption_key"`
	Id                                string                                 `json:"id"`
	NetappAccountId                   string                                 `json:"netapp_account_id"`
	SystemAssignedIdentityPrincipalId string                                 `json:"system_assigned_identity_principal_id"`
	UserAssignedIdentityId            string                                 `json:"user_assigned_identity_id"`
	Timeouts                          *netappaccountencryption.TimeoutsState `json:"timeouts"`
}
