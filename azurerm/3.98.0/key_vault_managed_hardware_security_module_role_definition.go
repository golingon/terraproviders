// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	keyvaultmanagedhardwaresecuritymoduleroledefinition "github.com/golingon/terraproviders/azurerm/3.98.0/keyvaultmanagedhardwaresecuritymoduleroledefinition"
	"io"
)

// NewKeyVaultManagedHardwareSecurityModuleRoleDefinition creates a new instance of [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func NewKeyVaultManagedHardwareSecurityModuleRoleDefinition(name string, args KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs) *KeyVaultManagedHardwareSecurityModuleRoleDefinition {
	return &KeyVaultManagedHardwareSecurityModuleRoleDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyVaultManagedHardwareSecurityModuleRoleDefinition)(nil)

// KeyVaultManagedHardwareSecurityModuleRoleDefinition represents the Terraform resource azurerm_key_vault_managed_hardware_security_module_role_definition.
type KeyVaultManagedHardwareSecurityModuleRoleDefinition struct {
	Name      string
	Args      KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs
	state     *keyVaultManagedHardwareSecurityModuleRoleDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) Type() string {
	return "azurerm_key_vault_managed_hardware_security_module_role_definition"
}

// LocalName returns the local name for [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) LocalName() string {
	return kvmhsmrd.Name
}

// Configuration returns the configuration (args) for [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) Configuration() interface{} {
	return kvmhsmrd.Args
}

// DependOn is used for other resources to depend on [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(kvmhsmrd)
}

// Dependencies returns the list of resources [KeyVaultManagedHardwareSecurityModuleRoleDefinition] depends_on.
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) Dependencies() terra.Dependencies {
	return kvmhsmrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) LifecycleManagement() *terra.Lifecycle {
	return kvmhsmrd.Lifecycle
}

// Attributes returns the attributes for [KeyVaultManagedHardwareSecurityModuleRoleDefinition].
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) Attributes() keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes {
	return keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes{ref: terra.ReferenceResource(kvmhsmrd)}
}

// ImportState imports the given attribute values into [KeyVaultManagedHardwareSecurityModuleRoleDefinition]'s state.
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) ImportState(av io.Reader) error {
	kvmhsmrd.state = &keyVaultManagedHardwareSecurityModuleRoleDefinitionState{}
	if err := json.NewDecoder(av).Decode(kvmhsmrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvmhsmrd.Type(), kvmhsmrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyVaultManagedHardwareSecurityModuleRoleDefinition] has state.
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) State() (*keyVaultManagedHardwareSecurityModuleRoleDefinitionState, bool) {
	return kvmhsmrd.state, kvmhsmrd.state != nil
}

// StateMust returns the state for [KeyVaultManagedHardwareSecurityModuleRoleDefinition]. Panics if the state is nil.
func (kvmhsmrd *KeyVaultManagedHardwareSecurityModuleRoleDefinition) StateMust() *keyVaultManagedHardwareSecurityModuleRoleDefinitionState {
	if kvmhsmrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvmhsmrd.Type(), kvmhsmrd.LocalName()))
	}
	return kvmhsmrd.state
}

// KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs contains the configurations for azurerm_key_vault_managed_hardware_security_module_role_definition.
type KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleName: string, optional
	RoleName terra.StringValue `hcl:"role_name,attr"`
	// VaultBaseUrl: string, required
	VaultBaseUrl terra.StringValue `hcl:"vault_base_url,attr" validate:"required"`
	// Permission: min=0
	Permission []keyvaultmanagedhardwaresecuritymoduleroledefinition.Permission `hcl:"permission,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *keyvaultmanagedhardwaresecuritymoduleroledefinition.Timeouts `hcl:"timeouts,block"`
}
type keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("description"))
}

// Id returns a reference to field id of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("id"))
}

// Name returns a reference to field name of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("name"))
}

// ResourceManagerId returns a reference to field resource_manager_id of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) ResourceManagerId() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("resource_manager_id"))
}

// RoleName returns a reference to field role_name of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("role_name"))
}

// RoleType returns a reference to field role_type of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("role_type"))
}

// VaultBaseUrl returns a reference to field vault_base_url of azurerm_key_vault_managed_hardware_security_module_role_definition.
func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) VaultBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(kvmhsmrd.ref.Append("vault_base_url"))
}

func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Permission() terra.ListValue[keyvaultmanagedhardwaresecuritymoduleroledefinition.PermissionAttributes] {
	return terra.ReferenceAsList[keyvaultmanagedhardwaresecuritymoduleroledefinition.PermissionAttributes](kvmhsmrd.ref.Append("permission"))
}

func (kvmhsmrd keyVaultManagedHardwareSecurityModuleRoleDefinitionAttributes) Timeouts() keyvaultmanagedhardwaresecuritymoduleroledefinition.TimeoutsAttributes {
	return terra.ReferenceAsSingle[keyvaultmanagedhardwaresecuritymoduleroledefinition.TimeoutsAttributes](kvmhsmrd.ref.Append("timeouts"))
}

type keyVaultManagedHardwareSecurityModuleRoleDefinitionState struct {
	Description       string                                                                `json:"description"`
	Id                string                                                                `json:"id"`
	Name              string                                                                `json:"name"`
	ResourceManagerId string                                                                `json:"resource_manager_id"`
	RoleName          string                                                                `json:"role_name"`
	RoleType          string                                                                `json:"role_type"`
	VaultBaseUrl      string                                                                `json:"vault_base_url"`
	Permission        []keyvaultmanagedhardwaresecuritymoduleroledefinition.PermissionState `json:"permission"`
	Timeouts          *keyvaultmanagedhardwaresecuritymoduleroledefinition.TimeoutsState    `json:"timeouts"`
}
