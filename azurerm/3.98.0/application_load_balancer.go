// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package azurerm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	applicationloadbalancer "github.com/golingon/terraproviders/azurerm/3.98.0/applicationloadbalancer"
	"io"
)

// NewApplicationLoadBalancer creates a new instance of [ApplicationLoadBalancer].
func NewApplicationLoadBalancer(name string, args ApplicationLoadBalancerArgs) *ApplicationLoadBalancer {
	return &ApplicationLoadBalancer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApplicationLoadBalancer)(nil)

// ApplicationLoadBalancer represents the Terraform resource azurerm_application_load_balancer.
type ApplicationLoadBalancer struct {
	Name      string
	Args      ApplicationLoadBalancerArgs
	state     *applicationLoadBalancerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) Type() string {
	return "azurerm_application_load_balancer"
}

// LocalName returns the local name for [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) LocalName() string {
	return alb.Name
}

// Configuration returns the configuration (args) for [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) Configuration() interface{} {
	return alb.Args
}

// DependOn is used for other resources to depend on [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) DependOn() terra.Reference {
	return terra.ReferenceResource(alb)
}

// Dependencies returns the list of resources [ApplicationLoadBalancer] depends_on.
func (alb *ApplicationLoadBalancer) Dependencies() terra.Dependencies {
	return alb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) LifecycleManagement() *terra.Lifecycle {
	return alb.Lifecycle
}

// Attributes returns the attributes for [ApplicationLoadBalancer].
func (alb *ApplicationLoadBalancer) Attributes() applicationLoadBalancerAttributes {
	return applicationLoadBalancerAttributes{ref: terra.ReferenceResource(alb)}
}

// ImportState imports the given attribute values into [ApplicationLoadBalancer]'s state.
func (alb *ApplicationLoadBalancer) ImportState(av io.Reader) error {
	alb.state = &applicationLoadBalancerState{}
	if err := json.NewDecoder(av).Decode(alb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alb.Type(), alb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApplicationLoadBalancer] has state.
func (alb *ApplicationLoadBalancer) State() (*applicationLoadBalancerState, bool) {
	return alb.state, alb.state != nil
}

// StateMust returns the state for [ApplicationLoadBalancer]. Panics if the state is nil.
func (alb *ApplicationLoadBalancer) StateMust() *applicationLoadBalancerState {
	if alb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alb.Type(), alb.LocalName()))
	}
	return alb.state
}

// ApplicationLoadBalancerArgs contains the configurations for azurerm_application_load_balancer.
type ApplicationLoadBalancerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceGroupName: string, required
	ResourceGroupName terra.StringValue `hcl:"resource_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *applicationloadbalancer.Timeouts `hcl:"timeouts,block"`
}
type applicationLoadBalancerAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("id"))
}

// Location returns a reference to field location of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("location"))
}

// Name returns a reference to field name of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("name"))
}

// PrimaryConfigurationEndpoint returns a reference to field primary_configuration_endpoint of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) PrimaryConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("primary_configuration_endpoint"))
}

// ResourceGroupName returns a reference to field resource_group_name of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) ResourceGroupName() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("resource_group_name"))
}

// Tags returns a reference to field tags of azurerm_application_load_balancer.
func (alb applicationLoadBalancerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("tags"))
}

func (alb applicationLoadBalancerAttributes) Timeouts() applicationloadbalancer.TimeoutsAttributes {
	return terra.ReferenceAsSingle[applicationloadbalancer.TimeoutsAttributes](alb.ref.Append("timeouts"))
}

type applicationLoadBalancerState struct {
	Id                           string                                 `json:"id"`
	Location                     string                                 `json:"location"`
	Name                         string                                 `json:"name"`
	PrimaryConfigurationEndpoint string                                 `json:"primary_configuration_endpoint"`
	ResourceGroupName            string                                 `json:"resource_group_name"`
	Tags                         map[string]string                      `json:"tags"`
	Timeouts                     *applicationloadbalancer.TimeoutsState `json:"timeouts"`
}
