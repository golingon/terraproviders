// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package keyvaultmanagedhardwaresecuritymodule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type NetworkAcls struct {
	// Bypass: string, required
	Bypass terra.StringValue `hcl:"bypass,attr" validate:"required"`
	// DefaultAction: string, required
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type NetworkAclsAttributes struct {
	ref terra.Reference
}

func (na NetworkAclsAttributes) InternalRef() (terra.Reference, error) {
	return na.ref, nil
}

func (na NetworkAclsAttributes) InternalWithRef(ref terra.Reference) NetworkAclsAttributes {
	return NetworkAclsAttributes{ref: ref}
}

func (na NetworkAclsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return na.ref.InternalTokens()
}

func (na NetworkAclsAttributes) Bypass() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("bypass"))
}

func (na NetworkAclsAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(na.ref.Append("default_action"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type NetworkAclsState struct {
	Bypass        string `json:"bypass"`
	DefaultAction string `json:"default_action"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
