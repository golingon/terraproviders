// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datafactorydatasetsnowflake

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SchemaColumn struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Precision: number, optional
	Precision terra.NumberValue `hcl:"precision,attr"`
	// Scale: number, optional
	Scale terra.NumberValue `hcl:"scale,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SchemaColumnAttributes struct {
	ref terra.Reference
}

func (sc SchemaColumnAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SchemaColumnAttributes) InternalWithRef(ref terra.Reference) SchemaColumnAttributes {
	return SchemaColumnAttributes{ref: ref}
}

func (sc SchemaColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SchemaColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc SchemaColumnAttributes) Precision() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("precision"))
}

func (sc SchemaColumnAttributes) Scale() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("scale"))
}

func (sc SchemaColumnAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SchemaColumnState struct {
	Name      string  `json:"name"`
	Precision float64 `json:"precision"`
	Scale     float64 `json:"scale"`
	Type      string  `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
