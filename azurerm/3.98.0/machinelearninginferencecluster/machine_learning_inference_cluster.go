// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package machinelearninginferencecluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Identity struct {
	// IdentityIds: set of string, optional
	IdentityIds terra.SetValue[terra.StringValue] `hcl:"identity_ids,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Ssl struct {
	// Cert: string, optional
	Cert terra.StringValue `hcl:"cert,attr"`
	// Cname: string, optional
	Cname terra.StringValue `hcl:"cname,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// LeafDomainLabel: string, optional
	LeafDomainLabel terra.StringValue `hcl:"leaf_domain_label,attr"`
	// OverwriteExistingDomain: bool, optional
	OverwriteExistingDomain terra.BoolValue `hcl:"overwrite_existing_domain,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type IdentityAttributes struct {
	ref terra.Reference
}

func (i IdentityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdentityAttributes) InternalWithRef(ref terra.Reference) IdentityAttributes {
	return IdentityAttributes{ref: ref}
}

func (i IdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdentityAttributes) IdentityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("identity_ids"))
}

func (i IdentityAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("principal_id"))
}

func (i IdentityAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("tenant_id"))
}

func (i IdentityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("type"))
}

type SslAttributes struct {
	ref terra.Reference
}

func (s SslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SslAttributes) InternalWithRef(ref terra.Reference) SslAttributes {
	return SslAttributes{ref: ref}
}

func (s SslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SslAttributes) Cert() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cert"))
}

func (s SslAttributes) Cname() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cname"))
}

func (s SslAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s SslAttributes) LeafDomainLabel() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("leaf_domain_label"))
}

func (s SslAttributes) OverwriteExistingDomain() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("overwrite_existing_domain"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type IdentityState struct {
	IdentityIds []string `json:"identity_ids"`
	PrincipalId string   `json:"principal_id"`
	TenantId    string   `json:"tenant_id"`
	Type        string   `json:"type"`
}

type SslState struct {
	Cert                    string `json:"cert"`
	Cname                   string `json:"cname"`
	Key                     string `json:"key"`
	LeafDomainLabel         string `json:"leaf_domain_label"`
	OverwriteExistingDomain bool   `json:"overwrite_existing_domain"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
