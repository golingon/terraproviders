// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataprotectionbackuppolicykubernetescluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DefaultRetentionRule struct {
	// DefaultRetentionRuleLifeCycle: min=1
	LifeCycle []DefaultRetentionRuleLifeCycle `hcl:"life_cycle,block" validate:"min=1"`
}

type DefaultRetentionRuleLifeCycle struct {
	// DataStoreType: string, required
	DataStoreType terra.StringValue `hcl:"data_store_type,attr" validate:"required"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
}

type RetentionRule struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Criteria: required
	Criteria *Criteria `hcl:"criteria,block" validate:"required"`
	// RetentionRuleLifeCycle: min=1
	LifeCycle []RetentionRuleLifeCycle `hcl:"life_cycle,block" validate:"min=1"`
}

type Criteria struct {
	// AbsoluteCriteria: string, optional
	AbsoluteCriteria terra.StringValue `hcl:"absolute_criteria,attr"`
	// DaysOfWeek: set of string, optional
	DaysOfWeek terra.SetValue[terra.StringValue] `hcl:"days_of_week,attr"`
	// MonthsOfYear: set of string, optional
	MonthsOfYear terra.SetValue[terra.StringValue] `hcl:"months_of_year,attr"`
	// ScheduledBackupTimes: set of string, optional
	ScheduledBackupTimes terra.SetValue[terra.StringValue] `hcl:"scheduled_backup_times,attr"`
	// WeeksOfMonth: set of string, optional
	WeeksOfMonth terra.SetValue[terra.StringValue] `hcl:"weeks_of_month,attr"`
}

type RetentionRuleLifeCycle struct {
	// DataStoreType: string, required
	DataStoreType terra.StringValue `hcl:"data_store_type,attr" validate:"required"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DefaultRetentionRuleAttributes struct {
	ref terra.Reference
}

func (drr DefaultRetentionRuleAttributes) InternalRef() (terra.Reference, error) {
	return drr.ref, nil
}

func (drr DefaultRetentionRuleAttributes) InternalWithRef(ref terra.Reference) DefaultRetentionRuleAttributes {
	return DefaultRetentionRuleAttributes{ref: ref}
}

func (drr DefaultRetentionRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drr.ref.InternalTokens()
}

func (drr DefaultRetentionRuleAttributes) LifeCycle() terra.ListValue[DefaultRetentionRuleLifeCycleAttributes] {
	return terra.ReferenceAsList[DefaultRetentionRuleLifeCycleAttributes](drr.ref.Append("life_cycle"))
}

type DefaultRetentionRuleLifeCycleAttributes struct {
	ref terra.Reference
}

func (lc DefaultRetentionRuleLifeCycleAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc DefaultRetentionRuleLifeCycleAttributes) InternalWithRef(ref terra.Reference) DefaultRetentionRuleLifeCycleAttributes {
	return DefaultRetentionRuleLifeCycleAttributes{ref: ref}
}

func (lc DefaultRetentionRuleLifeCycleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc DefaultRetentionRuleLifeCycleAttributes) DataStoreType() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("data_store_type"))
}

func (lc DefaultRetentionRuleLifeCycleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("duration"))
}

type RetentionRuleAttributes struct {
	ref terra.Reference
}

func (rr RetentionRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RetentionRuleAttributes) InternalWithRef(ref terra.Reference) RetentionRuleAttributes {
	return RetentionRuleAttributes{ref: ref}
}

func (rr RetentionRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RetentionRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("name"))
}

func (rr RetentionRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("priority"))
}

func (rr RetentionRuleAttributes) Criteria() terra.ListValue[CriteriaAttributes] {
	return terra.ReferenceAsList[CriteriaAttributes](rr.ref.Append("criteria"))
}

func (rr RetentionRuleAttributes) LifeCycle() terra.ListValue[RetentionRuleLifeCycleAttributes] {
	return terra.ReferenceAsList[RetentionRuleLifeCycleAttributes](rr.ref.Append("life_cycle"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) AbsoluteCriteria() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("absolute_criteria"))
}

func (c CriteriaAttributes) DaysOfWeek() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("days_of_week"))
}

func (c CriteriaAttributes) MonthsOfYear() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("months_of_year"))
}

func (c CriteriaAttributes) ScheduledBackupTimes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("scheduled_backup_times"))
}

func (c CriteriaAttributes) WeeksOfMonth() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("weeks_of_month"))
}

type RetentionRuleLifeCycleAttributes struct {
	ref terra.Reference
}

func (lc RetentionRuleLifeCycleAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc RetentionRuleLifeCycleAttributes) InternalWithRef(ref terra.Reference) RetentionRuleLifeCycleAttributes {
	return RetentionRuleLifeCycleAttributes{ref: ref}
}

func (lc RetentionRuleLifeCycleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc RetentionRuleLifeCycleAttributes) DataStoreType() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("data_store_type"))
}

func (lc RetentionRuleLifeCycleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("duration"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DefaultRetentionRuleState struct {
	LifeCycle []DefaultRetentionRuleLifeCycleState `json:"life_cycle"`
}

type DefaultRetentionRuleLifeCycleState struct {
	DataStoreType string `json:"data_store_type"`
	Duration      string `json:"duration"`
}

type RetentionRuleState struct {
	Name      string                        `json:"name"`
	Priority  float64                       `json:"priority"`
	Criteria  []CriteriaState               `json:"criteria"`
	LifeCycle []RetentionRuleLifeCycleState `json:"life_cycle"`
}

type CriteriaState struct {
	AbsoluteCriteria     string   `json:"absolute_criteria"`
	DaysOfWeek           []string `json:"days_of_week"`
	MonthsOfYear         []string `json:"months_of_year"`
	ScheduledBackupTimes []string `json:"scheduled_backup_times"`
	WeeksOfMonth         []string `json:"weeks_of_month"`
}

type RetentionRuleLifeCycleState struct {
	DataStoreType string `json:"data_store_type"`
	Duration      string `json:"duration"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
}
