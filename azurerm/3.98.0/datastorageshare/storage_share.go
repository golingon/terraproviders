// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datastorageshare

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Acl struct {
	// AccessPolicy: min=0
	AccessPolicy []AccessPolicy `hcl:"access_policy,block" validate:"min=0"`
}

type AccessPolicy struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type AclAttributes struct {
	ref terra.Reference
}

func (a AclAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AclAttributes) InternalWithRef(ref terra.Reference) AclAttributes {
	return AclAttributes{ref: ref}
}

func (a AclAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

func (a AclAttributes) AccessPolicy() terra.ListValue[AccessPolicyAttributes] {
	return terra.ReferenceAsList[AccessPolicyAttributes](a.ref.Append("access_policy"))
}

type AccessPolicyAttributes struct {
	ref terra.Reference
}

func (ap AccessPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap AccessPolicyAttributes) InternalWithRef(ref terra.Reference) AccessPolicyAttributes {
	return AccessPolicyAttributes{ref: ref}
}

func (ap AccessPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap AccessPolicyAttributes) Expiry() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("expiry"))
}

func (ap AccessPolicyAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("permissions"))
}

func (ap AccessPolicyAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("start"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type AclState struct {
	Id           string              `json:"id"`
	AccessPolicy []AccessPolicyState `json:"access_policy"`
}

type AccessPolicyState struct {
	Expiry      string `json:"expiry"`
	Permissions string `json:"permissions"`
	Start       string `json:"start"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
