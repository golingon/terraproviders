// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package helm

import (
	"encoding/json"
	"fmt"
	release "github.com/golingon/terraproviders/helm/2.9.0/release"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRelease creates a new instance of [Release].
func NewRelease(name string, args ReleaseArgs) *Release {
	return &Release{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Release)(nil)

// Release represents the Terraform resource helm_release.
type Release struct {
	Name      string
	Args      ReleaseArgs
	state     *releaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Release].
func (r *Release) Type() string {
	return "helm_release"
}

// LocalName returns the local name for [Release].
func (r *Release) LocalName() string {
	return r.Name
}

// Configuration returns the configuration (args) for [Release].
func (r *Release) Configuration() interface{} {
	return r.Args
}

// DependOn is used for other resources to depend on [Release].
func (r *Release) DependOn() terra.Reference {
	return terra.ReferenceResource(r)
}

// Dependencies returns the list of resources [Release] depends_on.
func (r *Release) Dependencies() terra.Dependencies {
	return r.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Release].
func (r *Release) LifecycleManagement() *terra.Lifecycle {
	return r.Lifecycle
}

// Attributes returns the attributes for [Release].
func (r *Release) Attributes() releaseAttributes {
	return releaseAttributes{ref: terra.ReferenceResource(r)}
}

// ImportState imports the given attribute values into [Release]'s state.
func (r *Release) ImportState(av io.Reader) error {
	r.state = &releaseState{}
	if err := json.NewDecoder(av).Decode(r.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", r.Type(), r.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Release] has state.
func (r *Release) State() (*releaseState, bool) {
	return r.state, r.state != nil
}

// StateMust returns the state for [Release]. Panics if the state is nil.
func (r *Release) StateMust() *releaseState {
	if r.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", r.Type(), r.LocalName()))
	}
	return r.state
}

// ReleaseArgs contains the configurations for helm_release.
type ReleaseArgs struct {
	// Atomic: bool, optional
	Atomic terra.BoolValue `hcl:"atomic,attr"`
	// Chart: string, required
	Chart terra.StringValue `hcl:"chart,attr" validate:"required"`
	// CleanupOnFail: bool, optional
	CleanupOnFail terra.BoolValue `hcl:"cleanup_on_fail,attr"`
	// CreateNamespace: bool, optional
	CreateNamespace terra.BoolValue `hcl:"create_namespace,attr"`
	// DependencyUpdate: bool, optional
	DependencyUpdate terra.BoolValue `hcl:"dependency_update,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Devel: bool, optional
	Devel terra.BoolValue `hcl:"devel,attr"`
	// DisableCrdHooks: bool, optional
	DisableCrdHooks terra.BoolValue `hcl:"disable_crd_hooks,attr"`
	// DisableOpenapiValidation: bool, optional
	DisableOpenapiValidation terra.BoolValue `hcl:"disable_openapi_validation,attr"`
	// DisableWebhooks: bool, optional
	DisableWebhooks terra.BoolValue `hcl:"disable_webhooks,attr"`
	// ForceUpdate: bool, optional
	ForceUpdate terra.BoolValue `hcl:"force_update,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Keyring: string, optional
	Keyring terra.StringValue `hcl:"keyring,attr"`
	// Lint: bool, optional
	Lint terra.BoolValue `hcl:"lint,attr"`
	// MaxHistory: number, optional
	MaxHistory terra.NumberValue `hcl:"max_history,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PassCredentials: bool, optional
	PassCredentials terra.BoolValue `hcl:"pass_credentials,attr"`
	// RecreatePods: bool, optional
	RecreatePods terra.BoolValue `hcl:"recreate_pods,attr"`
	// RenderSubchartNotes: bool, optional
	RenderSubchartNotes terra.BoolValue `hcl:"render_subchart_notes,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// RepositoryCaFile: string, optional
	RepositoryCaFile terra.StringValue `hcl:"repository_ca_file,attr"`
	// RepositoryCertFile: string, optional
	RepositoryCertFile terra.StringValue `hcl:"repository_cert_file,attr"`
	// RepositoryKeyFile: string, optional
	RepositoryKeyFile terra.StringValue `hcl:"repository_key_file,attr"`
	// RepositoryPassword: string, optional
	RepositoryPassword terra.StringValue `hcl:"repository_password,attr"`
	// RepositoryUsername: string, optional
	RepositoryUsername terra.StringValue `hcl:"repository_username,attr"`
	// ResetValues: bool, optional
	ResetValues terra.BoolValue `hcl:"reset_values,attr"`
	// ReuseValues: bool, optional
	ReuseValues terra.BoolValue `hcl:"reuse_values,attr"`
	// SkipCrds: bool, optional
	SkipCrds terra.BoolValue `hcl:"skip_crds,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// Values: list of string, optional
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr"`
	// Verify: bool, optional
	Verify terra.BoolValue `hcl:"verify,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Wait: bool, optional
	Wait terra.BoolValue `hcl:"wait,attr"`
	// WaitForJobs: bool, optional
	WaitForJobs terra.BoolValue `hcl:"wait_for_jobs,attr"`
	// Metadata: min=0
	Metadata []release.Metadata `hcl:"metadata,block" validate:"min=0"`
	// Postrender: optional
	Postrender *release.Postrender `hcl:"postrender,block"`
	// Set: min=0
	Set []release.Set `hcl:"set,block" validate:"min=0"`
	// SetSensitive: min=0
	SetSensitive []release.SetSensitive `hcl:"set_sensitive,block" validate:"min=0"`
}
type releaseAttributes struct {
	ref terra.Reference
}

// Atomic returns a reference to field atomic of helm_release.
func (r releaseAttributes) Atomic() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("atomic"))
}

// Chart returns a reference to field chart of helm_release.
func (r releaseAttributes) Chart() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("chart"))
}

// CleanupOnFail returns a reference to field cleanup_on_fail of helm_release.
func (r releaseAttributes) CleanupOnFail() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("cleanup_on_fail"))
}

// CreateNamespace returns a reference to field create_namespace of helm_release.
func (r releaseAttributes) CreateNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("create_namespace"))
}

// DependencyUpdate returns a reference to field dependency_update of helm_release.
func (r releaseAttributes) DependencyUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("dependency_update"))
}

// Description returns a reference to field description of helm_release.
func (r releaseAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

// Devel returns a reference to field devel of helm_release.
func (r releaseAttributes) Devel() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("devel"))
}

// DisableCrdHooks returns a reference to field disable_crd_hooks of helm_release.
func (r releaseAttributes) DisableCrdHooks() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("disable_crd_hooks"))
}

// DisableOpenapiValidation returns a reference to field disable_openapi_validation of helm_release.
func (r releaseAttributes) DisableOpenapiValidation() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("disable_openapi_validation"))
}

// DisableWebhooks returns a reference to field disable_webhooks of helm_release.
func (r releaseAttributes) DisableWebhooks() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("disable_webhooks"))
}

// ForceUpdate returns a reference to field force_update of helm_release.
func (r releaseAttributes) ForceUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("force_update"))
}

// Id returns a reference to field id of helm_release.
func (r releaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

// Keyring returns a reference to field keyring of helm_release.
func (r releaseAttributes) Keyring() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("keyring"))
}

// Lint returns a reference to field lint of helm_release.
func (r releaseAttributes) Lint() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("lint"))
}

// Manifest returns a reference to field manifest of helm_release.
func (r releaseAttributes) Manifest() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("manifest"))
}

// MaxHistory returns a reference to field max_history of helm_release.
func (r releaseAttributes) MaxHistory() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("max_history"))
}

// Name returns a reference to field name of helm_release.
func (r releaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

// Namespace returns a reference to field namespace of helm_release.
func (r releaseAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("namespace"))
}

// PassCredentials returns a reference to field pass_credentials of helm_release.
func (r releaseAttributes) PassCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("pass_credentials"))
}

// RecreatePods returns a reference to field recreate_pods of helm_release.
func (r releaseAttributes) RecreatePods() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("recreate_pods"))
}

// RenderSubchartNotes returns a reference to field render_subchart_notes of helm_release.
func (r releaseAttributes) RenderSubchartNotes() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("render_subchart_notes"))
}

// Replace returns a reference to field replace of helm_release.
func (r releaseAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("replace"))
}

// Repository returns a reference to field repository of helm_release.
func (r releaseAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository"))
}

// RepositoryCaFile returns a reference to field repository_ca_file of helm_release.
func (r releaseAttributes) RepositoryCaFile() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_ca_file"))
}

// RepositoryCertFile returns a reference to field repository_cert_file of helm_release.
func (r releaseAttributes) RepositoryCertFile() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_cert_file"))
}

// RepositoryKeyFile returns a reference to field repository_key_file of helm_release.
func (r releaseAttributes) RepositoryKeyFile() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_key_file"))
}

// RepositoryPassword returns a reference to field repository_password of helm_release.
func (r releaseAttributes) RepositoryPassword() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_password"))
}

// RepositoryUsername returns a reference to field repository_username of helm_release.
func (r releaseAttributes) RepositoryUsername() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_username"))
}

// ResetValues returns a reference to field reset_values of helm_release.
func (r releaseAttributes) ResetValues() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("reset_values"))
}

// ReuseValues returns a reference to field reuse_values of helm_release.
func (r releaseAttributes) ReuseValues() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("reuse_values"))
}

// SkipCrds returns a reference to field skip_crds of helm_release.
func (r releaseAttributes) SkipCrds() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("skip_crds"))
}

// Status returns a reference to field status of helm_release.
func (r releaseAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

// Timeout returns a reference to field timeout of helm_release.
func (r releaseAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("timeout"))
}

// Values returns a reference to field values of helm_release.
func (r releaseAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("values"))
}

// Verify returns a reference to field verify of helm_release.
func (r releaseAttributes) Verify() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("verify"))
}

// Version returns a reference to field version of helm_release.
func (r releaseAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("version"))
}

// Wait returns a reference to field wait of helm_release.
func (r releaseAttributes) Wait() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("wait"))
}

// WaitForJobs returns a reference to field wait_for_jobs of helm_release.
func (r releaseAttributes) WaitForJobs() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("wait_for_jobs"))
}

func (r releaseAttributes) Metadata() terra.ListValue[release.MetadataAttributes] {
	return terra.ReferenceAsList[release.MetadataAttributes](r.ref.Append("metadata"))
}

func (r releaseAttributes) Postrender() terra.ListValue[release.PostrenderAttributes] {
	return terra.ReferenceAsList[release.PostrenderAttributes](r.ref.Append("postrender"))
}

func (r releaseAttributes) Set() terra.SetValue[release.SetAttributes] {
	return terra.ReferenceAsSet[release.SetAttributes](r.ref.Append("set"))
}

func (r releaseAttributes) SetSensitive() terra.SetValue[release.SetSensitiveAttributes] {
	return terra.ReferenceAsSet[release.SetSensitiveAttributes](r.ref.Append("set_sensitive"))
}

type releaseState struct {
	Atomic                   bool                        `json:"atomic"`
	Chart                    string                      `json:"chart"`
	CleanupOnFail            bool                        `json:"cleanup_on_fail"`
	CreateNamespace          bool                        `json:"create_namespace"`
	DependencyUpdate         bool                        `json:"dependency_update"`
	Description              string                      `json:"description"`
	Devel                    bool                        `json:"devel"`
	DisableCrdHooks          bool                        `json:"disable_crd_hooks"`
	DisableOpenapiValidation bool                        `json:"disable_openapi_validation"`
	DisableWebhooks          bool                        `json:"disable_webhooks"`
	ForceUpdate              bool                        `json:"force_update"`
	Id                       string                      `json:"id"`
	Keyring                  string                      `json:"keyring"`
	Lint                     bool                        `json:"lint"`
	Manifest                 string                      `json:"manifest"`
	MaxHistory               float64                     `json:"max_history"`
	Name                     string                      `json:"name"`
	Namespace                string                      `json:"namespace"`
	PassCredentials          bool                        `json:"pass_credentials"`
	RecreatePods             bool                        `json:"recreate_pods"`
	RenderSubchartNotes      bool                        `json:"render_subchart_notes"`
	Replace                  bool                        `json:"replace"`
	Repository               string                      `json:"repository"`
	RepositoryCaFile         string                      `json:"repository_ca_file"`
	RepositoryCertFile       string                      `json:"repository_cert_file"`
	RepositoryKeyFile        string                      `json:"repository_key_file"`
	RepositoryPassword       string                      `json:"repository_password"`
	RepositoryUsername       string                      `json:"repository_username"`
	ResetValues              bool                        `json:"reset_values"`
	ReuseValues              bool                        `json:"reuse_values"`
	SkipCrds                 bool                        `json:"skip_crds"`
	Status                   string                      `json:"status"`
	Timeout                  float64                     `json:"timeout"`
	Values                   []string                    `json:"values"`
	Verify                   bool                        `json:"verify"`
	Version                  string                      `json:"version"`
	Wait                     bool                        `json:"wait"`
	WaitForJobs              bool                        `json:"wait_for_jobs"`
	Metadata                 []release.MetadataState     `json:"metadata"`
	Postrender               []release.PostrenderState   `json:"postrender"`
	Set                      []release.SetState          `json:"set"`
	SetSensitive             []release.SetSensitiveState `json:"set_sensitive"`
}
