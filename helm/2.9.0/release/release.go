// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package release

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Metadata struct{}

type Postrender struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// BinaryPath: string, required
	BinaryPath terra.StringValue `hcl:"binary_path,attr" validate:"required"`
}

type Set struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SetSensitive struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) AppVersion() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("app_version"))
}

func (m MetadataAttributes) Chart() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("chart"))
}

func (m MetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m MetadataAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("namespace"))
}

func (m MetadataAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("revision"))
}

func (m MetadataAttributes) Values() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("values"))
}

func (m MetadataAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("version"))
}

type PostrenderAttributes struct {
	ref terra.Reference
}

func (p PostrenderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PostrenderAttributes) InternalWithRef(ref terra.Reference) PostrenderAttributes {
	return PostrenderAttributes{ref: ref}
}

func (p PostrenderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PostrenderAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("args"))
}

func (p PostrenderAttributes) BinaryPath() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("binary_path"))
}

type SetAttributes struct {
	ref terra.Reference
}

func (s SetAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SetAttributes) InternalWithRef(ref terra.Reference) SetAttributes {
	return SetAttributes{ref: ref}
}

func (s SetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

func (s SetAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type SetSensitiveAttributes struct {
	ref terra.Reference
}

func (ss SetSensitiveAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SetSensitiveAttributes) InternalWithRef(ref terra.Reference) SetSensitiveAttributes {
	return SetSensitiveAttributes{ref: ref}
}

func (ss SetSensitiveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SetSensitiveAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("name"))
}

func (ss SetSensitiveAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("type"))
}

func (ss SetSensitiveAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("value"))
}

type MetadataState struct {
	AppVersion string  `json:"app_version"`
	Chart      string  `json:"chart"`
	Name       string  `json:"name"`
	Namespace  string  `json:"namespace"`
	Revision   float64 `json:"revision"`
	Values     string  `json:"values"`
	Version    string  `json:"version"`
}

type PostrenderState struct {
	Args       []string `json:"args"`
	BinaryPath string   `json:"binary_path"`
}

type SetState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type SetSensitiveState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}
