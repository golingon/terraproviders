// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package helm

import (
	datatemplate "github.com/golingon/terraproviders/helm/2.10.1/datatemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataTemplate creates a new instance of [DataTemplate].
func NewDataTemplate(name string, args DataTemplateArgs) *DataTemplate {
	return &DataTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataTemplate)(nil)

// DataTemplate represents the Terraform data resource helm_template.
type DataTemplate struct {
	Name string
	Args DataTemplateArgs
}

// DataSource returns the Terraform object type for [DataTemplate].
func (t *DataTemplate) DataSource() string {
	return "helm_template"
}

// LocalName returns the local name for [DataTemplate].
func (t *DataTemplate) LocalName() string {
	return t.Name
}

// Configuration returns the configuration (args) for [DataTemplate].
func (t *DataTemplate) Configuration() interface{} {
	return t.Args
}

// Attributes returns the attributes for [DataTemplate].
func (t *DataTemplate) Attributes() dataTemplateAttributes {
	return dataTemplateAttributes{ref: terra.ReferenceDataResource(t)}
}

// DataTemplateArgs contains the configurations for helm_template.
type DataTemplateArgs struct {
	// ApiVersions: list of string, optional
	ApiVersions terra.ListValue[terra.StringValue] `hcl:"api_versions,attr"`
	// Atomic: bool, optional
	Atomic terra.BoolValue `hcl:"atomic,attr"`
	// Chart: string, required
	Chart terra.StringValue `hcl:"chart,attr" validate:"required"`
	// Crds: list of string, optional
	Crds terra.ListValue[terra.StringValue] `hcl:"crds,attr"`
	// CreateNamespace: bool, optional
	CreateNamespace terra.BoolValue `hcl:"create_namespace,attr"`
	// DependencyUpdate: bool, optional
	DependencyUpdate terra.BoolValue `hcl:"dependency_update,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Devel: bool, optional
	Devel terra.BoolValue `hcl:"devel,attr"`
	// DisableOpenapiValidation: bool, optional
	DisableOpenapiValidation terra.BoolValue `hcl:"disable_openapi_validation,attr"`
	// DisableWebhooks: bool, optional
	DisableWebhooks terra.BoolValue `hcl:"disable_webhooks,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeCrds: bool, optional
	IncludeCrds terra.BoolValue `hcl:"include_crds,attr"`
	// IsUpgrade: bool, optional
	IsUpgrade terra.BoolValue `hcl:"is_upgrade,attr"`
	// Keyring: string, optional
	Keyring terra.StringValue `hcl:"keyring,attr"`
	// KubeVersion: string, optional
	KubeVersion terra.StringValue `hcl:"kube_version,attr"`
	// Manifest: string, optional
	Manifest terra.StringValue `hcl:"manifest,attr"`
	// Manifests: map of string, optional
	Manifests terra.MapValue[terra.StringValue] `hcl:"manifests,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Notes: string, optional
	Notes terra.StringValue `hcl:"notes,attr"`
	// PassCredentials: bool, optional
	PassCredentials terra.BoolValue `hcl:"pass_credentials,attr"`
	// RenderSubchartNotes: bool, optional
	RenderSubchartNotes terra.BoolValue `hcl:"render_subchart_notes,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
	// Repository: string, optional
	Repository terra.StringValue `hcl:"repository,attr"`
	// RepositoryCaFile: string, optional
	RepositoryCaFile terra.StringValue `hcl:"repository_ca_file,attr"`
	// RepositoryCertFile: string, optional
	RepositoryCertFile terra.StringValue `hcl:"repository_cert_file,attr"`
	// RepositoryKeyFile: string, optional
	RepositoryKeyFile terra.StringValue `hcl:"repository_key_file,attr"`
	// RepositoryPassword: string, optional
	RepositoryPassword terra.StringValue `hcl:"repository_password,attr"`
	// RepositoryUsername: string, optional
	RepositoryUsername terra.StringValue `hcl:"repository_username,attr"`
	// ResetValues: bool, optional
	ResetValues terra.BoolValue `hcl:"reset_values,attr"`
	// ReuseValues: bool, optional
	ReuseValues terra.BoolValue `hcl:"reuse_values,attr"`
	// ShowOnly: list of string, optional
	ShowOnly terra.ListValue[terra.StringValue] `hcl:"show_only,attr"`
	// SkipCrds: bool, optional
	SkipCrds terra.BoolValue `hcl:"skip_crds,attr"`
	// SkipTests: bool, optional
	SkipTests terra.BoolValue `hcl:"skip_tests,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// Validate: bool, optional
	Validate terra.BoolValue `hcl:"validate,attr"`
	// Values: list of string, optional
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr"`
	// Verify: bool, optional
	Verify terra.BoolValue `hcl:"verify,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Wait: bool, optional
	Wait terra.BoolValue `hcl:"wait,attr"`
	// Postrender: optional
	Postrender *datatemplate.Postrender `hcl:"postrender,block"`
	// Set: min=0
	Set []datatemplate.Set `hcl:"set,block" validate:"min=0"`
	// SetList: min=0
	SetList []datatemplate.SetList `hcl:"set_list,block" validate:"min=0"`
	// SetSensitive: min=0
	SetSensitive []datatemplate.SetSensitive `hcl:"set_sensitive,block" validate:"min=0"`
	// SetString: min=0
	SetString []datatemplate.SetString `hcl:"set_string,block" validate:"min=0"`
}
type dataTemplateAttributes struct {
	ref terra.Reference
}

// ApiVersions returns a reference to field api_versions of helm_template.
func (t dataTemplateAttributes) ApiVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("api_versions"))
}

// Atomic returns a reference to field atomic of helm_template.
func (t dataTemplateAttributes) Atomic() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("atomic"))
}

// Chart returns a reference to field chart of helm_template.
func (t dataTemplateAttributes) Chart() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("chart"))
}

// Crds returns a reference to field crds of helm_template.
func (t dataTemplateAttributes) Crds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("crds"))
}

// CreateNamespace returns a reference to field create_namespace of helm_template.
func (t dataTemplateAttributes) CreateNamespace() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("create_namespace"))
}

// DependencyUpdate returns a reference to field dependency_update of helm_template.
func (t dataTemplateAttributes) DependencyUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("dependency_update"))
}

// Description returns a reference to field description of helm_template.
func (t dataTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("description"))
}

// Devel returns a reference to field devel of helm_template.
func (t dataTemplateAttributes) Devel() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("devel"))
}

// DisableOpenapiValidation returns a reference to field disable_openapi_validation of helm_template.
func (t dataTemplateAttributes) DisableOpenapiValidation() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("disable_openapi_validation"))
}

// DisableWebhooks returns a reference to field disable_webhooks of helm_template.
func (t dataTemplateAttributes) DisableWebhooks() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("disable_webhooks"))
}

// Id returns a reference to field id of helm_template.
func (t dataTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("id"))
}

// IncludeCrds returns a reference to field include_crds of helm_template.
func (t dataTemplateAttributes) IncludeCrds() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("include_crds"))
}

// IsUpgrade returns a reference to field is_upgrade of helm_template.
func (t dataTemplateAttributes) IsUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("is_upgrade"))
}

// Keyring returns a reference to field keyring of helm_template.
func (t dataTemplateAttributes) Keyring() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("keyring"))
}

// KubeVersion returns a reference to field kube_version of helm_template.
func (t dataTemplateAttributes) KubeVersion() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("kube_version"))
}

// Manifest returns a reference to field manifest of helm_template.
func (t dataTemplateAttributes) Manifest() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("manifest"))
}

// Manifests returns a reference to field manifests of helm_template.
func (t dataTemplateAttributes) Manifests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("manifests"))
}

// Name returns a reference to field name of helm_template.
func (t dataTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

// Namespace returns a reference to field namespace of helm_template.
func (t dataTemplateAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("namespace"))
}

// Notes returns a reference to field notes of helm_template.
func (t dataTemplateAttributes) Notes() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("notes"))
}

// PassCredentials returns a reference to field pass_credentials of helm_template.
func (t dataTemplateAttributes) PassCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("pass_credentials"))
}

// RenderSubchartNotes returns a reference to field render_subchart_notes of helm_template.
func (t dataTemplateAttributes) RenderSubchartNotes() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("render_subchart_notes"))
}

// Replace returns a reference to field replace of helm_template.
func (t dataTemplateAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("replace"))
}

// Repository returns a reference to field repository of helm_template.
func (t dataTemplateAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository"))
}

// RepositoryCaFile returns a reference to field repository_ca_file of helm_template.
func (t dataTemplateAttributes) RepositoryCaFile() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository_ca_file"))
}

// RepositoryCertFile returns a reference to field repository_cert_file of helm_template.
func (t dataTemplateAttributes) RepositoryCertFile() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository_cert_file"))
}

// RepositoryKeyFile returns a reference to field repository_key_file of helm_template.
func (t dataTemplateAttributes) RepositoryKeyFile() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository_key_file"))
}

// RepositoryPassword returns a reference to field repository_password of helm_template.
func (t dataTemplateAttributes) RepositoryPassword() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository_password"))
}

// RepositoryUsername returns a reference to field repository_username of helm_template.
func (t dataTemplateAttributes) RepositoryUsername() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("repository_username"))
}

// ResetValues returns a reference to field reset_values of helm_template.
func (t dataTemplateAttributes) ResetValues() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("reset_values"))
}

// ReuseValues returns a reference to field reuse_values of helm_template.
func (t dataTemplateAttributes) ReuseValues() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("reuse_values"))
}

// ShowOnly returns a reference to field show_only of helm_template.
func (t dataTemplateAttributes) ShowOnly() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("show_only"))
}

// SkipCrds returns a reference to field skip_crds of helm_template.
func (t dataTemplateAttributes) SkipCrds() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("skip_crds"))
}

// SkipTests returns a reference to field skip_tests of helm_template.
func (t dataTemplateAttributes) SkipTests() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("skip_tests"))
}

// Timeout returns a reference to field timeout of helm_template.
func (t dataTemplateAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("timeout"))
}

// Validate returns a reference to field validate of helm_template.
func (t dataTemplateAttributes) Validate() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("validate"))
}

// Values returns a reference to field values of helm_template.
func (t dataTemplateAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("values"))
}

// Verify returns a reference to field verify of helm_template.
func (t dataTemplateAttributes) Verify() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("verify"))
}

// Version returns a reference to field version of helm_template.
func (t dataTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("version"))
}

// Wait returns a reference to field wait of helm_template.
func (t dataTemplateAttributes) Wait() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("wait"))
}

func (t dataTemplateAttributes) Postrender() terra.ListValue[datatemplate.PostrenderAttributes] {
	return terra.ReferenceAsList[datatemplate.PostrenderAttributes](t.ref.Append("postrender"))
}

func (t dataTemplateAttributes) Set() terra.SetValue[datatemplate.SetAttributes] {
	return terra.ReferenceAsSet[datatemplate.SetAttributes](t.ref.Append("set"))
}

func (t dataTemplateAttributes) SetList() terra.ListValue[datatemplate.SetListAttributes] {
	return terra.ReferenceAsList[datatemplate.SetListAttributes](t.ref.Append("set_list"))
}

func (t dataTemplateAttributes) SetSensitive() terra.SetValue[datatemplate.SetSensitiveAttributes] {
	return terra.ReferenceAsSet[datatemplate.SetSensitiveAttributes](t.ref.Append("set_sensitive"))
}

func (t dataTemplateAttributes) SetString() terra.SetValue[datatemplate.SetStringAttributes] {
	return terra.ReferenceAsSet[datatemplate.SetStringAttributes](t.ref.Append("set_string"))
}
