// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpcEndpointConnectionNotification creates a new instance of [VpcEndpointConnectionNotification].
func NewVpcEndpointConnectionNotification(name string, args VpcEndpointConnectionNotificationArgs) *VpcEndpointConnectionNotification {
	return &VpcEndpointConnectionNotification{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcEndpointConnectionNotification)(nil)

// VpcEndpointConnectionNotification represents the Terraform resource aws_vpc_endpoint_connection_notification.
type VpcEndpointConnectionNotification struct {
	Name      string
	Args      VpcEndpointConnectionNotificationArgs
	state     *vpcEndpointConnectionNotificationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) Type() string {
	return "aws_vpc_endpoint_connection_notification"
}

// LocalName returns the local name for [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) LocalName() string {
	return vecn.Name
}

// Configuration returns the configuration (args) for [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) Configuration() interface{} {
	return vecn.Args
}

// DependOn is used for other resources to depend on [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) DependOn() terra.Reference {
	return terra.ReferenceResource(vecn)
}

// Dependencies returns the list of resources [VpcEndpointConnectionNotification] depends_on.
func (vecn *VpcEndpointConnectionNotification) Dependencies() terra.Dependencies {
	return vecn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) LifecycleManagement() *terra.Lifecycle {
	return vecn.Lifecycle
}

// Attributes returns the attributes for [VpcEndpointConnectionNotification].
func (vecn *VpcEndpointConnectionNotification) Attributes() vpcEndpointConnectionNotificationAttributes {
	return vpcEndpointConnectionNotificationAttributes{ref: terra.ReferenceResource(vecn)}
}

// ImportState imports the given attribute values into [VpcEndpointConnectionNotification]'s state.
func (vecn *VpcEndpointConnectionNotification) ImportState(av io.Reader) error {
	vecn.state = &vpcEndpointConnectionNotificationState{}
	if err := json.NewDecoder(av).Decode(vecn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vecn.Type(), vecn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpcEndpointConnectionNotification] has state.
func (vecn *VpcEndpointConnectionNotification) State() (*vpcEndpointConnectionNotificationState, bool) {
	return vecn.state, vecn.state != nil
}

// StateMust returns the state for [VpcEndpointConnectionNotification]. Panics if the state is nil.
func (vecn *VpcEndpointConnectionNotification) StateMust() *vpcEndpointConnectionNotificationState {
	if vecn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vecn.Type(), vecn.LocalName()))
	}
	return vecn.state
}

// VpcEndpointConnectionNotificationArgs contains the configurations for aws_vpc_endpoint_connection_notification.
type VpcEndpointConnectionNotificationArgs struct {
	// ConnectionEvents: set of string, required
	ConnectionEvents terra.SetValue[terra.StringValue] `hcl:"connection_events,attr" validate:"required"`
	// ConnectionNotificationArn: string, required
	ConnectionNotificationArn terra.StringValue `hcl:"connection_notification_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcEndpointId: string, optional
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// VpcEndpointServiceId: string, optional
	VpcEndpointServiceId terra.StringValue `hcl:"vpc_endpoint_service_id,attr"`
}
type vpcEndpointConnectionNotificationAttributes struct {
	ref terra.Reference
}

// ConnectionEvents returns a reference to field connection_events of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) ConnectionEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vecn.ref.Append("connection_events"))
}

// ConnectionNotificationArn returns a reference to field connection_notification_arn of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) ConnectionNotificationArn() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("connection_notification_arn"))
}

// Id returns a reference to field id of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("id"))
}

// NotificationType returns a reference to field notification_type of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("notification_type"))
}

// State returns a reference to field state of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("state"))
}

// VpcEndpointId returns a reference to field vpc_endpoint_id of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("vpc_endpoint_id"))
}

// VpcEndpointServiceId returns a reference to field vpc_endpoint_service_id of aws_vpc_endpoint_connection_notification.
func (vecn vpcEndpointConnectionNotificationAttributes) VpcEndpointServiceId() terra.StringValue {
	return terra.ReferenceAsString(vecn.ref.Append("vpc_endpoint_service_id"))
}

type vpcEndpointConnectionNotificationState struct {
	ConnectionEvents          []string `json:"connection_events"`
	ConnectionNotificationArn string   `json:"connection_notification_arn"`
	Id                        string   `json:"id"`
	NotificationType          string   `json:"notification_type"`
	State                     string   `json:"state"`
	VpcEndpointId             string   `json:"vpc_endpoint_id"`
	VpcEndpointServiceId      string   `json:"vpc_endpoint_service_id"`
}
