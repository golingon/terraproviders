// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	batchjobqueue "github.com/golingon/terraproviders/aws/5.16.1/batchjobqueue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewBatchJobQueue creates a new instance of [BatchJobQueue].
func NewBatchJobQueue(name string, args BatchJobQueueArgs) *BatchJobQueue {
	return &BatchJobQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchJobQueue)(nil)

// BatchJobQueue represents the Terraform resource aws_batch_job_queue.
type BatchJobQueue struct {
	Name      string
	Args      BatchJobQueueArgs
	state     *batchJobQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BatchJobQueue].
func (bjq *BatchJobQueue) Type() string {
	return "aws_batch_job_queue"
}

// LocalName returns the local name for [BatchJobQueue].
func (bjq *BatchJobQueue) LocalName() string {
	return bjq.Name
}

// Configuration returns the configuration (args) for [BatchJobQueue].
func (bjq *BatchJobQueue) Configuration() interface{} {
	return bjq.Args
}

// DependOn is used for other resources to depend on [BatchJobQueue].
func (bjq *BatchJobQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(bjq)
}

// Dependencies returns the list of resources [BatchJobQueue] depends_on.
func (bjq *BatchJobQueue) Dependencies() terra.Dependencies {
	return bjq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BatchJobQueue].
func (bjq *BatchJobQueue) LifecycleManagement() *terra.Lifecycle {
	return bjq.Lifecycle
}

// Attributes returns the attributes for [BatchJobQueue].
func (bjq *BatchJobQueue) Attributes() batchJobQueueAttributes {
	return batchJobQueueAttributes{ref: terra.ReferenceResource(bjq)}
}

// ImportState imports the given attribute values into [BatchJobQueue]'s state.
func (bjq *BatchJobQueue) ImportState(av io.Reader) error {
	bjq.state = &batchJobQueueState{}
	if err := json.NewDecoder(av).Decode(bjq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bjq.Type(), bjq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BatchJobQueue] has state.
func (bjq *BatchJobQueue) State() (*batchJobQueueState, bool) {
	return bjq.state, bjq.state != nil
}

// StateMust returns the state for [BatchJobQueue]. Panics if the state is nil.
func (bjq *BatchJobQueue) StateMust() *batchJobQueueState {
	if bjq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bjq.Type(), bjq.LocalName()))
	}
	return bjq.state
}

// BatchJobQueueArgs contains the configurations for aws_batch_job_queue.
type BatchJobQueueArgs struct {
	// ComputeEnvironments: list of string, required
	ComputeEnvironments terra.ListValue[terra.StringValue] `hcl:"compute_environments,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// SchedulingPolicyArn: string, optional
	SchedulingPolicyArn terra.StringValue `hcl:"scheduling_policy_arn,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *batchjobqueue.Timeouts `hcl:"timeouts,block"`
}
type batchJobQueueAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(bjq.ref.Append("arn"))
}

// ComputeEnvironments returns a reference to field compute_environments of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) ComputeEnvironments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](bjq.ref.Append("compute_environments"))
}

// Id returns a reference to field id of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bjq.ref.Append("id"))
}

// Name returns a reference to field name of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bjq.ref.Append("name"))
}

// Priority returns a reference to field priority of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(bjq.ref.Append("priority"))
}

// SchedulingPolicyArn returns a reference to field scheduling_policy_arn of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) SchedulingPolicyArn() terra.StringValue {
	return terra.ReferenceAsString(bjq.ref.Append("scheduling_policy_arn"))
}

// State returns a reference to field state of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(bjq.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bjq.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_batch_job_queue.
func (bjq batchJobQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bjq.ref.Append("tags_all"))
}

func (bjq batchJobQueueAttributes) Timeouts() batchjobqueue.TimeoutsAttributes {
	return terra.ReferenceAsSingle[batchjobqueue.TimeoutsAttributes](bjq.ref.Append("timeouts"))
}

type batchJobQueueState struct {
	Arn                 string                       `json:"arn"`
	ComputeEnvironments []string                     `json:"compute_environments"`
	Id                  string                       `json:"id"`
	Name                string                       `json:"name"`
	Priority            float64                      `json:"priority"`
	SchedulingPolicyArn string                       `json:"scheduling_policy_arn"`
	State               string                       `json:"state"`
	Tags                map[string]string            `json:"tags"`
	TagsAll             map[string]string            `json:"tags_all"`
	Timeouts            *batchjobqueue.TimeoutsState `json:"timeouts"`
}
