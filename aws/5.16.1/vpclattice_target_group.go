// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpclatticetargetgroup "github.com/golingon/terraproviders/aws/5.16.1/vpclatticetargetgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpclatticeTargetGroup creates a new instance of [VpclatticeTargetGroup].
func NewVpclatticeTargetGroup(name string, args VpclatticeTargetGroupArgs) *VpclatticeTargetGroup {
	return &VpclatticeTargetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpclatticeTargetGroup)(nil)

// VpclatticeTargetGroup represents the Terraform resource aws_vpclattice_target_group.
type VpclatticeTargetGroup struct {
	Name      string
	Args      VpclatticeTargetGroupArgs
	state     *vpclatticeTargetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) Type() string {
	return "aws_vpclattice_target_group"
}

// LocalName returns the local name for [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) LocalName() string {
	return vtg.Name
}

// Configuration returns the configuration (args) for [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) Configuration() interface{} {
	return vtg.Args
}

// DependOn is used for other resources to depend on [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(vtg)
}

// Dependencies returns the list of resources [VpclatticeTargetGroup] depends_on.
func (vtg *VpclatticeTargetGroup) Dependencies() terra.Dependencies {
	return vtg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) LifecycleManagement() *terra.Lifecycle {
	return vtg.Lifecycle
}

// Attributes returns the attributes for [VpclatticeTargetGroup].
func (vtg *VpclatticeTargetGroup) Attributes() vpclatticeTargetGroupAttributes {
	return vpclatticeTargetGroupAttributes{ref: terra.ReferenceResource(vtg)}
}

// ImportState imports the given attribute values into [VpclatticeTargetGroup]'s state.
func (vtg *VpclatticeTargetGroup) ImportState(av io.Reader) error {
	vtg.state = &vpclatticeTargetGroupState{}
	if err := json.NewDecoder(av).Decode(vtg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtg.Type(), vtg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpclatticeTargetGroup] has state.
func (vtg *VpclatticeTargetGroup) State() (*vpclatticeTargetGroupState, bool) {
	return vtg.state, vtg.state != nil
}

// StateMust returns the state for [VpclatticeTargetGroup]. Panics if the state is nil.
func (vtg *VpclatticeTargetGroup) StateMust() *vpclatticeTargetGroupState {
	if vtg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtg.Type(), vtg.LocalName()))
	}
	return vtg.state
}

// VpclatticeTargetGroupArgs contains the configurations for aws_vpclattice_target_group.
type VpclatticeTargetGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Config: optional
	Config *vpclatticetargetgroup.Config `hcl:"config,block"`
	// Timeouts: optional
	Timeouts *vpclatticetargetgroup.Timeouts `hcl:"timeouts,block"`
}
type vpclatticeTargetGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(vtg.ref.Append("arn"))
}

// Id returns a reference to field id of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtg.ref.Append("id"))
}

// Name returns a reference to field name of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtg.ref.Append("name"))
}

// Status returns a reference to field status of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(vtg.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vtg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vtg.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_vpclattice_target_group.
func (vtg vpclatticeTargetGroupAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vtg.ref.Append("type"))
}

func (vtg vpclatticeTargetGroupAttributes) Config() terra.ListValue[vpclatticetargetgroup.ConfigAttributes] {
	return terra.ReferenceAsList[vpclatticetargetgroup.ConfigAttributes](vtg.ref.Append("config"))
}

func (vtg vpclatticeTargetGroupAttributes) Timeouts() vpclatticetargetgroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[vpclatticetargetgroup.TimeoutsAttributes](vtg.ref.Append("timeouts"))
}

type vpclatticeTargetGroupState struct {
	Arn      string                               `json:"arn"`
	Id       string                               `json:"id"`
	Name     string                               `json:"name"`
	Status   string                               `json:"status"`
	Tags     map[string]string                    `json:"tags"`
	TagsAll  map[string]string                    `json:"tags_all"`
	Type     string                               `json:"type"`
	Config   []vpclatticetargetgroup.ConfigState  `json:"config"`
	Timeouts *vpclatticetargetgroup.TimeoutsState `json:"timeouts"`
}
