// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package schedulerschedule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type FlexibleTimeWindow struct {
	// MaximumWindowInMinutes: number, optional
	MaximumWindowInMinutes terra.NumberValue `hcl:"maximum_window_in_minutes,attr"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type Target struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Input: string, optional
	Input terra.StringValue `hcl:"input,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// DeadLetterConfig: optional
	DeadLetterConfig *DeadLetterConfig `hcl:"dead_letter_config,block"`
	// EcsParameters: optional
	EcsParameters *EcsParameters `hcl:"ecs_parameters,block"`
	// EventbridgeParameters: optional
	EventbridgeParameters *EventbridgeParameters `hcl:"eventbridge_parameters,block"`
	// KinesisParameters: optional
	KinesisParameters *KinesisParameters `hcl:"kinesis_parameters,block"`
	// RetryPolicy: optional
	RetryPolicy *RetryPolicy `hcl:"retry_policy,block"`
	// SagemakerPipelineParameters: optional
	SagemakerPipelineParameters *SagemakerPipelineParameters `hcl:"sagemaker_pipeline_parameters,block"`
	// SqsParameters: optional
	SqsParameters *SqsParameters `hcl:"sqs_parameters,block"`
}

type DeadLetterConfig struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
}

type EcsParameters struct {
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn: string, required
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// CapacityProviderStrategy: min=0,max=6
	CapacityProviderStrategy []CapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0,max=6"`
	// NetworkConfiguration: optional
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
	// PlacementConstraints: min=0,max=10
	PlacementConstraints []PlacementConstraints `hcl:"placement_constraints,block" validate:"min=0,max=10"`
	// PlacementStrategy: min=0,max=5
	PlacementStrategy []PlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type CapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type NetworkConfiguration struct {
	// AssignPublicIp: bool, optional
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type PlacementConstraints struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type EventbridgeParameters struct {
	// DetailType: string, required
	DetailType terra.StringValue `hcl:"detail_type,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type KinesisParameters struct {
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
}

type RetryPolicy struct {
	// MaximumEventAgeInSeconds: number, optional
	MaximumEventAgeInSeconds terra.NumberValue `hcl:"maximum_event_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
}

type SagemakerPipelineParameters struct {
	// PipelineParameter: min=0,max=200
	PipelineParameter []PipelineParameter `hcl:"pipeline_parameter,block" validate:"min=0,max=200"`
}

type PipelineParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SqsParameters struct {
	// MessageGroupId: string, optional
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type FlexibleTimeWindowAttributes struct {
	ref terra.Reference
}

func (ftw FlexibleTimeWindowAttributes) InternalRef() (terra.Reference, error) {
	return ftw.ref, nil
}

func (ftw FlexibleTimeWindowAttributes) InternalWithRef(ref terra.Reference) FlexibleTimeWindowAttributes {
	return FlexibleTimeWindowAttributes{ref: ref}
}

func (ftw FlexibleTimeWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftw.ref.InternalTokens()
}

func (ftw FlexibleTimeWindowAttributes) MaximumWindowInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ftw.ref.Append("maximum_window_in_minutes"))
}

func (ftw FlexibleTimeWindowAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ftw.ref.Append("mode"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("arn"))
}

func (t TargetAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("input"))
}

func (t TargetAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t TargetAttributes) DeadLetterConfig() terra.ListValue[DeadLetterConfigAttributes] {
	return terra.ReferenceAsList[DeadLetterConfigAttributes](t.ref.Append("dead_letter_config"))
}

func (t TargetAttributes) EcsParameters() terra.ListValue[EcsParametersAttributes] {
	return terra.ReferenceAsList[EcsParametersAttributes](t.ref.Append("ecs_parameters"))
}

func (t TargetAttributes) EventbridgeParameters() terra.ListValue[EventbridgeParametersAttributes] {
	return terra.ReferenceAsList[EventbridgeParametersAttributes](t.ref.Append("eventbridge_parameters"))
}

func (t TargetAttributes) KinesisParameters() terra.ListValue[KinesisParametersAttributes] {
	return terra.ReferenceAsList[KinesisParametersAttributes](t.ref.Append("kinesis_parameters"))
}

func (t TargetAttributes) RetryPolicy() terra.ListValue[RetryPolicyAttributes] {
	return terra.ReferenceAsList[RetryPolicyAttributes](t.ref.Append("retry_policy"))
}

func (t TargetAttributes) SagemakerPipelineParameters() terra.ListValue[SagemakerPipelineParametersAttributes] {
	return terra.ReferenceAsList[SagemakerPipelineParametersAttributes](t.ref.Append("sagemaker_pipeline_parameters"))
}

func (t TargetAttributes) SqsParameters() terra.ListValue[SqsParametersAttributes] {
	return terra.ReferenceAsList[SqsParametersAttributes](t.ref.Append("sqs_parameters"))
}

type DeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc DeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc DeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) DeadLetterConfigAttributes {
	return DeadLetterConfigAttributes{ref: ref}
}

func (dlc DeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc DeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type EcsParametersAttributes struct {
	ref terra.Reference
}

func (ep EcsParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EcsParametersAttributes) InternalWithRef(ref terra.Reference) EcsParametersAttributes {
	return EcsParametersAttributes{ref: ref}
}

func (ep EcsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EcsParametersAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_ecs_managed_tags"))
}

func (ep EcsParametersAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_execute_command"))
}

func (ep EcsParametersAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("group"))
}

func (ep EcsParametersAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("launch_type"))
}

func (ep EcsParametersAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("platform_version"))
}

func (ep EcsParametersAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("propagate_tags"))
}

func (ep EcsParametersAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("reference_id"))
}

func (ep EcsParametersAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ep.ref.Append("tags"))
}

func (ep EcsParametersAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("task_count"))
}

func (ep EcsParametersAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("task_definition_arn"))
}

func (ep EcsParametersAttributes) CapacityProviderStrategy() terra.SetValue[CapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[CapacityProviderStrategyAttributes](ep.ref.Append("capacity_provider_strategy"))
}

func (ep EcsParametersAttributes) NetworkConfiguration() terra.ListValue[NetworkConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationAttributes](ep.ref.Append("network_configuration"))
}

func (ep EcsParametersAttributes) PlacementConstraints() terra.SetValue[PlacementConstraintsAttributes] {
	return terra.ReferenceAsSet[PlacementConstraintsAttributes](ep.ref.Append("placement_constraints"))
}

func (ep EcsParametersAttributes) PlacementStrategy() terra.SetValue[PlacementStrategyAttributes] {
	return terra.ReferenceAsSet[PlacementStrategyAttributes](ep.ref.Append("placement_strategy"))
}

type CapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps CapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps CapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) CapacityProviderStrategyAttributes {
	return CapacityProviderStrategyAttributes{ref: ref}
}

func (cps CapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps CapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps CapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps CapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc NetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc NetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type PlacementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc PlacementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PlacementConstraintsAttributes) InternalWithRef(ref terra.Reference) PlacementConstraintsAttributes {
	return PlacementConstraintsAttributes{ref: ref}
}

func (pc PlacementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PlacementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc PlacementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type PlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps PlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PlacementStrategyAttributes) InternalWithRef(ref terra.Reference) PlacementStrategyAttributes {
	return PlacementStrategyAttributes{ref: ref}
}

func (ps PlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps PlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type EventbridgeParametersAttributes struct {
	ref terra.Reference
}

func (ep EventbridgeParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EventbridgeParametersAttributes) InternalWithRef(ref terra.Reference) EventbridgeParametersAttributes {
	return EventbridgeParametersAttributes{ref: ref}
}

func (ep EventbridgeParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EventbridgeParametersAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("detail_type"))
}

func (ep EventbridgeParametersAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("source"))
}

type KinesisParametersAttributes struct {
	ref terra.Reference
}

func (kp KinesisParametersAttributes) InternalRef() (terra.Reference, error) {
	return kp.ref, nil
}

func (kp KinesisParametersAttributes) InternalWithRef(ref terra.Reference) KinesisParametersAttributes {
	return KinesisParametersAttributes{ref: ref}
}

func (kp KinesisParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kp.ref.InternalTokens()
}

func (kp KinesisParametersAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("partition_key"))
}

type RetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetryPolicyAttributes) InternalWithRef(ref terra.Reference) RetryPolicyAttributes {
	return RetryPolicyAttributes{ref: ref}
}

func (rp RetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetryPolicyAttributes) MaximumEventAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_event_age_in_seconds"))
}

func (rp RetryPolicyAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_retry_attempts"))
}

type SagemakerPipelineParametersAttributes struct {
	ref terra.Reference
}

func (spp SagemakerPipelineParametersAttributes) InternalRef() (terra.Reference, error) {
	return spp.ref, nil
}

func (spp SagemakerPipelineParametersAttributes) InternalWithRef(ref terra.Reference) SagemakerPipelineParametersAttributes {
	return SagemakerPipelineParametersAttributes{ref: ref}
}

func (spp SagemakerPipelineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spp.ref.InternalTokens()
}

func (spp SagemakerPipelineParametersAttributes) PipelineParameter() terra.SetValue[PipelineParameterAttributes] {
	return terra.ReferenceAsSet[PipelineParameterAttributes](spp.ref.Append("pipeline_parameter"))
}

type PipelineParameterAttributes struct {
	ref terra.Reference
}

func (pp PipelineParameterAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PipelineParameterAttributes) InternalWithRef(ref terra.Reference) PipelineParameterAttributes {
	return PipelineParameterAttributes{ref: ref}
}

func (pp PipelineParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PipelineParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

func (pp PipelineParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type SqsParametersAttributes struct {
	ref terra.Reference
}

func (sp SqsParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SqsParametersAttributes) InternalWithRef(ref terra.Reference) SqsParametersAttributes {
	return SqsParametersAttributes{ref: ref}
}

func (sp SqsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SqsParametersAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("message_group_id"))
}

type FlexibleTimeWindowState struct {
	MaximumWindowInMinutes float64 `json:"maximum_window_in_minutes"`
	Mode                   string  `json:"mode"`
}

type TargetState struct {
	Arn                         string                             `json:"arn"`
	Input                       string                             `json:"input"`
	RoleArn                     string                             `json:"role_arn"`
	DeadLetterConfig            []DeadLetterConfigState            `json:"dead_letter_config"`
	EcsParameters               []EcsParametersState               `json:"ecs_parameters"`
	EventbridgeParameters       []EventbridgeParametersState       `json:"eventbridge_parameters"`
	KinesisParameters           []KinesisParametersState           `json:"kinesis_parameters"`
	RetryPolicy                 []RetryPolicyState                 `json:"retry_policy"`
	SagemakerPipelineParameters []SagemakerPipelineParametersState `json:"sagemaker_pipeline_parameters"`
	SqsParameters               []SqsParametersState               `json:"sqs_parameters"`
}

type DeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type EcsParametersState struct {
	EnableEcsManagedTags     bool                            `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                            `json:"enable_execute_command"`
	Group                    string                          `json:"group"`
	LaunchType               string                          `json:"launch_type"`
	PlatformVersion          string                          `json:"platform_version"`
	PropagateTags            string                          `json:"propagate_tags"`
	ReferenceId              string                          `json:"reference_id"`
	Tags                     map[string]string               `json:"tags"`
	TaskCount                float64                         `json:"task_count"`
	TaskDefinitionArn        string                          `json:"task_definition_arn"`
	CapacityProviderStrategy []CapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []NetworkConfigurationState     `json:"network_configuration"`
	PlacementConstraints     []PlacementConstraintsState     `json:"placement_constraints"`
	PlacementStrategy        []PlacementStrategyState        `json:"placement_strategy"`
}

type CapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type NetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type PlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type PlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type EventbridgeParametersState struct {
	DetailType string `json:"detail_type"`
	Source     string `json:"source"`
}

type KinesisParametersState struct {
	PartitionKey string `json:"partition_key"`
}

type RetryPolicyState struct {
	MaximumEventAgeInSeconds float64 `json:"maximum_event_age_in_seconds"`
	MaximumRetryAttempts     float64 `json:"maximum_retry_attempts"`
}

type SagemakerPipelineParametersState struct {
	PipelineParameter []PipelineParameterState `json:"pipeline_parameter"`
}

type PipelineParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type SqsParametersState struct {
	MessageGroupId string `json:"message_group_id"`
}
