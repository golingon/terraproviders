// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDbSubnetGroup creates a new instance of [DbSubnetGroup].
func NewDbSubnetGroup(name string, args DbSubnetGroupArgs) *DbSubnetGroup {
	return &DbSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbSubnetGroup)(nil)

// DbSubnetGroup represents the Terraform resource aws_db_subnet_group.
type DbSubnetGroup struct {
	Name      string
	Args      DbSubnetGroupArgs
	state     *dbSubnetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DbSubnetGroup].
func (dsg *DbSubnetGroup) Type() string {
	return "aws_db_subnet_group"
}

// LocalName returns the local name for [DbSubnetGroup].
func (dsg *DbSubnetGroup) LocalName() string {
	return dsg.Name
}

// Configuration returns the configuration (args) for [DbSubnetGroup].
func (dsg *DbSubnetGroup) Configuration() interface{} {
	return dsg.Args
}

// DependOn is used for other resources to depend on [DbSubnetGroup].
func (dsg *DbSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dsg)
}

// Dependencies returns the list of resources [DbSubnetGroup] depends_on.
func (dsg *DbSubnetGroup) Dependencies() terra.Dependencies {
	return dsg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DbSubnetGroup].
func (dsg *DbSubnetGroup) LifecycleManagement() *terra.Lifecycle {
	return dsg.Lifecycle
}

// Attributes returns the attributes for [DbSubnetGroup].
func (dsg *DbSubnetGroup) Attributes() dbSubnetGroupAttributes {
	return dbSubnetGroupAttributes{ref: terra.ReferenceResource(dsg)}
}

// ImportState imports the given attribute values into [DbSubnetGroup]'s state.
func (dsg *DbSubnetGroup) ImportState(av io.Reader) error {
	dsg.state = &dbSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(dsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsg.Type(), dsg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DbSubnetGroup] has state.
func (dsg *DbSubnetGroup) State() (*dbSubnetGroupState, bool) {
	return dsg.state, dsg.state != nil
}

// StateMust returns the state for [DbSubnetGroup]. Panics if the state is nil.
func (dsg *DbSubnetGroup) StateMust() *dbSubnetGroupState {
	if dsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsg.Type(), dsg.LocalName()))
	}
	return dsg.state
}

// DbSubnetGroupArgs contains the configurations for aws_db_subnet_group.
type DbSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type dbSubnetGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dsg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dsg.ref.Append("description"))
}

// Id returns a reference to field id of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dsg.ref.Append("id"))
}

// Name returns a reference to field name of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dsg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(dsg.ref.Append("name_prefix"))
}

// SubnetIds returns a reference to field subnet_ids of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dsg.ref.Append("subnet_ids"))
}

// SupportedNetworkTypes returns a reference to field supported_network_types of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) SupportedNetworkTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dsg.ref.Append("supported_network_types"))
}

// Tags returns a reference to field tags of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dsg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_db_subnet_group.
func (dsg dbSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dsg.ref.Append("tags_all"))
}

type dbSubnetGroupState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	Name                  string            `json:"name"`
	NamePrefix            string            `json:"name_prefix"`
	SubnetIds             []string          `json:"subnet_ids"`
	SupportedNetworkTypes []string          `json:"supported_network_types"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
