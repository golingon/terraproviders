// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	launchtemplate "github.com/golingon/terraproviders/aws/4.63.0/launchtemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLaunchTemplate creates a new instance of [LaunchTemplate].
func NewLaunchTemplate(name string, args LaunchTemplateArgs) *LaunchTemplate {
	return &LaunchTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LaunchTemplate)(nil)

// LaunchTemplate represents the Terraform resource aws_launch_template.
type LaunchTemplate struct {
	Name      string
	Args      LaunchTemplateArgs
	state     *launchTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LaunchTemplate].
func (lt *LaunchTemplate) Type() string {
	return "aws_launch_template"
}

// LocalName returns the local name for [LaunchTemplate].
func (lt *LaunchTemplate) LocalName() string {
	return lt.Name
}

// Configuration returns the configuration (args) for [LaunchTemplate].
func (lt *LaunchTemplate) Configuration() interface{} {
	return lt.Args
}

// DependOn is used for other resources to depend on [LaunchTemplate].
func (lt *LaunchTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(lt)
}

// Dependencies returns the list of resources [LaunchTemplate] depends_on.
func (lt *LaunchTemplate) Dependencies() terra.Dependencies {
	return lt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LaunchTemplate].
func (lt *LaunchTemplate) LifecycleManagement() *terra.Lifecycle {
	return lt.Lifecycle
}

// Attributes returns the attributes for [LaunchTemplate].
func (lt *LaunchTemplate) Attributes() launchTemplateAttributes {
	return launchTemplateAttributes{ref: terra.ReferenceResource(lt)}
}

// ImportState imports the given attribute values into [LaunchTemplate]'s state.
func (lt *LaunchTemplate) ImportState(av io.Reader) error {
	lt.state = &launchTemplateState{}
	if err := json.NewDecoder(av).Decode(lt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lt.Type(), lt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LaunchTemplate] has state.
func (lt *LaunchTemplate) State() (*launchTemplateState, bool) {
	return lt.state, lt.state != nil
}

// StateMust returns the state for [LaunchTemplate]. Panics if the state is nil.
func (lt *LaunchTemplate) StateMust() *launchTemplateState {
	if lt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lt.Type(), lt.LocalName()))
	}
	return lt.state
}

// LaunchTemplateArgs contains the configurations for aws_launch_template.
type LaunchTemplateArgs struct {
	// DefaultVersion: number, optional
	DefaultVersion terra.NumberValue `hcl:"default_version,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableApiStop: bool, optional
	DisableApiStop terra.BoolValue `hcl:"disable_api_stop,attr"`
	// DisableApiTermination: bool, optional
	DisableApiTermination terra.BoolValue `hcl:"disable_api_termination,attr"`
	// EbsOptimized: string, optional
	EbsOptimized terra.StringValue `hcl:"ebs_optimized,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, optional
	ImageId terra.StringValue `hcl:"image_id,attr"`
	// InstanceInitiatedShutdownBehavior: string, optional
	InstanceInitiatedShutdownBehavior terra.StringValue `hcl:"instance_initiated_shutdown_behavior,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// KernelId: string, optional
	KernelId terra.StringValue `hcl:"kernel_id,attr"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// RamDiskId: string, optional
	RamDiskId terra.StringValue `hcl:"ram_disk_id,attr"`
	// SecurityGroupNames: set of string, optional
	SecurityGroupNames terra.SetValue[terra.StringValue] `hcl:"security_group_names,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UpdateDefaultVersion: bool, optional
	UpdateDefaultVersion terra.BoolValue `hcl:"update_default_version,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// BlockDeviceMappings: min=0
	BlockDeviceMappings []launchtemplate.BlockDeviceMappings `hcl:"block_device_mappings,block" validate:"min=0"`
	// CapacityReservationSpecification: optional
	CapacityReservationSpecification *launchtemplate.CapacityReservationSpecification `hcl:"capacity_reservation_specification,block"`
	// CpuOptions: optional
	CpuOptions *launchtemplate.CpuOptions `hcl:"cpu_options,block"`
	// CreditSpecification: optional
	CreditSpecification *launchtemplate.CreditSpecification `hcl:"credit_specification,block"`
	// ElasticGpuSpecifications: min=0
	ElasticGpuSpecifications []launchtemplate.ElasticGpuSpecifications `hcl:"elastic_gpu_specifications,block" validate:"min=0"`
	// ElasticInferenceAccelerator: optional
	ElasticInferenceAccelerator *launchtemplate.ElasticInferenceAccelerator `hcl:"elastic_inference_accelerator,block"`
	// EnclaveOptions: optional
	EnclaveOptions *launchtemplate.EnclaveOptions `hcl:"enclave_options,block"`
	// HibernationOptions: optional
	HibernationOptions *launchtemplate.HibernationOptions `hcl:"hibernation_options,block"`
	// IamInstanceProfile: optional
	IamInstanceProfile *launchtemplate.IamInstanceProfile `hcl:"iam_instance_profile,block"`
	// InstanceMarketOptions: optional
	InstanceMarketOptions *launchtemplate.InstanceMarketOptions `hcl:"instance_market_options,block"`
	// InstanceRequirements: optional
	InstanceRequirements *launchtemplate.InstanceRequirements `hcl:"instance_requirements,block"`
	// LicenseSpecification: min=0
	LicenseSpecification []launchtemplate.LicenseSpecification `hcl:"license_specification,block" validate:"min=0"`
	// MaintenanceOptions: optional
	MaintenanceOptions *launchtemplate.MaintenanceOptions `hcl:"maintenance_options,block"`
	// MetadataOptions: optional
	MetadataOptions *launchtemplate.MetadataOptions `hcl:"metadata_options,block"`
	// Monitoring: optional
	Monitoring *launchtemplate.Monitoring `hcl:"monitoring,block"`
	// NetworkInterfaces: min=0
	NetworkInterfaces []launchtemplate.NetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
	// Placement: optional
	Placement *launchtemplate.Placement `hcl:"placement,block"`
	// PrivateDnsNameOptions: optional
	PrivateDnsNameOptions *launchtemplate.PrivateDnsNameOptions `hcl:"private_dns_name_options,block"`
	// TagSpecifications: min=0
	TagSpecifications []launchtemplate.TagSpecifications `hcl:"tag_specifications,block" validate:"min=0"`
}
type launchTemplateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_launch_template.
func (lt launchTemplateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("arn"))
}

// DefaultVersion returns a reference to field default_version of aws_launch_template.
func (lt launchTemplateAttributes) DefaultVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(lt.ref.Append("default_version"))
}

// Description returns a reference to field description of aws_launch_template.
func (lt launchTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("description"))
}

// DisableApiStop returns a reference to field disable_api_stop of aws_launch_template.
func (lt launchTemplateAttributes) DisableApiStop() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("disable_api_stop"))
}

// DisableApiTermination returns a reference to field disable_api_termination of aws_launch_template.
func (lt launchTemplateAttributes) DisableApiTermination() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("disable_api_termination"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_launch_template.
func (lt launchTemplateAttributes) EbsOptimized() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("ebs_optimized"))
}

// Id returns a reference to field id of aws_launch_template.
func (lt launchTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_launch_template.
func (lt launchTemplateAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("image_id"))
}

// InstanceInitiatedShutdownBehavior returns a reference to field instance_initiated_shutdown_behavior of aws_launch_template.
func (lt launchTemplateAttributes) InstanceInitiatedShutdownBehavior() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("instance_initiated_shutdown_behavior"))
}

// InstanceType returns a reference to field instance_type of aws_launch_template.
func (lt launchTemplateAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("instance_type"))
}

// KernelId returns a reference to field kernel_id of aws_launch_template.
func (lt launchTemplateAttributes) KernelId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("kernel_id"))
}

// KeyName returns a reference to field key_name of aws_launch_template.
func (lt launchTemplateAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("key_name"))
}

// LatestVersion returns a reference to field latest_version of aws_launch_template.
func (lt launchTemplateAttributes) LatestVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(lt.ref.Append("latest_version"))
}

// Name returns a reference to field name of aws_launch_template.
func (lt launchTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_launch_template.
func (lt launchTemplateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name_prefix"))
}

// RamDiskId returns a reference to field ram_disk_id of aws_launch_template.
func (lt launchTemplateAttributes) RamDiskId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("ram_disk_id"))
}

// SecurityGroupNames returns a reference to field security_group_names of aws_launch_template.
func (lt launchTemplateAttributes) SecurityGroupNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lt.ref.Append("security_group_names"))
}

// Tags returns a reference to field tags of aws_launch_template.
func (lt launchTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_launch_template.
func (lt launchTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lt.ref.Append("tags_all"))
}

// UpdateDefaultVersion returns a reference to field update_default_version of aws_launch_template.
func (lt launchTemplateAttributes) UpdateDefaultVersion() terra.BoolValue {
	return terra.ReferenceAsBool(lt.ref.Append("update_default_version"))
}

// UserData returns a reference to field user_data of aws_launch_template.
func (lt launchTemplateAttributes) UserData() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("user_data"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_launch_template.
func (lt launchTemplateAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lt.ref.Append("vpc_security_group_ids"))
}

func (lt launchTemplateAttributes) BlockDeviceMappings() terra.ListValue[launchtemplate.BlockDeviceMappingsAttributes] {
	return terra.ReferenceAsList[launchtemplate.BlockDeviceMappingsAttributes](lt.ref.Append("block_device_mappings"))
}

func (lt launchTemplateAttributes) CapacityReservationSpecification() terra.ListValue[launchtemplate.CapacityReservationSpecificationAttributes] {
	return terra.ReferenceAsList[launchtemplate.CapacityReservationSpecificationAttributes](lt.ref.Append("capacity_reservation_specification"))
}

func (lt launchTemplateAttributes) CpuOptions() terra.ListValue[launchtemplate.CpuOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.CpuOptionsAttributes](lt.ref.Append("cpu_options"))
}

func (lt launchTemplateAttributes) CreditSpecification() terra.ListValue[launchtemplate.CreditSpecificationAttributes] {
	return terra.ReferenceAsList[launchtemplate.CreditSpecificationAttributes](lt.ref.Append("credit_specification"))
}

func (lt launchTemplateAttributes) ElasticGpuSpecifications() terra.ListValue[launchtemplate.ElasticGpuSpecificationsAttributes] {
	return terra.ReferenceAsList[launchtemplate.ElasticGpuSpecificationsAttributes](lt.ref.Append("elastic_gpu_specifications"))
}

func (lt launchTemplateAttributes) ElasticInferenceAccelerator() terra.ListValue[launchtemplate.ElasticInferenceAcceleratorAttributes] {
	return terra.ReferenceAsList[launchtemplate.ElasticInferenceAcceleratorAttributes](lt.ref.Append("elastic_inference_accelerator"))
}

func (lt launchTemplateAttributes) EnclaveOptions() terra.ListValue[launchtemplate.EnclaveOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.EnclaveOptionsAttributes](lt.ref.Append("enclave_options"))
}

func (lt launchTemplateAttributes) HibernationOptions() terra.ListValue[launchtemplate.HibernationOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.HibernationOptionsAttributes](lt.ref.Append("hibernation_options"))
}

func (lt launchTemplateAttributes) IamInstanceProfile() terra.ListValue[launchtemplate.IamInstanceProfileAttributes] {
	return terra.ReferenceAsList[launchtemplate.IamInstanceProfileAttributes](lt.ref.Append("iam_instance_profile"))
}

func (lt launchTemplateAttributes) InstanceMarketOptions() terra.ListValue[launchtemplate.InstanceMarketOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.InstanceMarketOptionsAttributes](lt.ref.Append("instance_market_options"))
}

func (lt launchTemplateAttributes) InstanceRequirements() terra.ListValue[launchtemplate.InstanceRequirementsAttributes] {
	return terra.ReferenceAsList[launchtemplate.InstanceRequirementsAttributes](lt.ref.Append("instance_requirements"))
}

func (lt launchTemplateAttributes) LicenseSpecification() terra.SetValue[launchtemplate.LicenseSpecificationAttributes] {
	return terra.ReferenceAsSet[launchtemplate.LicenseSpecificationAttributes](lt.ref.Append("license_specification"))
}

func (lt launchTemplateAttributes) MaintenanceOptions() terra.ListValue[launchtemplate.MaintenanceOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.MaintenanceOptionsAttributes](lt.ref.Append("maintenance_options"))
}

func (lt launchTemplateAttributes) MetadataOptions() terra.ListValue[launchtemplate.MetadataOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.MetadataOptionsAttributes](lt.ref.Append("metadata_options"))
}

func (lt launchTemplateAttributes) Monitoring() terra.ListValue[launchtemplate.MonitoringAttributes] {
	return terra.ReferenceAsList[launchtemplate.MonitoringAttributes](lt.ref.Append("monitoring"))
}

func (lt launchTemplateAttributes) NetworkInterfaces() terra.ListValue[launchtemplate.NetworkInterfacesAttributes] {
	return terra.ReferenceAsList[launchtemplate.NetworkInterfacesAttributes](lt.ref.Append("network_interfaces"))
}

func (lt launchTemplateAttributes) Placement() terra.ListValue[launchtemplate.PlacementAttributes] {
	return terra.ReferenceAsList[launchtemplate.PlacementAttributes](lt.ref.Append("placement"))
}

func (lt launchTemplateAttributes) PrivateDnsNameOptions() terra.ListValue[launchtemplate.PrivateDnsNameOptionsAttributes] {
	return terra.ReferenceAsList[launchtemplate.PrivateDnsNameOptionsAttributes](lt.ref.Append("private_dns_name_options"))
}

func (lt launchTemplateAttributes) TagSpecifications() terra.ListValue[launchtemplate.TagSpecificationsAttributes] {
	return terra.ReferenceAsList[launchtemplate.TagSpecificationsAttributes](lt.ref.Append("tag_specifications"))
}

type launchTemplateState struct {
	Arn                               string                                                 `json:"arn"`
	DefaultVersion                    float64                                                `json:"default_version"`
	Description                       string                                                 `json:"description"`
	DisableApiStop                    bool                                                   `json:"disable_api_stop"`
	DisableApiTermination             bool                                                   `json:"disable_api_termination"`
	EbsOptimized                      string                                                 `json:"ebs_optimized"`
	Id                                string                                                 `json:"id"`
	ImageId                           string                                                 `json:"image_id"`
	InstanceInitiatedShutdownBehavior string                                                 `json:"instance_initiated_shutdown_behavior"`
	InstanceType                      string                                                 `json:"instance_type"`
	KernelId                          string                                                 `json:"kernel_id"`
	KeyName                           string                                                 `json:"key_name"`
	LatestVersion                     float64                                                `json:"latest_version"`
	Name                              string                                                 `json:"name"`
	NamePrefix                        string                                                 `json:"name_prefix"`
	RamDiskId                         string                                                 `json:"ram_disk_id"`
	SecurityGroupNames                []string                                               `json:"security_group_names"`
	Tags                              map[string]string                                      `json:"tags"`
	TagsAll                           map[string]string                                      `json:"tags_all"`
	UpdateDefaultVersion              bool                                                   `json:"update_default_version"`
	UserData                          string                                                 `json:"user_data"`
	VpcSecurityGroupIds               []string                                               `json:"vpc_security_group_ids"`
	BlockDeviceMappings               []launchtemplate.BlockDeviceMappingsState              `json:"block_device_mappings"`
	CapacityReservationSpecification  []launchtemplate.CapacityReservationSpecificationState `json:"capacity_reservation_specification"`
	CpuOptions                        []launchtemplate.CpuOptionsState                       `json:"cpu_options"`
	CreditSpecification               []launchtemplate.CreditSpecificationState              `json:"credit_specification"`
	ElasticGpuSpecifications          []launchtemplate.ElasticGpuSpecificationsState         `json:"elastic_gpu_specifications"`
	ElasticInferenceAccelerator       []launchtemplate.ElasticInferenceAcceleratorState      `json:"elastic_inference_accelerator"`
	EnclaveOptions                    []launchtemplate.EnclaveOptionsState                   `json:"enclave_options"`
	HibernationOptions                []launchtemplate.HibernationOptionsState               `json:"hibernation_options"`
	IamInstanceProfile                []launchtemplate.IamInstanceProfileState               `json:"iam_instance_profile"`
	InstanceMarketOptions             []launchtemplate.InstanceMarketOptionsState            `json:"instance_market_options"`
	InstanceRequirements              []launchtemplate.InstanceRequirementsState             `json:"instance_requirements"`
	LicenseSpecification              []launchtemplate.LicenseSpecificationState             `json:"license_specification"`
	MaintenanceOptions                []launchtemplate.MaintenanceOptionsState               `json:"maintenance_options"`
	MetadataOptions                   []launchtemplate.MetadataOptionsState                  `json:"metadata_options"`
	Monitoring                        []launchtemplate.MonitoringState                       `json:"monitoring"`
	NetworkInterfaces                 []launchtemplate.NetworkInterfacesState                `json:"network_interfaces"`
	Placement                         []launchtemplate.PlacementState                        `json:"placement"`
	PrivateDnsNameOptions             []launchtemplate.PrivateDnsNameOptionsState            `json:"private_dns_name_options"`
	TagSpecifications                 []launchtemplate.TagSpecificationsState                `json:"tag_specifications"`
}
