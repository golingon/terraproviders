// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package launchtemplate

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type BlockDeviceMappings struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// NoDevice: string, optional
	NoDevice terra.StringValue `hcl:"no_device,attr"`
	// VirtualName: string, optional
	VirtualName terra.StringValue `hcl:"virtual_name,attr"`
	// Ebs: optional
	Ebs *Ebs `hcl:"ebs,block"`
}

type Ebs struct {
	// DeleteOnTermination: string, optional
	DeleteOnTermination terra.StringValue `hcl:"delete_on_termination,attr"`
	// Encrypted: string, optional
	Encrypted terra.StringValue `hcl:"encrypted,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type CapacityReservationSpecification struct {
	// CapacityReservationPreference: string, optional
	CapacityReservationPreference terra.StringValue `hcl:"capacity_reservation_preference,attr"`
	// CapacityReservationTarget: optional
	CapacityReservationTarget *CapacityReservationTarget `hcl:"capacity_reservation_target,block"`
}

type CapacityReservationTarget struct {
	// CapacityReservationId: string, optional
	CapacityReservationId terra.StringValue `hcl:"capacity_reservation_id,attr"`
	// CapacityReservationResourceGroupArn: string, optional
	CapacityReservationResourceGroupArn terra.StringValue `hcl:"capacity_reservation_resource_group_arn,attr"`
}

type CpuOptions struct {
	// CoreCount: number, optional
	CoreCount terra.NumberValue `hcl:"core_count,attr"`
	// ThreadsPerCore: number, optional
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr"`
}

type CreditSpecification struct {
	// CpuCredits: string, optional
	CpuCredits terra.StringValue `hcl:"cpu_credits,attr"`
}

type ElasticGpuSpecifications struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ElasticInferenceAccelerator struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type EnclaveOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type HibernationOptions struct {
	// Configured: bool, required
	Configured terra.BoolValue `hcl:"configured,attr" validate:"required"`
}

type IamInstanceProfile struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type InstanceMarketOptions struct {
	// MarketType: string, optional
	MarketType terra.StringValue `hcl:"market_type,attr"`
	// SpotOptions: optional
	SpotOptions *SpotOptions `hcl:"spot_options,block"`
}

type SpotOptions struct {
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// InstanceInterruptionBehavior: string, optional
	InstanceInterruptionBehavior terra.StringValue `hcl:"instance_interruption_behavior,attr"`
	// MaxPrice: string, optional
	MaxPrice terra.StringValue `hcl:"max_price,attr"`
	// SpotInstanceType: string, optional
	SpotInstanceType terra.StringValue `hcl:"spot_instance_type,attr"`
	// ValidUntil: string, optional
	ValidUntil terra.StringValue `hcl:"valid_until,attr"`
}

type InstanceRequirements struct {
	// AcceleratorManufacturers: set of string, optional
	AcceleratorManufacturers terra.SetValue[terra.StringValue] `hcl:"accelerator_manufacturers,attr"`
	// AcceleratorNames: set of string, optional
	AcceleratorNames terra.SetValue[terra.StringValue] `hcl:"accelerator_names,attr"`
	// AcceleratorTypes: set of string, optional
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AllowedInstanceTypes: set of string, optional
	AllowedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"allowed_instance_types,attr"`
	// BareMetal: string, optional
	BareMetal terra.StringValue `hcl:"bare_metal,attr"`
	// BurstablePerformance: string, optional
	BurstablePerformance terra.StringValue `hcl:"burstable_performance,attr"`
	// CpuManufacturers: set of string, optional
	CpuManufacturers terra.SetValue[terra.StringValue] `hcl:"cpu_manufacturers,attr"`
	// ExcludedInstanceTypes: set of string, optional
	ExcludedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"excluded_instance_types,attr"`
	// InstanceGenerations: set of string, optional
	InstanceGenerations terra.SetValue[terra.StringValue] `hcl:"instance_generations,attr"`
	// LocalStorage: string, optional
	LocalStorage terra.StringValue `hcl:"local_storage,attr"`
	// LocalStorageTypes: set of string, optional
	LocalStorageTypes terra.SetValue[terra.StringValue] `hcl:"local_storage_types,attr"`
	// OnDemandMaxPricePercentageOverLowestPrice: number, optional
	OnDemandMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"on_demand_max_price_percentage_over_lowest_price,attr"`
	// RequireHibernateSupport: bool, optional
	RequireHibernateSupport terra.BoolValue `hcl:"require_hibernate_support,attr"`
	// SpotMaxPricePercentageOverLowestPrice: number, optional
	SpotMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"spot_max_price_percentage_over_lowest_price,attr"`
	// AcceleratorCount: optional
	AcceleratorCount *AcceleratorCount `hcl:"accelerator_count,block"`
	// AcceleratorTotalMemoryMib: optional
	AcceleratorTotalMemoryMib *AcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block"`
	// BaselineEbsBandwidthMbps: optional
	BaselineEbsBandwidthMbps *BaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block"`
	// MemoryGibPerVcpu: optional
	MemoryGibPerVcpu *MemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block"`
	// MemoryMib: required
	MemoryMib *MemoryMib `hcl:"memory_mib,block" validate:"required"`
	// NetworkBandwidthGbps: optional
	NetworkBandwidthGbps *NetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block"`
	// NetworkInterfaceCount: optional
	NetworkInterfaceCount *NetworkInterfaceCount `hcl:"network_interface_count,block"`
	// TotalLocalStorageGb: optional
	TotalLocalStorageGb *TotalLocalStorageGb `hcl:"total_local_storage_gb,block"`
	// VcpuCount: required
	VcpuCount *VcpuCount `hcl:"vcpu_count,block" validate:"required"`
}

type AcceleratorCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type AcceleratorTotalMemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type BaselineEbsBandwidthMbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryGibPerVcpu struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type NetworkBandwidthGbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkInterfaceCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type TotalLocalStorageGb struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type VcpuCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type LicenseSpecification struct {
	// LicenseConfigurationArn: string, required
	LicenseConfigurationArn terra.StringValue `hcl:"license_configuration_arn,attr" validate:"required"`
}

type MaintenanceOptions struct {
	// AutoRecovery: string, optional
	AutoRecovery terra.StringValue `hcl:"auto_recovery,attr"`
}

type MetadataOptions struct {
	// HttpEndpoint: string, optional
	HttpEndpoint terra.StringValue `hcl:"http_endpoint,attr"`
	// HttpProtocolIpv6: string, optional
	HttpProtocolIpv6 terra.StringValue `hcl:"http_protocol_ipv6,attr"`
	// HttpPutResponseHopLimit: number, optional
	HttpPutResponseHopLimit terra.NumberValue `hcl:"http_put_response_hop_limit,attr"`
	// HttpTokens: string, optional
	HttpTokens terra.StringValue `hcl:"http_tokens,attr"`
	// InstanceMetadataTags: string, optional
	InstanceMetadataTags terra.StringValue `hcl:"instance_metadata_tags,attr"`
}

type Monitoring struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type NetworkInterfaces struct {
	// AssociateCarrierIpAddress: string, optional
	AssociateCarrierIpAddress terra.StringValue `hcl:"associate_carrier_ip_address,attr"`
	// AssociatePublicIpAddress: string, optional
	AssociatePublicIpAddress terra.StringValue `hcl:"associate_public_ip_address,attr"`
	// DeleteOnTermination: string, optional
	DeleteOnTermination terra.StringValue `hcl:"delete_on_termination,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceIndex: number, optional
	DeviceIndex terra.NumberValue `hcl:"device_index,attr"`
	// InterfaceType: string, optional
	InterfaceType terra.StringValue `hcl:"interface_type,attr"`
	// Ipv4AddressCount: number, optional
	Ipv4AddressCount terra.NumberValue `hcl:"ipv4_address_count,attr"`
	// Ipv4Addresses: set of string, optional
	Ipv4Addresses terra.SetValue[terra.StringValue] `hcl:"ipv4_addresses,attr"`
	// Ipv4PrefixCount: number, optional
	Ipv4PrefixCount terra.NumberValue `hcl:"ipv4_prefix_count,attr"`
	// Ipv4Prefixes: set of string, optional
	Ipv4Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv4_prefixes,attr"`
	// Ipv6AddressCount: number, optional
	Ipv6AddressCount terra.NumberValue `hcl:"ipv6_address_count,attr"`
	// Ipv6Addresses: set of string, optional
	Ipv6Addresses terra.SetValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
	// Ipv6PrefixCount: number, optional
	Ipv6PrefixCount terra.NumberValue `hcl:"ipv6_prefix_count,attr"`
	// Ipv6Prefixes: set of string, optional
	Ipv6Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv6_prefixes,attr"`
	// NetworkCardIndex: number, optional
	NetworkCardIndex terra.NumberValue `hcl:"network_card_index,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
}

type Placement struct {
	// Affinity: string, optional
	Affinity terra.StringValue `hcl:"affinity,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// GroupName: string, optional
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// HostId: string, optional
	HostId terra.StringValue `hcl:"host_id,attr"`
	// HostResourceGroupArn: string, optional
	HostResourceGroupArn terra.StringValue `hcl:"host_resource_group_arn,attr"`
	// PartitionNumber: number, optional
	PartitionNumber terra.NumberValue `hcl:"partition_number,attr"`
	// SpreadDomain: string, optional
	SpreadDomain terra.StringValue `hcl:"spread_domain,attr"`
	// Tenancy: string, optional
	Tenancy terra.StringValue `hcl:"tenancy,attr"`
}

type PrivateDnsNameOptions struct {
	// EnableResourceNameDnsARecord: bool, optional
	EnableResourceNameDnsARecord terra.BoolValue `hcl:"enable_resource_name_dns_a_record,attr"`
	// EnableResourceNameDnsAaaaRecord: bool, optional
	EnableResourceNameDnsAaaaRecord terra.BoolValue `hcl:"enable_resource_name_dns_aaaa_record,attr"`
	// HostnameType: string, optional
	HostnameType terra.StringValue `hcl:"hostname_type,attr"`
}

type TagSpecifications struct {
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type BlockDeviceMappingsAttributes struct {
	ref terra.Reference
}

func (bdm BlockDeviceMappingsAttributes) InternalRef() (terra.Reference, error) {
	return bdm.ref, nil
}

func (bdm BlockDeviceMappingsAttributes) InternalWithRef(ref terra.Reference) BlockDeviceMappingsAttributes {
	return BlockDeviceMappingsAttributes{ref: ref}
}

func (bdm BlockDeviceMappingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bdm.ref.InternalTokens()
}

func (bdm BlockDeviceMappingsAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("device_name"))
}

func (bdm BlockDeviceMappingsAttributes) NoDevice() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("no_device"))
}

func (bdm BlockDeviceMappingsAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("virtual_name"))
}

func (bdm BlockDeviceMappingsAttributes) Ebs() terra.ListValue[EbsAttributes] {
	return terra.ReferenceAsList[EbsAttributes](bdm.ref.Append("ebs"))
}

type EbsAttributes struct {
	ref terra.Reference
}

func (e EbsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EbsAttributes) InternalWithRef(ref terra.Reference) EbsAttributes {
	return EbsAttributes{ref: ref}
}

func (e EbsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EbsAttributes) DeleteOnTermination() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("delete_on_termination"))
}

func (e EbsAttributes) Encrypted() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("encrypted"))
}

func (e EbsAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("iops"))
}

func (e EbsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms_key_id"))
}

func (e EbsAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("snapshot_id"))
}

func (e EbsAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("throughput"))
}

func (e EbsAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("volume_size"))
}

func (e EbsAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("volume_type"))
}

type CapacityReservationSpecificationAttributes struct {
	ref terra.Reference
}

func (crs CapacityReservationSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return crs.ref, nil
}

func (crs CapacityReservationSpecificationAttributes) InternalWithRef(ref terra.Reference) CapacityReservationSpecificationAttributes {
	return CapacityReservationSpecificationAttributes{ref: ref}
}

func (crs CapacityReservationSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crs.ref.InternalTokens()
}

func (crs CapacityReservationSpecificationAttributes) CapacityReservationPreference() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("capacity_reservation_preference"))
}

func (crs CapacityReservationSpecificationAttributes) CapacityReservationTarget() terra.ListValue[CapacityReservationTargetAttributes] {
	return terra.ReferenceAsList[CapacityReservationTargetAttributes](crs.ref.Append("capacity_reservation_target"))
}

type CapacityReservationTargetAttributes struct {
	ref terra.Reference
}

func (crt CapacityReservationTargetAttributes) InternalRef() (terra.Reference, error) {
	return crt.ref, nil
}

func (crt CapacityReservationTargetAttributes) InternalWithRef(ref terra.Reference) CapacityReservationTargetAttributes {
	return CapacityReservationTargetAttributes{ref: ref}
}

func (crt CapacityReservationTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crt.ref.InternalTokens()
}

func (crt CapacityReservationTargetAttributes) CapacityReservationId() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_id"))
}

func (crt CapacityReservationTargetAttributes) CapacityReservationResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_resource_group_arn"))
}

type CpuOptionsAttributes struct {
	ref terra.Reference
}

func (co CpuOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co CpuOptionsAttributes) InternalWithRef(ref terra.Reference) CpuOptionsAttributes {
	return CpuOptionsAttributes{ref: ref}
}

func (co CpuOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co CpuOptionsAttributes) CoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("core_count"))
}

func (co CpuOptionsAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("threads_per_core"))
}

type CreditSpecificationAttributes struct {
	ref terra.Reference
}

func (cs CreditSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs CreditSpecificationAttributes) InternalWithRef(ref terra.Reference) CreditSpecificationAttributes {
	return CreditSpecificationAttributes{ref: ref}
}

func (cs CreditSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs CreditSpecificationAttributes) CpuCredits() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("cpu_credits"))
}

type ElasticGpuSpecificationsAttributes struct {
	ref terra.Reference
}

func (egs ElasticGpuSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return egs.ref, nil
}

func (egs ElasticGpuSpecificationsAttributes) InternalWithRef(ref terra.Reference) ElasticGpuSpecificationsAttributes {
	return ElasticGpuSpecificationsAttributes{ref: ref}
}

func (egs ElasticGpuSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return egs.ref.InternalTokens()
}

func (egs ElasticGpuSpecificationsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(egs.ref.Append("type"))
}

type ElasticInferenceAcceleratorAttributes struct {
	ref terra.Reference
}

func (eia ElasticInferenceAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return eia.ref, nil
}

func (eia ElasticInferenceAcceleratorAttributes) InternalWithRef(ref terra.Reference) ElasticInferenceAcceleratorAttributes {
	return ElasticInferenceAcceleratorAttributes{ref: ref}
}

func (eia ElasticInferenceAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eia.ref.InternalTokens()
}

func (eia ElasticInferenceAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(eia.ref.Append("type"))
}

type EnclaveOptionsAttributes struct {
	ref terra.Reference
}

func (eo EnclaveOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo EnclaveOptionsAttributes) InternalWithRef(ref terra.Reference) EnclaveOptionsAttributes {
	return EnclaveOptionsAttributes{ref: ref}
}

func (eo EnclaveOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo EnclaveOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("enabled"))
}

type HibernationOptionsAttributes struct {
	ref terra.Reference
}

func (ho HibernationOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho HibernationOptionsAttributes) InternalWithRef(ref terra.Reference) HibernationOptionsAttributes {
	return HibernationOptionsAttributes{ref: ref}
}

func (ho HibernationOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho HibernationOptionsAttributes) Configured() terra.BoolValue {
	return terra.ReferenceAsBool(ho.ref.Append("configured"))
}

type IamInstanceProfileAttributes struct {
	ref terra.Reference
}

func (iip IamInstanceProfileAttributes) InternalRef() (terra.Reference, error) {
	return iip.ref, nil
}

func (iip IamInstanceProfileAttributes) InternalWithRef(ref terra.Reference) IamInstanceProfileAttributes {
	return IamInstanceProfileAttributes{ref: ref}
}

func (iip IamInstanceProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iip.ref.InternalTokens()
}

func (iip IamInstanceProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(iip.ref.Append("arn"))
}

func (iip IamInstanceProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(iip.ref.Append("name"))
}

type InstanceMarketOptionsAttributes struct {
	ref terra.Reference
}

func (imo InstanceMarketOptionsAttributes) InternalRef() (terra.Reference, error) {
	return imo.ref, nil
}

func (imo InstanceMarketOptionsAttributes) InternalWithRef(ref terra.Reference) InstanceMarketOptionsAttributes {
	return InstanceMarketOptionsAttributes{ref: ref}
}

func (imo InstanceMarketOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imo.ref.InternalTokens()
}

func (imo InstanceMarketOptionsAttributes) MarketType() terra.StringValue {
	return terra.ReferenceAsString(imo.ref.Append("market_type"))
}

func (imo InstanceMarketOptionsAttributes) SpotOptions() terra.ListValue[SpotOptionsAttributes] {
	return terra.ReferenceAsList[SpotOptionsAttributes](imo.ref.Append("spot_options"))
}

type SpotOptionsAttributes struct {
	ref terra.Reference
}

func (so SpotOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so SpotOptionsAttributes) InternalWithRef(ref terra.Reference) SpotOptionsAttributes {
	return SpotOptionsAttributes{ref: ref}
}

func (so SpotOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so SpotOptionsAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("block_duration_minutes"))
}

func (so SpotOptionsAttributes) InstanceInterruptionBehavior() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("instance_interruption_behavior"))
}

func (so SpotOptionsAttributes) MaxPrice() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("max_price"))
}

func (so SpotOptionsAttributes) SpotInstanceType() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("spot_instance_type"))
}

func (so SpotOptionsAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("valid_until"))
}

type InstanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir InstanceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir InstanceRequirementsAttributes) InternalWithRef(ref terra.Reference) InstanceRequirementsAttributes {
	return InstanceRequirementsAttributes{ref: ref}
}

func (ir InstanceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir InstanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir InstanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir InstanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir InstanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("bare_metal"))
}

func (ir InstanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("burstable_performance"))
}

func (ir InstanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir InstanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir InstanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir InstanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("local_storage"))
}

func (ir InstanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir InstanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ir.ref.Append("require_hibernate_support"))
}

func (ir InstanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) AcceleratorCount() terra.ListValue[AcceleratorCountAttributes] {
	return terra.ReferenceAsList[AcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[AcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceAsList[AcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir InstanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[BaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceAsList[BaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir InstanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[MemoryGibPerVcpuAttributes] {
	return terra.ReferenceAsList[MemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir InstanceRequirementsAttributes) MemoryMib() terra.ListValue[MemoryMibAttributes] {
	return terra.ReferenceAsList[MemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir InstanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[NetworkBandwidthGbpsAttributes] {
	return terra.ReferenceAsList[NetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir InstanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[NetworkInterfaceCountAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir InstanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[TotalLocalStorageGbAttributes] {
	return terra.ReferenceAsList[TotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir InstanceRequirementsAttributes) VcpuCount() terra.ListValue[VcpuCountAttributes] {
	return terra.ReferenceAsList[VcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type AcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorCountAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorCountAttributes) InternalWithRef(ref terra.Reference) AcceleratorCountAttributes {
	return AcceleratorCountAttributes{ref: ref}
}

func (ac AcceleratorCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max"))
}

func (ac AcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min"))
}

type AcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return atmm.ref, nil
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) AcceleratorTotalMemoryMibAttributes {
	return AcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atmm.ref.InternalTokens()
}

func (atmm AcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("max"))
}

func (atmm AcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("min"))
}

type BaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalRef() (terra.Reference, error) {
	return bebm.ref, nil
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) BaselineEbsBandwidthMbpsAttributes {
	return BaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bebm.ref.InternalTokens()
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("max"))
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("min"))
}

type MemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv MemoryGibPerVcpuAttributes) InternalRef() (terra.Reference, error) {
	return mgpv.ref, nil
}

func (mgpv MemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) MemoryGibPerVcpuAttributes {
	return MemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv MemoryGibPerVcpuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgpv.ref.InternalTokens()
}

func (mgpv MemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("max"))
}

func (mgpv MemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("min"))
}

type MemoryMibAttributes struct {
	ref terra.Reference
}

func (mm MemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MemoryMibAttributes) InternalWithRef(ref terra.Reference) MemoryMibAttributes {
	return MemoryMibAttributes{ref: ref}
}

func (mm MemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm MemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("max"))
}

func (mm MemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("min"))
}

type NetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg NetworkBandwidthGbpsAttributes) InternalRef() (terra.Reference, error) {
	return nbg.ref, nil
}

func (nbg NetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) NetworkBandwidthGbpsAttributes {
	return NetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg NetworkBandwidthGbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nbg.ref.InternalTokens()
}

func (nbg NetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("max"))
}

func (nbg NetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("min"))
}

type NetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic NetworkInterfaceCountAttributes) InternalRef() (terra.Reference, error) {
	return nic.ref, nil
}

func (nic NetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceCountAttributes {
	return NetworkInterfaceCountAttributes{ref: ref}
}

func (nic NetworkInterfaceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nic.ref.InternalTokens()
}

func (nic NetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("max"))
}

func (nic NetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("min"))
}

type TotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg TotalLocalStorageGbAttributes) InternalRef() (terra.Reference, error) {
	return tlsg.ref, nil
}

func (tlsg TotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) TotalLocalStorageGbAttributes {
	return TotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg TotalLocalStorageGbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlsg.ref.InternalTokens()
}

func (tlsg TotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("max"))
}

func (tlsg TotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("min"))
}

type VcpuCountAttributes struct {
	ref terra.Reference
}

func (vc VcpuCountAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VcpuCountAttributes) InternalWithRef(ref terra.Reference) VcpuCountAttributes {
	return VcpuCountAttributes{ref: ref}
}

func (vc VcpuCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("max"))
}

func (vc VcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("min"))
}

type LicenseSpecificationAttributes struct {
	ref terra.Reference
}

func (ls LicenseSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls LicenseSpecificationAttributes) InternalWithRef(ref terra.Reference) LicenseSpecificationAttributes {
	return LicenseSpecificationAttributes{ref: ref}
}

func (ls LicenseSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls LicenseSpecificationAttributes) LicenseConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("license_configuration_arn"))
}

type MaintenanceOptionsAttributes struct {
	ref terra.Reference
}

func (mo MaintenanceOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MaintenanceOptionsAttributes) InternalWithRef(ref terra.Reference) MaintenanceOptionsAttributes {
	return MaintenanceOptionsAttributes{ref: ref}
}

func (mo MaintenanceOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo MaintenanceOptionsAttributes) AutoRecovery() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("auto_recovery"))
}

type MetadataOptionsAttributes struct {
	ref terra.Reference
}

func (mo MetadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MetadataOptionsAttributes) InternalWithRef(ref terra.Reference) MetadataOptionsAttributes {
	return MetadataOptionsAttributes{ref: ref}
}

func (mo MetadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo MetadataOptionsAttributes) HttpEndpoint() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_endpoint"))
}

func (mo MetadataOptionsAttributes) HttpProtocolIpv6() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_protocol_ipv6"))
}

func (mo MetadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("http_put_response_hop_limit"))
}

func (mo MetadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_tokens"))
}

func (mo MetadataOptionsAttributes) InstanceMetadataTags() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("instance_metadata_tags"))
}

type MonitoringAttributes struct {
	ref terra.Reference
}

func (m MonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MonitoringAttributes) InternalWithRef(ref terra.Reference) MonitoringAttributes {
	return MonitoringAttributes{ref: ref}
}

func (m MonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MonitoringAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("enabled"))
}

type NetworkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni NetworkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni NetworkInterfacesAttributes) InternalWithRef(ref terra.Reference) NetworkInterfacesAttributes {
	return NetworkInterfacesAttributes{ref: ref}
}

func (ni NetworkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni NetworkInterfacesAttributes) AssociateCarrierIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("associate_carrier_ip_address"))
}

func (ni NetworkInterfacesAttributes) AssociatePublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("associate_public_ip_address"))
}

func (ni NetworkInterfacesAttributes) DeleteOnTermination() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("delete_on_termination"))
}

func (ni NetworkInterfacesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("description"))
}

func (ni NetworkInterfacesAttributes) DeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("device_index"))
}

func (ni NetworkInterfacesAttributes) InterfaceType() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("interface_type"))
}

func (ni NetworkInterfacesAttributes) Ipv4AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv4_address_count"))
}

func (ni NetworkInterfacesAttributes) Ipv4Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv4_addresses"))
}

func (ni NetworkInterfacesAttributes) Ipv4PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv4_prefix_count"))
}

func (ni NetworkInterfacesAttributes) Ipv4Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv4_prefixes"))
}

func (ni NetworkInterfacesAttributes) Ipv6AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv6_address_count"))
}

func (ni NetworkInterfacesAttributes) Ipv6Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv6_addresses"))
}

func (ni NetworkInterfacesAttributes) Ipv6PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv6_prefix_count"))
}

func (ni NetworkInterfacesAttributes) Ipv6Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv6_prefixes"))
}

func (ni NetworkInterfacesAttributes) NetworkCardIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("network_card_index"))
}

func (ni NetworkInterfacesAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

func (ni NetworkInterfacesAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("private_ip_address"))
}

func (ni NetworkInterfacesAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("security_groups"))
}

func (ni NetworkInterfacesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type PlacementAttributes struct {
	ref terra.Reference
}

func (p PlacementAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PlacementAttributes) InternalWithRef(ref terra.Reference) PlacementAttributes {
	return PlacementAttributes{ref: ref}
}

func (p PlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PlacementAttributes) Affinity() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("affinity"))
}

func (p PlacementAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("availability_zone"))
}

func (p PlacementAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("group_name"))
}

func (p PlacementAttributes) HostId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host_id"))
}

func (p PlacementAttributes) HostResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host_resource_group_arn"))
}

func (p PlacementAttributes) PartitionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("partition_number"))
}

func (p PlacementAttributes) SpreadDomain() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("spread_domain"))
}

func (p PlacementAttributes) Tenancy() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tenancy"))
}

type PrivateDnsNameOptionsAttributes struct {
	ref terra.Reference
}

func (pdno PrivateDnsNameOptionsAttributes) InternalRef() (terra.Reference, error) {
	return pdno.ref, nil
}

func (pdno PrivateDnsNameOptionsAttributes) InternalWithRef(ref terra.Reference) PrivateDnsNameOptionsAttributes {
	return PrivateDnsNameOptionsAttributes{ref: ref}
}

func (pdno PrivateDnsNameOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdno.ref.InternalTokens()
}

func (pdno PrivateDnsNameOptionsAttributes) EnableResourceNameDnsARecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_a_record"))
}

func (pdno PrivateDnsNameOptionsAttributes) EnableResourceNameDnsAaaaRecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_aaaa_record"))
}

func (pdno PrivateDnsNameOptionsAttributes) HostnameType() terra.StringValue {
	return terra.ReferenceAsString(pdno.ref.Append("hostname_type"))
}

type TagSpecificationsAttributes struct {
	ref terra.Reference
}

func (ts TagSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TagSpecificationsAttributes) InternalWithRef(ref terra.Reference) TagSpecificationsAttributes {
	return TagSpecificationsAttributes{ref: ref}
}

func (ts TagSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TagSpecificationsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("resource_type"))
}

func (ts TagSpecificationsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ts.ref.Append("tags"))
}

type BlockDeviceMappingsState struct {
	DeviceName  string     `json:"device_name"`
	NoDevice    string     `json:"no_device"`
	VirtualName string     `json:"virtual_name"`
	Ebs         []EbsState `json:"ebs"`
}

type EbsState struct {
	DeleteOnTermination string  `json:"delete_on_termination"`
	Encrypted           string  `json:"encrypted"`
	Iops                float64 `json:"iops"`
	KmsKeyId            string  `json:"kms_key_id"`
	SnapshotId          string  `json:"snapshot_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type CapacityReservationSpecificationState struct {
	CapacityReservationPreference string                           `json:"capacity_reservation_preference"`
	CapacityReservationTarget     []CapacityReservationTargetState `json:"capacity_reservation_target"`
}

type CapacityReservationTargetState struct {
	CapacityReservationId               string `json:"capacity_reservation_id"`
	CapacityReservationResourceGroupArn string `json:"capacity_reservation_resource_group_arn"`
}

type CpuOptionsState struct {
	CoreCount      float64 `json:"core_count"`
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type CreditSpecificationState struct {
	CpuCredits string `json:"cpu_credits"`
}

type ElasticGpuSpecificationsState struct {
	Type string `json:"type"`
}

type ElasticInferenceAcceleratorState struct {
	Type string `json:"type"`
}

type EnclaveOptionsState struct {
	Enabled bool `json:"enabled"`
}

type HibernationOptionsState struct {
	Configured bool `json:"configured"`
}

type IamInstanceProfileState struct {
	Arn  string `json:"arn"`
	Name string `json:"name"`
}

type InstanceMarketOptionsState struct {
	MarketType  string             `json:"market_type"`
	SpotOptions []SpotOptionsState `json:"spot_options"`
}

type SpotOptionsState struct {
	BlockDurationMinutes         float64 `json:"block_duration_minutes"`
	InstanceInterruptionBehavior string  `json:"instance_interruption_behavior"`
	MaxPrice                     string  `json:"max_price"`
	SpotInstanceType             string  `json:"spot_instance_type"`
	ValidUntil                   string  `json:"valid_until"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                         `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                         `json:"accelerator_names"`
	AcceleratorTypes                          []string                         `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                         `json:"allowed_instance_types"`
	BareMetal                                 string                           `json:"bare_metal"`
	BurstablePerformance                      string                           `json:"burstable_performance"`
	CpuManufacturers                          []string                         `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                         `json:"excluded_instance_types"`
	InstanceGenerations                       []string                         `json:"instance_generations"`
	LocalStorage                              string                           `json:"local_storage"`
	LocalStorageTypes                         []string                         `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                          `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                             `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                          `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []AcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []AcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []BaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []MemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []MemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []NetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []NetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []TotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []VcpuCountState                 `json:"vcpu_count"`
}

type AcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type BaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type TotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type VcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type LicenseSpecificationState struct {
	LicenseConfigurationArn string `json:"license_configuration_arn"`
}

type MaintenanceOptionsState struct {
	AutoRecovery string `json:"auto_recovery"`
}

type MetadataOptionsState struct {
	HttpEndpoint            string  `json:"http_endpoint"`
	HttpProtocolIpv6        string  `json:"http_protocol_ipv6"`
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
	InstanceMetadataTags    string  `json:"instance_metadata_tags"`
}

type MonitoringState struct {
	Enabled bool `json:"enabled"`
}

type NetworkInterfacesState struct {
	AssociateCarrierIpAddress string   `json:"associate_carrier_ip_address"`
	AssociatePublicIpAddress  string   `json:"associate_public_ip_address"`
	DeleteOnTermination       string   `json:"delete_on_termination"`
	Description               string   `json:"description"`
	DeviceIndex               float64  `json:"device_index"`
	InterfaceType             string   `json:"interface_type"`
	Ipv4AddressCount          float64  `json:"ipv4_address_count"`
	Ipv4Addresses             []string `json:"ipv4_addresses"`
	Ipv4PrefixCount           float64  `json:"ipv4_prefix_count"`
	Ipv4Prefixes              []string `json:"ipv4_prefixes"`
	Ipv6AddressCount          float64  `json:"ipv6_address_count"`
	Ipv6Addresses             []string `json:"ipv6_addresses"`
	Ipv6PrefixCount           float64  `json:"ipv6_prefix_count"`
	Ipv6Prefixes              []string `json:"ipv6_prefixes"`
	NetworkCardIndex          float64  `json:"network_card_index"`
	NetworkInterfaceId        string   `json:"network_interface_id"`
	PrivateIpAddress          string   `json:"private_ip_address"`
	SecurityGroups            []string `json:"security_groups"`
	SubnetId                  string   `json:"subnet_id"`
}

type PlacementState struct {
	Affinity             string  `json:"affinity"`
	AvailabilityZone     string  `json:"availability_zone"`
	GroupName            string  `json:"group_name"`
	HostId               string  `json:"host_id"`
	HostResourceGroupArn string  `json:"host_resource_group_arn"`
	PartitionNumber      float64 `json:"partition_number"`
	SpreadDomain         string  `json:"spread_domain"`
	Tenancy              string  `json:"tenancy"`
}

type PrivateDnsNameOptionsState struct {
	EnableResourceNameDnsARecord    bool   `json:"enable_resource_name_dns_a_record"`
	EnableResourceNameDnsAaaaRecord bool   `json:"enable_resource_name_dns_aaaa_record"`
	HostnameType                    string `json:"hostname_type"`
}

type TagSpecificationsState struct {
	ResourceType string            `json:"resource_type"`
	Tags         map[string]string `json:"tags"`
}
