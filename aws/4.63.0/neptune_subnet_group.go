// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNeptuneSubnetGroup creates a new instance of [NeptuneSubnetGroup].
func NewNeptuneSubnetGroup(name string, args NeptuneSubnetGroupArgs) *NeptuneSubnetGroup {
	return &NeptuneSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneSubnetGroup)(nil)

// NeptuneSubnetGroup represents the Terraform resource aws_neptune_subnet_group.
type NeptuneSubnetGroup struct {
	Name      string
	Args      NeptuneSubnetGroupArgs
	state     *neptuneSubnetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) Type() string {
	return "aws_neptune_subnet_group"
}

// LocalName returns the local name for [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) LocalName() string {
	return nsg.Name
}

// Configuration returns the configuration (args) for [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) Configuration() interface{} {
	return nsg.Args
}

// DependOn is used for other resources to depend on [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(nsg)
}

// Dependencies returns the list of resources [NeptuneSubnetGroup] depends_on.
func (nsg *NeptuneSubnetGroup) Dependencies() terra.Dependencies {
	return nsg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) LifecycleManagement() *terra.Lifecycle {
	return nsg.Lifecycle
}

// Attributes returns the attributes for [NeptuneSubnetGroup].
func (nsg *NeptuneSubnetGroup) Attributes() neptuneSubnetGroupAttributes {
	return neptuneSubnetGroupAttributes{ref: terra.ReferenceResource(nsg)}
}

// ImportState imports the given attribute values into [NeptuneSubnetGroup]'s state.
func (nsg *NeptuneSubnetGroup) ImportState(av io.Reader) error {
	nsg.state = &neptuneSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(nsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsg.Type(), nsg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NeptuneSubnetGroup] has state.
func (nsg *NeptuneSubnetGroup) State() (*neptuneSubnetGroupState, bool) {
	return nsg.state, nsg.state != nil
}

// StateMust returns the state for [NeptuneSubnetGroup]. Panics if the state is nil.
func (nsg *NeptuneSubnetGroup) StateMust() *neptuneSubnetGroupState {
	if nsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsg.Type(), nsg.LocalName()))
	}
	return nsg.state
}

// NeptuneSubnetGroupArgs contains the configurations for aws_neptune_subnet_group.
type NeptuneSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type neptuneSubnetGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(nsg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nsg.ref.Append("description"))
}

// Id returns a reference to field id of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nsg.ref.Append("id"))
}

// Name returns a reference to field name of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nsg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(nsg.ref.Append("name_prefix"))
}

// SubnetIds returns a reference to field subnet_ids of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nsg.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_neptune_subnet_group.
func (nsg neptuneSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nsg.ref.Append("tags_all"))
}

type neptuneSubnetGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	NamePrefix  string            `json:"name_prefix"`
	SubnetIds   []string          `json:"subnet_ids"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
