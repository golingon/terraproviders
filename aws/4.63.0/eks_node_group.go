// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	eksnodegroup "github.com/golingon/terraproviders/aws/4.63.0/eksnodegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewEksNodeGroup creates a new instance of [EksNodeGroup].
func NewEksNodeGroup(name string, args EksNodeGroupArgs) *EksNodeGroup {
	return &EksNodeGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksNodeGroup)(nil)

// EksNodeGroup represents the Terraform resource aws_eks_node_group.
type EksNodeGroup struct {
	Name      string
	Args      EksNodeGroupArgs
	state     *eksNodeGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EksNodeGroup].
func (eng *EksNodeGroup) Type() string {
	return "aws_eks_node_group"
}

// LocalName returns the local name for [EksNodeGroup].
func (eng *EksNodeGroup) LocalName() string {
	return eng.Name
}

// Configuration returns the configuration (args) for [EksNodeGroup].
func (eng *EksNodeGroup) Configuration() interface{} {
	return eng.Args
}

// DependOn is used for other resources to depend on [EksNodeGroup].
func (eng *EksNodeGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(eng)
}

// Dependencies returns the list of resources [EksNodeGroup] depends_on.
func (eng *EksNodeGroup) Dependencies() terra.Dependencies {
	return eng.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EksNodeGroup].
func (eng *EksNodeGroup) LifecycleManagement() *terra.Lifecycle {
	return eng.Lifecycle
}

// Attributes returns the attributes for [EksNodeGroup].
func (eng *EksNodeGroup) Attributes() eksNodeGroupAttributes {
	return eksNodeGroupAttributes{ref: terra.ReferenceResource(eng)}
}

// ImportState imports the given attribute values into [EksNodeGroup]'s state.
func (eng *EksNodeGroup) ImportState(av io.Reader) error {
	eng.state = &eksNodeGroupState{}
	if err := json.NewDecoder(av).Decode(eng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eng.Type(), eng.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EksNodeGroup] has state.
func (eng *EksNodeGroup) State() (*eksNodeGroupState, bool) {
	return eng.state, eng.state != nil
}

// StateMust returns the state for [EksNodeGroup]. Panics if the state is nil.
func (eng *EksNodeGroup) StateMust() *eksNodeGroupState {
	if eng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eng.Type(), eng.LocalName()))
	}
	return eng.state
}

// EksNodeGroupArgs contains the configurations for aws_eks_node_group.
type EksNodeGroupArgs struct {
	// AmiType: string, optional
	AmiType terra.StringValue `hcl:"ami_type,attr"`
	// CapacityType: string, optional
	CapacityType terra.StringValue `hcl:"capacity_type,attr"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// DiskSize: number, optional
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// ForceUpdateVersion: bool, optional
	ForceUpdateVersion terra.BoolValue `hcl:"force_update_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceTypes: list of string, optional
	InstanceTypes terra.ListValue[terra.StringValue] `hcl:"instance_types,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeGroupName: string, optional
	NodeGroupName terra.StringValue `hcl:"node_group_name,attr"`
	// NodeGroupNamePrefix: string, optional
	NodeGroupNamePrefix terra.StringValue `hcl:"node_group_name_prefix,attr"`
	// NodeRoleArn: string, required
	NodeRoleArn terra.StringValue `hcl:"node_role_arn,attr" validate:"required"`
	// ReleaseVersion: string, optional
	ReleaseVersion terra.StringValue `hcl:"release_version,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Resources: min=0
	Resources []eksnodegroup.Resources `hcl:"resources,block" validate:"min=0"`
	// LaunchTemplate: optional
	LaunchTemplate *eksnodegroup.LaunchTemplate `hcl:"launch_template,block"`
	// RemoteAccess: optional
	RemoteAccess *eksnodegroup.RemoteAccess `hcl:"remote_access,block"`
	// ScalingConfig: required
	ScalingConfig *eksnodegroup.ScalingConfig `hcl:"scaling_config,block" validate:"required"`
	// Taint: min=0,max=50
	Taint []eksnodegroup.Taint `hcl:"taint,block" validate:"min=0,max=50"`
	// Timeouts: optional
	Timeouts *eksnodegroup.Timeouts `hcl:"timeouts,block"`
	// UpdateConfig: optional
	UpdateConfig *eksnodegroup.UpdateConfig `hcl:"update_config,block"`
}
type eksNodeGroupAttributes struct {
	ref terra.Reference
}

// AmiType returns a reference to field ami_type of aws_eks_node_group.
func (eng eksNodeGroupAttributes) AmiType() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("ami_type"))
}

// Arn returns a reference to field arn of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("arn"))
}

// CapacityType returns a reference to field capacity_type of aws_eks_node_group.
func (eng eksNodeGroupAttributes) CapacityType() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("capacity_type"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_node_group.
func (eng eksNodeGroupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("cluster_name"))
}

// DiskSize returns a reference to field disk_size of aws_eks_node_group.
func (eng eksNodeGroupAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(eng.ref.Append("disk_size"))
}

// ForceUpdateVersion returns a reference to field force_update_version of aws_eks_node_group.
func (eng eksNodeGroupAttributes) ForceUpdateVersion() terra.BoolValue {
	return terra.ReferenceAsBool(eng.ref.Append("force_update_version"))
}

// Id returns a reference to field id of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("id"))
}

// InstanceTypes returns a reference to field instance_types of aws_eks_node_group.
func (eng eksNodeGroupAttributes) InstanceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](eng.ref.Append("instance_types"))
}

// Labels returns a reference to field labels of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](eng.ref.Append("labels"))
}

// NodeGroupName returns a reference to field node_group_name of aws_eks_node_group.
func (eng eksNodeGroupAttributes) NodeGroupName() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("node_group_name"))
}

// NodeGroupNamePrefix returns a reference to field node_group_name_prefix of aws_eks_node_group.
func (eng eksNodeGroupAttributes) NodeGroupNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("node_group_name_prefix"))
}

// NodeRoleArn returns a reference to field node_role_arn of aws_eks_node_group.
func (eng eksNodeGroupAttributes) NodeRoleArn() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("node_role_arn"))
}

// ReleaseVersion returns a reference to field release_version of aws_eks_node_group.
func (eng eksNodeGroupAttributes) ReleaseVersion() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("release_version"))
}

// Status returns a reference to field status of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("status"))
}

// SubnetIds returns a reference to field subnet_ids of aws_eks_node_group.
func (eng eksNodeGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](eng.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](eng.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_node_group.
func (eng eksNodeGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](eng.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_eks_node_group.
func (eng eksNodeGroupAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(eng.ref.Append("version"))
}

func (eng eksNodeGroupAttributes) Resources() terra.ListValue[eksnodegroup.ResourcesAttributes] {
	return terra.ReferenceAsList[eksnodegroup.ResourcesAttributes](eng.ref.Append("resources"))
}

func (eng eksNodeGroupAttributes) LaunchTemplate() terra.ListValue[eksnodegroup.LaunchTemplateAttributes] {
	return terra.ReferenceAsList[eksnodegroup.LaunchTemplateAttributes](eng.ref.Append("launch_template"))
}

func (eng eksNodeGroupAttributes) RemoteAccess() terra.ListValue[eksnodegroup.RemoteAccessAttributes] {
	return terra.ReferenceAsList[eksnodegroup.RemoteAccessAttributes](eng.ref.Append("remote_access"))
}

func (eng eksNodeGroupAttributes) ScalingConfig() terra.ListValue[eksnodegroup.ScalingConfigAttributes] {
	return terra.ReferenceAsList[eksnodegroup.ScalingConfigAttributes](eng.ref.Append("scaling_config"))
}

func (eng eksNodeGroupAttributes) Taint() terra.SetValue[eksnodegroup.TaintAttributes] {
	return terra.ReferenceAsSet[eksnodegroup.TaintAttributes](eng.ref.Append("taint"))
}

func (eng eksNodeGroupAttributes) Timeouts() eksnodegroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[eksnodegroup.TimeoutsAttributes](eng.ref.Append("timeouts"))
}

func (eng eksNodeGroupAttributes) UpdateConfig() terra.ListValue[eksnodegroup.UpdateConfigAttributes] {
	return terra.ReferenceAsList[eksnodegroup.UpdateConfigAttributes](eng.ref.Append("update_config"))
}

type eksNodeGroupState struct {
	AmiType             string                             `json:"ami_type"`
	Arn                 string                             `json:"arn"`
	CapacityType        string                             `json:"capacity_type"`
	ClusterName         string                             `json:"cluster_name"`
	DiskSize            float64                            `json:"disk_size"`
	ForceUpdateVersion  bool                               `json:"force_update_version"`
	Id                  string                             `json:"id"`
	InstanceTypes       []string                           `json:"instance_types"`
	Labels              map[string]string                  `json:"labels"`
	NodeGroupName       string                             `json:"node_group_name"`
	NodeGroupNamePrefix string                             `json:"node_group_name_prefix"`
	NodeRoleArn         string                             `json:"node_role_arn"`
	ReleaseVersion      string                             `json:"release_version"`
	Status              string                             `json:"status"`
	SubnetIds           []string                           `json:"subnet_ids"`
	Tags                map[string]string                  `json:"tags"`
	TagsAll             map[string]string                  `json:"tags_all"`
	Version             string                             `json:"version"`
	Resources           []eksnodegroup.ResourcesState      `json:"resources"`
	LaunchTemplate      []eksnodegroup.LaunchTemplateState `json:"launch_template"`
	RemoteAccess        []eksnodegroup.RemoteAccessState   `json:"remote_access"`
	ScalingConfig       []eksnodegroup.ScalingConfigState  `json:"scaling_config"`
	Taint               []eksnodegroup.TaintState          `json:"taint"`
	Timeouts            *eksnodegroup.TimeoutsState        `json:"timeouts"`
	UpdateConfig        []eksnodegroup.UpdateConfigState   `json:"update_config"`
}
