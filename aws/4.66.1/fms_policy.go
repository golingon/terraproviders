// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fmspolicy "github.com/golingon/terraproviders/aws/4.66.1/fmspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewFmsPolicy creates a new instance of [FmsPolicy].
func NewFmsPolicy(name string, args FmsPolicyArgs) *FmsPolicy {
	return &FmsPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FmsPolicy)(nil)

// FmsPolicy represents the Terraform resource aws_fms_policy.
type FmsPolicy struct {
	Name      string
	Args      FmsPolicyArgs
	state     *fmsPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FmsPolicy].
func (fp *FmsPolicy) Type() string {
	return "aws_fms_policy"
}

// LocalName returns the local name for [FmsPolicy].
func (fp *FmsPolicy) LocalName() string {
	return fp.Name
}

// Configuration returns the configuration (args) for [FmsPolicy].
func (fp *FmsPolicy) Configuration() interface{} {
	return fp.Args
}

// DependOn is used for other resources to depend on [FmsPolicy].
func (fp *FmsPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(fp)
}

// Dependencies returns the list of resources [FmsPolicy] depends_on.
func (fp *FmsPolicy) Dependencies() terra.Dependencies {
	return fp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FmsPolicy].
func (fp *FmsPolicy) LifecycleManagement() *terra.Lifecycle {
	return fp.Lifecycle
}

// Attributes returns the attributes for [FmsPolicy].
func (fp *FmsPolicy) Attributes() fmsPolicyAttributes {
	return fmsPolicyAttributes{ref: terra.ReferenceResource(fp)}
}

// ImportState imports the given attribute values into [FmsPolicy]'s state.
func (fp *FmsPolicy) ImportState(av io.Reader) error {
	fp.state = &fmsPolicyState{}
	if err := json.NewDecoder(av).Decode(fp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fp.Type(), fp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FmsPolicy] has state.
func (fp *FmsPolicy) State() (*fmsPolicyState, bool) {
	return fp.state, fp.state != nil
}

// StateMust returns the state for [FmsPolicy]. Panics if the state is nil.
func (fp *FmsPolicy) StateMust() *fmsPolicyState {
	if fp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fp.Type(), fp.LocalName()))
	}
	return fp.state
}

// FmsPolicyArgs contains the configurations for aws_fms_policy.
type FmsPolicyArgs struct {
	// DeleteAllPolicyResources: bool, optional
	DeleteAllPolicyResources terra.BoolValue `hcl:"delete_all_policy_resources,attr"`
	// DeleteUnusedFmManagedResources: bool, optional
	DeleteUnusedFmManagedResources terra.BoolValue `hcl:"delete_unused_fm_managed_resources,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludeResourceTags: bool, required
	ExcludeResourceTags terra.BoolValue `hcl:"exclude_resource_tags,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RemediationEnabled: bool, optional
	RemediationEnabled terra.BoolValue `hcl:"remediation_enabled,attr"`
	// ResourceTags: map of string, optional
	ResourceTags terra.MapValue[terra.StringValue] `hcl:"resource_tags,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// ResourceTypeList: set of string, optional
	ResourceTypeList terra.SetValue[terra.StringValue] `hcl:"resource_type_list,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ExcludeMap: optional
	ExcludeMap *fmspolicy.ExcludeMap `hcl:"exclude_map,block"`
	// IncludeMap: optional
	IncludeMap *fmspolicy.IncludeMap `hcl:"include_map,block"`
	// SecurityServicePolicyData: required
	SecurityServicePolicyData *fmspolicy.SecurityServicePolicyData `hcl:"security_service_policy_data,block" validate:"required"`
}
type fmsPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fms_policy.
func (fp fmsPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("arn"))
}

// DeleteAllPolicyResources returns a reference to field delete_all_policy_resources of aws_fms_policy.
func (fp fmsPolicyAttributes) DeleteAllPolicyResources() terra.BoolValue {
	return terra.ReferenceAsBool(fp.ref.Append("delete_all_policy_resources"))
}

// DeleteUnusedFmManagedResources returns a reference to field delete_unused_fm_managed_resources of aws_fms_policy.
func (fp fmsPolicyAttributes) DeleteUnusedFmManagedResources() terra.BoolValue {
	return terra.ReferenceAsBool(fp.ref.Append("delete_unused_fm_managed_resources"))
}

// Description returns a reference to field description of aws_fms_policy.
func (fp fmsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("description"))
}

// ExcludeResourceTags returns a reference to field exclude_resource_tags of aws_fms_policy.
func (fp fmsPolicyAttributes) ExcludeResourceTags() terra.BoolValue {
	return terra.ReferenceAsBool(fp.ref.Append("exclude_resource_tags"))
}

// Id returns a reference to field id of aws_fms_policy.
func (fp fmsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("id"))
}

// Name returns a reference to field name of aws_fms_policy.
func (fp fmsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("name"))
}

// PolicyUpdateToken returns a reference to field policy_update_token of aws_fms_policy.
func (fp fmsPolicyAttributes) PolicyUpdateToken() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("policy_update_token"))
}

// RemediationEnabled returns a reference to field remediation_enabled of aws_fms_policy.
func (fp fmsPolicyAttributes) RemediationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(fp.ref.Append("remediation_enabled"))
}

// ResourceTags returns a reference to field resource_tags of aws_fms_policy.
func (fp fmsPolicyAttributes) ResourceTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fp.ref.Append("resource_tags"))
}

// ResourceType returns a reference to field resource_type of aws_fms_policy.
func (fp fmsPolicyAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(fp.ref.Append("resource_type"))
}

// ResourceTypeList returns a reference to field resource_type_list of aws_fms_policy.
func (fp fmsPolicyAttributes) ResourceTypeList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fp.ref.Append("resource_type_list"))
}

// Tags returns a reference to field tags of aws_fms_policy.
func (fp fmsPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fms_policy.
func (fp fmsPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fp.ref.Append("tags_all"))
}

func (fp fmsPolicyAttributes) ExcludeMap() terra.ListValue[fmspolicy.ExcludeMapAttributes] {
	return terra.ReferenceAsList[fmspolicy.ExcludeMapAttributes](fp.ref.Append("exclude_map"))
}

func (fp fmsPolicyAttributes) IncludeMap() terra.ListValue[fmspolicy.IncludeMapAttributes] {
	return terra.ReferenceAsList[fmspolicy.IncludeMapAttributes](fp.ref.Append("include_map"))
}

func (fp fmsPolicyAttributes) SecurityServicePolicyData() terra.ListValue[fmspolicy.SecurityServicePolicyDataAttributes] {
	return terra.ReferenceAsList[fmspolicy.SecurityServicePolicyDataAttributes](fp.ref.Append("security_service_policy_data"))
}

type fmsPolicyState struct {
	Arn                            string                                     `json:"arn"`
	DeleteAllPolicyResources       bool                                       `json:"delete_all_policy_resources"`
	DeleteUnusedFmManagedResources bool                                       `json:"delete_unused_fm_managed_resources"`
	Description                    string                                     `json:"description"`
	ExcludeResourceTags            bool                                       `json:"exclude_resource_tags"`
	Id                             string                                     `json:"id"`
	Name                           string                                     `json:"name"`
	PolicyUpdateToken              string                                     `json:"policy_update_token"`
	RemediationEnabled             bool                                       `json:"remediation_enabled"`
	ResourceTags                   map[string]string                          `json:"resource_tags"`
	ResourceType                   string                                     `json:"resource_type"`
	ResourceTypeList               []string                                   `json:"resource_type_list"`
	Tags                           map[string]string                          `json:"tags"`
	TagsAll                        map[string]string                          `json:"tags_all"`
	ExcludeMap                     []fmspolicy.ExcludeMapState                `json:"exclude_map"`
	IncludeMap                     []fmspolicy.IncludeMapState                `json:"include_map"`
	SecurityServicePolicyData      []fmspolicy.SecurityServicePolicyDataState `json:"security_service_policy_data"`
}
