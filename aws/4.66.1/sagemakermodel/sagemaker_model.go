// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sagemakermodel

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Container struct {
	// ContainerHostname: string, optional
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl: string, optional
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// ContainerImageConfig: optional
	ImageConfig *ContainerImageConfig `hcl:"image_config,block"`
}

type ContainerImageConfig struct {
	// RepositoryAccessMode: string, required
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// ContainerImageConfigRepositoryAuthConfig: optional
	RepositoryAuthConfig *ContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type ContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn: string, required
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type InferenceExecutionConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PrimaryContainer struct {
	// ContainerHostname: string, optional
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl: string, optional
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// PrimaryContainerImageConfig: optional
	ImageConfig *PrimaryContainerImageConfig `hcl:"image_config,block"`
}

type PrimaryContainerImageConfig struct {
	// RepositoryAccessMode: string, required
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// PrimaryContainerImageConfigRepositoryAuthConfig: optional
	RepositoryAuthConfig *PrimaryContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type PrimaryContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn: string, required
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("container_hostname"))
}

func (c ContainerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("environment"))
}

func (c ContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("mode"))
}

func (c ContainerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("model_data_url"))
}

func (c ContainerAttributes) ImageConfig() terra.ListValue[ContainerImageConfigAttributes] {
	return terra.ReferenceAsList[ContainerImageConfigAttributes](c.ref.Append("image_config"))
}

type ContainerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic ContainerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic ContainerImageConfigAttributes) InternalWithRef(ref terra.Reference) ContainerImageConfigAttributes {
	return ContainerImageConfigAttributes{ref: ref}
}

func (ic ContainerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic ContainerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic ContainerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[ContainerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[ContainerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type ContainerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) ContainerImageConfigRepositoryAuthConfigAttributes {
	return ContainerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type InferenceExecutionConfigAttributes struct {
	ref terra.Reference
}

func (iec InferenceExecutionConfigAttributes) InternalRef() (terra.Reference, error) {
	return iec.ref, nil
}

func (iec InferenceExecutionConfigAttributes) InternalWithRef(ref terra.Reference) InferenceExecutionConfigAttributes {
	return InferenceExecutionConfigAttributes{ref: ref}
}

func (iec InferenceExecutionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iec.ref.InternalTokens()
}

func (iec InferenceExecutionConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(iec.ref.Append("mode"))
}

type PrimaryContainerAttributes struct {
	ref terra.Reference
}

func (pc PrimaryContainerAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PrimaryContainerAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerAttributes {
	return PrimaryContainerAttributes{ref: ref}
}

func (pc PrimaryContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PrimaryContainerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("container_hostname"))
}

func (pc PrimaryContainerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pc.ref.Append("environment"))
}

func (pc PrimaryContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("image"))
}

func (pc PrimaryContainerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("mode"))
}

func (pc PrimaryContainerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("model_data_url"))
}

func (pc PrimaryContainerAttributes) ImageConfig() terra.ListValue[PrimaryContainerImageConfigAttributes] {
	return terra.ReferenceAsList[PrimaryContainerImageConfigAttributes](pc.ref.Append("image_config"))
}

type PrimaryContainerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic PrimaryContainerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic PrimaryContainerImageConfigAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerImageConfigAttributes {
	return PrimaryContainerImageConfigAttributes{ref: ref}
}

func (ic PrimaryContainerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic PrimaryContainerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic PrimaryContainerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[PrimaryContainerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[PrimaryContainerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type PrimaryContainerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerImageConfigRepositoryAuthConfigAttributes {
	return PrimaryContainerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type ContainerState struct {
	ContainerHostname string                      `json:"container_hostname"`
	Environment       map[string]string           `json:"environment"`
	Image             string                      `json:"image"`
	Mode              string                      `json:"mode"`
	ModelDataUrl      string                      `json:"model_data_url"`
	ImageConfig       []ContainerImageConfigState `json:"image_config"`
}

type ContainerImageConfigState struct {
	RepositoryAccessMode string                                          `json:"repository_access_mode"`
	RepositoryAuthConfig []ContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type ContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type InferenceExecutionConfigState struct {
	Mode string `json:"mode"`
}

type PrimaryContainerState struct {
	ContainerHostname string                             `json:"container_hostname"`
	Environment       map[string]string                  `json:"environment"`
	Image             string                             `json:"image"`
	Mode              string                             `json:"mode"`
	ModelDataUrl      string                             `json:"model_data_url"`
	ImageConfig       []PrimaryContainerImageConfigState `json:"image_config"`
}

type PrimaryContainerImageConfigState struct {
	RepositoryAccessMode string                                                 `json:"repository_access_mode"`
	RepositoryAuthConfig []PrimaryContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type PrimaryContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
