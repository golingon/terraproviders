// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package wafv2webaclloggingconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LoggingFilter struct {
	// DefaultBehavior: string, required
	DefaultBehavior terra.StringValue `hcl:"default_behavior,attr" validate:"required"`
	// Filter: min=1
	Filter []Filter `hcl:"filter,block" validate:"min=1"`
}

type Filter struct {
	// Behavior: string, required
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
	// Requirement: string, required
	Requirement terra.StringValue `hcl:"requirement,attr" validate:"required"`
	// Condition: min=1
	Condition []Condition `hcl:"condition,block" validate:"min=1"`
}

type Condition struct {
	// ActionCondition: optional
	ActionCondition *ActionCondition `hcl:"action_condition,block"`
	// LabelNameCondition: optional
	LabelNameCondition *LabelNameCondition `hcl:"label_name_condition,block"`
}

type ActionCondition struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
}

type LabelNameCondition struct {
	// LabelName: string, required
	LabelName terra.StringValue `hcl:"label_name,attr" validate:"required"`
}

type RedactedFields struct {
	// AllQueryArguments: optional
	AllQueryArguments *AllQueryArguments `hcl:"all_query_arguments,block"`
	// Body: optional
	Body *Body `hcl:"body,block"`
	// Method: optional
	Method *Method `hcl:"method,block"`
	// QueryString: optional
	QueryString *QueryString `hcl:"query_string,block"`
	// SingleHeader: optional
	SingleHeader *SingleHeader `hcl:"single_header,block"`
	// SingleQueryArgument: optional
	SingleQueryArgument *SingleQueryArgument `hcl:"single_query_argument,block"`
	// UriPath: optional
	UriPath *UriPath `hcl:"uri_path,block"`
}

type AllQueryArguments struct{}

type Body struct{}

type Method struct{}

type QueryString struct{}

type SingleHeader struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type SingleQueryArgument struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type UriPath struct{}

type LoggingFilterAttributes struct {
	ref terra.Reference
}

func (lf LoggingFilterAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf LoggingFilterAttributes) InternalWithRef(ref terra.Reference) LoggingFilterAttributes {
	return LoggingFilterAttributes{ref: ref}
}

func (lf LoggingFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf LoggingFilterAttributes) DefaultBehavior() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("default_behavior"))
}

func (lf LoggingFilterAttributes) Filter() terra.SetValue[FilterAttributes] {
	return terra.ReferenceAsSet[FilterAttributes](lf.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("behavior"))
}

func (f FilterAttributes) Requirement() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("requirement"))
}

func (f FilterAttributes) Condition() terra.SetValue[ConditionAttributes] {
	return terra.ReferenceAsSet[ConditionAttributes](f.ref.Append("condition"))
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) ActionCondition() terra.ListValue[ActionConditionAttributes] {
	return terra.ReferenceAsList[ActionConditionAttributes](c.ref.Append("action_condition"))
}

func (c ConditionAttributes) LabelNameCondition() terra.ListValue[LabelNameConditionAttributes] {
	return terra.ReferenceAsList[LabelNameConditionAttributes](c.ref.Append("label_name_condition"))
}

type ActionConditionAttributes struct {
	ref terra.Reference
}

func (ac ActionConditionAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ActionConditionAttributes) InternalWithRef(ref terra.Reference) ActionConditionAttributes {
	return ActionConditionAttributes{ref: ref}
}

func (ac ActionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ActionConditionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("action"))
}

type LabelNameConditionAttributes struct {
	ref terra.Reference
}

func (lnc LabelNameConditionAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc LabelNameConditionAttributes) InternalWithRef(ref terra.Reference) LabelNameConditionAttributes {
	return LabelNameConditionAttributes{ref: ref}
}

func (lnc LabelNameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc LabelNameConditionAttributes) LabelName() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("label_name"))
}

type RedactedFieldsAttributes struct {
	ref terra.Reference
}

func (rf RedactedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RedactedFieldsAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsAttributes {
	return RedactedFieldsAttributes{ref: ref}
}

func (rf RedactedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RedactedFieldsAttributes) AllQueryArguments() terra.ListValue[AllQueryArgumentsAttributes] {
	return terra.ReferenceAsList[AllQueryArgumentsAttributes](rf.ref.Append("all_query_arguments"))
}

func (rf RedactedFieldsAttributes) Body() terra.ListValue[BodyAttributes] {
	return terra.ReferenceAsList[BodyAttributes](rf.ref.Append("body"))
}

func (rf RedactedFieldsAttributes) Method() terra.ListValue[MethodAttributes] {
	return terra.ReferenceAsList[MethodAttributes](rf.ref.Append("method"))
}

func (rf RedactedFieldsAttributes) QueryString() terra.ListValue[QueryStringAttributes] {
	return terra.ReferenceAsList[QueryStringAttributes](rf.ref.Append("query_string"))
}

func (rf RedactedFieldsAttributes) SingleHeader() terra.ListValue[SingleHeaderAttributes] {
	return terra.ReferenceAsList[SingleHeaderAttributes](rf.ref.Append("single_header"))
}

func (rf RedactedFieldsAttributes) SingleQueryArgument() terra.ListValue[SingleQueryArgumentAttributes] {
	return terra.ReferenceAsList[SingleQueryArgumentAttributes](rf.ref.Append("single_query_argument"))
}

func (rf RedactedFieldsAttributes) UriPath() terra.ListValue[UriPathAttributes] {
	return terra.ReferenceAsList[UriPathAttributes](rf.ref.Append("uri_path"))
}

type AllQueryArgumentsAttributes struct {
	ref terra.Reference
}

func (aqa AllQueryArgumentsAttributes) InternalRef() (terra.Reference, error) {
	return aqa.ref, nil
}

func (aqa AllQueryArgumentsAttributes) InternalWithRef(ref terra.Reference) AllQueryArgumentsAttributes {
	return AllQueryArgumentsAttributes{ref: ref}
}

func (aqa AllQueryArgumentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aqa.ref.InternalTokens()
}

type BodyAttributes struct {
	ref terra.Reference
}

func (b BodyAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BodyAttributes) InternalWithRef(ref terra.Reference) BodyAttributes {
	return BodyAttributes{ref: ref}
}

func (b BodyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

type MethodAttributes struct {
	ref terra.Reference
}

func (m MethodAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MethodAttributes) InternalWithRef(ref terra.Reference) MethodAttributes {
	return MethodAttributes{ref: ref}
}

func (m MethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

type QueryStringAttributes struct {
	ref terra.Reference
}

func (qs QueryStringAttributes) InternalRef() (terra.Reference, error) {
	return qs.ref, nil
}

func (qs QueryStringAttributes) InternalWithRef(ref terra.Reference) QueryStringAttributes {
	return QueryStringAttributes{ref: ref}
}

func (qs QueryStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qs.ref.InternalTokens()
}

type SingleHeaderAttributes struct {
	ref terra.Reference
}

func (sh SingleHeaderAttributes) InternalRef() (terra.Reference, error) {
	return sh.ref, nil
}

func (sh SingleHeaderAttributes) InternalWithRef(ref terra.Reference) SingleHeaderAttributes {
	return SingleHeaderAttributes{ref: ref}
}

func (sh SingleHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sh.ref.InternalTokens()
}

func (sh SingleHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sh.ref.Append("name"))
}

type SingleQueryArgumentAttributes struct {
	ref terra.Reference
}

func (sqa SingleQueryArgumentAttributes) InternalRef() (terra.Reference, error) {
	return sqa.ref, nil
}

func (sqa SingleQueryArgumentAttributes) InternalWithRef(ref terra.Reference) SingleQueryArgumentAttributes {
	return SingleQueryArgumentAttributes{ref: ref}
}

func (sqa SingleQueryArgumentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqa.ref.InternalTokens()
}

func (sqa SingleQueryArgumentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sqa.ref.Append("name"))
}

type UriPathAttributes struct {
	ref terra.Reference
}

func (up UriPathAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up UriPathAttributes) InternalWithRef(ref terra.Reference) UriPathAttributes {
	return UriPathAttributes{ref: ref}
}

func (up UriPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

type LoggingFilterState struct {
	DefaultBehavior string        `json:"default_behavior"`
	Filter          []FilterState `json:"filter"`
}

type FilterState struct {
	Behavior    string           `json:"behavior"`
	Requirement string           `json:"requirement"`
	Condition   []ConditionState `json:"condition"`
}

type ConditionState struct {
	ActionCondition    []ActionConditionState    `json:"action_condition"`
	LabelNameCondition []LabelNameConditionState `json:"label_name_condition"`
}

type ActionConditionState struct {
	Action string `json:"action"`
}

type LabelNameConditionState struct {
	LabelName string `json:"label_name"`
}

type RedactedFieldsState struct {
	AllQueryArguments   []AllQueryArgumentsState   `json:"all_query_arguments"`
	Body                []BodyState                `json:"body"`
	Method              []MethodState              `json:"method"`
	QueryString         []QueryStringState         `json:"query_string"`
	SingleHeader        []SingleHeaderState        `json:"single_header"`
	SingleQueryArgument []SingleQueryArgumentState `json:"single_query_argument"`
	UriPath             []UriPathState             `json:"uri_path"`
}

type AllQueryArgumentsState struct{}

type BodyState struct{}

type MethodState struct{}

type QueryStringState struct{}

type SingleHeaderState struct {
	Name string `json:"name"`
}

type SingleQueryArgumentState struct {
	Name string `json:"name"`
}

type UriPathState struct{}
