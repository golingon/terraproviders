// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCodedeployApp creates a new instance of [CodedeployApp].
func NewCodedeployApp(name string, args CodedeployAppArgs) *CodedeployApp {
	return &CodedeployApp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodedeployApp)(nil)

// CodedeployApp represents the Terraform resource aws_codedeploy_app.
type CodedeployApp struct {
	Name      string
	Args      CodedeployAppArgs
	state     *codedeployAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CodedeployApp].
func (ca *CodedeployApp) Type() string {
	return "aws_codedeploy_app"
}

// LocalName returns the local name for [CodedeployApp].
func (ca *CodedeployApp) LocalName() string {
	return ca.Name
}

// Configuration returns the configuration (args) for [CodedeployApp].
func (ca *CodedeployApp) Configuration() interface{} {
	return ca.Args
}

// DependOn is used for other resources to depend on [CodedeployApp].
func (ca *CodedeployApp) DependOn() terra.Reference {
	return terra.ReferenceResource(ca)
}

// Dependencies returns the list of resources [CodedeployApp] depends_on.
func (ca *CodedeployApp) Dependencies() terra.Dependencies {
	return ca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CodedeployApp].
func (ca *CodedeployApp) LifecycleManagement() *terra.Lifecycle {
	return ca.Lifecycle
}

// Attributes returns the attributes for [CodedeployApp].
func (ca *CodedeployApp) Attributes() codedeployAppAttributes {
	return codedeployAppAttributes{ref: terra.ReferenceResource(ca)}
}

// ImportState imports the given attribute values into [CodedeployApp]'s state.
func (ca *CodedeployApp) ImportState(av io.Reader) error {
	ca.state = &codedeployAppState{}
	if err := json.NewDecoder(av).Decode(ca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ca.Type(), ca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CodedeployApp] has state.
func (ca *CodedeployApp) State() (*codedeployAppState, bool) {
	return ca.state, ca.state != nil
}

// StateMust returns the state for [CodedeployApp]. Panics if the state is nil.
func (ca *CodedeployApp) StateMust() *codedeployAppState {
	if ca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ca.Type(), ca.LocalName()))
	}
	return ca.state
}

// CodedeployAppArgs contains the configurations for aws_codedeploy_app.
type CodedeployAppArgs struct {
	// ComputePlatform: string, optional
	ComputePlatform terra.StringValue `hcl:"compute_platform,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type codedeployAppAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_codedeploy_app.
func (ca codedeployAppAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("application_id"))
}

// Arn returns a reference to field arn of aws_codedeploy_app.
func (ca codedeployAppAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("arn"))
}

// ComputePlatform returns a reference to field compute_platform of aws_codedeploy_app.
func (ca codedeployAppAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("compute_platform"))
}

// GithubAccountName returns a reference to field github_account_name of aws_codedeploy_app.
func (ca codedeployAppAttributes) GithubAccountName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("github_account_name"))
}

// Id returns a reference to field id of aws_codedeploy_app.
func (ca codedeployAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("id"))
}

// LinkedToGithub returns a reference to field linked_to_github of aws_codedeploy_app.
func (ca codedeployAppAttributes) LinkedToGithub() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("linked_to_github"))
}

// Name returns a reference to field name of aws_codedeploy_app.
func (ca codedeployAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_codedeploy_app.
func (ca codedeployAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codedeploy_app.
func (ca codedeployAppAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ca.ref.Append("tags_all"))
}

type codedeployAppState struct {
	ApplicationId     string            `json:"application_id"`
	Arn               string            `json:"arn"`
	ComputePlatform   string            `json:"compute_platform"`
	GithubAccountName string            `json:"github_account_name"`
	Id                string            `json:"id"`
	LinkedToGithub    bool              `json:"linked_to_github"`
	Name              string            `json:"name"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
