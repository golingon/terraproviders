// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSyntheticsGroup creates a new instance of [SyntheticsGroup].
func NewSyntheticsGroup(name string, args SyntheticsGroupArgs) *SyntheticsGroup {
	return &SyntheticsGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SyntheticsGroup)(nil)

// SyntheticsGroup represents the Terraform resource aws_synthetics_group.
type SyntheticsGroup struct {
	Name      string
	Args      SyntheticsGroupArgs
	state     *syntheticsGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SyntheticsGroup].
func (sg *SyntheticsGroup) Type() string {
	return "aws_synthetics_group"
}

// LocalName returns the local name for [SyntheticsGroup].
func (sg *SyntheticsGroup) LocalName() string {
	return sg.Name
}

// Configuration returns the configuration (args) for [SyntheticsGroup].
func (sg *SyntheticsGroup) Configuration() interface{} {
	return sg.Args
}

// DependOn is used for other resources to depend on [SyntheticsGroup].
func (sg *SyntheticsGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(sg)
}

// Dependencies returns the list of resources [SyntheticsGroup] depends_on.
func (sg *SyntheticsGroup) Dependencies() terra.Dependencies {
	return sg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SyntheticsGroup].
func (sg *SyntheticsGroup) LifecycleManagement() *terra.Lifecycle {
	return sg.Lifecycle
}

// Attributes returns the attributes for [SyntheticsGroup].
func (sg *SyntheticsGroup) Attributes() syntheticsGroupAttributes {
	return syntheticsGroupAttributes{ref: terra.ReferenceResource(sg)}
}

// ImportState imports the given attribute values into [SyntheticsGroup]'s state.
func (sg *SyntheticsGroup) ImportState(av io.Reader) error {
	sg.state = &syntheticsGroupState{}
	if err := json.NewDecoder(av).Decode(sg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sg.Type(), sg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SyntheticsGroup] has state.
func (sg *SyntheticsGroup) State() (*syntheticsGroupState, bool) {
	return sg.state, sg.state != nil
}

// StateMust returns the state for [SyntheticsGroup]. Panics if the state is nil.
func (sg *SyntheticsGroup) StateMust() *syntheticsGroupState {
	if sg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sg.Type(), sg.LocalName()))
	}
	return sg.state
}

// SyntheticsGroupArgs contains the configurations for aws_synthetics_group.
type SyntheticsGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type syntheticsGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_synthetics_group.
func (sg syntheticsGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sg.ref.Append("arn"))
}

// GroupId returns a reference to field group_id of aws_synthetics_group.
func (sg syntheticsGroupAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(sg.ref.Append("group_id"))
}

// Id returns a reference to field id of aws_synthetics_group.
func (sg syntheticsGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sg.ref.Append("id"))
}

// Name returns a reference to field name of aws_synthetics_group.
func (sg syntheticsGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sg.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_synthetics_group.
func (sg syntheticsGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_synthetics_group.
func (sg syntheticsGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sg.ref.Append("tags_all"))
}

type syntheticsGroupState struct {
	Arn     string            `json:"arn"`
	GroupId string            `json:"group_id"`
	Id      string            `json:"id"`
	Name    string            `json:"name"`
	Tags    map[string]string `json:"tags"`
	TagsAll map[string]string `json:"tags_all"`
}
