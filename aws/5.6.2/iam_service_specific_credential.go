// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIamServiceSpecificCredential creates a new instance of [IamServiceSpecificCredential].
func NewIamServiceSpecificCredential(name string, args IamServiceSpecificCredentialArgs) *IamServiceSpecificCredential {
	return &IamServiceSpecificCredential{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamServiceSpecificCredential)(nil)

// IamServiceSpecificCredential represents the Terraform resource aws_iam_service_specific_credential.
type IamServiceSpecificCredential struct {
	Name      string
	Args      IamServiceSpecificCredentialArgs
	state     *iamServiceSpecificCredentialState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) Type() string {
	return "aws_iam_service_specific_credential"
}

// LocalName returns the local name for [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) LocalName() string {
	return issc.Name
}

// Configuration returns the configuration (args) for [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) Configuration() interface{} {
	return issc.Args
}

// DependOn is used for other resources to depend on [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) DependOn() terra.Reference {
	return terra.ReferenceResource(issc)
}

// Dependencies returns the list of resources [IamServiceSpecificCredential] depends_on.
func (issc *IamServiceSpecificCredential) Dependencies() terra.Dependencies {
	return issc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) LifecycleManagement() *terra.Lifecycle {
	return issc.Lifecycle
}

// Attributes returns the attributes for [IamServiceSpecificCredential].
func (issc *IamServiceSpecificCredential) Attributes() iamServiceSpecificCredentialAttributes {
	return iamServiceSpecificCredentialAttributes{ref: terra.ReferenceResource(issc)}
}

// ImportState imports the given attribute values into [IamServiceSpecificCredential]'s state.
func (issc *IamServiceSpecificCredential) ImportState(av io.Reader) error {
	issc.state = &iamServiceSpecificCredentialState{}
	if err := json.NewDecoder(av).Decode(issc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", issc.Type(), issc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IamServiceSpecificCredential] has state.
func (issc *IamServiceSpecificCredential) State() (*iamServiceSpecificCredentialState, bool) {
	return issc.state, issc.state != nil
}

// StateMust returns the state for [IamServiceSpecificCredential]. Panics if the state is nil.
func (issc *IamServiceSpecificCredential) StateMust() *iamServiceSpecificCredentialState {
	if issc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", issc.Type(), issc.LocalName()))
	}
	return issc.state
}

// IamServiceSpecificCredentialArgs contains the configurations for aws_iam_service_specific_credential.
type IamServiceSpecificCredentialArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}
type iamServiceSpecificCredentialAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("id"))
}

// ServiceName returns a reference to field service_name of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("service_name"))
}

// ServicePassword returns a reference to field service_password of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) ServicePassword() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("service_password"))
}

// ServiceSpecificCredentialId returns a reference to field service_specific_credential_id of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) ServiceSpecificCredentialId() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("service_specific_credential_id"))
}

// ServiceUserName returns a reference to field service_user_name of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) ServiceUserName() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("service_user_name"))
}

// Status returns a reference to field status of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("status"))
}

// UserName returns a reference to field user_name of aws_iam_service_specific_credential.
func (issc iamServiceSpecificCredentialAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(issc.ref.Append("user_name"))
}

type iamServiceSpecificCredentialState struct {
	Id                          string `json:"id"`
	ServiceName                 string `json:"service_name"`
	ServicePassword             string `json:"service_password"`
	ServiceSpecificCredentialId string `json:"service_specific_credential_id"`
	ServiceUserName             string `json:"service_user_name"`
	Status                      string `json:"status"`
	UserName                    string `json:"user_name"`
}
