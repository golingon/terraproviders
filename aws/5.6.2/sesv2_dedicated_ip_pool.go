// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sesv2dedicatedippool "github.com/golingon/terraproviders/aws/5.6.2/sesv2dedicatedippool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSesv2DedicatedIpPool creates a new instance of [Sesv2DedicatedIpPool].
func NewSesv2DedicatedIpPool(name string, args Sesv2DedicatedIpPoolArgs) *Sesv2DedicatedIpPool {
	return &Sesv2DedicatedIpPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Sesv2DedicatedIpPool)(nil)

// Sesv2DedicatedIpPool represents the Terraform resource aws_sesv2_dedicated_ip_pool.
type Sesv2DedicatedIpPool struct {
	Name      string
	Args      Sesv2DedicatedIpPoolArgs
	state     *sesv2DedicatedIpPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) Type() string {
	return "aws_sesv2_dedicated_ip_pool"
}

// LocalName returns the local name for [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) LocalName() string {
	return sdip.Name
}

// Configuration returns the configuration (args) for [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) Configuration() interface{} {
	return sdip.Args
}

// DependOn is used for other resources to depend on [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) DependOn() terra.Reference {
	return terra.ReferenceResource(sdip)
}

// Dependencies returns the list of resources [Sesv2DedicatedIpPool] depends_on.
func (sdip *Sesv2DedicatedIpPool) Dependencies() terra.Dependencies {
	return sdip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) LifecycleManagement() *terra.Lifecycle {
	return sdip.Lifecycle
}

// Attributes returns the attributes for [Sesv2DedicatedIpPool].
func (sdip *Sesv2DedicatedIpPool) Attributes() sesv2DedicatedIpPoolAttributes {
	return sesv2DedicatedIpPoolAttributes{ref: terra.ReferenceResource(sdip)}
}

// ImportState imports the given attribute values into [Sesv2DedicatedIpPool]'s state.
func (sdip *Sesv2DedicatedIpPool) ImportState(av io.Reader) error {
	sdip.state = &sesv2DedicatedIpPoolState{}
	if err := json.NewDecoder(av).Decode(sdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdip.Type(), sdip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Sesv2DedicatedIpPool] has state.
func (sdip *Sesv2DedicatedIpPool) State() (*sesv2DedicatedIpPoolState, bool) {
	return sdip.state, sdip.state != nil
}

// StateMust returns the state for [Sesv2DedicatedIpPool]. Panics if the state is nil.
func (sdip *Sesv2DedicatedIpPool) StateMust() *sesv2DedicatedIpPoolState {
	if sdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdip.Type(), sdip.LocalName()))
	}
	return sdip.state
}

// Sesv2DedicatedIpPoolArgs contains the configurations for aws_sesv2_dedicated_ip_pool.
type Sesv2DedicatedIpPoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// ScalingMode: string, optional
	ScalingMode terra.StringValue `hcl:"scaling_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *sesv2dedicatedippool.Timeouts `hcl:"timeouts,block"`
}
type sesv2DedicatedIpPoolAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sdip.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sdip.ref.Append("id"))
}

// PoolName returns a reference to field pool_name of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) PoolName() terra.StringValue {
	return terra.ReferenceAsString(sdip.ref.Append("pool_name"))
}

// ScalingMode returns a reference to field scaling_mode of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) ScalingMode() terra.StringValue {
	return terra.ReferenceAsString(sdip.ref.Append("scaling_mode"))
}

// Tags returns a reference to field tags of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdip.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sesv2_dedicated_ip_pool.
func (sdip sesv2DedicatedIpPoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdip.ref.Append("tags_all"))
}

func (sdip sesv2DedicatedIpPoolAttributes) Timeouts() sesv2dedicatedippool.TimeoutsAttributes {
	return terra.ReferenceAsSingle[sesv2dedicatedippool.TimeoutsAttributes](sdip.ref.Append("timeouts"))
}

type sesv2DedicatedIpPoolState struct {
	Arn         string                              `json:"arn"`
	Id          string                              `json:"id"`
	PoolName    string                              `json:"pool_name"`
	ScalingMode string                              `json:"scaling_mode"`
	Tags        map[string]string                   `json:"tags"`
	TagsAll     map[string]string                   `json:"tags_all"`
	Timeouts    *sesv2dedicatedippool.TimeoutsState `json:"timeouts"`
}
