// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	globalacceleratorlistener "github.com/golingon/terraproviders/aws/5.8.0/globalacceleratorlistener"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGlobalacceleratorListener creates a new instance of [GlobalacceleratorListener].
func NewGlobalacceleratorListener(name string, args GlobalacceleratorListenerArgs) *GlobalacceleratorListener {
	return &GlobalacceleratorListener{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlobalacceleratorListener)(nil)

// GlobalacceleratorListener represents the Terraform resource aws_globalaccelerator_listener.
type GlobalacceleratorListener struct {
	Name      string
	Args      GlobalacceleratorListenerArgs
	state     *globalacceleratorListenerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) Type() string {
	return "aws_globalaccelerator_listener"
}

// LocalName returns the local name for [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) LocalName() string {
	return gl.Name
}

// Configuration returns the configuration (args) for [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) Configuration() interface{} {
	return gl.Args
}

// DependOn is used for other resources to depend on [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) DependOn() terra.Reference {
	return terra.ReferenceResource(gl)
}

// Dependencies returns the list of resources [GlobalacceleratorListener] depends_on.
func (gl *GlobalacceleratorListener) Dependencies() terra.Dependencies {
	return gl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) LifecycleManagement() *terra.Lifecycle {
	return gl.Lifecycle
}

// Attributes returns the attributes for [GlobalacceleratorListener].
func (gl *GlobalacceleratorListener) Attributes() globalacceleratorListenerAttributes {
	return globalacceleratorListenerAttributes{ref: terra.ReferenceResource(gl)}
}

// ImportState imports the given attribute values into [GlobalacceleratorListener]'s state.
func (gl *GlobalacceleratorListener) ImportState(av io.Reader) error {
	gl.state = &globalacceleratorListenerState{}
	if err := json.NewDecoder(av).Decode(gl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gl.Type(), gl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GlobalacceleratorListener] has state.
func (gl *GlobalacceleratorListener) State() (*globalacceleratorListenerState, bool) {
	return gl.state, gl.state != nil
}

// StateMust returns the state for [GlobalacceleratorListener]. Panics if the state is nil.
func (gl *GlobalacceleratorListener) StateMust() *globalacceleratorListenerState {
	if gl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gl.Type(), gl.LocalName()))
	}
	return gl.state
}

// GlobalacceleratorListenerArgs contains the configurations for aws_globalaccelerator_listener.
type GlobalacceleratorListenerArgs struct {
	// AcceleratorArn: string, required
	AcceleratorArn terra.StringValue `hcl:"accelerator_arn,attr" validate:"required"`
	// ClientAffinity: string, optional
	ClientAffinity terra.StringValue `hcl:"client_affinity,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// PortRange: min=1,max=10
	PortRange []globalacceleratorlistener.PortRange `hcl:"port_range,block" validate:"min=1,max=10"`
	// Timeouts: optional
	Timeouts *globalacceleratorlistener.Timeouts `hcl:"timeouts,block"`
}
type globalacceleratorListenerAttributes struct {
	ref terra.Reference
}

// AcceleratorArn returns a reference to field accelerator_arn of aws_globalaccelerator_listener.
func (gl globalacceleratorListenerAttributes) AcceleratorArn() terra.StringValue {
	return terra.ReferenceAsString(gl.ref.Append("accelerator_arn"))
}

// ClientAffinity returns a reference to field client_affinity of aws_globalaccelerator_listener.
func (gl globalacceleratorListenerAttributes) ClientAffinity() terra.StringValue {
	return terra.ReferenceAsString(gl.ref.Append("client_affinity"))
}

// Id returns a reference to field id of aws_globalaccelerator_listener.
func (gl globalacceleratorListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gl.ref.Append("id"))
}

// Protocol returns a reference to field protocol of aws_globalaccelerator_listener.
func (gl globalacceleratorListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(gl.ref.Append("protocol"))
}

func (gl globalacceleratorListenerAttributes) PortRange() terra.SetValue[globalacceleratorlistener.PortRangeAttributes] {
	return terra.ReferenceAsSet[globalacceleratorlistener.PortRangeAttributes](gl.ref.Append("port_range"))
}

func (gl globalacceleratorListenerAttributes) Timeouts() globalacceleratorlistener.TimeoutsAttributes {
	return terra.ReferenceAsSingle[globalacceleratorlistener.TimeoutsAttributes](gl.ref.Append("timeouts"))
}

type globalacceleratorListenerState struct {
	AcceleratorArn string                                     `json:"accelerator_arn"`
	ClientAffinity string                                     `json:"client_affinity"`
	Id             string                                     `json:"id"`
	Protocol       string                                     `json:"protocol"`
	PortRange      []globalacceleratorlistener.PortRangeState `json:"port_range"`
	Timeouts       *globalacceleratorlistener.TimeoutsState   `json:"timeouts"`
}
