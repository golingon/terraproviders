// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	imagebuilderimage "github.com/golingon/terraproviders/aws/5.8.0/imagebuilderimage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewImagebuilderImage creates a new instance of [ImagebuilderImage].
func NewImagebuilderImage(name string, args ImagebuilderImageArgs) *ImagebuilderImage {
	return &ImagebuilderImage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderImage)(nil)

// ImagebuilderImage represents the Terraform resource aws_imagebuilder_image.
type ImagebuilderImage struct {
	Name      string
	Args      ImagebuilderImageArgs
	state     *imagebuilderImageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ImagebuilderImage].
func (ii *ImagebuilderImage) Type() string {
	return "aws_imagebuilder_image"
}

// LocalName returns the local name for [ImagebuilderImage].
func (ii *ImagebuilderImage) LocalName() string {
	return ii.Name
}

// Configuration returns the configuration (args) for [ImagebuilderImage].
func (ii *ImagebuilderImage) Configuration() interface{} {
	return ii.Args
}

// DependOn is used for other resources to depend on [ImagebuilderImage].
func (ii *ImagebuilderImage) DependOn() terra.Reference {
	return terra.ReferenceResource(ii)
}

// Dependencies returns the list of resources [ImagebuilderImage] depends_on.
func (ii *ImagebuilderImage) Dependencies() terra.Dependencies {
	return ii.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ImagebuilderImage].
func (ii *ImagebuilderImage) LifecycleManagement() *terra.Lifecycle {
	return ii.Lifecycle
}

// Attributes returns the attributes for [ImagebuilderImage].
func (ii *ImagebuilderImage) Attributes() imagebuilderImageAttributes {
	return imagebuilderImageAttributes{ref: terra.ReferenceResource(ii)}
}

// ImportState imports the given attribute values into [ImagebuilderImage]'s state.
func (ii *ImagebuilderImage) ImportState(av io.Reader) error {
	ii.state = &imagebuilderImageState{}
	if err := json.NewDecoder(av).Decode(ii.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ii.Type(), ii.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ImagebuilderImage] has state.
func (ii *ImagebuilderImage) State() (*imagebuilderImageState, bool) {
	return ii.state, ii.state != nil
}

// StateMust returns the state for [ImagebuilderImage]. Panics if the state is nil.
func (ii *ImagebuilderImage) StateMust() *imagebuilderImageState {
	if ii.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ii.Type(), ii.LocalName()))
	}
	return ii.state
}

// ImagebuilderImageArgs contains the configurations for aws_imagebuilder_image.
type ImagebuilderImageArgs struct {
	// ContainerRecipeArn: string, optional
	ContainerRecipeArn terra.StringValue `hcl:"container_recipe_arn,attr"`
	// DistributionConfigurationArn: string, optional
	DistributionConfigurationArn terra.StringValue `hcl:"distribution_configuration_arn,attr"`
	// EnhancedImageMetadataEnabled: bool, optional
	EnhancedImageMetadataEnabled terra.BoolValue `hcl:"enhanced_image_metadata_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageRecipeArn: string, optional
	ImageRecipeArn terra.StringValue `hcl:"image_recipe_arn,attr"`
	// InfrastructureConfigurationArn: string, required
	InfrastructureConfigurationArn terra.StringValue `hcl:"infrastructure_configuration_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OutputResources: min=0
	OutputResources []imagebuilderimage.OutputResources `hcl:"output_resources,block" validate:"min=0"`
	// ImageTestsConfiguration: optional
	ImageTestsConfiguration *imagebuilderimage.ImageTestsConfiguration `hcl:"image_tests_configuration,block"`
	// Timeouts: optional
	Timeouts *imagebuilderimage.Timeouts `hcl:"timeouts,block"`
}
type imagebuilderImageAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("arn"))
}

// ContainerRecipeArn returns a reference to field container_recipe_arn of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) ContainerRecipeArn() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("container_recipe_arn"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("date_created"))
}

// DistributionConfigurationArn returns a reference to field distribution_configuration_arn of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) DistributionConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("distribution_configuration_arn"))
}

// EnhancedImageMetadataEnabled returns a reference to field enhanced_image_metadata_enabled of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) EnhancedImageMetadataEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ii.ref.Append("enhanced_image_metadata_enabled"))
}

// Id returns a reference to field id of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("id"))
}

// ImageRecipeArn returns a reference to field image_recipe_arn of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) ImageRecipeArn() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("image_recipe_arn"))
}

// InfrastructureConfigurationArn returns a reference to field infrastructure_configuration_arn of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) InfrastructureConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("infrastructure_configuration_arn"))
}

// Name returns a reference to field name of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("name"))
}

// OsVersion returns a reference to field os_version of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("os_version"))
}

// Platform returns a reference to field platform of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("platform"))
}

// Tags returns a reference to field tags of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ii.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ii.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_imagebuilder_image.
func (ii imagebuilderImageAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ii.ref.Append("version"))
}

func (ii imagebuilderImageAttributes) OutputResources() terra.ListValue[imagebuilderimage.OutputResourcesAttributes] {
	return terra.ReferenceAsList[imagebuilderimage.OutputResourcesAttributes](ii.ref.Append("output_resources"))
}

func (ii imagebuilderImageAttributes) ImageTestsConfiguration() terra.ListValue[imagebuilderimage.ImageTestsConfigurationAttributes] {
	return terra.ReferenceAsList[imagebuilderimage.ImageTestsConfigurationAttributes](ii.ref.Append("image_tests_configuration"))
}

func (ii imagebuilderImageAttributes) Timeouts() imagebuilderimage.TimeoutsAttributes {
	return terra.ReferenceAsSingle[imagebuilderimage.TimeoutsAttributes](ii.ref.Append("timeouts"))
}

type imagebuilderImageState struct {
	Arn                            string                                           `json:"arn"`
	ContainerRecipeArn             string                                           `json:"container_recipe_arn"`
	DateCreated                    string                                           `json:"date_created"`
	DistributionConfigurationArn   string                                           `json:"distribution_configuration_arn"`
	EnhancedImageMetadataEnabled   bool                                             `json:"enhanced_image_metadata_enabled"`
	Id                             string                                           `json:"id"`
	ImageRecipeArn                 string                                           `json:"image_recipe_arn"`
	InfrastructureConfigurationArn string                                           `json:"infrastructure_configuration_arn"`
	Name                           string                                           `json:"name"`
	OsVersion                      string                                           `json:"os_version"`
	Platform                       string                                           `json:"platform"`
	Tags                           map[string]string                                `json:"tags"`
	TagsAll                        map[string]string                                `json:"tags_all"`
	Version                        string                                           `json:"version"`
	OutputResources                []imagebuilderimage.OutputResourcesState         `json:"output_resources"`
	ImageTestsConfiguration        []imagebuilderimage.ImageTestsConfigurationState `json:"image_tests_configuration"`
	Timeouts                       *imagebuilderimage.TimeoutsState                 `json:"timeouts"`
}
