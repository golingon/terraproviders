// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	transferconnector "github.com/golingon/terraproviders/aws/5.8.0/transferconnector"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewTransferConnector creates a new instance of [TransferConnector].
func NewTransferConnector(name string, args TransferConnectorArgs) *TransferConnector {
	return &TransferConnector{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransferConnector)(nil)

// TransferConnector represents the Terraform resource aws_transfer_connector.
type TransferConnector struct {
	Name      string
	Args      TransferConnectorArgs
	state     *transferConnectorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TransferConnector].
func (tc *TransferConnector) Type() string {
	return "aws_transfer_connector"
}

// LocalName returns the local name for [TransferConnector].
func (tc *TransferConnector) LocalName() string {
	return tc.Name
}

// Configuration returns the configuration (args) for [TransferConnector].
func (tc *TransferConnector) Configuration() interface{} {
	return tc.Args
}

// DependOn is used for other resources to depend on [TransferConnector].
func (tc *TransferConnector) DependOn() terra.Reference {
	return terra.ReferenceResource(tc)
}

// Dependencies returns the list of resources [TransferConnector] depends_on.
func (tc *TransferConnector) Dependencies() terra.Dependencies {
	return tc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TransferConnector].
func (tc *TransferConnector) LifecycleManagement() *terra.Lifecycle {
	return tc.Lifecycle
}

// Attributes returns the attributes for [TransferConnector].
func (tc *TransferConnector) Attributes() transferConnectorAttributes {
	return transferConnectorAttributes{ref: terra.ReferenceResource(tc)}
}

// ImportState imports the given attribute values into [TransferConnector]'s state.
func (tc *TransferConnector) ImportState(av io.Reader) error {
	tc.state = &transferConnectorState{}
	if err := json.NewDecoder(av).Decode(tc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tc.Type(), tc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TransferConnector] has state.
func (tc *TransferConnector) State() (*transferConnectorState, bool) {
	return tc.state, tc.state != nil
}

// StateMust returns the state for [TransferConnector]. Panics if the state is nil.
func (tc *TransferConnector) StateMust() *transferConnectorState {
	if tc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tc.Type(), tc.LocalName()))
	}
	return tc.state
}

// TransferConnectorArgs contains the configurations for aws_transfer_connector.
type TransferConnectorArgs struct {
	// AccessRole: string, required
	AccessRole terra.StringValue `hcl:"access_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoggingRole: string, optional
	LoggingRole terra.StringValue `hcl:"logging_role,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// As2Config: required
	As2Config *transferconnector.As2Config `hcl:"as2_config,block" validate:"required"`
}
type transferConnectorAttributes struct {
	ref terra.Reference
}

// AccessRole returns a reference to field access_role of aws_transfer_connector.
func (tc transferConnectorAttributes) AccessRole() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("access_role"))
}

// ConnectorId returns a reference to field connector_id of aws_transfer_connector.
func (tc transferConnectorAttributes) ConnectorId() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("connector_id"))
}

// Id returns a reference to field id of aws_transfer_connector.
func (tc transferConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("id"))
}

// LoggingRole returns a reference to field logging_role of aws_transfer_connector.
func (tc transferConnectorAttributes) LoggingRole() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("logging_role"))
}

// Tags returns a reference to field tags of aws_transfer_connector.
func (tc transferConnectorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_connector.
func (tc transferConnectorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tc.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_transfer_connector.
func (tc transferConnectorAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("url"))
}

func (tc transferConnectorAttributes) As2Config() terra.ListValue[transferconnector.As2ConfigAttributes] {
	return terra.ReferenceAsList[transferconnector.As2ConfigAttributes](tc.ref.Append("as2_config"))
}

type transferConnectorState struct {
	AccessRole  string                             `json:"access_role"`
	ConnectorId string                             `json:"connector_id"`
	Id          string                             `json:"id"`
	LoggingRole string                             `json:"logging_role"`
	Tags        map[string]string                  `json:"tags"`
	TagsAll     map[string]string                  `json:"tags_all"`
	Url         string                             `json:"url"`
	As2Config   []transferconnector.As2ConfigState `json:"as2_config"`
}
