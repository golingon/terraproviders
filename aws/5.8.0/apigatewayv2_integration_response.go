// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewApigatewayv2IntegrationResponse creates a new instance of [Apigatewayv2IntegrationResponse].
func NewApigatewayv2IntegrationResponse(name string, args Apigatewayv2IntegrationResponseArgs) *Apigatewayv2IntegrationResponse {
	return &Apigatewayv2IntegrationResponse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2IntegrationResponse)(nil)

// Apigatewayv2IntegrationResponse represents the Terraform resource aws_apigatewayv2_integration_response.
type Apigatewayv2IntegrationResponse struct {
	Name      string
	Args      Apigatewayv2IntegrationResponseArgs
	state     *apigatewayv2IntegrationResponseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) Type() string {
	return "aws_apigatewayv2_integration_response"
}

// LocalName returns the local name for [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) LocalName() string {
	return air.Name
}

// Configuration returns the configuration (args) for [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) Configuration() interface{} {
	return air.Args
}

// DependOn is used for other resources to depend on [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) DependOn() terra.Reference {
	return terra.ReferenceResource(air)
}

// Dependencies returns the list of resources [Apigatewayv2IntegrationResponse] depends_on.
func (air *Apigatewayv2IntegrationResponse) Dependencies() terra.Dependencies {
	return air.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) LifecycleManagement() *terra.Lifecycle {
	return air.Lifecycle
}

// Attributes returns the attributes for [Apigatewayv2IntegrationResponse].
func (air *Apigatewayv2IntegrationResponse) Attributes() apigatewayv2IntegrationResponseAttributes {
	return apigatewayv2IntegrationResponseAttributes{ref: terra.ReferenceResource(air)}
}

// ImportState imports the given attribute values into [Apigatewayv2IntegrationResponse]'s state.
func (air *Apigatewayv2IntegrationResponse) ImportState(av io.Reader) error {
	air.state = &apigatewayv2IntegrationResponseState{}
	if err := json.NewDecoder(av).Decode(air.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", air.Type(), air.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Apigatewayv2IntegrationResponse] has state.
func (air *Apigatewayv2IntegrationResponse) State() (*apigatewayv2IntegrationResponseState, bool) {
	return air.state, air.state != nil
}

// StateMust returns the state for [Apigatewayv2IntegrationResponse]. Panics if the state is nil.
func (air *Apigatewayv2IntegrationResponse) StateMust() *apigatewayv2IntegrationResponseState {
	if air.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", air.Type(), air.LocalName()))
	}
	return air.state
}

// Apigatewayv2IntegrationResponseArgs contains the configurations for aws_apigatewayv2_integration_response.
type Apigatewayv2IntegrationResponseArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ContentHandlingStrategy: string, optional
	ContentHandlingStrategy terra.StringValue `hcl:"content_handling_strategy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationId: string, required
	IntegrationId terra.StringValue `hcl:"integration_id,attr" validate:"required"`
	// IntegrationResponseKey: string, required
	IntegrationResponseKey terra.StringValue `hcl:"integration_response_key,attr" validate:"required"`
	// ResponseTemplates: map of string, optional
	ResponseTemplates terra.MapValue[terra.StringValue] `hcl:"response_templates,attr"`
	// TemplateSelectionExpression: string, optional
	TemplateSelectionExpression terra.StringValue `hcl:"template_selection_expression,attr"`
}
type apigatewayv2IntegrationResponseAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("api_id"))
}

// ContentHandlingStrategy returns a reference to field content_handling_strategy of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) ContentHandlingStrategy() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("content_handling_strategy"))
}

// Id returns a reference to field id of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("id"))
}

// IntegrationId returns a reference to field integration_id of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) IntegrationId() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("integration_id"))
}

// IntegrationResponseKey returns a reference to field integration_response_key of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) IntegrationResponseKey() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("integration_response_key"))
}

// ResponseTemplates returns a reference to field response_templates of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) ResponseTemplates() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](air.ref.Append("response_templates"))
}

// TemplateSelectionExpression returns a reference to field template_selection_expression of aws_apigatewayv2_integration_response.
func (air apigatewayv2IntegrationResponseAttributes) TemplateSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("template_selection_expression"))
}

type apigatewayv2IntegrationResponseState struct {
	ApiId                       string            `json:"api_id"`
	ContentHandlingStrategy     string            `json:"content_handling_strategy"`
	Id                          string            `json:"id"`
	IntegrationId               string            `json:"integration_id"`
	IntegrationResponseKey      string            `json:"integration_response_key"`
	ResponseTemplates           map[string]string `json:"response_templates"`
	TemplateSelectionExpression string            `json:"template_selection_expression"`
}
