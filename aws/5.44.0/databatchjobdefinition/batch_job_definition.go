// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package databatchjobdefinition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EksProperties struct {
	// PodProperties: min=0
	PodProperties []PodProperties `hcl:"pod_properties,block" validate:"min=0"`
}

type PodProperties struct {
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
	// Metadata: min=0
	Metadata []Metadata `hcl:"metadata,block" validate:"min=0"`
	// PodPropertiesVolumes: min=0
	Volumes []PodPropertiesVolumes `hcl:"volumes,block" validate:"min=0"`
}

type Containers struct {
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// Resources: min=0
	Resources []Resources `hcl:"resources,block" validate:"min=0"`
	// SecurityContext: min=0
	SecurityContext []SecurityContext `hcl:"security_context,block" validate:"min=0"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct{}

type Resources struct{}

type SecurityContext struct{}

type VolumeMounts struct{}

type Metadata struct{}

type PodPropertiesVolumes struct {
	// EmptyDir: min=0
	EmptyDir []EmptyDir `hcl:"empty_dir,block" validate:"min=0"`
	// HostPath: min=0
	HostPath []HostPath `hcl:"host_path,block" validate:"min=0"`
	// Secret: min=0
	Secret []Secret `hcl:"secret,block" validate:"min=0"`
}

type EmptyDir struct{}

type HostPath struct{}

type Secret struct{}

type NodeProperties struct {
	// NodeRangeProperties: min=0
	NodeRangeProperties []NodeRangeProperties `hcl:"node_range_properties,block" validate:"min=0"`
}

type NodeRangeProperties struct {
	// Container: min=0
	Container []Container `hcl:"container,block" validate:"min=0"`
}

type Container struct {
	// Environment: min=0
	Environment []Environment `hcl:"environment,block" validate:"min=0"`
	// EphemeralStorage: min=0
	EphemeralStorage []EphemeralStorage `hcl:"ephemeral_storage,block" validate:"min=0"`
	// FargatePlatformConfiguration: min=0
	FargatePlatformConfiguration []FargatePlatformConfiguration `hcl:"fargate_platform_configuration,block" validate:"min=0"`
	// LinuxParameters: min=0
	LinuxParameters []LinuxParameters `hcl:"linux_parameters,block" validate:"min=0"`
	// LogConfiguration: min=0
	LogConfiguration []LogConfiguration `hcl:"log_configuration,block" validate:"min=0"`
	// MountPoints: min=0
	MountPoints []MountPoints `hcl:"mount_points,block" validate:"min=0"`
	// NetworkConfiguration: min=0
	NetworkConfiguration []NetworkConfiguration `hcl:"network_configuration,block" validate:"min=0"`
	// ResourceRequirements: min=0
	ResourceRequirements []ResourceRequirements `hcl:"resource_requirements,block" validate:"min=0"`
	// RuntimePlatform: min=0
	RuntimePlatform []RuntimePlatform `hcl:"runtime_platform,block" validate:"min=0"`
	// Secrets: min=0
	Secrets []Secrets `hcl:"secrets,block" validate:"min=0"`
	// Ulimits: min=0
	Ulimits []Ulimits `hcl:"ulimits,block" validate:"min=0"`
	// ContainerVolumes: min=0
	Volumes []ContainerVolumes `hcl:"volumes,block" validate:"min=0"`
}

type Environment struct{}

type EphemeralStorage struct{}

type FargatePlatformConfiguration struct{}

type LinuxParameters struct {
	// Devices: min=0
	Devices []Devices `hcl:"devices,block" validate:"min=0"`
	// Tmpfs: min=0
	Tmpfs []Tmpfs `hcl:"tmpfs,block" validate:"min=0"`
}

type Devices struct{}

type Tmpfs struct{}

type LogConfiguration struct {
	// SecretOptions: min=0
	SecretOptions []SecretOptions `hcl:"secret_options,block" validate:"min=0"`
}

type SecretOptions struct{}

type MountPoints struct{}

type NetworkConfiguration struct{}

type ResourceRequirements struct{}

type RuntimePlatform struct{}

type Secrets struct{}

type Ulimits struct{}

type ContainerVolumes struct {
	// EfsVolumeConfiguration: min=0
	EfsVolumeConfiguration []EfsVolumeConfiguration `hcl:"efs_volume_configuration,block" validate:"min=0"`
	// Host: min=0
	Host []Host `hcl:"host,block" validate:"min=0"`
}

type EfsVolumeConfiguration struct {
	// AuthorizationConfig: min=0
	AuthorizationConfig []AuthorizationConfig `hcl:"authorization_config,block" validate:"min=0"`
}

type AuthorizationConfig struct{}

type Host struct{}

type RetryStrategy struct {
	// EvaluateOnExit: min=0
	EvaluateOnExit []EvaluateOnExit `hcl:"evaluate_on_exit,block" validate:"min=0"`
}

type EvaluateOnExit struct{}

type Timeout struct{}

type EksPropertiesAttributes struct {
	ref terra.Reference
}

func (ep EksPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EksPropertiesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesAttributes {
	return EksPropertiesAttributes{ref: ref}
}

func (ep EksPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EksPropertiesAttributes) PodProperties() terra.ListValue[PodPropertiesAttributes] {
	return terra.ReferenceAsList[PodPropertiesAttributes](ep.ref.Append("pod_properties"))
}

type PodPropertiesAttributes struct {
	ref terra.Reference
}

func (pp PodPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PodPropertiesAttributes) InternalWithRef(ref terra.Reference) PodPropertiesAttributes {
	return PodPropertiesAttributes{ref: ref}
}

func (pp PodPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PodPropertiesAttributes) DnsPolicy() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("dns_policy"))
}

func (pp PodPropertiesAttributes) HostNetwork() terra.BoolValue {
	return terra.ReferenceAsBool(pp.ref.Append("host_network"))
}

func (pp PodPropertiesAttributes) ServiceAccountName() terra.BoolValue {
	return terra.ReferenceAsBool(pp.ref.Append("service_account_name"))
}

func (pp PodPropertiesAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceAsList[ContainersAttributes](pp.ref.Append("containers"))
}

func (pp PodPropertiesAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](pp.ref.Append("metadata"))
}

func (pp PodPropertiesAttributes) Volumes() terra.ListValue[PodPropertiesVolumesAttributes] {
	return terra.ReferenceAsList[PodPropertiesVolumesAttributes](pp.ref.Append("volumes"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainersAttributes) ImagePullPolicy() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_pull_policy"))
}

func (c ContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContainersAttributes) Env() terra.ListValue[EnvAttributes] {
	return terra.ReferenceAsList[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) SecurityContext() terra.ListValue[SecurityContextAttributes] {
	return terra.ReferenceAsList[SecurityContextAttributes](c.ref.Append("security_context"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceAsList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r ResourcesAttributes) Requests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("requests"))
}

type SecurityContextAttributes struct {
	ref terra.Reference
}

func (sc SecurityContextAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityContextAttributes) InternalWithRef(ref terra.Reference) SecurityContextAttributes {
	return SecurityContextAttributes{ref: ref}
}

func (sc SecurityContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityContextAttributes) Privileged() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("privileged"))
}

func (sc SecurityContextAttributes) ReadOnlyRootFileSystem() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("read_only_root_file_system"))
}

func (sc SecurityContextAttributes) RunAsGroup() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_group"))
}

func (sc SecurityContextAttributes) RunAsNonRoot() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("run_as_non_root"))
}

func (sc SecurityContextAttributes) RunAsUser() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_user"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

func (vm VolumeMountsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("read_only"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

type PodPropertiesVolumesAttributes struct {
	ref terra.Reference
}

func (v PodPropertiesVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v PodPropertiesVolumesAttributes) InternalWithRef(ref terra.Reference) PodPropertiesVolumesAttributes {
	return PodPropertiesVolumesAttributes{ref: ref}
}

func (v PodPropertiesVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v PodPropertiesVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v PodPropertiesVolumesAttributes) EmptyDir() terra.ListValue[EmptyDirAttributes] {
	return terra.ReferenceAsList[EmptyDirAttributes](v.ref.Append("empty_dir"))
}

func (v PodPropertiesVolumesAttributes) HostPath() terra.ListValue[HostPathAttributes] {
	return terra.ReferenceAsList[HostPathAttributes](v.ref.Append("host_path"))
}

func (v PodPropertiesVolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](v.ref.Append("secret"))
}

type EmptyDirAttributes struct {
	ref terra.Reference
}

func (ed EmptyDirAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EmptyDirAttributes) InternalWithRef(ref terra.Reference) EmptyDirAttributes {
	return EmptyDirAttributes{ref: ref}
}

func (ed EmptyDirAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EmptyDirAttributes) Medium() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("medium"))
}

func (ed EmptyDirAttributes) SizeLimit() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("size_limit"))
}

type HostPathAttributes struct {
	ref terra.Reference
}

func (hp HostPathAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp HostPathAttributes) InternalWithRef(ref terra.Reference) HostPathAttributes {
	return HostPathAttributes{ref: ref}
}

func (hp HostPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp HostPathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hp.ref.Append("path"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("optional"))
}

func (s SecretAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type NodePropertiesAttributes struct {
	ref terra.Reference
}

func (np NodePropertiesAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NodePropertiesAttributes) InternalWithRef(ref terra.Reference) NodePropertiesAttributes {
	return NodePropertiesAttributes{ref: ref}
}

func (np NodePropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NodePropertiesAttributes) MainNode() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("main_node"))
}

func (np NodePropertiesAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("num_nodes"))
}

func (np NodePropertiesAttributes) NodeRangeProperties() terra.ListValue[NodeRangePropertiesAttributes] {
	return terra.ReferenceAsList[NodeRangePropertiesAttributes](np.ref.Append("node_range_properties"))
}

type NodeRangePropertiesAttributes struct {
	ref terra.Reference
}

func (nrp NodeRangePropertiesAttributes) InternalRef() (terra.Reference, error) {
	return nrp.ref, nil
}

func (nrp NodeRangePropertiesAttributes) InternalWithRef(ref terra.Reference) NodeRangePropertiesAttributes {
	return NodeRangePropertiesAttributes{ref: ref}
}

func (nrp NodeRangePropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nrp.ref.InternalTokens()
}

func (nrp NodeRangePropertiesAttributes) TargetNodes() terra.StringValue {
	return terra.ReferenceAsString(nrp.ref.Append("target_nodes"))
}

func (nrp NodeRangePropertiesAttributes) Container() terra.ListValue[ContainerAttributes] {
	return terra.ReferenceAsList[ContainerAttributes](nrp.ref.Append("container"))
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainerAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("execution_role_arn"))
}

func (c ContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainerAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("instance_type"))
}

func (c ContainerAttributes) JobRoleArn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("job_role_arn"))
}

func (c ContainerAttributes) Privileged() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("privileged"))
}

func (c ContainerAttributes) ReadonlyRootFilesystem() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("readonly_root_filesystem"))
}

func (c ContainerAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("user"))
}

func (c ContainerAttributes) Environment() terra.ListValue[EnvironmentAttributes] {
	return terra.ReferenceAsList[EnvironmentAttributes](c.ref.Append("environment"))
}

func (c ContainerAttributes) EphemeralStorage() terra.ListValue[EphemeralStorageAttributes] {
	return terra.ReferenceAsList[EphemeralStorageAttributes](c.ref.Append("ephemeral_storage"))
}

func (c ContainerAttributes) FargatePlatformConfiguration() terra.ListValue[FargatePlatformConfigurationAttributes] {
	return terra.ReferenceAsList[FargatePlatformConfigurationAttributes](c.ref.Append("fargate_platform_configuration"))
}

func (c ContainerAttributes) LinuxParameters() terra.ListValue[LinuxParametersAttributes] {
	return terra.ReferenceAsList[LinuxParametersAttributes](c.ref.Append("linux_parameters"))
}

func (c ContainerAttributes) LogConfiguration() terra.ListValue[LogConfigurationAttributes] {
	return terra.ReferenceAsList[LogConfigurationAttributes](c.ref.Append("log_configuration"))
}

func (c ContainerAttributes) MountPoints() terra.ListValue[MountPointsAttributes] {
	return terra.ReferenceAsList[MountPointsAttributes](c.ref.Append("mount_points"))
}

func (c ContainerAttributes) NetworkConfiguration() terra.ListValue[NetworkConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationAttributes](c.ref.Append("network_configuration"))
}

func (c ContainerAttributes) ResourceRequirements() terra.ListValue[ResourceRequirementsAttributes] {
	return terra.ReferenceAsList[ResourceRequirementsAttributes](c.ref.Append("resource_requirements"))
}

func (c ContainerAttributes) RuntimePlatform() terra.ListValue[RuntimePlatformAttributes] {
	return terra.ReferenceAsList[RuntimePlatformAttributes](c.ref.Append("runtime_platform"))
}

func (c ContainerAttributes) Secrets() terra.ListValue[SecretsAttributes] {
	return terra.ReferenceAsList[SecretsAttributes](c.ref.Append("secrets"))
}

func (c ContainerAttributes) Ulimits() terra.ListValue[UlimitsAttributes] {
	return terra.ReferenceAsList[UlimitsAttributes](c.ref.Append("ulimits"))
}

func (c ContainerAttributes) Volumes() terra.ListValue[ContainerVolumesAttributes] {
	return terra.ReferenceAsList[ContainerVolumesAttributes](c.ref.Append("volumes"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type EphemeralStorageAttributes struct {
	ref terra.Reference
}

func (es EphemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EphemeralStorageAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageAttributes {
	return EphemeralStorageAttributes{ref: ref}
}

func (es EphemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EphemeralStorageAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size_in_gib"))
}

type FargatePlatformConfigurationAttributes struct {
	ref terra.Reference
}

func (fpc FargatePlatformConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fpc.ref, nil
}

func (fpc FargatePlatformConfigurationAttributes) InternalWithRef(ref terra.Reference) FargatePlatformConfigurationAttributes {
	return FargatePlatformConfigurationAttributes{ref: ref}
}

func (fpc FargatePlatformConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fpc.ref.InternalTokens()
}

func (fpc FargatePlatformConfigurationAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(fpc.ref.Append("platform_version"))
}

type LinuxParametersAttributes struct {
	ref terra.Reference
}

func (lp LinuxParametersAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LinuxParametersAttributes) InternalWithRef(ref terra.Reference) LinuxParametersAttributes {
	return LinuxParametersAttributes{ref: ref}
}

func (lp LinuxParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LinuxParametersAttributes) InitProcessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lp.ref.Append("init_process_enabled"))
}

func (lp LinuxParametersAttributes) MaxSwap() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("max_swap"))
}

func (lp LinuxParametersAttributes) SharedMemorySize() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("shared_memory_size"))
}

func (lp LinuxParametersAttributes) Swappiness() terra.NumberValue {
	return terra.ReferenceAsNumber(lp.ref.Append("swappiness"))
}

func (lp LinuxParametersAttributes) Devices() terra.ListValue[DevicesAttributes] {
	return terra.ReferenceAsList[DevicesAttributes](lp.ref.Append("devices"))
}

func (lp LinuxParametersAttributes) Tmpfs() terra.ListValue[TmpfsAttributes] {
	return terra.ReferenceAsList[TmpfsAttributes](lp.ref.Append("tmpfs"))
}

type DevicesAttributes struct {
	ref terra.Reference
}

func (d DevicesAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DevicesAttributes) InternalWithRef(ref terra.Reference) DevicesAttributes {
	return DevicesAttributes{ref: ref}
}

func (d DevicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DevicesAttributes) ContainerPath() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("container_path"))
}

func (d DevicesAttributes) HostPath() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("host_path"))
}

func (d DevicesAttributes) Permissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("permissions"))
}

type TmpfsAttributes struct {
	ref terra.Reference
}

func (t TmpfsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TmpfsAttributes) InternalWithRef(ref terra.Reference) TmpfsAttributes {
	return TmpfsAttributes{ref: ref}
}

func (t TmpfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TmpfsAttributes) ContainerPath() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("container_path"))
}

func (t TmpfsAttributes) MountOptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("mount_options"))
}

func (t TmpfsAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("size"))
}

type LogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationAttributes {
	return LogConfigurationAttributes{ref: ref}
}

func (lc LogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigurationAttributes) LogDriver() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_driver"))
}

func (lc LogConfigurationAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("options"))
}

func (lc LogConfigurationAttributes) SecretOptions() terra.ListValue[SecretOptionsAttributes] {
	return terra.ReferenceAsList[SecretOptionsAttributes](lc.ref.Append("secret_options"))
}

type SecretOptionsAttributes struct {
	ref terra.Reference
}

func (so SecretOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so SecretOptionsAttributes) InternalWithRef(ref terra.Reference) SecretOptionsAttributes {
	return SecretOptionsAttributes{ref: ref}
}

func (so SecretOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so SecretOptionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("name"))
}

func (so SecretOptionsAttributes) ValueFrom() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("value_from"))
}

type MountPointsAttributes struct {
	ref terra.Reference
}

func (mp MountPointsAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MountPointsAttributes) InternalWithRef(ref terra.Reference) MountPointsAttributes {
	return MountPointsAttributes{ref: ref}
}

func (mp MountPointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MountPointsAttributes) ContainerPath() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("container_path"))
}

func (mp MountPointsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(mp.ref.Append("read_only"))
}

func (mp MountPointsAttributes) SourceVolume() terra.StringValue {
	return terra.ReferenceAsString(mp.ref.Append("source_volume"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

type ResourceRequirementsAttributes struct {
	ref terra.Reference
}

func (rr ResourceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ResourceRequirementsAttributes) InternalWithRef(ref terra.Reference) ResourceRequirementsAttributes {
	return ResourceRequirementsAttributes{ref: ref}
}

func (rr ResourceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ResourceRequirementsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr ResourceRequirementsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type RuntimePlatformAttributes struct {
	ref terra.Reference
}

func (rp RuntimePlatformAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RuntimePlatformAttributes) InternalWithRef(ref terra.Reference) RuntimePlatformAttributes {
	return RuntimePlatformAttributes{ref: ref}
}

func (rp RuntimePlatformAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RuntimePlatformAttributes) CpuArchitecture() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("cpu_architecture"))
}

func (rp RuntimePlatformAttributes) OperatingSystemFamily() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("operating_system_family"))
}

type SecretsAttributes struct {
	ref terra.Reference
}

func (s SecretsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretsAttributes) InternalWithRef(ref terra.Reference) SecretsAttributes {
	return SecretsAttributes{ref: ref}
}

func (s SecretsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SecretsAttributes) ValueFrom() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value_from"))
}

type UlimitsAttributes struct {
	ref terra.Reference
}

func (u UlimitsAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UlimitsAttributes) InternalWithRef(ref terra.Reference) UlimitsAttributes {
	return UlimitsAttributes{ref: ref}
}

func (u UlimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UlimitsAttributes) HardLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(u.ref.Append("hard_limit"))
}

func (u UlimitsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("name"))
}

func (u UlimitsAttributes) SoftLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(u.ref.Append("soft_limit"))
}

type ContainerVolumesAttributes struct {
	ref terra.Reference
}

func (v ContainerVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ContainerVolumesAttributes) InternalWithRef(ref terra.Reference) ContainerVolumesAttributes {
	return ContainerVolumesAttributes{ref: ref}
}

func (v ContainerVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ContainerVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v ContainerVolumesAttributes) EfsVolumeConfiguration() terra.ListValue[EfsVolumeConfigurationAttributes] {
	return terra.ReferenceAsList[EfsVolumeConfigurationAttributes](v.ref.Append("efs_volume_configuration"))
}

func (v ContainerVolumesAttributes) Host() terra.ListValue[HostAttributes] {
	return terra.ReferenceAsList[HostAttributes](v.ref.Append("host"))
}

type EfsVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (evc EfsVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return evc.ref, nil
}

func (evc EfsVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) EfsVolumeConfigurationAttributes {
	return EfsVolumeConfigurationAttributes{ref: ref}
}

func (evc EfsVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return evc.ref.InternalTokens()
}

func (evc EfsVolumeConfigurationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("file_system_id"))
}

func (evc EfsVolumeConfigurationAttributes) RootDirectory() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("root_directory"))
}

func (evc EfsVolumeConfigurationAttributes) TransitEncryption() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("transit_encryption"))
}

func (evc EfsVolumeConfigurationAttributes) TransitEncryptionPort() terra.NumberValue {
	return terra.ReferenceAsNumber(evc.ref.Append("transit_encryption_port"))
}

func (evc EfsVolumeConfigurationAttributes) AuthorizationConfig() terra.ListValue[AuthorizationConfigAttributes] {
	return terra.ReferenceAsList[AuthorizationConfigAttributes](evc.ref.Append("authorization_config"))
}

type AuthorizationConfigAttributes struct {
	ref terra.Reference
}

func (ac AuthorizationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuthorizationConfigAttributes) InternalWithRef(ref terra.Reference) AuthorizationConfigAttributes {
	return AuthorizationConfigAttributes{ref: ref}
}

func (ac AuthorizationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuthorizationConfigAttributes) AccessPointId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("access_point_id"))
}

func (ac AuthorizationConfigAttributes) Iam() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("iam"))
}

type HostAttributes struct {
	ref terra.Reference
}

func (h HostAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HostAttributes) InternalWithRef(ref terra.Reference) HostAttributes {
	return HostAttributes{ref: ref}
}

func (h HostAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HostAttributes) SourcePath() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("source_path"))
}

type RetryStrategyAttributes struct {
	ref terra.Reference
}

func (rs RetryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RetryStrategyAttributes) InternalWithRef(ref terra.Reference) RetryStrategyAttributes {
	return RetryStrategyAttributes{ref: ref}
}

func (rs RetryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RetryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

func (rs RetryStrategyAttributes) EvaluateOnExit() terra.ListValue[EvaluateOnExitAttributes] {
	return terra.ReferenceAsList[EvaluateOnExitAttributes](rs.ref.Append("evaluate_on_exit"))
}

type EvaluateOnExitAttributes struct {
	ref terra.Reference
}

func (eoe EvaluateOnExitAttributes) InternalRef() (terra.Reference, error) {
	return eoe.ref, nil
}

func (eoe EvaluateOnExitAttributes) InternalWithRef(ref terra.Reference) EvaluateOnExitAttributes {
	return EvaluateOnExitAttributes{ref: ref}
}

func (eoe EvaluateOnExitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eoe.ref.InternalTokens()
}

func (eoe EvaluateOnExitAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("action"))
}

func (eoe EvaluateOnExitAttributes) OnExitCode() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_exit_code"))
}

func (eoe EvaluateOnExitAttributes) OnReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_reason"))
}

func (eoe EvaluateOnExitAttributes) OnStatusReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_status_reason"))
}

type TimeoutAttributes struct {
	ref terra.Reference
}

func (t TimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutAttributes) InternalWithRef(ref terra.Reference) TimeoutAttributes {
	return TimeoutAttributes{ref: ref}
}

func (t TimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutAttributes) AttemptDurationSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("attempt_duration_seconds"))
}

type EksPropertiesState struct {
	PodProperties []PodPropertiesState `json:"pod_properties"`
}

type PodPropertiesState struct {
	DnsPolicy          string                      `json:"dns_policy"`
	HostNetwork        bool                        `json:"host_network"`
	ServiceAccountName bool                        `json:"service_account_name"`
	Containers         []ContainersState           `json:"containers"`
	Metadata           []MetadataState             `json:"metadata"`
	Volumes            []PodPropertiesVolumesState `json:"volumes"`
}

type ContainersState struct {
	Args            []string               `json:"args"`
	Command         []string               `json:"command"`
	Image           string                 `json:"image"`
	ImagePullPolicy string                 `json:"image_pull_policy"`
	Name            string                 `json:"name"`
	Env             []EnvState             `json:"env"`
	Resources       []ResourcesState       `json:"resources"`
	SecurityContext []SecurityContextState `json:"security_context"`
	VolumeMounts    []VolumeMountsState    `json:"volume_mounts"`
}

type EnvState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ResourcesState struct {
	Limits   map[string]string `json:"limits"`
	Requests map[string]string `json:"requests"`
}

type SecurityContextState struct {
	Privileged             bool    `json:"privileged"`
	ReadOnlyRootFileSystem bool    `json:"read_only_root_file_system"`
	RunAsGroup             float64 `json:"run_as_group"`
	RunAsNonRoot           bool    `json:"run_as_non_root"`
	RunAsUser              float64 `json:"run_as_user"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
	ReadOnly  bool   `json:"read_only"`
}

type MetadataState struct {
	Labels map[string]string `json:"labels"`
}

type PodPropertiesVolumesState struct {
	Name     string          `json:"name"`
	EmptyDir []EmptyDirState `json:"empty_dir"`
	HostPath []HostPathState `json:"host_path"`
	Secret   []SecretState   `json:"secret"`
}

type EmptyDirState struct {
	Medium    string `json:"medium"`
	SizeLimit string `json:"size_limit"`
}

type HostPathState struct {
	Path string `json:"path"`
}

type SecretState struct {
	Optional   bool   `json:"optional"`
	SecretName string `json:"secret_name"`
}

type NodePropertiesState struct {
	MainNode            float64                    `json:"main_node"`
	NumNodes            float64                    `json:"num_nodes"`
	NodeRangeProperties []NodeRangePropertiesState `json:"node_range_properties"`
}

type NodeRangePropertiesState struct {
	TargetNodes string           `json:"target_nodes"`
	Container   []ContainerState `json:"container"`
}

type ContainerState struct {
	Command                      []string                            `json:"command"`
	ExecutionRoleArn             string                              `json:"execution_role_arn"`
	Image                        string                              `json:"image"`
	InstanceType                 string                              `json:"instance_type"`
	JobRoleArn                   string                              `json:"job_role_arn"`
	Privileged                   bool                                `json:"privileged"`
	ReadonlyRootFilesystem       bool                                `json:"readonly_root_filesystem"`
	User                         string                              `json:"user"`
	Environment                  []EnvironmentState                  `json:"environment"`
	EphemeralStorage             []EphemeralStorageState             `json:"ephemeral_storage"`
	FargatePlatformConfiguration []FargatePlatformConfigurationState `json:"fargate_platform_configuration"`
	LinuxParameters              []LinuxParametersState              `json:"linux_parameters"`
	LogConfiguration             []LogConfigurationState             `json:"log_configuration"`
	MountPoints                  []MountPointsState                  `json:"mount_points"`
	NetworkConfiguration         []NetworkConfigurationState         `json:"network_configuration"`
	ResourceRequirements         []ResourceRequirementsState         `json:"resource_requirements"`
	RuntimePlatform              []RuntimePlatformState              `json:"runtime_platform"`
	Secrets                      []SecretsState                      `json:"secrets"`
	Ulimits                      []UlimitsState                      `json:"ulimits"`
	Volumes                      []ContainerVolumesState             `json:"volumes"`
}

type EnvironmentState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type EphemeralStorageState struct {
	SizeInGib float64 `json:"size_in_gib"`
}

type FargatePlatformConfigurationState struct {
	PlatformVersion string `json:"platform_version"`
}

type LinuxParametersState struct {
	InitProcessEnabled bool           `json:"init_process_enabled"`
	MaxSwap            float64        `json:"max_swap"`
	SharedMemorySize   float64        `json:"shared_memory_size"`
	Swappiness         float64        `json:"swappiness"`
	Devices            []DevicesState `json:"devices"`
	Tmpfs              []TmpfsState   `json:"tmpfs"`
}

type DevicesState struct {
	ContainerPath string   `json:"container_path"`
	HostPath      string   `json:"host_path"`
	Permissions   []string `json:"permissions"`
}

type TmpfsState struct {
	ContainerPath string   `json:"container_path"`
	MountOptions  []string `json:"mount_options"`
	Size          float64  `json:"size"`
}

type LogConfigurationState struct {
	LogDriver     string               `json:"log_driver"`
	Options       map[string]string    `json:"options"`
	SecretOptions []SecretOptionsState `json:"secret_options"`
}

type SecretOptionsState struct {
	Name      string `json:"name"`
	ValueFrom string `json:"value_from"`
}

type MountPointsState struct {
	ContainerPath string `json:"container_path"`
	ReadOnly      bool   `json:"read_only"`
	SourceVolume  string `json:"source_volume"`
}

type NetworkConfigurationState struct {
	AssignPublicIp bool `json:"assign_public_ip"`
}

type ResourceRequirementsState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type RuntimePlatformState struct {
	CpuArchitecture       string `json:"cpu_architecture"`
	OperatingSystemFamily string `json:"operating_system_family"`
}

type SecretsState struct {
	Name      string `json:"name"`
	ValueFrom string `json:"value_from"`
}

type UlimitsState struct {
	HardLimit float64 `json:"hard_limit"`
	Name      string  `json:"name"`
	SoftLimit float64 `json:"soft_limit"`
}

type ContainerVolumesState struct {
	Name                   string                        `json:"name"`
	EfsVolumeConfiguration []EfsVolumeConfigurationState `json:"efs_volume_configuration"`
	Host                   []HostState                   `json:"host"`
}

type EfsVolumeConfigurationState struct {
	FileSystemId          string                     `json:"file_system_id"`
	RootDirectory         string                     `json:"root_directory"`
	TransitEncryption     string                     `json:"transit_encryption"`
	TransitEncryptionPort float64                    `json:"transit_encryption_port"`
	AuthorizationConfig   []AuthorizationConfigState `json:"authorization_config"`
}

type AuthorizationConfigState struct {
	AccessPointId string `json:"access_point_id"`
	Iam           string `json:"iam"`
}

type HostState struct {
	SourcePath string `json:"source_path"`
}

type RetryStrategyState struct {
	Attempts       float64               `json:"attempts"`
	EvaluateOnExit []EvaluateOnExitState `json:"evaluate_on_exit"`
}

type EvaluateOnExitState struct {
	Action         string `json:"action"`
	OnExitCode     string `json:"on_exit_code"`
	OnReason       string `json:"on_reason"`
	OnStatusReason string `json:"on_status_reason"`
}

type TimeoutState struct {
	AttemptDurationSeconds float64 `json:"attempt_duration_seconds"`
}
