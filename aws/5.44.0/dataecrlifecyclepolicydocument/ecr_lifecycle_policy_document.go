// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataecrlifecyclepolicydocument

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Action: min=0
	Action []Action `hcl:"action,block" validate:"min=0"`
	// Selection: min=0
	Selection []Selection `hcl:"selection,block" validate:"min=0"`
}

type Action struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Selection struct {
	// CountNumber: number, required
	CountNumber terra.NumberValue `hcl:"count_number,attr" validate:"required"`
	// CountType: string, required
	CountType terra.StringValue `hcl:"count_type,attr" validate:"required"`
	// CountUnit: string, optional
	CountUnit terra.StringValue `hcl:"count_unit,attr"`
	// TagPatternList: list of string, optional
	TagPatternList terra.ListValue[terra.StringValue] `hcl:"tag_pattern_list,attr"`
	// TagPrefixList: list of string, optional
	TagPrefixList terra.ListValue[terra.StringValue] `hcl:"tag_prefix_list,attr"`
	// TagStatus: string, required
	TagStatus terra.StringValue `hcl:"tag_status,attr" validate:"required"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r RuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r RuleAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](r.ref.Append("action"))
}

func (r RuleAttributes) Selection() terra.ListValue[SelectionAttributes] {
	return terra.ReferenceAsList[SelectionAttributes](r.ref.Append("selection"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type SelectionAttributes struct {
	ref terra.Reference
}

func (s SelectionAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SelectionAttributes) InternalWithRef(ref terra.Reference) SelectionAttributes {
	return SelectionAttributes{ref: ref}
}

func (s SelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SelectionAttributes) CountNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("count_number"))
}

func (s SelectionAttributes) CountType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("count_type"))
}

func (s SelectionAttributes) CountUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("count_unit"))
}

func (s SelectionAttributes) TagPatternList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("tag_pattern_list"))
}

func (s SelectionAttributes) TagPrefixList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("tag_prefix_list"))
}

func (s SelectionAttributes) TagStatus() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_status"))
}

type RuleState struct {
	Description string           `json:"description"`
	Priority    float64          `json:"priority"`
	Action      []ActionState    `json:"action"`
	Selection   []SelectionState `json:"selection"`
}

type ActionState struct {
	Type string `json:"type"`
}

type SelectionState struct {
	CountNumber    float64  `json:"count_number"`
	CountType      string   `json:"count_type"`
	CountUnit      string   `json:"count_unit"`
	TagPatternList []string `json:"tag_pattern_list"`
	TagPrefixList  []string `json:"tag_prefix_list"`
	TagStatus      string   `json:"tag_status"`
}
