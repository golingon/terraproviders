// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package lakeformationdatacellsfilter

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TableData struct {
	// ColumnNames: set of string, optional
	ColumnNames terra.SetValue[terra.StringValue] `hcl:"column_names,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TableCatalogId: string, required
	TableCatalogId terra.StringValue `hcl:"table_catalog_id,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// VersionId: string, optional
	VersionId terra.StringValue `hcl:"version_id,attr"`
	// ColumnWildcard: min=0
	ColumnWildcard []ColumnWildcard `hcl:"column_wildcard,block" validate:"min=0"`
	// RowFilter: min=0
	RowFilter []RowFilter `hcl:"row_filter,block" validate:"min=0"`
}

type ColumnWildcard struct {
	// ExcludedColumnNames: list of string, optional
	ExcludedColumnNames terra.ListValue[terra.StringValue] `hcl:"excluded_column_names,attr"`
}

type RowFilter struct {
	// FilterExpression: string, optional
	FilterExpression terra.StringValue `hcl:"filter_expression,attr"`
	// AllRowsWildcard: min=0
	AllRowsWildcard []AllRowsWildcard `hcl:"all_rows_wildcard,block" validate:"min=0"`
}

type AllRowsWildcard struct{}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
}

type TableDataAttributes struct {
	ref terra.Reference
}

func (td TableDataAttributes) InternalRef() (terra.Reference, error) {
	return td.ref, nil
}

func (td TableDataAttributes) InternalWithRef(ref terra.Reference) TableDataAttributes {
	return TableDataAttributes{ref: ref}
}

func (td TableDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return td.ref.InternalTokens()
}

func (td TableDataAttributes) ColumnNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](td.ref.Append("column_names"))
}

func (td TableDataAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("database_name"))
}

func (td TableDataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("name"))
}

func (td TableDataAttributes) TableCatalogId() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("table_catalog_id"))
}

func (td TableDataAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("table_name"))
}

func (td TableDataAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("version_id"))
}

func (td TableDataAttributes) ColumnWildcard() terra.ListValue[ColumnWildcardAttributes] {
	return terra.ReferenceAsList[ColumnWildcardAttributes](td.ref.Append("column_wildcard"))
}

func (td TableDataAttributes) RowFilter() terra.ListValue[RowFilterAttributes] {
	return terra.ReferenceAsList[RowFilterAttributes](td.ref.Append("row_filter"))
}

type ColumnWildcardAttributes struct {
	ref terra.Reference
}

func (cw ColumnWildcardAttributes) InternalRef() (terra.Reference, error) {
	return cw.ref, nil
}

func (cw ColumnWildcardAttributes) InternalWithRef(ref terra.Reference) ColumnWildcardAttributes {
	return ColumnWildcardAttributes{ref: ref}
}

func (cw ColumnWildcardAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cw.ref.InternalTokens()
}

func (cw ColumnWildcardAttributes) ExcludedColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cw.ref.Append("excluded_column_names"))
}

type RowFilterAttributes struct {
	ref terra.Reference
}

func (rf RowFilterAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RowFilterAttributes) InternalWithRef(ref terra.Reference) RowFilterAttributes {
	return RowFilterAttributes{ref: ref}
}

func (rf RowFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RowFilterAttributes) FilterExpression() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter_expression"))
}

func (rf RowFilterAttributes) AllRowsWildcard() terra.ListValue[AllRowsWildcardAttributes] {
	return terra.ReferenceAsList[AllRowsWildcardAttributes](rf.ref.Append("all_rows_wildcard"))
}

type AllRowsWildcardAttributes struct {
	ref terra.Reference
}

func (arw AllRowsWildcardAttributes) InternalRef() (terra.Reference, error) {
	return arw.ref, nil
}

func (arw AllRowsWildcardAttributes) InternalWithRef(ref terra.Reference) AllRowsWildcardAttributes {
	return AllRowsWildcardAttributes{ref: ref}
}

func (arw AllRowsWildcardAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arw.ref.InternalTokens()
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type TableDataState struct {
	ColumnNames    []string              `json:"column_names"`
	DatabaseName   string                `json:"database_name"`
	Name           string                `json:"name"`
	TableCatalogId string                `json:"table_catalog_id"`
	TableName      string                `json:"table_name"`
	VersionId      string                `json:"version_id"`
	ColumnWildcard []ColumnWildcardState `json:"column_wildcard"`
	RowFilter      []RowFilterState      `json:"row_filter"`
}

type ColumnWildcardState struct {
	ExcludedColumnNames []string `json:"excluded_column_names"`
}

type RowFilterState struct {
	FilterExpression string                 `json:"filter_expression"`
	AllRowsWildcard  []AllRowsWildcardState `json:"all_rows_wildcard"`
}

type AllRowsWildcardState struct{}

type TimeoutsState struct {
	Create string `json:"create"`
}
