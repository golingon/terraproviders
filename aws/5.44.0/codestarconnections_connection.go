// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewCodestarconnectionsConnection creates a new instance of [CodestarconnectionsConnection].
func NewCodestarconnectionsConnection(name string, args CodestarconnectionsConnectionArgs) *CodestarconnectionsConnection {
	return &CodestarconnectionsConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodestarconnectionsConnection)(nil)

// CodestarconnectionsConnection represents the Terraform resource aws_codestarconnections_connection.
type CodestarconnectionsConnection struct {
	Name      string
	Args      CodestarconnectionsConnectionArgs
	state     *codestarconnectionsConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) Type() string {
	return "aws_codestarconnections_connection"
}

// LocalName returns the local name for [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) LocalName() string {
	return cc.Name
}

// Configuration returns the configuration (args) for [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) Configuration() interface{} {
	return cc.Args
}

// DependOn is used for other resources to depend on [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(cc)
}

// Dependencies returns the list of resources [CodestarconnectionsConnection] depends_on.
func (cc *CodestarconnectionsConnection) Dependencies() terra.Dependencies {
	return cc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) LifecycleManagement() *terra.Lifecycle {
	return cc.Lifecycle
}

// Attributes returns the attributes for [CodestarconnectionsConnection].
func (cc *CodestarconnectionsConnection) Attributes() codestarconnectionsConnectionAttributes {
	return codestarconnectionsConnectionAttributes{ref: terra.ReferenceResource(cc)}
}

// ImportState imports the given attribute values into [CodestarconnectionsConnection]'s state.
func (cc *CodestarconnectionsConnection) ImportState(av io.Reader) error {
	cc.state = &codestarconnectionsConnectionState{}
	if err := json.NewDecoder(av).Decode(cc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cc.Type(), cc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CodestarconnectionsConnection] has state.
func (cc *CodestarconnectionsConnection) State() (*codestarconnectionsConnectionState, bool) {
	return cc.state, cc.state != nil
}

// StateMust returns the state for [CodestarconnectionsConnection]. Panics if the state is nil.
func (cc *CodestarconnectionsConnection) StateMust() *codestarconnectionsConnectionState {
	if cc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cc.Type(), cc.LocalName()))
	}
	return cc.state
}

// CodestarconnectionsConnectionArgs contains the configurations for aws_codestarconnections_connection.
type CodestarconnectionsConnectionArgs struct {
	// HostArn: string, optional
	HostArn terra.StringValue `hcl:"host_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderType: string, optional
	ProviderType terra.StringValue `hcl:"provider_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type codestarconnectionsConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("arn"))
}

// ConnectionStatus returns a reference to field connection_status of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) ConnectionStatus() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("connection_status"))
}

// HostArn returns a reference to field host_arn of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) HostArn() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("host_arn"))
}

// Id returns a reference to field id of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("id"))
}

// Name returns a reference to field name of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("name"))
}

// ProviderType returns a reference to field provider_type of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("provider_type"))
}

// Tags returns a reference to field tags of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codestarconnections_connection.
func (cc codestarconnectionsConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cc.ref.Append("tags_all"))
}

type codestarconnectionsConnectionState struct {
	Arn              string            `json:"arn"`
	ConnectionStatus string            `json:"connection_status"`
	HostArn          string            `json:"host_arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	ProviderType     string            `json:"provider_type"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
