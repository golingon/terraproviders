// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securityhubconfigurationpolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConfigurationPolicy struct {
	// EnabledStandardArns: set of string, required
	EnabledStandardArns terra.SetValue[terra.StringValue] `hcl:"enabled_standard_arns,attr" validate:"required"`
	// ServiceEnabled: bool, required
	ServiceEnabled terra.BoolValue `hcl:"service_enabled,attr" validate:"required"`
	// SecurityControlsConfiguration: optional
	SecurityControlsConfiguration *SecurityControlsConfiguration `hcl:"security_controls_configuration,block"`
}

type SecurityControlsConfiguration struct {
	// DisabledControlIdentifiers: set of string, optional
	DisabledControlIdentifiers terra.SetValue[terra.StringValue] `hcl:"disabled_control_identifiers,attr"`
	// EnabledControlIdentifiers: set of string, optional
	EnabledControlIdentifiers terra.SetValue[terra.StringValue] `hcl:"enabled_control_identifiers,attr"`
	// SecurityControlCustomParameter: min=0
	SecurityControlCustomParameter []SecurityControlCustomParameter `hcl:"security_control_custom_parameter,block" validate:"min=0"`
}

type SecurityControlCustomParameter struct {
	// SecurityControlId: string, required
	SecurityControlId terra.StringValue `hcl:"security_control_id,attr" validate:"required"`
	// Parameter: min=1
	Parameter []Parameter `hcl:"parameter,block" validate:"min=1"`
}

type Parameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ValueType: string, required
	ValueType terra.StringValue `hcl:"value_type,attr" validate:"required"`
	// Bool: optional
	Bool *Bool `hcl:"bool,block"`
	// Double: optional
	Double *Double `hcl:"double,block"`
	// Enum: optional
	Enum *Enum `hcl:"enum,block"`
	// EnumList: optional
	EnumList *EnumList `hcl:"enum_list,block"`
	// Int: optional
	Int *Int `hcl:"int,block"`
	// IntList: optional
	IntList *IntList `hcl:"int_list,block"`
	// String: optional
	String *String `hcl:"string,block"`
	// StringList: optional
	StringList *StringList `hcl:"string_list,block"`
}

type Bool struct {
	// Value: bool, required
	Value terra.BoolValue `hcl:"value,attr" validate:"required"`
}

type Double struct {
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type Enum struct {
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type EnumList struct {
	// Value: list of string, required
	Value terra.ListValue[terra.StringValue] `hcl:"value,attr" validate:"required"`
}

type Int struct {
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type IntList struct {
	// Value: list of number, required
	Value terra.ListValue[terra.NumberValue] `hcl:"value,attr" validate:"required"`
}

type String struct {
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type StringList struct {
	// Value: list of string, required
	Value terra.ListValue[terra.StringValue] `hcl:"value,attr" validate:"required"`
}

type ConfigurationPolicyAttributes struct {
	ref terra.Reference
}

func (cp ConfigurationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConfigurationPolicyAttributes) InternalWithRef(ref terra.Reference) ConfigurationPolicyAttributes {
	return ConfigurationPolicyAttributes{ref: ref}
}

func (cp ConfigurationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ConfigurationPolicyAttributes) EnabledStandardArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cp.ref.Append("enabled_standard_arns"))
}

func (cp ConfigurationPolicyAttributes) ServiceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("service_enabled"))
}

func (cp ConfigurationPolicyAttributes) SecurityControlsConfiguration() terra.ListValue[SecurityControlsConfigurationAttributes] {
	return terra.ReferenceAsList[SecurityControlsConfigurationAttributes](cp.ref.Append("security_controls_configuration"))
}

type SecurityControlsConfigurationAttributes struct {
	ref terra.Reference
}

func (scc SecurityControlsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc SecurityControlsConfigurationAttributes) InternalWithRef(ref terra.Reference) SecurityControlsConfigurationAttributes {
	return SecurityControlsConfigurationAttributes{ref: ref}
}

func (scc SecurityControlsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc SecurityControlsConfigurationAttributes) DisabledControlIdentifiers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](scc.ref.Append("disabled_control_identifiers"))
}

func (scc SecurityControlsConfigurationAttributes) EnabledControlIdentifiers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](scc.ref.Append("enabled_control_identifiers"))
}

func (scc SecurityControlsConfigurationAttributes) SecurityControlCustomParameter() terra.ListValue[SecurityControlCustomParameterAttributes] {
	return terra.ReferenceAsList[SecurityControlCustomParameterAttributes](scc.ref.Append("security_control_custom_parameter"))
}

type SecurityControlCustomParameterAttributes struct {
	ref terra.Reference
}

func (sccp SecurityControlCustomParameterAttributes) InternalRef() (terra.Reference, error) {
	return sccp.ref, nil
}

func (sccp SecurityControlCustomParameterAttributes) InternalWithRef(ref terra.Reference) SecurityControlCustomParameterAttributes {
	return SecurityControlCustomParameterAttributes{ref: ref}
}

func (sccp SecurityControlCustomParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sccp.ref.InternalTokens()
}

func (sccp SecurityControlCustomParameterAttributes) SecurityControlId() terra.StringValue {
	return terra.ReferenceAsString(sccp.ref.Append("security_control_id"))
}

func (sccp SecurityControlCustomParameterAttributes) Parameter() terra.SetValue[ParameterAttributes] {
	return terra.ReferenceAsSet[ParameterAttributes](sccp.ref.Append("parameter"))
}

type ParameterAttributes struct {
	ref terra.Reference
}

func (p ParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParameterAttributes) InternalWithRef(ref terra.Reference) ParameterAttributes {
	return ParameterAttributes{ref: ref}
}

func (p ParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ParameterAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value_type"))
}

func (p ParameterAttributes) Bool() terra.ListValue[BoolAttributes] {
	return terra.ReferenceAsList[BoolAttributes](p.ref.Append("bool"))
}

func (p ParameterAttributes) Double() terra.ListValue[DoubleAttributes] {
	return terra.ReferenceAsList[DoubleAttributes](p.ref.Append("double"))
}

func (p ParameterAttributes) Enum() terra.ListValue[EnumAttributes] {
	return terra.ReferenceAsList[EnumAttributes](p.ref.Append("enum"))
}

func (p ParameterAttributes) EnumList() terra.ListValue[EnumListAttributes] {
	return terra.ReferenceAsList[EnumListAttributes](p.ref.Append("enum_list"))
}

func (p ParameterAttributes) Int() terra.ListValue[IntAttributes] {
	return terra.ReferenceAsList[IntAttributes](p.ref.Append("int"))
}

func (p ParameterAttributes) IntList() terra.ListValue[IntListAttributes] {
	return terra.ReferenceAsList[IntListAttributes](p.ref.Append("int_list"))
}

func (p ParameterAttributes) String() terra.ListValue[StringAttributes] {
	return terra.ReferenceAsList[StringAttributes](p.ref.Append("string"))
}

func (p ParameterAttributes) StringList() terra.ListValue[StringListAttributes] {
	return terra.ReferenceAsList[StringListAttributes](p.ref.Append("string_list"))
}

type BoolAttributes struct {
	ref terra.Reference
}

func (b BoolAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BoolAttributes) InternalWithRef(ref terra.Reference) BoolAttributes {
	return BoolAttributes{ref: ref}
}

func (b BoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BoolAttributes) Value() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("value"))
}

type DoubleAttributes struct {
	ref terra.Reference
}

func (d DoubleAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DoubleAttributes) InternalWithRef(ref terra.Reference) DoubleAttributes {
	return DoubleAttributes{ref: ref}
}

func (d DoubleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DoubleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("value"))
}

type EnumAttributes struct {
	ref terra.Reference
}

func (e EnumAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnumAttributes) InternalWithRef(ref terra.Reference) EnumAttributes {
	return EnumAttributes{ref: ref}
}

func (e EnumAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnumAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type EnumListAttributes struct {
	ref terra.Reference
}

func (el EnumListAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el EnumListAttributes) InternalWithRef(ref terra.Reference) EnumListAttributes {
	return EnumListAttributes{ref: ref}
}

func (el EnumListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el EnumListAttributes) Value() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](el.ref.Append("value"))
}

type IntAttributes struct {
	ref terra.Reference
}

func (i IntAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IntAttributes) InternalWithRef(ref terra.Reference) IntAttributes {
	return IntAttributes{ref: ref}
}

func (i IntAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IntAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type IntListAttributes struct {
	ref terra.Reference
}

func (il IntListAttributes) InternalRef() (terra.Reference, error) {
	return il.ref, nil
}

func (il IntListAttributes) InternalWithRef(ref terra.Reference) IntListAttributes {
	return IntListAttributes{ref: ref}
}

func (il IntListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return il.ref.InternalTokens()
}

func (il IntListAttributes) Value() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](il.ref.Append("value"))
}

type StringAttributes struct {
	ref terra.Reference
}

func (s StringAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StringAttributes) InternalWithRef(ref terra.Reference) StringAttributes {
	return StringAttributes{ref: ref}
}

func (s StringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type StringListAttributes struct {
	ref terra.Reference
}

func (sl StringListAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl StringListAttributes) InternalWithRef(ref terra.Reference) StringListAttributes {
	return StringListAttributes{ref: ref}
}

func (sl StringListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl StringListAttributes) Value() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sl.ref.Append("value"))
}

type ConfigurationPolicyState struct {
	EnabledStandardArns           []string                             `json:"enabled_standard_arns"`
	ServiceEnabled                bool                                 `json:"service_enabled"`
	SecurityControlsConfiguration []SecurityControlsConfigurationState `json:"security_controls_configuration"`
}

type SecurityControlsConfigurationState struct {
	DisabledControlIdentifiers     []string                              `json:"disabled_control_identifiers"`
	EnabledControlIdentifiers      []string                              `json:"enabled_control_identifiers"`
	SecurityControlCustomParameter []SecurityControlCustomParameterState `json:"security_control_custom_parameter"`
}

type SecurityControlCustomParameterState struct {
	SecurityControlId string           `json:"security_control_id"`
	Parameter         []ParameterState `json:"parameter"`
}

type ParameterState struct {
	Name       string            `json:"name"`
	ValueType  string            `json:"value_type"`
	Bool       []BoolState       `json:"bool"`
	Double     []DoubleState     `json:"double"`
	Enum       []EnumState       `json:"enum"`
	EnumList   []EnumListState   `json:"enum_list"`
	Int        []IntState        `json:"int"`
	IntList    []IntListState    `json:"int_list"`
	String     []StringState     `json:"string"`
	StringList []StringListState `json:"string_list"`
}

type BoolState struct {
	Value bool `json:"value"`
}

type DoubleState struct {
	Value float64 `json:"value"`
}

type EnumState struct {
	Value string `json:"value"`
}

type EnumListState struct {
	Value []string `json:"value"`
}

type IntState struct {
	Value float64 `json:"value"`
}

type IntListState struct {
	Value []float64 `json:"value"`
}

type StringState struct {
	Value string `json:"value"`
}

type StringListState struct {
	Value []string `json:"value"`
}
