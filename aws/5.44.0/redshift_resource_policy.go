// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRedshiftResourcePolicy creates a new instance of [RedshiftResourcePolicy].
func NewRedshiftResourcePolicy(name string, args RedshiftResourcePolicyArgs) *RedshiftResourcePolicy {
	return &RedshiftResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftResourcePolicy)(nil)

// RedshiftResourcePolicy represents the Terraform resource aws_redshift_resource_policy.
type RedshiftResourcePolicy struct {
	Name      string
	Args      RedshiftResourcePolicyArgs
	state     *redshiftResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) Type() string {
	return "aws_redshift_resource_policy"
}

// LocalName returns the local name for [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) LocalName() string {
	return rrp.Name
}

// Configuration returns the configuration (args) for [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) Configuration() interface{} {
	return rrp.Args
}

// DependOn is used for other resources to depend on [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(rrp)
}

// Dependencies returns the list of resources [RedshiftResourcePolicy] depends_on.
func (rrp *RedshiftResourcePolicy) Dependencies() terra.Dependencies {
	return rrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) LifecycleManagement() *terra.Lifecycle {
	return rrp.Lifecycle
}

// Attributes returns the attributes for [RedshiftResourcePolicy].
func (rrp *RedshiftResourcePolicy) Attributes() redshiftResourcePolicyAttributes {
	return redshiftResourcePolicyAttributes{ref: terra.ReferenceResource(rrp)}
}

// ImportState imports the given attribute values into [RedshiftResourcePolicy]'s state.
func (rrp *RedshiftResourcePolicy) ImportState(av io.Reader) error {
	rrp.state = &redshiftResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(rrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrp.Type(), rrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedshiftResourcePolicy] has state.
func (rrp *RedshiftResourcePolicy) State() (*redshiftResourcePolicyState, bool) {
	return rrp.state, rrp.state != nil
}

// StateMust returns the state for [RedshiftResourcePolicy]. Panics if the state is nil.
func (rrp *RedshiftResourcePolicy) StateMust() *redshiftResourcePolicyState {
	if rrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrp.Type(), rrp.LocalName()))
	}
	return rrp.state
}

// RedshiftResourcePolicyArgs contains the configurations for aws_redshift_resource_policy.
type RedshiftResourcePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}
type redshiftResourcePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_redshift_resource_policy.
func (rrp redshiftResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_redshift_resource_policy.
func (rrp redshiftResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(rrp.ref.Append("policy"))
}

// ResourceArn returns a reference to field resource_arn of aws_redshift_resource_policy.
func (rrp redshiftResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(rrp.ref.Append("resource_arn"))
}

type redshiftResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
