// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	lbtruststore "github.com/golingon/terraproviders/aws/5.44.0/lbtruststore"
	"io"
)

// NewLbTrustStore creates a new instance of [LbTrustStore].
func NewLbTrustStore(name string, args LbTrustStoreArgs) *LbTrustStore {
	return &LbTrustStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbTrustStore)(nil)

// LbTrustStore represents the Terraform resource aws_lb_trust_store.
type LbTrustStore struct {
	Name      string
	Args      LbTrustStoreArgs
	state     *lbTrustStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LbTrustStore].
func (lts *LbTrustStore) Type() string {
	return "aws_lb_trust_store"
}

// LocalName returns the local name for [LbTrustStore].
func (lts *LbTrustStore) LocalName() string {
	return lts.Name
}

// Configuration returns the configuration (args) for [LbTrustStore].
func (lts *LbTrustStore) Configuration() interface{} {
	return lts.Args
}

// DependOn is used for other resources to depend on [LbTrustStore].
func (lts *LbTrustStore) DependOn() terra.Reference {
	return terra.ReferenceResource(lts)
}

// Dependencies returns the list of resources [LbTrustStore] depends_on.
func (lts *LbTrustStore) Dependencies() terra.Dependencies {
	return lts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LbTrustStore].
func (lts *LbTrustStore) LifecycleManagement() *terra.Lifecycle {
	return lts.Lifecycle
}

// Attributes returns the attributes for [LbTrustStore].
func (lts *LbTrustStore) Attributes() lbTrustStoreAttributes {
	return lbTrustStoreAttributes{ref: terra.ReferenceResource(lts)}
}

// ImportState imports the given attribute values into [LbTrustStore]'s state.
func (lts *LbTrustStore) ImportState(av io.Reader) error {
	lts.state = &lbTrustStoreState{}
	if err := json.NewDecoder(av).Decode(lts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lts.Type(), lts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LbTrustStore] has state.
func (lts *LbTrustStore) State() (*lbTrustStoreState, bool) {
	return lts.state, lts.state != nil
}

// StateMust returns the state for [LbTrustStore]. Panics if the state is nil.
func (lts *LbTrustStore) StateMust() *lbTrustStoreState {
	if lts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lts.Type(), lts.LocalName()))
	}
	return lts.state
}

// LbTrustStoreArgs contains the configurations for aws_lb_trust_store.
type LbTrustStoreArgs struct {
	// CaCertificatesBundleS3Bucket: string, required
	CaCertificatesBundleS3Bucket terra.StringValue `hcl:"ca_certificates_bundle_s3_bucket,attr" validate:"required"`
	// CaCertificatesBundleS3Key: string, required
	CaCertificatesBundleS3Key terra.StringValue `hcl:"ca_certificates_bundle_s3_key,attr" validate:"required"`
	// CaCertificatesBundleS3ObjectVersion: string, optional
	CaCertificatesBundleS3ObjectVersion terra.StringValue `hcl:"ca_certificates_bundle_s3_object_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *lbtruststore.Timeouts `hcl:"timeouts,block"`
}
type lbTrustStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("arn"))
}

// ArnSuffix returns a reference to field arn_suffix of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) ArnSuffix() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("arn_suffix"))
}

// CaCertificatesBundleS3Bucket returns a reference to field ca_certificates_bundle_s3_bucket of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) CaCertificatesBundleS3Bucket() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("ca_certificates_bundle_s3_bucket"))
}

// CaCertificatesBundleS3Key returns a reference to field ca_certificates_bundle_s3_key of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) CaCertificatesBundleS3Key() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("ca_certificates_bundle_s3_key"))
}

// CaCertificatesBundleS3ObjectVersion returns a reference to field ca_certificates_bundle_s3_object_version of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) CaCertificatesBundleS3ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("ca_certificates_bundle_s3_object_version"))
}

// Id returns a reference to field id of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("id"))
}

// Name returns a reference to field name of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lts.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lb_trust_store.
func (lts lbTrustStoreAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lts.ref.Append("tags_all"))
}

func (lts lbTrustStoreAttributes) Timeouts() lbtruststore.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lbtruststore.TimeoutsAttributes](lts.ref.Append("timeouts"))
}

type lbTrustStoreState struct {
	Arn                                 string                      `json:"arn"`
	ArnSuffix                           string                      `json:"arn_suffix"`
	CaCertificatesBundleS3Bucket        string                      `json:"ca_certificates_bundle_s3_bucket"`
	CaCertificatesBundleS3Key           string                      `json:"ca_certificates_bundle_s3_key"`
	CaCertificatesBundleS3ObjectVersion string                      `json:"ca_certificates_bundle_s3_object_version"`
	Id                                  string                      `json:"id"`
	Name                                string                      `json:"name"`
	NamePrefix                          string                      `json:"name_prefix"`
	Tags                                map[string]string           `json:"tags"`
	TagsAll                             map[string]string           `json:"tags_all"`
	Timeouts                            *lbtruststore.TimeoutsState `json:"timeouts"`
}
