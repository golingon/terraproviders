// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securitylakesubscriber

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Source struct {
	// AwsLogSourceResource: min=0
	AwsLogSourceResource []AwsLogSourceResource `hcl:"aws_log_source_resource,block" validate:"min=0"`
	// CustomLogSourceResource: min=0
	CustomLogSourceResource []CustomLogSourceResource `hcl:"custom_log_source_resource,block" validate:"min=0"`
}

type AwsLogSourceResource struct {
	// SourceName: string, optional
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type CustomLogSourceResource struct {
	// SourceName: string, optional
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
	// Attributes: min=0
	Attributes []Attributes `hcl:"attributes,block" validate:"min=0"`
	// Provider: min=0
	Provider []Provider `hcl:"provider,block" validate:"min=0"`
}

type Attributes struct{}

type Provider struct{}

type SubscriberIdentity struct {
	// ExternalId: string, required
	ExternalId terra.StringValue `hcl:"external_id,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) AwsLogSourceResource() terra.ListValue[AwsLogSourceResourceAttributes] {
	return terra.ReferenceAsList[AwsLogSourceResourceAttributes](s.ref.Append("aws_log_source_resource"))
}

func (s SourceAttributes) CustomLogSourceResource() terra.ListValue[CustomLogSourceResourceAttributes] {
	return terra.ReferenceAsList[CustomLogSourceResourceAttributes](s.ref.Append("custom_log_source_resource"))
}

type AwsLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (alsr AwsLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return alsr.ref, nil
}

func (alsr AwsLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) AwsLogSourceResourceAttributes {
	return AwsLogSourceResourceAttributes{ref: ref}
}

func (alsr AwsLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alsr.ref.InternalTokens()
}

func (alsr AwsLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_name"))
}

func (alsr AwsLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_version"))
}

type CustomLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (clsr CustomLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return clsr.ref, nil
}

func (clsr CustomLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) CustomLogSourceResourceAttributes {
	return CustomLogSourceResourceAttributes{ref: ref}
}

func (clsr CustomLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clsr.ref.InternalTokens()
}

func (clsr CustomLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_name"))
}

func (clsr CustomLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_version"))
}

func (clsr CustomLogSourceResourceAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](clsr.ref.Append("attributes"))
}

func (clsr CustomLogSourceResourceAttributes) Provider() terra.ListValue[ProviderAttributes] {
	return terra.ReferenceAsList[ProviderAttributes](clsr.ref.Append("provider"))
}

type AttributesAttributes struct {
	ref terra.Reference
}

func (a AttributesAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttributesAttributes) InternalWithRef(ref terra.Reference) AttributesAttributes {
	return AttributesAttributes{ref: ref}
}

func (a AttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttributesAttributes) CrawlerArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("crawler_arn"))
}

func (a AttributesAttributes) DatabaseArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database_arn"))
}

func (a AttributesAttributes) TableArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("table_arn"))
}

type ProviderAttributes struct {
	ref terra.Reference
}

func (p ProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProviderAttributes) InternalWithRef(ref terra.Reference) ProviderAttributes {
	return ProviderAttributes{ref: ref}
}

func (p ProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("location"))
}

func (p ProviderAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("role_arn"))
}

type SubscriberIdentityAttributes struct {
	ref terra.Reference
}

func (si SubscriberIdentityAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SubscriberIdentityAttributes) InternalWithRef(ref terra.Reference) SubscriberIdentityAttributes {
	return SubscriberIdentityAttributes{ref: ref}
}

func (si SubscriberIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SubscriberIdentityAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("external_id"))
}

func (si SubscriberIdentityAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("principal"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SourceState struct {
	AwsLogSourceResource    []AwsLogSourceResourceState    `json:"aws_log_source_resource"`
	CustomLogSourceResource []CustomLogSourceResourceState `json:"custom_log_source_resource"`
}

type AwsLogSourceResourceState struct {
	SourceName    string `json:"source_name"`
	SourceVersion string `json:"source_version"`
}

type CustomLogSourceResourceState struct {
	SourceName    string            `json:"source_name"`
	SourceVersion string            `json:"source_version"`
	Attributes    []AttributesState `json:"attributes"`
	Provider      []ProviderState   `json:"provider"`
}

type AttributesState struct {
	CrawlerArn  string `json:"crawler_arn"`
	DatabaseArn string `json:"database_arn"`
	TableArn    string `json:"table_arn"`
}

type ProviderState struct {
	Location string `json:"location"`
	RoleArn  string `json:"role_arn"`
}

type SubscriberIdentityState struct {
	ExternalId string `json:"external_id"`
	Principal  string `json:"principal"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
