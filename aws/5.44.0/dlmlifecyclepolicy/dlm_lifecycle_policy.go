// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dlmlifecyclepolicy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PolicyDetails struct {
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// ResourceLocations: list of string, optional
	ResourceLocations terra.ListValue[terra.StringValue] `hcl:"resource_locations,attr"`
	// ResourceTypes: list of string, optional
	ResourceTypes terra.ListValue[terra.StringValue] `hcl:"resource_types,attr"`
	// TargetTags: map of string, optional
	TargetTags terra.MapValue[terra.StringValue] `hcl:"target_tags,attr"`
	// Action: optional
	Action *Action `hcl:"action,block"`
	// EventSource: optional
	EventSource *EventSource `hcl:"event_source,block"`
	// PolicyDetailsParameters: optional
	Parameters *PolicyDetailsParameters `hcl:"parameters,block"`
	// Schedule: min=0,max=4
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0,max=4"`
}

type Action struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CrossRegionCopy: min=1,max=3
	CrossRegionCopy []CrossRegionCopy `hcl:"cross_region_copy,block" validate:"min=1,max=3"`
}

type CrossRegionCopy struct {
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// EncryptionConfiguration: required
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block" validate:"required"`
	// CrossRegionCopyRetainRule: optional
	RetainRule *CrossRegionCopyRetainRule `hcl:"retain_rule,block"`
}

type EncryptionConfiguration struct {
	// CmkArn: string, optional
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
}

type CrossRegionCopyRetainRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type EventSource struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EventSourceParameters: required
	Parameters *EventSourceParameters `hcl:"parameters,block" validate:"required"`
}

type EventSourceParameters struct {
	// DescriptionRegex: string, required
	DescriptionRegex terra.StringValue `hcl:"description_regex,attr" validate:"required"`
	// EventType: string, required
	EventType terra.StringValue `hcl:"event_type,attr" validate:"required"`
	// SnapshotOwner: set of string, required
	SnapshotOwner terra.SetValue[terra.StringValue] `hcl:"snapshot_owner,attr" validate:"required"`
}

type PolicyDetailsParameters struct {
	// ExcludeBootVolume: bool, optional
	ExcludeBootVolume terra.BoolValue `hcl:"exclude_boot_volume,attr"`
	// NoReboot: bool, optional
	NoReboot terra.BoolValue `hcl:"no_reboot,attr"`
}

type Schedule struct {
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TagsToAdd: map of string, optional
	TagsToAdd terra.MapValue[terra.StringValue] `hcl:"tags_to_add,attr"`
	// VariableTags: map of string, optional
	VariableTags terra.MapValue[terra.StringValue] `hcl:"variable_tags,attr"`
	// CreateRule: required
	CreateRule *CreateRule `hcl:"create_rule,block" validate:"required"`
	// CrossRegionCopyRule: min=0,max=3
	CrossRegionCopyRule []CrossRegionCopyRule `hcl:"cross_region_copy_rule,block" validate:"min=0,max=3"`
	// ScheduleDeprecateRule: optional
	DeprecateRule *ScheduleDeprecateRule `hcl:"deprecate_rule,block"`
	// FastRestoreRule: optional
	FastRestoreRule *FastRestoreRule `hcl:"fast_restore_rule,block"`
	// ScheduleRetainRule: required
	RetainRule *ScheduleRetainRule `hcl:"retain_rule,block" validate:"required"`
	// ShareRule: optional
	ShareRule *ShareRule `hcl:"share_rule,block"`
}

type CreateRule struct {
	// CronExpression: string, optional
	CronExpression terra.StringValue `hcl:"cron_expression,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Times: list of string, optional
	Times terra.ListValue[terra.StringValue] `hcl:"times,attr"`
}

type CrossRegionCopyRule struct {
	// CmkArn: string, optional
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Encrypted: bool, required
	Encrypted terra.BoolValue `hcl:"encrypted,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// CrossRegionCopyRuleDeprecateRule: optional
	DeprecateRule *CrossRegionCopyRuleDeprecateRule `hcl:"deprecate_rule,block"`
	// CrossRegionCopyRuleRetainRule: optional
	RetainRule *CrossRegionCopyRuleRetainRule `hcl:"retain_rule,block"`
}

type CrossRegionCopyRuleDeprecateRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type CrossRegionCopyRuleRetainRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type ScheduleDeprecateRule struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type FastRestoreRule struct {
	// AvailabilityZones: set of string, required
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type ScheduleRetainRule struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type ShareRule struct {
	// TargetAccounts: set of string, required
	TargetAccounts terra.SetValue[terra.StringValue] `hcl:"target_accounts,attr" validate:"required"`
	// UnshareInterval: number, optional
	UnshareInterval terra.NumberValue `hcl:"unshare_interval,attr"`
	// UnshareIntervalUnit: string, optional
	UnshareIntervalUnit terra.StringValue `hcl:"unshare_interval_unit,attr"`
}

type PolicyDetailsAttributes struct {
	ref terra.Reference
}

func (pd PolicyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pd.ref, nil
}

func (pd PolicyDetailsAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsAttributes {
	return PolicyDetailsAttributes{ref: ref}
}

func (pd PolicyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pd.ref.InternalTokens()
}

func (pd PolicyDetailsAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("policy_type"))
}

func (pd PolicyDetailsAttributes) ResourceLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_locations"))
}

func (pd PolicyDetailsAttributes) ResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_types"))
}

func (pd PolicyDetailsAttributes) TargetTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pd.ref.Append("target_tags"))
}

func (pd PolicyDetailsAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](pd.ref.Append("action"))
}

func (pd PolicyDetailsAttributes) EventSource() terra.ListValue[EventSourceAttributes] {
	return terra.ReferenceAsList[EventSourceAttributes](pd.ref.Append("event_source"))
}

func (pd PolicyDetailsAttributes) Parameters() terra.ListValue[PolicyDetailsParametersAttributes] {
	return terra.ReferenceAsList[PolicyDetailsParametersAttributes](pd.ref.Append("parameters"))
}

func (pd PolicyDetailsAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](pd.ref.Append("schedule"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a ActionAttributes) CrossRegionCopy() terra.SetValue[CrossRegionCopyAttributes] {
	return terra.ReferenceAsSet[CrossRegionCopyAttributes](a.ref.Append("cross_region_copy"))
}

type CrossRegionCopyAttributes struct {
	ref terra.Reference
}

func (crc CrossRegionCopyAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc CrossRegionCopyAttributes) InternalWithRef(ref terra.Reference) CrossRegionCopyAttributes {
	return CrossRegionCopyAttributes{ref: ref}
}

func (crc CrossRegionCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc CrossRegionCopyAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("target"))
}

func (crc CrossRegionCopyAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](crc.ref.Append("encryption_configuration"))
}

func (crc CrossRegionCopyAttributes) RetainRule() terra.ListValue[CrossRegionCopyRetainRuleAttributes] {
	return terra.ReferenceAsList[CrossRegionCopyRetainRuleAttributes](crc.ref.Append("retain_rule"))
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cmk_arn"))
}

func (ec EncryptionConfigurationAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("encrypted"))
}

type CrossRegionCopyRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr CrossRegionCopyRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr CrossRegionCopyRetainRuleAttributes) InternalWithRef(ref terra.Reference) CrossRegionCopyRetainRuleAttributes {
	return CrossRegionCopyRetainRuleAttributes{ref: ref}
}

func (rr CrossRegionCopyRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr CrossRegionCopyRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr CrossRegionCopyRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type EventSourceAttributes struct {
	ref terra.Reference
}

func (es EventSourceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EventSourceAttributes) InternalWithRef(ref terra.Reference) EventSourceAttributes {
	return EventSourceAttributes{ref: ref}
}

func (es EventSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EventSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("type"))
}

func (es EventSourceAttributes) Parameters() terra.ListValue[EventSourceParametersAttributes] {
	return terra.ReferenceAsList[EventSourceParametersAttributes](es.ref.Append("parameters"))
}

type EventSourceParametersAttributes struct {
	ref terra.Reference
}

func (p EventSourceParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p EventSourceParametersAttributes) InternalWithRef(ref terra.Reference) EventSourceParametersAttributes {
	return EventSourceParametersAttributes{ref: ref}
}

func (p EventSourceParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p EventSourceParametersAttributes) DescriptionRegex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description_regex"))
}

func (p EventSourceParametersAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("event_type"))
}

func (p EventSourceParametersAttributes) SnapshotOwner() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("snapshot_owner"))
}

type PolicyDetailsParametersAttributes struct {
	ref terra.Reference
}

func (p PolicyDetailsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PolicyDetailsParametersAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsParametersAttributes {
	return PolicyDetailsParametersAttributes{ref: ref}
}

func (p PolicyDetailsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PolicyDetailsParametersAttributes) ExcludeBootVolume() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("exclude_boot_volume"))
}

func (p PolicyDetailsParametersAttributes) NoReboot() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("no_reboot"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("copy_tags"))
}

func (s ScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s ScheduleAttributes) TagsToAdd() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags_to_add"))
}

func (s ScheduleAttributes) VariableTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("variable_tags"))
}

func (s ScheduleAttributes) CreateRule() terra.ListValue[CreateRuleAttributes] {
	return terra.ReferenceAsList[CreateRuleAttributes](s.ref.Append("create_rule"))
}

func (s ScheduleAttributes) CrossRegionCopyRule() terra.SetValue[CrossRegionCopyRuleAttributes] {
	return terra.ReferenceAsSet[CrossRegionCopyRuleAttributes](s.ref.Append("cross_region_copy_rule"))
}

func (s ScheduleAttributes) DeprecateRule() terra.ListValue[ScheduleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[ScheduleDeprecateRuleAttributes](s.ref.Append("deprecate_rule"))
}

func (s ScheduleAttributes) FastRestoreRule() terra.ListValue[FastRestoreRuleAttributes] {
	return terra.ReferenceAsList[FastRestoreRuleAttributes](s.ref.Append("fast_restore_rule"))
}

func (s ScheduleAttributes) RetainRule() terra.ListValue[ScheduleRetainRuleAttributes] {
	return terra.ReferenceAsList[ScheduleRetainRuleAttributes](s.ref.Append("retain_rule"))
}

func (s ScheduleAttributes) ShareRule() terra.ListValue[ShareRuleAttributes] {
	return terra.ReferenceAsList[ShareRuleAttributes](s.ref.Append("share_rule"))
}

type CreateRuleAttributes struct {
	ref terra.Reference
}

func (cr CreateRuleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CreateRuleAttributes) InternalWithRef(ref terra.Reference) CreateRuleAttributes {
	return CreateRuleAttributes{ref: ref}
}

func (cr CreateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CreateRuleAttributes) CronExpression() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("cron_expression"))
}

func (cr CreateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("interval"))
}

func (cr CreateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("interval_unit"))
}

func (cr CreateRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("location"))
}

func (cr CreateRuleAttributes) Times() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("times"))
}

type CrossRegionCopyRuleAttributes struct {
	ref terra.Reference
}

func (crcr CrossRegionCopyRuleAttributes) InternalRef() (terra.Reference, error) {
	return crcr.ref, nil
}

func (crcr CrossRegionCopyRuleAttributes) InternalWithRef(ref terra.Reference) CrossRegionCopyRuleAttributes {
	return CrossRegionCopyRuleAttributes{ref: ref}
}

func (crcr CrossRegionCopyRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crcr.ref.InternalTokens()
}

func (crcr CrossRegionCopyRuleAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("cmk_arn"))
}

func (crcr CrossRegionCopyRuleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("copy_tags"))
}

func (crcr CrossRegionCopyRuleAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("encrypted"))
}

func (crcr CrossRegionCopyRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("target"))
}

func (crcr CrossRegionCopyRuleAttributes) DeprecateRule() terra.ListValue[CrossRegionCopyRuleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[CrossRegionCopyRuleDeprecateRuleAttributes](crcr.ref.Append("deprecate_rule"))
}

func (crcr CrossRegionCopyRuleAttributes) RetainRule() terra.ListValue[CrossRegionCopyRuleRetainRuleAttributes] {
	return terra.ReferenceAsList[CrossRegionCopyRuleRetainRuleAttributes](crcr.ref.Append("retain_rule"))
}

type CrossRegionCopyRuleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr CrossRegionCopyRuleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr CrossRegionCopyRuleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) CrossRegionCopyRuleDeprecateRuleAttributes {
	return CrossRegionCopyRuleDeprecateRuleAttributes{ref: ref}
}

func (dr CrossRegionCopyRuleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr CrossRegionCopyRuleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr CrossRegionCopyRuleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type CrossRegionCopyRuleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr CrossRegionCopyRuleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr CrossRegionCopyRuleRetainRuleAttributes) InternalWithRef(ref terra.Reference) CrossRegionCopyRuleRetainRuleAttributes {
	return CrossRegionCopyRuleRetainRuleAttributes{ref: ref}
}

func (rr CrossRegionCopyRuleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr CrossRegionCopyRuleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr CrossRegionCopyRuleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type ScheduleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr ScheduleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr ScheduleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) ScheduleDeprecateRuleAttributes {
	return ScheduleDeprecateRuleAttributes{ref: ref}
}

func (dr ScheduleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr ScheduleDeprecateRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("count"))
}

func (dr ScheduleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr ScheduleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type FastRestoreRuleAttributes struct {
	ref terra.Reference
}

func (frr FastRestoreRuleAttributes) InternalRef() (terra.Reference, error) {
	return frr.ref, nil
}

func (frr FastRestoreRuleAttributes) InternalWithRef(ref terra.Reference) FastRestoreRuleAttributes {
	return FastRestoreRuleAttributes{ref: ref}
}

func (frr FastRestoreRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return frr.ref.InternalTokens()
}

func (frr FastRestoreRuleAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](frr.ref.Append("availability_zones"))
}

func (frr FastRestoreRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("count"))
}

func (frr FastRestoreRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("interval"))
}

func (frr FastRestoreRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(frr.ref.Append("interval_unit"))
}

type ScheduleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr ScheduleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ScheduleRetainRuleAttributes) InternalWithRef(ref terra.Reference) ScheduleRetainRuleAttributes {
	return ScheduleRetainRuleAttributes{ref: ref}
}

func (rr ScheduleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ScheduleRetainRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("count"))
}

func (rr ScheduleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr ScheduleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type ShareRuleAttributes struct {
	ref terra.Reference
}

func (sr ShareRuleAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr ShareRuleAttributes) InternalWithRef(ref terra.Reference) ShareRuleAttributes {
	return ShareRuleAttributes{ref: ref}
}

func (sr ShareRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr ShareRuleAttributes) TargetAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sr.ref.Append("target_accounts"))
}

func (sr ShareRuleAttributes) UnshareInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("unshare_interval"))
}

func (sr ShareRuleAttributes) UnshareIntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("unshare_interval_unit"))
}

type PolicyDetailsState struct {
	PolicyType        string                         `json:"policy_type"`
	ResourceLocations []string                       `json:"resource_locations"`
	ResourceTypes     []string                       `json:"resource_types"`
	TargetTags        map[string]string              `json:"target_tags"`
	Action            []ActionState                  `json:"action"`
	EventSource       []EventSourceState             `json:"event_source"`
	Parameters        []PolicyDetailsParametersState `json:"parameters"`
	Schedule          []ScheduleState                `json:"schedule"`
}

type ActionState struct {
	Name            string                 `json:"name"`
	CrossRegionCopy []CrossRegionCopyState `json:"cross_region_copy"`
}

type CrossRegionCopyState struct {
	Target                  string                           `json:"target"`
	EncryptionConfiguration []EncryptionConfigurationState   `json:"encryption_configuration"`
	RetainRule              []CrossRegionCopyRetainRuleState `json:"retain_rule"`
}

type EncryptionConfigurationState struct {
	CmkArn    string `json:"cmk_arn"`
	Encrypted bool   `json:"encrypted"`
}

type CrossRegionCopyRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type EventSourceState struct {
	Type       string                       `json:"type"`
	Parameters []EventSourceParametersState `json:"parameters"`
}

type EventSourceParametersState struct {
	DescriptionRegex string   `json:"description_regex"`
	EventType        string   `json:"event_type"`
	SnapshotOwner    []string `json:"snapshot_owner"`
}

type PolicyDetailsParametersState struct {
	ExcludeBootVolume bool `json:"exclude_boot_volume"`
	NoReboot          bool `json:"no_reboot"`
}

type ScheduleState struct {
	CopyTags            bool                         `json:"copy_tags"`
	Name                string                       `json:"name"`
	TagsToAdd           map[string]string            `json:"tags_to_add"`
	VariableTags        map[string]string            `json:"variable_tags"`
	CreateRule          []CreateRuleState            `json:"create_rule"`
	CrossRegionCopyRule []CrossRegionCopyRuleState   `json:"cross_region_copy_rule"`
	DeprecateRule       []ScheduleDeprecateRuleState `json:"deprecate_rule"`
	FastRestoreRule     []FastRestoreRuleState       `json:"fast_restore_rule"`
	RetainRule          []ScheduleRetainRuleState    `json:"retain_rule"`
	ShareRule           []ShareRuleState             `json:"share_rule"`
}

type CreateRuleState struct {
	CronExpression string   `json:"cron_expression"`
	Interval       float64  `json:"interval"`
	IntervalUnit   string   `json:"interval_unit"`
	Location       string   `json:"location"`
	Times          []string `json:"times"`
}

type CrossRegionCopyRuleState struct {
	CmkArn        string                                  `json:"cmk_arn"`
	CopyTags      bool                                    `json:"copy_tags"`
	Encrypted     bool                                    `json:"encrypted"`
	Target        string                                  `json:"target"`
	DeprecateRule []CrossRegionCopyRuleDeprecateRuleState `json:"deprecate_rule"`
	RetainRule    []CrossRegionCopyRuleRetainRuleState    `json:"retain_rule"`
}

type CrossRegionCopyRuleDeprecateRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type CrossRegionCopyRuleRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type ScheduleDeprecateRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type FastRestoreRuleState struct {
	AvailabilityZones []string `json:"availability_zones"`
	Count             float64  `json:"count"`
	Interval          float64  `json:"interval"`
	IntervalUnit      string   `json:"interval_unit"`
}

type ScheduleRetainRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type ShareRuleState struct {
	TargetAccounts      []string `json:"target_accounts"`
	UnshareInterval     float64  `json:"unshare_interval"`
	UnshareIntervalUnit string   `json:"unshare_interval_unit"`
}
