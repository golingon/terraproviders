// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewKmsCiphertext creates a new instance of [KmsCiphertext].
func NewKmsCiphertext(name string, args KmsCiphertextArgs) *KmsCiphertext {
	return &KmsCiphertext{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsCiphertext)(nil)

// KmsCiphertext represents the Terraform resource aws_kms_ciphertext.
type KmsCiphertext struct {
	Name      string
	Args      KmsCiphertextArgs
	state     *kmsCiphertextState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KmsCiphertext].
func (kc *KmsCiphertext) Type() string {
	return "aws_kms_ciphertext"
}

// LocalName returns the local name for [KmsCiphertext].
func (kc *KmsCiphertext) LocalName() string {
	return kc.Name
}

// Configuration returns the configuration (args) for [KmsCiphertext].
func (kc *KmsCiphertext) Configuration() interface{} {
	return kc.Args
}

// DependOn is used for other resources to depend on [KmsCiphertext].
func (kc *KmsCiphertext) DependOn() terra.Reference {
	return terra.ReferenceResource(kc)
}

// Dependencies returns the list of resources [KmsCiphertext] depends_on.
func (kc *KmsCiphertext) Dependencies() terra.Dependencies {
	return kc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KmsCiphertext].
func (kc *KmsCiphertext) LifecycleManagement() *terra.Lifecycle {
	return kc.Lifecycle
}

// Attributes returns the attributes for [KmsCiphertext].
func (kc *KmsCiphertext) Attributes() kmsCiphertextAttributes {
	return kmsCiphertextAttributes{ref: terra.ReferenceResource(kc)}
}

// ImportState imports the given attribute values into [KmsCiphertext]'s state.
func (kc *KmsCiphertext) ImportState(av io.Reader) error {
	kc.state = &kmsCiphertextState{}
	if err := json.NewDecoder(av).Decode(kc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kc.Type(), kc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KmsCiphertext] has state.
func (kc *KmsCiphertext) State() (*kmsCiphertextState, bool) {
	return kc.state, kc.state != nil
}

// StateMust returns the state for [KmsCiphertext]. Panics if the state is nil.
func (kc *KmsCiphertext) StateMust() *kmsCiphertextState {
	if kc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kc.Type(), kc.LocalName()))
	}
	return kc.state
}

// KmsCiphertextArgs contains the configurations for aws_kms_ciphertext.
type KmsCiphertextArgs struct {
	// Context: map of string, optional
	Context terra.MapValue[terra.StringValue] `hcl:"context,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// Plaintext: string, required
	Plaintext terra.StringValue `hcl:"plaintext,attr" validate:"required"`
}
type kmsCiphertextAttributes struct {
	ref terra.Reference
}

// CiphertextBlob returns a reference to field ciphertext_blob of aws_kms_ciphertext.
func (kc kmsCiphertextAttributes) CiphertextBlob() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("ciphertext_blob"))
}

// Context returns a reference to field context of aws_kms_ciphertext.
func (kc kmsCiphertextAttributes) Context() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kc.ref.Append("context"))
}

// Id returns a reference to field id of aws_kms_ciphertext.
func (kc kmsCiphertextAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("id"))
}

// KeyId returns a reference to field key_id of aws_kms_ciphertext.
func (kc kmsCiphertextAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("key_id"))
}

// Plaintext returns a reference to field plaintext of aws_kms_ciphertext.
func (kc kmsCiphertextAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("plaintext"))
}

type kmsCiphertextState struct {
	CiphertextBlob string            `json:"ciphertext_blob"`
	Context        map[string]string `json:"context"`
	Id             string            `json:"id"`
	KeyId          string            `json:"key_id"`
	Plaintext      string            `json:"plaintext"`
}
