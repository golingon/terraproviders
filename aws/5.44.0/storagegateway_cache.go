// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewStoragegatewayCache creates a new instance of [StoragegatewayCache].
func NewStoragegatewayCache(name string, args StoragegatewayCacheArgs) *StoragegatewayCache {
	return &StoragegatewayCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayCache)(nil)

// StoragegatewayCache represents the Terraform resource aws_storagegateway_cache.
type StoragegatewayCache struct {
	Name      string
	Args      StoragegatewayCacheArgs
	state     *storagegatewayCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [StoragegatewayCache].
func (sc *StoragegatewayCache) Type() string {
	return "aws_storagegateway_cache"
}

// LocalName returns the local name for [StoragegatewayCache].
func (sc *StoragegatewayCache) LocalName() string {
	return sc.Name
}

// Configuration returns the configuration (args) for [StoragegatewayCache].
func (sc *StoragegatewayCache) Configuration() interface{} {
	return sc.Args
}

// DependOn is used for other resources to depend on [StoragegatewayCache].
func (sc *StoragegatewayCache) DependOn() terra.Reference {
	return terra.ReferenceResource(sc)
}

// Dependencies returns the list of resources [StoragegatewayCache] depends_on.
func (sc *StoragegatewayCache) Dependencies() terra.Dependencies {
	return sc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [StoragegatewayCache].
func (sc *StoragegatewayCache) LifecycleManagement() *terra.Lifecycle {
	return sc.Lifecycle
}

// Attributes returns the attributes for [StoragegatewayCache].
func (sc *StoragegatewayCache) Attributes() storagegatewayCacheAttributes {
	return storagegatewayCacheAttributes{ref: terra.ReferenceResource(sc)}
}

// ImportState imports the given attribute values into [StoragegatewayCache]'s state.
func (sc *StoragegatewayCache) ImportState(av io.Reader) error {
	sc.state = &storagegatewayCacheState{}
	if err := json.NewDecoder(av).Decode(sc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sc.Type(), sc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [StoragegatewayCache] has state.
func (sc *StoragegatewayCache) State() (*storagegatewayCacheState, bool) {
	return sc.state, sc.state != nil
}

// StateMust returns the state for [StoragegatewayCache]. Panics if the state is nil.
func (sc *StoragegatewayCache) StateMust() *storagegatewayCacheState {
	if sc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sc.Type(), sc.LocalName()))
	}
	return sc.state
}

// StoragegatewayCacheArgs contains the configurations for aws_storagegateway_cache.
type StoragegatewayCacheArgs struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type storagegatewayCacheAttributes struct {
	ref terra.Reference
}

// DiskId returns a reference to field disk_id of aws_storagegateway_cache.
func (sc storagegatewayCacheAttributes) DiskId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("disk_id"))
}

// GatewayArn returns a reference to field gateway_arn of aws_storagegateway_cache.
func (sc storagegatewayCacheAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("gateway_arn"))
}

// Id returns a reference to field id of aws_storagegateway_cache.
func (sc storagegatewayCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

type storagegatewayCacheState struct {
	DiskId     string `json:"disk_id"`
	GatewayArn string `json:"gateway_arn"`
	Id         string `json:"id"`
}
