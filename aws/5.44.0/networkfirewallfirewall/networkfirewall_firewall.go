// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package networkfirewallfirewall

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FirewallStatus struct {
	// SyncStates: min=0
	SyncStates []SyncStates `hcl:"sync_states,block" validate:"min=0"`
}

type SyncStates struct {
	// Attachment: min=0
	Attachment []Attachment `hcl:"attachment,block" validate:"min=0"`
}

type Attachment struct{}

type EncryptionConfiguration struct {
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SubnetMapping struct {
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FirewallStatusAttributes struct {
	ref terra.Reference
}

func (fs FirewallStatusAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FirewallStatusAttributes) InternalWithRef(ref terra.Reference) FirewallStatusAttributes {
	return FirewallStatusAttributes{ref: ref}
}

func (fs FirewallStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FirewallStatusAttributes) SyncStates() terra.SetValue[SyncStatesAttributes] {
	return terra.ReferenceAsSet[SyncStatesAttributes](fs.ref.Append("sync_states"))
}

type SyncStatesAttributes struct {
	ref terra.Reference
}

func (ss SyncStatesAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SyncStatesAttributes) InternalWithRef(ref terra.Reference) SyncStatesAttributes {
	return SyncStatesAttributes{ref: ref}
}

func (ss SyncStatesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SyncStatesAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("availability_zone"))
}

func (ss SyncStatesAttributes) Attachment() terra.ListValue[AttachmentAttributes] {
	return terra.ReferenceAsList[AttachmentAttributes](ss.ref.Append("attachment"))
}

type AttachmentAttributes struct {
	ref terra.Reference
}

func (a AttachmentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttachmentAttributes) InternalWithRef(ref terra.Reference) AttachmentAttributes {
	return AttachmentAttributes{ref: ref}
}

func (a AttachmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttachmentAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("endpoint_id"))
}

func (a AttachmentAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("subnet_id"))
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("key_id"))
}

func (ec EncryptionConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

type SubnetMappingAttributes struct {
	ref terra.Reference
}

func (sm SubnetMappingAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm SubnetMappingAttributes) InternalWithRef(ref terra.Reference) SubnetMappingAttributes {
	return SubnetMappingAttributes{ref: ref}
}

func (sm SubnetMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm SubnetMappingAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("ip_address_type"))
}

func (sm SubnetMappingAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("subnet_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FirewallStatusState struct {
	SyncStates []SyncStatesState `json:"sync_states"`
}

type SyncStatesState struct {
	AvailabilityZone string            `json:"availability_zone"`
	Attachment       []AttachmentState `json:"attachment"`
}

type AttachmentState struct {
	EndpointId string `json:"endpoint_id"`
	SubnetId   string `json:"subnet_id"`
}

type EncryptionConfigurationState struct {
	KeyId string `json:"key_id"`
	Type  string `json:"type"`
}

type SubnetMappingState struct {
	IpAddressType string `json:"ip_address_type"`
	SubnetId      string `json:"subnet_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
