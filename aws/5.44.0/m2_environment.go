// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	m2environment "github.com/golingon/terraproviders/aws/5.44.0/m2environment"
	"io"
)

// NewM2Environment creates a new instance of [M2Environment].
func NewM2Environment(name string, args M2EnvironmentArgs) *M2Environment {
	return &M2Environment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*M2Environment)(nil)

// M2Environment represents the Terraform resource aws_m2_environment.
type M2Environment struct {
	Name      string
	Args      M2EnvironmentArgs
	state     *m2EnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [M2Environment].
func (me *M2Environment) Type() string {
	return "aws_m2_environment"
}

// LocalName returns the local name for [M2Environment].
func (me *M2Environment) LocalName() string {
	return me.Name
}

// Configuration returns the configuration (args) for [M2Environment].
func (me *M2Environment) Configuration() interface{} {
	return me.Args
}

// DependOn is used for other resources to depend on [M2Environment].
func (me *M2Environment) DependOn() terra.Reference {
	return terra.ReferenceResource(me)
}

// Dependencies returns the list of resources [M2Environment] depends_on.
func (me *M2Environment) Dependencies() terra.Dependencies {
	return me.DependsOn
}

// LifecycleManagement returns the lifecycle block for [M2Environment].
func (me *M2Environment) LifecycleManagement() *terra.Lifecycle {
	return me.Lifecycle
}

// Attributes returns the attributes for [M2Environment].
func (me *M2Environment) Attributes() m2EnvironmentAttributes {
	return m2EnvironmentAttributes{ref: terra.ReferenceResource(me)}
}

// ImportState imports the given attribute values into [M2Environment]'s state.
func (me *M2Environment) ImportState(av io.Reader) error {
	me.state = &m2EnvironmentState{}
	if err := json.NewDecoder(av).Decode(me.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", me.Type(), me.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [M2Environment] has state.
func (me *M2Environment) State() (*m2EnvironmentState, bool) {
	return me.state, me.state != nil
}

// StateMust returns the state for [M2Environment]. Panics if the state is nil.
func (me *M2Environment) StateMust() *m2EnvironmentState {
	if me.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", me.Type(), me.LocalName()))
	}
	return me.state
}

// M2EnvironmentArgs contains the configurations for aws_m2_environment.
type M2EnvironmentArgs struct {
	// ApplyChangesDuringMaintenanceWindow: bool, optional
	ApplyChangesDuringMaintenanceWindow terra.BoolValue `hcl:"apply_changes_during_maintenance_window,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// ForceUpdate: bool, optional
	ForceUpdate terra.BoolValue `hcl:"force_update,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// HighAvailabilityConfig: min=0
	HighAvailabilityConfig []m2environment.HighAvailabilityConfig `hcl:"high_availability_config,block" validate:"min=0"`
	// StorageConfiguration: min=0
	StorageConfiguration []m2environment.StorageConfiguration `hcl:"storage_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *m2environment.Timeouts `hcl:"timeouts,block"`
}
type m2EnvironmentAttributes struct {
	ref terra.Reference
}

// ApplyChangesDuringMaintenanceWindow returns a reference to field apply_changes_during_maintenance_window of aws_m2_environment.
func (me m2EnvironmentAttributes) ApplyChangesDuringMaintenanceWindow() terra.BoolValue {
	return terra.ReferenceAsBool(me.ref.Append("apply_changes_during_maintenance_window"))
}

// Arn returns a reference to field arn of aws_m2_environment.
func (me m2EnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("arn"))
}

// Description returns a reference to field description of aws_m2_environment.
func (me m2EnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("description"))
}

// EngineType returns a reference to field engine_type of aws_m2_environment.
func (me m2EnvironmentAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("engine_type"))
}

// EngineVersion returns a reference to field engine_version of aws_m2_environment.
func (me m2EnvironmentAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("engine_version"))
}

// EnvironmentId returns a reference to field environment_id of aws_m2_environment.
func (me m2EnvironmentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("environment_id"))
}

// ForceUpdate returns a reference to field force_update of aws_m2_environment.
func (me m2EnvironmentAttributes) ForceUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(me.ref.Append("force_update"))
}

// Id returns a reference to field id of aws_m2_environment.
func (me m2EnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("id"))
}

// InstanceType returns a reference to field instance_type of aws_m2_environment.
func (me m2EnvironmentAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("instance_type"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_m2_environment.
func (me m2EnvironmentAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("kms_key_id"))
}

// LoadBalancerArn returns a reference to field load_balancer_arn of aws_m2_environment.
func (me m2EnvironmentAttributes) LoadBalancerArn() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("load_balancer_arn"))
}

// Name returns a reference to field name of aws_m2_environment.
func (me m2EnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("name"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_m2_environment.
func (me m2EnvironmentAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(me.ref.Append("preferred_maintenance_window"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_m2_environment.
func (me m2EnvironmentAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(me.ref.Append("publicly_accessible"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_m2_environment.
func (me m2EnvironmentAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](me.ref.Append("security_group_ids"))
}

// SubnetIds returns a reference to field subnet_ids of aws_m2_environment.
func (me m2EnvironmentAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](me.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_m2_environment.
func (me m2EnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](me.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_m2_environment.
func (me m2EnvironmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](me.ref.Append("tags_all"))
}

func (me m2EnvironmentAttributes) HighAvailabilityConfig() terra.ListValue[m2environment.HighAvailabilityConfigAttributes] {
	return terra.ReferenceAsList[m2environment.HighAvailabilityConfigAttributes](me.ref.Append("high_availability_config"))
}

func (me m2EnvironmentAttributes) StorageConfiguration() terra.ListValue[m2environment.StorageConfigurationAttributes] {
	return terra.ReferenceAsList[m2environment.StorageConfigurationAttributes](me.ref.Append("storage_configuration"))
}

func (me m2EnvironmentAttributes) Timeouts() m2environment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[m2environment.TimeoutsAttributes](me.ref.Append("timeouts"))
}

type m2EnvironmentState struct {
	ApplyChangesDuringMaintenanceWindow bool                                        `json:"apply_changes_during_maintenance_window"`
	Arn                                 string                                      `json:"arn"`
	Description                         string                                      `json:"description"`
	EngineType                          string                                      `json:"engine_type"`
	EngineVersion                       string                                      `json:"engine_version"`
	EnvironmentId                       string                                      `json:"environment_id"`
	ForceUpdate                         bool                                        `json:"force_update"`
	Id                                  string                                      `json:"id"`
	InstanceType                        string                                      `json:"instance_type"`
	KmsKeyId                            string                                      `json:"kms_key_id"`
	LoadBalancerArn                     string                                      `json:"load_balancer_arn"`
	Name                                string                                      `json:"name"`
	PreferredMaintenanceWindow          string                                      `json:"preferred_maintenance_window"`
	PubliclyAccessible                  bool                                        `json:"publicly_accessible"`
	SecurityGroupIds                    []string                                    `json:"security_group_ids"`
	SubnetIds                           []string                                    `json:"subnet_ids"`
	Tags                                map[string]string                           `json:"tags"`
	TagsAll                             map[string]string                           `json:"tags_all"`
	HighAvailabilityConfig              []m2environment.HighAvailabilityConfigState `json:"high_availability_config"`
	StorageConfiguration                []m2environment.StorageConfigurationState   `json:"storage_configuration"`
	Timeouts                            *m2environment.TimeoutsState                `json:"timeouts"`
}
