// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewS3ControlAccessGrantsInstanceResourcePolicy creates a new instance of [S3ControlAccessGrantsInstanceResourcePolicy].
func NewS3ControlAccessGrantsInstanceResourcePolicy(name string, args S3ControlAccessGrantsInstanceResourcePolicyArgs) *S3ControlAccessGrantsInstanceResourcePolicy {
	return &S3ControlAccessGrantsInstanceResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlAccessGrantsInstanceResourcePolicy)(nil)

// S3ControlAccessGrantsInstanceResourcePolicy represents the Terraform resource aws_s3control_access_grants_instance_resource_policy.
type S3ControlAccessGrantsInstanceResourcePolicy struct {
	Name      string
	Args      S3ControlAccessGrantsInstanceResourcePolicyArgs
	state     *s3ControlAccessGrantsInstanceResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) Type() string {
	return "aws_s3control_access_grants_instance_resource_policy"
}

// LocalName returns the local name for [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) LocalName() string {
	return sagirp.Name
}

// Configuration returns the configuration (args) for [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) Configuration() interface{} {
	return sagirp.Args
}

// DependOn is used for other resources to depend on [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sagirp)
}

// Dependencies returns the list of resources [S3ControlAccessGrantsInstanceResourcePolicy] depends_on.
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) Dependencies() terra.Dependencies {
	return sagirp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) LifecycleManagement() *terra.Lifecycle {
	return sagirp.Lifecycle
}

// Attributes returns the attributes for [S3ControlAccessGrantsInstanceResourcePolicy].
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) Attributes() s3ControlAccessGrantsInstanceResourcePolicyAttributes {
	return s3ControlAccessGrantsInstanceResourcePolicyAttributes{ref: terra.ReferenceResource(sagirp)}
}

// ImportState imports the given attribute values into [S3ControlAccessGrantsInstanceResourcePolicy]'s state.
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) ImportState(av io.Reader) error {
	sagirp.state = &s3ControlAccessGrantsInstanceResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(sagirp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sagirp.Type(), sagirp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3ControlAccessGrantsInstanceResourcePolicy] has state.
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) State() (*s3ControlAccessGrantsInstanceResourcePolicyState, bool) {
	return sagirp.state, sagirp.state != nil
}

// StateMust returns the state for [S3ControlAccessGrantsInstanceResourcePolicy]. Panics if the state is nil.
func (sagirp *S3ControlAccessGrantsInstanceResourcePolicy) StateMust() *s3ControlAccessGrantsInstanceResourcePolicyState {
	if sagirp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sagirp.Type(), sagirp.LocalName()))
	}
	return sagirp.state
}

// S3ControlAccessGrantsInstanceResourcePolicyArgs contains the configurations for aws_s3control_access_grants_instance_resource_policy.
type S3ControlAccessGrantsInstanceResourcePolicyArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}
type s3ControlAccessGrantsInstanceResourcePolicyAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_s3control_access_grants_instance_resource_policy.
func (sagirp s3ControlAccessGrantsInstanceResourcePolicyAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(sagirp.ref.Append("account_id"))
}

// Id returns a reference to field id of aws_s3control_access_grants_instance_resource_policy.
func (sagirp s3ControlAccessGrantsInstanceResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sagirp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_s3control_access_grants_instance_resource_policy.
func (sagirp s3ControlAccessGrantsInstanceResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(sagirp.ref.Append("policy"))
}

type s3ControlAccessGrantsInstanceResourcePolicyState struct {
	AccountId string `json:"account_id"`
	Id        string `json:"id"`
	Policy    string `json:"policy"`
}
