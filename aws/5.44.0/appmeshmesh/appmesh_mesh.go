// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package appmeshmesh

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// EgressFilter: optional
	EgressFilter *EgressFilter `hcl:"egress_filter,block"`
}

type EgressFilter struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) EgressFilter() terra.ListValue[EgressFilterAttributes] {
	return terra.ReferenceAsList[EgressFilterAttributes](s.ref.Append("egress_filter"))
}

type EgressFilterAttributes struct {
	ref terra.Reference
}

func (ef EgressFilterAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef EgressFilterAttributes) InternalWithRef(ref terra.Reference) EgressFilterAttributes {
	return EgressFilterAttributes{ref: ref}
}

func (ef EgressFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef EgressFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("type"))
}

type SpecState struct {
	EgressFilter []EgressFilterState `json:"egress_filter"`
}

type EgressFilterState struct {
	Type string `json:"type"`
}
