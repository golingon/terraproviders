// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	cloudfrontkeyvaluestore "github.com/golingon/terraproviders/aws/5.44.0/cloudfrontkeyvaluestore"
	"io"
)

// NewCloudfrontKeyValueStore creates a new instance of [CloudfrontKeyValueStore].
func NewCloudfrontKeyValueStore(name string, args CloudfrontKeyValueStoreArgs) *CloudfrontKeyValueStore {
	return &CloudfrontKeyValueStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudfrontKeyValueStore)(nil)

// CloudfrontKeyValueStore represents the Terraform resource aws_cloudfront_key_value_store.
type CloudfrontKeyValueStore struct {
	Name      string
	Args      CloudfrontKeyValueStoreArgs
	state     *cloudfrontKeyValueStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) Type() string {
	return "aws_cloudfront_key_value_store"
}

// LocalName returns the local name for [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) LocalName() string {
	return ckvs.Name
}

// Configuration returns the configuration (args) for [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) Configuration() interface{} {
	return ckvs.Args
}

// DependOn is used for other resources to depend on [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) DependOn() terra.Reference {
	return terra.ReferenceResource(ckvs)
}

// Dependencies returns the list of resources [CloudfrontKeyValueStore] depends_on.
func (ckvs *CloudfrontKeyValueStore) Dependencies() terra.Dependencies {
	return ckvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) LifecycleManagement() *terra.Lifecycle {
	return ckvs.Lifecycle
}

// Attributes returns the attributes for [CloudfrontKeyValueStore].
func (ckvs *CloudfrontKeyValueStore) Attributes() cloudfrontKeyValueStoreAttributes {
	return cloudfrontKeyValueStoreAttributes{ref: terra.ReferenceResource(ckvs)}
}

// ImportState imports the given attribute values into [CloudfrontKeyValueStore]'s state.
func (ckvs *CloudfrontKeyValueStore) ImportState(av io.Reader) error {
	ckvs.state = &cloudfrontKeyValueStoreState{}
	if err := json.NewDecoder(av).Decode(ckvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ckvs.Type(), ckvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CloudfrontKeyValueStore] has state.
func (ckvs *CloudfrontKeyValueStore) State() (*cloudfrontKeyValueStoreState, bool) {
	return ckvs.state, ckvs.state != nil
}

// StateMust returns the state for [CloudfrontKeyValueStore]. Panics if the state is nil.
func (ckvs *CloudfrontKeyValueStore) StateMust() *cloudfrontKeyValueStoreState {
	if ckvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ckvs.Type(), ckvs.LocalName()))
	}
	return ckvs.state
}

// CloudfrontKeyValueStoreArgs contains the configurations for aws_cloudfront_key_value_store.
type CloudfrontKeyValueStoreArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *cloudfrontkeyvaluestore.Timeouts `hcl:"timeouts,block"`
}
type cloudfrontKeyValueStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("arn"))
}

// Comment returns a reference to field comment of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("comment"))
}

// Etag returns a reference to field etag of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("etag"))
}

// Id returns a reference to field id of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("id"))
}

// LastModifiedTime returns a reference to field last_modified_time of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) LastModifiedTime() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("last_modified_time"))
}

// Name returns a reference to field name of aws_cloudfront_key_value_store.
func (ckvs cloudfrontKeyValueStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ckvs.ref.Append("name"))
}

func (ckvs cloudfrontKeyValueStoreAttributes) Timeouts() cloudfrontkeyvaluestore.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cloudfrontkeyvaluestore.TimeoutsAttributes](ckvs.ref.Append("timeouts"))
}

type cloudfrontKeyValueStoreState struct {
	Arn              string                                 `json:"arn"`
	Comment          string                                 `json:"comment"`
	Etag             string                                 `json:"etag"`
	Id               string                                 `json:"id"`
	LastModifiedTime string                                 `json:"last_modified_time"`
	Name             string                                 `json:"name"`
	Timeouts         *cloudfrontkeyvaluestore.TimeoutsState `json:"timeouts"`
}
