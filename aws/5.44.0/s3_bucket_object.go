// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewS3BucketObject creates a new instance of [S3BucketObject].
func NewS3BucketObject(name string, args S3BucketObjectArgs) *S3BucketObject {
	return &S3BucketObject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketObject)(nil)

// S3BucketObject represents the Terraform resource aws_s3_bucket_object.
type S3BucketObject struct {
	Name      string
	Args      S3BucketObjectArgs
	state     *s3BucketObjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3BucketObject].
func (sbo *S3BucketObject) Type() string {
	return "aws_s3_bucket_object"
}

// LocalName returns the local name for [S3BucketObject].
func (sbo *S3BucketObject) LocalName() string {
	return sbo.Name
}

// Configuration returns the configuration (args) for [S3BucketObject].
func (sbo *S3BucketObject) Configuration() interface{} {
	return sbo.Args
}

// DependOn is used for other resources to depend on [S3BucketObject].
func (sbo *S3BucketObject) DependOn() terra.Reference {
	return terra.ReferenceResource(sbo)
}

// Dependencies returns the list of resources [S3BucketObject] depends_on.
func (sbo *S3BucketObject) Dependencies() terra.Dependencies {
	return sbo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3BucketObject].
func (sbo *S3BucketObject) LifecycleManagement() *terra.Lifecycle {
	return sbo.Lifecycle
}

// Attributes returns the attributes for [S3BucketObject].
func (sbo *S3BucketObject) Attributes() s3BucketObjectAttributes {
	return s3BucketObjectAttributes{ref: terra.ReferenceResource(sbo)}
}

// ImportState imports the given attribute values into [S3BucketObject]'s state.
func (sbo *S3BucketObject) ImportState(av io.Reader) error {
	sbo.state = &s3BucketObjectState{}
	if err := json.NewDecoder(av).Decode(sbo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbo.Type(), sbo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3BucketObject] has state.
func (sbo *S3BucketObject) State() (*s3BucketObjectState, bool) {
	return sbo.state, sbo.state != nil
}

// StateMust returns the state for [S3BucketObject]. Panics if the state is nil.
func (sbo *S3BucketObject) StateMust() *s3BucketObjectState {
	if sbo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbo.Type(), sbo.LocalName()))
	}
	return sbo.state
}

// S3BucketObjectArgs contains the configurations for aws_s3_bucket_object.
type S3BucketObjectArgs struct {
	// Acl: string, optional
	Acl terra.StringValue `hcl:"acl,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketKeyEnabled: bool, optional
	BucketKeyEnabled terra.BoolValue `hcl:"bucket_key_enabled,attr"`
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// ContentBase64: string, optional
	ContentBase64 terra.StringValue `hcl:"content_base64,attr"`
	// ContentDisposition: string, optional
	ContentDisposition terra.StringValue `hcl:"content_disposition,attr"`
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// ContentLanguage: string, optional
	ContentLanguage terra.StringValue `hcl:"content_language,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// ObjectLockLegalHoldStatus: string, optional
	ObjectLockLegalHoldStatus terra.StringValue `hcl:"object_lock_legal_hold_status,attr"`
	// ObjectLockMode: string, optional
	ObjectLockMode terra.StringValue `hcl:"object_lock_mode,attr"`
	// ObjectLockRetainUntilDate: string, optional
	ObjectLockRetainUntilDate terra.StringValue `hcl:"object_lock_retain_until_date,attr"`
	// ServerSideEncryption: string, optional
	ServerSideEncryption terra.StringValue `hcl:"server_side_encryption,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// SourceHash: string, optional
	SourceHash terra.StringValue `hcl:"source_hash,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WebsiteRedirect: string, optional
	WebsiteRedirect terra.StringValue `hcl:"website_redirect,attr"`
}
type s3BucketObjectAttributes struct {
	ref terra.Reference
}

// Acl returns a reference to field acl of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Acl() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("acl"))
}

// Arn returns a reference to field arn of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("arn"))
}

// Bucket returns a reference to field bucket of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("bucket"))
}

// BucketKeyEnabled returns a reference to field bucket_key_enabled of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) BucketKeyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sbo.ref.Append("bucket_key_enabled"))
}

// CacheControl returns a reference to field cache_control of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("cache_control"))
}

// Content returns a reference to field content of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content"))
}

// ContentBase64 returns a reference to field content_base64 of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ContentBase64() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content_base64"))
}

// ContentDisposition returns a reference to field content_disposition of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ContentDisposition() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content_disposition"))
}

// ContentEncoding returns a reference to field content_encoding of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content_encoding"))
}

// ContentLanguage returns a reference to field content_language of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ContentLanguage() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content_language"))
}

// ContentType returns a reference to field content_type of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("content_type"))
}

// Etag returns a reference to field etag of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("etag"))
}

// ForceDestroy returns a reference to field force_destroy of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(sbo.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("id"))
}

// Key returns a reference to field key of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("key"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("kms_key_id"))
}

// Metadata returns a reference to field metadata of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sbo.ref.Append("metadata"))
}

// ObjectLockLegalHoldStatus returns a reference to field object_lock_legal_hold_status of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ObjectLockLegalHoldStatus() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("object_lock_legal_hold_status"))
}

// ObjectLockMode returns a reference to field object_lock_mode of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ObjectLockMode() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("object_lock_mode"))
}

// ObjectLockRetainUntilDate returns a reference to field object_lock_retain_until_date of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ObjectLockRetainUntilDate() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("object_lock_retain_until_date"))
}

// ServerSideEncryption returns a reference to field server_side_encryption of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) ServerSideEncryption() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("server_side_encryption"))
}

// Source returns a reference to field source of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("source"))
}

// SourceHash returns a reference to field source_hash of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) SourceHash() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("source_hash"))
}

// StorageClass returns a reference to field storage_class of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("storage_class"))
}

// Tags returns a reference to field tags of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sbo.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sbo.ref.Append("tags_all"))
}

// VersionId returns a reference to field version_id of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("version_id"))
}

// WebsiteRedirect returns a reference to field website_redirect of aws_s3_bucket_object.
func (sbo s3BucketObjectAttributes) WebsiteRedirect() terra.StringValue {
	return terra.ReferenceAsString(sbo.ref.Append("website_redirect"))
}

type s3BucketObjectState struct {
	Acl                       string            `json:"acl"`
	Arn                       string            `json:"arn"`
	Bucket                    string            `json:"bucket"`
	BucketKeyEnabled          bool              `json:"bucket_key_enabled"`
	CacheControl              string            `json:"cache_control"`
	Content                   string            `json:"content"`
	ContentBase64             string            `json:"content_base64"`
	ContentDisposition        string            `json:"content_disposition"`
	ContentEncoding           string            `json:"content_encoding"`
	ContentLanguage           string            `json:"content_language"`
	ContentType               string            `json:"content_type"`
	Etag                      string            `json:"etag"`
	ForceDestroy              bool              `json:"force_destroy"`
	Id                        string            `json:"id"`
	Key                       string            `json:"key"`
	KmsKeyId                  string            `json:"kms_key_id"`
	Metadata                  map[string]string `json:"metadata"`
	ObjectLockLegalHoldStatus string            `json:"object_lock_legal_hold_status"`
	ObjectLockMode            string            `json:"object_lock_mode"`
	ObjectLockRetainUntilDate string            `json:"object_lock_retain_until_date"`
	ServerSideEncryption      string            `json:"server_side_encryption"`
	Source                    string            `json:"source"`
	SourceHash                string            `json:"source_hash"`
	StorageClass              string            `json:"storage_class"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
	VersionId                 string            `json:"version_id"`
	WebsiteRedirect           string            `json:"website_redirect"`
}
