// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	s3directorybucket "github.com/golingon/terraproviders/aws/5.44.0/s3directorybucket"
	"io"
)

// NewS3DirectoryBucket creates a new instance of [S3DirectoryBucket].
func NewS3DirectoryBucket(name string, args S3DirectoryBucketArgs) *S3DirectoryBucket {
	return &S3DirectoryBucket{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3DirectoryBucket)(nil)

// S3DirectoryBucket represents the Terraform resource aws_s3_directory_bucket.
type S3DirectoryBucket struct {
	Name      string
	Args      S3DirectoryBucketArgs
	state     *s3DirectoryBucketState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) Type() string {
	return "aws_s3_directory_bucket"
}

// LocalName returns the local name for [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) LocalName() string {
	return sdb.Name
}

// Configuration returns the configuration (args) for [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) Configuration() interface{} {
	return sdb.Args
}

// DependOn is used for other resources to depend on [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) DependOn() terra.Reference {
	return terra.ReferenceResource(sdb)
}

// Dependencies returns the list of resources [S3DirectoryBucket] depends_on.
func (sdb *S3DirectoryBucket) Dependencies() terra.Dependencies {
	return sdb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) LifecycleManagement() *terra.Lifecycle {
	return sdb.Lifecycle
}

// Attributes returns the attributes for [S3DirectoryBucket].
func (sdb *S3DirectoryBucket) Attributes() s3DirectoryBucketAttributes {
	return s3DirectoryBucketAttributes{ref: terra.ReferenceResource(sdb)}
}

// ImportState imports the given attribute values into [S3DirectoryBucket]'s state.
func (sdb *S3DirectoryBucket) ImportState(av io.Reader) error {
	sdb.state = &s3DirectoryBucketState{}
	if err := json.NewDecoder(av).Decode(sdb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdb.Type(), sdb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3DirectoryBucket] has state.
func (sdb *S3DirectoryBucket) State() (*s3DirectoryBucketState, bool) {
	return sdb.state, sdb.state != nil
}

// StateMust returns the state for [S3DirectoryBucket]. Panics if the state is nil.
func (sdb *S3DirectoryBucket) StateMust() *s3DirectoryBucketState {
	if sdb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdb.Type(), sdb.LocalName()))
	}
	return sdb.state
}

// S3DirectoryBucketArgs contains the configurations for aws_s3_directory_bucket.
type S3DirectoryBucketArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// DataRedundancy: string, optional
	DataRedundancy terra.StringValue `hcl:"data_redundancy,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Location: min=0
	Location []s3directorybucket.Location `hcl:"location,block" validate:"min=0"`
}
type s3DirectoryBucketAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sdb.ref.Append("arn"))
}

// Bucket returns a reference to field bucket of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sdb.ref.Append("bucket"))
}

// DataRedundancy returns a reference to field data_redundancy of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) DataRedundancy() terra.StringValue {
	return terra.ReferenceAsString(sdb.ref.Append("data_redundancy"))
}

// ForceDestroy returns a reference to field force_destroy of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(sdb.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sdb.ref.Append("id"))
}

// Type returns a reference to field type of aws_s3_directory_bucket.
func (sdb s3DirectoryBucketAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sdb.ref.Append("type"))
}

func (sdb s3DirectoryBucketAttributes) Location() terra.ListValue[s3directorybucket.LocationAttributes] {
	return terra.ReferenceAsList[s3directorybucket.LocationAttributes](sdb.ref.Append("location"))
}

type s3DirectoryBucketState struct {
	Arn            string                            `json:"arn"`
	Bucket         string                            `json:"bucket"`
	DataRedundancy string                            `json:"data_redundancy"`
	ForceDestroy   bool                              `json:"force_destroy"`
	Id             string                            `json:"id"`
	Type           string                            `json:"type"`
	Location       []s3directorybucket.LocationState `json:"location"`
}
