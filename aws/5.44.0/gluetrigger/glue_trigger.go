// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package gluetrigger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Actions struct {
	// Arguments: map of string, optional
	Arguments terra.MapValue[terra.StringValue] `hcl:"arguments,attr"`
	// CrawlerName: string, optional
	CrawlerName terra.StringValue `hcl:"crawler_name,attr"`
	// JobName: string, optional
	JobName terra.StringValue `hcl:"job_name,attr"`
	// SecurityConfiguration: string, optional
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// NotificationProperty: optional
	NotificationProperty *NotificationProperty `hcl:"notification_property,block"`
}

type NotificationProperty struct {
	// NotifyDelayAfter: number, optional
	NotifyDelayAfter terra.NumberValue `hcl:"notify_delay_after,attr"`
}

type EventBatchingCondition struct {
	// BatchSize: number, required
	BatchSize terra.NumberValue `hcl:"batch_size,attr" validate:"required"`
	// BatchWindow: number, optional
	BatchWindow terra.NumberValue `hcl:"batch_window,attr"`
}

type Predicate struct {
	// Logical: string, optional
	Logical terra.StringValue `hcl:"logical,attr"`
	// Conditions: min=1
	Conditions []Conditions `hcl:"conditions,block" validate:"min=1"`
}

type Conditions struct {
	// CrawlState: string, optional
	CrawlState terra.StringValue `hcl:"crawl_state,attr"`
	// CrawlerName: string, optional
	CrawlerName terra.StringValue `hcl:"crawler_name,attr"`
	// JobName: string, optional
	JobName terra.StringValue `hcl:"job_name,attr"`
	// LogicalOperator: string, optional
	LogicalOperator terra.StringValue `hcl:"logical_operator,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) Arguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("arguments"))
}

func (a ActionsAttributes) CrawlerName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("crawler_name"))
}

func (a ActionsAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("job_name"))
}

func (a ActionsAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("security_configuration"))
}

func (a ActionsAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("timeout"))
}

func (a ActionsAttributes) NotificationProperty() terra.ListValue[NotificationPropertyAttributes] {
	return terra.ReferenceAsList[NotificationPropertyAttributes](a.ref.Append("notification_property"))
}

type NotificationPropertyAttributes struct {
	ref terra.Reference
}

func (np NotificationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NotificationPropertyAttributes) InternalWithRef(ref terra.Reference) NotificationPropertyAttributes {
	return NotificationPropertyAttributes{ref: ref}
}

func (np NotificationPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NotificationPropertyAttributes) NotifyDelayAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("notify_delay_after"))
}

type EventBatchingConditionAttributes struct {
	ref terra.Reference
}

func (ebc EventBatchingConditionAttributes) InternalRef() (terra.Reference, error) {
	return ebc.ref, nil
}

func (ebc EventBatchingConditionAttributes) InternalWithRef(ref terra.Reference) EventBatchingConditionAttributes {
	return EventBatchingConditionAttributes{ref: ref}
}

func (ebc EventBatchingConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebc.ref.InternalTokens()
}

func (ebc EventBatchingConditionAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebc.ref.Append("batch_size"))
}

func (ebc EventBatchingConditionAttributes) BatchWindow() terra.NumberValue {
	return terra.ReferenceAsNumber(ebc.ref.Append("batch_window"))
}

type PredicateAttributes struct {
	ref terra.Reference
}

func (p PredicateAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PredicateAttributes) InternalWithRef(ref terra.Reference) PredicateAttributes {
	return PredicateAttributes{ref: ref}
}

func (p PredicateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PredicateAttributes) Logical() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("logical"))
}

func (p PredicateAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](p.ref.Append("conditions"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) CrawlState() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("crawl_state"))
}

func (c ConditionsAttributes) CrawlerName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("crawler_name"))
}

func (c ConditionsAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("job_name"))
}

func (c ConditionsAttributes) LogicalOperator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("logical_operator"))
}

func (c ConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionsState struct {
	Arguments             map[string]string           `json:"arguments"`
	CrawlerName           string                      `json:"crawler_name"`
	JobName               string                      `json:"job_name"`
	SecurityConfiguration string                      `json:"security_configuration"`
	Timeout               float64                     `json:"timeout"`
	NotificationProperty  []NotificationPropertyState `json:"notification_property"`
}

type NotificationPropertyState struct {
	NotifyDelayAfter float64 `json:"notify_delay_after"`
}

type EventBatchingConditionState struct {
	BatchSize   float64 `json:"batch_size"`
	BatchWindow float64 `json:"batch_window"`
}

type PredicateState struct {
	Logical    string            `json:"logical"`
	Conditions []ConditionsState `json:"conditions"`
}

type ConditionsState struct {
	CrawlState      string `json:"crawl_state"`
	CrawlerName     string `json:"crawler_name"`
	JobName         string `json:"job_name"`
	LogicalOperator string `json:"logical_operator"`
	State           string `json:"state"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
