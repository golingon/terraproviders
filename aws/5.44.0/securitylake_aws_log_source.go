// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitylakeawslogsource "github.com/golingon/terraproviders/aws/5.44.0/securitylakeawslogsource"
	"io"
)

// NewSecuritylakeAwsLogSource creates a new instance of [SecuritylakeAwsLogSource].
func NewSecuritylakeAwsLogSource(name string, args SecuritylakeAwsLogSourceArgs) *SecuritylakeAwsLogSource {
	return &SecuritylakeAwsLogSource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecuritylakeAwsLogSource)(nil)

// SecuritylakeAwsLogSource represents the Terraform resource aws_securitylake_aws_log_source.
type SecuritylakeAwsLogSource struct {
	Name      string
	Args      SecuritylakeAwsLogSourceArgs
	state     *securitylakeAwsLogSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) Type() string {
	return "aws_securitylake_aws_log_source"
}

// LocalName returns the local name for [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) LocalName() string {
	return sals.Name
}

// Configuration returns the configuration (args) for [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) Configuration() interface{} {
	return sals.Args
}

// DependOn is used for other resources to depend on [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) DependOn() terra.Reference {
	return terra.ReferenceResource(sals)
}

// Dependencies returns the list of resources [SecuritylakeAwsLogSource] depends_on.
func (sals *SecuritylakeAwsLogSource) Dependencies() terra.Dependencies {
	return sals.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) LifecycleManagement() *terra.Lifecycle {
	return sals.Lifecycle
}

// Attributes returns the attributes for [SecuritylakeAwsLogSource].
func (sals *SecuritylakeAwsLogSource) Attributes() securitylakeAwsLogSourceAttributes {
	return securitylakeAwsLogSourceAttributes{ref: terra.ReferenceResource(sals)}
}

// ImportState imports the given attribute values into [SecuritylakeAwsLogSource]'s state.
func (sals *SecuritylakeAwsLogSource) ImportState(av io.Reader) error {
	sals.state = &securitylakeAwsLogSourceState{}
	if err := json.NewDecoder(av).Decode(sals.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sals.Type(), sals.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecuritylakeAwsLogSource] has state.
func (sals *SecuritylakeAwsLogSource) State() (*securitylakeAwsLogSourceState, bool) {
	return sals.state, sals.state != nil
}

// StateMust returns the state for [SecuritylakeAwsLogSource]. Panics if the state is nil.
func (sals *SecuritylakeAwsLogSource) StateMust() *securitylakeAwsLogSourceState {
	if sals.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sals.Type(), sals.LocalName()))
	}
	return sals.state
}

// SecuritylakeAwsLogSourceArgs contains the configurations for aws_securitylake_aws_log_source.
type SecuritylakeAwsLogSourceArgs struct {
	// Source: min=0
	Source []securitylakeawslogsource.Source `hcl:"source,block" validate:"min=0"`
}
type securitylakeAwsLogSourceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_securitylake_aws_log_source.
func (sals securitylakeAwsLogSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sals.ref.Append("id"))
}

func (sals securitylakeAwsLogSourceAttributes) Source() terra.ListValue[securitylakeawslogsource.SourceAttributes] {
	return terra.ReferenceAsList[securitylakeawslogsource.SourceAttributes](sals.ref.Append("source"))
}

type securitylakeAwsLogSourceState struct {
	Id     string                                 `json:"id"`
	Source []securitylakeawslogsource.SourceState `json:"source"`
}
