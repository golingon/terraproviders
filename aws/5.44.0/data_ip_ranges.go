// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataIpRanges creates a new instance of [DataIpRanges].
func NewDataIpRanges(name string, args DataIpRangesArgs) *DataIpRanges {
	return &DataIpRanges{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataIpRanges)(nil)

// DataIpRanges represents the Terraform data resource aws_ip_ranges.
type DataIpRanges struct {
	Name string
	Args DataIpRangesArgs
}

// DataSource returns the Terraform object type for [DataIpRanges].
func (ir *DataIpRanges) DataSource() string {
	return "aws_ip_ranges"
}

// LocalName returns the local name for [DataIpRanges].
func (ir *DataIpRanges) LocalName() string {
	return ir.Name
}

// Configuration returns the configuration (args) for [DataIpRanges].
func (ir *DataIpRanges) Configuration() interface{} {
	return ir.Args
}

// Attributes returns the attributes for [DataIpRanges].
func (ir *DataIpRanges) Attributes() dataIpRangesAttributes {
	return dataIpRangesAttributes{ref: terra.ReferenceDataResource(ir)}
}

// DataIpRangesArgs contains the configurations for aws_ip_ranges.
type DataIpRangesArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Regions: set of string, optional
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr"`
	// Services: set of string, required
	Services terra.SetValue[terra.StringValue] `hcl:"services,attr" validate:"required"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
}
type dataIpRangesAttributes struct {
	ref terra.Reference
}

// CidrBlocks returns a reference to field cidr_blocks of aws_ip_ranges.
func (ir dataIpRangesAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ir.ref.Append("cidr_blocks"))
}

// CreateDate returns a reference to field create_date of aws_ip_ranges.
func (ir dataIpRangesAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("create_date"))
}

// Id returns a reference to field id of aws_ip_ranges.
func (ir dataIpRangesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("id"))
}

// Ipv6CidrBlocks returns a reference to field ipv6_cidr_blocks of aws_ip_ranges.
func (ir dataIpRangesAttributes) Ipv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ir.ref.Append("ipv6_cidr_blocks"))
}

// Regions returns a reference to field regions of aws_ip_ranges.
func (ir dataIpRangesAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("regions"))
}

// Services returns a reference to field services of aws_ip_ranges.
func (ir dataIpRangesAttributes) Services() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("services"))
}

// SyncToken returns a reference to field sync_token of aws_ip_ranges.
func (ir dataIpRangesAttributes) SyncToken() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("sync_token"))
}

// Url returns a reference to field url of aws_ip_ranges.
func (ir dataIpRangesAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("url"))
}
