// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewIamAccountPasswordPolicy creates a new instance of [IamAccountPasswordPolicy].
func NewIamAccountPasswordPolicy(name string, args IamAccountPasswordPolicyArgs) *IamAccountPasswordPolicy {
	return &IamAccountPasswordPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamAccountPasswordPolicy)(nil)

// IamAccountPasswordPolicy represents the Terraform resource aws_iam_account_password_policy.
type IamAccountPasswordPolicy struct {
	Name      string
	Args      IamAccountPasswordPolicyArgs
	state     *iamAccountPasswordPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) Type() string {
	return "aws_iam_account_password_policy"
}

// LocalName returns the local name for [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) LocalName() string {
	return iapp.Name
}

// Configuration returns the configuration (args) for [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) Configuration() interface{} {
	return iapp.Args
}

// DependOn is used for other resources to depend on [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(iapp)
}

// Dependencies returns the list of resources [IamAccountPasswordPolicy] depends_on.
func (iapp *IamAccountPasswordPolicy) Dependencies() terra.Dependencies {
	return iapp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) LifecycleManagement() *terra.Lifecycle {
	return iapp.Lifecycle
}

// Attributes returns the attributes for [IamAccountPasswordPolicy].
func (iapp *IamAccountPasswordPolicy) Attributes() iamAccountPasswordPolicyAttributes {
	return iamAccountPasswordPolicyAttributes{ref: terra.ReferenceResource(iapp)}
}

// ImportState imports the given attribute values into [IamAccountPasswordPolicy]'s state.
func (iapp *IamAccountPasswordPolicy) ImportState(av io.Reader) error {
	iapp.state = &iamAccountPasswordPolicyState{}
	if err := json.NewDecoder(av).Decode(iapp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iapp.Type(), iapp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IamAccountPasswordPolicy] has state.
func (iapp *IamAccountPasswordPolicy) State() (*iamAccountPasswordPolicyState, bool) {
	return iapp.state, iapp.state != nil
}

// StateMust returns the state for [IamAccountPasswordPolicy]. Panics if the state is nil.
func (iapp *IamAccountPasswordPolicy) StateMust() *iamAccountPasswordPolicyState {
	if iapp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iapp.Type(), iapp.LocalName()))
	}
	return iapp.state
}

// IamAccountPasswordPolicyArgs contains the configurations for aws_iam_account_password_policy.
type IamAccountPasswordPolicyArgs struct {
	// AllowUsersToChangePassword: bool, optional
	AllowUsersToChangePassword terra.BoolValue `hcl:"allow_users_to_change_password,attr"`
	// HardExpiry: bool, optional
	HardExpiry terra.BoolValue `hcl:"hard_expiry,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxPasswordAge: number, optional
	MaxPasswordAge terra.NumberValue `hcl:"max_password_age,attr"`
	// MinimumPasswordLength: number, optional
	MinimumPasswordLength terra.NumberValue `hcl:"minimum_password_length,attr"`
	// PasswordReusePrevention: number, optional
	PasswordReusePrevention terra.NumberValue `hcl:"password_reuse_prevention,attr"`
	// RequireLowercaseCharacters: bool, optional
	RequireLowercaseCharacters terra.BoolValue `hcl:"require_lowercase_characters,attr"`
	// RequireNumbers: bool, optional
	RequireNumbers terra.BoolValue `hcl:"require_numbers,attr"`
	// RequireSymbols: bool, optional
	RequireSymbols terra.BoolValue `hcl:"require_symbols,attr"`
	// RequireUppercaseCharacters: bool, optional
	RequireUppercaseCharacters terra.BoolValue `hcl:"require_uppercase_characters,attr"`
}
type iamAccountPasswordPolicyAttributes struct {
	ref terra.Reference
}

// AllowUsersToChangePassword returns a reference to field allow_users_to_change_password of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) AllowUsersToChangePassword() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("allow_users_to_change_password"))
}

// ExpirePasswords returns a reference to field expire_passwords of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) ExpirePasswords() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("expire_passwords"))
}

// HardExpiry returns a reference to field hard_expiry of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) HardExpiry() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("hard_expiry"))
}

// Id returns a reference to field id of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(iapp.ref.Append("id"))
}

// MaxPasswordAge returns a reference to field max_password_age of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) MaxPasswordAge() terra.NumberValue {
	return terra.ReferenceAsNumber(iapp.ref.Append("max_password_age"))
}

// MinimumPasswordLength returns a reference to field minimum_password_length of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) MinimumPasswordLength() terra.NumberValue {
	return terra.ReferenceAsNumber(iapp.ref.Append("minimum_password_length"))
}

// PasswordReusePrevention returns a reference to field password_reuse_prevention of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) PasswordReusePrevention() terra.NumberValue {
	return terra.ReferenceAsNumber(iapp.ref.Append("password_reuse_prevention"))
}

// RequireLowercaseCharacters returns a reference to field require_lowercase_characters of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) RequireLowercaseCharacters() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("require_lowercase_characters"))
}

// RequireNumbers returns a reference to field require_numbers of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) RequireNumbers() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("require_numbers"))
}

// RequireSymbols returns a reference to field require_symbols of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) RequireSymbols() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("require_symbols"))
}

// RequireUppercaseCharacters returns a reference to field require_uppercase_characters of aws_iam_account_password_policy.
func (iapp iamAccountPasswordPolicyAttributes) RequireUppercaseCharacters() terra.BoolValue {
	return terra.ReferenceAsBool(iapp.ref.Append("require_uppercase_characters"))
}

type iamAccountPasswordPolicyState struct {
	AllowUsersToChangePassword bool    `json:"allow_users_to_change_password"`
	ExpirePasswords            bool    `json:"expire_passwords"`
	HardExpiry                 bool    `json:"hard_expiry"`
	Id                         string  `json:"id"`
	MaxPasswordAge             float64 `json:"max_password_age"`
	MinimumPasswordLength      float64 `json:"minimum_password_length"`
	PasswordReusePrevention    float64 `json:"password_reuse_prevention"`
	RequireLowercaseCharacters bool    `json:"require_lowercase_characters"`
	RequireNumbers             bool    `json:"require_numbers"`
	RequireSymbols             bool    `json:"require_symbols"`
	RequireUppercaseCharacters bool    `json:"require_uppercase_characters"`
}
