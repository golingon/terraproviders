// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewKinesisResourcePolicy creates a new instance of [KinesisResourcePolicy].
func NewKinesisResourcePolicy(name string, args KinesisResourcePolicyArgs) *KinesisResourcePolicy {
	return &KinesisResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KinesisResourcePolicy)(nil)

// KinesisResourcePolicy represents the Terraform resource aws_kinesis_resource_policy.
type KinesisResourcePolicy struct {
	Name      string
	Args      KinesisResourcePolicyArgs
	state     *kinesisResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) Type() string {
	return "aws_kinesis_resource_policy"
}

// LocalName returns the local name for [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) LocalName() string {
	return krp.Name
}

// Configuration returns the configuration (args) for [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) Configuration() interface{} {
	return krp.Args
}

// DependOn is used for other resources to depend on [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(krp)
}

// Dependencies returns the list of resources [KinesisResourcePolicy] depends_on.
func (krp *KinesisResourcePolicy) Dependencies() terra.Dependencies {
	return krp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) LifecycleManagement() *terra.Lifecycle {
	return krp.Lifecycle
}

// Attributes returns the attributes for [KinesisResourcePolicy].
func (krp *KinesisResourcePolicy) Attributes() kinesisResourcePolicyAttributes {
	return kinesisResourcePolicyAttributes{ref: terra.ReferenceResource(krp)}
}

// ImportState imports the given attribute values into [KinesisResourcePolicy]'s state.
func (krp *KinesisResourcePolicy) ImportState(av io.Reader) error {
	krp.state = &kinesisResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(krp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", krp.Type(), krp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KinesisResourcePolicy] has state.
func (krp *KinesisResourcePolicy) State() (*kinesisResourcePolicyState, bool) {
	return krp.state, krp.state != nil
}

// StateMust returns the state for [KinesisResourcePolicy]. Panics if the state is nil.
func (krp *KinesisResourcePolicy) StateMust() *kinesisResourcePolicyState {
	if krp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", krp.Type(), krp.LocalName()))
	}
	return krp.state
}

// KinesisResourcePolicyArgs contains the configurations for aws_kinesis_resource_policy.
type KinesisResourcePolicyArgs struct {
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}
type kinesisResourcePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_kinesis_resource_policy.
func (krp kinesisResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(krp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_kinesis_resource_policy.
func (krp kinesisResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(krp.ref.Append("policy"))
}

// ResourceArn returns a reference to field resource_arn of aws_kinesis_resource_policy.
func (krp kinesisResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(krp.ref.Append("resource_arn"))
}

type kinesisResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
