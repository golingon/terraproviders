// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datasignersigningjob

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RevocationRecord struct{}

type SignedObject struct {
	// SignedObjectS3: min=0
	S3 []SignedObjectS3 `hcl:"s3,block" validate:"min=0"`
}

type SignedObjectS3 struct{}

type Source struct {
	// SourceS3: min=0
	S3 []SourceS3 `hcl:"s3,block" validate:"min=0"`
}

type SourceS3 struct{}

type RevocationRecordAttributes struct {
	ref terra.Reference
}

func (rr RevocationRecordAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RevocationRecordAttributes) InternalWithRef(ref terra.Reference) RevocationRecordAttributes {
	return RevocationRecordAttributes{ref: ref}
}

func (rr RevocationRecordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RevocationRecordAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("reason"))
}

func (rr RevocationRecordAttributes) RevokedAt() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_at"))
}

func (rr RevocationRecordAttributes) RevokedBy() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_by"))
}

type SignedObjectAttributes struct {
	ref terra.Reference
}

func (so SignedObjectAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so SignedObjectAttributes) InternalWithRef(ref terra.Reference) SignedObjectAttributes {
	return SignedObjectAttributes{ref: ref}
}

func (so SignedObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so SignedObjectAttributes) S3() terra.ListValue[SignedObjectS3Attributes] {
	return terra.ReferenceAsList[SignedObjectS3Attributes](so.ref.Append("s3"))
}

type SignedObjectS3Attributes struct {
	ref terra.Reference
}

func (s SignedObjectS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SignedObjectS3Attributes) InternalWithRef(ref terra.Reference) SignedObjectS3Attributes {
	return SignedObjectS3Attributes{ref: ref}
}

func (s SignedObjectS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SignedObjectS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s SignedObjectS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) S3() terra.ListValue[SourceS3Attributes] {
	return terra.ReferenceAsList[SourceS3Attributes](s.ref.Append("s3"))
}

type SourceS3Attributes struct {
	ref terra.Reference
}

func (s SourceS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceS3Attributes) InternalWithRef(ref terra.Reference) SourceS3Attributes {
	return SourceS3Attributes{ref: ref}
}

func (s SourceS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s SourceS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s SourceS3Attributes) Version() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("version"))
}

type RevocationRecordState struct {
	Reason    string `json:"reason"`
	RevokedAt string `json:"revoked_at"`
	RevokedBy string `json:"revoked_by"`
}

type SignedObjectState struct {
	S3 []SignedObjectS3State `json:"s3"`
}

type SignedObjectS3State struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type SourceState struct {
	S3 []SourceS3State `json:"s3"`
}

type SourceS3State struct {
	Bucket  string `json:"bucket"`
	Key     string `json:"key"`
	Version string `json:"version"`
}
