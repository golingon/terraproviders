// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	opensearchpackageassociation "github.com/golingon/terraproviders/aws/5.44.0/opensearchpackageassociation"
	"io"
)

// NewOpensearchPackageAssociation creates a new instance of [OpensearchPackageAssociation].
func NewOpensearchPackageAssociation(name string, args OpensearchPackageAssociationArgs) *OpensearchPackageAssociation {
	return &OpensearchPackageAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpensearchPackageAssociation)(nil)

// OpensearchPackageAssociation represents the Terraform resource aws_opensearch_package_association.
type OpensearchPackageAssociation struct {
	Name      string
	Args      OpensearchPackageAssociationArgs
	state     *opensearchPackageAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) Type() string {
	return "aws_opensearch_package_association"
}

// LocalName returns the local name for [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) LocalName() string {
	return opa.Name
}

// Configuration returns the configuration (args) for [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) Configuration() interface{} {
	return opa.Args
}

// DependOn is used for other resources to depend on [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(opa)
}

// Dependencies returns the list of resources [OpensearchPackageAssociation] depends_on.
func (opa *OpensearchPackageAssociation) Dependencies() terra.Dependencies {
	return opa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) LifecycleManagement() *terra.Lifecycle {
	return opa.Lifecycle
}

// Attributes returns the attributes for [OpensearchPackageAssociation].
func (opa *OpensearchPackageAssociation) Attributes() opensearchPackageAssociationAttributes {
	return opensearchPackageAssociationAttributes{ref: terra.ReferenceResource(opa)}
}

// ImportState imports the given attribute values into [OpensearchPackageAssociation]'s state.
func (opa *OpensearchPackageAssociation) ImportState(av io.Reader) error {
	opa.state = &opensearchPackageAssociationState{}
	if err := json.NewDecoder(av).Decode(opa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", opa.Type(), opa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [OpensearchPackageAssociation] has state.
func (opa *OpensearchPackageAssociation) State() (*opensearchPackageAssociationState, bool) {
	return opa.state, opa.state != nil
}

// StateMust returns the state for [OpensearchPackageAssociation]. Panics if the state is nil.
func (opa *OpensearchPackageAssociation) StateMust() *opensearchPackageAssociationState {
	if opa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", opa.Type(), opa.LocalName()))
	}
	return opa.state
}

// OpensearchPackageAssociationArgs contains the configurations for aws_opensearch_package_association.
type OpensearchPackageAssociationArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageId: string, required
	PackageId terra.StringValue `hcl:"package_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *opensearchpackageassociation.Timeouts `hcl:"timeouts,block"`
}
type opensearchPackageAssociationAttributes struct {
	ref terra.Reference
}

// DomainName returns a reference to field domain_name of aws_opensearch_package_association.
func (opa opensearchPackageAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(opa.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_opensearch_package_association.
func (opa opensearchPackageAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(opa.ref.Append("id"))
}

// PackageId returns a reference to field package_id of aws_opensearch_package_association.
func (opa opensearchPackageAssociationAttributes) PackageId() terra.StringValue {
	return terra.ReferenceAsString(opa.ref.Append("package_id"))
}

// ReferencePath returns a reference to field reference_path of aws_opensearch_package_association.
func (opa opensearchPackageAssociationAttributes) ReferencePath() terra.StringValue {
	return terra.ReferenceAsString(opa.ref.Append("reference_path"))
}

func (opa opensearchPackageAssociationAttributes) Timeouts() opensearchpackageassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[opensearchpackageassociation.TimeoutsAttributes](opa.ref.Append("timeouts"))
}

type opensearchPackageAssociationState struct {
	DomainName    string                                      `json:"domain_name"`
	Id            string                                      `json:"id"`
	PackageId     string                                      `json:"package_id"`
	ReferencePath string                                      `json:"reference_path"`
	Timeouts      *opensearchpackageassociation.TimeoutsState `json:"timeouts"`
}
