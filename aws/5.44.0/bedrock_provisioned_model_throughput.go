// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	bedrockprovisionedmodelthroughput "github.com/golingon/terraproviders/aws/5.44.0/bedrockprovisionedmodelthroughput"
	"io"
)

// NewBedrockProvisionedModelThroughput creates a new instance of [BedrockProvisionedModelThroughput].
func NewBedrockProvisionedModelThroughput(name string, args BedrockProvisionedModelThroughputArgs) *BedrockProvisionedModelThroughput {
	return &BedrockProvisionedModelThroughput{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BedrockProvisionedModelThroughput)(nil)

// BedrockProvisionedModelThroughput represents the Terraform resource aws_bedrock_provisioned_model_throughput.
type BedrockProvisionedModelThroughput struct {
	Name      string
	Args      BedrockProvisionedModelThroughputArgs
	state     *bedrockProvisionedModelThroughputState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) Type() string {
	return "aws_bedrock_provisioned_model_throughput"
}

// LocalName returns the local name for [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) LocalName() string {
	return bpmt.Name
}

// Configuration returns the configuration (args) for [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) Configuration() interface{} {
	return bpmt.Args
}

// DependOn is used for other resources to depend on [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) DependOn() terra.Reference {
	return terra.ReferenceResource(bpmt)
}

// Dependencies returns the list of resources [BedrockProvisionedModelThroughput] depends_on.
func (bpmt *BedrockProvisionedModelThroughput) Dependencies() terra.Dependencies {
	return bpmt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) LifecycleManagement() *terra.Lifecycle {
	return bpmt.Lifecycle
}

// Attributes returns the attributes for [BedrockProvisionedModelThroughput].
func (bpmt *BedrockProvisionedModelThroughput) Attributes() bedrockProvisionedModelThroughputAttributes {
	return bedrockProvisionedModelThroughputAttributes{ref: terra.ReferenceResource(bpmt)}
}

// ImportState imports the given attribute values into [BedrockProvisionedModelThroughput]'s state.
func (bpmt *BedrockProvisionedModelThroughput) ImportState(av io.Reader) error {
	bpmt.state = &bedrockProvisionedModelThroughputState{}
	if err := json.NewDecoder(av).Decode(bpmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bpmt.Type(), bpmt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BedrockProvisionedModelThroughput] has state.
func (bpmt *BedrockProvisionedModelThroughput) State() (*bedrockProvisionedModelThroughputState, bool) {
	return bpmt.state, bpmt.state != nil
}

// StateMust returns the state for [BedrockProvisionedModelThroughput]. Panics if the state is nil.
func (bpmt *BedrockProvisionedModelThroughput) StateMust() *bedrockProvisionedModelThroughputState {
	if bpmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bpmt.Type(), bpmt.LocalName()))
	}
	return bpmt.state
}

// BedrockProvisionedModelThroughputArgs contains the configurations for aws_bedrock_provisioned_model_throughput.
type BedrockProvisionedModelThroughputArgs struct {
	// CommitmentDuration: string, optional
	CommitmentDuration terra.StringValue `hcl:"commitment_duration,attr"`
	// ModelArn: string, required
	ModelArn terra.StringValue `hcl:"model_arn,attr" validate:"required"`
	// ModelUnits: number, required
	ModelUnits terra.NumberValue `hcl:"model_units,attr" validate:"required"`
	// ProvisionedModelName: string, required
	ProvisionedModelName terra.StringValue `hcl:"provisioned_model_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *bedrockprovisionedmodelthroughput.Timeouts `hcl:"timeouts,block"`
}
type bedrockProvisionedModelThroughputAttributes struct {
	ref terra.Reference
}

// CommitmentDuration returns a reference to field commitment_duration of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) CommitmentDuration() terra.StringValue {
	return terra.ReferenceAsString(bpmt.ref.Append("commitment_duration"))
}

// Id returns a reference to field id of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bpmt.ref.Append("id"))
}

// ModelArn returns a reference to field model_arn of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) ModelArn() terra.StringValue {
	return terra.ReferenceAsString(bpmt.ref.Append("model_arn"))
}

// ModelUnits returns a reference to field model_units of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) ModelUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(bpmt.ref.Append("model_units"))
}

// ProvisionedModelArn returns a reference to field provisioned_model_arn of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) ProvisionedModelArn() terra.StringValue {
	return terra.ReferenceAsString(bpmt.ref.Append("provisioned_model_arn"))
}

// ProvisionedModelName returns a reference to field provisioned_model_name of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) ProvisionedModelName() terra.StringValue {
	return terra.ReferenceAsString(bpmt.ref.Append("provisioned_model_name"))
}

// Tags returns a reference to field tags of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bpmt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_bedrock_provisioned_model_throughput.
func (bpmt bedrockProvisionedModelThroughputAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bpmt.ref.Append("tags_all"))
}

func (bpmt bedrockProvisionedModelThroughputAttributes) Timeouts() bedrockprovisionedmodelthroughput.TimeoutsAttributes {
	return terra.ReferenceAsSingle[bedrockprovisionedmodelthroughput.TimeoutsAttributes](bpmt.ref.Append("timeouts"))
}

type bedrockProvisionedModelThroughputState struct {
	CommitmentDuration   string                                           `json:"commitment_duration"`
	Id                   string                                           `json:"id"`
	ModelArn             string                                           `json:"model_arn"`
	ModelUnits           float64                                          `json:"model_units"`
	ProvisionedModelArn  string                                           `json:"provisioned_model_arn"`
	ProvisionedModelName string                                           `json:"provisioned_model_name"`
	Tags                 map[string]string                                `json:"tags"`
	TagsAll              map[string]string                                `json:"tags_all"`
	Timeouts             *bedrockprovisionedmodelthroughput.TimeoutsState `json:"timeouts"`
}
