// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitylakecustomlogsource "github.com/golingon/terraproviders/aws/5.44.0/securitylakecustomlogsource"
	"io"
)

// NewSecuritylakeCustomLogSource creates a new instance of [SecuritylakeCustomLogSource].
func NewSecuritylakeCustomLogSource(name string, args SecuritylakeCustomLogSourceArgs) *SecuritylakeCustomLogSource {
	return &SecuritylakeCustomLogSource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecuritylakeCustomLogSource)(nil)

// SecuritylakeCustomLogSource represents the Terraform resource aws_securitylake_custom_log_source.
type SecuritylakeCustomLogSource struct {
	Name      string
	Args      SecuritylakeCustomLogSourceArgs
	state     *securitylakeCustomLogSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) Type() string {
	return "aws_securitylake_custom_log_source"
}

// LocalName returns the local name for [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) LocalName() string {
	return scls.Name
}

// Configuration returns the configuration (args) for [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) Configuration() interface{} {
	return scls.Args
}

// DependOn is used for other resources to depend on [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) DependOn() terra.Reference {
	return terra.ReferenceResource(scls)
}

// Dependencies returns the list of resources [SecuritylakeCustomLogSource] depends_on.
func (scls *SecuritylakeCustomLogSource) Dependencies() terra.Dependencies {
	return scls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) LifecycleManagement() *terra.Lifecycle {
	return scls.Lifecycle
}

// Attributes returns the attributes for [SecuritylakeCustomLogSource].
func (scls *SecuritylakeCustomLogSource) Attributes() securitylakeCustomLogSourceAttributes {
	return securitylakeCustomLogSourceAttributes{ref: terra.ReferenceResource(scls)}
}

// ImportState imports the given attribute values into [SecuritylakeCustomLogSource]'s state.
func (scls *SecuritylakeCustomLogSource) ImportState(av io.Reader) error {
	scls.state = &securitylakeCustomLogSourceState{}
	if err := json.NewDecoder(av).Decode(scls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scls.Type(), scls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecuritylakeCustomLogSource] has state.
func (scls *SecuritylakeCustomLogSource) State() (*securitylakeCustomLogSourceState, bool) {
	return scls.state, scls.state != nil
}

// StateMust returns the state for [SecuritylakeCustomLogSource]. Panics if the state is nil.
func (scls *SecuritylakeCustomLogSource) StateMust() *securitylakeCustomLogSourceState {
	if scls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scls.Type(), scls.LocalName()))
	}
	return scls.state
}

// SecuritylakeCustomLogSourceArgs contains the configurations for aws_securitylake_custom_log_source.
type SecuritylakeCustomLogSourceArgs struct {
	// EventClasses: set of string, optional
	EventClasses terra.SetValue[terra.StringValue] `hcl:"event_classes,attr"`
	// SourceName: string, required
	SourceName terra.StringValue `hcl:"source_name,attr" validate:"required"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
	// Attributes: min=0
	Attributes []securitylakecustomlogsource.Attributes `hcl:"attributes,block" validate:"min=0"`
	// ProviderDetails: min=0
	ProviderDetails []securitylakecustomlogsource.ProviderDetails `hcl:"provider_details,block" validate:"min=0"`
	// Configuration: min=0
	Configuration []securitylakecustomlogsource.Configuration `hcl:"configuration,block" validate:"min=0"`
}
type securitylakeCustomLogSourceAttributes struct {
	ref terra.Reference
}

// EventClasses returns a reference to field event_classes of aws_securitylake_custom_log_source.
func (scls securitylakeCustomLogSourceAttributes) EventClasses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](scls.ref.Append("event_classes"))
}

// Id returns a reference to field id of aws_securitylake_custom_log_source.
func (scls securitylakeCustomLogSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scls.ref.Append("id"))
}

// SourceName returns a reference to field source_name of aws_securitylake_custom_log_source.
func (scls securitylakeCustomLogSourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(scls.ref.Append("source_name"))
}

// SourceVersion returns a reference to field source_version of aws_securitylake_custom_log_source.
func (scls securitylakeCustomLogSourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(scls.ref.Append("source_version"))
}

func (scls securitylakeCustomLogSourceAttributes) Attributes() terra.ListValue[securitylakecustomlogsource.AttributesAttributes] {
	return terra.ReferenceAsList[securitylakecustomlogsource.AttributesAttributes](scls.ref.Append("attributes"))
}

func (scls securitylakeCustomLogSourceAttributes) ProviderDetails() terra.ListValue[securitylakecustomlogsource.ProviderDetailsAttributes] {
	return terra.ReferenceAsList[securitylakecustomlogsource.ProviderDetailsAttributes](scls.ref.Append("provider_details"))
}

func (scls securitylakeCustomLogSourceAttributes) Configuration() terra.ListValue[securitylakecustomlogsource.ConfigurationAttributes] {
	return terra.ReferenceAsList[securitylakecustomlogsource.ConfigurationAttributes](scls.ref.Append("configuration"))
}

type securitylakeCustomLogSourceState struct {
	EventClasses    []string                                           `json:"event_classes"`
	Id              string                                             `json:"id"`
	SourceName      string                                             `json:"source_name"`
	SourceVersion   string                                             `json:"source_version"`
	Attributes      []securitylakecustomlogsource.AttributesState      `json:"attributes"`
	ProviderDetails []securitylakecustomlogsource.ProviderDetailsState `json:"provider_details"`
	Configuration   []securitylakecustomlogsource.ConfigurationState   `json:"configuration"`
}
