// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package databedrockcustommodel

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type OutputDataConfig struct{}

type TrainingDataConfig struct{}

type TrainingMetrics struct{}

type ValidationDataConfig struct {
	// Validator: min=0
	Validator []Validator `hcl:"validator,block" validate:"min=0"`
}

type Validator struct{}

type ValidationMetrics struct{}

type OutputDataConfigAttributes struct {
	ref terra.Reference
}

func (odc OutputDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return odc.ref, nil
}

func (odc OutputDataConfigAttributes) InternalWithRef(ref terra.Reference) OutputDataConfigAttributes {
	return OutputDataConfigAttributes{ref: ref}
}

func (odc OutputDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return odc.ref.InternalTokens()
}

func (odc OutputDataConfigAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(odc.ref.Append("s3_uri"))
}

type TrainingDataConfigAttributes struct {
	ref terra.Reference
}

func (tdc TrainingDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return tdc.ref, nil
}

func (tdc TrainingDataConfigAttributes) InternalWithRef(ref terra.Reference) TrainingDataConfigAttributes {
	return TrainingDataConfigAttributes{ref: ref}
}

func (tdc TrainingDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tdc.ref.InternalTokens()
}

func (tdc TrainingDataConfigAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(tdc.ref.Append("s3_uri"))
}

type TrainingMetricsAttributes struct {
	ref terra.Reference
}

func (tm TrainingMetricsAttributes) InternalRef() (terra.Reference, error) {
	return tm.ref, nil
}

func (tm TrainingMetricsAttributes) InternalWithRef(ref terra.Reference) TrainingMetricsAttributes {
	return TrainingMetricsAttributes{ref: ref}
}

func (tm TrainingMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tm.ref.InternalTokens()
}

func (tm TrainingMetricsAttributes) TrainingLoss() terra.NumberValue {
	return terra.ReferenceAsNumber(tm.ref.Append("training_loss"))
}

type ValidationDataConfigAttributes struct {
	ref terra.Reference
}

func (vdc ValidationDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return vdc.ref, nil
}

func (vdc ValidationDataConfigAttributes) InternalWithRef(ref terra.Reference) ValidationDataConfigAttributes {
	return ValidationDataConfigAttributes{ref: ref}
}

func (vdc ValidationDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vdc.ref.InternalTokens()
}

func (vdc ValidationDataConfigAttributes) Validator() terra.ListValue[ValidatorAttributes] {
	return terra.ReferenceAsList[ValidatorAttributes](vdc.ref.Append("validator"))
}

type ValidatorAttributes struct {
	ref terra.Reference
}

func (v ValidatorAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValidatorAttributes) InternalWithRef(ref terra.Reference) ValidatorAttributes {
	return ValidatorAttributes{ref: ref}
}

func (v ValidatorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValidatorAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("s3_uri"))
}

type ValidationMetricsAttributes struct {
	ref terra.Reference
}

func (vm ValidationMetricsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm ValidationMetricsAttributes) InternalWithRef(ref terra.Reference) ValidationMetricsAttributes {
	return ValidationMetricsAttributes{ref: ref}
}

func (vm ValidationMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm ValidationMetricsAttributes) ValidationLoss() terra.NumberValue {
	return terra.ReferenceAsNumber(vm.ref.Append("validation_loss"))
}

type OutputDataConfigState struct {
	S3Uri string `json:"s3_uri"`
}

type TrainingDataConfigState struct {
	S3Uri string `json:"s3_uri"`
}

type TrainingMetricsState struct {
	TrainingLoss float64 `json:"training_loss"`
}

type ValidationDataConfigState struct {
	Validator []ValidatorState `json:"validator"`
}

type ValidatorState struct {
	S3Uri string `json:"s3_uri"`
}

type ValidationMetricsState struct {
	ValidationLoss float64 `json:"validation_loss"`
}
