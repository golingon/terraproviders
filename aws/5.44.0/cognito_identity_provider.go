// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewCognitoIdentityProvider creates a new instance of [CognitoIdentityProvider].
func NewCognitoIdentityProvider(name string, args CognitoIdentityProviderArgs) *CognitoIdentityProvider {
	return &CognitoIdentityProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CognitoIdentityProvider)(nil)

// CognitoIdentityProvider represents the Terraform resource aws_cognito_identity_provider.
type CognitoIdentityProvider struct {
	Name      string
	Args      CognitoIdentityProviderArgs
	state     *cognitoIdentityProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) Type() string {
	return "aws_cognito_identity_provider"
}

// LocalName returns the local name for [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) LocalName() string {
	return cip.Name
}

// Configuration returns the configuration (args) for [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) Configuration() interface{} {
	return cip.Args
}

// DependOn is used for other resources to depend on [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(cip)
}

// Dependencies returns the list of resources [CognitoIdentityProvider] depends_on.
func (cip *CognitoIdentityProvider) Dependencies() terra.Dependencies {
	return cip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) LifecycleManagement() *terra.Lifecycle {
	return cip.Lifecycle
}

// Attributes returns the attributes for [CognitoIdentityProvider].
func (cip *CognitoIdentityProvider) Attributes() cognitoIdentityProviderAttributes {
	return cognitoIdentityProviderAttributes{ref: terra.ReferenceResource(cip)}
}

// ImportState imports the given attribute values into [CognitoIdentityProvider]'s state.
func (cip *CognitoIdentityProvider) ImportState(av io.Reader) error {
	cip.state = &cognitoIdentityProviderState{}
	if err := json.NewDecoder(av).Decode(cip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cip.Type(), cip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CognitoIdentityProvider] has state.
func (cip *CognitoIdentityProvider) State() (*cognitoIdentityProviderState, bool) {
	return cip.state, cip.state != nil
}

// StateMust returns the state for [CognitoIdentityProvider]. Panics if the state is nil.
func (cip *CognitoIdentityProvider) StateMust() *cognitoIdentityProviderState {
	if cip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cip.Type(), cip.LocalName()))
	}
	return cip.state
}

// CognitoIdentityProviderArgs contains the configurations for aws_cognito_identity_provider.
type CognitoIdentityProviderArgs struct {
	// AttributeMapping: map of string, optional
	AttributeMapping terra.MapValue[terra.StringValue] `hcl:"attribute_mapping,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpIdentifiers: list of string, optional
	IdpIdentifiers terra.ListValue[terra.StringValue] `hcl:"idp_identifiers,attr"`
	// ProviderDetails: map of string, required
	ProviderDetails terra.MapValue[terra.StringValue] `hcl:"provider_details,attr" validate:"required"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}
type cognitoIdentityProviderAttributes struct {
	ref terra.Reference
}

// AttributeMapping returns a reference to field attribute_mapping of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) AttributeMapping() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cip.ref.Append("attribute_mapping"))
}

// Id returns a reference to field id of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cip.ref.Append("id"))
}

// IdpIdentifiers returns a reference to field idp_identifiers of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) IdpIdentifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cip.ref.Append("idp_identifiers"))
}

// ProviderDetails returns a reference to field provider_details of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) ProviderDetails() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cip.ref.Append("provider_details"))
}

// ProviderName returns a reference to field provider_name of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(cip.ref.Append("provider_name"))
}

// ProviderType returns a reference to field provider_type of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(cip.ref.Append("provider_type"))
}

// UserPoolId returns a reference to field user_pool_id of aws_cognito_identity_provider.
func (cip cognitoIdentityProviderAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(cip.ref.Append("user_pool_id"))
}

type cognitoIdentityProviderState struct {
	AttributeMapping map[string]string `json:"attribute_mapping"`
	Id               string            `json:"id"`
	IdpIdentifiers   []string          `json:"idp_identifiers"`
	ProviderDetails  map[string]string `json:"provider_details"`
	ProviderName     string            `json:"provider_name"`
	ProviderType     string            `json:"provider_type"`
	UserPoolId       string            `json:"user_pool_id"`
}
