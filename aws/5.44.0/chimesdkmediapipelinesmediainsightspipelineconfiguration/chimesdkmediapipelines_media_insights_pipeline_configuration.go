// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package chimesdkmediapipelinesmediainsightspipelineconfiguration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Elements struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AmazonTranscribeCallAnalyticsProcessorConfiguration: optional
	AmazonTranscribeCallAnalyticsProcessorConfiguration *AmazonTranscribeCallAnalyticsProcessorConfiguration `hcl:"amazon_transcribe_call_analytics_processor_configuration,block"`
	// AmazonTranscribeProcessorConfiguration: optional
	AmazonTranscribeProcessorConfiguration *AmazonTranscribeProcessorConfiguration `hcl:"amazon_transcribe_processor_configuration,block"`
	// KinesisDataStreamSinkConfiguration: optional
	KinesisDataStreamSinkConfiguration *KinesisDataStreamSinkConfiguration `hcl:"kinesis_data_stream_sink_configuration,block"`
	// LambdaFunctionSinkConfiguration: optional
	LambdaFunctionSinkConfiguration *LambdaFunctionSinkConfiguration `hcl:"lambda_function_sink_configuration,block"`
	// S3RecordingSinkConfiguration: optional
	S3RecordingSinkConfiguration *S3RecordingSinkConfiguration `hcl:"s3_recording_sink_configuration,block"`
	// SnsTopicSinkConfiguration: optional
	SnsTopicSinkConfiguration *SnsTopicSinkConfiguration `hcl:"sns_topic_sink_configuration,block"`
	// SqsQueueSinkConfiguration: optional
	SqsQueueSinkConfiguration *SqsQueueSinkConfiguration `hcl:"sqs_queue_sink_configuration,block"`
	// VoiceAnalyticsProcessorConfiguration: optional
	VoiceAnalyticsProcessorConfiguration *VoiceAnalyticsProcessorConfiguration `hcl:"voice_analytics_processor_configuration,block"`
}

type AmazonTranscribeCallAnalyticsProcessorConfiguration struct {
	// CallAnalyticsStreamCategories: list of string, optional
	CallAnalyticsStreamCategories terra.ListValue[terra.StringValue] `hcl:"call_analytics_stream_categories,attr"`
	// ContentIdentificationType: string, optional
	ContentIdentificationType terra.StringValue `hcl:"content_identification_type,attr"`
	// ContentRedactionType: string, optional
	ContentRedactionType terra.StringValue `hcl:"content_redaction_type,attr"`
	// EnablePartialResultsStabilization: bool, optional
	EnablePartialResultsStabilization terra.BoolValue `hcl:"enable_partial_results_stabilization,attr"`
	// FilterPartialResults: bool, optional
	FilterPartialResults terra.BoolValue `hcl:"filter_partial_results,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// LanguageModelName: string, optional
	LanguageModelName terra.StringValue `hcl:"language_model_name,attr"`
	// PartialResultsStability: string, optional
	PartialResultsStability terra.StringValue `hcl:"partial_results_stability,attr"`
	// PiiEntityTypes: string, optional
	PiiEntityTypes terra.StringValue `hcl:"pii_entity_types,attr"`
	// VocabularyFilterMethod: string, optional
	VocabularyFilterMethod terra.StringValue `hcl:"vocabulary_filter_method,attr"`
	// VocabularyFilterName: string, optional
	VocabularyFilterName terra.StringValue `hcl:"vocabulary_filter_name,attr"`
	// VocabularyName: string, optional
	VocabularyName terra.StringValue `hcl:"vocabulary_name,attr"`
	// PostCallAnalyticsSettings: optional
	PostCallAnalyticsSettings *PostCallAnalyticsSettings `hcl:"post_call_analytics_settings,block"`
}

type PostCallAnalyticsSettings struct {
	// ContentRedactionOutput: string, optional
	ContentRedactionOutput terra.StringValue `hcl:"content_redaction_output,attr"`
	// DataAccessRoleArn: string, required
	DataAccessRoleArn terra.StringValue `hcl:"data_access_role_arn,attr" validate:"required"`
	// OutputEncryptionKmsKeyId: string, optional
	OutputEncryptionKmsKeyId terra.StringValue `hcl:"output_encryption_kms_key_id,attr"`
	// OutputLocation: string, required
	OutputLocation terra.StringValue `hcl:"output_location,attr" validate:"required"`
}

type AmazonTranscribeProcessorConfiguration struct {
	// ContentIdentificationType: string, optional
	ContentIdentificationType terra.StringValue `hcl:"content_identification_type,attr"`
	// ContentRedactionType: string, optional
	ContentRedactionType terra.StringValue `hcl:"content_redaction_type,attr"`
	// EnablePartialResultsStabilization: bool, optional
	EnablePartialResultsStabilization terra.BoolValue `hcl:"enable_partial_results_stabilization,attr"`
	// FilterPartialResults: bool, optional
	FilterPartialResults terra.BoolValue `hcl:"filter_partial_results,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// LanguageModelName: string, optional
	LanguageModelName terra.StringValue `hcl:"language_model_name,attr"`
	// PartialResultsStability: string, optional
	PartialResultsStability terra.StringValue `hcl:"partial_results_stability,attr"`
	// PiiEntityTypes: string, optional
	PiiEntityTypes terra.StringValue `hcl:"pii_entity_types,attr"`
	// ShowSpeakerLabel: bool, optional
	ShowSpeakerLabel terra.BoolValue `hcl:"show_speaker_label,attr"`
	// VocabularyFilterMethod: string, optional
	VocabularyFilterMethod terra.StringValue `hcl:"vocabulary_filter_method,attr"`
	// VocabularyFilterName: string, optional
	VocabularyFilterName terra.StringValue `hcl:"vocabulary_filter_name,attr"`
	// VocabularyName: string, optional
	VocabularyName terra.StringValue `hcl:"vocabulary_name,attr"`
}

type KinesisDataStreamSinkConfiguration struct {
	// InsightsTarget: string, required
	InsightsTarget terra.StringValue `hcl:"insights_target,attr" validate:"required"`
}

type LambdaFunctionSinkConfiguration struct {
	// InsightsTarget: string, required
	InsightsTarget terra.StringValue `hcl:"insights_target,attr" validate:"required"`
}

type S3RecordingSinkConfiguration struct {
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
}

type SnsTopicSinkConfiguration struct {
	// InsightsTarget: string, required
	InsightsTarget terra.StringValue `hcl:"insights_target,attr" validate:"required"`
}

type SqsQueueSinkConfiguration struct {
	// InsightsTarget: string, required
	InsightsTarget terra.StringValue `hcl:"insights_target,attr" validate:"required"`
}

type VoiceAnalyticsProcessorConfiguration struct {
	// SpeakerSearchStatus: string, required
	SpeakerSearchStatus terra.StringValue `hcl:"speaker_search_status,attr" validate:"required"`
	// VoiceToneAnalysisStatus: string, required
	VoiceToneAnalysisStatus terra.StringValue `hcl:"voice_tone_analysis_status,attr" validate:"required"`
}

type RealTimeAlertConfiguration struct {
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Rules: min=1,max=3
	Rules []Rules `hcl:"rules,block" validate:"min=1,max=3"`
}

type Rules struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// IssueDetectionConfiguration: optional
	IssueDetectionConfiguration *IssueDetectionConfiguration `hcl:"issue_detection_configuration,block"`
	// KeywordMatchConfiguration: optional
	KeywordMatchConfiguration *KeywordMatchConfiguration `hcl:"keyword_match_configuration,block"`
	// SentimentConfiguration: optional
	SentimentConfiguration *SentimentConfiguration `hcl:"sentiment_configuration,block"`
}

type IssueDetectionConfiguration struct {
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
}

type KeywordMatchConfiguration struct {
	// Keywords: list of string, required
	Keywords terra.ListValue[terra.StringValue] `hcl:"keywords,attr" validate:"required"`
	// Negate: bool, optional
	Negate terra.BoolValue `hcl:"negate,attr"`
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
}

type SentimentConfiguration struct {
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// SentimentType: string, required
	SentimentType terra.StringValue `hcl:"sentiment_type,attr" validate:"required"`
	// TimePeriod: number, required
	TimePeriod terra.NumberValue `hcl:"time_period,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ElementsAttributes struct {
	ref terra.Reference
}

func (e ElementsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ElementsAttributes) InternalWithRef(ref terra.Reference) ElementsAttributes {
	return ElementsAttributes{ref: ref}
}

func (e ElementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ElementsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e ElementsAttributes) AmazonTranscribeCallAnalyticsProcessorConfiguration() terra.ListValue[AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes] {
	return terra.ReferenceAsList[AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes](e.ref.Append("amazon_transcribe_call_analytics_processor_configuration"))
}

func (e ElementsAttributes) AmazonTranscribeProcessorConfiguration() terra.ListValue[AmazonTranscribeProcessorConfigurationAttributes] {
	return terra.ReferenceAsList[AmazonTranscribeProcessorConfigurationAttributes](e.ref.Append("amazon_transcribe_processor_configuration"))
}

func (e ElementsAttributes) KinesisDataStreamSinkConfiguration() terra.ListValue[KinesisDataStreamSinkConfigurationAttributes] {
	return terra.ReferenceAsList[KinesisDataStreamSinkConfigurationAttributes](e.ref.Append("kinesis_data_stream_sink_configuration"))
}

func (e ElementsAttributes) LambdaFunctionSinkConfiguration() terra.ListValue[LambdaFunctionSinkConfigurationAttributes] {
	return terra.ReferenceAsList[LambdaFunctionSinkConfigurationAttributes](e.ref.Append("lambda_function_sink_configuration"))
}

func (e ElementsAttributes) S3RecordingSinkConfiguration() terra.ListValue[S3RecordingSinkConfigurationAttributes] {
	return terra.ReferenceAsList[S3RecordingSinkConfigurationAttributes](e.ref.Append("s3_recording_sink_configuration"))
}

func (e ElementsAttributes) SnsTopicSinkConfiguration() terra.ListValue[SnsTopicSinkConfigurationAttributes] {
	return terra.ReferenceAsList[SnsTopicSinkConfigurationAttributes](e.ref.Append("sns_topic_sink_configuration"))
}

func (e ElementsAttributes) SqsQueueSinkConfiguration() terra.ListValue[SqsQueueSinkConfigurationAttributes] {
	return terra.ReferenceAsList[SqsQueueSinkConfigurationAttributes](e.ref.Append("sqs_queue_sink_configuration"))
}

func (e ElementsAttributes) VoiceAnalyticsProcessorConfiguration() terra.ListValue[VoiceAnalyticsProcessorConfigurationAttributes] {
	return terra.ReferenceAsList[VoiceAnalyticsProcessorConfigurationAttributes](e.ref.Append("voice_analytics_processor_configuration"))
}

type AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes struct {
	ref terra.Reference
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return atcapc.ref, nil
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) InternalWithRef(ref terra.Reference) AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes {
	return AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes{ref: ref}
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atcapc.ref.InternalTokens()
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) CallAnalyticsStreamCategories() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](atcapc.ref.Append("call_analytics_stream_categories"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) ContentIdentificationType() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("content_identification_type"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) ContentRedactionType() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("content_redaction_type"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) EnablePartialResultsStabilization() terra.BoolValue {
	return terra.ReferenceAsBool(atcapc.ref.Append("enable_partial_results_stabilization"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) FilterPartialResults() terra.BoolValue {
	return terra.ReferenceAsBool(atcapc.ref.Append("filter_partial_results"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("language_code"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) LanguageModelName() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("language_model_name"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) PartialResultsStability() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("partial_results_stability"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) PiiEntityTypes() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("pii_entity_types"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) VocabularyFilterMethod() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("vocabulary_filter_method"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) VocabularyFilterName() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("vocabulary_filter_name"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) VocabularyName() terra.StringValue {
	return terra.ReferenceAsString(atcapc.ref.Append("vocabulary_name"))
}

func (atcapc AmazonTranscribeCallAnalyticsProcessorConfigurationAttributes) PostCallAnalyticsSettings() terra.ListValue[PostCallAnalyticsSettingsAttributes] {
	return terra.ReferenceAsList[PostCallAnalyticsSettingsAttributes](atcapc.ref.Append("post_call_analytics_settings"))
}

type PostCallAnalyticsSettingsAttributes struct {
	ref terra.Reference
}

func (pcas PostCallAnalyticsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return pcas.ref, nil
}

func (pcas PostCallAnalyticsSettingsAttributes) InternalWithRef(ref terra.Reference) PostCallAnalyticsSettingsAttributes {
	return PostCallAnalyticsSettingsAttributes{ref: ref}
}

func (pcas PostCallAnalyticsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pcas.ref.InternalTokens()
}

func (pcas PostCallAnalyticsSettingsAttributes) ContentRedactionOutput() terra.StringValue {
	return terra.ReferenceAsString(pcas.ref.Append("content_redaction_output"))
}

func (pcas PostCallAnalyticsSettingsAttributes) DataAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(pcas.ref.Append("data_access_role_arn"))
}

func (pcas PostCallAnalyticsSettingsAttributes) OutputEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(pcas.ref.Append("output_encryption_kms_key_id"))
}

func (pcas PostCallAnalyticsSettingsAttributes) OutputLocation() terra.StringValue {
	return terra.ReferenceAsString(pcas.ref.Append("output_location"))
}

type AmazonTranscribeProcessorConfigurationAttributes struct {
	ref terra.Reference
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return atpc.ref, nil
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) InternalWithRef(ref terra.Reference) AmazonTranscribeProcessorConfigurationAttributes {
	return AmazonTranscribeProcessorConfigurationAttributes{ref: ref}
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atpc.ref.InternalTokens()
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) ContentIdentificationType() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("content_identification_type"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) ContentRedactionType() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("content_redaction_type"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) EnablePartialResultsStabilization() terra.BoolValue {
	return terra.ReferenceAsBool(atpc.ref.Append("enable_partial_results_stabilization"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) FilterPartialResults() terra.BoolValue {
	return terra.ReferenceAsBool(atpc.ref.Append("filter_partial_results"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("language_code"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) LanguageModelName() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("language_model_name"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) PartialResultsStability() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("partial_results_stability"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) PiiEntityTypes() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("pii_entity_types"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) ShowSpeakerLabel() terra.BoolValue {
	return terra.ReferenceAsBool(atpc.ref.Append("show_speaker_label"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) VocabularyFilterMethod() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("vocabulary_filter_method"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) VocabularyFilterName() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("vocabulary_filter_name"))
}

func (atpc AmazonTranscribeProcessorConfigurationAttributes) VocabularyName() terra.StringValue {
	return terra.ReferenceAsString(atpc.ref.Append("vocabulary_name"))
}

type KinesisDataStreamSinkConfigurationAttributes struct {
	ref terra.Reference
}

func (kdssc KinesisDataStreamSinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return kdssc.ref, nil
}

func (kdssc KinesisDataStreamSinkConfigurationAttributes) InternalWithRef(ref terra.Reference) KinesisDataStreamSinkConfigurationAttributes {
	return KinesisDataStreamSinkConfigurationAttributes{ref: ref}
}

func (kdssc KinesisDataStreamSinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kdssc.ref.InternalTokens()
}

func (kdssc KinesisDataStreamSinkConfigurationAttributes) InsightsTarget() terra.StringValue {
	return terra.ReferenceAsString(kdssc.ref.Append("insights_target"))
}

type LambdaFunctionSinkConfigurationAttributes struct {
	ref terra.Reference
}

func (lfsc LambdaFunctionSinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lfsc.ref, nil
}

func (lfsc LambdaFunctionSinkConfigurationAttributes) InternalWithRef(ref terra.Reference) LambdaFunctionSinkConfigurationAttributes {
	return LambdaFunctionSinkConfigurationAttributes{ref: ref}
}

func (lfsc LambdaFunctionSinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lfsc.ref.InternalTokens()
}

func (lfsc LambdaFunctionSinkConfigurationAttributes) InsightsTarget() terra.StringValue {
	return terra.ReferenceAsString(lfsc.ref.Append("insights_target"))
}

type S3RecordingSinkConfigurationAttributes struct {
	ref terra.Reference
}

func (srsc S3RecordingSinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return srsc.ref, nil
}

func (srsc S3RecordingSinkConfigurationAttributes) InternalWithRef(ref terra.Reference) S3RecordingSinkConfigurationAttributes {
	return S3RecordingSinkConfigurationAttributes{ref: ref}
}

func (srsc S3RecordingSinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srsc.ref.InternalTokens()
}

func (srsc S3RecordingSinkConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(srsc.ref.Append("destination"))
}

type SnsTopicSinkConfigurationAttributes struct {
	ref terra.Reference
}

func (stsc SnsTopicSinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return stsc.ref, nil
}

func (stsc SnsTopicSinkConfigurationAttributes) InternalWithRef(ref terra.Reference) SnsTopicSinkConfigurationAttributes {
	return SnsTopicSinkConfigurationAttributes{ref: ref}
}

func (stsc SnsTopicSinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stsc.ref.InternalTokens()
}

func (stsc SnsTopicSinkConfigurationAttributes) InsightsTarget() terra.StringValue {
	return terra.ReferenceAsString(stsc.ref.Append("insights_target"))
}

type SqsQueueSinkConfigurationAttributes struct {
	ref terra.Reference
}

func (sqsc SqsQueueSinkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sqsc.ref, nil
}

func (sqsc SqsQueueSinkConfigurationAttributes) InternalWithRef(ref terra.Reference) SqsQueueSinkConfigurationAttributes {
	return SqsQueueSinkConfigurationAttributes{ref: ref}
}

func (sqsc SqsQueueSinkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqsc.ref.InternalTokens()
}

func (sqsc SqsQueueSinkConfigurationAttributes) InsightsTarget() terra.StringValue {
	return terra.ReferenceAsString(sqsc.ref.Append("insights_target"))
}

type VoiceAnalyticsProcessorConfigurationAttributes struct {
	ref terra.Reference
}

func (vapc VoiceAnalyticsProcessorConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vapc.ref, nil
}

func (vapc VoiceAnalyticsProcessorConfigurationAttributes) InternalWithRef(ref terra.Reference) VoiceAnalyticsProcessorConfigurationAttributes {
	return VoiceAnalyticsProcessorConfigurationAttributes{ref: ref}
}

func (vapc VoiceAnalyticsProcessorConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vapc.ref.InternalTokens()
}

func (vapc VoiceAnalyticsProcessorConfigurationAttributes) SpeakerSearchStatus() terra.StringValue {
	return terra.ReferenceAsString(vapc.ref.Append("speaker_search_status"))
}

func (vapc VoiceAnalyticsProcessorConfigurationAttributes) VoiceToneAnalysisStatus() terra.StringValue {
	return terra.ReferenceAsString(vapc.ref.Append("voice_tone_analysis_status"))
}

type RealTimeAlertConfigurationAttributes struct {
	ref terra.Reference
}

func (rtac RealTimeAlertConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rtac.ref, nil
}

func (rtac RealTimeAlertConfigurationAttributes) InternalWithRef(ref terra.Reference) RealTimeAlertConfigurationAttributes {
	return RealTimeAlertConfigurationAttributes{ref: ref}
}

func (rtac RealTimeAlertConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtac.ref.InternalTokens()
}

func (rtac RealTimeAlertConfigurationAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(rtac.ref.Append("disabled"))
}

func (rtac RealTimeAlertConfigurationAttributes) Rules() terra.ListValue[RulesAttributes] {
	return terra.ReferenceAsList[RulesAttributes](rtac.ref.Append("rules"))
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

func (r RulesAttributes) IssueDetectionConfiguration() terra.ListValue[IssueDetectionConfigurationAttributes] {
	return terra.ReferenceAsList[IssueDetectionConfigurationAttributes](r.ref.Append("issue_detection_configuration"))
}

func (r RulesAttributes) KeywordMatchConfiguration() terra.ListValue[KeywordMatchConfigurationAttributes] {
	return terra.ReferenceAsList[KeywordMatchConfigurationAttributes](r.ref.Append("keyword_match_configuration"))
}

func (r RulesAttributes) SentimentConfiguration() terra.ListValue[SentimentConfigurationAttributes] {
	return terra.ReferenceAsList[SentimentConfigurationAttributes](r.ref.Append("sentiment_configuration"))
}

type IssueDetectionConfigurationAttributes struct {
	ref terra.Reference
}

func (idc IssueDetectionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc IssueDetectionConfigurationAttributes) InternalWithRef(ref terra.Reference) IssueDetectionConfigurationAttributes {
	return IssueDetectionConfigurationAttributes{ref: ref}
}

func (idc IssueDetectionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc IssueDetectionConfigurationAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("rule_name"))
}

type KeywordMatchConfigurationAttributes struct {
	ref terra.Reference
}

func (kmc KeywordMatchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return kmc.ref, nil
}

func (kmc KeywordMatchConfigurationAttributes) InternalWithRef(ref terra.Reference) KeywordMatchConfigurationAttributes {
	return KeywordMatchConfigurationAttributes{ref: ref}
}

func (kmc KeywordMatchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kmc.ref.InternalTokens()
}

func (kmc KeywordMatchConfigurationAttributes) Keywords() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](kmc.ref.Append("keywords"))
}

func (kmc KeywordMatchConfigurationAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(kmc.ref.Append("negate"))
}

func (kmc KeywordMatchConfigurationAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(kmc.ref.Append("rule_name"))
}

type SentimentConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SentimentConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SentimentConfigurationAttributes) InternalWithRef(ref terra.Reference) SentimentConfigurationAttributes {
	return SentimentConfigurationAttributes{ref: ref}
}

func (sc SentimentConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SentimentConfigurationAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("rule_name"))
}

func (sc SentimentConfigurationAttributes) SentimentType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("sentiment_type"))
}

func (sc SentimentConfigurationAttributes) TimePeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("time_period"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ElementsState struct {
	Type                                                string                                                     `json:"type"`
	AmazonTranscribeCallAnalyticsProcessorConfiguration []AmazonTranscribeCallAnalyticsProcessorConfigurationState `json:"amazon_transcribe_call_analytics_processor_configuration"`
	AmazonTranscribeProcessorConfiguration              []AmazonTranscribeProcessorConfigurationState              `json:"amazon_transcribe_processor_configuration"`
	KinesisDataStreamSinkConfiguration                  []KinesisDataStreamSinkConfigurationState                  `json:"kinesis_data_stream_sink_configuration"`
	LambdaFunctionSinkConfiguration                     []LambdaFunctionSinkConfigurationState                     `json:"lambda_function_sink_configuration"`
	S3RecordingSinkConfiguration                        []S3RecordingSinkConfigurationState                        `json:"s3_recording_sink_configuration"`
	SnsTopicSinkConfiguration                           []SnsTopicSinkConfigurationState                           `json:"sns_topic_sink_configuration"`
	SqsQueueSinkConfiguration                           []SqsQueueSinkConfigurationState                           `json:"sqs_queue_sink_configuration"`
	VoiceAnalyticsProcessorConfiguration                []VoiceAnalyticsProcessorConfigurationState                `json:"voice_analytics_processor_configuration"`
}

type AmazonTranscribeCallAnalyticsProcessorConfigurationState struct {
	CallAnalyticsStreamCategories     []string                         `json:"call_analytics_stream_categories"`
	ContentIdentificationType         string                           `json:"content_identification_type"`
	ContentRedactionType              string                           `json:"content_redaction_type"`
	EnablePartialResultsStabilization bool                             `json:"enable_partial_results_stabilization"`
	FilterPartialResults              bool                             `json:"filter_partial_results"`
	LanguageCode                      string                           `json:"language_code"`
	LanguageModelName                 string                           `json:"language_model_name"`
	PartialResultsStability           string                           `json:"partial_results_stability"`
	PiiEntityTypes                    string                           `json:"pii_entity_types"`
	VocabularyFilterMethod            string                           `json:"vocabulary_filter_method"`
	VocabularyFilterName              string                           `json:"vocabulary_filter_name"`
	VocabularyName                    string                           `json:"vocabulary_name"`
	PostCallAnalyticsSettings         []PostCallAnalyticsSettingsState `json:"post_call_analytics_settings"`
}

type PostCallAnalyticsSettingsState struct {
	ContentRedactionOutput   string `json:"content_redaction_output"`
	DataAccessRoleArn        string `json:"data_access_role_arn"`
	OutputEncryptionKmsKeyId string `json:"output_encryption_kms_key_id"`
	OutputLocation           string `json:"output_location"`
}

type AmazonTranscribeProcessorConfigurationState struct {
	ContentIdentificationType         string `json:"content_identification_type"`
	ContentRedactionType              string `json:"content_redaction_type"`
	EnablePartialResultsStabilization bool   `json:"enable_partial_results_stabilization"`
	FilterPartialResults              bool   `json:"filter_partial_results"`
	LanguageCode                      string `json:"language_code"`
	LanguageModelName                 string `json:"language_model_name"`
	PartialResultsStability           string `json:"partial_results_stability"`
	PiiEntityTypes                    string `json:"pii_entity_types"`
	ShowSpeakerLabel                  bool   `json:"show_speaker_label"`
	VocabularyFilterMethod            string `json:"vocabulary_filter_method"`
	VocabularyFilterName              string `json:"vocabulary_filter_name"`
	VocabularyName                    string `json:"vocabulary_name"`
}

type KinesisDataStreamSinkConfigurationState struct {
	InsightsTarget string `json:"insights_target"`
}

type LambdaFunctionSinkConfigurationState struct {
	InsightsTarget string `json:"insights_target"`
}

type S3RecordingSinkConfigurationState struct {
	Destination string `json:"destination"`
}

type SnsTopicSinkConfigurationState struct {
	InsightsTarget string `json:"insights_target"`
}

type SqsQueueSinkConfigurationState struct {
	InsightsTarget string `json:"insights_target"`
}

type VoiceAnalyticsProcessorConfigurationState struct {
	SpeakerSearchStatus     string `json:"speaker_search_status"`
	VoiceToneAnalysisStatus string `json:"voice_tone_analysis_status"`
}

type RealTimeAlertConfigurationState struct {
	Disabled bool         `json:"disabled"`
	Rules    []RulesState `json:"rules"`
}

type RulesState struct {
	Type                        string                             `json:"type"`
	IssueDetectionConfiguration []IssueDetectionConfigurationState `json:"issue_detection_configuration"`
	KeywordMatchConfiguration   []KeywordMatchConfigurationState   `json:"keyword_match_configuration"`
	SentimentConfiguration      []SentimentConfigurationState      `json:"sentiment_configuration"`
}

type IssueDetectionConfigurationState struct {
	RuleName string `json:"rule_name"`
}

type KeywordMatchConfigurationState struct {
	Keywords []string `json:"keywords"`
	Negate   bool     `json:"negate"`
	RuleName string   `json:"rule_name"`
}

type SentimentConfigurationState struct {
	RuleName      string  `json:"rule_name"`
	SentimentType string  `json:"sentiment_type"`
	TimePeriod    float64 `json:"time_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
