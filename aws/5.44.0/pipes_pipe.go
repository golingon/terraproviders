// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	pipespipe "github.com/golingon/terraproviders/aws/5.44.0/pipespipe"
	"io"
)

// NewPipesPipe creates a new instance of [PipesPipe].
func NewPipesPipe(name string, args PipesPipeArgs) *PipesPipe {
	return &PipesPipe{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PipesPipe)(nil)

// PipesPipe represents the Terraform resource aws_pipes_pipe.
type PipesPipe struct {
	Name      string
	Args      PipesPipeArgs
	state     *pipesPipeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [PipesPipe].
func (pp *PipesPipe) Type() string {
	return "aws_pipes_pipe"
}

// LocalName returns the local name for [PipesPipe].
func (pp *PipesPipe) LocalName() string {
	return pp.Name
}

// Configuration returns the configuration (args) for [PipesPipe].
func (pp *PipesPipe) Configuration() interface{} {
	return pp.Args
}

// DependOn is used for other resources to depend on [PipesPipe].
func (pp *PipesPipe) DependOn() terra.Reference {
	return terra.ReferenceResource(pp)
}

// Dependencies returns the list of resources [PipesPipe] depends_on.
func (pp *PipesPipe) Dependencies() terra.Dependencies {
	return pp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [PipesPipe].
func (pp *PipesPipe) LifecycleManagement() *terra.Lifecycle {
	return pp.Lifecycle
}

// Attributes returns the attributes for [PipesPipe].
func (pp *PipesPipe) Attributes() pipesPipeAttributes {
	return pipesPipeAttributes{ref: terra.ReferenceResource(pp)}
}

// ImportState imports the given attribute values into [PipesPipe]'s state.
func (pp *PipesPipe) ImportState(av io.Reader) error {
	pp.state = &pipesPipeState{}
	if err := json.NewDecoder(av).Decode(pp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pp.Type(), pp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [PipesPipe] has state.
func (pp *PipesPipe) State() (*pipesPipeState, bool) {
	return pp.state, pp.state != nil
}

// StateMust returns the state for [PipesPipe]. Panics if the state is nil.
func (pp *PipesPipe) StateMust() *pipesPipeState {
	if pp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pp.Type(), pp.LocalName()))
	}
	return pp.state
}

// PipesPipeArgs contains the configurations for aws_pipes_pipe.
type PipesPipeArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Enrichment: string, optional
	Enrichment terra.StringValue `hcl:"enrichment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// EnrichmentParameters: optional
	EnrichmentParameters *pipespipe.EnrichmentParameters `hcl:"enrichment_parameters,block"`
	// SourceParameters: optional
	SourceParameters *pipespipe.SourceParameters `hcl:"source_parameters,block"`
	// TargetParameters: optional
	TargetParameters *pipespipe.TargetParameters `hcl:"target_parameters,block"`
	// Timeouts: optional
	Timeouts *pipespipe.Timeouts `hcl:"timeouts,block"`
}
type pipesPipeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_pipes_pipe.
func (pp pipesPipeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_pipes_pipe.
func (pp pipesPipeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("description"))
}

// DesiredState returns a reference to field desired_state of aws_pipes_pipe.
func (pp pipesPipeAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("desired_state"))
}

// Enrichment returns a reference to field enrichment of aws_pipes_pipe.
func (pp pipesPipeAttributes) Enrichment() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("enrichment"))
}

// Id returns a reference to field id of aws_pipes_pipe.
func (pp pipesPipeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("id"))
}

// Name returns a reference to field name of aws_pipes_pipe.
func (pp pipesPipeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_pipes_pipe.
func (pp pipesPipeAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name_prefix"))
}

// RoleArn returns a reference to field role_arn of aws_pipes_pipe.
func (pp pipesPipeAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("role_arn"))
}

// Source returns a reference to field source of aws_pipes_pipe.
func (pp pipesPipeAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("source"))
}

// Tags returns a reference to field tags of aws_pipes_pipe.
func (pp pipesPipeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_pipes_pipe.
func (pp pipesPipeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pp.ref.Append("tags_all"))
}

// Target returns a reference to field target of aws_pipes_pipe.
func (pp pipesPipeAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("target"))
}

func (pp pipesPipeAttributes) EnrichmentParameters() terra.ListValue[pipespipe.EnrichmentParametersAttributes] {
	return terra.ReferenceAsList[pipespipe.EnrichmentParametersAttributes](pp.ref.Append("enrichment_parameters"))
}

func (pp pipesPipeAttributes) SourceParameters() terra.ListValue[pipespipe.SourceParametersAttributes] {
	return terra.ReferenceAsList[pipespipe.SourceParametersAttributes](pp.ref.Append("source_parameters"))
}

func (pp pipesPipeAttributes) TargetParameters() terra.ListValue[pipespipe.TargetParametersAttributes] {
	return terra.ReferenceAsList[pipespipe.TargetParametersAttributes](pp.ref.Append("target_parameters"))
}

func (pp pipesPipeAttributes) Timeouts() pipespipe.TimeoutsAttributes {
	return terra.ReferenceAsSingle[pipespipe.TimeoutsAttributes](pp.ref.Append("timeouts"))
}

type pipesPipeState struct {
	Arn                  string                                `json:"arn"`
	Description          string                                `json:"description"`
	DesiredState         string                                `json:"desired_state"`
	Enrichment           string                                `json:"enrichment"`
	Id                   string                                `json:"id"`
	Name                 string                                `json:"name"`
	NamePrefix           string                                `json:"name_prefix"`
	RoleArn              string                                `json:"role_arn"`
	Source               string                                `json:"source"`
	Tags                 map[string]string                     `json:"tags"`
	TagsAll              map[string]string                     `json:"tags_all"`
	Target               string                                `json:"target"`
	EnrichmentParameters []pipespipe.EnrichmentParametersState `json:"enrichment_parameters"`
	SourceParameters     []pipespipe.SourceParametersState     `json:"source_parameters"`
	TargetParameters     []pipespipe.TargetParametersState     `json:"target_parameters"`
	Timeouts             *pipespipe.TimeoutsState              `json:"timeouts"`
}
