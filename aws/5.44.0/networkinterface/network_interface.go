// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package networkinterface

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Attachment struct {
	// DeviceIndex: number, required
	DeviceIndex terra.NumberValue `hcl:"device_index,attr" validate:"required"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
}

type AttachmentAttributes struct {
	ref terra.Reference
}

func (a AttachmentAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttachmentAttributes) InternalWithRef(ref terra.Reference) AttachmentAttributes {
	return AttachmentAttributes{ref: ref}
}

func (a AttachmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttachmentAttributes) AttachmentId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("attachment_id"))
}

func (a AttachmentAttributes) DeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("device_index"))
}

func (a AttachmentAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("instance"))
}

type AttachmentState struct {
	AttachmentId string  `json:"attachment_id"`
	DeviceIndex  float64 `json:"device_index"`
	Instance     string  `json:"instance"`
}
