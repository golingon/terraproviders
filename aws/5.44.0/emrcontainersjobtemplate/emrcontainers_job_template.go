// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package emrcontainersjobtemplate

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type JobTemplateData struct {
	// ExecutionRoleArn: string, required
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr" validate:"required"`
	// JobTags: map of string, optional
	JobTags terra.MapValue[terra.StringValue] `hcl:"job_tags,attr"`
	// ReleaseLabel: string, required
	ReleaseLabel terra.StringValue `hcl:"release_label,attr" validate:"required"`
	// ConfigurationOverrides: optional
	ConfigurationOverrides *ConfigurationOverrides `hcl:"configuration_overrides,block"`
	// JobDriver: required
	JobDriver *JobDriver `hcl:"job_driver,block" validate:"required"`
}

type ConfigurationOverrides struct {
	// ApplicationConfiguration: min=0,max=100
	ApplicationConfiguration []ApplicationConfiguration `hcl:"application_configuration,block" validate:"min=0,max=100"`
	// MonitoringConfiguration: optional
	MonitoringConfiguration *MonitoringConfiguration `hcl:"monitoring_configuration,block"`
}

type ApplicationConfiguration struct {
	// Classification: string, required
	Classification terra.StringValue `hcl:"classification,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// Configurations: min=0,max=100
	Configurations []Configurations `hcl:"configurations,block" validate:"min=0,max=100"`
}

type Configurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type MonitoringConfiguration struct {
	// PersistentAppUi: string, optional
	PersistentAppUi terra.StringValue `hcl:"persistent_app_ui,attr"`
	// CloudWatchMonitoringConfiguration: optional
	CloudWatchMonitoringConfiguration *CloudWatchMonitoringConfiguration `hcl:"cloud_watch_monitoring_configuration,block"`
	// S3MonitoringConfiguration: optional
	S3MonitoringConfiguration *S3MonitoringConfiguration `hcl:"s3_monitoring_configuration,block"`
}

type CloudWatchMonitoringConfiguration struct {
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// LogStreamNamePrefix: string, optional
	LogStreamNamePrefix terra.StringValue `hcl:"log_stream_name_prefix,attr"`
}

type S3MonitoringConfiguration struct {
	// LogUri: string, required
	LogUri terra.StringValue `hcl:"log_uri,attr" validate:"required"`
}

type JobDriver struct {
	// SparkSqlJobDriver: optional
	SparkSqlJobDriver *SparkSqlJobDriver `hcl:"spark_sql_job_driver,block"`
	// SparkSubmitJobDriver: optional
	SparkSubmitJobDriver *SparkSubmitJobDriver `hcl:"spark_submit_job_driver,block"`
}

type SparkSqlJobDriver struct {
	// EntryPoint: string, optional
	EntryPoint terra.StringValue `hcl:"entry_point,attr"`
	// SparkSqlParameters: string, optional
	SparkSqlParameters terra.StringValue `hcl:"spark_sql_parameters,attr"`
}

type SparkSubmitJobDriver struct {
	// EntryPoint: string, required
	EntryPoint terra.StringValue `hcl:"entry_point,attr" validate:"required"`
	// EntryPointArguments: set of string, optional
	EntryPointArguments terra.SetValue[terra.StringValue] `hcl:"entry_point_arguments,attr"`
	// SparkSubmitParameters: string, optional
	SparkSubmitParameters terra.StringValue `hcl:"spark_submit_parameters,attr"`
}

type Timeouts struct {
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type JobTemplateDataAttributes struct {
	ref terra.Reference
}

func (jtd JobTemplateDataAttributes) InternalRef() (terra.Reference, error) {
	return jtd.ref, nil
}

func (jtd JobTemplateDataAttributes) InternalWithRef(ref terra.Reference) JobTemplateDataAttributes {
	return JobTemplateDataAttributes{ref: ref}
}

func (jtd JobTemplateDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jtd.ref.InternalTokens()
}

func (jtd JobTemplateDataAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(jtd.ref.Append("execution_role_arn"))
}

func (jtd JobTemplateDataAttributes) JobTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](jtd.ref.Append("job_tags"))
}

func (jtd JobTemplateDataAttributes) ReleaseLabel() terra.StringValue {
	return terra.ReferenceAsString(jtd.ref.Append("release_label"))
}

func (jtd JobTemplateDataAttributes) ConfigurationOverrides() terra.ListValue[ConfigurationOverridesAttributes] {
	return terra.ReferenceAsList[ConfigurationOverridesAttributes](jtd.ref.Append("configuration_overrides"))
}

func (jtd JobTemplateDataAttributes) JobDriver() terra.ListValue[JobDriverAttributes] {
	return terra.ReferenceAsList[JobDriverAttributes](jtd.ref.Append("job_driver"))
}

type ConfigurationOverridesAttributes struct {
	ref terra.Reference
}

func (co ConfigurationOverridesAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ConfigurationOverridesAttributes) InternalWithRef(ref terra.Reference) ConfigurationOverridesAttributes {
	return ConfigurationOverridesAttributes{ref: ref}
}

func (co ConfigurationOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ConfigurationOverridesAttributes) ApplicationConfiguration() terra.ListValue[ApplicationConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationConfigurationAttributes](co.ref.Append("application_configuration"))
}

func (co ConfigurationOverridesAttributes) MonitoringConfiguration() terra.ListValue[MonitoringConfigurationAttributes] {
	return terra.ReferenceAsList[MonitoringConfigurationAttributes](co.ref.Append("monitoring_configuration"))
}

type ApplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac ApplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ApplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationConfigurationAttributes {
	return ApplicationConfigurationAttributes{ref: ref}
}

func (ac ApplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ApplicationConfigurationAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("classification"))
}

func (ac ApplicationConfigurationAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("properties"))
}

func (ac ApplicationConfigurationAttributes) Configurations() terra.ListValue[ConfigurationsAttributes] {
	return terra.ReferenceAsList[ConfigurationsAttributes](ac.ref.Append("configurations"))
}

type ConfigurationsAttributes struct {
	ref terra.Reference
}

func (c ConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationsAttributes) InternalWithRef(ref terra.Reference) ConfigurationsAttributes {
	return ConfigurationsAttributes{ref: ref}
}

func (c ConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c ConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type MonitoringConfigurationAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitoringConfigurationAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigurationAttributes {
	return MonitoringConfigurationAttributes{ref: ref}
}

func (mc MonitoringConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigurationAttributes) PersistentAppUi() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("persistent_app_ui"))
}

func (mc MonitoringConfigurationAttributes) CloudWatchMonitoringConfiguration() terra.ListValue[CloudWatchMonitoringConfigurationAttributes] {
	return terra.ReferenceAsList[CloudWatchMonitoringConfigurationAttributes](mc.ref.Append("cloud_watch_monitoring_configuration"))
}

func (mc MonitoringConfigurationAttributes) S3MonitoringConfiguration() terra.ListValue[S3MonitoringConfigurationAttributes] {
	return terra.ReferenceAsList[S3MonitoringConfigurationAttributes](mc.ref.Append("s3_monitoring_configuration"))
}

type CloudWatchMonitoringConfigurationAttributes struct {
	ref terra.Reference
}

func (cwmc CloudWatchMonitoringConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cwmc.ref, nil
}

func (cwmc CloudWatchMonitoringConfigurationAttributes) InternalWithRef(ref terra.Reference) CloudWatchMonitoringConfigurationAttributes {
	return CloudWatchMonitoringConfigurationAttributes{ref: ref}
}

func (cwmc CloudWatchMonitoringConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cwmc.ref.InternalTokens()
}

func (cwmc CloudWatchMonitoringConfigurationAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cwmc.ref.Append("log_group_name"))
}

func (cwmc CloudWatchMonitoringConfigurationAttributes) LogStreamNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(cwmc.ref.Append("log_stream_name_prefix"))
}

type S3MonitoringConfigurationAttributes struct {
	ref terra.Reference
}

func (smc S3MonitoringConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return smc.ref, nil
}

func (smc S3MonitoringConfigurationAttributes) InternalWithRef(ref terra.Reference) S3MonitoringConfigurationAttributes {
	return S3MonitoringConfigurationAttributes{ref: ref}
}

func (smc S3MonitoringConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smc.ref.InternalTokens()
}

func (smc S3MonitoringConfigurationAttributes) LogUri() terra.StringValue {
	return terra.ReferenceAsString(smc.ref.Append("log_uri"))
}

type JobDriverAttributes struct {
	ref terra.Reference
}

func (jd JobDriverAttributes) InternalRef() (terra.Reference, error) {
	return jd.ref, nil
}

func (jd JobDriverAttributes) InternalWithRef(ref terra.Reference) JobDriverAttributes {
	return JobDriverAttributes{ref: ref}
}

func (jd JobDriverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jd.ref.InternalTokens()
}

func (jd JobDriverAttributes) SparkSqlJobDriver() terra.ListValue[SparkSqlJobDriverAttributes] {
	return terra.ReferenceAsList[SparkSqlJobDriverAttributes](jd.ref.Append("spark_sql_job_driver"))
}

func (jd JobDriverAttributes) SparkSubmitJobDriver() terra.ListValue[SparkSubmitJobDriverAttributes] {
	return terra.ReferenceAsList[SparkSubmitJobDriverAttributes](jd.ref.Append("spark_submit_job_driver"))
}

type SparkSqlJobDriverAttributes struct {
	ref terra.Reference
}

func (ssjd SparkSqlJobDriverAttributes) InternalRef() (terra.Reference, error) {
	return ssjd.ref, nil
}

func (ssjd SparkSqlJobDriverAttributes) InternalWithRef(ref terra.Reference) SparkSqlJobDriverAttributes {
	return SparkSqlJobDriverAttributes{ref: ref}
}

func (ssjd SparkSqlJobDriverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssjd.ref.InternalTokens()
}

func (ssjd SparkSqlJobDriverAttributes) EntryPoint() terra.StringValue {
	return terra.ReferenceAsString(ssjd.ref.Append("entry_point"))
}

func (ssjd SparkSqlJobDriverAttributes) SparkSqlParameters() terra.StringValue {
	return terra.ReferenceAsString(ssjd.ref.Append("spark_sql_parameters"))
}

type SparkSubmitJobDriverAttributes struct {
	ref terra.Reference
}

func (ssjd SparkSubmitJobDriverAttributes) InternalRef() (terra.Reference, error) {
	return ssjd.ref, nil
}

func (ssjd SparkSubmitJobDriverAttributes) InternalWithRef(ref terra.Reference) SparkSubmitJobDriverAttributes {
	return SparkSubmitJobDriverAttributes{ref: ref}
}

func (ssjd SparkSubmitJobDriverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssjd.ref.InternalTokens()
}

func (ssjd SparkSubmitJobDriverAttributes) EntryPoint() terra.StringValue {
	return terra.ReferenceAsString(ssjd.ref.Append("entry_point"))
}

func (ssjd SparkSubmitJobDriverAttributes) EntryPointArguments() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ssjd.ref.Append("entry_point_arguments"))
}

func (ssjd SparkSubmitJobDriverAttributes) SparkSubmitParameters() terra.StringValue {
	return terra.ReferenceAsString(ssjd.ref.Append("spark_submit_parameters"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type JobTemplateDataState struct {
	ExecutionRoleArn       string                        `json:"execution_role_arn"`
	JobTags                map[string]string             `json:"job_tags"`
	ReleaseLabel           string                        `json:"release_label"`
	ConfigurationOverrides []ConfigurationOverridesState `json:"configuration_overrides"`
	JobDriver              []JobDriverState              `json:"job_driver"`
}

type ConfigurationOverridesState struct {
	ApplicationConfiguration []ApplicationConfigurationState `json:"application_configuration"`
	MonitoringConfiguration  []MonitoringConfigurationState  `json:"monitoring_configuration"`
}

type ApplicationConfigurationState struct {
	Classification string                `json:"classification"`
	Properties     map[string]string     `json:"properties"`
	Configurations []ConfigurationsState `json:"configurations"`
}

type ConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type MonitoringConfigurationState struct {
	PersistentAppUi                   string                                   `json:"persistent_app_ui"`
	CloudWatchMonitoringConfiguration []CloudWatchMonitoringConfigurationState `json:"cloud_watch_monitoring_configuration"`
	S3MonitoringConfiguration         []S3MonitoringConfigurationState         `json:"s3_monitoring_configuration"`
}

type CloudWatchMonitoringConfigurationState struct {
	LogGroupName        string `json:"log_group_name"`
	LogStreamNamePrefix string `json:"log_stream_name_prefix"`
}

type S3MonitoringConfigurationState struct {
	LogUri string `json:"log_uri"`
}

type JobDriverState struct {
	SparkSqlJobDriver    []SparkSqlJobDriverState    `json:"spark_sql_job_driver"`
	SparkSubmitJobDriver []SparkSubmitJobDriverState `json:"spark_submit_job_driver"`
}

type SparkSqlJobDriverState struct {
	EntryPoint         string `json:"entry_point"`
	SparkSqlParameters string `json:"spark_sql_parameters"`
}

type SparkSubmitJobDriverState struct {
	EntryPoint            string   `json:"entry_point"`
	EntryPointArguments   []string `json:"entry_point_arguments"`
	SparkSubmitParameters string   `json:"spark_submit_parameters"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
}
