// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataService creates a new instance of [DataService].
func NewDataService(name string, args DataServiceArgs) *DataService {
	return &DataService{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataService)(nil)

// DataService represents the Terraform data resource aws_service.
type DataService struct {
	Name string
	Args DataServiceArgs
}

// DataSource returns the Terraform object type for [DataService].
func (s *DataService) DataSource() string {
	return "aws_service"
}

// LocalName returns the local name for [DataService].
func (s *DataService) LocalName() string {
	return s.Name
}

// Configuration returns the configuration (args) for [DataService].
func (s *DataService) Configuration() interface{} {
	return s.Args
}

// Attributes returns the attributes for [DataService].
func (s *DataService) Attributes() dataServiceAttributes {
	return dataServiceAttributes{ref: terra.ReferenceDataResource(s)}
}

// DataServiceArgs contains the configurations for aws_service.
type DataServiceArgs struct {
	// DnsName: string, optional
	DnsName terra.StringValue `hcl:"dns_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReverseDnsName: string, optional
	ReverseDnsName terra.StringValue `hcl:"reverse_dns_name,attr"`
	// ReverseDnsPrefix: string, optional
	ReverseDnsPrefix terra.StringValue `hcl:"reverse_dns_prefix,attr"`
	// ServiceId: string, optional
	ServiceId terra.StringValue `hcl:"service_id,attr"`
}
type dataServiceAttributes struct {
	ref terra.Reference
}

// DnsName returns a reference to field dns_name of aws_service.
func (s dataServiceAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("dns_name"))
}

// Id returns a reference to field id of aws_service.
func (s dataServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

// Partition returns a reference to field partition of aws_service.
func (s dataServiceAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("partition"))
}

// Region returns a reference to field region of aws_service.
func (s dataServiceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("region"))
}

// ReverseDnsName returns a reference to field reverse_dns_name of aws_service.
func (s dataServiceAttributes) ReverseDnsName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("reverse_dns_name"))
}

// ReverseDnsPrefix returns a reference to field reverse_dns_prefix of aws_service.
func (s dataServiceAttributes) ReverseDnsPrefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("reverse_dns_prefix"))
}

// ServiceId returns a reference to field service_id of aws_service.
func (s dataServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("service_id"))
}

// Supported returns a reference to field supported of aws_service.
func (s dataServiceAttributes) Supported() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("supported"))
}
