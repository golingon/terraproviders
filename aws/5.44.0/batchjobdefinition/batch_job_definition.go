// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package batchjobdefinition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EksProperties struct {
	// PodProperties: required
	PodProperties *PodProperties `hcl:"pod_properties,block" validate:"required"`
}

type PodProperties struct {
	// DnsPolicy: string, optional
	DnsPolicy terra.StringValue `hcl:"dns_policy,attr"`
	// HostNetwork: bool, optional
	HostNetwork terra.BoolValue `hcl:"host_network,attr"`
	// ServiceAccountName: string, optional
	ServiceAccountName terra.StringValue `hcl:"service_account_name,attr"`
	// Containers: required
	Containers *Containers `hcl:"containers,block" validate:"required"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Volumes: min=0
	Volumes []Volumes `hcl:"volumes,block" validate:"min=0"`
}

type Containers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// ImagePullPolicy: string, optional
	ImagePullPolicy terra.StringValue `hcl:"image_pull_policy,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Env: min=0
	Env []Env `hcl:"env,block" validate:"min=0"`
	// Resources: optional
	Resources *Resources `hcl:"resources,block"`
	// SecurityContext: optional
	SecurityContext *SecurityContext `hcl:"security_context,block"`
	// VolumeMounts: min=0
	VolumeMounts []VolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type Env struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Resources struct {
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
	// Requests: map of string, optional
	Requests terra.MapValue[terra.StringValue] `hcl:"requests,attr"`
}

type SecurityContext struct {
	// Privileged: bool, optional
	Privileged terra.BoolValue `hcl:"privileged,attr"`
	// ReadOnlyRootFileSystem: bool, optional
	ReadOnlyRootFileSystem terra.BoolValue `hcl:"read_only_root_file_system,attr"`
	// RunAsGroup: number, optional
	RunAsGroup terra.NumberValue `hcl:"run_as_group,attr"`
	// RunAsNonRoot: bool, optional
	RunAsNonRoot terra.BoolValue `hcl:"run_as_non_root,attr"`
	// RunAsUser: number, optional
	RunAsUser terra.NumberValue `hcl:"run_as_user,attr"`
}

type VolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
}

type Metadata struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type Volumes struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// EmptyDir: optional
	EmptyDir *EmptyDir `hcl:"empty_dir,block"`
	// HostPath: optional
	HostPath *HostPath `hcl:"host_path,block"`
	// Secret: optional
	Secret *Secret `hcl:"secret,block"`
}

type EmptyDir struct {
	// Medium: string, optional
	Medium terra.StringValue `hcl:"medium,attr"`
	// SizeLimit: string, required
	SizeLimit terra.StringValue `hcl:"size_limit,attr" validate:"required"`
}

type HostPath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type Secret struct {
	// Optional: bool, optional
	Optional terra.BoolValue `hcl:"optional,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type RetryStrategy struct {
	// Attempts: number, optional
	Attempts terra.NumberValue `hcl:"attempts,attr"`
	// EvaluateOnExit: min=0,max=5
	EvaluateOnExit []EvaluateOnExit `hcl:"evaluate_on_exit,block" validate:"min=0,max=5"`
}

type EvaluateOnExit struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// OnExitCode: string, optional
	OnExitCode terra.StringValue `hcl:"on_exit_code,attr"`
	// OnReason: string, optional
	OnReason terra.StringValue `hcl:"on_reason,attr"`
	// OnStatusReason: string, optional
	OnStatusReason terra.StringValue `hcl:"on_status_reason,attr"`
}

type Timeout struct {
	// AttemptDurationSeconds: number, optional
	AttemptDurationSeconds terra.NumberValue `hcl:"attempt_duration_seconds,attr"`
}

type EksPropertiesAttributes struct {
	ref terra.Reference
}

func (ep EksPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EksPropertiesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesAttributes {
	return EksPropertiesAttributes{ref: ref}
}

func (ep EksPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EksPropertiesAttributes) PodProperties() terra.ListValue[PodPropertiesAttributes] {
	return terra.ReferenceAsList[PodPropertiesAttributes](ep.ref.Append("pod_properties"))
}

type PodPropertiesAttributes struct {
	ref terra.Reference
}

func (pp PodPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PodPropertiesAttributes) InternalWithRef(ref terra.Reference) PodPropertiesAttributes {
	return PodPropertiesAttributes{ref: ref}
}

func (pp PodPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PodPropertiesAttributes) DnsPolicy() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("dns_policy"))
}

func (pp PodPropertiesAttributes) HostNetwork() terra.BoolValue {
	return terra.ReferenceAsBool(pp.ref.Append("host_network"))
}

func (pp PodPropertiesAttributes) ServiceAccountName() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("service_account_name"))
}

func (pp PodPropertiesAttributes) Containers() terra.ListValue[ContainersAttributes] {
	return terra.ReferenceAsList[ContainersAttributes](pp.ref.Append("containers"))
}

func (pp PodPropertiesAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](pp.ref.Append("metadata"))
}

func (pp PodPropertiesAttributes) Volumes() terra.ListValue[VolumesAttributes] {
	return terra.ReferenceAsList[VolumesAttributes](pp.ref.Append("volumes"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c ContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c ContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainersAttributes) ImagePullPolicy() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_pull_policy"))
}

func (c ContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ContainersAttributes) Env() terra.SetValue[EnvAttributes] {
	return terra.ReferenceAsSet[EnvAttributes](c.ref.Append("env"))
}

func (c ContainersAttributes) Resources() terra.ListValue[ResourcesAttributes] {
	return terra.ReferenceAsList[ResourcesAttributes](c.ref.Append("resources"))
}

func (c ContainersAttributes) SecurityContext() terra.ListValue[SecurityContextAttributes] {
	return terra.ReferenceAsList[SecurityContextAttributes](c.ref.Append("security_context"))
}

func (c ContainersAttributes) VolumeMounts() terra.ListValue[VolumeMountsAttributes] {
	return terra.ReferenceAsList[VolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EnvAttributes struct {
	ref terra.Reference
}

func (e EnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvAttributes) InternalWithRef(ref terra.Reference) EnvAttributes {
	return EnvAttributes{ref: ref}
}

func (e EnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r ResourcesAttributes) Requests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("requests"))
}

type SecurityContextAttributes struct {
	ref terra.Reference
}

func (sc SecurityContextAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityContextAttributes) InternalWithRef(ref terra.Reference) SecurityContextAttributes {
	return SecurityContextAttributes{ref: ref}
}

func (sc SecurityContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityContextAttributes) Privileged() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("privileged"))
}

func (sc SecurityContextAttributes) ReadOnlyRootFileSystem() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("read_only_root_file_system"))
}

func (sc SecurityContextAttributes) RunAsGroup() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_group"))
}

func (sc SecurityContextAttributes) RunAsNonRoot() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("run_as_non_root"))
}

func (sc SecurityContextAttributes) RunAsUser() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_user"))
}

type VolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm VolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm VolumeMountsAttributes) InternalWithRef(ref terra.Reference) VolumeMountsAttributes {
	return VolumeMountsAttributes{ref: ref}
}

func (vm VolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm VolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm VolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

func (vm VolumeMountsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("read_only"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

type VolumesAttributes struct {
	ref terra.Reference
}

func (v VolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VolumesAttributes) InternalWithRef(ref terra.Reference) VolumesAttributes {
	return VolumesAttributes{ref: ref}
}

func (v VolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VolumesAttributes) EmptyDir() terra.ListValue[EmptyDirAttributes] {
	return terra.ReferenceAsList[EmptyDirAttributes](v.ref.Append("empty_dir"))
}

func (v VolumesAttributes) HostPath() terra.ListValue[HostPathAttributes] {
	return terra.ReferenceAsList[HostPathAttributes](v.ref.Append("host_path"))
}

func (v VolumesAttributes) Secret() terra.ListValue[SecretAttributes] {
	return terra.ReferenceAsList[SecretAttributes](v.ref.Append("secret"))
}

type EmptyDirAttributes struct {
	ref terra.Reference
}

func (ed EmptyDirAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EmptyDirAttributes) InternalWithRef(ref terra.Reference) EmptyDirAttributes {
	return EmptyDirAttributes{ref: ref}
}

func (ed EmptyDirAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EmptyDirAttributes) Medium() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("medium"))
}

func (ed EmptyDirAttributes) SizeLimit() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("size_limit"))
}

type HostPathAttributes struct {
	ref terra.Reference
}

func (hp HostPathAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp HostPathAttributes) InternalWithRef(ref terra.Reference) HostPathAttributes {
	return HostPathAttributes{ref: ref}
}

func (hp HostPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp HostPathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hp.ref.Append("path"))
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("optional"))
}

func (s SecretAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type RetryStrategyAttributes struct {
	ref terra.Reference
}

func (rs RetryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RetryStrategyAttributes) InternalWithRef(ref terra.Reference) RetryStrategyAttributes {
	return RetryStrategyAttributes{ref: ref}
}

func (rs RetryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RetryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

func (rs RetryStrategyAttributes) EvaluateOnExit() terra.ListValue[EvaluateOnExitAttributes] {
	return terra.ReferenceAsList[EvaluateOnExitAttributes](rs.ref.Append("evaluate_on_exit"))
}

type EvaluateOnExitAttributes struct {
	ref terra.Reference
}

func (eoe EvaluateOnExitAttributes) InternalRef() (terra.Reference, error) {
	return eoe.ref, nil
}

func (eoe EvaluateOnExitAttributes) InternalWithRef(ref terra.Reference) EvaluateOnExitAttributes {
	return EvaluateOnExitAttributes{ref: ref}
}

func (eoe EvaluateOnExitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eoe.ref.InternalTokens()
}

func (eoe EvaluateOnExitAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("action"))
}

func (eoe EvaluateOnExitAttributes) OnExitCode() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_exit_code"))
}

func (eoe EvaluateOnExitAttributes) OnReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_reason"))
}

func (eoe EvaluateOnExitAttributes) OnStatusReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_status_reason"))
}

type TimeoutAttributes struct {
	ref terra.Reference
}

func (t TimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutAttributes) InternalWithRef(ref terra.Reference) TimeoutAttributes {
	return TimeoutAttributes{ref: ref}
}

func (t TimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutAttributes) AttemptDurationSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("attempt_duration_seconds"))
}

type EksPropertiesState struct {
	PodProperties []PodPropertiesState `json:"pod_properties"`
}

type PodPropertiesState struct {
	DnsPolicy          string            `json:"dns_policy"`
	HostNetwork        bool              `json:"host_network"`
	ServiceAccountName string            `json:"service_account_name"`
	Containers         []ContainersState `json:"containers"`
	Metadata           []MetadataState   `json:"metadata"`
	Volumes            []VolumesState    `json:"volumes"`
}

type ContainersState struct {
	Args            []string               `json:"args"`
	Command         []string               `json:"command"`
	Image           string                 `json:"image"`
	ImagePullPolicy string                 `json:"image_pull_policy"`
	Name            string                 `json:"name"`
	Env             []EnvState             `json:"env"`
	Resources       []ResourcesState       `json:"resources"`
	SecurityContext []SecurityContextState `json:"security_context"`
	VolumeMounts    []VolumeMountsState    `json:"volume_mounts"`
}

type EnvState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ResourcesState struct {
	Limits   map[string]string `json:"limits"`
	Requests map[string]string `json:"requests"`
}

type SecurityContextState struct {
	Privileged             bool    `json:"privileged"`
	ReadOnlyRootFileSystem bool    `json:"read_only_root_file_system"`
	RunAsGroup             float64 `json:"run_as_group"`
	RunAsNonRoot           bool    `json:"run_as_non_root"`
	RunAsUser              float64 `json:"run_as_user"`
}

type VolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
	ReadOnly  bool   `json:"read_only"`
}

type MetadataState struct {
	Labels map[string]string `json:"labels"`
}

type VolumesState struct {
	Name     string          `json:"name"`
	EmptyDir []EmptyDirState `json:"empty_dir"`
	HostPath []HostPathState `json:"host_path"`
	Secret   []SecretState   `json:"secret"`
}

type EmptyDirState struct {
	Medium    string `json:"medium"`
	SizeLimit string `json:"size_limit"`
}

type HostPathState struct {
	Path string `json:"path"`
}

type SecretState struct {
	Optional   bool   `json:"optional"`
	SecretName string `json:"secret_name"`
}

type RetryStrategyState struct {
	Attempts       float64               `json:"attempts"`
	EvaluateOnExit []EvaluateOnExitState `json:"evaluate_on_exit"`
}

type EvaluateOnExitState struct {
	Action         string `json:"action"`
	OnExitCode     string `json:"on_exit_code"`
	OnReason       string `json:"on_reason"`
	OnStatusReason string `json:"on_status_reason"`
}

type TimeoutState struct {
	AttemptDurationSeconds float64 `json:"attempt_duration_seconds"`
}
