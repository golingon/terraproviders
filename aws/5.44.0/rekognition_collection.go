// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	rekognitioncollection "github.com/golingon/terraproviders/aws/5.44.0/rekognitioncollection"
	"io"
)

// NewRekognitionCollection creates a new instance of [RekognitionCollection].
func NewRekognitionCollection(name string, args RekognitionCollectionArgs) *RekognitionCollection {
	return &RekognitionCollection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RekognitionCollection)(nil)

// RekognitionCollection represents the Terraform resource aws_rekognition_collection.
type RekognitionCollection struct {
	Name      string
	Args      RekognitionCollectionArgs
	state     *rekognitionCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RekognitionCollection].
func (rc *RekognitionCollection) Type() string {
	return "aws_rekognition_collection"
}

// LocalName returns the local name for [RekognitionCollection].
func (rc *RekognitionCollection) LocalName() string {
	return rc.Name
}

// Configuration returns the configuration (args) for [RekognitionCollection].
func (rc *RekognitionCollection) Configuration() interface{} {
	return rc.Args
}

// DependOn is used for other resources to depend on [RekognitionCollection].
func (rc *RekognitionCollection) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

// Dependencies returns the list of resources [RekognitionCollection] depends_on.
func (rc *RekognitionCollection) Dependencies() terra.Dependencies {
	return rc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RekognitionCollection].
func (rc *RekognitionCollection) LifecycleManagement() *terra.Lifecycle {
	return rc.Lifecycle
}

// Attributes returns the attributes for [RekognitionCollection].
func (rc *RekognitionCollection) Attributes() rekognitionCollectionAttributes {
	return rekognitionCollectionAttributes{ref: terra.ReferenceResource(rc)}
}

// ImportState imports the given attribute values into [RekognitionCollection]'s state.
func (rc *RekognitionCollection) ImportState(av io.Reader) error {
	rc.state = &rekognitionCollectionState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RekognitionCollection] has state.
func (rc *RekognitionCollection) State() (*rekognitionCollectionState, bool) {
	return rc.state, rc.state != nil
}

// StateMust returns the state for [RekognitionCollection]. Panics if the state is nil.
func (rc *RekognitionCollection) StateMust() *rekognitionCollectionState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

// RekognitionCollectionArgs contains the configurations for aws_rekognition_collection.
type RekognitionCollectionArgs struct {
	// CollectionId: string, required
	CollectionId terra.StringValue `hcl:"collection_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *rekognitioncollection.Timeouts `hcl:"timeouts,block"`
}
type rekognitionCollectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("arn"))
}

// CollectionId returns a reference to field collection_id of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) CollectionId() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("collection_id"))
}

// FaceModelVersion returns a reference to field face_model_version of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) FaceModelVersion() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("face_model_version"))
}

// Id returns a reference to field id of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rekognition_collection.
func (rc rekognitionCollectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rc.ref.Append("tags_all"))
}

func (rc rekognitionCollectionAttributes) Timeouts() rekognitioncollection.TimeoutsAttributes {
	return terra.ReferenceAsSingle[rekognitioncollection.TimeoutsAttributes](rc.ref.Append("timeouts"))
}

type rekognitionCollectionState struct {
	Arn              string                               `json:"arn"`
	CollectionId     string                               `json:"collection_id"`
	FaceModelVersion string                               `json:"face_model_version"`
	Id               string                               `json:"id"`
	Tags             map[string]string                    `json:"tags"`
	TagsAll          map[string]string                    `json:"tags_all"`
	Timeouts         *rekognitioncollection.TimeoutsState `json:"timeouts"`
}
