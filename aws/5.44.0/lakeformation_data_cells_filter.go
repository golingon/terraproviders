// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	lakeformationdatacellsfilter "github.com/golingon/terraproviders/aws/5.44.0/lakeformationdatacellsfilter"
	"io"
)

// NewLakeformationDataCellsFilter creates a new instance of [LakeformationDataCellsFilter].
func NewLakeformationDataCellsFilter(name string, args LakeformationDataCellsFilterArgs) *LakeformationDataCellsFilter {
	return &LakeformationDataCellsFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LakeformationDataCellsFilter)(nil)

// LakeformationDataCellsFilter represents the Terraform resource aws_lakeformation_data_cells_filter.
type LakeformationDataCellsFilter struct {
	Name      string
	Args      LakeformationDataCellsFilterArgs
	state     *lakeformationDataCellsFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) Type() string {
	return "aws_lakeformation_data_cells_filter"
}

// LocalName returns the local name for [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) LocalName() string {
	return ldcf.Name
}

// Configuration returns the configuration (args) for [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) Configuration() interface{} {
	return ldcf.Args
}

// DependOn is used for other resources to depend on [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(ldcf)
}

// Dependencies returns the list of resources [LakeformationDataCellsFilter] depends_on.
func (ldcf *LakeformationDataCellsFilter) Dependencies() terra.Dependencies {
	return ldcf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) LifecycleManagement() *terra.Lifecycle {
	return ldcf.Lifecycle
}

// Attributes returns the attributes for [LakeformationDataCellsFilter].
func (ldcf *LakeformationDataCellsFilter) Attributes() lakeformationDataCellsFilterAttributes {
	return lakeformationDataCellsFilterAttributes{ref: terra.ReferenceResource(ldcf)}
}

// ImportState imports the given attribute values into [LakeformationDataCellsFilter]'s state.
func (ldcf *LakeformationDataCellsFilter) ImportState(av io.Reader) error {
	ldcf.state = &lakeformationDataCellsFilterState{}
	if err := json.NewDecoder(av).Decode(ldcf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ldcf.Type(), ldcf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LakeformationDataCellsFilter] has state.
func (ldcf *LakeformationDataCellsFilter) State() (*lakeformationDataCellsFilterState, bool) {
	return ldcf.state, ldcf.state != nil
}

// StateMust returns the state for [LakeformationDataCellsFilter]. Panics if the state is nil.
func (ldcf *LakeformationDataCellsFilter) StateMust() *lakeformationDataCellsFilterState {
	if ldcf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ldcf.Type(), ldcf.LocalName()))
	}
	return ldcf.state
}

// LakeformationDataCellsFilterArgs contains the configurations for aws_lakeformation_data_cells_filter.
type LakeformationDataCellsFilterArgs struct {
	// TableData: min=0
	TableData []lakeformationdatacellsfilter.TableData `hcl:"table_data,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *lakeformationdatacellsfilter.Timeouts `hcl:"timeouts,block"`
}
type lakeformationDataCellsFilterAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_lakeformation_data_cells_filter.
func (ldcf lakeformationDataCellsFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ldcf.ref.Append("id"))
}

func (ldcf lakeformationDataCellsFilterAttributes) TableData() terra.ListValue[lakeformationdatacellsfilter.TableDataAttributes] {
	return terra.ReferenceAsList[lakeformationdatacellsfilter.TableDataAttributes](ldcf.ref.Append("table_data"))
}

func (ldcf lakeformationDataCellsFilterAttributes) Timeouts() lakeformationdatacellsfilter.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lakeformationdatacellsfilter.TimeoutsAttributes](ldcf.ref.Append("timeouts"))
}

type lakeformationDataCellsFilterState struct {
	Id        string                                        `json:"id"`
	TableData []lakeformationdatacellsfilter.TableDataState `json:"table_data"`
	Timeouts  *lakeformationdatacellsfilter.TimeoutsState   `json:"timeouts"`
}
