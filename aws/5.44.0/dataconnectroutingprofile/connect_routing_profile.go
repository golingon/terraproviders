// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataconnectroutingprofile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MediaConcurrencies struct{}

type QueueConfigs struct{}

type MediaConcurrenciesAttributes struct {
	ref terra.Reference
}

func (mc MediaConcurrenciesAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MediaConcurrenciesAttributes) InternalWithRef(ref terra.Reference) MediaConcurrenciesAttributes {
	return MediaConcurrenciesAttributes{ref: ref}
}

func (mc MediaConcurrenciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MediaConcurrenciesAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("channel"))
}

func (mc MediaConcurrenciesAttributes) Concurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("concurrency"))
}

type QueueConfigsAttributes struct {
	ref terra.Reference
}

func (qc QueueConfigsAttributes) InternalRef() (terra.Reference, error) {
	return qc.ref, nil
}

func (qc QueueConfigsAttributes) InternalWithRef(ref terra.Reference) QueueConfigsAttributes {
	return QueueConfigsAttributes{ref: ref}
}

func (qc QueueConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qc.ref.InternalTokens()
}

func (qc QueueConfigsAttributes) Channel() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("channel"))
}

func (qc QueueConfigsAttributes) Delay() terra.NumberValue {
	return terra.ReferenceAsNumber(qc.ref.Append("delay"))
}

func (qc QueueConfigsAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(qc.ref.Append("priority"))
}

func (qc QueueConfigsAttributes) QueueArn() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("queue_arn"))
}

func (qc QueueConfigsAttributes) QueueId() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("queue_id"))
}

func (qc QueueConfigsAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("queue_name"))
}

type MediaConcurrenciesState struct {
	Channel     string  `json:"channel"`
	Concurrency float64 `json:"concurrency"`
}

type QueueConfigsState struct {
	Channel   string  `json:"channel"`
	Delay     float64 `json:"delay"`
	Priority  float64 `json:"priority"`
	QueueArn  string  `json:"queue_arn"`
	QueueId   string  `json:"queue_id"`
	QueueName string  `json:"queue_name"`
}
