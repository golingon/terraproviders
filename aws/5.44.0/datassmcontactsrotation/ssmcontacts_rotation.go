// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datassmcontactsrotation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Recurrence struct {
	// DailySettings: min=0
	DailySettings []DailySettings `hcl:"daily_settings,block" validate:"min=0"`
	// MonthlySettings: min=0
	MonthlySettings []MonthlySettings `hcl:"monthly_settings,block" validate:"min=0"`
	// ShiftCoverages: min=0
	ShiftCoverages []ShiftCoverages `hcl:"shift_coverages,block" validate:"min=0"`
	// WeeklySettings: min=0
	WeeklySettings []WeeklySettings `hcl:"weekly_settings,block" validate:"min=0"`
}

type DailySettings struct{}

type MonthlySettings struct {
	// MonthlySettingsHandOffTime: min=0
	HandOffTime []MonthlySettingsHandOffTime `hcl:"hand_off_time,block" validate:"min=0"`
}

type MonthlySettingsHandOffTime struct{}

type ShiftCoverages struct {
	// CoverageTimes: min=0
	CoverageTimes []CoverageTimes `hcl:"coverage_times,block" validate:"min=0"`
}

type CoverageTimes struct {
	// End: min=0
	End []End `hcl:"end,block" validate:"min=0"`
	// Start: min=0
	Start []Start `hcl:"start,block" validate:"min=0"`
}

type End struct{}

type Start struct{}

type WeeklySettings struct {
	// WeeklySettingsHandOffTime: min=0
	HandOffTime []WeeklySettingsHandOffTime `hcl:"hand_off_time,block" validate:"min=0"`
}

type WeeklySettingsHandOffTime struct{}

type RecurrenceAttributes struct {
	ref terra.Reference
}

func (r RecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RecurrenceAttributes) InternalWithRef(ref terra.Reference) RecurrenceAttributes {
	return RecurrenceAttributes{ref: ref}
}

func (r RecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RecurrenceAttributes) NumberOfOnCalls() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("number_of_on_calls"))
}

func (r RecurrenceAttributes) RecurrenceMultiplier() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("recurrence_multiplier"))
}

func (r RecurrenceAttributes) DailySettings() terra.ListValue[DailySettingsAttributes] {
	return terra.ReferenceAsList[DailySettingsAttributes](r.ref.Append("daily_settings"))
}

func (r RecurrenceAttributes) MonthlySettings() terra.ListValue[MonthlySettingsAttributes] {
	return terra.ReferenceAsList[MonthlySettingsAttributes](r.ref.Append("monthly_settings"))
}

func (r RecurrenceAttributes) ShiftCoverages() terra.ListValue[ShiftCoveragesAttributes] {
	return terra.ReferenceAsList[ShiftCoveragesAttributes](r.ref.Append("shift_coverages"))
}

func (r RecurrenceAttributes) WeeklySettings() terra.ListValue[WeeklySettingsAttributes] {
	return terra.ReferenceAsList[WeeklySettingsAttributes](r.ref.Append("weekly_settings"))
}

type DailySettingsAttributes struct {
	ref terra.Reference
}

func (ds DailySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DailySettingsAttributes) InternalWithRef(ref terra.Reference) DailySettingsAttributes {
	return DailySettingsAttributes{ref: ref}
}

func (ds DailySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DailySettingsAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("hour_of_day"))
}

func (ds DailySettingsAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("minute_of_hour"))
}

type MonthlySettingsAttributes struct {
	ref terra.Reference
}

func (ms MonthlySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MonthlySettingsAttributes) InternalWithRef(ref terra.Reference) MonthlySettingsAttributes {
	return MonthlySettingsAttributes{ref: ref}
}

func (ms MonthlySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MonthlySettingsAttributes) DayOfMonth() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("day_of_month"))
}

func (ms MonthlySettingsAttributes) HandOffTime() terra.ListValue[MonthlySettingsHandOffTimeAttributes] {
	return terra.ReferenceAsList[MonthlySettingsHandOffTimeAttributes](ms.ref.Append("hand_off_time"))
}

type MonthlySettingsHandOffTimeAttributes struct {
	ref terra.Reference
}

func (hot MonthlySettingsHandOffTimeAttributes) InternalRef() (terra.Reference, error) {
	return hot.ref, nil
}

func (hot MonthlySettingsHandOffTimeAttributes) InternalWithRef(ref terra.Reference) MonthlySettingsHandOffTimeAttributes {
	return MonthlySettingsHandOffTimeAttributes{ref: ref}
}

func (hot MonthlySettingsHandOffTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hot.ref.InternalTokens()
}

func (hot MonthlySettingsHandOffTimeAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("hour_of_day"))
}

func (hot MonthlySettingsHandOffTimeAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("minute_of_hour"))
}

type ShiftCoveragesAttributes struct {
	ref terra.Reference
}

func (sc ShiftCoveragesAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ShiftCoveragesAttributes) InternalWithRef(ref terra.Reference) ShiftCoveragesAttributes {
	return ShiftCoveragesAttributes{ref: ref}
}

func (sc ShiftCoveragesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ShiftCoveragesAttributes) MapBlockKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("map_block_key"))
}

func (sc ShiftCoveragesAttributes) CoverageTimes() terra.ListValue[CoverageTimesAttributes] {
	return terra.ReferenceAsList[CoverageTimesAttributes](sc.ref.Append("coverage_times"))
}

type CoverageTimesAttributes struct {
	ref terra.Reference
}

func (ct CoverageTimesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct CoverageTimesAttributes) InternalWithRef(ref terra.Reference) CoverageTimesAttributes {
	return CoverageTimesAttributes{ref: ref}
}

func (ct CoverageTimesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct CoverageTimesAttributes) End() terra.ListValue[EndAttributes] {
	return terra.ReferenceAsList[EndAttributes](ct.ref.Append("end"))
}

func (ct CoverageTimesAttributes) Start() terra.ListValue[StartAttributes] {
	return terra.ReferenceAsList[StartAttributes](ct.ref.Append("start"))
}

type EndAttributes struct {
	ref terra.Reference
}

func (e EndAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EndAttributes) InternalWithRef(ref terra.Reference) EndAttributes {
	return EndAttributes{ref: ref}
}

func (e EndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EndAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("hour_of_day"))
}

func (e EndAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("minute_of_hour"))
}

type StartAttributes struct {
	ref terra.Reference
}

func (s StartAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StartAttributes) InternalWithRef(ref terra.Reference) StartAttributes {
	return StartAttributes{ref: ref}
}

func (s StartAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StartAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("hour_of_day"))
}

func (s StartAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("minute_of_hour"))
}

type WeeklySettingsAttributes struct {
	ref terra.Reference
}

func (ws WeeklySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WeeklySettingsAttributes) InternalWithRef(ref terra.Reference) WeeklySettingsAttributes {
	return WeeklySettingsAttributes{ref: ref}
}

func (ws WeeklySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WeeklySettingsAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("day_of_week"))
}

func (ws WeeklySettingsAttributes) HandOffTime() terra.ListValue[WeeklySettingsHandOffTimeAttributes] {
	return terra.ReferenceAsList[WeeklySettingsHandOffTimeAttributes](ws.ref.Append("hand_off_time"))
}

type WeeklySettingsHandOffTimeAttributes struct {
	ref terra.Reference
}

func (hot WeeklySettingsHandOffTimeAttributes) InternalRef() (terra.Reference, error) {
	return hot.ref, nil
}

func (hot WeeklySettingsHandOffTimeAttributes) InternalWithRef(ref terra.Reference) WeeklySettingsHandOffTimeAttributes {
	return WeeklySettingsHandOffTimeAttributes{ref: ref}
}

func (hot WeeklySettingsHandOffTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hot.ref.InternalTokens()
}

func (hot WeeklySettingsHandOffTimeAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("hour_of_day"))
}

func (hot WeeklySettingsHandOffTimeAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("minute_of_hour"))
}

type RecurrenceState struct {
	NumberOfOnCalls      float64                `json:"number_of_on_calls"`
	RecurrenceMultiplier float64                `json:"recurrence_multiplier"`
	DailySettings        []DailySettingsState   `json:"daily_settings"`
	MonthlySettings      []MonthlySettingsState `json:"monthly_settings"`
	ShiftCoverages       []ShiftCoveragesState  `json:"shift_coverages"`
	WeeklySettings       []WeeklySettingsState  `json:"weekly_settings"`
}

type DailySettingsState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type MonthlySettingsState struct {
	DayOfMonth  float64                           `json:"day_of_month"`
	HandOffTime []MonthlySettingsHandOffTimeState `json:"hand_off_time"`
}

type MonthlySettingsHandOffTimeState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type ShiftCoveragesState struct {
	MapBlockKey   string               `json:"map_block_key"`
	CoverageTimes []CoverageTimesState `json:"coverage_times"`
}

type CoverageTimesState struct {
	End   []EndState   `json:"end"`
	Start []StartState `json:"start"`
}

type EndState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type StartState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type WeeklySettingsState struct {
	DayOfWeek   string                           `json:"day_of_week"`
	HandOffTime []WeeklySettingsHandOffTimeState `json:"hand_off_time"`
}

type WeeklySettingsHandOffTimeState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}
