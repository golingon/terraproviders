// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	verifiedaccessinstance "github.com/golingon/terraproviders/aws/5.44.0/verifiedaccessinstance"
	"io"
)

// NewVerifiedaccessInstance creates a new instance of [VerifiedaccessInstance].
func NewVerifiedaccessInstance(name string, args VerifiedaccessInstanceArgs) *VerifiedaccessInstance {
	return &VerifiedaccessInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VerifiedaccessInstance)(nil)

// VerifiedaccessInstance represents the Terraform resource aws_verifiedaccess_instance.
type VerifiedaccessInstance struct {
	Name      string
	Args      VerifiedaccessInstanceArgs
	state     *verifiedaccessInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) Type() string {
	return "aws_verifiedaccess_instance"
}

// LocalName returns the local name for [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) LocalName() string {
	return vi.Name
}

// Configuration returns the configuration (args) for [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) Configuration() interface{} {
	return vi.Args
}

// DependOn is used for other resources to depend on [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(vi)
}

// Dependencies returns the list of resources [VerifiedaccessInstance] depends_on.
func (vi *VerifiedaccessInstance) Dependencies() terra.Dependencies {
	return vi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) LifecycleManagement() *terra.Lifecycle {
	return vi.Lifecycle
}

// Attributes returns the attributes for [VerifiedaccessInstance].
func (vi *VerifiedaccessInstance) Attributes() verifiedaccessInstanceAttributes {
	return verifiedaccessInstanceAttributes{ref: terra.ReferenceResource(vi)}
}

// ImportState imports the given attribute values into [VerifiedaccessInstance]'s state.
func (vi *VerifiedaccessInstance) ImportState(av io.Reader) error {
	vi.state = &verifiedaccessInstanceState{}
	if err := json.NewDecoder(av).Decode(vi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vi.Type(), vi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VerifiedaccessInstance] has state.
func (vi *VerifiedaccessInstance) State() (*verifiedaccessInstanceState, bool) {
	return vi.state, vi.state != nil
}

// StateMust returns the state for [VerifiedaccessInstance]. Panics if the state is nil.
func (vi *VerifiedaccessInstance) StateMust() *verifiedaccessInstanceState {
	if vi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vi.Type(), vi.LocalName()))
	}
	return vi.state
}

// VerifiedaccessInstanceArgs contains the configurations for aws_verifiedaccess_instance.
type VerifiedaccessInstanceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FipsEnabled: bool, optional
	FipsEnabled terra.BoolValue `hcl:"fips_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VerifiedAccessTrustProviders: min=0
	VerifiedAccessTrustProviders []verifiedaccessinstance.VerifiedAccessTrustProviders `hcl:"verified_access_trust_providers,block" validate:"min=0"`
}
type verifiedaccessInstanceAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("creation_time"))
}

// Description returns a reference to field description of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("description"))
}

// FipsEnabled returns a reference to field fips_enabled of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) FipsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(vi.ref.Append("fips_enabled"))
}

// Id returns a reference to field id of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("last_updated_time"))
}

// Tags returns a reference to field tags of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_verifiedaccess_instance.
func (vi verifiedaccessInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vi.ref.Append("tags_all"))
}

func (vi verifiedaccessInstanceAttributes) VerifiedAccessTrustProviders() terra.ListValue[verifiedaccessinstance.VerifiedAccessTrustProvidersAttributes] {
	return terra.ReferenceAsList[verifiedaccessinstance.VerifiedAccessTrustProvidersAttributes](vi.ref.Append("verified_access_trust_providers"))
}

type verifiedaccessInstanceState struct {
	CreationTime                 string                                                     `json:"creation_time"`
	Description                  string                                                     `json:"description"`
	FipsEnabled                  bool                                                       `json:"fips_enabled"`
	Id                           string                                                     `json:"id"`
	LastUpdatedTime              string                                                     `json:"last_updated_time"`
	Tags                         map[string]string                                          `json:"tags"`
	TagsAll                      map[string]string                                          `json:"tags_all"`
	VerifiedAccessTrustProviders []verifiedaccessinstance.VerifiedAccessTrustProvidersState `json:"verified_access_trust_providers"`
}
