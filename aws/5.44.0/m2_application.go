// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	m2application "github.com/golingon/terraproviders/aws/5.44.0/m2application"
	"io"
)

// NewM2Application creates a new instance of [M2Application].
func NewM2Application(name string, args M2ApplicationArgs) *M2Application {
	return &M2Application{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*M2Application)(nil)

// M2Application represents the Terraform resource aws_m2_application.
type M2Application struct {
	Name      string
	Args      M2ApplicationArgs
	state     *m2ApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [M2Application].
func (ma *M2Application) Type() string {
	return "aws_m2_application"
}

// LocalName returns the local name for [M2Application].
func (ma *M2Application) LocalName() string {
	return ma.Name
}

// Configuration returns the configuration (args) for [M2Application].
func (ma *M2Application) Configuration() interface{} {
	return ma.Args
}

// DependOn is used for other resources to depend on [M2Application].
func (ma *M2Application) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

// Dependencies returns the list of resources [M2Application] depends_on.
func (ma *M2Application) Dependencies() terra.Dependencies {
	return ma.DependsOn
}

// LifecycleManagement returns the lifecycle block for [M2Application].
func (ma *M2Application) LifecycleManagement() *terra.Lifecycle {
	return ma.Lifecycle
}

// Attributes returns the attributes for [M2Application].
func (ma *M2Application) Attributes() m2ApplicationAttributes {
	return m2ApplicationAttributes{ref: terra.ReferenceResource(ma)}
}

// ImportState imports the given attribute values into [M2Application]'s state.
func (ma *M2Application) ImportState(av io.Reader) error {
	ma.state = &m2ApplicationState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [M2Application] has state.
func (ma *M2Application) State() (*m2ApplicationState, bool) {
	return ma.state, ma.state != nil
}

// StateMust returns the state for [M2Application]. Panics if the state is nil.
func (ma *M2Application) StateMust() *m2ApplicationState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

// M2ApplicationArgs contains the configurations for aws_m2_application.
type M2ApplicationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Definition: min=0
	Definition []m2application.Definition `hcl:"definition,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *m2application.Timeouts `hcl:"timeouts,block"`
}
type m2ApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_m2_application.
func (ma m2ApplicationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("application_id"))
}

// Arn returns a reference to field arn of aws_m2_application.
func (ma m2ApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("arn"))
}

// CurrentVersion returns a reference to field current_version of aws_m2_application.
func (ma m2ApplicationAttributes) CurrentVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(ma.ref.Append("current_version"))
}

// Description returns a reference to field description of aws_m2_application.
func (ma m2ApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("description"))
}

// EngineType returns a reference to field engine_type of aws_m2_application.
func (ma m2ApplicationAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("engine_type"))
}

// Id returns a reference to field id of aws_m2_application.
func (ma m2ApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_m2_application.
func (ma m2ApplicationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_m2_application.
func (ma m2ApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_m2_application.
func (ma m2ApplicationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ma.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_m2_application.
func (ma m2ApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ma.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_m2_application.
func (ma m2ApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ma.ref.Append("tags_all"))
}

func (ma m2ApplicationAttributes) Definition() terra.ListValue[m2application.DefinitionAttributes] {
	return terra.ReferenceAsList[m2application.DefinitionAttributes](ma.ref.Append("definition"))
}

func (ma m2ApplicationAttributes) Timeouts() m2application.TimeoutsAttributes {
	return terra.ReferenceAsSingle[m2application.TimeoutsAttributes](ma.ref.Append("timeouts"))
}

type m2ApplicationState struct {
	ApplicationId  string                          `json:"application_id"`
	Arn            string                          `json:"arn"`
	CurrentVersion float64                         `json:"current_version"`
	Description    string                          `json:"description"`
	EngineType     string                          `json:"engine_type"`
	Id             string                          `json:"id"`
	KmsKeyId       string                          `json:"kms_key_id"`
	Name           string                          `json:"name"`
	RoleArn        string                          `json:"role_arn"`
	Tags           map[string]string               `json:"tags"`
	TagsAll        map[string]string               `json:"tags_all"`
	Definition     []m2application.DefinitionState `json:"definition"`
	Timeouts       *m2application.TimeoutsState    `json:"timeouts"`
}
