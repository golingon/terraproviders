// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securityhubconfigurationpolicy "github.com/golingon/terraproviders/aws/5.44.0/securityhubconfigurationpolicy"
	"io"
)

// NewSecurityhubConfigurationPolicy creates a new instance of [SecurityhubConfigurationPolicy].
func NewSecurityhubConfigurationPolicy(name string, args SecurityhubConfigurationPolicyArgs) *SecurityhubConfigurationPolicy {
	return &SecurityhubConfigurationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityhubConfigurationPolicy)(nil)

// SecurityhubConfigurationPolicy represents the Terraform resource aws_securityhub_configuration_policy.
type SecurityhubConfigurationPolicy struct {
	Name      string
	Args      SecurityhubConfigurationPolicyArgs
	state     *securityhubConfigurationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) Type() string {
	return "aws_securityhub_configuration_policy"
}

// LocalName returns the local name for [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) LocalName() string {
	return scp.Name
}

// Configuration returns the configuration (args) for [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) Configuration() interface{} {
	return scp.Args
}

// DependOn is used for other resources to depend on [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(scp)
}

// Dependencies returns the list of resources [SecurityhubConfigurationPolicy] depends_on.
func (scp *SecurityhubConfigurationPolicy) Dependencies() terra.Dependencies {
	return scp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) LifecycleManagement() *terra.Lifecycle {
	return scp.Lifecycle
}

// Attributes returns the attributes for [SecurityhubConfigurationPolicy].
func (scp *SecurityhubConfigurationPolicy) Attributes() securityhubConfigurationPolicyAttributes {
	return securityhubConfigurationPolicyAttributes{ref: terra.ReferenceResource(scp)}
}

// ImportState imports the given attribute values into [SecurityhubConfigurationPolicy]'s state.
func (scp *SecurityhubConfigurationPolicy) ImportState(av io.Reader) error {
	scp.state = &securityhubConfigurationPolicyState{}
	if err := json.NewDecoder(av).Decode(scp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scp.Type(), scp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecurityhubConfigurationPolicy] has state.
func (scp *SecurityhubConfigurationPolicy) State() (*securityhubConfigurationPolicyState, bool) {
	return scp.state, scp.state != nil
}

// StateMust returns the state for [SecurityhubConfigurationPolicy]. Panics if the state is nil.
func (scp *SecurityhubConfigurationPolicy) StateMust() *securityhubConfigurationPolicyState {
	if scp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scp.Type(), scp.LocalName()))
	}
	return scp.state
}

// SecurityhubConfigurationPolicyArgs contains the configurations for aws_securityhub_configuration_policy.
type SecurityhubConfigurationPolicyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConfigurationPolicy: required
	ConfigurationPolicy *securityhubconfigurationpolicy.ConfigurationPolicy `hcl:"configuration_policy,block" validate:"required"`
}
type securityhubConfigurationPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securityhub_configuration_policy.
func (scp securityhubConfigurationPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_securityhub_configuration_policy.
func (scp securityhubConfigurationPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("description"))
}

// Id returns a reference to field id of aws_securityhub_configuration_policy.
func (scp securityhubConfigurationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("id"))
}

// Name returns a reference to field name of aws_securityhub_configuration_policy.
func (scp securityhubConfigurationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("name"))
}

func (scp securityhubConfigurationPolicyAttributes) ConfigurationPolicy() terra.ListValue[securityhubconfigurationpolicy.ConfigurationPolicyAttributes] {
	return terra.ReferenceAsList[securityhubconfigurationpolicy.ConfigurationPolicyAttributes](scp.ref.Append("configuration_policy"))
}

type securityhubConfigurationPolicyState struct {
	Arn                 string                                                    `json:"arn"`
	Description         string                                                    `json:"description"`
	Id                  string                                                    `json:"id"`
	Name                string                                                    `json:"name"`
	ConfigurationPolicy []securityhubconfigurationpolicy.ConfigurationPolicyState `json:"configuration_policy"`
}
