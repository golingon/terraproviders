// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package sagemakerdataqualityjobdefinition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataQualityAppSpecification struct {
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// ImageUri: string, required
	ImageUri terra.StringValue `hcl:"image_uri,attr" validate:"required"`
	// PostAnalyticsProcessorSourceUri: string, optional
	PostAnalyticsProcessorSourceUri terra.StringValue `hcl:"post_analytics_processor_source_uri,attr"`
	// RecordPreprocessorSourceUri: string, optional
	RecordPreprocessorSourceUri terra.StringValue `hcl:"record_preprocessor_source_uri,attr"`
}

type DataQualityBaselineConfig struct {
	// ConstraintsResource: optional
	ConstraintsResource *ConstraintsResource `hcl:"constraints_resource,block"`
	// StatisticsResource: optional
	StatisticsResource *StatisticsResource `hcl:"statistics_resource,block"`
}

type ConstraintsResource struct {
	// S3Uri: string, optional
	S3Uri terra.StringValue `hcl:"s3_uri,attr"`
}

type StatisticsResource struct {
	// S3Uri: string, optional
	S3Uri terra.StringValue `hcl:"s3_uri,attr"`
}

type DataQualityJobInput struct {
	// BatchTransformInput: optional
	BatchTransformInput *BatchTransformInput `hcl:"batch_transform_input,block"`
	// EndpointInput: optional
	EndpointInput *EndpointInput `hcl:"endpoint_input,block"`
}

type BatchTransformInput struct {
	// DataCapturedDestinationS3Uri: string, required
	DataCapturedDestinationS3Uri terra.StringValue `hcl:"data_captured_destination_s3_uri,attr" validate:"required"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3DataDistributionType: string, optional
	S3DataDistributionType terra.StringValue `hcl:"s3_data_distribution_type,attr"`
	// S3InputMode: string, optional
	S3InputMode terra.StringValue `hcl:"s3_input_mode,attr"`
	// DatasetFormat: required
	DatasetFormat *DatasetFormat `hcl:"dataset_format,block" validate:"required"`
}

type DatasetFormat struct {
	// Csv: optional
	Csv *Csv `hcl:"csv,block"`
	// Json: optional
	Json *Json `hcl:"json,block"`
}

type Csv struct {
	// Header: bool, optional
	Header terra.BoolValue `hcl:"header,attr"`
}

type Json struct {
	// Line: bool, optional
	Line terra.BoolValue `hcl:"line,attr"`
}

type EndpointInput struct {
	// EndpointName: string, required
	EndpointName terra.StringValue `hcl:"endpoint_name,attr" validate:"required"`
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3DataDistributionType: string, optional
	S3DataDistributionType terra.StringValue `hcl:"s3_data_distribution_type,attr"`
	// S3InputMode: string, optional
	S3InputMode terra.StringValue `hcl:"s3_input_mode,attr"`
}

type DataQualityJobOutputConfig struct {
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MonitoringOutputs: required
	MonitoringOutputs *MonitoringOutputs `hcl:"monitoring_outputs,block" validate:"required"`
}

type MonitoringOutputs struct {
	// S3Output: required
	S3Output *S3Output `hcl:"s3_output,block" validate:"required"`
}

type S3Output struct {
	// LocalPath: string, optional
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3UploadMode: string, optional
	S3UploadMode terra.StringValue `hcl:"s3_upload_mode,attr"`
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type JobResources struct {
	// ClusterConfig: required
	ClusterConfig *ClusterConfig `hcl:"cluster_config,block" validate:"required"`
}

type ClusterConfig struct {
	// InstanceCount: number, required
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// VolumeKmsKeyId: string, optional
	VolumeKmsKeyId terra.StringValue `hcl:"volume_kms_key_id,attr"`
	// VolumeSizeInGb: number, required
	VolumeSizeInGb terra.NumberValue `hcl:"volume_size_in_gb,attr" validate:"required"`
}

type NetworkConfig struct {
	// EnableInterContainerTrafficEncryption: bool, optional
	EnableInterContainerTrafficEncryption terra.BoolValue `hcl:"enable_inter_container_traffic_encryption,attr"`
	// EnableNetworkIsolation: bool, optional
	EnableNetworkIsolation terra.BoolValue `hcl:"enable_network_isolation,attr"`
	// VpcConfig: optional
	VpcConfig *VpcConfig `hcl:"vpc_config,block"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type StoppingCondition struct {
	// MaxRuntimeInSeconds: number, optional
	MaxRuntimeInSeconds terra.NumberValue `hcl:"max_runtime_in_seconds,attr"`
}

type DataQualityAppSpecificationAttributes struct {
	ref terra.Reference
}

func (dqas DataQualityAppSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return dqas.ref, nil
}

func (dqas DataQualityAppSpecificationAttributes) InternalWithRef(ref terra.Reference) DataQualityAppSpecificationAttributes {
	return DataQualityAppSpecificationAttributes{ref: ref}
}

func (dqas DataQualityAppSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqas.ref.InternalTokens()
}

func (dqas DataQualityAppSpecificationAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dqas.ref.Append("environment"))
}

func (dqas DataQualityAppSpecificationAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("image_uri"))
}

func (dqas DataQualityAppSpecificationAttributes) PostAnalyticsProcessorSourceUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("post_analytics_processor_source_uri"))
}

func (dqas DataQualityAppSpecificationAttributes) RecordPreprocessorSourceUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("record_preprocessor_source_uri"))
}

type DataQualityBaselineConfigAttributes struct {
	ref terra.Reference
}

func (dqbc DataQualityBaselineConfigAttributes) InternalRef() (terra.Reference, error) {
	return dqbc.ref, nil
}

func (dqbc DataQualityBaselineConfigAttributes) InternalWithRef(ref terra.Reference) DataQualityBaselineConfigAttributes {
	return DataQualityBaselineConfigAttributes{ref: ref}
}

func (dqbc DataQualityBaselineConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqbc.ref.InternalTokens()
}

func (dqbc DataQualityBaselineConfigAttributes) ConstraintsResource() terra.ListValue[ConstraintsResourceAttributes] {
	return terra.ReferenceAsList[ConstraintsResourceAttributes](dqbc.ref.Append("constraints_resource"))
}

func (dqbc DataQualityBaselineConfigAttributes) StatisticsResource() terra.ListValue[StatisticsResourceAttributes] {
	return terra.ReferenceAsList[StatisticsResourceAttributes](dqbc.ref.Append("statistics_resource"))
}

type ConstraintsResourceAttributes struct {
	ref terra.Reference
}

func (cr ConstraintsResourceAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr ConstraintsResourceAttributes) InternalWithRef(ref terra.Reference) ConstraintsResourceAttributes {
	return ConstraintsResourceAttributes{ref: ref}
}

func (cr ConstraintsResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr ConstraintsResourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("s3_uri"))
}

type StatisticsResourceAttributes struct {
	ref terra.Reference
}

func (sr StatisticsResourceAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr StatisticsResourceAttributes) InternalWithRef(ref terra.Reference) StatisticsResourceAttributes {
	return StatisticsResourceAttributes{ref: ref}
}

func (sr StatisticsResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr StatisticsResourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("s3_uri"))
}

type DataQualityJobInputAttributes struct {
	ref terra.Reference
}

func (dqji DataQualityJobInputAttributes) InternalRef() (terra.Reference, error) {
	return dqji.ref, nil
}

func (dqji DataQualityJobInputAttributes) InternalWithRef(ref terra.Reference) DataQualityJobInputAttributes {
	return DataQualityJobInputAttributes{ref: ref}
}

func (dqji DataQualityJobInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqji.ref.InternalTokens()
}

func (dqji DataQualityJobInputAttributes) BatchTransformInput() terra.ListValue[BatchTransformInputAttributes] {
	return terra.ReferenceAsList[BatchTransformInputAttributes](dqji.ref.Append("batch_transform_input"))
}

func (dqji DataQualityJobInputAttributes) EndpointInput() terra.ListValue[EndpointInputAttributes] {
	return terra.ReferenceAsList[EndpointInputAttributes](dqji.ref.Append("endpoint_input"))
}

type BatchTransformInputAttributes struct {
	ref terra.Reference
}

func (bti BatchTransformInputAttributes) InternalRef() (terra.Reference, error) {
	return bti.ref, nil
}

func (bti BatchTransformInputAttributes) InternalWithRef(ref terra.Reference) BatchTransformInputAttributes {
	return BatchTransformInputAttributes{ref: ref}
}

func (bti BatchTransformInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bti.ref.InternalTokens()
}

func (bti BatchTransformInputAttributes) DataCapturedDestinationS3Uri() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("data_captured_destination_s3_uri"))
}

func (bti BatchTransformInputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("local_path"))
}

func (bti BatchTransformInputAttributes) S3DataDistributionType() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("s3_data_distribution_type"))
}

func (bti BatchTransformInputAttributes) S3InputMode() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("s3_input_mode"))
}

func (bti BatchTransformInputAttributes) DatasetFormat() terra.ListValue[DatasetFormatAttributes] {
	return terra.ReferenceAsList[DatasetFormatAttributes](bti.ref.Append("dataset_format"))
}

type DatasetFormatAttributes struct {
	ref terra.Reference
}

func (df DatasetFormatAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df DatasetFormatAttributes) InternalWithRef(ref terra.Reference) DatasetFormatAttributes {
	return DatasetFormatAttributes{ref: ref}
}

func (df DatasetFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df DatasetFormatAttributes) Csv() terra.ListValue[CsvAttributes] {
	return terra.ReferenceAsList[CsvAttributes](df.ref.Append("csv"))
}

func (df DatasetFormatAttributes) Json() terra.ListValue[JsonAttributes] {
	return terra.ReferenceAsList[JsonAttributes](df.ref.Append("json"))
}

type CsvAttributes struct {
	ref terra.Reference
}

func (c CsvAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CsvAttributes) InternalWithRef(ref terra.Reference) CsvAttributes {
	return CsvAttributes{ref: ref}
}

func (c CsvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CsvAttributes) Header() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("header"))
}

type JsonAttributes struct {
	ref terra.Reference
}

func (j JsonAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j JsonAttributes) InternalWithRef(ref terra.Reference) JsonAttributes {
	return JsonAttributes{ref: ref}
}

func (j JsonAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j JsonAttributes) Line() terra.BoolValue {
	return terra.ReferenceAsBool(j.ref.Append("line"))
}

type EndpointInputAttributes struct {
	ref terra.Reference
}

func (ei EndpointInputAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei EndpointInputAttributes) InternalWithRef(ref terra.Reference) EndpointInputAttributes {
	return EndpointInputAttributes{ref: ref}
}

func (ei EndpointInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei EndpointInputAttributes) EndpointName() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("endpoint_name"))
}

func (ei EndpointInputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("local_path"))
}

func (ei EndpointInputAttributes) S3DataDistributionType() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("s3_data_distribution_type"))
}

func (ei EndpointInputAttributes) S3InputMode() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("s3_input_mode"))
}

type DataQualityJobOutputConfigAttributes struct {
	ref terra.Reference
}

func (dqjoc DataQualityJobOutputConfigAttributes) InternalRef() (terra.Reference, error) {
	return dqjoc.ref, nil
}

func (dqjoc DataQualityJobOutputConfigAttributes) InternalWithRef(ref terra.Reference) DataQualityJobOutputConfigAttributes {
	return DataQualityJobOutputConfigAttributes{ref: ref}
}

func (dqjoc DataQualityJobOutputConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqjoc.ref.InternalTokens()
}

func (dqjoc DataQualityJobOutputConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(dqjoc.ref.Append("kms_key_id"))
}

func (dqjoc DataQualityJobOutputConfigAttributes) MonitoringOutputs() terra.ListValue[MonitoringOutputsAttributes] {
	return terra.ReferenceAsList[MonitoringOutputsAttributes](dqjoc.ref.Append("monitoring_outputs"))
}

type MonitoringOutputsAttributes struct {
	ref terra.Reference
}

func (mo MonitoringOutputsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MonitoringOutputsAttributes) InternalWithRef(ref terra.Reference) MonitoringOutputsAttributes {
	return MonitoringOutputsAttributes{ref: ref}
}

func (mo MonitoringOutputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo MonitoringOutputsAttributes) S3Output() terra.ListValue[S3OutputAttributes] {
	return terra.ReferenceAsList[S3OutputAttributes](mo.ref.Append("s3_output"))
}

type S3OutputAttributes struct {
	ref terra.Reference
}

func (so S3OutputAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so S3OutputAttributes) InternalWithRef(ref terra.Reference) S3OutputAttributes {
	return S3OutputAttributes{ref: ref}
}

func (so S3OutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so S3OutputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("local_path"))
}

func (so S3OutputAttributes) S3UploadMode() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("s3_upload_mode"))
}

func (so S3OutputAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("s3_uri"))
}

type JobResourcesAttributes struct {
	ref terra.Reference
}

func (jr JobResourcesAttributes) InternalRef() (terra.Reference, error) {
	return jr.ref, nil
}

func (jr JobResourcesAttributes) InternalWithRef(ref terra.Reference) JobResourcesAttributes {
	return JobResourcesAttributes{ref: ref}
}

func (jr JobResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jr.ref.InternalTokens()
}

func (jr JobResourcesAttributes) ClusterConfig() terra.ListValue[ClusterConfigAttributes] {
	return terra.ReferenceAsList[ClusterConfigAttributes](jr.ref.Append("cluster_config"))
}

type ClusterConfigAttributes struct {
	ref terra.Reference
}

func (cc ClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ClusterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAttributes {
	return ClusterConfigAttributes{ref: ref}
}

func (cc ClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ClusterConfigAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("instance_count"))
}

func (cc ClusterConfigAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("instance_type"))
}

func (cc ClusterConfigAttributes) VolumeKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("volume_kms_key_id"))
}

func (cc ClusterConfigAttributes) VolumeSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("volume_size_in_gb"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) EnableInterContainerTrafficEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_inter_container_traffic_encryption"))
}

func (nc NetworkConfigAttributes) EnableNetworkIsolation() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_network_isolation"))
}

func (nc NetworkConfigAttributes) VpcConfig() terra.ListValue[VpcConfigAttributes] {
	return terra.ReferenceAsList[VpcConfigAttributes](nc.ref.Append("vpc_config"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type StoppingConditionAttributes struct {
	ref terra.Reference
}

func (sc StoppingConditionAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StoppingConditionAttributes) InternalWithRef(ref terra.Reference) StoppingConditionAttributes {
	return StoppingConditionAttributes{ref: ref}
}

func (sc StoppingConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StoppingConditionAttributes) MaxRuntimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_runtime_in_seconds"))
}

type DataQualityAppSpecificationState struct {
	Environment                     map[string]string `json:"environment"`
	ImageUri                        string            `json:"image_uri"`
	PostAnalyticsProcessorSourceUri string            `json:"post_analytics_processor_source_uri"`
	RecordPreprocessorSourceUri     string            `json:"record_preprocessor_source_uri"`
}

type DataQualityBaselineConfigState struct {
	ConstraintsResource []ConstraintsResourceState `json:"constraints_resource"`
	StatisticsResource  []StatisticsResourceState  `json:"statistics_resource"`
}

type ConstraintsResourceState struct {
	S3Uri string `json:"s3_uri"`
}

type StatisticsResourceState struct {
	S3Uri string `json:"s3_uri"`
}

type DataQualityJobInputState struct {
	BatchTransformInput []BatchTransformInputState `json:"batch_transform_input"`
	EndpointInput       []EndpointInputState       `json:"endpoint_input"`
}

type BatchTransformInputState struct {
	DataCapturedDestinationS3Uri string               `json:"data_captured_destination_s3_uri"`
	LocalPath                    string               `json:"local_path"`
	S3DataDistributionType       string               `json:"s3_data_distribution_type"`
	S3InputMode                  string               `json:"s3_input_mode"`
	DatasetFormat                []DatasetFormatState `json:"dataset_format"`
}

type DatasetFormatState struct {
	Csv  []CsvState  `json:"csv"`
	Json []JsonState `json:"json"`
}

type CsvState struct {
	Header bool `json:"header"`
}

type JsonState struct {
	Line bool `json:"line"`
}

type EndpointInputState struct {
	EndpointName           string `json:"endpoint_name"`
	LocalPath              string `json:"local_path"`
	S3DataDistributionType string `json:"s3_data_distribution_type"`
	S3InputMode            string `json:"s3_input_mode"`
}

type DataQualityJobOutputConfigState struct {
	KmsKeyId          string                   `json:"kms_key_id"`
	MonitoringOutputs []MonitoringOutputsState `json:"monitoring_outputs"`
}

type MonitoringOutputsState struct {
	S3Output []S3OutputState `json:"s3_output"`
}

type S3OutputState struct {
	LocalPath    string `json:"local_path"`
	S3UploadMode string `json:"s3_upload_mode"`
	S3Uri        string `json:"s3_uri"`
}

type JobResourcesState struct {
	ClusterConfig []ClusterConfigState `json:"cluster_config"`
}

type ClusterConfigState struct {
	InstanceCount  float64 `json:"instance_count"`
	InstanceType   string  `json:"instance_type"`
	VolumeKmsKeyId string  `json:"volume_kms_key_id"`
	VolumeSizeInGb float64 `json:"volume_size_in_gb"`
}

type NetworkConfigState struct {
	EnableInterContainerTrafficEncryption bool             `json:"enable_inter_container_traffic_encryption"`
	EnableNetworkIsolation                bool             `json:"enable_network_isolation"`
	VpcConfig                             []VpcConfigState `json:"vpc_config"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}

type StoppingConditionState struct {
	MaxRuntimeInSeconds float64 `json:"max_runtime_in_seconds"`
}
