// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	devopsgurueventsourcesconfig "github.com/golingon/terraproviders/aws/5.44.0/devopsgurueventsourcesconfig"
	"io"
)

// NewDevopsguruEventSourcesConfig creates a new instance of [DevopsguruEventSourcesConfig].
func NewDevopsguruEventSourcesConfig(name string, args DevopsguruEventSourcesConfigArgs) *DevopsguruEventSourcesConfig {
	return &DevopsguruEventSourcesConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevopsguruEventSourcesConfig)(nil)

// DevopsguruEventSourcesConfig represents the Terraform resource aws_devopsguru_event_sources_config.
type DevopsguruEventSourcesConfig struct {
	Name      string
	Args      DevopsguruEventSourcesConfigArgs
	state     *devopsguruEventSourcesConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) Type() string {
	return "aws_devopsguru_event_sources_config"
}

// LocalName returns the local name for [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) LocalName() string {
	return desc.Name
}

// Configuration returns the configuration (args) for [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) Configuration() interface{} {
	return desc.Args
}

// DependOn is used for other resources to depend on [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(desc)
}

// Dependencies returns the list of resources [DevopsguruEventSourcesConfig] depends_on.
func (desc *DevopsguruEventSourcesConfig) Dependencies() terra.Dependencies {
	return desc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) LifecycleManagement() *terra.Lifecycle {
	return desc.Lifecycle
}

// Attributes returns the attributes for [DevopsguruEventSourcesConfig].
func (desc *DevopsguruEventSourcesConfig) Attributes() devopsguruEventSourcesConfigAttributes {
	return devopsguruEventSourcesConfigAttributes{ref: terra.ReferenceResource(desc)}
}

// ImportState imports the given attribute values into [DevopsguruEventSourcesConfig]'s state.
func (desc *DevopsguruEventSourcesConfig) ImportState(av io.Reader) error {
	desc.state = &devopsguruEventSourcesConfigState{}
	if err := json.NewDecoder(av).Decode(desc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", desc.Type(), desc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevopsguruEventSourcesConfig] has state.
func (desc *DevopsguruEventSourcesConfig) State() (*devopsguruEventSourcesConfigState, bool) {
	return desc.state, desc.state != nil
}

// StateMust returns the state for [DevopsguruEventSourcesConfig]. Panics if the state is nil.
func (desc *DevopsguruEventSourcesConfig) StateMust() *devopsguruEventSourcesConfigState {
	if desc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", desc.Type(), desc.LocalName()))
	}
	return desc.state
}

// DevopsguruEventSourcesConfigArgs contains the configurations for aws_devopsguru_event_sources_config.
type DevopsguruEventSourcesConfigArgs struct {
	// EventSources: min=0
	EventSources []devopsgurueventsourcesconfig.EventSources `hcl:"event_sources,block" validate:"min=0"`
}
type devopsguruEventSourcesConfigAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_devopsguru_event_sources_config.
func (desc devopsguruEventSourcesConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(desc.ref.Append("id"))
}

func (desc devopsguruEventSourcesConfigAttributes) EventSources() terra.ListValue[devopsgurueventsourcesconfig.EventSourcesAttributes] {
	return terra.ReferenceAsList[devopsgurueventsourcesconfig.EventSourcesAttributes](desc.ref.Append("event_sources"))
}

type devopsguruEventSourcesConfigState struct {
	Id           string                                           `json:"id"`
	EventSources []devopsgurueventsourcesconfig.EventSourcesState `json:"event_sources"`
}
