// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package opsworksinstance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EbsBlockDevice struct {
	// DeleteOnTermination: bool, optional
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceName: string, required
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EphemeralBlockDevice struct {
	// DeviceName: string, required
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// VirtualName: string, required
	VirtualName terra.StringValue `hcl:"virtual_name,attr" validate:"required"`
}

type RootBlockDevice struct {
	// DeleteOnTermination: bool, optional
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EbsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd EbsBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd EbsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) EbsBlockDeviceAttributes {
	return EbsBlockDeviceAttributes{ref: ref}
}

func (ebd EbsBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd EbsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd EbsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd EbsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("iops"))
}

func (ebd EbsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("snapshot_id"))
}

func (ebd EbsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("volume_size"))
}

func (ebd EbsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_type"))
}

type EphemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd EphemeralBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd EphemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) EphemeralBlockDeviceAttributes {
	return EphemeralBlockDeviceAttributes{ref: ref}
}

func (ebd EphemeralBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd EphemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd EphemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("virtual_name"))
}

type RootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd RootBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return rbd.ref, nil
}

func (rbd RootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) RootBlockDeviceAttributes {
	return RootBlockDeviceAttributes{ref: ref}
}

func (rbd RootBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbd.ref.InternalTokens()
}

func (rbd RootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd RootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("iops"))
}

func (rbd RootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("volume_size"))
}

func (rbd RootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EbsBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	DeviceName          string  `json:"device_name"`
	Iops                float64 `json:"iops"`
	SnapshotId          string  `json:"snapshot_id"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type EphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	VirtualName string `json:"virtual_name"`
}

type RootBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	Iops                float64 `json:"iops"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
