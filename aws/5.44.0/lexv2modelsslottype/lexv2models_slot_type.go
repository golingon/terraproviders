// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package lexv2modelsslottype

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CompositeSlotTypeSetting struct {
	// Subslots: min=0
	Subslots []Subslots `hcl:"subslots,block" validate:"min=0"`
}

type Subslots struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SlotTypeId: string, required
	SlotTypeId terra.StringValue `hcl:"slot_type_id,attr" validate:"required"`
}

type ExternalSourceSetting struct {
	// GrammarSlotTypeSetting: min=0
	GrammarSlotTypeSetting []GrammarSlotTypeSetting `hcl:"grammar_slot_type_setting,block" validate:"min=0"`
}

type GrammarSlotTypeSetting struct {
	// Source: min=0
	Source []Source `hcl:"source,block" validate:"min=0"`
}

type Source struct {
	// KmsKeyArn: string, required
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr" validate:"required"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3ObjectKey: string, required
	S3ObjectKey terra.StringValue `hcl:"s3_object_key,attr" validate:"required"`
}

type SlotTypeValues struct {
	// SlotTypeValue: min=0
	SlotTypeValue []SlotTypeValue `hcl:"slot_type_value,block" validate:"min=0"`
	// Synonyms: min=0
	Synonyms []Synonyms `hcl:"synonyms,block" validate:"min=0"`
}

type SlotTypeValue struct {
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Synonyms struct {
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ValueSelectionSetting struct {
	// ResolutionStrategy: string, required
	ResolutionStrategy terra.StringValue `hcl:"resolution_strategy,attr" validate:"required"`
	// AdvancedRecognitionSetting: min=0
	AdvancedRecognitionSetting []AdvancedRecognitionSetting `hcl:"advanced_recognition_setting,block" validate:"min=0"`
	// RegexFilter: min=0
	RegexFilter []RegexFilter `hcl:"regex_filter,block" validate:"min=0"`
}

type AdvancedRecognitionSetting struct {
	// AudioRecognitionSetting: string, optional
	AudioRecognitionSetting terra.StringValue `hcl:"audio_recognition_setting,attr"`
}

type RegexFilter struct {
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type CompositeSlotTypeSettingAttributes struct {
	ref terra.Reference
}

func (csts CompositeSlotTypeSettingAttributes) InternalRef() (terra.Reference, error) {
	return csts.ref, nil
}

func (csts CompositeSlotTypeSettingAttributes) InternalWithRef(ref terra.Reference) CompositeSlotTypeSettingAttributes {
	return CompositeSlotTypeSettingAttributes{ref: ref}
}

func (csts CompositeSlotTypeSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csts.ref.InternalTokens()
}

func (csts CompositeSlotTypeSettingAttributes) Subslots() terra.ListValue[SubslotsAttributes] {
	return terra.ReferenceAsList[SubslotsAttributes](csts.ref.Append("subslots"))
}

type SubslotsAttributes struct {
	ref terra.Reference
}

func (s SubslotsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubslotsAttributes) InternalWithRef(ref terra.Reference) SubslotsAttributes {
	return SubslotsAttributes{ref: ref}
}

func (s SubslotsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubslotsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SubslotsAttributes) SlotTypeId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("slot_type_id"))
}

type ExternalSourceSettingAttributes struct {
	ref terra.Reference
}

func (ess ExternalSourceSettingAttributes) InternalRef() (terra.Reference, error) {
	return ess.ref, nil
}

func (ess ExternalSourceSettingAttributes) InternalWithRef(ref terra.Reference) ExternalSourceSettingAttributes {
	return ExternalSourceSettingAttributes{ref: ref}
}

func (ess ExternalSourceSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ess.ref.InternalTokens()
}

func (ess ExternalSourceSettingAttributes) GrammarSlotTypeSetting() terra.ListValue[GrammarSlotTypeSettingAttributes] {
	return terra.ReferenceAsList[GrammarSlotTypeSettingAttributes](ess.ref.Append("grammar_slot_type_setting"))
}

type GrammarSlotTypeSettingAttributes struct {
	ref terra.Reference
}

func (gsts GrammarSlotTypeSettingAttributes) InternalRef() (terra.Reference, error) {
	return gsts.ref, nil
}

func (gsts GrammarSlotTypeSettingAttributes) InternalWithRef(ref terra.Reference) GrammarSlotTypeSettingAttributes {
	return GrammarSlotTypeSettingAttributes{ref: ref}
}

func (gsts GrammarSlotTypeSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsts.ref.InternalTokens()
}

func (gsts GrammarSlotTypeSettingAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](gsts.ref.Append("source"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("kms_key_arn"))
}

func (s SourceAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("s3_bucket_name"))
}

func (s SourceAttributes) S3ObjectKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("s3_object_key"))
}

type SlotTypeValuesAttributes struct {
	ref terra.Reference
}

func (stv SlotTypeValuesAttributes) InternalRef() (terra.Reference, error) {
	return stv.ref, nil
}

func (stv SlotTypeValuesAttributes) InternalWithRef(ref terra.Reference) SlotTypeValuesAttributes {
	return SlotTypeValuesAttributes{ref: ref}
}

func (stv SlotTypeValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stv.ref.InternalTokens()
}

func (stv SlotTypeValuesAttributes) SlotTypeValue() terra.ListValue[SlotTypeValueAttributes] {
	return terra.ReferenceAsList[SlotTypeValueAttributes](stv.ref.Append("slot_type_value"))
}

func (stv SlotTypeValuesAttributes) Synonyms() terra.ListValue[SynonymsAttributes] {
	return terra.ReferenceAsList[SynonymsAttributes](stv.ref.Append("synonyms"))
}

type SlotTypeValueAttributes struct {
	ref terra.Reference
}

func (stv SlotTypeValueAttributes) InternalRef() (terra.Reference, error) {
	return stv.ref, nil
}

func (stv SlotTypeValueAttributes) InternalWithRef(ref terra.Reference) SlotTypeValueAttributes {
	return SlotTypeValueAttributes{ref: ref}
}

func (stv SlotTypeValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stv.ref.InternalTokens()
}

func (stv SlotTypeValueAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(stv.ref.Append("value"))
}

type SynonymsAttributes struct {
	ref terra.Reference
}

func (s SynonymsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SynonymsAttributes) InternalWithRef(ref terra.Reference) SynonymsAttributes {
	return SynonymsAttributes{ref: ref}
}

func (s SynonymsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SynonymsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ValueSelectionSettingAttributes struct {
	ref terra.Reference
}

func (vss ValueSelectionSettingAttributes) InternalRef() (terra.Reference, error) {
	return vss.ref, nil
}

func (vss ValueSelectionSettingAttributes) InternalWithRef(ref terra.Reference) ValueSelectionSettingAttributes {
	return ValueSelectionSettingAttributes{ref: ref}
}

func (vss ValueSelectionSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vss.ref.InternalTokens()
}

func (vss ValueSelectionSettingAttributes) ResolutionStrategy() terra.StringValue {
	return terra.ReferenceAsString(vss.ref.Append("resolution_strategy"))
}

func (vss ValueSelectionSettingAttributes) AdvancedRecognitionSetting() terra.ListValue[AdvancedRecognitionSettingAttributes] {
	return terra.ReferenceAsList[AdvancedRecognitionSettingAttributes](vss.ref.Append("advanced_recognition_setting"))
}

func (vss ValueSelectionSettingAttributes) RegexFilter() terra.ListValue[RegexFilterAttributes] {
	return terra.ReferenceAsList[RegexFilterAttributes](vss.ref.Append("regex_filter"))
}

type AdvancedRecognitionSettingAttributes struct {
	ref terra.Reference
}

func (ars AdvancedRecognitionSettingAttributes) InternalRef() (terra.Reference, error) {
	return ars.ref, nil
}

func (ars AdvancedRecognitionSettingAttributes) InternalWithRef(ref terra.Reference) AdvancedRecognitionSettingAttributes {
	return AdvancedRecognitionSettingAttributes{ref: ref}
}

func (ars AdvancedRecognitionSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ars.ref.InternalTokens()
}

func (ars AdvancedRecognitionSettingAttributes) AudioRecognitionSetting() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("audio_recognition_setting"))
}

type RegexFilterAttributes struct {
	ref terra.Reference
}

func (rf RegexFilterAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RegexFilterAttributes) InternalWithRef(ref terra.Reference) RegexFilterAttributes {
	return RegexFilterAttributes{ref: ref}
}

func (rf RegexFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RegexFilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("pattern"))
}

type CompositeSlotTypeSettingState struct {
	Subslots []SubslotsState `json:"subslots"`
}

type SubslotsState struct {
	Name       string `json:"name"`
	SlotTypeId string `json:"slot_type_id"`
}

type ExternalSourceSettingState struct {
	GrammarSlotTypeSetting []GrammarSlotTypeSettingState `json:"grammar_slot_type_setting"`
}

type GrammarSlotTypeSettingState struct {
	Source []SourceState `json:"source"`
}

type SourceState struct {
	KmsKeyArn    string `json:"kms_key_arn"`
	S3BucketName string `json:"s3_bucket_name"`
	S3ObjectKey  string `json:"s3_object_key"`
}

type SlotTypeValuesState struct {
	SlotTypeValue []SlotTypeValueState `json:"slot_type_value"`
	Synonyms      []SynonymsState      `json:"synonyms"`
}

type SlotTypeValueState struct {
	Value string `json:"value"`
}

type SynonymsState struct {
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type ValueSelectionSettingState struct {
	ResolutionStrategy         string                            `json:"resolution_strategy"`
	AdvancedRecognitionSetting []AdvancedRecognitionSettingState `json:"advanced_recognition_setting"`
	RegexFilter                []RegexFilterState                `json:"regex_filter"`
}

type AdvancedRecognitionSettingState struct {
	AudioRecognitionSetting string `json:"audio_recognition_setting"`
}

type RegexFilterState struct {
	Pattern string `json:"pattern"`
}
