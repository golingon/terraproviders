// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package bedrockmodelinvocationloggingconfiguration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LoggingConfig struct {
	// EmbeddingDataDeliveryEnabled: bool, required
	EmbeddingDataDeliveryEnabled terra.BoolValue `hcl:"embedding_data_delivery_enabled,attr" validate:"required"`
	// ImageDataDeliveryEnabled: bool, required
	ImageDataDeliveryEnabled terra.BoolValue `hcl:"image_data_delivery_enabled,attr" validate:"required"`
	// TextDataDeliveryEnabled: bool, required
	TextDataDeliveryEnabled terra.BoolValue `hcl:"text_data_delivery_enabled,attr" validate:"required"`
	// CloudwatchConfig: optional
	CloudwatchConfig *CloudwatchConfig `hcl:"cloudwatch_config,block"`
	// S3Config: optional
	S3Config *S3Config `hcl:"s3_config,block"`
}

type CloudwatchConfig struct {
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// LargeDataDeliveryS3Config: optional
	LargeDataDeliveryS3Config *LargeDataDeliveryS3Config `hcl:"large_data_delivery_s3_config,block"`
}

type LargeDataDeliveryS3Config struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// KeyPrefix: string, optional
	KeyPrefix terra.StringValue `hcl:"key_prefix,attr"`
}

type S3Config struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// KeyPrefix: string, optional
	KeyPrefix terra.StringValue `hcl:"key_prefix,attr"`
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) EmbeddingDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("embedding_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) ImageDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("image_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) TextDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("text_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) CloudwatchConfig() CloudwatchConfigAttributes {
	return terra.ReferenceAsSingle[CloudwatchConfigAttributes](lc.ref.Append("cloudwatch_config"))
}

func (lc LoggingConfigAttributes) S3Config() S3ConfigAttributes {
	return terra.ReferenceAsSingle[S3ConfigAttributes](lc.ref.Append("s3_config"))
}

type CloudwatchConfigAttributes struct {
	ref terra.Reference
}

func (cc CloudwatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CloudwatchConfigAttributes) InternalWithRef(ref terra.Reference) CloudwatchConfigAttributes {
	return CloudwatchConfigAttributes{ref: ref}
}

func (cc CloudwatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CloudwatchConfigAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("log_group_name"))
}

func (cc CloudwatchConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("role_arn"))
}

func (cc CloudwatchConfigAttributes) LargeDataDeliveryS3Config() LargeDataDeliveryS3ConfigAttributes {
	return terra.ReferenceAsSingle[LargeDataDeliveryS3ConfigAttributes](cc.ref.Append("large_data_delivery_s3_config"))
}

type LargeDataDeliveryS3ConfigAttributes struct {
	ref terra.Reference
}

func (lddsc LargeDataDeliveryS3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return lddsc.ref, nil
}

func (lddsc LargeDataDeliveryS3ConfigAttributes) InternalWithRef(ref terra.Reference) LargeDataDeliveryS3ConfigAttributes {
	return LargeDataDeliveryS3ConfigAttributes{ref: ref}
}

func (lddsc LargeDataDeliveryS3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lddsc.ref.InternalTokens()
}

func (lddsc LargeDataDeliveryS3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(lddsc.ref.Append("bucket_name"))
}

func (lddsc LargeDataDeliveryS3ConfigAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(lddsc.ref.Append("key_prefix"))
}

type S3ConfigAttributes struct {
	ref terra.Reference
}

func (sc S3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc S3ConfigAttributes) InternalWithRef(ref terra.Reference) S3ConfigAttributes {
	return S3ConfigAttributes{ref: ref}
}

func (sc S3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc S3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc S3ConfigAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key_prefix"))
}

type LoggingConfigState struct {
	EmbeddingDataDeliveryEnabled bool                   `json:"embedding_data_delivery_enabled"`
	ImageDataDeliveryEnabled     bool                   `json:"image_data_delivery_enabled"`
	TextDataDeliveryEnabled      bool                   `json:"text_data_delivery_enabled"`
	CloudwatchConfig             *CloudwatchConfigState `json:"cloudwatch_config"`
	S3Config                     *S3ConfigState         `json:"s3_config"`
}

type CloudwatchConfigState struct {
	LogGroupName              string                          `json:"log_group_name"`
	RoleArn                   string                          `json:"role_arn"`
	LargeDataDeliveryS3Config *LargeDataDeliveryS3ConfigState `json:"large_data_delivery_s3_config"`
}

type LargeDataDeliveryS3ConfigState struct {
	BucketName string `json:"bucket_name"`
	KeyPrefix  string `json:"key_prefix"`
}

type S3ConfigState struct {
	BucketName string `json:"bucket_name"`
	KeyPrefix  string `json:"key_prefix"`
}
