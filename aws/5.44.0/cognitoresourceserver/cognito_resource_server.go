// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package cognitoresourceserver

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Scope struct {
	// ScopeDescription: string, required
	ScopeDescription terra.StringValue `hcl:"scope_description,attr" validate:"required"`
	// ScopeName: string, required
	ScopeName terra.StringValue `hcl:"scope_name,attr" validate:"required"`
}

type ScopeAttributes struct {
	ref terra.Reference
}

func (s ScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScopeAttributes) InternalWithRef(ref terra.Reference) ScopeAttributes {
	return ScopeAttributes{ref: ref}
}

func (s ScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScopeAttributes) ScopeDescription() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("scope_description"))
}

func (s ScopeAttributes) ScopeName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("scope_name"))
}

type ScopeState struct {
	ScopeDescription string `json:"scope_description"`
	ScopeName        string `json:"scope_name"`
}
