// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRedshiftserverlessCustomDomainAssociation creates a new instance of [RedshiftserverlessCustomDomainAssociation].
func NewRedshiftserverlessCustomDomainAssociation(name string, args RedshiftserverlessCustomDomainAssociationArgs) *RedshiftserverlessCustomDomainAssociation {
	return &RedshiftserverlessCustomDomainAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessCustomDomainAssociation)(nil)

// RedshiftserverlessCustomDomainAssociation represents the Terraform resource aws_redshiftserverless_custom_domain_association.
type RedshiftserverlessCustomDomainAssociation struct {
	Name      string
	Args      RedshiftserverlessCustomDomainAssociationArgs
	state     *redshiftserverlessCustomDomainAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) Type() string {
	return "aws_redshiftserverless_custom_domain_association"
}

// LocalName returns the local name for [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) LocalName() string {
	return rcda.Name
}

// Configuration returns the configuration (args) for [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) Configuration() interface{} {
	return rcda.Args
}

// DependOn is used for other resources to depend on [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rcda)
}

// Dependencies returns the list of resources [RedshiftserverlessCustomDomainAssociation] depends_on.
func (rcda *RedshiftserverlessCustomDomainAssociation) Dependencies() terra.Dependencies {
	return rcda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) LifecycleManagement() *terra.Lifecycle {
	return rcda.Lifecycle
}

// Attributes returns the attributes for [RedshiftserverlessCustomDomainAssociation].
func (rcda *RedshiftserverlessCustomDomainAssociation) Attributes() redshiftserverlessCustomDomainAssociationAttributes {
	return redshiftserverlessCustomDomainAssociationAttributes{ref: terra.ReferenceResource(rcda)}
}

// ImportState imports the given attribute values into [RedshiftserverlessCustomDomainAssociation]'s state.
func (rcda *RedshiftserverlessCustomDomainAssociation) ImportState(av io.Reader) error {
	rcda.state = &redshiftserverlessCustomDomainAssociationState{}
	if err := json.NewDecoder(av).Decode(rcda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcda.Type(), rcda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedshiftserverlessCustomDomainAssociation] has state.
func (rcda *RedshiftserverlessCustomDomainAssociation) State() (*redshiftserverlessCustomDomainAssociationState, bool) {
	return rcda.state, rcda.state != nil
}

// StateMust returns the state for [RedshiftserverlessCustomDomainAssociation]. Panics if the state is nil.
func (rcda *RedshiftserverlessCustomDomainAssociation) StateMust() *redshiftserverlessCustomDomainAssociationState {
	if rcda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcda.Type(), rcda.LocalName()))
	}
	return rcda.state
}

// RedshiftserverlessCustomDomainAssociationArgs contains the configurations for aws_redshiftserverless_custom_domain_association.
type RedshiftserverlessCustomDomainAssociationArgs struct {
	// CustomDomainCertificateArn: string, required
	CustomDomainCertificateArn terra.StringValue `hcl:"custom_domain_certificate_arn,attr" validate:"required"`
	// CustomDomainName: string, required
	CustomDomainName terra.StringValue `hcl:"custom_domain_name,attr" validate:"required"`
	// WorkgroupName: string, required
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr" validate:"required"`
}
type redshiftserverlessCustomDomainAssociationAttributes struct {
	ref terra.Reference
}

// CustomDomainCertificateArn returns a reference to field custom_domain_certificate_arn of aws_redshiftserverless_custom_domain_association.
func (rcda redshiftserverlessCustomDomainAssociationAttributes) CustomDomainCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(rcda.ref.Append("custom_domain_certificate_arn"))
}

// CustomDomainCertificateExpiryTime returns a reference to field custom_domain_certificate_expiry_time of aws_redshiftserverless_custom_domain_association.
func (rcda redshiftserverlessCustomDomainAssociationAttributes) CustomDomainCertificateExpiryTime() terra.StringValue {
	return terra.ReferenceAsString(rcda.ref.Append("custom_domain_certificate_expiry_time"))
}

// CustomDomainName returns a reference to field custom_domain_name of aws_redshiftserverless_custom_domain_association.
func (rcda redshiftserverlessCustomDomainAssociationAttributes) CustomDomainName() terra.StringValue {
	return terra.ReferenceAsString(rcda.ref.Append("custom_domain_name"))
}

// Id returns a reference to field id of aws_redshiftserverless_custom_domain_association.
func (rcda redshiftserverlessCustomDomainAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rcda.ref.Append("id"))
}

// WorkgroupName returns a reference to field workgroup_name of aws_redshiftserverless_custom_domain_association.
func (rcda redshiftserverlessCustomDomainAssociationAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceAsString(rcda.ref.Append("workgroup_name"))
}

type redshiftserverlessCustomDomainAssociationState struct {
	CustomDomainCertificateArn        string `json:"custom_domain_certificate_arn"`
	CustomDomainCertificateExpiryTime string `json:"custom_domain_certificate_expiry_time"`
	CustomDomainName                  string `json:"custom_domain_name"`
	Id                                string `json:"id"`
	WorkgroupName                     string `json:"workgroup_name"`
}
