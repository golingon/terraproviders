// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datavpcendpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DnsEntry struct{}

type DnsOptions struct{}

type Filter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DnsEntryAttributes struct {
	ref terra.Reference
}

func (de DnsEntryAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DnsEntryAttributes) InternalWithRef(ref terra.Reference) DnsEntryAttributes {
	return DnsEntryAttributes{ref: ref}
}

func (de DnsEntryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DnsEntryAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("dns_name"))
}

func (de DnsEntryAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("hosted_zone_id"))
}

type DnsOptionsAttributes struct {
	ref terra.Reference
}

func (do DnsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DnsOptionsAttributes) InternalWithRef(ref terra.Reference) DnsOptionsAttributes {
	return DnsOptionsAttributes{ref: ref}
}

func (do DnsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DnsOptionsAttributes) DnsRecordIpType() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("dns_record_ip_type"))
}

func (do DnsOptionsAttributes) PrivateDnsOnlyForInboundResolverEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(do.ref.Append("private_dns_only_for_inbound_resolver_endpoint"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f FilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DnsEntryState struct {
	DnsName      string `json:"dns_name"`
	HostedZoneId string `json:"hosted_zone_id"`
}

type DnsOptionsState struct {
	DnsRecordIpType                          string `json:"dns_record_ip_type"`
	PrivateDnsOnlyForInboundResolverEndpoint bool   `json:"private_dns_only_for_inbound_resolver_endpoint"`
}

type FilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
