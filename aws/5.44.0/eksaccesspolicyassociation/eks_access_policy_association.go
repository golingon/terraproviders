// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package eksaccesspolicyassociation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessScope struct {
	// Namespaces: set of string, optional
	Namespaces terra.SetValue[terra.StringValue] `hcl:"namespaces,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type AccessScopeAttributes struct {
	ref terra.Reference
}

func (as AccessScopeAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AccessScopeAttributes) InternalWithRef(ref terra.Reference) AccessScopeAttributes {
	return AccessScopeAttributes{ref: ref}
}

func (as AccessScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AccessScopeAttributes) Namespaces() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](as.ref.Append("namespaces"))
}

func (as AccessScopeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type AccessScopeState struct {
	Namespaces []string `json:"namespaces"`
	Type       string   `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
