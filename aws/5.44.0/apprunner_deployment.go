// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	apprunnerdeployment "github.com/golingon/terraproviders/aws/5.44.0/apprunnerdeployment"
	"io"
)

// NewApprunnerDeployment creates a new instance of [ApprunnerDeployment].
func NewApprunnerDeployment(name string, args ApprunnerDeploymentArgs) *ApprunnerDeployment {
	return &ApprunnerDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerDeployment)(nil)

// ApprunnerDeployment represents the Terraform resource aws_apprunner_deployment.
type ApprunnerDeployment struct {
	Name      string
	Args      ApprunnerDeploymentArgs
	state     *apprunnerDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ApprunnerDeployment].
func (ad *ApprunnerDeployment) Type() string {
	return "aws_apprunner_deployment"
}

// LocalName returns the local name for [ApprunnerDeployment].
func (ad *ApprunnerDeployment) LocalName() string {
	return ad.Name
}

// Configuration returns the configuration (args) for [ApprunnerDeployment].
func (ad *ApprunnerDeployment) Configuration() interface{} {
	return ad.Args
}

// DependOn is used for other resources to depend on [ApprunnerDeployment].
func (ad *ApprunnerDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(ad)
}

// Dependencies returns the list of resources [ApprunnerDeployment] depends_on.
func (ad *ApprunnerDeployment) Dependencies() terra.Dependencies {
	return ad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ApprunnerDeployment].
func (ad *ApprunnerDeployment) LifecycleManagement() *terra.Lifecycle {
	return ad.Lifecycle
}

// Attributes returns the attributes for [ApprunnerDeployment].
func (ad *ApprunnerDeployment) Attributes() apprunnerDeploymentAttributes {
	return apprunnerDeploymentAttributes{ref: terra.ReferenceResource(ad)}
}

// ImportState imports the given attribute values into [ApprunnerDeployment]'s state.
func (ad *ApprunnerDeployment) ImportState(av io.Reader) error {
	ad.state = &apprunnerDeploymentState{}
	if err := json.NewDecoder(av).Decode(ad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ad.Type(), ad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ApprunnerDeployment] has state.
func (ad *ApprunnerDeployment) State() (*apprunnerDeploymentState, bool) {
	return ad.state, ad.state != nil
}

// StateMust returns the state for [ApprunnerDeployment]. Panics if the state is nil.
func (ad *ApprunnerDeployment) StateMust() *apprunnerDeploymentState {
	if ad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ad.Type(), ad.LocalName()))
	}
	return ad.state
}

// ApprunnerDeploymentArgs contains the configurations for aws_apprunner_deployment.
type ApprunnerDeploymentArgs struct {
	// ServiceArn: string, required
	ServiceArn terra.StringValue `hcl:"service_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *apprunnerdeployment.Timeouts `hcl:"timeouts,block"`
}
type apprunnerDeploymentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_apprunner_deployment.
func (ad apprunnerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("id"))
}

// OperationId returns a reference to field operation_id of aws_apprunner_deployment.
func (ad apprunnerDeploymentAttributes) OperationId() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("operation_id"))
}

// ServiceArn returns a reference to field service_arn of aws_apprunner_deployment.
func (ad apprunnerDeploymentAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("service_arn"))
}

// Status returns a reference to field status of aws_apprunner_deployment.
func (ad apprunnerDeploymentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("status"))
}

func (ad apprunnerDeploymentAttributes) Timeouts() apprunnerdeployment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[apprunnerdeployment.TimeoutsAttributes](ad.ref.Append("timeouts"))
}

type apprunnerDeploymentState struct {
	Id          string                             `json:"id"`
	OperationId string                             `json:"operation_id"`
	ServiceArn  string                             `json:"service_arn"`
	Status      string                             `json:"status"`
	Timeouts    *apprunnerdeployment.TimeoutsState `json:"timeouts"`
}
