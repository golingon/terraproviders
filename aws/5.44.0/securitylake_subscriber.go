// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitylakesubscriber "github.com/golingon/terraproviders/aws/5.44.0/securitylakesubscriber"
	"io"
)

// NewSecuritylakeSubscriber creates a new instance of [SecuritylakeSubscriber].
func NewSecuritylakeSubscriber(name string, args SecuritylakeSubscriberArgs) *SecuritylakeSubscriber {
	return &SecuritylakeSubscriber{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecuritylakeSubscriber)(nil)

// SecuritylakeSubscriber represents the Terraform resource aws_securitylake_subscriber.
type SecuritylakeSubscriber struct {
	Name      string
	Args      SecuritylakeSubscriberArgs
	state     *securitylakeSubscriberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) Type() string {
	return "aws_securitylake_subscriber"
}

// LocalName returns the local name for [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) LocalName() string {
	return ss.Name
}

// Configuration returns the configuration (args) for [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) Configuration() interface{} {
	return ss.Args
}

// DependOn is used for other resources to depend on [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

// Dependencies returns the list of resources [SecuritylakeSubscriber] depends_on.
func (ss *SecuritylakeSubscriber) Dependencies() terra.Dependencies {
	return ss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) LifecycleManagement() *terra.Lifecycle {
	return ss.Lifecycle
}

// Attributes returns the attributes for [SecuritylakeSubscriber].
func (ss *SecuritylakeSubscriber) Attributes() securitylakeSubscriberAttributes {
	return securitylakeSubscriberAttributes{ref: terra.ReferenceResource(ss)}
}

// ImportState imports the given attribute values into [SecuritylakeSubscriber]'s state.
func (ss *SecuritylakeSubscriber) ImportState(av io.Reader) error {
	ss.state = &securitylakeSubscriberState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecuritylakeSubscriber] has state.
func (ss *SecuritylakeSubscriber) State() (*securitylakeSubscriberState, bool) {
	return ss.state, ss.state != nil
}

// StateMust returns the state for [SecuritylakeSubscriber]. Panics if the state is nil.
func (ss *SecuritylakeSubscriber) StateMust() *securitylakeSubscriberState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

// SecuritylakeSubscriberArgs contains the configurations for aws_securitylake_subscriber.
type SecuritylakeSubscriberArgs struct {
	// AccessType: string, optional
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// SubscriberDescription: string, optional
	SubscriberDescription terra.StringValue `hcl:"subscriber_description,attr"`
	// SubscriberName: string, optional
	SubscriberName terra.StringValue `hcl:"subscriber_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Source: min=0
	Source []securitylakesubscriber.Source `hcl:"source,block" validate:"min=0"`
	// SubscriberIdentity: min=0
	SubscriberIdentity []securitylakesubscriber.SubscriberIdentity `hcl:"subscriber_identity,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *securitylakesubscriber.Timeouts `hcl:"timeouts,block"`
}
type securitylakeSubscriberAttributes struct {
	ref terra.Reference
}

// AccessType returns a reference to field access_type of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("access_type"))
}

// Arn returns a reference to field arn of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("id"))
}

// ResourceShareArn returns a reference to field resource_share_arn of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) ResourceShareArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("resource_share_arn"))
}

// ResourceShareName returns a reference to field resource_share_name of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) ResourceShareName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("resource_share_name"))
}

// RoleArn returns a reference to field role_arn of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("role_arn"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("s3_bucket_arn"))
}

// SubscriberDescription returns a reference to field subscriber_description of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) SubscriberDescription() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("subscriber_description"))
}

// SubscriberEndpoint returns a reference to field subscriber_endpoint of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) SubscriberEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("subscriber_endpoint"))
}

// SubscriberName returns a reference to field subscriber_name of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) SubscriberName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("subscriber_name"))
}

// SubscriberStatus returns a reference to field subscriber_status of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) SubscriberStatus() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("subscriber_status"))
}

// Tags returns a reference to field tags of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ss.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securitylake_subscriber.
func (ss securitylakeSubscriberAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ss.ref.Append("tags_all"))
}

func (ss securitylakeSubscriberAttributes) Source() terra.ListValue[securitylakesubscriber.SourceAttributes] {
	return terra.ReferenceAsList[securitylakesubscriber.SourceAttributes](ss.ref.Append("source"))
}

func (ss securitylakeSubscriberAttributes) SubscriberIdentity() terra.ListValue[securitylakesubscriber.SubscriberIdentityAttributes] {
	return terra.ReferenceAsList[securitylakesubscriber.SubscriberIdentityAttributes](ss.ref.Append("subscriber_identity"))
}

func (ss securitylakeSubscriberAttributes) Timeouts() securitylakesubscriber.TimeoutsAttributes {
	return terra.ReferenceAsSingle[securitylakesubscriber.TimeoutsAttributes](ss.ref.Append("timeouts"))
}

type securitylakeSubscriberState struct {
	AccessType            string                                           `json:"access_type"`
	Arn                   string                                           `json:"arn"`
	Id                    string                                           `json:"id"`
	ResourceShareArn      string                                           `json:"resource_share_arn"`
	ResourceShareName     string                                           `json:"resource_share_name"`
	RoleArn               string                                           `json:"role_arn"`
	S3BucketArn           string                                           `json:"s3_bucket_arn"`
	SubscriberDescription string                                           `json:"subscriber_description"`
	SubscriberEndpoint    string                                           `json:"subscriber_endpoint"`
	SubscriberName        string                                           `json:"subscriber_name"`
	SubscriberStatus      string                                           `json:"subscriber_status"`
	Tags                  map[string]string                                `json:"tags"`
	TagsAll               map[string]string                                `json:"tags_all"`
	Source                []securitylakesubscriber.SourceState             `json:"source"`
	SubscriberIdentity    []securitylakesubscriber.SubscriberIdentityState `json:"subscriber_identity"`
	Timeouts              *securitylakesubscriber.TimeoutsState            `json:"timeouts"`
}
