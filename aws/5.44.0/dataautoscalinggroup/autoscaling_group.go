// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataautoscalinggroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceMaintenancePolicy struct{}

type LaunchTemplate struct{}

type MixedInstancesPolicy struct {
	// InstancesDistribution: min=0
	InstancesDistribution []InstancesDistribution `hcl:"instances_distribution,block" validate:"min=0"`
	// MixedInstancesPolicyLaunchTemplate: min=0
	LaunchTemplate []MixedInstancesPolicyLaunchTemplate `hcl:"launch_template,block" validate:"min=0"`
}

type InstancesDistribution struct{}

type MixedInstancesPolicyLaunchTemplate struct {
	// LaunchTemplateLaunchTemplateSpecification: min=0
	LaunchTemplateSpecification []LaunchTemplateLaunchTemplateSpecification `hcl:"launch_template_specification,block" validate:"min=0"`
	// Override: min=0
	Override []Override `hcl:"override,block" validate:"min=0"`
}

type LaunchTemplateLaunchTemplateSpecification struct{}

type Override struct {
	// InstanceRequirements: min=0
	InstanceRequirements []InstanceRequirements `hcl:"instance_requirements,block" validate:"min=0"`
	// OverrideLaunchTemplateSpecification: min=0
	LaunchTemplateSpecification []OverrideLaunchTemplateSpecification `hcl:"launch_template_specification,block" validate:"min=0"`
}

type InstanceRequirements struct {
	// AcceleratorCount: min=0
	AcceleratorCount []AcceleratorCount `hcl:"accelerator_count,block" validate:"min=0"`
	// AcceleratorTotalMemoryMib: min=0
	AcceleratorTotalMemoryMib []AcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block" validate:"min=0"`
	// BaselineEbsBandwidthMbps: min=0
	BaselineEbsBandwidthMbps []BaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block" validate:"min=0"`
	// MemoryGibPerVcpu: min=0
	MemoryGibPerVcpu []MemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block" validate:"min=0"`
	// MemoryMib: min=0
	MemoryMib []MemoryMib `hcl:"memory_mib,block" validate:"min=0"`
	// NetworkBandwidthGbps: min=0
	NetworkBandwidthGbps []NetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block" validate:"min=0"`
	// NetworkInterfaceCount: min=0
	NetworkInterfaceCount []NetworkInterfaceCount `hcl:"network_interface_count,block" validate:"min=0"`
	// TotalLocalStorageGb: min=0
	TotalLocalStorageGb []TotalLocalStorageGb `hcl:"total_local_storage_gb,block" validate:"min=0"`
	// VcpuCount: min=0
	VcpuCount []VcpuCount `hcl:"vcpu_count,block" validate:"min=0"`
}

type AcceleratorCount struct{}

type AcceleratorTotalMemoryMib struct{}

type BaselineEbsBandwidthMbps struct{}

type MemoryGibPerVcpu struct{}

type MemoryMib struct{}

type NetworkBandwidthGbps struct{}

type NetworkInterfaceCount struct{}

type TotalLocalStorageGb struct{}

type VcpuCount struct{}

type OverrideLaunchTemplateSpecification struct{}

type Tag struct{}

type TrafficSource struct{}

type WarmPool struct {
	// InstanceReusePolicy: min=0
	InstanceReusePolicy []InstanceReusePolicy `hcl:"instance_reuse_policy,block" validate:"min=0"`
}

type InstanceReusePolicy struct{}

type InstanceMaintenancePolicyAttributes struct {
	ref terra.Reference
}

func (imp InstanceMaintenancePolicyAttributes) InternalRef() (terra.Reference, error) {
	return imp.ref, nil
}

func (imp InstanceMaintenancePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceMaintenancePolicyAttributes {
	return InstanceMaintenancePolicyAttributes{ref: ref}
}

func (imp InstanceMaintenancePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imp.ref.InternalTokens()
}

func (imp InstanceMaintenancePolicyAttributes) MaxHealthyPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(imp.ref.Append("max_healthy_percentage"))
}

func (imp InstanceMaintenancePolicyAttributes) MinHealthyPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(imp.ref.Append("min_healthy_percentage"))
}

type LaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt LaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt LaunchTemplateAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateAttributes {
	return LaunchTemplateAttributes{ref: ref}
}

func (lt LaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt LaunchTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt LaunchTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

func (lt LaunchTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("version"))
}

type MixedInstancesPolicyAttributes struct {
	ref terra.Reference
}

func (mip MixedInstancesPolicyAttributes) InternalRef() (terra.Reference, error) {
	return mip.ref, nil
}

func (mip MixedInstancesPolicyAttributes) InternalWithRef(ref terra.Reference) MixedInstancesPolicyAttributes {
	return MixedInstancesPolicyAttributes{ref: ref}
}

func (mip MixedInstancesPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mip.ref.InternalTokens()
}

func (mip MixedInstancesPolicyAttributes) InstancesDistribution() terra.ListValue[InstancesDistributionAttributes] {
	return terra.ReferenceAsList[InstancesDistributionAttributes](mip.ref.Append("instances_distribution"))
}

func (mip MixedInstancesPolicyAttributes) LaunchTemplate() terra.ListValue[MixedInstancesPolicyLaunchTemplateAttributes] {
	return terra.ReferenceAsList[MixedInstancesPolicyLaunchTemplateAttributes](mip.ref.Append("launch_template"))
}

type InstancesDistributionAttributes struct {
	ref terra.Reference
}

func (id InstancesDistributionAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id InstancesDistributionAttributes) InternalWithRef(ref terra.Reference) InstancesDistributionAttributes {
	return InstancesDistributionAttributes{ref: ref}
}

func (id InstancesDistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id InstancesDistributionAttributes) OnDemandAllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("on_demand_allocation_strategy"))
}

func (id InstancesDistributionAttributes) OnDemandBaseCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("on_demand_base_capacity"))
}

func (id InstancesDistributionAttributes) OnDemandPercentageAboveBaseCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("on_demand_percentage_above_base_capacity"))
}

func (id InstancesDistributionAttributes) SpotAllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("spot_allocation_strategy"))
}

func (id InstancesDistributionAttributes) SpotInstancePools() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("spot_instance_pools"))
}

func (id InstancesDistributionAttributes) SpotMaxPrice() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("spot_max_price"))
}

type MixedInstancesPolicyLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) MixedInstancesPolicyLaunchTemplateAttributes {
	return MixedInstancesPolicyLaunchTemplateAttributes{ref: ref}
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) LaunchTemplateSpecification() terra.ListValue[LaunchTemplateLaunchTemplateSpecificationAttributes] {
	return terra.ReferenceAsList[LaunchTemplateLaunchTemplateSpecificationAttributes](lt.ref.Append("launch_template_specification"))
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) Override() terra.ListValue[OverrideAttributes] {
	return terra.ReferenceAsList[OverrideAttributes](lt.ref.Append("override"))
}

type LaunchTemplateLaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return lts.ref, nil
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateLaunchTemplateSpecificationAttributes {
	return LaunchTemplateLaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lts.ref.InternalTokens()
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_id"))
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_name"))
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("version"))
}

type OverrideAttributes struct {
	ref terra.Reference
}

func (o OverrideAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OverrideAttributes) InternalWithRef(ref terra.Reference) OverrideAttributes {
	return OverrideAttributes{ref: ref}
}

func (o OverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OverrideAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("instance_type"))
}

func (o OverrideAttributes) WeightedCapacity() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("weighted_capacity"))
}

func (o OverrideAttributes) InstanceRequirements() terra.ListValue[InstanceRequirementsAttributes] {
	return terra.ReferenceAsList[InstanceRequirementsAttributes](o.ref.Append("instance_requirements"))
}

func (o OverrideAttributes) LaunchTemplateSpecification() terra.ListValue[OverrideLaunchTemplateSpecificationAttributes] {
	return terra.ReferenceAsList[OverrideLaunchTemplateSpecificationAttributes](o.ref.Append("launch_template_specification"))
}

type InstanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir InstanceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir InstanceRequirementsAttributes) InternalWithRef(ref terra.Reference) InstanceRequirementsAttributes {
	return InstanceRequirementsAttributes{ref: ref}
}

func (ir InstanceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir InstanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir InstanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir InstanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir InstanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("bare_metal"))
}

func (ir InstanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("burstable_performance"))
}

func (ir InstanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir InstanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir InstanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir InstanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("local_storage"))
}

func (ir InstanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir InstanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ir.ref.Append("require_hibernate_support"))
}

func (ir InstanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) AcceleratorCount() terra.ListValue[AcceleratorCountAttributes] {
	return terra.ReferenceAsList[AcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[AcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceAsList[AcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir InstanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[BaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceAsList[BaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir InstanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[MemoryGibPerVcpuAttributes] {
	return terra.ReferenceAsList[MemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir InstanceRequirementsAttributes) MemoryMib() terra.ListValue[MemoryMibAttributes] {
	return terra.ReferenceAsList[MemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir InstanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[NetworkBandwidthGbpsAttributes] {
	return terra.ReferenceAsList[NetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir InstanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[NetworkInterfaceCountAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir InstanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[TotalLocalStorageGbAttributes] {
	return terra.ReferenceAsList[TotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir InstanceRequirementsAttributes) VcpuCount() terra.ListValue[VcpuCountAttributes] {
	return terra.ReferenceAsList[VcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type AcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorCountAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorCountAttributes) InternalWithRef(ref terra.Reference) AcceleratorCountAttributes {
	return AcceleratorCountAttributes{ref: ref}
}

func (ac AcceleratorCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max"))
}

func (ac AcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min"))
}

type AcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return atmm.ref, nil
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) AcceleratorTotalMemoryMibAttributes {
	return AcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atmm.ref.InternalTokens()
}

func (atmm AcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("max"))
}

func (atmm AcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("min"))
}

type BaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalRef() (terra.Reference, error) {
	return bebm.ref, nil
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) BaselineEbsBandwidthMbpsAttributes {
	return BaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bebm.ref.InternalTokens()
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("max"))
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("min"))
}

type MemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv MemoryGibPerVcpuAttributes) InternalRef() (terra.Reference, error) {
	return mgpv.ref, nil
}

func (mgpv MemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) MemoryGibPerVcpuAttributes {
	return MemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv MemoryGibPerVcpuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgpv.ref.InternalTokens()
}

func (mgpv MemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("max"))
}

func (mgpv MemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("min"))
}

type MemoryMibAttributes struct {
	ref terra.Reference
}

func (mm MemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MemoryMibAttributes) InternalWithRef(ref terra.Reference) MemoryMibAttributes {
	return MemoryMibAttributes{ref: ref}
}

func (mm MemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm MemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("max"))
}

func (mm MemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("min"))
}

type NetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg NetworkBandwidthGbpsAttributes) InternalRef() (terra.Reference, error) {
	return nbg.ref, nil
}

func (nbg NetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) NetworkBandwidthGbpsAttributes {
	return NetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg NetworkBandwidthGbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nbg.ref.InternalTokens()
}

func (nbg NetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("max"))
}

func (nbg NetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("min"))
}

type NetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic NetworkInterfaceCountAttributes) InternalRef() (terra.Reference, error) {
	return nic.ref, nil
}

func (nic NetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceCountAttributes {
	return NetworkInterfaceCountAttributes{ref: ref}
}

func (nic NetworkInterfaceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nic.ref.InternalTokens()
}

func (nic NetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("max"))
}

func (nic NetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("min"))
}

type TotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg TotalLocalStorageGbAttributes) InternalRef() (terra.Reference, error) {
	return tlsg.ref, nil
}

func (tlsg TotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) TotalLocalStorageGbAttributes {
	return TotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg TotalLocalStorageGbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlsg.ref.InternalTokens()
}

func (tlsg TotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("max"))
}

func (tlsg TotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("min"))
}

type VcpuCountAttributes struct {
	ref terra.Reference
}

func (vc VcpuCountAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VcpuCountAttributes) InternalWithRef(ref terra.Reference) VcpuCountAttributes {
	return VcpuCountAttributes{ref: ref}
}

func (vc VcpuCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("max"))
}

func (vc VcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("min"))
}

type OverrideLaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return lts.ref, nil
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) OverrideLaunchTemplateSpecificationAttributes {
	return OverrideLaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lts.ref.InternalTokens()
}

func (lts OverrideLaunchTemplateSpecificationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_id"))
}

func (lts OverrideLaunchTemplateSpecificationAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_name"))
}

func (lts OverrideLaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("version"))
}

type TagAttributes struct {
	ref terra.Reference
}

func (t TagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TagAttributes) InternalWithRef(ref terra.Reference) TagAttributes {
	return TagAttributes{ref: ref}
}

func (t TagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TagAttributes) PropagateAtLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("propagate_at_launch"))
}

func (t TagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type TrafficSourceAttributes struct {
	ref terra.Reference
}

func (ts TrafficSourceAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrafficSourceAttributes) InternalWithRef(ref terra.Reference) TrafficSourceAttributes {
	return TrafficSourceAttributes{ref: ref}
}

func (ts TrafficSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrafficSourceAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("identifier"))
}

func (ts TrafficSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("type"))
}

type WarmPoolAttributes struct {
	ref terra.Reference
}

func (wp WarmPoolAttributes) InternalRef() (terra.Reference, error) {
	return wp.ref, nil
}

func (wp WarmPoolAttributes) InternalWithRef(ref terra.Reference) WarmPoolAttributes {
	return WarmPoolAttributes{ref: ref}
}

func (wp WarmPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wp.ref.InternalTokens()
}

func (wp WarmPoolAttributes) MaxGroupPreparedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(wp.ref.Append("max_group_prepared_capacity"))
}

func (wp WarmPoolAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(wp.ref.Append("min_size"))
}

func (wp WarmPoolAttributes) PoolState() terra.StringValue {
	return terra.ReferenceAsString(wp.ref.Append("pool_state"))
}

func (wp WarmPoolAttributes) InstanceReusePolicy() terra.ListValue[InstanceReusePolicyAttributes] {
	return terra.ReferenceAsList[InstanceReusePolicyAttributes](wp.ref.Append("instance_reuse_policy"))
}

type InstanceReusePolicyAttributes struct {
	ref terra.Reference
}

func (irp InstanceReusePolicyAttributes) InternalRef() (terra.Reference, error) {
	return irp.ref, nil
}

func (irp InstanceReusePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceReusePolicyAttributes {
	return InstanceReusePolicyAttributes{ref: ref}
}

func (irp InstanceReusePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return irp.ref.InternalTokens()
}

func (irp InstanceReusePolicyAttributes) ReuseOnScaleIn() terra.BoolValue {
	return terra.ReferenceAsBool(irp.ref.Append("reuse_on_scale_in"))
}

type InstanceMaintenancePolicyState struct {
	MaxHealthyPercentage float64 `json:"max_healthy_percentage"`
	MinHealthyPercentage float64 `json:"min_healthy_percentage"`
}

type LaunchTemplateState struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

type MixedInstancesPolicyState struct {
	InstancesDistribution []InstancesDistributionState              `json:"instances_distribution"`
	LaunchTemplate        []MixedInstancesPolicyLaunchTemplateState `json:"launch_template"`
}

type InstancesDistributionState struct {
	OnDemandAllocationStrategy          string  `json:"on_demand_allocation_strategy"`
	OnDemandBaseCapacity                float64 `json:"on_demand_base_capacity"`
	OnDemandPercentageAboveBaseCapacity float64 `json:"on_demand_percentage_above_base_capacity"`
	SpotAllocationStrategy              string  `json:"spot_allocation_strategy"`
	SpotInstancePools                   float64 `json:"spot_instance_pools"`
	SpotMaxPrice                        string  `json:"spot_max_price"`
}

type MixedInstancesPolicyLaunchTemplateState struct {
	LaunchTemplateSpecification []LaunchTemplateLaunchTemplateSpecificationState `json:"launch_template_specification"`
	Override                    []OverrideState                                  `json:"override"`
}

type LaunchTemplateLaunchTemplateSpecificationState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type OverrideState struct {
	InstanceType                string                                     `json:"instance_type"`
	WeightedCapacity            string                                     `json:"weighted_capacity"`
	InstanceRequirements        []InstanceRequirementsState                `json:"instance_requirements"`
	LaunchTemplateSpecification []OverrideLaunchTemplateSpecificationState `json:"launch_template_specification"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                         `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                         `json:"accelerator_names"`
	AcceleratorTypes                          []string                         `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                         `json:"allowed_instance_types"`
	BareMetal                                 string                           `json:"bare_metal"`
	BurstablePerformance                      string                           `json:"burstable_performance"`
	CpuManufacturers                          []string                         `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                         `json:"excluded_instance_types"`
	InstanceGenerations                       []string                         `json:"instance_generations"`
	LocalStorage                              string                           `json:"local_storage"`
	LocalStorageTypes                         []string                         `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                          `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                             `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                          `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []AcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []AcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []BaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []MemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []MemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []NetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []NetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []TotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []VcpuCountState                 `json:"vcpu_count"`
}

type AcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type BaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type TotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type VcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type OverrideLaunchTemplateSpecificationState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type TagState struct {
	Key               string `json:"key"`
	PropagateAtLaunch bool   `json:"propagate_at_launch"`
	Value             string `json:"value"`
}

type TrafficSourceState struct {
	Identifier string `json:"identifier"`
	Type       string `json:"type"`
}

type WarmPoolState struct {
	MaxGroupPreparedCapacity float64                    `json:"max_group_prepared_capacity"`
	MinSize                  float64                    `json:"min_size"`
	PoolState                string                     `json:"pool_state"`
	InstanceReusePolicy      []InstanceReusePolicyState `json:"instance_reuse_policy"`
}

type InstanceReusePolicyState struct {
	ReuseOnScaleIn bool `json:"reuse_on_scale_in"`
}
