// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRoute53ResolverFirewallRuleGroupAssociation creates a new instance of [Route53ResolverFirewallRuleGroupAssociation].
func NewRoute53ResolverFirewallRuleGroupAssociation(name string, args Route53ResolverFirewallRuleGroupAssociationArgs) *Route53ResolverFirewallRuleGroupAssociation {
	return &Route53ResolverFirewallRuleGroupAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverFirewallRuleGroupAssociation)(nil)

// Route53ResolverFirewallRuleGroupAssociation represents the Terraform resource aws_route53_resolver_firewall_rule_group_association.
type Route53ResolverFirewallRuleGroupAssociation struct {
	Name      string
	Args      Route53ResolverFirewallRuleGroupAssociationArgs
	state     *route53ResolverFirewallRuleGroupAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Type() string {
	return "aws_route53_resolver_firewall_rule_group_association"
}

// LocalName returns the local name for [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) LocalName() string {
	return rrfrga.Name
}

// Configuration returns the configuration (args) for [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Configuration() interface{} {
	return rrfrga.Args
}

// DependOn is used for other resources to depend on [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rrfrga)
}

// Dependencies returns the list of resources [Route53ResolverFirewallRuleGroupAssociation] depends_on.
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Dependencies() terra.Dependencies {
	return rrfrga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) LifecycleManagement() *terra.Lifecycle {
	return rrfrga.Lifecycle
}

// Attributes returns the attributes for [Route53ResolverFirewallRuleGroupAssociation].
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Attributes() route53ResolverFirewallRuleGroupAssociationAttributes {
	return route53ResolverFirewallRuleGroupAssociationAttributes{ref: terra.ReferenceResource(rrfrga)}
}

// ImportState imports the given attribute values into [Route53ResolverFirewallRuleGroupAssociation]'s state.
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) ImportState(av io.Reader) error {
	rrfrga.state = &route53ResolverFirewallRuleGroupAssociationState{}
	if err := json.NewDecoder(av).Decode(rrfrga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrfrga.Type(), rrfrga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53ResolverFirewallRuleGroupAssociation] has state.
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) State() (*route53ResolverFirewallRuleGroupAssociationState, bool) {
	return rrfrga.state, rrfrga.state != nil
}

// StateMust returns the state for [Route53ResolverFirewallRuleGroupAssociation]. Panics if the state is nil.
func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) StateMust() *route53ResolverFirewallRuleGroupAssociationState {
	if rrfrga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrfrga.Type(), rrfrga.LocalName()))
	}
	return rrfrga.state
}

// Route53ResolverFirewallRuleGroupAssociationArgs contains the configurations for aws_route53_resolver_firewall_rule_group_association.
type Route53ResolverFirewallRuleGroupAssociationArgs struct {
	// FirewallRuleGroupId: string, required
	FirewallRuleGroupId terra.StringValue `hcl:"firewall_rule_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MutationProtection: string, optional
	MutationProtection terra.StringValue `hcl:"mutation_protection,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}
type route53ResolverFirewallRuleGroupAssociationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("arn"))
}

// FirewallRuleGroupId returns a reference to field firewall_rule_group_id of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) FirewallRuleGroupId() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("firewall_rule_group_id"))
}

// Id returns a reference to field id of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("id"))
}

// MutationProtection returns a reference to field mutation_protection of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) MutationProtection() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("mutation_protection"))
}

// Name returns a reference to field name of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("name"))
}

// Priority returns a reference to field priority of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rrfrga.ref.Append("priority"))
}

// Tags returns a reference to field tags of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrfrga.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrfrga.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_route53_resolver_firewall_rule_group_association.
func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(rrfrga.ref.Append("vpc_id"))
}

type route53ResolverFirewallRuleGroupAssociationState struct {
	Arn                 string            `json:"arn"`
	FirewallRuleGroupId string            `json:"firewall_rule_group_id"`
	Id                  string            `json:"id"`
	MutationProtection  string            `json:"mutation_protection"`
	Name                string            `json:"name"`
	Priority            float64           `json:"priority"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcId               string            `json:"vpc_id"`
}
