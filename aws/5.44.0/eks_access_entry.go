// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	eksaccessentry "github.com/golingon/terraproviders/aws/5.44.0/eksaccessentry"
	"io"
)

// NewEksAccessEntry creates a new instance of [EksAccessEntry].
func NewEksAccessEntry(name string, args EksAccessEntryArgs) *EksAccessEntry {
	return &EksAccessEntry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksAccessEntry)(nil)

// EksAccessEntry represents the Terraform resource aws_eks_access_entry.
type EksAccessEntry struct {
	Name      string
	Args      EksAccessEntryArgs
	state     *eksAccessEntryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EksAccessEntry].
func (eae *EksAccessEntry) Type() string {
	return "aws_eks_access_entry"
}

// LocalName returns the local name for [EksAccessEntry].
func (eae *EksAccessEntry) LocalName() string {
	return eae.Name
}

// Configuration returns the configuration (args) for [EksAccessEntry].
func (eae *EksAccessEntry) Configuration() interface{} {
	return eae.Args
}

// DependOn is used for other resources to depend on [EksAccessEntry].
func (eae *EksAccessEntry) DependOn() terra.Reference {
	return terra.ReferenceResource(eae)
}

// Dependencies returns the list of resources [EksAccessEntry] depends_on.
func (eae *EksAccessEntry) Dependencies() terra.Dependencies {
	return eae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EksAccessEntry].
func (eae *EksAccessEntry) LifecycleManagement() *terra.Lifecycle {
	return eae.Lifecycle
}

// Attributes returns the attributes for [EksAccessEntry].
func (eae *EksAccessEntry) Attributes() eksAccessEntryAttributes {
	return eksAccessEntryAttributes{ref: terra.ReferenceResource(eae)}
}

// ImportState imports the given attribute values into [EksAccessEntry]'s state.
func (eae *EksAccessEntry) ImportState(av io.Reader) error {
	eae.state = &eksAccessEntryState{}
	if err := json.NewDecoder(av).Decode(eae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eae.Type(), eae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EksAccessEntry] has state.
func (eae *EksAccessEntry) State() (*eksAccessEntryState, bool) {
	return eae.state, eae.state != nil
}

// StateMust returns the state for [EksAccessEntry]. Panics if the state is nil.
func (eae *EksAccessEntry) StateMust() *eksAccessEntryState {
	if eae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eae.Type(), eae.LocalName()))
	}
	return eae.state
}

// EksAccessEntryArgs contains the configurations for aws_eks_access_entry.
type EksAccessEntryArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KubernetesGroups: set of string, optional
	KubernetesGroups terra.SetValue[terra.StringValue] `hcl:"kubernetes_groups,attr"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// Timeouts: optional
	Timeouts *eksaccessentry.Timeouts `hcl:"timeouts,block"`
}
type eksAccessEntryAttributes struct {
	ref terra.Reference
}

// AccessEntryArn returns a reference to field access_entry_arn of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) AccessEntryArn() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("access_entry_arn"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("cluster_name"))
}

// CreatedAt returns a reference to field created_at of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("created_at"))
}

// Id returns a reference to field id of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("id"))
}

// KubernetesGroups returns a reference to field kubernetes_groups of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) KubernetesGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](eae.ref.Append("kubernetes_groups"))
}

// ModifiedAt returns a reference to field modified_at of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("modified_at"))
}

// PrincipalArn returns a reference to field principal_arn of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("principal_arn"))
}

// Tags returns a reference to field tags of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](eae.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](eae.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("type"))
}

// UserName returns a reference to field user_name of aws_eks_access_entry.
func (eae eksAccessEntryAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(eae.ref.Append("user_name"))
}

func (eae eksAccessEntryAttributes) Timeouts() eksaccessentry.TimeoutsAttributes {
	return terra.ReferenceAsSingle[eksaccessentry.TimeoutsAttributes](eae.ref.Append("timeouts"))
}

type eksAccessEntryState struct {
	AccessEntryArn   string                        `json:"access_entry_arn"`
	ClusterName      string                        `json:"cluster_name"`
	CreatedAt        string                        `json:"created_at"`
	Id               string                        `json:"id"`
	KubernetesGroups []string                      `json:"kubernetes_groups"`
	ModifiedAt       string                        `json:"modified_at"`
	PrincipalArn     string                        `json:"principal_arn"`
	Tags             map[string]string             `json:"tags"`
	TagsAll          map[string]string             `json:"tags_all"`
	Type             string                        `json:"type"`
	UserName         string                        `json:"user_name"`
	Timeouts         *eksaccessentry.TimeoutsState `json:"timeouts"`
}
