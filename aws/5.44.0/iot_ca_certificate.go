// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	iotcacertificate "github.com/golingon/terraproviders/aws/5.44.0/iotcacertificate"
	"io"
)

// NewIotCaCertificate creates a new instance of [IotCaCertificate].
func NewIotCaCertificate(name string, args IotCaCertificateArgs) *IotCaCertificate {
	return &IotCaCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotCaCertificate)(nil)

// IotCaCertificate represents the Terraform resource aws_iot_ca_certificate.
type IotCaCertificate struct {
	Name      string
	Args      IotCaCertificateArgs
	state     *iotCaCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IotCaCertificate].
func (icc *IotCaCertificate) Type() string {
	return "aws_iot_ca_certificate"
}

// LocalName returns the local name for [IotCaCertificate].
func (icc *IotCaCertificate) LocalName() string {
	return icc.Name
}

// Configuration returns the configuration (args) for [IotCaCertificate].
func (icc *IotCaCertificate) Configuration() interface{} {
	return icc.Args
}

// DependOn is used for other resources to depend on [IotCaCertificate].
func (icc *IotCaCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(icc)
}

// Dependencies returns the list of resources [IotCaCertificate] depends_on.
func (icc *IotCaCertificate) Dependencies() terra.Dependencies {
	return icc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IotCaCertificate].
func (icc *IotCaCertificate) LifecycleManagement() *terra.Lifecycle {
	return icc.Lifecycle
}

// Attributes returns the attributes for [IotCaCertificate].
func (icc *IotCaCertificate) Attributes() iotCaCertificateAttributes {
	return iotCaCertificateAttributes{ref: terra.ReferenceResource(icc)}
}

// ImportState imports the given attribute values into [IotCaCertificate]'s state.
func (icc *IotCaCertificate) ImportState(av io.Reader) error {
	icc.state = &iotCaCertificateState{}
	if err := json.NewDecoder(av).Decode(icc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", icc.Type(), icc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IotCaCertificate] has state.
func (icc *IotCaCertificate) State() (*iotCaCertificateState, bool) {
	return icc.state, icc.state != nil
}

// StateMust returns the state for [IotCaCertificate]. Panics if the state is nil.
func (icc *IotCaCertificate) StateMust() *iotCaCertificateState {
	if icc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", icc.Type(), icc.LocalName()))
	}
	return icc.state
}

// IotCaCertificateArgs contains the configurations for aws_iot_ca_certificate.
type IotCaCertificateArgs struct {
	// Active: bool, required
	Active terra.BoolValue `hcl:"active,attr" validate:"required"`
	// AllowAutoRegistration: bool, required
	AllowAutoRegistration terra.BoolValue `hcl:"allow_auto_registration,attr" validate:"required"`
	// CaCertificatePem: string, required
	CaCertificatePem terra.StringValue `hcl:"ca_certificate_pem,attr" validate:"required"`
	// CertificateMode: string, optional
	CertificateMode terra.StringValue `hcl:"certificate_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VerificationCertificatePem: string, optional
	VerificationCertificatePem terra.StringValue `hcl:"verification_certificate_pem,attr"`
	// Validity: min=0
	Validity []iotcacertificate.Validity `hcl:"validity,block" validate:"min=0"`
	// RegistrationConfig: optional
	RegistrationConfig *iotcacertificate.RegistrationConfig `hcl:"registration_config,block"`
}
type iotCaCertificateAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(icc.ref.Append("active"))
}

// AllowAutoRegistration returns a reference to field allow_auto_registration of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) AllowAutoRegistration() terra.BoolValue {
	return terra.ReferenceAsBool(icc.ref.Append("allow_auto_registration"))
}

// Arn returns a reference to field arn of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("arn"))
}

// CaCertificatePem returns a reference to field ca_certificate_pem of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) CaCertificatePem() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("ca_certificate_pem"))
}

// CertificateMode returns a reference to field certificate_mode of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) CertificateMode() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("certificate_mode"))
}

// CustomerVersion returns a reference to field customer_version of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) CustomerVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(icc.ref.Append("customer_version"))
}

// GenerationId returns a reference to field generation_id of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) GenerationId() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("generation_id"))
}

// Id returns a reference to field id of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](icc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](icc.ref.Append("tags_all"))
}

// VerificationCertificatePem returns a reference to field verification_certificate_pem of aws_iot_ca_certificate.
func (icc iotCaCertificateAttributes) VerificationCertificatePem() terra.StringValue {
	return terra.ReferenceAsString(icc.ref.Append("verification_certificate_pem"))
}

func (icc iotCaCertificateAttributes) Validity() terra.ListValue[iotcacertificate.ValidityAttributes] {
	return terra.ReferenceAsList[iotcacertificate.ValidityAttributes](icc.ref.Append("validity"))
}

func (icc iotCaCertificateAttributes) RegistrationConfig() terra.ListValue[iotcacertificate.RegistrationConfigAttributes] {
	return terra.ReferenceAsList[iotcacertificate.RegistrationConfigAttributes](icc.ref.Append("registration_config"))
}

type iotCaCertificateState struct {
	Active                     bool                                       `json:"active"`
	AllowAutoRegistration      bool                                       `json:"allow_auto_registration"`
	Arn                        string                                     `json:"arn"`
	CaCertificatePem           string                                     `json:"ca_certificate_pem"`
	CertificateMode            string                                     `json:"certificate_mode"`
	CustomerVersion            float64                                    `json:"customer_version"`
	GenerationId               string                                     `json:"generation_id"`
	Id                         string                                     `json:"id"`
	Tags                       map[string]string                          `json:"tags"`
	TagsAll                    map[string]string                          `json:"tags_all"`
	VerificationCertificatePem string                                     `json:"verification_certificate_pem"`
	Validity                   []iotcacertificate.ValidityState           `json:"validity"`
	RegistrationConfig         []iotcacertificate.RegistrationConfigState `json:"registration_config"`
}
