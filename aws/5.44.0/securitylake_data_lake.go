// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securitylakedatalake "github.com/golingon/terraproviders/aws/5.44.0/securitylakedatalake"
	"io"
)

// NewSecuritylakeDataLake creates a new instance of [SecuritylakeDataLake].
func NewSecuritylakeDataLake(name string, args SecuritylakeDataLakeArgs) *SecuritylakeDataLake {
	return &SecuritylakeDataLake{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecuritylakeDataLake)(nil)

// SecuritylakeDataLake represents the Terraform resource aws_securitylake_data_lake.
type SecuritylakeDataLake struct {
	Name      string
	Args      SecuritylakeDataLakeArgs
	state     *securitylakeDataLakeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) Type() string {
	return "aws_securitylake_data_lake"
}

// LocalName returns the local name for [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) LocalName() string {
	return sdl.Name
}

// Configuration returns the configuration (args) for [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) Configuration() interface{} {
	return sdl.Args
}

// DependOn is used for other resources to depend on [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) DependOn() terra.Reference {
	return terra.ReferenceResource(sdl)
}

// Dependencies returns the list of resources [SecuritylakeDataLake] depends_on.
func (sdl *SecuritylakeDataLake) Dependencies() terra.Dependencies {
	return sdl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) LifecycleManagement() *terra.Lifecycle {
	return sdl.Lifecycle
}

// Attributes returns the attributes for [SecuritylakeDataLake].
func (sdl *SecuritylakeDataLake) Attributes() securitylakeDataLakeAttributes {
	return securitylakeDataLakeAttributes{ref: terra.ReferenceResource(sdl)}
}

// ImportState imports the given attribute values into [SecuritylakeDataLake]'s state.
func (sdl *SecuritylakeDataLake) ImportState(av io.Reader) error {
	sdl.state = &securitylakeDataLakeState{}
	if err := json.NewDecoder(av).Decode(sdl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdl.Type(), sdl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecuritylakeDataLake] has state.
func (sdl *SecuritylakeDataLake) State() (*securitylakeDataLakeState, bool) {
	return sdl.state, sdl.state != nil
}

// StateMust returns the state for [SecuritylakeDataLake]. Panics if the state is nil.
func (sdl *SecuritylakeDataLake) StateMust() *securitylakeDataLakeState {
	if sdl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdl.Type(), sdl.LocalName()))
	}
	return sdl.state
}

// SecuritylakeDataLakeArgs contains the configurations for aws_securitylake_data_lake.
type SecuritylakeDataLakeArgs struct {
	// MetaStoreManagerRoleArn: string, required
	MetaStoreManagerRoleArn terra.StringValue `hcl:"meta_store_manager_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Configuration: min=0
	Configuration []securitylakedatalake.Configuration `hcl:"configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *securitylakedatalake.Timeouts `hcl:"timeouts,block"`
}
type securitylakeDataLakeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sdl.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sdl.ref.Append("id"))
}

// MetaStoreManagerRoleArn returns a reference to field meta_store_manager_role_arn of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) MetaStoreManagerRoleArn() terra.StringValue {
	return terra.ReferenceAsString(sdl.ref.Append("meta_store_manager_role_arn"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sdl.ref.Append("s3_bucket_arn"))
}

// Tags returns a reference to field tags of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securitylake_data_lake.
func (sdl securitylakeDataLakeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdl.ref.Append("tags_all"))
}

func (sdl securitylakeDataLakeAttributes) Configuration() terra.ListValue[securitylakedatalake.ConfigurationAttributes] {
	return terra.ReferenceAsList[securitylakedatalake.ConfigurationAttributes](sdl.ref.Append("configuration"))
}

func (sdl securitylakeDataLakeAttributes) Timeouts() securitylakedatalake.TimeoutsAttributes {
	return terra.ReferenceAsSingle[securitylakedatalake.TimeoutsAttributes](sdl.ref.Append("timeouts"))
}

type securitylakeDataLakeState struct {
	Arn                     string                                    `json:"arn"`
	Id                      string                                    `json:"id"`
	MetaStoreManagerRoleArn string                                    `json:"meta_store_manager_role_arn"`
	S3BucketArn             string                                    `json:"s3_bucket_arn"`
	Tags                    map[string]string                         `json:"tags"`
	TagsAll                 map[string]string                         `json:"tags_all"`
	Configuration           []securitylakedatalake.ConfigurationState `json:"configuration"`
	Timeouts                *securitylakedatalake.TimeoutsState       `json:"timeouts"`
}
