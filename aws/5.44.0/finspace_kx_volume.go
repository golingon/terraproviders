// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	finspacekxvolume "github.com/golingon/terraproviders/aws/5.44.0/finspacekxvolume"
	"io"
)

// NewFinspaceKxVolume creates a new instance of [FinspaceKxVolume].
func NewFinspaceKxVolume(name string, args FinspaceKxVolumeArgs) *FinspaceKxVolume {
	return &FinspaceKxVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FinspaceKxVolume)(nil)

// FinspaceKxVolume represents the Terraform resource aws_finspace_kx_volume.
type FinspaceKxVolume struct {
	Name      string
	Args      FinspaceKxVolumeArgs
	state     *finspaceKxVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) Type() string {
	return "aws_finspace_kx_volume"
}

// LocalName returns the local name for [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) LocalName() string {
	return fkv.Name
}

// Configuration returns the configuration (args) for [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) Configuration() interface{} {
	return fkv.Args
}

// DependOn is used for other resources to depend on [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) DependOn() terra.Reference {
	return terra.ReferenceResource(fkv)
}

// Dependencies returns the list of resources [FinspaceKxVolume] depends_on.
func (fkv *FinspaceKxVolume) Dependencies() terra.Dependencies {
	return fkv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) LifecycleManagement() *terra.Lifecycle {
	return fkv.Lifecycle
}

// Attributes returns the attributes for [FinspaceKxVolume].
func (fkv *FinspaceKxVolume) Attributes() finspaceKxVolumeAttributes {
	return finspaceKxVolumeAttributes{ref: terra.ReferenceResource(fkv)}
}

// ImportState imports the given attribute values into [FinspaceKxVolume]'s state.
func (fkv *FinspaceKxVolume) ImportState(av io.Reader) error {
	fkv.state = &finspaceKxVolumeState{}
	if err := json.NewDecoder(av).Decode(fkv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fkv.Type(), fkv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [FinspaceKxVolume] has state.
func (fkv *FinspaceKxVolume) State() (*finspaceKxVolumeState, bool) {
	return fkv.state, fkv.state != nil
}

// StateMust returns the state for [FinspaceKxVolume]. Panics if the state is nil.
func (fkv *FinspaceKxVolume) StateMust() *finspaceKxVolumeState {
	if fkv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fkv.Type(), fkv.LocalName()))
	}
	return fkv.state
}

// FinspaceKxVolumeArgs contains the configurations for aws_finspace_kx_volume.
type FinspaceKxVolumeArgs struct {
	// AvailabilityZones: list of string, required
	AvailabilityZones terra.ListValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// AzMode: string, required
	AzMode terra.StringValue `hcl:"az_mode,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AttachedClusters: min=0
	AttachedClusters []finspacekxvolume.AttachedClusters `hcl:"attached_clusters,block" validate:"min=0"`
	// Nas1Configuration: min=0
	Nas1Configuration []finspacekxvolume.Nas1Configuration `hcl:"nas1_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *finspacekxvolume.Timeouts `hcl:"timeouts,block"`
}
type finspaceKxVolumeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) AvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fkv.ref.Append("availability_zones"))
}

// AzMode returns a reference to field az_mode of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) AzMode() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("az_mode"))
}

// CreatedTimestamp returns a reference to field created_timestamp of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) CreatedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("created_timestamp"))
}

// Description returns a reference to field description of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("description"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("environment_id"))
}

// Id returns a reference to field id of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("id"))
}

// LastModifiedTimestamp returns a reference to field last_modified_timestamp of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) LastModifiedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("last_modified_timestamp"))
}

// Name returns a reference to field name of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("name"))
}

// Status returns a reference to field status of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fkv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](fkv.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_finspace_kx_volume.
func (fkv finspaceKxVolumeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(fkv.ref.Append("type"))
}

func (fkv finspaceKxVolumeAttributes) AttachedClusters() terra.ListValue[finspacekxvolume.AttachedClustersAttributes] {
	return terra.ReferenceAsList[finspacekxvolume.AttachedClustersAttributes](fkv.ref.Append("attached_clusters"))
}

func (fkv finspaceKxVolumeAttributes) Nas1Configuration() terra.ListValue[finspacekxvolume.Nas1ConfigurationAttributes] {
	return terra.ReferenceAsList[finspacekxvolume.Nas1ConfigurationAttributes](fkv.ref.Append("nas1_configuration"))
}

func (fkv finspaceKxVolumeAttributes) Timeouts() finspacekxvolume.TimeoutsAttributes {
	return terra.ReferenceAsSingle[finspacekxvolume.TimeoutsAttributes](fkv.ref.Append("timeouts"))
}

type finspaceKxVolumeState struct {
	Arn                   string                                    `json:"arn"`
	AvailabilityZones     []string                                  `json:"availability_zones"`
	AzMode                string                                    `json:"az_mode"`
	CreatedTimestamp      string                                    `json:"created_timestamp"`
	Description           string                                    `json:"description"`
	EnvironmentId         string                                    `json:"environment_id"`
	Id                    string                                    `json:"id"`
	LastModifiedTimestamp string                                    `json:"last_modified_timestamp"`
	Name                  string                                    `json:"name"`
	Status                string                                    `json:"status"`
	StatusReason          string                                    `json:"status_reason"`
	Tags                  map[string]string                         `json:"tags"`
	TagsAll               map[string]string                         `json:"tags_all"`
	Type                  string                                    `json:"type"`
	AttachedClusters      []finspacekxvolume.AttachedClustersState  `json:"attached_clusters"`
	Nas1Configuration     []finspacekxvolume.Nas1ConfigurationState `json:"nas1_configuration"`
	Timeouts              *finspacekxvolume.TimeoutsState           `json:"timeouts"`
}
