// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securitylakeawslogsource

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Source struct {
	// Accounts: set of string, optional
	Accounts terra.SetValue[terra.StringValue] `hcl:"accounts,attr"`
	// Regions: set of string, required
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr" validate:"required"`
	// SourceName: string, required
	SourceName terra.StringValue `hcl:"source_name,attr" validate:"required"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Accounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("accounts"))
}

func (s SourceAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("regions"))
}

func (s SourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_name"))
}

func (s SourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_version"))
}

type SourceState struct {
	Accounts      []string `json:"accounts"`
	Regions       []string `json:"regions"`
	SourceName    string   `json:"source_name"`
	SourceVersion string   `json:"source_version"`
}
