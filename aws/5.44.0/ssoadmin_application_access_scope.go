// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewSsoadminApplicationAccessScope creates a new instance of [SsoadminApplicationAccessScope].
func NewSsoadminApplicationAccessScope(name string, args SsoadminApplicationAccessScopeArgs) *SsoadminApplicationAccessScope {
	return &SsoadminApplicationAccessScope{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsoadminApplicationAccessScope)(nil)

// SsoadminApplicationAccessScope represents the Terraform resource aws_ssoadmin_application_access_scope.
type SsoadminApplicationAccessScope struct {
	Name      string
	Args      SsoadminApplicationAccessScopeArgs
	state     *ssoadminApplicationAccessScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) Type() string {
	return "aws_ssoadmin_application_access_scope"
}

// LocalName returns the local name for [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) LocalName() string {
	return saas.Name
}

// Configuration returns the configuration (args) for [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) Configuration() interface{} {
	return saas.Args
}

// DependOn is used for other resources to depend on [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) DependOn() terra.Reference {
	return terra.ReferenceResource(saas)
}

// Dependencies returns the list of resources [SsoadminApplicationAccessScope] depends_on.
func (saas *SsoadminApplicationAccessScope) Dependencies() terra.Dependencies {
	return saas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) LifecycleManagement() *terra.Lifecycle {
	return saas.Lifecycle
}

// Attributes returns the attributes for [SsoadminApplicationAccessScope].
func (saas *SsoadminApplicationAccessScope) Attributes() ssoadminApplicationAccessScopeAttributes {
	return ssoadminApplicationAccessScopeAttributes{ref: terra.ReferenceResource(saas)}
}

// ImportState imports the given attribute values into [SsoadminApplicationAccessScope]'s state.
func (saas *SsoadminApplicationAccessScope) ImportState(av io.Reader) error {
	saas.state = &ssoadminApplicationAccessScopeState{}
	if err := json.NewDecoder(av).Decode(saas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saas.Type(), saas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SsoadminApplicationAccessScope] has state.
func (saas *SsoadminApplicationAccessScope) State() (*ssoadminApplicationAccessScopeState, bool) {
	return saas.state, saas.state != nil
}

// StateMust returns the state for [SsoadminApplicationAccessScope]. Panics if the state is nil.
func (saas *SsoadminApplicationAccessScope) StateMust() *ssoadminApplicationAccessScopeState {
	if saas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saas.Type(), saas.LocalName()))
	}
	return saas.state
}

// SsoadminApplicationAccessScopeArgs contains the configurations for aws_ssoadmin_application_access_scope.
type SsoadminApplicationAccessScopeArgs struct {
	// ApplicationArn: string, required
	ApplicationArn terra.StringValue `hcl:"application_arn,attr" validate:"required"`
	// AuthorizedTargets: list of string, optional
	AuthorizedTargets terra.ListValue[terra.StringValue] `hcl:"authorized_targets,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
}
type ssoadminApplicationAccessScopeAttributes struct {
	ref terra.Reference
}

// ApplicationArn returns a reference to field application_arn of aws_ssoadmin_application_access_scope.
func (saas ssoadminApplicationAccessScopeAttributes) ApplicationArn() terra.StringValue {
	return terra.ReferenceAsString(saas.ref.Append("application_arn"))
}

// AuthorizedTargets returns a reference to field authorized_targets of aws_ssoadmin_application_access_scope.
func (saas ssoadminApplicationAccessScopeAttributes) AuthorizedTargets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](saas.ref.Append("authorized_targets"))
}

// Id returns a reference to field id of aws_ssoadmin_application_access_scope.
func (saas ssoadminApplicationAccessScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(saas.ref.Append("id"))
}

// Scope returns a reference to field scope of aws_ssoadmin_application_access_scope.
func (saas ssoadminApplicationAccessScopeAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(saas.ref.Append("scope"))
}

type ssoadminApplicationAccessScopeState struct {
	ApplicationArn    string   `json:"application_arn"`
	AuthorizedTargets []string `json:"authorized_targets"`
	Id                string   `json:"id"`
	Scope             string   `json:"scope"`
}
