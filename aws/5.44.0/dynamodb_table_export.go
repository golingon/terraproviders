// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	dynamodbtableexport "github.com/golingon/terraproviders/aws/5.44.0/dynamodbtableexport"
	"io"
)

// NewDynamodbTableExport creates a new instance of [DynamodbTableExport].
func NewDynamodbTableExport(name string, args DynamodbTableExportArgs) *DynamodbTableExport {
	return &DynamodbTableExport{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DynamodbTableExport)(nil)

// DynamodbTableExport represents the Terraform resource aws_dynamodb_table_export.
type DynamodbTableExport struct {
	Name      string
	Args      DynamodbTableExportArgs
	state     *dynamodbTableExportState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DynamodbTableExport].
func (dte *DynamodbTableExport) Type() string {
	return "aws_dynamodb_table_export"
}

// LocalName returns the local name for [DynamodbTableExport].
func (dte *DynamodbTableExport) LocalName() string {
	return dte.Name
}

// Configuration returns the configuration (args) for [DynamodbTableExport].
func (dte *DynamodbTableExport) Configuration() interface{} {
	return dte.Args
}

// DependOn is used for other resources to depend on [DynamodbTableExport].
func (dte *DynamodbTableExport) DependOn() terra.Reference {
	return terra.ReferenceResource(dte)
}

// Dependencies returns the list of resources [DynamodbTableExport] depends_on.
func (dte *DynamodbTableExport) Dependencies() terra.Dependencies {
	return dte.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DynamodbTableExport].
func (dte *DynamodbTableExport) LifecycleManagement() *terra.Lifecycle {
	return dte.Lifecycle
}

// Attributes returns the attributes for [DynamodbTableExport].
func (dte *DynamodbTableExport) Attributes() dynamodbTableExportAttributes {
	return dynamodbTableExportAttributes{ref: terra.ReferenceResource(dte)}
}

// ImportState imports the given attribute values into [DynamodbTableExport]'s state.
func (dte *DynamodbTableExport) ImportState(av io.Reader) error {
	dte.state = &dynamodbTableExportState{}
	if err := json.NewDecoder(av).Decode(dte.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dte.Type(), dte.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DynamodbTableExport] has state.
func (dte *DynamodbTableExport) State() (*dynamodbTableExportState, bool) {
	return dte.state, dte.state != nil
}

// StateMust returns the state for [DynamodbTableExport]. Panics if the state is nil.
func (dte *DynamodbTableExport) StateMust() *dynamodbTableExportState {
	if dte.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dte.Type(), dte.LocalName()))
	}
	return dte.state
}

// DynamodbTableExportArgs contains the configurations for aws_dynamodb_table_export.
type DynamodbTableExportArgs struct {
	// ExportFormat: string, optional
	ExportFormat terra.StringValue `hcl:"export_format,attr"`
	// ExportTime: string, optional
	ExportTime terra.StringValue `hcl:"export_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3BucketOwner: string, optional
	S3BucketOwner terra.StringValue `hcl:"s3_bucket_owner,attr"`
	// S3Prefix: string, optional
	S3Prefix terra.StringValue `hcl:"s3_prefix,attr"`
	// S3SseAlgorithm: string, optional
	S3SseAlgorithm terra.StringValue `hcl:"s3_sse_algorithm,attr"`
	// S3SseKmsKeyId: string, optional
	S3SseKmsKeyId terra.StringValue `hcl:"s3_sse_kms_key_id,attr"`
	// TableArn: string, required
	TableArn terra.StringValue `hcl:"table_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dynamodbtableexport.Timeouts `hcl:"timeouts,block"`
}
type dynamodbTableExportAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("arn"))
}

// BilledSizeInBytes returns a reference to field billed_size_in_bytes of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) BilledSizeInBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(dte.ref.Append("billed_size_in_bytes"))
}

// EndTime returns a reference to field end_time of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("end_time"))
}

// ExportFormat returns a reference to field export_format of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) ExportFormat() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("export_format"))
}

// ExportStatus returns a reference to field export_status of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) ExportStatus() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("export_status"))
}

// ExportTime returns a reference to field export_time of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) ExportTime() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("export_time"))
}

// Id returns a reference to field id of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("id"))
}

// ItemCount returns a reference to field item_count of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) ItemCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dte.ref.Append("item_count"))
}

// ManifestFilesS3Key returns a reference to field manifest_files_s3_key of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) ManifestFilesS3Key() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("manifest_files_s3_key"))
}

// S3Bucket returns a reference to field s3_bucket of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("s3_bucket"))
}

// S3BucketOwner returns a reference to field s3_bucket_owner of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) S3BucketOwner() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("s3_bucket_owner"))
}

// S3Prefix returns a reference to field s3_prefix of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) S3Prefix() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("s3_prefix"))
}

// S3SseAlgorithm returns a reference to field s3_sse_algorithm of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) S3SseAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("s3_sse_algorithm"))
}

// S3SseKmsKeyId returns a reference to field s3_sse_kms_key_id of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) S3SseKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("s3_sse_kms_key_id"))
}

// StartTime returns a reference to field start_time of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("start_time"))
}

// TableArn returns a reference to field table_arn of aws_dynamodb_table_export.
func (dte dynamodbTableExportAttributes) TableArn() terra.StringValue {
	return terra.ReferenceAsString(dte.ref.Append("table_arn"))
}

func (dte dynamodbTableExportAttributes) Timeouts() dynamodbtableexport.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dynamodbtableexport.TimeoutsAttributes](dte.ref.Append("timeouts"))
}

type dynamodbTableExportState struct {
	Arn                string                             `json:"arn"`
	BilledSizeInBytes  float64                            `json:"billed_size_in_bytes"`
	EndTime            string                             `json:"end_time"`
	ExportFormat       string                             `json:"export_format"`
	ExportStatus       string                             `json:"export_status"`
	ExportTime         string                             `json:"export_time"`
	Id                 string                             `json:"id"`
	ItemCount          float64                            `json:"item_count"`
	ManifestFilesS3Key string                             `json:"manifest_files_s3_key"`
	S3Bucket           string                             `json:"s3_bucket"`
	S3BucketOwner      string                             `json:"s3_bucket_owner"`
	S3Prefix           string                             `json:"s3_prefix"`
	S3SseAlgorithm     string                             `json:"s3_sse_algorithm"`
	S3SseKmsKeyId      string                             `json:"s3_sse_kms_key_id"`
	StartTime          string                             `json:"start_time"`
	TableArn           string                             `json:"table_arn"`
	Timeouts           *dynamodbtableexport.TimeoutsState `json:"timeouts"`
}
