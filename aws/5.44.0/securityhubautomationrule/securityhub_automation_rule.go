// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securityhubautomationrule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Actions struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// FindingFieldsUpdate: min=0
	FindingFieldsUpdate []FindingFieldsUpdate `hcl:"finding_fields_update,block" validate:"min=0"`
}

type FindingFieldsUpdate struct {
	// Confidence: number, optional
	Confidence terra.NumberValue `hcl:"confidence,attr"`
	// Criticality: number, optional
	Criticality terra.NumberValue `hcl:"criticality,attr"`
	// Types: list of string, optional
	Types terra.ListValue[terra.StringValue] `hcl:"types,attr"`
	// UserDefinedFields: map of string, optional
	UserDefinedFields terra.MapValue[terra.StringValue] `hcl:"user_defined_fields,attr"`
	// VerificationState: string, optional
	VerificationState terra.StringValue `hcl:"verification_state,attr"`
	// Note: min=0
	Note []Note `hcl:"note,block" validate:"min=0"`
	// RelatedFindings: min=0
	RelatedFindings []RelatedFindings `hcl:"related_findings,block" validate:"min=0"`
	// Severity: min=0
	Severity []Severity `hcl:"severity,block" validate:"min=0"`
	// Workflow: min=0
	Workflow []Workflow `hcl:"workflow,block" validate:"min=0"`
}

type Note struct {
	// Text: string, required
	Text terra.StringValue `hcl:"text,attr" validate:"required"`
	// UpdatedBy: string, required
	UpdatedBy terra.StringValue `hcl:"updated_by,attr" validate:"required"`
}

type RelatedFindings struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// ProductArn: string, required
	ProductArn terra.StringValue `hcl:"product_arn,attr" validate:"required"`
}

type Severity struct {
	// Label: string, optional
	Label terra.StringValue `hcl:"label,attr"`
	// Product: number, optional
	Product terra.NumberValue `hcl:"product,attr"`
}

type Workflow struct {
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type Criteria struct {
	// AwsAccountId: min=0
	AwsAccountId []AwsAccountId `hcl:"aws_account_id,block" validate:"min=0"`
	// AwsAccountName: min=0
	AwsAccountName []AwsAccountName `hcl:"aws_account_name,block" validate:"min=0"`
	// CompanyName: min=0
	CompanyName []CompanyName `hcl:"company_name,block" validate:"min=0"`
	// ComplianceAssociatedStandardsId: min=0
	ComplianceAssociatedStandardsId []ComplianceAssociatedStandardsId `hcl:"compliance_associated_standards_id,block" validate:"min=0"`
	// ComplianceSecurityControlId: min=0
	ComplianceSecurityControlId []ComplianceSecurityControlId `hcl:"compliance_security_control_id,block" validate:"min=0"`
	// ComplianceStatus: min=0
	ComplianceStatus []ComplianceStatus `hcl:"compliance_status,block" validate:"min=0"`
	// Confidence: min=0
	Confidence []Confidence `hcl:"confidence,block" validate:"min=0"`
	// CreatedAt: min=0
	CreatedAt []CreatedAt `hcl:"created_at,block" validate:"min=0"`
	// Criticality: min=0
	Criticality []Criticality `hcl:"criticality,block" validate:"min=0"`
	// Description: min=0
	Description []Description `hcl:"description,block" validate:"min=0"`
	// FirstObservedAt: min=0
	FirstObservedAt []FirstObservedAt `hcl:"first_observed_at,block" validate:"min=0"`
	// GeneratorId: min=0
	GeneratorId []GeneratorId `hcl:"generator_id,block" validate:"min=0"`
	// Id: min=0
	Id []Id `hcl:"id,block" validate:"min=0"`
	// LastObservedAt: min=0
	LastObservedAt []LastObservedAt `hcl:"last_observed_at,block" validate:"min=0"`
	// NoteText: min=0
	NoteText []NoteText `hcl:"note_text,block" validate:"min=0"`
	// NoteUpdatedAt: min=0
	NoteUpdatedAt []NoteUpdatedAt `hcl:"note_updated_at,block" validate:"min=0"`
	// NoteUpdatedBy: min=0
	NoteUpdatedBy []NoteUpdatedBy `hcl:"note_updated_by,block" validate:"min=0"`
	// ProductArn: min=0
	ProductArn []ProductArn `hcl:"product_arn,block" validate:"min=0"`
	// ProductName: min=0
	ProductName []ProductName `hcl:"product_name,block" validate:"min=0"`
	// RecordState: min=0
	RecordState []RecordState `hcl:"record_state,block" validate:"min=0"`
	// RelatedFindingsId: min=0
	RelatedFindingsId []RelatedFindingsId `hcl:"related_findings_id,block" validate:"min=0"`
	// RelatedFindingsProductArn: min=0
	RelatedFindingsProductArn []RelatedFindingsProductArn `hcl:"related_findings_product_arn,block" validate:"min=0"`
	// ResourceApplicationArn: min=0
	ResourceApplicationArn []ResourceApplicationArn `hcl:"resource_application_arn,block" validate:"min=0"`
	// ResourceApplicationName: min=0
	ResourceApplicationName []ResourceApplicationName `hcl:"resource_application_name,block" validate:"min=0"`
	// ResourceDetailsOther: min=0
	ResourceDetailsOther []ResourceDetailsOther `hcl:"resource_details_other,block" validate:"min=0"`
	// ResourceId: min=0
	ResourceId []ResourceId `hcl:"resource_id,block" validate:"min=0"`
	// ResourcePartition: min=0
	ResourcePartition []ResourcePartition `hcl:"resource_partition,block" validate:"min=0"`
	// ResourceRegion: min=0
	ResourceRegion []ResourceRegion `hcl:"resource_region,block" validate:"min=0"`
	// ResourceTags: min=0
	ResourceTags []ResourceTags `hcl:"resource_tags,block" validate:"min=0"`
	// ResourceType: min=0
	ResourceType []ResourceType `hcl:"resource_type,block" validate:"min=0"`
	// SeverityLabel: min=0
	SeverityLabel []SeverityLabel `hcl:"severity_label,block" validate:"min=0"`
	// SourceUrl: min=0
	SourceUrl []SourceUrl `hcl:"source_url,block" validate:"min=0"`
	// Title: min=0
	Title []Title `hcl:"title,block" validate:"min=0"`
	// Type: min=0
	Type []Type `hcl:"type,block" validate:"min=0"`
	// UpdatedAt: min=0
	UpdatedAt []UpdatedAt `hcl:"updated_at,block" validate:"min=0"`
	// UserDefinedFields: min=0
	UserDefinedFields []UserDefinedFields `hcl:"user_defined_fields,block" validate:"min=0"`
	// VerificationState: min=0
	VerificationState []VerificationState `hcl:"verification_state,block" validate:"min=0"`
	// WorkflowStatus: min=0
	WorkflowStatus []WorkflowStatus `hcl:"workflow_status,block" validate:"min=0"`
}

type AwsAccountId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type AwsAccountName struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type CompanyName struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ComplianceAssociatedStandardsId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ComplianceSecurityControlId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ComplianceStatus struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Confidence struct {
	// Eq: number, optional
	Eq terra.NumberValue `hcl:"eq,attr"`
	// Gt: number, optional
	Gt terra.NumberValue `hcl:"gt,attr"`
	// Gte: number, optional
	Gte terra.NumberValue `hcl:"gte,attr"`
	// Lt: number, optional
	Lt terra.NumberValue `hcl:"lt,attr"`
	// Lte: number, optional
	Lte terra.NumberValue `hcl:"lte,attr"`
}

type CreatedAt struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// CreatedAtDateRange: min=0
	DateRange []CreatedAtDateRange `hcl:"date_range,block" validate:"min=0"`
}

type CreatedAtDateRange struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type Criticality struct {
	// Eq: number, optional
	Eq terra.NumberValue `hcl:"eq,attr"`
	// Gt: number, optional
	Gt terra.NumberValue `hcl:"gt,attr"`
	// Gte: number, optional
	Gte terra.NumberValue `hcl:"gte,attr"`
	// Lt: number, optional
	Lt terra.NumberValue `hcl:"lt,attr"`
	// Lte: number, optional
	Lte terra.NumberValue `hcl:"lte,attr"`
}

type Description struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type FirstObservedAt struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// FirstObservedAtDateRange: min=0
	DateRange []FirstObservedAtDateRange `hcl:"date_range,block" validate:"min=0"`
}

type FirstObservedAtDateRange struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type GeneratorId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Id struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type LastObservedAt struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// LastObservedAtDateRange: min=0
	DateRange []LastObservedAtDateRange `hcl:"date_range,block" validate:"min=0"`
}

type LastObservedAtDateRange struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NoteText struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NoteUpdatedAt struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// NoteUpdatedAtDateRange: min=0
	DateRange []NoteUpdatedAtDateRange `hcl:"date_range,block" validate:"min=0"`
}

type NoteUpdatedAtDateRange struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type NoteUpdatedBy struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ProductArn struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ProductName struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RecordState struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RelatedFindingsId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RelatedFindingsProductArn struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceApplicationArn struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceApplicationName struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceDetailsOther struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceId struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourcePartition struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceRegion struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceTags struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceType struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SeverityLabel struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SourceUrl struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Title struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Type struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type UpdatedAt struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
	// UpdatedAtDateRange: min=0
	DateRange []UpdatedAtDateRange `hcl:"date_range,block" validate:"min=0"`
}

type UpdatedAtDateRange struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type UserDefinedFields struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type VerificationState struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type WorkflowStatus struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

func (a ActionsAttributes) FindingFieldsUpdate() terra.ListValue[FindingFieldsUpdateAttributes] {
	return terra.ReferenceAsList[FindingFieldsUpdateAttributes](a.ref.Append("finding_fields_update"))
}

type FindingFieldsUpdateAttributes struct {
	ref terra.Reference
}

func (ffu FindingFieldsUpdateAttributes) InternalRef() (terra.Reference, error) {
	return ffu.ref, nil
}

func (ffu FindingFieldsUpdateAttributes) InternalWithRef(ref terra.Reference) FindingFieldsUpdateAttributes {
	return FindingFieldsUpdateAttributes{ref: ref}
}

func (ffu FindingFieldsUpdateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ffu.ref.InternalTokens()
}

func (ffu FindingFieldsUpdateAttributes) Confidence() terra.NumberValue {
	return terra.ReferenceAsNumber(ffu.ref.Append("confidence"))
}

func (ffu FindingFieldsUpdateAttributes) Criticality() terra.NumberValue {
	return terra.ReferenceAsNumber(ffu.ref.Append("criticality"))
}

func (ffu FindingFieldsUpdateAttributes) Types() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ffu.ref.Append("types"))
}

func (ffu FindingFieldsUpdateAttributes) UserDefinedFields() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ffu.ref.Append("user_defined_fields"))
}

func (ffu FindingFieldsUpdateAttributes) VerificationState() terra.StringValue {
	return terra.ReferenceAsString(ffu.ref.Append("verification_state"))
}

func (ffu FindingFieldsUpdateAttributes) Note() terra.ListValue[NoteAttributes] {
	return terra.ReferenceAsList[NoteAttributes](ffu.ref.Append("note"))
}

func (ffu FindingFieldsUpdateAttributes) RelatedFindings() terra.SetValue[RelatedFindingsAttributes] {
	return terra.ReferenceAsSet[RelatedFindingsAttributes](ffu.ref.Append("related_findings"))
}

func (ffu FindingFieldsUpdateAttributes) Severity() terra.ListValue[SeverityAttributes] {
	return terra.ReferenceAsList[SeverityAttributes](ffu.ref.Append("severity"))
}

func (ffu FindingFieldsUpdateAttributes) Workflow() terra.ListValue[WorkflowAttributes] {
	return terra.ReferenceAsList[WorkflowAttributes](ffu.ref.Append("workflow"))
}

type NoteAttributes struct {
	ref terra.Reference
}

func (n NoteAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NoteAttributes) InternalWithRef(ref terra.Reference) NoteAttributes {
	return NoteAttributes{ref: ref}
}

func (n NoteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NoteAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("text"))
}

func (n NoteAttributes) UpdatedBy() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("updated_by"))
}

type RelatedFindingsAttributes struct {
	ref terra.Reference
}

func (rf RelatedFindingsAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RelatedFindingsAttributes) InternalWithRef(ref terra.Reference) RelatedFindingsAttributes {
	return RelatedFindingsAttributes{ref: ref}
}

func (rf RelatedFindingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RelatedFindingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("id"))
}

func (rf RelatedFindingsAttributes) ProductArn() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("product_arn"))
}

type SeverityAttributes struct {
	ref terra.Reference
}

func (s SeverityAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SeverityAttributes) InternalWithRef(ref terra.Reference) SeverityAttributes {
	return SeverityAttributes{ref: ref}
}

func (s SeverityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SeverityAttributes) Label() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("label"))
}

func (s SeverityAttributes) Product() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("product"))
}

type WorkflowAttributes struct {
	ref terra.Reference
}

func (w WorkflowAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w WorkflowAttributes) InternalWithRef(ref terra.Reference) WorkflowAttributes {
	return WorkflowAttributes{ref: ref}
}

func (w WorkflowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w WorkflowAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("status"))
}

type CriteriaAttributes struct {
	ref terra.Reference
}

func (c CriteriaAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriteriaAttributes) InternalWithRef(ref terra.Reference) CriteriaAttributes {
	return CriteriaAttributes{ref: ref}
}

func (c CriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriteriaAttributes) AwsAccountId() terra.SetValue[AwsAccountIdAttributes] {
	return terra.ReferenceAsSet[AwsAccountIdAttributes](c.ref.Append("aws_account_id"))
}

func (c CriteriaAttributes) AwsAccountName() terra.SetValue[AwsAccountNameAttributes] {
	return terra.ReferenceAsSet[AwsAccountNameAttributes](c.ref.Append("aws_account_name"))
}

func (c CriteriaAttributes) CompanyName() terra.SetValue[CompanyNameAttributes] {
	return terra.ReferenceAsSet[CompanyNameAttributes](c.ref.Append("company_name"))
}

func (c CriteriaAttributes) ComplianceAssociatedStandardsId() terra.SetValue[ComplianceAssociatedStandardsIdAttributes] {
	return terra.ReferenceAsSet[ComplianceAssociatedStandardsIdAttributes](c.ref.Append("compliance_associated_standards_id"))
}

func (c CriteriaAttributes) ComplianceSecurityControlId() terra.SetValue[ComplianceSecurityControlIdAttributes] {
	return terra.ReferenceAsSet[ComplianceSecurityControlIdAttributes](c.ref.Append("compliance_security_control_id"))
}

func (c CriteriaAttributes) ComplianceStatus() terra.SetValue[ComplianceStatusAttributes] {
	return terra.ReferenceAsSet[ComplianceStatusAttributes](c.ref.Append("compliance_status"))
}

func (c CriteriaAttributes) Confidence() terra.SetValue[ConfidenceAttributes] {
	return terra.ReferenceAsSet[ConfidenceAttributes](c.ref.Append("confidence"))
}

func (c CriteriaAttributes) CreatedAt() terra.SetValue[CreatedAtAttributes] {
	return terra.ReferenceAsSet[CreatedAtAttributes](c.ref.Append("created_at"))
}

func (c CriteriaAttributes) Criticality() terra.SetValue[CriticalityAttributes] {
	return terra.ReferenceAsSet[CriticalityAttributes](c.ref.Append("criticality"))
}

func (c CriteriaAttributes) Description() terra.SetValue[DescriptionAttributes] {
	return terra.ReferenceAsSet[DescriptionAttributes](c.ref.Append("description"))
}

func (c CriteriaAttributes) FirstObservedAt() terra.SetValue[FirstObservedAtAttributes] {
	return terra.ReferenceAsSet[FirstObservedAtAttributes](c.ref.Append("first_observed_at"))
}

func (c CriteriaAttributes) GeneratorId() terra.SetValue[GeneratorIdAttributes] {
	return terra.ReferenceAsSet[GeneratorIdAttributes](c.ref.Append("generator_id"))
}

func (c CriteriaAttributes) Id() terra.SetValue[IdAttributes] {
	return terra.ReferenceAsSet[IdAttributes](c.ref.Append("id"))
}

func (c CriteriaAttributes) LastObservedAt() terra.SetValue[LastObservedAtAttributes] {
	return terra.ReferenceAsSet[LastObservedAtAttributes](c.ref.Append("last_observed_at"))
}

func (c CriteriaAttributes) NoteText() terra.SetValue[NoteTextAttributes] {
	return terra.ReferenceAsSet[NoteTextAttributes](c.ref.Append("note_text"))
}

func (c CriteriaAttributes) NoteUpdatedAt() terra.SetValue[NoteUpdatedAtAttributes] {
	return terra.ReferenceAsSet[NoteUpdatedAtAttributes](c.ref.Append("note_updated_at"))
}

func (c CriteriaAttributes) NoteUpdatedBy() terra.SetValue[NoteUpdatedByAttributes] {
	return terra.ReferenceAsSet[NoteUpdatedByAttributes](c.ref.Append("note_updated_by"))
}

func (c CriteriaAttributes) ProductArn() terra.SetValue[ProductArnAttributes] {
	return terra.ReferenceAsSet[ProductArnAttributes](c.ref.Append("product_arn"))
}

func (c CriteriaAttributes) ProductName() terra.SetValue[ProductNameAttributes] {
	return terra.ReferenceAsSet[ProductNameAttributes](c.ref.Append("product_name"))
}

func (c CriteriaAttributes) RecordState() terra.SetValue[RecordStateAttributes] {
	return terra.ReferenceAsSet[RecordStateAttributes](c.ref.Append("record_state"))
}

func (c CriteriaAttributes) RelatedFindingsId() terra.SetValue[RelatedFindingsIdAttributes] {
	return terra.ReferenceAsSet[RelatedFindingsIdAttributes](c.ref.Append("related_findings_id"))
}

func (c CriteriaAttributes) RelatedFindingsProductArn() terra.SetValue[RelatedFindingsProductArnAttributes] {
	return terra.ReferenceAsSet[RelatedFindingsProductArnAttributes](c.ref.Append("related_findings_product_arn"))
}

func (c CriteriaAttributes) ResourceApplicationArn() terra.SetValue[ResourceApplicationArnAttributes] {
	return terra.ReferenceAsSet[ResourceApplicationArnAttributes](c.ref.Append("resource_application_arn"))
}

func (c CriteriaAttributes) ResourceApplicationName() terra.SetValue[ResourceApplicationNameAttributes] {
	return terra.ReferenceAsSet[ResourceApplicationNameAttributes](c.ref.Append("resource_application_name"))
}

func (c CriteriaAttributes) ResourceDetailsOther() terra.SetValue[ResourceDetailsOtherAttributes] {
	return terra.ReferenceAsSet[ResourceDetailsOtherAttributes](c.ref.Append("resource_details_other"))
}

func (c CriteriaAttributes) ResourceId() terra.SetValue[ResourceIdAttributes] {
	return terra.ReferenceAsSet[ResourceIdAttributes](c.ref.Append("resource_id"))
}

func (c CriteriaAttributes) ResourcePartition() terra.SetValue[ResourcePartitionAttributes] {
	return terra.ReferenceAsSet[ResourcePartitionAttributes](c.ref.Append("resource_partition"))
}

func (c CriteriaAttributes) ResourceRegion() terra.SetValue[ResourceRegionAttributes] {
	return terra.ReferenceAsSet[ResourceRegionAttributes](c.ref.Append("resource_region"))
}

func (c CriteriaAttributes) ResourceTags() terra.SetValue[ResourceTagsAttributes] {
	return terra.ReferenceAsSet[ResourceTagsAttributes](c.ref.Append("resource_tags"))
}

func (c CriteriaAttributes) ResourceType() terra.SetValue[ResourceTypeAttributes] {
	return terra.ReferenceAsSet[ResourceTypeAttributes](c.ref.Append("resource_type"))
}

func (c CriteriaAttributes) SeverityLabel() terra.SetValue[SeverityLabelAttributes] {
	return terra.ReferenceAsSet[SeverityLabelAttributes](c.ref.Append("severity_label"))
}

func (c CriteriaAttributes) SourceUrl() terra.SetValue[SourceUrlAttributes] {
	return terra.ReferenceAsSet[SourceUrlAttributes](c.ref.Append("source_url"))
}

func (c CriteriaAttributes) Title() terra.SetValue[TitleAttributes] {
	return terra.ReferenceAsSet[TitleAttributes](c.ref.Append("title"))
}

func (c CriteriaAttributes) Type() terra.SetValue[TypeAttributes] {
	return terra.ReferenceAsSet[TypeAttributes](c.ref.Append("type"))
}

func (c CriteriaAttributes) UpdatedAt() terra.SetValue[UpdatedAtAttributes] {
	return terra.ReferenceAsSet[UpdatedAtAttributes](c.ref.Append("updated_at"))
}

func (c CriteriaAttributes) UserDefinedFields() terra.SetValue[UserDefinedFieldsAttributes] {
	return terra.ReferenceAsSet[UserDefinedFieldsAttributes](c.ref.Append("user_defined_fields"))
}

func (c CriteriaAttributes) VerificationState() terra.SetValue[VerificationStateAttributes] {
	return terra.ReferenceAsSet[VerificationStateAttributes](c.ref.Append("verification_state"))
}

func (c CriteriaAttributes) WorkflowStatus() terra.SetValue[WorkflowStatusAttributes] {
	return terra.ReferenceAsSet[WorkflowStatusAttributes](c.ref.Append("workflow_status"))
}

type AwsAccountIdAttributes struct {
	ref terra.Reference
}

func (aai AwsAccountIdAttributes) InternalRef() (terra.Reference, error) {
	return aai.ref, nil
}

func (aai AwsAccountIdAttributes) InternalWithRef(ref terra.Reference) AwsAccountIdAttributes {
	return AwsAccountIdAttributes{ref: ref}
}

func (aai AwsAccountIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aai.ref.InternalTokens()
}

func (aai AwsAccountIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("comparison"))
}

func (aai AwsAccountIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("value"))
}

type AwsAccountNameAttributes struct {
	ref terra.Reference
}

func (aan AwsAccountNameAttributes) InternalRef() (terra.Reference, error) {
	return aan.ref, nil
}

func (aan AwsAccountNameAttributes) InternalWithRef(ref terra.Reference) AwsAccountNameAttributes {
	return AwsAccountNameAttributes{ref: ref}
}

func (aan AwsAccountNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aan.ref.InternalTokens()
}

func (aan AwsAccountNameAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(aan.ref.Append("comparison"))
}

func (aan AwsAccountNameAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aan.ref.Append("value"))
}

type CompanyNameAttributes struct {
	ref terra.Reference
}

func (cn CompanyNameAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn CompanyNameAttributes) InternalWithRef(ref terra.Reference) CompanyNameAttributes {
	return CompanyNameAttributes{ref: ref}
}

func (cn CompanyNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn CompanyNameAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("comparison"))
}

func (cn CompanyNameAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("value"))
}

type ComplianceAssociatedStandardsIdAttributes struct {
	ref terra.Reference
}

func (casi ComplianceAssociatedStandardsIdAttributes) InternalRef() (terra.Reference, error) {
	return casi.ref, nil
}

func (casi ComplianceAssociatedStandardsIdAttributes) InternalWithRef(ref terra.Reference) ComplianceAssociatedStandardsIdAttributes {
	return ComplianceAssociatedStandardsIdAttributes{ref: ref}
}

func (casi ComplianceAssociatedStandardsIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return casi.ref.InternalTokens()
}

func (casi ComplianceAssociatedStandardsIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(casi.ref.Append("comparison"))
}

func (casi ComplianceAssociatedStandardsIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(casi.ref.Append("value"))
}

type ComplianceSecurityControlIdAttributes struct {
	ref terra.Reference
}

func (csci ComplianceSecurityControlIdAttributes) InternalRef() (terra.Reference, error) {
	return csci.ref, nil
}

func (csci ComplianceSecurityControlIdAttributes) InternalWithRef(ref terra.Reference) ComplianceSecurityControlIdAttributes {
	return ComplianceSecurityControlIdAttributes{ref: ref}
}

func (csci ComplianceSecurityControlIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csci.ref.InternalTokens()
}

func (csci ComplianceSecurityControlIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(csci.ref.Append("comparison"))
}

func (csci ComplianceSecurityControlIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(csci.ref.Append("value"))
}

type ComplianceStatusAttributes struct {
	ref terra.Reference
}

func (cs ComplianceStatusAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ComplianceStatusAttributes) InternalWithRef(ref terra.Reference) ComplianceStatusAttributes {
	return ComplianceStatusAttributes{ref: ref}
}

func (cs ComplianceStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ComplianceStatusAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("comparison"))
}

func (cs ComplianceStatusAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("value"))
}

type ConfidenceAttributes struct {
	ref terra.Reference
}

func (c ConfidenceAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfidenceAttributes) InternalWithRef(ref terra.Reference) ConfidenceAttributes {
	return ConfidenceAttributes{ref: ref}
}

func (c ConfidenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfidenceAttributes) Eq() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("eq"))
}

func (c ConfidenceAttributes) Gt() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("gt"))
}

func (c ConfidenceAttributes) Gte() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("gte"))
}

func (c ConfidenceAttributes) Lt() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("lt"))
}

func (c ConfidenceAttributes) Lte() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("lte"))
}

type CreatedAtAttributes struct {
	ref terra.Reference
}

func (ca CreatedAtAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CreatedAtAttributes) InternalWithRef(ref terra.Reference) CreatedAtAttributes {
	return CreatedAtAttributes{ref: ref}
}

func (ca CreatedAtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CreatedAtAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("end"))
}

func (ca CreatedAtAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("start"))
}

func (ca CreatedAtAttributes) DateRange() terra.ListValue[CreatedAtDateRangeAttributes] {
	return terra.ReferenceAsList[CreatedAtDateRangeAttributes](ca.ref.Append("date_range"))
}

type CreatedAtDateRangeAttributes struct {
	ref terra.Reference
}

func (dr CreatedAtDateRangeAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr CreatedAtDateRangeAttributes) InternalWithRef(ref terra.Reference) CreatedAtDateRangeAttributes {
	return CreatedAtDateRangeAttributes{ref: ref}
}

func (dr CreatedAtDateRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr CreatedAtDateRangeAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("unit"))
}

func (dr CreatedAtDateRangeAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type CriticalityAttributes struct {
	ref terra.Reference
}

func (c CriticalityAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriticalityAttributes) InternalWithRef(ref terra.Reference) CriticalityAttributes {
	return CriticalityAttributes{ref: ref}
}

func (c CriticalityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriticalityAttributes) Eq() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("eq"))
}

func (c CriticalityAttributes) Gt() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("gt"))
}

func (c CriticalityAttributes) Gte() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("gte"))
}

func (c CriticalityAttributes) Lt() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("lt"))
}

func (c CriticalityAttributes) Lte() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("lte"))
}

type DescriptionAttributes struct {
	ref terra.Reference
}

func (d DescriptionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DescriptionAttributes) InternalWithRef(ref terra.Reference) DescriptionAttributes {
	return DescriptionAttributes{ref: ref}
}

func (d DescriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DescriptionAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("comparison"))
}

func (d DescriptionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type FirstObservedAtAttributes struct {
	ref terra.Reference
}

func (foa FirstObservedAtAttributes) InternalRef() (terra.Reference, error) {
	return foa.ref, nil
}

func (foa FirstObservedAtAttributes) InternalWithRef(ref terra.Reference) FirstObservedAtAttributes {
	return FirstObservedAtAttributes{ref: ref}
}

func (foa FirstObservedAtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return foa.ref.InternalTokens()
}

func (foa FirstObservedAtAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(foa.ref.Append("end"))
}

func (foa FirstObservedAtAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(foa.ref.Append("start"))
}

func (foa FirstObservedAtAttributes) DateRange() terra.ListValue[FirstObservedAtDateRangeAttributes] {
	return terra.ReferenceAsList[FirstObservedAtDateRangeAttributes](foa.ref.Append("date_range"))
}

type FirstObservedAtDateRangeAttributes struct {
	ref terra.Reference
}

func (dr FirstObservedAtDateRangeAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr FirstObservedAtDateRangeAttributes) InternalWithRef(ref terra.Reference) FirstObservedAtDateRangeAttributes {
	return FirstObservedAtDateRangeAttributes{ref: ref}
}

func (dr FirstObservedAtDateRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr FirstObservedAtDateRangeAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("unit"))
}

func (dr FirstObservedAtDateRangeAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type GeneratorIdAttributes struct {
	ref terra.Reference
}

func (gi GeneratorIdAttributes) InternalRef() (terra.Reference, error) {
	return gi.ref, nil
}

func (gi GeneratorIdAttributes) InternalWithRef(ref terra.Reference) GeneratorIdAttributes {
	return GeneratorIdAttributes{ref: ref}
}

func (gi GeneratorIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gi.ref.InternalTokens()
}

func (gi GeneratorIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(gi.ref.Append("comparison"))
}

func (gi GeneratorIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(gi.ref.Append("value"))
}

type IdAttributes struct {
	ref terra.Reference
}

func (i IdAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdAttributes) InternalWithRef(ref terra.Reference) IdAttributes {
	return IdAttributes{ref: ref}
}

func (i IdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("comparison"))
}

func (i IdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("value"))
}

type LastObservedAtAttributes struct {
	ref terra.Reference
}

func (loa LastObservedAtAttributes) InternalRef() (terra.Reference, error) {
	return loa.ref, nil
}

func (loa LastObservedAtAttributes) InternalWithRef(ref terra.Reference) LastObservedAtAttributes {
	return LastObservedAtAttributes{ref: ref}
}

func (loa LastObservedAtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return loa.ref.InternalTokens()
}

func (loa LastObservedAtAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(loa.ref.Append("end"))
}

func (loa LastObservedAtAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(loa.ref.Append("start"))
}

func (loa LastObservedAtAttributes) DateRange() terra.ListValue[LastObservedAtDateRangeAttributes] {
	return terra.ReferenceAsList[LastObservedAtDateRangeAttributes](loa.ref.Append("date_range"))
}

type LastObservedAtDateRangeAttributes struct {
	ref terra.Reference
}

func (dr LastObservedAtDateRangeAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr LastObservedAtDateRangeAttributes) InternalWithRef(ref terra.Reference) LastObservedAtDateRangeAttributes {
	return LastObservedAtDateRangeAttributes{ref: ref}
}

func (dr LastObservedAtDateRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr LastObservedAtDateRangeAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("unit"))
}

func (dr LastObservedAtDateRangeAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type NoteTextAttributes struct {
	ref terra.Reference
}

func (nt NoteTextAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt NoteTextAttributes) InternalWithRef(ref terra.Reference) NoteTextAttributes {
	return NoteTextAttributes{ref: ref}
}

func (nt NoteTextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt NoteTextAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("comparison"))
}

func (nt NoteTextAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("value"))
}

type NoteUpdatedAtAttributes struct {
	ref terra.Reference
}

func (nua NoteUpdatedAtAttributes) InternalRef() (terra.Reference, error) {
	return nua.ref, nil
}

func (nua NoteUpdatedAtAttributes) InternalWithRef(ref terra.Reference) NoteUpdatedAtAttributes {
	return NoteUpdatedAtAttributes{ref: ref}
}

func (nua NoteUpdatedAtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nua.ref.InternalTokens()
}

func (nua NoteUpdatedAtAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(nua.ref.Append("end"))
}

func (nua NoteUpdatedAtAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(nua.ref.Append("start"))
}

func (nua NoteUpdatedAtAttributes) DateRange() terra.ListValue[NoteUpdatedAtDateRangeAttributes] {
	return terra.ReferenceAsList[NoteUpdatedAtDateRangeAttributes](nua.ref.Append("date_range"))
}

type NoteUpdatedAtDateRangeAttributes struct {
	ref terra.Reference
}

func (dr NoteUpdatedAtDateRangeAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr NoteUpdatedAtDateRangeAttributes) InternalWithRef(ref terra.Reference) NoteUpdatedAtDateRangeAttributes {
	return NoteUpdatedAtDateRangeAttributes{ref: ref}
}

func (dr NoteUpdatedAtDateRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr NoteUpdatedAtDateRangeAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("unit"))
}

func (dr NoteUpdatedAtDateRangeAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type NoteUpdatedByAttributes struct {
	ref terra.Reference
}

func (nub NoteUpdatedByAttributes) InternalRef() (terra.Reference, error) {
	return nub.ref, nil
}

func (nub NoteUpdatedByAttributes) InternalWithRef(ref terra.Reference) NoteUpdatedByAttributes {
	return NoteUpdatedByAttributes{ref: ref}
}

func (nub NoteUpdatedByAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nub.ref.InternalTokens()
}

func (nub NoteUpdatedByAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(nub.ref.Append("comparison"))
}

func (nub NoteUpdatedByAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(nub.ref.Append("value"))
}

type ProductArnAttributes struct {
	ref terra.Reference
}

func (pa ProductArnAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa ProductArnAttributes) InternalWithRef(ref terra.Reference) ProductArnAttributes {
	return ProductArnAttributes{ref: ref}
}

func (pa ProductArnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa ProductArnAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("comparison"))
}

func (pa ProductArnAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("value"))
}

type ProductNameAttributes struct {
	ref terra.Reference
}

func (pn ProductNameAttributes) InternalRef() (terra.Reference, error) {
	return pn.ref, nil
}

func (pn ProductNameAttributes) InternalWithRef(ref terra.Reference) ProductNameAttributes {
	return ProductNameAttributes{ref: ref}
}

func (pn ProductNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pn.ref.InternalTokens()
}

func (pn ProductNameAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(pn.ref.Append("comparison"))
}

func (pn ProductNameAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pn.ref.Append("value"))
}

type RecordStateAttributes struct {
	ref terra.Reference
}

func (rs RecordStateAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecordStateAttributes) InternalWithRef(ref terra.Reference) RecordStateAttributes {
	return RecordStateAttributes{ref: ref}
}

func (rs RecordStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecordStateAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("comparison"))
}

func (rs RecordStateAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("value"))
}

type RelatedFindingsIdAttributes struct {
	ref terra.Reference
}

func (rfi RelatedFindingsIdAttributes) InternalRef() (terra.Reference, error) {
	return rfi.ref, nil
}

func (rfi RelatedFindingsIdAttributes) InternalWithRef(ref terra.Reference) RelatedFindingsIdAttributes {
	return RelatedFindingsIdAttributes{ref: ref}
}

func (rfi RelatedFindingsIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rfi.ref.InternalTokens()
}

func (rfi RelatedFindingsIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rfi.ref.Append("comparison"))
}

func (rfi RelatedFindingsIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rfi.ref.Append("value"))
}

type RelatedFindingsProductArnAttributes struct {
	ref terra.Reference
}

func (rfpa RelatedFindingsProductArnAttributes) InternalRef() (terra.Reference, error) {
	return rfpa.ref, nil
}

func (rfpa RelatedFindingsProductArnAttributes) InternalWithRef(ref terra.Reference) RelatedFindingsProductArnAttributes {
	return RelatedFindingsProductArnAttributes{ref: ref}
}

func (rfpa RelatedFindingsProductArnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rfpa.ref.InternalTokens()
}

func (rfpa RelatedFindingsProductArnAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rfpa.ref.Append("comparison"))
}

func (rfpa RelatedFindingsProductArnAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rfpa.ref.Append("value"))
}

type ResourceApplicationArnAttributes struct {
	ref terra.Reference
}

func (raa ResourceApplicationArnAttributes) InternalRef() (terra.Reference, error) {
	return raa.ref, nil
}

func (raa ResourceApplicationArnAttributes) InternalWithRef(ref terra.Reference) ResourceApplicationArnAttributes {
	return ResourceApplicationArnAttributes{ref: ref}
}

func (raa ResourceApplicationArnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return raa.ref.InternalTokens()
}

func (raa ResourceApplicationArnAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(raa.ref.Append("comparison"))
}

func (raa ResourceApplicationArnAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(raa.ref.Append("value"))
}

type ResourceApplicationNameAttributes struct {
	ref terra.Reference
}

func (ran ResourceApplicationNameAttributes) InternalRef() (terra.Reference, error) {
	return ran.ref, nil
}

func (ran ResourceApplicationNameAttributes) InternalWithRef(ref terra.Reference) ResourceApplicationNameAttributes {
	return ResourceApplicationNameAttributes{ref: ref}
}

func (ran ResourceApplicationNameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ran.ref.InternalTokens()
}

func (ran ResourceApplicationNameAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(ran.ref.Append("comparison"))
}

func (ran ResourceApplicationNameAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ran.ref.Append("value"))
}

type ResourceDetailsOtherAttributes struct {
	ref terra.Reference
}

func (rdo ResourceDetailsOtherAttributes) InternalRef() (terra.Reference, error) {
	return rdo.ref, nil
}

func (rdo ResourceDetailsOtherAttributes) InternalWithRef(ref terra.Reference) ResourceDetailsOtherAttributes {
	return ResourceDetailsOtherAttributes{ref: ref}
}

func (rdo ResourceDetailsOtherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdo.ref.InternalTokens()
}

func (rdo ResourceDetailsOtherAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rdo.ref.Append("comparison"))
}

func (rdo ResourceDetailsOtherAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rdo.ref.Append("key"))
}

func (rdo ResourceDetailsOtherAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rdo.ref.Append("value"))
}

type ResourceIdAttributes struct {
	ref terra.Reference
}

func (ri ResourceIdAttributes) InternalRef() (terra.Reference, error) {
	return ri.ref, nil
}

func (ri ResourceIdAttributes) InternalWithRef(ref terra.Reference) ResourceIdAttributes {
	return ResourceIdAttributes{ref: ref}
}

func (ri ResourceIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ri.ref.InternalTokens()
}

func (ri ResourceIdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("comparison"))
}

func (ri ResourceIdAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ri.ref.Append("value"))
}

type ResourcePartitionAttributes struct {
	ref terra.Reference
}

func (rp ResourcePartitionAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp ResourcePartitionAttributes) InternalWithRef(ref terra.Reference) ResourcePartitionAttributes {
	return ResourcePartitionAttributes{ref: ref}
}

func (rp ResourcePartitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp ResourcePartitionAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("comparison"))
}

func (rp ResourcePartitionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("value"))
}

type ResourceRegionAttributes struct {
	ref terra.Reference
}

func (rr ResourceRegionAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ResourceRegionAttributes) InternalWithRef(ref terra.Reference) ResourceRegionAttributes {
	return ResourceRegionAttributes{ref: ref}
}

func (rr ResourceRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ResourceRegionAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("comparison"))
}

func (rr ResourceRegionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type ResourceTagsAttributes struct {
	ref terra.Reference
}

func (rt ResourceTagsAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt ResourceTagsAttributes) InternalWithRef(ref terra.Reference) ResourceTagsAttributes {
	return ResourceTagsAttributes{ref: ref}
}

func (rt ResourceTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt ResourceTagsAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("comparison"))
}

func (rt ResourceTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("key"))
}

func (rt ResourceTagsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("value"))
}

type ResourceTypeAttributes struct {
	ref terra.Reference
}

func (rt ResourceTypeAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt ResourceTypeAttributes) InternalWithRef(ref terra.Reference) ResourceTypeAttributes {
	return ResourceTypeAttributes{ref: ref}
}

func (rt ResourceTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt ResourceTypeAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("comparison"))
}

func (rt ResourceTypeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("value"))
}

type SeverityLabelAttributes struct {
	ref terra.Reference
}

func (sl SeverityLabelAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl SeverityLabelAttributes) InternalWithRef(ref terra.Reference) SeverityLabelAttributes {
	return SeverityLabelAttributes{ref: ref}
}

func (sl SeverityLabelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl SeverityLabelAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("comparison"))
}

func (sl SeverityLabelAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("value"))
}

type SourceUrlAttributes struct {
	ref terra.Reference
}

func (su SourceUrlAttributes) InternalRef() (terra.Reference, error) {
	return su.ref, nil
}

func (su SourceUrlAttributes) InternalWithRef(ref terra.Reference) SourceUrlAttributes {
	return SourceUrlAttributes{ref: ref}
}

func (su SourceUrlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return su.ref.InternalTokens()
}

func (su SourceUrlAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(su.ref.Append("comparison"))
}

func (su SourceUrlAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(su.ref.Append("value"))
}

type TitleAttributes struct {
	ref terra.Reference
}

func (t TitleAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TitleAttributes) InternalWithRef(ref terra.Reference) TitleAttributes {
	return TitleAttributes{ref: ref}
}

func (t TitleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TitleAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("comparison"))
}

func (t TitleAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type TypeAttributes struct {
	ref terra.Reference
}

func (t TypeAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TypeAttributes) InternalWithRef(ref terra.Reference) TypeAttributes {
	return TypeAttributes{ref: ref}
}

func (t TypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TypeAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("comparison"))
}

func (t TypeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type UpdatedAtAttributes struct {
	ref terra.Reference
}

func (ua UpdatedAtAttributes) InternalRef() (terra.Reference, error) {
	return ua.ref, nil
}

func (ua UpdatedAtAttributes) InternalWithRef(ref terra.Reference) UpdatedAtAttributes {
	return UpdatedAtAttributes{ref: ref}
}

func (ua UpdatedAtAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ua.ref.InternalTokens()
}

func (ua UpdatedAtAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("end"))
}

func (ua UpdatedAtAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(ua.ref.Append("start"))
}

func (ua UpdatedAtAttributes) DateRange() terra.ListValue[UpdatedAtDateRangeAttributes] {
	return terra.ReferenceAsList[UpdatedAtDateRangeAttributes](ua.ref.Append("date_range"))
}

type UpdatedAtDateRangeAttributes struct {
	ref terra.Reference
}

func (dr UpdatedAtDateRangeAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr UpdatedAtDateRangeAttributes) InternalWithRef(ref terra.Reference) UpdatedAtDateRangeAttributes {
	return UpdatedAtDateRangeAttributes{ref: ref}
}

func (dr UpdatedAtDateRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr UpdatedAtDateRangeAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("unit"))
}

func (dr UpdatedAtDateRangeAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type UserDefinedFieldsAttributes struct {
	ref terra.Reference
}

func (udf UserDefinedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return udf.ref, nil
}

func (udf UserDefinedFieldsAttributes) InternalWithRef(ref terra.Reference) UserDefinedFieldsAttributes {
	return UserDefinedFieldsAttributes{ref: ref}
}

func (udf UserDefinedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return udf.ref.InternalTokens()
}

func (udf UserDefinedFieldsAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(udf.ref.Append("comparison"))
}

func (udf UserDefinedFieldsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(udf.ref.Append("key"))
}

func (udf UserDefinedFieldsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(udf.ref.Append("value"))
}

type VerificationStateAttributes struct {
	ref terra.Reference
}

func (vs VerificationStateAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs VerificationStateAttributes) InternalWithRef(ref terra.Reference) VerificationStateAttributes {
	return VerificationStateAttributes{ref: ref}
}

func (vs VerificationStateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs VerificationStateAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("comparison"))
}

func (vs VerificationStateAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("value"))
}

type WorkflowStatusAttributes struct {
	ref terra.Reference
}

func (ws WorkflowStatusAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WorkflowStatusAttributes) InternalWithRef(ref terra.Reference) WorkflowStatusAttributes {
	return WorkflowStatusAttributes{ref: ref}
}

func (ws WorkflowStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WorkflowStatusAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("comparison"))
}

func (ws WorkflowStatusAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("value"))
}

type ActionsState struct {
	Type                string                     `json:"type"`
	FindingFieldsUpdate []FindingFieldsUpdateState `json:"finding_fields_update"`
}

type FindingFieldsUpdateState struct {
	Confidence        float64                `json:"confidence"`
	Criticality       float64                `json:"criticality"`
	Types             []string               `json:"types"`
	UserDefinedFields map[string]string      `json:"user_defined_fields"`
	VerificationState string                 `json:"verification_state"`
	Note              []NoteState            `json:"note"`
	RelatedFindings   []RelatedFindingsState `json:"related_findings"`
	Severity          []SeverityState        `json:"severity"`
	Workflow          []WorkflowState        `json:"workflow"`
}

type NoteState struct {
	Text      string `json:"text"`
	UpdatedBy string `json:"updated_by"`
}

type RelatedFindingsState struct {
	Id         string `json:"id"`
	ProductArn string `json:"product_arn"`
}

type SeverityState struct {
	Label   string  `json:"label"`
	Product float64 `json:"product"`
}

type WorkflowState struct {
	Status string `json:"status"`
}

type CriteriaState struct {
	AwsAccountId                    []AwsAccountIdState                    `json:"aws_account_id"`
	AwsAccountName                  []AwsAccountNameState                  `json:"aws_account_name"`
	CompanyName                     []CompanyNameState                     `json:"company_name"`
	ComplianceAssociatedStandardsId []ComplianceAssociatedStandardsIdState `json:"compliance_associated_standards_id"`
	ComplianceSecurityControlId     []ComplianceSecurityControlIdState     `json:"compliance_security_control_id"`
	ComplianceStatus                []ComplianceStatusState                `json:"compliance_status"`
	Confidence                      []ConfidenceState                      `json:"confidence"`
	CreatedAt                       []CreatedAtState                       `json:"created_at"`
	Criticality                     []CriticalityState                     `json:"criticality"`
	Description                     []DescriptionState                     `json:"description"`
	FirstObservedAt                 []FirstObservedAtState                 `json:"first_observed_at"`
	GeneratorId                     []GeneratorIdState                     `json:"generator_id"`
	Id                              []IdState                              `json:"id"`
	LastObservedAt                  []LastObservedAtState                  `json:"last_observed_at"`
	NoteText                        []NoteTextState                        `json:"note_text"`
	NoteUpdatedAt                   []NoteUpdatedAtState                   `json:"note_updated_at"`
	NoteUpdatedBy                   []NoteUpdatedByState                   `json:"note_updated_by"`
	ProductArn                      []ProductArnState                      `json:"product_arn"`
	ProductName                     []ProductNameState                     `json:"product_name"`
	RecordState                     []RecordStateState                     `json:"record_state"`
	RelatedFindingsId               []RelatedFindingsIdState               `json:"related_findings_id"`
	RelatedFindingsProductArn       []RelatedFindingsProductArnState       `json:"related_findings_product_arn"`
	ResourceApplicationArn          []ResourceApplicationArnState          `json:"resource_application_arn"`
	ResourceApplicationName         []ResourceApplicationNameState         `json:"resource_application_name"`
	ResourceDetailsOther            []ResourceDetailsOtherState            `json:"resource_details_other"`
	ResourceId                      []ResourceIdState                      `json:"resource_id"`
	ResourcePartition               []ResourcePartitionState               `json:"resource_partition"`
	ResourceRegion                  []ResourceRegionState                  `json:"resource_region"`
	ResourceTags                    []ResourceTagsState                    `json:"resource_tags"`
	ResourceType                    []ResourceTypeState                    `json:"resource_type"`
	SeverityLabel                   []SeverityLabelState                   `json:"severity_label"`
	SourceUrl                       []SourceUrlState                       `json:"source_url"`
	Title                           []TitleState                           `json:"title"`
	Type                            []TypeState                            `json:"type"`
	UpdatedAt                       []UpdatedAtState                       `json:"updated_at"`
	UserDefinedFields               []UserDefinedFieldsState               `json:"user_defined_fields"`
	VerificationState               []VerificationStateState               `json:"verification_state"`
	WorkflowStatus                  []WorkflowStatusState                  `json:"workflow_status"`
}

type AwsAccountIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type AwsAccountNameState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type CompanyNameState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ComplianceAssociatedStandardsIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ComplianceSecurityControlIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ComplianceStatusState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ConfidenceState struct {
	Eq  float64 `json:"eq"`
	Gt  float64 `json:"gt"`
	Gte float64 `json:"gte"`
	Lt  float64 `json:"lt"`
	Lte float64 `json:"lte"`
}

type CreatedAtState struct {
	End       string                    `json:"end"`
	Start     string                    `json:"start"`
	DateRange []CreatedAtDateRangeState `json:"date_range"`
}

type CreatedAtDateRangeState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type CriticalityState struct {
	Eq  float64 `json:"eq"`
	Gt  float64 `json:"gt"`
	Gte float64 `json:"gte"`
	Lt  float64 `json:"lt"`
	Lte float64 `json:"lte"`
}

type DescriptionState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type FirstObservedAtState struct {
	End       string                          `json:"end"`
	Start     string                          `json:"start"`
	DateRange []FirstObservedAtDateRangeState `json:"date_range"`
}

type FirstObservedAtDateRangeState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type GeneratorIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type IdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type LastObservedAtState struct {
	End       string                         `json:"end"`
	Start     string                         `json:"start"`
	DateRange []LastObservedAtDateRangeState `json:"date_range"`
}

type LastObservedAtDateRangeState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type NoteTextState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type NoteUpdatedAtState struct {
	End       string                        `json:"end"`
	Start     string                        `json:"start"`
	DateRange []NoteUpdatedAtDateRangeState `json:"date_range"`
}

type NoteUpdatedAtDateRangeState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type NoteUpdatedByState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ProductArnState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ProductNameState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type RecordStateState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type RelatedFindingsIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type RelatedFindingsProductArnState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourceApplicationArnState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourceApplicationNameState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourceDetailsOtherState struct {
	Comparison string `json:"comparison"`
	Key        string `json:"key"`
	Value      string `json:"value"`
}

type ResourceIdState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourcePartitionState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourceRegionState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type ResourceTagsState struct {
	Comparison string `json:"comparison"`
	Key        string `json:"key"`
	Value      string `json:"value"`
}

type ResourceTypeState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type SeverityLabelState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type SourceUrlState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type TitleState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type TypeState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type UpdatedAtState struct {
	End       string                    `json:"end"`
	Start     string                    `json:"start"`
	DateRange []UpdatedAtDateRangeState `json:"date_range"`
}

type UpdatedAtDateRangeState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type UserDefinedFieldsState struct {
	Comparison string `json:"comparison"`
	Key        string `json:"key"`
	Value      string `json:"value"`
}

type VerificationStateState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}

type WorkflowStatusState struct {
	Comparison string `json:"comparison"`
	Value      string `json:"value"`
}
