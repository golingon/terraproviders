// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewAppsyncDomainName creates a new instance of [AppsyncDomainName].
func NewAppsyncDomainName(name string, args AppsyncDomainNameArgs) *AppsyncDomainName {
	return &AppsyncDomainName{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncDomainName)(nil)

// AppsyncDomainName represents the Terraform resource aws_appsync_domain_name.
type AppsyncDomainName struct {
	Name      string
	Args      AppsyncDomainNameArgs
	state     *appsyncDomainNameState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AppsyncDomainName].
func (adn *AppsyncDomainName) Type() string {
	return "aws_appsync_domain_name"
}

// LocalName returns the local name for [AppsyncDomainName].
func (adn *AppsyncDomainName) LocalName() string {
	return adn.Name
}

// Configuration returns the configuration (args) for [AppsyncDomainName].
func (adn *AppsyncDomainName) Configuration() interface{} {
	return adn.Args
}

// DependOn is used for other resources to depend on [AppsyncDomainName].
func (adn *AppsyncDomainName) DependOn() terra.Reference {
	return terra.ReferenceResource(adn)
}

// Dependencies returns the list of resources [AppsyncDomainName] depends_on.
func (adn *AppsyncDomainName) Dependencies() terra.Dependencies {
	return adn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AppsyncDomainName].
func (adn *AppsyncDomainName) LifecycleManagement() *terra.Lifecycle {
	return adn.Lifecycle
}

// Attributes returns the attributes for [AppsyncDomainName].
func (adn *AppsyncDomainName) Attributes() appsyncDomainNameAttributes {
	return appsyncDomainNameAttributes{ref: terra.ReferenceResource(adn)}
}

// ImportState imports the given attribute values into [AppsyncDomainName]'s state.
func (adn *AppsyncDomainName) ImportState(av io.Reader) error {
	adn.state = &appsyncDomainNameState{}
	if err := json.NewDecoder(av).Decode(adn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adn.Type(), adn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AppsyncDomainName] has state.
func (adn *AppsyncDomainName) State() (*appsyncDomainNameState, bool) {
	return adn.state, adn.state != nil
}

// StateMust returns the state for [AppsyncDomainName]. Panics if the state is nil.
func (adn *AppsyncDomainName) StateMust() *appsyncDomainNameState {
	if adn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adn.Type(), adn.LocalName()))
	}
	return adn.state
}

// AppsyncDomainNameArgs contains the configurations for aws_appsync_domain_name.
type AppsyncDomainNameArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type appsyncDomainNameAttributes struct {
	ref terra.Reference
}

// AppsyncDomainName returns a reference to field appsync_domain_name of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) AppsyncDomainName() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("appsync_domain_name"))
}

// CertificateArn returns a reference to field certificate_arn of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("certificate_arn"))
}

// Description returns a reference to field description of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("description"))
}

// DomainName returns a reference to field domain_name of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("domain_name"))
}

// HostedZoneId returns a reference to field hosted_zone_id of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("hosted_zone_id"))
}

// Id returns a reference to field id of aws_appsync_domain_name.
func (adn appsyncDomainNameAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adn.ref.Append("id"))
}

type appsyncDomainNameState struct {
	AppsyncDomainName string `json:"appsync_domain_name"`
	CertificateArn    string `json:"certificate_arn"`
	Description       string `json:"description"`
	DomainName        string `json:"domain_name"`
	HostedZoneId      string `json:"hosted_zone_id"`
	Id                string `json:"id"`
}
