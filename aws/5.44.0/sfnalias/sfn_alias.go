// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package sfnalias

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RoutingConfiguration struct {
	// StateMachineVersionArn: string, required
	StateMachineVersionArn terra.StringValue `hcl:"state_machine_version_arn,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RoutingConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RoutingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RoutingConfigurationAttributes) InternalWithRef(ref terra.Reference) RoutingConfigurationAttributes {
	return RoutingConfigurationAttributes{ref: ref}
}

func (rc RoutingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RoutingConfigurationAttributes) StateMachineVersionArn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("state_machine_version_arn"))
}

func (rc RoutingConfigurationAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("weight"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RoutingConfigurationState struct {
	StateMachineVersionArn string  `json:"state_machine_version_arn"`
	Weight                 float64 `json:"weight"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
