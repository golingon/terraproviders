// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package sagemakercoderepository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type GitConfig struct {
	// Branch: string, optional
	Branch terra.StringValue `hcl:"branch,attr"`
	// RepositoryUrl: string, required
	RepositoryUrl terra.StringValue `hcl:"repository_url,attr" validate:"required"`
	// SecretArn: string, optional
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
}

type GitConfigAttributes struct {
	ref terra.Reference
}

func (gc GitConfigAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GitConfigAttributes) InternalWithRef(ref terra.Reference) GitConfigAttributes {
	return GitConfigAttributes{ref: ref}
}

func (gc GitConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GitConfigAttributes) Branch() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("branch"))
}

func (gc GitConfigAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("repository_url"))
}

func (gc GitConfigAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("secret_arn"))
}

type GitConfigState struct {
	Branch        string `json:"branch"`
	RepositoryUrl string `json:"repository_url"`
	SecretArn     string `json:"secret_arn"`
}
