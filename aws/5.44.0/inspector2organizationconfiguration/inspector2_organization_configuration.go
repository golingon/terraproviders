// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package inspector2organizationconfiguration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoEnable struct {
	// Ec2: bool, required
	Ec2 terra.BoolValue `hcl:"ec2,attr" validate:"required"`
	// Ecr: bool, required
	Ecr terra.BoolValue `hcl:"ecr,attr" validate:"required"`
	// Lambda: bool, optional
	Lambda terra.BoolValue `hcl:"lambda,attr"`
	// LambdaCode: bool, optional
	LambdaCode terra.BoolValue `hcl:"lambda_code,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AutoEnableAttributes struct {
	ref terra.Reference
}

func (ae AutoEnableAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae AutoEnableAttributes) InternalWithRef(ref terra.Reference) AutoEnableAttributes {
	return AutoEnableAttributes{ref: ref}
}

func (ae AutoEnableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae AutoEnableAttributes) Ec2() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("ec2"))
}

func (ae AutoEnableAttributes) Ecr() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("ecr"))
}

func (ae AutoEnableAttributes) Lambda() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("lambda"))
}

func (ae AutoEnableAttributes) LambdaCode() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("lambda_code"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AutoEnableState struct {
	Ec2        bool `json:"ec2"`
	Ecr        bool `json:"ecr"`
	Lambda     bool `json:"lambda"`
	LambdaCode bool `json:"lambda_code"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
