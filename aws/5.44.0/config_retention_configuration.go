// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewConfigRetentionConfiguration creates a new instance of [ConfigRetentionConfiguration].
func NewConfigRetentionConfiguration(name string, args ConfigRetentionConfigurationArgs) *ConfigRetentionConfiguration {
	return &ConfigRetentionConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigRetentionConfiguration)(nil)

// ConfigRetentionConfiguration represents the Terraform resource aws_config_retention_configuration.
type ConfigRetentionConfiguration struct {
	Name      string
	Args      ConfigRetentionConfigurationArgs
	state     *configRetentionConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) Type() string {
	return "aws_config_retention_configuration"
}

// LocalName returns the local name for [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) LocalName() string {
	return crc.Name
}

// Configuration returns the configuration (args) for [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) Configuration() interface{} {
	return crc.Args
}

// DependOn is used for other resources to depend on [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(crc)
}

// Dependencies returns the list of resources [ConfigRetentionConfiguration] depends_on.
func (crc *ConfigRetentionConfiguration) Dependencies() terra.Dependencies {
	return crc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) LifecycleManagement() *terra.Lifecycle {
	return crc.Lifecycle
}

// Attributes returns the attributes for [ConfigRetentionConfiguration].
func (crc *ConfigRetentionConfiguration) Attributes() configRetentionConfigurationAttributes {
	return configRetentionConfigurationAttributes{ref: terra.ReferenceResource(crc)}
}

// ImportState imports the given attribute values into [ConfigRetentionConfiguration]'s state.
func (crc *ConfigRetentionConfiguration) ImportState(av io.Reader) error {
	crc.state = &configRetentionConfigurationState{}
	if err := json.NewDecoder(av).Decode(crc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crc.Type(), crc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ConfigRetentionConfiguration] has state.
func (crc *ConfigRetentionConfiguration) State() (*configRetentionConfigurationState, bool) {
	return crc.state, crc.state != nil
}

// StateMust returns the state for [ConfigRetentionConfiguration]. Panics if the state is nil.
func (crc *ConfigRetentionConfiguration) StateMust() *configRetentionConfigurationState {
	if crc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crc.Type(), crc.LocalName()))
	}
	return crc.state
}

// ConfigRetentionConfigurationArgs contains the configurations for aws_config_retention_configuration.
type ConfigRetentionConfigurationArgs struct {
	// RetentionPeriodInDays: number, required
	RetentionPeriodInDays terra.NumberValue `hcl:"retention_period_in_days,attr" validate:"required"`
}
type configRetentionConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_config_retention_configuration.
func (crc configRetentionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_retention_configuration.
func (crc configRetentionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("name"))
}

// RetentionPeriodInDays returns a reference to field retention_period_in_days of aws_config_retention_configuration.
func (crc configRetentionConfigurationAttributes) RetentionPeriodInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(crc.ref.Append("retention_period_in_days"))
}

type configRetentionConfigurationState struct {
	Id                    string  `json:"id"`
	Name                  string  `json:"name"`
	RetentionPeriodInDays float64 `json:"retention_period_in_days"`
}
