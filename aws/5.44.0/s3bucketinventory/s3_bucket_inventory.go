// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package s3bucketinventory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// Bucket: required
	Bucket *Bucket `hcl:"bucket,block" validate:"required"`
}

type Bucket struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Encryption: optional
	Encryption *Encryption `hcl:"encryption,block"`
}

type Encryption struct {
	// SseKms: optional
	SseKms *SseKms `hcl:"sse_kms,block"`
	// SseS3: optional
	SseS3 *SseS3 `hcl:"sse_s3,block"`
}

type SseKms struct {
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type SseS3 struct{}

type Filter struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Schedule struct {
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) Bucket() terra.ListValue[BucketAttributes] {
	return terra.ReferenceAsList[BucketAttributes](d.ref.Append("bucket"))
}

type BucketAttributes struct {
	ref terra.Reference
}

func (b BucketAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BucketAttributes) InternalWithRef(ref terra.Reference) BucketAttributes {
	return BucketAttributes{ref: ref}
}

func (b BucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BucketAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("account_id"))
}

func (b BucketAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("bucket_arn"))
}

func (b BucketAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("format"))
}

func (b BucketAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("prefix"))
}

func (b BucketAttributes) Encryption() terra.ListValue[EncryptionAttributes] {
	return terra.ReferenceAsList[EncryptionAttributes](b.ref.Append("encryption"))
}

type EncryptionAttributes struct {
	ref terra.Reference
}

func (e EncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EncryptionAttributes) InternalWithRef(ref terra.Reference) EncryptionAttributes {
	return EncryptionAttributes{ref: ref}
}

func (e EncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EncryptionAttributes) SseKms() terra.ListValue[SseKmsAttributes] {
	return terra.ReferenceAsList[SseKmsAttributes](e.ref.Append("sse_kms"))
}

func (e EncryptionAttributes) SseS3() terra.ListValue[SseS3Attributes] {
	return terra.ReferenceAsList[SseS3Attributes](e.ref.Append("sse_s3"))
}

type SseKmsAttributes struct {
	ref terra.Reference
}

func (sk SseKmsAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk SseKmsAttributes) InternalWithRef(ref terra.Reference) SseKmsAttributes {
	return SseKmsAttributes{ref: ref}
}

func (sk SseKmsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk SseKmsAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("key_id"))
}

type SseS3Attributes struct {
	ref terra.Reference
}

func (ss SseS3Attributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SseS3Attributes) InternalWithRef(ref terra.Reference) SseS3Attributes {
	return SseS3Attributes{ref: ref}
}

func (ss SseS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency"))
}

type DestinationState struct {
	Bucket []BucketState `json:"bucket"`
}

type BucketState struct {
	AccountId  string            `json:"account_id"`
	BucketArn  string            `json:"bucket_arn"`
	Format     string            `json:"format"`
	Prefix     string            `json:"prefix"`
	Encryption []EncryptionState `json:"encryption"`
}

type EncryptionState struct {
	SseKms []SseKmsState `json:"sse_kms"`
	SseS3  []SseS3State  `json:"sse_s3"`
}

type SseKmsState struct {
	KeyId string `json:"key_id"`
}

type SseS3State struct{}

type FilterState struct {
	Prefix string `json:"prefix"`
}

type ScheduleState struct {
	Frequency string `json:"frequency"`
}
