// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	securityhubconfigurationpolicyassociation "github.com/golingon/terraproviders/aws/5.44.0/securityhubconfigurationpolicyassociation"
	"io"
)

// NewSecurityhubConfigurationPolicyAssociation creates a new instance of [SecurityhubConfigurationPolicyAssociation].
func NewSecurityhubConfigurationPolicyAssociation(name string, args SecurityhubConfigurationPolicyAssociationArgs) *SecurityhubConfigurationPolicyAssociation {
	return &SecurityhubConfigurationPolicyAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityhubConfigurationPolicyAssociation)(nil)

// SecurityhubConfigurationPolicyAssociation represents the Terraform resource aws_securityhub_configuration_policy_association.
type SecurityhubConfigurationPolicyAssociation struct {
	Name      string
	Args      SecurityhubConfigurationPolicyAssociationArgs
	state     *securityhubConfigurationPolicyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) Type() string {
	return "aws_securityhub_configuration_policy_association"
}

// LocalName returns the local name for [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) LocalName() string {
	return scpa.Name
}

// Configuration returns the configuration (args) for [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) Configuration() interface{} {
	return scpa.Args
}

// DependOn is used for other resources to depend on [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(scpa)
}

// Dependencies returns the list of resources [SecurityhubConfigurationPolicyAssociation] depends_on.
func (scpa *SecurityhubConfigurationPolicyAssociation) Dependencies() terra.Dependencies {
	return scpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) LifecycleManagement() *terra.Lifecycle {
	return scpa.Lifecycle
}

// Attributes returns the attributes for [SecurityhubConfigurationPolicyAssociation].
func (scpa *SecurityhubConfigurationPolicyAssociation) Attributes() securityhubConfigurationPolicyAssociationAttributes {
	return securityhubConfigurationPolicyAssociationAttributes{ref: terra.ReferenceResource(scpa)}
}

// ImportState imports the given attribute values into [SecurityhubConfigurationPolicyAssociation]'s state.
func (scpa *SecurityhubConfigurationPolicyAssociation) ImportState(av io.Reader) error {
	scpa.state = &securityhubConfigurationPolicyAssociationState{}
	if err := json.NewDecoder(av).Decode(scpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scpa.Type(), scpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecurityhubConfigurationPolicyAssociation] has state.
func (scpa *SecurityhubConfigurationPolicyAssociation) State() (*securityhubConfigurationPolicyAssociationState, bool) {
	return scpa.state, scpa.state != nil
}

// StateMust returns the state for [SecurityhubConfigurationPolicyAssociation]. Panics if the state is nil.
func (scpa *SecurityhubConfigurationPolicyAssociation) StateMust() *securityhubConfigurationPolicyAssociationState {
	if scpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scpa.Type(), scpa.LocalName()))
	}
	return scpa.state
}

// SecurityhubConfigurationPolicyAssociationArgs contains the configurations for aws_securityhub_configuration_policy_association.
type SecurityhubConfigurationPolicyAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyId: string, required
	PolicyId terra.StringValue `hcl:"policy_id,attr" validate:"required"`
	// TargetId: string, required
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *securityhubconfigurationpolicyassociation.Timeouts `hcl:"timeouts,block"`
}
type securityhubConfigurationPolicyAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_securityhub_configuration_policy_association.
func (scpa securityhubConfigurationPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(scpa.ref.Append("id"))
}

// PolicyId returns a reference to field policy_id of aws_securityhub_configuration_policy_association.
func (scpa securityhubConfigurationPolicyAssociationAttributes) PolicyId() terra.StringValue {
	return terra.ReferenceAsString(scpa.ref.Append("policy_id"))
}

// TargetId returns a reference to field target_id of aws_securityhub_configuration_policy_association.
func (scpa securityhubConfigurationPolicyAssociationAttributes) TargetId() terra.StringValue {
	return terra.ReferenceAsString(scpa.ref.Append("target_id"))
}

func (scpa securityhubConfigurationPolicyAssociationAttributes) Timeouts() securityhubconfigurationpolicyassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[securityhubconfigurationpolicyassociation.TimeoutsAttributes](scpa.ref.Append("timeouts"))
}

type securityhubConfigurationPolicyAssociationState struct {
	Id       string                                                   `json:"id"`
	PolicyId string                                                   `json:"policy_id"`
	TargetId string                                                   `json:"target_id"`
	Timeouts *securityhubconfigurationpolicyassociation.TimeoutsState `json:"timeouts"`
}
