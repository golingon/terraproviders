// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	accountregion "github.com/golingon/terraproviders/aws/5.44.0/accountregion"
	"io"
)

// NewAccountRegion creates a new instance of [AccountRegion].
func NewAccountRegion(name string, args AccountRegionArgs) *AccountRegion {
	return &AccountRegion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccountRegion)(nil)

// AccountRegion represents the Terraform resource aws_account_region.
type AccountRegion struct {
	Name      string
	Args      AccountRegionArgs
	state     *accountRegionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AccountRegion].
func (ar *AccountRegion) Type() string {
	return "aws_account_region"
}

// LocalName returns the local name for [AccountRegion].
func (ar *AccountRegion) LocalName() string {
	return ar.Name
}

// Configuration returns the configuration (args) for [AccountRegion].
func (ar *AccountRegion) Configuration() interface{} {
	return ar.Args
}

// DependOn is used for other resources to depend on [AccountRegion].
func (ar *AccountRegion) DependOn() terra.Reference {
	return terra.ReferenceResource(ar)
}

// Dependencies returns the list of resources [AccountRegion] depends_on.
func (ar *AccountRegion) Dependencies() terra.Dependencies {
	return ar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AccountRegion].
func (ar *AccountRegion) LifecycleManagement() *terra.Lifecycle {
	return ar.Lifecycle
}

// Attributes returns the attributes for [AccountRegion].
func (ar *AccountRegion) Attributes() accountRegionAttributes {
	return accountRegionAttributes{ref: terra.ReferenceResource(ar)}
}

// ImportState imports the given attribute values into [AccountRegion]'s state.
func (ar *AccountRegion) ImportState(av io.Reader) error {
	ar.state = &accountRegionState{}
	if err := json.NewDecoder(av).Decode(ar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ar.Type(), ar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AccountRegion] has state.
func (ar *AccountRegion) State() (*accountRegionState, bool) {
	return ar.state, ar.state != nil
}

// StateMust returns the state for [AccountRegion]. Panics if the state is nil.
func (ar *AccountRegion) StateMust() *accountRegionState {
	if ar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ar.Type(), ar.LocalName()))
	}
	return ar.state
}

// AccountRegionArgs contains the configurations for aws_account_region.
type AccountRegionArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accountregion.Timeouts `hcl:"timeouts,block"`
}
type accountRegionAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_account_region.
func (ar accountRegionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("account_id"))
}

// Enabled returns a reference to field enabled of aws_account_region.
func (ar accountRegionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_account_region.
func (ar accountRegionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("id"))
}

// OptStatus returns a reference to field opt_status of aws_account_region.
func (ar accountRegionAttributes) OptStatus() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("opt_status"))
}

// RegionName returns a reference to field region_name of aws_account_region.
func (ar accountRegionAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("region_name"))
}

func (ar accountRegionAttributes) Timeouts() accountregion.TimeoutsAttributes {
	return terra.ReferenceAsSingle[accountregion.TimeoutsAttributes](ar.ref.Append("timeouts"))
}

type accountRegionState struct {
	AccountId  string                       `json:"account_id"`
	Enabled    bool                         `json:"enabled"`
	Id         string                       `json:"id"`
	OptStatus  string                       `json:"opt_status"`
	RegionName string                       `json:"region_name"`
	Timeouts   *accountregion.TimeoutsState `json:"timeouts"`
}
