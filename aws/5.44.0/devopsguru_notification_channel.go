// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	devopsgurunotificationchannel "github.com/golingon/terraproviders/aws/5.44.0/devopsgurunotificationchannel"
	"io"
)

// NewDevopsguruNotificationChannel creates a new instance of [DevopsguruNotificationChannel].
func NewDevopsguruNotificationChannel(name string, args DevopsguruNotificationChannelArgs) *DevopsguruNotificationChannel {
	return &DevopsguruNotificationChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevopsguruNotificationChannel)(nil)

// DevopsguruNotificationChannel represents the Terraform resource aws_devopsguru_notification_channel.
type DevopsguruNotificationChannel struct {
	Name      string
	Args      DevopsguruNotificationChannelArgs
	state     *devopsguruNotificationChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) Type() string {
	return "aws_devopsguru_notification_channel"
}

// LocalName returns the local name for [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) LocalName() string {
	return dnc.Name
}

// Configuration returns the configuration (args) for [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) Configuration() interface{} {
	return dnc.Args
}

// DependOn is used for other resources to depend on [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(dnc)
}

// Dependencies returns the list of resources [DevopsguruNotificationChannel] depends_on.
func (dnc *DevopsguruNotificationChannel) Dependencies() terra.Dependencies {
	return dnc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) LifecycleManagement() *terra.Lifecycle {
	return dnc.Lifecycle
}

// Attributes returns the attributes for [DevopsguruNotificationChannel].
func (dnc *DevopsguruNotificationChannel) Attributes() devopsguruNotificationChannelAttributes {
	return devopsguruNotificationChannelAttributes{ref: terra.ReferenceResource(dnc)}
}

// ImportState imports the given attribute values into [DevopsguruNotificationChannel]'s state.
func (dnc *DevopsguruNotificationChannel) ImportState(av io.Reader) error {
	dnc.state = &devopsguruNotificationChannelState{}
	if err := json.NewDecoder(av).Decode(dnc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dnc.Type(), dnc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevopsguruNotificationChannel] has state.
func (dnc *DevopsguruNotificationChannel) State() (*devopsguruNotificationChannelState, bool) {
	return dnc.state, dnc.state != nil
}

// StateMust returns the state for [DevopsguruNotificationChannel]. Panics if the state is nil.
func (dnc *DevopsguruNotificationChannel) StateMust() *devopsguruNotificationChannelState {
	if dnc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dnc.Type(), dnc.LocalName()))
	}
	return dnc.state
}

// DevopsguruNotificationChannelArgs contains the configurations for aws_devopsguru_notification_channel.
type DevopsguruNotificationChannelArgs struct {
	// Filters: min=0
	Filters []devopsgurunotificationchannel.Filters `hcl:"filters,block" validate:"min=0"`
	// Sns: min=0
	Sns []devopsgurunotificationchannel.Sns `hcl:"sns,block" validate:"min=0"`
}
type devopsguruNotificationChannelAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_devopsguru_notification_channel.
func (dnc devopsguruNotificationChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dnc.ref.Append("id"))
}

func (dnc devopsguruNotificationChannelAttributes) Filters() terra.ListValue[devopsgurunotificationchannel.FiltersAttributes] {
	return terra.ReferenceAsList[devopsgurunotificationchannel.FiltersAttributes](dnc.ref.Append("filters"))
}

func (dnc devopsguruNotificationChannelAttributes) Sns() terra.ListValue[devopsgurunotificationchannel.SnsAttributes] {
	return terra.ReferenceAsList[devopsgurunotificationchannel.SnsAttributes](dnc.ref.Append("sns"))
}

type devopsguruNotificationChannelState struct {
	Id      string                                       `json:"id"`
	Filters []devopsgurunotificationchannel.FiltersState `json:"filters"`
	Sns     []devopsgurunotificationchannel.SnsState     `json:"sns"`
}
