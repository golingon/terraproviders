// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewSagemakerImage creates a new instance of [SagemakerImage].
func NewSagemakerImage(name string, args SagemakerImageArgs) *SagemakerImage {
	return &SagemakerImage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerImage)(nil)

// SagemakerImage represents the Terraform resource aws_sagemaker_image.
type SagemakerImage struct {
	Name      string
	Args      SagemakerImageArgs
	state     *sagemakerImageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SagemakerImage].
func (si *SagemakerImage) Type() string {
	return "aws_sagemaker_image"
}

// LocalName returns the local name for [SagemakerImage].
func (si *SagemakerImage) LocalName() string {
	return si.Name
}

// Configuration returns the configuration (args) for [SagemakerImage].
func (si *SagemakerImage) Configuration() interface{} {
	return si.Args
}

// DependOn is used for other resources to depend on [SagemakerImage].
func (si *SagemakerImage) DependOn() terra.Reference {
	return terra.ReferenceResource(si)
}

// Dependencies returns the list of resources [SagemakerImage] depends_on.
func (si *SagemakerImage) Dependencies() terra.Dependencies {
	return si.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SagemakerImage].
func (si *SagemakerImage) LifecycleManagement() *terra.Lifecycle {
	return si.Lifecycle
}

// Attributes returns the attributes for [SagemakerImage].
func (si *SagemakerImage) Attributes() sagemakerImageAttributes {
	return sagemakerImageAttributes{ref: terra.ReferenceResource(si)}
}

// ImportState imports the given attribute values into [SagemakerImage]'s state.
func (si *SagemakerImage) ImportState(av io.Reader) error {
	si.state = &sagemakerImageState{}
	if err := json.NewDecoder(av).Decode(si.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", si.Type(), si.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SagemakerImage] has state.
func (si *SagemakerImage) State() (*sagemakerImageState, bool) {
	return si.state, si.state != nil
}

// StateMust returns the state for [SagemakerImage]. Panics if the state is nil.
func (si *SagemakerImage) StateMust() *sagemakerImageState {
	if si.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", si.Type(), si.LocalName()))
	}
	return si.state
}

// SagemakerImageArgs contains the configurations for aws_sagemaker_image.
type SagemakerImageArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type sagemakerImageAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_image.
func (si sagemakerImageAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("arn"))
}

// Description returns a reference to field description of aws_sagemaker_image.
func (si sagemakerImageAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of aws_sagemaker_image.
func (si sagemakerImageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_sagemaker_image.
func (si sagemakerImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("id"))
}

// ImageName returns a reference to field image_name of aws_sagemaker_image.
func (si sagemakerImageAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("image_name"))
}

// RoleArn returns a reference to field role_arn of aws_sagemaker_image.
func (si sagemakerImageAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_sagemaker_image.
func (si sagemakerImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_image.
func (si sagemakerImageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("tags_all"))
}

type sagemakerImageState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	DisplayName string            `json:"display_name"`
	Id          string            `json:"id"`
	ImageName   string            `json:"image_name"`
	RoleArn     string            `json:"role_arn"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
