// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataEcrRepositories creates a new instance of [DataEcrRepositories].
func NewDataEcrRepositories(name string, args DataEcrRepositoriesArgs) *DataEcrRepositories {
	return &DataEcrRepositories{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEcrRepositories)(nil)

// DataEcrRepositories represents the Terraform data resource aws_ecr_repositories.
type DataEcrRepositories struct {
	Name string
	Args DataEcrRepositoriesArgs
}

// DataSource returns the Terraform object type for [DataEcrRepositories].
func (er *DataEcrRepositories) DataSource() string {
	return "aws_ecr_repositories"
}

// LocalName returns the local name for [DataEcrRepositories].
func (er *DataEcrRepositories) LocalName() string {
	return er.Name
}

// Configuration returns the configuration (args) for [DataEcrRepositories].
func (er *DataEcrRepositories) Configuration() interface{} {
	return er.Args
}

// Attributes returns the attributes for [DataEcrRepositories].
func (er *DataEcrRepositories) Attributes() dataEcrRepositoriesAttributes {
	return dataEcrRepositoriesAttributes{ref: terra.ReferenceDataResource(er)}
}

// DataEcrRepositoriesArgs contains the configurations for aws_ecr_repositories.
type DataEcrRepositoriesArgs struct{}
type dataEcrRepositoriesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecr_repositories.
func (er dataEcrRepositoriesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("id"))
}

// Names returns a reference to field names of aws_ecr_repositories.
func (er dataEcrRepositoriesAttributes) Names() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](er.ref.Append("names"))
}
