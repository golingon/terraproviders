// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewConnectContactFlow creates a new instance of [ConnectContactFlow].
func NewConnectContactFlow(name string, args ConnectContactFlowArgs) *ConnectContactFlow {
	return &ConnectContactFlow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectContactFlow)(nil)

// ConnectContactFlow represents the Terraform resource aws_connect_contact_flow.
type ConnectContactFlow struct {
	Name      string
	Args      ConnectContactFlowArgs
	state     *connectContactFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ConnectContactFlow].
func (ccf *ConnectContactFlow) Type() string {
	return "aws_connect_contact_flow"
}

// LocalName returns the local name for [ConnectContactFlow].
func (ccf *ConnectContactFlow) LocalName() string {
	return ccf.Name
}

// Configuration returns the configuration (args) for [ConnectContactFlow].
func (ccf *ConnectContactFlow) Configuration() interface{} {
	return ccf.Args
}

// DependOn is used for other resources to depend on [ConnectContactFlow].
func (ccf *ConnectContactFlow) DependOn() terra.Reference {
	return terra.ReferenceResource(ccf)
}

// Dependencies returns the list of resources [ConnectContactFlow] depends_on.
func (ccf *ConnectContactFlow) Dependencies() terra.Dependencies {
	return ccf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ConnectContactFlow].
func (ccf *ConnectContactFlow) LifecycleManagement() *terra.Lifecycle {
	return ccf.Lifecycle
}

// Attributes returns the attributes for [ConnectContactFlow].
func (ccf *ConnectContactFlow) Attributes() connectContactFlowAttributes {
	return connectContactFlowAttributes{ref: terra.ReferenceResource(ccf)}
}

// ImportState imports the given attribute values into [ConnectContactFlow]'s state.
func (ccf *ConnectContactFlow) ImportState(av io.Reader) error {
	ccf.state = &connectContactFlowState{}
	if err := json.NewDecoder(av).Decode(ccf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccf.Type(), ccf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ConnectContactFlow] has state.
func (ccf *ConnectContactFlow) State() (*connectContactFlowState, bool) {
	return ccf.state, ccf.state != nil
}

// StateMust returns the state for [ConnectContactFlow]. Panics if the state is nil.
func (ccf *ConnectContactFlow) StateMust() *connectContactFlowState {
	if ccf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccf.Type(), ccf.LocalName()))
	}
	return ccf.state
}

// ConnectContactFlowArgs contains the configurations for aws_connect_contact_flow.
type ConnectContactFlowArgs struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// ContentHash: string, optional
	ContentHash terra.StringValue `hcl:"content_hash,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}
type connectContactFlowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("arn"))
}

// ContactFlowId returns a reference to field contact_flow_id of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) ContactFlowId() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("contact_flow_id"))
}

// Content returns a reference to field content of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("content"))
}

// ContentHash returns a reference to field content_hash of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) ContentHash() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("content_hash"))
}

// Description returns a reference to field description of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("description"))
}

// Filename returns a reference to field filename of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("filename"))
}

// Id returns a reference to field id of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccf.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_connect_contact_flow.
func (ccf connectContactFlowAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ccf.ref.Append("type"))
}

type connectContactFlowState struct {
	Arn           string            `json:"arn"`
	ContactFlowId string            `json:"contact_flow_id"`
	Content       string            `json:"content"`
	ContentHash   string            `json:"content_hash"`
	Description   string            `json:"description"`
	Filename      string            `json:"filename"`
	Id            string            `json:"id"`
	InstanceId    string            `json:"instance_id"`
	Name          string            `json:"name"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
	Type          string            `json:"type"`
}
