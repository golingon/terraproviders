// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datalicensemanagerreceivedlicense

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConsumptionConfiguration struct {
	// BorrowConfiguration: min=0
	BorrowConfiguration []BorrowConfiguration `hcl:"borrow_configuration,block" validate:"min=0"`
	// ProvisionalConfiguration: min=0
	ProvisionalConfiguration []ProvisionalConfiguration `hcl:"provisional_configuration,block" validate:"min=0"`
}

type BorrowConfiguration struct{}

type ProvisionalConfiguration struct{}

type Entitlements struct{}

type Issuer struct{}

type LicenseMetadata struct{}

type ReceivedMetadata struct{}

type Validity struct{}

type ConsumptionConfigurationAttributes struct {
	ref terra.Reference
}

func (cc ConsumptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ConsumptionConfigurationAttributes) InternalWithRef(ref terra.Reference) ConsumptionConfigurationAttributes {
	return ConsumptionConfigurationAttributes{ref: ref}
}

func (cc ConsumptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ConsumptionConfigurationAttributes) RenewType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("renew_type"))
}

func (cc ConsumptionConfigurationAttributes) BorrowConfiguration() terra.ListValue[BorrowConfigurationAttributes] {
	return terra.ReferenceAsList[BorrowConfigurationAttributes](cc.ref.Append("borrow_configuration"))
}

func (cc ConsumptionConfigurationAttributes) ProvisionalConfiguration() terra.ListValue[ProvisionalConfigurationAttributes] {
	return terra.ReferenceAsList[ProvisionalConfigurationAttributes](cc.ref.Append("provisional_configuration"))
}

type BorrowConfigurationAttributes struct {
	ref terra.Reference
}

func (bc BorrowConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc BorrowConfigurationAttributes) InternalWithRef(ref terra.Reference) BorrowConfigurationAttributes {
	return BorrowConfigurationAttributes{ref: ref}
}

func (bc BorrowConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc BorrowConfigurationAttributes) AllowEarlyCheckIn() terra.BoolValue {
	return terra.ReferenceAsBool(bc.ref.Append("allow_early_check_in"))
}

func (bc BorrowConfigurationAttributes) MaxTimeToLiveInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(bc.ref.Append("max_time_to_live_in_minutes"))
}

type ProvisionalConfigurationAttributes struct {
	ref terra.Reference
}

func (pc ProvisionalConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ProvisionalConfigurationAttributes) InternalWithRef(ref terra.Reference) ProvisionalConfigurationAttributes {
	return ProvisionalConfigurationAttributes{ref: ref}
}

func (pc ProvisionalConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ProvisionalConfigurationAttributes) MaxTimeToLiveInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("max_time_to_live_in_minutes"))
}

type EntitlementsAttributes struct {
	ref terra.Reference
}

func (e EntitlementsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EntitlementsAttributes) InternalWithRef(ref terra.Reference) EntitlementsAttributes {
	return EntitlementsAttributes{ref: ref}
}

func (e EntitlementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EntitlementsAttributes) AllowCheckIn() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("allow_check_in"))
}

func (e EntitlementsAttributes) MaxCount() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("max_count"))
}

func (e EntitlementsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EntitlementsAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("unit"))
}

func (e EntitlementsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type IssuerAttributes struct {
	ref terra.Reference
}

func (i IssuerAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IssuerAttributes) InternalWithRef(ref terra.Reference) IssuerAttributes {
	return IssuerAttributes{ref: ref}
}

func (i IssuerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IssuerAttributes) KeyFingerprint() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("key_fingerprint"))
}

func (i IssuerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

func (i IssuerAttributes) SignKey() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("sign_key"))
}

type LicenseMetadataAttributes struct {
	ref terra.Reference
}

func (lm LicenseMetadataAttributes) InternalRef() (terra.Reference, error) {
	return lm.ref, nil
}

func (lm LicenseMetadataAttributes) InternalWithRef(ref terra.Reference) LicenseMetadataAttributes {
	return LicenseMetadataAttributes{ref: ref}
}

func (lm LicenseMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lm.ref.InternalTokens()
}

func (lm LicenseMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lm.ref.Append("name"))
}

func (lm LicenseMetadataAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(lm.ref.Append("value"))
}

type ReceivedMetadataAttributes struct {
	ref terra.Reference
}

func (rm ReceivedMetadataAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm ReceivedMetadataAttributes) InternalWithRef(ref terra.Reference) ReceivedMetadataAttributes {
	return ReceivedMetadataAttributes{ref: ref}
}

func (rm ReceivedMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm ReceivedMetadataAttributes) AllowedOperations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rm.ref.Append("allowed_operations"))
}

func (rm ReceivedMetadataAttributes) ReceivedStatus() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("received_status"))
}

func (rm ReceivedMetadataAttributes) ReceivedStatusReason() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("received_status_reason"))
}

type ValidityAttributes struct {
	ref terra.Reference
}

func (v ValidityAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ValidityAttributes) InternalWithRef(ref terra.Reference) ValidityAttributes {
	return ValidityAttributes{ref: ref}
}

func (v ValidityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ValidityAttributes) Begin() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("begin"))
}

func (v ValidityAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("end"))
}

type ConsumptionConfigurationState struct {
	RenewType                string                          `json:"renew_type"`
	BorrowConfiguration      []BorrowConfigurationState      `json:"borrow_configuration"`
	ProvisionalConfiguration []ProvisionalConfigurationState `json:"provisional_configuration"`
}

type BorrowConfigurationState struct {
	AllowEarlyCheckIn      bool    `json:"allow_early_check_in"`
	MaxTimeToLiveInMinutes float64 `json:"max_time_to_live_in_minutes"`
}

type ProvisionalConfigurationState struct {
	MaxTimeToLiveInMinutes float64 `json:"max_time_to_live_in_minutes"`
}

type EntitlementsState struct {
	AllowCheckIn bool    `json:"allow_check_in"`
	MaxCount     float64 `json:"max_count"`
	Name         string  `json:"name"`
	Unit         string  `json:"unit"`
	Value        string  `json:"value"`
}

type IssuerState struct {
	KeyFingerprint string `json:"key_fingerprint"`
	Name           string `json:"name"`
	SignKey        string `json:"sign_key"`
}

type LicenseMetadataState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ReceivedMetadataState struct {
	AllowedOperations    []string `json:"allowed_operations"`
	ReceivedStatus       string   `json:"received_status"`
	ReceivedStatusReason string   `json:"received_status_reason"`
}

type ValidityState struct {
	Begin string `json:"begin"`
	End   string `json:"end"`
}
