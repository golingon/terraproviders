// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRoute53ResolverQueryLogConfig creates a new instance of [Route53ResolverQueryLogConfig].
func NewRoute53ResolverQueryLogConfig(name string, args Route53ResolverQueryLogConfigArgs) *Route53ResolverQueryLogConfig {
	return &Route53ResolverQueryLogConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverQueryLogConfig)(nil)

// Route53ResolverQueryLogConfig represents the Terraform resource aws_route53_resolver_query_log_config.
type Route53ResolverQueryLogConfig struct {
	Name      string
	Args      Route53ResolverQueryLogConfigArgs
	state     *route53ResolverQueryLogConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) Type() string {
	return "aws_route53_resolver_query_log_config"
}

// LocalName returns the local name for [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) LocalName() string {
	return rrqlc.Name
}

// Configuration returns the configuration (args) for [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) Configuration() interface{} {
	return rrqlc.Args
}

// DependOn is used for other resources to depend on [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(rrqlc)
}

// Dependencies returns the list of resources [Route53ResolverQueryLogConfig] depends_on.
func (rrqlc *Route53ResolverQueryLogConfig) Dependencies() terra.Dependencies {
	return rrqlc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) LifecycleManagement() *terra.Lifecycle {
	return rrqlc.Lifecycle
}

// Attributes returns the attributes for [Route53ResolverQueryLogConfig].
func (rrqlc *Route53ResolverQueryLogConfig) Attributes() route53ResolverQueryLogConfigAttributes {
	return route53ResolverQueryLogConfigAttributes{ref: terra.ReferenceResource(rrqlc)}
}

// ImportState imports the given attribute values into [Route53ResolverQueryLogConfig]'s state.
func (rrqlc *Route53ResolverQueryLogConfig) ImportState(av io.Reader) error {
	rrqlc.state = &route53ResolverQueryLogConfigState{}
	if err := json.NewDecoder(av).Decode(rrqlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrqlc.Type(), rrqlc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53ResolverQueryLogConfig] has state.
func (rrqlc *Route53ResolverQueryLogConfig) State() (*route53ResolverQueryLogConfigState, bool) {
	return rrqlc.state, rrqlc.state != nil
}

// StateMust returns the state for [Route53ResolverQueryLogConfig]. Panics if the state is nil.
func (rrqlc *Route53ResolverQueryLogConfig) StateMust() *route53ResolverQueryLogConfigState {
	if rrqlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrqlc.Type(), rrqlc.LocalName()))
	}
	return rrqlc.state
}

// Route53ResolverQueryLogConfigArgs contains the configurations for aws_route53_resolver_query_log_config.
type Route53ResolverQueryLogConfigArgs struct {
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type route53ResolverQueryLogConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("arn"))
}

// DestinationArn returns a reference to field destination_arn of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("destination_arn"))
}

// Id returns a reference to field id of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("owner_id"))
}

// ShareStatus returns a reference to field share_status of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) ShareStatus() terra.StringValue {
	return terra.ReferenceAsString(rrqlc.ref.Append("share_status"))
}

// Tags returns a reference to field tags of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrqlc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53_resolver_query_log_config.
func (rrqlc route53ResolverQueryLogConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrqlc.ref.Append("tags_all"))
}

type route53ResolverQueryLogConfigState struct {
	Arn            string            `json:"arn"`
	DestinationArn string            `json:"destination_arn"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	OwnerId        string            `json:"owner_id"`
	ShareStatus    string            `json:"share_status"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
