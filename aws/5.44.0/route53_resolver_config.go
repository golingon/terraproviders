// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRoute53ResolverConfig creates a new instance of [Route53ResolverConfig].
func NewRoute53ResolverConfig(name string, args Route53ResolverConfigArgs) *Route53ResolverConfig {
	return &Route53ResolverConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverConfig)(nil)

// Route53ResolverConfig represents the Terraform resource aws_route53_resolver_config.
type Route53ResolverConfig struct {
	Name      string
	Args      Route53ResolverConfigArgs
	state     *route53ResolverConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) Type() string {
	return "aws_route53_resolver_config"
}

// LocalName returns the local name for [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) LocalName() string {
	return rrc.Name
}

// Configuration returns the configuration (args) for [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) Configuration() interface{} {
	return rrc.Args
}

// DependOn is used for other resources to depend on [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(rrc)
}

// Dependencies returns the list of resources [Route53ResolverConfig] depends_on.
func (rrc *Route53ResolverConfig) Dependencies() terra.Dependencies {
	return rrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) LifecycleManagement() *terra.Lifecycle {
	return rrc.Lifecycle
}

// Attributes returns the attributes for [Route53ResolverConfig].
func (rrc *Route53ResolverConfig) Attributes() route53ResolverConfigAttributes {
	return route53ResolverConfigAttributes{ref: terra.ReferenceResource(rrc)}
}

// ImportState imports the given attribute values into [Route53ResolverConfig]'s state.
func (rrc *Route53ResolverConfig) ImportState(av io.Reader) error {
	rrc.state = &route53ResolverConfigState{}
	if err := json.NewDecoder(av).Decode(rrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrc.Type(), rrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53ResolverConfig] has state.
func (rrc *Route53ResolverConfig) State() (*route53ResolverConfigState, bool) {
	return rrc.state, rrc.state != nil
}

// StateMust returns the state for [Route53ResolverConfig]. Panics if the state is nil.
func (rrc *Route53ResolverConfig) StateMust() *route53ResolverConfigState {
	if rrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrc.Type(), rrc.LocalName()))
	}
	return rrc.state
}

// Route53ResolverConfigArgs contains the configurations for aws_route53_resolver_config.
type Route53ResolverConfigArgs struct {
	// AutodefinedReverseFlag: string, required
	AutodefinedReverseFlag terra.StringValue `hcl:"autodefined_reverse_flag,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
}
type route53ResolverConfigAttributes struct {
	ref terra.Reference
}

// AutodefinedReverseFlag returns a reference to field autodefined_reverse_flag of aws_route53_resolver_config.
func (rrc route53ResolverConfigAttributes) AutodefinedReverseFlag() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("autodefined_reverse_flag"))
}

// Id returns a reference to field id of aws_route53_resolver_config.
func (rrc route53ResolverConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_config.
func (rrc route53ResolverConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("owner_id"))
}

// ResourceId returns a reference to field resource_id of aws_route53_resolver_config.
func (rrc route53ResolverConfigAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("resource_id"))
}

type route53ResolverConfigState struct {
	AutodefinedReverseFlag string `json:"autodefined_reverse_flag"`
	Id                     string `json:"id"`
	OwnerId                string `json:"owner_id"`
	ResourceId             string `json:"resource_id"`
}
