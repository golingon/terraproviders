// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	m2deployment "github.com/golingon/terraproviders/aws/5.44.0/m2deployment"
	"io"
)

// NewM2Deployment creates a new instance of [M2Deployment].
func NewM2Deployment(name string, args M2DeploymentArgs) *M2Deployment {
	return &M2Deployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*M2Deployment)(nil)

// M2Deployment represents the Terraform resource aws_m2_deployment.
type M2Deployment struct {
	Name      string
	Args      M2DeploymentArgs
	state     *m2DeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [M2Deployment].
func (md *M2Deployment) Type() string {
	return "aws_m2_deployment"
}

// LocalName returns the local name for [M2Deployment].
func (md *M2Deployment) LocalName() string {
	return md.Name
}

// Configuration returns the configuration (args) for [M2Deployment].
func (md *M2Deployment) Configuration() interface{} {
	return md.Args
}

// DependOn is used for other resources to depend on [M2Deployment].
func (md *M2Deployment) DependOn() terra.Reference {
	return terra.ReferenceResource(md)
}

// Dependencies returns the list of resources [M2Deployment] depends_on.
func (md *M2Deployment) Dependencies() terra.Dependencies {
	return md.DependsOn
}

// LifecycleManagement returns the lifecycle block for [M2Deployment].
func (md *M2Deployment) LifecycleManagement() *terra.Lifecycle {
	return md.Lifecycle
}

// Attributes returns the attributes for [M2Deployment].
func (md *M2Deployment) Attributes() m2DeploymentAttributes {
	return m2DeploymentAttributes{ref: terra.ReferenceResource(md)}
}

// ImportState imports the given attribute values into [M2Deployment]'s state.
func (md *M2Deployment) ImportState(av io.Reader) error {
	md.state = &m2DeploymentState{}
	if err := json.NewDecoder(av).Decode(md.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", md.Type(), md.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [M2Deployment] has state.
func (md *M2Deployment) State() (*m2DeploymentState, bool) {
	return md.state, md.state != nil
}

// StateMust returns the state for [M2Deployment]. Panics if the state is nil.
func (md *M2Deployment) StateMust() *m2DeploymentState {
	if md.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", md.Type(), md.LocalName()))
	}
	return md.state
}

// M2DeploymentArgs contains the configurations for aws_m2_deployment.
type M2DeploymentArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ApplicationVersion: number, required
	ApplicationVersion terra.NumberValue `hcl:"application_version,attr" validate:"required"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// ForceStop: bool, optional
	ForceStop terra.BoolValue `hcl:"force_stop,attr"`
	// Start: bool, required
	Start terra.BoolValue `hcl:"start,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *m2deployment.Timeouts `hcl:"timeouts,block"`
}
type m2DeploymentAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_m2_deployment.
func (md m2DeploymentAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("application_id"))
}

// ApplicationVersion returns a reference to field application_version of aws_m2_deployment.
func (md m2DeploymentAttributes) ApplicationVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(md.ref.Append("application_version"))
}

// DeploymentId returns a reference to field deployment_id of aws_m2_deployment.
func (md m2DeploymentAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("deployment_id"))
}

// EnvironmentId returns a reference to field environment_id of aws_m2_deployment.
func (md m2DeploymentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("environment_id"))
}

// ForceStop returns a reference to field force_stop of aws_m2_deployment.
func (md m2DeploymentAttributes) ForceStop() terra.BoolValue {
	return terra.ReferenceAsBool(md.ref.Append("force_stop"))
}

// Id returns a reference to field id of aws_m2_deployment.
func (md m2DeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("id"))
}

// Start returns a reference to field start of aws_m2_deployment.
func (md m2DeploymentAttributes) Start() terra.BoolValue {
	return terra.ReferenceAsBool(md.ref.Append("start"))
}

func (md m2DeploymentAttributes) Timeouts() m2deployment.TimeoutsAttributes {
	return terra.ReferenceAsSingle[m2deployment.TimeoutsAttributes](md.ref.Append("timeouts"))
}

type m2DeploymentState struct {
	ApplicationId      string                      `json:"application_id"`
	ApplicationVersion float64                     `json:"application_version"`
	DeploymentId       string                      `json:"deployment_id"`
	EnvironmentId      string                      `json:"environment_id"`
	ForceStop          bool                        `json:"force_stop"`
	Id                 string                      `json:"id"`
	Start              bool                        `json:"start"`
	Timeouts           *m2deployment.TimeoutsState `json:"timeouts"`
}
