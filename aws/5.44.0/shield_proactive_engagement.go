// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	shieldproactiveengagement "github.com/golingon/terraproviders/aws/5.44.0/shieldproactiveengagement"
	"io"
)

// NewShieldProactiveEngagement creates a new instance of [ShieldProactiveEngagement].
func NewShieldProactiveEngagement(name string, args ShieldProactiveEngagementArgs) *ShieldProactiveEngagement {
	return &ShieldProactiveEngagement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ShieldProactiveEngagement)(nil)

// ShieldProactiveEngagement represents the Terraform resource aws_shield_proactive_engagement.
type ShieldProactiveEngagement struct {
	Name      string
	Args      ShieldProactiveEngagementArgs
	state     *shieldProactiveEngagementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) Type() string {
	return "aws_shield_proactive_engagement"
}

// LocalName returns the local name for [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) LocalName() string {
	return spe.Name
}

// Configuration returns the configuration (args) for [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) Configuration() interface{} {
	return spe.Args
}

// DependOn is used for other resources to depend on [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) DependOn() terra.Reference {
	return terra.ReferenceResource(spe)
}

// Dependencies returns the list of resources [ShieldProactiveEngagement] depends_on.
func (spe *ShieldProactiveEngagement) Dependencies() terra.Dependencies {
	return spe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) LifecycleManagement() *terra.Lifecycle {
	return spe.Lifecycle
}

// Attributes returns the attributes for [ShieldProactiveEngagement].
func (spe *ShieldProactiveEngagement) Attributes() shieldProactiveEngagementAttributes {
	return shieldProactiveEngagementAttributes{ref: terra.ReferenceResource(spe)}
}

// ImportState imports the given attribute values into [ShieldProactiveEngagement]'s state.
func (spe *ShieldProactiveEngagement) ImportState(av io.Reader) error {
	spe.state = &shieldProactiveEngagementState{}
	if err := json.NewDecoder(av).Decode(spe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", spe.Type(), spe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ShieldProactiveEngagement] has state.
func (spe *ShieldProactiveEngagement) State() (*shieldProactiveEngagementState, bool) {
	return spe.state, spe.state != nil
}

// StateMust returns the state for [ShieldProactiveEngagement]. Panics if the state is nil.
func (spe *ShieldProactiveEngagement) StateMust() *shieldProactiveEngagementState {
	if spe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", spe.Type(), spe.LocalName()))
	}
	return spe.state
}

// ShieldProactiveEngagementArgs contains the configurations for aws_shield_proactive_engagement.
type ShieldProactiveEngagementArgs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// EmergencyContact: min=0
	EmergencyContact []shieldproactiveengagement.EmergencyContact `hcl:"emergency_contact,block" validate:"min=0"`
}
type shieldProactiveEngagementAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of aws_shield_proactive_engagement.
func (spe shieldProactiveEngagementAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(spe.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_shield_proactive_engagement.
func (spe shieldProactiveEngagementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(spe.ref.Append("id"))
}

func (spe shieldProactiveEngagementAttributes) EmergencyContact() terra.ListValue[shieldproactiveengagement.EmergencyContactAttributes] {
	return terra.ReferenceAsList[shieldproactiveengagement.EmergencyContactAttributes](spe.ref.Append("emergency_contact"))
}

type shieldProactiveEngagementState struct {
	Enabled          bool                                              `json:"enabled"`
	Id               string                                            `json:"id"`
	EmergencyContact []shieldproactiveengagement.EmergencyContactState `json:"emergency_contact"`
}
