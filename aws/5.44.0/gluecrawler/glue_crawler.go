// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package gluecrawler

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogTarget struct {
	// ConnectionName: string, optional
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DlqEventQueueArn: string, optional
	DlqEventQueueArn terra.StringValue `hcl:"dlq_event_queue_arn,attr"`
	// EventQueueArn: string, optional
	EventQueueArn terra.StringValue `hcl:"event_queue_arn,attr"`
	// Tables: list of string, required
	Tables terra.ListValue[terra.StringValue] `hcl:"tables,attr" validate:"required"`
}

type DeltaTarget struct {
	// ConnectionName: string, optional
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// CreateNativeDeltaTable: bool, optional
	CreateNativeDeltaTable terra.BoolValue `hcl:"create_native_delta_table,attr"`
	// DeltaTables: set of string, required
	DeltaTables terra.SetValue[terra.StringValue] `hcl:"delta_tables,attr" validate:"required"`
	// WriteManifest: bool, required
	WriteManifest terra.BoolValue `hcl:"write_manifest,attr" validate:"required"`
}

type DynamodbTarget struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ScanAll: bool, optional
	ScanAll terra.BoolValue `hcl:"scan_all,attr"`
	// ScanRate: number, optional
	ScanRate terra.NumberValue `hcl:"scan_rate,attr"`
}

type HudiTarget struct {
	// ConnectionName: string, optional
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// Exclusions: list of string, optional
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// MaximumTraversalDepth: number, required
	MaximumTraversalDepth terra.NumberValue `hcl:"maximum_traversal_depth,attr" validate:"required"`
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
}

type IcebergTarget struct {
	// ConnectionName: string, optional
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// Exclusions: list of string, optional
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// MaximumTraversalDepth: number, required
	MaximumTraversalDepth terra.NumberValue `hcl:"maximum_traversal_depth,attr" validate:"required"`
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
}

type JdbcTarget struct {
	// ConnectionName: string, required
	ConnectionName terra.StringValue `hcl:"connection_name,attr" validate:"required"`
	// EnableAdditionalMetadata: list of string, optional
	EnableAdditionalMetadata terra.ListValue[terra.StringValue] `hcl:"enable_additional_metadata,attr"`
	// Exclusions: list of string, optional
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type LakeFormationConfiguration struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// UseLakeFormationCredentials: bool, optional
	UseLakeFormationCredentials terra.BoolValue `hcl:"use_lake_formation_credentials,attr"`
}

type LineageConfiguration struct {
	// CrawlerLineageSettings: string, optional
	CrawlerLineageSettings terra.StringValue `hcl:"crawler_lineage_settings,attr"`
}

type MongodbTarget struct {
	// ConnectionName: string, required
	ConnectionName terra.StringValue `hcl:"connection_name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ScanAll: bool, optional
	ScanAll terra.BoolValue `hcl:"scan_all,attr"`
}

type RecrawlPolicy struct {
	// RecrawlBehavior: string, optional
	RecrawlBehavior terra.StringValue `hcl:"recrawl_behavior,attr"`
}

type S3Target struct {
	// ConnectionName: string, optional
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// DlqEventQueueArn: string, optional
	DlqEventQueueArn terra.StringValue `hcl:"dlq_event_queue_arn,attr"`
	// EventQueueArn: string, optional
	EventQueueArn terra.StringValue `hcl:"event_queue_arn,attr"`
	// Exclusions: list of string, optional
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SampleSize: number, optional
	SampleSize terra.NumberValue `hcl:"sample_size,attr"`
}

type SchemaChangePolicy struct {
	// DeleteBehavior: string, optional
	DeleteBehavior terra.StringValue `hcl:"delete_behavior,attr"`
	// UpdateBehavior: string, optional
	UpdateBehavior terra.StringValue `hcl:"update_behavior,attr"`
}

type CatalogTargetAttributes struct {
	ref terra.Reference
}

func (ct CatalogTargetAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct CatalogTargetAttributes) InternalWithRef(ref terra.Reference) CatalogTargetAttributes {
	return CatalogTargetAttributes{ref: ref}
}

func (ct CatalogTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct CatalogTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("connection_name"))
}

func (ct CatalogTargetAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("database_name"))
}

func (ct CatalogTargetAttributes) DlqEventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("dlq_event_queue_arn"))
}

func (ct CatalogTargetAttributes) EventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("event_queue_arn"))
}

func (ct CatalogTargetAttributes) Tables() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ct.ref.Append("tables"))
}

type DeltaTargetAttributes struct {
	ref terra.Reference
}

func (dt DeltaTargetAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DeltaTargetAttributes) InternalWithRef(ref terra.Reference) DeltaTargetAttributes {
	return DeltaTargetAttributes{ref: ref}
}

func (dt DeltaTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DeltaTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("connection_name"))
}

func (dt DeltaTargetAttributes) CreateNativeDeltaTable() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("create_native_delta_table"))
}

func (dt DeltaTargetAttributes) DeltaTables() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dt.ref.Append("delta_tables"))
}

func (dt DeltaTargetAttributes) WriteManifest() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("write_manifest"))
}

type DynamodbTargetAttributes struct {
	ref terra.Reference
}

func (dt DynamodbTargetAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DynamodbTargetAttributes) InternalWithRef(ref terra.Reference) DynamodbTargetAttributes {
	return DynamodbTargetAttributes{ref: ref}
}

func (dt DynamodbTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DynamodbTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("path"))
}

func (dt DynamodbTargetAttributes) ScanAll() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("scan_all"))
}

func (dt DynamodbTargetAttributes) ScanRate() terra.NumberValue {
	return terra.ReferenceAsNumber(dt.ref.Append("scan_rate"))
}

type HudiTargetAttributes struct {
	ref terra.Reference
}

func (ht HudiTargetAttributes) InternalRef() (terra.Reference, error) {
	return ht.ref, nil
}

func (ht HudiTargetAttributes) InternalWithRef(ref terra.Reference) HudiTargetAttributes {
	return HudiTargetAttributes{ref: ref}
}

func (ht HudiTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ht.ref.InternalTokens()
}

func (ht HudiTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(ht.ref.Append("connection_name"))
}

func (ht HudiTargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ht.ref.Append("exclusions"))
}

func (ht HudiTargetAttributes) MaximumTraversalDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(ht.ref.Append("maximum_traversal_depth"))
}

func (ht HudiTargetAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ht.ref.Append("paths"))
}

type IcebergTargetAttributes struct {
	ref terra.Reference
}

func (it IcebergTargetAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it IcebergTargetAttributes) InternalWithRef(ref terra.Reference) IcebergTargetAttributes {
	return IcebergTargetAttributes{ref: ref}
}

func (it IcebergTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it IcebergTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("connection_name"))
}

func (it IcebergTargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](it.ref.Append("exclusions"))
}

func (it IcebergTargetAttributes) MaximumTraversalDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(it.ref.Append("maximum_traversal_depth"))
}

func (it IcebergTargetAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](it.ref.Append("paths"))
}

type JdbcTargetAttributes struct {
	ref terra.Reference
}

func (jt JdbcTargetAttributes) InternalRef() (terra.Reference, error) {
	return jt.ref, nil
}

func (jt JdbcTargetAttributes) InternalWithRef(ref terra.Reference) JdbcTargetAttributes {
	return JdbcTargetAttributes{ref: ref}
}

func (jt JdbcTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jt.ref.InternalTokens()
}

func (jt JdbcTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(jt.ref.Append("connection_name"))
}

func (jt JdbcTargetAttributes) EnableAdditionalMetadata() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](jt.ref.Append("enable_additional_metadata"))
}

func (jt JdbcTargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](jt.ref.Append("exclusions"))
}

func (jt JdbcTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(jt.ref.Append("path"))
}

type LakeFormationConfigurationAttributes struct {
	ref terra.Reference
}

func (lfc LakeFormationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lfc.ref, nil
}

func (lfc LakeFormationConfigurationAttributes) InternalWithRef(ref terra.Reference) LakeFormationConfigurationAttributes {
	return LakeFormationConfigurationAttributes{ref: ref}
}

func (lfc LakeFormationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lfc.ref.InternalTokens()
}

func (lfc LakeFormationConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(lfc.ref.Append("account_id"))
}

func (lfc LakeFormationConfigurationAttributes) UseLakeFormationCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(lfc.ref.Append("use_lake_formation_credentials"))
}

type LineageConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LineageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LineageConfigurationAttributes) InternalWithRef(ref terra.Reference) LineageConfigurationAttributes {
	return LineageConfigurationAttributes{ref: ref}
}

func (lc LineageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LineageConfigurationAttributes) CrawlerLineageSettings() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("crawler_lineage_settings"))
}

type MongodbTargetAttributes struct {
	ref terra.Reference
}

func (mt MongodbTargetAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt MongodbTargetAttributes) InternalWithRef(ref terra.Reference) MongodbTargetAttributes {
	return MongodbTargetAttributes{ref: ref}
}

func (mt MongodbTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt MongodbTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("connection_name"))
}

func (mt MongodbTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("path"))
}

func (mt MongodbTargetAttributes) ScanAll() terra.BoolValue {
	return terra.ReferenceAsBool(mt.ref.Append("scan_all"))
}

type RecrawlPolicyAttributes struct {
	ref terra.Reference
}

func (rp RecrawlPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RecrawlPolicyAttributes) InternalWithRef(ref terra.Reference) RecrawlPolicyAttributes {
	return RecrawlPolicyAttributes{ref: ref}
}

func (rp RecrawlPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RecrawlPolicyAttributes) RecrawlBehavior() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("recrawl_behavior"))
}

type S3TargetAttributes struct {
	ref terra.Reference
}

func (st S3TargetAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st S3TargetAttributes) InternalWithRef(ref terra.Reference) S3TargetAttributes {
	return S3TargetAttributes{ref: ref}
}

func (st S3TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st S3TargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("connection_name"))
}

func (st S3TargetAttributes) DlqEventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("dlq_event_queue_arn"))
}

func (st S3TargetAttributes) EventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("event_queue_arn"))
}

func (st S3TargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](st.ref.Append("exclusions"))
}

func (st S3TargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("path"))
}

func (st S3TargetAttributes) SampleSize() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("sample_size"))
}

type SchemaChangePolicyAttributes struct {
	ref terra.Reference
}

func (scp SchemaChangePolicyAttributes) InternalRef() (terra.Reference, error) {
	return scp.ref, nil
}

func (scp SchemaChangePolicyAttributes) InternalWithRef(ref terra.Reference) SchemaChangePolicyAttributes {
	return SchemaChangePolicyAttributes{ref: ref}
}

func (scp SchemaChangePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scp.ref.InternalTokens()
}

func (scp SchemaChangePolicyAttributes) DeleteBehavior() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("delete_behavior"))
}

func (scp SchemaChangePolicyAttributes) UpdateBehavior() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("update_behavior"))
}

type CatalogTargetState struct {
	ConnectionName   string   `json:"connection_name"`
	DatabaseName     string   `json:"database_name"`
	DlqEventQueueArn string   `json:"dlq_event_queue_arn"`
	EventQueueArn    string   `json:"event_queue_arn"`
	Tables           []string `json:"tables"`
}

type DeltaTargetState struct {
	ConnectionName         string   `json:"connection_name"`
	CreateNativeDeltaTable bool     `json:"create_native_delta_table"`
	DeltaTables            []string `json:"delta_tables"`
	WriteManifest          bool     `json:"write_manifest"`
}

type DynamodbTargetState struct {
	Path     string  `json:"path"`
	ScanAll  bool    `json:"scan_all"`
	ScanRate float64 `json:"scan_rate"`
}

type HudiTargetState struct {
	ConnectionName        string   `json:"connection_name"`
	Exclusions            []string `json:"exclusions"`
	MaximumTraversalDepth float64  `json:"maximum_traversal_depth"`
	Paths                 []string `json:"paths"`
}

type IcebergTargetState struct {
	ConnectionName        string   `json:"connection_name"`
	Exclusions            []string `json:"exclusions"`
	MaximumTraversalDepth float64  `json:"maximum_traversal_depth"`
	Paths                 []string `json:"paths"`
}

type JdbcTargetState struct {
	ConnectionName           string   `json:"connection_name"`
	EnableAdditionalMetadata []string `json:"enable_additional_metadata"`
	Exclusions               []string `json:"exclusions"`
	Path                     string   `json:"path"`
}

type LakeFormationConfigurationState struct {
	AccountId                   string `json:"account_id"`
	UseLakeFormationCredentials bool   `json:"use_lake_formation_credentials"`
}

type LineageConfigurationState struct {
	CrawlerLineageSettings string `json:"crawler_lineage_settings"`
}

type MongodbTargetState struct {
	ConnectionName string `json:"connection_name"`
	Path           string `json:"path"`
	ScanAll        bool   `json:"scan_all"`
}

type RecrawlPolicyState struct {
	RecrawlBehavior string `json:"recrawl_behavior"`
}

type S3TargetState struct {
	ConnectionName   string   `json:"connection_name"`
	DlqEventQueueArn string   `json:"dlq_event_queue_arn"`
	EventQueueArn    string   `json:"event_queue_arn"`
	Exclusions       []string `json:"exclusions"`
	Path             string   `json:"path"`
	SampleSize       float64  `json:"sample_size"`
}

type SchemaChangePolicyState struct {
	DeleteBehavior string `json:"delete_behavior"`
	UpdateBehavior string `json:"update_behavior"`
}
