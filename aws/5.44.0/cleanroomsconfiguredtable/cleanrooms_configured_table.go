// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package cleanroomsconfiguredtable

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TableReference struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TableReferenceAttributes struct {
	ref terra.Reference
}

func (tr TableReferenceAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TableReferenceAttributes) InternalWithRef(ref terra.Reference) TableReferenceAttributes {
	return TableReferenceAttributes{ref: ref}
}

func (tr TableReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TableReferenceAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("database_name"))
}

func (tr TableReferenceAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("table_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TableReferenceState struct {
	DatabaseName string `json:"database_name"`
	TableName    string `json:"table_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
