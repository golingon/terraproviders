// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package gluedataqualityruleset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetTable struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type TargetTableAttributes struct {
	ref terra.Reference
}

func (tt TargetTableAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt TargetTableAttributes) InternalWithRef(ref terra.Reference) TargetTableAttributes {
	return TargetTableAttributes{ref: ref}
}

func (tt TargetTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt TargetTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("catalog_id"))
}

func (tt TargetTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("database_name"))
}

func (tt TargetTableAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("table_name"))
}

type TargetTableState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	TableName    string `json:"table_name"`
}
