// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewServicecatalogappregistryApplication creates a new instance of [ServicecatalogappregistryApplication].
func NewServicecatalogappregistryApplication(name string, args ServicecatalogappregistryApplicationArgs) *ServicecatalogappregistryApplication {
	return &ServicecatalogappregistryApplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogappregistryApplication)(nil)

// ServicecatalogappregistryApplication represents the Terraform resource aws_servicecatalogappregistry_application.
type ServicecatalogappregistryApplication struct {
	Name      string
	Args      ServicecatalogappregistryApplicationArgs
	state     *servicecatalogappregistryApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) Type() string {
	return "aws_servicecatalogappregistry_application"
}

// LocalName returns the local name for [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) LocalName() string {
	return sa.Name
}

// Configuration returns the configuration (args) for [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) Configuration() interface{} {
	return sa.Args
}

// DependOn is used for other resources to depend on [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) DependOn() terra.Reference {
	return terra.ReferenceResource(sa)
}

// Dependencies returns the list of resources [ServicecatalogappregistryApplication] depends_on.
func (sa *ServicecatalogappregistryApplication) Dependencies() terra.Dependencies {
	return sa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) LifecycleManagement() *terra.Lifecycle {
	return sa.Lifecycle
}

// Attributes returns the attributes for [ServicecatalogappregistryApplication].
func (sa *ServicecatalogappregistryApplication) Attributes() servicecatalogappregistryApplicationAttributes {
	return servicecatalogappregistryApplicationAttributes{ref: terra.ReferenceResource(sa)}
}

// ImportState imports the given attribute values into [ServicecatalogappregistryApplication]'s state.
func (sa *ServicecatalogappregistryApplication) ImportState(av io.Reader) error {
	sa.state = &servicecatalogappregistryApplicationState{}
	if err := json.NewDecoder(av).Decode(sa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sa.Type(), sa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ServicecatalogappregistryApplication] has state.
func (sa *ServicecatalogappregistryApplication) State() (*servicecatalogappregistryApplicationState, bool) {
	return sa.state, sa.state != nil
}

// StateMust returns the state for [ServicecatalogappregistryApplication]. Panics if the state is nil.
func (sa *ServicecatalogappregistryApplication) StateMust() *servicecatalogappregistryApplicationState {
	if sa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sa.Type(), sa.LocalName()))
	}
	return sa.state
}

// ServicecatalogappregistryApplicationArgs contains the configurations for aws_servicecatalogappregistry_application.
type ServicecatalogappregistryApplicationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}
type servicecatalogappregistryApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationTag returns a reference to field application_tag of aws_servicecatalogappregistry_application.
func (sa servicecatalogappregistryApplicationAttributes) ApplicationTag() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sa.ref.Append("application_tag"))
}

// Arn returns a reference to field arn of aws_servicecatalogappregistry_application.
func (sa servicecatalogappregistryApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("arn"))
}

// Description returns a reference to field description of aws_servicecatalogappregistry_application.
func (sa servicecatalogappregistryApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalogappregistry_application.
func (sa servicecatalogappregistryApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("id"))
}

// Name returns a reference to field name of aws_servicecatalogappregistry_application.
func (sa servicecatalogappregistryApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

type servicecatalogappregistryApplicationState struct {
	ApplicationTag map[string]string `json:"application_tag"`
	Arn            string            `json:"arn"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
}
