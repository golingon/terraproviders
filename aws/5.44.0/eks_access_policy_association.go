// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	eksaccesspolicyassociation "github.com/golingon/terraproviders/aws/5.44.0/eksaccesspolicyassociation"
	"io"
)

// NewEksAccessPolicyAssociation creates a new instance of [EksAccessPolicyAssociation].
func NewEksAccessPolicyAssociation(name string, args EksAccessPolicyAssociationArgs) *EksAccessPolicyAssociation {
	return &EksAccessPolicyAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksAccessPolicyAssociation)(nil)

// EksAccessPolicyAssociation represents the Terraform resource aws_eks_access_policy_association.
type EksAccessPolicyAssociation struct {
	Name      string
	Args      EksAccessPolicyAssociationArgs
	state     *eksAccessPolicyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) Type() string {
	return "aws_eks_access_policy_association"
}

// LocalName returns the local name for [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) LocalName() string {
	return eapa.Name
}

// Configuration returns the configuration (args) for [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) Configuration() interface{} {
	return eapa.Args
}

// DependOn is used for other resources to depend on [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(eapa)
}

// Dependencies returns the list of resources [EksAccessPolicyAssociation] depends_on.
func (eapa *EksAccessPolicyAssociation) Dependencies() terra.Dependencies {
	return eapa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) LifecycleManagement() *terra.Lifecycle {
	return eapa.Lifecycle
}

// Attributes returns the attributes for [EksAccessPolicyAssociation].
func (eapa *EksAccessPolicyAssociation) Attributes() eksAccessPolicyAssociationAttributes {
	return eksAccessPolicyAssociationAttributes{ref: terra.ReferenceResource(eapa)}
}

// ImportState imports the given attribute values into [EksAccessPolicyAssociation]'s state.
func (eapa *EksAccessPolicyAssociation) ImportState(av io.Reader) error {
	eapa.state = &eksAccessPolicyAssociationState{}
	if err := json.NewDecoder(av).Decode(eapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eapa.Type(), eapa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EksAccessPolicyAssociation] has state.
func (eapa *EksAccessPolicyAssociation) State() (*eksAccessPolicyAssociationState, bool) {
	return eapa.state, eapa.state != nil
}

// StateMust returns the state for [EksAccessPolicyAssociation]. Panics if the state is nil.
func (eapa *EksAccessPolicyAssociation) StateMust() *eksAccessPolicyAssociationState {
	if eapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eapa.Type(), eapa.LocalName()))
	}
	return eapa.state
}

// EksAccessPolicyAssociationArgs contains the configurations for aws_eks_access_policy_association.
type EksAccessPolicyAssociationArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// AccessScope: required
	AccessScope *eksaccesspolicyassociation.AccessScope `hcl:"access_scope,block" validate:"required"`
	// Timeouts: optional
	Timeouts *eksaccesspolicyassociation.Timeouts `hcl:"timeouts,block"`
}
type eksAccessPolicyAssociationAttributes struct {
	ref terra.Reference
}

// AssociatedAt returns a reference to field associated_at of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) AssociatedAt() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("associated_at"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("id"))
}

// ModifiedAt returns a reference to field modified_at of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("modified_at"))
}

// PolicyArn returns a reference to field policy_arn of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("policy_arn"))
}

// PrincipalArn returns a reference to field principal_arn of aws_eks_access_policy_association.
func (eapa eksAccessPolicyAssociationAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(eapa.ref.Append("principal_arn"))
}

func (eapa eksAccessPolicyAssociationAttributes) AccessScope() terra.ListValue[eksaccesspolicyassociation.AccessScopeAttributes] {
	return terra.ReferenceAsList[eksaccesspolicyassociation.AccessScopeAttributes](eapa.ref.Append("access_scope"))
}

func (eapa eksAccessPolicyAssociationAttributes) Timeouts() eksaccesspolicyassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[eksaccesspolicyassociation.TimeoutsAttributes](eapa.ref.Append("timeouts"))
}

type eksAccessPolicyAssociationState struct {
	AssociatedAt string                                        `json:"associated_at"`
	ClusterName  string                                        `json:"cluster_name"`
	Id           string                                        `json:"id"`
	ModifiedAt   string                                        `json:"modified_at"`
	PolicyArn    string                                        `json:"policy_arn"`
	PrincipalArn string                                        `json:"principal_arn"`
	AccessScope  []eksaccesspolicyassociation.AccessScopeState `json:"access_scope"`
	Timeouts     *eksaccesspolicyassociation.TimeoutsState     `json:"timeouts"`
}
