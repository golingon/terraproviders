// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewDxConnectionConfirmation creates a new instance of [DxConnectionConfirmation].
func NewDxConnectionConfirmation(name string, args DxConnectionConfirmationArgs) *DxConnectionConfirmation {
	return &DxConnectionConfirmation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxConnectionConfirmation)(nil)

// DxConnectionConfirmation represents the Terraform resource aws_dx_connection_confirmation.
type DxConnectionConfirmation struct {
	Name      string
	Args      DxConnectionConfirmationArgs
	state     *dxConnectionConfirmationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) Type() string {
	return "aws_dx_connection_confirmation"
}

// LocalName returns the local name for [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) LocalName() string {
	return dcc.Name
}

// Configuration returns the configuration (args) for [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) Configuration() interface{} {
	return dcc.Args
}

// DependOn is used for other resources to depend on [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) DependOn() terra.Reference {
	return terra.ReferenceResource(dcc)
}

// Dependencies returns the list of resources [DxConnectionConfirmation] depends_on.
func (dcc *DxConnectionConfirmation) Dependencies() terra.Dependencies {
	return dcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) LifecycleManagement() *terra.Lifecycle {
	return dcc.Lifecycle
}

// Attributes returns the attributes for [DxConnectionConfirmation].
func (dcc *DxConnectionConfirmation) Attributes() dxConnectionConfirmationAttributes {
	return dxConnectionConfirmationAttributes{ref: terra.ReferenceResource(dcc)}
}

// ImportState imports the given attribute values into [DxConnectionConfirmation]'s state.
func (dcc *DxConnectionConfirmation) ImportState(av io.Reader) error {
	dcc.state = &dxConnectionConfirmationState{}
	if err := json.NewDecoder(av).Decode(dcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcc.Type(), dcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DxConnectionConfirmation] has state.
func (dcc *DxConnectionConfirmation) State() (*dxConnectionConfirmationState, bool) {
	return dcc.state, dcc.state != nil
}

// StateMust returns the state for [DxConnectionConfirmation]. Panics if the state is nil.
func (dcc *DxConnectionConfirmation) StateMust() *dxConnectionConfirmationState {
	if dcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcc.Type(), dcc.LocalName()))
	}
	return dcc.state
}

// DxConnectionConfirmationArgs contains the configurations for aws_dx_connection_confirmation.
type DxConnectionConfirmationArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type dxConnectionConfirmationAttributes struct {
	ref terra.Reference
}

// ConnectionId returns a reference to field connection_id of aws_dx_connection_confirmation.
func (dcc dxConnectionConfirmationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("connection_id"))
}

// Id returns a reference to field id of aws_dx_connection_confirmation.
func (dcc dxConnectionConfirmationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("id"))
}

type dxConnectionConfirmationState struct {
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
}
