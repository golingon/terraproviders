// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataemrsupportedinstancetypes

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SupportedInstanceTypes struct{}

type SupportedInstanceTypesAttributes struct {
	ref terra.Reference
}

func (sit SupportedInstanceTypesAttributes) InternalRef() (terra.Reference, error) {
	return sit.ref, nil
}

func (sit SupportedInstanceTypesAttributes) InternalWithRef(ref terra.Reference) SupportedInstanceTypesAttributes {
	return SupportedInstanceTypesAttributes{ref: ref}
}

func (sit SupportedInstanceTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sit.ref.InternalTokens()
}

func (sit SupportedInstanceTypesAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(sit.ref.Append("architecture"))
}

func (sit SupportedInstanceTypesAttributes) EbsOptimizedAvailable() terra.BoolValue {
	return terra.ReferenceAsBool(sit.ref.Append("ebs_optimized_available"))
}

func (sit SupportedInstanceTypesAttributes) EbsOptimizedByDefault() terra.BoolValue {
	return terra.ReferenceAsBool(sit.ref.Append("ebs_optimized_by_default"))
}

func (sit SupportedInstanceTypesAttributes) EbsStorageOnly() terra.BoolValue {
	return terra.ReferenceAsBool(sit.ref.Append("ebs_storage_only"))
}

func (sit SupportedInstanceTypesAttributes) InstanceFamilyId() terra.StringValue {
	return terra.ReferenceAsString(sit.ref.Append("instance_family_id"))
}

func (sit SupportedInstanceTypesAttributes) Is64BitsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(sit.ref.Append("is_64_bits_only"))
}

func (sit SupportedInstanceTypesAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(sit.ref.Append("memory_gb"))
}

func (sit SupportedInstanceTypesAttributes) NumberOfDisks() terra.NumberValue {
	return terra.ReferenceAsNumber(sit.ref.Append("number_of_disks"))
}

func (sit SupportedInstanceTypesAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(sit.ref.Append("storage_gb"))
}

func (sit SupportedInstanceTypesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sit.ref.Append("type"))
}

func (sit SupportedInstanceTypesAttributes) Vcpu() terra.NumberValue {
	return terra.ReferenceAsNumber(sit.ref.Append("vcpu"))
}

type SupportedInstanceTypesState struct {
	Architecture          string  `json:"architecture"`
	EbsOptimizedAvailable bool    `json:"ebs_optimized_available"`
	EbsOptimizedByDefault bool    `json:"ebs_optimized_by_default"`
	EbsStorageOnly        bool    `json:"ebs_storage_only"`
	InstanceFamilyId      string  `json:"instance_family_id"`
	Is64BitsOnly          bool    `json:"is_64_bits_only"`
	MemoryGb              float64 `json:"memory_gb"`
	NumberOfDisks         float64 `json:"number_of_disks"`
	StorageGb             float64 `json:"storage_gb"`
	Type                  string  `json:"type"`
	Vcpu                  float64 `json:"vcpu"`
}
