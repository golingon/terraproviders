// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	s3controlaccessgrant "github.com/golingon/terraproviders/aws/5.44.0/s3controlaccessgrant"
	"io"
)

// NewS3ControlAccessGrant creates a new instance of [S3ControlAccessGrant].
func NewS3ControlAccessGrant(name string, args S3ControlAccessGrantArgs) *S3ControlAccessGrant {
	return &S3ControlAccessGrant{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlAccessGrant)(nil)

// S3ControlAccessGrant represents the Terraform resource aws_s3control_access_grant.
type S3ControlAccessGrant struct {
	Name      string
	Args      S3ControlAccessGrantArgs
	state     *s3ControlAccessGrantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) Type() string {
	return "aws_s3control_access_grant"
}

// LocalName returns the local name for [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) LocalName() string {
	return sag.Name
}

// Configuration returns the configuration (args) for [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) Configuration() interface{} {
	return sag.Args
}

// DependOn is used for other resources to depend on [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) DependOn() terra.Reference {
	return terra.ReferenceResource(sag)
}

// Dependencies returns the list of resources [S3ControlAccessGrant] depends_on.
func (sag *S3ControlAccessGrant) Dependencies() terra.Dependencies {
	return sag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) LifecycleManagement() *terra.Lifecycle {
	return sag.Lifecycle
}

// Attributes returns the attributes for [S3ControlAccessGrant].
func (sag *S3ControlAccessGrant) Attributes() s3ControlAccessGrantAttributes {
	return s3ControlAccessGrantAttributes{ref: terra.ReferenceResource(sag)}
}

// ImportState imports the given attribute values into [S3ControlAccessGrant]'s state.
func (sag *S3ControlAccessGrant) ImportState(av io.Reader) error {
	sag.state = &s3ControlAccessGrantState{}
	if err := json.NewDecoder(av).Decode(sag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sag.Type(), sag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3ControlAccessGrant] has state.
func (sag *S3ControlAccessGrant) State() (*s3ControlAccessGrantState, bool) {
	return sag.state, sag.state != nil
}

// StateMust returns the state for [S3ControlAccessGrant]. Panics if the state is nil.
func (sag *S3ControlAccessGrant) StateMust() *s3ControlAccessGrantState {
	if sag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sag.Type(), sag.LocalName()))
	}
	return sag.state
}

// S3ControlAccessGrantArgs contains the configurations for aws_s3control_access_grant.
type S3ControlAccessGrantArgs struct {
	// AccessGrantsLocationId: string, required
	AccessGrantsLocationId terra.StringValue `hcl:"access_grants_location_id,attr" validate:"required"`
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Permission: string, required
	Permission terra.StringValue `hcl:"permission,attr" validate:"required"`
	// S3PrefixType: string, optional
	S3PrefixType terra.StringValue `hcl:"s3_prefix_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AccessGrantsLocationConfiguration: min=0
	AccessGrantsLocationConfiguration []s3controlaccessgrant.AccessGrantsLocationConfiguration `hcl:"access_grants_location_configuration,block" validate:"min=0"`
	// Grantee: min=0
	Grantee []s3controlaccessgrant.Grantee `hcl:"grantee,block" validate:"min=0"`
}
type s3ControlAccessGrantAttributes struct {
	ref terra.Reference
}

// AccessGrantArn returns a reference to field access_grant_arn of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) AccessGrantArn() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("access_grant_arn"))
}

// AccessGrantId returns a reference to field access_grant_id of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) AccessGrantId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("access_grant_id"))
}

// AccessGrantsLocationId returns a reference to field access_grants_location_id of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) AccessGrantsLocationId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("access_grants_location_id"))
}

// AccountId returns a reference to field account_id of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("account_id"))
}

// GrantScope returns a reference to field grant_scope of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) GrantScope() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("grant_scope"))
}

// Id returns a reference to field id of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("id"))
}

// Permission returns a reference to field permission of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("permission"))
}

// S3PrefixType returns a reference to field s3_prefix_type of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) S3PrefixType() terra.StringValue {
	return terra.ReferenceAsString(sag.ref.Append("s3_prefix_type"))
}

// Tags returns a reference to field tags of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sag.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_s3control_access_grant.
func (sag s3ControlAccessGrantAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sag.ref.Append("tags_all"))
}

func (sag s3ControlAccessGrantAttributes) AccessGrantsLocationConfiguration() terra.ListValue[s3controlaccessgrant.AccessGrantsLocationConfigurationAttributes] {
	return terra.ReferenceAsList[s3controlaccessgrant.AccessGrantsLocationConfigurationAttributes](sag.ref.Append("access_grants_location_configuration"))
}

func (sag s3ControlAccessGrantAttributes) Grantee() terra.ListValue[s3controlaccessgrant.GranteeAttributes] {
	return terra.ReferenceAsList[s3controlaccessgrant.GranteeAttributes](sag.ref.Append("grantee"))
}

type s3ControlAccessGrantState struct {
	AccessGrantArn                    string                                                        `json:"access_grant_arn"`
	AccessGrantId                     string                                                        `json:"access_grant_id"`
	AccessGrantsLocationId            string                                                        `json:"access_grants_location_id"`
	AccountId                         string                                                        `json:"account_id"`
	GrantScope                        string                                                        `json:"grant_scope"`
	Id                                string                                                        `json:"id"`
	Permission                        string                                                        `json:"permission"`
	S3PrefixType                      string                                                        `json:"s3_prefix_type"`
	Tags                              map[string]string                                             `json:"tags"`
	TagsAll                           map[string]string                                             `json:"tags_all"`
	AccessGrantsLocationConfiguration []s3controlaccessgrant.AccessGrantsLocationConfigurationState `json:"access_grants_location_configuration"`
	Grantee                           []s3controlaccessgrant.GranteeState                           `json:"grantee"`
}
