// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	lakeformationresourcelftag "github.com/golingon/terraproviders/aws/5.44.0/lakeformationresourcelftag"
	"io"
)

// NewLakeformationResourceLfTag creates a new instance of [LakeformationResourceLfTag].
func NewLakeformationResourceLfTag(name string, args LakeformationResourceLfTagArgs) *LakeformationResourceLfTag {
	return &LakeformationResourceLfTag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LakeformationResourceLfTag)(nil)

// LakeformationResourceLfTag represents the Terraform resource aws_lakeformation_resource_lf_tag.
type LakeformationResourceLfTag struct {
	Name      string
	Args      LakeformationResourceLfTagArgs
	state     *lakeformationResourceLfTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) Type() string {
	return "aws_lakeformation_resource_lf_tag"
}

// LocalName returns the local name for [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) LocalName() string {
	return lrlt.Name
}

// Configuration returns the configuration (args) for [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) Configuration() interface{} {
	return lrlt.Args
}

// DependOn is used for other resources to depend on [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) DependOn() terra.Reference {
	return terra.ReferenceResource(lrlt)
}

// Dependencies returns the list of resources [LakeformationResourceLfTag] depends_on.
func (lrlt *LakeformationResourceLfTag) Dependencies() terra.Dependencies {
	return lrlt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) LifecycleManagement() *terra.Lifecycle {
	return lrlt.Lifecycle
}

// Attributes returns the attributes for [LakeformationResourceLfTag].
func (lrlt *LakeformationResourceLfTag) Attributes() lakeformationResourceLfTagAttributes {
	return lakeformationResourceLfTagAttributes{ref: terra.ReferenceResource(lrlt)}
}

// ImportState imports the given attribute values into [LakeformationResourceLfTag]'s state.
func (lrlt *LakeformationResourceLfTag) ImportState(av io.Reader) error {
	lrlt.state = &lakeformationResourceLfTagState{}
	if err := json.NewDecoder(av).Decode(lrlt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lrlt.Type(), lrlt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LakeformationResourceLfTag] has state.
func (lrlt *LakeformationResourceLfTag) State() (*lakeformationResourceLfTagState, bool) {
	return lrlt.state, lrlt.state != nil
}

// StateMust returns the state for [LakeformationResourceLfTag]. Panics if the state is nil.
func (lrlt *LakeformationResourceLfTag) StateMust() *lakeformationResourceLfTagState {
	if lrlt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lrlt.Type(), lrlt.LocalName()))
	}
	return lrlt.state
}

// LakeformationResourceLfTagArgs contains the configurations for aws_lakeformation_resource_lf_tag.
type LakeformationResourceLfTagArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Database: min=0
	Database []lakeformationresourcelftag.Database `hcl:"database,block" validate:"min=0"`
	// LfTag: min=0
	LfTag []lakeformationresourcelftag.LfTag `hcl:"lf_tag,block" validate:"min=0"`
	// Table: min=0
	Table []lakeformationresourcelftag.Table `hcl:"table,block" validate:"min=0"`
	// TableWithColumns: min=0
	TableWithColumns []lakeformationresourcelftag.TableWithColumns `hcl:"table_with_columns,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *lakeformationresourcelftag.Timeouts `hcl:"timeouts,block"`
}
type lakeformationResourceLfTagAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_resource_lf_tag.
func (lrlt lakeformationResourceLfTagAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(lrlt.ref.Append("catalog_id"))
}

// Id returns a reference to field id of aws_lakeformation_resource_lf_tag.
func (lrlt lakeformationResourceLfTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lrlt.ref.Append("id"))
}

func (lrlt lakeformationResourceLfTagAttributes) Database() terra.ListValue[lakeformationresourcelftag.DatabaseAttributes] {
	return terra.ReferenceAsList[lakeformationresourcelftag.DatabaseAttributes](lrlt.ref.Append("database"))
}

func (lrlt lakeformationResourceLfTagAttributes) LfTag() terra.ListValue[lakeformationresourcelftag.LfTagAttributes] {
	return terra.ReferenceAsList[lakeformationresourcelftag.LfTagAttributes](lrlt.ref.Append("lf_tag"))
}

func (lrlt lakeformationResourceLfTagAttributes) Table() terra.ListValue[lakeformationresourcelftag.TableAttributes] {
	return terra.ReferenceAsList[lakeformationresourcelftag.TableAttributes](lrlt.ref.Append("table"))
}

func (lrlt lakeformationResourceLfTagAttributes) TableWithColumns() terra.ListValue[lakeformationresourcelftag.TableWithColumnsAttributes] {
	return terra.ReferenceAsList[lakeformationresourcelftag.TableWithColumnsAttributes](lrlt.ref.Append("table_with_columns"))
}

func (lrlt lakeformationResourceLfTagAttributes) Timeouts() lakeformationresourcelftag.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lakeformationresourcelftag.TimeoutsAttributes](lrlt.ref.Append("timeouts"))
}

type lakeformationResourceLfTagState struct {
	CatalogId        string                                             `json:"catalog_id"`
	Id               string                                             `json:"id"`
	Database         []lakeformationresourcelftag.DatabaseState         `json:"database"`
	LfTag            []lakeformationresourcelftag.LfTagState            `json:"lf_tag"`
	Table            []lakeformationresourcelftag.TableState            `json:"table"`
	TableWithColumns []lakeformationresourcelftag.TableWithColumnsState `json:"table_with_columns"`
	Timeouts         *lakeformationresourcelftag.TimeoutsState          `json:"timeouts"`
}
