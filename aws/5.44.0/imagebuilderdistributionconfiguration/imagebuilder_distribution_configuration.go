// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package imagebuilderdistributionconfiguration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Distribution struct {
	// LicenseConfigurationArns: set of string, optional
	LicenseConfigurationArns terra.SetValue[terra.StringValue] `hcl:"license_configuration_arns,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// AmiDistributionConfiguration: optional
	AmiDistributionConfiguration *AmiDistributionConfiguration `hcl:"ami_distribution_configuration,block"`
	// ContainerDistributionConfiguration: optional
	ContainerDistributionConfiguration *ContainerDistributionConfiguration `hcl:"container_distribution_configuration,block"`
	// FastLaunchConfiguration: min=0,max=1000
	FastLaunchConfiguration []FastLaunchConfiguration `hcl:"fast_launch_configuration,block" validate:"min=0,max=1000"`
	// LaunchTemplateConfiguration: min=0,max=100
	LaunchTemplateConfiguration []LaunchTemplateConfiguration `hcl:"launch_template_configuration,block" validate:"min=0,max=100"`
}

type AmiDistributionConfiguration struct {
	// AmiTags: map of string, optional
	AmiTags terra.MapValue[terra.StringValue] `hcl:"ami_tags,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetAccountIds: set of string, optional
	TargetAccountIds terra.SetValue[terra.StringValue] `hcl:"target_account_ids,attr"`
	// LaunchPermission: optional
	LaunchPermission *LaunchPermission `hcl:"launch_permission,block"`
}

type LaunchPermission struct {
	// OrganizationArns: set of string, optional
	OrganizationArns terra.SetValue[terra.StringValue] `hcl:"organization_arns,attr"`
	// OrganizationalUnitArns: set of string, optional
	OrganizationalUnitArns terra.SetValue[terra.StringValue] `hcl:"organizational_unit_arns,attr"`
	// UserGroups: set of string, optional
	UserGroups terra.SetValue[terra.StringValue] `hcl:"user_groups,attr"`
	// UserIds: set of string, optional
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
}

type ContainerDistributionConfiguration struct {
	// ContainerTags: set of string, optional
	ContainerTags terra.SetValue[terra.StringValue] `hcl:"container_tags,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// TargetRepository: required
	TargetRepository *TargetRepository `hcl:"target_repository,block" validate:"required"`
}

type TargetRepository struct {
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type FastLaunchConfiguration struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// MaxParallelLaunches: number, optional
	MaxParallelLaunches terra.NumberValue `hcl:"max_parallel_launches,attr"`
	// LaunchTemplate: optional
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
	// SnapshotConfiguration: optional
	SnapshotConfiguration *SnapshotConfiguration `hcl:"snapshot_configuration,block"`
}

type LaunchTemplate struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// LaunchTemplateVersion: string, optional
	LaunchTemplateVersion terra.StringValue `hcl:"launch_template_version,attr"`
}

type SnapshotConfiguration struct {
	// TargetResourceCount: number, optional
	TargetResourceCount terra.NumberValue `hcl:"target_resource_count,attr"`
}

type LaunchTemplateConfiguration struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Default: bool, optional
	Default terra.BoolValue `hcl:"default,attr"`
	// LaunchTemplateId: string, required
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr" validate:"required"`
}

type DistributionAttributes struct {
	ref terra.Reference
}

func (d DistributionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DistributionAttributes) InternalWithRef(ref terra.Reference) DistributionAttributes {
	return DistributionAttributes{ref: ref}
}

func (d DistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DistributionAttributes) LicenseConfigurationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("license_configuration_arns"))
}

func (d DistributionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d DistributionAttributes) AmiDistributionConfiguration() terra.ListValue[AmiDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[AmiDistributionConfigurationAttributes](d.ref.Append("ami_distribution_configuration"))
}

func (d DistributionAttributes) ContainerDistributionConfiguration() terra.ListValue[ContainerDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[ContainerDistributionConfigurationAttributes](d.ref.Append("container_distribution_configuration"))
}

func (d DistributionAttributes) FastLaunchConfiguration() terra.SetValue[FastLaunchConfigurationAttributes] {
	return terra.ReferenceAsSet[FastLaunchConfigurationAttributes](d.ref.Append("fast_launch_configuration"))
}

func (d DistributionAttributes) LaunchTemplateConfiguration() terra.SetValue[LaunchTemplateConfigurationAttributes] {
	return terra.ReferenceAsSet[LaunchTemplateConfigurationAttributes](d.ref.Append("launch_template_configuration"))
}

type AmiDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (adc AmiDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc AmiDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) AmiDistributionConfigurationAttributes {
	return AmiDistributionConfigurationAttributes{ref: ref}
}

func (adc AmiDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc AmiDistributionConfigurationAttributes) AmiTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("ami_tags"))
}

func (adc AmiDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

func (adc AmiDistributionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

func (adc AmiDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

func (adc AmiDistributionConfigurationAttributes) TargetAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("target_account_ids"))
}

func (adc AmiDistributionConfigurationAttributes) LaunchPermission() terra.ListValue[LaunchPermissionAttributes] {
	return terra.ReferenceAsList[LaunchPermissionAttributes](adc.ref.Append("launch_permission"))
}

type LaunchPermissionAttributes struct {
	ref terra.Reference
}

func (lp LaunchPermissionAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp LaunchPermissionAttributes) InternalWithRef(ref terra.Reference) LaunchPermissionAttributes {
	return LaunchPermissionAttributes{ref: ref}
}

func (lp LaunchPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp LaunchPermissionAttributes) OrganizationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organization_arns"))
}

func (lp LaunchPermissionAttributes) OrganizationalUnitArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organizational_unit_arns"))
}

func (lp LaunchPermissionAttributes) UserGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_groups"))
}

func (lp LaunchPermissionAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_ids"))
}

type ContainerDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc ContainerDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc ContainerDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) ContainerDistributionConfigurationAttributes {
	return ContainerDistributionConfigurationAttributes{ref: ref}
}

func (cdc ContainerDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc ContainerDistributionConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdc.ref.Append("container_tags"))
}

func (cdc ContainerDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("description"))
}

func (cdc ContainerDistributionConfigurationAttributes) TargetRepository() terra.ListValue[TargetRepositoryAttributes] {
	return terra.ReferenceAsList[TargetRepositoryAttributes](cdc.ref.Append("target_repository"))
}

type TargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr TargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TargetRepositoryAttributes) InternalWithRef(ref terra.Reference) TargetRepositoryAttributes {
	return TargetRepositoryAttributes{ref: ref}
}

func (tr TargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr TargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type FastLaunchConfigurationAttributes struct {
	ref terra.Reference
}

func (flc FastLaunchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return flc.ref, nil
}

func (flc FastLaunchConfigurationAttributes) InternalWithRef(ref terra.Reference) FastLaunchConfigurationAttributes {
	return FastLaunchConfigurationAttributes{ref: ref}
}

func (flc FastLaunchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return flc.ref.InternalTokens()
}

func (flc FastLaunchConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(flc.ref.Append("account_id"))
}

func (flc FastLaunchConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(flc.ref.Append("enabled"))
}

func (flc FastLaunchConfigurationAttributes) MaxParallelLaunches() terra.NumberValue {
	return terra.ReferenceAsNumber(flc.ref.Append("max_parallel_launches"))
}

func (flc FastLaunchConfigurationAttributes) LaunchTemplate() terra.ListValue[LaunchTemplateAttributes] {
	return terra.ReferenceAsList[LaunchTemplateAttributes](flc.ref.Append("launch_template"))
}

func (flc FastLaunchConfigurationAttributes) SnapshotConfiguration() terra.ListValue[SnapshotConfigurationAttributes] {
	return terra.ReferenceAsList[SnapshotConfigurationAttributes](flc.ref.Append("snapshot_configuration"))
}

type LaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt LaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt LaunchTemplateAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateAttributes {
	return LaunchTemplateAttributes{ref: ref}
}

func (lt LaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt LaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt LaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt LaunchTemplateAttributes) LaunchTemplateVersion() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_version"))
}

type SnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) SnapshotConfigurationAttributes {
	return SnapshotConfigurationAttributes{ref: ref}
}

func (sc SnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SnapshotConfigurationAttributes) TargetResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("target_resource_count"))
}

type LaunchTemplateConfigurationAttributes struct {
	ref terra.Reference
}

func (ltc LaunchTemplateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc LaunchTemplateConfigurationAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateConfigurationAttributes {
	return LaunchTemplateConfigurationAttributes{ref: ref}
}

func (ltc LaunchTemplateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltc.ref.InternalTokens()
}

func (ltc LaunchTemplateConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("account_id"))
}

func (ltc LaunchTemplateConfigurationAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(ltc.ref.Append("default"))
}

func (ltc LaunchTemplateConfigurationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("launch_template_id"))
}

type DistributionState struct {
	LicenseConfigurationArns           []string                                  `json:"license_configuration_arns"`
	Region                             string                                    `json:"region"`
	AmiDistributionConfiguration       []AmiDistributionConfigurationState       `json:"ami_distribution_configuration"`
	ContainerDistributionConfiguration []ContainerDistributionConfigurationState `json:"container_distribution_configuration"`
	FastLaunchConfiguration            []FastLaunchConfigurationState            `json:"fast_launch_configuration"`
	LaunchTemplateConfiguration        []LaunchTemplateConfigurationState        `json:"launch_template_configuration"`
}

type AmiDistributionConfigurationState struct {
	AmiTags          map[string]string       `json:"ami_tags"`
	Description      string                  `json:"description"`
	KmsKeyId         string                  `json:"kms_key_id"`
	Name             string                  `json:"name"`
	TargetAccountIds []string                `json:"target_account_ids"`
	LaunchPermission []LaunchPermissionState `json:"launch_permission"`
}

type LaunchPermissionState struct {
	OrganizationArns       []string `json:"organization_arns"`
	OrganizationalUnitArns []string `json:"organizational_unit_arns"`
	UserGroups             []string `json:"user_groups"`
	UserIds                []string `json:"user_ids"`
}

type ContainerDistributionConfigurationState struct {
	ContainerTags    []string                `json:"container_tags"`
	Description      string                  `json:"description"`
	TargetRepository []TargetRepositoryState `json:"target_repository"`
}

type TargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}

type FastLaunchConfigurationState struct {
	AccountId             string                       `json:"account_id"`
	Enabled               bool                         `json:"enabled"`
	MaxParallelLaunches   float64                      `json:"max_parallel_launches"`
	LaunchTemplate        []LaunchTemplateState        `json:"launch_template"`
	SnapshotConfiguration []SnapshotConfigurationState `json:"snapshot_configuration"`
}

type LaunchTemplateState struct {
	LaunchTemplateId      string `json:"launch_template_id"`
	LaunchTemplateName    string `json:"launch_template_name"`
	LaunchTemplateVersion string `json:"launch_template_version"`
}

type SnapshotConfigurationState struct {
	TargetResourceCount float64 `json:"target_resource_count"`
}

type LaunchTemplateConfigurationState struct {
	AccountId        string `json:"account_id"`
	Default          bool   `json:"default"`
	LaunchTemplateId string `json:"launch_template_id"`
}
