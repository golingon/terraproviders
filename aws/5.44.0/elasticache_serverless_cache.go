// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	elasticacheserverlesscache "github.com/golingon/terraproviders/aws/5.44.0/elasticacheserverlesscache"
	"io"
)

// NewElasticacheServerlessCache creates a new instance of [ElasticacheServerlessCache].
func NewElasticacheServerlessCache(name string, args ElasticacheServerlessCacheArgs) *ElasticacheServerlessCache {
	return &ElasticacheServerlessCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheServerlessCache)(nil)

// ElasticacheServerlessCache represents the Terraform resource aws_elasticache_serverless_cache.
type ElasticacheServerlessCache struct {
	Name      string
	Args      ElasticacheServerlessCacheArgs
	state     *elasticacheServerlessCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) Type() string {
	return "aws_elasticache_serverless_cache"
}

// LocalName returns the local name for [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) LocalName() string {
	return esc.Name
}

// Configuration returns the configuration (args) for [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) Configuration() interface{} {
	return esc.Args
}

// DependOn is used for other resources to depend on [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) DependOn() terra.Reference {
	return terra.ReferenceResource(esc)
}

// Dependencies returns the list of resources [ElasticacheServerlessCache] depends_on.
func (esc *ElasticacheServerlessCache) Dependencies() terra.Dependencies {
	return esc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) LifecycleManagement() *terra.Lifecycle {
	return esc.Lifecycle
}

// Attributes returns the attributes for [ElasticacheServerlessCache].
func (esc *ElasticacheServerlessCache) Attributes() elasticacheServerlessCacheAttributes {
	return elasticacheServerlessCacheAttributes{ref: terra.ReferenceResource(esc)}
}

// ImportState imports the given attribute values into [ElasticacheServerlessCache]'s state.
func (esc *ElasticacheServerlessCache) ImportState(av io.Reader) error {
	esc.state = &elasticacheServerlessCacheState{}
	if err := json.NewDecoder(av).Decode(esc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esc.Type(), esc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ElasticacheServerlessCache] has state.
func (esc *ElasticacheServerlessCache) State() (*elasticacheServerlessCacheState, bool) {
	return esc.state, esc.state != nil
}

// StateMust returns the state for [ElasticacheServerlessCache]. Panics if the state is nil.
func (esc *ElasticacheServerlessCache) StateMust() *elasticacheServerlessCacheState {
	if esc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esc.Type(), esc.LocalName()))
	}
	return esc.state
}

// ElasticacheServerlessCacheArgs contains the configurations for aws_elasticache_serverless_cache.
type ElasticacheServerlessCacheArgs struct {
	// DailySnapshotTime: string, optional
	DailySnapshotTime terra.StringValue `hcl:"daily_snapshot_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Engine: string, required
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MajorEngineVersion: string, optional
	MajorEngineVersion terra.StringValue `hcl:"major_engine_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SnapshotArnsToRestore: list of string, optional
	SnapshotArnsToRestore terra.ListValue[terra.StringValue] `hcl:"snapshot_arns_to_restore,attr"`
	// SnapshotRetentionLimit: number, optional
	SnapshotRetentionLimit terra.NumberValue `hcl:"snapshot_retention_limit,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UserGroupId: string, optional
	UserGroupId terra.StringValue `hcl:"user_group_id,attr"`
	// Endpoint: min=0
	Endpoint []elasticacheserverlesscache.Endpoint `hcl:"endpoint,block" validate:"min=0"`
	// ReaderEndpoint: min=0
	ReaderEndpoint []elasticacheserverlesscache.ReaderEndpoint `hcl:"reader_endpoint,block" validate:"min=0"`
	// CacheUsageLimits: min=0
	CacheUsageLimits []elasticacheserverlesscache.CacheUsageLimits `hcl:"cache_usage_limits,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *elasticacheserverlesscache.Timeouts `hcl:"timeouts,block"`
}
type elasticacheServerlessCacheAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("create_time"))
}

// DailySnapshotTime returns a reference to field daily_snapshot_time of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) DailySnapshotTime() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("daily_snapshot_time"))
}

// Description returns a reference to field description of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("description"))
}

// Engine returns a reference to field engine of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("engine"))
}

// FullEngineVersion returns a reference to field full_engine_version of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) FullEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("full_engine_version"))
}

// Id returns a reference to field id of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("kms_key_id"))
}

// MajorEngineVersion returns a reference to field major_engine_version of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) MajorEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("major_engine_version"))
}

// Name returns a reference to field name of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("name"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](esc.ref.Append("security_group_ids"))
}

// SnapshotArnsToRestore returns a reference to field snapshot_arns_to_restore of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) SnapshotArnsToRestore() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](esc.ref.Append("snapshot_arns_to_restore"))
}

// SnapshotRetentionLimit returns a reference to field snapshot_retention_limit of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) SnapshotRetentionLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("snapshot_retention_limit"))
}

// Status returns a reference to field status of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("status"))
}

// SubnetIds returns a reference to field subnet_ids of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](esc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](esc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](esc.ref.Append("tags_all"))
}

// UserGroupId returns a reference to field user_group_id of aws_elasticache_serverless_cache.
func (esc elasticacheServerlessCacheAttributes) UserGroupId() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("user_group_id"))
}

func (esc elasticacheServerlessCacheAttributes) Endpoint() terra.ListValue[elasticacheserverlesscache.EndpointAttributes] {
	return terra.ReferenceAsList[elasticacheserverlesscache.EndpointAttributes](esc.ref.Append("endpoint"))
}

func (esc elasticacheServerlessCacheAttributes) ReaderEndpoint() terra.ListValue[elasticacheserverlesscache.ReaderEndpointAttributes] {
	return terra.ReferenceAsList[elasticacheserverlesscache.ReaderEndpointAttributes](esc.ref.Append("reader_endpoint"))
}

func (esc elasticacheServerlessCacheAttributes) CacheUsageLimits() terra.ListValue[elasticacheserverlesscache.CacheUsageLimitsAttributes] {
	return terra.ReferenceAsList[elasticacheserverlesscache.CacheUsageLimitsAttributes](esc.ref.Append("cache_usage_limits"))
}

func (esc elasticacheServerlessCacheAttributes) Timeouts() elasticacheserverlesscache.TimeoutsAttributes {
	return terra.ReferenceAsSingle[elasticacheserverlesscache.TimeoutsAttributes](esc.ref.Append("timeouts"))
}

type elasticacheServerlessCacheState struct {
	Arn                    string                                             `json:"arn"`
	CreateTime             string                                             `json:"create_time"`
	DailySnapshotTime      string                                             `json:"daily_snapshot_time"`
	Description            string                                             `json:"description"`
	Engine                 string                                             `json:"engine"`
	FullEngineVersion      string                                             `json:"full_engine_version"`
	Id                     string                                             `json:"id"`
	KmsKeyId               string                                             `json:"kms_key_id"`
	MajorEngineVersion     string                                             `json:"major_engine_version"`
	Name                   string                                             `json:"name"`
	SecurityGroupIds       []string                                           `json:"security_group_ids"`
	SnapshotArnsToRestore  []string                                           `json:"snapshot_arns_to_restore"`
	SnapshotRetentionLimit float64                                            `json:"snapshot_retention_limit"`
	Status                 string                                             `json:"status"`
	SubnetIds              []string                                           `json:"subnet_ids"`
	Tags                   map[string]string                                  `json:"tags"`
	TagsAll                map[string]string                                  `json:"tags_all"`
	UserGroupId            string                                             `json:"user_group_id"`
	Endpoint               []elasticacheserverlesscache.EndpointState         `json:"endpoint"`
	ReaderEndpoint         []elasticacheserverlesscache.ReaderEndpointState   `json:"reader_endpoint"`
	CacheUsageLimits       []elasticacheserverlesscache.CacheUsageLimitsState `json:"cache_usage_limits"`
	Timeouts               *elasticacheserverlesscache.TimeoutsState          `json:"timeouts"`
}
