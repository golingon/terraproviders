// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package prometheusscraper

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// Amp: min=0
	Amp []Amp `hcl:"amp,block" validate:"min=0"`
}

type Amp struct {
	// WorkspaceArn: string, required
	WorkspaceArn terra.StringValue `hcl:"workspace_arn,attr" validate:"required"`
}

type Source struct {
	// Eks: min=0
	Eks []Eks `hcl:"eks,block" validate:"min=0"`
}

type Eks struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) Amp() terra.ListValue[AmpAttributes] {
	return terra.ReferenceAsList[AmpAttributes](d.ref.Append("amp"))
}

type AmpAttributes struct {
	ref terra.Reference
}

func (a AmpAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AmpAttributes) InternalWithRef(ref terra.Reference) AmpAttributes {
	return AmpAttributes{ref: ref}
}

func (a AmpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AmpAttributes) WorkspaceArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("workspace_arn"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Eks() terra.ListValue[EksAttributes] {
	return terra.ReferenceAsList[EksAttributes](s.ref.Append("eks"))
}

type EksAttributes struct {
	ref terra.Reference
}

func (e EksAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EksAttributes) InternalWithRef(ref terra.Reference) EksAttributes {
	return EksAttributes{ref: ref}
}

func (e EksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EksAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cluster_arn"))
}

func (e EksAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("security_group_ids"))
}

func (e EksAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("subnet_ids"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DestinationState struct {
	Amp []AmpState `json:"amp"`
}

type AmpState struct {
	WorkspaceArn string `json:"workspace_arn"`
}

type SourceState struct {
	Eks []EksState `json:"eks"`
}

type EksState struct {
	ClusterArn       string   `json:"cluster_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
