// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewDirectoryServiceTrust creates a new instance of [DirectoryServiceTrust].
func NewDirectoryServiceTrust(name string, args DirectoryServiceTrustArgs) *DirectoryServiceTrust {
	return &DirectoryServiceTrust{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryServiceTrust)(nil)

// DirectoryServiceTrust represents the Terraform resource aws_directory_service_trust.
type DirectoryServiceTrust struct {
	Name      string
	Args      DirectoryServiceTrustArgs
	state     *directoryServiceTrustState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) Type() string {
	return "aws_directory_service_trust"
}

// LocalName returns the local name for [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) LocalName() string {
	return dst.Name
}

// Configuration returns the configuration (args) for [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) Configuration() interface{} {
	return dst.Args
}

// DependOn is used for other resources to depend on [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) DependOn() terra.Reference {
	return terra.ReferenceResource(dst)
}

// Dependencies returns the list of resources [DirectoryServiceTrust] depends_on.
func (dst *DirectoryServiceTrust) Dependencies() terra.Dependencies {
	return dst.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) LifecycleManagement() *terra.Lifecycle {
	return dst.Lifecycle
}

// Attributes returns the attributes for [DirectoryServiceTrust].
func (dst *DirectoryServiceTrust) Attributes() directoryServiceTrustAttributes {
	return directoryServiceTrustAttributes{ref: terra.ReferenceResource(dst)}
}

// ImportState imports the given attribute values into [DirectoryServiceTrust]'s state.
func (dst *DirectoryServiceTrust) ImportState(av io.Reader) error {
	dst.state = &directoryServiceTrustState{}
	if err := json.NewDecoder(av).Decode(dst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dst.Type(), dst.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DirectoryServiceTrust] has state.
func (dst *DirectoryServiceTrust) State() (*directoryServiceTrustState, bool) {
	return dst.state, dst.state != nil
}

// StateMust returns the state for [DirectoryServiceTrust]. Panics if the state is nil.
func (dst *DirectoryServiceTrust) StateMust() *directoryServiceTrustState {
	if dst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dst.Type(), dst.LocalName()))
	}
	return dst.state
}

// DirectoryServiceTrustArgs contains the configurations for aws_directory_service_trust.
type DirectoryServiceTrustArgs struct {
	// ConditionalForwarderIpAddrs: set of string, optional
	ConditionalForwarderIpAddrs terra.SetValue[terra.StringValue] `hcl:"conditional_forwarder_ip_addrs,attr"`
	// DeleteAssociatedConditionalForwarder: bool, optional
	DeleteAssociatedConditionalForwarder terra.BoolValue `hcl:"delete_associated_conditional_forwarder,attr"`
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// RemoteDomainName: string, required
	RemoteDomainName terra.StringValue `hcl:"remote_domain_name,attr" validate:"required"`
	// SelectiveAuth: string, optional
	SelectiveAuth terra.StringValue `hcl:"selective_auth,attr"`
	// TrustDirection: string, required
	TrustDirection terra.StringValue `hcl:"trust_direction,attr" validate:"required"`
	// TrustPassword: string, required
	TrustPassword terra.StringValue `hcl:"trust_password,attr" validate:"required"`
	// TrustType: string, optional
	TrustType terra.StringValue `hcl:"trust_type,attr"`
}
type directoryServiceTrustAttributes struct {
	ref terra.Reference
}

// ConditionalForwarderIpAddrs returns a reference to field conditional_forwarder_ip_addrs of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) ConditionalForwarderIpAddrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dst.ref.Append("conditional_forwarder_ip_addrs"))
}

// CreatedDateTime returns a reference to field created_date_time of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) CreatedDateTime() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("created_date_time"))
}

// DeleteAssociatedConditionalForwarder returns a reference to field delete_associated_conditional_forwarder of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) DeleteAssociatedConditionalForwarder() terra.BoolValue {
	return terra.ReferenceAsBool(dst.ref.Append("delete_associated_conditional_forwarder"))
}

// DirectoryId returns a reference to field directory_id of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("directory_id"))
}

// Id returns a reference to field id of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("id"))
}

// LastUpdatedDateTime returns a reference to field last_updated_date_time of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) LastUpdatedDateTime() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("last_updated_date_time"))
}

// RemoteDomainName returns a reference to field remote_domain_name of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) RemoteDomainName() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("remote_domain_name"))
}

// SelectiveAuth returns a reference to field selective_auth of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) SelectiveAuth() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("selective_auth"))
}

// StateLastUpdatedDateTime returns a reference to field state_last_updated_date_time of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) StateLastUpdatedDateTime() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("state_last_updated_date_time"))
}

// TrustDirection returns a reference to field trust_direction of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) TrustDirection() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("trust_direction"))
}

// TrustPassword returns a reference to field trust_password of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) TrustPassword() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("trust_password"))
}

// TrustState returns a reference to field trust_state of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) TrustState() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("trust_state"))
}

// TrustStateReason returns a reference to field trust_state_reason of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) TrustStateReason() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("trust_state_reason"))
}

// TrustType returns a reference to field trust_type of aws_directory_service_trust.
func (dst directoryServiceTrustAttributes) TrustType() terra.StringValue {
	return terra.ReferenceAsString(dst.ref.Append("trust_type"))
}

type directoryServiceTrustState struct {
	ConditionalForwarderIpAddrs          []string `json:"conditional_forwarder_ip_addrs"`
	CreatedDateTime                      string   `json:"created_date_time"`
	DeleteAssociatedConditionalForwarder bool     `json:"delete_associated_conditional_forwarder"`
	DirectoryId                          string   `json:"directory_id"`
	Id                                   string   `json:"id"`
	LastUpdatedDateTime                  string   `json:"last_updated_date_time"`
	RemoteDomainName                     string   `json:"remote_domain_name"`
	SelectiveAuth                        string   `json:"selective_auth"`
	StateLastUpdatedDateTime             string   `json:"state_last_updated_date_time"`
	TrustDirection                       string   `json:"trust_direction"`
	TrustPassword                        string   `json:"trust_password"`
	TrustState                           string   `json:"trust_state"`
	TrustStateReason                     string   `json:"trust_state_reason"`
	TrustType                            string   `json:"trust_type"`
}
