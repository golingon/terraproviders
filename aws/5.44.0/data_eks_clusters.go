// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataEksClusters creates a new instance of [DataEksClusters].
func NewDataEksClusters(name string, args DataEksClustersArgs) *DataEksClusters {
	return &DataEksClusters{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEksClusters)(nil)

// DataEksClusters represents the Terraform data resource aws_eks_clusters.
type DataEksClusters struct {
	Name string
	Args DataEksClustersArgs
}

// DataSource returns the Terraform object type for [DataEksClusters].
func (ec *DataEksClusters) DataSource() string {
	return "aws_eks_clusters"
}

// LocalName returns the local name for [DataEksClusters].
func (ec *DataEksClusters) LocalName() string {
	return ec.Name
}

// Configuration returns the configuration (args) for [DataEksClusters].
func (ec *DataEksClusters) Configuration() interface{} {
	return ec.Args
}

// Attributes returns the attributes for [DataEksClusters].
func (ec *DataEksClusters) Attributes() dataEksClustersAttributes {
	return dataEksClustersAttributes{ref: terra.ReferenceDataResource(ec)}
}

// DataEksClustersArgs contains the configurations for aws_eks_clusters.
type DataEksClustersArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type dataEksClustersAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_eks_clusters.
func (ec dataEksClustersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("id"))
}

// Names returns a reference to field names of aws_eks_clusters.
func (ec dataEksClustersAttributes) Names() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("names"))
}
