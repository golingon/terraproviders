// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	codeguruprofilerprofilinggroup "github.com/golingon/terraproviders/aws/5.44.0/codeguruprofilerprofilinggroup"
	"io"
)

// NewCodeguruprofilerProfilingGroup creates a new instance of [CodeguruprofilerProfilingGroup].
func NewCodeguruprofilerProfilingGroup(name string, args CodeguruprofilerProfilingGroupArgs) *CodeguruprofilerProfilingGroup {
	return &CodeguruprofilerProfilingGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodeguruprofilerProfilingGroup)(nil)

// CodeguruprofilerProfilingGroup represents the Terraform resource aws_codeguruprofiler_profiling_group.
type CodeguruprofilerProfilingGroup struct {
	Name      string
	Args      CodeguruprofilerProfilingGroupArgs
	state     *codeguruprofilerProfilingGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) Type() string {
	return "aws_codeguruprofiler_profiling_group"
}

// LocalName returns the local name for [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) LocalName() string {
	return cpg.Name
}

// Configuration returns the configuration (args) for [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) Configuration() interface{} {
	return cpg.Args
}

// DependOn is used for other resources to depend on [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cpg)
}

// Dependencies returns the list of resources [CodeguruprofilerProfilingGroup] depends_on.
func (cpg *CodeguruprofilerProfilingGroup) Dependencies() terra.Dependencies {
	return cpg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) LifecycleManagement() *terra.Lifecycle {
	return cpg.Lifecycle
}

// Attributes returns the attributes for [CodeguruprofilerProfilingGroup].
func (cpg *CodeguruprofilerProfilingGroup) Attributes() codeguruprofilerProfilingGroupAttributes {
	return codeguruprofilerProfilingGroupAttributes{ref: terra.ReferenceResource(cpg)}
}

// ImportState imports the given attribute values into [CodeguruprofilerProfilingGroup]'s state.
func (cpg *CodeguruprofilerProfilingGroup) ImportState(av io.Reader) error {
	cpg.state = &codeguruprofilerProfilingGroupState{}
	if err := json.NewDecoder(av).Decode(cpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpg.Type(), cpg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CodeguruprofilerProfilingGroup] has state.
func (cpg *CodeguruprofilerProfilingGroup) State() (*codeguruprofilerProfilingGroupState, bool) {
	return cpg.state, cpg.state != nil
}

// StateMust returns the state for [CodeguruprofilerProfilingGroup]. Panics if the state is nil.
func (cpg *CodeguruprofilerProfilingGroup) StateMust() *codeguruprofilerProfilingGroupState {
	if cpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpg.Type(), cpg.LocalName()))
	}
	return cpg.state
}

// CodeguruprofilerProfilingGroupArgs contains the configurations for aws_codeguruprofiler_profiling_group.
type CodeguruprofilerProfilingGroupArgs struct {
	// ComputePlatform: string, optional
	ComputePlatform terra.StringValue `hcl:"compute_platform,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AgentOrchestrationConfig: min=0
	AgentOrchestrationConfig []codeguruprofilerprofilinggroup.AgentOrchestrationConfig `hcl:"agent_orchestration_config,block" validate:"min=0"`
}
type codeguruprofilerProfilingGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cpg.ref.Append("arn"))
}

// ComputePlatform returns a reference to field compute_platform of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceAsString(cpg.ref.Append("compute_platform"))
}

// Id returns a reference to field id of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cpg.ref.Append("id"))
}

// Name returns a reference to field name of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cpg.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cpg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codeguruprofiler_profiling_group.
func (cpg codeguruprofilerProfilingGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cpg.ref.Append("tags_all"))
}

func (cpg codeguruprofilerProfilingGroupAttributes) AgentOrchestrationConfig() terra.ListValue[codeguruprofilerprofilinggroup.AgentOrchestrationConfigAttributes] {
	return terra.ReferenceAsList[codeguruprofilerprofilinggroup.AgentOrchestrationConfigAttributes](cpg.ref.Append("agent_orchestration_config"))
}

type codeguruprofilerProfilingGroupState struct {
	Arn                      string                                                         `json:"arn"`
	ComputePlatform          string                                                         `json:"compute_platform"`
	Id                       string                                                         `json:"id"`
	Name                     string                                                         `json:"name"`
	Tags                     map[string]string                                              `json:"tags"`
	TagsAll                  map[string]string                                              `json:"tags_all"`
	AgentOrchestrationConfig []codeguruprofilerprofilinggroup.AgentOrchestrationConfigState `json:"agent_orchestration_config"`
}
