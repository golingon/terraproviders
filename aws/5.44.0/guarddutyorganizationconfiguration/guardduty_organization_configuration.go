// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package guarddutyorganizationconfiguration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Datasources struct {
	// Kubernetes: optional
	Kubernetes *Kubernetes `hcl:"kubernetes,block"`
	// MalwareProtection: optional
	MalwareProtection *MalwareProtection `hcl:"malware_protection,block"`
	// S3Logs: optional
	S3Logs *S3Logs `hcl:"s3_logs,block"`
}

type Kubernetes struct {
	// AuditLogs: required
	AuditLogs *AuditLogs `hcl:"audit_logs,block" validate:"required"`
}

type AuditLogs struct {
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type MalwareProtection struct {
	// ScanEc2InstanceWithFindings: required
	ScanEc2InstanceWithFindings *ScanEc2InstanceWithFindings `hcl:"scan_ec2_instance_with_findings,block" validate:"required"`
}

type ScanEc2InstanceWithFindings struct {
	// EbsVolumes: required
	EbsVolumes *EbsVolumes `hcl:"ebs_volumes,block" validate:"required"`
}

type EbsVolumes struct {
	// AutoEnable: bool, required
	AutoEnable terra.BoolValue `hcl:"auto_enable,attr" validate:"required"`
}

type S3Logs struct {
	// AutoEnable: bool, required
	AutoEnable terra.BoolValue `hcl:"auto_enable,attr" validate:"required"`
}

type DatasourcesAttributes struct {
	ref terra.Reference
}

func (d DatasourcesAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatasourcesAttributes) InternalWithRef(ref terra.Reference) DatasourcesAttributes {
	return DatasourcesAttributes{ref: ref}
}

func (d DatasourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatasourcesAttributes) Kubernetes() terra.ListValue[KubernetesAttributes] {
	return terra.ReferenceAsList[KubernetesAttributes](d.ref.Append("kubernetes"))
}

func (d DatasourcesAttributes) MalwareProtection() terra.ListValue[MalwareProtectionAttributes] {
	return terra.ReferenceAsList[MalwareProtectionAttributes](d.ref.Append("malware_protection"))
}

func (d DatasourcesAttributes) S3Logs() terra.ListValue[S3LogsAttributes] {
	return terra.ReferenceAsList[S3LogsAttributes](d.ref.Append("s3_logs"))
}

type KubernetesAttributes struct {
	ref terra.Reference
}

func (k KubernetesAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KubernetesAttributes) InternalWithRef(ref terra.Reference) KubernetesAttributes {
	return KubernetesAttributes{ref: ref}
}

func (k KubernetesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KubernetesAttributes) AuditLogs() terra.ListValue[AuditLogsAttributes] {
	return terra.ReferenceAsList[AuditLogsAttributes](k.ref.Append("audit_logs"))
}

type AuditLogsAttributes struct {
	ref terra.Reference
}

func (al AuditLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AuditLogsAttributes) InternalWithRef(ref terra.Reference) AuditLogsAttributes {
	return AuditLogsAttributes{ref: ref}
}

func (al AuditLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AuditLogsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enable"))
}

type MalwareProtectionAttributes struct {
	ref terra.Reference
}

func (mp MalwareProtectionAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp MalwareProtectionAttributes) InternalWithRef(ref terra.Reference) MalwareProtectionAttributes {
	return MalwareProtectionAttributes{ref: ref}
}

func (mp MalwareProtectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp MalwareProtectionAttributes) ScanEc2InstanceWithFindings() terra.ListValue[ScanEc2InstanceWithFindingsAttributes] {
	return terra.ReferenceAsList[ScanEc2InstanceWithFindingsAttributes](mp.ref.Append("scan_ec2_instance_with_findings"))
}

type ScanEc2InstanceWithFindingsAttributes struct {
	ref terra.Reference
}

func (seiwf ScanEc2InstanceWithFindingsAttributes) InternalRef() (terra.Reference, error) {
	return seiwf.ref, nil
}

func (seiwf ScanEc2InstanceWithFindingsAttributes) InternalWithRef(ref terra.Reference) ScanEc2InstanceWithFindingsAttributes {
	return ScanEc2InstanceWithFindingsAttributes{ref: ref}
}

func (seiwf ScanEc2InstanceWithFindingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return seiwf.ref.InternalTokens()
}

func (seiwf ScanEc2InstanceWithFindingsAttributes) EbsVolumes() terra.ListValue[EbsVolumesAttributes] {
	return terra.ReferenceAsList[EbsVolumesAttributes](seiwf.ref.Append("ebs_volumes"))
}

type EbsVolumesAttributes struct {
	ref terra.Reference
}

func (ev EbsVolumesAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev EbsVolumesAttributes) InternalWithRef(ref terra.Reference) EbsVolumesAttributes {
	return EbsVolumesAttributes{ref: ref}
}

func (ev EbsVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev EbsVolumesAttributes) AutoEnable() terra.BoolValue {
	return terra.ReferenceAsBool(ev.ref.Append("auto_enable"))
}

type S3LogsAttributes struct {
	ref terra.Reference
}

func (sl S3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl S3LogsAttributes) InternalWithRef(ref terra.Reference) S3LogsAttributes {
	return S3LogsAttributes{ref: ref}
}

func (sl S3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl S3LogsAttributes) AutoEnable() terra.BoolValue {
	return terra.ReferenceAsBool(sl.ref.Append("auto_enable"))
}

type DatasourcesState struct {
	Kubernetes        []KubernetesState        `json:"kubernetes"`
	MalwareProtection []MalwareProtectionState `json:"malware_protection"`
	S3Logs            []S3LogsState            `json:"s3_logs"`
}

type KubernetesState struct {
	AuditLogs []AuditLogsState `json:"audit_logs"`
}

type AuditLogsState struct {
	Enable bool `json:"enable"`
}

type MalwareProtectionState struct {
	ScanEc2InstanceWithFindings []ScanEc2InstanceWithFindingsState `json:"scan_ec2_instance_with_findings"`
}

type ScanEc2InstanceWithFindingsState struct {
	EbsVolumes []EbsVolumesState `json:"ebs_volumes"`
}

type EbsVolumesState struct {
	AutoEnable bool `json:"auto_enable"`
}

type S3LogsState struct {
	AutoEnable bool `json:"auto_enable"`
}
