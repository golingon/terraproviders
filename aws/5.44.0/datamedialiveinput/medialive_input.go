// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datamedialiveinput

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destinations struct {
	// Vpc: min=0
	Vpc []Vpc `hcl:"vpc,block" validate:"min=0"`
}

type Vpc struct{}

type InputDevices struct{}

type MediaConnectFlows struct{}

type Sources struct{}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) Ip() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("ip"))
}

func (d DestinationsAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("port"))
}

func (d DestinationsAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("url"))
}

func (d DestinationsAttributes) Vpc() terra.ListValue[VpcAttributes] {
	return terra.ReferenceAsList[VpcAttributes](d.ref.Append("vpc"))
}

type VpcAttributes struct {
	ref terra.Reference
}

func (v VpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VpcAttributes) InternalWithRef(ref terra.Reference) VpcAttributes {
	return VpcAttributes{ref: ref}
}

func (v VpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VpcAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("availability_zone"))
}

func (v VpcAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("network_interface_id"))
}

type InputDevicesAttributes struct {
	ref terra.Reference
}

func (id InputDevicesAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id InputDevicesAttributes) InternalWithRef(ref terra.Reference) InputDevicesAttributes {
	return InputDevicesAttributes{ref: ref}
}

func (id InputDevicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id InputDevicesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("id"))
}

type MediaConnectFlowsAttributes struct {
	ref terra.Reference
}

func (mcf MediaConnectFlowsAttributes) InternalRef() (terra.Reference, error) {
	return mcf.ref, nil
}

func (mcf MediaConnectFlowsAttributes) InternalWithRef(ref terra.Reference) MediaConnectFlowsAttributes {
	return MediaConnectFlowsAttributes{ref: ref}
}

func (mcf MediaConnectFlowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mcf.ref.InternalTokens()
}

func (mcf MediaConnectFlowsAttributes) FlowArn() terra.StringValue {
	return terra.ReferenceAsString(mcf.ref.Append("flow_arn"))
}

type SourcesAttributes struct {
	ref terra.Reference
}

func (s SourcesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourcesAttributes) InternalWithRef(ref terra.Reference) SourcesAttributes {
	return SourcesAttributes{ref: ref}
}

func (s SourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourcesAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("password_param"))
}

func (s SourcesAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s SourcesAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username"))
}

type DestinationsState struct {
	Ip   string     `json:"ip"`
	Port string     `json:"port"`
	Url  string     `json:"url"`
	Vpc  []VpcState `json:"vpc"`
}

type VpcState struct {
	AvailabilityZone   string `json:"availability_zone"`
	NetworkInterfaceId string `json:"network_interface_id"`
}

type InputDevicesState struct {
	Id string `json:"id"`
}

type MediaConnectFlowsState struct {
	FlowArn string `json:"flow_arn"`
}

type SourcesState struct {
	PasswordParam string `json:"password_param"`
	Url           string `json:"url"`
	Username      string `json:"username"`
}
