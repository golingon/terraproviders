// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewEksPodIdentityAssociation creates a new instance of [EksPodIdentityAssociation].
func NewEksPodIdentityAssociation(name string, args EksPodIdentityAssociationArgs) *EksPodIdentityAssociation {
	return &EksPodIdentityAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksPodIdentityAssociation)(nil)

// EksPodIdentityAssociation represents the Terraform resource aws_eks_pod_identity_association.
type EksPodIdentityAssociation struct {
	Name      string
	Args      EksPodIdentityAssociationArgs
	state     *eksPodIdentityAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) Type() string {
	return "aws_eks_pod_identity_association"
}

// LocalName returns the local name for [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) LocalName() string {
	return epia.Name
}

// Configuration returns the configuration (args) for [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) Configuration() interface{} {
	return epia.Args
}

// DependOn is used for other resources to depend on [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(epia)
}

// Dependencies returns the list of resources [EksPodIdentityAssociation] depends_on.
func (epia *EksPodIdentityAssociation) Dependencies() terra.Dependencies {
	return epia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) LifecycleManagement() *terra.Lifecycle {
	return epia.Lifecycle
}

// Attributes returns the attributes for [EksPodIdentityAssociation].
func (epia *EksPodIdentityAssociation) Attributes() eksPodIdentityAssociationAttributes {
	return eksPodIdentityAssociationAttributes{ref: terra.ReferenceResource(epia)}
}

// ImportState imports the given attribute values into [EksPodIdentityAssociation]'s state.
func (epia *EksPodIdentityAssociation) ImportState(av io.Reader) error {
	epia.state = &eksPodIdentityAssociationState{}
	if err := json.NewDecoder(av).Decode(epia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", epia.Type(), epia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EksPodIdentityAssociation] has state.
func (epia *EksPodIdentityAssociation) State() (*eksPodIdentityAssociationState, bool) {
	return epia.state, epia.state != nil
}

// StateMust returns the state for [EksPodIdentityAssociation]. Panics if the state is nil.
func (epia *EksPodIdentityAssociation) StateMust() *eksPodIdentityAssociationState {
	if epia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", epia.Type(), epia.LocalName()))
	}
	return epia.state
}

// EksPodIdentityAssociationArgs contains the configurations for aws_eks_pod_identity_association.
type EksPodIdentityAssociationArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ServiceAccount: string, required
	ServiceAccount terra.StringValue `hcl:"service_account,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}
type eksPodIdentityAssociationAttributes struct {
	ref terra.Reference
}

// AssociationArn returns a reference to field association_arn of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) AssociationArn() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("association_arn"))
}

// AssociationId returns a reference to field association_id of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("association_id"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("id"))
}

// Namespace returns a reference to field namespace of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("namespace"))
}

// RoleArn returns a reference to field role_arn of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("role_arn"))
}

// ServiceAccount returns a reference to field service_account of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(epia.ref.Append("service_account"))
}

// Tags returns a reference to field tags of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](epia.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_pod_identity_association.
func (epia eksPodIdentityAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](epia.ref.Append("tags_all"))
}

type eksPodIdentityAssociationState struct {
	AssociationArn string            `json:"association_arn"`
	AssociationId  string            `json:"association_id"`
	ClusterName    string            `json:"cluster_name"`
	Id             string            `json:"id"`
	Namespace      string            `json:"namespace"`
	RoleArn        string            `json:"role_arn"`
	ServiceAccount string            `json:"service_account"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
