// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewKeyPair creates a new instance of [KeyPair].
func NewKeyPair(name string, args KeyPairArgs) *KeyPair {
	return &KeyPair{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyPair)(nil)

// KeyPair represents the Terraform resource aws_key_pair.
type KeyPair struct {
	Name      string
	Args      KeyPairArgs
	state     *keyPairState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [KeyPair].
func (kp *KeyPair) Type() string {
	return "aws_key_pair"
}

// LocalName returns the local name for [KeyPair].
func (kp *KeyPair) LocalName() string {
	return kp.Name
}

// Configuration returns the configuration (args) for [KeyPair].
func (kp *KeyPair) Configuration() interface{} {
	return kp.Args
}

// DependOn is used for other resources to depend on [KeyPair].
func (kp *KeyPair) DependOn() terra.Reference {
	return terra.ReferenceResource(kp)
}

// Dependencies returns the list of resources [KeyPair] depends_on.
func (kp *KeyPair) Dependencies() terra.Dependencies {
	return kp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [KeyPair].
func (kp *KeyPair) LifecycleManagement() *terra.Lifecycle {
	return kp.Lifecycle
}

// Attributes returns the attributes for [KeyPair].
func (kp *KeyPair) Attributes() keyPairAttributes {
	return keyPairAttributes{ref: terra.ReferenceResource(kp)}
}

// ImportState imports the given attribute values into [KeyPair]'s state.
func (kp *KeyPair) ImportState(av io.Reader) error {
	kp.state = &keyPairState{}
	if err := json.NewDecoder(av).Decode(kp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kp.Type(), kp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [KeyPair] has state.
func (kp *KeyPair) State() (*keyPairState, bool) {
	return kp.state, kp.state != nil
}

// StateMust returns the state for [KeyPair]. Panics if the state is nil.
func (kp *KeyPair) StateMust() *keyPairState {
	if kp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kp.Type(), kp.LocalName()))
	}
	return kp.state
}

// KeyPairArgs contains the configurations for aws_key_pair.
type KeyPairArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// KeyNamePrefix: string, optional
	KeyNamePrefix terra.StringValue `hcl:"key_name_prefix,attr"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type keyPairAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_key_pair.
func (kp keyPairAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("arn"))
}

// Fingerprint returns a reference to field fingerprint of aws_key_pair.
func (kp keyPairAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("fingerprint"))
}

// Id returns a reference to field id of aws_key_pair.
func (kp keyPairAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("id"))
}

// KeyName returns a reference to field key_name of aws_key_pair.
func (kp keyPairAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("key_name"))
}

// KeyNamePrefix returns a reference to field key_name_prefix of aws_key_pair.
func (kp keyPairAttributes) KeyNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("key_name_prefix"))
}

// KeyPairId returns a reference to field key_pair_id of aws_key_pair.
func (kp keyPairAttributes) KeyPairId() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("key_pair_id"))
}

// KeyType returns a reference to field key_type of aws_key_pair.
func (kp keyPairAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("key_type"))
}

// PublicKey returns a reference to field public_key of aws_key_pair.
func (kp keyPairAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("public_key"))
}

// Tags returns a reference to field tags of aws_key_pair.
func (kp keyPairAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_key_pair.
func (kp keyPairAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](kp.ref.Append("tags_all"))
}

type keyPairState struct {
	Arn           string            `json:"arn"`
	Fingerprint   string            `json:"fingerprint"`
	Id            string            `json:"id"`
	KeyName       string            `json:"key_name"`
	KeyNamePrefix string            `json:"key_name_prefix"`
	KeyPairId     string            `json:"key_pair_id"`
	KeyType       string            `json:"key_type"`
	PublicKey     string            `json:"public_key"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
}
