// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewIotEventConfigurations creates a new instance of [IotEventConfigurations].
func NewIotEventConfigurations(name string, args IotEventConfigurationsArgs) *IotEventConfigurations {
	return &IotEventConfigurations{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotEventConfigurations)(nil)

// IotEventConfigurations represents the Terraform resource aws_iot_event_configurations.
type IotEventConfigurations struct {
	Name      string
	Args      IotEventConfigurationsArgs
	state     *iotEventConfigurationsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IotEventConfigurations].
func (iec *IotEventConfigurations) Type() string {
	return "aws_iot_event_configurations"
}

// LocalName returns the local name for [IotEventConfigurations].
func (iec *IotEventConfigurations) LocalName() string {
	return iec.Name
}

// Configuration returns the configuration (args) for [IotEventConfigurations].
func (iec *IotEventConfigurations) Configuration() interface{} {
	return iec.Args
}

// DependOn is used for other resources to depend on [IotEventConfigurations].
func (iec *IotEventConfigurations) DependOn() terra.Reference {
	return terra.ReferenceResource(iec)
}

// Dependencies returns the list of resources [IotEventConfigurations] depends_on.
func (iec *IotEventConfigurations) Dependencies() terra.Dependencies {
	return iec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IotEventConfigurations].
func (iec *IotEventConfigurations) LifecycleManagement() *terra.Lifecycle {
	return iec.Lifecycle
}

// Attributes returns the attributes for [IotEventConfigurations].
func (iec *IotEventConfigurations) Attributes() iotEventConfigurationsAttributes {
	return iotEventConfigurationsAttributes{ref: terra.ReferenceResource(iec)}
}

// ImportState imports the given attribute values into [IotEventConfigurations]'s state.
func (iec *IotEventConfigurations) ImportState(av io.Reader) error {
	iec.state = &iotEventConfigurationsState{}
	if err := json.NewDecoder(av).Decode(iec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iec.Type(), iec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IotEventConfigurations] has state.
func (iec *IotEventConfigurations) State() (*iotEventConfigurationsState, bool) {
	return iec.state, iec.state != nil
}

// StateMust returns the state for [IotEventConfigurations]. Panics if the state is nil.
func (iec *IotEventConfigurations) StateMust() *iotEventConfigurationsState {
	if iec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iec.Type(), iec.LocalName()))
	}
	return iec.state
}

// IotEventConfigurationsArgs contains the configurations for aws_iot_event_configurations.
type IotEventConfigurationsArgs struct {
	// EventConfigurations: map of bool, required
	EventConfigurations terra.MapValue[terra.BoolValue] `hcl:"event_configurations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type iotEventConfigurationsAttributes struct {
	ref terra.Reference
}

// EventConfigurations returns a reference to field event_configurations of aws_iot_event_configurations.
func (iec iotEventConfigurationsAttributes) EventConfigurations() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](iec.ref.Append("event_configurations"))
}

// Id returns a reference to field id of aws_iot_event_configurations.
func (iec iotEventConfigurationsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(iec.ref.Append("id"))
}

type iotEventConfigurationsState struct {
	EventConfigurations map[string]bool `json:"event_configurations"`
	Id                  string          `json:"id"`
}
