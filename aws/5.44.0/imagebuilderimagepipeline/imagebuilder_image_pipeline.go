// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package imagebuilderimagepipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ImageScanningConfiguration struct {
	// ImageScanningEnabled: bool, optional
	ImageScanningEnabled terra.BoolValue `hcl:"image_scanning_enabled,attr"`
	// EcrConfiguration: optional
	EcrConfiguration *EcrConfiguration `hcl:"ecr_configuration,block"`
}

type EcrConfiguration struct {
	// ContainerTags: set of string, optional
	ContainerTags terra.SetValue[terra.StringValue] `hcl:"container_tags,attr"`
	// RepositoryName: string, optional
	RepositoryName terra.StringValue `hcl:"repository_name,attr"`
}

type ImageTestsConfiguration struct {
	// ImageTestsEnabled: bool, optional
	ImageTestsEnabled terra.BoolValue `hcl:"image_tests_enabled,attr"`
	// TimeoutMinutes: number, optional
	TimeoutMinutes terra.NumberValue `hcl:"timeout_minutes,attr"`
}

type Schedule struct {
	// PipelineExecutionStartCondition: string, optional
	PipelineExecutionStartCondition terra.StringValue `hcl:"pipeline_execution_start_condition,attr"`
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
}

type ImageScanningConfigurationAttributes struct {
	ref terra.Reference
}

func (isc ImageScanningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc ImageScanningConfigurationAttributes) InternalWithRef(ref terra.Reference) ImageScanningConfigurationAttributes {
	return ImageScanningConfigurationAttributes{ref: ref}
}

func (isc ImageScanningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc ImageScanningConfigurationAttributes) ImageScanningEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("image_scanning_enabled"))
}

func (isc ImageScanningConfigurationAttributes) EcrConfiguration() terra.ListValue[EcrConfigurationAttributes] {
	return terra.ReferenceAsList[EcrConfigurationAttributes](isc.ref.Append("ecr_configuration"))
}

type EcrConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EcrConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EcrConfigurationAttributes) InternalWithRef(ref terra.Reference) EcrConfigurationAttributes {
	return EcrConfigurationAttributes{ref: ref}
}

func (ec EcrConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EcrConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("container_tags"))
}

func (ec EcrConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("repository_name"))
}

type ImageTestsConfigurationAttributes struct {
	ref terra.Reference
}

func (itc ImageTestsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc ImageTestsConfigurationAttributes) InternalWithRef(ref terra.Reference) ImageTestsConfigurationAttributes {
	return ImageTestsConfigurationAttributes{ref: ref}
}

func (itc ImageTestsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc ImageTestsConfigurationAttributes) ImageTestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(itc.ref.Append("image_tests_enabled"))
}

func (itc ImageTestsConfigurationAttributes) TimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("timeout_minutes"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) PipelineExecutionStartCondition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pipeline_execution_start_condition"))
}

func (s ScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

func (s ScheduleAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timezone"))
}

type ImageScanningConfigurationState struct {
	ImageScanningEnabled bool                    `json:"image_scanning_enabled"`
	EcrConfiguration     []EcrConfigurationState `json:"ecr_configuration"`
}

type EcrConfigurationState struct {
	ContainerTags  []string `json:"container_tags"`
	RepositoryName string   `json:"repository_name"`
}

type ImageTestsConfigurationState struct {
	ImageTestsEnabled bool    `json:"image_tests_enabled"`
	TimeoutMinutes    float64 `json:"timeout_minutes"`
}

type ScheduleState struct {
	PipelineExecutionStartCondition string `json:"pipeline_execution_start_condition"`
	ScheduleExpression              string `json:"schedule_expression"`
	Timezone                        string `json:"timezone"`
}
