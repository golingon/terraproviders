// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewApigatewayv2VpcLink creates a new instance of [Apigatewayv2VpcLink].
func NewApigatewayv2VpcLink(name string, args Apigatewayv2VpcLinkArgs) *Apigatewayv2VpcLink {
	return &Apigatewayv2VpcLink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2VpcLink)(nil)

// Apigatewayv2VpcLink represents the Terraform resource aws_apigatewayv2_vpc_link.
type Apigatewayv2VpcLink struct {
	Name      string
	Args      Apigatewayv2VpcLinkArgs
	state     *apigatewayv2VpcLinkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) Type() string {
	return "aws_apigatewayv2_vpc_link"
}

// LocalName returns the local name for [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) LocalName() string {
	return avl.Name
}

// Configuration returns the configuration (args) for [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) Configuration() interface{} {
	return avl.Args
}

// DependOn is used for other resources to depend on [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) DependOn() terra.Reference {
	return terra.ReferenceResource(avl)
}

// Dependencies returns the list of resources [Apigatewayv2VpcLink] depends_on.
func (avl *Apigatewayv2VpcLink) Dependencies() terra.Dependencies {
	return avl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) LifecycleManagement() *terra.Lifecycle {
	return avl.Lifecycle
}

// Attributes returns the attributes for [Apigatewayv2VpcLink].
func (avl *Apigatewayv2VpcLink) Attributes() apigatewayv2VpcLinkAttributes {
	return apigatewayv2VpcLinkAttributes{ref: terra.ReferenceResource(avl)}
}

// ImportState imports the given attribute values into [Apigatewayv2VpcLink]'s state.
func (avl *Apigatewayv2VpcLink) ImportState(av io.Reader) error {
	avl.state = &apigatewayv2VpcLinkState{}
	if err := json.NewDecoder(av).Decode(avl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avl.Type(), avl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Apigatewayv2VpcLink] has state.
func (avl *Apigatewayv2VpcLink) State() (*apigatewayv2VpcLinkState, bool) {
	return avl.state, avl.state != nil
}

// StateMust returns the state for [Apigatewayv2VpcLink]. Panics if the state is nil.
func (avl *Apigatewayv2VpcLink) StateMust() *apigatewayv2VpcLinkState {
	if avl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avl.Type(), avl.LocalName()))
	}
	return avl.state
}

// Apigatewayv2VpcLinkArgs contains the configurations for aws_apigatewayv2_vpc_link.
type Apigatewayv2VpcLinkArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type apigatewayv2VpcLinkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("arn"))
}

// Id returns a reference to field id of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("id"))
}

// Name returns a reference to field name of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("name"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avl.ref.Append("security_group_ids"))
}

// SubnetIds returns a reference to field subnet_ids of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avl.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apigatewayv2_vpc_link.
func (avl apigatewayv2VpcLinkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avl.ref.Append("tags_all"))
}

type apigatewayv2VpcLinkState struct {
	Arn              string            `json:"arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	SecurityGroupIds []string          `json:"security_group_ids"`
	SubnetIds        []string          `json:"subnet_ids"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
