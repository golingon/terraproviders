// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataresourceexplorer2search

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ResourceCount struct{}

type Resources struct {
	// ResourceProperty: min=0
	ResourceProperty []ResourceProperty `hcl:"resource_property,block" validate:"min=0"`
}

type ResourceProperty struct{}

type ResourceCountAttributes struct {
	ref terra.Reference
}

func (rc ResourceCountAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ResourceCountAttributes) InternalWithRef(ref terra.Reference) ResourceCountAttributes {
	return ResourceCountAttributes{ref: ref}
}

func (rc ResourceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ResourceCountAttributes) Complete() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("complete"))
}

func (rc ResourceCountAttributes) TotalResources() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("total_resources"))
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("arn"))
}

func (r ResourcesAttributes) LastReportedAt() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("last_reported_at"))
}

func (r ResourcesAttributes) OwningAccountId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("owning_account_id"))
}

func (r ResourcesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r ResourcesAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_type"))
}

func (r ResourcesAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("service"))
}

func (r ResourcesAttributes) ResourceProperty() terra.ListValue[ResourcePropertyAttributes] {
	return terra.ReferenceAsList[ResourcePropertyAttributes](r.ref.Append("resource_property"))
}

type ResourcePropertyAttributes struct {
	ref terra.Reference
}

func (rp ResourcePropertyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp ResourcePropertyAttributes) InternalWithRef(ref terra.Reference) ResourcePropertyAttributes {
	return ResourcePropertyAttributes{ref: ref}
}

func (rp ResourcePropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp ResourcePropertyAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("data"))
}

func (rp ResourcePropertyAttributes) LastReportedAt() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("last_reported_at"))
}

func (rp ResourcePropertyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("name"))
}

type ResourceCountState struct {
	Complete       bool    `json:"complete"`
	TotalResources float64 `json:"total_resources"`
}

type ResourcesState struct {
	Arn              string                  `json:"arn"`
	LastReportedAt   string                  `json:"last_reported_at"`
	OwningAccountId  string                  `json:"owning_account_id"`
	Region           string                  `json:"region"`
	ResourceType     string                  `json:"resource_type"`
	Service          string                  `json:"service"`
	ResourceProperty []ResourcePropertyState `json:"resource_property"`
}

type ResourcePropertyState struct {
	Data           string `json:"data"`
	LastReportedAt string `json:"last_reported_at"`
	Name           string `json:"name"`
}
