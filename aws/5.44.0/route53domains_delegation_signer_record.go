// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	route53domainsdelegationsignerrecord "github.com/golingon/terraproviders/aws/5.44.0/route53domainsdelegationsignerrecord"
	"io"
)

// NewRoute53DomainsDelegationSignerRecord creates a new instance of [Route53DomainsDelegationSignerRecord].
func NewRoute53DomainsDelegationSignerRecord(name string, args Route53DomainsDelegationSignerRecordArgs) *Route53DomainsDelegationSignerRecord {
	return &Route53DomainsDelegationSignerRecord{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53DomainsDelegationSignerRecord)(nil)

// Route53DomainsDelegationSignerRecord represents the Terraform resource aws_route53domains_delegation_signer_record.
type Route53DomainsDelegationSignerRecord struct {
	Name      string
	Args      Route53DomainsDelegationSignerRecordArgs
	state     *route53DomainsDelegationSignerRecordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) Type() string {
	return "aws_route53domains_delegation_signer_record"
}

// LocalName returns the local name for [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) LocalName() string {
	return rdsr.Name
}

// Configuration returns the configuration (args) for [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) Configuration() interface{} {
	return rdsr.Args
}

// DependOn is used for other resources to depend on [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) DependOn() terra.Reference {
	return terra.ReferenceResource(rdsr)
}

// Dependencies returns the list of resources [Route53DomainsDelegationSignerRecord] depends_on.
func (rdsr *Route53DomainsDelegationSignerRecord) Dependencies() terra.Dependencies {
	return rdsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) LifecycleManagement() *terra.Lifecycle {
	return rdsr.Lifecycle
}

// Attributes returns the attributes for [Route53DomainsDelegationSignerRecord].
func (rdsr *Route53DomainsDelegationSignerRecord) Attributes() route53DomainsDelegationSignerRecordAttributes {
	return route53DomainsDelegationSignerRecordAttributes{ref: terra.ReferenceResource(rdsr)}
}

// ImportState imports the given attribute values into [Route53DomainsDelegationSignerRecord]'s state.
func (rdsr *Route53DomainsDelegationSignerRecord) ImportState(av io.Reader) error {
	rdsr.state = &route53DomainsDelegationSignerRecordState{}
	if err := json.NewDecoder(av).Decode(rdsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rdsr.Type(), rdsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53DomainsDelegationSignerRecord] has state.
func (rdsr *Route53DomainsDelegationSignerRecord) State() (*route53DomainsDelegationSignerRecordState, bool) {
	return rdsr.state, rdsr.state != nil
}

// StateMust returns the state for [Route53DomainsDelegationSignerRecord]. Panics if the state is nil.
func (rdsr *Route53DomainsDelegationSignerRecord) StateMust() *route53DomainsDelegationSignerRecordState {
	if rdsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rdsr.Type(), rdsr.LocalName()))
	}
	return rdsr.state
}

// Route53DomainsDelegationSignerRecordArgs contains the configurations for aws_route53domains_delegation_signer_record.
type Route53DomainsDelegationSignerRecordArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// SigningAttributes: min=0
	SigningAttributes []route53domainsdelegationsignerrecord.SigningAttributes `hcl:"signing_attributes,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *route53domainsdelegationsignerrecord.Timeouts `hcl:"timeouts,block"`
}
type route53DomainsDelegationSignerRecordAttributes struct {
	ref terra.Reference
}

// DnssecKeyId returns a reference to field dnssec_key_id of aws_route53domains_delegation_signer_record.
func (rdsr route53DomainsDelegationSignerRecordAttributes) DnssecKeyId() terra.StringValue {
	return terra.ReferenceAsString(rdsr.ref.Append("dnssec_key_id"))
}

// DomainName returns a reference to field domain_name of aws_route53domains_delegation_signer_record.
func (rdsr route53DomainsDelegationSignerRecordAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(rdsr.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_route53domains_delegation_signer_record.
func (rdsr route53DomainsDelegationSignerRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rdsr.ref.Append("id"))
}

func (rdsr route53DomainsDelegationSignerRecordAttributes) SigningAttributes() terra.ListValue[route53domainsdelegationsignerrecord.SigningAttributesAttributes] {
	return terra.ReferenceAsList[route53domainsdelegationsignerrecord.SigningAttributesAttributes](rdsr.ref.Append("signing_attributes"))
}

func (rdsr route53DomainsDelegationSignerRecordAttributes) Timeouts() route53domainsdelegationsignerrecord.TimeoutsAttributes {
	return terra.ReferenceAsSingle[route53domainsdelegationsignerrecord.TimeoutsAttributes](rdsr.ref.Append("timeouts"))
}

type route53DomainsDelegationSignerRecordState struct {
	DnssecKeyId       string                                                        `json:"dnssec_key_id"`
	DomainName        string                                                        `json:"domain_name"`
	Id                string                                                        `json:"id"`
	SigningAttributes []route53domainsdelegationsignerrecord.SigningAttributesState `json:"signing_attributes"`
	Timeouts          *route53domainsdelegationsignerrecord.TimeoutsState           `json:"timeouts"`
}
