// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	customerprofilesdomain "github.com/golingon/terraproviders/aws/5.44.0/customerprofilesdomain"
	"io"
)

// NewCustomerprofilesDomain creates a new instance of [CustomerprofilesDomain].
func NewCustomerprofilesDomain(name string, args CustomerprofilesDomainArgs) *CustomerprofilesDomain {
	return &CustomerprofilesDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CustomerprofilesDomain)(nil)

// CustomerprofilesDomain represents the Terraform resource aws_customerprofiles_domain.
type CustomerprofilesDomain struct {
	Name      string
	Args      CustomerprofilesDomainArgs
	state     *customerprofilesDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) Type() string {
	return "aws_customerprofiles_domain"
}

// LocalName returns the local name for [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) LocalName() string {
	return cd.Name
}

// Configuration returns the configuration (args) for [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) Configuration() interface{} {
	return cd.Args
}

// DependOn is used for other resources to depend on [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(cd)
}

// Dependencies returns the list of resources [CustomerprofilesDomain] depends_on.
func (cd *CustomerprofilesDomain) Dependencies() terra.Dependencies {
	return cd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) LifecycleManagement() *terra.Lifecycle {
	return cd.Lifecycle
}

// Attributes returns the attributes for [CustomerprofilesDomain].
func (cd *CustomerprofilesDomain) Attributes() customerprofilesDomainAttributes {
	return customerprofilesDomainAttributes{ref: terra.ReferenceResource(cd)}
}

// ImportState imports the given attribute values into [CustomerprofilesDomain]'s state.
func (cd *CustomerprofilesDomain) ImportState(av io.Reader) error {
	cd.state = &customerprofilesDomainState{}
	if err := json.NewDecoder(av).Decode(cd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cd.Type(), cd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CustomerprofilesDomain] has state.
func (cd *CustomerprofilesDomain) State() (*customerprofilesDomainState, bool) {
	return cd.state, cd.state != nil
}

// StateMust returns the state for [CustomerprofilesDomain]. Panics if the state is nil.
func (cd *CustomerprofilesDomain) StateMust() *customerprofilesDomainState {
	if cd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cd.Type(), cd.LocalName()))
	}
	return cd.state
}

// CustomerprofilesDomainArgs contains the configurations for aws_customerprofiles_domain.
type CustomerprofilesDomainArgs struct {
	// DeadLetterQueueUrl: string, optional
	DeadLetterQueueUrl terra.StringValue `hcl:"dead_letter_queue_url,attr"`
	// DefaultEncryptionKey: string, optional
	DefaultEncryptionKey terra.StringValue `hcl:"default_encryption_key,attr"`
	// DefaultExpirationDays: number, required
	DefaultExpirationDays terra.NumberValue `hcl:"default_expiration_days,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Matching: optional
	Matching *customerprofilesdomain.Matching `hcl:"matching,block"`
	// RuleBasedMatching: optional
	RuleBasedMatching *customerprofilesdomain.RuleBasedMatching `hcl:"rule_based_matching,block"`
}
type customerprofilesDomainAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("arn"))
}

// DeadLetterQueueUrl returns a reference to field dead_letter_queue_url of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) DeadLetterQueueUrl() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("dead_letter_queue_url"))
}

// DefaultEncryptionKey returns a reference to field default_encryption_key of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) DefaultEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("default_encryption_key"))
}

// DefaultExpirationDays returns a reference to field default_expiration_days of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) DefaultExpirationDays() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("default_expiration_days"))
}

// DomainName returns a reference to field domain_name of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_customerprofiles_domain.
func (cd customerprofilesDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cd.ref.Append("tags_all"))
}

func (cd customerprofilesDomainAttributes) Matching() terra.ListValue[customerprofilesdomain.MatchingAttributes] {
	return terra.ReferenceAsList[customerprofilesdomain.MatchingAttributes](cd.ref.Append("matching"))
}

func (cd customerprofilesDomainAttributes) RuleBasedMatching() terra.ListValue[customerprofilesdomain.RuleBasedMatchingAttributes] {
	return terra.ReferenceAsList[customerprofilesdomain.RuleBasedMatchingAttributes](cd.ref.Append("rule_based_matching"))
}

type customerprofilesDomainState struct {
	Arn                   string                                          `json:"arn"`
	DeadLetterQueueUrl    string                                          `json:"dead_letter_queue_url"`
	DefaultEncryptionKey  string                                          `json:"default_encryption_key"`
	DefaultExpirationDays float64                                         `json:"default_expiration_days"`
	DomainName            string                                          `json:"domain_name"`
	Id                    string                                          `json:"id"`
	Tags                  map[string]string                               `json:"tags"`
	TagsAll               map[string]string                               `json:"tags_all"`
	Matching              []customerprofilesdomain.MatchingState          `json:"matching"`
	RuleBasedMatching     []customerprofilesdomain.RuleBasedMatchingState `json:"rule_based_matching"`
}
