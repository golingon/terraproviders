// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewAlbListenerCertificate creates a new instance of [AlbListenerCertificate].
func NewAlbListenerCertificate(name string, args AlbListenerCertificateArgs) *AlbListenerCertificate {
	return &AlbListenerCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlbListenerCertificate)(nil)

// AlbListenerCertificate represents the Terraform resource aws_alb_listener_certificate.
type AlbListenerCertificate struct {
	Name      string
	Args      AlbListenerCertificateArgs
	state     *albListenerCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AlbListenerCertificate].
func (alc *AlbListenerCertificate) Type() string {
	return "aws_alb_listener_certificate"
}

// LocalName returns the local name for [AlbListenerCertificate].
func (alc *AlbListenerCertificate) LocalName() string {
	return alc.Name
}

// Configuration returns the configuration (args) for [AlbListenerCertificate].
func (alc *AlbListenerCertificate) Configuration() interface{} {
	return alc.Args
}

// DependOn is used for other resources to depend on [AlbListenerCertificate].
func (alc *AlbListenerCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(alc)
}

// Dependencies returns the list of resources [AlbListenerCertificate] depends_on.
func (alc *AlbListenerCertificate) Dependencies() terra.Dependencies {
	return alc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AlbListenerCertificate].
func (alc *AlbListenerCertificate) LifecycleManagement() *terra.Lifecycle {
	return alc.Lifecycle
}

// Attributes returns the attributes for [AlbListenerCertificate].
func (alc *AlbListenerCertificate) Attributes() albListenerCertificateAttributes {
	return albListenerCertificateAttributes{ref: terra.ReferenceResource(alc)}
}

// ImportState imports the given attribute values into [AlbListenerCertificate]'s state.
func (alc *AlbListenerCertificate) ImportState(av io.Reader) error {
	alc.state = &albListenerCertificateState{}
	if err := json.NewDecoder(av).Decode(alc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alc.Type(), alc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AlbListenerCertificate] has state.
func (alc *AlbListenerCertificate) State() (*albListenerCertificateState, bool) {
	return alc.state, alc.state != nil
}

// StateMust returns the state for [AlbListenerCertificate]. Panics if the state is nil.
func (alc *AlbListenerCertificate) StateMust() *albListenerCertificateState {
	if alc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alc.Type(), alc.LocalName()))
	}
	return alc.state
}

// AlbListenerCertificateArgs contains the configurations for aws_alb_listener_certificate.
type AlbListenerCertificateArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
}
type albListenerCertificateAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_alb_listener_certificate.
func (alc albListenerCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("certificate_arn"))
}

// Id returns a reference to field id of aws_alb_listener_certificate.
func (alc albListenerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_alb_listener_certificate.
func (alc albListenerCertificateAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("listener_arn"))
}

type albListenerCertificateState struct {
	CertificateArn string `json:"certificate_arn"`
	Id             string `json:"id"`
	ListenerArn    string `json:"listener_arn"`
}
