// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewEc2TransitGatewayRoute creates a new instance of [Ec2TransitGatewayRoute].
func NewEc2TransitGatewayRoute(name string, args Ec2TransitGatewayRouteArgs) *Ec2TransitGatewayRoute {
	return &Ec2TransitGatewayRoute{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayRoute)(nil)

// Ec2TransitGatewayRoute represents the Terraform resource aws_ec2_transit_gateway_route.
type Ec2TransitGatewayRoute struct {
	Name      string
	Args      Ec2TransitGatewayRouteArgs
	state     *ec2TransitGatewayRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) Type() string {
	return "aws_ec2_transit_gateway_route"
}

// LocalName returns the local name for [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) LocalName() string {
	return etgr.Name
}

// Configuration returns the configuration (args) for [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) Configuration() interface{} {
	return etgr.Args
}

// DependOn is used for other resources to depend on [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) DependOn() terra.Reference {
	return terra.ReferenceResource(etgr)
}

// Dependencies returns the list of resources [Ec2TransitGatewayRoute] depends_on.
func (etgr *Ec2TransitGatewayRoute) Dependencies() terra.Dependencies {
	return etgr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) LifecycleManagement() *terra.Lifecycle {
	return etgr.Lifecycle
}

// Attributes returns the attributes for [Ec2TransitGatewayRoute].
func (etgr *Ec2TransitGatewayRoute) Attributes() ec2TransitGatewayRouteAttributes {
	return ec2TransitGatewayRouteAttributes{ref: terra.ReferenceResource(etgr)}
}

// ImportState imports the given attribute values into [Ec2TransitGatewayRoute]'s state.
func (etgr *Ec2TransitGatewayRoute) ImportState(av io.Reader) error {
	etgr.state = &ec2TransitGatewayRouteState{}
	if err := json.NewDecoder(av).Decode(etgr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgr.Type(), etgr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Ec2TransitGatewayRoute] has state.
func (etgr *Ec2TransitGatewayRoute) State() (*ec2TransitGatewayRouteState, bool) {
	return etgr.state, etgr.state != nil
}

// StateMust returns the state for [Ec2TransitGatewayRoute]. Panics if the state is nil.
func (etgr *Ec2TransitGatewayRoute) StateMust() *ec2TransitGatewayRouteState {
	if etgr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgr.Type(), etgr.LocalName()))
	}
	return etgr.state
}

// Ec2TransitGatewayRouteArgs contains the configurations for aws_ec2_transit_gateway_route.
type Ec2TransitGatewayRouteArgs struct {
	// Blackhole: bool, optional
	Blackhole terra.BoolValue `hcl:"blackhole,attr"`
	// DestinationCidrBlock: string, required
	DestinationCidrBlock terra.StringValue `hcl:"destination_cidr_block,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitGatewayAttachmentId: string, optional
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr"`
	// TransitGatewayRouteTableId: string, required
	TransitGatewayRouteTableId terra.StringValue `hcl:"transit_gateway_route_table_id,attr" validate:"required"`
}
type ec2TransitGatewayRouteAttributes struct {
	ref terra.Reference
}

// Blackhole returns a reference to field blackhole of aws_ec2_transit_gateway_route.
func (etgr ec2TransitGatewayRouteAttributes) Blackhole() terra.BoolValue {
	return terra.ReferenceAsBool(etgr.ref.Append("blackhole"))
}

// DestinationCidrBlock returns a reference to field destination_cidr_block of aws_ec2_transit_gateway_route.
func (etgr ec2TransitGatewayRouteAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(etgr.ref.Append("destination_cidr_block"))
}

// Id returns a reference to field id of aws_ec2_transit_gateway_route.
func (etgr ec2TransitGatewayRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(etgr.ref.Append("id"))
}

// TransitGatewayAttachmentId returns a reference to field transit_gateway_attachment_id of aws_ec2_transit_gateway_route.
func (etgr ec2TransitGatewayRouteAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(etgr.ref.Append("transit_gateway_attachment_id"))
}

// TransitGatewayRouteTableId returns a reference to field transit_gateway_route_table_id of aws_ec2_transit_gateway_route.
func (etgr ec2TransitGatewayRouteAttributes) TransitGatewayRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(etgr.ref.Append("transit_gateway_route_table_id"))
}

type ec2TransitGatewayRouteState struct {
	Blackhole                  bool   `json:"blackhole"`
	DestinationCidrBlock       string `json:"destination_cidr_block"`
	Id                         string `json:"id"`
	TransitGatewayAttachmentId string `json:"transit_gateway_attachment_id"`
	TransitGatewayRouteTableId string `json:"transit_gateway_route_table_id"`
}
