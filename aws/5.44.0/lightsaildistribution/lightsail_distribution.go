// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package lightsaildistribution

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Location struct{}

type CacheBehavior struct {
	// Behavior: string, required
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CacheBehaviorSettings struct {
	// AllowedHttpMethods: string, optional
	AllowedHttpMethods terra.StringValue `hcl:"allowed_http_methods,attr"`
	// CachedHttpMethods: string, optional
	CachedHttpMethods terra.StringValue `hcl:"cached_http_methods,attr"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// MaximumTtl: number, optional
	MaximumTtl terra.NumberValue `hcl:"maximum_ttl,attr"`
	// MinimumTtl: number, optional
	MinimumTtl terra.NumberValue `hcl:"minimum_ttl,attr"`
	// ForwardedCookies: optional
	ForwardedCookies *ForwardedCookies `hcl:"forwarded_cookies,block"`
	// ForwardedHeaders: optional
	ForwardedHeaders *ForwardedHeaders `hcl:"forwarded_headers,block"`
	// ForwardedQueryStrings: optional
	ForwardedQueryStrings *ForwardedQueryStrings `hcl:"forwarded_query_strings,block"`
}

type ForwardedCookies struct {
	// CookiesAllowList: set of string, optional
	CookiesAllowList terra.SetValue[terra.StringValue] `hcl:"cookies_allow_list,attr"`
	// Option: string, optional
	Option terra.StringValue `hcl:"option,attr"`
}

type ForwardedHeaders struct {
	// HeadersAllowList: set of string, optional
	HeadersAllowList terra.SetValue[terra.StringValue] `hcl:"headers_allow_list,attr"`
	// Option: string, optional
	Option terra.StringValue `hcl:"option,attr"`
}

type ForwardedQueryStrings struct {
	// Option: bool, optional
	Option terra.BoolValue `hcl:"option,attr"`
	// QueryStringsAllowedList: set of string, optional
	QueryStringsAllowedList terra.SetValue[terra.StringValue] `hcl:"query_strings_allowed_list,attr"`
}

type DefaultCacheBehavior struct {
	// Behavior: string, required
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
}

type Origin struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtocolPolicy: string, optional
	ProtocolPolicy terra.StringValue `hcl:"protocol_policy,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LocationAttributes struct {
	ref terra.Reference
}

func (l LocationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LocationAttributes) InternalWithRef(ref terra.Reference) LocationAttributes {
	return LocationAttributes{ref: ref}
}

func (l LocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LocationAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("availability_zone"))
}

func (l LocationAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("region_name"))
}

type CacheBehaviorAttributes struct {
	ref terra.Reference
}

func (cb CacheBehaviorAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb CacheBehaviorAttributes) InternalWithRef(ref terra.Reference) CacheBehaviorAttributes {
	return CacheBehaviorAttributes{ref: ref}
}

func (cb CacheBehaviorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb CacheBehaviorAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("behavior"))
}

func (cb CacheBehaviorAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("path"))
}

type CacheBehaviorSettingsAttributes struct {
	ref terra.Reference
}

func (cbs CacheBehaviorSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cbs.ref, nil
}

func (cbs CacheBehaviorSettingsAttributes) InternalWithRef(ref terra.Reference) CacheBehaviorSettingsAttributes {
	return CacheBehaviorSettingsAttributes{ref: ref}
}

func (cbs CacheBehaviorSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cbs.ref.InternalTokens()
}

func (cbs CacheBehaviorSettingsAttributes) AllowedHttpMethods() terra.StringValue {
	return terra.ReferenceAsString(cbs.ref.Append("allowed_http_methods"))
}

func (cbs CacheBehaviorSettingsAttributes) CachedHttpMethods() terra.StringValue {
	return terra.ReferenceAsString(cbs.ref.Append("cached_http_methods"))
}

func (cbs CacheBehaviorSettingsAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("default_ttl"))
}

func (cbs CacheBehaviorSettingsAttributes) MaximumTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("maximum_ttl"))
}

func (cbs CacheBehaviorSettingsAttributes) MinimumTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("minimum_ttl"))
}

func (cbs CacheBehaviorSettingsAttributes) ForwardedCookies() terra.ListValue[ForwardedCookiesAttributes] {
	return terra.ReferenceAsList[ForwardedCookiesAttributes](cbs.ref.Append("forwarded_cookies"))
}

func (cbs CacheBehaviorSettingsAttributes) ForwardedHeaders() terra.ListValue[ForwardedHeadersAttributes] {
	return terra.ReferenceAsList[ForwardedHeadersAttributes](cbs.ref.Append("forwarded_headers"))
}

func (cbs CacheBehaviorSettingsAttributes) ForwardedQueryStrings() terra.ListValue[ForwardedQueryStringsAttributes] {
	return terra.ReferenceAsList[ForwardedQueryStringsAttributes](cbs.ref.Append("forwarded_query_strings"))
}

type ForwardedCookiesAttributes struct {
	ref terra.Reference
}

func (fc ForwardedCookiesAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc ForwardedCookiesAttributes) InternalWithRef(ref terra.Reference) ForwardedCookiesAttributes {
	return ForwardedCookiesAttributes{ref: ref}
}

func (fc ForwardedCookiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc ForwardedCookiesAttributes) CookiesAllowList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fc.ref.Append("cookies_allow_list"))
}

func (fc ForwardedCookiesAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("option"))
}

type ForwardedHeadersAttributes struct {
	ref terra.Reference
}

func (fh ForwardedHeadersAttributes) InternalRef() (terra.Reference, error) {
	return fh.ref, nil
}

func (fh ForwardedHeadersAttributes) InternalWithRef(ref terra.Reference) ForwardedHeadersAttributes {
	return ForwardedHeadersAttributes{ref: ref}
}

func (fh ForwardedHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fh.ref.InternalTokens()
}

func (fh ForwardedHeadersAttributes) HeadersAllowList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fh.ref.Append("headers_allow_list"))
}

func (fh ForwardedHeadersAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(fh.ref.Append("option"))
}

type ForwardedQueryStringsAttributes struct {
	ref terra.Reference
}

func (fqs ForwardedQueryStringsAttributes) InternalRef() (terra.Reference, error) {
	return fqs.ref, nil
}

func (fqs ForwardedQueryStringsAttributes) InternalWithRef(ref terra.Reference) ForwardedQueryStringsAttributes {
	return ForwardedQueryStringsAttributes{ref: ref}
}

func (fqs ForwardedQueryStringsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fqs.ref.InternalTokens()
}

func (fqs ForwardedQueryStringsAttributes) Option() terra.BoolValue {
	return terra.ReferenceAsBool(fqs.ref.Append("option"))
}

func (fqs ForwardedQueryStringsAttributes) QueryStringsAllowedList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fqs.ref.Append("query_strings_allowed_list"))
}

type DefaultCacheBehaviorAttributes struct {
	ref terra.Reference
}

func (dcb DefaultCacheBehaviorAttributes) InternalRef() (terra.Reference, error) {
	return dcb.ref, nil
}

func (dcb DefaultCacheBehaviorAttributes) InternalWithRef(ref terra.Reference) DefaultCacheBehaviorAttributes {
	return DefaultCacheBehaviorAttributes{ref: ref}
}

func (dcb DefaultCacheBehaviorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcb.ref.InternalTokens()
}

func (dcb DefaultCacheBehaviorAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(dcb.ref.Append("behavior"))
}

type OriginAttributes struct {
	ref terra.Reference
}

func (o OriginAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OriginAttributes) InternalWithRef(ref terra.Reference) OriginAttributes {
	return OriginAttributes{ref: ref}
}

func (o OriginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OriginAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("name"))
}

func (o OriginAttributes) ProtocolPolicy() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("protocol_policy"))
}

func (o OriginAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("region_name"))
}

func (o OriginAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("resource_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LocationState struct {
	AvailabilityZone string `json:"availability_zone"`
	RegionName       string `json:"region_name"`
}

type CacheBehaviorState struct {
	Behavior string `json:"behavior"`
	Path     string `json:"path"`
}

type CacheBehaviorSettingsState struct {
	AllowedHttpMethods    string                       `json:"allowed_http_methods"`
	CachedHttpMethods     string                       `json:"cached_http_methods"`
	DefaultTtl            float64                      `json:"default_ttl"`
	MaximumTtl            float64                      `json:"maximum_ttl"`
	MinimumTtl            float64                      `json:"minimum_ttl"`
	ForwardedCookies      []ForwardedCookiesState      `json:"forwarded_cookies"`
	ForwardedHeaders      []ForwardedHeadersState      `json:"forwarded_headers"`
	ForwardedQueryStrings []ForwardedQueryStringsState `json:"forwarded_query_strings"`
}

type ForwardedCookiesState struct {
	CookiesAllowList []string `json:"cookies_allow_list"`
	Option           string   `json:"option"`
}

type ForwardedHeadersState struct {
	HeadersAllowList []string `json:"headers_allow_list"`
	Option           string   `json:"option"`
}

type ForwardedQueryStringsState struct {
	Option                  bool     `json:"option"`
	QueryStringsAllowedList []string `json:"query_strings_allowed_list"`
}

type DefaultCacheBehaviorState struct {
	Behavior string `json:"behavior"`
}

type OriginState struct {
	Name           string `json:"name"`
	ProtocolPolicy string `json:"protocol_policy"`
	RegionName     string `json:"region_name"`
	ResourceType   string `json:"resource_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
