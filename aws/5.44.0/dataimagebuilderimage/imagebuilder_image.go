// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataimagebuilderimage

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ImageScanningConfiguration struct {
	// EcrConfiguration: min=0
	EcrConfiguration []EcrConfiguration `hcl:"ecr_configuration,block" validate:"min=0"`
}

type EcrConfiguration struct{}

type ImageTestsConfiguration struct{}

type OutputResources struct {
	// Amis: min=0
	Amis []Amis `hcl:"amis,block" validate:"min=0"`
	// Containers: min=0
	Containers []Containers `hcl:"containers,block" validate:"min=0"`
}

type Amis struct{}

type Containers struct{}

type ImageScanningConfigurationAttributes struct {
	ref terra.Reference
}

func (isc ImageScanningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc ImageScanningConfigurationAttributes) InternalWithRef(ref terra.Reference) ImageScanningConfigurationAttributes {
	return ImageScanningConfigurationAttributes{ref: ref}
}

func (isc ImageScanningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc ImageScanningConfigurationAttributes) ImageScanningEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("image_scanning_enabled"))
}

func (isc ImageScanningConfigurationAttributes) EcrConfiguration() terra.ListValue[EcrConfigurationAttributes] {
	return terra.ReferenceAsList[EcrConfigurationAttributes](isc.ref.Append("ecr_configuration"))
}

type EcrConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EcrConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EcrConfigurationAttributes) InternalWithRef(ref terra.Reference) EcrConfigurationAttributes {
	return EcrConfigurationAttributes{ref: ref}
}

func (ec EcrConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EcrConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("container_tags"))
}

func (ec EcrConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("repository_name"))
}

type ImageTestsConfigurationAttributes struct {
	ref terra.Reference
}

func (itc ImageTestsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc ImageTestsConfigurationAttributes) InternalWithRef(ref terra.Reference) ImageTestsConfigurationAttributes {
	return ImageTestsConfigurationAttributes{ref: ref}
}

func (itc ImageTestsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc ImageTestsConfigurationAttributes) ImageTestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(itc.ref.Append("image_tests_enabled"))
}

func (itc ImageTestsConfigurationAttributes) TimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("timeout_minutes"))
}

type OutputResourcesAttributes struct {
	ref terra.Reference
}

func (or OutputResourcesAttributes) InternalRef() (terra.Reference, error) {
	return or.ref, nil
}

func (or OutputResourcesAttributes) InternalWithRef(ref terra.Reference) OutputResourcesAttributes {
	return OutputResourcesAttributes{ref: ref}
}

func (or OutputResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return or.ref.InternalTokens()
}

func (or OutputResourcesAttributes) Amis() terra.SetValue[AmisAttributes] {
	return terra.ReferenceAsSet[AmisAttributes](or.ref.Append("amis"))
}

func (or OutputResourcesAttributes) Containers() terra.SetValue[ContainersAttributes] {
	return terra.ReferenceAsSet[ContainersAttributes](or.ref.Append("containers"))
}

type AmisAttributes struct {
	ref terra.Reference
}

func (a AmisAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AmisAttributes) InternalWithRef(ref terra.Reference) AmisAttributes {
	return AmisAttributes{ref: ref}
}

func (a AmisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AmisAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("account_id"))
}

func (a AmisAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a AmisAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("image"))
}

func (a AmisAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AmisAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

type ContainersAttributes struct {
	ref terra.Reference
}

func (c ContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainersAttributes) InternalWithRef(ref terra.Reference) ContainersAttributes {
	return ContainersAttributes{ref: ref}
}

func (c ContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainersAttributes) ImageUris() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("image_uris"))
}

func (c ContainersAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("region"))
}

type ImageScanningConfigurationState struct {
	ImageScanningEnabled bool                    `json:"image_scanning_enabled"`
	EcrConfiguration     []EcrConfigurationState `json:"ecr_configuration"`
}

type EcrConfigurationState struct {
	ContainerTags  []string `json:"container_tags"`
	RepositoryName string   `json:"repository_name"`
}

type ImageTestsConfigurationState struct {
	ImageTestsEnabled bool    `json:"image_tests_enabled"`
	TimeoutMinutes    float64 `json:"timeout_minutes"`
}

type OutputResourcesState struct {
	Amis       []AmisState       `json:"amis"`
	Containers []ContainersState `json:"containers"`
}

type AmisState struct {
	AccountId   string `json:"account_id"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Region      string `json:"region"`
}

type ContainersState struct {
	ImageUris []string `json:"image_uris"`
	Region    string   `json:"region"`
}
