// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datacodecatalystdevenvironment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Ides struct{}

type PersistentStorage struct{}

type Repositories struct{}

type IdesAttributes struct {
	ref terra.Reference
}

func (i IdesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IdesAttributes) InternalWithRef(ref terra.Reference) IdesAttributes {
	return IdesAttributes{ref: ref}
}

func (i IdesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IdesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

func (i IdesAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("runtime"))
}

type PersistentStorageAttributes struct {
	ref terra.Reference
}

func (ps PersistentStorageAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PersistentStorageAttributes) InternalWithRef(ref terra.Reference) PersistentStorageAttributes {
	return PersistentStorageAttributes{ref: ref}
}

func (ps PersistentStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PersistentStorageAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("size"))
}

type RepositoriesAttributes struct {
	ref terra.Reference
}

func (r RepositoriesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RepositoriesAttributes) InternalWithRef(ref terra.Reference) RepositoriesAttributes {
	return RepositoriesAttributes{ref: ref}
}

func (r RepositoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RepositoriesAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("branch_name"))
}

func (r RepositoriesAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_name"))
}

type IdesState struct {
	Name    string `json:"name"`
	Runtime string `json:"runtime"`
}

type PersistentStorageState struct {
	Size float64 `json:"size"`
}

type RepositoriesState struct {
	BranchName     string `json:"branch_name"`
	RepositoryName string `json:"repository_name"`
}
