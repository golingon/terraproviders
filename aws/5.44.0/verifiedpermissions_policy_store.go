// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	verifiedpermissionspolicystore "github.com/golingon/terraproviders/aws/5.44.0/verifiedpermissionspolicystore"
	"io"
)

// NewVerifiedpermissionsPolicyStore creates a new instance of [VerifiedpermissionsPolicyStore].
func NewVerifiedpermissionsPolicyStore(name string, args VerifiedpermissionsPolicyStoreArgs) *VerifiedpermissionsPolicyStore {
	return &VerifiedpermissionsPolicyStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VerifiedpermissionsPolicyStore)(nil)

// VerifiedpermissionsPolicyStore represents the Terraform resource aws_verifiedpermissions_policy_store.
type VerifiedpermissionsPolicyStore struct {
	Name      string
	Args      VerifiedpermissionsPolicyStoreArgs
	state     *verifiedpermissionsPolicyStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) Type() string {
	return "aws_verifiedpermissions_policy_store"
}

// LocalName returns the local name for [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) LocalName() string {
	return vps.Name
}

// Configuration returns the configuration (args) for [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) Configuration() interface{} {
	return vps.Args
}

// DependOn is used for other resources to depend on [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) DependOn() terra.Reference {
	return terra.ReferenceResource(vps)
}

// Dependencies returns the list of resources [VerifiedpermissionsPolicyStore] depends_on.
func (vps *VerifiedpermissionsPolicyStore) Dependencies() terra.Dependencies {
	return vps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) LifecycleManagement() *terra.Lifecycle {
	return vps.Lifecycle
}

// Attributes returns the attributes for [VerifiedpermissionsPolicyStore].
func (vps *VerifiedpermissionsPolicyStore) Attributes() verifiedpermissionsPolicyStoreAttributes {
	return verifiedpermissionsPolicyStoreAttributes{ref: terra.ReferenceResource(vps)}
}

// ImportState imports the given attribute values into [VerifiedpermissionsPolicyStore]'s state.
func (vps *VerifiedpermissionsPolicyStore) ImportState(av io.Reader) error {
	vps.state = &verifiedpermissionsPolicyStoreState{}
	if err := json.NewDecoder(av).Decode(vps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vps.Type(), vps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VerifiedpermissionsPolicyStore] has state.
func (vps *VerifiedpermissionsPolicyStore) State() (*verifiedpermissionsPolicyStoreState, bool) {
	return vps.state, vps.state != nil
}

// StateMust returns the state for [VerifiedpermissionsPolicyStore]. Panics if the state is nil.
func (vps *VerifiedpermissionsPolicyStore) StateMust() *verifiedpermissionsPolicyStoreState {
	if vps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vps.Type(), vps.LocalName()))
	}
	return vps.state
}

// VerifiedpermissionsPolicyStoreArgs contains the configurations for aws_verifiedpermissions_policy_store.
type VerifiedpermissionsPolicyStoreArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ValidationSettings: min=0
	ValidationSettings []verifiedpermissionspolicystore.ValidationSettings `hcl:"validation_settings,block" validate:"min=0"`
}
type verifiedpermissionsPolicyStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_verifiedpermissions_policy_store.
func (vps verifiedpermissionsPolicyStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(vps.ref.Append("arn"))
}

// Description returns a reference to field description of aws_verifiedpermissions_policy_store.
func (vps verifiedpermissionsPolicyStoreAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vps.ref.Append("description"))
}

// Id returns a reference to field id of aws_verifiedpermissions_policy_store.
func (vps verifiedpermissionsPolicyStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vps.ref.Append("id"))
}

// PolicyStoreId returns a reference to field policy_store_id of aws_verifiedpermissions_policy_store.
func (vps verifiedpermissionsPolicyStoreAttributes) PolicyStoreId() terra.StringValue {
	return terra.ReferenceAsString(vps.ref.Append("policy_store_id"))
}

func (vps verifiedpermissionsPolicyStoreAttributes) ValidationSettings() terra.ListValue[verifiedpermissionspolicystore.ValidationSettingsAttributes] {
	return terra.ReferenceAsList[verifiedpermissionspolicystore.ValidationSettingsAttributes](vps.ref.Append("validation_settings"))
}

type verifiedpermissionsPolicyStoreState struct {
	Arn                string                                                   `json:"arn"`
	Description        string                                                   `json:"description"`
	Id                 string                                                   `json:"id"`
	PolicyStoreId      string                                                   `json:"policy_store_id"`
	ValidationSettings []verifiedpermissionspolicystore.ValidationSettingsState `json:"validation_settings"`
}
