// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package internetmonitormonitor

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HealthEventsConfig struct {
	// AvailabilityScoreThreshold: number, optional
	AvailabilityScoreThreshold terra.NumberValue `hcl:"availability_score_threshold,attr"`
	// PerformanceScoreThreshold: number, optional
	PerformanceScoreThreshold terra.NumberValue `hcl:"performance_score_threshold,attr"`
}

type InternetMeasurementsLogDelivery struct {
	// S3Config: optional
	S3Config *S3Config `hcl:"s3_config,block"`
}

type S3Config struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// LogDeliveryStatus: string, optional
	LogDeliveryStatus terra.StringValue `hcl:"log_delivery_status,attr"`
}

type HealthEventsConfigAttributes struct {
	ref terra.Reference
}

func (hec HealthEventsConfigAttributes) InternalRef() (terra.Reference, error) {
	return hec.ref, nil
}

func (hec HealthEventsConfigAttributes) InternalWithRef(ref terra.Reference) HealthEventsConfigAttributes {
	return HealthEventsConfigAttributes{ref: ref}
}

func (hec HealthEventsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hec.ref.InternalTokens()
}

func (hec HealthEventsConfigAttributes) AvailabilityScoreThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("availability_score_threshold"))
}

func (hec HealthEventsConfigAttributes) PerformanceScoreThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("performance_score_threshold"))
}

type InternetMeasurementsLogDeliveryAttributes struct {
	ref terra.Reference
}

func (imld InternetMeasurementsLogDeliveryAttributes) InternalRef() (terra.Reference, error) {
	return imld.ref, nil
}

func (imld InternetMeasurementsLogDeliveryAttributes) InternalWithRef(ref terra.Reference) InternetMeasurementsLogDeliveryAttributes {
	return InternetMeasurementsLogDeliveryAttributes{ref: ref}
}

func (imld InternetMeasurementsLogDeliveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imld.ref.InternalTokens()
}

func (imld InternetMeasurementsLogDeliveryAttributes) S3Config() terra.ListValue[S3ConfigAttributes] {
	return terra.ReferenceAsList[S3ConfigAttributes](imld.ref.Append("s3_config"))
}

type S3ConfigAttributes struct {
	ref terra.Reference
}

func (sc S3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc S3ConfigAttributes) InternalWithRef(ref terra.Reference) S3ConfigAttributes {
	return S3ConfigAttributes{ref: ref}
}

func (sc S3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc S3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc S3ConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_prefix"))
}

func (sc S3ConfigAttributes) LogDeliveryStatus() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("log_delivery_status"))
}

type HealthEventsConfigState struct {
	AvailabilityScoreThreshold float64 `json:"availability_score_threshold"`
	PerformanceScoreThreshold  float64 `json:"performance_score_threshold"`
}

type InternetMeasurementsLogDeliveryState struct {
	S3Config []S3ConfigState `json:"s3_config"`
}

type S3ConfigState struct {
	BucketName        string `json:"bucket_name"`
	BucketPrefix      string `json:"bucket_prefix"`
	LogDeliveryStatus string `json:"log_delivery_status"`
}
