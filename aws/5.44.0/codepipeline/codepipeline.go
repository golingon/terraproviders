// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package codepipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ArtifactStore struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EncryptionKey: optional
	EncryptionKey *EncryptionKey `hcl:"encryption_key,block"`
}

type EncryptionKey struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Stage struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Action: min=1
	Action []Action `hcl:"action,block" validate:"min=1"`
}

type Action struct {
	// Category: string, required
	Category terra.StringValue `hcl:"category,attr" validate:"required"`
	// Configuration: map of string, optional
	Configuration terra.MapValue[terra.StringValue] `hcl:"configuration,attr"`
	// InputArtifacts: list of string, optional
	InputArtifacts terra.ListValue[terra.StringValue] `hcl:"input_artifacts,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OutputArtifacts: list of string, optional
	OutputArtifacts terra.ListValue[terra.StringValue] `hcl:"output_artifacts,attr"`
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// Provider: string, required
	Provider terra.StringValue `hcl:"provider,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// RunOrder: number, optional
	RunOrder terra.NumberValue `hcl:"run_order,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Trigger struct {
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// GitConfiguration: required
	GitConfiguration *GitConfiguration `hcl:"git_configuration,block" validate:"required"`
}

type GitConfiguration struct {
	// SourceActionName: string, required
	SourceActionName terra.StringValue `hcl:"source_action_name,attr" validate:"required"`
	// PullRequest: min=0,max=3
	PullRequest []PullRequest `hcl:"pull_request,block" validate:"min=0,max=3"`
	// Push: min=0,max=3
	Push []Push `hcl:"push,block" validate:"min=0,max=3"`
}

type PullRequest struct {
	// Events: list of string, optional
	Events terra.ListValue[terra.StringValue] `hcl:"events,attr"`
	// PullRequestBranches: optional
	Branches *PullRequestBranches `hcl:"branches,block"`
	// PullRequestFilePaths: optional
	FilePaths *PullRequestFilePaths `hcl:"file_paths,block"`
}

type PullRequestBranches struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type PullRequestFilePaths struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type Push struct {
	// PushBranches: optional
	Branches *PushBranches `hcl:"branches,block"`
	// PushFilePaths: optional
	FilePaths *PushFilePaths `hcl:"file_paths,block"`
	// Tags: optional
	Tags *Tags `hcl:"tags,block"`
}

type PushBranches struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type PushFilePaths struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type Tags struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type Variable struct {
	// DefaultValue: string, optional
	DefaultValue terra.StringValue `hcl:"default_value,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ArtifactStoreAttributes struct {
	ref terra.Reference
}

func (as ArtifactStoreAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ArtifactStoreAttributes) InternalWithRef(ref terra.Reference) ArtifactStoreAttributes {
	return ArtifactStoreAttributes{ref: ref}
}

func (as ArtifactStoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ArtifactStoreAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("location"))
}

func (as ArtifactStoreAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("region"))
}

func (as ArtifactStoreAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

func (as ArtifactStoreAttributes) EncryptionKey() terra.ListValue[EncryptionKeyAttributes] {
	return terra.ReferenceAsList[EncryptionKeyAttributes](as.ref.Append("encryption_key"))
}

type EncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek EncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek EncryptionKeyAttributes) InternalWithRef(ref terra.Reference) EncryptionKeyAttributes {
	return EncryptionKeyAttributes{ref: ref}
}

func (ek EncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek EncryptionKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("id"))
}

func (ek EncryptionKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("type"))
}

type StageAttributes struct {
	ref terra.Reference
}

func (s StageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StageAttributes) InternalWithRef(ref terra.Reference) StageAttributes {
	return StageAttributes{ref: ref}
}

func (s StageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StageAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](s.ref.Append("action"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("category"))
}

func (a ActionAttributes) Configuration() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("configuration"))
}

func (a ActionAttributes) InputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("input_artifacts"))
}

func (a ActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a ActionAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("namespace"))
}

func (a ActionAttributes) OutputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("output_artifacts"))
}

func (a ActionAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("owner"))
}

func (a ActionAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("provider"))
}

func (a ActionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

func (a ActionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role_arn"))
}

func (a ActionAttributes) RunOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("run_order"))
}

func (a ActionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("version"))
}

type TriggerAttributes struct {
	ref terra.Reference
}

func (t TriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerAttributes) InternalWithRef(ref terra.Reference) TriggerAttributes {
	return TriggerAttributes{ref: ref}
}

func (t TriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("provider_type"))
}

func (t TriggerAttributes) GitConfiguration() terra.ListValue[GitConfigurationAttributes] {
	return terra.ReferenceAsList[GitConfigurationAttributes](t.ref.Append("git_configuration"))
}

type GitConfigurationAttributes struct {
	ref terra.Reference
}

func (gc GitConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc GitConfigurationAttributes) InternalWithRef(ref terra.Reference) GitConfigurationAttributes {
	return GitConfigurationAttributes{ref: ref}
}

func (gc GitConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc GitConfigurationAttributes) SourceActionName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("source_action_name"))
}

func (gc GitConfigurationAttributes) PullRequest() terra.ListValue[PullRequestAttributes] {
	return terra.ReferenceAsList[PullRequestAttributes](gc.ref.Append("pull_request"))
}

func (gc GitConfigurationAttributes) Push() terra.ListValue[PushAttributes] {
	return terra.ReferenceAsList[PushAttributes](gc.ref.Append("push"))
}

type PullRequestAttributes struct {
	ref terra.Reference
}

func (pr PullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PullRequestAttributes) InternalWithRef(ref terra.Reference) PullRequestAttributes {
	return PullRequestAttributes{ref: ref}
}

func (pr PullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PullRequestAttributes) Events() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pr.ref.Append("events"))
}

func (pr PullRequestAttributes) Branches() terra.ListValue[PullRequestBranchesAttributes] {
	return terra.ReferenceAsList[PullRequestBranchesAttributes](pr.ref.Append("branches"))
}

func (pr PullRequestAttributes) FilePaths() terra.ListValue[PullRequestFilePathsAttributes] {
	return terra.ReferenceAsList[PullRequestFilePathsAttributes](pr.ref.Append("file_paths"))
}

type PullRequestBranchesAttributes struct {
	ref terra.Reference
}

func (b PullRequestBranchesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b PullRequestBranchesAttributes) InternalWithRef(ref terra.Reference) PullRequestBranchesAttributes {
	return PullRequestBranchesAttributes{ref: ref}
}

func (b PullRequestBranchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b PullRequestBranchesAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("excludes"))
}

func (b PullRequestBranchesAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("includes"))
}

type PullRequestFilePathsAttributes struct {
	ref terra.Reference
}

func (fp PullRequestFilePathsAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp PullRequestFilePathsAttributes) InternalWithRef(ref terra.Reference) PullRequestFilePathsAttributes {
	return PullRequestFilePathsAttributes{ref: ref}
}

func (fp PullRequestFilePathsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp PullRequestFilePathsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("excludes"))
}

func (fp PullRequestFilePathsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("includes"))
}

type PushAttributes struct {
	ref terra.Reference
}

func (p PushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PushAttributes) InternalWithRef(ref terra.Reference) PushAttributes {
	return PushAttributes{ref: ref}
}

func (p PushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PushAttributes) Branches() terra.ListValue[PushBranchesAttributes] {
	return terra.ReferenceAsList[PushBranchesAttributes](p.ref.Append("branches"))
}

func (p PushAttributes) FilePaths() terra.ListValue[PushFilePathsAttributes] {
	return terra.ReferenceAsList[PushFilePathsAttributes](p.ref.Append("file_paths"))
}

func (p PushAttributes) Tags() terra.ListValue[TagsAttributes] {
	return terra.ReferenceAsList[TagsAttributes](p.ref.Append("tags"))
}

type PushBranchesAttributes struct {
	ref terra.Reference
}

func (b PushBranchesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b PushBranchesAttributes) InternalWithRef(ref terra.Reference) PushBranchesAttributes {
	return PushBranchesAttributes{ref: ref}
}

func (b PushBranchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b PushBranchesAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("excludes"))
}

func (b PushBranchesAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("includes"))
}

type PushFilePathsAttributes struct {
	ref terra.Reference
}

func (fp PushFilePathsAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp PushFilePathsAttributes) InternalWithRef(ref terra.Reference) PushFilePathsAttributes {
	return PushFilePathsAttributes{ref: ref}
}

func (fp PushFilePathsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp PushFilePathsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("excludes"))
}

func (fp PushFilePathsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("includes"))
}

type TagsAttributes struct {
	ref terra.Reference
}

func (t TagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TagsAttributes) InternalWithRef(ref terra.Reference) TagsAttributes {
	return TagsAttributes{ref: ref}
}

func (t TagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TagsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("excludes"))
}

func (t TagsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("includes"))
}

type VariableAttributes struct {
	ref terra.Reference
}

func (v VariableAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VariableAttributes) InternalWithRef(ref terra.Reference) VariableAttributes {
	return VariableAttributes{ref: ref}
}

func (v VariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VariableAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("default_value"))
}

func (v VariableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("description"))
}

func (v VariableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

type ArtifactStoreState struct {
	Location      string               `json:"location"`
	Region        string               `json:"region"`
	Type          string               `json:"type"`
	EncryptionKey []EncryptionKeyState `json:"encryption_key"`
}

type EncryptionKeyState struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

type StageState struct {
	Name   string        `json:"name"`
	Action []ActionState `json:"action"`
}

type ActionState struct {
	Category        string            `json:"category"`
	Configuration   map[string]string `json:"configuration"`
	InputArtifacts  []string          `json:"input_artifacts"`
	Name            string            `json:"name"`
	Namespace       string            `json:"namespace"`
	OutputArtifacts []string          `json:"output_artifacts"`
	Owner           string            `json:"owner"`
	Provider        string            `json:"provider"`
	Region          string            `json:"region"`
	RoleArn         string            `json:"role_arn"`
	RunOrder        float64           `json:"run_order"`
	Version         string            `json:"version"`
}

type TriggerState struct {
	ProviderType     string                  `json:"provider_type"`
	GitConfiguration []GitConfigurationState `json:"git_configuration"`
}

type GitConfigurationState struct {
	SourceActionName string             `json:"source_action_name"`
	PullRequest      []PullRequestState `json:"pull_request"`
	Push             []PushState        `json:"push"`
}

type PullRequestState struct {
	Events    []string                    `json:"events"`
	Branches  []PullRequestBranchesState  `json:"branches"`
	FilePaths []PullRequestFilePathsState `json:"file_paths"`
}

type PullRequestBranchesState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type PullRequestFilePathsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type PushState struct {
	Branches  []PushBranchesState  `json:"branches"`
	FilePaths []PushFilePathsState `json:"file_paths"`
	Tags      []TagsState          `json:"tags"`
}

type PushBranchesState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type PushFilePathsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type TagsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type VariableState struct {
	DefaultValue string `json:"default_value"`
	Description  string `json:"description"`
	Name         string `json:"name"`
}
