// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package fsxfilecache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRepositoryAssociation struct {
	// DataRepositoryPath: string, required
	DataRepositoryPath terra.StringValue `hcl:"data_repository_path,attr" validate:"required"`
	// DataRepositorySubdirectories: set of string, optional
	DataRepositorySubdirectories terra.SetValue[terra.StringValue] `hcl:"data_repository_subdirectories,attr"`
	// FileCachePath: string, required
	FileCachePath terra.StringValue `hcl:"file_cache_path,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Nfs: min=0
	Nfs []Nfs `hcl:"nfs,block" validate:"min=0"`
}

type Nfs struct {
	// DnsIps: set of string, optional
	DnsIps terra.SetValue[terra.StringValue] `hcl:"dns_ips,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type LustreConfiguration struct {
	// DeploymentType: string, required
	DeploymentType terra.StringValue `hcl:"deployment_type,attr" validate:"required"`
	// PerUnitStorageThroughput: number, required
	PerUnitStorageThroughput terra.NumberValue `hcl:"per_unit_storage_throughput,attr" validate:"required"`
	// WeeklyMaintenanceStartTime: string, optional
	WeeklyMaintenanceStartTime terra.StringValue `hcl:"weekly_maintenance_start_time,attr"`
	// LogConfiguration: min=0
	LogConfiguration []LogConfiguration `hcl:"log_configuration,block" validate:"min=0"`
	// MetadataConfiguration: min=1,max=8
	MetadataConfiguration []MetadataConfiguration `hcl:"metadata_configuration,block" validate:"min=1,max=8"`
}

type LogConfiguration struct{}

type MetadataConfiguration struct {
	// StorageCapacity: number, required
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataRepositoryAssociationAttributes struct {
	ref terra.Reference
}

func (dra DataRepositoryAssociationAttributes) InternalRef() (terra.Reference, error) {
	return dra.ref, nil
}

func (dra DataRepositoryAssociationAttributes) InternalWithRef(ref terra.Reference) DataRepositoryAssociationAttributes {
	return DataRepositoryAssociationAttributes{ref: ref}
}

func (dra DataRepositoryAssociationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dra.ref.InternalTokens()
}

func (dra DataRepositoryAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("association_id"))
}

func (dra DataRepositoryAssociationAttributes) DataRepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("data_repository_path"))
}

func (dra DataRepositoryAssociationAttributes) DataRepositorySubdirectories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dra.ref.Append("data_repository_subdirectories"))
}

func (dra DataRepositoryAssociationAttributes) FileCacheId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_cache_id"))
}

func (dra DataRepositoryAssociationAttributes) FileCachePath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_cache_path"))
}

func (dra DataRepositoryAssociationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_system_id"))
}

func (dra DataRepositoryAssociationAttributes) FileSystemPath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_system_path"))
}

func (dra DataRepositoryAssociationAttributes) ImportedFileChunkSize() terra.NumberValue {
	return terra.ReferenceAsNumber(dra.ref.Append("imported_file_chunk_size"))
}

func (dra DataRepositoryAssociationAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("resource_arn"))
}

func (dra DataRepositoryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dra.ref.Append("tags"))
}

func (dra DataRepositoryAssociationAttributes) Nfs() terra.SetValue[NfsAttributes] {
	return terra.ReferenceAsSet[NfsAttributes](dra.ref.Append("nfs"))
}

type NfsAttributes struct {
	ref terra.Reference
}

func (n NfsAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NfsAttributes) InternalWithRef(ref terra.Reference) NfsAttributes {
	return NfsAttributes{ref: ref}
}

func (n NfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NfsAttributes) DnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("dns_ips"))
}

func (n NfsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("version"))
}

type LustreConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LustreConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LustreConfigurationAttributes) InternalWithRef(ref terra.Reference) LustreConfigurationAttributes {
	return LustreConfigurationAttributes{ref: ref}
}

func (lc LustreConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LustreConfigurationAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("deployment_type"))
}

func (lc LustreConfigurationAttributes) MountName() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("mount_name"))
}

func (lc LustreConfigurationAttributes) PerUnitStorageThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("per_unit_storage_throughput"))
}

func (lc LustreConfigurationAttributes) WeeklyMaintenanceStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("weekly_maintenance_start_time"))
}

func (lc LustreConfigurationAttributes) LogConfiguration() terra.SetValue[LogConfigurationAttributes] {
	return terra.ReferenceAsSet[LogConfigurationAttributes](lc.ref.Append("log_configuration"))
}

func (lc LustreConfigurationAttributes) MetadataConfiguration() terra.SetValue[MetadataConfigurationAttributes] {
	return terra.ReferenceAsSet[MetadataConfigurationAttributes](lc.ref.Append("metadata_configuration"))
}

type LogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationAttributes {
	return LogConfigurationAttributes{ref: ref}
}

func (lc LogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("destination"))
}

func (lc LogConfigurationAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("level"))
}

type MetadataConfigurationAttributes struct {
	ref terra.Reference
}

func (mc MetadataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MetadataConfigurationAttributes) InternalWithRef(ref terra.Reference) MetadataConfigurationAttributes {
	return MetadataConfigurationAttributes{ref: ref}
}

func (mc MetadataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MetadataConfigurationAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("storage_capacity"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataRepositoryAssociationState struct {
	AssociationId                string            `json:"association_id"`
	DataRepositoryPath           string            `json:"data_repository_path"`
	DataRepositorySubdirectories []string          `json:"data_repository_subdirectories"`
	FileCacheId                  string            `json:"file_cache_id"`
	FileCachePath                string            `json:"file_cache_path"`
	FileSystemId                 string            `json:"file_system_id"`
	FileSystemPath               string            `json:"file_system_path"`
	ImportedFileChunkSize        float64           `json:"imported_file_chunk_size"`
	ResourceArn                  string            `json:"resource_arn"`
	Tags                         map[string]string `json:"tags"`
	Nfs                          []NfsState        `json:"nfs"`
}

type NfsState struct {
	DnsIps  []string `json:"dns_ips"`
	Version string   `json:"version"`
}

type LustreConfigurationState struct {
	DeploymentType             string                       `json:"deployment_type"`
	MountName                  string                       `json:"mount_name"`
	PerUnitStorageThroughput   float64                      `json:"per_unit_storage_throughput"`
	WeeklyMaintenanceStartTime string                       `json:"weekly_maintenance_start_time"`
	LogConfiguration           []LogConfigurationState      `json:"log_configuration"`
	MetadataConfiguration      []MetadataConfigurationState `json:"metadata_configuration"`
}

type LogConfigurationState struct {
	Destination string `json:"destination"`
	Level       string `json:"level"`
}

type MetadataConfigurationState struct {
	StorageCapacity float64 `json:"storage_capacity"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
