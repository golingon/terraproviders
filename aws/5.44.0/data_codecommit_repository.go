// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataCodecommitRepository creates a new instance of [DataCodecommitRepository].
func NewDataCodecommitRepository(name string, args DataCodecommitRepositoryArgs) *DataCodecommitRepository {
	return &DataCodecommitRepository{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataCodecommitRepository)(nil)

// DataCodecommitRepository represents the Terraform data resource aws_codecommit_repository.
type DataCodecommitRepository struct {
	Name string
	Args DataCodecommitRepositoryArgs
}

// DataSource returns the Terraform object type for [DataCodecommitRepository].
func (cr *DataCodecommitRepository) DataSource() string {
	return "aws_codecommit_repository"
}

// LocalName returns the local name for [DataCodecommitRepository].
func (cr *DataCodecommitRepository) LocalName() string {
	return cr.Name
}

// Configuration returns the configuration (args) for [DataCodecommitRepository].
func (cr *DataCodecommitRepository) Configuration() interface{} {
	return cr.Args
}

// Attributes returns the attributes for [DataCodecommitRepository].
func (cr *DataCodecommitRepository) Attributes() dataCodecommitRepositoryAttributes {
	return dataCodecommitRepositoryAttributes{ref: terra.ReferenceDataResource(cr)}
}

// DataCodecommitRepositoryArgs contains the configurations for aws_codecommit_repository.
type DataCodecommitRepositoryArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
}
type dataCodecommitRepositoryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("arn"))
}

// CloneUrlHttp returns a reference to field clone_url_http of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) CloneUrlHttp() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("clone_url_http"))
}

// CloneUrlSsh returns a reference to field clone_url_ssh of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) CloneUrlSsh() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("clone_url_ssh"))
}

// Id returns a reference to field id of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("kms_key_id"))
}

// RepositoryId returns a reference to field repository_id of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) RepositoryId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("repository_id"))
}

// RepositoryName returns a reference to field repository_name of aws_codecommit_repository.
func (cr dataCodecommitRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("repository_name"))
}
