// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRoute53RecoverycontrolconfigRoutingControl creates a new instance of [Route53RecoverycontrolconfigRoutingControl].
func NewRoute53RecoverycontrolconfigRoutingControl(name string, args Route53RecoverycontrolconfigRoutingControlArgs) *Route53RecoverycontrolconfigRoutingControl {
	return &Route53RecoverycontrolconfigRoutingControl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoverycontrolconfigRoutingControl)(nil)

// Route53RecoverycontrolconfigRoutingControl represents the Terraform resource aws_route53recoverycontrolconfig_routing_control.
type Route53RecoverycontrolconfigRoutingControl struct {
	Name      string
	Args      Route53RecoverycontrolconfigRoutingControlArgs
	state     *route53RecoverycontrolconfigRoutingControlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) Type() string {
	return "aws_route53recoverycontrolconfig_routing_control"
}

// LocalName returns the local name for [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) LocalName() string {
	return rrc.Name
}

// Configuration returns the configuration (args) for [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) Configuration() interface{} {
	return rrc.Args
}

// DependOn is used for other resources to depend on [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) DependOn() terra.Reference {
	return terra.ReferenceResource(rrc)
}

// Dependencies returns the list of resources [Route53RecoverycontrolconfigRoutingControl] depends_on.
func (rrc *Route53RecoverycontrolconfigRoutingControl) Dependencies() terra.Dependencies {
	return rrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) LifecycleManagement() *terra.Lifecycle {
	return rrc.Lifecycle
}

// Attributes returns the attributes for [Route53RecoverycontrolconfigRoutingControl].
func (rrc *Route53RecoverycontrolconfigRoutingControl) Attributes() route53RecoverycontrolconfigRoutingControlAttributes {
	return route53RecoverycontrolconfigRoutingControlAttributes{ref: terra.ReferenceResource(rrc)}
}

// ImportState imports the given attribute values into [Route53RecoverycontrolconfigRoutingControl]'s state.
func (rrc *Route53RecoverycontrolconfigRoutingControl) ImportState(av io.Reader) error {
	rrc.state = &route53RecoverycontrolconfigRoutingControlState{}
	if err := json.NewDecoder(av).Decode(rrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrc.Type(), rrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53RecoverycontrolconfigRoutingControl] has state.
func (rrc *Route53RecoverycontrolconfigRoutingControl) State() (*route53RecoverycontrolconfigRoutingControlState, bool) {
	return rrc.state, rrc.state != nil
}

// StateMust returns the state for [Route53RecoverycontrolconfigRoutingControl]. Panics if the state is nil.
func (rrc *Route53RecoverycontrolconfigRoutingControl) StateMust() *route53RecoverycontrolconfigRoutingControlState {
	if rrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrc.Type(), rrc.LocalName()))
	}
	return rrc.state
}

// Route53RecoverycontrolconfigRoutingControlArgs contains the configurations for aws_route53recoverycontrolconfig_routing_control.
type Route53RecoverycontrolconfigRoutingControlArgs struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// ControlPanelArn: string, optional
	ControlPanelArn terra.StringValue `hcl:"control_panel_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}
type route53RecoverycontrolconfigRoutingControlAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("arn"))
}

// ClusterArn returns a reference to field cluster_arn of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("cluster_arn"))
}

// ControlPanelArn returns a reference to field control_panel_arn of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) ControlPanelArn() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("control_panel_arn"))
}

// Id returns a reference to field id of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("name"))
}

// Status returns a reference to field status of aws_route53recoverycontrolconfig_routing_control.
func (rrc route53RecoverycontrolconfigRoutingControlAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rrc.ref.Append("status"))
}

type route53RecoverycontrolconfigRoutingControlState struct {
	Arn             string `json:"arn"`
	ClusterArn      string `json:"cluster_arn"`
	ControlPanelArn string `json:"control_panel_arn"`
	Id              string `json:"id"`
	Name            string `json:"name"`
	Status          string `json:"status"`
}
