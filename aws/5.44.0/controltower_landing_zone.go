// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	controltowerlandingzone "github.com/golingon/terraproviders/aws/5.44.0/controltowerlandingzone"
	"io"
)

// NewControltowerLandingZone creates a new instance of [ControltowerLandingZone].
func NewControltowerLandingZone(name string, args ControltowerLandingZoneArgs) *ControltowerLandingZone {
	return &ControltowerLandingZone{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ControltowerLandingZone)(nil)

// ControltowerLandingZone represents the Terraform resource aws_controltower_landing_zone.
type ControltowerLandingZone struct {
	Name      string
	Args      ControltowerLandingZoneArgs
	state     *controltowerLandingZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ControltowerLandingZone].
func (clz *ControltowerLandingZone) Type() string {
	return "aws_controltower_landing_zone"
}

// LocalName returns the local name for [ControltowerLandingZone].
func (clz *ControltowerLandingZone) LocalName() string {
	return clz.Name
}

// Configuration returns the configuration (args) for [ControltowerLandingZone].
func (clz *ControltowerLandingZone) Configuration() interface{} {
	return clz.Args
}

// DependOn is used for other resources to depend on [ControltowerLandingZone].
func (clz *ControltowerLandingZone) DependOn() terra.Reference {
	return terra.ReferenceResource(clz)
}

// Dependencies returns the list of resources [ControltowerLandingZone] depends_on.
func (clz *ControltowerLandingZone) Dependencies() terra.Dependencies {
	return clz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ControltowerLandingZone].
func (clz *ControltowerLandingZone) LifecycleManagement() *terra.Lifecycle {
	return clz.Lifecycle
}

// Attributes returns the attributes for [ControltowerLandingZone].
func (clz *ControltowerLandingZone) Attributes() controltowerLandingZoneAttributes {
	return controltowerLandingZoneAttributes{ref: terra.ReferenceResource(clz)}
}

// ImportState imports the given attribute values into [ControltowerLandingZone]'s state.
func (clz *ControltowerLandingZone) ImportState(av io.Reader) error {
	clz.state = &controltowerLandingZoneState{}
	if err := json.NewDecoder(av).Decode(clz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", clz.Type(), clz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ControltowerLandingZone] has state.
func (clz *ControltowerLandingZone) State() (*controltowerLandingZoneState, bool) {
	return clz.state, clz.state != nil
}

// StateMust returns the state for [ControltowerLandingZone]. Panics if the state is nil.
func (clz *ControltowerLandingZone) StateMust() *controltowerLandingZoneState {
	if clz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", clz.Type(), clz.LocalName()))
	}
	return clz.state
}

// ControltowerLandingZoneArgs contains the configurations for aws_controltower_landing_zone.
type ControltowerLandingZoneArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManifestJson: string, required
	ManifestJson terra.StringValue `hcl:"manifest_json,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// DriftStatus: min=0
	DriftStatus []controltowerlandingzone.DriftStatus `hcl:"drift_status,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *controltowerlandingzone.Timeouts `hcl:"timeouts,block"`
}
type controltowerLandingZoneAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(clz.ref.Append("arn"))
}

// Id returns a reference to field id of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(clz.ref.Append("id"))
}

// LatestAvailableVersion returns a reference to field latest_available_version of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) LatestAvailableVersion() terra.StringValue {
	return terra.ReferenceAsString(clz.ref.Append("latest_available_version"))
}

// ManifestJson returns a reference to field manifest_json of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) ManifestJson() terra.StringValue {
	return terra.ReferenceAsString(clz.ref.Append("manifest_json"))
}

// Tags returns a reference to field tags of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](clz.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](clz.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_controltower_landing_zone.
func (clz controltowerLandingZoneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(clz.ref.Append("version"))
}

func (clz controltowerLandingZoneAttributes) DriftStatus() terra.ListValue[controltowerlandingzone.DriftStatusAttributes] {
	return terra.ReferenceAsList[controltowerlandingzone.DriftStatusAttributes](clz.ref.Append("drift_status"))
}

func (clz controltowerLandingZoneAttributes) Timeouts() controltowerlandingzone.TimeoutsAttributes {
	return terra.ReferenceAsSingle[controltowerlandingzone.TimeoutsAttributes](clz.ref.Append("timeouts"))
}

type controltowerLandingZoneState struct {
	Arn                    string                                     `json:"arn"`
	Id                     string                                     `json:"id"`
	LatestAvailableVersion string                                     `json:"latest_available_version"`
	ManifestJson           string                                     `json:"manifest_json"`
	Tags                   map[string]string                          `json:"tags"`
	TagsAll                map[string]string                          `json:"tags_all"`
	Version                string                                     `json:"version"`
	DriftStatus            []controltowerlandingzone.DriftStatusState `json:"drift_status"`
	Timeouts               *controltowerlandingzone.TimeoutsState     `json:"timeouts"`
}
