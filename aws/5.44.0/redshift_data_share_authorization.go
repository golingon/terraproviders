// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewRedshiftDataShareAuthorization creates a new instance of [RedshiftDataShareAuthorization].
func NewRedshiftDataShareAuthorization(name string, args RedshiftDataShareAuthorizationArgs) *RedshiftDataShareAuthorization {
	return &RedshiftDataShareAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftDataShareAuthorization)(nil)

// RedshiftDataShareAuthorization represents the Terraform resource aws_redshift_data_share_authorization.
type RedshiftDataShareAuthorization struct {
	Name      string
	Args      RedshiftDataShareAuthorizationArgs
	state     *redshiftDataShareAuthorizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) Type() string {
	return "aws_redshift_data_share_authorization"
}

// LocalName returns the local name for [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) LocalName() string {
	return rdsa.Name
}

// Configuration returns the configuration (args) for [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) Configuration() interface{} {
	return rdsa.Args
}

// DependOn is used for other resources to depend on [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(rdsa)
}

// Dependencies returns the list of resources [RedshiftDataShareAuthorization] depends_on.
func (rdsa *RedshiftDataShareAuthorization) Dependencies() terra.Dependencies {
	return rdsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) LifecycleManagement() *terra.Lifecycle {
	return rdsa.Lifecycle
}

// Attributes returns the attributes for [RedshiftDataShareAuthorization].
func (rdsa *RedshiftDataShareAuthorization) Attributes() redshiftDataShareAuthorizationAttributes {
	return redshiftDataShareAuthorizationAttributes{ref: terra.ReferenceResource(rdsa)}
}

// ImportState imports the given attribute values into [RedshiftDataShareAuthorization]'s state.
func (rdsa *RedshiftDataShareAuthorization) ImportState(av io.Reader) error {
	rdsa.state = &redshiftDataShareAuthorizationState{}
	if err := json.NewDecoder(av).Decode(rdsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rdsa.Type(), rdsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedshiftDataShareAuthorization] has state.
func (rdsa *RedshiftDataShareAuthorization) State() (*redshiftDataShareAuthorizationState, bool) {
	return rdsa.state, rdsa.state != nil
}

// StateMust returns the state for [RedshiftDataShareAuthorization]. Panics if the state is nil.
func (rdsa *RedshiftDataShareAuthorization) StateMust() *redshiftDataShareAuthorizationState {
	if rdsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rdsa.Type(), rdsa.LocalName()))
	}
	return rdsa.state
}

// RedshiftDataShareAuthorizationArgs contains the configurations for aws_redshift_data_share_authorization.
type RedshiftDataShareAuthorizationArgs struct {
	// AllowWrites: bool, optional
	AllowWrites terra.BoolValue `hcl:"allow_writes,attr"`
	// ConsumerIdentifier: string, required
	ConsumerIdentifier terra.StringValue `hcl:"consumer_identifier,attr" validate:"required"`
	// DataShareArn: string, required
	DataShareArn terra.StringValue `hcl:"data_share_arn,attr" validate:"required"`
}
type redshiftDataShareAuthorizationAttributes struct {
	ref terra.Reference
}

// AllowWrites returns a reference to field allow_writes of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) AllowWrites() terra.BoolValue {
	return terra.ReferenceAsBool(rdsa.ref.Append("allow_writes"))
}

// ConsumerIdentifier returns a reference to field consumer_identifier of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) ConsumerIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rdsa.ref.Append("consumer_identifier"))
}

// DataShareArn returns a reference to field data_share_arn of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) DataShareArn() terra.StringValue {
	return terra.ReferenceAsString(rdsa.ref.Append("data_share_arn"))
}

// Id returns a reference to field id of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rdsa.ref.Append("id"))
}

// ManagedBy returns a reference to field managed_by of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) ManagedBy() terra.StringValue {
	return terra.ReferenceAsString(rdsa.ref.Append("managed_by"))
}

// ProducerArn returns a reference to field producer_arn of aws_redshift_data_share_authorization.
func (rdsa redshiftDataShareAuthorizationAttributes) ProducerArn() terra.StringValue {
	return terra.ReferenceAsString(rdsa.ref.Append("producer_arn"))
}

type redshiftDataShareAuthorizationState struct {
	AllowWrites        bool   `json:"allow_writes"`
	ConsumerIdentifier string `json:"consumer_identifier"`
	DataShareArn       string `json:"data_share_arn"`
	Id                 string `json:"id"`
	ManagedBy          string `json:"managed_by"`
	ProducerArn        string `json:"producer_arn"`
}
