// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datamqbrokerenginetypes

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BrokerEngineTypes struct {
	// EngineVersions: min=0
	EngineVersions []EngineVersions `hcl:"engine_versions,block" validate:"min=0"`
}

type EngineVersions struct{}

type BrokerEngineTypesAttributes struct {
	ref terra.Reference
}

func (bet BrokerEngineTypesAttributes) InternalRef() (terra.Reference, error) {
	return bet.ref, nil
}

func (bet BrokerEngineTypesAttributes) InternalWithRef(ref terra.Reference) BrokerEngineTypesAttributes {
	return BrokerEngineTypesAttributes{ref: ref}
}

func (bet BrokerEngineTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bet.ref.InternalTokens()
}

func (bet BrokerEngineTypesAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(bet.ref.Append("engine_type"))
}

func (bet BrokerEngineTypesAttributes) EngineVersions() terra.ListValue[EngineVersionsAttributes] {
	return terra.ReferenceAsList[EngineVersionsAttributes](bet.ref.Append("engine_versions"))
}

type EngineVersionsAttributes struct {
	ref terra.Reference
}

func (ev EngineVersionsAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev EngineVersionsAttributes) InternalWithRef(ref terra.Reference) EngineVersionsAttributes {
	return EngineVersionsAttributes{ref: ref}
}

func (ev EngineVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev EngineVersionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("name"))
}

type BrokerEngineTypesState struct {
	EngineType     string                `json:"engine_type"`
	EngineVersions []EngineVersionsState `json:"engine_versions"`
}

type EngineVersionsState struct {
	Name string `json:"name"`
}
