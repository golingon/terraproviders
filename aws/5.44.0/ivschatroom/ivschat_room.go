// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package ivschatroom

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MessageReviewHandler struct {
	// FallbackResult: string, optional
	FallbackResult terra.StringValue `hcl:"fallback_result,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type MessageReviewHandlerAttributes struct {
	ref terra.Reference
}

func (mrh MessageReviewHandlerAttributes) InternalRef() (terra.Reference, error) {
	return mrh.ref, nil
}

func (mrh MessageReviewHandlerAttributes) InternalWithRef(ref terra.Reference) MessageReviewHandlerAttributes {
	return MessageReviewHandlerAttributes{ref: ref}
}

func (mrh MessageReviewHandlerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mrh.ref.InternalTokens()
}

func (mrh MessageReviewHandlerAttributes) FallbackResult() terra.StringValue {
	return terra.ReferenceAsString(mrh.ref.Append("fallback_result"))
}

func (mrh MessageReviewHandlerAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(mrh.ref.Append("uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MessageReviewHandlerState struct {
	FallbackResult string `json:"fallback_result"`
	Uri            string `json:"uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
