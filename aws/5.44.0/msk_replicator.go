// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	mskreplicator "github.com/golingon/terraproviders/aws/5.44.0/mskreplicator"
	"io"
)

// NewMskReplicator creates a new instance of [MskReplicator].
func NewMskReplicator(name string, args MskReplicatorArgs) *MskReplicator {
	return &MskReplicator{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskReplicator)(nil)

// MskReplicator represents the Terraform resource aws_msk_replicator.
type MskReplicator struct {
	Name      string
	Args      MskReplicatorArgs
	state     *mskReplicatorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MskReplicator].
func (mr *MskReplicator) Type() string {
	return "aws_msk_replicator"
}

// LocalName returns the local name for [MskReplicator].
func (mr *MskReplicator) LocalName() string {
	return mr.Name
}

// Configuration returns the configuration (args) for [MskReplicator].
func (mr *MskReplicator) Configuration() interface{} {
	return mr.Args
}

// DependOn is used for other resources to depend on [MskReplicator].
func (mr *MskReplicator) DependOn() terra.Reference {
	return terra.ReferenceResource(mr)
}

// Dependencies returns the list of resources [MskReplicator] depends_on.
func (mr *MskReplicator) Dependencies() terra.Dependencies {
	return mr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MskReplicator].
func (mr *MskReplicator) LifecycleManagement() *terra.Lifecycle {
	return mr.Lifecycle
}

// Attributes returns the attributes for [MskReplicator].
func (mr *MskReplicator) Attributes() mskReplicatorAttributes {
	return mskReplicatorAttributes{ref: terra.ReferenceResource(mr)}
}

// ImportState imports the given attribute values into [MskReplicator]'s state.
func (mr *MskReplicator) ImportState(av io.Reader) error {
	mr.state = &mskReplicatorState{}
	if err := json.NewDecoder(av).Decode(mr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mr.Type(), mr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MskReplicator] has state.
func (mr *MskReplicator) State() (*mskReplicatorState, bool) {
	return mr.state, mr.state != nil
}

// StateMust returns the state for [MskReplicator]. Panics if the state is nil.
func (mr *MskReplicator) StateMust() *mskReplicatorState {
	if mr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mr.Type(), mr.LocalName()))
	}
	return mr.state
}

// MskReplicatorArgs contains the configurations for aws_msk_replicator.
type MskReplicatorArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicatorName: string, required
	ReplicatorName terra.StringValue `hcl:"replicator_name,attr" validate:"required"`
	// ServiceExecutionRoleArn: string, required
	ServiceExecutionRoleArn terra.StringValue `hcl:"service_execution_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// KafkaCluster: min=2,max=2
	KafkaCluster []mskreplicator.KafkaCluster `hcl:"kafka_cluster,block" validate:"min=2,max=2"`
	// ReplicationInfoList: required
	ReplicationInfoList *mskreplicator.ReplicationInfoList `hcl:"replication_info_list,block" validate:"required"`
	// Timeouts: optional
	Timeouts *mskreplicator.Timeouts `hcl:"timeouts,block"`
}
type mskReplicatorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_msk_replicator.
func (mr mskReplicatorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("arn"))
}

// CurrentVersion returns a reference to field current_version of aws_msk_replicator.
func (mr mskReplicatorAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("current_version"))
}

// Description returns a reference to field description of aws_msk_replicator.
func (mr mskReplicatorAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("description"))
}

// Id returns a reference to field id of aws_msk_replicator.
func (mr mskReplicatorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("id"))
}

// ReplicatorName returns a reference to field replicator_name of aws_msk_replicator.
func (mr mskReplicatorAttributes) ReplicatorName() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("replicator_name"))
}

// ServiceExecutionRoleArn returns a reference to field service_execution_role_arn of aws_msk_replicator.
func (mr mskReplicatorAttributes) ServiceExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("service_execution_role_arn"))
}

// Tags returns a reference to field tags of aws_msk_replicator.
func (mr mskReplicatorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_msk_replicator.
func (mr mskReplicatorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mr.ref.Append("tags_all"))
}

func (mr mskReplicatorAttributes) KafkaCluster() terra.ListValue[mskreplicator.KafkaClusterAttributes] {
	return terra.ReferenceAsList[mskreplicator.KafkaClusterAttributes](mr.ref.Append("kafka_cluster"))
}

func (mr mskReplicatorAttributes) ReplicationInfoList() terra.ListValue[mskreplicator.ReplicationInfoListAttributes] {
	return terra.ReferenceAsList[mskreplicator.ReplicationInfoListAttributes](mr.ref.Append("replication_info_list"))
}

func (mr mskReplicatorAttributes) Timeouts() mskreplicator.TimeoutsAttributes {
	return terra.ReferenceAsSingle[mskreplicator.TimeoutsAttributes](mr.ref.Append("timeouts"))
}

type mskReplicatorState struct {
	Arn                     string                                   `json:"arn"`
	CurrentVersion          string                                   `json:"current_version"`
	Description             string                                   `json:"description"`
	Id                      string                                   `json:"id"`
	ReplicatorName          string                                   `json:"replicator_name"`
	ServiceExecutionRoleArn string                                   `json:"service_execution_role_arn"`
	Tags                    map[string]string                        `json:"tags"`
	TagsAll                 map[string]string                        `json:"tags_all"`
	KafkaCluster            []mskreplicator.KafkaClusterState        `json:"kafka_cluster"`
	ReplicationInfoList     []mskreplicator.ReplicationInfoListState `json:"replication_info_list"`
	Timeouts                *mskreplicator.TimeoutsState             `json:"timeouts"`
}
