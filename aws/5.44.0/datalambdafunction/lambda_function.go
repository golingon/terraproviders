// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datalambdafunction

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DeadLetterConfig struct{}

type Environment struct{}

type EphemeralStorage struct{}

type FileSystemConfig struct{}

type LoggingConfig struct{}

type TracingConfig struct{}

type VpcConfig struct{}

type DeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc DeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc DeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) DeadLetterConfigAttributes {
	return DeadLetterConfigAttributes{ref: ref}
}

func (dlc DeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc DeadLetterConfigAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("target_arn"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("variables"))
}

type EphemeralStorageAttributes struct {
	ref terra.Reference
}

func (es EphemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EphemeralStorageAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageAttributes {
	return EphemeralStorageAttributes{ref: ref}
}

func (es EphemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EphemeralStorageAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size"))
}

type FileSystemConfigAttributes struct {
	ref terra.Reference
}

func (fsc FileSystemConfigAttributes) InternalRef() (terra.Reference, error) {
	return fsc.ref, nil
}

func (fsc FileSystemConfigAttributes) InternalWithRef(ref terra.Reference) FileSystemConfigAttributes {
	return FileSystemConfigAttributes{ref: ref}
}

func (fsc FileSystemConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsc.ref.InternalTokens()
}

func (fsc FileSystemConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("arn"))
}

func (fsc FileSystemConfigAttributes) LocalMountPath() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("local_mount_path"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) ApplicationLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("application_log_level"))
}

func (lc LoggingConfigAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_format"))
}

func (lc LoggingConfigAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_group"))
}

func (lc LoggingConfigAttributes) SystemLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("system_log_level"))
}

type TracingConfigAttributes struct {
	ref terra.Reference
}

func (tc TracingConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TracingConfigAttributes) InternalWithRef(ref terra.Reference) TracingConfigAttributes {
	return TracingConfigAttributes{ref: ref}
}

func (tc TracingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TracingConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("mode"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) Ipv6AllowedForDualStack() terra.BoolValue {
	return terra.ReferenceAsBool(vc.ref.Append("ipv6_allowed_for_dual_stack"))
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc VpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type DeadLetterConfigState struct {
	TargetArn string `json:"target_arn"`
}

type EnvironmentState struct {
	Variables map[string]string `json:"variables"`
}

type EphemeralStorageState struct {
	Size float64 `json:"size"`
}

type FileSystemConfigState struct {
	Arn            string `json:"arn"`
	LocalMountPath string `json:"local_mount_path"`
}

type LoggingConfigState struct {
	ApplicationLogLevel string `json:"application_log_level"`
	LogFormat           string `json:"log_format"`
	LogGroup            string `json:"log_group"`
	SystemLogLevel      string `json:"system_log_level"`
}

type TracingConfigState struct {
	Mode string `json:"mode"`
}

type VpcConfigState struct {
	Ipv6AllowedForDualStack bool     `json:"ipv6_allowed_for_dual_stack"`
	SecurityGroupIds        []string `json:"security_group_ids"`
	SubnetIds               []string `json:"subnet_ids"`
	VpcId                   string   `json:"vpc_id"`
}
