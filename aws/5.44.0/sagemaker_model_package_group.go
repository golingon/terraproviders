// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewSagemakerModelPackageGroup creates a new instance of [SagemakerModelPackageGroup].
func NewSagemakerModelPackageGroup(name string, args SagemakerModelPackageGroupArgs) *SagemakerModelPackageGroup {
	return &SagemakerModelPackageGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerModelPackageGroup)(nil)

// SagemakerModelPackageGroup represents the Terraform resource aws_sagemaker_model_package_group.
type SagemakerModelPackageGroup struct {
	Name      string
	Args      SagemakerModelPackageGroupArgs
	state     *sagemakerModelPackageGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) Type() string {
	return "aws_sagemaker_model_package_group"
}

// LocalName returns the local name for [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) LocalName() string {
	return smpg.Name
}

// Configuration returns the configuration (args) for [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) Configuration() interface{} {
	return smpg.Args
}

// DependOn is used for other resources to depend on [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(smpg)
}

// Dependencies returns the list of resources [SagemakerModelPackageGroup] depends_on.
func (smpg *SagemakerModelPackageGroup) Dependencies() terra.Dependencies {
	return smpg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) LifecycleManagement() *terra.Lifecycle {
	return smpg.Lifecycle
}

// Attributes returns the attributes for [SagemakerModelPackageGroup].
func (smpg *SagemakerModelPackageGroup) Attributes() sagemakerModelPackageGroupAttributes {
	return sagemakerModelPackageGroupAttributes{ref: terra.ReferenceResource(smpg)}
}

// ImportState imports the given attribute values into [SagemakerModelPackageGroup]'s state.
func (smpg *SagemakerModelPackageGroup) ImportState(av io.Reader) error {
	smpg.state = &sagemakerModelPackageGroupState{}
	if err := json.NewDecoder(av).Decode(smpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smpg.Type(), smpg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SagemakerModelPackageGroup] has state.
func (smpg *SagemakerModelPackageGroup) State() (*sagemakerModelPackageGroupState, bool) {
	return smpg.state, smpg.state != nil
}

// StateMust returns the state for [SagemakerModelPackageGroup]. Panics if the state is nil.
func (smpg *SagemakerModelPackageGroup) StateMust() *sagemakerModelPackageGroupState {
	if smpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smpg.Type(), smpg.LocalName()))
	}
	return smpg.state
}

// SagemakerModelPackageGroupArgs contains the configurations for aws_sagemaker_model_package_group.
type SagemakerModelPackageGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ModelPackageGroupDescription: string, optional
	ModelPackageGroupDescription terra.StringValue `hcl:"model_package_group_description,attr"`
	// ModelPackageGroupName: string, required
	ModelPackageGroupName terra.StringValue `hcl:"model_package_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type sagemakerModelPackageGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(smpg.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(smpg.ref.Append("id"))
}

// ModelPackageGroupDescription returns a reference to field model_package_group_description of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) ModelPackageGroupDescription() terra.StringValue {
	return terra.ReferenceAsString(smpg.ref.Append("model_package_group_description"))
}

// ModelPackageGroupName returns a reference to field model_package_group_name of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) ModelPackageGroupName() terra.StringValue {
	return terra.ReferenceAsString(smpg.ref.Append("model_package_group_name"))
}

// Tags returns a reference to field tags of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](smpg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_model_package_group.
func (smpg sagemakerModelPackageGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](smpg.ref.Append("tags_all"))
}

type sagemakerModelPackageGroupState struct {
	Arn                          string            `json:"arn"`
	Id                           string            `json:"id"`
	ModelPackageGroupDescription string            `json:"model_package_group_description"`
	ModelPackageGroupName        string            `json:"model_package_group_name"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
}
