// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	verifiedpermissionsschema "github.com/golingon/terraproviders/aws/5.44.0/verifiedpermissionsschema"
	"io"
)

// NewVerifiedpermissionsSchema creates a new instance of [VerifiedpermissionsSchema].
func NewVerifiedpermissionsSchema(name string, args VerifiedpermissionsSchemaArgs) *VerifiedpermissionsSchema {
	return &VerifiedpermissionsSchema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VerifiedpermissionsSchema)(nil)

// VerifiedpermissionsSchema represents the Terraform resource aws_verifiedpermissions_schema.
type VerifiedpermissionsSchema struct {
	Name      string
	Args      VerifiedpermissionsSchemaArgs
	state     *verifiedpermissionsSchemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) Type() string {
	return "aws_verifiedpermissions_schema"
}

// LocalName returns the local name for [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) LocalName() string {
	return vs.Name
}

// Configuration returns the configuration (args) for [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) Configuration() interface{} {
	return vs.Args
}

// DependOn is used for other resources to depend on [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) DependOn() terra.Reference {
	return terra.ReferenceResource(vs)
}

// Dependencies returns the list of resources [VerifiedpermissionsSchema] depends_on.
func (vs *VerifiedpermissionsSchema) Dependencies() terra.Dependencies {
	return vs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) LifecycleManagement() *terra.Lifecycle {
	return vs.Lifecycle
}

// Attributes returns the attributes for [VerifiedpermissionsSchema].
func (vs *VerifiedpermissionsSchema) Attributes() verifiedpermissionsSchemaAttributes {
	return verifiedpermissionsSchemaAttributes{ref: terra.ReferenceResource(vs)}
}

// ImportState imports the given attribute values into [VerifiedpermissionsSchema]'s state.
func (vs *VerifiedpermissionsSchema) ImportState(av io.Reader) error {
	vs.state = &verifiedpermissionsSchemaState{}
	if err := json.NewDecoder(av).Decode(vs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vs.Type(), vs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VerifiedpermissionsSchema] has state.
func (vs *VerifiedpermissionsSchema) State() (*verifiedpermissionsSchemaState, bool) {
	return vs.state, vs.state != nil
}

// StateMust returns the state for [VerifiedpermissionsSchema]. Panics if the state is nil.
func (vs *VerifiedpermissionsSchema) StateMust() *verifiedpermissionsSchemaState {
	if vs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vs.Type(), vs.LocalName()))
	}
	return vs.state
}

// VerifiedpermissionsSchemaArgs contains the configurations for aws_verifiedpermissions_schema.
type VerifiedpermissionsSchemaArgs struct {
	// PolicyStoreId: string, required
	PolicyStoreId terra.StringValue `hcl:"policy_store_id,attr" validate:"required"`
	// Definition: optional
	Definition *verifiedpermissionsschema.Definition `hcl:"definition,block"`
}
type verifiedpermissionsSchemaAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_verifiedpermissions_schema.
func (vs verifiedpermissionsSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("id"))
}

// Namespaces returns a reference to field namespaces of aws_verifiedpermissions_schema.
func (vs verifiedpermissionsSchemaAttributes) Namespaces() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("namespaces"))
}

// PolicyStoreId returns a reference to field policy_store_id of aws_verifiedpermissions_schema.
func (vs verifiedpermissionsSchemaAttributes) PolicyStoreId() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("policy_store_id"))
}

func (vs verifiedpermissionsSchemaAttributes) Definition() verifiedpermissionsschema.DefinitionAttributes {
	return terra.ReferenceAsSingle[verifiedpermissionsschema.DefinitionAttributes](vs.ref.Append("definition"))
}

type verifiedpermissionsSchemaState struct {
	Id            string                                     `json:"id"`
	Namespaces    []string                                   `json:"namespaces"`
	PolicyStoreId string                                     `json:"policy_store_id"`
	Definition    *verifiedpermissionsschema.DefinitionState `json:"definition"`
}
