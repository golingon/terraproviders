// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package securitylakedatalake

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// EncryptionConfiguration: min=0
	EncryptionConfiguration []EncryptionConfiguration `hcl:"encryption_configuration,block" validate:"min=0"`
	// LifecycleConfiguration: min=0
	LifecycleConfiguration []LifecycleConfiguration `hcl:"lifecycle_configuration,block" validate:"min=0"`
	// ReplicationConfiguration: min=0
	ReplicationConfiguration []ReplicationConfiguration `hcl:"replication_configuration,block" validate:"min=0"`
}

type EncryptionConfiguration struct {
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type LifecycleConfiguration struct {
	// Expiration: min=0
	Expiration []Expiration `hcl:"expiration,block" validate:"min=0"`
	// Transition: min=0
	Transition []Transition `hcl:"transition,block" validate:"min=0"`
}

type Expiration struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
}

type Transition struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
}

type ReplicationConfiguration struct {
	// Regions: set of string, optional
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("region"))
}

func (c ConfigurationAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](c.ref.Append("encryption_configuration"))
}

func (c ConfigurationAttributes) LifecycleConfiguration() terra.ListValue[LifecycleConfigurationAttributes] {
	return terra.ReferenceAsList[LifecycleConfigurationAttributes](c.ref.Append("lifecycle_configuration"))
}

func (c ConfigurationAttributes) ReplicationConfiguration() terra.ListValue[ReplicationConfigurationAttributes] {
	return terra.ReferenceAsList[ReplicationConfigurationAttributes](c.ref.Append("replication_configuration"))
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_id"))
}

type LifecycleConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LifecycleConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LifecycleConfigurationAttributes) InternalWithRef(ref terra.Reference) LifecycleConfigurationAttributes {
	return LifecycleConfigurationAttributes{ref: ref}
}

func (lc LifecycleConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LifecycleConfigurationAttributes) Expiration() terra.ListValue[ExpirationAttributes] {
	return terra.ReferenceAsList[ExpirationAttributes](lc.ref.Append("expiration"))
}

func (lc LifecycleConfigurationAttributes) Transition() terra.SetValue[TransitionAttributes] {
	return terra.ReferenceAsSet[TransitionAttributes](lc.ref.Append("transition"))
}

type ExpirationAttributes struct {
	ref terra.Reference
}

func (e ExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExpirationAttributes) InternalWithRef(ref terra.Reference) ExpirationAttributes {
	return ExpirationAttributes{ref: ref}
}

func (e ExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

type TransitionAttributes struct {
	ref terra.Reference
}

func (t TransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TransitionAttributes) InternalWithRef(ref terra.Reference) TransitionAttributes {
	return TransitionAttributes{ref: ref}
}

func (t TransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t TransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type ReplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (rc ReplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) ReplicationConfigurationAttributes {
	return ReplicationConfigurationAttributes{ref: ref}
}

func (rc ReplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReplicationConfigurationAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rc.ref.Append("regions"))
}

func (rc ReplicationConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("role_arn"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigurationState struct {
	Region                   string                          `json:"region"`
	EncryptionConfiguration  []EncryptionConfigurationState  `json:"encryption_configuration"`
	LifecycleConfiguration   []LifecycleConfigurationState   `json:"lifecycle_configuration"`
	ReplicationConfiguration []ReplicationConfigurationState `json:"replication_configuration"`
}

type EncryptionConfigurationState struct {
	KmsKeyId string `json:"kms_key_id"`
}

type LifecycleConfigurationState struct {
	Expiration []ExpirationState `json:"expiration"`
	Transition []TransitionState `json:"transition"`
}

type ExpirationState struct {
	Days float64 `json:"days"`
}

type TransitionState struct {
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}

type ReplicationConfigurationState struct {
	Regions []string `json:"regions"`
	RoleArn string   `json:"role_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
