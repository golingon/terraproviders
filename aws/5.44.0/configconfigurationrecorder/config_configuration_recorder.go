// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package configconfigurationrecorder

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RecordingGroup struct {
	// AllSupported: bool, optional
	AllSupported terra.BoolValue `hcl:"all_supported,attr"`
	// IncludeGlobalResourceTypes: bool, optional
	IncludeGlobalResourceTypes terra.BoolValue `hcl:"include_global_resource_types,attr"`
	// ResourceTypes: set of string, optional
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr"`
	// ExclusionByResourceTypes: min=0
	ExclusionByResourceTypes []ExclusionByResourceTypes `hcl:"exclusion_by_resource_types,block" validate:"min=0"`
	// RecordingStrategy: min=0
	RecordingStrategy []RecordingStrategy `hcl:"recording_strategy,block" validate:"min=0"`
}

type ExclusionByResourceTypes struct {
	// ResourceTypes: set of string, optional
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr"`
}

type RecordingStrategy struct {
	// UseOnly: string, optional
	UseOnly terra.StringValue `hcl:"use_only,attr"`
}

type RecordingMode struct {
	// RecordingFrequency: string, optional
	RecordingFrequency terra.StringValue `hcl:"recording_frequency,attr"`
	// RecordingModeOverride: optional
	RecordingModeOverride *RecordingModeOverride `hcl:"recording_mode_override,block"`
}

type RecordingModeOverride struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// RecordingFrequency: string, required
	RecordingFrequency terra.StringValue `hcl:"recording_frequency,attr" validate:"required"`
	// ResourceTypes: set of string, required
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr" validate:"required"`
}

type RecordingGroupAttributes struct {
	ref terra.Reference
}

func (rg RecordingGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg RecordingGroupAttributes) InternalWithRef(ref terra.Reference) RecordingGroupAttributes {
	return RecordingGroupAttributes{ref: ref}
}

func (rg RecordingGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg RecordingGroupAttributes) AllSupported() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("all_supported"))
}

func (rg RecordingGroupAttributes) IncludeGlobalResourceTypes() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("include_global_resource_types"))
}

func (rg RecordingGroupAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rg.ref.Append("resource_types"))
}

func (rg RecordingGroupAttributes) ExclusionByResourceTypes() terra.ListValue[ExclusionByResourceTypesAttributes] {
	return terra.ReferenceAsList[ExclusionByResourceTypesAttributes](rg.ref.Append("exclusion_by_resource_types"))
}

func (rg RecordingGroupAttributes) RecordingStrategy() terra.ListValue[RecordingStrategyAttributes] {
	return terra.ReferenceAsList[RecordingStrategyAttributes](rg.ref.Append("recording_strategy"))
}

type ExclusionByResourceTypesAttributes struct {
	ref terra.Reference
}

func (ebrt ExclusionByResourceTypesAttributes) InternalRef() (terra.Reference, error) {
	return ebrt.ref, nil
}

func (ebrt ExclusionByResourceTypesAttributes) InternalWithRef(ref terra.Reference) ExclusionByResourceTypesAttributes {
	return ExclusionByResourceTypesAttributes{ref: ref}
}

func (ebrt ExclusionByResourceTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebrt.ref.InternalTokens()
}

func (ebrt ExclusionByResourceTypesAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ebrt.ref.Append("resource_types"))
}

type RecordingStrategyAttributes struct {
	ref terra.Reference
}

func (rs RecordingStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecordingStrategyAttributes) InternalWithRef(ref terra.Reference) RecordingStrategyAttributes {
	return RecordingStrategyAttributes{ref: ref}
}

func (rs RecordingStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecordingStrategyAttributes) UseOnly() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("use_only"))
}

type RecordingModeAttributes struct {
	ref terra.Reference
}

func (rm RecordingModeAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RecordingModeAttributes) InternalWithRef(ref terra.Reference) RecordingModeAttributes {
	return RecordingModeAttributes{ref: ref}
}

func (rm RecordingModeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RecordingModeAttributes) RecordingFrequency() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("recording_frequency"))
}

func (rm RecordingModeAttributes) RecordingModeOverride() terra.ListValue[RecordingModeOverrideAttributes] {
	return terra.ReferenceAsList[RecordingModeOverrideAttributes](rm.ref.Append("recording_mode_override"))
}

type RecordingModeOverrideAttributes struct {
	ref terra.Reference
}

func (rmo RecordingModeOverrideAttributes) InternalRef() (terra.Reference, error) {
	return rmo.ref, nil
}

func (rmo RecordingModeOverrideAttributes) InternalWithRef(ref terra.Reference) RecordingModeOverrideAttributes {
	return RecordingModeOverrideAttributes{ref: ref}
}

func (rmo RecordingModeOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmo.ref.InternalTokens()
}

func (rmo RecordingModeOverrideAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rmo.ref.Append("description"))
}

func (rmo RecordingModeOverrideAttributes) RecordingFrequency() terra.StringValue {
	return terra.ReferenceAsString(rmo.ref.Append("recording_frequency"))
}

func (rmo RecordingModeOverrideAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rmo.ref.Append("resource_types"))
}

type RecordingGroupState struct {
	AllSupported               bool                            `json:"all_supported"`
	IncludeGlobalResourceTypes bool                            `json:"include_global_resource_types"`
	ResourceTypes              []string                        `json:"resource_types"`
	ExclusionByResourceTypes   []ExclusionByResourceTypesState `json:"exclusion_by_resource_types"`
	RecordingStrategy          []RecordingStrategyState        `json:"recording_strategy"`
}

type ExclusionByResourceTypesState struct {
	ResourceTypes []string `json:"resource_types"`
}

type RecordingStrategyState struct {
	UseOnly string `json:"use_only"`
}

type RecordingModeState struct {
	RecordingFrequency    string                       `json:"recording_frequency"`
	RecordingModeOverride []RecordingModeOverrideState `json:"recording_mode_override"`
}

type RecordingModeOverrideState struct {
	Description        string   `json:"description"`
	RecordingFrequency string   `json:"recording_frequency"`
	ResourceTypes      []string `json:"resource_types"`
}
