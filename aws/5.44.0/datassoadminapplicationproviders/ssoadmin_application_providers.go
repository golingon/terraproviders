// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package datassoadminapplicationproviders

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ApplicationProviders struct {
	// DisplayData: min=0
	DisplayData []DisplayData `hcl:"display_data,block" validate:"min=0"`
}

type DisplayData struct{}

type ApplicationProvidersAttributes struct {
	ref terra.Reference
}

func (ap ApplicationProvidersAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap ApplicationProvidersAttributes) InternalWithRef(ref terra.Reference) ApplicationProvidersAttributes {
	return ApplicationProvidersAttributes{ref: ref}
}

func (ap ApplicationProvidersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap ApplicationProvidersAttributes) ApplicationProviderArn() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("application_provider_arn"))
}

func (ap ApplicationProvidersAttributes) FederationProtocol() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("federation_protocol"))
}

func (ap ApplicationProvidersAttributes) DisplayData() terra.ListValue[DisplayDataAttributes] {
	return terra.ReferenceAsList[DisplayDataAttributes](ap.ref.Append("display_data"))
}

type DisplayDataAttributes struct {
	ref terra.Reference
}

func (dd DisplayDataAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd DisplayDataAttributes) InternalWithRef(ref terra.Reference) DisplayDataAttributes {
	return DisplayDataAttributes{ref: ref}
}

func (dd DisplayDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd DisplayDataAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("description"))
}

func (dd DisplayDataAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("display_name"))
}

func (dd DisplayDataAttributes) IconUrl() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("icon_url"))
}

type ApplicationProvidersState struct {
	ApplicationProviderArn string             `json:"application_provider_arn"`
	FederationProtocol     string             `json:"federation_protocol"`
	DisplayData            []DisplayDataState `json:"display_data"`
}

type DisplayDataState struct {
	Description string `json:"description"`
	DisplayName string `json:"display_name"`
	IconUrl     string `json:"icon_url"`
}
