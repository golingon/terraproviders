// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

// NewDataQuicksightUser creates a new instance of [DataQuicksightUser].
func NewDataQuicksightUser(name string, args DataQuicksightUserArgs) *DataQuicksightUser {
	return &DataQuicksightUser{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataQuicksightUser)(nil)

// DataQuicksightUser represents the Terraform data resource aws_quicksight_user.
type DataQuicksightUser struct {
	Name string
	Args DataQuicksightUserArgs
}

// DataSource returns the Terraform object type for [DataQuicksightUser].
func (qu *DataQuicksightUser) DataSource() string {
	return "aws_quicksight_user"
}

// LocalName returns the local name for [DataQuicksightUser].
func (qu *DataQuicksightUser) LocalName() string {
	return qu.Name
}

// Configuration returns the configuration (args) for [DataQuicksightUser].
func (qu *DataQuicksightUser) Configuration() interface{} {
	return qu.Args
}

// Attributes returns the attributes for [DataQuicksightUser].
func (qu *DataQuicksightUser) Attributes() dataQuicksightUserAttributes {
	return dataQuicksightUserAttributes{ref: terra.ReferenceDataResource(qu)}
}

// DataQuicksightUserArgs contains the configurations for aws_quicksight_user.
type DataQuicksightUserArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}
type dataQuicksightUserAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(qu.ref.Append("active"))
}

// Arn returns a reference to field arn of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("aws_account_id"))
}

// Email returns a reference to field email of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("email"))
}

// Id returns a reference to field id of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("id"))
}

// IdentityType returns a reference to field identity_type of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) IdentityType() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("identity_type"))
}

// Namespace returns a reference to field namespace of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("namespace"))
}

// PrincipalId returns a reference to field principal_id of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("principal_id"))
}

// UserName returns a reference to field user_name of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("user_name"))
}

// UserRole returns a reference to field user_role of aws_quicksight_user.
func (qu dataQuicksightUserAttributes) UserRole() terra.StringValue {
	return terra.ReferenceAsString(qu.ref.Append("user_role"))
}
