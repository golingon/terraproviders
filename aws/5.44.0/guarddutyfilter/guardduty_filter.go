// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package guarddutyfilter

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FindingCriteria struct {
	// Criterion: min=1
	Criterion []Criterion `hcl:"criterion,block" validate:"min=1"`
}

type Criterion struct {
	// Equals: list of string, optional
	Equals terra.ListValue[terra.StringValue] `hcl:"equals,attr"`
	// Field: string, required
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// GreaterThan: string, optional
	GreaterThan terra.StringValue `hcl:"greater_than,attr"`
	// GreaterThanOrEqual: string, optional
	GreaterThanOrEqual terra.StringValue `hcl:"greater_than_or_equal,attr"`
	// LessThan: string, optional
	LessThan terra.StringValue `hcl:"less_than,attr"`
	// LessThanOrEqual: string, optional
	LessThanOrEqual terra.StringValue `hcl:"less_than_or_equal,attr"`
	// NotEquals: list of string, optional
	NotEquals terra.ListValue[terra.StringValue] `hcl:"not_equals,attr"`
}

type FindingCriteriaAttributes struct {
	ref terra.Reference
}

func (fc FindingCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc FindingCriteriaAttributes) InternalWithRef(ref terra.Reference) FindingCriteriaAttributes {
	return FindingCriteriaAttributes{ref: ref}
}

func (fc FindingCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc FindingCriteriaAttributes) Criterion() terra.SetValue[CriterionAttributes] {
	return terra.ReferenceAsSet[CriterionAttributes](fc.ref.Append("criterion"))
}

type CriterionAttributes struct {
	ref terra.Reference
}

func (c CriterionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CriterionAttributes) InternalWithRef(ref terra.Reference) CriterionAttributes {
	return CriterionAttributes{ref: ref}
}

func (c CriterionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CriterionAttributes) Equals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("equals"))
}

func (c CriterionAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("field"))
}

func (c CriterionAttributes) GreaterThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("greater_than"))
}

func (c CriterionAttributes) GreaterThanOrEqual() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("greater_than_or_equal"))
}

func (c CriterionAttributes) LessThan() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("less_than"))
}

func (c CriterionAttributes) LessThanOrEqual() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("less_than_or_equal"))
}

func (c CriterionAttributes) NotEquals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("not_equals"))
}

type FindingCriteriaState struct {
	Criterion []CriterionState `json:"criterion"`
}

type CriterionState struct {
	Equals             []string `json:"equals"`
	Field              string   `json:"field"`
	GreaterThan        string   `json:"greater_than"`
	GreaterThanOrEqual string   `json:"greater_than_or_equal"`
	LessThan           string   `json:"less_than"`
	LessThanOrEqual    string   `json:"less_than_or_equal"`
	NotEquals          []string `json:"not_equals"`
}
