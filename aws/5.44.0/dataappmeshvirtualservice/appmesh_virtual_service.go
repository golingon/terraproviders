// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package dataappmeshvirtualservice

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// Provider: min=0
	Provider []Provider `hcl:"provider,block" validate:"min=0"`
}

type Provider struct {
	// VirtualNode: min=0
	VirtualNode []VirtualNode `hcl:"virtual_node,block" validate:"min=0"`
	// VirtualRouter: min=0
	VirtualRouter []VirtualRouter `hcl:"virtual_router,block" validate:"min=0"`
}

type VirtualNode struct{}

type VirtualRouter struct{}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Provider() terra.ListValue[ProviderAttributes] {
	return terra.ReferenceAsList[ProviderAttributes](s.ref.Append("provider"))
}

type ProviderAttributes struct {
	ref terra.Reference
}

func (p ProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProviderAttributes) InternalWithRef(ref terra.Reference) ProviderAttributes {
	return ProviderAttributes{ref: ref}
}

func (p ProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProviderAttributes) VirtualNode() terra.ListValue[VirtualNodeAttributes] {
	return terra.ReferenceAsList[VirtualNodeAttributes](p.ref.Append("virtual_node"))
}

func (p ProviderAttributes) VirtualRouter() terra.ListValue[VirtualRouterAttributes] {
	return terra.ReferenceAsList[VirtualRouterAttributes](p.ref.Append("virtual_router"))
}

type VirtualNodeAttributes struct {
	ref terra.Reference
}

func (vn VirtualNodeAttributes) InternalRef() (terra.Reference, error) {
	return vn.ref, nil
}

func (vn VirtualNodeAttributes) InternalWithRef(ref terra.Reference) VirtualNodeAttributes {
	return VirtualNodeAttributes{ref: ref}
}

func (vn VirtualNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vn.ref.InternalTokens()
}

func (vn VirtualNodeAttributes) VirtualNodeName() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("virtual_node_name"))
}

type VirtualRouterAttributes struct {
	ref terra.Reference
}

func (vr VirtualRouterAttributes) InternalRef() (terra.Reference, error) {
	return vr.ref, nil
}

func (vr VirtualRouterAttributes) InternalWithRef(ref terra.Reference) VirtualRouterAttributes {
	return VirtualRouterAttributes{ref: ref}
}

func (vr VirtualRouterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vr.ref.InternalTokens()
}

func (vr VirtualRouterAttributes) VirtualRouterName() terra.StringValue {
	return terra.ReferenceAsString(vr.ref.Append("virtual_router_name"))
}

type SpecState struct {
	Provider []ProviderState `json:"provider"`
}

type ProviderState struct {
	VirtualNode   []VirtualNodeState   `json:"virtual_node"`
	VirtualRouter []VirtualRouterState `json:"virtual_router"`
}

type VirtualNodeState struct {
	VirtualNodeName string `json:"virtual_node_name"`
}

type VirtualRouterState struct {
	VirtualRouterName string `json:"virtual_router_name"`
}
