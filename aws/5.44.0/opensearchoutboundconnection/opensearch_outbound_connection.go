// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package opensearchoutboundconnection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConnectionProperties struct {
	// CrossClusterSearch: optional
	CrossClusterSearch *CrossClusterSearch `hcl:"cross_cluster_search,block"`
}

type CrossClusterSearch struct {
	// SkipUnavailable: string, optional
	SkipUnavailable terra.StringValue `hcl:"skip_unavailable,attr"`
}

type LocalDomainInfo struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// OwnerId: string, required
	OwnerId terra.StringValue `hcl:"owner_id,attr" validate:"required"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type RemoteDomainInfo struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// OwnerId: string, required
	OwnerId terra.StringValue `hcl:"owner_id,attr" validate:"required"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type ConnectionPropertiesAttributes struct {
	ref terra.Reference
}

func (cp ConnectionPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConnectionPropertiesAttributes) InternalWithRef(ref terra.Reference) ConnectionPropertiesAttributes {
	return ConnectionPropertiesAttributes{ref: ref}
}

func (cp ConnectionPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ConnectionPropertiesAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("endpoint"))
}

func (cp ConnectionPropertiesAttributes) CrossClusterSearch() terra.ListValue[CrossClusterSearchAttributes] {
	return terra.ReferenceAsList[CrossClusterSearchAttributes](cp.ref.Append("cross_cluster_search"))
}

type CrossClusterSearchAttributes struct {
	ref terra.Reference
}

func (ccs CrossClusterSearchAttributes) InternalRef() (terra.Reference, error) {
	return ccs.ref, nil
}

func (ccs CrossClusterSearchAttributes) InternalWithRef(ref terra.Reference) CrossClusterSearchAttributes {
	return CrossClusterSearchAttributes{ref: ref}
}

func (ccs CrossClusterSearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccs.ref.InternalTokens()
}

func (ccs CrossClusterSearchAttributes) SkipUnavailable() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("skip_unavailable"))
}

type LocalDomainInfoAttributes struct {
	ref terra.Reference
}

func (ldi LocalDomainInfoAttributes) InternalRef() (terra.Reference, error) {
	return ldi.ref, nil
}

func (ldi LocalDomainInfoAttributes) InternalWithRef(ref terra.Reference) LocalDomainInfoAttributes {
	return LocalDomainInfoAttributes{ref: ref}
}

func (ldi LocalDomainInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ldi.ref.InternalTokens()
}

func (ldi LocalDomainInfoAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("domain_name"))
}

func (ldi LocalDomainInfoAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("owner_id"))
}

func (ldi LocalDomainInfoAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("region"))
}

type RemoteDomainInfoAttributes struct {
	ref terra.Reference
}

func (rdi RemoteDomainInfoAttributes) InternalRef() (terra.Reference, error) {
	return rdi.ref, nil
}

func (rdi RemoteDomainInfoAttributes) InternalWithRef(ref terra.Reference) RemoteDomainInfoAttributes {
	return RemoteDomainInfoAttributes{ref: ref}
}

func (rdi RemoteDomainInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdi.ref.InternalTokens()
}

func (rdi RemoteDomainInfoAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("domain_name"))
}

func (rdi RemoteDomainInfoAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("owner_id"))
}

func (rdi RemoteDomainInfoAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("region"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ConnectionPropertiesState struct {
	Endpoint           string                    `json:"endpoint"`
	CrossClusterSearch []CrossClusterSearchState `json:"cross_cluster_search"`
}

type CrossClusterSearchState struct {
	SkipUnavailable string `json:"skip_unavailable"`
}

type LocalDomainInfoState struct {
	DomainName string `json:"domain_name"`
	OwnerId    string `json:"owner_id"`
	Region     string `json:"region"`
}

type RemoteDomainInfoState struct {
	DomainName string `json:"domain_name"`
	OwnerId    string `json:"owner_id"`
	Region     string `json:"region"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
