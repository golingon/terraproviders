// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	athenapreparedstatement "github.com/golingon/terraproviders/aws/5.44.0/athenapreparedstatement"
	"io"
)

// NewAthenaPreparedStatement creates a new instance of [AthenaPreparedStatement].
func NewAthenaPreparedStatement(name string, args AthenaPreparedStatementArgs) *AthenaPreparedStatement {
	return &AthenaPreparedStatement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AthenaPreparedStatement)(nil)

// AthenaPreparedStatement represents the Terraform resource aws_athena_prepared_statement.
type AthenaPreparedStatement struct {
	Name      string
	Args      AthenaPreparedStatementArgs
	state     *athenaPreparedStatementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) Type() string {
	return "aws_athena_prepared_statement"
}

// LocalName returns the local name for [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) LocalName() string {
	return aps.Name
}

// Configuration returns the configuration (args) for [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) Configuration() interface{} {
	return aps.Args
}

// DependOn is used for other resources to depend on [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) DependOn() terra.Reference {
	return terra.ReferenceResource(aps)
}

// Dependencies returns the list of resources [AthenaPreparedStatement] depends_on.
func (aps *AthenaPreparedStatement) Dependencies() terra.Dependencies {
	return aps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) LifecycleManagement() *terra.Lifecycle {
	return aps.Lifecycle
}

// Attributes returns the attributes for [AthenaPreparedStatement].
func (aps *AthenaPreparedStatement) Attributes() athenaPreparedStatementAttributes {
	return athenaPreparedStatementAttributes{ref: terra.ReferenceResource(aps)}
}

// ImportState imports the given attribute values into [AthenaPreparedStatement]'s state.
func (aps *AthenaPreparedStatement) ImportState(av io.Reader) error {
	aps.state = &athenaPreparedStatementState{}
	if err := json.NewDecoder(av).Decode(aps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aps.Type(), aps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AthenaPreparedStatement] has state.
func (aps *AthenaPreparedStatement) State() (*athenaPreparedStatementState, bool) {
	return aps.state, aps.state != nil
}

// StateMust returns the state for [AthenaPreparedStatement]. Panics if the state is nil.
func (aps *AthenaPreparedStatement) StateMust() *athenaPreparedStatementState {
	if aps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aps.Type(), aps.LocalName()))
	}
	return aps.state
}

// AthenaPreparedStatementArgs contains the configurations for aws_athena_prepared_statement.
type AthenaPreparedStatementArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryStatement: string, required
	QueryStatement terra.StringValue `hcl:"query_statement,attr" validate:"required"`
	// Workgroup: string, required
	Workgroup terra.StringValue `hcl:"workgroup,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *athenapreparedstatement.Timeouts `hcl:"timeouts,block"`
}
type athenaPreparedStatementAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_athena_prepared_statement.
func (aps athenaPreparedStatementAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("description"))
}

// Id returns a reference to field id of aws_athena_prepared_statement.
func (aps athenaPreparedStatementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("id"))
}

// Name returns a reference to field name of aws_athena_prepared_statement.
func (aps athenaPreparedStatementAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("name"))
}

// QueryStatement returns a reference to field query_statement of aws_athena_prepared_statement.
func (aps athenaPreparedStatementAttributes) QueryStatement() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("query_statement"))
}

// Workgroup returns a reference to field workgroup of aws_athena_prepared_statement.
func (aps athenaPreparedStatementAttributes) Workgroup() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("workgroup"))
}

func (aps athenaPreparedStatementAttributes) Timeouts() athenapreparedstatement.TimeoutsAttributes {
	return terra.ReferenceAsSingle[athenapreparedstatement.TimeoutsAttributes](aps.ref.Append("timeouts"))
}

type athenaPreparedStatementState struct {
	Description    string                                 `json:"description"`
	Id             string                                 `json:"id"`
	Name           string                                 `json:"name"`
	QueryStatement string                                 `json:"query_statement"`
	Workgroup      string                                 `json:"workgroup"`
	Timeouts       *athenapreparedstatement.TimeoutsState `json:"timeouts"`
}
