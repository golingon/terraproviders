// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package s3bucketlogging

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetGrant struct {
	// Permission: string, required
	Permission terra.StringValue `hcl:"permission,attr" validate:"required"`
	// Grantee: required
	Grantee *Grantee `hcl:"grantee,block" validate:"required"`
}

type Grantee struct {
	// EmailAddress: string, optional
	EmailAddress terra.StringValue `hcl:"email_address,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
}

type TargetObjectKeyFormat struct {
	// PartitionedPrefix: optional
	PartitionedPrefix *PartitionedPrefix `hcl:"partitioned_prefix,block"`
	// SimplePrefix: optional
	SimplePrefix *SimplePrefix `hcl:"simple_prefix,block"`
}

type PartitionedPrefix struct {
	// PartitionDateSource: string, required
	PartitionDateSource terra.StringValue `hcl:"partition_date_source,attr" validate:"required"`
}

type SimplePrefix struct{}

type TargetGrantAttributes struct {
	ref terra.Reference
}

func (tg TargetGrantAttributes) InternalRef() (terra.Reference, error) {
	return tg.ref, nil
}

func (tg TargetGrantAttributes) InternalWithRef(ref terra.Reference) TargetGrantAttributes {
	return TargetGrantAttributes{ref: ref}
}

func (tg TargetGrantAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tg.ref.InternalTokens()
}

func (tg TargetGrantAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(tg.ref.Append("permission"))
}

func (tg TargetGrantAttributes) Grantee() terra.ListValue[GranteeAttributes] {
	return terra.ReferenceAsList[GranteeAttributes](tg.ref.Append("grantee"))
}

type GranteeAttributes struct {
	ref terra.Reference
}

func (g GranteeAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GranteeAttributes) InternalWithRef(ref terra.Reference) GranteeAttributes {
	return GranteeAttributes{ref: ref}
}

func (g GranteeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GranteeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("display_name"))
}

func (g GranteeAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("email_address"))
}

func (g GranteeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

func (g GranteeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("type"))
}

func (g GranteeAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("uri"))
}

type TargetObjectKeyFormatAttributes struct {
	ref terra.Reference
}

func (tokf TargetObjectKeyFormatAttributes) InternalRef() (terra.Reference, error) {
	return tokf.ref, nil
}

func (tokf TargetObjectKeyFormatAttributes) InternalWithRef(ref terra.Reference) TargetObjectKeyFormatAttributes {
	return TargetObjectKeyFormatAttributes{ref: ref}
}

func (tokf TargetObjectKeyFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tokf.ref.InternalTokens()
}

func (tokf TargetObjectKeyFormatAttributes) PartitionedPrefix() terra.ListValue[PartitionedPrefixAttributes] {
	return terra.ReferenceAsList[PartitionedPrefixAttributes](tokf.ref.Append("partitioned_prefix"))
}

func (tokf TargetObjectKeyFormatAttributes) SimplePrefix() terra.ListValue[SimplePrefixAttributes] {
	return terra.ReferenceAsList[SimplePrefixAttributes](tokf.ref.Append("simple_prefix"))
}

type PartitionedPrefixAttributes struct {
	ref terra.Reference
}

func (pp PartitionedPrefixAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PartitionedPrefixAttributes) InternalWithRef(ref terra.Reference) PartitionedPrefixAttributes {
	return PartitionedPrefixAttributes{ref: ref}
}

func (pp PartitionedPrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PartitionedPrefixAttributes) PartitionDateSource() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("partition_date_source"))
}

type SimplePrefixAttributes struct {
	ref terra.Reference
}

func (sp SimplePrefixAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SimplePrefixAttributes) InternalWithRef(ref terra.Reference) SimplePrefixAttributes {
	return SimplePrefixAttributes{ref: ref}
}

func (sp SimplePrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

type TargetGrantState struct {
	Permission string         `json:"permission"`
	Grantee    []GranteeState `json:"grantee"`
}

type GranteeState struct {
	DisplayName  string `json:"display_name"`
	EmailAddress string `json:"email_address"`
	Id           string `json:"id"`
	Type         string `json:"type"`
	Uri          string `json:"uri"`
}

type TargetObjectKeyFormatState struct {
	PartitionedPrefix []PartitionedPrefixState `json:"partitioned_prefix"`
	SimplePrefix      []SimplePrefixState      `json:"simple_prefix"`
}

type PartitionedPrefixState struct {
	PartitionDateSource string `json:"partition_date_source"`
}

type SimplePrefixState struct{}
