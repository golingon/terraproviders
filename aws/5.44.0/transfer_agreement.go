// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewTransferAgreement creates a new instance of [TransferAgreement].
func NewTransferAgreement(name string, args TransferAgreementArgs) *TransferAgreement {
	return &TransferAgreement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransferAgreement)(nil)

// TransferAgreement represents the Terraform resource aws_transfer_agreement.
type TransferAgreement struct {
	Name      string
	Args      TransferAgreementArgs
	state     *transferAgreementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TransferAgreement].
func (ta *TransferAgreement) Type() string {
	return "aws_transfer_agreement"
}

// LocalName returns the local name for [TransferAgreement].
func (ta *TransferAgreement) LocalName() string {
	return ta.Name
}

// Configuration returns the configuration (args) for [TransferAgreement].
func (ta *TransferAgreement) Configuration() interface{} {
	return ta.Args
}

// DependOn is used for other resources to depend on [TransferAgreement].
func (ta *TransferAgreement) DependOn() terra.Reference {
	return terra.ReferenceResource(ta)
}

// Dependencies returns the list of resources [TransferAgreement] depends_on.
func (ta *TransferAgreement) Dependencies() terra.Dependencies {
	return ta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TransferAgreement].
func (ta *TransferAgreement) LifecycleManagement() *terra.Lifecycle {
	return ta.Lifecycle
}

// Attributes returns the attributes for [TransferAgreement].
func (ta *TransferAgreement) Attributes() transferAgreementAttributes {
	return transferAgreementAttributes{ref: terra.ReferenceResource(ta)}
}

// ImportState imports the given attribute values into [TransferAgreement]'s state.
func (ta *TransferAgreement) ImportState(av io.Reader) error {
	ta.state = &transferAgreementState{}
	if err := json.NewDecoder(av).Decode(ta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ta.Type(), ta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TransferAgreement] has state.
func (ta *TransferAgreement) State() (*transferAgreementState, bool) {
	return ta.state, ta.state != nil
}

// StateMust returns the state for [TransferAgreement]. Panics if the state is nil.
func (ta *TransferAgreement) StateMust() *transferAgreementState {
	if ta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ta.Type(), ta.LocalName()))
	}
	return ta.state
}

// TransferAgreementArgs contains the configurations for aws_transfer_agreement.
type TransferAgreementArgs struct {
	// AccessRole: string, required
	AccessRole terra.StringValue `hcl:"access_role,attr" validate:"required"`
	// BaseDirectory: string, required
	BaseDirectory terra.StringValue `hcl:"base_directory,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalProfileId: string, required
	LocalProfileId terra.StringValue `hcl:"local_profile_id,attr" validate:"required"`
	// PartnerProfileId: string, required
	PartnerProfileId terra.StringValue `hcl:"partner_profile_id,attr" validate:"required"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type transferAgreementAttributes struct {
	ref terra.Reference
}

// AccessRole returns a reference to field access_role of aws_transfer_agreement.
func (ta transferAgreementAttributes) AccessRole() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("access_role"))
}

// AgreementId returns a reference to field agreement_id of aws_transfer_agreement.
func (ta transferAgreementAttributes) AgreementId() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("agreement_id"))
}

// Arn returns a reference to field arn of aws_transfer_agreement.
func (ta transferAgreementAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("arn"))
}

// BaseDirectory returns a reference to field base_directory of aws_transfer_agreement.
func (ta transferAgreementAttributes) BaseDirectory() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("base_directory"))
}

// Description returns a reference to field description of aws_transfer_agreement.
func (ta transferAgreementAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("description"))
}

// Id returns a reference to field id of aws_transfer_agreement.
func (ta transferAgreementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("id"))
}

// LocalProfileId returns a reference to field local_profile_id of aws_transfer_agreement.
func (ta transferAgreementAttributes) LocalProfileId() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("local_profile_id"))
}

// PartnerProfileId returns a reference to field partner_profile_id of aws_transfer_agreement.
func (ta transferAgreementAttributes) PartnerProfileId() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("partner_profile_id"))
}

// ServerId returns a reference to field server_id of aws_transfer_agreement.
func (ta transferAgreementAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("server_id"))
}

// Status returns a reference to field status of aws_transfer_agreement.
func (ta transferAgreementAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_transfer_agreement.
func (ta transferAgreementAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ta.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_agreement.
func (ta transferAgreementAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ta.ref.Append("tags_all"))
}

type transferAgreementState struct {
	AccessRole       string            `json:"access_role"`
	AgreementId      string            `json:"agreement_id"`
	Arn              string            `json:"arn"`
	BaseDirectory    string            `json:"base_directory"`
	Description      string            `json:"description"`
	Id               string            `json:"id"`
	LocalProfileId   string            `json:"local_profile_id"`
	PartnerProfileId string            `json:"partner_profile_id"`
	ServerId         string            `json:"server_id"`
	Status           string            `json:"status"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
