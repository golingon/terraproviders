// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewElbAttachment creates a new instance of [ElbAttachment].
func NewElbAttachment(name string, args ElbAttachmentArgs) *ElbAttachment {
	return &ElbAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElbAttachment)(nil)

// ElbAttachment represents the Terraform resource aws_elb_attachment.
type ElbAttachment struct {
	Name      string
	Args      ElbAttachmentArgs
	state     *elbAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ElbAttachment].
func (ea *ElbAttachment) Type() string {
	return "aws_elb_attachment"
}

// LocalName returns the local name for [ElbAttachment].
func (ea *ElbAttachment) LocalName() string {
	return ea.Name
}

// Configuration returns the configuration (args) for [ElbAttachment].
func (ea *ElbAttachment) Configuration() interface{} {
	return ea.Args
}

// DependOn is used for other resources to depend on [ElbAttachment].
func (ea *ElbAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(ea)
}

// Dependencies returns the list of resources [ElbAttachment] depends_on.
func (ea *ElbAttachment) Dependencies() terra.Dependencies {
	return ea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ElbAttachment].
func (ea *ElbAttachment) LifecycleManagement() *terra.Lifecycle {
	return ea.Lifecycle
}

// Attributes returns the attributes for [ElbAttachment].
func (ea *ElbAttachment) Attributes() elbAttachmentAttributes {
	return elbAttachmentAttributes{ref: terra.ReferenceResource(ea)}
}

// ImportState imports the given attribute values into [ElbAttachment]'s state.
func (ea *ElbAttachment) ImportState(av io.Reader) error {
	ea.state = &elbAttachmentState{}
	if err := json.NewDecoder(av).Decode(ea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ea.Type(), ea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ElbAttachment] has state.
func (ea *ElbAttachment) State() (*elbAttachmentState, bool) {
	return ea.state, ea.state != nil
}

// StateMust returns the state for [ElbAttachment]. Panics if the state is nil.
func (ea *ElbAttachment) StateMust() *elbAttachmentState {
	if ea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ea.Type(), ea.LocalName()))
	}
	return ea.state
}

// ElbAttachmentArgs contains the configurations for aws_elb_attachment.
type ElbAttachmentArgs struct {
	// Elb: string, required
	Elb terra.StringValue `hcl:"elb,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
}
type elbAttachmentAttributes struct {
	ref terra.Reference
}

// Elb returns a reference to field elb of aws_elb_attachment.
func (ea elbAttachmentAttributes) Elb() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("elb"))
}

// Id returns a reference to field id of aws_elb_attachment.
func (ea elbAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("id"))
}

// Instance returns a reference to field instance of aws_elb_attachment.
func (ea elbAttachmentAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("instance"))
}

type elbAttachmentState struct {
	Elb      string `json:"elb"`
	Id       string `json:"id"`
	Instance string `json:"instance"`
}
