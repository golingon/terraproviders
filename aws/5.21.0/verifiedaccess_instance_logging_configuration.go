// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	verifiedaccessinstanceloggingconfiguration "github.com/golingon/terraproviders/aws/5.21.0/verifiedaccessinstanceloggingconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVerifiedaccessInstanceLoggingConfiguration creates a new instance of [VerifiedaccessInstanceLoggingConfiguration].
func NewVerifiedaccessInstanceLoggingConfiguration(name string, args VerifiedaccessInstanceLoggingConfigurationArgs) *VerifiedaccessInstanceLoggingConfiguration {
	return &VerifiedaccessInstanceLoggingConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VerifiedaccessInstanceLoggingConfiguration)(nil)

// VerifiedaccessInstanceLoggingConfiguration represents the Terraform resource aws_verifiedaccess_instance_logging_configuration.
type VerifiedaccessInstanceLoggingConfiguration struct {
	Name      string
	Args      VerifiedaccessInstanceLoggingConfigurationArgs
	state     *verifiedaccessInstanceLoggingConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) Type() string {
	return "aws_verifiedaccess_instance_logging_configuration"
}

// LocalName returns the local name for [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) LocalName() string {
	return vilc.Name
}

// Configuration returns the configuration (args) for [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) Configuration() interface{} {
	return vilc.Args
}

// DependOn is used for other resources to depend on [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(vilc)
}

// Dependencies returns the list of resources [VerifiedaccessInstanceLoggingConfiguration] depends_on.
func (vilc *VerifiedaccessInstanceLoggingConfiguration) Dependencies() terra.Dependencies {
	return vilc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) LifecycleManagement() *terra.Lifecycle {
	return vilc.Lifecycle
}

// Attributes returns the attributes for [VerifiedaccessInstanceLoggingConfiguration].
func (vilc *VerifiedaccessInstanceLoggingConfiguration) Attributes() verifiedaccessInstanceLoggingConfigurationAttributes {
	return verifiedaccessInstanceLoggingConfigurationAttributes{ref: terra.ReferenceResource(vilc)}
}

// ImportState imports the given attribute values into [VerifiedaccessInstanceLoggingConfiguration]'s state.
func (vilc *VerifiedaccessInstanceLoggingConfiguration) ImportState(av io.Reader) error {
	vilc.state = &verifiedaccessInstanceLoggingConfigurationState{}
	if err := json.NewDecoder(av).Decode(vilc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vilc.Type(), vilc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VerifiedaccessInstanceLoggingConfiguration] has state.
func (vilc *VerifiedaccessInstanceLoggingConfiguration) State() (*verifiedaccessInstanceLoggingConfigurationState, bool) {
	return vilc.state, vilc.state != nil
}

// StateMust returns the state for [VerifiedaccessInstanceLoggingConfiguration]. Panics if the state is nil.
func (vilc *VerifiedaccessInstanceLoggingConfiguration) StateMust() *verifiedaccessInstanceLoggingConfigurationState {
	if vilc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vilc.Type(), vilc.LocalName()))
	}
	return vilc.state
}

// VerifiedaccessInstanceLoggingConfigurationArgs contains the configurations for aws_verifiedaccess_instance_logging_configuration.
type VerifiedaccessInstanceLoggingConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VerifiedaccessInstanceId: string, required
	VerifiedaccessInstanceId terra.StringValue `hcl:"verifiedaccess_instance_id,attr" validate:"required"`
	// AccessLogs: required
	AccessLogs *verifiedaccessinstanceloggingconfiguration.AccessLogs `hcl:"access_logs,block" validate:"required"`
}
type verifiedaccessInstanceLoggingConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_verifiedaccess_instance_logging_configuration.
func (vilc verifiedaccessInstanceLoggingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vilc.ref.Append("id"))
}

// VerifiedaccessInstanceId returns a reference to field verifiedaccess_instance_id of aws_verifiedaccess_instance_logging_configuration.
func (vilc verifiedaccessInstanceLoggingConfigurationAttributes) VerifiedaccessInstanceId() terra.StringValue {
	return terra.ReferenceAsString(vilc.ref.Append("verifiedaccess_instance_id"))
}

func (vilc verifiedaccessInstanceLoggingConfigurationAttributes) AccessLogs() terra.ListValue[verifiedaccessinstanceloggingconfiguration.AccessLogsAttributes] {
	return terra.ReferenceAsList[verifiedaccessinstanceloggingconfiguration.AccessLogsAttributes](vilc.ref.Append("access_logs"))
}

type verifiedaccessInstanceLoggingConfigurationState struct {
	Id                       string                                                       `json:"id"`
	VerifiedaccessInstanceId string                                                       `json:"verifiedaccess_instance_id"`
	AccessLogs               []verifiedaccessinstanceloggingconfiguration.AccessLogsState `json:"access_logs"`
}
