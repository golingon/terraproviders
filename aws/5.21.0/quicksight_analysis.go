// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksightanalysis "github.com/golingon/terraproviders/aws/5.21.0/quicksightanalysis"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightAnalysis creates a new instance of [QuicksightAnalysis].
func NewQuicksightAnalysis(name string, args QuicksightAnalysisArgs) *QuicksightAnalysis {
	return &QuicksightAnalysis{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightAnalysis)(nil)

// QuicksightAnalysis represents the Terraform resource aws_quicksight_analysis.
type QuicksightAnalysis struct {
	Name      string
	Args      QuicksightAnalysisArgs
	state     *quicksightAnalysisState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightAnalysis].
func (qa *QuicksightAnalysis) Type() string {
	return "aws_quicksight_analysis"
}

// LocalName returns the local name for [QuicksightAnalysis].
func (qa *QuicksightAnalysis) LocalName() string {
	return qa.Name
}

// Configuration returns the configuration (args) for [QuicksightAnalysis].
func (qa *QuicksightAnalysis) Configuration() interface{} {
	return qa.Args
}

// DependOn is used for other resources to depend on [QuicksightAnalysis].
func (qa *QuicksightAnalysis) DependOn() terra.Reference {
	return terra.ReferenceResource(qa)
}

// Dependencies returns the list of resources [QuicksightAnalysis] depends_on.
func (qa *QuicksightAnalysis) Dependencies() terra.Dependencies {
	return qa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightAnalysis].
func (qa *QuicksightAnalysis) LifecycleManagement() *terra.Lifecycle {
	return qa.Lifecycle
}

// Attributes returns the attributes for [QuicksightAnalysis].
func (qa *QuicksightAnalysis) Attributes() quicksightAnalysisAttributes {
	return quicksightAnalysisAttributes{ref: terra.ReferenceResource(qa)}
}

// ImportState imports the given attribute values into [QuicksightAnalysis]'s state.
func (qa *QuicksightAnalysis) ImportState(av io.Reader) error {
	qa.state = &quicksightAnalysisState{}
	if err := json.NewDecoder(av).Decode(qa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qa.Type(), qa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightAnalysis] has state.
func (qa *QuicksightAnalysis) State() (*quicksightAnalysisState, bool) {
	return qa.state, qa.state != nil
}

// StateMust returns the state for [QuicksightAnalysis]. Panics if the state is nil.
func (qa *QuicksightAnalysis) StateMust() *quicksightAnalysisState {
	if qa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qa.Type(), qa.LocalName()))
	}
	return qa.state
}

// QuicksightAnalysisArgs contains the configurations for aws_quicksight_analysis.
type QuicksightAnalysisArgs struct {
	// AnalysisId: string, required
	AnalysisId terra.StringValue `hcl:"analysis_id,attr" validate:"required"`
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryWindowInDays: number, optional
	RecoveryWindowInDays terra.NumberValue `hcl:"recovery_window_in_days,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThemeArn: string, optional
	ThemeArn terra.StringValue `hcl:"theme_arn,attr"`
	// Definition: optional
	Definition *quicksightanalysis.Definition `hcl:"definition,block"`
	// Parameters: optional
	Parameters *quicksightanalysis.Parameters `hcl:"parameters,block"`
	// Permissions: min=0,max=64
	Permissions []quicksightanalysis.Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// SourceEntity: optional
	SourceEntity *quicksightanalysis.SourceEntity `hcl:"source_entity,block"`
	// Timeouts: optional
	Timeouts *quicksightanalysis.Timeouts `hcl:"timeouts,block"`
}
type quicksightAnalysisAttributes struct {
	ref terra.Reference
}

// AnalysisId returns a reference to field analysis_id of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) AnalysisId() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("analysis_id"))
}

// Arn returns a reference to field arn of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("created_time"))
}

// Id returns a reference to field id of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("id"))
}

// LastPublishedTime returns a reference to field last_published_time of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) LastPublishedTime() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("last_published_time"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("name"))
}

// RecoveryWindowInDays returns a reference to field recovery_window_in_days of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) RecoveryWindowInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(qa.ref.Append("recovery_window_in_days"))
}

// Status returns a reference to field status of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qa.ref.Append("tags_all"))
}

// ThemeArn returns a reference to field theme_arn of aws_quicksight_analysis.
func (qa quicksightAnalysisAttributes) ThemeArn() terra.StringValue {
	return terra.ReferenceAsString(qa.ref.Append("theme_arn"))
}

func (qa quicksightAnalysisAttributes) Definition() terra.ListValue[quicksightanalysis.DefinitionAttributes] {
	return terra.ReferenceAsList[quicksightanalysis.DefinitionAttributes](qa.ref.Append("definition"))
}

func (qa quicksightAnalysisAttributes) Parameters() terra.ListValue[quicksightanalysis.ParametersAttributes] {
	return terra.ReferenceAsList[quicksightanalysis.ParametersAttributes](qa.ref.Append("parameters"))
}

func (qa quicksightAnalysisAttributes) Permissions() terra.SetValue[quicksightanalysis.PermissionsAttributes] {
	return terra.ReferenceAsSet[quicksightanalysis.PermissionsAttributes](qa.ref.Append("permissions"))
}

func (qa quicksightAnalysisAttributes) SourceEntity() terra.ListValue[quicksightanalysis.SourceEntityAttributes] {
	return terra.ReferenceAsList[quicksightanalysis.SourceEntityAttributes](qa.ref.Append("source_entity"))
}

func (qa quicksightAnalysisAttributes) Timeouts() quicksightanalysis.TimeoutsAttributes {
	return terra.ReferenceAsSingle[quicksightanalysis.TimeoutsAttributes](qa.ref.Append("timeouts"))
}

type quicksightAnalysisState struct {
	AnalysisId           string                                 `json:"analysis_id"`
	Arn                  string                                 `json:"arn"`
	AwsAccountId         string                                 `json:"aws_account_id"`
	CreatedTime          string                                 `json:"created_time"`
	Id                   string                                 `json:"id"`
	LastPublishedTime    string                                 `json:"last_published_time"`
	LastUpdatedTime      string                                 `json:"last_updated_time"`
	Name                 string                                 `json:"name"`
	RecoveryWindowInDays float64                                `json:"recovery_window_in_days"`
	Status               string                                 `json:"status"`
	Tags                 map[string]string                      `json:"tags"`
	TagsAll              map[string]string                      `json:"tags_all"`
	ThemeArn             string                                 `json:"theme_arn"`
	Definition           []quicksightanalysis.DefinitionState   `json:"definition"`
	Parameters           []quicksightanalysis.ParametersState   `json:"parameters"`
	Permissions          []quicksightanalysis.PermissionsState  `json:"permissions"`
	SourceEntity         []quicksightanalysis.SourceEntityState `json:"source_entity"`
	Timeouts             *quicksightanalysis.TimeoutsState      `json:"timeouts"`
}
