// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datalaunchconfiguration "github.com/golingon/terraproviders/aws/5.21.0/datalaunchconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataLaunchConfiguration creates a new instance of [DataLaunchConfiguration].
func NewDataLaunchConfiguration(name string, args DataLaunchConfigurationArgs) *DataLaunchConfiguration {
	return &DataLaunchConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataLaunchConfiguration)(nil)

// DataLaunchConfiguration represents the Terraform data resource aws_launch_configuration.
type DataLaunchConfiguration struct {
	Name string
	Args DataLaunchConfigurationArgs
}

// DataSource returns the Terraform object type for [DataLaunchConfiguration].
func (lc *DataLaunchConfiguration) DataSource() string {
	return "aws_launch_configuration"
}

// LocalName returns the local name for [DataLaunchConfiguration].
func (lc *DataLaunchConfiguration) LocalName() string {
	return lc.Name
}

// Configuration returns the configuration (args) for [DataLaunchConfiguration].
func (lc *DataLaunchConfiguration) Configuration() interface{} {
	return lc.Args
}

// Attributes returns the attributes for [DataLaunchConfiguration].
func (lc *DataLaunchConfiguration) Attributes() dataLaunchConfigurationAttributes {
	return dataLaunchConfigurationAttributes{ref: terra.ReferenceDataResource(lc)}
}

// DataLaunchConfigurationArgs contains the configurations for aws_launch_configuration.
type DataLaunchConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []datalaunchconfiguration.EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []datalaunchconfiguration.EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// MetadataOptions: min=0
	MetadataOptions []datalaunchconfiguration.MetadataOptions `hcl:"metadata_options,block" validate:"min=0"`
	// RootBlockDevice: min=0
	RootBlockDevice []datalaunchconfiguration.RootBlockDevice `hcl:"root_block_device,block" validate:"min=0"`
}
type dataLaunchConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("arn"))
}

// AssociatePublicIpAddress returns a reference to field associate_public_ip_address of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) AssociatePublicIpAddress() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("associate_public_ip_address"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("ebs_optimized"))
}

// EnableMonitoring returns a reference to field enable_monitoring of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) EnableMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enable_monitoring"))
}

// IamInstanceProfile returns a reference to field iam_instance_profile of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("iam_instance_profile"))
}

// Id returns a reference to field id of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("image_id"))
}

// InstanceType returns a reference to field instance_type of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("instance_type"))
}

// KeyName returns a reference to field key_name of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("key_name"))
}

// Name returns a reference to field name of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("name"))
}

// PlacementTenancy returns a reference to field placement_tenancy of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) PlacementTenancy() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("placement_tenancy"))
}

// SecurityGroups returns a reference to field security_groups of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lc.ref.Append("security_groups"))
}

// SpotPrice returns a reference to field spot_price of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("spot_price"))
}

// UserData returns a reference to field user_data of aws_launch_configuration.
func (lc dataLaunchConfigurationAttributes) UserData() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("user_data"))
}

func (lc dataLaunchConfigurationAttributes) EbsBlockDevice() terra.SetValue[datalaunchconfiguration.EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[datalaunchconfiguration.EbsBlockDeviceAttributes](lc.ref.Append("ebs_block_device"))
}

func (lc dataLaunchConfigurationAttributes) EphemeralBlockDevice() terra.SetValue[datalaunchconfiguration.EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[datalaunchconfiguration.EphemeralBlockDeviceAttributes](lc.ref.Append("ephemeral_block_device"))
}

func (lc dataLaunchConfigurationAttributes) MetadataOptions() terra.ListValue[datalaunchconfiguration.MetadataOptionsAttributes] {
	return terra.ReferenceAsList[datalaunchconfiguration.MetadataOptionsAttributes](lc.ref.Append("metadata_options"))
}

func (lc dataLaunchConfigurationAttributes) RootBlockDevice() terra.ListValue[datalaunchconfiguration.RootBlockDeviceAttributes] {
	return terra.ReferenceAsList[datalaunchconfiguration.RootBlockDeviceAttributes](lc.ref.Append("root_block_device"))
}
