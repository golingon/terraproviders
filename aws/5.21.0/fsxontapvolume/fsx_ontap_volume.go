// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package fsxontapvolume

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SnaplockConfiguration struct {
	// AuditLogVolume: bool, optional
	AuditLogVolume terra.BoolValue `hcl:"audit_log_volume,attr"`
	// PrivilegedDelete: string, optional
	PrivilegedDelete terra.StringValue `hcl:"privileged_delete,attr"`
	// SnaplockType: string, required
	SnaplockType terra.StringValue `hcl:"snaplock_type,attr" validate:"required"`
	// VolumeAppendModeEnabled: bool, optional
	VolumeAppendModeEnabled terra.BoolValue `hcl:"volume_append_mode_enabled,attr"`
	// AutocommitPeriod: optional
	AutocommitPeriod *AutocommitPeriod `hcl:"autocommit_period,block"`
	// RetentionPeriod: optional
	RetentionPeriod *RetentionPeriod `hcl:"retention_period,block"`
}

type AutocommitPeriod struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type RetentionPeriod struct {
	// DefaultRetention: optional
	DefaultRetention *DefaultRetention `hcl:"default_retention,block"`
	// MaximumRetention: optional
	MaximumRetention *MaximumRetention `hcl:"maximum_retention,block"`
	// MinimumRetention: optional
	MinimumRetention *MinimumRetention `hcl:"minimum_retention,block"`
}

type DefaultRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type MaximumRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type MinimumRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type TieringPolicy struct {
	// CoolingPeriod: number, optional
	CoolingPeriod terra.NumberValue `hcl:"cooling_period,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SnaplockConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SnaplockConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SnaplockConfigurationAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationAttributes {
	return SnaplockConfigurationAttributes{ref: ref}
}

func (sc SnaplockConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SnaplockConfigurationAttributes) AuditLogVolume() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("audit_log_volume"))
}

func (sc SnaplockConfigurationAttributes) PrivilegedDelete() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("privileged_delete"))
}

func (sc SnaplockConfigurationAttributes) SnaplockType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("snaplock_type"))
}

func (sc SnaplockConfigurationAttributes) VolumeAppendModeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("volume_append_mode_enabled"))
}

func (sc SnaplockConfigurationAttributes) AutocommitPeriod() terra.ListValue[AutocommitPeriodAttributes] {
	return terra.ReferenceAsList[AutocommitPeriodAttributes](sc.ref.Append("autocommit_period"))
}

func (sc SnaplockConfigurationAttributes) RetentionPeriod() terra.ListValue[RetentionPeriodAttributes] {
	return terra.ReferenceAsList[RetentionPeriodAttributes](sc.ref.Append("retention_period"))
}

type AutocommitPeriodAttributes struct {
	ref terra.Reference
}

func (ap AutocommitPeriodAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap AutocommitPeriodAttributes) InternalWithRef(ref terra.Reference) AutocommitPeriodAttributes {
	return AutocommitPeriodAttributes{ref: ref}
}

func (ap AutocommitPeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap AutocommitPeriodAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("type"))
}

func (ap AutocommitPeriodAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("value"))
}

type RetentionPeriodAttributes struct {
	ref terra.Reference
}

func (rp RetentionPeriodAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetentionPeriodAttributes) InternalWithRef(ref terra.Reference) RetentionPeriodAttributes {
	return RetentionPeriodAttributes{ref: ref}
}

func (rp RetentionPeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetentionPeriodAttributes) DefaultRetention() terra.ListValue[DefaultRetentionAttributes] {
	return terra.ReferenceAsList[DefaultRetentionAttributes](rp.ref.Append("default_retention"))
}

func (rp RetentionPeriodAttributes) MaximumRetention() terra.ListValue[MaximumRetentionAttributes] {
	return terra.ReferenceAsList[MaximumRetentionAttributes](rp.ref.Append("maximum_retention"))
}

func (rp RetentionPeriodAttributes) MinimumRetention() terra.ListValue[MinimumRetentionAttributes] {
	return terra.ReferenceAsList[MinimumRetentionAttributes](rp.ref.Append("minimum_retention"))
}

type DefaultRetentionAttributes struct {
	ref terra.Reference
}

func (dr DefaultRetentionAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr DefaultRetentionAttributes) InternalWithRef(ref terra.Reference) DefaultRetentionAttributes {
	return DefaultRetentionAttributes{ref: ref}
}

func (dr DefaultRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr DefaultRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("type"))
}

func (dr DefaultRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type MaximumRetentionAttributes struct {
	ref terra.Reference
}

func (mr MaximumRetentionAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MaximumRetentionAttributes) InternalWithRef(ref terra.Reference) MaximumRetentionAttributes {
	return MaximumRetentionAttributes{ref: ref}
}

func (mr MaximumRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MaximumRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

func (mr MaximumRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("value"))
}

type MinimumRetentionAttributes struct {
	ref terra.Reference
}

func (mr MinimumRetentionAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr MinimumRetentionAttributes) InternalWithRef(ref terra.Reference) MinimumRetentionAttributes {
	return MinimumRetentionAttributes{ref: ref}
}

func (mr MinimumRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr MinimumRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

func (mr MinimumRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("value"))
}

type TieringPolicyAttributes struct {
	ref terra.Reference
}

func (tp TieringPolicyAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TieringPolicyAttributes) InternalWithRef(ref terra.Reference) TieringPolicyAttributes {
	return TieringPolicyAttributes{ref: ref}
}

func (tp TieringPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TieringPolicyAttributes) CoolingPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(tp.ref.Append("cooling_period"))
}

func (tp TieringPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SnaplockConfigurationState struct {
	AuditLogVolume          bool                    `json:"audit_log_volume"`
	PrivilegedDelete        string                  `json:"privileged_delete"`
	SnaplockType            string                  `json:"snaplock_type"`
	VolumeAppendModeEnabled bool                    `json:"volume_append_mode_enabled"`
	AutocommitPeriod        []AutocommitPeriodState `json:"autocommit_period"`
	RetentionPeriod         []RetentionPeriodState  `json:"retention_period"`
}

type AutocommitPeriodState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type RetentionPeriodState struct {
	DefaultRetention []DefaultRetentionState `json:"default_retention"`
	MaximumRetention []MaximumRetentionState `json:"maximum_retention"`
	MinimumRetention []MinimumRetentionState `json:"minimum_retention"`
}

type DefaultRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type MaximumRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type MinimumRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type TieringPolicyState struct {
	CoolingPeriod float64 `json:"cooling_period"`
	Name          string  `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
