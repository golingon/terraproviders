// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package verifiedaccessinstanceloggingconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AccessLogs struct {
	// IncludeTrustContext: bool, optional
	IncludeTrustContext terra.BoolValue `hcl:"include_trust_context,attr"`
	// LogVersion: string, optional
	LogVersion terra.StringValue `hcl:"log_version,attr"`
	// CloudwatchLogs: optional
	CloudwatchLogs *CloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// KinesisDataFirehose: optional
	KinesisDataFirehose *KinesisDataFirehose `hcl:"kinesis_data_firehose,block"`
	// S3: optional
	S3 *S3 `hcl:"s3,block"`
}

type CloudwatchLogs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// LogGroup: string, optional
	LogGroup terra.StringValue `hcl:"log_group,attr"`
}

type KinesisDataFirehose struct {
	// DeliveryStream: string, optional
	DeliveryStream terra.StringValue `hcl:"delivery_stream,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type S3 struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketOwner: string, optional
	BucketOwner terra.StringValue `hcl:"bucket_owner,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type AccessLogsAttributes struct {
	ref terra.Reference
}

func (al AccessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AccessLogsAttributes) InternalWithRef(ref terra.Reference) AccessLogsAttributes {
	return AccessLogsAttributes{ref: ref}
}

func (al AccessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AccessLogsAttributes) IncludeTrustContext() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("include_trust_context"))
}

func (al AccessLogsAttributes) LogVersion() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("log_version"))
}

func (al AccessLogsAttributes) CloudwatchLogs() terra.ListValue[CloudwatchLogsAttributes] {
	return terra.ReferenceAsList[CloudwatchLogsAttributes](al.ref.Append("cloudwatch_logs"))
}

func (al AccessLogsAttributes) KinesisDataFirehose() terra.ListValue[KinesisDataFirehoseAttributes] {
	return terra.ReferenceAsList[KinesisDataFirehoseAttributes](al.ref.Append("kinesis_data_firehose"))
}

func (al AccessLogsAttributes) S3() terra.ListValue[S3Attributes] {
	return terra.ReferenceAsList[S3Attributes](al.ref.Append("s3"))
}

type CloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl CloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl CloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) CloudwatchLogsAttributes {
	return CloudwatchLogsAttributes{ref: ref}
}

func (cl CloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl CloudwatchLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl CloudwatchLogsAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group"))
}

type KinesisDataFirehoseAttributes struct {
	ref terra.Reference
}

func (kdf KinesisDataFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return kdf.ref, nil
}

func (kdf KinesisDataFirehoseAttributes) InternalWithRef(ref terra.Reference) KinesisDataFirehoseAttributes {
	return KinesisDataFirehoseAttributes{ref: ref}
}

func (kdf KinesisDataFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kdf.ref.InternalTokens()
}

func (kdf KinesisDataFirehoseAttributes) DeliveryStream() terra.StringValue {
	return terra.ReferenceAsString(kdf.ref.Append("delivery_stream"))
}

func (kdf KinesisDataFirehoseAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(kdf.ref.Append("enabled"))
}

type S3Attributes struct {
	ref terra.Reference
}

func (s S3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s S3Attributes) InternalWithRef(ref terra.Reference) S3Attributes {
	return S3Attributes{ref: ref}
}

func (s S3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s S3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s S3Attributes) BucketOwner() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_owner"))
}

func (s S3Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s S3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type AccessLogsState struct {
	IncludeTrustContext bool                       `json:"include_trust_context"`
	LogVersion          string                     `json:"log_version"`
	CloudwatchLogs      []CloudwatchLogsState      `json:"cloudwatch_logs"`
	KinesisDataFirehose []KinesisDataFirehoseState `json:"kinesis_data_firehose"`
	S3                  []S3State                  `json:"s3"`
}

type CloudwatchLogsState struct {
	Enabled  bool   `json:"enabled"`
	LogGroup string `json:"log_group"`
}

type KinesisDataFirehoseState struct {
	DeliveryStream string `json:"delivery_stream"`
	Enabled        bool   `json:"enabled"`
}

type S3State struct {
	BucketName  string `json:"bucket_name"`
	BucketOwner string `json:"bucket_owner"`
	Enabled     bool   `json:"enabled"`
	Prefix      string `json:"prefix"`
}
