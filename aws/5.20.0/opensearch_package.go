// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	opensearchpackage "github.com/golingon/terraproviders/aws/5.20.0/opensearchpackage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewOpensearchPackage creates a new instance of [OpensearchPackage].
func NewOpensearchPackage(name string, args OpensearchPackageArgs) *OpensearchPackage {
	return &OpensearchPackage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpensearchPackage)(nil)

// OpensearchPackage represents the Terraform resource aws_opensearch_package.
type OpensearchPackage struct {
	Name      string
	Args      OpensearchPackageArgs
	state     *opensearchPackageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [OpensearchPackage].
func (op *OpensearchPackage) Type() string {
	return "aws_opensearch_package"
}

// LocalName returns the local name for [OpensearchPackage].
func (op *OpensearchPackage) LocalName() string {
	return op.Name
}

// Configuration returns the configuration (args) for [OpensearchPackage].
func (op *OpensearchPackage) Configuration() interface{} {
	return op.Args
}

// DependOn is used for other resources to depend on [OpensearchPackage].
func (op *OpensearchPackage) DependOn() terra.Reference {
	return terra.ReferenceResource(op)
}

// Dependencies returns the list of resources [OpensearchPackage] depends_on.
func (op *OpensearchPackage) Dependencies() terra.Dependencies {
	return op.DependsOn
}

// LifecycleManagement returns the lifecycle block for [OpensearchPackage].
func (op *OpensearchPackage) LifecycleManagement() *terra.Lifecycle {
	return op.Lifecycle
}

// Attributes returns the attributes for [OpensearchPackage].
func (op *OpensearchPackage) Attributes() opensearchPackageAttributes {
	return opensearchPackageAttributes{ref: terra.ReferenceResource(op)}
}

// ImportState imports the given attribute values into [OpensearchPackage]'s state.
func (op *OpensearchPackage) ImportState(av io.Reader) error {
	op.state = &opensearchPackageState{}
	if err := json.NewDecoder(av).Decode(op.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", op.Type(), op.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [OpensearchPackage] has state.
func (op *OpensearchPackage) State() (*opensearchPackageState, bool) {
	return op.state, op.state != nil
}

// StateMust returns the state for [OpensearchPackage]. Panics if the state is nil.
func (op *OpensearchPackage) StateMust() *opensearchPackageState {
	if op.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", op.Type(), op.LocalName()))
	}
	return op.state
}

// OpensearchPackageArgs contains the configurations for aws_opensearch_package.
type OpensearchPackageArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageDescription: string, optional
	PackageDescription terra.StringValue `hcl:"package_description,attr"`
	// PackageName: string, required
	PackageName terra.StringValue `hcl:"package_name,attr" validate:"required"`
	// PackageType: string, required
	PackageType terra.StringValue `hcl:"package_type,attr" validate:"required"`
	// PackageSource: required
	PackageSource *opensearchpackage.PackageSource `hcl:"package_source,block" validate:"required"`
}
type opensearchPackageAttributes struct {
	ref terra.Reference
}

// AvailablePackageVersion returns a reference to field available_package_version of aws_opensearch_package.
func (op opensearchPackageAttributes) AvailablePackageVersion() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("available_package_version"))
}

// Id returns a reference to field id of aws_opensearch_package.
func (op opensearchPackageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("id"))
}

// PackageDescription returns a reference to field package_description of aws_opensearch_package.
func (op opensearchPackageAttributes) PackageDescription() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("package_description"))
}

// PackageId returns a reference to field package_id of aws_opensearch_package.
func (op opensearchPackageAttributes) PackageId() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("package_id"))
}

// PackageName returns a reference to field package_name of aws_opensearch_package.
func (op opensearchPackageAttributes) PackageName() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("package_name"))
}

// PackageType returns a reference to field package_type of aws_opensearch_package.
func (op opensearchPackageAttributes) PackageType() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("package_type"))
}

func (op opensearchPackageAttributes) PackageSource() terra.ListValue[opensearchpackage.PackageSourceAttributes] {
	return terra.ReferenceAsList[opensearchpackage.PackageSourceAttributes](op.ref.Append("package_source"))
}

type opensearchPackageState struct {
	AvailablePackageVersion string                                 `json:"available_package_version"`
	Id                      string                                 `json:"id"`
	PackageDescription      string                                 `json:"package_description"`
	PackageId               string                                 `json:"package_id"`
	PackageName             string                                 `json:"package_name"`
	PackageType             string                                 `json:"package_type"`
	PackageSource           []opensearchpackage.PackageSourceState `json:"package_source"`
}
