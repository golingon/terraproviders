// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksighttemplate "github.com/golingon/terraproviders/aws/5.20.0/quicksighttemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightTemplate creates a new instance of [QuicksightTemplate].
func NewQuicksightTemplate(name string, args QuicksightTemplateArgs) *QuicksightTemplate {
	return &QuicksightTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightTemplate)(nil)

// QuicksightTemplate represents the Terraform resource aws_quicksight_template.
type QuicksightTemplate struct {
	Name      string
	Args      QuicksightTemplateArgs
	state     *quicksightTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightTemplate].
func (qt *QuicksightTemplate) Type() string {
	return "aws_quicksight_template"
}

// LocalName returns the local name for [QuicksightTemplate].
func (qt *QuicksightTemplate) LocalName() string {
	return qt.Name
}

// Configuration returns the configuration (args) for [QuicksightTemplate].
func (qt *QuicksightTemplate) Configuration() interface{} {
	return qt.Args
}

// DependOn is used for other resources to depend on [QuicksightTemplate].
func (qt *QuicksightTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(qt)
}

// Dependencies returns the list of resources [QuicksightTemplate] depends_on.
func (qt *QuicksightTemplate) Dependencies() terra.Dependencies {
	return qt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightTemplate].
func (qt *QuicksightTemplate) LifecycleManagement() *terra.Lifecycle {
	return qt.Lifecycle
}

// Attributes returns the attributes for [QuicksightTemplate].
func (qt *QuicksightTemplate) Attributes() quicksightTemplateAttributes {
	return quicksightTemplateAttributes{ref: terra.ReferenceResource(qt)}
}

// ImportState imports the given attribute values into [QuicksightTemplate]'s state.
func (qt *QuicksightTemplate) ImportState(av io.Reader) error {
	qt.state = &quicksightTemplateState{}
	if err := json.NewDecoder(av).Decode(qt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qt.Type(), qt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightTemplate] has state.
func (qt *QuicksightTemplate) State() (*quicksightTemplateState, bool) {
	return qt.state, qt.state != nil
}

// StateMust returns the state for [QuicksightTemplate]. Panics if the state is nil.
func (qt *QuicksightTemplate) StateMust() *quicksightTemplateState {
	if qt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qt.Type(), qt.LocalName()))
	}
	return qt.state
}

// QuicksightTemplateArgs contains the configurations for aws_quicksight_template.
type QuicksightTemplateArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateId: string, required
	TemplateId terra.StringValue `hcl:"template_id,attr" validate:"required"`
	// VersionDescription: string, required
	VersionDescription terra.StringValue `hcl:"version_description,attr" validate:"required"`
	// Definition: optional
	Definition *quicksighttemplate.Definition `hcl:"definition,block"`
	// Permissions: min=0,max=64
	Permissions []quicksighttemplate.Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// SourceEntity: optional
	SourceEntity *quicksighttemplate.SourceEntity `hcl:"source_entity,block"`
	// Timeouts: optional
	Timeouts *quicksighttemplate.Timeouts `hcl:"timeouts,block"`
}
type quicksightTemplateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_template.
func (qt quicksightTemplateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_template.
func (qt quicksightTemplateAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_template.
func (qt quicksightTemplateAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("created_time"))
}

// Id returns a reference to field id of aws_quicksight_template.
func (qt quicksightTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_template.
func (qt quicksightTemplateAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_template.
func (qt quicksightTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("name"))
}

// SourceEntityArn returns a reference to field source_entity_arn of aws_quicksight_template.
func (qt quicksightTemplateAttributes) SourceEntityArn() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("source_entity_arn"))
}

// Status returns a reference to field status of aws_quicksight_template.
func (qt quicksightTemplateAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_template.
func (qt quicksightTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_template.
func (qt quicksightTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qt.ref.Append("tags_all"))
}

// TemplateId returns a reference to field template_id of aws_quicksight_template.
func (qt quicksightTemplateAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("template_id"))
}

// VersionDescription returns a reference to field version_description of aws_quicksight_template.
func (qt quicksightTemplateAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("version_description"))
}

// VersionNumber returns a reference to field version_number of aws_quicksight_template.
func (qt quicksightTemplateAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(qt.ref.Append("version_number"))
}

func (qt quicksightTemplateAttributes) Definition() terra.ListValue[quicksighttemplate.DefinitionAttributes] {
	return terra.ReferenceAsList[quicksighttemplate.DefinitionAttributes](qt.ref.Append("definition"))
}

func (qt quicksightTemplateAttributes) Permissions() terra.SetValue[quicksighttemplate.PermissionsAttributes] {
	return terra.ReferenceAsSet[quicksighttemplate.PermissionsAttributes](qt.ref.Append("permissions"))
}

func (qt quicksightTemplateAttributes) SourceEntity() terra.ListValue[quicksighttemplate.SourceEntityAttributes] {
	return terra.ReferenceAsList[quicksighttemplate.SourceEntityAttributes](qt.ref.Append("source_entity"))
}

func (qt quicksightTemplateAttributes) Timeouts() quicksighttemplate.TimeoutsAttributes {
	return terra.ReferenceAsSingle[quicksighttemplate.TimeoutsAttributes](qt.ref.Append("timeouts"))
}

type quicksightTemplateState struct {
	Arn                string                                 `json:"arn"`
	AwsAccountId       string                                 `json:"aws_account_id"`
	CreatedTime        string                                 `json:"created_time"`
	Id                 string                                 `json:"id"`
	LastUpdatedTime    string                                 `json:"last_updated_time"`
	Name               string                                 `json:"name"`
	SourceEntityArn    string                                 `json:"source_entity_arn"`
	Status             string                                 `json:"status"`
	Tags               map[string]string                      `json:"tags"`
	TagsAll            map[string]string                      `json:"tags_all"`
	TemplateId         string                                 `json:"template_id"`
	VersionDescription string                                 `json:"version_description"`
	VersionNumber      float64                                `json:"version_number"`
	Definition         []quicksighttemplate.DefinitionState   `json:"definition"`
	Permissions        []quicksighttemplate.PermissionsState  `json:"permissions"`
	SourceEntity       []quicksighttemplate.SourceEntityState `json:"source_entity"`
	Timeouts           *quicksighttemplate.TimeoutsState      `json:"timeouts"`
}
