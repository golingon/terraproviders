// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRedshiftHsmClientCertificate creates a new instance of [RedshiftHsmClientCertificate].
func NewRedshiftHsmClientCertificate(name string, args RedshiftHsmClientCertificateArgs) *RedshiftHsmClientCertificate {
	return &RedshiftHsmClientCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftHsmClientCertificate)(nil)

// RedshiftHsmClientCertificate represents the Terraform resource aws_redshift_hsm_client_certificate.
type RedshiftHsmClientCertificate struct {
	Name      string
	Args      RedshiftHsmClientCertificateArgs
	state     *redshiftHsmClientCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) Type() string {
	return "aws_redshift_hsm_client_certificate"
}

// LocalName returns the local name for [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) LocalName() string {
	return rhcc.Name
}

// Configuration returns the configuration (args) for [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) Configuration() interface{} {
	return rhcc.Args
}

// DependOn is used for other resources to depend on [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(rhcc)
}

// Dependencies returns the list of resources [RedshiftHsmClientCertificate] depends_on.
func (rhcc *RedshiftHsmClientCertificate) Dependencies() terra.Dependencies {
	return rhcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) LifecycleManagement() *terra.Lifecycle {
	return rhcc.Lifecycle
}

// Attributes returns the attributes for [RedshiftHsmClientCertificate].
func (rhcc *RedshiftHsmClientCertificate) Attributes() redshiftHsmClientCertificateAttributes {
	return redshiftHsmClientCertificateAttributes{ref: terra.ReferenceResource(rhcc)}
}

// ImportState imports the given attribute values into [RedshiftHsmClientCertificate]'s state.
func (rhcc *RedshiftHsmClientCertificate) ImportState(av io.Reader) error {
	rhcc.state = &redshiftHsmClientCertificateState{}
	if err := json.NewDecoder(av).Decode(rhcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rhcc.Type(), rhcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RedshiftHsmClientCertificate] has state.
func (rhcc *RedshiftHsmClientCertificate) State() (*redshiftHsmClientCertificateState, bool) {
	return rhcc.state, rhcc.state != nil
}

// StateMust returns the state for [RedshiftHsmClientCertificate]. Panics if the state is nil.
func (rhcc *RedshiftHsmClientCertificate) StateMust() *redshiftHsmClientCertificateState {
	if rhcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rhcc.Type(), rhcc.LocalName()))
	}
	return rhcc.state
}

// RedshiftHsmClientCertificateArgs contains the configurations for aws_redshift_hsm_client_certificate.
type RedshiftHsmClientCertificateArgs struct {
	// HsmClientCertificateIdentifier: string, required
	HsmClientCertificateIdentifier terra.StringValue `hcl:"hsm_client_certificate_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type redshiftHsmClientCertificateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rhcc.ref.Append("arn"))
}

// HsmClientCertificateIdentifier returns a reference to field hsm_client_certificate_identifier of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) HsmClientCertificateIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rhcc.ref.Append("hsm_client_certificate_identifier"))
}

// HsmClientCertificatePublicKey returns a reference to field hsm_client_certificate_public_key of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) HsmClientCertificatePublicKey() terra.StringValue {
	return terra.ReferenceAsString(rhcc.ref.Append("hsm_client_certificate_public_key"))
}

// Id returns a reference to field id of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rhcc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhcc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_redshift_hsm_client_certificate.
func (rhcc redshiftHsmClientCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rhcc.ref.Append("tags_all"))
}

type redshiftHsmClientCertificateState struct {
	Arn                            string            `json:"arn"`
	HsmClientCertificateIdentifier string            `json:"hsm_client_certificate_identifier"`
	HsmClientCertificatePublicKey  string            `json:"hsm_client_certificate_public_key"`
	Id                             string            `json:"id"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
}
