// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codecatalystsourcerepository "github.com/golingon/terraproviders/aws/5.20.0/codecatalystsourcerepository"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCodecatalystSourceRepository creates a new instance of [CodecatalystSourceRepository].
func NewCodecatalystSourceRepository(name string, args CodecatalystSourceRepositoryArgs) *CodecatalystSourceRepository {
	return &CodecatalystSourceRepository{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodecatalystSourceRepository)(nil)

// CodecatalystSourceRepository represents the Terraform resource aws_codecatalyst_source_repository.
type CodecatalystSourceRepository struct {
	Name      string
	Args      CodecatalystSourceRepositoryArgs
	state     *codecatalystSourceRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) Type() string {
	return "aws_codecatalyst_source_repository"
}

// LocalName returns the local name for [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) LocalName() string {
	return csr.Name
}

// Configuration returns the configuration (args) for [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) Configuration() interface{} {
	return csr.Args
}

// DependOn is used for other resources to depend on [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) DependOn() terra.Reference {
	return terra.ReferenceResource(csr)
}

// Dependencies returns the list of resources [CodecatalystSourceRepository] depends_on.
func (csr *CodecatalystSourceRepository) Dependencies() terra.Dependencies {
	return csr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) LifecycleManagement() *terra.Lifecycle {
	return csr.Lifecycle
}

// Attributes returns the attributes for [CodecatalystSourceRepository].
func (csr *CodecatalystSourceRepository) Attributes() codecatalystSourceRepositoryAttributes {
	return codecatalystSourceRepositoryAttributes{ref: terra.ReferenceResource(csr)}
}

// ImportState imports the given attribute values into [CodecatalystSourceRepository]'s state.
func (csr *CodecatalystSourceRepository) ImportState(av io.Reader) error {
	csr.state = &codecatalystSourceRepositoryState{}
	if err := json.NewDecoder(av).Decode(csr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csr.Type(), csr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CodecatalystSourceRepository] has state.
func (csr *CodecatalystSourceRepository) State() (*codecatalystSourceRepositoryState, bool) {
	return csr.state, csr.state != nil
}

// StateMust returns the state for [CodecatalystSourceRepository]. Panics if the state is nil.
func (csr *CodecatalystSourceRepository) StateMust() *codecatalystSourceRepositoryState {
	if csr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csr.Type(), csr.LocalName()))
	}
	return csr.state
}

// CodecatalystSourceRepositoryArgs contains the configurations for aws_codecatalyst_source_repository.
type CodecatalystSourceRepositoryArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *codecatalystsourcerepository.Timeouts `hcl:"timeouts,block"`
}
type codecatalystSourceRepositoryAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_codecatalyst_source_repository.
func (csr codecatalystSourceRepositoryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(csr.ref.Append("description"))
}

// Id returns a reference to field id of aws_codecatalyst_source_repository.
func (csr codecatalystSourceRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(csr.ref.Append("id"))
}

// Name returns a reference to field name of aws_codecatalyst_source_repository.
func (csr codecatalystSourceRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(csr.ref.Append("name"))
}

// ProjectName returns a reference to field project_name of aws_codecatalyst_source_repository.
func (csr codecatalystSourceRepositoryAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(csr.ref.Append("project_name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_source_repository.
func (csr codecatalystSourceRepositoryAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(csr.ref.Append("space_name"))
}

func (csr codecatalystSourceRepositoryAttributes) Timeouts() codecatalystsourcerepository.TimeoutsAttributes {
	return terra.ReferenceAsSingle[codecatalystsourcerepository.TimeoutsAttributes](csr.ref.Append("timeouts"))
}

type codecatalystSourceRepositoryState struct {
	Description string                                      `json:"description"`
	Id          string                                      `json:"id"`
	Name        string                                      `json:"name"`
	ProjectName string                                      `json:"project_name"`
	SpaceName   string                                      `json:"space_name"`
	Timeouts    *codecatalystsourcerepository.TimeoutsState `json:"timeouts"`
}
