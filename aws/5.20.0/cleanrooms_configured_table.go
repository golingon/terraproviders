// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cleanroomsconfiguredtable "github.com/golingon/terraproviders/aws/5.20.0/cleanroomsconfiguredtable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCleanroomsConfiguredTable creates a new instance of [CleanroomsConfiguredTable].
func NewCleanroomsConfiguredTable(name string, args CleanroomsConfiguredTableArgs) *CleanroomsConfiguredTable {
	return &CleanroomsConfiguredTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CleanroomsConfiguredTable)(nil)

// CleanroomsConfiguredTable represents the Terraform resource aws_cleanrooms_configured_table.
type CleanroomsConfiguredTable struct {
	Name      string
	Args      CleanroomsConfiguredTableArgs
	state     *cleanroomsConfiguredTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) Type() string {
	return "aws_cleanrooms_configured_table"
}

// LocalName returns the local name for [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) LocalName() string {
	return cct.Name
}

// Configuration returns the configuration (args) for [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) Configuration() interface{} {
	return cct.Args
}

// DependOn is used for other resources to depend on [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) DependOn() terra.Reference {
	return terra.ReferenceResource(cct)
}

// Dependencies returns the list of resources [CleanroomsConfiguredTable] depends_on.
func (cct *CleanroomsConfiguredTable) Dependencies() terra.Dependencies {
	return cct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) LifecycleManagement() *terra.Lifecycle {
	return cct.Lifecycle
}

// Attributes returns the attributes for [CleanroomsConfiguredTable].
func (cct *CleanroomsConfiguredTable) Attributes() cleanroomsConfiguredTableAttributes {
	return cleanroomsConfiguredTableAttributes{ref: terra.ReferenceResource(cct)}
}

// ImportState imports the given attribute values into [CleanroomsConfiguredTable]'s state.
func (cct *CleanroomsConfiguredTable) ImportState(av io.Reader) error {
	cct.state = &cleanroomsConfiguredTableState{}
	if err := json.NewDecoder(av).Decode(cct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cct.Type(), cct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CleanroomsConfiguredTable] has state.
func (cct *CleanroomsConfiguredTable) State() (*cleanroomsConfiguredTableState, bool) {
	return cct.state, cct.state != nil
}

// StateMust returns the state for [CleanroomsConfiguredTable]. Panics if the state is nil.
func (cct *CleanroomsConfiguredTable) StateMust() *cleanroomsConfiguredTableState {
	if cct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cct.Type(), cct.LocalName()))
	}
	return cct.state
}

// CleanroomsConfiguredTableArgs contains the configurations for aws_cleanrooms_configured_table.
type CleanroomsConfiguredTableArgs struct {
	// AllowedColumns: set of string, required
	AllowedColumns terra.SetValue[terra.StringValue] `hcl:"allowed_columns,attr" validate:"required"`
	// AnalysisMethod: string, required
	AnalysisMethod terra.StringValue `hcl:"analysis_method,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TableReference: required
	TableReference *cleanroomsconfiguredtable.TableReference `hcl:"table_reference,block" validate:"required"`
	// Timeouts: optional
	Timeouts *cleanroomsconfiguredtable.Timeouts `hcl:"timeouts,block"`
}
type cleanroomsConfiguredTableAttributes struct {
	ref terra.Reference
}

// AllowedColumns returns a reference to field allowed_columns of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) AllowedColumns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cct.ref.Append("allowed_columns"))
}

// AnalysisMethod returns a reference to field analysis_method of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) AnalysisMethod() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("analysis_method"))
}

// Arn returns a reference to field arn of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("create_time"))
}

// Description returns a reference to field description of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("description"))
}

// Id returns a reference to field id of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("id"))
}

// Name returns a reference to field name of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cct.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cct.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_cleanrooms_configured_table.
func (cct cleanroomsConfiguredTableAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(cct.ref.Append("update_time"))
}

func (cct cleanroomsConfiguredTableAttributes) TableReference() terra.ListValue[cleanroomsconfiguredtable.TableReferenceAttributes] {
	return terra.ReferenceAsList[cleanroomsconfiguredtable.TableReferenceAttributes](cct.ref.Append("table_reference"))
}

func (cct cleanroomsConfiguredTableAttributes) Timeouts() cleanroomsconfiguredtable.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cleanroomsconfiguredtable.TimeoutsAttributes](cct.ref.Append("timeouts"))
}

type cleanroomsConfiguredTableState struct {
	AllowedColumns []string                                        `json:"allowed_columns"`
	AnalysisMethod string                                          `json:"analysis_method"`
	Arn            string                                          `json:"arn"`
	CreateTime     string                                          `json:"create_time"`
	Description    string                                          `json:"description"`
	Id             string                                          `json:"id"`
	Name           string                                          `json:"name"`
	Tags           map[string]string                               `json:"tags"`
	TagsAll        map[string]string                               `json:"tags_all"`
	UpdateTime     string                                          `json:"update_time"`
	TableReference []cleanroomsconfiguredtable.TableReferenceState `json:"table_reference"`
	Timeouts       *cleanroomsconfiguredtable.TimeoutsState        `json:"timeouts"`
}
