// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataservicecatalogconstraint "github.com/golingon/terraproviders/aws/5.20.0/dataservicecatalogconstraint"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataServicecatalogConstraint creates a new instance of [DataServicecatalogConstraint].
func NewDataServicecatalogConstraint(name string, args DataServicecatalogConstraintArgs) *DataServicecatalogConstraint {
	return &DataServicecatalogConstraint{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataServicecatalogConstraint)(nil)

// DataServicecatalogConstraint represents the Terraform data resource aws_servicecatalog_constraint.
type DataServicecatalogConstraint struct {
	Name string
	Args DataServicecatalogConstraintArgs
}

// DataSource returns the Terraform object type for [DataServicecatalogConstraint].
func (sc *DataServicecatalogConstraint) DataSource() string {
	return "aws_servicecatalog_constraint"
}

// LocalName returns the local name for [DataServicecatalogConstraint].
func (sc *DataServicecatalogConstraint) LocalName() string {
	return sc.Name
}

// Configuration returns the configuration (args) for [DataServicecatalogConstraint].
func (sc *DataServicecatalogConstraint) Configuration() interface{} {
	return sc.Args
}

// Attributes returns the attributes for [DataServicecatalogConstraint].
func (sc *DataServicecatalogConstraint) Attributes() dataServicecatalogConstraintAttributes {
	return dataServicecatalogConstraintAttributes{ref: terra.ReferenceDataResource(sc)}
}

// DataServicecatalogConstraintArgs contains the configurations for aws_servicecatalog_constraint.
type DataServicecatalogConstraintArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dataservicecatalogconstraint.Timeouts `hcl:"timeouts,block"`
}
type dataServicecatalogConstraintAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("accept_language"))
}

// Description returns a reference to field description of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("id"))
}

// Owner returns a reference to field owner of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("owner"))
}

// Parameters returns a reference to field parameters of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("parameters"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("portfolio_id"))
}

// ProductId returns a reference to field product_id of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) ProductId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("product_id"))
}

// Status returns a reference to field status of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("status"))
}

// Type returns a reference to field type of aws_servicecatalog_constraint.
func (sc dataServicecatalogConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("type"))
}

func (sc dataServicecatalogConstraintAttributes) Timeouts() dataservicecatalogconstraint.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dataservicecatalogconstraint.TimeoutsAttributes](sc.ref.Append("timeouts"))
}
