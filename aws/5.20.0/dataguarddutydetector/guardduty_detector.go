// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataguarddutydetector

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Features struct {
	// AdditionalConfiguration: min=0
	AdditionalConfiguration []AdditionalConfiguration `hcl:"additional_configuration,block" validate:"min=0"`
}

type AdditionalConfiguration struct{}

type FeaturesAttributes struct {
	ref terra.Reference
}

func (f FeaturesAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FeaturesAttributes) InternalWithRef(ref terra.Reference) FeaturesAttributes {
	return FeaturesAttributes{ref: ref}
}

func (f FeaturesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FeaturesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f FeaturesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("status"))
}

func (f FeaturesAttributes) AdditionalConfiguration() terra.ListValue[AdditionalConfigurationAttributes] {
	return terra.ReferenceAsList[AdditionalConfigurationAttributes](f.ref.Append("additional_configuration"))
}

type AdditionalConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AdditionalConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AdditionalConfigurationAttributes) InternalWithRef(ref terra.Reference) AdditionalConfigurationAttributes {
	return AdditionalConfigurationAttributes{ref: ref}
}

func (ac AdditionalConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AdditionalConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

func (ac AdditionalConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("status"))
}

type FeaturesState struct {
	Name                    string                         `json:"name"`
	Status                  string                         `json:"status"`
	AdditionalConfiguration []AdditionalConfigurationState `json:"additional_configuration"`
}

type AdditionalConfigurationState struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}
