// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMskClusterPolicy creates a new instance of [MskClusterPolicy].
func NewMskClusterPolicy(name string, args MskClusterPolicyArgs) *MskClusterPolicy {
	return &MskClusterPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskClusterPolicy)(nil)

// MskClusterPolicy represents the Terraform resource aws_msk_cluster_policy.
type MskClusterPolicy struct {
	Name      string
	Args      MskClusterPolicyArgs
	state     *mskClusterPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [MskClusterPolicy].
func (mcp *MskClusterPolicy) Type() string {
	return "aws_msk_cluster_policy"
}

// LocalName returns the local name for [MskClusterPolicy].
func (mcp *MskClusterPolicy) LocalName() string {
	return mcp.Name
}

// Configuration returns the configuration (args) for [MskClusterPolicy].
func (mcp *MskClusterPolicy) Configuration() interface{} {
	return mcp.Args
}

// DependOn is used for other resources to depend on [MskClusterPolicy].
func (mcp *MskClusterPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(mcp)
}

// Dependencies returns the list of resources [MskClusterPolicy] depends_on.
func (mcp *MskClusterPolicy) Dependencies() terra.Dependencies {
	return mcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [MskClusterPolicy].
func (mcp *MskClusterPolicy) LifecycleManagement() *terra.Lifecycle {
	return mcp.Lifecycle
}

// Attributes returns the attributes for [MskClusterPolicy].
func (mcp *MskClusterPolicy) Attributes() mskClusterPolicyAttributes {
	return mskClusterPolicyAttributes{ref: terra.ReferenceResource(mcp)}
}

// ImportState imports the given attribute values into [MskClusterPolicy]'s state.
func (mcp *MskClusterPolicy) ImportState(av io.Reader) error {
	mcp.state = &mskClusterPolicyState{}
	if err := json.NewDecoder(av).Decode(mcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mcp.Type(), mcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [MskClusterPolicy] has state.
func (mcp *MskClusterPolicy) State() (*mskClusterPolicyState, bool) {
	return mcp.state, mcp.state != nil
}

// StateMust returns the state for [MskClusterPolicy]. Panics if the state is nil.
func (mcp *MskClusterPolicy) StateMust() *mskClusterPolicyState {
	if mcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mcp.Type(), mcp.LocalName()))
	}
	return mcp.state
}

// MskClusterPolicyArgs contains the configurations for aws_msk_cluster_policy.
type MskClusterPolicyArgs struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}
type mskClusterPolicyAttributes struct {
	ref terra.Reference
}

// ClusterArn returns a reference to field cluster_arn of aws_msk_cluster_policy.
func (mcp mskClusterPolicyAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(mcp.ref.Append("cluster_arn"))
}

// CurrentVersion returns a reference to field current_version of aws_msk_cluster_policy.
func (mcp mskClusterPolicyAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(mcp.ref.Append("current_version"))
}

// Id returns a reference to field id of aws_msk_cluster_policy.
func (mcp mskClusterPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mcp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_msk_cluster_policy.
func (mcp mskClusterPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(mcp.ref.Append("policy"))
}

type mskClusterPolicyState struct {
	ClusterArn     string `json:"cluster_arn"`
	CurrentVersion string `json:"current_version"`
	Id             string `json:"id"`
	Policy         string `json:"policy"`
}
