// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package databudgetsbudget

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoAdjustData struct {
	// HistoricalOptions: min=0
	HistoricalOptions []HistoricalOptions `hcl:"historical_options,block" validate:"min=0"`
}

type HistoricalOptions struct{}

type BudgetLimit struct{}

type CalculatedSpend struct {
	// ActualSpend: min=0
	ActualSpend []ActualSpend `hcl:"actual_spend,block" validate:"min=0"`
}

type ActualSpend struct{}

type CostFilter struct{}

type CostTypes struct{}

type Notification struct{}

type PlannedLimit struct{}

type AutoAdjustDataAttributes struct {
	ref terra.Reference
}

func (aad AutoAdjustDataAttributes) InternalRef() (terra.Reference, error) {
	return aad.ref, nil
}

func (aad AutoAdjustDataAttributes) InternalWithRef(ref terra.Reference) AutoAdjustDataAttributes {
	return AutoAdjustDataAttributes{ref: ref}
}

func (aad AutoAdjustDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aad.ref.InternalTokens()
}

func (aad AutoAdjustDataAttributes) AutoAdjustType() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("auto_adjust_type"))
}

func (aad AutoAdjustDataAttributes) LastAutoAdjustTime() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("last_auto_adjust_time"))
}

func (aad AutoAdjustDataAttributes) HistoricalOptions() terra.ListValue[HistoricalOptionsAttributes] {
	return terra.ReferenceAsList[HistoricalOptionsAttributes](aad.ref.Append("historical_options"))
}

type HistoricalOptionsAttributes struct {
	ref terra.Reference
}

func (ho HistoricalOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho HistoricalOptionsAttributes) InternalWithRef(ref terra.Reference) HistoricalOptionsAttributes {
	return HistoricalOptionsAttributes{ref: ref}
}

func (ho HistoricalOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho HistoricalOptionsAttributes) BudgetAdjustmentPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("budget_adjustment_period"))
}

func (ho HistoricalOptionsAttributes) LookbackAvailablePeriods() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("lookback_available_periods"))
}

type BudgetLimitAttributes struct {
	ref terra.Reference
}

func (bl BudgetLimitAttributes) InternalRef() (terra.Reference, error) {
	return bl.ref, nil
}

func (bl BudgetLimitAttributes) InternalWithRef(ref terra.Reference) BudgetLimitAttributes {
	return BudgetLimitAttributes{ref: ref}
}

func (bl BudgetLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bl.ref.InternalTokens()
}

func (bl BudgetLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(bl.ref.Append("amount"))
}

func (bl BudgetLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(bl.ref.Append("unit"))
}

type CalculatedSpendAttributes struct {
	ref terra.Reference
}

func (cs CalculatedSpendAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs CalculatedSpendAttributes) InternalWithRef(ref terra.Reference) CalculatedSpendAttributes {
	return CalculatedSpendAttributes{ref: ref}
}

func (cs CalculatedSpendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs CalculatedSpendAttributes) ActualSpend() terra.ListValue[ActualSpendAttributes] {
	return terra.ReferenceAsList[ActualSpendAttributes](cs.ref.Append("actual_spend"))
}

type ActualSpendAttributes struct {
	ref terra.Reference
}

func (as ActualSpendAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ActualSpendAttributes) InternalWithRef(ref terra.Reference) ActualSpendAttributes {
	return ActualSpendAttributes{ref: ref}
}

func (as ActualSpendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ActualSpendAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("amount"))
}

func (as ActualSpendAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("unit"))
}

type CostFilterAttributes struct {
	ref terra.Reference
}

func (cf CostFilterAttributes) InternalRef() (terra.Reference, error) {
	return cf.ref, nil
}

func (cf CostFilterAttributes) InternalWithRef(ref terra.Reference) CostFilterAttributes {
	return CostFilterAttributes{ref: ref}
}

func (cf CostFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cf.ref.InternalTokens()
}

func (cf CostFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cf.ref.Append("name"))
}

func (cf CostFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cf.ref.Append("values"))
}

type CostTypesAttributes struct {
	ref terra.Reference
}

func (ct CostTypesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct CostTypesAttributes) InternalWithRef(ref terra.Reference) CostTypesAttributes {
	return CostTypesAttributes{ref: ref}
}

func (ct CostTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct CostTypesAttributes) IncludeCredit() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_credit"))
}

func (ct CostTypesAttributes) IncludeDiscount() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_discount"))
}

func (ct CostTypesAttributes) IncludeOtherSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_other_subscription"))
}

func (ct CostTypesAttributes) IncludeRecurring() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_recurring"))
}

func (ct CostTypesAttributes) IncludeRefund() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_refund"))
}

func (ct CostTypesAttributes) IncludeSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_subscription"))
}

func (ct CostTypesAttributes) IncludeSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_support"))
}

func (ct CostTypesAttributes) IncludeTax() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_tax"))
}

func (ct CostTypesAttributes) IncludeUpfront() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_upfront"))
}

func (ct CostTypesAttributes) UseAmortized() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_amortized"))
}

func (ct CostTypesAttributes) UseBlended() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_blended"))
}

type NotificationAttributes struct {
	ref terra.Reference
}

func (n NotificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NotificationAttributes) InternalWithRef(ref terra.Reference) NotificationAttributes {
	return NotificationAttributes{ref: ref}
}

func (n NotificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NotificationAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("comparison_operator"))
}

func (n NotificationAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notification_type"))
}

func (n NotificationAttributes) SubscriberEmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_email_addresses"))
}

func (n NotificationAttributes) SubscriberSnsTopicArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_sns_topic_arns"))
}

func (n NotificationAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(n.ref.Append("threshold"))
}

func (n NotificationAttributes) ThresholdType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("threshold_type"))
}

type PlannedLimitAttributes struct {
	ref terra.Reference
}

func (pl PlannedLimitAttributes) InternalRef() (terra.Reference, error) {
	return pl.ref, nil
}

func (pl PlannedLimitAttributes) InternalWithRef(ref terra.Reference) PlannedLimitAttributes {
	return PlannedLimitAttributes{ref: ref}
}

func (pl PlannedLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pl.ref.InternalTokens()
}

func (pl PlannedLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("amount"))
}

func (pl PlannedLimitAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("start_time"))
}

func (pl PlannedLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("unit"))
}

type AutoAdjustDataState struct {
	AutoAdjustType     string                   `json:"auto_adjust_type"`
	LastAutoAdjustTime string                   `json:"last_auto_adjust_time"`
	HistoricalOptions  []HistoricalOptionsState `json:"historical_options"`
}

type HistoricalOptionsState struct {
	BudgetAdjustmentPeriod   float64 `json:"budget_adjustment_period"`
	LookbackAvailablePeriods float64 `json:"lookback_available_periods"`
}

type BudgetLimitState struct {
	Amount string `json:"amount"`
	Unit   string `json:"unit"`
}

type CalculatedSpendState struct {
	ActualSpend []ActualSpendState `json:"actual_spend"`
}

type ActualSpendState struct {
	Amount string `json:"amount"`
	Unit   string `json:"unit"`
}

type CostFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type CostTypesState struct {
	IncludeCredit            bool `json:"include_credit"`
	IncludeDiscount          bool `json:"include_discount"`
	IncludeOtherSubscription bool `json:"include_other_subscription"`
	IncludeRecurring         bool `json:"include_recurring"`
	IncludeRefund            bool `json:"include_refund"`
	IncludeSubscription      bool `json:"include_subscription"`
	IncludeSupport           bool `json:"include_support"`
	IncludeTax               bool `json:"include_tax"`
	IncludeUpfront           bool `json:"include_upfront"`
	UseAmortized             bool `json:"use_amortized"`
	UseBlended               bool `json:"use_blended"`
}

type NotificationState struct {
	ComparisonOperator       string   `json:"comparison_operator"`
	NotificationType         string   `json:"notification_type"`
	SubscriberEmailAddresses []string `json:"subscriber_email_addresses"`
	SubscriberSnsTopicArns   []string `json:"subscriber_sns_topic_arns"`
	Threshold                float64  `json:"threshold"`
	ThresholdType            string   `json:"threshold_type"`
}

type PlannedLimitState struct {
	Amount    string `json:"amount"`
	StartTime string `json:"start_time"`
	Unit      string `json:"unit"`
}
