// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpclatticelistenerrule "github.com/golingon/terraproviders/aws/5.12.0/vpclatticelistenerrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpclatticeListenerRule creates a new instance of [VpclatticeListenerRule].
func NewVpclatticeListenerRule(name string, args VpclatticeListenerRuleArgs) *VpclatticeListenerRule {
	return &VpclatticeListenerRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpclatticeListenerRule)(nil)

// VpclatticeListenerRule represents the Terraform resource aws_vpclattice_listener_rule.
type VpclatticeListenerRule struct {
	Name      string
	Args      VpclatticeListenerRuleArgs
	state     *vpclatticeListenerRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) Type() string {
	return "aws_vpclattice_listener_rule"
}

// LocalName returns the local name for [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) LocalName() string {
	return vlr.Name
}

// Configuration returns the configuration (args) for [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) Configuration() interface{} {
	return vlr.Args
}

// DependOn is used for other resources to depend on [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) DependOn() terra.Reference {
	return terra.ReferenceResource(vlr)
}

// Dependencies returns the list of resources [VpclatticeListenerRule] depends_on.
func (vlr *VpclatticeListenerRule) Dependencies() terra.Dependencies {
	return vlr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) LifecycleManagement() *terra.Lifecycle {
	return vlr.Lifecycle
}

// Attributes returns the attributes for [VpclatticeListenerRule].
func (vlr *VpclatticeListenerRule) Attributes() vpclatticeListenerRuleAttributes {
	return vpclatticeListenerRuleAttributes{ref: terra.ReferenceResource(vlr)}
}

// ImportState imports the given attribute values into [VpclatticeListenerRule]'s state.
func (vlr *VpclatticeListenerRule) ImportState(av io.Reader) error {
	vlr.state = &vpclatticeListenerRuleState{}
	if err := json.NewDecoder(av).Decode(vlr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vlr.Type(), vlr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpclatticeListenerRule] has state.
func (vlr *VpclatticeListenerRule) State() (*vpclatticeListenerRuleState, bool) {
	return vlr.state, vlr.state != nil
}

// StateMust returns the state for [VpclatticeListenerRule]. Panics if the state is nil.
func (vlr *VpclatticeListenerRule) StateMust() *vpclatticeListenerRuleState {
	if vlr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vlr.Type(), vlr.LocalName()))
	}
	return vlr.state
}

// VpclatticeListenerRuleArgs contains the configurations for aws_vpclattice_listener_rule.
type VpclatticeListenerRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerIdentifier: string, required
	ListenerIdentifier terra.StringValue `hcl:"listener_identifier,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ServiceIdentifier: string, required
	ServiceIdentifier terra.StringValue `hcl:"service_identifier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: required
	Action *vpclatticelistenerrule.Action `hcl:"action,block" validate:"required"`
	// Match: required
	Match *vpclatticelistenerrule.Match `hcl:"match,block" validate:"required"`
	// Timeouts: optional
	Timeouts *vpclatticelistenerrule.Timeouts `hcl:"timeouts,block"`
}
type vpclatticeListenerRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("id"))
}

// ListenerIdentifier returns a reference to field listener_identifier of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) ListenerIdentifier() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("listener_identifier"))
}

// Name returns a reference to field name of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("name"))
}

// Priority returns a reference to field priority of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(vlr.ref.Append("priority"))
}

// RuleId returns a reference to field rule_id of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("rule_id"))
}

// ServiceIdentifier returns a reference to field service_identifier of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) ServiceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(vlr.ref.Append("service_identifier"))
}

// Tags returns a reference to field tags of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vlr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_listener_rule.
func (vlr vpclatticeListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vlr.ref.Append("tags_all"))
}

func (vlr vpclatticeListenerRuleAttributes) Action() terra.ListValue[vpclatticelistenerrule.ActionAttributes] {
	return terra.ReferenceAsList[vpclatticelistenerrule.ActionAttributes](vlr.ref.Append("action"))
}

func (vlr vpclatticeListenerRuleAttributes) Match() terra.ListValue[vpclatticelistenerrule.MatchAttributes] {
	return terra.ReferenceAsList[vpclatticelistenerrule.MatchAttributes](vlr.ref.Append("match"))
}

func (vlr vpclatticeListenerRuleAttributes) Timeouts() vpclatticelistenerrule.TimeoutsAttributes {
	return terra.ReferenceAsSingle[vpclatticelistenerrule.TimeoutsAttributes](vlr.ref.Append("timeouts"))
}

type vpclatticeListenerRuleState struct {
	Arn                string                                `json:"arn"`
	Id                 string                                `json:"id"`
	ListenerIdentifier string                                `json:"listener_identifier"`
	Name               string                                `json:"name"`
	Priority           float64                               `json:"priority"`
	RuleId             string                                `json:"rule_id"`
	ServiceIdentifier  string                                `json:"service_identifier"`
	Tags               map[string]string                     `json:"tags"`
	TagsAll            map[string]string                     `json:"tags_all"`
	Action             []vpclatticelistenerrule.ActionState  `json:"action"`
	Match              []vpclatticelistenerrule.MatchState   `json:"match"`
	Timeouts           *vpclatticelistenerrule.TimeoutsState `json:"timeouts"`
}
