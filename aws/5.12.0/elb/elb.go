// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package elb

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AccessLogs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
}

type HealthCheck struct {
	// HealthyThreshold: number, required
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// Timeout: number, required
	Timeout terra.NumberValue `hcl:"timeout,attr" validate:"required"`
	// UnhealthyThreshold: number, required
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr" validate:"required"`
}

type Listener struct {
	// InstancePort: number, required
	InstancePort terra.NumberValue `hcl:"instance_port,attr" validate:"required"`
	// InstanceProtocol: string, required
	InstanceProtocol terra.StringValue `hcl:"instance_protocol,attr" validate:"required"`
	// LbPort: number, required
	LbPort terra.NumberValue `hcl:"lb_port,attr" validate:"required"`
	// LbProtocol: string, required
	LbProtocol terra.StringValue `hcl:"lb_protocol,attr" validate:"required"`
	// SslCertificateId: string, optional
	SslCertificateId terra.StringValue `hcl:"ssl_certificate_id,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AccessLogsAttributes struct {
	ref terra.Reference
}

func (al AccessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AccessLogsAttributes) InternalWithRef(ref terra.Reference) AccessLogsAttributes {
	return AccessLogsAttributes{ref: ref}
}

func (al AccessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AccessLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket"))
}

func (al AccessLogsAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket_prefix"))
}

func (al AccessLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enabled"))
}

func (al AccessLogsAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("interval"))
}

type HealthCheckAttributes struct {
	ref terra.Reference
}

func (hc HealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HealthCheckAttributes) InternalWithRef(ref terra.Reference) HealthCheckAttributes {
	return HealthCheckAttributes{ref: ref}
}

func (hc HealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc HealthCheckAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval"))
}

func (hc HealthCheckAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("target"))
}

func (hc HealthCheckAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout"))
}

func (hc HealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type ListenerAttributes struct {
	ref terra.Reference
}

func (l ListenerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ListenerAttributes) InternalWithRef(ref terra.Reference) ListenerAttributes {
	return ListenerAttributes{ref: ref}
}

func (l ListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ListenerAttributes) InstancePort() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("instance_port"))
}

func (l ListenerAttributes) InstanceProtocol() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("instance_protocol"))
}

func (l ListenerAttributes) LbPort() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("lb_port"))
}

func (l ListenerAttributes) LbProtocol() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("lb_protocol"))
}

func (l ListenerAttributes) SslCertificateId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("ssl_certificate_id"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessLogsState struct {
	Bucket       string  `json:"bucket"`
	BucketPrefix string  `json:"bucket_prefix"`
	Enabled      bool    `json:"enabled"`
	Interval     float64 `json:"interval"`
}

type HealthCheckState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Target             string  `json:"target"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type ListenerState struct {
	InstancePort     float64 `json:"instance_port"`
	InstanceProtocol string  `json:"instance_protocol"`
	LbPort           float64 `json:"lb_port"`
	LbProtocol       string  `json:"lb_protocol"`
	SslCertificateId string  `json:"ssl_certificate_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
