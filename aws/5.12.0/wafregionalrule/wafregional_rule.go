// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package wafregionalrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Predicate struct {
	// DataId: string, required
	DataId terra.StringValue `hcl:"data_id,attr" validate:"required"`
	// Negated: bool, required
	Negated terra.BoolValue `hcl:"negated,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PredicateAttributes struct {
	ref terra.Reference
}

func (p PredicateAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PredicateAttributes) InternalWithRef(ref terra.Reference) PredicateAttributes {
	return PredicateAttributes{ref: ref}
}

func (p PredicateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PredicateAttributes) DataId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("data_id"))
}

func (p PredicateAttributes) Negated() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("negated"))
}

func (p PredicateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type PredicateState struct {
	DataId  string `json:"data_id"`
	Negated bool   `json:"negated"`
	Type    string `json:"type"`
}
