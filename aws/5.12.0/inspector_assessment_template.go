// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	inspectorassessmenttemplate "github.com/golingon/terraproviders/aws/5.12.0/inspectorassessmenttemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewInspectorAssessmentTemplate creates a new instance of [InspectorAssessmentTemplate].
func NewInspectorAssessmentTemplate(name string, args InspectorAssessmentTemplateArgs) *InspectorAssessmentTemplate {
	return &InspectorAssessmentTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*InspectorAssessmentTemplate)(nil)

// InspectorAssessmentTemplate represents the Terraform resource aws_inspector_assessment_template.
type InspectorAssessmentTemplate struct {
	Name      string
	Args      InspectorAssessmentTemplateArgs
	state     *inspectorAssessmentTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) Type() string {
	return "aws_inspector_assessment_template"
}

// LocalName returns the local name for [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) LocalName() string {
	return iat.Name
}

// Configuration returns the configuration (args) for [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) Configuration() interface{} {
	return iat.Args
}

// DependOn is used for other resources to depend on [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(iat)
}

// Dependencies returns the list of resources [InspectorAssessmentTemplate] depends_on.
func (iat *InspectorAssessmentTemplate) Dependencies() terra.Dependencies {
	return iat.DependsOn
}

// LifecycleManagement returns the lifecycle block for [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) LifecycleManagement() *terra.Lifecycle {
	return iat.Lifecycle
}

// Attributes returns the attributes for [InspectorAssessmentTemplate].
func (iat *InspectorAssessmentTemplate) Attributes() inspectorAssessmentTemplateAttributes {
	return inspectorAssessmentTemplateAttributes{ref: terra.ReferenceResource(iat)}
}

// ImportState imports the given attribute values into [InspectorAssessmentTemplate]'s state.
func (iat *InspectorAssessmentTemplate) ImportState(av io.Reader) error {
	iat.state = &inspectorAssessmentTemplateState{}
	if err := json.NewDecoder(av).Decode(iat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iat.Type(), iat.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [InspectorAssessmentTemplate] has state.
func (iat *InspectorAssessmentTemplate) State() (*inspectorAssessmentTemplateState, bool) {
	return iat.state, iat.state != nil
}

// StateMust returns the state for [InspectorAssessmentTemplate]. Panics if the state is nil.
func (iat *InspectorAssessmentTemplate) StateMust() *inspectorAssessmentTemplateState {
	if iat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iat.Type(), iat.LocalName()))
	}
	return iat.state
}

// InspectorAssessmentTemplateArgs contains the configurations for aws_inspector_assessment_template.
type InspectorAssessmentTemplateArgs struct {
	// Duration: number, required
	Duration terra.NumberValue `hcl:"duration,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RulesPackageArns: set of string, required
	RulesPackageArns terra.SetValue[terra.StringValue] `hcl:"rules_package_arns,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
	// EventSubscription: min=0
	EventSubscription []inspectorassessmenttemplate.EventSubscription `hcl:"event_subscription,block" validate:"min=0"`
}
type inspectorAssessmentTemplateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(iat.ref.Append("arn"))
}

// Duration returns a reference to field duration of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) Duration() terra.NumberValue {
	return terra.ReferenceAsNumber(iat.ref.Append("duration"))
}

// Id returns a reference to field id of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(iat.ref.Append("id"))
}

// Name returns a reference to field name of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(iat.ref.Append("name"))
}

// RulesPackageArns returns a reference to field rules_package_arns of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) RulesPackageArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](iat.ref.Append("rules_package_arns"))
}

// Tags returns a reference to field tags of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](iat.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](iat.ref.Append("tags_all"))
}

// TargetArn returns a reference to field target_arn of aws_inspector_assessment_template.
func (iat inspectorAssessmentTemplateAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(iat.ref.Append("target_arn"))
}

func (iat inspectorAssessmentTemplateAttributes) EventSubscription() terra.SetValue[inspectorassessmenttemplate.EventSubscriptionAttributes] {
	return terra.ReferenceAsSet[inspectorassessmenttemplate.EventSubscriptionAttributes](iat.ref.Append("event_subscription"))
}

type inspectorAssessmentTemplateState struct {
	Arn               string                                               `json:"arn"`
	Duration          float64                                              `json:"duration"`
	Id                string                                               `json:"id"`
	Name              string                                               `json:"name"`
	RulesPackageArns  []string                                             `json:"rules_package_arns"`
	Tags              map[string]string                                    `json:"tags"`
	TagsAll           map[string]string                                    `json:"tags_all"`
	TargetArn         string                                               `json:"target_arn"`
	EventSubscription []inspectorassessmenttemplate.EventSubscriptionState `json:"event_subscription"`
}
