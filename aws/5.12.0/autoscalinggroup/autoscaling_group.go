// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package autoscalinggroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type InitialLifecycleHook struct {
	// DefaultResult: string, optional
	DefaultResult terra.StringValue `hcl:"default_result,attr"`
	// HeartbeatTimeout: number, optional
	HeartbeatTimeout terra.NumberValue `hcl:"heartbeat_timeout,attr"`
	// LifecycleTransition: string, required
	LifecycleTransition terra.StringValue `hcl:"lifecycle_transition,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationMetadata: string, optional
	NotificationMetadata terra.StringValue `hcl:"notification_metadata,attr"`
	// NotificationTargetArn: string, optional
	NotificationTargetArn terra.StringValue `hcl:"notification_target_arn,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type InstanceRefresh struct {
	// Strategy: string, required
	Strategy terra.StringValue `hcl:"strategy,attr" validate:"required"`
	// Triggers: set of string, optional
	Triggers terra.SetValue[terra.StringValue] `hcl:"triggers,attr"`
	// Preferences: optional
	Preferences *Preferences `hcl:"preferences,block"`
}

type Preferences struct {
	// AutoRollback: bool, optional
	AutoRollback terra.BoolValue `hcl:"auto_rollback,attr"`
	// CheckpointDelay: string, optional
	CheckpointDelay terra.StringValue `hcl:"checkpoint_delay,attr"`
	// CheckpointPercentages: list of number, optional
	CheckpointPercentages terra.ListValue[terra.NumberValue] `hcl:"checkpoint_percentages,attr"`
	// InstanceWarmup: string, optional
	InstanceWarmup terra.StringValue `hcl:"instance_warmup,attr"`
	// MinHealthyPercentage: number, optional
	MinHealthyPercentage terra.NumberValue `hcl:"min_healthy_percentage,attr"`
	// SkipMatching: bool, optional
	SkipMatching terra.BoolValue `hcl:"skip_matching,attr"`
}

type LaunchTemplate struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type MixedInstancesPolicy struct {
	// InstancesDistribution: optional
	InstancesDistribution *InstancesDistribution `hcl:"instances_distribution,block"`
	// MixedInstancesPolicyLaunchTemplate: required
	LaunchTemplate *MixedInstancesPolicyLaunchTemplate `hcl:"launch_template,block" validate:"required"`
}

type InstancesDistribution struct {
	// OnDemandAllocationStrategy: string, optional
	OnDemandAllocationStrategy terra.StringValue `hcl:"on_demand_allocation_strategy,attr"`
	// OnDemandBaseCapacity: number, optional
	OnDemandBaseCapacity terra.NumberValue `hcl:"on_demand_base_capacity,attr"`
	// OnDemandPercentageAboveBaseCapacity: number, optional
	OnDemandPercentageAboveBaseCapacity terra.NumberValue `hcl:"on_demand_percentage_above_base_capacity,attr"`
	// SpotAllocationStrategy: string, optional
	SpotAllocationStrategy terra.StringValue `hcl:"spot_allocation_strategy,attr"`
	// SpotInstancePools: number, optional
	SpotInstancePools terra.NumberValue `hcl:"spot_instance_pools,attr"`
	// SpotMaxPrice: string, optional
	SpotMaxPrice terra.StringValue `hcl:"spot_max_price,attr"`
}

type MixedInstancesPolicyLaunchTemplate struct {
	// LaunchTemplateLaunchTemplateSpecification: required
	LaunchTemplateSpecification *LaunchTemplateLaunchTemplateSpecification `hcl:"launch_template_specification,block" validate:"required"`
	// Override: min=0
	Override []Override `hcl:"override,block" validate:"min=0"`
}

type LaunchTemplateLaunchTemplateSpecification struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type Override struct {
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// WeightedCapacity: string, optional
	WeightedCapacity terra.StringValue `hcl:"weighted_capacity,attr"`
	// InstanceRequirements: optional
	InstanceRequirements *InstanceRequirements `hcl:"instance_requirements,block"`
	// OverrideLaunchTemplateSpecification: optional
	LaunchTemplateSpecification *OverrideLaunchTemplateSpecification `hcl:"launch_template_specification,block"`
}

type InstanceRequirements struct {
	// AcceleratorManufacturers: set of string, optional
	AcceleratorManufacturers terra.SetValue[terra.StringValue] `hcl:"accelerator_manufacturers,attr"`
	// AcceleratorNames: set of string, optional
	AcceleratorNames terra.SetValue[terra.StringValue] `hcl:"accelerator_names,attr"`
	// AcceleratorTypes: set of string, optional
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AllowedInstanceTypes: set of string, optional
	AllowedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"allowed_instance_types,attr"`
	// BareMetal: string, optional
	BareMetal terra.StringValue `hcl:"bare_metal,attr"`
	// BurstablePerformance: string, optional
	BurstablePerformance terra.StringValue `hcl:"burstable_performance,attr"`
	// CpuManufacturers: set of string, optional
	CpuManufacturers terra.SetValue[terra.StringValue] `hcl:"cpu_manufacturers,attr"`
	// ExcludedInstanceTypes: set of string, optional
	ExcludedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"excluded_instance_types,attr"`
	// InstanceGenerations: set of string, optional
	InstanceGenerations terra.SetValue[terra.StringValue] `hcl:"instance_generations,attr"`
	// LocalStorage: string, optional
	LocalStorage terra.StringValue `hcl:"local_storage,attr"`
	// LocalStorageTypes: set of string, optional
	LocalStorageTypes terra.SetValue[terra.StringValue] `hcl:"local_storage_types,attr"`
	// OnDemandMaxPricePercentageOverLowestPrice: number, optional
	OnDemandMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"on_demand_max_price_percentage_over_lowest_price,attr"`
	// RequireHibernateSupport: bool, optional
	RequireHibernateSupport terra.BoolValue `hcl:"require_hibernate_support,attr"`
	// SpotMaxPricePercentageOverLowestPrice: number, optional
	SpotMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"spot_max_price_percentage_over_lowest_price,attr"`
	// AcceleratorCount: optional
	AcceleratorCount *AcceleratorCount `hcl:"accelerator_count,block"`
	// AcceleratorTotalMemoryMib: optional
	AcceleratorTotalMemoryMib *AcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block"`
	// BaselineEbsBandwidthMbps: optional
	BaselineEbsBandwidthMbps *BaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block"`
	// MemoryGibPerVcpu: optional
	MemoryGibPerVcpu *MemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block"`
	// MemoryMib: optional
	MemoryMib *MemoryMib `hcl:"memory_mib,block"`
	// NetworkBandwidthGbps: optional
	NetworkBandwidthGbps *NetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block"`
	// NetworkInterfaceCount: optional
	NetworkInterfaceCount *NetworkInterfaceCount `hcl:"network_interface_count,block"`
	// TotalLocalStorageGb: optional
	TotalLocalStorageGb *TotalLocalStorageGb `hcl:"total_local_storage_gb,block"`
	// VcpuCount: optional
	VcpuCount *VcpuCount `hcl:"vcpu_count,block"`
}

type AcceleratorCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type AcceleratorTotalMemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type BaselineEbsBandwidthMbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryGibPerVcpu struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkBandwidthGbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkInterfaceCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type TotalLocalStorageGb struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type VcpuCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type OverrideLaunchTemplateSpecification struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type Tag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// PropagateAtLaunch: bool, required
	PropagateAtLaunch terra.BoolValue `hcl:"propagate_at_launch,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TrafficSource struct {
	// Identifier: string, required
	Identifier terra.StringValue `hcl:"identifier,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type WarmPool struct {
	// MaxGroupPreparedCapacity: number, optional
	MaxGroupPreparedCapacity terra.NumberValue `hcl:"max_group_prepared_capacity,attr"`
	// MinSize: number, optional
	MinSize terra.NumberValue `hcl:"min_size,attr"`
	// PoolState: string, optional
	PoolState terra.StringValue `hcl:"pool_state,attr"`
	// InstanceReusePolicy: optional
	InstanceReusePolicy *InstanceReusePolicy `hcl:"instance_reuse_policy,block"`
}

type InstanceReusePolicy struct {
	// ReuseOnScaleIn: bool, optional
	ReuseOnScaleIn terra.BoolValue `hcl:"reuse_on_scale_in,attr"`
}

type InitialLifecycleHookAttributes struct {
	ref terra.Reference
}

func (ilh InitialLifecycleHookAttributes) InternalRef() (terra.Reference, error) {
	return ilh.ref, nil
}

func (ilh InitialLifecycleHookAttributes) InternalWithRef(ref terra.Reference) InitialLifecycleHookAttributes {
	return InitialLifecycleHookAttributes{ref: ref}
}

func (ilh InitialLifecycleHookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilh.ref.InternalTokens()
}

func (ilh InitialLifecycleHookAttributes) DefaultResult() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("default_result"))
}

func (ilh InitialLifecycleHookAttributes) HeartbeatTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(ilh.ref.Append("heartbeat_timeout"))
}

func (ilh InitialLifecycleHookAttributes) LifecycleTransition() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("lifecycle_transition"))
}

func (ilh InitialLifecycleHookAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("name"))
}

func (ilh InitialLifecycleHookAttributes) NotificationMetadata() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("notification_metadata"))
}

func (ilh InitialLifecycleHookAttributes) NotificationTargetArn() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("notification_target_arn"))
}

func (ilh InitialLifecycleHookAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ilh.ref.Append("role_arn"))
}

type InstanceRefreshAttributes struct {
	ref terra.Reference
}

func (ir InstanceRefreshAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir InstanceRefreshAttributes) InternalWithRef(ref terra.Reference) InstanceRefreshAttributes {
	return InstanceRefreshAttributes{ref: ref}
}

func (ir InstanceRefreshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir InstanceRefreshAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("strategy"))
}

func (ir InstanceRefreshAttributes) Triggers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("triggers"))
}

func (ir InstanceRefreshAttributes) Preferences() terra.ListValue[PreferencesAttributes] {
	return terra.ReferenceAsList[PreferencesAttributes](ir.ref.Append("preferences"))
}

type PreferencesAttributes struct {
	ref terra.Reference
}

func (p PreferencesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PreferencesAttributes) InternalWithRef(ref terra.Reference) PreferencesAttributes {
	return PreferencesAttributes{ref: ref}
}

func (p PreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PreferencesAttributes) AutoRollback() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("auto_rollback"))
}

func (p PreferencesAttributes) CheckpointDelay() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("checkpoint_delay"))
}

func (p PreferencesAttributes) CheckpointPercentages() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](p.ref.Append("checkpoint_percentages"))
}

func (p PreferencesAttributes) InstanceWarmup() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("instance_warmup"))
}

func (p PreferencesAttributes) MinHealthyPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("min_healthy_percentage"))
}

func (p PreferencesAttributes) SkipMatching() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("skip_matching"))
}

type LaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt LaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt LaunchTemplateAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateAttributes {
	return LaunchTemplateAttributes{ref: ref}
}

func (lt LaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt LaunchTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt LaunchTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

func (lt LaunchTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("version"))
}

type MixedInstancesPolicyAttributes struct {
	ref terra.Reference
}

func (mip MixedInstancesPolicyAttributes) InternalRef() (terra.Reference, error) {
	return mip.ref, nil
}

func (mip MixedInstancesPolicyAttributes) InternalWithRef(ref terra.Reference) MixedInstancesPolicyAttributes {
	return MixedInstancesPolicyAttributes{ref: ref}
}

func (mip MixedInstancesPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mip.ref.InternalTokens()
}

func (mip MixedInstancesPolicyAttributes) InstancesDistribution() terra.ListValue[InstancesDistributionAttributes] {
	return terra.ReferenceAsList[InstancesDistributionAttributes](mip.ref.Append("instances_distribution"))
}

func (mip MixedInstancesPolicyAttributes) LaunchTemplate() terra.ListValue[MixedInstancesPolicyLaunchTemplateAttributes] {
	return terra.ReferenceAsList[MixedInstancesPolicyLaunchTemplateAttributes](mip.ref.Append("launch_template"))
}

type InstancesDistributionAttributes struct {
	ref terra.Reference
}

func (id InstancesDistributionAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id InstancesDistributionAttributes) InternalWithRef(ref terra.Reference) InstancesDistributionAttributes {
	return InstancesDistributionAttributes{ref: ref}
}

func (id InstancesDistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id InstancesDistributionAttributes) OnDemandAllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("on_demand_allocation_strategy"))
}

func (id InstancesDistributionAttributes) OnDemandBaseCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("on_demand_base_capacity"))
}

func (id InstancesDistributionAttributes) OnDemandPercentageAboveBaseCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("on_demand_percentage_above_base_capacity"))
}

func (id InstancesDistributionAttributes) SpotAllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("spot_allocation_strategy"))
}

func (id InstancesDistributionAttributes) SpotInstancePools() terra.NumberValue {
	return terra.ReferenceAsNumber(id.ref.Append("spot_instance_pools"))
}

func (id InstancesDistributionAttributes) SpotMaxPrice() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("spot_max_price"))
}

type MixedInstancesPolicyLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) MixedInstancesPolicyLaunchTemplateAttributes {
	return MixedInstancesPolicyLaunchTemplateAttributes{ref: ref}
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) LaunchTemplateSpecification() terra.ListValue[LaunchTemplateLaunchTemplateSpecificationAttributes] {
	return terra.ReferenceAsList[LaunchTemplateLaunchTemplateSpecificationAttributes](lt.ref.Append("launch_template_specification"))
}

func (lt MixedInstancesPolicyLaunchTemplateAttributes) Override() terra.ListValue[OverrideAttributes] {
	return terra.ReferenceAsList[OverrideAttributes](lt.ref.Append("override"))
}

type LaunchTemplateLaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return lts.ref, nil
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateLaunchTemplateSpecificationAttributes {
	return LaunchTemplateLaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lts.ref.InternalTokens()
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_id"))
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_name"))
}

func (lts LaunchTemplateLaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("version"))
}

type OverrideAttributes struct {
	ref terra.Reference
}

func (o OverrideAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OverrideAttributes) InternalWithRef(ref terra.Reference) OverrideAttributes {
	return OverrideAttributes{ref: ref}
}

func (o OverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OverrideAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("instance_type"))
}

func (o OverrideAttributes) WeightedCapacity() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("weighted_capacity"))
}

func (o OverrideAttributes) InstanceRequirements() terra.ListValue[InstanceRequirementsAttributes] {
	return terra.ReferenceAsList[InstanceRequirementsAttributes](o.ref.Append("instance_requirements"))
}

func (o OverrideAttributes) LaunchTemplateSpecification() terra.ListValue[OverrideLaunchTemplateSpecificationAttributes] {
	return terra.ReferenceAsList[OverrideLaunchTemplateSpecificationAttributes](o.ref.Append("launch_template_specification"))
}

type InstanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir InstanceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir InstanceRequirementsAttributes) InternalWithRef(ref terra.Reference) InstanceRequirementsAttributes {
	return InstanceRequirementsAttributes{ref: ref}
}

func (ir InstanceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir InstanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir InstanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir InstanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir InstanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("bare_metal"))
}

func (ir InstanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("burstable_performance"))
}

func (ir InstanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir InstanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir InstanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir InstanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("local_storage"))
}

func (ir InstanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir InstanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ir.ref.Append("require_hibernate_support"))
}

func (ir InstanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) AcceleratorCount() terra.ListValue[AcceleratorCountAttributes] {
	return terra.ReferenceAsList[AcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[AcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceAsList[AcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir InstanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[BaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceAsList[BaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir InstanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[MemoryGibPerVcpuAttributes] {
	return terra.ReferenceAsList[MemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir InstanceRequirementsAttributes) MemoryMib() terra.ListValue[MemoryMibAttributes] {
	return terra.ReferenceAsList[MemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir InstanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[NetworkBandwidthGbpsAttributes] {
	return terra.ReferenceAsList[NetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir InstanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[NetworkInterfaceCountAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir InstanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[TotalLocalStorageGbAttributes] {
	return terra.ReferenceAsList[TotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir InstanceRequirementsAttributes) VcpuCount() terra.ListValue[VcpuCountAttributes] {
	return terra.ReferenceAsList[VcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type AcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorCountAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorCountAttributes) InternalWithRef(ref terra.Reference) AcceleratorCountAttributes {
	return AcceleratorCountAttributes{ref: ref}
}

func (ac AcceleratorCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max"))
}

func (ac AcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min"))
}

type AcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return atmm.ref, nil
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) AcceleratorTotalMemoryMibAttributes {
	return AcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atmm.ref.InternalTokens()
}

func (atmm AcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("max"))
}

func (atmm AcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("min"))
}

type BaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalRef() (terra.Reference, error) {
	return bebm.ref, nil
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) BaselineEbsBandwidthMbpsAttributes {
	return BaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bebm.ref.InternalTokens()
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("max"))
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("min"))
}

type MemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv MemoryGibPerVcpuAttributes) InternalRef() (terra.Reference, error) {
	return mgpv.ref, nil
}

func (mgpv MemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) MemoryGibPerVcpuAttributes {
	return MemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv MemoryGibPerVcpuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgpv.ref.InternalTokens()
}

func (mgpv MemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("max"))
}

func (mgpv MemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("min"))
}

type MemoryMibAttributes struct {
	ref terra.Reference
}

func (mm MemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MemoryMibAttributes) InternalWithRef(ref terra.Reference) MemoryMibAttributes {
	return MemoryMibAttributes{ref: ref}
}

func (mm MemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm MemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("max"))
}

func (mm MemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("min"))
}

type NetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg NetworkBandwidthGbpsAttributes) InternalRef() (terra.Reference, error) {
	return nbg.ref, nil
}

func (nbg NetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) NetworkBandwidthGbpsAttributes {
	return NetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg NetworkBandwidthGbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nbg.ref.InternalTokens()
}

func (nbg NetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("max"))
}

func (nbg NetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("min"))
}

type NetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic NetworkInterfaceCountAttributes) InternalRef() (terra.Reference, error) {
	return nic.ref, nil
}

func (nic NetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceCountAttributes {
	return NetworkInterfaceCountAttributes{ref: ref}
}

func (nic NetworkInterfaceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nic.ref.InternalTokens()
}

func (nic NetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("max"))
}

func (nic NetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("min"))
}

type TotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg TotalLocalStorageGbAttributes) InternalRef() (terra.Reference, error) {
	return tlsg.ref, nil
}

func (tlsg TotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) TotalLocalStorageGbAttributes {
	return TotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg TotalLocalStorageGbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlsg.ref.InternalTokens()
}

func (tlsg TotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("max"))
}

func (tlsg TotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("min"))
}

type VcpuCountAttributes struct {
	ref terra.Reference
}

func (vc VcpuCountAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VcpuCountAttributes) InternalWithRef(ref terra.Reference) VcpuCountAttributes {
	return VcpuCountAttributes{ref: ref}
}

func (vc VcpuCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("max"))
}

func (vc VcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("min"))
}

type OverrideLaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return lts.ref, nil
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) OverrideLaunchTemplateSpecificationAttributes {
	return OverrideLaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts OverrideLaunchTemplateSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lts.ref.InternalTokens()
}

func (lts OverrideLaunchTemplateSpecificationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_id"))
}

func (lts OverrideLaunchTemplateSpecificationAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_name"))
}

func (lts OverrideLaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("version"))
}

type TagAttributes struct {
	ref terra.Reference
}

func (t TagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TagAttributes) InternalWithRef(ref terra.Reference) TagAttributes {
	return TagAttributes{ref: ref}
}

func (t TagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TagAttributes) PropagateAtLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("propagate_at_launch"))
}

func (t TagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrafficSourceAttributes struct {
	ref terra.Reference
}

func (ts TrafficSourceAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrafficSourceAttributes) InternalWithRef(ref terra.Reference) TrafficSourceAttributes {
	return TrafficSourceAttributes{ref: ref}
}

func (ts TrafficSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrafficSourceAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("identifier"))
}

func (ts TrafficSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("type"))
}

type WarmPoolAttributes struct {
	ref terra.Reference
}

func (wp WarmPoolAttributes) InternalRef() (terra.Reference, error) {
	return wp.ref, nil
}

func (wp WarmPoolAttributes) InternalWithRef(ref terra.Reference) WarmPoolAttributes {
	return WarmPoolAttributes{ref: ref}
}

func (wp WarmPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wp.ref.InternalTokens()
}

func (wp WarmPoolAttributes) MaxGroupPreparedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(wp.ref.Append("max_group_prepared_capacity"))
}

func (wp WarmPoolAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(wp.ref.Append("min_size"))
}

func (wp WarmPoolAttributes) PoolState() terra.StringValue {
	return terra.ReferenceAsString(wp.ref.Append("pool_state"))
}

func (wp WarmPoolAttributes) InstanceReusePolicy() terra.ListValue[InstanceReusePolicyAttributes] {
	return terra.ReferenceAsList[InstanceReusePolicyAttributes](wp.ref.Append("instance_reuse_policy"))
}

type InstanceReusePolicyAttributes struct {
	ref terra.Reference
}

func (irp InstanceReusePolicyAttributes) InternalRef() (terra.Reference, error) {
	return irp.ref, nil
}

func (irp InstanceReusePolicyAttributes) InternalWithRef(ref terra.Reference) InstanceReusePolicyAttributes {
	return InstanceReusePolicyAttributes{ref: ref}
}

func (irp InstanceReusePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return irp.ref.InternalTokens()
}

func (irp InstanceReusePolicyAttributes) ReuseOnScaleIn() terra.BoolValue {
	return terra.ReferenceAsBool(irp.ref.Append("reuse_on_scale_in"))
}

type InitialLifecycleHookState struct {
	DefaultResult         string  `json:"default_result"`
	HeartbeatTimeout      float64 `json:"heartbeat_timeout"`
	LifecycleTransition   string  `json:"lifecycle_transition"`
	Name                  string  `json:"name"`
	NotificationMetadata  string  `json:"notification_metadata"`
	NotificationTargetArn string  `json:"notification_target_arn"`
	RoleArn               string  `json:"role_arn"`
}

type InstanceRefreshState struct {
	Strategy    string             `json:"strategy"`
	Triggers    []string           `json:"triggers"`
	Preferences []PreferencesState `json:"preferences"`
}

type PreferencesState struct {
	AutoRollback          bool      `json:"auto_rollback"`
	CheckpointDelay       string    `json:"checkpoint_delay"`
	CheckpointPercentages []float64 `json:"checkpoint_percentages"`
	InstanceWarmup        string    `json:"instance_warmup"`
	MinHealthyPercentage  float64   `json:"min_healthy_percentage"`
	SkipMatching          bool      `json:"skip_matching"`
}

type LaunchTemplateState struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

type MixedInstancesPolicyState struct {
	InstancesDistribution []InstancesDistributionState              `json:"instances_distribution"`
	LaunchTemplate        []MixedInstancesPolicyLaunchTemplateState `json:"launch_template"`
}

type InstancesDistributionState struct {
	OnDemandAllocationStrategy          string  `json:"on_demand_allocation_strategy"`
	OnDemandBaseCapacity                float64 `json:"on_demand_base_capacity"`
	OnDemandPercentageAboveBaseCapacity float64 `json:"on_demand_percentage_above_base_capacity"`
	SpotAllocationStrategy              string  `json:"spot_allocation_strategy"`
	SpotInstancePools                   float64 `json:"spot_instance_pools"`
	SpotMaxPrice                        string  `json:"spot_max_price"`
}

type MixedInstancesPolicyLaunchTemplateState struct {
	LaunchTemplateSpecification []LaunchTemplateLaunchTemplateSpecificationState `json:"launch_template_specification"`
	Override                    []OverrideState                                  `json:"override"`
}

type LaunchTemplateLaunchTemplateSpecificationState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type OverrideState struct {
	InstanceType                string                                     `json:"instance_type"`
	WeightedCapacity            string                                     `json:"weighted_capacity"`
	InstanceRequirements        []InstanceRequirementsState                `json:"instance_requirements"`
	LaunchTemplateSpecification []OverrideLaunchTemplateSpecificationState `json:"launch_template_specification"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                         `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                         `json:"accelerator_names"`
	AcceleratorTypes                          []string                         `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                         `json:"allowed_instance_types"`
	BareMetal                                 string                           `json:"bare_metal"`
	BurstablePerformance                      string                           `json:"burstable_performance"`
	CpuManufacturers                          []string                         `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                         `json:"excluded_instance_types"`
	InstanceGenerations                       []string                         `json:"instance_generations"`
	LocalStorage                              string                           `json:"local_storage"`
	LocalStorageTypes                         []string                         `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                          `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                             `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                          `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []AcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []AcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []BaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []MemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []MemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []NetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []NetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []TotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []VcpuCountState                 `json:"vcpu_count"`
}

type AcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type BaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type TotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type VcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type OverrideLaunchTemplateSpecificationState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type TagState struct {
	Key               string `json:"key"`
	PropagateAtLaunch bool   `json:"propagate_at_launch"`
	Value             string `json:"value"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrafficSourceState struct {
	Identifier string `json:"identifier"`
	Type       string `json:"type"`
}

type WarmPoolState struct {
	MaxGroupPreparedCapacity float64                    `json:"max_group_prepared_capacity"`
	MinSize                  float64                    `json:"min_size"`
	PoolState                string                     `json:"pool_state"`
	InstanceReusePolicy      []InstanceReusePolicyState `json:"instance_reuse_policy"`
}

type InstanceReusePolicyState struct {
	ReuseOnScaleIn bool `json:"reuse_on_scale_in"`
}
