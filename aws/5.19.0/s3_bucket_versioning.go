// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketversioning "github.com/golingon/terraproviders/aws/5.19.0/s3bucketversioning"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewS3BucketVersioning creates a new instance of [S3BucketVersioning].
func NewS3BucketVersioning(name string, args S3BucketVersioningArgs) *S3BucketVersioning {
	return &S3BucketVersioning{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketVersioning)(nil)

// S3BucketVersioning represents the Terraform resource aws_s3_bucket_versioning.
type S3BucketVersioning struct {
	Name      string
	Args      S3BucketVersioningArgs
	state     *s3BucketVersioningState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3BucketVersioning].
func (sbv *S3BucketVersioning) Type() string {
	return "aws_s3_bucket_versioning"
}

// LocalName returns the local name for [S3BucketVersioning].
func (sbv *S3BucketVersioning) LocalName() string {
	return sbv.Name
}

// Configuration returns the configuration (args) for [S3BucketVersioning].
func (sbv *S3BucketVersioning) Configuration() interface{} {
	return sbv.Args
}

// DependOn is used for other resources to depend on [S3BucketVersioning].
func (sbv *S3BucketVersioning) DependOn() terra.Reference {
	return terra.ReferenceResource(sbv)
}

// Dependencies returns the list of resources [S3BucketVersioning] depends_on.
func (sbv *S3BucketVersioning) Dependencies() terra.Dependencies {
	return sbv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3BucketVersioning].
func (sbv *S3BucketVersioning) LifecycleManagement() *terra.Lifecycle {
	return sbv.Lifecycle
}

// Attributes returns the attributes for [S3BucketVersioning].
func (sbv *S3BucketVersioning) Attributes() s3BucketVersioningAttributes {
	return s3BucketVersioningAttributes{ref: terra.ReferenceResource(sbv)}
}

// ImportState imports the given attribute values into [S3BucketVersioning]'s state.
func (sbv *S3BucketVersioning) ImportState(av io.Reader) error {
	sbv.state = &s3BucketVersioningState{}
	if err := json.NewDecoder(av).Decode(sbv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbv.Type(), sbv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3BucketVersioning] has state.
func (sbv *S3BucketVersioning) State() (*s3BucketVersioningState, bool) {
	return sbv.state, sbv.state != nil
}

// StateMust returns the state for [S3BucketVersioning]. Panics if the state is nil.
func (sbv *S3BucketVersioning) StateMust() *s3BucketVersioningState {
	if sbv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbv.Type(), sbv.LocalName()))
	}
	return sbv.state
}

// S3BucketVersioningArgs contains the configurations for aws_s3_bucket_versioning.
type S3BucketVersioningArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Mfa: string, optional
	Mfa terra.StringValue `hcl:"mfa,attr"`
	// VersioningConfiguration: required
	VersioningConfiguration *s3bucketversioning.VersioningConfiguration `hcl:"versioning_configuration,block" validate:"required"`
}
type s3BucketVersioningAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_versioning.
func (sbv s3BucketVersioningAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sbv.ref.Append("bucket"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_s3_bucket_versioning.
func (sbv s3BucketVersioningAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(sbv.ref.Append("expected_bucket_owner"))
}

// Id returns a reference to field id of aws_s3_bucket_versioning.
func (sbv s3BucketVersioningAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sbv.ref.Append("id"))
}

// Mfa returns a reference to field mfa of aws_s3_bucket_versioning.
func (sbv s3BucketVersioningAttributes) Mfa() terra.StringValue {
	return terra.ReferenceAsString(sbv.ref.Append("mfa"))
}

func (sbv s3BucketVersioningAttributes) VersioningConfiguration() terra.ListValue[s3bucketversioning.VersioningConfigurationAttributes] {
	return terra.ReferenceAsList[s3bucketversioning.VersioningConfigurationAttributes](sbv.ref.Append("versioning_configuration"))
}

type s3BucketVersioningState struct {
	Bucket                  string                                            `json:"bucket"`
	ExpectedBucketOwner     string                                            `json:"expected_bucket_owner"`
	Id                      string                                            `json:"id"`
	Mfa                     string                                            `json:"mfa"`
	VersioningConfiguration []s3bucketversioning.VersioningConfigurationState `json:"versioning_configuration"`
}
