// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksighttheme "github.com/golingon/terraproviders/aws/5.19.0/quicksighttheme"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightTheme creates a new instance of [QuicksightTheme].
func NewQuicksightTheme(name string, args QuicksightThemeArgs) *QuicksightTheme {
	return &QuicksightTheme{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightTheme)(nil)

// QuicksightTheme represents the Terraform resource aws_quicksight_theme.
type QuicksightTheme struct {
	Name      string
	Args      QuicksightThemeArgs
	state     *quicksightThemeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightTheme].
func (qt *QuicksightTheme) Type() string {
	return "aws_quicksight_theme"
}

// LocalName returns the local name for [QuicksightTheme].
func (qt *QuicksightTheme) LocalName() string {
	return qt.Name
}

// Configuration returns the configuration (args) for [QuicksightTheme].
func (qt *QuicksightTheme) Configuration() interface{} {
	return qt.Args
}

// DependOn is used for other resources to depend on [QuicksightTheme].
func (qt *QuicksightTheme) DependOn() terra.Reference {
	return terra.ReferenceResource(qt)
}

// Dependencies returns the list of resources [QuicksightTheme] depends_on.
func (qt *QuicksightTheme) Dependencies() terra.Dependencies {
	return qt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightTheme].
func (qt *QuicksightTheme) LifecycleManagement() *terra.Lifecycle {
	return qt.Lifecycle
}

// Attributes returns the attributes for [QuicksightTheme].
func (qt *QuicksightTheme) Attributes() quicksightThemeAttributes {
	return quicksightThemeAttributes{ref: terra.ReferenceResource(qt)}
}

// ImportState imports the given attribute values into [QuicksightTheme]'s state.
func (qt *QuicksightTheme) ImportState(av io.Reader) error {
	qt.state = &quicksightThemeState{}
	if err := json.NewDecoder(av).Decode(qt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qt.Type(), qt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightTheme] has state.
func (qt *QuicksightTheme) State() (*quicksightThemeState, bool) {
	return qt.state, qt.state != nil
}

// StateMust returns the state for [QuicksightTheme]. Panics if the state is nil.
func (qt *QuicksightTheme) StateMust() *quicksightThemeState {
	if qt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qt.Type(), qt.LocalName()))
	}
	return qt.state
}

// QuicksightThemeArgs contains the configurations for aws_quicksight_theme.
type QuicksightThemeArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// BaseThemeId: string, required
	BaseThemeId terra.StringValue `hcl:"base_theme_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThemeId: string, required
	ThemeId terra.StringValue `hcl:"theme_id,attr" validate:"required"`
	// VersionDescription: string, optional
	VersionDescription terra.StringValue `hcl:"version_description,attr"`
	// Configuration: optional
	Configuration *quicksighttheme.Configuration `hcl:"configuration,block"`
	// Permissions: min=0,max=64
	Permissions []quicksighttheme.Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// Timeouts: optional
	Timeouts *quicksighttheme.Timeouts `hcl:"timeouts,block"`
}
type quicksightThemeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_theme.
func (qt quicksightThemeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_theme.
func (qt quicksightThemeAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("aws_account_id"))
}

// BaseThemeId returns a reference to field base_theme_id of aws_quicksight_theme.
func (qt quicksightThemeAttributes) BaseThemeId() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("base_theme_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_theme.
func (qt quicksightThemeAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("created_time"))
}

// Id returns a reference to field id of aws_quicksight_theme.
func (qt quicksightThemeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_theme.
func (qt quicksightThemeAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_theme.
func (qt quicksightThemeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("name"))
}

// Status returns a reference to field status of aws_quicksight_theme.
func (qt quicksightThemeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_theme.
func (qt quicksightThemeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_theme.
func (qt quicksightThemeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qt.ref.Append("tags_all"))
}

// ThemeId returns a reference to field theme_id of aws_quicksight_theme.
func (qt quicksightThemeAttributes) ThemeId() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("theme_id"))
}

// VersionDescription returns a reference to field version_description of aws_quicksight_theme.
func (qt quicksightThemeAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("version_description"))
}

// VersionNumber returns a reference to field version_number of aws_quicksight_theme.
func (qt quicksightThemeAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(qt.ref.Append("version_number"))
}

func (qt quicksightThemeAttributes) Configuration() terra.ListValue[quicksighttheme.ConfigurationAttributes] {
	return terra.ReferenceAsList[quicksighttheme.ConfigurationAttributes](qt.ref.Append("configuration"))
}

func (qt quicksightThemeAttributes) Permissions() terra.ListValue[quicksighttheme.PermissionsAttributes] {
	return terra.ReferenceAsList[quicksighttheme.PermissionsAttributes](qt.ref.Append("permissions"))
}

func (qt quicksightThemeAttributes) Timeouts() quicksighttheme.TimeoutsAttributes {
	return terra.ReferenceAsSingle[quicksighttheme.TimeoutsAttributes](qt.ref.Append("timeouts"))
}

type quicksightThemeState struct {
	Arn                string                               `json:"arn"`
	AwsAccountId       string                               `json:"aws_account_id"`
	BaseThemeId        string                               `json:"base_theme_id"`
	CreatedTime        string                               `json:"created_time"`
	Id                 string                               `json:"id"`
	LastUpdatedTime    string                               `json:"last_updated_time"`
	Name               string                               `json:"name"`
	Status             string                               `json:"status"`
	Tags               map[string]string                    `json:"tags"`
	TagsAll            map[string]string                    `json:"tags_all"`
	ThemeId            string                               `json:"theme_id"`
	VersionDescription string                               `json:"version_description"`
	VersionNumber      float64                              `json:"version_number"`
	Configuration      []quicksighttheme.ConfigurationState `json:"configuration"`
	Permissions        []quicksighttheme.PermissionsState   `json:"permissions"`
	Timeouts           *quicksighttheme.TimeoutsState       `json:"timeouts"`
}
