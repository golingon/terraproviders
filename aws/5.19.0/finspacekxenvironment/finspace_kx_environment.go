// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package finspacekxenvironment

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CustomDnsConfiguration struct {
	// CustomDnsServerIp: string, required
	CustomDnsServerIp terra.StringValue `hcl:"custom_dns_server_ip,attr" validate:"required"`
	// CustomDnsServerName: string, required
	CustomDnsServerName terra.StringValue `hcl:"custom_dns_server_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TransitGatewayConfiguration struct {
	// RoutableCidrSpace: string, required
	RoutableCidrSpace terra.StringValue `hcl:"routable_cidr_space,attr" validate:"required"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// AttachmentNetworkAclConfiguration: min=0,max=100
	AttachmentNetworkAclConfiguration []AttachmentNetworkAclConfiguration `hcl:"attachment_network_acl_configuration,block" validate:"min=0,max=100"`
}

type AttachmentNetworkAclConfiguration struct {
	// CidrBlock: string, required
	CidrBlock terra.StringValue `hcl:"cidr_block,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RuleAction: string, required
	RuleAction terra.StringValue `hcl:"rule_action,attr" validate:"required"`
	// RuleNumber: number, required
	RuleNumber terra.NumberValue `hcl:"rule_number,attr" validate:"required"`
	// IcmpTypeCode: optional
	IcmpTypeCode *IcmpTypeCode `hcl:"icmp_type_code,block"`
	// PortRange: optional
	PortRange *PortRange `hcl:"port_range,block"`
}

type IcmpTypeCode struct {
	// Code: number, required
	Code terra.NumberValue `hcl:"code,attr" validate:"required"`
	// Type: number, required
	Type terra.NumberValue `hcl:"type,attr" validate:"required"`
}

type PortRange struct {
	// From: number, required
	From terra.NumberValue `hcl:"from,attr" validate:"required"`
	// To: number, required
	To terra.NumberValue `hcl:"to,attr" validate:"required"`
}

type CustomDnsConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc CustomDnsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc CustomDnsConfigurationAttributes) InternalWithRef(ref terra.Reference) CustomDnsConfigurationAttributes {
	return CustomDnsConfigurationAttributes{ref: ref}
}

func (cdc CustomDnsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc CustomDnsConfigurationAttributes) CustomDnsServerIp() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("custom_dns_server_ip"))
}

func (cdc CustomDnsConfigurationAttributes) CustomDnsServerName() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("custom_dns_server_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TransitGatewayConfigurationAttributes struct {
	ref terra.Reference
}

func (tgc TransitGatewayConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tgc.ref, nil
}

func (tgc TransitGatewayConfigurationAttributes) InternalWithRef(ref terra.Reference) TransitGatewayConfigurationAttributes {
	return TransitGatewayConfigurationAttributes{ref: ref}
}

func (tgc TransitGatewayConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tgc.ref.InternalTokens()
}

func (tgc TransitGatewayConfigurationAttributes) RoutableCidrSpace() terra.StringValue {
	return terra.ReferenceAsString(tgc.ref.Append("routable_cidr_space"))
}

func (tgc TransitGatewayConfigurationAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(tgc.ref.Append("transit_gateway_id"))
}

func (tgc TransitGatewayConfigurationAttributes) AttachmentNetworkAclConfiguration() terra.ListValue[AttachmentNetworkAclConfigurationAttributes] {
	return terra.ReferenceAsList[AttachmentNetworkAclConfigurationAttributes](tgc.ref.Append("attachment_network_acl_configuration"))
}

type AttachmentNetworkAclConfigurationAttributes struct {
	ref terra.Reference
}

func (anac AttachmentNetworkAclConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return anac.ref, nil
}

func (anac AttachmentNetworkAclConfigurationAttributes) InternalWithRef(ref terra.Reference) AttachmentNetworkAclConfigurationAttributes {
	return AttachmentNetworkAclConfigurationAttributes{ref: ref}
}

func (anac AttachmentNetworkAclConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return anac.ref.InternalTokens()
}

func (anac AttachmentNetworkAclConfigurationAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(anac.ref.Append("cidr_block"))
}

func (anac AttachmentNetworkAclConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(anac.ref.Append("protocol"))
}

func (anac AttachmentNetworkAclConfigurationAttributes) RuleAction() terra.StringValue {
	return terra.ReferenceAsString(anac.ref.Append("rule_action"))
}

func (anac AttachmentNetworkAclConfigurationAttributes) RuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(anac.ref.Append("rule_number"))
}

func (anac AttachmentNetworkAclConfigurationAttributes) IcmpTypeCode() terra.ListValue[IcmpTypeCodeAttributes] {
	return terra.ReferenceAsList[IcmpTypeCodeAttributes](anac.ref.Append("icmp_type_code"))
}

func (anac AttachmentNetworkAclConfigurationAttributes) PortRange() terra.ListValue[PortRangeAttributes] {
	return terra.ReferenceAsList[PortRangeAttributes](anac.ref.Append("port_range"))
}

type IcmpTypeCodeAttributes struct {
	ref terra.Reference
}

func (itc IcmpTypeCodeAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc IcmpTypeCodeAttributes) InternalWithRef(ref terra.Reference) IcmpTypeCodeAttributes {
	return IcmpTypeCodeAttributes{ref: ref}
}

func (itc IcmpTypeCodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc IcmpTypeCodeAttributes) Code() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("code"))
}

func (itc IcmpTypeCodeAttributes) Type() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("type"))
}

type PortRangeAttributes struct {
	ref terra.Reference
}

func (pr PortRangeAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PortRangeAttributes) InternalWithRef(ref terra.Reference) PortRangeAttributes {
	return PortRangeAttributes{ref: ref}
}

func (pr PortRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PortRangeAttributes) From() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("from"))
}

func (pr PortRangeAttributes) To() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("to"))
}

type CustomDnsConfigurationState struct {
	CustomDnsServerIp   string `json:"custom_dns_server_ip"`
	CustomDnsServerName string `json:"custom_dns_server_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TransitGatewayConfigurationState struct {
	RoutableCidrSpace                 string                                   `json:"routable_cidr_space"`
	TransitGatewayId                  string                                   `json:"transit_gateway_id"`
	AttachmentNetworkAclConfiguration []AttachmentNetworkAclConfigurationState `json:"attachment_network_acl_configuration"`
}

type AttachmentNetworkAclConfigurationState struct {
	CidrBlock    string              `json:"cidr_block"`
	Protocol     string              `json:"protocol"`
	RuleAction   string              `json:"rule_action"`
	RuleNumber   float64             `json:"rule_number"`
	IcmpTypeCode []IcmpTypeCodeState `json:"icmp_type_code"`
	PortRange    []PortRangeState    `json:"port_range"`
}

type IcmpTypeCodeState struct {
	Code float64 `json:"code"`
	Type float64 `json:"type"`
}

type PortRangeState struct {
	From float64 `json:"from"`
	To   float64 `json:"to"`
}
