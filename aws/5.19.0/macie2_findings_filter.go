// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	macie2findingsfilter "github.com/golingon/terraproviders/aws/5.19.0/macie2findingsfilter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewMacie2FindingsFilter creates a new instance of [Macie2FindingsFilter].
func NewMacie2FindingsFilter(name string, args Macie2FindingsFilterArgs) *Macie2FindingsFilter {
	return &Macie2FindingsFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Macie2FindingsFilter)(nil)

// Macie2FindingsFilter represents the Terraform resource aws_macie2_findings_filter.
type Macie2FindingsFilter struct {
	Name      string
	Args      Macie2FindingsFilterArgs
	state     *macie2FindingsFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) Type() string {
	return "aws_macie2_findings_filter"
}

// LocalName returns the local name for [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) LocalName() string {
	return mff.Name
}

// Configuration returns the configuration (args) for [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) Configuration() interface{} {
	return mff.Args
}

// DependOn is used for other resources to depend on [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(mff)
}

// Dependencies returns the list of resources [Macie2FindingsFilter] depends_on.
func (mff *Macie2FindingsFilter) Dependencies() terra.Dependencies {
	return mff.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) LifecycleManagement() *terra.Lifecycle {
	return mff.Lifecycle
}

// Attributes returns the attributes for [Macie2FindingsFilter].
func (mff *Macie2FindingsFilter) Attributes() macie2FindingsFilterAttributes {
	return macie2FindingsFilterAttributes{ref: terra.ReferenceResource(mff)}
}

// ImportState imports the given attribute values into [Macie2FindingsFilter]'s state.
func (mff *Macie2FindingsFilter) ImportState(av io.Reader) error {
	mff.state = &macie2FindingsFilterState{}
	if err := json.NewDecoder(av).Decode(mff.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mff.Type(), mff.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Macie2FindingsFilter] has state.
func (mff *Macie2FindingsFilter) State() (*macie2FindingsFilterState, bool) {
	return mff.state, mff.state != nil
}

// StateMust returns the state for [Macie2FindingsFilter]. Panics if the state is nil.
func (mff *Macie2FindingsFilter) StateMust() *macie2FindingsFilterState {
	if mff.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mff.Type(), mff.LocalName()))
	}
	return mff.state
}

// Macie2FindingsFilterArgs contains the configurations for aws_macie2_findings_filter.
type Macie2FindingsFilterArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Position: number, optional
	Position terra.NumberValue `hcl:"position,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// FindingCriteria: required
	FindingCriteria *macie2findingsfilter.FindingCriteria `hcl:"finding_criteria,block" validate:"required"`
}
type macie2FindingsFilterAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("action"))
}

// Arn returns a reference to field arn of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("arn"))
}

// Description returns a reference to field description of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("description"))
}

// Id returns a reference to field id of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("id"))
}

// Name returns a reference to field name of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(mff.ref.Append("name_prefix"))
}

// Position returns a reference to field position of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(mff.ref.Append("position"))
}

// Tags returns a reference to field tags of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mff.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_macie2_findings_filter.
func (mff macie2FindingsFilterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mff.ref.Append("tags_all"))
}

func (mff macie2FindingsFilterAttributes) FindingCriteria() terra.ListValue[macie2findingsfilter.FindingCriteriaAttributes] {
	return terra.ReferenceAsList[macie2findingsfilter.FindingCriteriaAttributes](mff.ref.Append("finding_criteria"))
}

type macie2FindingsFilterState struct {
	Action          string                                      `json:"action"`
	Arn             string                                      `json:"arn"`
	Description     string                                      `json:"description"`
	Id              string                                      `json:"id"`
	Name            string                                      `json:"name"`
	NamePrefix      string                                      `json:"name_prefix"`
	Position        float64                                     `json:"position"`
	Tags            map[string]string                           `json:"tags"`
	TagsAll         map[string]string                           `json:"tags_all"`
	FindingCriteria []macie2findingsfilter.FindingCriteriaState `json:"finding_criteria"`
}
