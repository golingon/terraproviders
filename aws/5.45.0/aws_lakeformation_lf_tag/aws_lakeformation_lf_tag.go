// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_lf_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lakeformation_lf_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationLfTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allt *Resource) Type() string {
	return "aws_lakeformation_lf_tag"
}

// LocalName returns the local name for [Resource].
func (allt *Resource) LocalName() string {
	return allt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allt *Resource) Configuration() interface{} {
	return allt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allt *Resource) Dependencies() terra.Dependencies {
	return allt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allt *Resource) LifecycleManagement() *terra.Lifecycle {
	return allt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allt *Resource) Attributes() awsLakeformationLfTagAttributes {
	return awsLakeformationLfTagAttributes{ref: terra.ReferenceResource(allt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allt *Resource) ImportState(state io.Reader) error {
	allt.state = &awsLakeformationLfTagState{}
	if err := json.NewDecoder(state).Decode(allt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allt.Type(), allt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allt *Resource) State() (*awsLakeformationLfTagState, bool) {
	return allt.state, allt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allt *Resource) StateMust() *awsLakeformationLfTagState {
	if allt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allt.Type(), allt.LocalName()))
	}
	return allt.state
}

// Args contains the configurations for aws_lakeformation_lf_tag.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type awsLakeformationLfTagAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_lf_tag.
func (allt awsLakeformationLfTagAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(allt.ref.Append("catalog_id"))
}

// Id returns a reference to field id of aws_lakeformation_lf_tag.
func (allt awsLakeformationLfTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allt.ref.Append("id"))
}

// Key returns a reference to field key of aws_lakeformation_lf_tag.
func (allt awsLakeformationLfTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(allt.ref.Append("key"))
}

// Values returns a reference to field values of aws_lakeformation_lf_tag.
func (allt awsLakeformationLfTagAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](allt.ref.Append("values"))
}

type awsLakeformationLfTagState struct {
	CatalogId string   `json:"catalog_id"`
	Id        string   `json:"id"`
	Key       string   `json:"key"`
	Values    []string `json:"values"`
}
