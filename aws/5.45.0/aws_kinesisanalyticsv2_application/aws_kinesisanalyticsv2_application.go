// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesisanalyticsv2_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesisanalyticsv2_application.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisanalyticsv2ApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aka *Resource) Type() string {
	return "aws_kinesisanalyticsv2_application"
}

// LocalName returns the local name for [Resource].
func (aka *Resource) LocalName() string {
	return aka.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aka *Resource) Configuration() interface{} {
	return aka.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aka *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aka)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aka *Resource) Dependencies() terra.Dependencies {
	return aka.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aka *Resource) LifecycleManagement() *terra.Lifecycle {
	return aka.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aka *Resource) Attributes() awsKinesisanalyticsv2ApplicationAttributes {
	return awsKinesisanalyticsv2ApplicationAttributes{ref: terra.ReferenceResource(aka)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aka *Resource) ImportState(state io.Reader) error {
	aka.state = &awsKinesisanalyticsv2ApplicationState{}
	if err := json.NewDecoder(state).Decode(aka.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aka.Type(), aka.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aka *Resource) State() (*awsKinesisanalyticsv2ApplicationState, bool) {
	return aka.state, aka.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aka *Resource) StateMust() *awsKinesisanalyticsv2ApplicationState {
	if aka.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aka.Type(), aka.LocalName()))
	}
	return aka.state
}

// Args contains the configurations for aws_kinesisanalyticsv2_application.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceStop: bool, optional
	ForceStop terra.BoolValue `hcl:"force_stop,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuntimeEnvironment: string, required
	RuntimeEnvironment terra.StringValue `hcl:"runtime_environment,attr" validate:"required"`
	// ServiceExecutionRole: string, required
	ServiceExecutionRole terra.StringValue `hcl:"service_execution_role,attr" validate:"required"`
	// StartApplication: bool, optional
	StartApplication terra.BoolValue `hcl:"start_application,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ApplicationConfiguration: optional
	ApplicationConfiguration *ApplicationConfiguration `hcl:"application_configuration,block"`
	// CloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *CloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKinesisanalyticsv2ApplicationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("arn"))
}

// CreateTimestamp returns a reference to field create_timestamp of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) CreateTimestamp() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("create_timestamp"))
}

// Description returns a reference to field description of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("description"))
}

// ForceStop returns a reference to field force_stop of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) ForceStop() terra.BoolValue {
	return terra.ReferenceAsBool(aka.ref.Append("force_stop"))
}

// Id returns a reference to field id of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("id"))
}

// LastUpdateTimestamp returns a reference to field last_update_timestamp of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) LastUpdateTimestamp() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("last_update_timestamp"))
}

// Name returns a reference to field name of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("name"))
}

// RuntimeEnvironment returns a reference to field runtime_environment of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) RuntimeEnvironment() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("runtime_environment"))
}

// ServiceExecutionRole returns a reference to field service_execution_role of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) ServiceExecutionRole() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("service_execution_role"))
}

// StartApplication returns a reference to field start_application of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) StartApplication() terra.BoolValue {
	return terra.ReferenceAsBool(aka.ref.Append("start_application"))
}

// Status returns a reference to field status of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aka.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aka.ref.Append("tags_all"))
}

// VersionId returns a reference to field version_id of aws_kinesisanalyticsv2_application.
func (aka awsKinesisanalyticsv2ApplicationAttributes) VersionId() terra.NumberValue {
	return terra.ReferenceAsNumber(aka.ref.Append("version_id"))
}

func (aka awsKinesisanalyticsv2ApplicationAttributes) ApplicationConfiguration() terra.ListValue[ApplicationConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationConfigurationAttributes](aka.ref.Append("application_configuration"))
}

func (aka awsKinesisanalyticsv2ApplicationAttributes) CloudwatchLoggingOptions() terra.ListValue[CloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[CloudwatchLoggingOptionsAttributes](aka.ref.Append("cloudwatch_logging_options"))
}

func (aka awsKinesisanalyticsv2ApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aka.ref.Append("timeouts"))
}

type awsKinesisanalyticsv2ApplicationState struct {
	Arn                      string                          `json:"arn"`
	CreateTimestamp          string                          `json:"create_timestamp"`
	Description              string                          `json:"description"`
	ForceStop                bool                            `json:"force_stop"`
	Id                       string                          `json:"id"`
	LastUpdateTimestamp      string                          `json:"last_update_timestamp"`
	Name                     string                          `json:"name"`
	RuntimeEnvironment       string                          `json:"runtime_environment"`
	ServiceExecutionRole     string                          `json:"service_execution_role"`
	StartApplication         bool                            `json:"start_application"`
	Status                   string                          `json:"status"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	VersionId                float64                         `json:"version_id"`
	ApplicationConfiguration []ApplicationConfigurationState `json:"application_configuration"`
	CloudwatchLoggingOptions []CloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
