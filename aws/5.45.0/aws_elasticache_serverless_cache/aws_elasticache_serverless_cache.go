// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_serverless_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elasticache_serverless_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticacheServerlessCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aesc *Resource) Type() string {
	return "aws_elasticache_serverless_cache"
}

// LocalName returns the local name for [Resource].
func (aesc *Resource) LocalName() string {
	return aesc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aesc *Resource) Configuration() interface{} {
	return aesc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aesc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aesc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aesc *Resource) Dependencies() terra.Dependencies {
	return aesc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aesc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aesc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aesc *Resource) Attributes() awsElasticacheServerlessCacheAttributes {
	return awsElasticacheServerlessCacheAttributes{ref: terra.ReferenceResource(aesc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aesc *Resource) ImportState(state io.Reader) error {
	aesc.state = &awsElasticacheServerlessCacheState{}
	if err := json.NewDecoder(state).Decode(aesc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesc.Type(), aesc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aesc *Resource) State() (*awsElasticacheServerlessCacheState, bool) {
	return aesc.state, aesc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aesc *Resource) StateMust() *awsElasticacheServerlessCacheState {
	if aesc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesc.Type(), aesc.LocalName()))
	}
	return aesc.state
}

// Args contains the configurations for aws_elasticache_serverless_cache.
type Args struct {
	// DailySnapshotTime: string, optional
	DailySnapshotTime terra.StringValue `hcl:"daily_snapshot_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Engine: string, required
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MajorEngineVersion: string, optional
	MajorEngineVersion terra.StringValue `hcl:"major_engine_version,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SnapshotArnsToRestore: list of string, optional
	SnapshotArnsToRestore terra.ListValue[terra.StringValue] `hcl:"snapshot_arns_to_restore,attr"`
	// SnapshotRetentionLimit: number, optional
	SnapshotRetentionLimit terra.NumberValue `hcl:"snapshot_retention_limit,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UserGroupId: string, optional
	UserGroupId terra.StringValue `hcl:"user_group_id,attr"`
	// CacheUsageLimits: min=0
	CacheUsageLimits []CacheUsageLimits `hcl:"cache_usage_limits,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsElasticacheServerlessCacheAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("create_time"))
}

// DailySnapshotTime returns a reference to field daily_snapshot_time of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) DailySnapshotTime() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("daily_snapshot_time"))
}

// Description returns a reference to field description of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("description"))
}

// Engine returns a reference to field engine of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("engine"))
}

// FullEngineVersion returns a reference to field full_engine_version of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) FullEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("full_engine_version"))
}

// Id returns a reference to field id of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("kms_key_id"))
}

// MajorEngineVersion returns a reference to field major_engine_version of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) MajorEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("major_engine_version"))
}

// Name returns a reference to field name of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("name"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aesc.ref.Append("security_group_ids"))
}

// SnapshotArnsToRestore returns a reference to field snapshot_arns_to_restore of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) SnapshotArnsToRestore() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aesc.ref.Append("snapshot_arns_to_restore"))
}

// SnapshotRetentionLimit returns a reference to field snapshot_retention_limit of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) SnapshotRetentionLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(aesc.ref.Append("snapshot_retention_limit"))
}

// Status returns a reference to field status of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("status"))
}

// SubnetIds returns a reference to field subnet_ids of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aesc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aesc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aesc.ref.Append("tags_all"))
}

// UserGroupId returns a reference to field user_group_id of aws_elasticache_serverless_cache.
func (aesc awsElasticacheServerlessCacheAttributes) UserGroupId() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("user_group_id"))
}

func (aesc awsElasticacheServerlessCacheAttributes) Endpoint() terra.ListValue[EndpointAttributes] {
	return terra.ReferenceAsList[EndpointAttributes](aesc.ref.Append("endpoint"))
}

func (aesc awsElasticacheServerlessCacheAttributes) ReaderEndpoint() terra.ListValue[ReaderEndpointAttributes] {
	return terra.ReferenceAsList[ReaderEndpointAttributes](aesc.ref.Append("reader_endpoint"))
}

func (aesc awsElasticacheServerlessCacheAttributes) CacheUsageLimits() terra.ListValue[CacheUsageLimitsAttributes] {
	return terra.ReferenceAsList[CacheUsageLimitsAttributes](aesc.ref.Append("cache_usage_limits"))
}

func (aesc awsElasticacheServerlessCacheAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aesc.ref.Append("timeouts"))
}

type awsElasticacheServerlessCacheState struct {
	Arn                    string                  `json:"arn"`
	CreateTime             string                  `json:"create_time"`
	DailySnapshotTime      string                  `json:"daily_snapshot_time"`
	Description            string                  `json:"description"`
	Engine                 string                  `json:"engine"`
	FullEngineVersion      string                  `json:"full_engine_version"`
	Id                     string                  `json:"id"`
	KmsKeyId               string                  `json:"kms_key_id"`
	MajorEngineVersion     string                  `json:"major_engine_version"`
	Name                   string                  `json:"name"`
	SecurityGroupIds       []string                `json:"security_group_ids"`
	SnapshotArnsToRestore  []string                `json:"snapshot_arns_to_restore"`
	SnapshotRetentionLimit float64                 `json:"snapshot_retention_limit"`
	Status                 string                  `json:"status"`
	SubnetIds              []string                `json:"subnet_ids"`
	Tags                   map[string]string       `json:"tags"`
	TagsAll                map[string]string       `json:"tags_all"`
	UserGroupId            string                  `json:"user_group_id"`
	Endpoint               []EndpointState         `json:"endpoint"`
	ReaderEndpoint         []ReaderEndpointState   `json:"reader_endpoint"`
	CacheUsageLimits       []CacheUsageLimitsState `json:"cache_usage_limits"`
	Timeouts               *TimeoutsState          `json:"timeouts"`
}
