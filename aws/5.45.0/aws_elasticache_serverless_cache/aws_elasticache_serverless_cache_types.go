// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_serverless_cache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CacheUsageLimits struct {
	// CacheUsageLimitsDataStorage: min=0
	DataStorage []CacheUsageLimitsDataStorage `hcl:"data_storage,block" validate:"min=0"`
	// CacheUsageLimitsEcpuPerSecond: min=0
	EcpuPerSecond []CacheUsageLimitsEcpuPerSecond `hcl:"ecpu_per_second,block" validate:"min=0"`
}

type CacheUsageLimitsDataStorage struct {
	// Maximum: number, required
	Maximum terra.NumberValue `hcl:"maximum,attr" validate:"required"`
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
}

type CacheUsageLimitsEcpuPerSecond struct {
	// Maximum: number, required
	Maximum terra.NumberValue `hcl:"maximum,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EndpointAttributes struct {
	ref terra.Reference
}

func (e EndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EndpointAttributes) InternalWithRef(ref terra.Reference) EndpointAttributes {
	return EndpointAttributes{ref: ref}
}

func (e EndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e EndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

type ReaderEndpointAttributes struct {
	ref terra.Reference
}

func (re ReaderEndpointAttributes) InternalRef() (terra.Reference, error) {
	return re.ref, nil
}

func (re ReaderEndpointAttributes) InternalWithRef(ref terra.Reference) ReaderEndpointAttributes {
	return ReaderEndpointAttributes{ref: ref}
}

func (re ReaderEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return re.ref.InternalTokens()
}

func (re ReaderEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(re.ref.Append("address"))
}

func (re ReaderEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(re.ref.Append("port"))
}

type CacheUsageLimitsAttributes struct {
	ref terra.Reference
}

func (cul CacheUsageLimitsAttributes) InternalRef() (terra.Reference, error) {
	return cul.ref, nil
}

func (cul CacheUsageLimitsAttributes) InternalWithRef(ref terra.Reference) CacheUsageLimitsAttributes {
	return CacheUsageLimitsAttributes{ref: ref}
}

func (cul CacheUsageLimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cul.ref.InternalTokens()
}

func (cul CacheUsageLimitsAttributes) DataStorage() terra.ListValue[CacheUsageLimitsDataStorageAttributes] {
	return terra.ReferenceAsList[CacheUsageLimitsDataStorageAttributes](cul.ref.Append("data_storage"))
}

func (cul CacheUsageLimitsAttributes) EcpuPerSecond() terra.ListValue[CacheUsageLimitsEcpuPerSecondAttributes] {
	return terra.ReferenceAsList[CacheUsageLimitsEcpuPerSecondAttributes](cul.ref.Append("ecpu_per_second"))
}

type CacheUsageLimitsDataStorageAttributes struct {
	ref terra.Reference
}

func (ds CacheUsageLimitsDataStorageAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds CacheUsageLimitsDataStorageAttributes) InternalWithRef(ref terra.Reference) CacheUsageLimitsDataStorageAttributes {
	return CacheUsageLimitsDataStorageAttributes{ref: ref}
}

func (ds CacheUsageLimitsDataStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds CacheUsageLimitsDataStorageAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("maximum"))
}

func (ds CacheUsageLimitsDataStorageAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("unit"))
}

type CacheUsageLimitsEcpuPerSecondAttributes struct {
	ref terra.Reference
}

func (eps CacheUsageLimitsEcpuPerSecondAttributes) InternalRef() (terra.Reference, error) {
	return eps.ref, nil
}

func (eps CacheUsageLimitsEcpuPerSecondAttributes) InternalWithRef(ref terra.Reference) CacheUsageLimitsEcpuPerSecondAttributes {
	return CacheUsageLimitsEcpuPerSecondAttributes{ref: ref}
}

func (eps CacheUsageLimitsEcpuPerSecondAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eps.ref.InternalTokens()
}

func (eps CacheUsageLimitsEcpuPerSecondAttributes) Maximum() terra.NumberValue {
	return terra.ReferenceAsNumber(eps.ref.Append("maximum"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}

type ReaderEndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}

type CacheUsageLimitsState struct {
	DataStorage   []CacheUsageLimitsDataStorageState   `json:"data_storage"`
	EcpuPerSecond []CacheUsageLimitsEcpuPerSecondState `json:"ecpu_per_second"`
}

type CacheUsageLimitsDataStorageState struct {
	Maximum float64 `json:"maximum"`
	Unit    string  `json:"unit"`
}

type CacheUsageLimitsEcpuPerSecondState struct {
	Maximum float64 `json:"maximum"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
