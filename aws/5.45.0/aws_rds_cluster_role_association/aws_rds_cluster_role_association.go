// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_cluster_role_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rds_cluster_role_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRdsClusterRoleAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcra *Resource) Type() string {
	return "aws_rds_cluster_role_association"
}

// LocalName returns the local name for [Resource].
func (arcra *Resource) LocalName() string {
	return arcra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcra *Resource) Configuration() interface{} {
	return arcra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcra *Resource) Dependencies() terra.Dependencies {
	return arcra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcra *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcra *Resource) Attributes() awsRdsClusterRoleAssociationAttributes {
	return awsRdsClusterRoleAssociationAttributes{ref: terra.ReferenceResource(arcra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcra *Resource) ImportState(state io.Reader) error {
	arcra.state = &awsRdsClusterRoleAssociationState{}
	if err := json.NewDecoder(state).Decode(arcra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcra.Type(), arcra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcra *Resource) State() (*awsRdsClusterRoleAssociationState, bool) {
	return arcra.state, arcra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcra *Resource) StateMust() *awsRdsClusterRoleAssociationState {
	if arcra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcra.Type(), arcra.LocalName()))
	}
	return arcra.state
}

// Args contains the configurations for aws_rds_cluster_role_association.
type Args struct {
	// DbClusterIdentifier: string, required
	DbClusterIdentifier terra.StringValue `hcl:"db_cluster_identifier,attr" validate:"required"`
	// FeatureName: string, required
	FeatureName terra.StringValue `hcl:"feature_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRdsClusterRoleAssociationAttributes struct {
	ref terra.Reference
}

// DbClusterIdentifier returns a reference to field db_cluster_identifier of aws_rds_cluster_role_association.
func (arcra awsRdsClusterRoleAssociationAttributes) DbClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arcra.ref.Append("db_cluster_identifier"))
}

// FeatureName returns a reference to field feature_name of aws_rds_cluster_role_association.
func (arcra awsRdsClusterRoleAssociationAttributes) FeatureName() terra.StringValue {
	return terra.ReferenceAsString(arcra.ref.Append("feature_name"))
}

// Id returns a reference to field id of aws_rds_cluster_role_association.
func (arcra awsRdsClusterRoleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcra.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_rds_cluster_role_association.
func (arcra awsRdsClusterRoleAssociationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(arcra.ref.Append("role_arn"))
}

func (arcra awsRdsClusterRoleAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arcra.ref.Append("timeouts"))
}

type awsRdsClusterRoleAssociationState struct {
	DbClusterIdentifier string         `json:"db_cluster_identifier"`
	FeatureName         string         `json:"feature_name"`
	Id                  string         `json:"id"`
	RoleArn             string         `json:"role_arn"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
