// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_server.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ats *Resource) Type() string {
	return "aws_transfer_server"
}

// LocalName returns the local name for [Resource].
func (ats *Resource) LocalName() string {
	return ats.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ats *Resource) Configuration() interface{} {
	return ats.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ats *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ats)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ats *Resource) Dependencies() terra.Dependencies {
	return ats.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ats *Resource) LifecycleManagement() *terra.Lifecycle {
	return ats.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ats *Resource) Attributes() awsTransferServerAttributes {
	return awsTransferServerAttributes{ref: terra.ReferenceResource(ats)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ats *Resource) ImportState(state io.Reader) error {
	ats.state = &awsTransferServerState{}
	if err := json.NewDecoder(state).Decode(ats.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ats.Type(), ats.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ats *Resource) State() (*awsTransferServerState, bool) {
	return ats.state, ats.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ats *Resource) StateMust() *awsTransferServerState {
	if ats.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ats.Type(), ats.LocalName()))
	}
	return ats.state
}

// Args contains the configurations for aws_transfer_server.
type Args struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// DirectoryId: string, optional
	DirectoryId terra.StringValue `hcl:"directory_id,attr"`
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// EndpointType: string, optional
	EndpointType terra.StringValue `hcl:"endpoint_type,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Function: string, optional
	Function terra.StringValue `hcl:"function,attr"`
	// HostKey: string, optional
	HostKey terra.StringValue `hcl:"host_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityProviderType: string, optional
	IdentityProviderType terra.StringValue `hcl:"identity_provider_type,attr"`
	// InvocationRole: string, optional
	InvocationRole terra.StringValue `hcl:"invocation_role,attr"`
	// LoggingRole: string, optional
	LoggingRole terra.StringValue `hcl:"logging_role,attr"`
	// PostAuthenticationLoginBanner: string, optional
	PostAuthenticationLoginBanner terra.StringValue `hcl:"post_authentication_login_banner,attr"`
	// PreAuthenticationLoginBanner: string, optional
	PreAuthenticationLoginBanner terra.StringValue `hcl:"pre_authentication_login_banner,attr"`
	// Protocols: set of string, optional
	Protocols terra.SetValue[terra.StringValue] `hcl:"protocols,attr"`
	// SecurityPolicyName: string, optional
	SecurityPolicyName terra.StringValue `hcl:"security_policy_name,attr"`
	// StructuredLogDestinations: set of string, optional
	StructuredLogDestinations terra.SetValue[terra.StringValue] `hcl:"structured_log_destinations,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// EndpointDetails: optional
	EndpointDetails *EndpointDetails `hcl:"endpoint_details,block"`
	// ProtocolDetails: optional
	ProtocolDetails *ProtocolDetails `hcl:"protocol_details,block"`
	// S3StorageOptions: optional
	S3StorageOptions *S3StorageOptions `hcl:"s3_storage_options,block"`
	// WorkflowDetails: optional
	WorkflowDetails *WorkflowDetails `hcl:"workflow_details,block"`
}

type awsTransferServerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transfer_server.
func (ats awsTransferServerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("arn"))
}

// Certificate returns a reference to field certificate of aws_transfer_server.
func (ats awsTransferServerAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("certificate"))
}

// DirectoryId returns a reference to field directory_id of aws_transfer_server.
func (ats awsTransferServerAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("directory_id"))
}

// Domain returns a reference to field domain of aws_transfer_server.
func (ats awsTransferServerAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("domain"))
}

// Endpoint returns a reference to field endpoint of aws_transfer_server.
func (ats awsTransferServerAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("endpoint"))
}

// EndpointType returns a reference to field endpoint_type of aws_transfer_server.
func (ats awsTransferServerAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("endpoint_type"))
}

// ForceDestroy returns a reference to field force_destroy of aws_transfer_server.
func (ats awsTransferServerAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(ats.ref.Append("force_destroy"))
}

// Function returns a reference to field function of aws_transfer_server.
func (ats awsTransferServerAttributes) Function() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("function"))
}

// HostKey returns a reference to field host_key of aws_transfer_server.
func (ats awsTransferServerAttributes) HostKey() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("host_key"))
}

// HostKeyFingerprint returns a reference to field host_key_fingerprint of aws_transfer_server.
func (ats awsTransferServerAttributes) HostKeyFingerprint() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("host_key_fingerprint"))
}

// Id returns a reference to field id of aws_transfer_server.
func (ats awsTransferServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("id"))
}

// IdentityProviderType returns a reference to field identity_provider_type of aws_transfer_server.
func (ats awsTransferServerAttributes) IdentityProviderType() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("identity_provider_type"))
}

// InvocationRole returns a reference to field invocation_role of aws_transfer_server.
func (ats awsTransferServerAttributes) InvocationRole() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("invocation_role"))
}

// LoggingRole returns a reference to field logging_role of aws_transfer_server.
func (ats awsTransferServerAttributes) LoggingRole() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("logging_role"))
}

// PostAuthenticationLoginBanner returns a reference to field post_authentication_login_banner of aws_transfer_server.
func (ats awsTransferServerAttributes) PostAuthenticationLoginBanner() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("post_authentication_login_banner"))
}

// PreAuthenticationLoginBanner returns a reference to field pre_authentication_login_banner of aws_transfer_server.
func (ats awsTransferServerAttributes) PreAuthenticationLoginBanner() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("pre_authentication_login_banner"))
}

// Protocols returns a reference to field protocols of aws_transfer_server.
func (ats awsTransferServerAttributes) Protocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ats.ref.Append("protocols"))
}

// SecurityPolicyName returns a reference to field security_policy_name of aws_transfer_server.
func (ats awsTransferServerAttributes) SecurityPolicyName() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("security_policy_name"))
}

// StructuredLogDestinations returns a reference to field structured_log_destinations of aws_transfer_server.
func (ats awsTransferServerAttributes) StructuredLogDestinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ats.ref.Append("structured_log_destinations"))
}

// Tags returns a reference to field tags of aws_transfer_server.
func (ats awsTransferServerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ats.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_server.
func (ats awsTransferServerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ats.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_transfer_server.
func (ats awsTransferServerAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ats.ref.Append("url"))
}

func (ats awsTransferServerAttributes) EndpointDetails() terra.ListValue[EndpointDetailsAttributes] {
	return terra.ReferenceAsList[EndpointDetailsAttributes](ats.ref.Append("endpoint_details"))
}

func (ats awsTransferServerAttributes) ProtocolDetails() terra.ListValue[ProtocolDetailsAttributes] {
	return terra.ReferenceAsList[ProtocolDetailsAttributes](ats.ref.Append("protocol_details"))
}

func (ats awsTransferServerAttributes) S3StorageOptions() terra.ListValue[S3StorageOptionsAttributes] {
	return terra.ReferenceAsList[S3StorageOptionsAttributes](ats.ref.Append("s3_storage_options"))
}

func (ats awsTransferServerAttributes) WorkflowDetails() terra.ListValue[WorkflowDetailsAttributes] {
	return terra.ReferenceAsList[WorkflowDetailsAttributes](ats.ref.Append("workflow_details"))
}

type awsTransferServerState struct {
	Arn                           string                  `json:"arn"`
	Certificate                   string                  `json:"certificate"`
	DirectoryId                   string                  `json:"directory_id"`
	Domain                        string                  `json:"domain"`
	Endpoint                      string                  `json:"endpoint"`
	EndpointType                  string                  `json:"endpoint_type"`
	ForceDestroy                  bool                    `json:"force_destroy"`
	Function                      string                  `json:"function"`
	HostKey                       string                  `json:"host_key"`
	HostKeyFingerprint            string                  `json:"host_key_fingerprint"`
	Id                            string                  `json:"id"`
	IdentityProviderType          string                  `json:"identity_provider_type"`
	InvocationRole                string                  `json:"invocation_role"`
	LoggingRole                   string                  `json:"logging_role"`
	PostAuthenticationLoginBanner string                  `json:"post_authentication_login_banner"`
	PreAuthenticationLoginBanner  string                  `json:"pre_authentication_login_banner"`
	Protocols                     []string                `json:"protocols"`
	SecurityPolicyName            string                  `json:"security_policy_name"`
	StructuredLogDestinations     []string                `json:"structured_log_destinations"`
	Tags                          map[string]string       `json:"tags"`
	TagsAll                       map[string]string       `json:"tags_all"`
	Url                           string                  `json:"url"`
	EndpointDetails               []EndpointDetailsState  `json:"endpoint_details"`
	ProtocolDetails               []ProtocolDetailsState  `json:"protocol_details"`
	S3StorageOptions              []S3StorageOptionsState `json:"s3_storage_options"`
	WorkflowDetails               []WorkflowDetailsState  `json:"workflow_details"`
}
