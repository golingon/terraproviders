// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_account_setting_default

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecs_account_setting_default.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcsAccountSettingDefaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeasd *Resource) Type() string {
	return "aws_ecs_account_setting_default"
}

// LocalName returns the local name for [Resource].
func (aeasd *Resource) LocalName() string {
	return aeasd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeasd *Resource) Configuration() interface{} {
	return aeasd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeasd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeasd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeasd *Resource) Dependencies() terra.Dependencies {
	return aeasd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeasd *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeasd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeasd *Resource) Attributes() awsEcsAccountSettingDefaultAttributes {
	return awsEcsAccountSettingDefaultAttributes{ref: terra.ReferenceResource(aeasd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeasd *Resource) ImportState(state io.Reader) error {
	aeasd.state = &awsEcsAccountSettingDefaultState{}
	if err := json.NewDecoder(state).Decode(aeasd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeasd.Type(), aeasd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeasd *Resource) State() (*awsEcsAccountSettingDefaultState, bool) {
	return aeasd.state, aeasd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeasd *Resource) StateMust() *awsEcsAccountSettingDefaultState {
	if aeasd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeasd.Type(), aeasd.LocalName()))
	}
	return aeasd.state
}

// Args contains the configurations for aws_ecs_account_setting_default.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type awsEcsAccountSettingDefaultAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecs_account_setting_default.
func (aeasd awsEcsAccountSettingDefaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeasd.ref.Append("id"))
}

// Name returns a reference to field name of aws_ecs_account_setting_default.
func (aeasd awsEcsAccountSettingDefaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aeasd.ref.Append("name"))
}

// PrincipalArn returns a reference to field principal_arn of aws_ecs_account_setting_default.
func (aeasd awsEcsAccountSettingDefaultAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(aeasd.ref.Append("principal_arn"))
}

// Value returns a reference to field value of aws_ecs_account_setting_default.
func (aeasd awsEcsAccountSettingDefaultAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aeasd.ref.Append("value"))
}

type awsEcsAccountSettingDefaultState struct {
	Id           string `json:"id"`
	Name         string `json:"name"`
	PrincipalArn string `json:"principal_arn"`
	Value        string `json:"value"`
}
