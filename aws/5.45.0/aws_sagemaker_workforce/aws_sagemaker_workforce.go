// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_workforce

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_workforce.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerWorkforceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asw *Resource) Type() string {
	return "aws_sagemaker_workforce"
}

// LocalName returns the local name for [Resource].
func (asw *Resource) LocalName() string {
	return asw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asw *Resource) Configuration() interface{} {
	return asw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asw *Resource) Dependencies() terra.Dependencies {
	return asw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asw *Resource) LifecycleManagement() *terra.Lifecycle {
	return asw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asw *Resource) Attributes() awsSagemakerWorkforceAttributes {
	return awsSagemakerWorkforceAttributes{ref: terra.ReferenceResource(asw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asw *Resource) ImportState(state io.Reader) error {
	asw.state = &awsSagemakerWorkforceState{}
	if err := json.NewDecoder(state).Decode(asw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asw.Type(), asw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asw *Resource) State() (*awsSagemakerWorkforceState, bool) {
	return asw.state, asw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asw *Resource) StateMust() *awsSagemakerWorkforceState {
	if asw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asw.Type(), asw.LocalName()))
	}
	return asw.state
}

// Args contains the configurations for aws_sagemaker_workforce.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// WorkforceName: string, required
	WorkforceName terra.StringValue `hcl:"workforce_name,attr" validate:"required"`
	// CognitoConfig: optional
	CognitoConfig *CognitoConfig `hcl:"cognito_config,block"`
	// OidcConfig: optional
	OidcConfig *OidcConfig `hcl:"oidc_config,block"`
	// SourceIpConfig: optional
	SourceIpConfig *SourceIpConfig `hcl:"source_ip_config,block"`
	// WorkforceVpcConfig: optional
	WorkforceVpcConfig *WorkforceVpcConfig `hcl:"workforce_vpc_config,block"`
}

type awsSagemakerWorkforceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_workforce.
func (asw awsSagemakerWorkforceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sagemaker_workforce.
func (asw awsSagemakerWorkforceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("id"))
}

// Subdomain returns a reference to field subdomain of aws_sagemaker_workforce.
func (asw awsSagemakerWorkforceAttributes) Subdomain() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("subdomain"))
}

// WorkforceName returns a reference to field workforce_name of aws_sagemaker_workforce.
func (asw awsSagemakerWorkforceAttributes) WorkforceName() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("workforce_name"))
}

func (asw awsSagemakerWorkforceAttributes) CognitoConfig() terra.ListValue[CognitoConfigAttributes] {
	return terra.ReferenceAsList[CognitoConfigAttributes](asw.ref.Append("cognito_config"))
}

func (asw awsSagemakerWorkforceAttributes) OidcConfig() terra.ListValue[OidcConfigAttributes] {
	return terra.ReferenceAsList[OidcConfigAttributes](asw.ref.Append("oidc_config"))
}

func (asw awsSagemakerWorkforceAttributes) SourceIpConfig() terra.ListValue[SourceIpConfigAttributes] {
	return terra.ReferenceAsList[SourceIpConfigAttributes](asw.ref.Append("source_ip_config"))
}

func (asw awsSagemakerWorkforceAttributes) WorkforceVpcConfig() terra.ListValue[WorkforceVpcConfigAttributes] {
	return terra.ReferenceAsList[WorkforceVpcConfigAttributes](asw.ref.Append("workforce_vpc_config"))
}

type awsSagemakerWorkforceState struct {
	Arn                string                    `json:"arn"`
	Id                 string                    `json:"id"`
	Subdomain          string                    `json:"subdomain"`
	WorkforceName      string                    `json:"workforce_name"`
	CognitoConfig      []CognitoConfigState      `json:"cognito_config"`
	OidcConfig         []OidcConfigState         `json:"oidc_config"`
	SourceIpConfig     []SourceIpConfigState     `json:"source_ip_config"`
	WorkforceVpcConfig []WorkforceVpcConfigState `json:"workforce_vpc_config"`
}
