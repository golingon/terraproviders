// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_media_package_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_media_package_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMediaPackageChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ampc *Resource) Type() string {
	return "aws_media_package_channel"
}

// LocalName returns the local name for [Resource].
func (ampc *Resource) LocalName() string {
	return ampc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ampc *Resource) Configuration() interface{} {
	return ampc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ampc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ampc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ampc *Resource) Dependencies() terra.Dependencies {
	return ampc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ampc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ampc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ampc *Resource) Attributes() awsMediaPackageChannelAttributes {
	return awsMediaPackageChannelAttributes{ref: terra.ReferenceResource(ampc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ampc *Resource) ImportState(state io.Reader) error {
	ampc.state = &awsMediaPackageChannelState{}
	if err := json.NewDecoder(state).Decode(ampc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ampc.Type(), ampc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ampc *Resource) State() (*awsMediaPackageChannelState, bool) {
	return ampc.state, ampc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ampc *Resource) StateMust() *awsMediaPackageChannelState {
	if ampc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ampc.Type(), ampc.LocalName()))
	}
	return ampc.state
}

// Args contains the configurations for aws_media_package_channel.
type Args struct {
	// ChannelId: string, required
	ChannelId terra.StringValue `hcl:"channel_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsMediaPackageChannelAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ampc.ref.Append("arn"))
}

// ChannelId returns a reference to field channel_id of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceAsString(ampc.ref.Append("channel_id"))
}

// Description returns a reference to field description of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ampc.ref.Append("description"))
}

// Id returns a reference to field id of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ampc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ampc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_media_package_channel.
func (ampc awsMediaPackageChannelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ampc.ref.Append("tags_all"))
}

func (ampc awsMediaPackageChannelAttributes) HlsIngest() terra.ListValue[HlsIngestAttributes] {
	return terra.ReferenceAsList[HlsIngestAttributes](ampc.ref.Append("hls_ingest"))
}

type awsMediaPackageChannelState struct {
	Arn         string            `json:"arn"`
	ChannelId   string            `json:"channel_id"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	HlsIngest   []HlsIngestState  `json:"hls_ingest"`
}
