// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_analytics_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_analytics_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketAnalyticsConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbac *Resource) Type() string {
	return "aws_s3_bucket_analytics_configuration"
}

// LocalName returns the local name for [Resource].
func (asbac *Resource) LocalName() string {
	return asbac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbac *Resource) Configuration() interface{} {
	return asbac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbac *Resource) Dependencies() terra.Dependencies {
	return asbac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbac *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbac *Resource) Attributes() awsS3BucketAnalyticsConfigurationAttributes {
	return awsS3BucketAnalyticsConfigurationAttributes{ref: terra.ReferenceResource(asbac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbac *Resource) ImportState(state io.Reader) error {
	asbac.state = &awsS3BucketAnalyticsConfigurationState{}
	if err := json.NewDecoder(state).Decode(asbac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbac.Type(), asbac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbac *Resource) State() (*awsS3BucketAnalyticsConfigurationState, bool) {
	return asbac.state, asbac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbac *Resource) StateMust() *awsS3BucketAnalyticsConfigurationState {
	if asbac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbac.Type(), asbac.LocalName()))
	}
	return asbac.state
}

// Args contains the configurations for aws_s3_bucket_analytics_configuration.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// StorageClassAnalysis: optional
	StorageClassAnalysis *StorageClassAnalysis `hcl:"storage_class_analysis,block"`
}

type awsS3BucketAnalyticsConfigurationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_analytics_configuration.
func (asbac awsS3BucketAnalyticsConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbac.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_analytics_configuration.
func (asbac awsS3BucketAnalyticsConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbac.ref.Append("id"))
}

// Name returns a reference to field name of aws_s3_bucket_analytics_configuration.
func (asbac awsS3BucketAnalyticsConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asbac.ref.Append("name"))
}

func (asbac awsS3BucketAnalyticsConfigurationAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](asbac.ref.Append("filter"))
}

func (asbac awsS3BucketAnalyticsConfigurationAttributes) StorageClassAnalysis() terra.ListValue[StorageClassAnalysisAttributes] {
	return terra.ReferenceAsList[StorageClassAnalysisAttributes](asbac.ref.Append("storage_class_analysis"))
}

type awsS3BucketAnalyticsConfigurationState struct {
	Bucket               string                      `json:"bucket"`
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	Filter               []FilterState               `json:"filter"`
	StorageClassAnalysis []StorageClassAnalysisState `json:"storage_class_analysis"`
}
