// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_analytics_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Filter struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type StorageClassAnalysis struct {
	// StorageClassAnalysisDataExport: required
	DataExport *StorageClassAnalysisDataExport `hcl:"data_export,block" validate:"required"`
}

type StorageClassAnalysisDataExport struct {
	// OutputSchemaVersion: string, optional
	OutputSchemaVersion terra.StringValue `hcl:"output_schema_version,attr"`
	// StorageClassAnalysisDataExportDestination: required
	Destination *StorageClassAnalysisDataExportDestination `hcl:"destination,block" validate:"required"`
}

type StorageClassAnalysisDataExportDestination struct {
	// StorageClassAnalysisDataExportDestinationS3BucketDestination: required
	S3BucketDestination *StorageClassAnalysisDataExportDestinationS3BucketDestination `hcl:"s3_bucket_destination,block" validate:"required"`
}

type StorageClassAnalysisDataExportDestinationS3BucketDestination struct {
	// BucketAccountId: string, optional
	BucketAccountId terra.StringValue `hcl:"bucket_account_id,attr"`
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f FilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](f.ref.Append("tags"))
}

type StorageClassAnalysisAttributes struct {
	ref terra.Reference
}

func (sca StorageClassAnalysisAttributes) InternalRef() (terra.Reference, error) {
	return sca.ref, nil
}

func (sca StorageClassAnalysisAttributes) InternalWithRef(ref terra.Reference) StorageClassAnalysisAttributes {
	return StorageClassAnalysisAttributes{ref: ref}
}

func (sca StorageClassAnalysisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sca.ref.InternalTokens()
}

func (sca StorageClassAnalysisAttributes) DataExport() terra.ListValue[StorageClassAnalysisDataExportAttributes] {
	return terra.ReferenceAsList[StorageClassAnalysisDataExportAttributes](sca.ref.Append("data_export"))
}

type StorageClassAnalysisDataExportAttributes struct {
	ref terra.Reference
}

func (de StorageClassAnalysisDataExportAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de StorageClassAnalysisDataExportAttributes) InternalWithRef(ref terra.Reference) StorageClassAnalysisDataExportAttributes {
	return StorageClassAnalysisDataExportAttributes{ref: ref}
}

func (de StorageClassAnalysisDataExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de StorageClassAnalysisDataExportAttributes) OutputSchemaVersion() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("output_schema_version"))
}

func (de StorageClassAnalysisDataExportAttributes) Destination() terra.ListValue[StorageClassAnalysisDataExportDestinationAttributes] {
	return terra.ReferenceAsList[StorageClassAnalysisDataExportDestinationAttributes](de.ref.Append("destination"))
}

type StorageClassAnalysisDataExportDestinationAttributes struct {
	ref terra.Reference
}

func (d StorageClassAnalysisDataExportDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d StorageClassAnalysisDataExportDestinationAttributes) InternalWithRef(ref terra.Reference) StorageClassAnalysisDataExportDestinationAttributes {
	return StorageClassAnalysisDataExportDestinationAttributes{ref: ref}
}

func (d StorageClassAnalysisDataExportDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d StorageClassAnalysisDataExportDestinationAttributes) S3BucketDestination() terra.ListValue[StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes] {
	return terra.ReferenceAsList[StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes](d.ref.Append("s3_bucket_destination"))
}

type StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes struct {
	ref terra.Reference
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalRef() (terra.Reference, error) {
	return sbd.ref, nil
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalWithRef(ref terra.Reference) StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes {
	return StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes{ref: ref}
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbd.ref.InternalTokens()
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) BucketAccountId() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("bucket_account_id"))
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("bucket_arn"))
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("format"))
}

func (sbd StorageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("prefix"))
}

type FilterState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type StorageClassAnalysisState struct {
	DataExport []StorageClassAnalysisDataExportState `json:"data_export"`
}

type StorageClassAnalysisDataExportState struct {
	OutputSchemaVersion string                                           `json:"output_schema_version"`
	Destination         []StorageClassAnalysisDataExportDestinationState `json:"destination"`
}

type StorageClassAnalysisDataExportDestinationState struct {
	S3BucketDestination []StorageClassAnalysisDataExportDestinationS3BucketDestinationState `json:"s3_bucket_destination"`
}

type StorageClassAnalysisDataExportDestinationS3BucketDestinationState struct {
	BucketAccountId string `json:"bucket_account_id"`
	BucketArn       string `json:"bucket_arn"`
	Format          string `json:"format"`
	Prefix          string `json:"prefix"`
}
