// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_rule_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_rule_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverRuleAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrra *Resource) Type() string {
	return "aws_route53_resolver_rule_association"
}

// LocalName returns the local name for [Resource].
func (arrra *Resource) LocalName() string {
	return arrra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrra *Resource) Configuration() interface{} {
	return arrra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrra *Resource) Dependencies() terra.Dependencies {
	return arrra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrra *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrra *Resource) Attributes() awsRoute53ResolverRuleAssociationAttributes {
	return awsRoute53ResolverRuleAssociationAttributes{ref: terra.ReferenceResource(arrra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrra *Resource) ImportState(state io.Reader) error {
	arrra.state = &awsRoute53ResolverRuleAssociationState{}
	if err := json.NewDecoder(state).Decode(arrra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrra.Type(), arrra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrra *Resource) State() (*awsRoute53ResolverRuleAssociationState, bool) {
	return arrra.state, arrra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrra *Resource) StateMust() *awsRoute53ResolverRuleAssociationState {
	if arrra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrra.Type(), arrra.LocalName()))
	}
	return arrra.state
}

// Args contains the configurations for aws_route53_resolver_rule_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResolverRuleId: string, required
	ResolverRuleId terra.StringValue `hcl:"resolver_rule_id,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRoute53ResolverRuleAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_route53_resolver_rule_association.
func (arrra awsRoute53ResolverRuleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrra.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_resolver_rule_association.
func (arrra awsRoute53ResolverRuleAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arrra.ref.Append("name"))
}

// ResolverRuleId returns a reference to field resolver_rule_id of aws_route53_resolver_rule_association.
func (arrra awsRoute53ResolverRuleAssociationAttributes) ResolverRuleId() terra.StringValue {
	return terra.ReferenceAsString(arrra.ref.Append("resolver_rule_id"))
}

// VpcId returns a reference to field vpc_id of aws_route53_resolver_rule_association.
func (arrra awsRoute53ResolverRuleAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(arrra.ref.Append("vpc_id"))
}

func (arrra awsRoute53ResolverRuleAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arrra.ref.Append("timeouts"))
}

type awsRoute53ResolverRuleAssociationState struct {
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	ResolverRuleId string         `json:"resolver_rule_id"`
	VpcId          string         `json:"vpc_id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
