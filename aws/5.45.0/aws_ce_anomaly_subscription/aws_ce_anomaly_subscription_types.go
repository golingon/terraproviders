// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_anomaly_subscription

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Subscriber struct {
	// Address: string, required
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ThresholdExpression struct {
	// ThresholdExpressionAnd: min=0
	And []ThresholdExpressionAnd `hcl:"and,block" validate:"min=0"`
	// ThresholdExpressionCostCategory: optional
	CostCategory *ThresholdExpressionCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionDimension: optional
	Dimension *ThresholdExpressionDimension `hcl:"dimension,block"`
	// ThresholdExpressionNot: optional
	Not *ThresholdExpressionNot `hcl:"not,block"`
	// ThresholdExpressionOr: min=0
	Or []ThresholdExpressionOr `hcl:"or,block" validate:"min=0"`
	// ThresholdExpressionTags: optional
	Tags *ThresholdExpressionTags `hcl:"tags,block"`
}

type ThresholdExpressionAnd struct {
	// ThresholdExpressionAndCostCategory: optional
	CostCategory *ThresholdExpressionAndCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionAndDimension: optional
	Dimension *ThresholdExpressionAndDimension `hcl:"dimension,block"`
	// ThresholdExpressionAndTags: optional
	Tags *ThresholdExpressionAndTags `hcl:"tags,block"`
}

type ThresholdExpressionAndCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionAndDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionAndTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNot struct {
	// ThresholdExpressionNotCostCategory: optional
	CostCategory *ThresholdExpressionNotCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionNotDimension: optional
	Dimension *ThresholdExpressionNotDimension `hcl:"dimension,block"`
	// ThresholdExpressionNotTags: optional
	Tags *ThresholdExpressionNotTags `hcl:"tags,block"`
}

type ThresholdExpressionNotCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNotDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNotTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOr struct {
	// ThresholdExpressionOrCostCategory: optional
	CostCategory *ThresholdExpressionOrCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionOrDimension: optional
	Dimension *ThresholdExpressionOrDimension `hcl:"dimension,block"`
	// ThresholdExpressionOrTags: optional
	Tags *ThresholdExpressionOrTags `hcl:"tags,block"`
}

type ThresholdExpressionOrCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOrDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOrTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type SubscriberAttributes struct {
	ref terra.Reference
}

func (s SubscriberAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubscriberAttributes) InternalWithRef(ref terra.Reference) SubscriberAttributes {
	return SubscriberAttributes{ref: ref}
}

func (s SubscriberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubscriberAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("address"))
}

func (s SubscriberAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type ThresholdExpressionAttributes struct {
	ref terra.Reference
}

func (te ThresholdExpressionAttributes) InternalRef() (terra.Reference, error) {
	return te.ref, nil
}

func (te ThresholdExpressionAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionAttributes {
	return ThresholdExpressionAttributes{ref: ref}
}

func (te ThresholdExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return te.ref.InternalTokens()
}

func (te ThresholdExpressionAttributes) And() terra.SetValue[ThresholdExpressionAndAttributes] {
	return terra.ReferenceAsSet[ThresholdExpressionAndAttributes](te.ref.Append("and"))
}

func (te ThresholdExpressionAttributes) CostCategory() terra.ListValue[ThresholdExpressionCostCategoryAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionCostCategoryAttributes](te.ref.Append("cost_category"))
}

func (te ThresholdExpressionAttributes) Dimension() terra.ListValue[ThresholdExpressionDimensionAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionDimensionAttributes](te.ref.Append("dimension"))
}

func (te ThresholdExpressionAttributes) Not() terra.ListValue[ThresholdExpressionNotAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionNotAttributes](te.ref.Append("not"))
}

func (te ThresholdExpressionAttributes) Or() terra.SetValue[ThresholdExpressionOrAttributes] {
	return terra.ReferenceAsSet[ThresholdExpressionOrAttributes](te.ref.Append("or"))
}

func (te ThresholdExpressionAttributes) Tags() terra.ListValue[ThresholdExpressionTagsAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionTagsAttributes](te.ref.Append("tags"))
}

type ThresholdExpressionAndAttributes struct {
	ref terra.Reference
}

func (a ThresholdExpressionAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ThresholdExpressionAndAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionAndAttributes {
	return ThresholdExpressionAndAttributes{ref: ref}
}

func (a ThresholdExpressionAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ThresholdExpressionAndAttributes) CostCategory() terra.ListValue[ThresholdExpressionAndCostCategoryAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionAndCostCategoryAttributes](a.ref.Append("cost_category"))
}

func (a ThresholdExpressionAndAttributes) Dimension() terra.ListValue[ThresholdExpressionAndDimensionAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionAndDimensionAttributes](a.ref.Append("dimension"))
}

func (a ThresholdExpressionAndAttributes) Tags() terra.ListValue[ThresholdExpressionAndTagsAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionAndTagsAttributes](a.ref.Append("tags"))
}

type ThresholdExpressionAndCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc ThresholdExpressionAndCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ThresholdExpressionAndCostCategoryAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionAndCostCategoryAttributes {
	return ThresholdExpressionAndCostCategoryAttributes{ref: ref}
}

func (cc ThresholdExpressionAndCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ThresholdExpressionAndCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc ThresholdExpressionAndCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc ThresholdExpressionAndCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type ThresholdExpressionAndDimensionAttributes struct {
	ref terra.Reference
}

func (d ThresholdExpressionAndDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ThresholdExpressionAndDimensionAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionAndDimensionAttributes {
	return ThresholdExpressionAndDimensionAttributes{ref: ref}
}

func (d ThresholdExpressionAndDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ThresholdExpressionAndDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d ThresholdExpressionAndDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d ThresholdExpressionAndDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type ThresholdExpressionAndTagsAttributes struct {
	ref terra.Reference
}

func (t ThresholdExpressionAndTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ThresholdExpressionAndTagsAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionAndTagsAttributes {
	return ThresholdExpressionAndTagsAttributes{ref: ref}
}

func (t ThresholdExpressionAndTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ThresholdExpressionAndTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ThresholdExpressionAndTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t ThresholdExpressionAndTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type ThresholdExpressionCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc ThresholdExpressionCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ThresholdExpressionCostCategoryAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionCostCategoryAttributes {
	return ThresholdExpressionCostCategoryAttributes{ref: ref}
}

func (cc ThresholdExpressionCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ThresholdExpressionCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc ThresholdExpressionCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc ThresholdExpressionCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type ThresholdExpressionDimensionAttributes struct {
	ref terra.Reference
}

func (d ThresholdExpressionDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ThresholdExpressionDimensionAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionDimensionAttributes {
	return ThresholdExpressionDimensionAttributes{ref: ref}
}

func (d ThresholdExpressionDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ThresholdExpressionDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d ThresholdExpressionDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d ThresholdExpressionDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type ThresholdExpressionNotAttributes struct {
	ref terra.Reference
}

func (n ThresholdExpressionNotAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n ThresholdExpressionNotAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionNotAttributes {
	return ThresholdExpressionNotAttributes{ref: ref}
}

func (n ThresholdExpressionNotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n ThresholdExpressionNotAttributes) CostCategory() terra.ListValue[ThresholdExpressionNotCostCategoryAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionNotCostCategoryAttributes](n.ref.Append("cost_category"))
}

func (n ThresholdExpressionNotAttributes) Dimension() terra.ListValue[ThresholdExpressionNotDimensionAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionNotDimensionAttributes](n.ref.Append("dimension"))
}

func (n ThresholdExpressionNotAttributes) Tags() terra.ListValue[ThresholdExpressionNotTagsAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionNotTagsAttributes](n.ref.Append("tags"))
}

type ThresholdExpressionNotCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc ThresholdExpressionNotCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ThresholdExpressionNotCostCategoryAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionNotCostCategoryAttributes {
	return ThresholdExpressionNotCostCategoryAttributes{ref: ref}
}

func (cc ThresholdExpressionNotCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ThresholdExpressionNotCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc ThresholdExpressionNotCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc ThresholdExpressionNotCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type ThresholdExpressionNotDimensionAttributes struct {
	ref terra.Reference
}

func (d ThresholdExpressionNotDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ThresholdExpressionNotDimensionAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionNotDimensionAttributes {
	return ThresholdExpressionNotDimensionAttributes{ref: ref}
}

func (d ThresholdExpressionNotDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ThresholdExpressionNotDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d ThresholdExpressionNotDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d ThresholdExpressionNotDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type ThresholdExpressionNotTagsAttributes struct {
	ref terra.Reference
}

func (t ThresholdExpressionNotTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ThresholdExpressionNotTagsAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionNotTagsAttributes {
	return ThresholdExpressionNotTagsAttributes{ref: ref}
}

func (t ThresholdExpressionNotTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ThresholdExpressionNotTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ThresholdExpressionNotTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t ThresholdExpressionNotTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type ThresholdExpressionOrAttributes struct {
	ref terra.Reference
}

func (o ThresholdExpressionOrAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o ThresholdExpressionOrAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionOrAttributes {
	return ThresholdExpressionOrAttributes{ref: ref}
}

func (o ThresholdExpressionOrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o ThresholdExpressionOrAttributes) CostCategory() terra.ListValue[ThresholdExpressionOrCostCategoryAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionOrCostCategoryAttributes](o.ref.Append("cost_category"))
}

func (o ThresholdExpressionOrAttributes) Dimension() terra.ListValue[ThresholdExpressionOrDimensionAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionOrDimensionAttributes](o.ref.Append("dimension"))
}

func (o ThresholdExpressionOrAttributes) Tags() terra.ListValue[ThresholdExpressionOrTagsAttributes] {
	return terra.ReferenceAsList[ThresholdExpressionOrTagsAttributes](o.ref.Append("tags"))
}

type ThresholdExpressionOrCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc ThresholdExpressionOrCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ThresholdExpressionOrCostCategoryAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionOrCostCategoryAttributes {
	return ThresholdExpressionOrCostCategoryAttributes{ref: ref}
}

func (cc ThresholdExpressionOrCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ThresholdExpressionOrCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc ThresholdExpressionOrCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc ThresholdExpressionOrCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type ThresholdExpressionOrDimensionAttributes struct {
	ref terra.Reference
}

func (d ThresholdExpressionOrDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ThresholdExpressionOrDimensionAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionOrDimensionAttributes {
	return ThresholdExpressionOrDimensionAttributes{ref: ref}
}

func (d ThresholdExpressionOrDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ThresholdExpressionOrDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d ThresholdExpressionOrDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d ThresholdExpressionOrDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type ThresholdExpressionOrTagsAttributes struct {
	ref terra.Reference
}

func (t ThresholdExpressionOrTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ThresholdExpressionOrTagsAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionOrTagsAttributes {
	return ThresholdExpressionOrTagsAttributes{ref: ref}
}

func (t ThresholdExpressionOrTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ThresholdExpressionOrTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ThresholdExpressionOrTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t ThresholdExpressionOrTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type ThresholdExpressionTagsAttributes struct {
	ref terra.Reference
}

func (t ThresholdExpressionTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ThresholdExpressionTagsAttributes) InternalWithRef(ref terra.Reference) ThresholdExpressionTagsAttributes {
	return ThresholdExpressionTagsAttributes{ref: ref}
}

func (t ThresholdExpressionTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ThresholdExpressionTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ThresholdExpressionTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t ThresholdExpressionTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type SubscriberState struct {
	Address string `json:"address"`
	Type    string `json:"type"`
}

type ThresholdExpressionState struct {
	And          []ThresholdExpressionAndState          `json:"and"`
	CostCategory []ThresholdExpressionCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionDimensionState    `json:"dimension"`
	Not          []ThresholdExpressionNotState          `json:"not"`
	Or           []ThresholdExpressionOrState           `json:"or"`
	Tags         []ThresholdExpressionTagsState         `json:"tags"`
}

type ThresholdExpressionAndState struct {
	CostCategory []ThresholdExpressionAndCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionAndDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionAndTagsState         `json:"tags"`
}

type ThresholdExpressionAndCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionAndDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionAndTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotState struct {
	CostCategory []ThresholdExpressionNotCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionNotDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionNotTagsState         `json:"tags"`
}

type ThresholdExpressionNotCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrState struct {
	CostCategory []ThresholdExpressionOrCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionOrDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionOrTagsState         `json:"tags"`
}

type ThresholdExpressionOrCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}
