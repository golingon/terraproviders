// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_thing_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_thing_type.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotThingTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aitt *Resource) Type() string {
	return "aws_iot_thing_type"
}

// LocalName returns the local name for [Resource].
func (aitt *Resource) LocalName() string {
	return aitt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aitt *Resource) Configuration() interface{} {
	return aitt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aitt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aitt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aitt *Resource) Dependencies() terra.Dependencies {
	return aitt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aitt *Resource) LifecycleManagement() *terra.Lifecycle {
	return aitt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aitt *Resource) Attributes() awsIotThingTypeAttributes {
	return awsIotThingTypeAttributes{ref: terra.ReferenceResource(aitt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aitt *Resource) ImportState(state io.Reader) error {
	aitt.state = &awsIotThingTypeState{}
	if err := json.NewDecoder(state).Decode(aitt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aitt.Type(), aitt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aitt *Resource) State() (*awsIotThingTypeState, bool) {
	return aitt.state, aitt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aitt *Resource) StateMust() *awsIotThingTypeState {
	if aitt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aitt.Type(), aitt.LocalName()))
	}
	return aitt.state
}

// Args contains the configurations for aws_iot_thing_type.
type Args struct {
	// Deprecated: bool, optional
	Deprecated terra.BoolValue `hcl:"deprecated,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Properties: optional
	Properties *Properties `hcl:"properties,block"`
}

type awsIotThingTypeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aitt.ref.Append("arn"))
}

// Deprecated returns a reference to field deprecated of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) Deprecated() terra.BoolValue {
	return terra.ReferenceAsBool(aitt.ref.Append("deprecated"))
}

// Id returns a reference to field id of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aitt.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aitt.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aitt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_thing_type.
func (aitt awsIotThingTypeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aitt.ref.Append("tags_all"))
}

func (aitt awsIotThingTypeAttributes) Properties() terra.ListValue[PropertiesAttributes] {
	return terra.ReferenceAsList[PropertiesAttributes](aitt.ref.Append("properties"))
}

type awsIotThingTypeState struct {
	Arn        string            `json:"arn"`
	Deprecated bool              `json:"deprecated"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
	Properties []PropertiesState `json:"properties"`
}
