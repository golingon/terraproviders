// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_launch

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_evidently_launch.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEvidentlyLaunchState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ael *Resource) Type() string {
	return "aws_evidently_launch"
}

// LocalName returns the local name for [Resource].
func (ael *Resource) LocalName() string {
	return ael.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ael *Resource) Configuration() interface{} {
	return ael.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ael *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ael)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ael *Resource) Dependencies() terra.Dependencies {
	return ael.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ael *Resource) LifecycleManagement() *terra.Lifecycle {
	return ael.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ael *Resource) Attributes() awsEvidentlyLaunchAttributes {
	return awsEvidentlyLaunchAttributes{ref: terra.ReferenceResource(ael)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ael *Resource) ImportState(state io.Reader) error {
	ael.state = &awsEvidentlyLaunchState{}
	if err := json.NewDecoder(state).Decode(ael.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ael.Type(), ael.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ael *Resource) State() (*awsEvidentlyLaunchState, bool) {
	return ael.state, ael.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ael *Resource) StateMust() *awsEvidentlyLaunchState {
	if ael.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ael.Type(), ael.LocalName()))
	}
	return ael.state
}

// Args contains the configurations for aws_evidently_launch.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// RandomizationSalt: string, optional
	RandomizationSalt terra.StringValue `hcl:"randomization_salt,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Groups: min=1,max=5
	Groups []Groups `hcl:"groups,block" validate:"min=1,max=5"`
	// MetricMonitors: min=0,max=3
	MetricMonitors []MetricMonitors `hcl:"metric_monitors,block" validate:"min=0,max=3"`
	// ScheduledSplitsConfig: optional
	ScheduledSplitsConfig *ScheduledSplitsConfig `hcl:"scheduled_splits_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEvidentlyLaunchAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("arn"))
}

// CreatedTime returns a reference to field created_time of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("created_time"))
}

// Description returns a reference to field description of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("description"))
}

// Id returns a reference to field id of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("name"))
}

// Project returns a reference to field project of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("project"))
}

// RandomizationSalt returns a reference to field randomization_salt of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) RandomizationSalt() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("randomization_salt"))
}

// Status returns a reference to field status of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ael.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ael.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_evidently_launch.
func (ael awsEvidentlyLaunchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ael.ref.Append("type"))
}

func (ael awsEvidentlyLaunchAttributes) Execution() terra.ListValue[ExecutionAttributes] {
	return terra.ReferenceAsList[ExecutionAttributes](ael.ref.Append("execution"))
}

func (ael awsEvidentlyLaunchAttributes) Groups() terra.ListValue[GroupsAttributes] {
	return terra.ReferenceAsList[GroupsAttributes](ael.ref.Append("groups"))
}

func (ael awsEvidentlyLaunchAttributes) MetricMonitors() terra.ListValue[MetricMonitorsAttributes] {
	return terra.ReferenceAsList[MetricMonitorsAttributes](ael.ref.Append("metric_monitors"))
}

func (ael awsEvidentlyLaunchAttributes) ScheduledSplitsConfig() terra.ListValue[ScheduledSplitsConfigAttributes] {
	return terra.ReferenceAsList[ScheduledSplitsConfigAttributes](ael.ref.Append("scheduled_splits_config"))
}

func (ael awsEvidentlyLaunchAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ael.ref.Append("timeouts"))
}

type awsEvidentlyLaunchState struct {
	Arn                   string                       `json:"arn"`
	CreatedTime           string                       `json:"created_time"`
	Description           string                       `json:"description"`
	Id                    string                       `json:"id"`
	LastUpdatedTime       string                       `json:"last_updated_time"`
	Name                  string                       `json:"name"`
	Project               string                       `json:"project"`
	RandomizationSalt     string                       `json:"randomization_salt"`
	Status                string                       `json:"status"`
	StatusReason          string                       `json:"status_reason"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	Type                  string                       `json:"type"`
	Execution             []ExecutionState             `json:"execution"`
	Groups                []GroupsState                `json:"groups"`
	MetricMonitors        []MetricMonitorsState        `json:"metric_monitors"`
	ScheduledSplitsConfig []ScheduledSplitsConfigState `json:"scheduled_splits_config"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
