// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_launch

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Groups struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Feature: string, required
	Feature terra.StringValue `hcl:"feature,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Variation: string, required
	Variation terra.StringValue `hcl:"variation,attr" validate:"required"`
}

type MetricMonitors struct {
	// MetricMonitorsMetricDefinition: required
	MetricDefinition *MetricMonitorsMetricDefinition `hcl:"metric_definition,block" validate:"required"`
}

type MetricMonitorsMetricDefinition struct {
	// EntityIdKey: string, required
	EntityIdKey terra.StringValue `hcl:"entity_id_key,attr" validate:"required"`
	// EventPattern: string, optional
	EventPattern terra.StringValue `hcl:"event_pattern,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UnitLabel: string, optional
	UnitLabel terra.StringValue `hcl:"unit_label,attr"`
	// ValueKey: string, required
	ValueKey terra.StringValue `hcl:"value_key,attr" validate:"required"`
}

type ScheduledSplitsConfig struct {
	// ScheduledSplitsConfigSteps: min=1,max=6
	Steps []ScheduledSplitsConfigSteps `hcl:"steps,block" validate:"min=1,max=6"`
}

type ScheduledSplitsConfigSteps struct {
	// GroupWeights: map of number, required
	GroupWeights terra.MapValue[terra.NumberValue] `hcl:"group_weights,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// ScheduledSplitsConfigStepsSegmentOverrides: min=0,max=6
	SegmentOverrides []ScheduledSplitsConfigStepsSegmentOverrides `hcl:"segment_overrides,block" validate:"min=0,max=6"`
}

type ScheduledSplitsConfigStepsSegmentOverrides struct {
	// EvaluationOrder: number, required
	EvaluationOrder terra.NumberValue `hcl:"evaluation_order,attr" validate:"required"`
	// Segment: string, required
	Segment terra.StringValue `hcl:"segment,attr" validate:"required"`
	// Weights: map of number, required
	Weights terra.MapValue[terra.NumberValue] `hcl:"weights,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ExecutionAttributes struct {
	ref terra.Reference
}

func (e ExecutionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExecutionAttributes) InternalWithRef(ref terra.Reference) ExecutionAttributes {
	return ExecutionAttributes{ref: ref}
}

func (e ExecutionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExecutionAttributes) EndedTime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ended_time"))
}

func (e ExecutionAttributes) StartedTime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("started_time"))
}

type GroupsAttributes struct {
	ref terra.Reference
}

func (g GroupsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GroupsAttributes) InternalWithRef(ref terra.Reference) GroupsAttributes {
	return GroupsAttributes{ref: ref}
}

func (g GroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GroupsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

func (g GroupsAttributes) Feature() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("feature"))
}

func (g GroupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g GroupsAttributes) Variation() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("variation"))
}

type MetricMonitorsAttributes struct {
	ref terra.Reference
}

func (mm MetricMonitorsAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MetricMonitorsAttributes) InternalWithRef(ref terra.Reference) MetricMonitorsAttributes {
	return MetricMonitorsAttributes{ref: ref}
}

func (mm MetricMonitorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm MetricMonitorsAttributes) MetricDefinition() terra.ListValue[MetricMonitorsMetricDefinitionAttributes] {
	return terra.ReferenceAsList[MetricMonitorsMetricDefinitionAttributes](mm.ref.Append("metric_definition"))
}

type MetricMonitorsMetricDefinitionAttributes struct {
	ref terra.Reference
}

func (md MetricMonitorsMetricDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md MetricMonitorsMetricDefinitionAttributes) InternalWithRef(ref terra.Reference) MetricMonitorsMetricDefinitionAttributes {
	return MetricMonitorsMetricDefinitionAttributes{ref: ref}
}

func (md MetricMonitorsMetricDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md MetricMonitorsMetricDefinitionAttributes) EntityIdKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("entity_id_key"))
}

func (md MetricMonitorsMetricDefinitionAttributes) EventPattern() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("event_pattern"))
}

func (md MetricMonitorsMetricDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("name"))
}

func (md MetricMonitorsMetricDefinitionAttributes) UnitLabel() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("unit_label"))
}

func (md MetricMonitorsMetricDefinitionAttributes) ValueKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("value_key"))
}

type ScheduledSplitsConfigAttributes struct {
	ref terra.Reference
}

func (ssc ScheduledSplitsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc ScheduledSplitsConfigAttributes) InternalWithRef(ref terra.Reference) ScheduledSplitsConfigAttributes {
	return ScheduledSplitsConfigAttributes{ref: ref}
}

func (ssc ScheduledSplitsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc ScheduledSplitsConfigAttributes) Steps() terra.ListValue[ScheduledSplitsConfigStepsAttributes] {
	return terra.ReferenceAsList[ScheduledSplitsConfigStepsAttributes](ssc.ref.Append("steps"))
}

type ScheduledSplitsConfigStepsAttributes struct {
	ref terra.Reference
}

func (s ScheduledSplitsConfigStepsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduledSplitsConfigStepsAttributes) InternalWithRef(ref terra.Reference) ScheduledSplitsConfigStepsAttributes {
	return ScheduledSplitsConfigStepsAttributes{ref: ref}
}

func (s ScheduledSplitsConfigStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduledSplitsConfigStepsAttributes) GroupWeights() terra.MapValue[terra.NumberValue] {
	return terra.ReferenceAsMap[terra.NumberValue](s.ref.Append("group_weights"))
}

func (s ScheduledSplitsConfigStepsAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

func (s ScheduledSplitsConfigStepsAttributes) SegmentOverrides() terra.ListValue[ScheduledSplitsConfigStepsSegmentOverridesAttributes] {
	return terra.ReferenceAsList[ScheduledSplitsConfigStepsSegmentOverridesAttributes](s.ref.Append("segment_overrides"))
}

type ScheduledSplitsConfigStepsSegmentOverridesAttributes struct {
	ref terra.Reference
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) InternalWithRef(ref terra.Reference) ScheduledSplitsConfigStepsSegmentOverridesAttributes {
	return ScheduledSplitsConfigStepsSegmentOverridesAttributes{ref: ref}
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) EvaluationOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("evaluation_order"))
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("segment"))
}

func (so ScheduledSplitsConfigStepsSegmentOverridesAttributes) Weights() terra.MapValue[terra.NumberValue] {
	return terra.ReferenceAsMap[terra.NumberValue](so.ref.Append("weights"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ExecutionState struct {
	EndedTime   string `json:"ended_time"`
	StartedTime string `json:"started_time"`
}

type GroupsState struct {
	Description string `json:"description"`
	Feature     string `json:"feature"`
	Name        string `json:"name"`
	Variation   string `json:"variation"`
}

type MetricMonitorsState struct {
	MetricDefinition []MetricMonitorsMetricDefinitionState `json:"metric_definition"`
}

type MetricMonitorsMetricDefinitionState struct {
	EntityIdKey  string `json:"entity_id_key"`
	EventPattern string `json:"event_pattern"`
	Name         string `json:"name"`
	UnitLabel    string `json:"unit_label"`
	ValueKey     string `json:"value_key"`
}

type ScheduledSplitsConfigState struct {
	Steps []ScheduledSplitsConfigStepsState `json:"steps"`
}

type ScheduledSplitsConfigStepsState struct {
	GroupWeights     map[string]float64                                `json:"group_weights"`
	StartTime        string                                            `json:"start_time"`
	SegmentOverrides []ScheduledSplitsConfigStepsSegmentOverridesState `json:"segment_overrides"`
}

type ScheduledSplitsConfigStepsSegmentOverridesState struct {
	EvaluationOrder float64            `json:"evaluation_order"`
	Segment         string             `json:"segment"`
	Weights         map[string]float64 `json:"weights"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
