// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_user_group_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elasticache_user_group_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticacheUserGroupAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeuga *Resource) Type() string {
	return "aws_elasticache_user_group_association"
}

// LocalName returns the local name for [Resource].
func (aeuga *Resource) LocalName() string {
	return aeuga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeuga *Resource) Configuration() interface{} {
	return aeuga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeuga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeuga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeuga *Resource) Dependencies() terra.Dependencies {
	return aeuga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeuga *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeuga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeuga *Resource) Attributes() awsElasticacheUserGroupAssociationAttributes {
	return awsElasticacheUserGroupAssociationAttributes{ref: terra.ReferenceResource(aeuga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeuga *Resource) ImportState(state io.Reader) error {
	aeuga.state = &awsElasticacheUserGroupAssociationState{}
	if err := json.NewDecoder(state).Decode(aeuga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeuga.Type(), aeuga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeuga *Resource) State() (*awsElasticacheUserGroupAssociationState, bool) {
	return aeuga.state, aeuga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeuga *Resource) StateMust() *awsElasticacheUserGroupAssociationState {
	if aeuga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeuga.Type(), aeuga.LocalName()))
	}
	return aeuga.state
}

// Args contains the configurations for aws_elasticache_user_group_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UserGroupId: string, required
	UserGroupId terra.StringValue `hcl:"user_group_id,attr" validate:"required"`
	// UserId: string, required
	UserId terra.StringValue `hcl:"user_id,attr" validate:"required"`
}

type awsElasticacheUserGroupAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_elasticache_user_group_association.
func (aeuga awsElasticacheUserGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeuga.ref.Append("id"))
}

// UserGroupId returns a reference to field user_group_id of aws_elasticache_user_group_association.
func (aeuga awsElasticacheUserGroupAssociationAttributes) UserGroupId() terra.StringValue {
	return terra.ReferenceAsString(aeuga.ref.Append("user_group_id"))
}

// UserId returns a reference to field user_id of aws_elasticache_user_group_association.
func (aeuga awsElasticacheUserGroupAssociationAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(aeuga.ref.Append("user_id"))
}

type awsElasticacheUserGroupAssociationState struct {
	Id          string `json:"id"`
	UserGroupId string `json:"user_group_id"`
	UserId      string `json:"user_id"`
}
