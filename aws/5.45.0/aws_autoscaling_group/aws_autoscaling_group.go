// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscaling_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aag *Resource) Type() string {
	return "aws_autoscaling_group"
}

// LocalName returns the local name for [Resource].
func (aag *Resource) LocalName() string {
	return aag.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aag *Resource) Configuration() interface{} {
	return aag.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aag *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aag)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aag *Resource) Dependencies() terra.Dependencies {
	return aag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aag *Resource) LifecycleManagement() *terra.Lifecycle {
	return aag.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aag *Resource) Attributes() awsAutoscalingGroupAttributes {
	return awsAutoscalingGroupAttributes{ref: terra.ReferenceResource(aag)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aag *Resource) ImportState(state io.Reader) error {
	aag.state = &awsAutoscalingGroupState{}
	if err := json.NewDecoder(state).Decode(aag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aag.Type(), aag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aag *Resource) State() (*awsAutoscalingGroupState, bool) {
	return aag.state, aag.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aag *Resource) StateMust() *awsAutoscalingGroupState {
	if aag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aag.Type(), aag.LocalName()))
	}
	return aag.state
}

// Args contains the configurations for aws_autoscaling_group.
type Args struct {
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// CapacityRebalance: bool, optional
	CapacityRebalance terra.BoolValue `hcl:"capacity_rebalance,attr"`
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// DefaultCooldown: number, optional
	DefaultCooldown terra.NumberValue `hcl:"default_cooldown,attr"`
	// DefaultInstanceWarmup: number, optional
	DefaultInstanceWarmup terra.NumberValue `hcl:"default_instance_warmup,attr"`
	// DesiredCapacity: number, optional
	DesiredCapacity terra.NumberValue `hcl:"desired_capacity,attr"`
	// DesiredCapacityType: string, optional
	DesiredCapacityType terra.StringValue `hcl:"desired_capacity_type,attr"`
	// EnabledMetrics: set of string, optional
	EnabledMetrics terra.SetValue[terra.StringValue] `hcl:"enabled_metrics,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// ForceDeleteWarmPool: bool, optional
	ForceDeleteWarmPool terra.BoolValue `hcl:"force_delete_warm_pool,attr"`
	// HealthCheckGracePeriod: number, optional
	HealthCheckGracePeriod terra.NumberValue `hcl:"health_check_grace_period,attr"`
	// HealthCheckType: string, optional
	HealthCheckType terra.StringValue `hcl:"health_check_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreFailedScalingActivities: bool, optional
	IgnoreFailedScalingActivities terra.BoolValue `hcl:"ignore_failed_scaling_activities,attr"`
	// LaunchConfiguration: string, optional
	LaunchConfiguration terra.StringValue `hcl:"launch_configuration,attr"`
	// LoadBalancers: set of string, optional
	LoadBalancers terra.SetValue[terra.StringValue] `hcl:"load_balancers,attr"`
	// MaxInstanceLifetime: number, optional
	MaxInstanceLifetime terra.NumberValue `hcl:"max_instance_lifetime,attr"`
	// MaxSize: number, required
	MaxSize terra.NumberValue `hcl:"max_size,attr" validate:"required"`
	// MetricsGranularity: string, optional
	MetricsGranularity terra.StringValue `hcl:"metrics_granularity,attr"`
	// MinElbCapacity: number, optional
	MinElbCapacity terra.NumberValue `hcl:"min_elb_capacity,attr"`
	// MinSize: number, required
	MinSize terra.NumberValue `hcl:"min_size,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlacementGroup: string, optional
	PlacementGroup terra.StringValue `hcl:"placement_group,attr"`
	// ProtectFromScaleIn: bool, optional
	ProtectFromScaleIn terra.BoolValue `hcl:"protect_from_scale_in,attr"`
	// ServiceLinkedRoleArn: string, optional
	ServiceLinkedRoleArn terra.StringValue `hcl:"service_linked_role_arn,attr"`
	// SuspendedProcesses: set of string, optional
	SuspendedProcesses terra.SetValue[terra.StringValue] `hcl:"suspended_processes,attr"`
	// TargetGroupArns: set of string, optional
	TargetGroupArns terra.SetValue[terra.StringValue] `hcl:"target_group_arns,attr"`
	// TerminationPolicies: list of string, optional
	TerminationPolicies terra.ListValue[terra.StringValue] `hcl:"termination_policies,attr"`
	// VpcZoneIdentifier: set of string, optional
	VpcZoneIdentifier terra.SetValue[terra.StringValue] `hcl:"vpc_zone_identifier,attr"`
	// WaitForCapacityTimeout: string, optional
	WaitForCapacityTimeout terra.StringValue `hcl:"wait_for_capacity_timeout,attr"`
	// WaitForElbCapacity: number, optional
	WaitForElbCapacity terra.NumberValue `hcl:"wait_for_elb_capacity,attr"`
	// InitialLifecycleHook: min=0
	InitialLifecycleHook []InitialLifecycleHook `hcl:"initial_lifecycle_hook,block" validate:"min=0"`
	// InstanceMaintenancePolicy: optional
	InstanceMaintenancePolicy *InstanceMaintenancePolicy `hcl:"instance_maintenance_policy,block"`
	// InstanceRefresh: optional
	InstanceRefresh *InstanceRefresh `hcl:"instance_refresh,block"`
	// LaunchTemplate: optional
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
	// MixedInstancesPolicy: optional
	MixedInstancesPolicy *MixedInstancesPolicy `hcl:"mixed_instances_policy,block"`
	// Tag: min=0
	Tag []Tag `hcl:"tag,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrafficSource: min=0
	TrafficSource []TrafficSource `hcl:"traffic_source,block" validate:"min=0"`
	// WarmPool: optional
	WarmPool *WarmPool `hcl:"warm_pool,block"`
}

type awsAutoscalingGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("availability_zones"))
}

// CapacityRebalance returns a reference to field capacity_rebalance of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) CapacityRebalance() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("capacity_rebalance"))
}

// Context returns a reference to field context of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("context"))
}

// DefaultCooldown returns a reference to field default_cooldown of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DefaultCooldown() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("default_cooldown"))
}

// DefaultInstanceWarmup returns a reference to field default_instance_warmup of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DefaultInstanceWarmup() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("default_instance_warmup"))
}

// DesiredCapacity returns a reference to field desired_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DesiredCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("desired_capacity"))
}

// DesiredCapacityType returns a reference to field desired_capacity_type of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DesiredCapacityType() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("desired_capacity_type"))
}

// EnabledMetrics returns a reference to field enabled_metrics of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) EnabledMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("enabled_metrics"))
}

// ForceDelete returns a reference to field force_delete of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("force_delete"))
}

// ForceDeleteWarmPool returns a reference to field force_delete_warm_pool of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ForceDeleteWarmPool() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("force_delete_warm_pool"))
}

// HealthCheckGracePeriod returns a reference to field health_check_grace_period of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) HealthCheckGracePeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("health_check_grace_period"))
}

// HealthCheckType returns a reference to field health_check_type of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) HealthCheckType() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("health_check_type"))
}

// Id returns a reference to field id of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("id"))
}

// IgnoreFailedScalingActivities returns a reference to field ignore_failed_scaling_activities of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) IgnoreFailedScalingActivities() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("ignore_failed_scaling_activities"))
}

// LaunchConfiguration returns a reference to field launch_configuration of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) LaunchConfiguration() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("launch_configuration"))
}

// LoadBalancers returns a reference to field load_balancers of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) LoadBalancers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("load_balancers"))
}

// MaxInstanceLifetime returns a reference to field max_instance_lifetime of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MaxInstanceLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("max_instance_lifetime"))
}

// MaxSize returns a reference to field max_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("max_size"))
}

// MetricsGranularity returns a reference to field metrics_granularity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MetricsGranularity() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("metrics_granularity"))
}

// MinElbCapacity returns a reference to field min_elb_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MinElbCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("min_elb_capacity"))
}

// MinSize returns a reference to field min_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("min_size"))
}

// Name returns a reference to field name of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("name_prefix"))
}

// PlacementGroup returns a reference to field placement_group of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) PlacementGroup() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("placement_group"))
}

// PredictedCapacity returns a reference to field predicted_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) PredictedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("predicted_capacity"))
}

// ProtectFromScaleIn returns a reference to field protect_from_scale_in of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ProtectFromScaleIn() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("protect_from_scale_in"))
}

// ServiceLinkedRoleArn returns a reference to field service_linked_role_arn of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ServiceLinkedRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("service_linked_role_arn"))
}

// SuspendedProcesses returns a reference to field suspended_processes of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) SuspendedProcesses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("suspended_processes"))
}

// TargetGroupArns returns a reference to field target_group_arns of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) TargetGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("target_group_arns"))
}

// TerminationPolicies returns a reference to field termination_policies of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) TerminationPolicies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aag.ref.Append("termination_policies"))
}

// VpcZoneIdentifier returns a reference to field vpc_zone_identifier of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) VpcZoneIdentifier() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("vpc_zone_identifier"))
}

// WaitForCapacityTimeout returns a reference to field wait_for_capacity_timeout of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WaitForCapacityTimeout() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("wait_for_capacity_timeout"))
}

// WaitForElbCapacity returns a reference to field wait_for_elb_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WaitForElbCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("wait_for_elb_capacity"))
}

// WarmPoolSize returns a reference to field warm_pool_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WarmPoolSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("warm_pool_size"))
}

func (aag awsAutoscalingGroupAttributes) InitialLifecycleHook() terra.SetValue[InitialLifecycleHookAttributes] {
	return terra.ReferenceAsSet[InitialLifecycleHookAttributes](aag.ref.Append("initial_lifecycle_hook"))
}

func (aag awsAutoscalingGroupAttributes) InstanceMaintenancePolicy() terra.ListValue[InstanceMaintenancePolicyAttributes] {
	return terra.ReferenceAsList[InstanceMaintenancePolicyAttributes](aag.ref.Append("instance_maintenance_policy"))
}

func (aag awsAutoscalingGroupAttributes) InstanceRefresh() terra.ListValue[InstanceRefreshAttributes] {
	return terra.ReferenceAsList[InstanceRefreshAttributes](aag.ref.Append("instance_refresh"))
}

func (aag awsAutoscalingGroupAttributes) LaunchTemplate() terra.ListValue[LaunchTemplateAttributes] {
	return terra.ReferenceAsList[LaunchTemplateAttributes](aag.ref.Append("launch_template"))
}

func (aag awsAutoscalingGroupAttributes) MixedInstancesPolicy() terra.ListValue[MixedInstancesPolicyAttributes] {
	return terra.ReferenceAsList[MixedInstancesPolicyAttributes](aag.ref.Append("mixed_instances_policy"))
}

func (aag awsAutoscalingGroupAttributes) Tag() terra.SetValue[TagAttributes] {
	return terra.ReferenceAsSet[TagAttributes](aag.ref.Append("tag"))
}

func (aag awsAutoscalingGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aag.ref.Append("timeouts"))
}

func (aag awsAutoscalingGroupAttributes) TrafficSource() terra.SetValue[TrafficSourceAttributes] {
	return terra.ReferenceAsSet[TrafficSourceAttributes](aag.ref.Append("traffic_source"))
}

func (aag awsAutoscalingGroupAttributes) WarmPool() terra.ListValue[WarmPoolAttributes] {
	return terra.ReferenceAsList[WarmPoolAttributes](aag.ref.Append("warm_pool"))
}

type awsAutoscalingGroupState struct {
	Arn                           string                           `json:"arn"`
	AvailabilityZones             []string                         `json:"availability_zones"`
	CapacityRebalance             bool                             `json:"capacity_rebalance"`
	Context                       string                           `json:"context"`
	DefaultCooldown               float64                          `json:"default_cooldown"`
	DefaultInstanceWarmup         float64                          `json:"default_instance_warmup"`
	DesiredCapacity               float64                          `json:"desired_capacity"`
	DesiredCapacityType           string                           `json:"desired_capacity_type"`
	EnabledMetrics                []string                         `json:"enabled_metrics"`
	ForceDelete                   bool                             `json:"force_delete"`
	ForceDeleteWarmPool           bool                             `json:"force_delete_warm_pool"`
	HealthCheckGracePeriod        float64                          `json:"health_check_grace_period"`
	HealthCheckType               string                           `json:"health_check_type"`
	Id                            string                           `json:"id"`
	IgnoreFailedScalingActivities bool                             `json:"ignore_failed_scaling_activities"`
	LaunchConfiguration           string                           `json:"launch_configuration"`
	LoadBalancers                 []string                         `json:"load_balancers"`
	MaxInstanceLifetime           float64                          `json:"max_instance_lifetime"`
	MaxSize                       float64                          `json:"max_size"`
	MetricsGranularity            string                           `json:"metrics_granularity"`
	MinElbCapacity                float64                          `json:"min_elb_capacity"`
	MinSize                       float64                          `json:"min_size"`
	Name                          string                           `json:"name"`
	NamePrefix                    string                           `json:"name_prefix"`
	PlacementGroup                string                           `json:"placement_group"`
	PredictedCapacity             float64                          `json:"predicted_capacity"`
	ProtectFromScaleIn            bool                             `json:"protect_from_scale_in"`
	ServiceLinkedRoleArn          string                           `json:"service_linked_role_arn"`
	SuspendedProcesses            []string                         `json:"suspended_processes"`
	TargetGroupArns               []string                         `json:"target_group_arns"`
	TerminationPolicies           []string                         `json:"termination_policies"`
	VpcZoneIdentifier             []string                         `json:"vpc_zone_identifier"`
	WaitForCapacityTimeout        string                           `json:"wait_for_capacity_timeout"`
	WaitForElbCapacity            float64                          `json:"wait_for_elb_capacity"`
	WarmPoolSize                  float64                          `json:"warm_pool_size"`
	InitialLifecycleHook          []InitialLifecycleHookState      `json:"initial_lifecycle_hook"`
	InstanceMaintenancePolicy     []InstanceMaintenancePolicyState `json:"instance_maintenance_policy"`
	InstanceRefresh               []InstanceRefreshState           `json:"instance_refresh"`
	LaunchTemplate                []LaunchTemplateState            `json:"launch_template"`
	MixedInstancesPolicy          []MixedInstancesPolicyState      `json:"mixed_instances_policy"`
	Tag                           []TagState                       `json:"tag"`
	Timeouts                      *TimeoutsState                   `json:"timeouts"`
	TrafficSource                 []TrafficSourceState             `json:"traffic_source"`
	WarmPool                      []WarmPoolState                  `json:"warm_pool"`
}
