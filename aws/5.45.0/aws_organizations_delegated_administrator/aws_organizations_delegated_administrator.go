// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_organizations_delegated_administrator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_organizations_delegated_administrator.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOrganizationsDelegatedAdministratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoda *Resource) Type() string {
	return "aws_organizations_delegated_administrator"
}

// LocalName returns the local name for [Resource].
func (aoda *Resource) LocalName() string {
	return aoda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoda *Resource) Configuration() interface{} {
	return aoda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoda *Resource) Dependencies() terra.Dependencies {
	return aoda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoda *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoda *Resource) Attributes() awsOrganizationsDelegatedAdministratorAttributes {
	return awsOrganizationsDelegatedAdministratorAttributes{ref: terra.ReferenceResource(aoda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoda *Resource) ImportState(state io.Reader) error {
	aoda.state = &awsOrganizationsDelegatedAdministratorState{}
	if err := json.NewDecoder(state).Decode(aoda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoda.Type(), aoda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoda *Resource) State() (*awsOrganizationsDelegatedAdministratorState, bool) {
	return aoda.state, aoda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoda *Resource) StateMust() *awsOrganizationsDelegatedAdministratorState {
	if aoda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoda.Type(), aoda.LocalName()))
	}
	return aoda.state
}

// Args contains the configurations for aws_organizations_delegated_administrator.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServicePrincipal: string, required
	ServicePrincipal terra.StringValue `hcl:"service_principal,attr" validate:"required"`
}

type awsOrganizationsDelegatedAdministratorAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("account_id"))
}

// Arn returns a reference to field arn of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("arn"))
}

// DelegationEnabledDate returns a reference to field delegation_enabled_date of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) DelegationEnabledDate() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("delegation_enabled_date"))
}

// Email returns a reference to field email of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("email"))
}

// Id returns a reference to field id of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("id"))
}

// JoinedMethod returns a reference to field joined_method of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) JoinedMethod() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("joined_method"))
}

// JoinedTimestamp returns a reference to field joined_timestamp of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) JoinedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("joined_timestamp"))
}

// Name returns a reference to field name of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("name"))
}

// ServicePrincipal returns a reference to field service_principal of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) ServicePrincipal() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("service_principal"))
}

// Status returns a reference to field status of aws_organizations_delegated_administrator.
func (aoda awsOrganizationsDelegatedAdministratorAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aoda.ref.Append("status"))
}

type awsOrganizationsDelegatedAdministratorState struct {
	AccountId             string `json:"account_id"`
	Arn                   string `json:"arn"`
	DelegationEnabledDate string `json:"delegation_enabled_date"`
	Email                 string `json:"email"`
	Id                    string `json:"id"`
	JoinedMethod          string `json:"joined_method"`
	JoinedTimestamp       string `json:"joined_timestamp"`
	Name                  string `json:"name"`
	ServicePrincipal      string `json:"service_principal"`
	Status                string `json:"status"`
}
