// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_feature

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Variations struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VariationsValue: required
	Value *VariationsValue `hcl:"value,block" validate:"required"`
}

type VariationsValue struct {
	// BoolValue: string, optional
	BoolValue terra.StringValue `hcl:"bool_value,attr"`
	// DoubleValue: string, optional
	DoubleValue terra.StringValue `hcl:"double_value,attr"`
	// LongValue: string, optional
	LongValue terra.StringValue `hcl:"long_value,attr"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
}

type EvaluationRulesAttributes struct {
	ref terra.Reference
}

func (er EvaluationRulesAttributes) InternalRef() (terra.Reference, error) {
	return er.ref, nil
}

func (er EvaluationRulesAttributes) InternalWithRef(ref terra.Reference) EvaluationRulesAttributes {
	return EvaluationRulesAttributes{ref: ref}
}

func (er EvaluationRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return er.ref.InternalTokens()
}

func (er EvaluationRulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("name"))
}

func (er EvaluationRulesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VariationsAttributes struct {
	ref terra.Reference
}

func (v VariationsAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VariationsAttributes) InternalWithRef(ref terra.Reference) VariationsAttributes {
	return VariationsAttributes{ref: ref}
}

func (v VariationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VariationsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v VariationsAttributes) Value() terra.ListValue[VariationsValueAttributes] {
	return terra.ReferenceAsList[VariationsValueAttributes](v.ref.Append("value"))
}

type VariationsValueAttributes struct {
	ref terra.Reference
}

func (v VariationsValueAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VariationsValueAttributes) InternalWithRef(ref terra.Reference) VariationsValueAttributes {
	return VariationsValueAttributes{ref: ref}
}

func (v VariationsValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VariationsValueAttributes) BoolValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("bool_value"))
}

func (v VariationsValueAttributes) DoubleValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("double_value"))
}

func (v VariationsValueAttributes) LongValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("long_value"))
}

func (v VariationsValueAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("string_value"))
}

type EvaluationRulesState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VariationsState struct {
	Name  string                 `json:"name"`
	Value []VariationsValueState `json:"value"`
}

type VariationsValueState struct {
	BoolValue   string `json:"bool_value"`
	DoubleValue string `json:"double_value"`
	LongValue   string `json:"long_value"`
	StringValue string `json:"string_value"`
}
