// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_feature

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_evidently_feature.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEvidentlyFeatureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aef *Resource) Type() string {
	return "aws_evidently_feature"
}

// LocalName returns the local name for [Resource].
func (aef *Resource) LocalName() string {
	return aef.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aef *Resource) Configuration() interface{} {
	return aef.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aef *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aef)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aef *Resource) Dependencies() terra.Dependencies {
	return aef.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aef *Resource) LifecycleManagement() *terra.Lifecycle {
	return aef.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aef *Resource) Attributes() awsEvidentlyFeatureAttributes {
	return awsEvidentlyFeatureAttributes{ref: terra.ReferenceResource(aef)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aef *Resource) ImportState(state io.Reader) error {
	aef.state = &awsEvidentlyFeatureState{}
	if err := json.NewDecoder(state).Decode(aef.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aef.Type(), aef.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aef *Resource) State() (*awsEvidentlyFeatureState, bool) {
	return aef.state, aef.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aef *Resource) StateMust() *awsEvidentlyFeatureState {
	if aef.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aef.Type(), aef.LocalName()))
	}
	return aef.state
}

// Args contains the configurations for aws_evidently_feature.
type Args struct {
	// DefaultVariation: string, optional
	DefaultVariation terra.StringValue `hcl:"default_variation,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EntityOverrides: map of string, optional
	EntityOverrides terra.MapValue[terra.StringValue] `hcl:"entity_overrides,attr"`
	// EvaluationStrategy: string, optional
	EvaluationStrategy terra.StringValue `hcl:"evaluation_strategy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Variations: min=1,max=5
	Variations []Variations `hcl:"variations,block" validate:"min=1,max=5"`
}

type awsEvidentlyFeatureAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("arn"))
}

// CreatedTime returns a reference to field created_time of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("created_time"))
}

// DefaultVariation returns a reference to field default_variation of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) DefaultVariation() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("default_variation"))
}

// Description returns a reference to field description of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("description"))
}

// EntityOverrides returns a reference to field entity_overrides of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) EntityOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aef.ref.Append("entity_overrides"))
}

// EvaluationStrategy returns a reference to field evaluation_strategy of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) EvaluationStrategy() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("evaluation_strategy"))
}

// Id returns a reference to field id of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("name"))
}

// Project returns a reference to field project of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("project"))
}

// Status returns a reference to field status of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aef.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aef.ref.Append("tags_all"))
}

// ValueType returns a reference to field value_type of aws_evidently_feature.
func (aef awsEvidentlyFeatureAttributes) ValueType() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("value_type"))
}

func (aef awsEvidentlyFeatureAttributes) EvaluationRules() terra.SetValue[EvaluationRulesAttributes] {
	return terra.ReferenceAsSet[EvaluationRulesAttributes](aef.ref.Append("evaluation_rules"))
}

func (aef awsEvidentlyFeatureAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aef.ref.Append("timeouts"))
}

func (aef awsEvidentlyFeatureAttributes) Variations() terra.SetValue[VariationsAttributes] {
	return terra.ReferenceAsSet[VariationsAttributes](aef.ref.Append("variations"))
}

type awsEvidentlyFeatureState struct {
	Arn                string                 `json:"arn"`
	CreatedTime        string                 `json:"created_time"`
	DefaultVariation   string                 `json:"default_variation"`
	Description        string                 `json:"description"`
	EntityOverrides    map[string]string      `json:"entity_overrides"`
	EvaluationStrategy string                 `json:"evaluation_strategy"`
	Id                 string                 `json:"id"`
	LastUpdatedTime    string                 `json:"last_updated_time"`
	Name               string                 `json:"name"`
	Project            string                 `json:"project"`
	Status             string                 `json:"status"`
	Tags               map[string]string      `json:"tags"`
	TagsAll            map[string]string      `json:"tags_all"`
	ValueType          string                 `json:"value_type"`
	EvaluationRules    []EvaluationRulesState `json:"evaluation_rules"`
	Timeouts           *TimeoutsState         `json:"timeouts"`
	Variations         []VariationsState      `json:"variations"`
}
