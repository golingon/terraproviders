// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline_webhook

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codepipeline_webhook.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodepipelineWebhookState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acw *Resource) Type() string {
	return "aws_codepipeline_webhook"
}

// LocalName returns the local name for [Resource].
func (acw *Resource) LocalName() string {
	return acw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acw *Resource) Configuration() interface{} {
	return acw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acw *Resource) Dependencies() terra.Dependencies {
	return acw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acw *Resource) LifecycleManagement() *terra.Lifecycle {
	return acw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acw *Resource) Attributes() awsCodepipelineWebhookAttributes {
	return awsCodepipelineWebhookAttributes{ref: terra.ReferenceResource(acw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acw *Resource) ImportState(state io.Reader) error {
	acw.state = &awsCodepipelineWebhookState{}
	if err := json.NewDecoder(state).Decode(acw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acw.Type(), acw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acw *Resource) State() (*awsCodepipelineWebhookState, bool) {
	return acw.state, acw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acw *Resource) StateMust() *awsCodepipelineWebhookState {
	if acw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acw.Type(), acw.LocalName()))
	}
	return acw.state
}

// Args contains the configurations for aws_codepipeline_webhook.
type Args struct {
	// Authentication: string, required
	Authentication terra.StringValue `hcl:"authentication,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetAction: string, required
	TargetAction terra.StringValue `hcl:"target_action,attr" validate:"required"`
	// TargetPipeline: string, required
	TargetPipeline terra.StringValue `hcl:"target_pipeline,attr" validate:"required"`
	// AuthenticationConfiguration: optional
	AuthenticationConfiguration *AuthenticationConfiguration `hcl:"authentication_configuration,block"`
	// Filter: min=1,max=5
	Filter []Filter `hcl:"filter,block" validate:"min=1,max=5"`
}

type awsCodepipelineWebhookAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("arn"))
}

// Authentication returns a reference to field authentication of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Authentication() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("authentication"))
}

// Id returns a reference to field id of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("id"))
}

// Name returns a reference to field name of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acw.ref.Append("tags_all"))
}

// TargetAction returns a reference to field target_action of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) TargetAction() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("target_action"))
}

// TargetPipeline returns a reference to field target_pipeline of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) TargetPipeline() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("target_pipeline"))
}

// Url returns a reference to field url of aws_codepipeline_webhook.
func (acw awsCodepipelineWebhookAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("url"))
}

func (acw awsCodepipelineWebhookAttributes) AuthenticationConfiguration() terra.ListValue[AuthenticationConfigurationAttributes] {
	return terra.ReferenceAsList[AuthenticationConfigurationAttributes](acw.ref.Append("authentication_configuration"))
}

func (acw awsCodepipelineWebhookAttributes) Filter() terra.SetValue[FilterAttributes] {
	return terra.ReferenceAsSet[FilterAttributes](acw.ref.Append("filter"))
}

type awsCodepipelineWebhookState struct {
	Arn                         string                             `json:"arn"`
	Authentication              string                             `json:"authentication"`
	Id                          string                             `json:"id"`
	Name                        string                             `json:"name"`
	Tags                        map[string]string                  `json:"tags"`
	TagsAll                     map[string]string                  `json:"tags_all"`
	TargetAction                string                             `json:"target_action"`
	TargetPipeline              string                             `json:"target_pipeline"`
	Url                         string                             `json:"url"`
	AuthenticationConfiguration []AuthenticationConfigurationState `json:"authentication_configuration"`
	Filter                      []FilterState                      `json:"filter"`
}
