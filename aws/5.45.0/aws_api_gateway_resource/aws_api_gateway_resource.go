// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_resource

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_resource.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayResourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagr *Resource) Type() string {
	return "aws_api_gateway_resource"
}

// LocalName returns the local name for [Resource].
func (aagr *Resource) LocalName() string {
	return aagr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagr *Resource) Configuration() interface{} {
	return aagr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagr *Resource) Dependencies() terra.Dependencies {
	return aagr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagr *Resource) Attributes() awsApiGatewayResourceAttributes {
	return awsApiGatewayResourceAttributes{ref: terra.ReferenceResource(aagr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagr *Resource) ImportState(state io.Reader) error {
	aagr.state = &awsApiGatewayResourceState{}
	if err := json.NewDecoder(state).Decode(aagr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagr.Type(), aagr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagr *Resource) State() (*awsApiGatewayResourceState, bool) {
	return aagr.state, aagr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagr *Resource) StateMust() *awsApiGatewayResourceState {
	if aagr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagr.Type(), aagr.LocalName()))
	}
	return aagr.state
}

// Args contains the configurations for aws_api_gateway_resource.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ParentId: string, required
	ParentId terra.StringValue `hcl:"parent_id,attr" validate:"required"`
	// PathPart: string, required
	PathPart terra.StringValue `hcl:"path_part,attr" validate:"required"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
}

type awsApiGatewayResourceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_api_gateway_resource.
func (aagr awsApiGatewayResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagr.ref.Append("id"))
}

// ParentId returns a reference to field parent_id of aws_api_gateway_resource.
func (aagr awsApiGatewayResourceAttributes) ParentId() terra.StringValue {
	return terra.ReferenceAsString(aagr.ref.Append("parent_id"))
}

// Path returns a reference to field path of aws_api_gateway_resource.
func (aagr awsApiGatewayResourceAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aagr.ref.Append("path"))
}

// PathPart returns a reference to field path_part of aws_api_gateway_resource.
func (aagr awsApiGatewayResourceAttributes) PathPart() terra.StringValue {
	return terra.ReferenceAsString(aagr.ref.Append("path_part"))
}

// RestApiId returns a reference to field rest_api_id of aws_api_gateway_resource.
func (aagr awsApiGatewayResourceAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceAsString(aagr.ref.Append("rest_api_id"))
}

type awsApiGatewayResourceState struct {
	Id        string `json:"id"`
	ParentId  string `json:"parent_id"`
	Path      string `json:"path"`
	PathPart  string `json:"path_part"`
	RestApiId string `json:"rest_api_id"`
}
