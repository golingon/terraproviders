// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_conformance_pack

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_conformance_pack.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigConformancePackState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accp *Resource) Type() string {
	return "aws_config_conformance_pack"
}

// LocalName returns the local name for [Resource].
func (accp *Resource) LocalName() string {
	return accp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accp *Resource) Configuration() interface{} {
	return accp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accp *Resource) Dependencies() terra.Dependencies {
	return accp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accp *Resource) LifecycleManagement() *terra.Lifecycle {
	return accp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accp *Resource) Attributes() awsConfigConformancePackAttributes {
	return awsConfigConformancePackAttributes{ref: terra.ReferenceResource(accp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accp *Resource) ImportState(state io.Reader) error {
	accp.state = &awsConfigConformancePackState{}
	if err := json.NewDecoder(state).Decode(accp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accp.Type(), accp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accp *Resource) State() (*awsConfigConformancePackState, bool) {
	return accp.state, accp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accp *Resource) StateMust() *awsConfigConformancePackState {
	if accp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accp.Type(), accp.LocalName()))
	}
	return accp.state
}

// Args contains the configurations for aws_config_conformance_pack.
type Args struct {
	// DeliveryS3Bucket: string, optional
	DeliveryS3Bucket terra.StringValue `hcl:"delivery_s3_bucket,attr"`
	// DeliveryS3KeyPrefix: string, optional
	DeliveryS3KeyPrefix terra.StringValue `hcl:"delivery_s3_key_prefix,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TemplateBody: string, optional
	TemplateBody terra.StringValue `hcl:"template_body,attr"`
	// TemplateS3Uri: string, optional
	TemplateS3Uri terra.StringValue `hcl:"template_s3_uri,attr"`
	// InputParameter: min=0,max=60
	InputParameter []InputParameter `hcl:"input_parameter,block" validate:"min=0,max=60"`
}

type awsConfigConformancePackAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("arn"))
}

// DeliveryS3Bucket returns a reference to field delivery_s3_bucket of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) DeliveryS3Bucket() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("delivery_s3_bucket"))
}

// DeliveryS3KeyPrefix returns a reference to field delivery_s3_key_prefix of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) DeliveryS3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("delivery_s3_key_prefix"))
}

// Id returns a reference to field id of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("name"))
}

// TemplateBody returns a reference to field template_body of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("template_body"))
}

// TemplateS3Uri returns a reference to field template_s3_uri of aws_config_conformance_pack.
func (accp awsConfigConformancePackAttributes) TemplateS3Uri() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("template_s3_uri"))
}

func (accp awsConfigConformancePackAttributes) InputParameter() terra.SetValue[InputParameterAttributes] {
	return terra.ReferenceAsSet[InputParameterAttributes](accp.ref.Append("input_parameter"))
}

type awsConfigConformancePackState struct {
	Arn                 string                `json:"arn"`
	DeliveryS3Bucket    string                `json:"delivery_s3_bucket"`
	DeliveryS3KeyPrefix string                `json:"delivery_s3_key_prefix"`
	Id                  string                `json:"id"`
	Name                string                `json:"name"`
	TemplateBody        string                `json:"template_body"`
	TemplateS3Uri       string                `json:"template_s3_uri"`
	InputParameter      []InputParameterState `json:"input_parameter"`
}
