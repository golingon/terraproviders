// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_byte_match_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_waf_byte_match_set.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafByteMatchSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awbms *Resource) Type() string {
	return "aws_waf_byte_match_set"
}

// LocalName returns the local name for [Resource].
func (awbms *Resource) LocalName() string {
	return awbms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awbms *Resource) Configuration() interface{} {
	return awbms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awbms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awbms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awbms *Resource) Dependencies() terra.Dependencies {
	return awbms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awbms *Resource) LifecycleManagement() *terra.Lifecycle {
	return awbms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awbms *Resource) Attributes() awsWafByteMatchSetAttributes {
	return awsWafByteMatchSetAttributes{ref: terra.ReferenceResource(awbms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awbms *Resource) ImportState(state io.Reader) error {
	awbms.state = &awsWafByteMatchSetState{}
	if err := json.NewDecoder(state).Decode(awbms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awbms.Type(), awbms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awbms *Resource) State() (*awsWafByteMatchSetState, bool) {
	return awbms.state, awbms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awbms *Resource) StateMust() *awsWafByteMatchSetState {
	if awbms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awbms.Type(), awbms.LocalName()))
	}
	return awbms.state
}

// Args contains the configurations for aws_waf_byte_match_set.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ByteMatchTuples: min=0
	ByteMatchTuples []ByteMatchTuples `hcl:"byte_match_tuples,block" validate:"min=0"`
}

type awsWafByteMatchSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_waf_byte_match_set.
func (awbms awsWafByteMatchSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awbms.ref.Append("id"))
}

// Name returns a reference to field name of aws_waf_byte_match_set.
func (awbms awsWafByteMatchSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awbms.ref.Append("name"))
}

func (awbms awsWafByteMatchSetAttributes) ByteMatchTuples() terra.SetValue[ByteMatchTuplesAttributes] {
	return terra.ReferenceAsSet[ByteMatchTuplesAttributes](awbms.ref.Append("byte_match_tuples"))
}

type awsWafByteMatchSetState struct {
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	ByteMatchTuples []ByteMatchTuplesState `json:"byte_match_tuples"`
}
