// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_customerprofiles_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_customerprofiles_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCustomerprofilesDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acd *Resource) Type() string {
	return "aws_customerprofiles_domain"
}

// LocalName returns the local name for [Resource].
func (acd *Resource) LocalName() string {
	return acd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acd *Resource) Configuration() interface{} {
	return acd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acd *Resource) Dependencies() terra.Dependencies {
	return acd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acd *Resource) LifecycleManagement() *terra.Lifecycle {
	return acd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acd *Resource) Attributes() awsCustomerprofilesDomainAttributes {
	return awsCustomerprofilesDomainAttributes{ref: terra.ReferenceResource(acd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acd *Resource) ImportState(state io.Reader) error {
	acd.state = &awsCustomerprofilesDomainState{}
	if err := json.NewDecoder(state).Decode(acd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acd.Type(), acd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acd *Resource) State() (*awsCustomerprofilesDomainState, bool) {
	return acd.state, acd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acd *Resource) StateMust() *awsCustomerprofilesDomainState {
	if acd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acd.Type(), acd.LocalName()))
	}
	return acd.state
}

// Args contains the configurations for aws_customerprofiles_domain.
type Args struct {
	// DeadLetterQueueUrl: string, optional
	DeadLetterQueueUrl terra.StringValue `hcl:"dead_letter_queue_url,attr"`
	// DefaultEncryptionKey: string, optional
	DefaultEncryptionKey terra.StringValue `hcl:"default_encryption_key,attr"`
	// DefaultExpirationDays: number, required
	DefaultExpirationDays terra.NumberValue `hcl:"default_expiration_days,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Matching: optional
	Matching *Matching `hcl:"matching,block"`
	// RuleBasedMatching: optional
	RuleBasedMatching *RuleBasedMatching `hcl:"rule_based_matching,block"`
}

type awsCustomerprofilesDomainAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("arn"))
}

// DeadLetterQueueUrl returns a reference to field dead_letter_queue_url of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) DeadLetterQueueUrl() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("dead_letter_queue_url"))
}

// DefaultEncryptionKey returns a reference to field default_encryption_key of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) DefaultEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("default_encryption_key"))
}

// DefaultExpirationDays returns a reference to field default_expiration_days of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) DefaultExpirationDays() terra.NumberValue {
	return terra.ReferenceAsNumber(acd.ref.Append("default_expiration_days"))
}

// DomainName returns a reference to field domain_name of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_customerprofiles_domain.
func (acd awsCustomerprofilesDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acd.ref.Append("tags_all"))
}

func (acd awsCustomerprofilesDomainAttributes) Matching() terra.ListValue[MatchingAttributes] {
	return terra.ReferenceAsList[MatchingAttributes](acd.ref.Append("matching"))
}

func (acd awsCustomerprofilesDomainAttributes) RuleBasedMatching() terra.ListValue[RuleBasedMatchingAttributes] {
	return terra.ReferenceAsList[RuleBasedMatchingAttributes](acd.ref.Append("rule_based_matching"))
}

type awsCustomerprofilesDomainState struct {
	Arn                   string                   `json:"arn"`
	DeadLetterQueueUrl    string                   `json:"dead_letter_queue_url"`
	DefaultEncryptionKey  string                   `json:"default_encryption_key"`
	DefaultExpirationDays float64                  `json:"default_expiration_days"`
	DomainName            string                   `json:"domain_name"`
	Id                    string                   `json:"id"`
	Tags                  map[string]string        `json:"tags"`
	TagsAll               map[string]string        `json:"tags_all"`
	Matching              []MatchingState          `json:"matching"`
	RuleBasedMatching     []RuleBasedMatchingState `json:"rule_based_matching"`
}
