// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_synthetics_canary

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_synthetics_canary.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSyntheticsCanaryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asc *Resource) Type() string {
	return "aws_synthetics_canary"
}

// LocalName returns the local name for [Resource].
func (asc *Resource) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asc *Resource) Configuration() interface{} {
	return asc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asc *Resource) Dependencies() terra.Dependencies {
	return asc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asc *Resource) Attributes() awsSyntheticsCanaryAttributes {
	return awsSyntheticsCanaryAttributes{ref: terra.ReferenceResource(asc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asc *Resource) ImportState(state io.Reader) error {
	asc.state = &awsSyntheticsCanaryState{}
	if err := json.NewDecoder(state).Decode(asc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asc.Type(), asc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asc *Resource) State() (*awsSyntheticsCanaryState, bool) {
	return asc.state, asc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asc *Resource) StateMust() *awsSyntheticsCanaryState {
	if asc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asc.Type(), asc.LocalName()))
	}
	return asc.state
}

// Args contains the configurations for aws_synthetics_canary.
type Args struct {
	// ArtifactS3Location: string, required
	ArtifactS3Location terra.StringValue `hcl:"artifact_s3_location,attr" validate:"required"`
	// DeleteLambda: bool, optional
	DeleteLambda terra.BoolValue `hcl:"delete_lambda,attr"`
	// ExecutionRoleArn: string, required
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr" validate:"required"`
	// FailureRetentionPeriod: number, optional
	FailureRetentionPeriod terra.NumberValue `hcl:"failure_retention_period,attr"`
	// Handler: string, required
	Handler terra.StringValue `hcl:"handler,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuntimeVersion: string, required
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
	// S3Bucket: string, optional
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr"`
	// S3Key: string, optional
	S3Key terra.StringValue `hcl:"s3_key,attr"`
	// S3Version: string, optional
	S3Version terra.StringValue `hcl:"s3_version,attr"`
	// StartCanary: bool, optional
	StartCanary terra.BoolValue `hcl:"start_canary,attr"`
	// SuccessRetentionPeriod: number, optional
	SuccessRetentionPeriod terra.NumberValue `hcl:"success_retention_period,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ZipFile: string, optional
	ZipFile terra.StringValue `hcl:"zip_file,attr"`
	// ArtifactConfig: optional
	ArtifactConfig *ArtifactConfig `hcl:"artifact_config,block"`
	// RunConfig: optional
	RunConfig *RunConfig `hcl:"run_config,block"`
	// Schedule: required
	Schedule *Schedule `hcl:"schedule,block" validate:"required"`
	// VpcConfig: optional
	VpcConfig *VpcConfig `hcl:"vpc_config,block"`
}

type awsSyntheticsCanaryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("arn"))
}

// ArtifactS3Location returns a reference to field artifact_s3_location of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) ArtifactS3Location() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("artifact_s3_location"))
}

// DeleteLambda returns a reference to field delete_lambda of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) DeleteLambda() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("delete_lambda"))
}

// EngineArn returns a reference to field engine_arn of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) EngineArn() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("engine_arn"))
}

// ExecutionRoleArn returns a reference to field execution_role_arn of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("execution_role_arn"))
}

// FailureRetentionPeriod returns a reference to field failure_retention_period of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) FailureRetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("failure_retention_period"))
}

// Handler returns a reference to field handler of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Handler() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("handler"))
}

// Id returns a reference to field id of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// Name returns a reference to field name of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("name"))
}

// RuntimeVersion returns a reference to field runtime_version of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("runtime_version"))
}

// S3Bucket returns a reference to field s3_bucket of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("s3_bucket"))
}

// S3Key returns a reference to field s3_key of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("s3_key"))
}

// S3Version returns a reference to field s3_version of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) S3Version() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("s3_version"))
}

// SourceLocationArn returns a reference to field source_location_arn of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) SourceLocationArn() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("source_location_arn"))
}

// StartCanary returns a reference to field start_canary of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) StartCanary() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("start_canary"))
}

// Status returns a reference to field status of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("status"))
}

// SuccessRetentionPeriod returns a reference to field success_retention_period of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) SuccessRetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("success_retention_period"))
}

// Tags returns a reference to field tags of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asc.ref.Append("tags_all"))
}

// ZipFile returns a reference to field zip_file of aws_synthetics_canary.
func (asc awsSyntheticsCanaryAttributes) ZipFile() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("zip_file"))
}

func (asc awsSyntheticsCanaryAttributes) Timeline() terra.ListValue[TimelineAttributes] {
	return terra.ReferenceAsList[TimelineAttributes](asc.ref.Append("timeline"))
}

func (asc awsSyntheticsCanaryAttributes) ArtifactConfig() terra.ListValue[ArtifactConfigAttributes] {
	return terra.ReferenceAsList[ArtifactConfigAttributes](asc.ref.Append("artifact_config"))
}

func (asc awsSyntheticsCanaryAttributes) RunConfig() terra.ListValue[RunConfigAttributes] {
	return terra.ReferenceAsList[RunConfigAttributes](asc.ref.Append("run_config"))
}

func (asc awsSyntheticsCanaryAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](asc.ref.Append("schedule"))
}

func (asc awsSyntheticsCanaryAttributes) VpcConfig() terra.ListValue[VpcConfigAttributes] {
	return terra.ReferenceAsList[VpcConfigAttributes](asc.ref.Append("vpc_config"))
}

type awsSyntheticsCanaryState struct {
	Arn                    string                `json:"arn"`
	ArtifactS3Location     string                `json:"artifact_s3_location"`
	DeleteLambda           bool                  `json:"delete_lambda"`
	EngineArn              string                `json:"engine_arn"`
	ExecutionRoleArn       string                `json:"execution_role_arn"`
	FailureRetentionPeriod float64               `json:"failure_retention_period"`
	Handler                string                `json:"handler"`
	Id                     string                `json:"id"`
	Name                   string                `json:"name"`
	RuntimeVersion         string                `json:"runtime_version"`
	S3Bucket               string                `json:"s3_bucket"`
	S3Key                  string                `json:"s3_key"`
	S3Version              string                `json:"s3_version"`
	SourceLocationArn      string                `json:"source_location_arn"`
	StartCanary            bool                  `json:"start_canary"`
	Status                 string                `json:"status"`
	SuccessRetentionPeriod float64               `json:"success_retention_period"`
	Tags                   map[string]string     `json:"tags"`
	TagsAll                map[string]string     `json:"tags_all"`
	ZipFile                string                `json:"zip_file"`
	Timeline               []TimelineState       `json:"timeline"`
	ArtifactConfig         []ArtifactConfigState `json:"artifact_config"`
	RunConfig              []RunConfigState      `json:"run_config"`
	Schedule               []ScheduleState       `json:"schedule"`
	VpcConfig              []VpcConfigState      `json:"vpc_config"`
}
