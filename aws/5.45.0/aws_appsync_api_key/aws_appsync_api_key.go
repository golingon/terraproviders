// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_api_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_api_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncApiKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaak *Resource) Type() string {
	return "aws_appsync_api_key"
}

// LocalName returns the local name for [Resource].
func (aaak *Resource) LocalName() string {
	return aaak.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaak *Resource) Configuration() interface{} {
	return aaak.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaak *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaak)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaak *Resource) Dependencies() terra.Dependencies {
	return aaak.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaak *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaak.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaak *Resource) Attributes() awsAppsyncApiKeyAttributes {
	return awsAppsyncApiKeyAttributes{ref: terra.ReferenceResource(aaak)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaak *Resource) ImportState(state io.Reader) error {
	aaak.state = &awsAppsyncApiKeyState{}
	if err := json.NewDecoder(state).Decode(aaak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaak.Type(), aaak.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaak *Resource) State() (*awsAppsyncApiKeyState, bool) {
	return aaak.state, aaak.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaak *Resource) StateMust() *awsAppsyncApiKeyState {
	if aaak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaak.Type(), aaak.LocalName()))
	}
	return aaak.state
}

// Args contains the configurations for aws_appsync_api_key.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expires: string, optional
	Expires terra.StringValue `hcl:"expires,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsAppsyncApiKeyAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_api_key.
func (aaak awsAppsyncApiKeyAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aaak.ref.Append("api_id"))
}

// Description returns a reference to field description of aws_appsync_api_key.
func (aaak awsAppsyncApiKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaak.ref.Append("description"))
}

// Expires returns a reference to field expires of aws_appsync_api_key.
func (aaak awsAppsyncApiKeyAttributes) Expires() terra.StringValue {
	return terra.ReferenceAsString(aaak.ref.Append("expires"))
}

// Id returns a reference to field id of aws_appsync_api_key.
func (aaak awsAppsyncApiKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaak.ref.Append("id"))
}

// Key returns a reference to field key of aws_appsync_api_key.
func (aaak awsAppsyncApiKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(aaak.ref.Append("key"))
}

type awsAppsyncApiKeyState struct {
	ApiId       string `json:"api_id"`
	Description string `json:"description"`
	Expires     string `json:"expires"`
	Id          string `json:"id"`
	Key         string `json:"key"`
}
