// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_account_alternate_contact

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_account_alternate_contact.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAccountAlternateContactState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaac *Resource) Type() string {
	return "aws_account_alternate_contact"
}

// LocalName returns the local name for [Resource].
func (aaac *Resource) LocalName() string {
	return aaac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaac *Resource) Configuration() interface{} {
	return aaac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaac *Resource) Dependencies() terra.Dependencies {
	return aaac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaac *Resource) Attributes() awsAccountAlternateContactAttributes {
	return awsAccountAlternateContactAttributes{ref: terra.ReferenceResource(aaac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaac *Resource) ImportState(state io.Reader) error {
	aaac.state = &awsAccountAlternateContactState{}
	if err := json.NewDecoder(state).Decode(aaac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaac.Type(), aaac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaac *Resource) State() (*awsAccountAlternateContactState, bool) {
	return aaac.state, aaac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaac *Resource) StateMust() *awsAccountAlternateContactState {
	if aaac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaac.Type(), aaac.LocalName()))
	}
	return aaac.state
}

// Args contains the configurations for aws_account_alternate_contact.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// AlternateContactType: string, required
	AlternateContactType terra.StringValue `hcl:"alternate_contact_type,attr" validate:"required"`
	// EmailAddress: string, required
	EmailAddress terra.StringValue `hcl:"email_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAccountAlternateContactAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("account_id"))
}

// AlternateContactType returns a reference to field alternate_contact_type of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) AlternateContactType() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("alternate_contact_type"))
}

// EmailAddress returns a reference to field email_address of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("email_address"))
}

// Id returns a reference to field id of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("id"))
}

// Name returns a reference to field name of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("name"))
}

// PhoneNumber returns a reference to field phone_number of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("phone_number"))
}

// Title returns a reference to field title of aws_account_alternate_contact.
func (aaac awsAccountAlternateContactAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("title"))
}

func (aaac awsAccountAlternateContactAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaac.ref.Append("timeouts"))
}

type awsAccountAlternateContactState struct {
	AccountId            string         `json:"account_id"`
	AlternateContactType string         `json:"alternate_contact_type"`
	EmailAddress         string         `json:"email_address"`
	Id                   string         `json:"id"`
	Name                 string         `json:"name"`
	PhoneNumber          string         `json:"phone_number"`
	Title                string         `json:"title"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
