// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_firewall_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_firewall_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverFirewallConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrfc *Resource) Type() string {
	return "aws_route53_resolver_firewall_config"
}

// LocalName returns the local name for [Resource].
func (arrfc *Resource) LocalName() string {
	return arrfc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrfc *Resource) Configuration() interface{} {
	return arrfc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrfc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrfc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrfc *Resource) Dependencies() terra.Dependencies {
	return arrfc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrfc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrfc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrfc *Resource) Attributes() awsRoute53ResolverFirewallConfigAttributes {
	return awsRoute53ResolverFirewallConfigAttributes{ref: terra.ReferenceResource(arrfc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrfc *Resource) ImportState(state io.Reader) error {
	arrfc.state = &awsRoute53ResolverFirewallConfigState{}
	if err := json.NewDecoder(state).Decode(arrfc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrfc.Type(), arrfc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrfc *Resource) State() (*awsRoute53ResolverFirewallConfigState, bool) {
	return arrfc.state, arrfc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrfc *Resource) StateMust() *awsRoute53ResolverFirewallConfigState {
	if arrfc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrfc.Type(), arrfc.LocalName()))
	}
	return arrfc.state
}

// Args contains the configurations for aws_route53_resolver_firewall_config.
type Args struct {
	// FirewallFailOpen: string, optional
	FirewallFailOpen terra.StringValue `hcl:"firewall_fail_open,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
}

type awsRoute53ResolverFirewallConfigAttributes struct {
	ref terra.Reference
}

// FirewallFailOpen returns a reference to field firewall_fail_open of aws_route53_resolver_firewall_config.
func (arrfc awsRoute53ResolverFirewallConfigAttributes) FirewallFailOpen() terra.StringValue {
	return terra.ReferenceAsString(arrfc.ref.Append("firewall_fail_open"))
}

// Id returns a reference to field id of aws_route53_resolver_firewall_config.
func (arrfc awsRoute53ResolverFirewallConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrfc.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_firewall_config.
func (arrfc awsRoute53ResolverFirewallConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(arrfc.ref.Append("owner_id"))
}

// ResourceId returns a reference to field resource_id of aws_route53_resolver_firewall_config.
func (arrfc awsRoute53ResolverFirewallConfigAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(arrfc.ref.Append("resource_id"))
}

type awsRoute53ResolverFirewallConfigState struct {
	FirewallFailOpen string `json:"firewall_fail_open"`
	Id               string `json:"id"`
	OwnerId          string `json:"owner_id"`
	ResourceId       string `json:"resource_id"`
}
