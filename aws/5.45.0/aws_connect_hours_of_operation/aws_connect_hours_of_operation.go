// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_hours_of_operation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_hours_of_operation.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectHoursOfOperationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (achoo *Resource) Type() string {
	return "aws_connect_hours_of_operation"
}

// LocalName returns the local name for [Resource].
func (achoo *Resource) LocalName() string {
	return achoo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (achoo *Resource) Configuration() interface{} {
	return achoo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (achoo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(achoo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (achoo *Resource) Dependencies() terra.Dependencies {
	return achoo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (achoo *Resource) LifecycleManagement() *terra.Lifecycle {
	return achoo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (achoo *Resource) Attributes() awsConnectHoursOfOperationAttributes {
	return awsConnectHoursOfOperationAttributes{ref: terra.ReferenceResource(achoo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (achoo *Resource) ImportState(state io.Reader) error {
	achoo.state = &awsConnectHoursOfOperationState{}
	if err := json.NewDecoder(state).Decode(achoo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", achoo.Type(), achoo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (achoo *Resource) State() (*awsConnectHoursOfOperationState, bool) {
	return achoo.state, achoo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (achoo *Resource) StateMust() *awsConnectHoursOfOperationState {
	if achoo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", achoo.Type(), achoo.LocalName()))
	}
	return achoo.state
}

// Args contains the configurations for aws_connect_hours_of_operation.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TimeZone: string, required
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
	// Config: min=1
	Config []Config `hcl:"config,block" validate:"min=1"`
}

type awsConnectHoursOfOperationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("arn"))
}

// Description returns a reference to field description of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("description"))
}

// HoursOfOperationId returns a reference to field hours_of_operation_id of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) HoursOfOperationId() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("hours_of_operation_id"))
}

// Id returns a reference to field id of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](achoo.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](achoo.ref.Append("tags_all"))
}

// TimeZone returns a reference to field time_zone of aws_connect_hours_of_operation.
func (achoo awsConnectHoursOfOperationAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(achoo.ref.Append("time_zone"))
}

func (achoo awsConnectHoursOfOperationAttributes) Config() terra.SetValue[ConfigAttributes] {
	return terra.ReferenceAsSet[ConfigAttributes](achoo.ref.Append("config"))
}

type awsConnectHoursOfOperationState struct {
	Arn                string            `json:"arn"`
	Description        string            `json:"description"`
	HoursOfOperationId string            `json:"hours_of_operation_id"`
	Id                 string            `json:"id"`
	InstanceId         string            `json:"instance_id"`
	Name               string            `json:"name"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	TimeZone           string            `json:"time_zone"`
	Config             []ConfigState     `json:"config"`
}
