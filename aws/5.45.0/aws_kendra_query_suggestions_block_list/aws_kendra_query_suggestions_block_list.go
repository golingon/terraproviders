// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_query_suggestions_block_list

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kendra_query_suggestions_block_list.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKendraQuerySuggestionsBlockListState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akqsbl *Resource) Type() string {
	return "aws_kendra_query_suggestions_block_list"
}

// LocalName returns the local name for [Resource].
func (akqsbl *Resource) LocalName() string {
	return akqsbl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akqsbl *Resource) Configuration() interface{} {
	return akqsbl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akqsbl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akqsbl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akqsbl *Resource) Dependencies() terra.Dependencies {
	return akqsbl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akqsbl *Resource) LifecycleManagement() *terra.Lifecycle {
	return akqsbl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akqsbl *Resource) Attributes() awsKendraQuerySuggestionsBlockListAttributes {
	return awsKendraQuerySuggestionsBlockListAttributes{ref: terra.ReferenceResource(akqsbl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akqsbl *Resource) ImportState(state io.Reader) error {
	akqsbl.state = &awsKendraQuerySuggestionsBlockListState{}
	if err := json.NewDecoder(state).Decode(akqsbl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akqsbl.Type(), akqsbl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akqsbl *Resource) State() (*awsKendraQuerySuggestionsBlockListState, bool) {
	return akqsbl.state, akqsbl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akqsbl *Resource) StateMust() *awsKendraQuerySuggestionsBlockListState {
	if akqsbl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akqsbl.Type(), akqsbl.LocalName()))
	}
	return akqsbl.state
}

// Args contains the configurations for aws_kendra_query_suggestions_block_list.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexId: string, required
	IndexId terra.StringValue `hcl:"index_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SourceS3Path: required
	SourceS3Path *SourceS3Path `hcl:"source_s3_path,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKendraQuerySuggestionsBlockListAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("arn"))
}

// Description returns a reference to field description of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("description"))
}

// Id returns a reference to field id of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("id"))
}

// IndexId returns a reference to field index_id of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) IndexId() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("index_id"))
}

// Name returns a reference to field name of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("name"))
}

// QuerySuggestionsBlockListId returns a reference to field query_suggestions_block_list_id of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) QuerySuggestionsBlockListId() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("query_suggestions_block_list_id"))
}

// RoleArn returns a reference to field role_arn of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("role_arn"))
}

// Status returns a reference to field status of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(akqsbl.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akqsbl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kendra_query_suggestions_block_list.
func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akqsbl.ref.Append("tags_all"))
}

func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) SourceS3Path() terra.ListValue[SourceS3PathAttributes] {
	return terra.ReferenceAsList[SourceS3PathAttributes](akqsbl.ref.Append("source_s3_path"))
}

func (akqsbl awsKendraQuerySuggestionsBlockListAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akqsbl.ref.Append("timeouts"))
}

type awsKendraQuerySuggestionsBlockListState struct {
	Arn                         string              `json:"arn"`
	Description                 string              `json:"description"`
	Id                          string              `json:"id"`
	IndexId                     string              `json:"index_id"`
	Name                        string              `json:"name"`
	QuerySuggestionsBlockListId string              `json:"query_suggestions_block_list_id"`
	RoleArn                     string              `json:"role_arn"`
	Status                      string              `json:"status"`
	Tags                        map[string]string   `json:"tags"`
	TagsAll                     map[string]string   `json:"tags_all"`
	SourceS3Path                []SourceS3PathState `json:"source_s3_path"`
	Timeouts                    *TimeoutsState      `json:"timeouts"`
}
