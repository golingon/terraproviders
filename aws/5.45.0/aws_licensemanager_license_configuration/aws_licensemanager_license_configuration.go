// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_licensemanager_license_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_licensemanager_license_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLicensemanagerLicenseConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allc *Resource) Type() string {
	return "aws_licensemanager_license_configuration"
}

// LocalName returns the local name for [Resource].
func (allc *Resource) LocalName() string {
	return allc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allc *Resource) Configuration() interface{} {
	return allc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allc *Resource) Dependencies() terra.Dependencies {
	return allc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allc *Resource) LifecycleManagement() *terra.Lifecycle {
	return allc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allc *Resource) Attributes() awsLicensemanagerLicenseConfigurationAttributes {
	return awsLicensemanagerLicenseConfigurationAttributes{ref: terra.ReferenceResource(allc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allc *Resource) ImportState(state io.Reader) error {
	allc.state = &awsLicensemanagerLicenseConfigurationState{}
	if err := json.NewDecoder(state).Decode(allc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allc.Type(), allc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allc *Resource) State() (*awsLicensemanagerLicenseConfigurationState, bool) {
	return allc.state, allc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allc *Resource) StateMust() *awsLicensemanagerLicenseConfigurationState {
	if allc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allc.Type(), allc.LocalName()))
	}
	return allc.state
}

// Args contains the configurations for aws_licensemanager_license_configuration.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseCount: number, optional
	LicenseCount terra.NumberValue `hcl:"license_count,attr"`
	// LicenseCountHardLimit: bool, optional
	LicenseCountHardLimit terra.BoolValue `hcl:"license_count_hard_limit,attr"`
	// LicenseCountingType: string, required
	LicenseCountingType terra.StringValue `hcl:"license_counting_type,attr" validate:"required"`
	// LicenseRules: list of string, optional
	LicenseRules terra.ListValue[terra.StringValue] `hcl:"license_rules,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsLicensemanagerLicenseConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("arn"))
}

// Description returns a reference to field description of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("description"))
}

// Id returns a reference to field id of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("id"))
}

// LicenseCount returns a reference to field license_count of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) LicenseCount() terra.NumberValue {
	return terra.ReferenceAsNumber(allc.ref.Append("license_count"))
}

// LicenseCountHardLimit returns a reference to field license_count_hard_limit of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) LicenseCountHardLimit() terra.BoolValue {
	return terra.ReferenceAsBool(allc.ref.Append("license_count_hard_limit"))
}

// LicenseCountingType returns a reference to field license_counting_type of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) LicenseCountingType() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("license_counting_type"))
}

// LicenseRules returns a reference to field license_rules of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) LicenseRules() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](allc.ref.Append("license_rules"))
}

// Name returns a reference to field name of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("name"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("owner_account_id"))
}

// Tags returns a reference to field tags of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](allc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_licensemanager_license_configuration.
func (allc awsLicensemanagerLicenseConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](allc.ref.Append("tags_all"))
}

type awsLicensemanagerLicenseConfigurationState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	LicenseCount          float64           `json:"license_count"`
	LicenseCountHardLimit bool              `json:"license_count_hard_limit"`
	LicenseCountingType   string            `json:"license_counting_type"`
	LicenseRules          []string          `json:"license_rules"`
	Name                  string            `json:"name"`
	OwnerAccountId        string            `json:"owner_account_id"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
