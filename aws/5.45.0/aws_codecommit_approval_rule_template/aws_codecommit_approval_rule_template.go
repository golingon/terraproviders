// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecommit_approval_rule_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codecommit_approval_rule_template.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodecommitApprovalRuleTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acart *Resource) Type() string {
	return "aws_codecommit_approval_rule_template"
}

// LocalName returns the local name for [Resource].
func (acart *Resource) LocalName() string {
	return acart.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acart *Resource) Configuration() interface{} {
	return acart.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acart *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acart)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acart *Resource) Dependencies() terra.Dependencies {
	return acart.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acart *Resource) LifecycleManagement() *terra.Lifecycle {
	return acart.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acart *Resource) Attributes() awsCodecommitApprovalRuleTemplateAttributes {
	return awsCodecommitApprovalRuleTemplateAttributes{ref: terra.ReferenceResource(acart)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acart *Resource) ImportState(state io.Reader) error {
	acart.state = &awsCodecommitApprovalRuleTemplateState{}
	if err := json.NewDecoder(state).Decode(acart.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acart.Type(), acart.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acart *Resource) State() (*awsCodecommitApprovalRuleTemplateState, bool) {
	return acart.state, acart.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acart *Resource) StateMust() *awsCodecommitApprovalRuleTemplateState {
	if acart.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acart.Type(), acart.LocalName()))
	}
	return acart.state
}

// Args contains the configurations for aws_codecommit_approval_rule_template.
type Args struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsCodecommitApprovalRuleTemplateAttributes struct {
	ref terra.Reference
}

// ApprovalRuleTemplateId returns a reference to field approval_rule_template_id of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) ApprovalRuleTemplateId() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("approval_rule_template_id"))
}

// Content returns a reference to field content of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("content"))
}

// CreationDate returns a reference to field creation_date of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("creation_date"))
}

// Description returns a reference to field description of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("description"))
}

// Id returns a reference to field id of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("id"))
}

// LastModifiedDate returns a reference to field last_modified_date of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) LastModifiedDate() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("last_modified_date"))
}

// LastModifiedUser returns a reference to field last_modified_user of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) LastModifiedUser() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("last_modified_user"))
}

// Name returns a reference to field name of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("name"))
}

// RuleContentSha256 returns a reference to field rule_content_sha256 of aws_codecommit_approval_rule_template.
func (acart awsCodecommitApprovalRuleTemplateAttributes) RuleContentSha256() terra.StringValue {
	return terra.ReferenceAsString(acart.ref.Append("rule_content_sha256"))
}

type awsCodecommitApprovalRuleTemplateState struct {
	ApprovalRuleTemplateId string `json:"approval_rule_template_id"`
	Content                string `json:"content"`
	CreationDate           string `json:"creation_date"`
	Description            string `json:"description"`
	Id                     string `json:"id"`
	LastModifiedDate       string `json:"last_modified_date"`
	LastModifiedUser       string `json:"last_modified_user"`
	Name                   string `json:"name"`
	RuleContentSha256      string `json:"rule_content_sha256"`
}
