// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_schemas_registry_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_schemas_registry_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSchemasRegistryPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asrp *Resource) Type() string {
	return "aws_schemas_registry_policy"
}

// LocalName returns the local name for [Resource].
func (asrp *Resource) LocalName() string {
	return asrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asrp *Resource) Configuration() interface{} {
	return asrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asrp *Resource) Dependencies() terra.Dependencies {
	return asrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asrp *Resource) Attributes() awsSchemasRegistryPolicyAttributes {
	return awsSchemasRegistryPolicyAttributes{ref: terra.ReferenceResource(asrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asrp *Resource) ImportState(state io.Reader) error {
	asrp.state = &awsSchemasRegistryPolicyState{}
	if err := json.NewDecoder(state).Decode(asrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asrp.Type(), asrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asrp *Resource) State() (*awsSchemasRegistryPolicyState, bool) {
	return asrp.state, asrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asrp *Resource) StateMust() *awsSchemasRegistryPolicyState {
	if asrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asrp.Type(), asrp.LocalName()))
	}
	return asrp.state
}

// Args contains the configurations for aws_schemas_registry_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// RegistryName: string, required
	RegistryName terra.StringValue `hcl:"registry_name,attr" validate:"required"`
}

type awsSchemasRegistryPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_schemas_registry_policy.
func (asrp awsSchemasRegistryPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_schemas_registry_policy.
func (asrp awsSchemasRegistryPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("policy"))
}

// RegistryName returns a reference to field registry_name of aws_schemas_registry_policy.
func (asrp awsSchemasRegistryPolicyAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("registry_name"))
}

type awsSchemasRegistryPolicyState struct {
	Id           string `json:"id"`
	Policy       string `json:"policy"`
	RegistryName string `json:"registry_name"`
}
