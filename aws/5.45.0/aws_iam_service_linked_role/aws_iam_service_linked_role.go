// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_service_linked_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_service_linked_role.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamServiceLinkedRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aislr *Resource) Type() string {
	return "aws_iam_service_linked_role"
}

// LocalName returns the local name for [Resource].
func (aislr *Resource) LocalName() string {
	return aislr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aislr *Resource) Configuration() interface{} {
	return aislr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aislr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aislr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aislr *Resource) Dependencies() terra.Dependencies {
	return aislr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aislr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aislr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aislr *Resource) Attributes() awsIamServiceLinkedRoleAttributes {
	return awsIamServiceLinkedRoleAttributes{ref: terra.ReferenceResource(aislr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aislr *Resource) ImportState(state io.Reader) error {
	aislr.state = &awsIamServiceLinkedRoleState{}
	if err := json.NewDecoder(state).Decode(aislr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aislr.Type(), aislr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aislr *Resource) State() (*awsIamServiceLinkedRoleState, bool) {
	return aislr.state, aislr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aislr *Resource) StateMust() *awsIamServiceLinkedRoleState {
	if aislr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aislr.Type(), aislr.LocalName()))
	}
	return aislr.state
}

// Args contains the configurations for aws_iam_service_linked_role.
type Args struct {
	// AwsServiceName: string, required
	AwsServiceName terra.StringValue `hcl:"aws_service_name,attr" validate:"required"`
	// CustomSuffix: string, optional
	CustomSuffix terra.StringValue `hcl:"custom_suffix,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsIamServiceLinkedRoleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("arn"))
}

// AwsServiceName returns a reference to field aws_service_name of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) AwsServiceName() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("aws_service_name"))
}

// CreateDate returns a reference to field create_date of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("create_date"))
}

// CustomSuffix returns a reference to field custom_suffix of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) CustomSuffix() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("custom_suffix"))
}

// Description returns a reference to field description of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("description"))
}

// Id returns a reference to field id of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("name"))
}

// Path returns a reference to field path of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("path"))
}

// Tags returns a reference to field tags of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aislr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aislr.ref.Append("tags_all"))
}

// UniqueId returns a reference to field unique_id of aws_iam_service_linked_role.
func (aislr awsIamServiceLinkedRoleAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(aislr.ref.Append("unique_id"))
}

type awsIamServiceLinkedRoleState struct {
	Arn            string            `json:"arn"`
	AwsServiceName string            `json:"aws_service_name"`
	CreateDate     string            `json:"create_date"`
	CustomSuffix   string            `json:"custom_suffix"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	Path           string            `json:"path"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	UniqueId       string            `json:"unique_id"`
}
