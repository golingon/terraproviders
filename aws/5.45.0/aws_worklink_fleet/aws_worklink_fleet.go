// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_worklink_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_worklink_fleet.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWorklinkFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awf *Resource) Type() string {
	return "aws_worklink_fleet"
}

// LocalName returns the local name for [Resource].
func (awf *Resource) LocalName() string {
	return awf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awf *Resource) Configuration() interface{} {
	return awf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awf *Resource) Dependencies() terra.Dependencies {
	return awf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awf *Resource) LifecycleManagement() *terra.Lifecycle {
	return awf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awf *Resource) Attributes() awsWorklinkFleetAttributes {
	return awsWorklinkFleetAttributes{ref: terra.ReferenceResource(awf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awf *Resource) ImportState(state io.Reader) error {
	awf.state = &awsWorklinkFleetState{}
	if err := json.NewDecoder(state).Decode(awf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awf.Type(), awf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awf *Resource) State() (*awsWorklinkFleetState, bool) {
	return awf.state, awf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awf *Resource) StateMust() *awsWorklinkFleetState {
	if awf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awf.Type(), awf.LocalName()))
	}
	return awf.state
}

// Args contains the configurations for aws_worklink_fleet.
type Args struct {
	// AuditStreamArn: string, optional
	AuditStreamArn terra.StringValue `hcl:"audit_stream_arn,attr"`
	// DeviceCaCertificate: string, optional
	DeviceCaCertificate terra.StringValue `hcl:"device_ca_certificate,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptimizeForEndUserLocation: bool, optional
	OptimizeForEndUserLocation terra.BoolValue `hcl:"optimize_for_end_user_location,attr"`
	// IdentityProvider: optional
	IdentityProvider *IdentityProvider `hcl:"identity_provider,block"`
	// Network: optional
	Network *Network `hcl:"network,block"`
}

type awsWorklinkFleetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("arn"))
}

// AuditStreamArn returns a reference to field audit_stream_arn of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) AuditStreamArn() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("audit_stream_arn"))
}

// CompanyCode returns a reference to field company_code of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) CompanyCode() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("company_code"))
}

// CreatedTime returns a reference to field created_time of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("created_time"))
}

// DeviceCaCertificate returns a reference to field device_ca_certificate of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) DeviceCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("device_ca_certificate"))
}

// DisplayName returns a reference to field display_name of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awf.ref.Append("name"))
}

// OptimizeForEndUserLocation returns a reference to field optimize_for_end_user_location of aws_worklink_fleet.
func (awf awsWorklinkFleetAttributes) OptimizeForEndUserLocation() terra.BoolValue {
	return terra.ReferenceAsBool(awf.ref.Append("optimize_for_end_user_location"))
}

func (awf awsWorklinkFleetAttributes) IdentityProvider() terra.ListValue[IdentityProviderAttributes] {
	return terra.ReferenceAsList[IdentityProviderAttributes](awf.ref.Append("identity_provider"))
}

func (awf awsWorklinkFleetAttributes) Network() terra.ListValue[NetworkAttributes] {
	return terra.ReferenceAsList[NetworkAttributes](awf.ref.Append("network"))
}

type awsWorklinkFleetState struct {
	Arn                        string                  `json:"arn"`
	AuditStreamArn             string                  `json:"audit_stream_arn"`
	CompanyCode                string                  `json:"company_code"`
	CreatedTime                string                  `json:"created_time"`
	DeviceCaCertificate        string                  `json:"device_ca_certificate"`
	DisplayName                string                  `json:"display_name"`
	Id                         string                  `json:"id"`
	LastUpdatedTime            string                  `json:"last_updated_time"`
	Name                       string                  `json:"name"`
	OptimizeForEndUserLocation bool                    `json:"optimize_for_end_user_location"`
	IdentityProvider           []IdentityProviderState `json:"identity_provider"`
	Network                    []NetworkState          `json:"network"`
}
