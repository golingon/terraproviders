// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_comprehend_entity_recognizer

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InputDataConfig struct {
	// DataFormat: string, optional
	DataFormat terra.StringValue `hcl:"data_format,attr"`
	// InputDataConfigAnnotations: optional
	Annotations *InputDataConfigAnnotations `hcl:"annotations,block"`
	// InputDataConfigAugmentedManifests: min=0
	AugmentedManifests []InputDataConfigAugmentedManifests `hcl:"augmented_manifests,block" validate:"min=0"`
	// InputDataConfigDocuments: optional
	Documents *InputDataConfigDocuments `hcl:"documents,block"`
	// InputDataConfigEntityList: optional
	EntityList *InputDataConfigEntityList `hcl:"entity_list,block"`
	// InputDataConfigEntityTypes: min=1,max=25
	EntityTypes []InputDataConfigEntityTypes `hcl:"entity_types,block" validate:"min=1,max=25"`
}

type InputDataConfigAnnotations struct {
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// TestS3Uri: string, optional
	TestS3Uri terra.StringValue `hcl:"test_s3_uri,attr"`
}

type InputDataConfigAugmentedManifests struct {
	// AnnotationDataS3Uri: string, optional
	AnnotationDataS3Uri terra.StringValue `hcl:"annotation_data_s3_uri,attr"`
	// AttributeNames: list of string, required
	AttributeNames terra.ListValue[terra.StringValue] `hcl:"attribute_names,attr" validate:"required"`
	// DocumentType: string, optional
	DocumentType terra.StringValue `hcl:"document_type,attr"`
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// SourceDocumentsS3Uri: string, optional
	SourceDocumentsS3Uri terra.StringValue `hcl:"source_documents_s3_uri,attr"`
	// Split: string, optional
	Split terra.StringValue `hcl:"split,attr"`
}

type InputDataConfigDocuments struct {
	// InputFormat: string, optional
	InputFormat terra.StringValue `hcl:"input_format,attr"`
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// TestS3Uri: string, optional
	TestS3Uri terra.StringValue `hcl:"test_s3_uri,attr"`
}

type InputDataConfigEntityList struct {
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type InputDataConfigEntityTypes struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type InputDataConfigAttributes struct {
	ref terra.Reference
}

func (idc InputDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc InputDataConfigAttributes) InternalWithRef(ref terra.Reference) InputDataConfigAttributes {
	return InputDataConfigAttributes{ref: ref}
}

func (idc InputDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc InputDataConfigAttributes) DataFormat() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("data_format"))
}

func (idc InputDataConfigAttributes) Annotations() terra.ListValue[InputDataConfigAnnotationsAttributes] {
	return terra.ReferenceAsList[InputDataConfigAnnotationsAttributes](idc.ref.Append("annotations"))
}

func (idc InputDataConfigAttributes) AugmentedManifests() terra.SetValue[InputDataConfigAugmentedManifestsAttributes] {
	return terra.ReferenceAsSet[InputDataConfigAugmentedManifestsAttributes](idc.ref.Append("augmented_manifests"))
}

func (idc InputDataConfigAttributes) Documents() terra.ListValue[InputDataConfigDocumentsAttributes] {
	return terra.ReferenceAsList[InputDataConfigDocumentsAttributes](idc.ref.Append("documents"))
}

func (idc InputDataConfigAttributes) EntityList() terra.ListValue[InputDataConfigEntityListAttributes] {
	return terra.ReferenceAsList[InputDataConfigEntityListAttributes](idc.ref.Append("entity_list"))
}

func (idc InputDataConfigAttributes) EntityTypes() terra.SetValue[InputDataConfigEntityTypesAttributes] {
	return terra.ReferenceAsSet[InputDataConfigEntityTypesAttributes](idc.ref.Append("entity_types"))
}

type InputDataConfigAnnotationsAttributes struct {
	ref terra.Reference
}

func (a InputDataConfigAnnotationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a InputDataConfigAnnotationsAttributes) InternalWithRef(ref terra.Reference) InputDataConfigAnnotationsAttributes {
	return InputDataConfigAnnotationsAttributes{ref: ref}
}

func (a InputDataConfigAnnotationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a InputDataConfigAnnotationsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("s3_uri"))
}

func (a InputDataConfigAnnotationsAttributes) TestS3Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("test_s3_uri"))
}

type InputDataConfigAugmentedManifestsAttributes struct {
	ref terra.Reference
}

func (am InputDataConfigAugmentedManifestsAttributes) InternalRef() (terra.Reference, error) {
	return am.ref, nil
}

func (am InputDataConfigAugmentedManifestsAttributes) InternalWithRef(ref terra.Reference) InputDataConfigAugmentedManifestsAttributes {
	return InputDataConfigAugmentedManifestsAttributes{ref: ref}
}

func (am InputDataConfigAugmentedManifestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return am.ref.InternalTokens()
}

func (am InputDataConfigAugmentedManifestsAttributes) AnnotationDataS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("annotation_data_s3_uri"))
}

func (am InputDataConfigAugmentedManifestsAttributes) AttributeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](am.ref.Append("attribute_names"))
}

func (am InputDataConfigAugmentedManifestsAttributes) DocumentType() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("document_type"))
}

func (am InputDataConfigAugmentedManifestsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("s3_uri"))
}

func (am InputDataConfigAugmentedManifestsAttributes) SourceDocumentsS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("source_documents_s3_uri"))
}

func (am InputDataConfigAugmentedManifestsAttributes) Split() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("split"))
}

type InputDataConfigDocumentsAttributes struct {
	ref terra.Reference
}

func (d InputDataConfigDocumentsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d InputDataConfigDocumentsAttributes) InternalWithRef(ref terra.Reference) InputDataConfigDocumentsAttributes {
	return InputDataConfigDocumentsAttributes{ref: ref}
}

func (d InputDataConfigDocumentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d InputDataConfigDocumentsAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("input_format"))
}

func (d InputDataConfigDocumentsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("s3_uri"))
}

func (d InputDataConfigDocumentsAttributes) TestS3Uri() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("test_s3_uri"))
}

type InputDataConfigEntityListAttributes struct {
	ref terra.Reference
}

func (el InputDataConfigEntityListAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el InputDataConfigEntityListAttributes) InternalWithRef(ref terra.Reference) InputDataConfigEntityListAttributes {
	return InputDataConfigEntityListAttributes{ref: ref}
}

func (el InputDataConfigEntityListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el InputDataConfigEntityListAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("s3_uri"))
}

type InputDataConfigEntityTypesAttributes struct {
	ref terra.Reference
}

func (et InputDataConfigEntityTypesAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et InputDataConfigEntityTypesAttributes) InternalWithRef(ref terra.Reference) InputDataConfigEntityTypesAttributes {
	return InputDataConfigEntityTypesAttributes{ref: ref}
}

func (et InputDataConfigEntityTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et InputDataConfigEntityTypesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type InputDataConfigState struct {
	DataFormat         string                                   `json:"data_format"`
	Annotations        []InputDataConfigAnnotationsState        `json:"annotations"`
	AugmentedManifests []InputDataConfigAugmentedManifestsState `json:"augmented_manifests"`
	Documents          []InputDataConfigDocumentsState          `json:"documents"`
	EntityList         []InputDataConfigEntityListState         `json:"entity_list"`
	EntityTypes        []InputDataConfigEntityTypesState        `json:"entity_types"`
}

type InputDataConfigAnnotationsState struct {
	S3Uri     string `json:"s3_uri"`
	TestS3Uri string `json:"test_s3_uri"`
}

type InputDataConfigAugmentedManifestsState struct {
	AnnotationDataS3Uri  string   `json:"annotation_data_s3_uri"`
	AttributeNames       []string `json:"attribute_names"`
	DocumentType         string   `json:"document_type"`
	S3Uri                string   `json:"s3_uri"`
	SourceDocumentsS3Uri string   `json:"source_documents_s3_uri"`
	Split                string   `json:"split"`
}

type InputDataConfigDocumentsState struct {
	InputFormat string `json:"input_format"`
	S3Uri       string `json:"s3_uri"`
	TestS3Uri   string `json:"test_s3_uri"`
}

type InputDataConfigEntityListState struct {
	S3Uri string `json:"s3_uri"`
}

type InputDataConfigEntityTypesState struct {
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
