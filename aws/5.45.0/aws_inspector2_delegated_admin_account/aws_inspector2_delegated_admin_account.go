// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_inspector2_delegated_admin_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_inspector2_delegated_admin_account.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInspector2DelegatedAdminAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aidaa *Resource) Type() string {
	return "aws_inspector2_delegated_admin_account"
}

// LocalName returns the local name for [Resource].
func (aidaa *Resource) LocalName() string {
	return aidaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aidaa *Resource) Configuration() interface{} {
	return aidaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aidaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aidaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aidaa *Resource) Dependencies() terra.Dependencies {
	return aidaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aidaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aidaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aidaa *Resource) Attributes() awsInspector2DelegatedAdminAccountAttributes {
	return awsInspector2DelegatedAdminAccountAttributes{ref: terra.ReferenceResource(aidaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aidaa *Resource) ImportState(state io.Reader) error {
	aidaa.state = &awsInspector2DelegatedAdminAccountState{}
	if err := json.NewDecoder(state).Decode(aidaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aidaa.Type(), aidaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aidaa *Resource) State() (*awsInspector2DelegatedAdminAccountState, bool) {
	return aidaa.state, aidaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aidaa *Resource) StateMust() *awsInspector2DelegatedAdminAccountState {
	if aidaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aidaa.Type(), aidaa.LocalName()))
	}
	return aidaa.state
}

// Args contains the configurations for aws_inspector2_delegated_admin_account.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsInspector2DelegatedAdminAccountAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_inspector2_delegated_admin_account.
func (aidaa awsInspector2DelegatedAdminAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aidaa.ref.Append("account_id"))
}

// Id returns a reference to field id of aws_inspector2_delegated_admin_account.
func (aidaa awsInspector2DelegatedAdminAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aidaa.ref.Append("id"))
}

// RelationshipStatus returns a reference to field relationship_status of aws_inspector2_delegated_admin_account.
func (aidaa awsInspector2DelegatedAdminAccountAttributes) RelationshipStatus() terra.StringValue {
	return terra.ReferenceAsString(aidaa.ref.Append("relationship_status"))
}

func (aidaa awsInspector2DelegatedAdminAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aidaa.ref.Append("timeouts"))
}

type awsInspector2DelegatedAdminAccountState struct {
	AccountId          string         `json:"account_id"`
	Id                 string         `json:"id"`
	RelationshipStatus string         `json:"relationship_status"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
