// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lex_bot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lex_bot.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLexBotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alb *Resource) Type() string {
	return "aws_lex_bot"
}

// LocalName returns the local name for [Resource].
func (alb *Resource) LocalName() string {
	return alb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alb *Resource) Configuration() interface{} {
	return alb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alb *Resource) Dependencies() terra.Dependencies {
	return alb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alb *Resource) LifecycleManagement() *terra.Lifecycle {
	return alb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alb *Resource) Attributes() awsLexBotAttributes {
	return awsLexBotAttributes{ref: terra.ReferenceResource(alb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alb *Resource) ImportState(state io.Reader) error {
	alb.state = &awsLexBotState{}
	if err := json.NewDecoder(state).Decode(alb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alb.Type(), alb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alb *Resource) State() (*awsLexBotState, bool) {
	return alb.state, alb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alb *Resource) StateMust() *awsLexBotState {
	if alb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alb.Type(), alb.LocalName()))
	}
	return alb.state
}

// Args contains the configurations for aws_lex_bot.
type Args struct {
	// ChildDirected: bool, required
	ChildDirected terra.BoolValue `hcl:"child_directed,attr" validate:"required"`
	// CreateVersion: bool, optional
	CreateVersion terra.BoolValue `hcl:"create_version,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DetectSentiment: bool, optional
	DetectSentiment terra.BoolValue `hcl:"detect_sentiment,attr"`
	// EnableModelImprovements: bool, optional
	EnableModelImprovements terra.BoolValue `hcl:"enable_model_improvements,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleSessionTtlInSeconds: number, optional
	IdleSessionTtlInSeconds terra.NumberValue `hcl:"idle_session_ttl_in_seconds,attr"`
	// Locale: string, optional
	Locale terra.StringValue `hcl:"locale,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NluIntentConfidenceThreshold: number, optional
	NluIntentConfidenceThreshold terra.NumberValue `hcl:"nlu_intent_confidence_threshold,attr"`
	// ProcessBehavior: string, optional
	ProcessBehavior terra.StringValue `hcl:"process_behavior,attr"`
	// VoiceId: string, optional
	VoiceId terra.StringValue `hcl:"voice_id,attr"`
	// AbortStatement: required
	AbortStatement *AbortStatement `hcl:"abort_statement,block" validate:"required"`
	// ClarificationPrompt: optional
	ClarificationPrompt *ClarificationPrompt `hcl:"clarification_prompt,block"`
	// Intent: min=1,max=250
	Intent []Intent `hcl:"intent,block" validate:"min=1,max=250"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLexBotAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lex_bot.
func (alb awsLexBotAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("arn"))
}

// Checksum returns a reference to field checksum of aws_lex_bot.
func (alb awsLexBotAttributes) Checksum() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("checksum"))
}

// ChildDirected returns a reference to field child_directed of aws_lex_bot.
func (alb awsLexBotAttributes) ChildDirected() terra.BoolValue {
	return terra.ReferenceAsBool(alb.ref.Append("child_directed"))
}

// CreateVersion returns a reference to field create_version of aws_lex_bot.
func (alb awsLexBotAttributes) CreateVersion() terra.BoolValue {
	return terra.ReferenceAsBool(alb.ref.Append("create_version"))
}

// CreatedDate returns a reference to field created_date of aws_lex_bot.
func (alb awsLexBotAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("created_date"))
}

// Description returns a reference to field description of aws_lex_bot.
func (alb awsLexBotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("description"))
}

// DetectSentiment returns a reference to field detect_sentiment of aws_lex_bot.
func (alb awsLexBotAttributes) DetectSentiment() terra.BoolValue {
	return terra.ReferenceAsBool(alb.ref.Append("detect_sentiment"))
}

// EnableModelImprovements returns a reference to field enable_model_improvements of aws_lex_bot.
func (alb awsLexBotAttributes) EnableModelImprovements() terra.BoolValue {
	return terra.ReferenceAsBool(alb.ref.Append("enable_model_improvements"))
}

// FailureReason returns a reference to field failure_reason of aws_lex_bot.
func (alb awsLexBotAttributes) FailureReason() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("failure_reason"))
}

// Id returns a reference to field id of aws_lex_bot.
func (alb awsLexBotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("id"))
}

// IdleSessionTtlInSeconds returns a reference to field idle_session_ttl_in_seconds of aws_lex_bot.
func (alb awsLexBotAttributes) IdleSessionTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alb.ref.Append("idle_session_ttl_in_seconds"))
}

// LastUpdatedDate returns a reference to field last_updated_date of aws_lex_bot.
func (alb awsLexBotAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("last_updated_date"))
}

// Locale returns a reference to field locale of aws_lex_bot.
func (alb awsLexBotAttributes) Locale() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("locale"))
}

// Name returns a reference to field name of aws_lex_bot.
func (alb awsLexBotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("name"))
}

// NluIntentConfidenceThreshold returns a reference to field nlu_intent_confidence_threshold of aws_lex_bot.
func (alb awsLexBotAttributes) NluIntentConfidenceThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(alb.ref.Append("nlu_intent_confidence_threshold"))
}

// ProcessBehavior returns a reference to field process_behavior of aws_lex_bot.
func (alb awsLexBotAttributes) ProcessBehavior() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("process_behavior"))
}

// Status returns a reference to field status of aws_lex_bot.
func (alb awsLexBotAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("status"))
}

// Version returns a reference to field version of aws_lex_bot.
func (alb awsLexBotAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("version"))
}

// VoiceId returns a reference to field voice_id of aws_lex_bot.
func (alb awsLexBotAttributes) VoiceId() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("voice_id"))
}

func (alb awsLexBotAttributes) AbortStatement() terra.ListValue[AbortStatementAttributes] {
	return terra.ReferenceAsList[AbortStatementAttributes](alb.ref.Append("abort_statement"))
}

func (alb awsLexBotAttributes) ClarificationPrompt() terra.ListValue[ClarificationPromptAttributes] {
	return terra.ReferenceAsList[ClarificationPromptAttributes](alb.ref.Append("clarification_prompt"))
}

func (alb awsLexBotAttributes) Intent() terra.SetValue[IntentAttributes] {
	return terra.ReferenceAsSet[IntentAttributes](alb.ref.Append("intent"))
}

func (alb awsLexBotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alb.ref.Append("timeouts"))
}

type awsLexBotState struct {
	Arn                          string                     `json:"arn"`
	Checksum                     string                     `json:"checksum"`
	ChildDirected                bool                       `json:"child_directed"`
	CreateVersion                bool                       `json:"create_version"`
	CreatedDate                  string                     `json:"created_date"`
	Description                  string                     `json:"description"`
	DetectSentiment              bool                       `json:"detect_sentiment"`
	EnableModelImprovements      bool                       `json:"enable_model_improvements"`
	FailureReason                string                     `json:"failure_reason"`
	Id                           string                     `json:"id"`
	IdleSessionTtlInSeconds      float64                    `json:"idle_session_ttl_in_seconds"`
	LastUpdatedDate              string                     `json:"last_updated_date"`
	Locale                       string                     `json:"locale"`
	Name                         string                     `json:"name"`
	NluIntentConfidenceThreshold float64                    `json:"nlu_intent_confidence_threshold"`
	ProcessBehavior              string                     `json:"process_behavior"`
	Status                       string                     `json:"status"`
	Version                      string                     `json:"version"`
	VoiceId                      string                     `json:"voice_id"`
	AbortStatement               []AbortStatementState      `json:"abort_statement"`
	ClarificationPrompt          []ClarificationPromptState `json:"clarification_prompt"`
	Intent                       []IntentState              `json:"intent"`
	Timeouts                     *TimeoutsState             `json:"timeouts"`
}
