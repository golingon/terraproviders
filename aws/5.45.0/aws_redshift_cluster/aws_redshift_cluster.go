// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arc *Resource) Type() string {
	return "aws_redshift_cluster"
}

// LocalName returns the local name for [Resource].
func (arc *Resource) LocalName() string {
	return arc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arc *Resource) Configuration() interface{} {
	return arc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arc *Resource) Dependencies() terra.Dependencies {
	return arc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arc *Resource) Attributes() awsRedshiftClusterAttributes {
	return awsRedshiftClusterAttributes{ref: terra.ReferenceResource(arc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arc *Resource) ImportState(state io.Reader) error {
	arc.state = &awsRedshiftClusterState{}
	if err := json.NewDecoder(state).Decode(arc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arc.Type(), arc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arc *Resource) State() (*awsRedshiftClusterState, bool) {
	return arc.state, arc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arc *Resource) StateMust() *awsRedshiftClusterState {
	if arc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arc.Type(), arc.LocalName()))
	}
	return arc.state
}

// Args contains the configurations for aws_redshift_cluster.
type Args struct {
	// AllowVersionUpgrade: bool, optional
	AllowVersionUpgrade terra.BoolValue `hcl:"allow_version_upgrade,attr"`
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AquaConfigurationStatus: string, optional
	AquaConfigurationStatus terra.StringValue `hcl:"aqua_configuration_status,attr"`
	// AutomatedSnapshotRetentionPeriod: number, optional
	AutomatedSnapshotRetentionPeriod terra.NumberValue `hcl:"automated_snapshot_retention_period,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// AvailabilityZoneRelocationEnabled: bool, optional
	AvailabilityZoneRelocationEnabled terra.BoolValue `hcl:"availability_zone_relocation_enabled,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// ClusterParameterGroupName: string, optional
	ClusterParameterGroupName terra.StringValue `hcl:"cluster_parameter_group_name,attr"`
	// ClusterPublicKey: string, optional
	ClusterPublicKey terra.StringValue `hcl:"cluster_public_key,attr"`
	// ClusterRevisionNumber: string, optional
	ClusterRevisionNumber terra.StringValue `hcl:"cluster_revision_number,attr"`
	// ClusterSubnetGroupName: string, optional
	ClusterSubnetGroupName terra.StringValue `hcl:"cluster_subnet_group_name,attr"`
	// ClusterType: string, optional
	ClusterType terra.StringValue `hcl:"cluster_type,attr"`
	// ClusterVersion: string, optional
	ClusterVersion terra.StringValue `hcl:"cluster_version,attr"`
	// DatabaseName: string, optional
	DatabaseName terra.StringValue `hcl:"database_name,attr"`
	// DefaultIamRoleArn: string, optional
	DefaultIamRoleArn terra.StringValue `hcl:"default_iam_role_arn,attr"`
	// ElasticIp: string, optional
	ElasticIp terra.StringValue `hcl:"elastic_ip,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Endpoint: string, optional
	Endpoint terra.StringValue `hcl:"endpoint,attr"`
	// EnhancedVpcRouting: bool, optional
	EnhancedVpcRouting terra.BoolValue `hcl:"enhanced_vpc_routing,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// IamRoles: set of string, optional
	IamRoles terra.SetValue[terra.StringValue] `hcl:"iam_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MaintenanceTrackName: string, optional
	MaintenanceTrackName terra.StringValue `hcl:"maintenance_track_name,attr"`
	// ManageMasterPassword: bool, optional
	ManageMasterPassword terra.BoolValue `hcl:"manage_master_password,attr"`
	// ManualSnapshotRetentionPeriod: number, optional
	ManualSnapshotRetentionPeriod terra.NumberValue `hcl:"manual_snapshot_retention_period,attr"`
	// MasterPassword: string, optional
	MasterPassword terra.StringValue `hcl:"master_password,attr"`
	// MasterPasswordSecretKmsKeyId: string, optional
	MasterPasswordSecretKmsKeyId terra.StringValue `hcl:"master_password_secret_kms_key_id,attr"`
	// MasterUsername: string, optional
	MasterUsername terra.StringValue `hcl:"master_username,attr"`
	// MultiAz: bool, optional
	MultiAz terra.BoolValue `hcl:"multi_az,attr"`
	// NodeType: string, required
	NodeType terra.StringValue `hcl:"node_type,attr" validate:"required"`
	// NumberOfNodes: number, optional
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
	// OwnerAccount: string, optional
	OwnerAccount terra.StringValue `hcl:"owner_account,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// SnapshotArn: string, optional
	SnapshotArn terra.StringValue `hcl:"snapshot_arn,attr"`
	// SnapshotClusterIdentifier: string, optional
	SnapshotClusterIdentifier terra.StringValue `hcl:"snapshot_cluster_identifier,attr"`
	// SnapshotIdentifier: string, optional
	SnapshotIdentifier terra.StringValue `hcl:"snapshot_identifier,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// Logging: optional
	Logging *Logging `hcl:"logging,block"`
	// SnapshotCopy: optional
	SnapshotCopy *SnapshotCopy `hcl:"snapshot_copy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRedshiftClusterAttributes struct {
	ref terra.Reference
}

// AllowVersionUpgrade returns a reference to field allow_version_upgrade of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) AllowVersionUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("allow_version_upgrade"))
}

// ApplyImmediately returns a reference to field apply_immediately of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("apply_immediately"))
}

// AquaConfigurationStatus returns a reference to field aqua_configuration_status of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) AquaConfigurationStatus() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("aqua_configuration_status"))
}

// Arn returns a reference to field arn of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("arn"))
}

// AutomatedSnapshotRetentionPeriod returns a reference to field automated_snapshot_retention_period of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) AutomatedSnapshotRetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("automated_snapshot_retention_period"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("availability_zone"))
}

// AvailabilityZoneRelocationEnabled returns a reference to field availability_zone_relocation_enabled of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) AvailabilityZoneRelocationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("availability_zone_relocation_enabled"))
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_identifier"))
}

// ClusterNamespaceArn returns a reference to field cluster_namespace_arn of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterNamespaceArn() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_namespace_arn"))
}

// ClusterParameterGroupName returns a reference to field cluster_parameter_group_name of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterParameterGroupName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_parameter_group_name"))
}

// ClusterPublicKey returns a reference to field cluster_public_key of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterPublicKey() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_public_key"))
}

// ClusterRevisionNumber returns a reference to field cluster_revision_number of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterRevisionNumber() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_revision_number"))
}

// ClusterSubnetGroupName returns a reference to field cluster_subnet_group_name of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterSubnetGroupName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_subnet_group_name"))
}

// ClusterType returns a reference to field cluster_type of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_type"))
}

// ClusterVersion returns a reference to field cluster_version of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ClusterVersion() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("cluster_version"))
}

// DatabaseName returns a reference to field database_name of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("database_name"))
}

// DefaultIamRoleArn returns a reference to field default_iam_role_arn of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) DefaultIamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("default_iam_role_arn"))
}

// DnsName returns a reference to field dns_name of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("dns_name"))
}

// ElasticIp returns a reference to field elastic_ip of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ElasticIp() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("elastic_ip"))
}

// Encrypted returns a reference to field encrypted of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("encrypted"))
}

// Endpoint returns a reference to field endpoint of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("endpoint"))
}

// EnhancedVpcRouting returns a reference to field enhanced_vpc_routing of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) EnhancedVpcRouting() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enhanced_vpc_routing"))
}

// FinalSnapshotIdentifier returns a reference to field final_snapshot_identifier of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("final_snapshot_identifier"))
}

// IamRoles returns a reference to field iam_roles of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) IamRoles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arc.ref.Append("iam_roles"))
}

// Id returns a reference to field id of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("kms_key_id"))
}

// MaintenanceTrackName returns a reference to field maintenance_track_name of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MaintenanceTrackName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("maintenance_track_name"))
}

// ManageMasterPassword returns a reference to field manage_master_password of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ManageMasterPassword() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("manage_master_password"))
}

// ManualSnapshotRetentionPeriod returns a reference to field manual_snapshot_retention_period of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) ManualSnapshotRetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("manual_snapshot_retention_period"))
}

// MasterPassword returns a reference to field master_password of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MasterPassword() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("master_password"))
}

// MasterPasswordSecretArn returns a reference to field master_password_secret_arn of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MasterPasswordSecretArn() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("master_password_secret_arn"))
}

// MasterPasswordSecretKmsKeyId returns a reference to field master_password_secret_kms_key_id of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MasterPasswordSecretKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("master_password_secret_kms_key_id"))
}

// MasterUsername returns a reference to field master_username of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MasterUsername() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("master_username"))
}

// MultiAz returns a reference to field multi_az of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) MultiAz() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("multi_az"))
}

// NodeType returns a reference to field node_type of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("node_type"))
}

// NumberOfNodes returns a reference to field number_of_nodes of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("number_of_nodes"))
}

// OwnerAccount returns a reference to field owner_account of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) OwnerAccount() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("owner_account"))
}

// Port returns a reference to field port of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(arc.ref.Append("port"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("preferred_maintenance_window"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("publicly_accessible"))
}

// SkipFinalSnapshot returns a reference to field skip_final_snapshot of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("skip_final_snapshot"))
}

// SnapshotArn returns a reference to field snapshot_arn of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) SnapshotArn() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("snapshot_arn"))
}

// SnapshotClusterIdentifier returns a reference to field snapshot_cluster_identifier of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) SnapshotClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("snapshot_cluster_identifier"))
}

// SnapshotIdentifier returns a reference to field snapshot_identifier of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) SnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("snapshot_identifier"))
}

// Tags returns a reference to field tags of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arc.ref.Append("tags_all"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_redshift_cluster.
func (arc awsRedshiftClusterAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arc.ref.Append("vpc_security_group_ids"))
}

func (arc awsRedshiftClusterAttributes) ClusterNodes() terra.ListValue[ClusterNodesAttributes] {
	return terra.ReferenceAsList[ClusterNodesAttributes](arc.ref.Append("cluster_nodes"))
}

func (arc awsRedshiftClusterAttributes) Logging() terra.ListValue[LoggingAttributes] {
	return terra.ReferenceAsList[LoggingAttributes](arc.ref.Append("logging"))
}

func (arc awsRedshiftClusterAttributes) SnapshotCopy() terra.ListValue[SnapshotCopyAttributes] {
	return terra.ReferenceAsList[SnapshotCopyAttributes](arc.ref.Append("snapshot_copy"))
}

func (arc awsRedshiftClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arc.ref.Append("timeouts"))
}

type awsRedshiftClusterState struct {
	AllowVersionUpgrade               bool                `json:"allow_version_upgrade"`
	ApplyImmediately                  bool                `json:"apply_immediately"`
	AquaConfigurationStatus           string              `json:"aqua_configuration_status"`
	Arn                               string              `json:"arn"`
	AutomatedSnapshotRetentionPeriod  float64             `json:"automated_snapshot_retention_period"`
	AvailabilityZone                  string              `json:"availability_zone"`
	AvailabilityZoneRelocationEnabled bool                `json:"availability_zone_relocation_enabled"`
	ClusterIdentifier                 string              `json:"cluster_identifier"`
	ClusterNamespaceArn               string              `json:"cluster_namespace_arn"`
	ClusterParameterGroupName         string              `json:"cluster_parameter_group_name"`
	ClusterPublicKey                  string              `json:"cluster_public_key"`
	ClusterRevisionNumber             string              `json:"cluster_revision_number"`
	ClusterSubnetGroupName            string              `json:"cluster_subnet_group_name"`
	ClusterType                       string              `json:"cluster_type"`
	ClusterVersion                    string              `json:"cluster_version"`
	DatabaseName                      string              `json:"database_name"`
	DefaultIamRoleArn                 string              `json:"default_iam_role_arn"`
	DnsName                           string              `json:"dns_name"`
	ElasticIp                         string              `json:"elastic_ip"`
	Encrypted                         bool                `json:"encrypted"`
	Endpoint                          string              `json:"endpoint"`
	EnhancedVpcRouting                bool                `json:"enhanced_vpc_routing"`
	FinalSnapshotIdentifier           string              `json:"final_snapshot_identifier"`
	IamRoles                          []string            `json:"iam_roles"`
	Id                                string              `json:"id"`
	KmsKeyId                          string              `json:"kms_key_id"`
	MaintenanceTrackName              string              `json:"maintenance_track_name"`
	ManageMasterPassword              bool                `json:"manage_master_password"`
	ManualSnapshotRetentionPeriod     float64             `json:"manual_snapshot_retention_period"`
	MasterPassword                    string              `json:"master_password"`
	MasterPasswordSecretArn           string              `json:"master_password_secret_arn"`
	MasterPasswordSecretKmsKeyId      string              `json:"master_password_secret_kms_key_id"`
	MasterUsername                    string              `json:"master_username"`
	MultiAz                           bool                `json:"multi_az"`
	NodeType                          string              `json:"node_type"`
	NumberOfNodes                     float64             `json:"number_of_nodes"`
	OwnerAccount                      string              `json:"owner_account"`
	Port                              float64             `json:"port"`
	PreferredMaintenanceWindow        string              `json:"preferred_maintenance_window"`
	PubliclyAccessible                bool                `json:"publicly_accessible"`
	SkipFinalSnapshot                 bool                `json:"skip_final_snapshot"`
	SnapshotArn                       string              `json:"snapshot_arn"`
	SnapshotClusterIdentifier         string              `json:"snapshot_cluster_identifier"`
	SnapshotIdentifier                string              `json:"snapshot_identifier"`
	Tags                              map[string]string   `json:"tags"`
	TagsAll                           map[string]string   `json:"tags_all"`
	VpcSecurityGroupIds               []string            `json:"vpc_security_group_ids"`
	ClusterNodes                      []ClusterNodesState `json:"cluster_nodes"`
	Logging                           []LoggingState      `json:"logging"`
	SnapshotCopy                      []SnapshotCopyState `json:"snapshot_copy"`
	Timeouts                          *TimeoutsState      `json:"timeouts"`
}
