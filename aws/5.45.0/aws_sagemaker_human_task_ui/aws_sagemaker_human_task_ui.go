// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_human_task_ui

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_human_task_ui.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerHumanTaskUiState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ashtu *Resource) Type() string {
	return "aws_sagemaker_human_task_ui"
}

// LocalName returns the local name for [Resource].
func (ashtu *Resource) LocalName() string {
	return ashtu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ashtu *Resource) Configuration() interface{} {
	return ashtu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ashtu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ashtu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ashtu *Resource) Dependencies() terra.Dependencies {
	return ashtu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ashtu *Resource) LifecycleManagement() *terra.Lifecycle {
	return ashtu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ashtu *Resource) Attributes() awsSagemakerHumanTaskUiAttributes {
	return awsSagemakerHumanTaskUiAttributes{ref: terra.ReferenceResource(ashtu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ashtu *Resource) ImportState(state io.Reader) error {
	ashtu.state = &awsSagemakerHumanTaskUiState{}
	if err := json.NewDecoder(state).Decode(ashtu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ashtu.Type(), ashtu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ashtu *Resource) State() (*awsSagemakerHumanTaskUiState, bool) {
	return ashtu.state, ashtu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ashtu *Resource) StateMust() *awsSagemakerHumanTaskUiState {
	if ashtu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ashtu.Type(), ashtu.LocalName()))
	}
	return ashtu.state
}

// Args contains the configurations for aws_sagemaker_human_task_ui.
type Args struct {
	// HumanTaskUiName: string, required
	HumanTaskUiName terra.StringValue `hcl:"human_task_ui_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UiTemplate: required
	UiTemplate *UiTemplate `hcl:"ui_template,block" validate:"required"`
}

type awsSagemakerHumanTaskUiAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_human_task_ui.
func (ashtu awsSagemakerHumanTaskUiAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ashtu.ref.Append("arn"))
}

// HumanTaskUiName returns a reference to field human_task_ui_name of aws_sagemaker_human_task_ui.
func (ashtu awsSagemakerHumanTaskUiAttributes) HumanTaskUiName() terra.StringValue {
	return terra.ReferenceAsString(ashtu.ref.Append("human_task_ui_name"))
}

// Id returns a reference to field id of aws_sagemaker_human_task_ui.
func (ashtu awsSagemakerHumanTaskUiAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ashtu.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_sagemaker_human_task_ui.
func (ashtu awsSagemakerHumanTaskUiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ashtu.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_human_task_ui.
func (ashtu awsSagemakerHumanTaskUiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ashtu.ref.Append("tags_all"))
}

func (ashtu awsSagemakerHumanTaskUiAttributes) UiTemplate() terra.ListValue[UiTemplateAttributes] {
	return terra.ReferenceAsList[UiTemplateAttributes](ashtu.ref.Append("ui_template"))
}

type awsSagemakerHumanTaskUiState struct {
	Arn             string            `json:"arn"`
	HumanTaskUiName string            `json:"human_task_ui_name"`
	Id              string            `json:"id"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
	UiTemplate      []UiTemplateState `json:"ui_template"`
}
