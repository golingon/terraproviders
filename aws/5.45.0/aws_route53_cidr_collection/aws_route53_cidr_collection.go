// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_cidr_collection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_cidr_collection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53CidrCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcc *Resource) Type() string {
	return "aws_route53_cidr_collection"
}

// LocalName returns the local name for [Resource].
func (arcc *Resource) LocalName() string {
	return arcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcc *Resource) Configuration() interface{} {
	return arcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcc *Resource) Dependencies() terra.Dependencies {
	return arcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcc *Resource) Attributes() awsRoute53CidrCollectionAttributes {
	return awsRoute53CidrCollectionAttributes{ref: terra.ReferenceResource(arcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcc *Resource) ImportState(state io.Reader) error {
	arcc.state = &awsRoute53CidrCollectionState{}
	if err := json.NewDecoder(state).Decode(arcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcc.Type(), arcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcc *Resource) State() (*awsRoute53CidrCollectionState, bool) {
	return arcc.state, arcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcc *Resource) StateMust() *awsRoute53CidrCollectionState {
	if arcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcc.Type(), arcc.LocalName()))
	}
	return arcc.state
}

// Args contains the configurations for aws_route53_cidr_collection.
type Args struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsRoute53CidrCollectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_cidr_collection.
func (arcc awsRoute53CidrCollectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arcc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_route53_cidr_collection.
func (arcc awsRoute53CidrCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcc.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_cidr_collection.
func (arcc awsRoute53CidrCollectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arcc.ref.Append("name"))
}

// Version returns a reference to field version of aws_route53_cidr_collection.
func (arcc awsRoute53CidrCollectionAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(arcc.ref.Append("version"))
}

type awsRoute53CidrCollectionState struct {
	Arn     string  `json:"arn"`
	Id      string  `json:"id"`
	Name    string  `json:"name"`
	Version float64 `json:"version"`
}
