// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_replication_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecr_replication_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcrReplicationConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aerc *Resource) Type() string {
	return "aws_ecr_replication_configuration"
}

// LocalName returns the local name for [Resource].
func (aerc *Resource) LocalName() string {
	return aerc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aerc *Resource) Configuration() interface{} {
	return aerc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aerc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aerc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aerc *Resource) Dependencies() terra.Dependencies {
	return aerc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aerc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aerc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aerc *Resource) Attributes() awsEcrReplicationConfigurationAttributes {
	return awsEcrReplicationConfigurationAttributes{ref: terra.ReferenceResource(aerc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aerc *Resource) ImportState(state io.Reader) error {
	aerc.state = &awsEcrReplicationConfigurationState{}
	if err := json.NewDecoder(state).Decode(aerc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aerc.Type(), aerc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aerc *Resource) State() (*awsEcrReplicationConfigurationState, bool) {
	return aerc.state, aerc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aerc *Resource) StateMust() *awsEcrReplicationConfigurationState {
	if aerc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aerc.Type(), aerc.LocalName()))
	}
	return aerc.state
}

// Args contains the configurations for aws_ecr_replication_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicationConfiguration: optional
	ReplicationConfiguration *ReplicationConfiguration `hcl:"replication_configuration,block"`
}

type awsEcrReplicationConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecr_replication_configuration.
func (aerc awsEcrReplicationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("id"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_replication_configuration.
func (aerc awsEcrReplicationConfigurationAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aerc.ref.Append("registry_id"))
}

func (aerc awsEcrReplicationConfigurationAttributes) ReplicationConfiguration() terra.ListValue[ReplicationConfigurationAttributes] {
	return terra.ReferenceAsList[ReplicationConfigurationAttributes](aerc.ref.Append("replication_configuration"))
}

type awsEcrReplicationConfigurationState struct {
	Id                       string                          `json:"id"`
	RegistryId               string                          `json:"registry_id"`
	ReplicationConfiguration []ReplicationConfigurationState `json:"replication_configuration"`
}
