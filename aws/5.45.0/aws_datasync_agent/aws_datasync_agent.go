// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_agent

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_agent.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncAgentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ada *Resource) Type() string {
	return "aws_datasync_agent"
}

// LocalName returns the local name for [Resource].
func (ada *Resource) LocalName() string {
	return ada.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ada *Resource) Configuration() interface{} {
	return ada.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ada *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ada)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ada *Resource) Dependencies() terra.Dependencies {
	return ada.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ada *Resource) LifecycleManagement() *terra.Lifecycle {
	return ada.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ada *Resource) Attributes() awsDatasyncAgentAttributes {
	return awsDatasyncAgentAttributes{ref: terra.ReferenceResource(ada)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ada *Resource) ImportState(state io.Reader) error {
	ada.state = &awsDatasyncAgentState{}
	if err := json.NewDecoder(state).Decode(ada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ada.Type(), ada.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ada *Resource) State() (*awsDatasyncAgentState, bool) {
	return ada.state, ada.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ada *Resource) StateMust() *awsDatasyncAgentState {
	if ada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ada.Type(), ada.LocalName()))
	}
	return ada.state
}

// Args contains the configurations for aws_datasync_agent.
type Args struct {
	// ActivationKey: string, optional
	ActivationKey terra.StringValue `hcl:"activation_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrivateLinkEndpoint: string, optional
	PrivateLinkEndpoint terra.StringValue `hcl:"private_link_endpoint,attr"`
	// SecurityGroupArns: set of string, optional
	SecurityGroupArns terra.SetValue[terra.StringValue] `hcl:"security_group_arns,attr"`
	// SubnetArns: set of string, optional
	SubnetArns terra.SetValue[terra.StringValue] `hcl:"subnet_arns,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcEndpointId: string, optional
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDatasyncAgentAttributes struct {
	ref terra.Reference
}

// ActivationKey returns a reference to field activation_key of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) ActivationKey() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("activation_key"))
}

// Arn returns a reference to field arn of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("arn"))
}

// Id returns a reference to field id of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("ip_address"))
}

// Name returns a reference to field name of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("name"))
}

// PrivateLinkEndpoint returns a reference to field private_link_endpoint of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) PrivateLinkEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("private_link_endpoint"))
}

// SecurityGroupArns returns a reference to field security_group_arns of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) SecurityGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ada.ref.Append("security_group_arns"))
}

// SubnetArns returns a reference to field subnet_arns of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) SubnetArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ada.ref.Append("subnet_arns"))
}

// Tags returns a reference to field tags of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ada.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ada.ref.Append("tags_all"))
}

// VpcEndpointId returns a reference to field vpc_endpoint_id of aws_datasync_agent.
func (ada awsDatasyncAgentAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ada.ref.Append("vpc_endpoint_id"))
}

func (ada awsDatasyncAgentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ada.ref.Append("timeouts"))
}

type awsDatasyncAgentState struct {
	ActivationKey       string            `json:"activation_key"`
	Arn                 string            `json:"arn"`
	Id                  string            `json:"id"`
	IpAddress           string            `json:"ip_address"`
	Name                string            `json:"name"`
	PrivateLinkEndpoint string            `json:"private_link_endpoint"`
	SecurityGroupArns   []string          `json:"security_group_arns"`
	SubnetArns          []string          `json:"subnet_arns"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcEndpointId       string            `json:"vpc_endpoint_id"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
