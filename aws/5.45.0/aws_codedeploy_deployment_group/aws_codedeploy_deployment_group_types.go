// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codedeploy_deployment_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AlarmConfiguration struct {
	// Alarms: set of string, optional
	Alarms terra.SetValue[terra.StringValue] `hcl:"alarms,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IgnorePollAlarmFailure: bool, optional
	IgnorePollAlarmFailure terra.BoolValue `hcl:"ignore_poll_alarm_failure,attr"`
}

type AutoRollbackConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Events: set of string, optional
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr"`
}

type BlueGreenDeploymentConfig struct {
	// BlueGreenDeploymentConfigDeploymentReadyOption: optional
	DeploymentReadyOption *BlueGreenDeploymentConfigDeploymentReadyOption `hcl:"deployment_ready_option,block"`
	// BlueGreenDeploymentConfigGreenFleetProvisioningOption: optional
	GreenFleetProvisioningOption *BlueGreenDeploymentConfigGreenFleetProvisioningOption `hcl:"green_fleet_provisioning_option,block"`
	// BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess: optional
	TerminateBlueInstancesOnDeploymentSuccess *BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess `hcl:"terminate_blue_instances_on_deployment_success,block"`
}

type BlueGreenDeploymentConfigDeploymentReadyOption struct {
	// ActionOnTimeout: string, optional
	ActionOnTimeout terra.StringValue `hcl:"action_on_timeout,attr"`
	// WaitTimeInMinutes: number, optional
	WaitTimeInMinutes terra.NumberValue `hcl:"wait_time_in_minutes,attr"`
}

type BlueGreenDeploymentConfigGreenFleetProvisioningOption struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
}

type BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// TerminationWaitTimeInMinutes: number, optional
	TerminationWaitTimeInMinutes terra.NumberValue `hcl:"termination_wait_time_in_minutes,attr"`
}

type DeploymentStyle struct {
	// DeploymentOption: string, optional
	DeploymentOption terra.StringValue `hcl:"deployment_option,attr"`
	// DeploymentType: string, optional
	DeploymentType terra.StringValue `hcl:"deployment_type,attr"`
}

type Ec2TagFilter struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Ec2TagSet struct {
	// Ec2TagSetEc2TagFilter: min=0
	Ec2TagFilter []Ec2TagSetEc2TagFilter `hcl:"ec2_tag_filter,block" validate:"min=0"`
}

type Ec2TagSetEc2TagFilter struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type EcsService struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type LoadBalancerInfo struct {
	// LoadBalancerInfoElbInfo: min=0
	ElbInfo []LoadBalancerInfoElbInfo `hcl:"elb_info,block" validate:"min=0"`
	// LoadBalancerInfoTargetGroupInfo: min=0
	TargetGroupInfo []LoadBalancerInfoTargetGroupInfo `hcl:"target_group_info,block" validate:"min=0"`
	// LoadBalancerInfoTargetGroupPairInfo: optional
	TargetGroupPairInfo *LoadBalancerInfoTargetGroupPairInfo `hcl:"target_group_pair_info,block"`
}

type LoadBalancerInfoElbInfo struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type LoadBalancerInfoTargetGroupInfo struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type LoadBalancerInfoTargetGroupPairInfo struct {
	// LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute: required
	ProdTrafficRoute *LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute `hcl:"prod_traffic_route,block" validate:"required"`
	// LoadBalancerInfoTargetGroupPairInfoTargetGroup: min=1,max=2
	TargetGroup []LoadBalancerInfoTargetGroupPairInfoTargetGroup `hcl:"target_group,block" validate:"min=1,max=2"`
	// LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute: optional
	TestTrafficRoute *LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute `hcl:"test_traffic_route,block"`
}

type LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute struct {
	// ListenerArns: set of string, required
	ListenerArns terra.SetValue[terra.StringValue] `hcl:"listener_arns,attr" validate:"required"`
}

type LoadBalancerInfoTargetGroupPairInfoTargetGroup struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute struct {
	// ListenerArns: set of string, required
	ListenerArns terra.SetValue[terra.StringValue] `hcl:"listener_arns,attr" validate:"required"`
}

type OnPremisesInstanceTagFilter struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TriggerConfiguration struct {
	// TriggerEvents: set of string, required
	TriggerEvents terra.SetValue[terra.StringValue] `hcl:"trigger_events,attr" validate:"required"`
	// TriggerName: string, required
	TriggerName terra.StringValue `hcl:"trigger_name,attr" validate:"required"`
	// TriggerTargetArn: string, required
	TriggerTargetArn terra.StringValue `hcl:"trigger_target_arn,attr" validate:"required"`
}

type AlarmConfigurationAttributes struct {
	ref terra.Reference
}

func (ac AlarmConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AlarmConfigurationAttributes) InternalWithRef(ref terra.Reference) AlarmConfigurationAttributes {
	return AlarmConfigurationAttributes{ref: ref}
}

func (ac AlarmConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AlarmConfigurationAttributes) Alarms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ac.ref.Append("alarms"))
}

func (ac AlarmConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("enabled"))
}

func (ac AlarmConfigurationAttributes) IgnorePollAlarmFailure() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("ignore_poll_alarm_failure"))
}

type AutoRollbackConfigurationAttributes struct {
	ref terra.Reference
}

func (arc AutoRollbackConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return arc.ref, nil
}

func (arc AutoRollbackConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoRollbackConfigurationAttributes {
	return AutoRollbackConfigurationAttributes{ref: ref}
}

func (arc AutoRollbackConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arc.ref.InternalTokens()
}

func (arc AutoRollbackConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enabled"))
}

func (arc AutoRollbackConfigurationAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arc.ref.Append("events"))
}

type BlueGreenDeploymentConfigAttributes struct {
	ref terra.Reference
}

func (bgdc BlueGreenDeploymentConfigAttributes) InternalRef() (terra.Reference, error) {
	return bgdc.ref, nil
}

func (bgdc BlueGreenDeploymentConfigAttributes) InternalWithRef(ref terra.Reference) BlueGreenDeploymentConfigAttributes {
	return BlueGreenDeploymentConfigAttributes{ref: ref}
}

func (bgdc BlueGreenDeploymentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgdc.ref.InternalTokens()
}

func (bgdc BlueGreenDeploymentConfigAttributes) DeploymentReadyOption() terra.ListValue[BlueGreenDeploymentConfigDeploymentReadyOptionAttributes] {
	return terra.ReferenceAsList[BlueGreenDeploymentConfigDeploymentReadyOptionAttributes](bgdc.ref.Append("deployment_ready_option"))
}

func (bgdc BlueGreenDeploymentConfigAttributes) GreenFleetProvisioningOption() terra.ListValue[BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes] {
	return terra.ReferenceAsList[BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes](bgdc.ref.Append("green_fleet_provisioning_option"))
}

func (bgdc BlueGreenDeploymentConfigAttributes) TerminateBlueInstancesOnDeploymentSuccess() terra.ListValue[BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes] {
	return terra.ReferenceAsList[BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes](bgdc.ref.Append("terminate_blue_instances_on_deployment_success"))
}

type BlueGreenDeploymentConfigDeploymentReadyOptionAttributes struct {
	ref terra.Reference
}

func (dro BlueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalRef() (terra.Reference, error) {
	return dro.ref, nil
}

func (dro BlueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalWithRef(ref terra.Reference) BlueGreenDeploymentConfigDeploymentReadyOptionAttributes {
	return BlueGreenDeploymentConfigDeploymentReadyOptionAttributes{ref: ref}
}

func (dro BlueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dro.ref.InternalTokens()
}

func (dro BlueGreenDeploymentConfigDeploymentReadyOptionAttributes) ActionOnTimeout() terra.StringValue {
	return terra.ReferenceAsString(dro.ref.Append("action_on_timeout"))
}

func (dro BlueGreenDeploymentConfigDeploymentReadyOptionAttributes) WaitTimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(dro.ref.Append("wait_time_in_minutes"))
}

type BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes struct {
	ref terra.Reference
}

func (gfpo BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalRef() (terra.Reference, error) {
	return gfpo.ref, nil
}

func (gfpo BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalWithRef(ref terra.Reference) BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes {
	return BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes{ref: ref}
}

func (gfpo BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfpo.ref.InternalTokens()
}

func (gfpo BlueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gfpo.ref.Append("action"))
}

type BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes struct {
	ref terra.Reference
}

func (tbiods BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalRef() (terra.Reference, error) {
	return tbiods.ref, nil
}

func (tbiods BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalWithRef(ref terra.Reference) BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes {
	return BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes{ref: ref}
}

func (tbiods BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tbiods.ref.InternalTokens()
}

func (tbiods BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(tbiods.ref.Append("action"))
}

func (tbiods BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) TerminationWaitTimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(tbiods.ref.Append("termination_wait_time_in_minutes"))
}

type DeploymentStyleAttributes struct {
	ref terra.Reference
}

func (ds DeploymentStyleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DeploymentStyleAttributes) InternalWithRef(ref terra.Reference) DeploymentStyleAttributes {
	return DeploymentStyleAttributes{ref: ref}
}

func (ds DeploymentStyleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DeploymentStyleAttributes) DeploymentOption() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("deployment_option"))
}

func (ds DeploymentStyleAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("deployment_type"))
}

type Ec2TagFilterAttributes struct {
	ref terra.Reference
}

func (etf Ec2TagFilterAttributes) InternalRef() (terra.Reference, error) {
	return etf.ref, nil
}

func (etf Ec2TagFilterAttributes) InternalWithRef(ref terra.Reference) Ec2TagFilterAttributes {
	return Ec2TagFilterAttributes{ref: ref}
}

func (etf Ec2TagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etf.ref.InternalTokens()
}

func (etf Ec2TagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("key"))
}

func (etf Ec2TagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("type"))
}

func (etf Ec2TagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("value"))
}

type Ec2TagSetAttributes struct {
	ref terra.Reference
}

func (ets Ec2TagSetAttributes) InternalRef() (terra.Reference, error) {
	return ets.ref, nil
}

func (ets Ec2TagSetAttributes) InternalWithRef(ref terra.Reference) Ec2TagSetAttributes {
	return Ec2TagSetAttributes{ref: ref}
}

func (ets Ec2TagSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ets.ref.InternalTokens()
}

func (ets Ec2TagSetAttributes) Ec2TagFilter() terra.SetValue[Ec2TagSetEc2TagFilterAttributes] {
	return terra.ReferenceAsSet[Ec2TagSetEc2TagFilterAttributes](ets.ref.Append("ec2_tag_filter"))
}

type Ec2TagSetEc2TagFilterAttributes struct {
	ref terra.Reference
}

func (etf Ec2TagSetEc2TagFilterAttributes) InternalRef() (terra.Reference, error) {
	return etf.ref, nil
}

func (etf Ec2TagSetEc2TagFilterAttributes) InternalWithRef(ref terra.Reference) Ec2TagSetEc2TagFilterAttributes {
	return Ec2TagSetEc2TagFilterAttributes{ref: ref}
}

func (etf Ec2TagSetEc2TagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etf.ref.InternalTokens()
}

func (etf Ec2TagSetEc2TagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("key"))
}

func (etf Ec2TagSetEc2TagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("type"))
}

func (etf Ec2TagSetEc2TagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("value"))
}

type EcsServiceAttributes struct {
	ref terra.Reference
}

func (es EcsServiceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EcsServiceAttributes) InternalWithRef(ref terra.Reference) EcsServiceAttributes {
	return EcsServiceAttributes{ref: ref}
}

func (es EcsServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EcsServiceAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("cluster_name"))
}

func (es EcsServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("service_name"))
}

type LoadBalancerInfoAttributes struct {
	ref terra.Reference
}

func (lbi LoadBalancerInfoAttributes) InternalRef() (terra.Reference, error) {
	return lbi.ref, nil
}

func (lbi LoadBalancerInfoAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoAttributes {
	return LoadBalancerInfoAttributes{ref: ref}
}

func (lbi LoadBalancerInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lbi.ref.InternalTokens()
}

func (lbi LoadBalancerInfoAttributes) ElbInfo() terra.SetValue[LoadBalancerInfoElbInfoAttributes] {
	return terra.ReferenceAsSet[LoadBalancerInfoElbInfoAttributes](lbi.ref.Append("elb_info"))
}

func (lbi LoadBalancerInfoAttributes) TargetGroupInfo() terra.SetValue[LoadBalancerInfoTargetGroupInfoAttributes] {
	return terra.ReferenceAsSet[LoadBalancerInfoTargetGroupInfoAttributes](lbi.ref.Append("target_group_info"))
}

func (lbi LoadBalancerInfoAttributes) TargetGroupPairInfo() terra.ListValue[LoadBalancerInfoTargetGroupPairInfoAttributes] {
	return terra.ReferenceAsList[LoadBalancerInfoTargetGroupPairInfoAttributes](lbi.ref.Append("target_group_pair_info"))
}

type LoadBalancerInfoElbInfoAttributes struct {
	ref terra.Reference
}

func (ei LoadBalancerInfoElbInfoAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei LoadBalancerInfoElbInfoAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoElbInfoAttributes {
	return LoadBalancerInfoElbInfoAttributes{ref: ref}
}

func (ei LoadBalancerInfoElbInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei LoadBalancerInfoElbInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("name"))
}

type LoadBalancerInfoTargetGroupInfoAttributes struct {
	ref terra.Reference
}

func (tgi LoadBalancerInfoTargetGroupInfoAttributes) InternalRef() (terra.Reference, error) {
	return tgi.ref, nil
}

func (tgi LoadBalancerInfoTargetGroupInfoAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoTargetGroupInfoAttributes {
	return LoadBalancerInfoTargetGroupInfoAttributes{ref: ref}
}

func (tgi LoadBalancerInfoTargetGroupInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tgi.ref.InternalTokens()
}

func (tgi LoadBalancerInfoTargetGroupInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tgi.ref.Append("name"))
}

type LoadBalancerInfoTargetGroupPairInfoAttributes struct {
	ref terra.Reference
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) InternalRef() (terra.Reference, error) {
	return tgpi.ref, nil
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoTargetGroupPairInfoAttributes {
	return LoadBalancerInfoTargetGroupPairInfoAttributes{ref: ref}
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tgpi.ref.InternalTokens()
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) ProdTrafficRoute() terra.ListValue[LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes] {
	return terra.ReferenceAsList[LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes](tgpi.ref.Append("prod_traffic_route"))
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) TargetGroup() terra.ListValue[LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes] {
	return terra.ReferenceAsList[LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes](tgpi.ref.Append("target_group"))
}

func (tgpi LoadBalancerInfoTargetGroupPairInfoAttributes) TestTrafficRoute() terra.ListValue[LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes] {
	return terra.ReferenceAsList[LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes](tgpi.ref.Append("test_traffic_route"))
}

type LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes struct {
	ref terra.Reference
}

func (ptr LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalRef() (terra.Reference, error) {
	return ptr.ref, nil
}

func (ptr LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes {
	return LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes{ref: ref}
}

func (ptr LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptr.ref.InternalTokens()
}

func (ptr LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) ListenerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ptr.ref.Append("listener_arns"))
}

type LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes struct {
	ref terra.Reference
}

func (tg LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalRef() (terra.Reference, error) {
	return tg.ref, nil
}

func (tg LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes {
	return LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes{ref: ref}
}

func (tg LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tg.ref.InternalTokens()
}

func (tg LoadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tg.ref.Append("name"))
}

type LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes struct {
	ref terra.Reference
}

func (ttr LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalRef() (terra.Reference, error) {
	return ttr.ref, nil
}

func (ttr LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalWithRef(ref terra.Reference) LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes {
	return LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes{ref: ref}
}

func (ttr LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ttr.ref.InternalTokens()
}

func (ttr LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) ListenerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ttr.ref.Append("listener_arns"))
}

type OnPremisesInstanceTagFilterAttributes struct {
	ref terra.Reference
}

func (opitf OnPremisesInstanceTagFilterAttributes) InternalRef() (terra.Reference, error) {
	return opitf.ref, nil
}

func (opitf OnPremisesInstanceTagFilterAttributes) InternalWithRef(ref terra.Reference) OnPremisesInstanceTagFilterAttributes {
	return OnPremisesInstanceTagFilterAttributes{ref: ref}
}

func (opitf OnPremisesInstanceTagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return opitf.ref.InternalTokens()
}

func (opitf OnPremisesInstanceTagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("key"))
}

func (opitf OnPremisesInstanceTagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("type"))
}

func (opitf OnPremisesInstanceTagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("value"))
}

type TriggerConfigurationAttributes struct {
	ref terra.Reference
}

func (tc TriggerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TriggerConfigurationAttributes) InternalWithRef(ref terra.Reference) TriggerConfigurationAttributes {
	return TriggerConfigurationAttributes{ref: ref}
}

func (tc TriggerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TriggerConfigurationAttributes) TriggerEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tc.ref.Append("trigger_events"))
}

func (tc TriggerConfigurationAttributes) TriggerName() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("trigger_name"))
}

func (tc TriggerConfigurationAttributes) TriggerTargetArn() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("trigger_target_arn"))
}

type AlarmConfigurationState struct {
	Alarms                 []string `json:"alarms"`
	Enabled                bool     `json:"enabled"`
	IgnorePollAlarmFailure bool     `json:"ignore_poll_alarm_failure"`
}

type AutoRollbackConfigurationState struct {
	Enabled bool     `json:"enabled"`
	Events  []string `json:"events"`
}

type BlueGreenDeploymentConfigState struct {
	DeploymentReadyOption                     []BlueGreenDeploymentConfigDeploymentReadyOptionState                     `json:"deployment_ready_option"`
	GreenFleetProvisioningOption              []BlueGreenDeploymentConfigGreenFleetProvisioningOptionState              `json:"green_fleet_provisioning_option"`
	TerminateBlueInstancesOnDeploymentSuccess []BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessState `json:"terminate_blue_instances_on_deployment_success"`
}

type BlueGreenDeploymentConfigDeploymentReadyOptionState struct {
	ActionOnTimeout   string  `json:"action_on_timeout"`
	WaitTimeInMinutes float64 `json:"wait_time_in_minutes"`
}

type BlueGreenDeploymentConfigGreenFleetProvisioningOptionState struct {
	Action string `json:"action"`
}

type BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessState struct {
	Action                       string  `json:"action"`
	TerminationWaitTimeInMinutes float64 `json:"termination_wait_time_in_minutes"`
}

type DeploymentStyleState struct {
	DeploymentOption string `json:"deployment_option"`
	DeploymentType   string `json:"deployment_type"`
}

type Ec2TagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type Ec2TagSetState struct {
	Ec2TagFilter []Ec2TagSetEc2TagFilterState `json:"ec2_tag_filter"`
}

type Ec2TagSetEc2TagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type EcsServiceState struct {
	ClusterName string `json:"cluster_name"`
	ServiceName string `json:"service_name"`
}

type LoadBalancerInfoState struct {
	ElbInfo             []LoadBalancerInfoElbInfoState             `json:"elb_info"`
	TargetGroupInfo     []LoadBalancerInfoTargetGroupInfoState     `json:"target_group_info"`
	TargetGroupPairInfo []LoadBalancerInfoTargetGroupPairInfoState `json:"target_group_pair_info"`
}

type LoadBalancerInfoElbInfoState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupInfoState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupPairInfoState struct {
	ProdTrafficRoute []LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteState `json:"prod_traffic_route"`
	TargetGroup      []LoadBalancerInfoTargetGroupPairInfoTargetGroupState      `json:"target_group"`
	TestTrafficRoute []LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteState `json:"test_traffic_route"`
}

type LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteState struct {
	ListenerArns []string `json:"listener_arns"`
}

type LoadBalancerInfoTargetGroupPairInfoTargetGroupState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteState struct {
	ListenerArns []string `json:"listener_arns"`
}

type OnPremisesInstanceTagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TriggerConfigurationState struct {
	TriggerEvents    []string `json:"trigger_events"`
	TriggerName      string   `json:"trigger_name"`
	TriggerTargetArn string   `json:"trigger_target_arn"`
}
