// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codedeploy_deployment_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codedeploy_deployment_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodedeployDeploymentGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acdg *Resource) Type() string {
	return "aws_codedeploy_deployment_group"
}

// LocalName returns the local name for [Resource].
func (acdg *Resource) LocalName() string {
	return acdg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acdg *Resource) Configuration() interface{} {
	return acdg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acdg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acdg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acdg *Resource) Dependencies() terra.Dependencies {
	return acdg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acdg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acdg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acdg *Resource) Attributes() awsCodedeployDeploymentGroupAttributes {
	return awsCodedeployDeploymentGroupAttributes{ref: terra.ReferenceResource(acdg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acdg *Resource) ImportState(state io.Reader) error {
	acdg.state = &awsCodedeployDeploymentGroupState{}
	if err := json.NewDecoder(state).Decode(acdg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acdg.Type(), acdg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acdg *Resource) State() (*awsCodedeployDeploymentGroupState, bool) {
	return acdg.state, acdg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acdg *Resource) StateMust() *awsCodedeployDeploymentGroupState {
	if acdg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acdg.Type(), acdg.LocalName()))
	}
	return acdg.state
}

// Args contains the configurations for aws_codedeploy_deployment_group.
type Args struct {
	// AppName: string, required
	AppName terra.StringValue `hcl:"app_name,attr" validate:"required"`
	// AutoscalingGroups: set of string, optional
	AutoscalingGroups terra.SetValue[terra.StringValue] `hcl:"autoscaling_groups,attr"`
	// DeploymentConfigName: string, optional
	DeploymentConfigName terra.StringValue `hcl:"deployment_config_name,attr"`
	// DeploymentGroupName: string, required
	DeploymentGroupName terra.StringValue `hcl:"deployment_group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OutdatedInstancesStrategy: string, optional
	OutdatedInstancesStrategy terra.StringValue `hcl:"outdated_instances_strategy,attr"`
	// ServiceRoleArn: string, required
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AlarmConfiguration: optional
	AlarmConfiguration *AlarmConfiguration `hcl:"alarm_configuration,block"`
	// AutoRollbackConfiguration: optional
	AutoRollbackConfiguration *AutoRollbackConfiguration `hcl:"auto_rollback_configuration,block"`
	// BlueGreenDeploymentConfig: optional
	BlueGreenDeploymentConfig *BlueGreenDeploymentConfig `hcl:"blue_green_deployment_config,block"`
	// DeploymentStyle: optional
	DeploymentStyle *DeploymentStyle `hcl:"deployment_style,block"`
	// Ec2TagFilter: min=0
	Ec2TagFilter []Ec2TagFilter `hcl:"ec2_tag_filter,block" validate:"min=0"`
	// Ec2TagSet: min=0
	Ec2TagSet []Ec2TagSet `hcl:"ec2_tag_set,block" validate:"min=0"`
	// EcsService: optional
	EcsService *EcsService `hcl:"ecs_service,block"`
	// LoadBalancerInfo: optional
	LoadBalancerInfo *LoadBalancerInfo `hcl:"load_balancer_info,block"`
	// OnPremisesInstanceTagFilter: min=0
	OnPremisesInstanceTagFilter []OnPremisesInstanceTagFilter `hcl:"on_premises_instance_tag_filter,block" validate:"min=0"`
	// TriggerConfiguration: min=0
	TriggerConfiguration []TriggerConfiguration `hcl:"trigger_configuration,block" validate:"min=0"`
}

type awsCodedeployDeploymentGroupAttributes struct {
	ref terra.Reference
}

// AppName returns a reference to field app_name of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) AppName() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("app_name"))
}

// Arn returns a reference to field arn of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("arn"))
}

// AutoscalingGroups returns a reference to field autoscaling_groups of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) AutoscalingGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acdg.ref.Append("autoscaling_groups"))
}

// ComputePlatform returns a reference to field compute_platform of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("compute_platform"))
}

// DeploymentConfigName returns a reference to field deployment_config_name of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) DeploymentConfigName() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("deployment_config_name"))
}

// DeploymentGroupId returns a reference to field deployment_group_id of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) DeploymentGroupId() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("deployment_group_id"))
}

// DeploymentGroupName returns a reference to field deployment_group_name of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) DeploymentGroupName() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("deployment_group_name"))
}

// Id returns a reference to field id of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("id"))
}

// OutdatedInstancesStrategy returns a reference to field outdated_instances_strategy of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) OutdatedInstancesStrategy() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("outdated_instances_strategy"))
}

// ServiceRoleArn returns a reference to field service_role_arn of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(acdg.ref.Append("service_role_arn"))
}

// Tags returns a reference to field tags of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acdg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codedeploy_deployment_group.
func (acdg awsCodedeployDeploymentGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acdg.ref.Append("tags_all"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) AlarmConfiguration() terra.ListValue[AlarmConfigurationAttributes] {
	return terra.ReferenceAsList[AlarmConfigurationAttributes](acdg.ref.Append("alarm_configuration"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) AutoRollbackConfiguration() terra.ListValue[AutoRollbackConfigurationAttributes] {
	return terra.ReferenceAsList[AutoRollbackConfigurationAttributes](acdg.ref.Append("auto_rollback_configuration"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) BlueGreenDeploymentConfig() terra.ListValue[BlueGreenDeploymentConfigAttributes] {
	return terra.ReferenceAsList[BlueGreenDeploymentConfigAttributes](acdg.ref.Append("blue_green_deployment_config"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) DeploymentStyle() terra.ListValue[DeploymentStyleAttributes] {
	return terra.ReferenceAsList[DeploymentStyleAttributes](acdg.ref.Append("deployment_style"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) Ec2TagFilter() terra.SetValue[Ec2TagFilterAttributes] {
	return terra.ReferenceAsSet[Ec2TagFilterAttributes](acdg.ref.Append("ec2_tag_filter"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) Ec2TagSet() terra.SetValue[Ec2TagSetAttributes] {
	return terra.ReferenceAsSet[Ec2TagSetAttributes](acdg.ref.Append("ec2_tag_set"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) EcsService() terra.ListValue[EcsServiceAttributes] {
	return terra.ReferenceAsList[EcsServiceAttributes](acdg.ref.Append("ecs_service"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) LoadBalancerInfo() terra.ListValue[LoadBalancerInfoAttributes] {
	return terra.ReferenceAsList[LoadBalancerInfoAttributes](acdg.ref.Append("load_balancer_info"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) OnPremisesInstanceTagFilter() terra.SetValue[OnPremisesInstanceTagFilterAttributes] {
	return terra.ReferenceAsSet[OnPremisesInstanceTagFilterAttributes](acdg.ref.Append("on_premises_instance_tag_filter"))
}

func (acdg awsCodedeployDeploymentGroupAttributes) TriggerConfiguration() terra.SetValue[TriggerConfigurationAttributes] {
	return terra.ReferenceAsSet[TriggerConfigurationAttributes](acdg.ref.Append("trigger_configuration"))
}

type awsCodedeployDeploymentGroupState struct {
	AppName                     string                             `json:"app_name"`
	Arn                         string                             `json:"arn"`
	AutoscalingGroups           []string                           `json:"autoscaling_groups"`
	ComputePlatform             string                             `json:"compute_platform"`
	DeploymentConfigName        string                             `json:"deployment_config_name"`
	DeploymentGroupId           string                             `json:"deployment_group_id"`
	DeploymentGroupName         string                             `json:"deployment_group_name"`
	Id                          string                             `json:"id"`
	OutdatedInstancesStrategy   string                             `json:"outdated_instances_strategy"`
	ServiceRoleArn              string                             `json:"service_role_arn"`
	Tags                        map[string]string                  `json:"tags"`
	TagsAll                     map[string]string                  `json:"tags_all"`
	AlarmConfiguration          []AlarmConfigurationState          `json:"alarm_configuration"`
	AutoRollbackConfiguration   []AutoRollbackConfigurationState   `json:"auto_rollback_configuration"`
	BlueGreenDeploymentConfig   []BlueGreenDeploymentConfigState   `json:"blue_green_deployment_config"`
	DeploymentStyle             []DeploymentStyleState             `json:"deployment_style"`
	Ec2TagFilter                []Ec2TagFilterState                `json:"ec2_tag_filter"`
	Ec2TagSet                   []Ec2TagSetState                   `json:"ec2_tag_set"`
	EcsService                  []EcsServiceState                  `json:"ecs_service"`
	LoadBalancerInfo            []LoadBalancerInfoState            `json:"load_balancer_info"`
	OnPremisesInstanceTagFilter []OnPremisesInstanceTagFilterState `json:"on_premises_instance_tag_filter"`
	TriggerConfiguration        []TriggerConfigurationState        `json:"trigger_configuration"`
}
