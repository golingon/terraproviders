// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataLifecyclePolicyAttributes struct {
	ref terra.Reference
}

func (lp DataLifecyclePolicyAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp DataLifecyclePolicyAttributes) InternalWithRef(ref terra.Reference) DataLifecyclePolicyAttributes {
	return DataLifecyclePolicyAttributes{ref: ref}
}

func (lp DataLifecyclePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp DataLifecyclePolicyAttributes) TransitionToArchive() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("transition_to_archive"))
}

func (lp DataLifecyclePolicyAttributes) TransitionToIa() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("transition_to_ia"))
}

func (lp DataLifecyclePolicyAttributes) TransitionToPrimaryStorageClass() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("transition_to_primary_storage_class"))
}

type DataProtectionAttributes struct {
	ref terra.Reference
}

func (p DataProtectionAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataProtectionAttributes) InternalWithRef(ref terra.Reference) DataProtectionAttributes {
	return DataProtectionAttributes{ref: ref}
}

func (p DataProtectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataProtectionAttributes) ReplicationOverwrite() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("replication_overwrite"))
}

type DataLifecyclePolicyState struct {
	TransitionToArchive             string `json:"transition_to_archive"`
	TransitionToIa                  string `json:"transition_to_ia"`
	TransitionToPrimaryStorageClass string `json:"transition_to_primary_storage_class"`
}

type DataProtectionState struct {
	ReplicationOverwrite string `json:"replication_overwrite"`
}
