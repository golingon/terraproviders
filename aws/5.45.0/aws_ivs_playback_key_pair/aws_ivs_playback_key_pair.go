// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivs_playback_key_pair

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ivs_playback_key_pair.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIvsPlaybackKeyPairState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aipkp *Resource) Type() string {
	return "aws_ivs_playback_key_pair"
}

// LocalName returns the local name for [Resource].
func (aipkp *Resource) LocalName() string {
	return aipkp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aipkp *Resource) Configuration() interface{} {
	return aipkp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aipkp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aipkp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aipkp *Resource) Dependencies() terra.Dependencies {
	return aipkp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aipkp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aipkp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aipkp *Resource) Attributes() awsIvsPlaybackKeyPairAttributes {
	return awsIvsPlaybackKeyPairAttributes{ref: terra.ReferenceResource(aipkp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aipkp *Resource) ImportState(state io.Reader) error {
	aipkp.state = &awsIvsPlaybackKeyPairState{}
	if err := json.NewDecoder(state).Decode(aipkp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aipkp.Type(), aipkp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aipkp *Resource) State() (*awsIvsPlaybackKeyPairState, bool) {
	return aipkp.state, aipkp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aipkp *Resource) StateMust() *awsIvsPlaybackKeyPairState {
	if aipkp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aipkp.Type(), aipkp.LocalName()))
	}
	return aipkp.state
}

// Args contains the configurations for aws_ivs_playback_key_pair.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsIvsPlaybackKeyPairAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aipkp.ref.Append("arn"))
}

// Fingerprint returns a reference to field fingerprint of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(aipkp.ref.Append("fingerprint"))
}

// Id returns a reference to field id of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aipkp.ref.Append("id"))
}

// Name returns a reference to field name of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aipkp.ref.Append("name"))
}

// PublicKey returns a reference to field public_key of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(aipkp.ref.Append("public_key"))
}

// Tags returns a reference to field tags of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aipkp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ivs_playback_key_pair.
func (aipkp awsIvsPlaybackKeyPairAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aipkp.ref.Append("tags_all"))
}

func (aipkp awsIvsPlaybackKeyPairAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aipkp.ref.Append("timeouts"))
}

type awsIvsPlaybackKeyPairState struct {
	Arn         string            `json:"arn"`
	Fingerprint string            `json:"fingerprint"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	PublicKey   string            `json:"public_key"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
