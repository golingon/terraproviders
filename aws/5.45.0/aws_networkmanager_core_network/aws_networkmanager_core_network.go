// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_core_network

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_core_network.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerCoreNetworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ancn *Resource) Type() string {
	return "aws_networkmanager_core_network"
}

// LocalName returns the local name for [Resource].
func (ancn *Resource) LocalName() string {
	return ancn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ancn *Resource) Configuration() interface{} {
	return ancn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ancn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ancn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ancn *Resource) Dependencies() terra.Dependencies {
	return ancn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ancn *Resource) LifecycleManagement() *terra.Lifecycle {
	return ancn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ancn *Resource) Attributes() awsNetworkmanagerCoreNetworkAttributes {
	return awsNetworkmanagerCoreNetworkAttributes{ref: terra.ReferenceResource(ancn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ancn *Resource) ImportState(state io.Reader) error {
	ancn.state = &awsNetworkmanagerCoreNetworkState{}
	if err := json.NewDecoder(state).Decode(ancn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ancn.Type(), ancn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ancn *Resource) State() (*awsNetworkmanagerCoreNetworkState, bool) {
	return ancn.state, ancn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ancn *Resource) StateMust() *awsNetworkmanagerCoreNetworkState {
	if ancn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ancn.Type(), ancn.LocalName()))
	}
	return ancn.state
}

// Args contains the configurations for aws_networkmanager_core_network.
type Args struct {
	// BasePolicyDocument: string, optional
	BasePolicyDocument terra.StringValue `hcl:"base_policy_document,attr"`
	// BasePolicyRegion: string, optional
	BasePolicyRegion terra.StringValue `hcl:"base_policy_region,attr"`
	// BasePolicyRegions: set of string, optional
	BasePolicyRegions terra.SetValue[terra.StringValue] `hcl:"base_policy_regions,attr"`
	// CreateBasePolicy: bool, optional
	CreateBasePolicy terra.BoolValue `hcl:"create_base_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerCoreNetworkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("arn"))
}

// BasePolicyDocument returns a reference to field base_policy_document of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) BasePolicyDocument() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("base_policy_document"))
}

// BasePolicyRegion returns a reference to field base_policy_region of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) BasePolicyRegion() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("base_policy_region"))
}

// BasePolicyRegions returns a reference to field base_policy_regions of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) BasePolicyRegions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ancn.ref.Append("base_policy_regions"))
}

// CreateBasePolicy returns a reference to field create_base_policy of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) CreateBasePolicy() terra.BoolValue {
	return terra.ReferenceAsBool(ancn.ref.Append("create_base_policy"))
}

// CreatedAt returns a reference to field created_at of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("created_at"))
}

// Description returns a reference to field description of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("description"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("id"))
}

// State returns a reference to field state of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ancn.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ancn.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_core_network.
func (ancn awsNetworkmanagerCoreNetworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ancn.ref.Append("tags_all"))
}

func (ancn awsNetworkmanagerCoreNetworkAttributes) Edges() terra.ListValue[EdgesAttributes] {
	return terra.ReferenceAsList[EdgesAttributes](ancn.ref.Append("edges"))
}

func (ancn awsNetworkmanagerCoreNetworkAttributes) Segments() terra.ListValue[SegmentsAttributes] {
	return terra.ReferenceAsList[SegmentsAttributes](ancn.ref.Append("segments"))
}

func (ancn awsNetworkmanagerCoreNetworkAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ancn.ref.Append("timeouts"))
}

type awsNetworkmanagerCoreNetworkState struct {
	Arn                string            `json:"arn"`
	BasePolicyDocument string            `json:"base_policy_document"`
	BasePolicyRegion   string            `json:"base_policy_region"`
	BasePolicyRegions  []string          `json:"base_policy_regions"`
	CreateBasePolicy   bool              `json:"create_base_policy"`
	CreatedAt          string            `json:"created_at"`
	Description        string            `json:"description"`
	GlobalNetworkId    string            `json:"global_network_id"`
	Id                 string            `json:"id"`
	State              string            `json:"state"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Edges              []EdgesState      `json:"edges"`
	Segments           []SegmentsState   `json:"segments"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
