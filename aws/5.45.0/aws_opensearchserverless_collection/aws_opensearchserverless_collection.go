// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearchserverless_collection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opensearchserverless_collection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpensearchserverlessCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoc *Resource) Type() string {
	return "aws_opensearchserverless_collection"
}

// LocalName returns the local name for [Resource].
func (aoc *Resource) LocalName() string {
	return aoc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoc *Resource) Configuration() interface{} {
	return aoc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoc *Resource) Dependencies() terra.Dependencies {
	return aoc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoc *Resource) Attributes() awsOpensearchserverlessCollectionAttributes {
	return awsOpensearchserverlessCollectionAttributes{ref: terra.ReferenceResource(aoc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoc *Resource) ImportState(state io.Reader) error {
	aoc.state = &awsOpensearchserverlessCollectionState{}
	if err := json.NewDecoder(state).Decode(aoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoc.Type(), aoc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoc *Resource) State() (*awsOpensearchserverlessCollectionState, bool) {
	return aoc.state, aoc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoc *Resource) StateMust() *awsOpensearchserverlessCollectionState {
	if aoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoc.Type(), aoc.LocalName()))
	}
	return aoc.state
}

// Args contains the configurations for aws_opensearchserverless_collection.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StandbyReplicas: string, optional
	StandbyReplicas terra.StringValue `hcl:"standby_replicas,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsOpensearchserverlessCollectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("arn"))
}

// CollectionEndpoint returns a reference to field collection_endpoint of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) CollectionEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("collection_endpoint"))
}

// DashboardEndpoint returns a reference to field dashboard_endpoint of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) DashboardEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("dashboard_endpoint"))
}

// Description returns a reference to field description of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("description"))
}

// Id returns a reference to field id of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("kms_key_arn"))
}

// Name returns a reference to field name of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("name"))
}

// StandbyReplicas returns a reference to field standby_replicas of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) StandbyReplicas() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("standby_replicas"))
}

// Tags returns a reference to field tags of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aoc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aoc.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_opensearchserverless_collection.
func (aoc awsOpensearchserverlessCollectionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aoc.ref.Append("type"))
}

func (aoc awsOpensearchserverlessCollectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aoc.ref.Append("timeouts"))
}

type awsOpensearchserverlessCollectionState struct {
	Arn                string            `json:"arn"`
	CollectionEndpoint string            `json:"collection_endpoint"`
	DashboardEndpoint  string            `json:"dashboard_endpoint"`
	Description        string            `json:"description"`
	Id                 string            `json:"id"`
	KmsKeyArn          string            `json:"kms_key_arn"`
	Name               string            `json:"name"`
	StandbyReplicas    string            `json:"standby_replicas"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Type               string            `json:"type"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
