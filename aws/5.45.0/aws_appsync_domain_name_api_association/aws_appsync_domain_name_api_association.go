// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_domain_name_api_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_domain_name_api_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncDomainNameApiAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aadnaa *Resource) Type() string {
	return "aws_appsync_domain_name_api_association"
}

// LocalName returns the local name for [Resource].
func (aadnaa *Resource) LocalName() string {
	return aadnaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aadnaa *Resource) Configuration() interface{} {
	return aadnaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aadnaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aadnaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aadnaa *Resource) Dependencies() terra.Dependencies {
	return aadnaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aadnaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aadnaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aadnaa *Resource) Attributes() awsAppsyncDomainNameApiAssociationAttributes {
	return awsAppsyncDomainNameApiAssociationAttributes{ref: terra.ReferenceResource(aadnaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aadnaa *Resource) ImportState(state io.Reader) error {
	aadnaa.state = &awsAppsyncDomainNameApiAssociationState{}
	if err := json.NewDecoder(state).Decode(aadnaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aadnaa.Type(), aadnaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aadnaa *Resource) State() (*awsAppsyncDomainNameApiAssociationState, bool) {
	return aadnaa.state, aadnaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aadnaa *Resource) StateMust() *awsAppsyncDomainNameApiAssociationState {
	if aadnaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aadnaa.Type(), aadnaa.LocalName()))
	}
	return aadnaa.state
}

// Args contains the configurations for aws_appsync_domain_name_api_association.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsAppsyncDomainNameApiAssociationAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_domain_name_api_association.
func (aadnaa awsAppsyncDomainNameApiAssociationAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aadnaa.ref.Append("api_id"))
}

// DomainName returns a reference to field domain_name of aws_appsync_domain_name_api_association.
func (aadnaa awsAppsyncDomainNameApiAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aadnaa.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_appsync_domain_name_api_association.
func (aadnaa awsAppsyncDomainNameApiAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aadnaa.ref.Append("id"))
}

type awsAppsyncDomainNameApiAssociationState struct {
	ApiId      string `json:"api_id"`
	DomainName string `json:"domain_name"`
	Id         string `json:"id"`
}
