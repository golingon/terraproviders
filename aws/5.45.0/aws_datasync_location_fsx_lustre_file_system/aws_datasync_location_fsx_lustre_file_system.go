// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_fsx_lustre_file_system

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_fsx_lustre_file_system.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationFsxLustreFileSystemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adlflfs *Resource) Type() string {
	return "aws_datasync_location_fsx_lustre_file_system"
}

// LocalName returns the local name for [Resource].
func (adlflfs *Resource) LocalName() string {
	return adlflfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adlflfs *Resource) Configuration() interface{} {
	return adlflfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adlflfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adlflfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adlflfs *Resource) Dependencies() terra.Dependencies {
	return adlflfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adlflfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return adlflfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adlflfs *Resource) Attributes() awsDatasyncLocationFsxLustreFileSystemAttributes {
	return awsDatasyncLocationFsxLustreFileSystemAttributes{ref: terra.ReferenceResource(adlflfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adlflfs *Resource) ImportState(state io.Reader) error {
	adlflfs.state = &awsDatasyncLocationFsxLustreFileSystemState{}
	if err := json.NewDecoder(state).Decode(adlflfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adlflfs.Type(), adlflfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adlflfs *Resource) State() (*awsDatasyncLocationFsxLustreFileSystemState, bool) {
	return adlflfs.state, adlflfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adlflfs *Resource) StateMust() *awsDatasyncLocationFsxLustreFileSystemState {
	if adlflfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adlflfs.Type(), adlflfs.LocalName()))
	}
	return adlflfs.state
}

// Args contains the configurations for aws_datasync_location_fsx_lustre_file_system.
type Args struct {
	// FsxFilesystemArn: string, required
	FsxFilesystemArn terra.StringValue `hcl:"fsx_filesystem_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroupArns: set of string, required
	SecurityGroupArns terra.SetValue[terra.StringValue] `hcl:"security_group_arns,attr" validate:"required"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDatasyncLocationFsxLustreFileSystemAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("arn"))
}

// CreationTime returns a reference to field creation_time of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("creation_time"))
}

// FsxFilesystemArn returns a reference to field fsx_filesystem_arn of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) FsxFilesystemArn() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("fsx_filesystem_arn"))
}

// Id returns a reference to field id of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("id"))
}

// SecurityGroupArns returns a reference to field security_group_arns of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) SecurityGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adlflfs.ref.Append("security_group_arns"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlflfs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlflfs.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_fsx_lustre_file_system.
func (adlflfs awsDatasyncLocationFsxLustreFileSystemAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adlflfs.ref.Append("uri"))
}

type awsDatasyncLocationFsxLustreFileSystemState struct {
	Arn               string            `json:"arn"`
	CreationTime      string            `json:"creation_time"`
	FsxFilesystemArn  string            `json:"fsx_filesystem_arn"`
	Id                string            `json:"id"`
	SecurityGroupArns []string          `json:"security_group_arns"`
	Subdirectory      string            `json:"subdirectory"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Uri               string            `json:"uri"`
}
