// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_licensemanager_grant

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_licensemanager_grant.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLicensemanagerGrantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alg *Resource) Type() string {
	return "aws_licensemanager_grant"
}

// LocalName returns the local name for [Resource].
func (alg *Resource) LocalName() string {
	return alg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alg *Resource) Configuration() interface{} {
	return alg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alg *Resource) Dependencies() terra.Dependencies {
	return alg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alg *Resource) LifecycleManagement() *terra.Lifecycle {
	return alg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alg *Resource) Attributes() awsLicensemanagerGrantAttributes {
	return awsLicensemanagerGrantAttributes{ref: terra.ReferenceResource(alg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alg *Resource) ImportState(state io.Reader) error {
	alg.state = &awsLicensemanagerGrantState{}
	if err := json.NewDecoder(state).Decode(alg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alg.Type(), alg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alg *Resource) State() (*awsLicensemanagerGrantState, bool) {
	return alg.state, alg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alg *Resource) StateMust() *awsLicensemanagerGrantState {
	if alg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alg.Type(), alg.LocalName()))
	}
	return alg.state
}

// Args contains the configurations for aws_licensemanager_grant.
type Args struct {
	// AllowedOperations: set of string, required
	AllowedOperations terra.SetValue[terra.StringValue] `hcl:"allowed_operations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseArn: string, required
	LicenseArn terra.StringValue `hcl:"license_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type awsLicensemanagerGrantAttributes struct {
	ref terra.Reference
}

// AllowedOperations returns a reference to field allowed_operations of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) AllowedOperations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alg.ref.Append("allowed_operations"))
}

// Arn returns a reference to field arn of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("arn"))
}

// HomeRegion returns a reference to field home_region of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) HomeRegion() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("home_region"))
}

// Id returns a reference to field id of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("id"))
}

// LicenseArn returns a reference to field license_arn of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) LicenseArn() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("license_arn"))
}

// Name returns a reference to field name of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("name"))
}

// ParentArn returns a reference to field parent_arn of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) ParentArn() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("parent_arn"))
}

// Principal returns a reference to field principal of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("principal"))
}

// Status returns a reference to field status of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("status"))
}

// Version returns a reference to field version of aws_licensemanager_grant.
func (alg awsLicensemanagerGrantAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(alg.ref.Append("version"))
}

type awsLicensemanagerGrantState struct {
	AllowedOperations []string `json:"allowed_operations"`
	Arn               string   `json:"arn"`
	HomeRegion        string   `json:"home_region"`
	Id                string   `json:"id"`
	LicenseArn        string   `json:"license_arn"`
	Name              string   `json:"name"`
	ParentArn         string   `json:"parent_arn"`
	Principal         string   `json:"principal"`
	Status            string   `json:"status"`
	Version           string   `json:"version"`
}
