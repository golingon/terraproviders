// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appflow_flow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appflow_flow.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppflowFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaf *Resource) Type() string {
	return "aws_appflow_flow"
}

// LocalName returns the local name for [Resource].
func (aaf *Resource) LocalName() string {
	return aaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaf *Resource) Configuration() interface{} {
	return aaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaf *Resource) Dependencies() terra.Dependencies {
	return aaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaf *Resource) Attributes() awsAppflowFlowAttributes {
	return awsAppflowFlowAttributes{ref: terra.ReferenceResource(aaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaf *Resource) ImportState(state io.Reader) error {
	aaf.state = &awsAppflowFlowState{}
	if err := json.NewDecoder(state).Decode(aaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaf.Type(), aaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaf *Resource) State() (*awsAppflowFlowState, bool) {
	return aaf.state, aaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaf *Resource) StateMust() *awsAppflowFlowState {
	if aaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaf.Type(), aaf.LocalName()))
	}
	return aaf.state
}

// Args contains the configurations for aws_appflow_flow.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsArn: string, optional
	KmsArn terra.StringValue `hcl:"kms_arn,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DestinationFlowConfig: min=1
	DestinationFlowConfig []DestinationFlowConfig `hcl:"destination_flow_config,block" validate:"min=1"`
	// SourceFlowConfig: required
	SourceFlowConfig *SourceFlowConfig `hcl:"source_flow_config,block" validate:"required"`
	// Task: min=1
	Task []Task `hcl:"task,block" validate:"min=1"`
	// TriggerConfig: required
	TriggerConfig *TriggerConfig `hcl:"trigger_config,block" validate:"required"`
}

type awsAppflowFlowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("arn"))
}

// Description returns a reference to field description of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("description"))
}

// FlowStatus returns a reference to field flow_status of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) FlowStatus() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("flow_status"))
}

// Id returns a reference to field id of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("id"))
}

// KmsArn returns a reference to field kms_arn of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) KmsArn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("kms_arn"))
}

// Name returns a reference to field name of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_appflow_flow.
func (aaf awsAppflowFlowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags_all"))
}

func (aaf awsAppflowFlowAttributes) DestinationFlowConfig() terra.ListValue[DestinationFlowConfigAttributes] {
	return terra.ReferenceAsList[DestinationFlowConfigAttributes](aaf.ref.Append("destination_flow_config"))
}

func (aaf awsAppflowFlowAttributes) SourceFlowConfig() terra.ListValue[SourceFlowConfigAttributes] {
	return terra.ReferenceAsList[SourceFlowConfigAttributes](aaf.ref.Append("source_flow_config"))
}

func (aaf awsAppflowFlowAttributes) Task() terra.SetValue[TaskAttributes] {
	return terra.ReferenceAsSet[TaskAttributes](aaf.ref.Append("task"))
}

func (aaf awsAppflowFlowAttributes) TriggerConfig() terra.ListValue[TriggerConfigAttributes] {
	return terra.ReferenceAsList[TriggerConfigAttributes](aaf.ref.Append("trigger_config"))
}

type awsAppflowFlowState struct {
	Arn                   string                       `json:"arn"`
	Description           string                       `json:"description"`
	FlowStatus            string                       `json:"flow_status"`
	Id                    string                       `json:"id"`
	KmsArn                string                       `json:"kms_arn"`
	Name                  string                       `json:"name"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	DestinationFlowConfig []DestinationFlowConfigState `json:"destination_flow_config"`
	SourceFlowConfig      []SourceFlowConfigState      `json:"source_flow_config"`
	Task                  []TaskState                  `json:"task"`
	TriggerConfig         []TriggerConfigState         `json:"trigger_config"`
}
