// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloud9_environment_membership

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloud9_environment_membership.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloud9EnvironmentMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acem *Resource) Type() string {
	return "aws_cloud9_environment_membership"
}

// LocalName returns the local name for [Resource].
func (acem *Resource) LocalName() string {
	return acem.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acem *Resource) Configuration() interface{} {
	return acem.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acem *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acem)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acem *Resource) Dependencies() terra.Dependencies {
	return acem.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acem *Resource) LifecycleManagement() *terra.Lifecycle {
	return acem.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acem *Resource) Attributes() awsCloud9EnvironmentMembershipAttributes {
	return awsCloud9EnvironmentMembershipAttributes{ref: terra.ReferenceResource(acem)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acem *Resource) ImportState(state io.Reader) error {
	acem.state = &awsCloud9EnvironmentMembershipState{}
	if err := json.NewDecoder(state).Decode(acem.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acem.Type(), acem.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acem *Resource) State() (*awsCloud9EnvironmentMembershipState, bool) {
	return acem.state, acem.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acem *Resource) StateMust() *awsCloud9EnvironmentMembershipState {
	if acem.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acem.Type(), acem.LocalName()))
	}
	return acem.state
}

// Args contains the configurations for aws_cloud9_environment_membership.
type Args struct {
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions: string, required
	Permissions terra.StringValue `hcl:"permissions,attr" validate:"required"`
	// UserArn: string, required
	UserArn terra.StringValue `hcl:"user_arn,attr" validate:"required"`
}

type awsCloud9EnvironmentMembershipAttributes struct {
	ref terra.Reference
}

// EnvironmentId returns a reference to field environment_id of aws_cloud9_environment_membership.
func (acem awsCloud9EnvironmentMembershipAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(acem.ref.Append("environment_id"))
}

// Id returns a reference to field id of aws_cloud9_environment_membership.
func (acem awsCloud9EnvironmentMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acem.ref.Append("id"))
}

// Permissions returns a reference to field permissions of aws_cloud9_environment_membership.
func (acem awsCloud9EnvironmentMembershipAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(acem.ref.Append("permissions"))
}

// UserArn returns a reference to field user_arn of aws_cloud9_environment_membership.
func (acem awsCloud9EnvironmentMembershipAttributes) UserArn() terra.StringValue {
	return terra.ReferenceAsString(acem.ref.Append("user_arn"))
}

// UserId returns a reference to field user_id of aws_cloud9_environment_membership.
func (acem awsCloud9EnvironmentMembershipAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(acem.ref.Append("user_id"))
}

type awsCloud9EnvironmentMembershipState struct {
	EnvironmentId string `json:"environment_id"`
	Id            string `json:"id"`
	Permissions   string `json:"permissions"`
	UserArn       string `json:"user_arn"`
	UserId        string `json:"user_id"`
}
