// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssoadmin_application_access_scope

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssoadmin_application_access_scope.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsoadminApplicationAccessScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asaas *Resource) Type() string {
	return "aws_ssoadmin_application_access_scope"
}

// LocalName returns the local name for [Resource].
func (asaas *Resource) LocalName() string {
	return asaas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asaas *Resource) Configuration() interface{} {
	return asaas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asaas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asaas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asaas *Resource) Dependencies() terra.Dependencies {
	return asaas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asaas *Resource) LifecycleManagement() *terra.Lifecycle {
	return asaas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asaas *Resource) Attributes() awsSsoadminApplicationAccessScopeAttributes {
	return awsSsoadminApplicationAccessScopeAttributes{ref: terra.ReferenceResource(asaas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asaas *Resource) ImportState(state io.Reader) error {
	asaas.state = &awsSsoadminApplicationAccessScopeState{}
	if err := json.NewDecoder(state).Decode(asaas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asaas.Type(), asaas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asaas *Resource) State() (*awsSsoadminApplicationAccessScopeState, bool) {
	return asaas.state, asaas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asaas *Resource) StateMust() *awsSsoadminApplicationAccessScopeState {
	if asaas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asaas.Type(), asaas.LocalName()))
	}
	return asaas.state
}

// Args contains the configurations for aws_ssoadmin_application_access_scope.
type Args struct {
	// ApplicationArn: string, required
	ApplicationArn terra.StringValue `hcl:"application_arn,attr" validate:"required"`
	// AuthorizedTargets: list of string, optional
	AuthorizedTargets terra.ListValue[terra.StringValue] `hcl:"authorized_targets,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
}

type awsSsoadminApplicationAccessScopeAttributes struct {
	ref terra.Reference
}

// ApplicationArn returns a reference to field application_arn of aws_ssoadmin_application_access_scope.
func (asaas awsSsoadminApplicationAccessScopeAttributes) ApplicationArn() terra.StringValue {
	return terra.ReferenceAsString(asaas.ref.Append("application_arn"))
}

// AuthorizedTargets returns a reference to field authorized_targets of aws_ssoadmin_application_access_scope.
func (asaas awsSsoadminApplicationAccessScopeAttributes) AuthorizedTargets() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asaas.ref.Append("authorized_targets"))
}

// Id returns a reference to field id of aws_ssoadmin_application_access_scope.
func (asaas awsSsoadminApplicationAccessScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asaas.ref.Append("id"))
}

// Scope returns a reference to field scope of aws_ssoadmin_application_access_scope.
func (asaas awsSsoadminApplicationAccessScopeAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(asaas.ref.Append("scope"))
}

type awsSsoadminApplicationAccessScopeState struct {
	ApplicationArn    string   `json:"application_arn"`
	AuthorizedTargets []string `json:"authorized_targets"`
	Id                string   `json:"id"`
	Scope             string   `json:"scope"`
}
