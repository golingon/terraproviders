// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_service_action

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_service_action.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogServiceActionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assa *Resource) Type() string {
	return "aws_servicecatalog_service_action"
}

// LocalName returns the local name for [Resource].
func (assa *Resource) LocalName() string {
	return assa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assa *Resource) Configuration() interface{} {
	return assa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assa *Resource) Dependencies() terra.Dependencies {
	return assa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assa *Resource) LifecycleManagement() *terra.Lifecycle {
	return assa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assa *Resource) Attributes() awsServicecatalogServiceActionAttributes {
	return awsServicecatalogServiceActionAttributes{ref: terra.ReferenceResource(assa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assa *Resource) ImportState(state io.Reader) error {
	assa.state = &awsServicecatalogServiceActionState{}
	if err := json.NewDecoder(state).Decode(assa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assa.Type(), assa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assa *Resource) State() (*awsServicecatalogServiceActionState, bool) {
	return assa.state, assa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assa *Resource) StateMust() *awsServicecatalogServiceActionState {
	if assa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assa.Type(), assa.LocalName()))
	}
	return assa.state
}

// Args contains the configurations for aws_servicecatalog_service_action.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Definition: required
	Definition *Definition `hcl:"definition,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogServiceActionAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_service_action.
func (assa awsServicecatalogServiceActionAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(assa.ref.Append("accept_language"))
}

// Description returns a reference to field description of aws_servicecatalog_service_action.
func (assa awsServicecatalogServiceActionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(assa.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalog_service_action.
func (assa awsServicecatalogServiceActionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assa.ref.Append("id"))
}

// Name returns a reference to field name of aws_servicecatalog_service_action.
func (assa awsServicecatalogServiceActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assa.ref.Append("name"))
}

func (assa awsServicecatalogServiceActionAttributes) Definition() terra.ListValue[DefinitionAttributes] {
	return terra.ReferenceAsList[DefinitionAttributes](assa.ref.Append("definition"))
}

func (assa awsServicecatalogServiceActionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assa.ref.Append("timeouts"))
}

type awsServicecatalogServiceActionState struct {
	AcceptLanguage string            `json:"accept_language"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	Definition     []DefinitionState `json:"definition"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
