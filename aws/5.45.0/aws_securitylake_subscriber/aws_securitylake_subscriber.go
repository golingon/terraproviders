// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_subscriber

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securitylake_subscriber.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeSubscriberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "aws_securitylake_subscriber"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() awsSecuritylakeSubscriberAttributes {
	return awsSecuritylakeSubscriberAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &awsSecuritylakeSubscriberState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*awsSecuritylakeSubscriberState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *awsSecuritylakeSubscriberState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for aws_securitylake_subscriber.
type Args struct {
	// AccessType: string, optional
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// SubscriberDescription: string, optional
	SubscriberDescription terra.StringValue `hcl:"subscriber_description,attr"`
	// SubscriberName: string, optional
	SubscriberName terra.StringValue `hcl:"subscriber_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Source: min=0
	Source []Source `hcl:"source,block" validate:"min=0"`
	// SubscriberIdentity: min=0
	SubscriberIdentity []SubscriberIdentity `hcl:"subscriber_identity,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSecuritylakeSubscriberAttributes struct {
	ref terra.Reference
}

// AccessType returns a reference to field access_type of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("access_type"))
}

// Arn returns a reference to field arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// ResourceShareArn returns a reference to field resource_share_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) ResourceShareArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_share_arn"))
}

// ResourceShareName returns a reference to field resource_share_name of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) ResourceShareName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_share_name"))
}

// RoleArn returns a reference to field role_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("role_arn"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("s3_bucket_arn"))
}

// SubscriberDescription returns a reference to field subscriber_description of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberDescription() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_description"))
}

// SubscriberEndpoint returns a reference to field subscriber_endpoint of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_endpoint"))
}

// SubscriberName returns a reference to field subscriber_name of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_name"))
}

// SubscriberStatus returns a reference to field subscriber_status of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberStatus() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_status"))
}

// Tags returns a reference to field tags of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags_all"))
}

func (ass awsSecuritylakeSubscriberAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](ass.ref.Append("source"))
}

func (ass awsSecuritylakeSubscriberAttributes) SubscriberIdentity() terra.ListValue[SubscriberIdentityAttributes] {
	return terra.ReferenceAsList[SubscriberIdentityAttributes](ass.ref.Append("subscriber_identity"))
}

func (ass awsSecuritylakeSubscriberAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ass.ref.Append("timeouts"))
}

type awsSecuritylakeSubscriberState struct {
	AccessType            string                    `json:"access_type"`
	Arn                   string                    `json:"arn"`
	Id                    string                    `json:"id"`
	ResourceShareArn      string                    `json:"resource_share_arn"`
	ResourceShareName     string                    `json:"resource_share_name"`
	RoleArn               string                    `json:"role_arn"`
	S3BucketArn           string                    `json:"s3_bucket_arn"`
	SubscriberDescription string                    `json:"subscriber_description"`
	SubscriberEndpoint    string                    `json:"subscriber_endpoint"`
	SubscriberName        string                    `json:"subscriber_name"`
	SubscriberStatus      string                    `json:"subscriber_status"`
	Tags                  map[string]string         `json:"tags"`
	TagsAll               map[string]string         `json:"tags_all"`
	Source                []SourceState             `json:"source"`
	SubscriberIdentity    []SubscriberIdentityState `json:"subscriber_identity"`
	Timeouts              *TimeoutsState            `json:"timeouts"`
}
