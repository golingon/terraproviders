// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_subscriber

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Source struct {
	// SourceAwsLogSourceResource: min=0
	AwsLogSourceResource []SourceAwsLogSourceResource `hcl:"aws_log_source_resource,block" validate:"min=0"`
	// SourceCustomLogSourceResource: min=0
	CustomLogSourceResource []SourceCustomLogSourceResource `hcl:"custom_log_source_resource,block" validate:"min=0"`
}

type SourceAwsLogSourceResource struct {
	// SourceName: string, optional
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type SourceCustomLogSourceResource struct {
	// SourceName: string, optional
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type SubscriberIdentity struct {
	// ExternalId: string, required
	ExternalId terra.StringValue `hcl:"external_id,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) AwsLogSourceResource() terra.ListValue[SourceAwsLogSourceResourceAttributes] {
	return terra.ReferenceAsList[SourceAwsLogSourceResourceAttributes](s.ref.Append("aws_log_source_resource"))
}

func (s SourceAttributes) CustomLogSourceResource() terra.ListValue[SourceCustomLogSourceResourceAttributes] {
	return terra.ReferenceAsList[SourceCustomLogSourceResourceAttributes](s.ref.Append("custom_log_source_resource"))
}

type SourceAwsLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (alsr SourceAwsLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return alsr.ref, nil
}

func (alsr SourceAwsLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) SourceAwsLogSourceResourceAttributes {
	return SourceAwsLogSourceResourceAttributes{ref: ref}
}

func (alsr SourceAwsLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alsr.ref.InternalTokens()
}

func (alsr SourceAwsLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_name"))
}

func (alsr SourceAwsLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_version"))
}

type SourceCustomLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (clsr SourceCustomLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return clsr.ref, nil
}

func (clsr SourceCustomLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) SourceCustomLogSourceResourceAttributes {
	return SourceCustomLogSourceResourceAttributes{ref: ref}
}

func (clsr SourceCustomLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clsr.ref.InternalTokens()
}

func (clsr SourceCustomLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_name"))
}

func (clsr SourceCustomLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_version"))
}

func (clsr SourceCustomLogSourceResourceAttributes) Attributes() terra.ListValue[SourceCustomLogSourceResourceAttributesAttributes] {
	return terra.ReferenceAsList[SourceCustomLogSourceResourceAttributesAttributes](clsr.ref.Append("attributes"))
}

func (clsr SourceCustomLogSourceResourceAttributes) Provider() terra.ListValue[SourceCustomLogSourceResourceProviderAttributes] {
	return terra.ReferenceAsList[SourceCustomLogSourceResourceProviderAttributes](clsr.ref.Append("provider"))
}

type SourceCustomLogSourceResourceAttributesAttributes struct {
	ref terra.Reference
}

func (a SourceCustomLogSourceResourceAttributesAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SourceCustomLogSourceResourceAttributesAttributes) InternalWithRef(ref terra.Reference) SourceCustomLogSourceResourceAttributesAttributes {
	return SourceCustomLogSourceResourceAttributesAttributes{ref: ref}
}

func (a SourceCustomLogSourceResourceAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SourceCustomLogSourceResourceAttributesAttributes) CrawlerArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("crawler_arn"))
}

func (a SourceCustomLogSourceResourceAttributesAttributes) DatabaseArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database_arn"))
}

func (a SourceCustomLogSourceResourceAttributesAttributes) TableArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("table_arn"))
}

type SourceCustomLogSourceResourceProviderAttributes struct {
	ref terra.Reference
}

func (p SourceCustomLogSourceResourceProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SourceCustomLogSourceResourceProviderAttributes) InternalWithRef(ref terra.Reference) SourceCustomLogSourceResourceProviderAttributes {
	return SourceCustomLogSourceResourceProviderAttributes{ref: ref}
}

func (p SourceCustomLogSourceResourceProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SourceCustomLogSourceResourceProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("location"))
}

func (p SourceCustomLogSourceResourceProviderAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("role_arn"))
}

type SubscriberIdentityAttributes struct {
	ref terra.Reference
}

func (si SubscriberIdentityAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si SubscriberIdentityAttributes) InternalWithRef(ref terra.Reference) SubscriberIdentityAttributes {
	return SubscriberIdentityAttributes{ref: ref}
}

func (si SubscriberIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si SubscriberIdentityAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("external_id"))
}

func (si SubscriberIdentityAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("principal"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SourceState struct {
	AwsLogSourceResource    []SourceAwsLogSourceResourceState    `json:"aws_log_source_resource"`
	CustomLogSourceResource []SourceCustomLogSourceResourceState `json:"custom_log_source_resource"`
}

type SourceAwsLogSourceResourceState struct {
	SourceName    string `json:"source_name"`
	SourceVersion string `json:"source_version"`
}

type SourceCustomLogSourceResourceState struct {
	SourceName    string                                         `json:"source_name"`
	SourceVersion string                                         `json:"source_version"`
	Attributes    []SourceCustomLogSourceResourceAttributesState `json:"attributes"`
	Provider      []SourceCustomLogSourceResourceProviderState   `json:"provider"`
}

type SourceCustomLogSourceResourceAttributesState struct {
	CrawlerArn  string `json:"crawler_arn"`
	DatabaseArn string `json:"database_arn"`
	TableArn    string `json:"table_arn"`
}

type SourceCustomLogSourceResourceProviderState struct {
	Location string `json:"location"`
	RoleArn  string `json:"role_arn"`
}

type SubscriberIdentityState struct {
	ExternalId string `json:"external_id"`
	Principal  string `json:"principal"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
