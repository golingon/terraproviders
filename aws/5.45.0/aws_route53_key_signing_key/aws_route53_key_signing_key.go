// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_key_signing_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_key_signing_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53KeySigningKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arksk *Resource) Type() string {
	return "aws_route53_key_signing_key"
}

// LocalName returns the local name for [Resource].
func (arksk *Resource) LocalName() string {
	return arksk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arksk *Resource) Configuration() interface{} {
	return arksk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arksk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arksk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arksk *Resource) Dependencies() terra.Dependencies {
	return arksk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arksk *Resource) LifecycleManagement() *terra.Lifecycle {
	return arksk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arksk *Resource) Attributes() awsRoute53KeySigningKeyAttributes {
	return awsRoute53KeySigningKeyAttributes{ref: terra.ReferenceResource(arksk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arksk *Resource) ImportState(state io.Reader) error {
	arksk.state = &awsRoute53KeySigningKeyState{}
	if err := json.NewDecoder(state).Decode(arksk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arksk.Type(), arksk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arksk *Resource) State() (*awsRoute53KeySigningKeyState, bool) {
	return arksk.state, arksk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arksk *Resource) StateMust() *awsRoute53KeySigningKeyState {
	if arksk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arksk.Type(), arksk.LocalName()))
	}
	return arksk.state
}

// Args contains the configurations for aws_route53_key_signing_key.
type Args struct {
	// HostedZoneId: string, required
	HostedZoneId terra.StringValue `hcl:"hosted_zone_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyManagementServiceArn: string, required
	KeyManagementServiceArn terra.StringValue `hcl:"key_management_service_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type awsRoute53KeySigningKeyAttributes struct {
	ref terra.Reference
}

// DigestAlgorithmMnemonic returns a reference to field digest_algorithm_mnemonic of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) DigestAlgorithmMnemonic() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("digest_algorithm_mnemonic"))
}

// DigestAlgorithmType returns a reference to field digest_algorithm_type of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) DigestAlgorithmType() terra.NumberValue {
	return terra.ReferenceAsNumber(arksk.ref.Append("digest_algorithm_type"))
}

// DigestValue returns a reference to field digest_value of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) DigestValue() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("digest_value"))
}

// DnskeyRecord returns a reference to field dnskey_record of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) DnskeyRecord() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("dnskey_record"))
}

// DsRecord returns a reference to field ds_record of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) DsRecord() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("ds_record"))
}

// Flag returns a reference to field flag of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) Flag() terra.NumberValue {
	return terra.ReferenceAsNumber(arksk.ref.Append("flag"))
}

// HostedZoneId returns a reference to field hosted_zone_id of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("hosted_zone_id"))
}

// Id returns a reference to field id of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("id"))
}

// KeyManagementServiceArn returns a reference to field key_management_service_arn of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) KeyManagementServiceArn() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("key_management_service_arn"))
}

// KeyTag returns a reference to field key_tag of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) KeyTag() terra.NumberValue {
	return terra.ReferenceAsNumber(arksk.ref.Append("key_tag"))
}

// Name returns a reference to field name of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("name"))
}

// PublicKey returns a reference to field public_key of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("public_key"))
}

// SigningAlgorithmMnemonic returns a reference to field signing_algorithm_mnemonic of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) SigningAlgorithmMnemonic() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("signing_algorithm_mnemonic"))
}

// SigningAlgorithmType returns a reference to field signing_algorithm_type of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) SigningAlgorithmType() terra.NumberValue {
	return terra.ReferenceAsNumber(arksk.ref.Append("signing_algorithm_type"))
}

// Status returns a reference to field status of aws_route53_key_signing_key.
func (arksk awsRoute53KeySigningKeyAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arksk.ref.Append("status"))
}

type awsRoute53KeySigningKeyState struct {
	DigestAlgorithmMnemonic  string  `json:"digest_algorithm_mnemonic"`
	DigestAlgorithmType      float64 `json:"digest_algorithm_type"`
	DigestValue              string  `json:"digest_value"`
	DnskeyRecord             string  `json:"dnskey_record"`
	DsRecord                 string  `json:"ds_record"`
	Flag                     float64 `json:"flag"`
	HostedZoneId             string  `json:"hosted_zone_id"`
	Id                       string  `json:"id"`
	KeyManagementServiceArn  string  `json:"key_management_service_arn"`
	KeyTag                   float64 `json:"key_tag"`
	Name                     string  `json:"name"`
	PublicKey                string  `json:"public_key"`
	SigningAlgorithmMnemonic string  `json:"signing_algorithm_mnemonic"`
	SigningAlgorithmType     float64 `json:"signing_algorithm_type"`
	Status                   string  `json:"status"`
}
