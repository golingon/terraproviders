// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_feature_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_feature_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerFeatureGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asfg *Resource) Type() string {
	return "aws_sagemaker_feature_group"
}

// LocalName returns the local name for [Resource].
func (asfg *Resource) LocalName() string {
	return asfg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asfg *Resource) Configuration() interface{} {
	return asfg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asfg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asfg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asfg *Resource) Dependencies() terra.Dependencies {
	return asfg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asfg *Resource) LifecycleManagement() *terra.Lifecycle {
	return asfg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asfg *Resource) Attributes() awsSagemakerFeatureGroupAttributes {
	return awsSagemakerFeatureGroupAttributes{ref: terra.ReferenceResource(asfg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asfg *Resource) ImportState(state io.Reader) error {
	asfg.state = &awsSagemakerFeatureGroupState{}
	if err := json.NewDecoder(state).Decode(asfg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asfg.Type(), asfg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asfg *Resource) State() (*awsSagemakerFeatureGroupState, bool) {
	return asfg.state, asfg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asfg *Resource) StateMust() *awsSagemakerFeatureGroupState {
	if asfg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asfg.Type(), asfg.LocalName()))
	}
	return asfg.state
}

// Args contains the configurations for aws_sagemaker_feature_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventTimeFeatureName: string, required
	EventTimeFeatureName terra.StringValue `hcl:"event_time_feature_name,attr" validate:"required"`
	// FeatureGroupName: string, required
	FeatureGroupName terra.StringValue `hcl:"feature_group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecordIdentifierFeatureName: string, required
	RecordIdentifierFeatureName terra.StringValue `hcl:"record_identifier_feature_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// FeatureDefinition: min=1,max=2500
	FeatureDefinition []FeatureDefinition `hcl:"feature_definition,block" validate:"min=1,max=2500"`
	// OfflineStoreConfig: optional
	OfflineStoreConfig *OfflineStoreConfig `hcl:"offline_store_config,block"`
	// OnlineStoreConfig: optional
	OnlineStoreConfig *OnlineStoreConfig `hcl:"online_store_config,block"`
}

type awsSagemakerFeatureGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("description"))
}

// EventTimeFeatureName returns a reference to field event_time_feature_name of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) EventTimeFeatureName() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("event_time_feature_name"))
}

// FeatureGroupName returns a reference to field feature_group_name of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) FeatureGroupName() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("feature_group_name"))
}

// Id returns a reference to field id of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("id"))
}

// RecordIdentifierFeatureName returns a reference to field record_identifier_feature_name of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) RecordIdentifierFeatureName() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("record_identifier_feature_name"))
}

// RoleArn returns a reference to field role_arn of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(asfg.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_feature_group.
func (asfg awsSagemakerFeatureGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfg.ref.Append("tags_all"))
}

func (asfg awsSagemakerFeatureGroupAttributes) FeatureDefinition() terra.ListValue[FeatureDefinitionAttributes] {
	return terra.ReferenceAsList[FeatureDefinitionAttributes](asfg.ref.Append("feature_definition"))
}

func (asfg awsSagemakerFeatureGroupAttributes) OfflineStoreConfig() terra.ListValue[OfflineStoreConfigAttributes] {
	return terra.ReferenceAsList[OfflineStoreConfigAttributes](asfg.ref.Append("offline_store_config"))
}

func (asfg awsSagemakerFeatureGroupAttributes) OnlineStoreConfig() terra.ListValue[OnlineStoreConfigAttributes] {
	return terra.ReferenceAsList[OnlineStoreConfigAttributes](asfg.ref.Append("online_store_config"))
}

type awsSagemakerFeatureGroupState struct {
	Arn                         string                    `json:"arn"`
	Description                 string                    `json:"description"`
	EventTimeFeatureName        string                    `json:"event_time_feature_name"`
	FeatureGroupName            string                    `json:"feature_group_name"`
	Id                          string                    `json:"id"`
	RecordIdentifierFeatureName string                    `json:"record_identifier_feature_name"`
	RoleArn                     string                    `json:"role_arn"`
	Tags                        map[string]string         `json:"tags"`
	TagsAll                     map[string]string         `json:"tags_all"`
	FeatureDefinition           []FeatureDefinitionState  `json:"feature_definition"`
	OfflineStoreConfig          []OfflineStoreConfigState `json:"offline_store_config"`
	OnlineStoreConfig           []OnlineStoreConfigState  `json:"online_store_config"`
}
