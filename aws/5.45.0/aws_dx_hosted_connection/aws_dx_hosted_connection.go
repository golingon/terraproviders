// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_hosted_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_hosted_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxHostedConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adhc *Resource) Type() string {
	return "aws_dx_hosted_connection"
}

// LocalName returns the local name for [Resource].
func (adhc *Resource) LocalName() string {
	return adhc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adhc *Resource) Configuration() interface{} {
	return adhc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adhc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adhc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adhc *Resource) Dependencies() terra.Dependencies {
	return adhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adhc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adhc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adhc *Resource) Attributes() awsDxHostedConnectionAttributes {
	return awsDxHostedConnectionAttributes{ref: terra.ReferenceResource(adhc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adhc *Resource) ImportState(state io.Reader) error {
	adhc.state = &awsDxHostedConnectionState{}
	if err := json.NewDecoder(state).Decode(adhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adhc.Type(), adhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adhc *Resource) State() (*awsDxHostedConnectionState, bool) {
	return adhc.state, adhc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adhc *Resource) StateMust() *awsDxHostedConnectionState {
	if adhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adhc.Type(), adhc.LocalName()))
	}
	return adhc.state
}

// Args contains the configurations for aws_dx_hosted_connection.
type Args struct {
	// Bandwidth: string, required
	Bandwidth terra.StringValue `hcl:"bandwidth,attr" validate:"required"`
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OwnerAccountId: string, required
	OwnerAccountId terra.StringValue `hcl:"owner_account_id,attr" validate:"required"`
	// Vlan: number, required
	Vlan terra.NumberValue `hcl:"vlan,attr" validate:"required"`
}

type awsDxHostedConnectionAttributes struct {
	ref terra.Reference
}

// AwsDevice returns a reference to field aws_device of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) AwsDevice() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("aws_device"))
}

// Bandwidth returns a reference to field bandwidth of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Bandwidth() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("bandwidth"))
}

// ConnectionId returns a reference to field connection_id of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("connection_id"))
}

// HasLogicalRedundancy returns a reference to field has_logical_redundancy of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) HasLogicalRedundancy() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("has_logical_redundancy"))
}

// Id returns a reference to field id of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("id"))
}

// JumboFrameCapable returns a reference to field jumbo_frame_capable of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) JumboFrameCapable() terra.BoolValue {
	return terra.ReferenceAsBool(adhc.ref.Append("jumbo_frame_capable"))
}

// LagId returns a reference to field lag_id of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) LagId() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("lag_id"))
}

// LoaIssueTime returns a reference to field loa_issue_time of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) LoaIssueTime() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("loa_issue_time"))
}

// Location returns a reference to field location of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("location"))
}

// Name returns a reference to field name of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("name"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("owner_account_id"))
}

// PartnerName returns a reference to field partner_name of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) PartnerName() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("partner_name"))
}

// ProviderName returns a reference to field provider_name of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("provider_name"))
}

// Region returns a reference to field region of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("region"))
}

// State returns a reference to field state of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(adhc.ref.Append("state"))
}

// Vlan returns a reference to field vlan of aws_dx_hosted_connection.
func (adhc awsDxHostedConnectionAttributes) Vlan() terra.NumberValue {
	return terra.ReferenceAsNumber(adhc.ref.Append("vlan"))
}

type awsDxHostedConnectionState struct {
	AwsDevice            string  `json:"aws_device"`
	Bandwidth            string  `json:"bandwidth"`
	ConnectionId         string  `json:"connection_id"`
	HasLogicalRedundancy string  `json:"has_logical_redundancy"`
	Id                   string  `json:"id"`
	JumboFrameCapable    bool    `json:"jumbo_frame_capable"`
	LagId                string  `json:"lag_id"`
	LoaIssueTime         string  `json:"loa_issue_time"`
	Location             string  `json:"location"`
	Name                 string  `json:"name"`
	OwnerAccountId       string  `json:"owner_account_id"`
	PartnerName          string  `json:"partner_name"`
	ProviderName         string  `json:"provider_name"`
	Region               string  `json:"region"`
	State                string  `json:"state"`
	Vlan                 float64 `json:"vlan"`
}
