// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_realtime_log_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfront_realtime_log_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontRealtimeLogConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrlc *Resource) Type() string {
	return "aws_cloudfront_realtime_log_config"
}

// LocalName returns the local name for [Resource].
func (acrlc *Resource) LocalName() string {
	return acrlc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrlc *Resource) Configuration() interface{} {
	return acrlc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrlc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrlc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrlc *Resource) Dependencies() terra.Dependencies {
	return acrlc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrlc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrlc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrlc *Resource) Attributes() awsCloudfrontRealtimeLogConfigAttributes {
	return awsCloudfrontRealtimeLogConfigAttributes{ref: terra.ReferenceResource(acrlc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrlc *Resource) ImportState(state io.Reader) error {
	acrlc.state = &awsCloudfrontRealtimeLogConfigState{}
	if err := json.NewDecoder(state).Decode(acrlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrlc.Type(), acrlc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrlc *Resource) State() (*awsCloudfrontRealtimeLogConfigState, bool) {
	return acrlc.state, acrlc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrlc *Resource) StateMust() *awsCloudfrontRealtimeLogConfigState {
	if acrlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrlc.Type(), acrlc.LocalName()))
	}
	return acrlc.state
}

// Args contains the configurations for aws_cloudfront_realtime_log_config.
type Args struct {
	// Fields: set of string, required
	Fields terra.SetValue[terra.StringValue] `hcl:"fields,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SamplingRate: number, required
	SamplingRate terra.NumberValue `hcl:"sampling_rate,attr" validate:"required"`
	// Endpoint: required
	Endpoint *Endpoint `hcl:"endpoint,block" validate:"required"`
}

type awsCloudfrontRealtimeLogConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudfront_realtime_log_config.
func (acrlc awsCloudfrontRealtimeLogConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acrlc.ref.Append("arn"))
}

// Fields returns a reference to field fields of aws_cloudfront_realtime_log_config.
func (acrlc awsCloudfrontRealtimeLogConfigAttributes) Fields() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acrlc.ref.Append("fields"))
}

// Id returns a reference to field id of aws_cloudfront_realtime_log_config.
func (acrlc awsCloudfrontRealtimeLogConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrlc.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudfront_realtime_log_config.
func (acrlc awsCloudfrontRealtimeLogConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrlc.ref.Append("name"))
}

// SamplingRate returns a reference to field sampling_rate of aws_cloudfront_realtime_log_config.
func (acrlc awsCloudfrontRealtimeLogConfigAttributes) SamplingRate() terra.NumberValue {
	return terra.ReferenceAsNumber(acrlc.ref.Append("sampling_rate"))
}

func (acrlc awsCloudfrontRealtimeLogConfigAttributes) Endpoint() terra.ListValue[EndpointAttributes] {
	return terra.ReferenceAsList[EndpointAttributes](acrlc.ref.Append("endpoint"))
}

type awsCloudfrontRealtimeLogConfigState struct {
	Arn          string          `json:"arn"`
	Fields       []string        `json:"fields"`
	Id           string          `json:"id"`
	Name         string          `json:"name"`
	SamplingRate float64         `json:"sampling_rate"`
	Endpoint     []EndpointState `json:"endpoint"`
}
