// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_access_keys

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_iam_access_keys.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aiak *DataSource) DataSource() string {
	return "aws_iam_access_keys"
}

// LocalName returns the local name for [DataSource].
func (aiak *DataSource) LocalName() string {
	return aiak.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aiak *DataSource) Configuration() interface{} {
	return aiak.Args
}

// Attributes returns the attributes for [DataSource].
func (aiak *DataSource) Attributes() dataAwsIamAccessKeysAttributes {
	return dataAwsIamAccessKeysAttributes{ref: terra.ReferenceDataSource(aiak)}
}

// DataArgs contains the configurations for aws_iam_access_keys.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}

type dataAwsIamAccessKeysAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iam_access_keys.
func (aiak dataAwsIamAccessKeysAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiak.ref.Append("id"))
}

// User returns a reference to field user of aws_iam_access_keys.
func (aiak dataAwsIamAccessKeysAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(aiak.ref.Append("user"))
}

func (aiak dataAwsIamAccessKeysAttributes) AccessKeys() terra.SetValue[DataAccessKeysAttributes] {
	return terra.ReferenceAsSet[DataAccessKeysAttributes](aiak.ref.Append("access_keys"))
}
