// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_keyspaces_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_keyspaces_table.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKeyspacesTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akt *Resource) Type() string {
	return "aws_keyspaces_table"
}

// LocalName returns the local name for [Resource].
func (akt *Resource) LocalName() string {
	return akt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akt *Resource) Configuration() interface{} {
	return akt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akt *Resource) Dependencies() terra.Dependencies {
	return akt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akt *Resource) LifecycleManagement() *terra.Lifecycle {
	return akt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akt *Resource) Attributes() awsKeyspacesTableAttributes {
	return awsKeyspacesTableAttributes{ref: terra.ReferenceResource(akt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akt *Resource) ImportState(state io.Reader) error {
	akt.state = &awsKeyspacesTableState{}
	if err := json.NewDecoder(state).Decode(akt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akt.Type(), akt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akt *Resource) State() (*awsKeyspacesTableState, bool) {
	return akt.state, akt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akt *Resource) StateMust() *awsKeyspacesTableState {
	if akt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akt.Type(), akt.LocalName()))
	}
	return akt.state
}

// Args contains the configurations for aws_keyspaces_table.
type Args struct {
	// DefaultTimeToLive: number, optional
	DefaultTimeToLive terra.NumberValue `hcl:"default_time_to_live,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyspaceName: string, required
	KeyspaceName terra.StringValue `hcl:"keyspace_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CapacitySpecification: optional
	CapacitySpecification *CapacitySpecification `hcl:"capacity_specification,block"`
	// ClientSideTimestamps: optional
	ClientSideTimestamps *ClientSideTimestamps `hcl:"client_side_timestamps,block"`
	// Comment: optional
	Comment *Comment `hcl:"comment,block"`
	// EncryptionSpecification: optional
	EncryptionSpecification *EncryptionSpecification `hcl:"encryption_specification,block"`
	// PointInTimeRecovery: optional
	PointInTimeRecovery *PointInTimeRecovery `hcl:"point_in_time_recovery,block"`
	// SchemaDefinition: required
	SchemaDefinition *SchemaDefinition `hcl:"schema_definition,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Ttl: optional
	Ttl *Ttl `hcl:"ttl,block"`
}

type awsKeyspacesTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akt.ref.Append("arn"))
}

// DefaultTimeToLive returns a reference to field default_time_to_live of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) DefaultTimeToLive() terra.NumberValue {
	return terra.ReferenceAsNumber(akt.ref.Append("default_time_to_live"))
}

// Id returns a reference to field id of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akt.ref.Append("id"))
}

// KeyspaceName returns a reference to field keyspace_name of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) KeyspaceName() terra.StringValue {
	return terra.ReferenceAsString(akt.ref.Append("keyspace_name"))
}

// TableName returns a reference to field table_name of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(akt.ref.Append("table_name"))
}

// Tags returns a reference to field tags of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_keyspaces_table.
func (akt awsKeyspacesTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akt.ref.Append("tags_all"))
}

func (akt awsKeyspacesTableAttributes) CapacitySpecification() terra.ListValue[CapacitySpecificationAttributes] {
	return terra.ReferenceAsList[CapacitySpecificationAttributes](akt.ref.Append("capacity_specification"))
}

func (akt awsKeyspacesTableAttributes) ClientSideTimestamps() terra.ListValue[ClientSideTimestampsAttributes] {
	return terra.ReferenceAsList[ClientSideTimestampsAttributes](akt.ref.Append("client_side_timestamps"))
}

func (akt awsKeyspacesTableAttributes) Comment() terra.ListValue[CommentAttributes] {
	return terra.ReferenceAsList[CommentAttributes](akt.ref.Append("comment"))
}

func (akt awsKeyspacesTableAttributes) EncryptionSpecification() terra.ListValue[EncryptionSpecificationAttributes] {
	return terra.ReferenceAsList[EncryptionSpecificationAttributes](akt.ref.Append("encryption_specification"))
}

func (akt awsKeyspacesTableAttributes) PointInTimeRecovery() terra.ListValue[PointInTimeRecoveryAttributes] {
	return terra.ReferenceAsList[PointInTimeRecoveryAttributes](akt.ref.Append("point_in_time_recovery"))
}

func (akt awsKeyspacesTableAttributes) SchemaDefinition() terra.ListValue[SchemaDefinitionAttributes] {
	return terra.ReferenceAsList[SchemaDefinitionAttributes](akt.ref.Append("schema_definition"))
}

func (akt awsKeyspacesTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akt.ref.Append("timeouts"))
}

func (akt awsKeyspacesTableAttributes) Ttl() terra.ListValue[TtlAttributes] {
	return terra.ReferenceAsList[TtlAttributes](akt.ref.Append("ttl"))
}

type awsKeyspacesTableState struct {
	Arn                     string                         `json:"arn"`
	DefaultTimeToLive       float64                        `json:"default_time_to_live"`
	Id                      string                         `json:"id"`
	KeyspaceName            string                         `json:"keyspace_name"`
	TableName               string                         `json:"table_name"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	CapacitySpecification   []CapacitySpecificationState   `json:"capacity_specification"`
	ClientSideTimestamps    []ClientSideTimestampsState    `json:"client_side_timestamps"`
	Comment                 []CommentState                 `json:"comment"`
	EncryptionSpecification []EncryptionSpecificationState `json:"encryption_specification"`
	PointInTimeRecovery     []PointInTimeRecoveryState     `json:"point_in_time_recovery"`
	SchemaDefinition        []SchemaDefinitionState        `json:"schema_definition"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
	Ttl                     []TtlState                     `json:"ttl"`
}
