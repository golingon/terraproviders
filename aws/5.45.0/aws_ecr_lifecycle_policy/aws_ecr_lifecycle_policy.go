// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_lifecycle_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecr_lifecycle_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcrLifecyclePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aelp *Resource) Type() string {
	return "aws_ecr_lifecycle_policy"
}

// LocalName returns the local name for [Resource].
func (aelp *Resource) LocalName() string {
	return aelp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aelp *Resource) Configuration() interface{} {
	return aelp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aelp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aelp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aelp *Resource) Dependencies() terra.Dependencies {
	return aelp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aelp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aelp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aelp *Resource) Attributes() awsEcrLifecyclePolicyAttributes {
	return awsEcrLifecyclePolicyAttributes{ref: terra.ReferenceResource(aelp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aelp *Resource) ImportState(state io.Reader) error {
	aelp.state = &awsEcrLifecyclePolicyState{}
	if err := json.NewDecoder(state).Decode(aelp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aelp.Type(), aelp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aelp *Resource) State() (*awsEcrLifecyclePolicyState, bool) {
	return aelp.state, aelp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aelp *Resource) StateMust() *awsEcrLifecyclePolicyState {
	if aelp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aelp.Type(), aelp.LocalName()))
	}
	return aelp.state
}

// Args contains the configurations for aws_ecr_lifecycle_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
}

type awsEcrLifecyclePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecr_lifecycle_policy.
func (aelp awsEcrLifecyclePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aelp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_ecr_lifecycle_policy.
func (aelp awsEcrLifecyclePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(aelp.ref.Append("policy"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_lifecycle_policy.
func (aelp awsEcrLifecyclePolicyAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aelp.ref.Append("registry_id"))
}

// Repository returns a reference to field repository of aws_ecr_lifecycle_policy.
func (aelp awsEcrLifecyclePolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceAsString(aelp.ref.Append("repository"))
}

type awsEcrLifecyclePolicyState struct {
	Id         string `json:"id"`
	Policy     string `json:"policy"`
	RegistryId string `json:"registry_id"`
	Repository string `json:"repository"`
}
