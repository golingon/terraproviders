// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rum_metrics_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rum_metrics_destination.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRumMetricsDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (armd *Resource) Type() string {
	return "aws_rum_metrics_destination"
}

// LocalName returns the local name for [Resource].
func (armd *Resource) LocalName() string {
	return armd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (armd *Resource) Configuration() interface{} {
	return armd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (armd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(armd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (armd *Resource) Dependencies() terra.Dependencies {
	return armd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (armd *Resource) LifecycleManagement() *terra.Lifecycle {
	return armd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (armd *Resource) Attributes() awsRumMetricsDestinationAttributes {
	return awsRumMetricsDestinationAttributes{ref: terra.ReferenceResource(armd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (armd *Resource) ImportState(state io.Reader) error {
	armd.state = &awsRumMetricsDestinationState{}
	if err := json.NewDecoder(state).Decode(armd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", armd.Type(), armd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (armd *Resource) State() (*awsRumMetricsDestinationState, bool) {
	return armd.state, armd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (armd *Resource) StateMust() *awsRumMetricsDestinationState {
	if armd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", armd.Type(), armd.LocalName()))
	}
	return armd.state
}

// Args contains the configurations for aws_rum_metrics_destination.
type Args struct {
	// AppMonitorName: string, required
	AppMonitorName terra.StringValue `hcl:"app_monitor_name,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// DestinationArn: string, optional
	DestinationArn terra.StringValue `hcl:"destination_arn,attr"`
	// IamRoleArn: string, optional
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsRumMetricsDestinationAttributes struct {
	ref terra.Reference
}

// AppMonitorName returns a reference to field app_monitor_name of aws_rum_metrics_destination.
func (armd awsRumMetricsDestinationAttributes) AppMonitorName() terra.StringValue {
	return terra.ReferenceAsString(armd.ref.Append("app_monitor_name"))
}

// Destination returns a reference to field destination of aws_rum_metrics_destination.
func (armd awsRumMetricsDestinationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(armd.ref.Append("destination"))
}

// DestinationArn returns a reference to field destination_arn of aws_rum_metrics_destination.
func (armd awsRumMetricsDestinationAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(armd.ref.Append("destination_arn"))
}

// IamRoleArn returns a reference to field iam_role_arn of aws_rum_metrics_destination.
func (armd awsRumMetricsDestinationAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(armd.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_rum_metrics_destination.
func (armd awsRumMetricsDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(armd.ref.Append("id"))
}

type awsRumMetricsDestinationState struct {
	AppMonitorName string `json:"app_monitor_name"`
	Destination    string `json:"destination"`
	DestinationArn string `json:"destination_arn"`
	IamRoleArn     string `json:"iam_role_arn"`
	Id             string `json:"id"`
}
