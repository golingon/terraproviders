// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_namespace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_namespace.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqn *Resource) Type() string {
	return "aws_quicksight_namespace"
}

// LocalName returns the local name for [Resource].
func (aqn *Resource) LocalName() string {
	return aqn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqn *Resource) Configuration() interface{} {
	return aqn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqn *Resource) Dependencies() terra.Dependencies {
	return aqn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqn *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqn *Resource) Attributes() awsQuicksightNamespaceAttributes {
	return awsQuicksightNamespaceAttributes{ref: terra.ReferenceResource(aqn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqn *Resource) ImportState(state io.Reader) error {
	aqn.state = &awsQuicksightNamespaceState{}
	if err := json.NewDecoder(state).Decode(aqn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqn.Type(), aqn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqn *Resource) State() (*awsQuicksightNamespaceState, bool) {
	return aqn.state, aqn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqn *Resource) StateMust() *awsQuicksightNamespaceState {
	if aqn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqn.Type(), aqn.LocalName()))
	}
	return aqn.state
}

// Args contains the configurations for aws_quicksight_namespace.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// IdentityStore: string, optional
	IdentityStore terra.StringValue `hcl:"identity_store,attr"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightNamespaceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("aws_account_id"))
}

// CapacityRegion returns a reference to field capacity_region of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) CapacityRegion() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("capacity_region"))
}

// CreationStatus returns a reference to field creation_status of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) CreationStatus() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("creation_status"))
}

// Id returns a reference to field id of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("id"))
}

// IdentityStore returns a reference to field identity_store of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) IdentityStore() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("identity_store"))
}

// Namespace returns a reference to field namespace of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aqn.ref.Append("namespace"))
}

// Tags returns a reference to field tags of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqn.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_namespace.
func (aqn awsQuicksightNamespaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqn.ref.Append("tags_all"))
}

func (aqn awsQuicksightNamespaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqn.ref.Append("timeouts"))
}

type awsQuicksightNamespaceState struct {
	Arn            string            `json:"arn"`
	AwsAccountId   string            `json:"aws_account_id"`
	CapacityRegion string            `json:"capacity_region"`
	CreationStatus string            `json:"creation_status"`
	Id             string            `json:"id"`
	IdentityStore  string            `json:"identity_store"`
	Namespace      string            `json:"namespace"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
