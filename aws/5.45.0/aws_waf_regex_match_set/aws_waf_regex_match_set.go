// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_regex_match_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_waf_regex_match_set.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafRegexMatchSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awrms *Resource) Type() string {
	return "aws_waf_regex_match_set"
}

// LocalName returns the local name for [Resource].
func (awrms *Resource) LocalName() string {
	return awrms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awrms *Resource) Configuration() interface{} {
	return awrms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awrms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awrms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awrms *Resource) Dependencies() terra.Dependencies {
	return awrms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awrms *Resource) LifecycleManagement() *terra.Lifecycle {
	return awrms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awrms *Resource) Attributes() awsWafRegexMatchSetAttributes {
	return awsWafRegexMatchSetAttributes{ref: terra.ReferenceResource(awrms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awrms *Resource) ImportState(state io.Reader) error {
	awrms.state = &awsWafRegexMatchSetState{}
	if err := json.NewDecoder(state).Decode(awrms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awrms.Type(), awrms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awrms *Resource) State() (*awsWafRegexMatchSetState, bool) {
	return awrms.state, awrms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awrms *Resource) StateMust() *awsWafRegexMatchSetState {
	if awrms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awrms.Type(), awrms.LocalName()))
	}
	return awrms.state
}

// Args contains the configurations for aws_waf_regex_match_set.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegexMatchTuple: min=0
	RegexMatchTuple []RegexMatchTuple `hcl:"regex_match_tuple,block" validate:"min=0"`
}

type awsWafRegexMatchSetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_waf_regex_match_set.
func (awrms awsWafRegexMatchSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(awrms.ref.Append("arn"))
}

// Id returns a reference to field id of aws_waf_regex_match_set.
func (awrms awsWafRegexMatchSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awrms.ref.Append("id"))
}

// Name returns a reference to field name of aws_waf_regex_match_set.
func (awrms awsWafRegexMatchSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awrms.ref.Append("name"))
}

func (awrms awsWafRegexMatchSetAttributes) RegexMatchTuple() terra.SetValue[RegexMatchTupleAttributes] {
	return terra.ReferenceAsSet[RegexMatchTupleAttributes](awrms.ref.Append("regex_match_tuple"))
}

type awsWafRegexMatchSetState struct {
	Arn             string                 `json:"arn"`
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	RegexMatchTuple []RegexMatchTupleState `json:"regex_match_tuple"`
}
