// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_theme

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// ConfigurationDataColorPalette: optional
	DataColorPalette *ConfigurationDataColorPalette `hcl:"data_color_palette,block"`
	// ConfigurationSheet: optional
	Sheet *ConfigurationSheet `hcl:"sheet,block"`
	// ConfigurationTypography: optional
	Typography *ConfigurationTypography `hcl:"typography,block"`
	// ConfigurationUiColorPalette: optional
	UiColorPalette *ConfigurationUiColorPalette `hcl:"ui_color_palette,block"`
}

type ConfigurationDataColorPalette struct {
	// Colors: list of string, optional
	Colors terra.ListValue[terra.StringValue] `hcl:"colors,attr"`
	// EmptyFillColor: string, optional
	EmptyFillColor terra.StringValue `hcl:"empty_fill_color,attr"`
	// MinMaxGradient: list of string, optional
	MinMaxGradient terra.ListValue[terra.StringValue] `hcl:"min_max_gradient,attr"`
}

type ConfigurationSheet struct {
	// ConfigurationSheetTile: optional
	Tile *ConfigurationSheetTile `hcl:"tile,block"`
	// ConfigurationSheetTileLayout: optional
	TileLayout *ConfigurationSheetTileLayout `hcl:"tile_layout,block"`
}

type ConfigurationSheetTile struct {
	// ConfigurationSheetTileBorder: optional
	Border *ConfigurationSheetTileBorder `hcl:"border,block"`
}

type ConfigurationSheetTileBorder struct {
	// Show: bool, optional
	Show terra.BoolValue `hcl:"show,attr"`
}

type ConfigurationSheetTileLayout struct {
	// ConfigurationSheetTileLayoutGutter: optional
	Gutter *ConfigurationSheetTileLayoutGutter `hcl:"gutter,block"`
	// ConfigurationSheetTileLayoutMargin: optional
	Margin *ConfigurationSheetTileLayoutMargin `hcl:"margin,block"`
}

type ConfigurationSheetTileLayoutGutter struct {
	// Show: bool, optional
	Show terra.BoolValue `hcl:"show,attr"`
}

type ConfigurationSheetTileLayoutMargin struct {
	// Show: bool, optional
	Show terra.BoolValue `hcl:"show,attr"`
}

type ConfigurationTypography struct {
	// ConfigurationTypographyFontFamilies: min=0,max=5
	FontFamilies []ConfigurationTypographyFontFamilies `hcl:"font_families,block" validate:"min=0,max=5"`
}

type ConfigurationTypographyFontFamilies struct {
	// FontFamily: string, optional
	FontFamily terra.StringValue `hcl:"font_family,attr"`
}

type ConfigurationUiColorPalette struct {
	// Accent: string, optional
	Accent terra.StringValue `hcl:"accent,attr"`
	// AccentForeground: string, optional
	AccentForeground terra.StringValue `hcl:"accent_foreground,attr"`
	// Danger: string, optional
	Danger terra.StringValue `hcl:"danger,attr"`
	// DangerForeground: string, optional
	DangerForeground terra.StringValue `hcl:"danger_foreground,attr"`
	// Dimension: string, optional
	Dimension terra.StringValue `hcl:"dimension,attr"`
	// DimensionForeground: string, optional
	DimensionForeground terra.StringValue `hcl:"dimension_foreground,attr"`
	// Measure: string, optional
	Measure terra.StringValue `hcl:"measure,attr"`
	// MeasureForeground: string, optional
	MeasureForeground terra.StringValue `hcl:"measure_foreground,attr"`
	// PrimaryBackground: string, optional
	PrimaryBackground terra.StringValue `hcl:"primary_background,attr"`
	// PrimaryForeground: string, optional
	PrimaryForeground terra.StringValue `hcl:"primary_foreground,attr"`
	// SecondaryBackground: string, optional
	SecondaryBackground terra.StringValue `hcl:"secondary_background,attr"`
	// SecondaryForeground: string, optional
	SecondaryForeground terra.StringValue `hcl:"secondary_foreground,attr"`
	// Success: string, optional
	Success terra.StringValue `hcl:"success,attr"`
	// SuccessForeground: string, optional
	SuccessForeground terra.StringValue `hcl:"success_foreground,attr"`
	// Warning: string, optional
	Warning terra.StringValue `hcl:"warning,attr"`
	// WarningForeground: string, optional
	WarningForeground terra.StringValue `hcl:"warning_foreground,attr"`
}

type Permissions struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) DataColorPalette() terra.ListValue[ConfigurationDataColorPaletteAttributes] {
	return terra.ReferenceAsList[ConfigurationDataColorPaletteAttributes](c.ref.Append("data_color_palette"))
}

func (c ConfigurationAttributes) Sheet() terra.ListValue[ConfigurationSheetAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetAttributes](c.ref.Append("sheet"))
}

func (c ConfigurationAttributes) Typography() terra.ListValue[ConfigurationTypographyAttributes] {
	return terra.ReferenceAsList[ConfigurationTypographyAttributes](c.ref.Append("typography"))
}

func (c ConfigurationAttributes) UiColorPalette() terra.ListValue[ConfigurationUiColorPaletteAttributes] {
	return terra.ReferenceAsList[ConfigurationUiColorPaletteAttributes](c.ref.Append("ui_color_palette"))
}

type ConfigurationDataColorPaletteAttributes struct {
	ref terra.Reference
}

func (dcp ConfigurationDataColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return dcp.ref, nil
}

func (dcp ConfigurationDataColorPaletteAttributes) InternalWithRef(ref terra.Reference) ConfigurationDataColorPaletteAttributes {
	return ConfigurationDataColorPaletteAttributes{ref: ref}
}

func (dcp ConfigurationDataColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcp.ref.InternalTokens()
}

func (dcp ConfigurationDataColorPaletteAttributes) Colors() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("colors"))
}

func (dcp ConfigurationDataColorPaletteAttributes) EmptyFillColor() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("empty_fill_color"))
}

func (dcp ConfigurationDataColorPaletteAttributes) MinMaxGradient() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("min_max_gradient"))
}

type ConfigurationSheetAttributes struct {
	ref terra.Reference
}

func (s ConfigurationSheetAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ConfigurationSheetAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetAttributes {
	return ConfigurationSheetAttributes{ref: ref}
}

func (s ConfigurationSheetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ConfigurationSheetAttributes) Tile() terra.ListValue[ConfigurationSheetTileAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetTileAttributes](s.ref.Append("tile"))
}

func (s ConfigurationSheetAttributes) TileLayout() terra.ListValue[ConfigurationSheetTileLayoutAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetTileLayoutAttributes](s.ref.Append("tile_layout"))
}

type ConfigurationSheetTileAttributes struct {
	ref terra.Reference
}

func (t ConfigurationSheetTileAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigurationSheetTileAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetTileAttributes {
	return ConfigurationSheetTileAttributes{ref: ref}
}

func (t ConfigurationSheetTileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigurationSheetTileAttributes) Border() terra.ListValue[ConfigurationSheetTileBorderAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetTileBorderAttributes](t.ref.Append("border"))
}

type ConfigurationSheetTileBorderAttributes struct {
	ref terra.Reference
}

func (b ConfigurationSheetTileBorderAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b ConfigurationSheetTileBorderAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetTileBorderAttributes {
	return ConfigurationSheetTileBorderAttributes{ref: ref}
}

func (b ConfigurationSheetTileBorderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b ConfigurationSheetTileBorderAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("show"))
}

type ConfigurationSheetTileLayoutAttributes struct {
	ref terra.Reference
}

func (tl ConfigurationSheetTileLayoutAttributes) InternalRef() (terra.Reference, error) {
	return tl.ref, nil
}

func (tl ConfigurationSheetTileLayoutAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetTileLayoutAttributes {
	return ConfigurationSheetTileLayoutAttributes{ref: ref}
}

func (tl ConfigurationSheetTileLayoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tl.ref.InternalTokens()
}

func (tl ConfigurationSheetTileLayoutAttributes) Gutter() terra.ListValue[ConfigurationSheetTileLayoutGutterAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetTileLayoutGutterAttributes](tl.ref.Append("gutter"))
}

func (tl ConfigurationSheetTileLayoutAttributes) Margin() terra.ListValue[ConfigurationSheetTileLayoutMarginAttributes] {
	return terra.ReferenceAsList[ConfigurationSheetTileLayoutMarginAttributes](tl.ref.Append("margin"))
}

type ConfigurationSheetTileLayoutGutterAttributes struct {
	ref terra.Reference
}

func (g ConfigurationSheetTileLayoutGutterAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g ConfigurationSheetTileLayoutGutterAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetTileLayoutGutterAttributes {
	return ConfigurationSheetTileLayoutGutterAttributes{ref: ref}
}

func (g ConfigurationSheetTileLayoutGutterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g ConfigurationSheetTileLayoutGutterAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("show"))
}

type ConfigurationSheetTileLayoutMarginAttributes struct {
	ref terra.Reference
}

func (m ConfigurationSheetTileLayoutMarginAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ConfigurationSheetTileLayoutMarginAttributes) InternalWithRef(ref terra.Reference) ConfigurationSheetTileLayoutMarginAttributes {
	return ConfigurationSheetTileLayoutMarginAttributes{ref: ref}
}

func (m ConfigurationSheetTileLayoutMarginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ConfigurationSheetTileLayoutMarginAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("show"))
}

type ConfigurationTypographyAttributes struct {
	ref terra.Reference
}

func (t ConfigurationTypographyAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigurationTypographyAttributes) InternalWithRef(ref terra.Reference) ConfigurationTypographyAttributes {
	return ConfigurationTypographyAttributes{ref: ref}
}

func (t ConfigurationTypographyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigurationTypographyAttributes) FontFamilies() terra.ListValue[ConfigurationTypographyFontFamiliesAttributes] {
	return terra.ReferenceAsList[ConfigurationTypographyFontFamiliesAttributes](t.ref.Append("font_families"))
}

type ConfigurationTypographyFontFamiliesAttributes struct {
	ref terra.Reference
}

func (ff ConfigurationTypographyFontFamiliesAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff ConfigurationTypographyFontFamiliesAttributes) InternalWithRef(ref terra.Reference) ConfigurationTypographyFontFamiliesAttributes {
	return ConfigurationTypographyFontFamiliesAttributes{ref: ref}
}

func (ff ConfigurationTypographyFontFamiliesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff ConfigurationTypographyFontFamiliesAttributes) FontFamily() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("font_family"))
}

type ConfigurationUiColorPaletteAttributes struct {
	ref terra.Reference
}

func (ucp ConfigurationUiColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return ucp.ref, nil
}

func (ucp ConfigurationUiColorPaletteAttributes) InternalWithRef(ref terra.Reference) ConfigurationUiColorPaletteAttributes {
	return ConfigurationUiColorPaletteAttributes{ref: ref}
}

func (ucp ConfigurationUiColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ucp.ref.InternalTokens()
}

func (ucp ConfigurationUiColorPaletteAttributes) Accent() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent"))
}

func (ucp ConfigurationUiColorPaletteAttributes) AccentForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) Danger() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger"))
}

func (ucp ConfigurationUiColorPaletteAttributes) DangerForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension"))
}

func (ucp ConfigurationUiColorPaletteAttributes) DimensionForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) Measure() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure"))
}

func (ucp ConfigurationUiColorPaletteAttributes) MeasureForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) PrimaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_background"))
}

func (ucp ConfigurationUiColorPaletteAttributes) PrimaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) SecondaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_background"))
}

func (ucp ConfigurationUiColorPaletteAttributes) SecondaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) Success() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success"))
}

func (ucp ConfigurationUiColorPaletteAttributes) SuccessForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success_foreground"))
}

func (ucp ConfigurationUiColorPaletteAttributes) Warning() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning"))
}

func (ucp ConfigurationUiColorPaletteAttributes) WarningForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning_foreground"))
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigurationState struct {
	DataColorPalette []ConfigurationDataColorPaletteState `json:"data_color_palette"`
	Sheet            []ConfigurationSheetState            `json:"sheet"`
	Typography       []ConfigurationTypographyState       `json:"typography"`
	UiColorPalette   []ConfigurationUiColorPaletteState   `json:"ui_color_palette"`
}

type ConfigurationDataColorPaletteState struct {
	Colors         []string `json:"colors"`
	EmptyFillColor string   `json:"empty_fill_color"`
	MinMaxGradient []string `json:"min_max_gradient"`
}

type ConfigurationSheetState struct {
	Tile       []ConfigurationSheetTileState       `json:"tile"`
	TileLayout []ConfigurationSheetTileLayoutState `json:"tile_layout"`
}

type ConfigurationSheetTileState struct {
	Border []ConfigurationSheetTileBorderState `json:"border"`
}

type ConfigurationSheetTileBorderState struct {
	Show bool `json:"show"`
}

type ConfigurationSheetTileLayoutState struct {
	Gutter []ConfigurationSheetTileLayoutGutterState `json:"gutter"`
	Margin []ConfigurationSheetTileLayoutMarginState `json:"margin"`
}

type ConfigurationSheetTileLayoutGutterState struct {
	Show bool `json:"show"`
}

type ConfigurationSheetTileLayoutMarginState struct {
	Show bool `json:"show"`
}

type ConfigurationTypographyState struct {
	FontFamilies []ConfigurationTypographyFontFamiliesState `json:"font_families"`
}

type ConfigurationTypographyFontFamiliesState struct {
	FontFamily string `json:"font_family"`
}

type ConfigurationUiColorPaletteState struct {
	Accent              string `json:"accent"`
	AccentForeground    string `json:"accent_foreground"`
	Danger              string `json:"danger"`
	DangerForeground    string `json:"danger_foreground"`
	Dimension           string `json:"dimension"`
	DimensionForeground string `json:"dimension_foreground"`
	Measure             string `json:"measure"`
	MeasureForeground   string `json:"measure_foreground"`
	PrimaryBackground   string `json:"primary_background"`
	PrimaryForeground   string `json:"primary_foreground"`
	SecondaryBackground string `json:"secondary_background"`
	SecondaryForeground string `json:"secondary_foreground"`
	Success             string `json:"success"`
	SuccessForeground   string `json:"success_foreground"`
	Warning             string `json:"warning"`
	WarningForeground   string `json:"warning_foreground"`
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
