// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_theme

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataConfigurationAttributes struct {
	ref terra.Reference
}

func (c DataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataConfigurationAttributes) InternalWithRef(ref terra.Reference) DataConfigurationAttributes {
	return DataConfigurationAttributes{ref: ref}
}

func (c DataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataConfigurationAttributes) DataColorPalette() terra.ListValue[DataConfigurationDataColorPaletteAttributes] {
	return terra.ReferenceAsList[DataConfigurationDataColorPaletteAttributes](c.ref.Append("data_color_palette"))
}

func (c DataConfigurationAttributes) Sheet() terra.ListValue[DataConfigurationSheetAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetAttributes](c.ref.Append("sheet"))
}

func (c DataConfigurationAttributes) Typography() terra.ListValue[DataConfigurationTypographyAttributes] {
	return terra.ReferenceAsList[DataConfigurationTypographyAttributes](c.ref.Append("typography"))
}

func (c DataConfigurationAttributes) UiColorPalette() terra.ListValue[DataConfigurationUiColorPaletteAttributes] {
	return terra.ReferenceAsList[DataConfigurationUiColorPaletteAttributes](c.ref.Append("ui_color_palette"))
}

type DataConfigurationDataColorPaletteAttributes struct {
	ref terra.Reference
}

func (dcp DataConfigurationDataColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return dcp.ref, nil
}

func (dcp DataConfigurationDataColorPaletteAttributes) InternalWithRef(ref terra.Reference) DataConfigurationDataColorPaletteAttributes {
	return DataConfigurationDataColorPaletteAttributes{ref: ref}
}

func (dcp DataConfigurationDataColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcp.ref.InternalTokens()
}

func (dcp DataConfigurationDataColorPaletteAttributes) Colors() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("colors"))
}

func (dcp DataConfigurationDataColorPaletteAttributes) EmptyFillColor() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("empty_fill_color"))
}

func (dcp DataConfigurationDataColorPaletteAttributes) MinMaxGradient() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("min_max_gradient"))
}

type DataConfigurationSheetAttributes struct {
	ref terra.Reference
}

func (s DataConfigurationSheetAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataConfigurationSheetAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetAttributes {
	return DataConfigurationSheetAttributes{ref: ref}
}

func (s DataConfigurationSheetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataConfigurationSheetAttributes) Tile() terra.ListValue[DataConfigurationSheetTileAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetTileAttributes](s.ref.Append("tile"))
}

func (s DataConfigurationSheetAttributes) TileLayout() terra.ListValue[DataConfigurationSheetTileLayoutAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetTileLayoutAttributes](s.ref.Append("tile_layout"))
}

type DataConfigurationSheetTileAttributes struct {
	ref terra.Reference
}

func (t DataConfigurationSheetTileAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataConfigurationSheetTileAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetTileAttributes {
	return DataConfigurationSheetTileAttributes{ref: ref}
}

func (t DataConfigurationSheetTileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataConfigurationSheetTileAttributes) Border() terra.ListValue[DataConfigurationSheetTileBorderAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetTileBorderAttributes](t.ref.Append("border"))
}

type DataConfigurationSheetTileBorderAttributes struct {
	ref terra.Reference
}

func (b DataConfigurationSheetTileBorderAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DataConfigurationSheetTileBorderAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetTileBorderAttributes {
	return DataConfigurationSheetTileBorderAttributes{ref: ref}
}

func (b DataConfigurationSheetTileBorderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DataConfigurationSheetTileBorderAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("show"))
}

type DataConfigurationSheetTileLayoutAttributes struct {
	ref terra.Reference
}

func (tl DataConfigurationSheetTileLayoutAttributes) InternalRef() (terra.Reference, error) {
	return tl.ref, nil
}

func (tl DataConfigurationSheetTileLayoutAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetTileLayoutAttributes {
	return DataConfigurationSheetTileLayoutAttributes{ref: ref}
}

func (tl DataConfigurationSheetTileLayoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tl.ref.InternalTokens()
}

func (tl DataConfigurationSheetTileLayoutAttributes) Gutter() terra.ListValue[DataConfigurationSheetTileLayoutGutterAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetTileLayoutGutterAttributes](tl.ref.Append("gutter"))
}

func (tl DataConfigurationSheetTileLayoutAttributes) Margin() terra.ListValue[DataConfigurationSheetTileLayoutMarginAttributes] {
	return terra.ReferenceAsList[DataConfigurationSheetTileLayoutMarginAttributes](tl.ref.Append("margin"))
}

type DataConfigurationSheetTileLayoutGutterAttributes struct {
	ref terra.Reference
}

func (g DataConfigurationSheetTileLayoutGutterAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataConfigurationSheetTileLayoutGutterAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetTileLayoutGutterAttributes {
	return DataConfigurationSheetTileLayoutGutterAttributes{ref: ref}
}

func (g DataConfigurationSheetTileLayoutGutterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataConfigurationSheetTileLayoutGutterAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("show"))
}

type DataConfigurationSheetTileLayoutMarginAttributes struct {
	ref terra.Reference
}

func (m DataConfigurationSheetTileLayoutMarginAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DataConfigurationSheetTileLayoutMarginAttributes) InternalWithRef(ref terra.Reference) DataConfigurationSheetTileLayoutMarginAttributes {
	return DataConfigurationSheetTileLayoutMarginAttributes{ref: ref}
}

func (m DataConfigurationSheetTileLayoutMarginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DataConfigurationSheetTileLayoutMarginAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("show"))
}

type DataConfigurationTypographyAttributes struct {
	ref terra.Reference
}

func (t DataConfigurationTypographyAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataConfigurationTypographyAttributes) InternalWithRef(ref terra.Reference) DataConfigurationTypographyAttributes {
	return DataConfigurationTypographyAttributes{ref: ref}
}

func (t DataConfigurationTypographyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataConfigurationTypographyAttributes) FontFamilies() terra.ListValue[DataConfigurationTypographyFontFamiliesAttributes] {
	return terra.ReferenceAsList[DataConfigurationTypographyFontFamiliesAttributes](t.ref.Append("font_families"))
}

type DataConfigurationTypographyFontFamiliesAttributes struct {
	ref terra.Reference
}

func (ff DataConfigurationTypographyFontFamiliesAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff DataConfigurationTypographyFontFamiliesAttributes) InternalWithRef(ref terra.Reference) DataConfigurationTypographyFontFamiliesAttributes {
	return DataConfigurationTypographyFontFamiliesAttributes{ref: ref}
}

func (ff DataConfigurationTypographyFontFamiliesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff DataConfigurationTypographyFontFamiliesAttributes) FontFamily() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("font_family"))
}

type DataConfigurationUiColorPaletteAttributes struct {
	ref terra.Reference
}

func (ucp DataConfigurationUiColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return ucp.ref, nil
}

func (ucp DataConfigurationUiColorPaletteAttributes) InternalWithRef(ref terra.Reference) DataConfigurationUiColorPaletteAttributes {
	return DataConfigurationUiColorPaletteAttributes{ref: ref}
}

func (ucp DataConfigurationUiColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ucp.ref.InternalTokens()
}

func (ucp DataConfigurationUiColorPaletteAttributes) Accent() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) AccentForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) Danger() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) DangerForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) DimensionForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) Measure() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) MeasureForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) PrimaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_background"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) PrimaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) SecondaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_background"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) SecondaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) Success() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) SuccessForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success_foreground"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) Warning() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning"))
}

func (ucp DataConfigurationUiColorPaletteAttributes) WarningForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning_foreground"))
}

type DataPermissionsAttributes struct {
	ref terra.Reference
}

func (p DataPermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataPermissionsAttributes) InternalWithRef(ref terra.Reference) DataPermissionsAttributes {
	return DataPermissionsAttributes{ref: ref}
}

func (p DataPermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataPermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p DataPermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type DataConfigurationState struct {
	DataColorPalette []DataConfigurationDataColorPaletteState `json:"data_color_palette"`
	Sheet            []DataConfigurationSheetState            `json:"sheet"`
	Typography       []DataConfigurationTypographyState       `json:"typography"`
	UiColorPalette   []DataConfigurationUiColorPaletteState   `json:"ui_color_palette"`
}

type DataConfigurationDataColorPaletteState struct {
	Colors         []string `json:"colors"`
	EmptyFillColor string   `json:"empty_fill_color"`
	MinMaxGradient []string `json:"min_max_gradient"`
}

type DataConfigurationSheetState struct {
	Tile       []DataConfigurationSheetTileState       `json:"tile"`
	TileLayout []DataConfigurationSheetTileLayoutState `json:"tile_layout"`
}

type DataConfigurationSheetTileState struct {
	Border []DataConfigurationSheetTileBorderState `json:"border"`
}

type DataConfigurationSheetTileBorderState struct {
	Show bool `json:"show"`
}

type DataConfigurationSheetTileLayoutState struct {
	Gutter []DataConfigurationSheetTileLayoutGutterState `json:"gutter"`
	Margin []DataConfigurationSheetTileLayoutMarginState `json:"margin"`
}

type DataConfigurationSheetTileLayoutGutterState struct {
	Show bool `json:"show"`
}

type DataConfigurationSheetTileLayoutMarginState struct {
	Show bool `json:"show"`
}

type DataConfigurationTypographyState struct {
	FontFamilies []DataConfigurationTypographyFontFamiliesState `json:"font_families"`
}

type DataConfigurationTypographyFontFamiliesState struct {
	FontFamily string `json:"font_family"`
}

type DataConfigurationUiColorPaletteState struct {
	Accent              string `json:"accent"`
	AccentForeground    string `json:"accent_foreground"`
	Danger              string `json:"danger"`
	DangerForeground    string `json:"danger_foreground"`
	Dimension           string `json:"dimension"`
	DimensionForeground string `json:"dimension_foreground"`
	Measure             string `json:"measure"`
	MeasureForeground   string `json:"measure_foreground"`
	PrimaryBackground   string `json:"primary_background"`
	PrimaryForeground   string `json:"primary_foreground"`
	SecondaryBackground string `json:"secondary_background"`
	SecondaryForeground string `json:"secondary_foreground"`
	Success             string `json:"success"`
	SuccessForeground   string `json:"success_foreground"`
	Warning             string `json:"warning"`
	WarningForeground   string `json:"warning_foreground"`
}

type DataPermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}
